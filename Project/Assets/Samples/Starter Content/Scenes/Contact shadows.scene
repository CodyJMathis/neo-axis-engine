// Made with NeoAxis Engine 2023.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1145, 842\"><KW V=\"1\" A=\"753675821D3D4864C598A4CF85FBC750\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"D4B72E7FD9B247A81E8E6C34D3B88874\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"753675821D3D4864C598A4CF85FBC750\"><KP UN=\"753675821D3D4864C598A4CF85FBC750\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"CDCBE92292624FA1BAAD447ED8455689\" S=\"False\"><CPD ObjPath=\"$Button\\$$n1$C# Script\" /></KP><KP UN=\"654BBC52A8A9476DB398309225BD08C4\" S=\"False\"><CPD ObjPath=\"$Regulator Switch\\$$n1$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "0.780296661393584 -0.827873593231971 1.87391728940731; -0.155069397560121 0.33386747900715 0.391663389536641 0.843259021711847; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "4.69054566963318 -1.14427086482382 2.75885926766515; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		Brightness = 150000
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
		ShadowContact = True
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		UseBuiltInCamera = FirstPerson
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
		ObjectControlledByPlayer
		{
			GetByReference = "this:..\\$Character"
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Content\\Materials\\Basic Library\\Ground\\Forest Ground 03.material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.5 0.5
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform
			{
				GetByReference = "this:..\\Transform"
			}
			.component NeoAxis.CollisionShape_Mesh
			{
				Mesh
				{
					GetByReference = "this:..\\..\\Mesh"
				}
				Vertices
				{
				}
				Indices
				{
				}
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "0 0 0.5; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Sphere
			{
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "4.70197196338417 5.77635926158248 0.500000000000008; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Box
			{
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "5.83784400973029 1.75981764467444 0.499999999999976; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Cylinder
			{
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box 2
		CanBeSelected = False
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "-1.24451692055514 4.85612266989406 1.00549997886235; 0 0 0.283193019671898 0.959062935165942; 2 1 2"
			.component NeoAxis.CollisionShape_Box
			{
			}
		}
	}
	.component NeoAxis.ButtonInSpace
	{
		Name = Button
		Transform = "-1.3658208777314 4.15177148121879 1.32489341333328; 0 0 -0.478282120422081 0.878206247577731; 1 1 1"
		Color = 0.6784314 0.6784314 0.6784314
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.3 0.3
				Material
				{
					GetByReference = "Base\\Materials\\White.material"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Button
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.15 0.15
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.05 0 0
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Indicator
			Color = 0.5 0.5 0.5
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 0 0.12
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			Code = "public void InteractiveObjectButton_UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar _this = sender as ButtonInSpace;\r\n\tif (_this != null)\r\n\t{\r\n\t\tvar indicator = _this.GetComponent(\"Indicator\") as MeshInSpace;\r\n\t\tif (indicator != null)\r\n\t\t\tindicator.Color = _this.Activated ? new ColorValue(0, 1, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar buttonOffset = _this.Components.GetByPath(\"Button\\\\Attach Transform Offset\") as TransformOffset;\r\n\t\tif (buttonOffset != null)\r\n\t\t{\r\n\t\t\tvar offsetPushed = 0.01;\r\n\t\t\tvar offsetDefault = 0.05;\r\n\r\n\t\t\tvar coef = 0.0;\r\n\t\t\tif (_this.Clicking && _this.ClickingTotalTime != 0)\r\n\t\t\t{\r\n\t\t\t\tvar timeFactor = MathEx.Saturate(_this.ClickingCurrentTime / _this.ClickingTotalTime);\r\n\r\n\t\t\t\tif(timeFactor < 0.5)\r\n\t\t\t\t\tcoef = timeFactor * 2;\r\n\t\t\t\telse\r\n\t\t\t\t\tcoef = (1.0f - timeFactor) * 2;\r\n\t\t\t}\r\n\r\n\t\t\tvar offset = MathEx.Lerp(offsetDefault, offsetPushed, coef);\r\n\t\t\tbuttonOffset.PositionOffset = new Vector3(offset, 0, 0);\r\n\t\t}\r\n\t}\r\n}"
			__parameter_Delta = 0
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler UpdateEvent
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:UpdateEvent"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:InteractiveObjectButton_UpdateEvent(NeoAxis.Component,System.Single)"
				}
				HandlerFlow
				{
				}
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			Code = "public void Button_Click(NeoAxis.ButtonInSpace sender)\r\n{\r\n\tvar scene = sender.ParentScene;\r\n\r\n\tvar ground = scene.GetComponent(\"Ground\") as MeshInSpace;\r\n\tif (ground != null)\r\n\t{\r\n\t\tif (!ground.ReplaceMaterial.ReferenceSpecified)\r\n\t\t{\r\n\t\t\tground.ReplaceMaterial = ReferenceUtility.MakeReference(\r\n\t\t\t\t@\"Content\\Materials\\Basic Library\\Concrete\\Concrete Floor 01.material\");\r\n\t\t}\r\n\t\telse\r\n\t\t\tground.ReplaceMaterial = null;\r\n\t}\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler Click
				Event
				{
					GetByReference = "this:..\\..\\event:Click"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:Button_Click(NeoAxis.ButtonInSpace)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.RegulatorSwitchInSpace
	{
		Name = Regulator Switch
		Transform = "-0.572169875907708 4.66559510889641 1.31229185132108; 0 0 -0.48183375394467 0.876262651012576; 1 1 1"
		Color = 0.6784314 0.6784314 0.6784314
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.3 0.3
				Material
				{
					GetByReference = "Base\\Materials\\White.material"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Button
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.08
					Height = 0.08
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.05 0 0
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Indicator Min
			Color = 1 0 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 -0.11 0.11
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Indicator Max
			Color = 0.5 0.5 0.5
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 0.11 0.11
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Marker Min
			Color = 1 0 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.01 -0.0282842712474619 0.0282842712474619
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Marker Max
			Color = 0 1 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.01 0.0282842712474619 0.0282842712474619
				RotationOffset = 0.38268343236509 0 -0 0.923879532511287
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Marker Current
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.06 -0.0282842712474619 0.0282842712474619
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			Code = "public void InteractiveObjectButton_UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar _this = sender as RegulatorSwitchInSpace;\r\n\tif (_this != null)\r\n\t{\r\n\t\tvar indicatorMin = _this.GetComponent(\"Indicator Min\") as MeshInSpace;\r\n\t\tif (indicatorMin != null)\r\n\t\t\tindicatorMin.Color = _this.Value.Value <= _this.ValueRange.Value.Minimum ? new ColorValue(1, 0, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar indicatorMax = _this.GetComponent(\"Indicator Max\") as MeshInSpace;\r\n\t\tif (indicatorMax != null)\r\n\t\t\tindicatorMax.Color = _this.Value.Value >= _this.ValueRange.Value.Maximum ? new ColorValue(0, 1, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar button = _this.GetComponent(\"Button\");\r\n\t\tif (button != null)\r\n\t\t{\r\n\t\t\tvar offset = button.GetComponent<TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.GetValueAngle() - 90;\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerMin = _this.GetComponent(\"Marker Min\");\r\n\t\tif (markerMin != null)\r\n\t\t{\r\n\t\t\tvar offset = markerMin.GetComponent<TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.AngleRange.Value.Minimum - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.01, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerMax = _this.GetComponent(\"Marker Max\");\r\n\t\tif (markerMax != null)\r\n\t\t{\r\n\t\t\tvar offset = markerMax.GetComponent<TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.AngleRange.Value.Maximum - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.01, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerCurrent = _this.GetComponent(\"Marker Current\");\r\n\t\tif (markerCurrent != null)\r\n\t\t{\r\n\t\t\tvar offset = markerCurrent.GetComponent<TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.GetValueAngle() - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.06, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
			__parameter_Delta = 0
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler UpdateEvent
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:UpdateEvent"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:InteractiveObjectButton_UpdateEvent(NeoAxis.Component,System.Single)"
				}
				HandlerFlow
				{
				}
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			Code = "public void RegulatorSwitch_ValueChanged(NeoAxis.RegulatorSwitchInSpace obj)\r\n{\r\n\tvar scene = obj.ParentScene;\r\n\r\n\tvar ground = scene.GetComponent(\"Ground\") as MeshInSpace;\r\n\tif (ground != null)\r\n\t\tground.Color = ColorValue.Lerp(new ColorValue(1, 1, 1), new ColorValue(0.4, 0.9, 0.4), (float)obj.Value);\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler ValueChanged
				Event
				{
					GetByReference = "this:..\\..\\event:ValueChanged"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:RegulatorSwitch_ValueChanged(NeoAxis.RegulatorSwitchInSpace)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Weapon
	{
		Name = Weapon
		Transform = "4.82441706724031 -0.191408804369556 0.292833875914801; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "Content\\Weapons\\Default\\scene.gltf|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere 2
		Transform = "2.11366578559508 0.574578323366725 0.044523618375656; 0 0 0 1; 0.656612530783134 0.656612530783134 0.656612530783134"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
				Radius = 0.05
				SegmentsHorizontal = 10
				SegmentsVertical = 10
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere 3
		Transform = "2.11366578559508 1.92675970628177 0.044523618375656; 0 0 0 1; 0.656612530783134 0.656612530783134 0.656612530783134"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
				Radius = 0.05
				SegmentsHorizontal = 10
				SegmentsVertical = 10
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere 4
		Transform = "0.880638825663165 1.92675970628177 0.044523618375656; 0 0 0 1; 0.656612530783134 0.656612530783134 0.656612530783134"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
				Radius = 0.05
				SegmentsHorizontal = 10
				SegmentsVertical = 10
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere 5
		Transform = "3.44566149232507 0.996326565731005 0.044523618375656; 0 0 0 1; 0.656612530783134 0.656612530783134 0.656612530783134"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
				Radius = 0.05
				SegmentsHorizontal = 10
				SegmentsVertical = 10
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere 6
		Transform = "1.18230801481419 0.373790434891962 0.044523618375656; 0 0 0 1; 0.656612530783134 0.656612530783134 0.656612530783134"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
				Radius = 0.05
				SegmentsHorizontal = 10
				SegmentsVertical = 10
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box 3
		Transform = "3.03493489463992 -0.145744706335866 0.0223329884908896; 0 0 0 1; 0.938955912709015 0.938955912709015 0.938955912709015"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.05 0.05
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box 4
		Transform = "2.6347967672934 1.1882013462333 0.0223329884908896; 0 0 0 1; 0.938955912709015 0.938955912709015 0.938955912709015"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.05 0.05
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box 5
		Transform = "1.28743425451434 1.10294609984855 0.0223329884908896; 0 0 0 1; 0.938955912709015 0.938955912709015 0.938955912709015"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.05 0.05
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character
		Transform = "2.73433787950306 -1.61739252249622 0.0136762175915015; 0 0 0.766044443118978 0.642787609686539; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterInputProcessing
		{
			Name = Character Input Processing
		}
	}
}
