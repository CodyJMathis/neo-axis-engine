// Made with NeoAxis Engine 2024.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1144, 842\"><KW V=\"1\" A=\"310545DD335D4AD9FE96430BFAEEBF3E\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"C630C0C8A0F34DA29D9F0F23F71F90E8\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"310545DD335D4AD9FE96430BFAEEBF3E\"><KP UN=\"310545DD335D4AD9FE96430BFAEEBF3E\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"84BBCE8423AF4E2DEEA9B53CD79D0ABB\" S=\"False\"><CPD ObjPath=\"$Button\\$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "2.46461101812212 -3.42926314779684 4.28679055848748; -0.195347886221626 0.20402841634299 0.663411072294512 0.692890581427083; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		Brightness = 200000
		Color = 0.9776863 1 0.8843137
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
		ShadowBias = 1
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		ShadowIntensity = 0.5
		ShadowDirectionalDistance = 70
		ShadowPointSpotlightDistance = 70
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_Bloom
			{
				Name = Bloom
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		UseBuiltInCamera = ThirdPerson
		ThirdPersonCameraHorizontalAngle = 89.99999803884887
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
		ObjectControlledByPlayer
		{
			GetByReference = "this:..\\$Character"
		}
	}
	.component NeoAxis.NetworkLogic
	{
		Name = Network Logic
	}
	.component NeoAxis.Terrain
	{
		Name = Terrain
		HorizontalSize = 1000
		MaterialUV0 = 0.5 0.5
		MaterialColor = 0.6784314 0.6784314 0.6784314
		HeightmapBuffer = ""
		HeightmapBufferZip = True
		Holes
		{
			Count = 0
		}
		Material
		{
			GetByReference = "Content\\Materials\\Basic Library\\Asphalt\\Asphalt 015.material"
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "-0.239901421367235 0 0.5; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Sphere
			{
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "5.63011882753456 -0.207767086992405 0.499999999999976; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Cylinder
			{
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Vehicle
	{
		Name = Vehicle
		Transform = "7.03343101763601 7.82458089531849 0.360974280912682; 0 0 -0.940978423800316 0.338466550699286; 1 1 1"
		Collision = True
		Health = 50
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		ObjectsOnSeats
		{
			Count = 0
		}
	}
	.component NeoAxis.Character
	{
		Name = Character
		Transform = "2.57404077801957 -0.225968483843878 0.00000020776621446; 0 0 0.70710676908493 0.70710676908493; 1 1 1"
		Collision = True
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterInputProcessing
		{
			Name = Character Input Processing
		}
	}
	.component NeoAxis.Vehicle
	{
		Name = Vehicle 2
		Transform = "-1.14283267646889 7.88493704959085 0.781042926747468; -0.00018653371080291 -0.00036036301753484 -0.236915618181229 0.971530258655548; 1 1 1"
		Collision = True
		Health = 100
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		VehicleType
		{
			GetByReference = "Content\\Vehicles\\NeoAxis\\Ferret Scout Car\\Ferret Scout Car.vehicletype"
		}
		ObjectsOnSeats
		{
			Count = 0
		}
	}
	.component NeoAxis.SpawnPoint
	{
		Name = Spawn Point
		Transform = "7.27782600415582 -1.18026332467022 0.0752077078896578; 0 0 0.707106781186548 0.707106781186548; 1 1 1"
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box
		Transform = "-1.5 2.5 0.5; 0 0 0 1; 0.2 0.5 2.2"
		Color = 0.1372549 0.1372549 0.1372549
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\White.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Mesh Geometry
			}
		}
	}
	.component NeoAxis.Button
	{
		Name = Button
		Transform = "-1.37663702575556 2.5 1.25136197296495; 0 0 0 1; 1 1 1"
		SwitchActivateOnClick = False
		Mesh
		{
			GetByReference = "Content\\Buttons\\Default\\Base.mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			NetworkMode = False
			Code = "public void Button_Click(NeoAxis.Button sender, NeoAxis.Component initiator)\r\n{\r\n\t//put characters to free seats\r\n\r\n\tvar scene = sender.ParentScene;\r\n\tvar gameMode = (GameMode)scene.GetGameMode();\r\n\tvar playerCharacter = initiator as Character;\r\n\tif(playerCharacter == null)\r\n\t\treturn;\r\n\t\r\n\tforeach (var vehicle in scene.GetComponents<Vehicle>())\r\n\t{\r\n\t\tdo\r\n\t\t{\r\n\t\t\t//find a free seat\r\n\t\t\tvar seatIndex = vehicle.GetFreeSeat();\r\n\t\t\tif (seatIndex == -1)\r\n\t\t\t\tbreak;\r\n\r\n\t\t\t//create a new character with the type of the player character\r\n\t\t\tvar character = scene.CreateComponent<Character>(enabled: false);\r\n\t\t\tcharacter.CharacterType = playerCharacter.CharacterType;\r\n\t\t\tcharacter.Enabled = true;\r\n\r\n\t\t\t//put to the seat\r\n\t\t\tvehicle.PutObjectToSeat(gameMode, seatIndex, character);\r\n\t\t}\r\n\t\twhile (true);\r\n\t}\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler Click
				Event
				{
					GetByReference = "this:..\\..\\event:Click"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:Button_Click(NeoAxis.Button,NeoAxis.Component)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
}
