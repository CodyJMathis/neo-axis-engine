// Made with NeoAxis Engine 2023.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1155, 842\"><KW V=\"1\" A=\"9D09D0F8809146881CB36CAB26E17BA1\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"D1A5EB0B19AE4FE26E8F19BE8D2481BC\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"9D09D0F8809146881CB36CAB26E17BA1\"><KP UN=\"9D09D0F8809146881CB36CAB26E17BA1\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"333FE5E5BCBF424106802DE6B0F1C4BB\" S=\"False\"><CPD ObjPath=\"$C# Script\" /></KP><KP UN=\"44CB650E88D7403C74B9E364EF8F5C70\" S=\"False\"><CPD ObjPath=\"$Cylinder\\$Material\\$Shader graph\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "2.63325982225927 -4.99066189132576 4.45503699273912; -0.202721912970204 0.20071618901923 0.6810839016025 0.674345279842021; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_Bloom
			{
				Name = Bloom
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform
			{
				GetByReference = "this:..\\Transform"
			}
			.component NeoAxis.CollisionShape_Mesh
			{
				Mesh
				{
					GetByReference = "this:..\\..\\Mesh"
				}
				Vertices
				{
				}
				Indices
				{
				}
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Sphere
		Transform = "-1 1.5 0.5; 0 0 0 1; 1 1 1"
		Color = 0.5 0.5112152 0.5
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "root:$Sphere\\$Material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Sphere
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.Material
		{
			Name = Material
			BaseColor = 0.94 0.94 0.94
			.component NeoAxis.FlowGraph
			{
				Name = Shader graph
				EditorScrollPosition = 0 0
				Specialization
				{
					GetByReference = NeoAxis.FlowGraphSpecialization_Shader|Instance
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Material
					Position = 10 -7
					ControlledObject
					{
						GetByReference = "this:..\\.."
					}
				}
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Box
		Transform = "2.5 -0.5 0.5; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "root:$Box\\$Material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Box
			{
				Name = Box
			}
		}
		.component NeoAxis.Material
		{
			Name = Material
			BaseColor = 0.7 0.7 0.7
			Emissive = 0 0.2243034 0
			.component NeoAxis.FlowGraph
			{
				Name = Shader graph
				EditorScrollPosition = 0 0
				Specialization
				{
					GetByReference = NeoAxis.FlowGraphSpecialization_Shader|Instance
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Material
					Position = 10 -7
					ControlledObject
					{
						GetByReference = "this:..\\.."
					}
				}
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform = "6.83784400973029 1.75981764467444 0.499999999999976; 0 0 0 1; 1 1 1"
		Color = 0.7 0.7 0.7
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "root:$Cylinder\\$Material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.Material
		{
			Name = Material
			BaseColor = 0.7 0.7 0.7
			Multiplier = 1 1 1.224303
			Emissive
			{
				GetByReference = "this:$Shader graph\\$Node Invoke Member 1\\$Invoke Member\\__parameter_ReturnValue"
			}
			.component NeoAxis.FlowGraph
			{
				Name = Shader graph
				EditorScrollPosition = -1.29411764705882 -0.764705882352941
				Specialization
				{
					GetByReference = NeoAxis.FlowGraphSpecialization_Shader|Instance
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Material
					Position = 10 -7
					ControlledObject
					{
						GetByReference = "this:..\\.."
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Texture Sample 1
					Position = -26 -14
					ControlledObject
					{
						GetByReference = "this:$Texture Sample"
					}
					.component NeoAxis.ShaderTextureSample
					{
						Name = Texture Sample
						Location2 = 0 0
						Location3 = 0 0 0
						Texture
						{
							GetByReference = "Base\\Images\\Grid1024.png"
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Invoke Member 1
					Position = -8 -7
					ControlledObject
					{
						GetByReference = "this:$Invoke Member"
					}
					.component NeoAxis.InvokeMember
					{
						Name = Invoke Member
						Member
						{
							GetByReference = "NeoAxis.ColorValue|method:op_Multiply(NeoAxis.ColorValue,NeoAxis.ColorValue)"
						}
						Exit
						{
						}
						__parameter_V1
						{
							GetByReference = "this:..\\..\\$Node Texture Sample 1\\$Texture Sample\\RGBA"
						}
						__parameter_V2
						{
							GetByReference = "this:..\\..\\$Node Shader Parameter 1\\$Shader Parameter\\Output"
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Shader Parameter 1
					Position = -26 0
					ControlledObject
					{
						GetByReference = "this:$Shader Parameter"
					}
					.component NeoAxis.ShaderParameter
					{
						Name = Shader Parameter
						Source
						{
							GetByReference = "this:..\\..\\..\\Multiplier"
						}
					}
				}
			}
			.component NeoAxis.VirtualProperty
			{
				Name = Multiplier
				Type
				{
					GetByReference = NeoAxis.ColorValue
				}
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Text2D
	{
		Name = Text 2D
		Transform = "-1 1.5 2; 0 0 0 1; 1 1 1"
		Text = Change Color multiplier of mesh in scene
		Back = True
		BackColor = 0 0.5017255 0.7803922
	}
	.component NeoAxis.Text2D
	{
		Name = Text 2D 3
		Transform = "2.5 -0.5 2; 0 0 0 1; 1 1 1"
		Text = Change Emissive material property
		Back = True
		BackColor = 0 0.5017255 0.7803922
	}
	.component NeoAxis.Text2D
	{
		Name = Text 2D 2
		Transform = "6.32511794954256 1.75981764467444 1.99999999999998; 0 0 0 1; 1 1 1"
		Text = Use public parameter of visually scripted material
		Back = True
		BackColor = 0 0.5017255 0.7803922
	}
	.component NeoAxis.CSharpScript
	{
		Name = C# Script
		Code = "public void _UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar object1 = sender.Components[\"Sphere\"] as MeshInSpace;\r\n\tif(object1 != null)\r\n\t\tobject1.Color = new ColorValue(0.5, 0.75 + Math.Sin(Time.Current) * 0.25, 0.5);\r\n\r\n\tvar material2 = sender.Components[\"Box\\\\Material\"] as Material;\r\n\tif(material2 != null)\r\n\t\tmaterial2.Emissive = new ColorValuePowered(0, (1.0 + Math.Sin(Time.Current)) * 5, 0);\r\n\t\t\r\n\tvar material3 = sender.Components[\"Cylinder\\\\Material\"] as Material;\r\n\tif(material3 != null)\r\n\t\tmaterial3.PropertySet(\"Multiplier\", new ColorValue(1, 1, 1.0 + (1.0 + Math.Sin(Time.Current)) * 5));\r\n}\r\n"
		__parameter_Delta = 0
		Exit
		{
		}
		.component NeoAxis.EventHandlerComponent
		{
			Name = Event Handler UpdateEvent
			WhenEnable = Editor, Simulation, Instance
			Event
			{
				GetByReference = "this:..\\..\\event:UpdateEvent"
			}
			HandlerMethod
			{
				GetByReference = "this:..\\method:_UpdateEvent(NeoAxis.Component,System.Single)"
			}
			HandlerFlow
			{
			}
		}
	}
}
