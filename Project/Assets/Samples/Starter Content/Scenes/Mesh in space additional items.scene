// Made with NeoAxis Engine 2024.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1144, 842\"><KW V=\"1\" A=\"0594CBAF6E524980DCAA9C4FEFD774A8\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WS UN=\"9B007DCBE46D47EF4AA8A04FE67A6E73\" S=\"T,0,50:T,0,50\" D=\"Vertical\"><WC UN=\"6402651372854909EC96A9F958FB45C0\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"0594CBAF6E524980DCAA9C4FEFD774A8\"><KP UN=\"0594CBAF6E524980DCAA9C4FEFD774A8\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"EDA55A5433E5495A3390CACC15A421D6\" S=\"False\"><CPD ObjPath=\"$SFCrate1\\$C# Script\" /></KP></WC><WC UN=\"88FC3A9E15EB40732EB4E39743BA8E46\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" V=\"False\" SP=\"(null)\"><KP UN=\"EDA55A5433E5495A3390CACC15A421D6\" S=\"True\" V=\"False\"><CPD /></KP></WC></WS></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "1.96655769012022 -4.57289788059662 6.10247362524591; -0.274356132840669 0.273820850545683 0.652460871305972 0.651187888088993; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 60000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		Brightness = 150000
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		ShadowDirectionalDistance = 50
		ShadowPointSpotlightDistance = 50
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
	}
	.component NeoAxis.NetworkLogic
	{
		Name = Network Logic
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = SFCrate1
		Transform = "2 2 0.5; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "Samples\\Starter Content\\Models\\Sci-fi Box\\SFCrate1.fbx|$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			Code = "public void SFCrate1_UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar meshInSpace = (MeshInSpace)sender;\r\n\t\r\n\t//use mesh of the component\r\n\tvar mesh = meshInSpace.Mesh.Value;\r\n\t\r\n\tvar distanceSteps = 5;\r\n\tvar angleSteps = 8;\r\n\r\n\tvar additionalItems = new MeshInSpace.AdditionalItem[distanceSteps * angleSteps];\r\n\r\n\tint currentIndex = 0;\r\n\r\n\tfor (int distanceStep = 0; distanceStep < distanceSteps; distanceStep++)\r\n\t{\r\n\t\tvar distance = (double)distanceStep * 1.0f;\r\n\r\n\t\tfor (int angleStep = 0; angleStep < angleSteps; angleStep++)\r\n\t\t{\r\n\t\t\tvar angle = Math.PI * 2 * angleStep / angleSteps + Time.Current * 0.5;\r\n\r\n\t\t\tvar pos = new Vector3(Math.Cos(angle), Math.Sin(angle), 0) * distance;\r\n\t\t\tvar rot = Quaternion.Identity;\r\n\t\t\tvar scl = new Vector3(0.3 / distance, 0.3 / distance, 0.3 / distance);\r\n\r\n\t\t\tadditionalItems[currentIndex] = new MeshInSpace.AdditionalItem(mesh, pos, rot, scl, new ColorValue(1, 1, 0));\r\n\t\t\tcurrentIndex++;\r\n\t\t}\r\n\t}\r\n\r\n\t/*\r\n\tvar additionalItems = new MeshInSpace.AdditionalItem[1];\r\n\tref var item = ref additionalItems[0];\r\n\titem.Mesh = mesh;\r\n\titem.Position = new Vector3(1, 0, 0);\r\n\titem.Rotation = Quaternion.Identity;;\r\n\titem.Scale = new Vector3(.2, .2, .2);\r\n\titem.Color = new ColorValue(1, 1, 0);\r\n\t*/\r\n\r\n\tmeshInSpace.AdditionalItems = additionalItems;\r\n\r\n\r\n\t//update bounds when need update\r\n\t{\r\n\t\tvar tr = meshInSpace.TransformV;\r\n\t\tvar bounds = new Bounds(-4, -4, -0.5, 4, 4, 0.5);\r\n\t\tvar box = new Box(bounds, tr.Position, tr.Rotation.ToMatrix3());\r\n\t\tmeshInSpace.SpaceBoundsOverride = new SpaceBounds(box.ToBounds());\r\n\t\tmeshInSpace.SpaceBoundsUpdate();\r\n\t}\r\n}\r\n"
			__parameter_Delta = 0
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler UpdateEvent
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:UpdateEvent"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:SFCrate1_UpdateEvent(NeoAxis.Component,System.Single)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = SFCrate 2
		Transform = "-6 10 0.5; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "Samples\\Starter Content\\Models\\Sci-fi Box\\SFCrate1.fbx|$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
}
