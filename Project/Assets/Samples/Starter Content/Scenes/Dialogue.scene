// Made with NeoAxis Engine 2023.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1145, 842\"><KW V=\"1\" A=\"256C67A18D664B0E39BBE68CF4257695\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"195C129810504C44FB9460EF63604BF0\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"256C67A18D664B0E39BBE68CF4257695\"><KP UN=\"256C67A18D664B0E39BBE68CF4257695\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"D9CD5B53C89443169D9923C591371B7B\" S=\"False\"><CPD ObjPath=\"$Character NPC\\$Character AI\\$Flow Graph\" /></KP><KP UN=\"DFA5B071C37B4A7424AB983EE2B2F7B5\" S=\"False\"><CPD ObjPath=\"$Character NPC 2\\$Character AI\\$C# Script\" /></KP><KP UN=\"68E8D0CDBE8546ABFD963DD7C4C33764\" S=\"False\"><CPD ObjPath=\"$Character NPC 3\\$Character AI\\$Flow Graph\" /></KP><KP UN=\"74C93459BDB64C4ECC935E32D66038F8\" S=\"False\"><CPD ObjPath=\"$Character NPC 3\\$Character AI\\$Flow Graph\\$Node C# Script 1\\$C# Script Condition\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "2.54755444460002 -2.98353098885791 3.3491828452653; -0.205616039290485 0.204715715314145 0.678171195612519 0.675201710403193; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		ShadowFarDistance = 50
		ShadowIntensity = 0.5
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		UseBuiltInCamera = ThirdPerson
		ThirdPersonCameraHorizontalAngle = 89.99999999999993
		InventoryWidget = True
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
		ObjectControlledByPlayer
		{
			GetByReference = "this:..\\$Character"
		}
	}
	.component NeoAxis.NetworkLogic
	{
		Name = Network Logic
	}
	.component NeoAxis.SpawnPoint
	{
		Name = Spawn Point
		Transform = "4.49515912893015 -1.55471130674913 1.15; 0 0 0 1; 1 1 1"
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "5.97665728414008 1.08776649683575 0.499999999999976; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Cylinder
			{
			}
		}
	}
	.component NeoAxis.Item
	{
		Name = Item
		Transform = "6.00318240201785 1.10886365773029 1.01917665050136; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Items\\Authors\\NeoAxis\\Key\\Data\\scene.gltf|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		ItemType
		{
			GetByReference = "Content\\Items\\Authors\\NeoAxis\\Key\\Key.itemtype"
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character
		Transform = "2.50185359899021 -1.22914356831118 0; 0 0 0.707106781186547 0.707106781186548; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterInputProcessing
		{
			Name = Character Input Processing
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			NetworkMode = False
			LookingForFoodModeIdleTime = 10
		}
	}
	.component NeoAxis.Character
	{
		Name = Character NPC
		Transform = "-1.75609749473424 4.48044548455324 0.00000017460560819; 0 0 -0.481296986341476 0.876557588577271; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			PermanentMessage = Flow graph based dialogue
			AllowInteract = True
			LookAtControlledCharacterByPlayerDistance = 5
			LookingForFoodModeIdleTime = 10
			DialogueFlow
			{
				GetByReference = "this:$Flow Graph\\$Node Flow Dialogue Message 1"
			}
			.component NeoAxis.FlowGraph
			{
				Name = Flow Graph
				NetworkMode = False
				EditorScrollPosition = 6 -1.70588235294118
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 1
					Position = -13 -9
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = Hi! I am Remy. Are you looking for something?
						AnswerText0 = Hi Remy! Please tell me how to make a dialogue like this?
						AnswerText1 = Hi Remy! How to activate the first person camera?
						AnswerText2 = Bye
						AnswerBody0
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 2\\$Flow Dialogue Message\\Entry"
						}
						AnswerBody1
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 3\\$Flow Dialogue Message\\Entry"
						}
						AnswerBody2
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 2
					Position = 11 -8
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = "You can check Flow Graph tab of the scene in the editor and check the engine\'s manual. Do you want to know something else?"
						AnswerCount = 2
						AnswerText0 = Yes
						AnswerText1 = No, bye
						AnswerBody0
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 1\\$Flow Dialogue Message\\Entry"
						}
						AnswerBody1
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 3
					Position = 11 1
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = Press F6. You can see the list of hot keys in Options. Do you want to know something else?
						AnswerCount = 2
						AnswerText0 = Yes
						AnswerText1 = No, bye
						AnswerBody0
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 1\\$Flow Dialogue Message\\Entry"
						}
						AnswerBody1
						{
						}
					}
				}
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character NPC 2
		Transform = "2.46674974021676 12.0283360637464 -0.0099996738078667; 0 0 -0.704319579337445 0.709883026561272; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			PermanentMessage = C# script based dialogue (not typical way)
			AllowInteract = True
			LookAtControlledCharacterByPlayerDistance = 5
			LookingForFoodModeIdleTime = 10
			.component NeoAxis.CSharpScript
			{
				Name = C# Script
				Code = "public void CharacterAI_ObjectInteractionInputMessageEvent(NeoAxis.AI sender, NeoAxis.GameMode gameMode, NeoAxis.InputMessage message, ref bool handled)\r\n{\r\n\t//var keyDown = message as InputMessageKeyDown;\r\n\t//if (keyDown != null && (keyDown.Key == gameMode.KeyInteract1 || keyDown.Key == gameMode.KeyInteract2))\r\n\tvar buttonDown = message as InputMessageMouseButtonDown;\r\n\tif (buttonDown != null)\r\n\t{\r\n\t\t//no network support. for networking support is easier to use Flow Graph based variant\r\n\r\n\t\t//create interaction\r\n\t\tvar interaction = gameMode.CreateComponent<ContinuousInteraction>(enabled: false);\r\n\t\tinteraction.Creator = sender;\r\n\t\tinteraction.SecondParticipant = gameMode.ObjectControlledByPlayer.Value;\r\n\t\t\r\n\t\t//set up the first message from NPC and possible answers\r\n\t\tvar block = new TextBlock();\r\n\t\tblock.SetAttribute(\"MessageID\", \"1\");\r\n\t\tblock.SetAttribute(\"Message\", \"Hi! How can I help you?\");\r\n\t\tblock.SetAttribute(\"Answer 1\", \"Say something else\");\r\n\t\tblock.SetAttribute(\"Answer 2\", \"Bye\");\r\n\t\tinteraction.CurrentMessageFromCreator = block.DumpToString();\r\n\r\n\t\tinteraction.MessageFromParticipantEvent += delegate (ContinuousInteraction sender2, string message2)\r\n\t\t{\r\n\t\t\t//process messages from NPC\r\n\t\t\t\r\n\t\t\tvar block2 = TextBlock.Parse(message2, out _);\r\n\t\t\tif (block2 != null)\r\n\t\t\t{\r\n\t\t\t\tvar messageID = block2.GetAttribute(\"MessageID\");\r\n\t\t\t\tvar answer = block2.GetAttribute(\"Answer\");\r\n\t\t\t\t//Log.Info(answer);\r\n\t\t\t\t\r\n\t\t\t\t//generate answers to message 1 \r\n\t\t\t\tif(messageID == \"1\")\r\n\t\t\t\t{\r\n\t\t\t\t\tif (answer == \"1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tvar block3 = new TextBlock();\r\n\t\t\t\t\t\tblock3.SetAttribute(\"MessageID\", \"2\");\r\n\t\t\t\t\t\tblock3.SetAttribute(\"Message\", \"No problem :)\");\r\n\t\t\t\t\t\tblock3.SetAttribute(\"Answer 1\", \"Bye\");\r\n\t\t\t\t\t\tinteraction.CurrentMessageFromCreator = block3.DumpToString();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (answer == \"2\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsender2.RemoveFromParent(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t//generate answers to message 2 \r\n\t\t\t\tif(messageID == \"2\")\r\n\t\t\t\t{\r\n\t\t\t\t\tif (answer == \"1\")\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tsender2.RemoveFromParent(true);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t};\r\n\r\n\t\tinteraction.Enabled = true;\r\n\r\n\t\thandled = true;\r\n\t}\r\n}\r\n"
				Exit
				{
				}
				__parameter_Message
				{
				}
				.component NeoAxis.EventHandlerComponent
				{
					Name = Event Handler ObjectInteractionInputMessageEvent
					Event
					{
						GetByReference = "this:..\\..\\event:ObjectInteractionInputMessageEvent"
					}
					HandlerMethod
					{
						GetByReference = "this:..\\method:CharacterAI_ObjectInteractionInputMessageEvent(NeoAxis.AI,NeoAxis.GameMode,NeoAxis.InputMessage,ref System.Boolean)"
					}
					HandlerFlow
					{
					}
				}
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character NPC 3
		Transform = "6.81894426083197 4.65589894971923 0.00000017460560819; 0 0 -0.842785295569207 0.538249886879794; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			PermanentMessage = Flow graph with scripts
			AllowInteract = True
			LookAtControlledCharacterByPlayerDistance = 5
			LookingForFoodModeIdleTime = 10
			DialogueFlow
			{
				GetByReference = "this:$Flow Graph\\$Node Flow Dialogue Message 1"
			}
			.component NeoAxis.FlowGraph
			{
				Name = Flow Graph
				NetworkMode = False
				EditorScrollPosition = 17.9223856553205 -0.177287658308577
				EditorZoomIndex = 6
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 1
					Position = -18 -9
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = Hi! Do you have a key?
						AnswerCount = 2
						AnswerText0 = Yes
						AnswerText1 = Bye
						AnswerBody0
						{
							GetByReference = "this:..\\..\\$Node Flow If 1\\$Flow If\\Entry"
						}
						AnswerBody1
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 2
					Position = 42 -2
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = You are right! I also wrote a message to the engine console. Press ~ or F12 to open the console.
						AnswerCount = 1
						AnswerText0 = Bye
						AnswerBody0
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 3
					Position = 26 10
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = Wrong!
						AnswerCount = 1
						AnswerText0 = Bye
						AnswerBody0
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow Dialogue Message 4
					Position = -19 22
					Comment = By means PrepareMessage event you can modify output of Flow Dialogue Message
					ControlledObject
					{
						GetByReference = "this:$Flow Dialogue Message"
					}
					.component NeoAxis.FlowDialogueMessage
					{
						Name = Flow Dialogue Message
						Message = Text
						AnswerCount = 1
						AnswerText0 = Bye
						AnswerBody0
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node C# Script 1
					Position = -4 -16
					ControlledObject
					{
						GetByReference = "this:$C# Script Condition"
					}
					.component NeoAxis.CSharpScript
					{
						Name = C# Script Condition
						NetworkMode = False
						Code = "bool Method()\r\n{\r\n\t//prevent execution the script in the editor and when loading\r\n\tif(EngineApp.IsSimulation && !Owner.ParentRoot.HierarchyController.Loading)\r\n\t{\r\n\t\t//get current interaction\r\n\t\tvar interaction = ContinuousInteraction.Latest;\r\n\r\n\t\t//get a character of the player\r\n\t\tvar playerCharacter = (Character)interaction.SecondParticipant.Value;\r\n\r\n\t\t//checks player\'s character has a key\r\n\t\tvar item = playerCharacter.GetItemByResourceName(@\"Content\\Items\\Authors\\NeoAxis\\Key\\Key.itemtype\");\r\n\t\tif (item != null)\r\n\t\t\treturn true;\r\n\t}\r\n\t\r\n\treturn false;\r\n}\r\n"
						Exit
						{
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node Flow If 1
					Position = 10 -6
					ControlledObject
					{
						GetByReference = "this:$Flow If"
					}
					.component NeoAxis.FlowIf
					{
						Name = Flow If
						Condition
						{
							GetByReference = "this:..\\..\\$Node C# Script 1\\$C# Script Condition\\__parameter_ReturnValue"
						}
						True
						{
							GetByReference = "this:..\\..\\$Node C# Script 2\\$C# Script\\Entry"
						}
						False
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 3\\$Flow Dialogue Message\\Entry"
						}
					}
				}
				.component NeoAxis.FlowGraphNode
				{
					Name = Node C# Script 2
					Position = 26 -4
					Comment = C# script with enabled Flow Support
					ControlledObject
					{
						GetByReference = "this:$C# Script"
					}
					.component NeoAxis.CSharpScript
					{
						Name = C# Script
						NetworkMode = False
						Code = "void Method()\r\n{\r\n\tLog.Info(\"Message from the dialogue\");\r\n}\r\n"
						FlowSupport = True
						Exit
						{
							GetByReference = "this:..\\..\\$Node Flow Dialogue Message 2\\$Flow Dialogue Message\\Entry"
						}
					}
				}
			}
		}
	}
}
