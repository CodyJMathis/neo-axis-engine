.component NeoAxis.Component_Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1166, 842\"><KW V=\"1\" A=\"753675821D3D4864C598A4CF85FBC750\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"D4B72E7FD9B247A81E8E6C34D3B88874\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"753675821D3D4864C598A4CF85FBC750\"><KP UN=\"753675821D3D4864C598A4CF85FBC750\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"CDCBE92292624FA1BAAD447ED8455689\" S=\"False\"><CPD ObjPath=\"$Button\\$$n1$C# Script\" /></KP><KP UN=\"654BBC52A8A9476DB398309225BD08C4\" S=\"False\"><CPD ObjPath=\"$Regulator Switch\\$$n1$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	DisplayDevelopmentDataInSimulation = True
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Component_Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "-3.45803042644473 1.6150242669372 3.07849327440712; -0.0209243093508109 0.307351784689954 0.0646187957338919 0.949168828483107; 1 1 1"
	}
	.component NeoAxis.Component_Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Component_Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -24.2337833267289 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Component_Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.Component_RenderingPipeline_Default
	{
		Name = Rendering Pipeline
		ShadowFarDistance = 30
		ShadowIntensity = 0.5
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.Component_RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
				Quality = High
			}
			.component NeoAxis.Component_RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
			.component NeoAxis.Component_RenderingEffect_Bloom
			{
				Enabled = False
				Name = Bloom
			}
			.component NeoAxis.Component_RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.Component_RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.Component_RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.Component_RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.Component_RenderingEffect_Sharpen
			{
				Name = Sharpen
				Shader = "Base\\Shaders\\Effects\\Sharpen_fs.sc"
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.Component_GameMode
	{
		Name = Game Mode
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
	}
	.component NeoAxis.Component_MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
		.component NeoAxis.Component_RigidBody
		{
			Name = Collision Body
			Transform
			{
				GetByReference = "this:..\\Transform"
			}
			.component NeoAxis.Component_CollisionShape_Mesh
			{
				Mesh
				{
					GetByReference = "this:..\\..\\Mesh"
				}
				Vertices
				{
				}
				Indices
				{
				}
			}
		}
		.component NeoAxis.Addon.Pathfinding.Component_Pathfinding_GeometryTag
		{
			Name = Pathfinding GeometryTag
		}
	}
	.component NeoAxis.Component_GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Component_Character
	{
		Name = Character 2
		RunSupport = True
		FlyControlSupport = True
		JumpSupport = True
		Animate = True
		WalkAnimationSpeed = 0.57
		RunAnimationSpeed = 0.2
		LeftHandPosition = NaN NaN NaN
		RightHandPosition = NaN NaN NaN
		HeadLookAt = NaN NaN NaN
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		IdleAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Idle"
		}
		WalkAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Walk"
		}
		RunAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Run"
		}
		FlyAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Fly"
		}
		JumpAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Jump"
		}
		LeftTurnAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Left Turn"
		}
		RightTurnAnimation
		{
			GetByReference = "Base\\Models\\Human.fbx|$Mesh\\$Animations\\$Right Turn"
		}
		.component NeoAxis.Component_RigidBody
		{
			Name = Collision Body
			CanBeSelected = False
			Transform = "1.88293464065013 -2.25346440248484 1.15221954800588; 0 0 0.784495797440131 0.620134133715257; 1 1 1"
			MotionType = Dynamic
			Mass = 70
			AngularDamping = 10
			MaterialFriction = 0
			MaterialSpinningFriction = 0
			MaterialRollingFriction = 0
			LinearSleepingThreshold = 0
			AngularSleepingThreshold = 0
			.component NeoAxis.Component_CollisionShape_Capsule
			{
				Name = CollisionShape Capsule
				TransformRelativeToParent = "0 0 -0.25; 0 0 0 1; 1 1 1"
				Radius = 0.3
				Height = 1.2000000000000002
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Mesh In Space
			CanBeSelected = False
			Transform
			{
				GetByReference = "this:$Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "Base\\Models\\Human.fbx|$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_MeshInSpaceAnimationController
			{
				Name = Mesh In Space Animation Controller
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Transform Offset
				PositionOffset = 0 0 -1.15
				Source
				{
					GetByReference = "this:..\\..\\$Collision Body\\Transform"
				}
			}
		}
		.component NeoAxis.Component_CharacterInputProcessing
		{
			Name = Character Input Processing
		}
		.component NeoAxis.Component_CharacterAI
		{
			Name = Character AI
			DisplayPath = True
			.component NeoAxis.Component_CharacterAITask_MoveToObject
			{
				Name = Move To Object
				Target
				{
					GetByReference = "this:..\\..\\..\\$Object In Space"
				}
			}
			.component NeoAxis.Component_CharacterAITask_TurnToObject
			{
				Name = Turn To Object 2
				Target
				{
					GetByReference = "this:..\\..\\..\\$Object In Space 2"
				}
			}
			.component NeoAxis.Component_CharacterAITask_MoveToObject
			{
				Name = Move To Object 2
				Target
				{
					GetByReference = "this:..\\..\\..\\$Object In Space 2"
				}
			}
			.component NeoAxis.Component_CharacterAITask_TurnToObject
			{
				Name = Turn To Object
				Target
				{
					GetByReference = "this:..\\..\\..\\$Button"
				}
			}
			.component NeoAxis.Component_CharacterAITask_PressButton
			{
				Name = Press Button
				Target
				{
					GetByReference = "this:..\\..\\..\\$Button"
				}
			}
		}
	}
	.component NeoAxis.Component_MeshInSpace
	{
		Name = Box 2
		CanBeSelected = False
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Box
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.Component_RigidBody
		{
			Name = Collision Body
			Transform = "-1.24451692055514 4.85612266989406 1.00549997886235; 0 0 0.283193019671898 0.959062935165942; 2 1 2"
			.component NeoAxis.Component_CollisionShape_Box
			{
			}
		}
	}
	.component NeoAxis.Component_ButtonInSpace
	{
		Name = Button
		Transform = "-1.3658208777314 4.15177148121879 1.32489341333328; 0 0 -0.478282120422081 0.878206247577731; 1 1 1"
		Color = 0.6784314 0.6784314 0.6784314
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.3 0.3
				Material
				{
					GetByReference = "Base\\Materials\\White.material"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Button
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.15 0.15
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.05 0 0
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Indicator
			Color = 0.5 0.5 0.5
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 0 0.12
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_CSharpScript
		{
			Name = C# Script
			Code = "public void InteractiveObjectButton_UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar _this = sender as Component_ButtonInSpace;\r\n\tif (_this != null)\r\n\t{\r\n\t\tvar indicator = _this.GetComponent(\"Indicator\") as Component_MeshInSpace;\r\n\t\tif (indicator != null)\r\n\t\t\tindicator.Color = _this.Activated ? new ColorValue(0, 1, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar buttonOffset = _this.Components.GetByPath(\"Button\\\\Attach Transform Offset\") as Component_TransformOffset;\r\n\t\tif (buttonOffset != null)\r\n\t\t{\r\n\t\t\tvar offsetPushed = 0.01;\r\n\t\t\tvar offsetDefault = 0.05;\r\n\r\n\t\t\tvar coef = 0.0;\r\n\t\t\tif (_this.Clicking && _this.ClickingTotalTime != 0)\r\n\t\t\t{\r\n\t\t\t\tvar timeFactor = MathEx.Saturate(_this.ClickingCurrentTime / _this.ClickingTotalTime);\r\n\r\n\t\t\t\tif(timeFactor < 0.5)\r\n\t\t\t\t\tcoef = timeFactor * 2;\r\n\t\t\t\telse\r\n\t\t\t\t\tcoef = (1.0f - timeFactor) * 2;\r\n\t\t\t}\r\n\r\n\t\t\tvar offset = MathEx.Lerp(offsetDefault, offsetPushed, coef);\r\n\t\t\tbuttonOffset.PositionOffset = new Vector3(offset, 0, 0);\r\n\t\t}\r\n\t}\r\n}"
			__parameter_Delta = 0
			Exit
			{
			}
			.component NeoAxis.Component_EventHandler
			{
				Name = Event Handler UpdateEvent
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:UpdateEvent"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:InteractiveObjectButton_UpdateEvent(NeoAxis.Component,System.Single)"
				}
				HandlerFlow
				{
				}
			}
		}
		.component NeoAxis.Component_CSharpScript
		{
			Name = C# Script
			Code = "public void Button_Click(NeoAxis.Component_ButtonInSpace sender)\r\n{\r\n\tvar scene = sender.ParentScene;\r\n\r\n\tvar ground = scene.GetComponent(\"Ground\") as Component_MeshInSpace;\r\n\tif (ground != null)\r\n\t{\r\n\t\tif (!ground.ReplaceMaterial.ReferenceSpecified)\r\n\t\t{\r\n\t\t\tground.ReplaceMaterial = ReferenceUtility.MakeReference( @\"Base\\Materials\\Dark Yellow.material\");\r\n\t\t}\r\n\t\telse\r\n\t\t\tground.ReplaceMaterial = null;\r\n\t}\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.Component_EventHandler
			{
				Name = Event Handler Click
				Event
				{
					GetByReference = "this:..\\..\\event:Click"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:Button_Click(NeoAxis.Component_ButtonInSpace)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Component_RegulatorSwitchInSpace
	{
		Name = Regulator Switch
		Transform = "-0.572169875907708 4.66559510889641 1.31229185132108; 0 0 -0.48183375394467 0.876262651012576; 1 1 1"
		Color = 0.6784314 0.6784314 0.6784314
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Box
			{
				Name = Mesh Geometry
				Dimensions = 0.05 0.3 0.3
				Material
				{
					GetByReference = "Base\\Materials\\White.material"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Button
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.08
					Height = 0.08
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.05 0 0
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Indicator Min
			Color = 1 0 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 -0.11 0.11
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Indicator Max
			Color = 0.5 0.5 0.5
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Cylinder
				{
					Name = Mesh Geometry
					Axis = 0
					Radius = 0.02
					Height = 0.02
					Segments = 16
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.03 0.11 0.11
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Marker Min
			Color = 1 0 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.01 -0.0282842712474619 0.0282842712474619
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Marker Max
			Color = 0 1 0
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.01 0.0282842712474619 0.0282842712474619
				RotationOffset = 0.38268343236509 0 -0 0.923879532511287
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_MeshInSpace
		{
			Name = Marker Current
			Transform
			{
				GetByReference = "this:$Attach Transform Offset\\Result"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Component_Mesh
			{
				Name = Mesh
				.component NeoAxis.Component_MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.05 0.14 0.01
					Material
					{
						GetByReference = "Base\\Materials\\White.material"
					}
				}
			}
			.component NeoAxis.Component_TransformOffset
			{
				Name = Attach Transform Offset
				PositionOffset = 0.06 -0.0282842712474619 0.0282842712474619
				RotationOffset = 0.923879532511287 0 -0 0.38268343236509
				Source
				{
					GetByReference = "this:..\\..\\Transform"
				}
			}
		}
		.component NeoAxis.Component_CSharpScript
		{
			Name = C# Script
			Code = "public void InteractiveObjectButton_UpdateEvent(NeoAxis.Component sender, float delta)\r\n{\r\n\tvar _this = sender as Component_RegulatorSwitchInSpace;\r\n\tif (_this != null)\r\n\t{\r\n\t\tvar indicatorMin = _this.GetComponent(\"Indicator Min\") as Component_MeshInSpace;\r\n\t\tif (indicatorMin != null)\r\n\t\t\tindicatorMin.Color = _this.Value.Value <= _this.ValueRange.Value.Minimum ? new ColorValue(1, 0, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar indicatorMax = _this.GetComponent(\"Indicator Max\") as Component_MeshInSpace;\r\n\t\tif (indicatorMax != null)\r\n\t\t\tindicatorMax.Color = _this.Value.Value >= _this.ValueRange.Value.Maximum ? new ColorValue(0, 1, 0) : new ColorValue(0.5, 0.5, 0.5);\r\n\r\n\t\tvar button = _this.GetComponent(\"Button\");\r\n\t\tif (button != null)\r\n\t\t{\r\n\t\t\tvar offset = button.GetComponent<Component_TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.GetValueAngle() - 90;\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerMin = _this.GetComponent(\"Marker Min\");\r\n\t\tif (markerMin != null)\r\n\t\t{\r\n\t\t\tvar offset = markerMin.GetComponent<Component_TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.AngleRange.Value.Minimum - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.01, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerMax = _this.GetComponent(\"Marker Max\");\r\n\t\tif (markerMax != null)\r\n\t\t{\r\n\t\t\tvar offset = markerMax.GetComponent<Component_TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.AngleRange.Value.Maximum - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.01, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tvar markerCurrent = _this.GetComponent(\"Marker Current\");\r\n\t\tif (markerCurrent != null)\r\n\t\t{\r\n\t\t\tvar offset = markerCurrent.GetComponent<Component_TransformOffset>();\r\n\t\t\tif (offset != null)\r\n\t\t\t{\r\n\t\t\t\tvar angle = _this.GetValueAngle() - 90;\r\n\t\t\t\tvar angleR = MathEx.DegreeToRadian(angle);\r\n\t\t\t\toffset.PositionOffset = new Vector3(0.06, Math.Cos(angleR) * 0.04, Math.Sin(-angleR) * 0.04);\r\n\t\t\t\toffset.RotationOffset = new Angles(angle, 0, 0).ToQuaternion();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}"
			__parameter_Delta = 0
			Exit
			{
			}
			.component NeoAxis.Component_EventHandler
			{
				Name = Event Handler UpdateEvent
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:UpdateEvent"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:InteractiveObjectButton_UpdateEvent(NeoAxis.Component,System.Single)"
				}
				HandlerFlow
				{
				}
			}
		}
		.component NeoAxis.Component_CSharpScript
		{
			Name = C# Script
			Code = "public void RegulatorSwitch_ValueChanged(NeoAxis.Component_RegulatorSwitchInSpace obj)\r\n{\r\n\tvar scene = obj.ParentScene;\r\n\r\n\tvar ground = scene.GetComponent(\"Ground\") as Component_MeshInSpace;\r\n\tif (ground != null)\r\n\t\tground.Color = ColorValue.Lerp(new ColorValue(1, 1, 1), new ColorValue(0.4, 0.9, 0.4), (float)obj.Value);\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.Component_EventHandler
			{
				Name = Event Handler ValueChanged
				Event
				{
					GetByReference = "this:..\\..\\event:ValueChanged"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:RegulatorSwitch_ValueChanged(NeoAxis.Component_RegulatorSwitchInSpace)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Component_ObjectInSpace
	{
		Name = Object In Space
		Transform = "3.69144727346044 6.120737170785 0.0578020071987823; 0 0 0 1; 1 1 1"
	}
	.component NeoAxis.Component_ObjectInSpace
	{
		Name = Object In Space 2
		Transform = "-1.30927543479852 3.62456273118626 0.0578020071987823; 0 0 0 1; 1 1 1"
	}
	.component NeoAxis.Component_MeshInSpace
	{
		Name = Box 3
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Box
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.Component_RigidBody
		{
			Name = Collision Body
			Transform = "2.42855302860948 1.29987482604566 0.504205256712949; 0 0 0 1; 4.55254102303782 1 1.51411020378668"
			.component NeoAxis.Component_CollisionShape_Box
			{
			}
		}
		.component NeoAxis.Addon.Pathfinding.Component_Pathfinding_GeometryTag
		{
			Name = Pathfinding GeometryTag
			Type = BakedObstacle
		}
	}
	.component NeoAxis.Addon.Pathfinding.Component_Pathfinding
	{
		Name = Pathfinding
		Transform = "-1.27926556179967 0.0508489218600681 0.00952262268335424; 0 0 0 1; 1 1 1"
		NavMeshData
		{
			Length = 1956
			.elements = "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"
		}
	}
	.component NeoAxis.Component_MeshInSpace
	{
		Name = Cylinder 2
		Transform = "3.51577426092622 6.01922780038109 -0.468834803567407; 0 0 0 1; 1 1 1"
		Color = 0.4255686 0.1557255 1
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Component_Mesh
		{
			Name = Mesh
			.component NeoAxis.Component_MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
				Material
				{
					GetByReference = "Base\\Materials\\White.material"
				}
			}
		}
	}
}
