// Made with NeoAxis Engine 2024.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1144, 842\"><KW V=\"1\" A=\"A4F0C5CC785E4EED91B891480301153A\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"691D02B801C846BF37B51655FFEF360A\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"A4F0C5CC785E4EED91B891480301153A\"><KP UN=\"A4F0C5CC785E4EED91B891480301153A\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"2C6935ACDAC3458727866D15C720CE1D\" S=\"False\"><CPD ObjPath=\"$Button\\$C# Script\" /></KP><KP UN=\"6E004B7797A8473683B9007600BE6B86\" S=\"False\"><CPD ObjPath=\"$Default Gate 3\\$C# Script\" /></KP><KP UN=\"B00DB9D5A61F41985083294B365B5611\" S=\"False\"><CPD ObjPath=\"$Pipe 2\\$Interactive Object\\$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "4.36197716797313 -7.88175820499141 8.05613694371688; -0.206527298553056 0.202930842661542 0.682736588500596 0.670847448211306; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 60000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		Brightness = 150000
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		ShadowIntensity = 0.5
		ShadowDirectionalDistance = 50
		ShadowPointSpotlightDistance = 50
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		UseBuiltInCamera = ThirdPerson
		ThirdPersonCameraHorizontalAngle = 89.99999999999993
		InventoryWidget = True
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
		ObjectControlledByPlayer
		{
			GetByReference = "this:..\\$Character"
		}
	}
	.component NeoAxis.NetworkLogic
	{
		Name = Network Logic
	}
	.component NeoAxis.SpawnPoint
	{
		Name = Spawn Point
		Transform = "4.99813311088855 -2.1093736714269 1.15; 0 0 0 1; 1 1 1"
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "6.62101434133084 0.638525125275983 0.499999999999976; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Cylinder
			{
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character
		Transform = "4.00185359899021 -1.22914356831118 0; 0 0 0.707106781186547 0.707106781186548; 1 1 1"
		Collision = True
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterInputProcessing
		{
			Name = Character Input Processing
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			NetworkMode = False
			LookingForFoodModeIdleTime = 10
		}
	}
	.component NeoAxis.Button
	{
		Name = Button
		Transform = "2.10110404308887 4.88006665059538 1.31812492559637; 0 0 -0.707106781186548 0.707106781186548; 0.613496937815348 0.613496937815348 0.613496937815348"
		Mesh
		{
			GetByReference = "Content\\Buttons\\Default\\Base.mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			NetworkMode = False
			Code = "public void Button_Click(NeoAxis.Button sender, NeoAxis.Component initiator)\r\n{\r\n\tvar scene = sender.ParentScene;\r\n\r\n\t//open or close the gate\r\n\tvar gate = scene.GetComponent<Gate>(\"Default Gate 2\");\r\n\tif(gate != null)\r\n\t{\r\n\t\tgate.TrySwitch(initiator);\r\n\r\n\t\t//!!!!add networking support\r\n\t\t//gate.TrySetState\r\n\t\t//gate.DesiredState = sender.Activated.Value ? 1 : 0;\r\n\t}\t\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler Click
				Event
				{
					GetByReference = "this:..\\..\\event:Click"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:Button_Click(NeoAxis.Button,NeoAxis.Component)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Item
	{
		Name = Key
		Transform = "6.64027624544232 0.662653233517053 1.01512538717886; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Items\\NeoAxis\\Key\\Data\\scene.gltf|$Mesh"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		ItemType
		{
			GetByReference = "Content\\Items\\NeoAxis\\Key\\Key.itemtype"
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Pipe 2
		Transform = "12.8789046441203 4.79944120812064 0.490524431149146; 0 0 0 1; 2 2 2"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\Red.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Pipe
			{
				Name = Mesh Geometry
				Radius = 0.3
				Height = 0.5
				Thickness = 0.05
				Segments = 64
			}
		}
		.component NeoAxis.InteractiveObject
		{
			Name = Interactive Object
			Text = Click to interact.
			.component NeoAxis.CSharpScript
			{
				Name = C# Script
				NetworkMode = False
				Code = "public void InteractiveObject_Click(NeoAxis.InteractiveObject sender, NeoAxis.Component initiator)\r\n{\r\n\t//show screen message\r\n\tvar text = \"Click!\";\r\n\tif (sender.NetworkIsServer)\r\n\t{\r\n\t\tvar networkLogic = NetworkLogicUtility.GetNetworkLogic(initiator) as NetworkLogic;\r\n\t\tnetworkLogic?.SendScreenMessageToClientByControlledObject(initiator, text, false);\r\n\t}\r\n\telse\r\n\t\tScreenMessages.Add(text);\r\n}\r\n"
				Exit
				{
				}
				.component NeoAxis.EventHandlerComponent
				{
					Name = Event Handler Click
					Event
					{
						GetByReference = "this:..\\..\\event:Click"
					}
					HandlerMethod
					{
						GetByReference = "this:..\\method:InteractiveObject_Click(NeoAxis.InteractiveObject,NeoAxis.Component)"
					}
					HandlerFlow
					{
					}
				}
			}
		}
	}
	.component NeoAxis.Gate
	{
		Name = Default Gate
		Transform = "-5 5 0; 0 0 0 1; 1 1 1"
		Collision = True
		AllowInteract = True
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		GateType
		{
			GetByReference = "Content\\Gates\\Default\\Default Gate.gatetype"
		}
	}
	.component NeoAxis.Gate
	{
		Name = Default Gate 2
		Transform = "1 5 0; 0 0 0 1; 1 1 1"
		Collision = True
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		GateType
		{
			GetByReference = "Content\\Gates\\Default\\Default Gate.gatetype"
		}
	}
	.component NeoAxis.Gate
	{
		Name = Default Gate 3
		Transform = "7 5 0; 0 0 0 1; 1 1 1"
		Collision = True
		AllowInteract = True
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		GateType
		{
			GetByReference = "Content\\Gates\\Default\\Default Gate.gatetype"
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			NetworkMode = False
			Code = "public void DefaultGate3_CanSwitch(NeoAxis.Gate sender, NeoAxis.Component initiator, ref bool canSwitch)\r\n{\r\n\t//get a character of the player\r\n\tvar playerCharacter = initiator as Character;\r\n\tif (playerCharacter != null)\r\n\t{\r\n\t\t//checks player\'s character has a key\r\n\t\tvar item = playerCharacter.GetItemByResourceName(@\"Content\\Items\\NeoAxis\\Key\\Key.itemtype\");\r\n\t\tif (item == null)\r\n\t\t{\r\n\t\t\t//show screen message\r\n\t\t\tvar text = \"You need to have a key to open the door.\";\t\t\t\r\n\t\t\tif(sender.NetworkIsServer) //if(SimulationAppServer.Server != null)\r\n\t\t\t{\r\n\t\t\t\tvar networkLogic = NetworkLogicUtility.GetNetworkLogic(initiator) as NetworkLogic;\r\n\t\t\t\tnetworkLogic?.SendScreenMessageToClientByControlledObject(initiator, text, false);\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t\tScreenMessages.Add(text);\r\n\t\t\t\t\r\n\t\t\t//set can\'t interact \r\n\t\t\tcanSwitch = false;\r\n\t\t\t\r\n\t\t\treturn;\r\n\t\t}\r\n\t}\t\t\t\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler CanSwitch
				Event
				{
					GetByReference = "this:..\\..\\event:CanSwitch"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:DefaultGate3_CanSwitch(NeoAxis.Gate,NeoAxis.Component,ref System.Boolean)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Text3D
	{
		Name = Text 3D 8
		Transform = "-5 5.5 3; 0 0 -0.707106781186548 0.707106781186548; 0.5 0.5 0.5"
		Color = 0 0.2546667 1
		Text = Allow Interact
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\White.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
	.component NeoAxis.Text3D
	{
		Name = Text 3D 2
		Transform = "1 5.5 3; 0 0 -0.707106781186548 0.707106781186548; 0.5 0.5 0.5"
		Color = 0 0.2546667 1
		Text = Separate button
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\White.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
	.component NeoAxis.Text3D
	{
		Name = Text 3D 3
		Transform = "7 5.5 3; 0 0 -0.707106781186548 0.707106781186548; 0.5 0.5 0.5"
		Color = 0 0.2546667 1
		Text = Script
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\White.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
	.component NeoAxis.Text3D
	{
		Name = Text 3D 4
		Transform = "12.3988685027001 5.5 3; 0 0 -0.707106781186548 0.707106781186548; 0.5 0.5 0.5"
		Color = 0 0.2546667 1
		Text = InteractiveObject
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\White.material"
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
	}
}
