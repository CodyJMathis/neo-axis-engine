// Made with NeoAxis Engine 2023.1.

.component NeoAxis.Scene
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1145, 842\"><KW V=\"1\" A=\"A4F0C5CC785E4EED91B891480301153A\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"691D02B801C846BF37B51655FFEF360A\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"A4F0C5CC785E4EED91B891480301153A\"><KP UN=\"A4F0C5CC785E4EED91B891480301153A\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"F02128CA01AE47A1F3BCEE0EE20923CE\" S=\"False\"><CPD ObjPath=\"$Button\\$C# Script\" /></KP><KP UN=\"A9D82B9F108B4D6700912581544F44A2\" S=\"False\"><CPD ObjPath=\"$Door 2\\$Interactive Object\\$C# Script\" /></KP><KP UN=\"00C14FE3D5994563548597AD10C69636\" S=\"False\"><CPD ObjPath=\"$Door 2\\$Interactive Object\\$$n1$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	RenderingPipeline
	{
		GetByReference = "root:$Rendering Pipeline"
	}
	CameraEditor
	{
		GetByReference = "this:$Camera Editor"
	}
	CameraEditor2D
	{
		GetByReference = "this:$Camera Editor 2D"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor
		Visible = False
		Transform = "2.63145921088393 -3.91375032916275 4.39452144991135; -0.226079361784278 0.224659472868486 0.672337881983782 0.668115271398005; 1 1 1"
	}
	.component NeoAxis.Camera
	{
		Name = Camera Editor 2D
		Visible = False
		Transform = "2.64918580053222 3.02745193504869 10; -0.502493739596367 0.497493760429674 0.497493760429674 0.502493739596367; 1 1 1"
		Projection = Orthographic
		Height = 16.8586419336498
		FixedUp = 0 1 0
		FarClipPlane = 100
	}
	.component NeoAxis.Light
	{
		Name = Ambient Light
		Transform = "18.5822734231225 -5.39737456891382 0.8606866051066; 0.177025544047126 0 0 0.98420625722194; 1 1 1"
		Type = Ambient
		Brightness = 50000
	}
	.component NeoAxis.Light
	{
		Name = Directional Light
		Transform = "23.4737008768449 -15.0814890020227 22.8055842838911; -0.48553441582008 -0.67324283509012 0.472744885192886 -0.295825437679109; 1 1 1"
		Type = Directional
		AttenuationFar = 100
		AttenuationPower = 1.5
		SpotlightInnerAngle = 80
		SpotlightOuterAngle = 91.429
	}
	.component NeoAxis.RenderingPipeline_Basic
	{
		Name = Rendering Pipeline
		ShadowFarDistance = 50
		ShadowIntensity = 0.5
		.component NeoAxis.Component
		{
			Name = Background Effects
		}
		.component NeoAxis.Component
		{
			Name = Scene Effects
			.component NeoAxis.RenderingEffect_AmbientOcclusion
			{
				Name = Ambient Occlusion
			}
			.component NeoAxis.RenderingEffect_LensEffects
			{
				Name = Lens Effects
			}
			.component NeoAxis.RenderingEffect_ToneMapping
			{
				Name = Tone Mapping
				Intensity = 0.5
			}
			.component NeoAxis.RenderingEffect_ToLDR
			{
				Name = To LDR
			}
			.component NeoAxis.RenderingEffect_Antialiasing
			{
				Name = Antialiasing
			}
			.component NeoAxis.RenderingEffect_ResolutionUpscale
			{
				Name = Resolution Upscale
			}
			.component NeoAxis.RenderingEffect_Sharpen
			{
				Name = Sharpen
			}
			.component NeoAxis.RenderingEffect_MotionBlur
			{
				Name = Motion Blur
			}
		}
		.component NeoAxis.Component
		{
			Name = Final Image Effects
		}
	}
	.component NeoAxis.GameMode
	{
		Name = Game Mode
		UseBuiltInCamera = ThirdPerson
		ThirdPersonCameraHorizontalAngle = 89.99999999999993
		InventoryWidget = True
		CutsceneStarted = False
		CutsceneGuiFadingFactor = 0
		CutsceneGuiFadingSpeed = 0
		ScreenFadingCurrentColor = 0 0 0 0
		ScreenFadingTargetColor = 0 0 0 0
		ScreenFadingSpeed = 0
		ObjectControlledByPlayer
		{
			GetByReference = "this:..\\$Character"
		}
	}
	.component NeoAxis.NetworkLogic
	{
		Name = Network Logic
	}
	.component NeoAxis.SpawnPoint
	{
		Name = Spawn Point
		Transform = "4.99813311088855 -2.1093736714269 1.15; 0 0 0 1; 1 1 1"
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Ground
		CanBeSelected = False
		Transform = "0 0 0; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Plane
			{
				Name = Mesh Geometry
				Dimensions = 100 100
				UVTilesPerUnit = 0.25 0.25
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Name = Cylinder
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "6.12101434133084 0.638525125275983 0.499999999999976; 0 0 0 1; 1 1 1"
			MotionType = Dynamic
			.component NeoAxis.CollisionShape_Cylinder
			{
			}
		}
	}
	.component NeoAxis.GroupOfObjects
	{
		Name = Group Of Objects
		BaseObjects
		{
			Count = 1
			0 "NeoAxis.Reference<NeoAxis.Component>"
			{
				GetByReference = "root:$Ground"
			}
		}
	}
	.component NeoAxis.Character
	{
		Name = Character
		Transform = "2.50185359899021 -1.22914356831118 0; 0 0 0.707106781186547 0.707106781186548; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Characters\\Default\\Human.fbx|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.MeshInSpaceAnimationController
		{
			Name = Animation Controller
		}
		.component NeoAxis.CharacterInputProcessing
		{
			Name = Character Input Processing
		}
		.component NeoAxis.CharacterAI
		{
			Name = Character AI
			NetworkMode = False
			LookingForFoodModeIdleTime = 10
		}
	}
	.component NeoAxis.Door
	{
		Name = Door
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Door
			{
				Name = Mesh Geometry
				Width = 2.2
				Height = 2.5
				DoorWidth = 1.5
				DoorHeight = 2.2
				Material
				{
					GetByReference = "Base\\Materials\\Green.material"
				}
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "-1.03660511107838 5.13629887322117 0.00940893653311914; 0 0 -0.707106781186548 0.707106781186548; 1 1 1"
			.component NeoAxis.CollisionShape_Mesh
			{
				Mesh
				{
					GetByReference = "this:..\\..\\$Mesh"
				}
				Vertices
				{
				}
				Indices
				{
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Door 1
			CanBeSelected = False
			Transform
			{
				GetByReference = "this:$Collision Body\\Transform"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.1 1.55 2.25
					Material
					{
						GetByReference = "Base\\Materials\\Yellow.material"
					}
				}
			}
			.component NeoAxis.RigidBody
			{
				Name = Collision Body
				MotionType = Kinematic
				Transform
				{
					GetByReference = "this:$Attach Transform Offset\\Result"
				}
				.component NeoAxis.CollisionShape_Box
				{
					Name = Collision Shape
					Dimensions = 0.1 1.55 2.25
				}
				.component NeoAxis.TransformOffset
				{
					Name = Attach Transform Offset
					PositionOffset = 0 0 1.1
					Source
					{
						GetByReference = "this:..\\..\\..\\Transform"
					}
				}
			}
		}
	}
	.component NeoAxis.Door
	{
		Name = Door 2
		Transform
		{
			GetByReference = "this:$Collision Body\\Transform"
		}
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Door
			{
				Name = Mesh Geometry
				Width = 2
				Height = 2.4
				DoorWidth = 1.5
				DoorHeight = 2.2
				Material
				{
					GetByReference = "Base\\Materials\\Green.material"
				}
			}
		}
		.component NeoAxis.RigidBody
		{
			Name = Collision Body
			Transform = "5.98208984899086 5.13629887322117 0.00940893653311914; 0 0 -0.707106781186548 0.707106781186548; 1 1 1"
			.component NeoAxis.CollisionShape_Mesh
			{
				Mesh
				{
					GetByReference = "this:..\\..\\$Mesh"
				}
				Vertices
				{
				}
				Indices
				{
				}
			}
		}
		.component NeoAxis.MeshInSpace
		{
			Name = Door 1
			CanBeSelected = False
			Transform
			{
				GetByReference = "this:$Collision Body\\Transform"
			}
			Mesh
			{
				GetByReference = "this:$Mesh"
			}
			ReplaceMaterialSelectively
			{
				Count = 0
			}
			SpecialEffects
			{
				Value
				{
					Count = 0
				}
			}
			.component NeoAxis.Mesh
			{
				Name = Mesh
				.component NeoAxis.MeshGeometry_Box
				{
					Name = Mesh Geometry
					Dimensions = 0.1 1.55 2.25
					Material
					{
						GetByReference = "Base\\Materials\\Yellow.material"
					}
				}
			}
			.component NeoAxis.RigidBody
			{
				Name = Collision Body
				MotionType = Kinematic
				Transform
				{
					GetByReference = "this:$Attach Transform Offset\\Result"
				}
				.component NeoAxis.CollisionShape_Box
				{
					Name = Collision Shape
					Dimensions = 0.1 1.55 2.25
				}
				.component NeoAxis.TransformOffset
				{
					Name = Attach Transform Offset
					PositionOffset = 0 0 1.1
					Source
					{
						GetByReference = "this:..\\..\\..\\Transform"
					}
				}
			}
		}
		.component NeoAxis.InteractiveObject
		{
			Name = Interactive Object
			Text = Click to interact
			.component NeoAxis.CSharpScript
			{
				Name = C# Script
				Code = "public void InteractiveObject_ObjectInteractionInputMessageEvent(NeoAxis.InteractiveObject sender, NeoAxis.GameMode gameMode, NeoAxis.InputMessage message, ref bool handled)\r\n{\r\n\t//process mouse click\r\n\tvar mouseDown = message as InputMessageMouseButtonDown;\r\n\tif (mouseDown != null && (mouseDown.Button == EMouseButtons.Left || mouseDown.Button == EMouseButtons.Right))\r\n\t{\r\n\t\t//get the door\r\n\t\tvar door = sender.Parent as Door;\r\n\t\tif (door != null)\r\n\t\t{\r\n\t\t\t//mark the input message is processed\r\n\t\t\thandled = true;\r\n\r\n\t\t\t//get a character of the player\r\n\t\t\tvar playerCharacter = gameMode.ObjectControlledByPlayer.Value as Character;\r\n\t\t\tif (playerCharacter != null)\r\n\t\t\t{\r\n\t\t\t\tif (sender.NetworkIsClient)\r\n\t\t\t\t{\r\n\t\t\t\t\t//network mode\r\n\t\t\t\t\t//hint: to enable networking need to enable NetworkMode for C# script\r\n\t\t\t\t\tsender.BeginNetworkMessageToServer(\"Click\");\r\n\t\t\t\t\tsender.EndNetworkMessage();\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\t//single mode\r\n\r\n\t\t\t\t\t//checks player\'s character has a key\r\n\t\t\t\t\tvar item = playerCharacter.GetItemByResourceName(@\"Content\\Items\\Authors\\NeoAxis\\Key\\Key.itemtype\");\r\n\t\t\t\t\tif (item == null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tScreenMessages.Add(\"You need to have a key to open the door.\");\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t//open or close the door\r\n\t\t\t\t\tif (door.IsClosed)\r\n\t\t\t\t\t\tdoor.Open();\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tdoor.Close();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n}\r\n"
				Exit
				{
				}
				__parameter_Message
				{
				}
				.component NeoAxis.EventHandlerComponent
				{
					Name = Event Handler ObjectInteractionInputMessageEvent
					Event
					{
						GetByReference = "this:..\\..\\event:ObjectInteractionInputMessageEvent"
					}
					HandlerMethod
					{
						GetByReference = "this:..\\method:InteractiveObject_ObjectInteractionInputMessageEvent(NeoAxis.InteractiveObject,NeoAxis.GameMode,NeoAxis.InputMessage,ref System.Boolean)"
					}
					HandlerFlow
					{
					}
				}
			}
			.component NeoAxis.CSharpScript
			{
				Name = C# Script
				NetworkMode = False
				Code = "public void InteractiveObject_ReceiveNetworkMessageFromClient(NeoAxis.Component sender, NeoAxis.ServerNetworkService_Components.ClientItem client, string message, NeoAxis.ArrayDataReader reader, ref bool error)\r\n{\r\n#if !CLIENT\r\n\t//server side\t\r\n\tif (message == \"Click\")\r\n\t{\r\n\t\t//get player character\r\n\t\tvar networkLogic = NetworkLogicUtility.GetNetworkLogic(sender) as NetworkLogic;\r\n\t\tvar playerCharacter = networkLogic?.ServerGetObjectControlledByUser(client.User) as Character;\r\n\t\tif (playerCharacter != null)\r\n\t\t{\r\n\t\t\t//checks player\'s character has a key\r\n\t\t\tvar item = playerCharacter.GetItemByResourceName(@\"Content\\Items\\Authors\\NeoAxis\\Key\\Key.itemtype\");\r\n\t\t\tif (item == null)\r\n\t\t\t{\r\n\t\t\t\tnetworkLogic.SendScreenMessageToClient(client, \"You need to have a key to open the door.\", false);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t//get the door\r\n\t\t\tvar door = sender.Parent as Door;\r\n\t\t\tif (door != null)\r\n\t\t\t{\r\n\t\t\t\t//open or close the door\r\n\t\t\t\tif (door.IsClosed)\r\n\t\t\t\t\tdoor.Open();\r\n\t\t\t\telse\r\n\t\t\t\t\tdoor.Close();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n#endif\r\n}\r\n"
				Exit
				{
				}
				__parameter_Client
				{
				}
				__parameter_Reader
				{
				}
				.component NeoAxis.EventHandlerComponent
				{
					Name = Event Handler ReceiveNetworkMessageFromClient
					Event
					{
						GetByReference = "this:..\\..\\event:ReceiveNetworkMessageFromClient"
					}
					HandlerMethod
					{
						GetByReference = "this:..\\method:InteractiveObject_ReceiveNetworkMessageFromClient(NeoAxis.Component,NeoAxis.ServerNetworkService_Components.ClientItem,System.String,NeoAxis.ArrayDataReader,ref System.Boolean)"
					}
					HandlerFlow
					{
					}
				}
			}
		}
	}
	.component NeoAxis.Button
	{
		Name = Button
		Transform = "-0.109673499505927 5.01457568558628 1.31812492559637; 0 0 -0.707106781186548 0.707106781186548; 1 1 1"
		Mesh
		{
			GetByReference = "Content\\Buttons\\Default\\Base.mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.CSharpScript
		{
			Name = C# Script
			NetworkMode = False
			Code = "public void Button_Click(NeoAxis.Button sender)\r\n{\r\n\tvar scene = sender.ParentScene;\r\n\r\n\t//open or close the door\r\n\tvar door = scene.GetComponent<Door>(\"Door\");\r\n\tif(door != null)\r\n\t{\r\n\t\tif(sender.Activated)\r\n\t\t\tdoor.Open();\r\n\t\telse\r\n\t\t\tdoor.Close();\r\n\t\t\t\r\n\t\t//door.DesiredState = sender.Activated.Value ? 1 : 0;\r\n\t}\t\r\n}\r\n"
			Exit
			{
			}
			.component NeoAxis.EventHandlerComponent
			{
				Name = Event Handler Click
				WhenEnable = Editor, Simulation, Instance
				Event
				{
					GetByReference = "this:..\\..\\event:Click"
				}
				HandlerMethod
				{
					GetByReference = "this:..\\method:Button_Click(NeoAxis.Button)"
				}
				HandlerFlow
				{
				}
			}
		}
	}
	.component NeoAxis.Item
	{
		Name = Key
		Transform = "6.14027624544232 0.662653233517053 1.01512538717886; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "Content\\Items\\Authors\\NeoAxis\\Key\\Data\\scene.gltf|$Mesh"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		ItemType
		{
			GetByReference = "Content\\Items\\Authors\\NeoAxis\\Key\\Key.itemtype"
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Enabled = False
		Name = Pipe
		Transform = "2.47976828853056 5.61674341119256 0.323614819186478; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\Green.material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Pipe
			{
				Name = Mesh Geometry
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Enabled = False
		Name = Cylinder 2
		Transform = "2.47976828853056 5.61674341119256 0.878959224022435; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\Green.material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Cylinder
			{
				Name = Mesh Geometry
				Radius = 0.75
				Height = 0.1
				Segments = 128
			}
		}
	}
	.component NeoAxis.MeshInSpace
	{
		Enabled = False
		Name = Pipe 2
		Transform = "2.47205021807441 5.23167389938848 0.970352753502838; 0 0 0 1; 1 1 1"
		Collision = True
		Mesh
		{
			GetByReference = "this:$Mesh"
		}
		ReplaceMaterial
		{
			GetByReference = "Base\\Materials\\Red.material"
		}
		ReplaceMaterialSelectively
		{
			Count = 0
		}
		SpecialEffects
		{
			Value
			{
				Count = 0
			}
		}
		.component NeoAxis.Mesh
		{
			Name = Mesh
			.component NeoAxis.MeshGeometry_Pipe
			{
				Name = Mesh Geometry
				Radius = 0.15
				Height = 0.1
				Thickness = 0.05
				Segments = 64
			}
		}
		.component NeoAxis.InteractiveObject
		{
			Name = Interactive Object
			Text = Click to interact
		}
	}
}
