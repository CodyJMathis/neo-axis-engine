// Made with NeoAxis Engine 2023.1.

.component NeoAxis.PlantType
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1145, 842\"><KW V=\"1\" A=\"EFA410520A2F433BD1A312AF8DBE6E77\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"76B979A5979F4DBE32B89C19B8B96C8F\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"EFA410520A2F433BD1A312AF8DBE6E77\"><KP UN=\"569E67DC1FFD4C697DA0C80D8135B3B6\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"EFA410520A2F433BD1A312AF8DBE6E77\" S=\"False\"><CPD ObjPath=\"$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	MatureAge = 100
	MatureHeight = 25 35
	Ages = VeryYoung, Young, Mature
	LODDistance = 30
	LODVoxelGrid = _128
	LODVoxelThinFactor = 0.3
	Collision = True
	.component NeoAxis.PlantMaterial
	{
		Name = Bark Material
		RealLength = 2
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Woody plant\\Quercus robur\\Data\\Bark.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Twig Material
		PartType = BranchWithLeaves
		LeafCount = 28
		RealLength = 1.5
		UVFrontPosition = 0.95 0.27
		UVFrontDirection = 180
		UVLengthRange = -0.025 0.926
		UVWidth = 0.49
		UVBackPosition = 0.95 0.27
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Woody plant\\Quercus robur\\Data\\Leaves.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Twig Material 2
		Probability = 0.5
		PartType = BranchWithLeaves
		LeafCount = 16
		UVFrontPosition = 0.956 0.766
		UVFrontDirection = 180
		UVLengthRange = -0.022 0.61
		UVWidth = 0.34
		UVBackPosition = 0.956 0.766
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Woody plant\\Quercus robur\\Data\\Leaves.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Twig Material 3
		Probability = 0.25
		PartType = BranchWithLeaves
		LeafCount = 7
		RealLength = 0.6
		UVFrontPosition = 0.16 0.956
		UVFrontDirection = 270
		UVLengthRange = -0.022 0.35
		UVWidth = 0.196
		UVBackPosition = 0.16 0.956
		UVBackDirection = 270
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Woody plant\\Quercus robur\\Data\\Leaves.material"
		}
	}
	.component NeoAxis.CSharpScript
	{
		Name = C# Script
		Code = "public void _GenerateStage(NeoAxis.PlantType sender, NeoAxis.PlantGenerator generator, NeoAxis.PlantGenerator.ElementTypeEnum stage)\r\n{\r\n#if !DEPLOY\r\n\r\n\t//here is a script for the plant generator to specialize our plant type\r\n\t\r\n\t\r\n\t//ideas:\r\n\t\r\n\t//\x0431\x0435\x0440\x0435\x0437\x0430:\r\n\t//\x0431\x0440\x0430\x043d\x0447 \x0432 7 \x0440\x0430\x0437 \x0442\x043e\x043d\x044c\x0448\x0435 \x0447\x0435\x043c \x0440\x043e\x0434\x0438\x0442\x0435\x043b\x044c\r\n\t//\x0441\x0442\x0432\x043e\x043b, \x0431\x0440\x0430\x043d\x0447\x0438, \x0432\x0435\x0442\x043a\x0438 \x0440\x043e\x0432\x043d\x044b\x0435\r\n\t//\x043c\x0430\x043b\x043e \x0431\x0440\x0430\x043d\x0447\x0435\x0439, \x0432\x0435\x0442\x043e\x043a \x0442\x043e\x0436\x0435\r\n\t//\x0441\x0432\x0435\x0440\x0445\x0443 \x0431\x043e\x043b\x044c\x0448\x0435 \x0440\x0430\x0441\x0442\x0438\x0442\x0435\x043b\x044c\x043d\x043e\x0441\x0442\x0438\r\n\t\r\n\t//\x0434\x0443\x0431:\r\n\t//\x0431\x043e\x043b\x044c\x0448\x0435 \x0438\x0437\x043e\x0433\x043d\x0443\x0442\x043e\x0441\x0442\x044c \x0447\x0435\x043c \x0431\x0435\x0440\x0435\x0437\x0430\r\n\t//\x0432\x043d\x0438\x0437\x0443 \x0442\x043e\x0436\x0435 \x043c\x043d\x043e\x0433\x043e \x0440\x0430\x0441\x0442\x0438\x0442\x0435\x043b\x044c\x043d\x043e\x0441\x0442\x0438\r\n\t\r\n\t//\x0435\x043b\x044c:\r\n\t//\x0432\x0435\x0442\x043e\x043a \x043d\x0435\x0442, \x043e\x0434\x043d\x0438 \x0431\x0440\x0430\x043d\x0447\x0438?\r\n\t\r\n\t//\x0432\x044b\x0441\x043e\x0442\x0430\r\n\t//\x0442\x043e\x043b\x0449\x0438\x043d\x0430 \x0441\x043f\x043b\x0430\x0439\x043d\x043e\x0439\r\n\r\n\r\n\tvar minBranchTwigLength = generator.Height / 50.0;\r\n\t\t\r\n\tswitch( stage )\r\n\t{\r\n\tcase PlantGenerator.ElementTypeEnum.Trunk:\r\n\t\t{\r\n\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Bark );\r\n\t\t\tvar startTransform = new Transform( Vector3.Zero, Quaternion.LookAt( Vector3.ZAxis, Vector3.XAxis ) );\r\n\t\t\tvar length = generator.Height * generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\t\tvar thickness = length / 20.0;\r\n\t\r\n\t\t\tgenerator.Trunks.Add( generator.CreateElementCylinder( null, material, startTransform, length, thickness, null, 15.0, 24.0, thickness * 0.2, 0 ) );\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Branch:\r\n\t\t{\r\n\t\t\tvar count = 40;// 40;\r\n\t\t\tif( generator.Age < generator.PlantType.MatureAge )\r\n\t\t\t\tcount = (int)( (double)count * Math.Pow( generator.Age / generator.PlantType.MatureAge, 2 ) );\r\n\t\r\n\t\t\tvar parent = generator.Trunks[ 0 ];\r\n\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Bark );\r\n\t\r\n\t\t\tvar collisionChecker = new PlantGenerator.CollisionChecker();\r\n\t\r\n\t\t\tvar added = 0;\r\n\t\t\tfor( int n = 0; n < count * 10; n++ )\r\n\t\t\t{\r\n\t\t\t\tvar timeFactor = generator.Randomizer.Next( 0.2, 0.95 );\r\n\t\t\t\tvar twistFactor = generator.Randomizer.Next( 1.0 );\r\n\t\r\n\t\t\t\tif( !collisionChecker.Intersects( timeFactor, twistFactor ) )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar verticalAngle = generator.Randomizer.Next( 45, 100 );\r\n\t\t\t\t\tvar twistAngle = generator.Randomizer.Next( -45, 45 );\r\n\t\t\t\t\tvar startTransform = parent.Curve.GetTransformOnSurface( timeFactor, twistFactor, verticalAngle, twistAngle );\r\n\t\r\n\t\t\t\t\tvar thickness = startTransform.parentThickness * generator.Randomizer.Next( 0.3, 0.5 );\r\n\t\r\n\t\t\t\t\tvar length = thickness * 20.0;\r\n\t\t\t\t\tif( length >= minBranchTwigLength )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgenerator.Branches.Add( generator.CreateElementCylinder( parent, material, startTransform.transform, length, thickness, null, 10.0, 14.0, thickness * 0.5, 0.05 ) );// 0.1 ) );\r\n\t\r\n\t\t\t\t\t\tcollisionChecker.Add( timeFactor, twistFactor );\r\n\t\r\n\t\t\t\t\t\tadded++;\r\n\t\t\t\t\t\tif( added >= count )\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Twig:\r\n\t\t{\r\n\t\t\tvar selector = new PlantGenerator.SelectorByProbability( generator );\r\n\t\t\tselector.AddElements( generator.Branches.Where( b => b.Length >= minBranchTwigLength ) );\r\n\t\r\n\t\t\tif( selector.Count != 0 )\r\n\t\t\t{\r\n\t\t\t\tvar count = 300;// 400;// 200;\r\n\t\t\t\tif( generator.Age < generator.PlantType.MatureAge )\r\n\t\t\t\t\tcount = (int)( (double)count * Math.Pow( generator.Age / generator.PlantType.MatureAge, 2 ) );\r\n\t\r\n\t\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Bark );\r\n\t\r\n\t\t\t\tvar added = 0;\r\n\t\t\t\tfor( int n = 0; n < count * 10; n++ )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar parent = selector.Get();\r\n\t\r\n\t\t\t\t\tvar timeFactorOnParentCurve = generator.Randomizer.Next( 0.25, 0.95 );\r\n\t\t\t\t\tvar verticalAngle = generator.Randomizer.Next( 45.0, 100.0 );\r\n\t\t\t\t\tvar twistAngle = generator.Randomizer.Next( -45.0, 45.0 );\r\n\t\t\t\t\tvar startTransform = parent.Curve.GetTransformOnSurface( timeFactorOnParentCurve, generator.Randomizer.Next( 1.0 ), verticalAngle, twistAngle );\r\n\t\r\n\t\t\t\t\tvar thickness = startTransform.parentThickness * generator.Randomizer.Next( 0.3, 0.5 );\r\n\t\r\n\t\t\t\t\tvar length = thickness * 20.0;\r\n\t\t\t\t\tif( length >= minBranchTwigLength )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tgenerator.Twigs.Add( generator.CreateElementCylinder( parent, material, startTransform.transform, length, thickness, null, 10.0, 14.0, thickness * 0.5, 0.2 ) );\r\n\t\r\n\t\t\t\t\t\tadded++;\r\n\t\t\t\t\t\tif( added >= count )\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Leaf:\r\n\t\tif( generator.Branches.Count != 0 || generator.Twigs.Count != 0 )\r\n\t\t{\r\n\t\t\tvar selector = new PlantGenerator.SelectorByProbability( generator );\r\n\t\t\tselector.AddElements( generator.Branches );\r\n\t\t\tselector.AddElements( generator.Twigs );\r\n\t\t\tselector.AddElements( generator.Trunks );\r\n\t\r\n\t\t\t//!!!!\x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x044f\x0442\x044c \x0432 \x0437\x0430\x0432\x0438\x0441\x0438\x043c\x043e\x0441\x0442\x0438 \x043e\x0442 \x0434\x043b\x0438\x043d\x044b\r\n\t\r\n\t\t\t//!!!!\x0440\x0430\x0432\x043d\x043e\x043c\x0435\x0440\x043d\x043e \x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x044f\x0442\x044c. \x0431\x0440\x0430\x043d\x0447\x0438, \x0432\x0435\x0442\x043a\x0438 \x0442\x043e\x0436\x0435\r\n\t\r\n\t\t\t//!!!!\x043f\x0440\x0438\x043c\x0435\x043d\x044f\x0442\x044c LeafCount\r\n\t\r\n\t\t\tvar count = 2000;// 1500;// 2000;// 2500;\r\n\t\t\tif( generator.Age < generator.PlantType.MatureAge )\r\n\t\t\t\tcount = (int)( (double)count * Math.Pow( generator.Age / generator.PlantType.MatureAge, 2.5 ) );\r\n\t\r\n\t\t\t//if( LOD >= 2 )\r\n\t\t\t//\tcount /= 2;\r\n\t\t\t//if( LOD >= 3 )\r\n\t\t\t//\tcount /= 6;\r\n\t\r\n\t\t\tfor( int n = 0; n < count; n++ )\r\n\t\t\t{\r\n\t\t\t\tvar parent = selector.Get();\r\n\t\r\n\t\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.BranchWithLeaves );\r\n\t\r\n\t\t\t\t//!!!!\x043f\x043e\x0432\x043e\x0440\x0430\x0447\x0438\x0432\x0430\x0442\x044c \x043f\x043e \x0433\x043e\x0440\x0438\x0437\x043e\x043d\x0442\x0430\x043b\x0438?\r\n\t\r\n\t\t\t\t//!!!!\x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x0435\x043d\x0438\x0435\r\n\t\r\n\t\t\t\t//!!!!\x043e\x0440\x0438\x0435\x043d\x0442\x0430\x0446\x0438\x044f \x043e\x0442\x043d\x043e\x0441\x0438\x0442\x0435\x043b\x044c\x043d\x043e \x0441\x043e\x043b\x043d\x0446\x0430/\x0432\x0435\x0440\x0445\x0430\r\n\t\r\n\t\t\t\tvar verticalAngle = generator.Randomizer.Next( 90.0 - 45.0, 90.0 + 45.0 );\r\n\t\t\t\tvar twistAngle = generator.Randomizer.Next( -45.0, 45.0 );\r\n\t\r\n\t\t\t\tvar startTransform = parent.Curve.GetTransformOnSurface( generator.Randomizer.Next( 0.3, 0.97 ), generator.Randomizer.Next( 1.0 ), verticalAngle, twistAngle );\r\n\t\r\n\t\t\t\t//!!!!tiltAngle\r\n\t\r\n\t\t\t\tvar length = 1.0;\r\n\t\t\t\tif( material != null )\r\n\t\t\t\t\tlength = material.RealLength * generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\r\n\t\t\t\t//if( LOD >= 2 )\r\n\t\t\t\t//\tlength *= 1.5;\r\n\t\t\t\t//if( LOD >= 3 )\r\n\t\t\t\t//\tlength *= 1.5;\r\n\t\r\n\t\t\t\tgenerator.Leaves.Add( generator.CreateElementRibbon( parent, material, startTransform.transform, length, 0, true, 45 ) );\r\n\t\t\t}\r\n\t\r\n\t\t\t//!!!!\r\n\t\t\t//\x043f\x0440\x043e\x0432\x0435\x0440\x044f\x0442\x044c \x043c\x0430\x0442\x0435\x0440\x0438\x0430\x043b \x0435\x0441\x0442\x044c \x043b\x0438 \x0432\x0435\x0442\x043a\x0430.\r\n\t\t\t//\x0435\x0441\x043b\x0438 \x043d\x0435\x0442 \x0442\x043e\x0433\x0434\x0430 \x0434\x0435\x043b\x0430\x0442\x044c \x043b\x0438\x0441\x0442\x044c\x044f. \x0435\x0441\x0442\x044c \x0435\x0441\x0442\x044c \x0442\x043e\x0433\x0434\x0430 \x0432\x0441\x044e \x0432\x0435\x0442\x043a\x0443 \x0440\x0438\x0431\x0431\x043e\x043d\x043e\x043c.\r\n\t\r\n\t\t}\r\n\t\tbreak;\r\n\t}\r\n\t\r\n#endif\r\n}\r\n"
		__parameter_Stage = Trunk
		Exit
		{
		}
		__parameter_Generator
		{
		}
		.component NeoAxis.EventHandlerComponent
		{
			Name = Event Handler GenerateStage
			WhenEnable = Editor, Simulation, Instance
			Event
			{
				GetByReference = "this:..\\..\\event:GenerateStage"
			}
			HandlerMethod
			{
				GetByReference = "this:..\\method:_GenerateStage(NeoAxis.PlantType,NeoAxis.PlantGenerator,NeoAxis.PlantGenerator.ElementTypeEnum)"
			}
			HandlerFlow
			{
			}
		}
	}
}
