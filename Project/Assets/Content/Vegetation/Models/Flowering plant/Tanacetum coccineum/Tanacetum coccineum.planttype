// Made with NeoAxis Engine 2024.1.

.component NeoAxis.PlantType
{
	EditorDocumentConfiguration = "\xfeff<?xml version=\"1.0\" encoding=\"utf-16\"?><KD V=\"1\"><DGD /><DM N=\"DockingManager\" C=\"2\"><DW N=\"DockingWorkspace\" O=\"0\" S=\"1149, 842\"><KW V=\"1\" A=\"F931B1281F2041D02CAE42DE2930D1D8\"><CGD /><WS UN=\"4A87E34386084E14BC81ED10FBED4D99\" S=\"T,0,50:T,0,50\" D=\"Horizontal\"><WC UN=\"C1E6035943C94CF8C3A3641A82757FAC\" S=\"T,0,50:T,0,50\" NM=\"BarTabGroup\" AR=\"True\" SP=\"F931B1281F2041D02CAE42DE2930D1D8\"><KP UN=\"F931B1281F2041D02CAE42DE2930D1D8\" S=\"False\"><CPD ObjPath=\"\" /></KP><KP UN=\"7EC38DF0A1EB411BC8B47594E126D3B2\" S=\"False\"><CPD ObjPath=\"$C# Script\" /></KP></WC></WS></KW></DW><DF N=\"DockingFloating\" C=\"0\"></DF></DM></KD>"
	MatureAge = 0.25
	MatureHeight = 0.4 0.6
	GenerateIndividuals = False
	GenerateGroups = True
	GroupSize = 8
	GroupRadius = 0.35
	GroupMaxIncline = 10
	GroupMaxInclineFromCenter = 10
	Ages = Young, Mature
	SegmentsByMeter = 15
	SegmentsByCircle = 6
	LODDistance = 7
	LODVoxelGrid = _100
	LODVoxelThinFactor = 0.2
	.component NeoAxis.PlantMaterial
	{
		Name = Bark Material
		UVMode = Point
		UVFrontPosition = 0.77 0.23
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Flowering plant\\Tanacetum coccineum\\Data\\Material.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Twig Material
		PartType = BranchWithLeaves
		LeafCount = 11
		RealLength = 0.06
		UVFrontPosition = 0.492 0.13
		UVFrontDirection = 180
		UVLengthRange = -0.022 0.47
		UVWidth = 0.217
		UVBackPosition = 0.941 0.748
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Flowering plant\\Tanacetum coccineum\\Data\\Material.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Twig Material 2
		PartType = BranchWithLeaves
		LeafCount = 11
		RealLength = 0.04
		UVFrontPosition = 0.26 0.363
		UVFrontDirection = 180
		UVLengthRange = -0.015 0.23
		UVWidth = 0.196
		UVBackPosition = 0.941 0.748
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Flowering plant\\Tanacetum coccineum\\Data\\Material.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Flower Material
		PartType = Flower
		LeafCount = 11
		RealLength = 0.06
		UVFrontPosition = 0.25 0.76
		UVFrontDirection = 180
		UVLengthRange = 0.422 0.926
		UVWidth = 0.47
		UVRadius = 0.255
		UVBackPosition = 0.941 0.748
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Flowering plant\\Tanacetum coccineum\\Data\\Material.material"
		}
	}
	.component NeoAxis.PlantMaterial
	{
		Name = Flower Material 2
		PartType = Flower
		LeafCount = 11
		RealLength = 0.06
		UVFrontPosition = 0.756 0.756
		UVFrontDirection = 180
		UVLengthRange = 0.422 0.926
		UVWidth = 0.47
		UVRadius = 0.235
		UVBackPosition = 0.941 0.748
		UVBackDirection = 180
		Material
		{
			GetByReference = "Content\\Vegetation\\Models\\Flowering plant\\Tanacetum coccineum\\Data\\Material.material"
		}
	}
	.component NeoAxis.CSharpScript
	{
		Name = C# Script
		Code = "public void _GenerateStage(NeoAxis.PlantType sender, NeoAxis.PlantGenerator generator, NeoAxis.PlantGenerator.ElementTypeEnum stage)\r\n{\t\r\n\t//This script is intended to specify the data for a generator.\r\n\t\r\n#if !DEPLOY\r\n\tswitch( stage )\r\n\t{\r\n\tcase PlantGenerator.ElementTypeEnum.Trunk:\r\n\t\t{\r\n\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Bark );\r\n\t\t\tvar startTransform = new Transform( Vector3.Zero, Quaternion.LookAt( Vector3.ZAxis, Vector3.XAxis ) );\r\n\t\t\tvar length = generator.Height * generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\t\tvar thickness = length / 60.0;\r\n\t\r\n\t\t\tvar thicknessFactor = new CurveCubicSpline1F();\r\n\t\t\tthicknessFactor.AddPoint( new Curve1F.Point( 0, 1 ) );\r\n\t\t\tthicknessFactor.AddPoint( new Curve1F.Point( 1, 0.33f ) );\r\n\t\t\t//thicknessFactor.AddPoint( new Curve1F.Point( 0.95f, 0.33f ) );\r\n\t\t\t//thicknessFactor.AddPoint( new Curve1F.Point( 1, 0 ) );\r\n\t\r\n\t\t\tgenerator.Trunks.Add( generator.CreateElementCylinder( null, material, startTransform, length, thickness, thicknessFactor, 10, 13, thickness * 0.5, 0 ) );\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Branch:\r\n\t\t{\r\n\t\t\tvar count = 7;\r\n\t\t\tif( generator.Age < generator.PlantType.MatureAge )\r\n\t\t\t\tcount = (int)( (double)count * Math.Pow( generator.Age / generator.PlantType.MatureAge, 2 ) );\r\n\t\r\n\t\t\tvar parent = generator.Trunks[ 0 ];\r\n\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Bark );\r\n\t\r\n\t\t\tvar added = 0;\r\n\t\t\tfor( int n = 0; n < count * 10; n++ )\r\n\t\t\t{\r\n\t\t\t\tvar timeFactorOnParentCurve = generator.Randomizer.Next( 0.2, 0.65 );\r\n\t\t\t\tvar verticalAngle = generator.Randomizer.Next( 20.0, 50.0 );\r\n\t\t\t\tvar twistAngle = generator.Randomizer.Next( -45.0, 45.0 );\r\n\t\t\t\tvar startTransform = parent.Curve.GetTransformOnSurface( timeFactorOnParentCurve, generator.Randomizer.Next( 1.0 ), verticalAngle, twistAngle );\r\n\t\r\n\t\t\t\tvar thickness = startTransform.parentThickness * generator.Randomizer.Next( 0.8, 1.0 );\r\n\t\r\n\t\t\t\tvar minBranchTwigLength = generator.Height / 150.0;\r\n\t\r\n\t\t\t\tvar length = thickness * 35.0;\r\n\t\t\t\tif( length >= minBranchTwigLength )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar thicknessFactor = new CurveCubicSpline1F();\r\n\t\t\t\t\tthicknessFactor.AddPoint( new Curve1F.Point( 0, 1 ) );\r\n\t\t\t\t\tthicknessFactor.AddPoint( new Curve1F.Point( 1, 0.33f ) );\r\n\t\r\n\t\t\t\t\tgenerator.Branches.Add( generator.CreateElementCylinder( parent, material, startTransform.transform, length, thickness, thicknessFactor, 10.0, 13.0, thickness * 0.5, 3.0 ) );\r\n\t\r\n\t\t\t\t\tadded++;\r\n\t\t\t\t\tif( added >= count )\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\t//case ElementTypeEnum.Twig:\r\n\t//\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Flower:\r\n\t\t{\r\n\t\t\tfor( int n = 0; n < generator.Trunks.Count + generator.Branches.Count; n++ )\r\n\t\t\t{\r\n\t\t\t\tvar maturity = generator.Age / generator.PlantType.MatureAge.Value * generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\t\t\tif( maturity > 0.33 )\r\n\t\t\t\t{\r\n\t\t\t\t\tPlantGenerator.Element parent;\r\n\t\t\t\t\tif( n < generator.Trunks.Count )\r\n\t\t\t\t\t\tparent = generator.Trunks[ n ];\r\n\t\t\t\t\telse\r\n\t\t\t\t\t\tparent = generator.Branches[ n - generator.Trunks.Count ];\r\n\t\r\n\t\t\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.Flower );\r\n\t\r\n\t\t\t\t\t//!!!!twist random\r\n\t\r\n\t\t\t\t\tvar transform1 = parent.Curve.GetTransformByTimeFactor( 1 );\r\n\t\r\n\t\t\t\t\tvar direction = ( transform1.Position - parent.Curve.GetTransformByTimeFactor( 0.99 ).Position ).GetNormalize();\r\n\t\t\t\t\tvar rotation = Quaternion.FromDirectionZAxisUp( direction );\r\n\t\r\n\t\t\t\t\tvar transform = new Transform( transform1.Position, rotation );\r\n\t\r\n\t\t\t\t\tvar length = material != null ? material.RealLength.Value : generator.Height / 15.0;\r\n\t\t\t\t\tlength *= generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\t\t\t\tif( maturity < 1 )\r\n\t\t\t\t\t\tlength *= maturity;\r\n\t\r\n\t\t\t\t\tvar width = length;\r\n\t\r\n\t\t\t\t\tgenerator.Flowers.Add( generator.CreateElementBowl( parent, material, transform, length, width, maturity ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tbreak;\r\n\t\r\n\tcase PlantGenerator.ElementTypeEnum.Leaf:\r\n\t\tif( generator.Branches.Count != 0 || generator.Twigs.Count != 0 )\r\n\t\t{\r\n\t\t\tvar selector = new PlantGenerator.SelectorByProbability( generator );\r\n\t\t\tselector.AddElements( generator.Branches );\r\n\t\t\t//selector.AddElements( Twigs );\r\n\t\t\tselector.AddElements( generator.Trunks );\r\n\t\r\n\t\t\t//!!!!\x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x044f\x0442\x044c \x0432 \x0437\x0430\x0432\x0438\x0441\x0438\x043c\x043e\x0441\x0442\x0438 \x043e\x0442 \x0434\x043b\x0438\x043d\x044b\r\n\t\r\n\t\t\t//!!!!\x0440\x0430\x0432\x043d\x043e\x043c\x0435\x0440\x043d\x043e \x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x044f\x0442\x044c. \x0431\x0440\x0430\x043d\x0447\x0438, \x0432\x0435\x0442\x043a\x0438 \x0442\x043e\x0436\x0435\r\n\t\r\n\t\t\t//!!!!\x043f\x0440\x0438\x043c\x0435\x043d\x044f\x0442\x044c LeafCount\r\n\t\r\n\t\t\tvar material = generator.FindSuitableMaterial( PlantMaterial.PartTypeEnum.BranchWithLeaves );\r\n\t\r\n\t\t\tvar count = 50;\r\n\t\t\tif( generator.Age < generator.PlantType.MatureAge )\r\n\t\t\t\tcount = (int)( (double)count * Math.Pow( generator.Age / generator.PlantType.MatureAge, 2 ) );\r\n\t\r\n\t\t\t//if( LOD >= 2 )\r\n\t\t\t//\tcount /= 2;\r\n\t\t\t//if( LOD >= 3 )\r\n\t\t\t//\tcount /= 6;\r\n\t\r\n\t\t\tfor( int n = 0; n < count; n++ )\r\n\t\t\t{\r\n\t\t\t\tvar parent = selector.Get();\r\n\t\r\n\t\t\t\t//!!!!\x043f\x043e\x0432\x043e\x0440\x0430\x0447\x0438\x0432\x0430\x0442\x044c \x043f\x043e \x0433\x043e\x0440\x0438\x0437\x043e\x043d\x0442\x0430\x043b\x0438?\r\n\t\r\n\t\t\t\t//!!!!\x0440\x0430\x0441\x043f\x0440\x0435\x0434\x0435\x043b\x0435\x043d\x0438\x0435\r\n\t\r\n\t\t\t\t//!!!!\x043e\x0440\x0438\x0435\x043d\x0442\x0430\x0446\x0438\x044f \x043e\x0442\x043d\x043e\x0441\x0438\x0442\x0435\x043b\x044c\x043d\x043e \x0441\x043e\x043b\x043d\x0446\x0430/\x0432\x0435\x0440\x0445\x0430\r\n\t\r\n\t\t\t\tvar verticalAngle = generator.Randomizer.Next( -30.0, 30.0 );\r\n\t\t\t\tvar twistAngle = generator.Randomizer.Next( -90.0, 90.0 );\r\n\t\r\n\t\t\t\tvar startTransform = parent.Curve.GetTransformOnSurface( generator.Randomizer.Next( 0.01, 0.65 ), generator.Randomizer.Next( 1.0 ), verticalAngle, twistAngle );\r\n\t\r\n\t\t\t\t//!!!!tiltAngle\r\n\t\r\n\t\t\t\tvar length = 0.1;\r\n\t\t\t\tif( material != null )\r\n\t\t\t\t{\r\n\t\t\t\t\tvar maturity = Math.Min( generator.Age / generator.PlantType.MatureAge.Value, 1.0 );\r\n\t\t\t\t\tlength = material.RealLength * maturity * generator.Randomizer.Next( 0.8, 1.2 );\r\n\t\t\t\t}\r\n\t\r\n\t\t\t\t//!!!!cross?\r\n\t\t\t\tgenerator.Leaves.Add( generator.CreateElementRibbon( parent, material, startTransform.transform, length, 0, false, 0 ) );\r\n\t\t\t}\r\n\t\r\n\t\t\t//!!!!\r\n\t\t\t//\x043f\x0440\x043e\x0432\x0435\x0440\x044f\x0442\x044c \x043c\x0430\x0442\x0435\x0440\x0438\x0430\x043b \x0435\x0441\x0442\x044c \x043b\x0438 \x0432\x0435\x0442\x043a\x0430.\r\n\t\t\t//\x0435\x0441\x043b\x0438 \x043d\x0435\x0442 \x0442\x043e\x0433\x0434\x0430 \x0434\x0435\x043b\x0430\x0442\x044c \x043b\x0438\x0441\x0442\x044c\x044f. \x0435\x0441\x0442\x044c \x0435\x0441\x0442\x044c \x0442\x043e\x0433\x0434\x0430 \x0432\x0441\x044e \x0432\x0435\x0442\x043a\x0443 \x0440\x0438\x0431\x0431\x043e\x043d\x043e\x043c.\r\n\t\r\n\t\t}\r\n\t\tbreak;\r\n\t}\t\r\n#endif\r\n}\r\n"
		__parameter_Stage = Trunk
		Exit
		{
		}
		__parameter_Generator
		{
		}
		.component NeoAxis.EventHandlerComponent
		{
			Name = Event Handler GenerateStage
			WhenEnable = Editor, Simulation, Instance
			Event
			{
				GetByReference = "this:..\\..\\event:GenerateStage"
			}
			HandlerMethod
			{
				GetByReference = "this:..\\method:_GenerateStage(NeoAxis.PlantType,NeoAxis.PlantGenerator,NeoAxis.PlantGenerator.ElementTypeEnum)"
			}
			HandlerFlow
			{
			}
		}
	}
}
