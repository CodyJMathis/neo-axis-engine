// Copyright (C) NeoAxis Group Ltd. This is part of NeoAxis 3D Engine SDK.
#import "MacAppNativeWrapper.h"
#import "KeyCodes.h"

EKeys GetEKeyByKeyCode(int keyCode)
{
	switch(keyCode)
	{
		case kVK_Return:
			return EKeys_Return;
		case kVK_Tab:
			return EKeys_Tab;
		case kVK_Space:
			return EKeys_Space;
		case kVK_Delete:
			return EKeys_Back;
		case kVK_Escape:
			return EKeys_Escape;
		case kVK_Command:
			return EKeys_LCommand;
		case 0x36:
			return EKeys_RCommand;
		case kVK_Shift:
			return EKeys_LShift;
		case kVK_CapsLock:
			return EKeys_CapsLock;
		case kVK_Option:
			return EKeys_LAlt;
		case kVK_Control:
			return EKeys_LControl;
		case kVK_RightShift:
			return EKeys_RShift;
		case kVK_RightOption:
			return EKeys_RAlt;
		case kVK_RightControl:
			return EKeys_RControl;
		case kVK_Function:
			return EKeys_Function;
		case kVK_F17:
			return EKeys_F17;
		case kVK_VolumeUp:
			return EKeys_VolumeUp;
		case kVK_VolumeDown:
			return EKeys_VolumeDown;
		case kVK_Mute:
			return EKeys_VolumeMute;
		case kVK_F18:
			return EKeys_F18;
		case kVK_F19:
			return EKeys_F19;
		case kVK_F20:
			return EKeys_F20;
		case kVK_F5:
			return EKeys_F5;
		case kVK_F6:
			return EKeys_F6;
		case kVK_F7:
			return EKeys_F7;
		case kVK_F3:
			return EKeys_F3;
		case kVK_F8:
			return EKeys_F8;
		case kVK_F9:
			return EKeys_F9;
		case kVK_F11:
			return EKeys_F11;
		case kVK_F13:
			return EKeys_F13;
		case kVK_F16:
			return EKeys_F16;
		case kVK_F14:
			return EKeys_F14;
		case kVK_F10:
			return EKeys_F10;
		case kVK_F12:
			return EKeys_F12;
		case kVK_F15:
			return EKeys_F15;
		case kVK_Help:
			return EKeys_Help;
		case kVK_Home:
			return EKeys_Home;
		case kVK_PageUp:
			return EKeys_PageUp;
		case kVK_ForwardDelete:
			return EKeys_Delete;
		case kVK_F4:
			return EKeys_F4;
		case kVK_End:
			return EKeys_End;
		case kVK_F2:
			return EKeys_F2;
		case kVK_PageDown:
			return EKeys_PageDown;
		case kVK_F1:
			return EKeys_F1;
		case kVK_LeftArrow:
			return EKeys_KeyLeft;
		case kVK_RightArrow:
			return EKeys_KeyRight;
		case kVK_DownArrow:
			return EKeys_KeyDown;
		case kVK_UpArrow:
			return EKeys_KeyUp;

		case kVK_ANSI_A:
			return EKeys_A;
		case kVK_ANSI_S:
			return EKeys_S;
		case kVK_ANSI_D:
			return EKeys_D;
		case kVK_ANSI_F:
			return EKeys_F;
		case kVK_ANSI_H:
			return EKeys_H;
		case kVK_ANSI_G:
			return EKeys_G;
		case kVK_ANSI_Z:
			return EKeys_Z;
		case kVK_ANSI_X:
			return EKeys_X;
		case kVK_ANSI_C:
			return EKeys_C;
		case kVK_ANSI_V:
			return EKeys_V;			
		case kVK_ANSI_B:
			return EKeys_B;                 
		case kVK_ANSI_Q:
			return EKeys_Q;
		case kVK_ANSI_W:
			return EKeys_W;
		case kVK_ANSI_E:
			return EKeys_E;
		case kVK_ANSI_R:
			return EKeys_R;
		case kVK_ANSI_Y:
			return EKeys_Y;
		case kVK_ANSI_T:
			return EKeys_T;
		case kVK_ANSI_1:
			return EKeys_D1;
		case kVK_ANSI_2:
			return EKeys_D2;
		case kVK_ANSI_3:
			return EKeys_D3;
		case kVK_ANSI_4:
			return EKeys_D4;
		case kVK_ANSI_6:
			return EKeys_D6;
		case kVK_ANSI_5:
			return EKeys_D5;
		case kVK_ANSI_Equal:
			return EKeys_Oemplus;
		case kVK_ANSI_9:
			return EKeys_D9;
		case kVK_ANSI_7:
			return EKeys_D7;
		case kVK_ANSI_Minus:
			return EKeys_OemMinus;
		case kVK_ANSI_8:
			return EKeys_D8;
		case kVK_ANSI_0:
			return EKeys_D0;
		case kVK_ANSI_RightBracket:
			return EKeys_OemCloseBrackets;
		case kVK_ANSI_O:
			return EKeys_O;
		case kVK_ANSI_U:
			return EKeys_U;
		case kVK_ANSI_LeftBracket:
			return EKeys_OemOpenBrackets;
		case kVK_ANSI_I:
			return EKeys_I;
		case kVK_ANSI_P:
			return EKeys_P;
		case kVK_ANSI_L:
			return EKeys_L;
		case kVK_ANSI_J:
			return EKeys_J;
		case kVK_ANSI_Quote:
			return EKeys_OemQuotes;
		case kVK_ANSI_K:
			return EKeys_K;
		case kVK_ANSI_Semicolon:
			return EKeys_OemSemicolon;
		case kVK_ANSI_Backslash:
			return EKeys_OemBackslash;
		case kVK_ANSI_Comma:
			return EKeys_Oemcomma;
		case kVK_ANSI_Slash:
			return EKeys_Divide;
		case kVK_ANSI_N:
			return EKeys_N;
		case kVK_ANSI_M:
			return EKeys_M;
		case kVK_ANSI_Period:
			return EKeys_OemPeriod;
		case kVK_ANSI_Grave:
			return EKeys_Oemtilde;
		case kVK_ANSI_KeypadDecimal:
			return EKeys_Decimal;
		case kVK_ANSI_KeypadMultiply:
			return EKeys_Multiply;
		case kVK_ANSI_KeypadPlus:
			return EKeys_Oemplus;
		case kVK_ANSI_KeypadClear:
			return EKeys_Clear;
		case kVK_ANSI_KeypadDivide:
			return EKeys_Divide;
		case kVK_ANSI_KeypadEnter:
			return EKeys_Enter;
		case kVK_ANSI_KeypadMinus:
			return EKeys_OemMinus;
		case kVK_ANSI_KeypadEquals:
			return EKeys_Oemplus;
		case kVK_ANSI_Keypad0:
			return EKeys_NumPad0;
		case kVK_ANSI_Keypad1:
			return EKeys_NumPad1;
		case kVK_ANSI_Keypad2:
			return EKeys_NumPad2;
		case kVK_ANSI_Keypad3:
			return EKeys_NumPad3;
		case kVK_ANSI_Keypad4:
			return EKeys_NumPad4;
		case kVK_ANSI_Keypad5:
			return EKeys_NumPad5;
		case kVK_ANSI_Keypad6:
			return EKeys_NumPad6;
		case kVK_ANSI_Keypad7:
			return EKeys_NumPad7;
		case kVK_ANSI_Keypad8:
			return EKeys_NumPad8;
		case kVK_ANSI_Keypad9:
			return EKeys_NumPad9;

		case kVK_ISO_Section:
			return EKeys_Paragraph;
	}
	
	return (EKeys)0;
}

bool IsSystemKey(int keyCode)
{
	switch(keyCode)
	{
		case kVK_Return:
		case kVK_Tab:
		case kVK_Delete:
		case kVK_Escape:
		case kVK_Command:
		case 0x36://right command
		case kVK_Shift:
		case kVK_CapsLock:
		case kVK_Option:
		case kVK_Control:
		case kVK_RightShift:
		case kVK_RightOption:
		case kVK_RightControl:
		case kVK_Function:
		case kVK_F17:
		case kVK_VolumeUp:
		case kVK_VolumeDown:
		case kVK_Mute:
		case kVK_F18:
		case kVK_F19:
		case kVK_F20:
		case kVK_F5:
		case kVK_F6:
		case kVK_F7:
		case kVK_F3:
		case kVK_F8:
		case kVK_F9:
		case kVK_F11:
		case kVK_F13:
		case kVK_F16:
		case kVK_F14:
		case kVK_F10:
		case kVK_F12:
		case kVK_F15:
		case kVK_Help:
		case kVK_Home:
		case kVK_PageUp:
		case kVK_ForwardDelete:
		case kVK_F4:
		case kVK_End:
		case kVK_F2:
		case kVK_PageDown:
		case kVK_F1:
		case kVK_LeftArrow:
		case kVK_RightArrow:
		case kVK_DownArrow:
		case kVK_UpArrow:
			return true;
	}
	
	return false;
}
