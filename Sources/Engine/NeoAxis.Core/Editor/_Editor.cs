// Copyright (C) 2022 NeoAxis, Inc. Delaware, USA; NeoAxis Group Ltd. 8 Copthall, Roseau Valley, 00152 Commonwealth of Dominica.
using System;
using System.Drawing;
using System.Windows.Forms;
using Internal.ComponentFactory.Krypton.Ribbon;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Reflection;
using System.IO.Compression;
using Internal.ComponentFactory.Krypton.Toolkit;
using Internal.ComponentFactory.Krypton.Navigator;
using System.Text;
using System.Data;
using System.Linq;
using System.Runtime.InteropServices;
using Internal.Aga.Controls.Tree;
using System.Collections;
using Internal;
using System.Xml;
using Internal.ComponentFactory.Krypton.Workspace;
using Internal.ComponentFactory.Krypton.Docking;
using Internal.SharpBgfx;
using Microsoft.Win32;
using System.Threading;
using NeoAxis.Properties;
using System.Drawing.Drawing2D;
using System.Windows.Forms.VisualStyles;
using System.Collections.Specialized;
using System.Globalization;
using System.Net;
using NeoAxis;
using System.Drawing.Imaging;
using System.Windows.Forms.Design;
using NeoAxis.Editor;
using System.Collections.ObjectModel;
using System.Drawing.Design;
using System.Drawing.Text;




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Backstage of the editor.
	/// </summary>
	public partial class BackstageMenu : BackstageAppMenu
	{
		static bool __0x1;

		bool __0x2;

		public static string needStartBuildProduct;
		public static bool needStartBuildProductAndRun;

		

		public class MyKryptonNavigator : KryptonNavigator
		{
			[Browsable( false )]
			public BackstageMenu owner;

			protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
			{
				if( keyData == Keys.Escape )
				{
					owner.Hide();
					return true;
				}

				return base.ProcessCmdKey( ref msg, keyData );
			}
		}

		

		public BackstageMenu()
		{
			__0x155();

			__0x70.Values.Image = Properties.Resources.BackstageButtonBack;

			__0x68.owner = this;
			__0x68.AllowPageReorder = false;
			__0x68.AllowTabFocus = false;

			__0x98.LinkClicked += __0x145;

			
			
			
			

			__0x68.Bar.ItemMinimumSize = DpiHelper.Default.ScaleValue( new Size( 160, 50 ) );
			__0x68.Bar.BarFirstItemInset = DpiHelper.Default.ScaleValue( 65 );

			__0x97.Text = EngineInfo.NameWithoutVersion;

			try
			{
				var __0x3 = Assembly.GetExecutingAssembly();
				var __0x4 = FileVersionInfo.GetVersionInfo( __0x3.Location );
				string __0x5 = __0x4.FileVersion;
				__0x99.Text = __0x5;
			}
			catch { }

			
		}

		[Browsable( false )]
		public KryptonPage DefaultPage;

		public void SelectDefaultPage()
		{
			if( !string.IsNullOrEmpty( needStartBuildProduct ) && kryptonPageBuild != null )
			{
				__0x68.SelectedPage = kryptonPageBuild;
			}
			else
			{
				if( DefaultPage != null )
					__0x68.SelectedPage = DefaultPage;
				else
					__0x68.SelectedPage = kryptonPageInfo;
			}
		}

		public string Translate( string text )
		{
			return EditorLocalization.Translate( "Backstage", text );
		}

		private void __0x122( object __0x156, EventArgs __0x157 )
		{
			if( DesignMode )
				return;
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( EditorAPI.DarkTheme )
			{
				__0x68.StateCommon.Panel.Color1 = Color.FromArgb( 10, 10, 10 );
				__0x68.StateSelected.Tab.Back.Color1 = Color.FromArgb( 60, 60, 60 );
				__0x68.StatePressed.Tab.Back.Color1 = Color.FromArgb( 60, 60, 60 );
				__0x68.StateTracking.Tab.Back.Color1 = Color.FromArgb( 50, 50, 50 );

				
				
				
				__0x70.StateCommon.Back.Color1 = Color.FromArgb( 10, 10, 10 );

				BackColor = Color.FromArgb( 10, 10, 10 );

				
				

				
				
				
				
				

				foreach( var __0x114 in __0x68.Pages )
				{
					
					__0x114.StateCommon.Page.Color1 = Color.FromArgb( 40, 40, 40 );

					

					EditorThemeUtility.ApplyDarkThemeToForm( __0x114 );
				}

				__0x100.StateCommon.ShortText.Color1 = Color.Red;
				__0x110.StateCommon.ShortText.Color1 = Color.Red;

				

				
				__0x98.LabelStyle = LabelStyle.Custom1;
				__0x98.StateCommon.ShortText.Color1 = Color.FromArgb( 0, 110, 190 );

				
				
				
			}

			
			{
				foreach( var __0x115 in __0x68.Pages )
					__0x115.Text = Translate( __0x115.Text );

				EditorLocalization.TranslateForm( "Backstage", kryptonPageInfo );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageNew );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageBuild );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageLogin );
			}

			__0x148();
			if( DefaultPage == kryptonPageBuild )
				__0x136();

			__0x82.Start();
		}

		private void __0x123( object __0x158, EventArgs __0x159 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( Visible )
			{
				KryptonWinFormsUtility.LockFormUpdate( EditorForm.Instance );
				EditorForm.Instance.unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.2 );

				__0x127();
				__0x129();
				
				__0x28 = true;

				__0x2 = true;
			}

			__0x1 = Visible;
			
		}

		private void __0x124( object __0x160, Internal.ComponentFactory.Krypton.Navigator.KryptonPageEventArgs __0x161 )
		{
			
			
			
			
			
			

			if( __0x161.Item == kryptonPageBuild )
			{
				if( __0x28 )
					__0x136();
				return;
			}

			if( __0x161.Item == kryptonPageExit )
			{
				if( EditorMessageBox.ShowQuestion( Translate( "Exit the app?" ), EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
					EditorForm.Instance.Close();
				return;
			}
		}

		private void __0x125( object __0x162, EventArgs __0x163 )
		{
			Hide();
		}

		private void __0x126( object __0x164, EventArgs __0x165 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x128();
			__0x131();
			
			__0x138();
			__0x149();

			if( Visible && __0x2 )
			{
				__0x2 = false;

				__0x68.Focus();
				__0x68.Select();
				__0x86.Select( 0, 0 );

				
				if( !string.IsNullOrEmpty( needStartBuildProduct ) )
				{
					var __0x6 = needStartBuildProduct;
					var __0x7 = needStartBuildProductAndRun;

					needStartBuildProduct = null;
					needStartBuildProductAndRun = false;

					__0x136( __0x6 );
					__0x138();

					if( __0x139() )
						__0x141( __0x7 );
				}
			}
		}

		

		void __0x127()
		{
			
		}

		void __0x128()
		{
			__0x86.Text = ProjectSettings.Get != null ? ProjectSettings.Get.General.ProjectName.Value.Trim() : "";
			__0x83.Text = VirtualFileSystem.Directories.Project;
		}

		

		volatile bool __0x8;
		Task __0x9;
		volatile int __0x10;
		string __0x11;

		void __0x129()
		{
			{
				string __0x12 = "";
				for( int __0x13 = 1; ; __0x13++ )
				{
					__0x12 = Path.Combine( __0x146(), "New Project " + __0x13.ToString() );
					if( !Directory.Exists( __0x12 ) )
						break;
				}
				__0x74.Text = __0x12;
			}

			var __0x14 = new List<ContentBrowser.Item>();

			ContentBrowserItem_Virtual __0x15;

			__0x15 = new ContentBrowserItem_Virtual( __0x75, null, Translate( "Copy of this project" ) );
			__0x15.Tag = "Copy";
			var __0x16 = __0x15;
			__0x14.Add( __0x15 );

			__0x15 = new ContentBrowserItem_Virtual( __0x75, null, Translate( "Initial project (Use NeoAxis Launcher or initial source package to create default project)" ) );
			__0x15.ShowDisabled = true;
			__0x15.Tag = "DefaultProjectDisabled";
			__0x14.Add( __0x15 );

			__0x75.SetData( __0x14, false );

			__0x75.SelectItems( new ContentBrowser.Item[] { __0x16 } );
		}

		private void __0x130( object __0x166, EventArgs __0x167 )
		{
			var __0x17 = __0x74.Text;

			while( true )
			{
				if( !string.IsNullOrEmpty( __0x17 ) && !Directory.Exists( __0x17 ) )
				{
					try
					{
						__0x17 = Path.GetDirectoryName( __0x17 );
						continue;
					}
					catch { }
				}
				break;
			}

			if( EditorUtility.ShowOpenFileDialog( true, __0x17, null, out string fileName ) )
				__0x74.Text = fileName;
		}

		void __0x131()
		{
			__0x77.Enabled = __0x132();
			__0x74.Enabled = !__0x8;
			__0x79.Enabled = !__0x8;
			__0x75.Enabled = !__0x8;

			__0x80.Value = __0x10;
			__0x80.Visible = __0x8;
			__0x81.Visible = __0x8;
		}

		bool __0x132()
		{
			string __0x18 = __0x74.Text.Trim();
			if( string.IsNullOrEmpty( __0x18 ) )
				return false;
			if( !Path.IsPathRooted( __0x18 ) )
				return false;
			if( __0x75.SelectedItems.Length == 0 )
				return false;

			if( __0x75.SelectedItems[ 0 ].ShowDisabled )
				return false;
			
			
			

			if( __0x8 )
				return false;
			return true;
		}

		private void __0x133( object __0x168, EventArgs __0x169 )
		{
			string __0x19 = __0x74.Text.Trim();
			if( string.IsNullOrEmpty( __0x19 ) )
				return;

			try
			{
				while( Directory.Exists( __0x19 ) && !IOUtility.IsDirectoryEmpty( __0x19 ) )
				{
					var __0x20 = string.Format( Translate( "Destination folder \'{0}\' is not empty. Clear folder and continue?" ), __0x19 );
					var __0x21 = EditorMessageBox.ShowQuestion( __0x20, EMessageBoxButtons.OKCancel );
					if( __0x21 == EDialogResult.Cancel )
						return;

					IOUtility.ClearDirectory( __0x19 );
				}

				if( !Directory.Exists( __0x19 ) )
					Directory.CreateDirectory( __0x19 );

				__0x8 = true;
				__0x80.Visible = true;
				__0x81.Visible = true;
				__0x11 = __0x19;

				var __0x22 = __0x75.SelectedItems[ 0 ].Tag as string;
				__0x9 = new Task( __0x134, __0x22 );
				__0x9.Start();
			}
			catch( Exception ex )
			{
				EditorMessageBox.ShowWarning( ex.Message );
				return;
			}
		}

		void __0x134( object __0x170 )
		{
			var __0x23 = (string)__0x170;

			__0x10 = 0;

			try
			{
				string __0x24 = VirtualFileSystem.Directories.Project;

				FileInfo[] __0x25 = new DirectoryInfo( __0x24 ).GetFiles( "*.*", SearchOption.AllDirectories );

				long __0x26 = 0;
				foreach( var __0x116 in __0x25 )
					__0x26 += __0x116.Length;

				foreach( string __0x117 in Directory.GetDirectories( __0x24, "*", SearchOption.AllDirectories ) )
				{
					if( Directory.Exists( __0x117 ) )
						Directory.CreateDirectory( __0x117.Replace( __0x24, __0x11 ) );
				}

				long __0x27 = 0;
				foreach( var __0x118 in __0x25 )
				{
					if( File.Exists( __0x118.FullName ) )
						File.Copy( __0x118.FullName, __0x118.FullName.Replace( __0x24, __0x11 ), false );

					__0x27 += __0x118.Length;
					__0x10 = (int)( (double)__0x27 / (double)__0x26 * 100.0 );
					if( __0x10 > 100 )
						__0x10 = 100;

					if( !__0x8 )
						return;
				}

				__0x10 = 100;

				
				try
				{
					Win32Utility.ShellExecuteEx( null, __0x11 );
					
				}
				catch { }

				
				__0x8 = false;

				ScreenNotifications.Show( Translate( "The project was created successfully." ) );
			}
			catch( Exception ex )
			{
				EditorMessageBox.ShowWarning( ex.Message );
			}
		}

		private void __0x135( object __0x171, EventArgs __0x172 )
		{
			
			

			__0x8 = false;
		}

		

		bool __0x28;
		ProductBuildInstance __0x29;

		void __0x136( string __0x173 = "" )
		{
			__0x28 = false;

			
			string[] __0x30;
			try
			{
				__0x30 = VirtualDirectory.GetFiles( "", "*.product", SearchOption.AllDirectories );
			}
			catch
			{
				__0x30 = new string[ 0 ];
			}

			var __0x31 = new List<ContentBrowser.Item>();
			ContentBrowser.Item __0x32 = null;

			__0x110.Visible = false;

			foreach( var __0x119 in __0x30 )
			{
				string __0x33 = Path.GetFileName( __0x119 );

				var __0x34 = new ESet<string>();

				var __0x35 = ResourceManager.LoadResource<Product>( __0x119 );
				if( __0x35 != null )
				{
					string __0x36 = __0x35.Platform.ToString();

					bool __0x37 = false;
					if( !__0x34.Contains( __0x36 ) )
					{
						var __0x38 = Properties.Resources.ResourceManager.GetObject( __0x36 + "_16", Properties.Resources.Culture ) as Image;
						var __0x39 = Properties.Resources.ResourceManager.GetObject( __0x36 + "_32", Properties.Resources.Culture ) as Image;
						if( __0x38 != null )
						{
							__0x94.AddImageKey( __0x36, __0x38, __0x39 );

							__0x34.Add( __0x36 );
							__0x37 = true;
						}
					}

					string __0x40 = __0x35.Name;
					if( string.IsNullOrEmpty( __0x40 ) )
						__0x40 = "\'No name\'";

					var __0x41 = string.Format( "{0} - {1} - {2}", __0x40, __0x35.Platform, __0x119 );
					var __0x42 = new ContentBrowserItem_Virtual( __0x94, null, __0x41 );
					__0x42.Tag = __0x35;
					if( __0x37 )
						__0x42.imageKey = __0x36;

					if( !__0x152( __0x35.Platform ) )
					{
						__0x42.ShowDisabled = true;
						__0x110.Visible = true;
					}

					__0x31.Add( __0x42 );

					if( !string.IsNullOrEmpty( __0x173 ) && __0x173 == __0x119 )
						__0x32 = __0x42;
				}
			}

			CollectionUtility.MergeSort( __0x31, delegate ( ContentBrowser.Item __0x174, ContentBrowser.Item __0x175 )
			{
				var __0x43 = (Product)__0x174.Tag;
				var __0x44 = (Product)__0x175.Tag;

				var __0x45 = __0x43.SortOrder.Value;
				var __0x46 = __0x44.SortOrder.Value;

				if( __0x45 < __0x46 )
					return -1;
				if( __0x45 > __0x46 )
					return 1;

				return string.Compare( __0x43.Name, __0x44.Name );
			} );

			__0x94.SetData( __0x31, false );

			if( __0x32 != null )
				__0x94.SelectItems( new ContentBrowser.Item[] { __0x32 } );
			else if( __0x31.Count != 0 )
				__0x94.SelectItems( new ContentBrowser.Item[] { __0x31[ 0 ] } );
		}

		private void __0x137( object __0x176, EventArgs __0x177 )
		{
			if( EditorUtility.ShowOpenFileDialog( true, __0x93.Text, null, out string fileName ) )
				__0x93.Text = fileName;
		}

		void __0x138()
		{
#if !DEPLOY
			
			if( __0x29 != null && ( __0x29.State != ProductBuildInstance.StateEnum.Building || __0x29.BuildFunctionFinished ) )
			{
				var __0x47 = __0x29;
				__0x29 = null;

				if( __0x47.State == ProductBuildInstance.StateEnum.Error )
					EditorMessageBox.ShowWarning( __0x47.Error );
			}

			

			var __0x48 = __0x29 != null && __0x29.State == ProductBuildInstance.StateEnum.Building;

			var __0x49 = __0x140();

			__0x91.Enabled = __0x139();
			__0x95.Enabled = __0x91.Enabled && __0x49 != null && __0x49.SupportsBuildAndRun;

			if( __0x49 as Product_Store != null )
				__0x95.Text = "Build and Upload";
			else
				__0x95.Text = "Build and Run";

			__0x93.Enabled = !__0x48;
			__0x89.Enabled = !__0x48;
			__0x94.Enabled = !__0x48;
			if( __0x29 != null )
				__0x88.Value = (int)( __0x29.Progress * 100 );
			__0x88.Visible = __0x48;
			__0x87.Visible = __0x48;
#endif
		}

		bool __0x139()
		{
			var __0x50 = __0x140();
			if( __0x50 == null || !__0x152( __0x50.Platform ) )
				return false;
			string __0x51 = __0x93.Text.Trim();
			if( string.IsNullOrEmpty( __0x51 ) )
				return false;
			if( !Path.IsPathRooted( __0x51 ) )
				return false;
			if( __0x94.SelectedItems.Length == 0 )
				return false;
			if( __0x29 != null )
				return false;

			return true;
		}

		Product __0x140()
		{
			if( __0x94.SelectedItems.Length != 0 )
				return (Product)__0x94.SelectedItems[ 0 ].Tag;
			return null;
		}

		void __0x141( bool __0x178 )
		{
#if !DEPLOY
			string __0x52 = __0x93.Text.Trim();
			if( string.IsNullOrEmpty( __0x52 ) )
				return;

			var __0x53 = __0x140();
			if( __0x53 == null )
				return;

			
			if( Directory.Exists( __0x52 ) && !IOUtility.IsDirectoryEmpty( __0x52 ) && !( __0x53 is Product_Store ) )
			{
				var __0x54 = string.Format( Translate( "Destination folder \'{0}\' is not empty. Clear folder and continue?" ), __0x52 );
				if( EditorMessageBox.ShowQuestion( __0x54, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
					return;

				
				try
				{
					DirectoryInfo __0x55 = new DirectoryInfo( __0x52 );
					foreach( FileInfo __0x120 in __0x55.GetFiles() )
						__0x120.Delete();
					foreach( DirectoryInfo __0x121 in __0x55.GetDirectories() )
						__0x121.Delete( true );
				}
				catch( Exception e )
				{
					EditorMessageBox.ShowWarning( e.Message );
					return;
				}
			}

			
			if( __0x53 is Product_Store )
			{
				var __0x56 = "";
				{
					if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
					{
						if( LoginUtility.GetRequestedFullLicenseInfo( out var license, out _, out var error2 ) )
						{
							if( !string.IsNullOrEmpty( license ) )
								__0x56 = email;
						}
					}
				}

				if( string.IsNullOrEmpty( __0x56 ) )
				{
					EditorMessageBox.ShowWarning( "Please login to build store products." );
					return;
				}
			}

			
			try
			{
				if( !Directory.Exists( __0x52 ) )
					Directory.CreateDirectory( __0x52 );

				__0x29 = ProductBuildInstance.Start( __0x53, __0x52, __0x178 );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			__0x138();
#endif
		}

		private void __0x142( object __0x179, EventArgs __0x180 )
		{
			__0x141( false );
		}

		private void __0x143( object __0x181, EventArgs __0x182 )
		{
			__0x141( true );
		}

		private void __0x144( object __0x183, EventArgs __0x184 )
		{
			if( __0x29 != null )
				__0x29.RequestCancel = true;
		}

		

		
		
		

		

		
		
		
		

		
		

		
		
		
		

		private void __0x145( object __0x185, EventArgs __0x186 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/" ) { UseShellExecute = true } );
		}

		string __0x146()
		{
			return Path.Combine( Environment.GetFolderPath( Environment.SpecialFolder.MyDocuments ), "NeoAxis" );
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x57 = base.CreateParams;
				__0x57.ExStyle |= 0x02000000;
				return __0x57;
			}
		}

		public static bool BackstageVisible
		{
			get { return __0x1; }
		}

		

		bool __0x147( string __0x187 )
		{
			try
			{
				var __0x58 = new System.Net.Mail.MailAddress( __0x187 );
				return __0x58.Address == __0x187;
			}
			catch
			{
				return false;
			}
		}

		void __0x148()
		{
			__0x100.Text = "";

			
			

			
		}

		bool __0x59 = true;

		void __0x149()
		{
			

			if( __0x59 )
			{
				if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
					__0x108.Text = email;

				__0x59 = false;
			}

			{
				string __0x60;
				
				string __0x61 = "";
				if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
				{
					__0x60 = email;
					if( LoginUtility.GetRequestedFullLicenseInfo( out var license, out _,  out var error2 ) )
					{
						if( !string.IsNullOrEmpty( license ) )
							__0x60 += " - " + license + " license";
						
						
						__0x61 = error2;
					}
					else
						__0x60 += " - Not registered";
				}
				else
					__0x60 = "Not registered";

				__0x102.Text = __0x60;
				__0x100.Text = __0x61;

				
				

				
				
				

				

				
				
				
				
				
				

				
				
				
				
				
				
				
			}

			{
				var __0x62 = __0x108.Text.Trim().ToLower();
				var __0x63 = __0x105.Text;
				__0x104.Enabled = !string.IsNullOrEmpty( __0x62 ) && !string.IsNullOrEmpty( __0x63 );
			}
		}

		private void __0x150( object __0x188, EventArgs __0x189 )
		{
			var __0x64 = __0x108.Text.Trim().ToLower();
			var __0x65 = __0x105.Text;

			if( string.IsNullOrEmpty( __0x64 ) || string.IsNullOrEmpty( __0x65 ) )
				return;

			if( !__0x147( __0x64 ) )
			{
				EditorMessageBox.ShowWarning( "Invalid email." );
				return;
			}

			LoginUtility.SetCurrentLicense( __0x108.Text, __0x105.Text );
		}

		private void __0x151( object __0x190, EventArgs __0x191 )
		{
			Process.Start( new ProcessStartInfo( "https://store.neoaxis.com/my-account/" ) { UseShellExecute = true } );
			
		}

		bool __0x152( SystemSettings.Platform __0x192 )
		{
			if( __0x192 == SystemSettings.Platform.Store )
				return true;
			var __0x66 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Platforms", __0x192.ToString() );
			return Directory.Exists( __0x66 );
		}

		private void __0x153( object __0x193, EventArgs __0x194 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/support/donate" ) { UseShellExecute = true } );
			
		}

		private void __0x154( object __0x195, EventArgs __0x196 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/licensing" ) { UseShellExecute = true } );
		}

		
		
		
		

		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class BackstageMenu
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x67 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing && (__0x67 != null))
			{
				__0x67.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x155()
		{
			this.__0x67 = new System.ComponentModel.Container();
			this.__0x70 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x82 = new System.Windows.Forms.Timer(this.__0x67);
			this.__0x68 = new NeoAxis.Editor.BackstageMenu.MyKryptonNavigator();
			this.kryptonPageInfo = new Internal.ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x83 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x84 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x85 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x86 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x72 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageNew = new Internal.ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x81 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x80 = new NeoAxis.Editor.EngineProgressBar();
			this.__0x79 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x78 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x77 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x73 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x74 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x75 = new NeoAxis.Editor.ContentBrowser();
			this.__0x71 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageBuild = new Internal.ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x111 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLinkLabel();
			this.__0x110 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x87 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x88 = new NeoAxis.Editor.EngineProgressBar();
			this.__0x89 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x90 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x95 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x91 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x92 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x93 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x94 = new NeoAxis.Editor.ContentBrowser();
			this.__0x76 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageLogin = new Internal.ComponentFactory.Krypton.Navigator.KryptonPage();
			
			
			
			
			
			
			
			
			this.__0x112 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x113 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x100 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x101 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x102 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x103 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x104 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x105 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x106 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x107 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x108 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x109 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageAbout = new Internal.ComponentFactory.Krypton.Navigator.KryptonPage();
			this.__0x99 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x98 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLinkLabel();
			this.__0x96 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x97 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageExit = new Internal.ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x69 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x68)).BeginInit();
			this.__0x68.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageInfo)).BeginInit();
			this.kryptonPageInfo.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageNew)).BeginInit();
			this.kryptonPageNew.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageBuild)).BeginInit();
			this.kryptonPageBuild.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageLogin)).BeginInit();
			this.kryptonPageLogin.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageAbout)).BeginInit();
			this.kryptonPageAbout.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageExit)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x70.ButtonStyle = Internal.ComponentFactory.Krypton.Toolkit.ButtonStyle.Custom1;
			this.__0x70.Location = new System.Drawing.Point(40, 2);
			this.__0x70.Name = "kryptonButtonBack";
			this.__0x70.OverrideDefault.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x70.Size = new System.Drawing.Size(60, 60);
			this.__0x70.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x70.StateCommon.Back.ColorStyle = Internal.ComponentFactory.Krypton.Toolkit.PaletteColorStyle.Solid;
			this.__0x70.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x70.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x70.StateTracking.Content.Image.Effect = Internal.ComponentFactory.Krypton.Toolkit.PaletteImageEffect.Dark;
			this.__0x70.TabIndex = 1;
			
			this.__0x70.Values.Text = "";
			this.__0x70.Click += new System.EventHandler(this.__0x125);
			
			
			
			this.__0x82.Tick += new System.EventHandler(this.__0x126);
			
			
			
			this.__0x68.AllowPageReorder = false;
			this.__0x68.AllowTabFocus = false;
			this.__0x68.Bar.BarFirstItemInset = 65;
			this.__0x68.Bar.BarMinimumHeight = 160;
			this.__0x68.Bar.BarOrientation = Internal.ComponentFactory.Krypton.Toolkit.VisualOrientation.Left;
			this.__0x68.Bar.ItemMinimumSize = new System.Drawing.Size(160, 50);
			this.__0x68.Bar.ItemOrientation = Internal.ComponentFactory.Krypton.Toolkit.ButtonOrientation.FixedTop;
			this.__0x68.Bar.TabBorderStyle = Internal.ComponentFactory.Krypton.Toolkit.TabBorderStyle.SquareEqualSmall;
			this.__0x68.Bar.TabStyle = Internal.ComponentFactory.Krypton.Toolkit.TabStyle.LowProfile;
			this.__0x68.Button.ButtonDisplayLogic = Internal.ComponentFactory.Krypton.Navigator.ButtonDisplayLogic.None;
			this.__0x68.Button.CloseButtonAction = Internal.ComponentFactory.Krypton.Navigator.CloseButtonAction.None;
			this.__0x68.Button.CloseButtonDisplay = Internal.ComponentFactory.Krypton.Navigator.ButtonDisplay.Hide;
			this.__0x68.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x68.Location = new System.Drawing.Point(0, 0);
			this.__0x68.Name = "kryptonNavigator1";
			this.__0x68.Pages.AddRange(new Internal.ComponentFactory.Krypton.Navigator.KryptonPage[] {
            this.kryptonPageInfo,
            this.kryptonPageNew,
            this.kryptonPageBuild,
            this.kryptonPageLogin,
            this.kryptonPageAbout,
            this.kryptonPageExit});
			this.__0x68.SelectedIndex = 3;
			this.__0x68.Size = new System.Drawing.Size(1507, 791);
			this.__0x68.StateCommon.Panel.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x68.StateCommon.Tab.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x68.StateCommon.Tab.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x68.StateCommon.Tab.Content.Padding = new System.Windows.Forms.Padding(20, -1, -1, -1);
			this.__0x68.StateCommon.Tab.Content.ShortText.Color1 = System.Drawing.Color.White;
			this.__0x68.StateCommon.Tab.Content.ShortText.TextH = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Near;
			this.__0x68.StatePressed.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(26)))), ((int)(((byte)(72)))), ((int)(((byte)(138)))));
			this.__0x68.StateSelected.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(62)))), ((int)(((byte)(107)))), ((int)(((byte)(174)))));
			this.__0x68.StateTracking.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(26)))), ((int)(((byte)(72)))), ((int)(((byte)(138)))));
			this.__0x68.TabIndex = 0;
			this.__0x68.TabClicked += new System.EventHandler<Internal.ComponentFactory.Krypton.Navigator.KryptonPageEventArgs>(this.__0x124);
			
			
			
			this.kryptonPageInfo.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageInfo.Controls.Add(this.__0x83);
			this.kryptonPageInfo.Controls.Add(this.__0x84);
			this.kryptonPageInfo.Controls.Add(this.__0x85);
			this.kryptonPageInfo.Controls.Add(this.__0x86);
			this.kryptonPageInfo.Controls.Add(this.__0x72);
			this.kryptonPageInfo.Flags = 65534;
			this.kryptonPageInfo.LastVisibleSet = true;
			this.kryptonPageInfo.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageInfo.Name = "kryptonPageInfo";
			this.kryptonPageInfo.Size = new System.Drawing.Size(1337, 823);
			this.kryptonPageInfo.StateCommon.BorderEdge.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Separator.Border.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Separator.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.kryptonPageInfo.StateCommon.Tab.Border.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Tab.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.kryptonPageInfo.Text = "Info";
			this.kryptonPageInfo.ToolTipTitle = "Page ToolTip";
			this.kryptonPageInfo.UniqueName = "6F5BFFBBB1714484488850528E4A2EF5";
			
			
			
			this.__0x83.Location = new System.Drawing.Point(192, 160);
			this.__0x83.Name = "kryptonTextBoxInfoLocation";
			this.__0x83.ReadOnly = true;
			this.__0x83.Size = new System.Drawing.Size(602, 22);
			this.__0x83.TabIndex = 1;
			this.__0x83.WordWrap = false;
			
			
			
			this.__0x84.Location = new System.Drawing.Point(40, 162);
			this.__0x84.Name = "kryptonLabel8";
			this.__0x84.Size = new System.Drawing.Size(73, 20);
			this.__0x84.TabIndex = 7;
			this.__0x84.Values.Text = "Location:";
			
			
			
			this.__0x85.Location = new System.Drawing.Point(40, 127);
			this.__0x85.Name = "kryptonLabel7";
			this.__0x85.Size = new System.Drawing.Size(56, 20);
			this.__0x85.TabIndex = 6;
			this.__0x85.Values.Text = "Name:";
			
			
			
			this.__0x86.Location = new System.Drawing.Point(192, 127);
			this.__0x86.Name = "kryptonTextBoxInfoName";
			this.__0x86.ReadOnly = true;
			this.__0x86.Size = new System.Drawing.Size(602, 22);
			this.__0x86.TabIndex = 0;
			this.__0x86.WordWrap = false;
			
			
			
			this.__0x72.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x72.Location = new System.Drawing.Point(31, 64);
			this.__0x72.Name = "kryptonLabel3";
			this.__0x72.Size = new System.Drawing.Size(147, 34);
			this.__0x72.TabIndex = 3;
			this.__0x72.Values.Text = "Project info";
			
			
			
			this.kryptonPageNew.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageNew.Controls.Add(this.__0x81);
			this.kryptonPageNew.Controls.Add(this.__0x80);
			this.kryptonPageNew.Controls.Add(this.__0x79);
			this.kryptonPageNew.Controls.Add(this.__0x78);
			this.kryptonPageNew.Controls.Add(this.__0x77);
			this.kryptonPageNew.Controls.Add(this.__0x73);
			this.kryptonPageNew.Controls.Add(this.__0x74);
			this.kryptonPageNew.Controls.Add(this.__0x75);
			this.kryptonPageNew.Controls.Add(this.__0x71);
			this.kryptonPageNew.Flags = 65534;
			this.kryptonPageNew.LastVisibleSet = true;
			this.kryptonPageNew.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageNew.Name = "kryptonPageNew";
			this.kryptonPageNew.Size = new System.Drawing.Size(1345, 823);
			this.kryptonPageNew.Text = "New";
			this.kryptonPageNew.ToolTipTitle = "Page ToolTip";
			this.kryptonPageNew.UniqueName = "9A208880D6A24E29B3A6B24AA17F1383";
			
			
			
			this.__0x81.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x81.Location = new System.Drawing.Point(428, 488);
			this.__0x81.Name = "kryptonButtonNewCancel";
			this.__0x81.Size = new System.Drawing.Size(117, 32);
			this.__0x81.TabIndex = 10;
			this.__0x81.Values.Text = "Cancel";
			this.__0x81.Visible = false;
			this.__0x81.Click += new System.EventHandler(this.__0x135);
			
			
			
			this.__0x80.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x80.Location = new System.Drawing.Point(171, 488);
			this.__0x80.Name = "progressBarNew";
			this.__0x80.Size = new System.Drawing.Size(247, 32);
			this.__0x80.TabIndex = 9;
			this.__0x80.Visible = false;
			
			
			
			this.__0x79.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x79.Location = new System.Drawing.Point(1148, 149);
			this.__0x79.Name = "kryptonButtonNewBrowse";
			this.__0x79.Size = new System.Drawing.Size(117, 32);
			this.__0x79.TabIndex = 1;
			this.__0x79.Values.Text = "Browse...";
			this.__0x79.Click += new System.EventHandler(this.__0x130);
			
			
			
			this.__0x78.Location = new System.Drawing.Point(40, 194);
			this.__0x78.Name = "kryptonLabel6";
			this.__0x78.Size = new System.Drawing.Size(78, 20);
			this.__0x78.TabIndex = 8;
			this.__0x78.Values.Text = "Template:";
			
			
			
			this.__0x77.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x77.Location = new System.Drawing.Point(44, 488);
			this.__0x77.Name = "kryptonButtonNewCreate";
			this.__0x77.Size = new System.Drawing.Size(117, 32);
			this.__0x77.TabIndex = 3;
			this.__0x77.Values.Text = "Create";
			this.__0x77.Click += new System.EventHandler(this.__0x133);
			
			
			
			this.__0x73.Location = new System.Drawing.Point(41, 127);
			this.__0x73.Name = "kryptonLabel4";
			this.__0x73.Size = new System.Drawing.Size(73, 20);
			this.__0x73.TabIndex = 5;
			this.__0x73.Values.Text = "Location:";
			
			
			
			this.__0x74.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x74.Location = new System.Drawing.Point(45, 154);
			this.__0x74.Name = "kryptonTextBoxNewFolder";
			this.__0x74.Size = new System.Drawing.Size(1097, 23);
			this.__0x74.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x74.TabIndex = 0;
			this.__0x74.Text = "C:\\_Temp";
			this.__0x74.WordWrap = false;
			
			
			
			this.__0x75.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x75.CanSelectObjectSettings = false;
			this.__0x75.FilteringMode = null;
			this.__0x75.ListViewModeOverride = null;
			this.__0x75.Location = new System.Drawing.Point(44, 221);
			this.__0x75.Margin = new System.Windows.Forms.Padding(4);
			this.__0x75.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x75.Name = "objectsBrowserNew";
			this.__0x75.ReadOnlyHierarchy = false;
			this.__0x75.ShowToolBar = false;
			this.__0x75.Size = new System.Drawing.Size(1221, 251);
			this.__0x75.TabIndex = 2;
			this.__0x75.ThisIsSettingsWindow = false;
			
			
			
			this.__0x71.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x71.Location = new System.Drawing.Point(31, 64);
			this.__0x71.Name = "kryptonLabel2";
			this.__0x71.Size = new System.Drawing.Size(151, 34);
			this.__0x71.TabIndex = 2;
			this.__0x71.Values.Text = "New project";
			
			
			
			this.kryptonPageBuild.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageBuild.Controls.Add(this.__0x111);
			this.kryptonPageBuild.Controls.Add(this.__0x110);
			this.kryptonPageBuild.Controls.Add(this.__0x87);
			this.kryptonPageBuild.Controls.Add(this.__0x88);
			this.kryptonPageBuild.Controls.Add(this.__0x89);
			this.kryptonPageBuild.Controls.Add(this.__0x90);
			this.kryptonPageBuild.Controls.Add(this.__0x95);
			this.kryptonPageBuild.Controls.Add(this.__0x91);
			this.kryptonPageBuild.Controls.Add(this.__0x92);
			this.kryptonPageBuild.Controls.Add(this.__0x93);
			this.kryptonPageBuild.Controls.Add(this.__0x94);
			this.kryptonPageBuild.Controls.Add(this.__0x76);
			this.kryptonPageBuild.Flags = 65534;
			this.kryptonPageBuild.LastVisibleSet = true;
			this.kryptonPageBuild.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageBuild.Name = "kryptonPageBuild";
			this.kryptonPageBuild.Size = new System.Drawing.Size(1345, 789);
			this.kryptonPageBuild.Text = "Build";
			this.kryptonPageBuild.ToolTipTitle = "Page ToolTip";
			this.kryptonPageBuild.UniqueName = "3579A0DBAE6F4DD2C0B5DCB61AEC1F49";
			
			
			
			this.__0x111.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x111.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.Custom1;
			this.__0x111.Location = new System.Drawing.Point(54, 548);
			this.__0x111.Name = "kryptonLinkLabel2";
			this.__0x111.OverrideFocus.DrawFocus = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x111.Size = new System.Drawing.Size(419, 20);
			this.__0x111.StateCommon.LongText.Color1 = System.Drawing.Color.Red;
			this.__0x111.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x111.StateNormal.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x111.StateNormal.ShortText.Color2 = System.Drawing.Color.Red;
			this.__0x111.TabIndex = 30;
			this.__0x111.Values.Text = "Install \'Platform Tools\' from the Stores to unlock all platforms.";
			this.__0x111.Visible = false;
			
			
			
			this.__0x110.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x110.Location = new System.Drawing.Point(40, 508);
			this.__0x110.Name = "kryptonLabelInstallPlatformTools";
			this.__0x110.Size = new System.Drawing.Size(499, 24);
			this.__0x110.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x110.StateCommon.ShortText.Font = new System.Drawing.Font("Tahoma", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x110.TabIndex = 29;
			this.__0x110.Values.Text = "Install \'Platform Tools\' from the Stores to unlock all platforms.";
			
			
			
			this.__0x87.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x87.Location = new System.Drawing.Point(584, 454);
			this.__0x87.Name = "kryptonButtonBuildCancel";
			this.__0x87.Size = new System.Drawing.Size(117, 32);
			this.__0x87.TabIndex = 6;
			this.__0x87.Values.Text = "Cancel";
			this.__0x87.Visible = false;
			this.__0x87.Click += new System.EventHandler(this.__0x144);
			
			
			
			this.__0x88.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x88.Margin = new System.Windows.Forms.Padding( 3, 4, 3, 4 );
			this.__0x88.Location = new System.Drawing.Point( 327, 454);
			this.__0x88.Name = "progressBarBuild";
			this.__0x88.Size = new System.Drawing.Size(247, 32);
			this.__0x88.TabIndex = 5;
			this.__0x88.Visible = false;
			
			
			
			this.__0x89.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x89.Location = new System.Drawing.Point(1148, 149);
			this.__0x89.Name = "kryptonButtonPackageBrowse";
			this.__0x89.Size = new System.Drawing.Size(117, 32);
			this.__0x89.TabIndex = 2;
			this.__0x89.Values.Text = "Browse...";
			this.__0x89.Click += new System.EventHandler(this.__0x137);
			
			
			
			this.__0x90.Location = new System.Drawing.Point(40, 194);
			this.__0x90.Name = "kryptonLabel9";
			this.__0x90.Size = new System.Drawing.Size(143, 20);
			this.__0x90.TabIndex = 16;
			this.__0x90.Values.Text = "Product settings file:";
			
			
			
			this.__0x95.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x95.Location = new System.Drawing.Point(170, 454);
			this.__0x95.Name = "kryptonButtonPackageCreateAndRun";
			this.__0x95.Size = new System.Drawing.Size(147, 32);
			this.__0x95.TabIndex = 4;
			this.__0x95.Values.Text = "Build and Run";
			this.__0x95.Click += new System.EventHandler(this.__0x143);
			
			
			
			this.__0x91.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x91.Location = new System.Drawing.Point(44, 454);
			this.__0x91.Name = "kryptonButtonPackageCreate";
			this.__0x91.Size = new System.Drawing.Size(117, 32);
			this.__0x91.TabIndex = 3;
			this.__0x91.Values.Text = "Build";
			this.__0x91.Click += new System.EventHandler(this.__0x142);
			
			
			
			this.__0x92.Location = new System.Drawing.Point(40, 127);
			this.__0x92.Name = "kryptonLabel10";
			this.__0x92.Size = new System.Drawing.Size(130, 20);
			this.__0x92.TabIndex = 15;
			this.__0x92.Values.Text = "Destination folder:";
			
			
			
			this.__0x93.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x93.Location = new System.Drawing.Point(45, 154);
			this.__0x93.Name = "kryptonTextBoxPackageDestinationFolder";
			this.__0x93.Size = new System.Drawing.Size(1097, 23);
			this.__0x93.TabIndex = 1;
			this.__0x93.Text = "C:\\_Temp";
			this.__0x93.WordWrap = false;
			
			
			
			this.__0x94.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x94.CanSelectObjectSettings = false;
			this.__0x94.FilteringMode = null;
			this.__0x94.ListViewModeOverride = null;
			this.__0x94.Location = new System.Drawing.Point(44, 221);
			this.__0x94.Margin = new System.Windows.Forms.Padding(4);
			this.__0x94.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x94.Name = "contentBrowserPackage";
			this.__0x94.ReadOnlyHierarchy = false;
			this.__0x94.ShowToolBar = false;
			this.__0x94.Size = new System.Drawing.Size(1221, 217);
			this.__0x94.TabIndex = 0;
			this.__0x94.ThisIsSettingsWindow = false;
			
			
			
			this.__0x76.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x76.Location = new System.Drawing.Point(31, 64);
			this.__0x76.Name = "kryptonLabel5";
			this.__0x76.Size = new System.Drawing.Size(169, 34);
			this.__0x76.TabIndex = 3;
			this.__0x76.Values.Text = "Build product";
			
			
			
			this.kryptonPageLogin.AutoHiddenSlideSize = new System.Drawing.Size(250, 250);
			
			
			
			
			
			
			
			
			this.kryptonPageLogin.Controls.Add( this.__0x112 );
			this.kryptonPageLogin.Controls.Add(this.__0x113);
			this.kryptonPageLogin.Controls.Add(this.__0x100);
			this.kryptonPageLogin.Controls.Add(this.__0x101);
			this.kryptonPageLogin.Controls.Add(this.__0x102);
			this.kryptonPageLogin.Controls.Add(this.__0x103);
			this.kryptonPageLogin.Controls.Add(this.__0x104);
			this.kryptonPageLogin.Controls.Add(this.__0x105);
			this.kryptonPageLogin.Controls.Add(this.__0x106);
			this.kryptonPageLogin.Controls.Add(this.__0x107);
			this.kryptonPageLogin.Controls.Add(this.__0x108);
			this.kryptonPageLogin.Controls.Add(this.__0x109);
			this.kryptonPageLogin.Flags = 65534;
			this.kryptonPageLogin.LastVisibleSet = true;
			this.kryptonPageLogin.MinimumSize = new System.Drawing.Size(62, 62);
			this.kryptonPageLogin.Name = "kryptonPageLogin";
			this.kryptonPageLogin.Size = new System.Drawing.Size(1345, 789);
			this.kryptonPageLogin.Text = "Login";
			this.kryptonPageLogin.ToolTipTitle = "Login";
			this.kryptonPageLogin.UniqueName = "2271C4BE75C64D08AC847F8523BAEDF0";
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
   
   
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			this.__0x112.Location = new System.Drawing.Point( 44, 393 );
			this.__0x112.Name = "kryptonButtonSubscribeToPro";
			this.__0x112.Size = new System.Drawing.Size( 117, 32 );
			this.__0x112.TabIndex = 32;
			this.__0x112.Values.Text = "Subscribe Pro";
			this.__0x112.Click += new System.EventHandler( this.__0x154 );

			
			
			
			this.__0x113.Location = new System.Drawing.Point(40, 337);
			this.__0x113.Name = "kryptonLabelSupportNeoAxis";
			this.__0x113.Size = new System.Drawing.Size(416, 27);
			this.__0x113.StateCommon.ShortText.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x113.TabIndex = 30;
			this.__0x113.Values.Text = "Get more features";
			
			
			
			this.__0x100.Location = new System.Drawing.Point(182, 223);
			this.__0x100.Name = "kryptonLabelLoginError";
			this.__0x100.Size = new System.Drawing.Size(47, 20);
			this.__0x100.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x100.TabIndex = 28;
			this.__0x100.Values.Text = "Error";
			
			
			
			this.__0x101.Location = new System.Drawing.Point(40, 127);
			this.__0x101.Name = "kryptonLabel15";
			this.__0x101.Size = new System.Drawing.Size(88, 20);
			this.__0x101.TabIndex = 27;
			this.__0x101.Values.Text = "Registered:";
			
			
			
			this.__0x102.Location = new System.Drawing.Point(179, 127);
			this.__0x102.Name = "kryptonLabelLicense";
			this.__0x102.Size = new System.Drawing.Size(109, 20);
			this.__0x102.TabIndex = 26;
			this.__0x102.Values.Text = "Not registered.";
			
			
			
			this.__0x103.Location = new System.Drawing.Point(170, 255);
			this.__0x103.Name = "kryptonButtonRegister";
			this.__0x103.Size = new System.Drawing.Size(117, 32);
			this.__0x103.TabIndex = 22;
			this.__0x103.Values.Text = "Register";
			this.__0x103.Click += new System.EventHandler(this.__0x151);
			
			
			
			this.__0x104.Location = new System.Drawing.Point(44, 255);
			this.__0x104.Name = "kryptonButtonLogin";
			this.__0x104.Size = new System.Drawing.Size(117, 32);
			this.__0x104.TabIndex = 21;
			this.__0x104.Values.Text = "Login";
			this.__0x104.Click += new System.EventHandler(this.__0x150);
			
			
			
			this.__0x105.Location = new System.Drawing.Point(182, 196);
			this.__0x105.Name = "kryptonTextBoxLoginPassword";
			this.__0x105.PasswordChar = '*';
			this.__0x105.Size = new System.Drawing.Size(591, 21);
			this.__0x105.TabIndex = 20;
			this.__0x105.WordWrap = false;
			
			
			
			this.__0x106.Location = new System.Drawing.Point(40, 197);
			this.__0x106.Name = "kryptonLabel17";
			this.__0x106.Size = new System.Drawing.Size(80, 20);
			this.__0x106.TabIndex = 25;
			this.__0x106.Values.Text = "Password:";
			
			
			
			this.__0x107.Location = new System.Drawing.Point(40, 163);
			this.__0x107.Name = "kryptonLabel18";
			this.__0x107.Size = new System.Drawing.Size(53, 20);
			this.__0x107.TabIndex = 24;
			this.__0x107.Values.Text = "Email:";
			
			
			
			this.__0x108.Location = new System.Drawing.Point(182, 163);
			this.__0x108.Name = "kryptonTextBoxLoginEmail";
			this.__0x108.Size = new System.Drawing.Size(591, 21);
			this.__0x108.TabIndex = 19;
			this.__0x108.WordWrap = false;
			
			
			
			this.__0x109.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x109.Location = new System.Drawing.Point(31, 64);
			this.__0x109.Name = "kryptonLabel19";
			this.__0x109.Size = new System.Drawing.Size(82, 34);
			this.__0x109.TabIndex = 23;
			this.__0x109.Values.Text = "Login";
			
			
			
			this.kryptonPageAbout.AutoHiddenSlideSize = new System.Drawing.Size(250, 250);
			this.kryptonPageAbout.Controls.Add(this.__0x99);
			this.kryptonPageAbout.Controls.Add(this.__0x98);
			this.kryptonPageAbout.Controls.Add(this.__0x96);
			this.kryptonPageAbout.Controls.Add(this.__0x97);
			this.kryptonPageAbout.Flags = 65534;
			this.kryptonPageAbout.LastVisibleSet = true;
			this.kryptonPageAbout.MinimumSize = new System.Drawing.Size(62, 62);
			this.kryptonPageAbout.Name = "kryptonPageAbout";
			this.kryptonPageAbout.Size = new System.Drawing.Size(1345, 823);
			this.kryptonPageAbout.Text = "About";
			this.kryptonPageAbout.TextTitle = "About";
			this.kryptonPageAbout.ToolTipTitle = "Page ToolTip";
			this.kryptonPageAbout.UniqueName = "01D9BC02E960446C719C418C20B28003";
			
			
			
			this.__0x99.Location = new System.Drawing.Point(40, 127);
			this.__0x99.Name = "kryptonLabelEngineVersion";
			this.__0x99.Size = new System.Drawing.Size(63, 20);
			this.__0x99.TabIndex = 5;
			this.__0x99.Values.Text = "X.X.X.X";
			
			
			
			this.__0x98.Location = new System.Drawing.Point(40, 248);
			this.__0x98.Name = "kryptonLinkLabel1";
			this.__0x98.OverrideFocus.DrawFocus = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x98.Size = new System.Drawing.Size(124, 20);
			this.__0x98.TabIndex = 1;
			this.__0x98.Values.Text = "www.neoaxis.com";
			
			
			
			this.__0x96.Location = new System.Drawing.Point(40, 164);
			this.__0x96.Name = "kryptonLabel13";
			this.__0x96.Size = new System.Drawing.Size(237, 71);
			this.__0x96.TabIndex = 0;
			this.__0x96.Values.Text = "Developer:\r\n   NeoAxis, Inc. Delaware, USA.\r\n   NeoAxis Group Ltd. 8 Copthall, Roseau Valley, 00152 Common wealth of Dominica.";
			
			
			
			this.__0x97.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x97.Location = new System.Drawing.Point(31, 64);
			this.__0x97.Name = "kryptonLabel12";
			this.__0x97.Size = new System.Drawing.Size(405, 34);
			this.__0x97.TabIndex = 4;
			this.__0x97.Values.Text = "NeoAxis Engine (www.neoaxis.com)";
			
			
			
			this.kryptonPageExit.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageExit.ButtonClickOnDownDesigner = false;
			this.kryptonPageExit.Flags = 65534;
			this.kryptonPageExit.LastVisibleSet = true;
			this.kryptonPageExit.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageExit.Name = "kryptonPageExit";
			this.kryptonPageExit.Size = new System.Drawing.Size(1330, 906);
			this.kryptonPageExit.Text = "Exit";
			this.kryptonPageExit.ToolTipTitle = "Page ToolTip";
			this.kryptonPageExit.UniqueName = "FBA74E601B3D420C8F81CD606B9DB6E0";
			
			
			
			this.__0x69.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x69.Location = new System.Drawing.Point(31, 64);
			this.__0x69.Name = "kryptonLabel1";
			this.__0x69.Size = new System.Drawing.Size(78, 34);
			this.__0x69.TabIndex = 1;
			this.__0x69.Values.Text = "Open";
			
			
			
			this.Controls.Add(this.__0x70);
			this.Controls.Add(this.__0x68);
			this.Name = "BackstageMenu";
			this.Size = new System.Drawing.Size(1507, 791);
			this.Load += new System.EventHandler(this.__0x122);
			this.VisibleChanged += new System.EventHandler(this.__0x123);
			((System.ComponentModel.ISupportInitialize)(this.__0x68)).EndInit();
			this.__0x68.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageInfo)).EndInit();
			this.kryptonPageInfo.ResumeLayout(false);
			this.kryptonPageInfo.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageNew)).EndInit();
			this.kryptonPageNew.ResumeLayout(false);
			this.kryptonPageNew.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageBuild)).EndInit();
			this.kryptonPageBuild.ResumeLayout(false);
			this.kryptonPageBuild.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageLogin)).EndInit();
			this.kryptonPageLogin.ResumeLayout(false);
			this.kryptonPageLogin.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageAbout)).EndInit();
			this.kryptonPageAbout.ResumeLayout(false);
			this.kryptonPageAbout.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageExit)).EndInit();
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Editor.BackstageMenu.MyKryptonNavigator __0x68;
		public Internal.ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageInfo;
		public Internal.ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageNew;
		public Internal.ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageExit;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x69;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x70;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x71;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x72;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x73;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x74;
		private ContentBrowser __0x75;
		public Internal.ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageBuild;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x76;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x77;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x78;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x79;
		private NeoAxis.Editor.EngineProgressBar __0x80;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x81;
		private System.Windows.Forms.Timer __0x82;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x83;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x84;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x85;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x86;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x87;
		private NeoAxis.Editor.EngineProgressBar __0x88;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x89;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x90;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x91;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x92;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x93;
		private ContentBrowser __0x94;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x95;
		public Internal.ComponentFactory.Krypton.Navigator.KryptonPage kryptonPageAbout;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x96;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x97;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLinkLabel __0x98;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x99;
		public Internal.ComponentFactory.Krypton.Navigator.KryptonPage kryptonPageLogin;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x100;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x101;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x102;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x103;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x104;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x105;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x106;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x107;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x108;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x109;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x110;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLinkLabel __0x111;
		
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x112;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x113;
		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Implements creating NeoAxis Baking files.
	/// </summary>
	static class BakingFile
	{
		public static bool Create( IList<string> paths, bool compressArchive, string destinationFileName, out string error )
		{
			error = "";

			try
			{
				var __0x197 = Path.GetDirectoryName( destinationFileName );
				var __0x198 = compressArchive ? CompressionLevel.Optimal : CompressionLevel.NoCompression;

				using( var __0x199 = ZipFile.Open( destinationFileName, ZipArchiveMode.Create ) )
				{
					foreach( var __0x210 in paths )
					{
						if( Directory.Exists( __0x210 ) )
						{
							foreach( var __0x211 in Directory.GetFiles( __0x210, "*.*", SearchOption.AllDirectories ) )
							{
								
								var __0x200 = File.ReadAllBytes( __0x211 );

								
								for( int __0x201 = 0; __0x201 < __0x200.Length; __0x201++ )
									__0x200[ __0x201 ] = (byte)~__0x200[ __0x201 ];

								
								var __0x202 = __0x211.Substring( __0x197.Length + 1 );
								var __0x203 = __0x199.CreateEntry( __0x202, __0x198 );
								using( var __0x204 = __0x203.Open() )
									__0x204.Write( __0x200, 0, __0x200.Length );
							}
						}
						else if( File.Exists( __0x210 ) )
						{
							
							var __0x205 = File.ReadAllBytes( __0x210 );

							
							for( int __0x206 = 0; __0x206 < __0x205.Length; __0x206++ )
								__0x205[ __0x206 ] = (byte)~__0x205[ __0x206 ];

							
							var __0x207 = __0x210.Substring( __0x197.Length + 1 );
							var __0x208 = __0x199.CreateEntry( __0x207, __0x198 );
							using( var __0x209 = __0x208.Open() )
								__0x209.Write( __0x205, 0, __0x205.Length );
						}
					}
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return false;
			}

			return true;
		}
	}
}




namespace NeoAxis.Editor
{
	[Flags]
	
	
	public enum BorderSides
	{
		None = 0,
		Top = 1,
		Bottom = 2,
		Left = 4,
		Right = 8,
		All = Top | Bottom | Left | Right
	}

	
	
	
	

	/// <summary>
	/// Helper container control to draw separate borders.
	/// </summary>
	public class BordersContainer : ContainerControl
	{
		private BorderSides __0x212 = BorderSides.All;
		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides BorderSides
		{
			get
			{
				return __0x212;
			}
			set
			{
				if( __0x212 != value )
				{
					__0x212 = value;
					this.Invalidate();
				}
			}
		}

		Color __0x213;
		[Category( "Appearance" )]
		public Color BorderColor
		{
			get { return __0x213; }
			set { __0x213 = value; }
		}

		public BordersContainer()
		{
			IPalette __0x214 = KryptonManager.CurrentGlobalPalette;
			__0x213 = __0x214.GetBorderColor1( PaletteBorderStyle.ControlClient, PaletteState.Normal );
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			if( BorderSides == BorderSides.None )
				return;

			if( BorderSides == BorderSides.All )
			{
#if !ANDROID && !IOS
				using( var __0x215 = new Pen( BorderColor ) )
					e.Graphics.DrawRectangle( __0x215, new System.Drawing.Rectangle( 0, 0, Width - 1, Height - 1 ) );
#endif 
			}
			else
			{
				ControlPaint.DrawBorder( e.Graphics, Bounds,
					BorderColor, 1, ( BorderSides & BorderSides.Left ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Top ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Right ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Bottom ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None );
			}
		}

		protected override void OnControlAdded( ControlEventArgs e )
		{
			base.OnControlAdded( e );
			e.Control.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			base.OnSizeChanged( e );

			if( Controls.Count == 0 )
				return;

			var __0x216 = this.Bounds;

			if( ( BorderSides & BorderSides.Top ) != 0 )
				__0x216.Y++; __0x216.Height--;
			if( ( BorderSides & BorderSides.Bottom ) != 0 )
				__0x216.Height--;
			if( ( BorderSides & BorderSides.Left ) != 0 )
				__0x216.X++; __0x216.Width--;
			if( ( BorderSides & BorderSides.Right ) != 0 )
				__0x216.Width--;

			Controls[0].Bounds = __0x216;
		}
	}
}







namespace NeoAxis.Editor
{
	public class DocumentWindowWithViewport_CanvasBasedEditor : DocumentWindowWithViewport
	{
		CanvasBasedEditor __0x217;

		

		public DocumentWindowWithViewport_CanvasBasedEditor( CanvasBasedEditor editor )
		{
			this.__0x217 = editor;

			SelectedObjectsChanged += __0x218;
		}

		public CanvasBasedEditor Editor
		{
			get { return __0x217; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			__0x217.PerformOnCreate();
		}

		protected override void OnDestroy()
		{
			__0x217.PerformOnDestroy();
		}
		public void PerformBaseOnDestroy()
		{
			base.OnDestroy();
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x217.PerformKeyDown( e, ref handled );
		}
		public void PerformBaseViewportKeyDown( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			__0x217.PerformKeyPress( e, ref handled );
		}
		public void PerformBaseViewportKeyPress( KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x217.PerformKeyUp( e, ref handled );
		}
		public void PerformBaseViewportKeyUp( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( Viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x217.PerformMouseDown( button, ref handled );
		}
		public void PerformBaseViewportMouseDown( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x217.PerformMouseUp( button, ref handled );
		}
		public void PerformBaseViewportMouseUp( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x217.PerformMouseDoubleClick( button, ref handled );
		}
		public void PerformBaseViewportMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			__0x217.PerformMouseMove( mouse );
		}
		public void PerformBaseViewportMouseMove( Vector2 mouse )
		{
			base.Viewport_MouseMove( Viewport, mouse );
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			__0x217.PerformMouseRelativeModeChanged( ref handled );
		}
		public void PerformBaseViewportMouseRelativeModeChanged( ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( Viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			__0x217.PerformMouseWheel( delta, ref handled );
		}
		public void PerformBaseViewportMouseWheel( int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( Viewport, delta, ref handled );
		}

		protected override void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			__0x217.PerformJoystickEvent( e, ref handled );
		}
		public void PerformBaseViewportJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			base.Viewport_JoystickEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			__0x217.PerformSpecialInputDeviceEvent( e, ref handled );
		}
		public void PerformBaseViewportSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			base.Viewport_SpecialInputDeviceEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			__0x217.PerformTick( delta );
		}
		public void PerformBaseViewportTick( float delta )
		{
			base.Viewport_Tick( Viewport, delta );
		}

		protected override void OnTimer10MsTick()
		{
			__0x217.PerformOnTimer10MsTick();
		}
		public void PerformOnTimer10MsTick()
		{
			base.OnTimer10MsTick();
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x217.PerformViewportUpdateBegin();
		}
		public void PerformBaseViewportUpdateBegin()
		{
			base.Viewport_UpdateBegin( Viewport );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x217.PerformViewportUpdateEnd();
		}
		public void PerformBaseViewportUpdateEnd()
		{
			base.Viewport_UpdateEnd( Viewport );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			__0x217.PerformViewportCreated();
		}
		public void PerformBaseViewportCreated()
		{
			base.ViewportControl_ViewportCreated( ViewportControl );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x217.PerformViewportDestroyed();
		}
		public void PerformBaseViewportDestroyed()
		{
			base.ViewportControl_ViewportDestroyed( ViewportControl );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			__0x217.PerformViewportUpdateBeforeOutput();
		}
		public void PerformBaseViewportUpdateBeforeOutput()
		{
			base.Viewport_UpdateBeforeOutput( Viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x217.PerformViewportUpdateBeforeOutput2();
		}
		public void PerformBaseViewportUpdateBeforeOutput2()
		{
			base.Viewport_UpdateBeforeOutput2( Viewport );
		}

		protected override void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context )
		{
			__0x217.PerformViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}
		public void PerformBaseViewportUpdateGetObjectInSceneRenderingContext( ref ObjectInSpace.RenderingContext context )
		{
			base.Viewport_UpdateGetObjectInSceneRenderingContext( Viewport, ref context );
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			__0x217.PerformSceneViewportUpdateGetCameraSettings( ref processed );
		}
		public void PerformBaseSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( Scene, Viewport, ref processed );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			__0x217.PerformOnGetTextInfoLeftTopCorner( lines );
		}
		public void PerformBaseGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );
		}

		protected override void GetTextInfoRightBottomCorner( List<string> lines )
		{
			__0x217.PerformOnGetTextInfoRightBottomCorner( lines );
		}
		public void PerformBaseGetTextInfoRightBottomCorner( List<string> lines )
		{
			base.GetTextInfoRightBottomCorner( lines );
		}

		protected override void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			__0x217.PerformOnGetTextInfoCenterBottomCorner( lines );
		}
		public void PerformBaseGetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.GetTextInfoCenterBottomCorner( lines );
		}

		private void __0x218( DocumentWindow __0x219, object[] __0x220 )
		{
			__0x217.PerformSelectedObjectsChanged( __0x220 );
		}
	}

	

	public abstract class CanvasBasedEditor
	{
		internal DocumentWindowWithViewport_CanvasBasedEditor owner;

		

		public CanvasBasedEditor()
		{
		}

		public DocumentWindowWithViewport Owner
		{
			get { return owner; }
		}

		

		public DocumentInstance Document
		{
			get { return Owner?.Document; }
		}

		public object ObjectOfEditor
		{
			get { return owner.ObjectOfWindow; }
		}

		public bool OpenAsSettings 
		{
			get { return owner.OpenAsSettings; }
		}

		public Dictionary<string, object> WindowTypeSpecificOptions
		{
			get { return owner.WindowTypeSpecificOptions; }
		}

		public bool IsDocumentSaved()
		{
			return owner.IsDocumentSaved();
		}

		public object[] SelectedObjects
		{
			get { return owner.SelectedObjects; }
		}

		public ESet<object> SelectedObjectsSet
		{
			get { return owner.SelectedObjectsSet; }
		}

		public bool IsWindowInWorkspace
		{
			get { return owner.IsWindowInWorkspace; }
			set { owner.IsWindowInWorkspace = value; }
		}

		protected virtual void OnCreate()
		{
		}
		internal void PerformOnCreate()
		{
			OnCreate();
		}

		protected virtual void OnDestroy()
		{
			owner.PerformBaseOnDestroy();
		}
		internal void PerformOnDestroy()
		{
			OnDestroy();
		}

		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		

		public bool SaveDocument()
		{
			return owner.SaveDocument();
		}

		public bool IsObjectSelected( object obj )
		{
			return owner.IsObjectSelected( obj );
		}

		public delegate void SelectedObjectsChangedDelegate( CanvasBasedEditor __0x221, object[] __0x222 );
		public event SelectedObjectsChangedDelegate SelectedObjectsChanged;
		internal void PerformSelectedObjectsChanged( object[] oldSelectedObjects )
		{
			SelectedObjectsChanged?.Invoke( this, oldSelectedObjects );
		}

		public void SelectObjects( ICollection<object> objects, bool updateForeachDocumentWindowContainers = true, bool updateSettingsWindowSelectObjects = true, bool forceUpdate = false )
		{
			owner.SelectObjects( objects, updateForeachDocumentWindowContainers, updateSettingsWindowSelectObjects, forceUpdate );
		}

		protected virtual void OnTimer10MsTick()
		{
			owner.PerformOnTimer10MsTick();
		}
		internal void PerformOnTimer10MsTick()
		{
			OnTimer10MsTick();
		}

		

		
		
		
		

		
		
		
		

		public void SettingsWindowSelectObjects()
		{
			owner.SettingsWindowSelectObjects();
		}

		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		

		
		
		
		
		
		
		

		
		

		
		

		
		
		

		
		

		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		
		

		
		
		

		
		
		

		
		
		
		
		
		

		
		

		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		
		
		
		

		
		

		
		
		

		
		
		

		
		

		
		
		
		
		

		

		
		
		

		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		

		public EngineViewportControl ViewportControl
		{
			get { return owner.ViewportControl; }
		}

		public Viewport Viewport
		{
			get { return owner.Viewport; }
		}

		protected virtual void OnKeyDown( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyDown( e, ref handled );
		}
		internal void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			OnKeyDown( e, ref handled );
		}

		protected virtual void OnKeyPress( KeyPressEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyPress( e, ref handled );
		}
		internal void PerformKeyPress( KeyPressEvent e, ref bool handled )
		{
			OnKeyPress( e, ref handled );
		}

		protected virtual void OnKeyUp( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyUp( e, ref handled );
		}
		internal void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			OnKeyUp( e, ref handled );
		}

		protected virtual void OnMouseDown( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDown( button, ref handled );
		}
		internal void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			OnMouseDown( button, ref handled );
		}

		protected virtual void OnMouseUp( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseUp( button, ref handled );
		}
		internal void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			OnMouseUp( button, ref handled );
		}

		protected virtual void OnMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDoubleClick( button, ref handled );
		}
		internal void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			OnMouseDoubleClick( button, ref handled );
		}

		protected virtual void OnMouseMove( Vector2 mouse )
		{
			owner.PerformBaseViewportMouseMove( mouse );
		}
		internal void PerformMouseMove( Vector2 mouse )
		{
			OnMouseMove( mouse );
		}

		protected virtual void OnMouseRelativeModeChanged( ref bool handled )
		{
			owner.PerformBaseViewportMouseRelativeModeChanged( ref handled );
		}
		internal void PerformMouseRelativeModeChanged( ref bool handled )
		{
			OnMouseRelativeModeChanged( ref handled );
		}

		protected virtual void OnMouseWheel( int delta, ref bool handled )
		{
			owner.PerformBaseViewportMouseWheel( delta, ref handled );
		}
		internal void PerformMouseWheel( int delta, ref bool handled )
		{
			OnMouseWheel( delta, ref handled );
		}

		protected virtual void OnJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportJoystickEvent( e, ref handled );
		}
		internal void PerformJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			OnJoystickEvent( e, ref handled );
		}

		protected virtual void OnSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportSpecialInputDeviceEvent( e, ref handled );
		}
		internal void PerformSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			OnSpecialInputDeviceEvent( e, ref handled );
		}

		protected virtual void OnTick( float delta )
		{
			owner.PerformBaseViewportTick( delta );
		}
		internal void PerformTick( float delta )
		{
			OnTick( delta );
		}

		protected virtual void OnViewportUpdateBegin()
		{
			owner.PerformBaseViewportUpdateBegin();
		}
		internal void PerformViewportUpdateBegin()
		{
			OnViewportUpdateBegin();
		}

		protected virtual void OnViewportUpdateEnd()
		{
			owner.PerformBaseViewportUpdateEnd();
		}
		internal void PerformViewportUpdateEnd()
		{
			OnViewportUpdateEnd();
		}

		protected virtual void OnViewportCreated()
		{
			owner.PerformBaseViewportCreated();
		}
		internal void PerformViewportCreated()
		{
			OnViewportCreated();
		}

		protected virtual void OnViewportDestroyed()
		{
			owner.PerformBaseViewportDestroyed();
		}
		internal void PerformViewportDestroyed()
		{
			OnViewportDestroyed();
		}

		protected virtual void OnViewportUpdateBeforeOutput()
		{
			owner.PerformBaseViewportUpdateBeforeOutput();
		}
		internal void PerformViewportUpdateBeforeOutput()
		{
			OnViewportUpdateBeforeOutput();
		}

		protected virtual void OnViewportUpdateBeforeOutput2()
		{
			owner.PerformBaseViewportUpdateBeforeOutput2();
		}
		internal void PerformViewportUpdateBeforeOutput2()
		{
			OnViewportUpdateBeforeOutput2();
		}

		protected virtual void OnViewportUpdateGetObjectInSceneRenderingContext( ref ObjectInSpace.RenderingContext context )
		{
			owner.PerformBaseViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}
		internal void PerformViewportUpdateGetObjectInSceneRenderingContext( ref ObjectInSpace.RenderingContext context )
		{
			OnViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}

		protected virtual void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			owner.PerformBaseSceneViewportUpdateGetCameraSettings( ref processed );
		}
		internal void PerformSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			OnSceneViewportUpdateGetCameraSettings( ref processed );
		}

		protected virtual void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoLeftTopCorner( lines );
		}
		internal void PerformOnGetTextInfoLeftTopCorner( List<string> lines )
		{
			OnGetTextInfoLeftTopCorner( lines );
		}

		protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoRightBottomCorner( lines );
		}
		internal void PerformOnGetTextInfoRightBottomCorner( List<string> lines )
		{
			OnGetTextInfoRightBottomCorner( lines );
		}

		protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoCenterBottomCorner( lines );
		}
		internal void PerformOnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			OnGetTextInfoCenterBottomCorner( lines );
		}

		public void AddScreenMessage( string text, ColorValue color )
		{
			owner.AddScreenMessage( text, color );
		}

		public void AddScreenMessage( string text )
		{
			owner.AddScreenMessage( text );
		}

		
		
		
		
		
		

		

		
		
		
		

		public Scene Scene
		{
			get { return owner.Scene; }
			set { owner.Scene = value; }
		}

		public bool SceneNeedDispose
		{
			get { return owner.SceneNeedDispose; }
			set { owner.SceneNeedDispose = value; }
		}

		public Scene CreateScene( bool enable )
		{
			return owner.CreateScene( enable );
		}

		public void DestroyScene()
		{
			owner.DestroyScene();
		}

		public bool CameraRotating
		{
			get { return owner.CameraRotating; }
		}

		public double GetFontSize()
		{
			return owner.GetFontSize();
		}

		
		
		
		
		

		
		
		
		

		public void AddTextWithShadow( FontComponent font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( FontComponent font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( font, fontSize, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( FontComponent font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( font, fontSize, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public string WorkareaModeName
		{
			get { return owner.WorkareaModeName; }
		}

		

		
		
		
		

		
		
		

		
		
		

		public bool AllowCameraControl
		{
			get { return owner.AllowCameraControl; }
		}

		public bool AllowSelectObjects
		{
			get { return owner.AllowSelectObjects; }
		}

		public bool DisplaySelectedObjects
		{
			get { return owner.DisplaySelectedObjects; }
		}

		

		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		
		
		

		
		

	}
}





namespace NeoAxis.Editor
{
	public class PreviewControlWithViewport_CanvasBasedPreview : PreviewControlWithViewport
	{
		CanvasBasedPreview __0x223;

		

		public PreviewControlWithViewport_CanvasBasedPreview( CanvasBasedPreview preview )
		{
			this.__0x223 = preview;
		}

		public CanvasBasedPreview Preview
		{
			get { return __0x223; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			__0x223.PerformOnCreate();
		}

		protected override void OnDestroy()
		{
			__0x223.PerformOnDestroy();
		}
		public void PerformBaseOnDestroy()
		{
			base.OnDestroy();
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x223.PerformKeyDown( e, ref handled );
		}
		public void PerformBaseViewportKeyDown( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			__0x223.PerformKeyPress( e, ref handled );
		}
		public void PerformBaseViewportKeyPress( KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x223.PerformKeyUp( e, ref handled );
		}
		public void PerformBaseViewportKeyUp( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( Viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x223.PerformMouseDown( button, ref handled );
		}
		public void PerformBaseViewportMouseDown( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x223.PerformMouseUp( button, ref handled );
		}
		public void PerformBaseViewportMouseUp( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x223.PerformMouseDoubleClick( button, ref handled );
		}
		public void PerformBaseViewportMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			__0x223.PerformMouseMove( mouse );
		}
		public void PerformBaseViewportMouseMove( Vector2 mouse )
		{
			base.Viewport_MouseMove( Viewport, mouse );
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			__0x223.PerformMouseRelativeModeChanged( ref handled );
		}
		public void PerformBaseViewportMouseRelativeModeChanged( ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( Viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			__0x223.PerformMouseWheel( delta, ref handled );
		}
		public void PerformBaseViewportMouseWheel( int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( Viewport, delta, ref handled );
		}

		protected override void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			__0x223.PerformJoystickEvent( e, ref handled );
		}
		public void PerformBaseViewportJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			base.Viewport_JoystickEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			__0x223.PerformSpecialInputDeviceEvent( e, ref handled );
		}
		public void PerformBaseViewportSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			base.Viewport_SpecialInputDeviceEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			__0x223.PerformTick( delta );
		}
		public void PerformBaseViewportTick( float delta )
		{
			base.Viewport_Tick( Viewport, delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x223.PerformViewportUpdateBegin();
		}
		public void PerformBaseViewportUpdateBegin()
		{
			base.Viewport_UpdateBegin( Viewport );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x223.PerformViewportUpdateEnd();
		}
		public void PerformBaseViewportUpdateEnd()
		{
			base.Viewport_UpdateEnd( Viewport );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			__0x223.PerformViewportCreated();
		}
		public void PerformBaseViewportCreated()
		{
			base.ViewportControl_ViewportCreated( ViewportControl );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x223.PerformViewportDestroyed();
		}
		public void PerformBaseViewportDestroyed()
		{
			base.ViewportControl_ViewportDestroyed( ViewportControl );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			__0x223.PerformViewportUpdateBeforeOutput();
		}
		public void PerformBaseViewportUpdateBeforeOutput()
		{
			base.Viewport_UpdateBeforeOutput( Viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x223.PerformViewportUpdateBeforeOutput2();
		}
		public void PerformBaseViewportUpdateBeforeOutput2()
		{
			base.Viewport_UpdateBeforeOutput2( Viewport );
		}

		
		
		
		
		
		
		
		

		protected override void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			__0x223.PerformSceneViewportUpdateGetCameraSettings( ref processed );
		}
		public void PerformBaseSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( Scene, Viewport, ref processed );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			__0x223.PerformOnGetTextInfoLeftTopCorner( lines );
		}
		public void PerformBaseGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );
		}
	}

	

	public abstract class CanvasBasedPreview
	{
		internal PreviewControlWithViewport_CanvasBasedPreview owner;

		

		public CanvasBasedPreview()
		{
		}

		public PreviewControlWithViewport Owner
		{
			get { return owner; }
		}

		

		public object ObjectOfPreview
		{
			get { return owner.ObjectOfPreview; }
		}

		
		
		
		
		

		protected virtual void OnCreate()
		{
		}
		internal void PerformOnCreate()
		{
			OnCreate();
		}

		protected virtual void OnDestroy()
		{
			owner.PerformBaseOnDestroy();
		}
		internal void PerformOnDestroy()
		{
			OnDestroy();
		}

		

		public EngineViewportControl ViewportControl
		{
			get { return owner.ViewportControl; }
		}

		public Viewport Viewport
		{
			get { return owner.Viewport; }
		}

		protected virtual void OnKeyDown( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyDown( e, ref handled );
		}
		internal void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			OnKeyDown( e, ref handled );
		}

		protected virtual void OnKeyPress( KeyPressEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyPress( e, ref handled );
		}
		internal void PerformKeyPress( KeyPressEvent e, ref bool handled )
		{
			OnKeyPress( e, ref handled );
		}

		protected virtual void OnKeyUp( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyUp( e, ref handled );
		}
		internal void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			OnKeyUp( e, ref handled );
		}

		protected virtual void OnMouseDown( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDown( button, ref handled );
		}
		internal void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			OnMouseDown( button, ref handled );
		}

		protected virtual void OnMouseUp( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseUp( button, ref handled );
		}
		internal void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			OnMouseUp( button, ref handled );
		}

		protected virtual void OnMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDoubleClick( button, ref handled );
		}
		internal void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			OnMouseDoubleClick( button, ref handled );
		}

		protected virtual void OnMouseMove( Vector2 mouse )
		{
			owner.PerformBaseViewportMouseMove( mouse );
		}
		internal void PerformMouseMove( Vector2 mouse )
		{
			OnMouseMove( mouse );
		}

		protected virtual void OnMouseRelativeModeChanged( ref bool handled )
		{
			owner.PerformBaseViewportMouseRelativeModeChanged( ref handled );
		}
		internal void PerformMouseRelativeModeChanged( ref bool handled )
		{
			OnMouseRelativeModeChanged( ref handled );
		}

		protected virtual void OnMouseWheel( int delta, ref bool handled )
		{
			owner.PerformBaseViewportMouseWheel( delta, ref handled );
		}
		internal void PerformMouseWheel( int delta, ref bool handled )
		{
			OnMouseWheel( delta, ref handled );
		}

		protected virtual void OnJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportJoystickEvent( e, ref handled );
		}
		internal void PerformJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			OnJoystickEvent( e, ref handled );
		}

		protected virtual void OnSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportSpecialInputDeviceEvent( e, ref handled );
		}
		internal void PerformSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			OnSpecialInputDeviceEvent( e, ref handled );
		}

		protected virtual void OnTick( float delta )
		{
			owner.PerformBaseViewportTick( delta );
		}
		internal void PerformTick( float delta )
		{
			OnTick( delta );
		}

		protected virtual void OnViewportUpdateBegin()
		{
			owner.PerformBaseViewportUpdateBegin();
		}
		internal void PerformViewportUpdateBegin()
		{
			OnViewportUpdateBegin();
		}

		protected virtual void OnViewportUpdateEnd()
		{
			owner.PerformBaseViewportUpdateEnd();
		}
		internal void PerformViewportUpdateEnd()
		{
			OnViewportUpdateEnd();
		}

		protected virtual void OnViewportCreated()
		{
			owner.PerformBaseViewportCreated();
		}
		internal void PerformViewportCreated()
		{
			OnViewportCreated();
		}

		protected virtual void OnViewportDestroyed()
		{
			owner.PerformBaseViewportDestroyed();
		}
		internal void PerformViewportDestroyed()
		{
			OnViewportDestroyed();
		}

		protected virtual void OnViewportUpdateBeforeOutput()
		{
			owner.PerformBaseViewportUpdateBeforeOutput();
		}
		internal void PerformViewportUpdateBeforeOutput()
		{
			OnViewportUpdateBeforeOutput();
		}

		protected virtual void OnViewportUpdateBeforeOutput2()
		{
			owner.PerformBaseViewportUpdateBeforeOutput2();
		}
		internal void PerformViewportUpdateBeforeOutput2()
		{
			OnViewportUpdateBeforeOutput2();
		}

		
		
		
		
		
		
		
		

		protected virtual void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			owner.PerformBaseSceneViewportUpdateGetCameraSettings( ref processed );
		}
		internal void PerformSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			OnSceneViewportUpdateGetCameraSettings( ref processed );
		}

		protected virtual void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoLeftTopCorner( lines );
		}
		internal void PerformOnGetTextInfoLeftTopCorner( List<string> lines )
		{
			OnGetTextInfoLeftTopCorner( lines );
		}

		public Scene Scene
		{
			get { return owner.Scene; }
			set { owner.Scene = value; }
		}

		public bool SceneNeedDispose
		{
			get { return owner.SceneNeedDispose; }
			set { owner.SceneNeedDispose = value; }
		}

		public Vector3 CameraLookTo
		{
			get { return owner.CameraLookTo; }
			set { owner.CameraLookTo = value; }
		}

		public double CameraInitialDistance
		{
			get { return owner.CameraInitialDistance; }
			set { owner.CameraInitialDistance = value; }
		}

		public bool CameraRotationMode
		{
			get { return owner.CameraRotationMode; }
			set { owner.CameraRotationMode = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return owner.CameraDirection; }
			set { owner.CameraDirection = value; }
		}

		public Scene CreateScene( bool enable )
		{
			return owner.CreateScene( enable );
		}

		public void DestroyScene()
		{
			owner.DestroyScene();
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			owner.SetCameraByBounds( bounds, distanceScale, mode2D );
		}

		public double GetFontSize()
		{
			return owner.GetFontSize();
		}

		
		
		
		
		

		
		
		
		

		public void AddTextWithShadow( FontComponent font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( FontComponent font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( font, fontSize, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( FontComponent font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( font, fontSize, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( text, rectangle, horizontalAlign, verticalAlign, color );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class ComponentTypeSettingsForm : EngineForm
	{
		DocumentInstance __0x224;
		Component __0x225;
		__0x270 __0x226 = new __0x270();

		

		public enum ObjectTypeEnum
		{
			Component,
			Property
		}

		

		class __0x269 : Metadata.Property
		{
			public ObjectTypeEnum objectType;
			public Component component;
			
			string __0x227;
			object __0x228;

			

			public __0x269( ComponentTypeSettingsForm owner, ObjectTypeEnum objectType, Component component, string name, Metadata.TypeInfo type,  string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.objectType = objectType;
				this.component = component;
				
				this.__0x227 = category;
				this.__0x228 = value;
			}

			
			
			
			
			

			public string Category
			{
				get { return __0x227; }
				set { __0x227 = value; }
			}

			public object Value
			{
				get { return __0x228; }
				set { this.__0x228 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x229 = new List<object>();

				
				
				
				
				
				
				
				

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x227 ) )
						__0x229.Add( new CategoryAttribute( __0x227 ) );
				}

				return __0x229.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x228;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				this.__0x228 = value;
			}
		}

		

		class __0x270 : Metadata.IMetadataProvider
		{
			public List<__0x269> properties = new List<__0x269>();

			

			public Metadata.TypeInfo BaseType
			{
				get { return MetadataManager.GetTypeOfNetType( GetType() ); }
			}

			public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
			{
				foreach( var __0x245 in properties )
					yield return __0x245;
			}

			public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
			{
				foreach( var __0x246 in properties )
				{
					if( __0x246.Signature == signature )
						return __0x246;
				}
				return null;
			}
		}

		

		public ComponentTypeSettingsForm( DocumentInstance document, Component component )
		{
			

			this.__0x224 = document;
			this.__0x225 = component;

			__0x257();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x240.OverrideGroupDisplayName += __0x255;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = EditorLocalization.Translate( "TypeSettingsForm", Text );
			EditorLocalization.TranslateForm( "TypeSettingsForm", this );
		}

		private void __0x251( object __0x258, EventArgs __0x259 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x256();

			

			foreach( var __0x247 in __0x225.Components )
			{
				if( __0x247.DisplayInEditor && !__0x247.TypeOnly && !string.IsNullOrEmpty( __0x247.Name ) && __0x247.TypeSettingsIsPublic() )
				{
					

					
					
					
					

					
					

					bool __0x230 = !ComponentUtility.TypeSettingsPrivateObjectsContains( __0x225.TypeSettingsPrivateObjects, __0x247 );
					
					

					var __0x231 = new __0x269( this, ObjectTypeEnum.Component, __0x247, __0x247.Name, MetadataManager.GetTypeOfNetType( typeof( bool ) ), "Components", __0x230 );
					__0x231.DefaultValueSpecified = true;
					__0x231.DefaultValue = true;

					__0x226.properties.Add( __0x231 );

					
					
				}
			}

			foreach( var __0x248 in MetadataManager.MetadataGetMembers( __0x225 ) )
			{
				var __0x232 = __0x248 as Metadata.Property;

				

				if( __0x232 != null && EditorUtility.IsMemberVisible( __0x225, __0x232 ) )
				{
					bool __0x233 = !ComponentUtility.TypeSettingsPrivateObjectsContains( __0x225.TypeSettingsPrivateObjects, __0x232 );
					
					

					var __0x234 = new __0x269( this, ObjectTypeEnum.Property, null, __0x232.Name, MetadataManager.GetTypeOfNetType( typeof( bool ) ), "Properties", __0x233 );
					__0x234.DefaultValueSpecified = true;
					__0x234.DefaultValue = true;

					__0x226.properties.Add( __0x234 );
				}
			}

			__0x240.SetData( null, new object[] { __0x226 } );

			
		}

		private void __0x252( object __0x260, EventArgs __0x261 )
		{
			Close();

			
			string[] __0x235 = null;
			{
				var __0x236 = new List<string>();

				foreach( var __0x249 in __0x226.properties )
				{
					if( !(bool)__0x249.Value )
					{
						switch( __0x249.objectType )
						{
						case ObjectTypeEnum.Component:
							__0x236.Add( __0x249.component.GetPathFromParent() );
							
							break;

						case ObjectTypeEnum.Property:
							__0x236.Add( __0x249.Name );
							break;
						}
					}
				}

				if( __0x236.Count != 0 )
					__0x235 = __0x236.ToArray();
			}

			var __0x237 = __0x225.TypeSettingsPrivateObjects;

			
			__0x225.TypeSettingsPrivateObjects = __0x235;

			
			var __0x238 = new UndoActionPropertiesChange.Item( __0x225, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x237, null );
			__0x224.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x238 ) );
			__0x224.Modified = true;
		}

		private void __0x253( object __0x262, EventArgs __0x263 )
		{
			Close();
		}

		private void __0x254( object __0x264, EventArgs __0x265 )
		{
			foreach( var __0x250 in __0x226.properties )
				__0x250.Value = true;
		}

		private void __0x255( HierarchicalContainer __0x266, HCItemGroup __0x267, ref string __0x268 )
		{
			__0x268 = EditorLocalization.Translate( "TypeSettingsForm", __0x268 );
		}

		void __0x256()
		{
			__0x241.Location = new Point( ClientSize.Width - __0x241.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x241.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x242.Location = new Point( __0x241.Location.X - __0x242.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x241.Location.Y );
			__0x243.Location = new Point( __0x243.Location.X, __0x242.Location.Y );
			__0x240.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x240.Location.X, __0x242.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x240.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x256();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class ComponentTypeSettingsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x239 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x239 != null ) )
			{
				__0x239.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x257()
		{
			this.__0x241 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x242 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x243 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x244 = new NeoAxis.Editor.EngineLabel();
			this.__0x240 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			
			this.__0x241.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x241.Location = new System.Drawing.Point(334, 581);
			this.__0x241.Name = "kryptonButtonCancel";
			this.__0x241.Size = new System.Drawing.Size(117, 32);
			this.__0x241.TabIndex = 3;
			this.__0x241.Values.Text = "Cancel";
			this.__0x241.Click += new System.EventHandler(this.__0x253);
			
			
			
			
			this.__0x242.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x242.Location = new System.Drawing.Point(211, 581);
			this.__0x242.Name = "kryptonButtonOK";
			this.__0x242.Size = new System.Drawing.Size(117, 32);
			this.__0x242.TabIndex = 2;
			this.__0x242.Values.Text = "OK";
			this.__0x242.Click += new System.EventHandler(this.__0x252);
			
			
			
			
			this.__0x243.Location = new System.Drawing.Point(12, 581);
			this.__0x243.Name = "kryptonButtonReset";
			this.__0x243.Size = new System.Drawing.Size(117, 32);
			this.__0x243.TabIndex = 1;
			this.__0x243.Values.Text = "Reset";
			this.__0x243.Click += new System.EventHandler(this.__0x254);
			
			
			
			this.__0x244.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x244.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x244.Location = new System.Drawing.Point(12, 12);
			this.__0x244.Name = "labelEx1";
			this.__0x244.Size = new System.Drawing.Size(439, 23);
			this.__0x244.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x244.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x244.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x244.TabIndex = 4;
			this.__0x244.Text = "Make visible:";
			
			
			
			
			
			
			this.__0x240.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x240.Location = new System.Drawing.Point(12, 39);
			this.__0x240.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x240.Name = "hierarchicalContainer1";
			this.__0x240.Size = new System.Drawing.Size(439, 532);
			this.__0x240.SplitterPosition = 307;
			this.__0x240.SplitterRatio = 0.7F;
			this.__0x240.TabIndex = 0;
			
			
			
			this.AcceptButton = this.__0x242;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x241;
			this.ClientSize = new System.Drawing.Size(463, 625);
			this.Controls.Add(this.__0x244);
			this.Controls.Add(this.__0x243);
			this.Controls.Add(this.__0x242);
			this.Controls.Add(this.__0x241);
			this.Controls.Add(this.__0x240);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ComponentTypeSettingsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Type Settings";
			this.Load += new System.EventHandler(this.__0x251);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private HierarchicalContainer __0x240;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x241;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x242;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x243;
		private EngineLabel __0x244;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a rich control to work with hierarchical data in tree or list form.
	/// </summary>
	public partial class ContentBrowser : EUserControl
	{
		public static bool AllowAllTypes = true;

		static List<ContentBrowser> __0x271 = new List<ContentBrowser>();

		static List<ContentBrowserFilteringMode> __0x272 = new List<ContentBrowserFilteringMode>();

		
		bool __0x273;
		ModeEnum __0x274;
		DocumentWindow __0x275;
		object __0x276;
		
		SetReferenceModeDataClass __0x277;

		bool __0x278 = true;
		bool __0x279;

		bool __0x280;
		
		bool __0x281;

		
		

		ContentBrowserOptions __0x282;

		

		PanelModeEnum __0x283 = PanelModeEnum.TwoPanelsSplitHorizontally;
		ListModeEnum __0x284 = ListModeEnum.List;
		int __0x285 = 1;
		int __0x286 = 1;

		ESet<Item> __0x287 = new ESet<Item>();
		Dictionary<ItemTreeNode, Item> __0x288 = new Dictionary<ItemTreeNode, Item>();
		Dictionary<Item, ItemTreeNode> __0x289 = new Dictionary<Item, ItemTreeNode>();
		
		List<Item> __0x290 = new List<Item>();

		List<Type> __0x291 = new List<Type>();

		ContentBrowserItem_Favorites __0x292;
		ContentBrowserItem_File __0x293;

		internal SortByItems updatedDataSortBy;
		internal bool updatedDataSortByAscending;
		
		
		

		
		

		bool __0x294 = true;

		

		bool __0x295;

		
		ContentBrowserFilteringMode __0x296;

		TreeModel __0x297;

		ContentBrowserImageHelper __0x298 = new ContentBrowserImageHelper();

		bool __0x299;
		
		bool __0x300;

		string[] __0x301;
		bool __0x302;
		
		DateTime __0x303 = DateTime.Now;

		bool __0x304;

		string __0x305 = "~~~";
		string __0x306 = "~~~";

		bool __0x307;

		bool __0x308 = true;

		bool __0x309;

		double __0x310;

		EngineListView.ModeClass __0x311;

		KryptonBreadCrumb __0x312;

		internal bool needUpdateImages;

		

		public enum ModeEnum
		{
			Resources,
			Objects,
			SetReference,
		}

		

		public enum PanelModeEnum
		{
			Tree,
			List,
			TwoPanelsSplitHorizontally,
			TwoPanelsSplitVertically,
		}

		

		public enum ListModeEnum
		{
			Auto,
			List,
			Tiles,
			
		}

		

		public enum SortByItems
		{
			Name,
			Date,
			Type,
			Size,
		}

		

		
		
		
		
		
		

		

		public class SetReferenceModeDataClass
		{
			public Component[] selectedComponents;
			public object[] propertyOwners;
			
			public Metadata.Property property;
			public object[] propertyIndexes;
			public bool allowNull = true;

			public Metadata.TypeInfo demandedType;

			
			public bool newObjectWindow;
			public bool newObjectWindowFileCreation;
			

			
			public bool selectTypeWindow;
			public Metadata.TypeInfo selectTypeDemandedType;
			public bool selectTypeWindowCanSelectAbstractClass;

			
			
			

			

			public Metadata.TypeInfo DemandedType
			{
				get
				{
					if( demandedType != null )
						return demandedType;
					else
						return property.TypeUnreferenced;
				}
			}
		}

		

		public delegate void UpdateDataEventDelegate( ContentBrowser __0x1054, IList<Item> __0x1055 );
		public static event UpdateDataEventDelegate UpdateDataEvent;

		
		
		

		public delegate void ItemAfterSelectDelegate( ContentBrowser __0x1056, IList<Item> __0x1057, bool __0x1058, ref bool __0x1059 );
		public event ItemAfterSelectDelegate ItemAfterSelect;

		public delegate void ItemAfterChooseDelegate( ContentBrowser __0x1060, Item __0x1061, ref bool __0x1062 );
		public event ItemAfterChooseDelegate ItemAfterChoose;

		public delegate void OverrideItemTextDelegate( ContentBrowser __0x1063, Item __0x1064, ref string __0x1065 );
		public event OverrideItemTextDelegate OverrideItemText;

		public delegate void ShowContextMenuEventDelegate( ContentBrowser __0x1066, Item __0x1067, List<KryptonContextMenuItemBase> __0x1068 );
		public event ShowContextMenuEventDelegate ShowContextMenuEvent;

		public delegate void KeyDownOverrideDelegate( ContentBrowser __0x1069, object __0x1070, KeyEventArgs __0x1071, ref bool __0x1072 );
		public event KeyDownOverrideDelegate KeyDownOverride;

		

		public abstract class Item : IDisposable
		{
			ContentBrowser __0x313;

			Item __0x314;
			public string imageKey;
			public Image image;

			public bool chooseByDoubleClickAndReturnKey;

			public bool expandAtStartup;
			
			public bool expandAllAtStartup;

			public bool wasExpanded;
			public bool childNodesCreated;

			public bool ShowDisabled
			{
				get { return __0x316; }
				set
				{
					if( __0x316 == value )
						return;
					__0x316 = value;

					UpdateImage();

					var __0x315 = __0x313.GetListItemByItem( this );
					if( __0x315 != null )
					{
						__0x315.ShowDisabled = ShowDisabled;
						__0x313.__0x1022( __0x315 );
					}
				}
			}

			bool __0x316;
			

			

			public Item( ContentBrowser owner, Item parent )
			{
				this.__0x313 = owner;
				this.__0x314 = parent;
			}

			public ContentBrowser Owner
			{
				get { return __0x313; }
			}

			public Item Parent
			{
				get { return __0x314; }
			}

			public abstract string Text
			{
				get;
			}

			public override string ToString()
			{
				return Text;
			}

			public abstract IList<Item> GetChildren( bool onlyAlreadyCreated );

			public delegate void GetChildrenFilterEventDelegate( Item __0x1073, ref IList<Item> __0x1074 );
			public static event GetChildrenFilterEventDelegate GetChildrenFilterEvent;

			public IList<Item> GetChildrenFilter( bool onlyAlreadyCreated )
			{
				var __0x317 = GetChildren( onlyAlreadyCreated );
				GetChildrenFilterEvent?.Invoke( this, ref __0x317 );
				return __0x317;
			}

			
			public abstract void Dispose();

			

			public event Action<Item> TextChanged;
			public event Action<Item> TextColorChanged;
			public event Action<Item> ChildrenChanged;

			public void PerformTextChanged()
			{
				TextChanged?.Invoke( this );
			}

			public void PerformTextColorChanged()
			{
				TextColorChanged?.Invoke( this );
			}

			public virtual void PerformChildrenChanged()
			{
				ChildrenChanged?.Invoke( this );
			}

			public virtual object ContainedObject
			{
				get { return null; }
			}

			public void GetChildrenOnlyAlreadyCreatedRecursive( List<Item> result )
			{
				foreach( var __0x856 in GetChildrenFilter( true ) )
				{
					result.Add( __0x856 );
					__0x856.GetChildrenOnlyAlreadyCreatedRecursive( result );
				}
			}

			public object Tag { get; set; }

			
			public virtual void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
			{
				referenceValue = "";
				canSet = false;
			}

			public virtual string GetDescription() { return ""; }
			

			public virtual void LightweightUpdate() { }

			
			

			public virtual bool CanDoDragDrop() { return false; }

			public bool ShowDisabledInHierarchy
			{
				get
				{
					if( __0x316 )
						return true;
					return Parent != null && Parent.ShowDisabledInHierarchy;
				}
			}

			internal void UpdateImage()
			{
				if( __0x313.__0x289.TryGetValue( this, out var itemNode ) )
				{
					Image __0x318 = null;

					
					var __0x319 = this as ContentBrowserItem_File;
					if( __0x319 != null && !__0x319.IsDirectory )
						__0x318 = PreviewImagesManager.GetImageForResource( __0x319.FullPath, true );

					if( __0x318 == null )
						__0x318 = this.image;
					if( __0x318 == null )
						__0x318 = __0x313.__0x298.GetImageScaledForTreeView( imageKey, __0x316 );
					if( __0x318 == null )
						__0x318 = ContentBrowserImageHelperBasicImages.Helper.GetImageScaledForTreeView( imageKey, __0x316 );

					itemNode.Image = __0x318;
				}
			}

			public ICollection<Item> GetAllParents( bool makeOrderFromTopToBottom )
			{
				var __0x320 = new List<Item>();
				var __0x321 = Parent;
				while( __0x321 != null )
				{
					__0x320.Add( __0x321 );
					__0x321 = __0x321.Parent;
				}
				if( makeOrderFromTopToBottom )
					__0x320.Reverse();
				return __0x320;
			}
		}

		
		
		

		

		public class ItemTreeNode : Node
		{
			public Item item;
			string __0x322 = "";

			public ItemTreeNode( Item item )
			{
				this.item = item;
			}

			public override string ToString()
			{
				return item.ToString();
			}

			public void UpdateText()
			{
				var __0x323 = item.Text;
				item.Owner.OverrideItemText?.Invoke( item.Owner, item, ref __0x323 );

				if( __0x322 != __0x323 )
				{
					__0x322 = __0x323;
					Text = __0x322;
				}
			}
		}

		

		class __0x1343 : Node
		{
			public __0x1343()
			{
				Text = "DUMMY";
			}

			public override string ToString()
			{
				return "DUMMY";
			}
		}

		

		public class DragDropItemData
		{
			public Item Item;
		}

		

		public static List<ContentBrowser> AllInstances
		{
			get { return __0x271; }
		}

		public static List<ContentBrowserFilteringMode> FilteringModes
		{
			get { return __0x272; }
		}

		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides TreeViewBorderDraw
		{
			

			get { return __0x837.BorderSides; }
			set { __0x837.BorderSides = value; }
		}

		BorderSides __0x324 = BorderSides.All;
		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides ListViewBorderDraw
		{
			get { return __0x324; }
			set
			{
				if( __0x324 == value )
					return;
				__0x324 = value;

				__0x843.Visible = ( value & BorderSides.Top ) != 0;
				__0x847.Visible = ( value & BorderSides.Bottom ) != 0;
				__0x846.Visible = ( value & BorderSides.Left ) != 0;
				__0x845.Visible = ( value & BorderSides.Right ) != 0;
			}
		}

		public ContentBrowser()
		{
			__0x1053();

			var __0x325 = __0x840.Items.OfType<ToolStripBreadCrumbHost>().First();
			__0x312 = __0x325.BreadCrumb;
			__0x312.SelectedItemChanged += __0x1025;

			__0x282 = new ContentBrowserOptions( this );

			__0x297 = new TreeModel();
			__0x812.Model = __0x297;
			__0x812.DrawRowEvent += __0x1008;

			SetPanelMode( PanelModeEnum.Tree, true );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x838.CanDrag = true;
			__0x838.BeforeStartDrag += __0x1049;
			
			
			
			
			

			__0x1035();

			__0x836.Image = EditorResourcesCache.Edit;
			__0x820.Image = EditorResourcesCache.Clone;
			__0x827.Image = EditorResourcesCache.Copy;
			__0x826.Image = EditorResourcesCache.Cut;
			__0x828.Image = EditorResourcesCache.Paste;
			__0x810.Image = EditorResourcesCache.Delete;
			__0x816.Image = EditorResourcesCache.Edit;
			__0x822.Image = EditorResourcesCache.MoveDown;
			__0x821.Image = EditorResourcesCache.MoveUp;
			__0x833.Image = EditorResourcesCache.NewFolder;
			__0x809.Image = EditorResourcesCache.New;
			__0x834.Image = EditorResourcesCache.New;
			__0x825.Image = EditorResourcesCache.Options;
			__0x819.Image = EditorResourcesCache.Rename;
			__0x817.Image = EditorResourcesCache.Settings;
			__0x829.Image = EditorResourcesCache.Type;
			__0x841.Image = EditorResourcesCache.MoveUp;
			__0x824.Image = EditorResourcesCache.Selection;
			__0x848.Image = EditorResourcesCache.Focus;

			foreach( var __0x857 in __0x806.Items )
			{
				var __0x326 = __0x857 as ToolStripButton;
				if( __0x326 != null )
					__0x326.Text = EditorLocalization.Translate( "ContentBrowser", __0x326.Text );

				var __0x327 = __0x857 as ToolStripDropDownButton;
				if( __0x327 != null )
					__0x327.Text = EditorLocalization.Translate( "ContentBrowser", __0x327.Text );
			}

			__0x806.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
			__0x840.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
			__0x814.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();

			if( EditorAPI.DarkTheme )
			{
				__0x929();

				
				
			}
		}

		public ModeEnum Mode
		{
			get { return __0x274; }
			set { __0x274 = value; }
		}

		public void Init( DocumentWindow documentWindow, object rootObject, 
			SetReferenceModeDataClass setReferenceModeData )
		{
			this.__0x273 = true;
			this.__0x275 = documentWindow;
			this.__0x276 = rootObject;
			
			this.__0x277 = setReferenceModeData;
		}

		[Browsable( false )]
		public bool Initialized
		{
			get { return __0x273; }
		}

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return __0x275; }
		}

		[Browsable( false )]
		public object RootObject
		{
			get { return __0x276; }
		}

		
		
		
		
		

		[Browsable( false )]
		public SetReferenceModeDataClass SetReferenceModeData
		{
			get { return __0x277; }
		}

		[DefaultValue( true )]
		public bool PreloadResourceOnSelection
		{
			get { return __0x278; }
			set { __0x278 = value; }
		}

		[DefaultValue( false )]
		public bool CanSelectObjectSettings
		{
			get { return __0x279; }
			set { __0x279 = value; }
		}

		[Browsable( false )]
		public bool ReadOnlyHierarchy
		{
			get { return __0x280; }
			set { __0x280 = value; }
		}

		[Browsable( false )]
		public bool ThisIsSettingsWindow
		{
			get { return __0x281; }
			set { __0x281 = value; }
		}

		private void __0x928( object __0x1075, EventArgs __0x1076 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x271.Add( this );

			
			{
				var __0x328 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x1077 )
				{
					int __0x329 = 20;
					if( __0x1077 is ToolStripDropDownButton )
						__0x329 = 28;
					__0x1077.Size = new Size( (int)( __0x329 * __0x328 ), (int)( 20 * __0x328 + 2 ) );
					
				}

				__0x806.Padding = new Padding( (int)__0x328 );
				__0x806.Size = new Size( 10, (int)( 21 * __0x328 + 2 ) );

				foreach( var __0x858 in __0x806.Items )
				{
					var __0x330 = __0x858 as ToolStripButton;
					if( __0x330 != null )
						UpdateSize( __0x330 );

					var __0x331 = __0x858 as ToolStripDropDownButton;
					if( __0x331 != null )
						UpdateSize( __0x331 );
				}


				__0x840.Padding = new Padding( (int)__0x328 );
				__0x840.Size = new Size( 10, (int)( 21 * __0x328 + 2 ) );

				
				

				UpdateSize( __0x841 );
			}

			
			if( Math.Abs( DpiHelper.Default.DpiScaleFactor - 1.0 ) < 0.001 )
				__0x812.RowHeight++;
			if( DpiHelper.Default.DpiScaleFactor > 1.499 )
				__0x812.RowHeight++;
			if( DpiHelper.Default.DpiScaleFactor > 1.999 )
				__0x812.RowHeight++;
			
			
			
			
			
			
			
			

			__0x852.Panel2MinSize = (int)( __0x852.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x852.SplitterDistance = 10000;
			__0x853.Panel2MinSize = (int)( __0x853.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x853.SplitterDistance = 10000;
			__0x854.Panel2MinSize = (int)( __0x854.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x854.SplitterDistance = 10000;

			
			

			
			__0x970();
			

			__0x1021( true );
			__0x1024();

			if( EditorAPI.DarkTheme )
			{
				__0x929();

				__0x837.BorderColor = Color.FromArgb( 80, 80, 80 );

				__0x312.StateCommon.BreadCrumb.Content.ShortText.Color1 = Color.FromArgb( 230, 230, 230 );

				

				__0x312.StateCommon.BreadCrumb.Back.Color1 = Color.FromArgb( 70, 70, 70 );
				

				__0x312.StateTracking.BreadCrumb.Back.Color1 = Color.FromArgb( 80, 80, 80 );
				

				__0x312.StatePressed.BreadCrumb.Back.Color1 = Color.FromArgb( 90, 90, 90 );

				

				
				

				
				
				
				
				
				
				
				
			}

			
			
			__0x829.Enabled = Mode == ModeEnum.Objects;
			__0x829.Visible = __0x829.Enabled;

			if( __0x283 != __0x282.PanelMode )
				SetPanelMode( __0x282.PanelMode, true );

			__0x1037();

			__0x813.Start();

			if( Initialized )
				UpdateData();

			
			ItemAfterSelect += __0x958;
			

			
			
			VirtualFileWatcher.Update += __0x952;
			Resource.Instance.AllInstances_StatusChanged += __0x954;
			Resource.Instance.AllInstances_DisposedEvent += __0x955;

			__0x824.Click += __0x1043;

			
			__0x855.SetToolTip( this.__0x838, "ToolTip" );

			__0x850.Scroll += __0x1044;
			__0x851.Scroll += __0x1045;

			
			__0x1047();

			__0x295 = true;
		}

		void __0x929()
		{
			
			__0x812.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x812.FullRowSelectActiveColor = Color.FromArgb( 70, 70, 70 );
			__0x812.FullRowSelectInactiveColor = Color.FromArgb( 60, 60, 60 );

			
			__0x838.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x838.ForeColor = Color.FromArgb( 230, 230, 230 );

			__0x853.StateCommon.Back.Color1 = Color.FromArgb( 40, 40, 40 );
			__0x854.StateCommon.Back.Color1 = Color.FromArgb( 47, 47, 47 );
			__0x854.Panel2.StateCommon.Color1 = Color.FromArgb( 47, 47, 47 );
		}

		protected override void OnDestroy()
		{
			if( !EditorAPI.ClosingApplication )
				__0x930();

			base.OnDestroy();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				

				VirtualFileWatcher.Update -= __0x952;
				Resource.Instance.AllInstances_StatusChanged -= __0x954;
				Resource.Instance.AllInstances_DisposedEvent -= __0x955;
			}

			__0x298?.Dispose();

			__0x271.Remove( this );
		}

		void __0x930()
		{
			Item[] __0x332 = __0x287.ToArray();

			__0x287 = new ESet<Item>();
			__0x288 = new Dictionary<ItemTreeNode, Item>();
			__0x289 = new Dictionary<Item, ItemTreeNode>();
			__0x290.Clear();

			__0x1040();
			__0x297.Nodes.Clear();
			__0x1041();

			
			__0x838.ClearItems();
			

			foreach( var __0x859 in __0x332 )
			{
				__0x859.TextChanged -= __0x931;
				__0x859.TextColorChanged -= __0x932;
				__0x859.ChildrenChanged -= Item_ChildrenChanged;

				__0x859.Dispose();
			}
		}

		public void SetPanelMode( PanelModeEnum mode, bool forceUpdate = false )
		{
			if( mode != __0x283 || forceUpdate )
			{
				__0x283 = mode;

				kryptonSplitContainer1.Panel1Collapsed = __0x283 == PanelModeEnum.List;
				kryptonSplitContainer1.Panel2Collapsed = __0x283 == PanelModeEnum.Tree;

				if( __0x283 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x283 == PanelModeEnum.TwoPanelsSplitVertically )
					kryptonSplitContainer1.Orientation = __0x283 == PanelModeEnum.TwoPanelsSplitHorizontally ? Orientation.Horizontal : Orientation.Vertical;

				if( __0x283 != PanelModeEnum.Tree )
					__0x1012();
				
				
			}
		}

		private void __0x931( Item __0x1078 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x333 = GetNodeByItem( __0x1078 );
			if( __0x333 != null )
				__0x333.UpdateText();

			var __0x334 = GetListItemByItem( __0x1078 );
			if( __0x334 != null )
				__0x334.Text = __0x1078.Text;
		}

		private void __0x932( Item __0x1079 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x335 = GetNodeByItem( __0x1079 );
			if( __0x335 != null )
				__0x335.NotifyModel();
		}

		public ItemTreeNode GetNodeByItem( Item item )
		{
			__0x289.TryGetValue( item, out ItemTreeNode node );
			return node;
		}

		public Item GetItemByNode( ItemTreeNode node )
		{
			if( node == null )
				return null;

			__0x288.TryGetValue( node, out Item item );
			return item;
		}

		void __0x933( Item __0x1080, __0x1344 __0x1081 )
		{
			if( __0x1080.Parent != null )
				__0x933( __0x1080.Parent, __0x1081 );

			if( !__0x1080.childNodesCreated )
			{
				__0x1080.childNodesCreated = true;

				var __0x336 = GetNodeByItem( __0x1080 );
				if( __0x336 == null )
					Log.Fatal( "ContentBrowser: AddChildrenNodes: itemNode == null." );

				
				if( __0x336.Nodes.Count == 1 && __0x336.Nodes[ 0 ] is __0x1343 )
				{
					__0x1040();
					__0x336.Nodes.Clear();
				}

				
				foreach( var __0x860 in __0x1080.GetChildrenFilter( false ) )
					__0x934( __0x1080, __0x860, -1, __0x1081 );
			}
		}


		void __0x934( Item __0x1082, Item __0x1083, int __0x1084, __0x1344 __0x1085 )
		{
			__0x1040();

			ItemTreeNode __0x337 = new ItemTreeNode( __0x1083 );
			__0x287.Add( __0x1083 );
			__0x288[ __0x337 ] = __0x1083;
			__0x289[ __0x1083 ] = __0x337;
			__0x337.UpdateText();

			__0x1083.UpdateImage();
			

			if( __0x1082 != null )
			{
				var __0x338 = GetNodeByItem( __0x1082 );
				if( __0x1084 != -1 )
					__0x338.Nodes.Insert( __0x1084, __0x337 );
				else
					__0x338.Nodes.Add( __0x337 );
			}
			else
			{
				if( __0x1084 != -1 )
					__0x290.Insert( __0x1084, __0x1083 );
				else
					__0x290.Add( __0x1083 );

				if( __0x1084 != -1 )
					__0x297.Nodes.Insert( __0x1084, __0x337 );
				else
					__0x297.Nodes.Add( __0x337 );
			}

			
			if( __0x1083.GetChildrenFilter( false ).Count != 0 )
				__0x337.Nodes.Add( new __0x1343() );
			
			

			
			if( __0x1085 != null )
			{
				if( __0x1083.expandAllAtStartup )
					__0x1085.nodesToExpandAllAtStartup.Add( __0x337 );
				else if( __0x1083.expandAtStartup )
					__0x1085.nodesToExpandAtStartup.Add( __0x337 );
			}
			else
			{
				if( __0x1083.expandAllAtStartup )
					__0x996( __0x337 ).ExpandAll();
				else if( __0x1083.expandAtStartup )
					__0x996( __0x337 ).Expand();
			}

			__0x1083.TextChanged += __0x931;
			__0x1083.TextColorChanged += __0x932;
			__0x1083.ChildrenChanged += Item_ChildrenChanged;

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		public void RemoveItem( Item item )
		{
			

			var __0x339 = GetNodeByItem( item );

			item.TextChanged -= __0x931;
			item.TextColorChanged -= __0x932;
			item.ChildrenChanged -= Item_ChildrenChanged;

			if( __0x339 != null )
			{
				foreach( var __0x861 in new List<Node>( __0x339.Nodes ) )
				{
					ItemTreeNode __0x340 = __0x861 as ItemTreeNode;
					if( __0x340 != null )
					{
						var __0x341 = GetItemByNode( __0x340 );
						if( __0x341 != null )
							RemoveItem( __0x341 );
					}
				}

				__0x1040();

				if( __0x339.Parent != null )
					__0x339.Parent.Nodes.Remove( __0x339 );
				else
					__0x297.Nodes.Remove( __0x339 );

				__0x288.Remove( __0x339 );
				__0x289.Remove( item );
			}

			__0x287.Remove( item );
			__0x290.Remove( item );
		}

		internal void Item_ChildrenChanged( Item item )
		{
			if( EditorAPI.ClosingApplication || !IsHandleCreated )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x342 = GetNodeByItem( item );
			if( __0x342 == null )
				return;

			if( ContentBrowserUtility.allContentBrowsers_SuspendChildrenChangedEvent )
			{
				ContentBrowserUtility.allContentBrowsers_SuspendChildrenChangedEvent_Items.AddWithCheckAlreadyContained( (this, item) );
				return;
			}

			var __0x343 = item.GetChildrenFilter( false );

			
			

			
			
			if( !item.childNodesCreated )
			
			{
				
				

				if( __0x343.Count != 0 )
				{
					
					if( __0x342.Nodes.Count == 0 )
					{
						__0x1040();
						__0x342.Nodes.Add( new __0x1343() );
					}
				}
				else
				{
					
					if( __0x342.Nodes.Count == 1 && __0x342.Nodes[ 0 ] is __0x1343 )
					{
						__0x1040();
						__0x342.Nodes.Clear();
					}
				}
			}
			else
			{
				
				

				
				
				try
				{
					var __0x344 = new ESet<Item>( __0x343 );

					var __0x345 = new List<Item>();
					foreach( ItemTreeNode __0x862 in __0x342.Nodes )
					{
						if( !__0x344.Contains( __0x862.item ) )
							__0x345.Add( __0x862.item );
					}

					if( __0x345.Count != 0 )
					{
						foreach( var __0x863 in __0x345.GetReverse() )
							RemoveItem( __0x863 );
					}
				}
				catch { }

				for( int __0x346 = 0; __0x346 < __0x343.Count; __0x346++ )
				{
					var __0x347 = __0x343[ __0x346 ];

					
					var __0x348 = GetNodeByItem( __0x347 );
					if( __0x348 == null || ( __0x346 >= __0x342.Nodes.Count || __0x348 != __0x342.Nodes[ __0x346 ] || __0x348.Parent != __0x342 ) )
					{
						if( __0x348 != null )
						{
							
							__0x1040();
							__0x348.Parent.Nodes.Remove( __0x348 );
							__0x342.Nodes.Insert( __0x346, __0x348 );
						}
						else
						{
							
							__0x934( item, __0x347, __0x346, null );
						}
					}
				}

				
				
				try
				{
					while( __0x342.Nodes.Count > __0x343.Count )
					{
						var __0x349 = (ItemTreeNode)__0x342.Nodes[ __0x342.Nodes.Count - 1 ];
						var __0x350 = GetItemByNode( __0x349 );
						if( __0x350 != null )
							RemoveItem( __0x350 );
					}
				}
				catch { }
			}
			
			
			
			
			
			

			
			if( __0x1036().Contains( item ) )
				__0x1012();
		}

		class __0x1344
		{
			public List<ItemTreeNode> nodesToExpandAtStartup = new List<ItemTreeNode>();
			public List<ItemTreeNode> nodesToExpandAllAtStartup = new List<ItemTreeNode>();
		}

		public void SetData( IList<Item> roots, bool showPlusMinus = true )
		{
			__0x300 = true;

			__0x930();

			__0x1040();

			if( __0x812.ShowPlusMinus != showPlusMinus )
				__0x812.ShowPlusMinus = showPlusMinus;

			
			var __0x351 = new __0x1344();
			__0x812.Model = null;

			foreach( var __0x864 in roots )
				__0x934( null, __0x864, -1, __0x351 );

			
			foreach( var __0x865 in roots )
			{
				__0x933( __0x865, __0x351 );

				

				List<Item> __0x352 = new List<Item>( 16384 );
				__0x865.GetChildrenOnlyAlreadyCreatedRecursive( __0x352 );
				foreach( var __0x866 in __0x352 )
				{
					var __0x353 = __0x866.Parent;
					if( __0x353 != null && ( __0x353 is ContentBrowserItem_Type || __0x353 is ContentBrowserItem_Virtual ) )
						__0x933( __0x353, __0x351 );
				}
			}

			
			__0x812.Model = __0x297;
			
			foreach( var __0x867 in __0x351.nodesToExpandAllAtStartup )
				__0x996( __0x867 ).ExpandAll();
			foreach( var __0x868 in __0x351.nodesToExpandAtStartup )
				__0x996( __0x868 ).Expand();

			__0x1041();

			
			__0x1047();

			UpdateBreadcrumb();
			__0x1012();

			__0x300 = false;
		}

		
		
		
		

		
		
		
		
		

		public void AddRootItem( Item item )
		{
			__0x934( null, item, -1, null );
		}

		
		
		
		
		
		

		void __0x935()
		{
			bool __0x354 = !__0x299 && !__0x300;

			

			UpdateBreadcrumb();
			__0x1012();

			bool __0x355 = false;
			ItemAfterSelect?.Invoke( this, __0x1036(), __0x354, ref __0x355 );

			__0x1021( false );
		}

		private void __0x936( object __0x1086, EventArgs __0x1087 )
		{
			if( __0x308 )
				__0x935();

			

			

			
			

			
			

			
		}

		private void __0x937( object __0x1088, MouseEventArgs __0x1089 )
		{
			
			
			
			
			
			
		}

		private void __0x938( object __0x1090, TreeNodeAdvMouseEventArgs __0x1091 )
		{
			if( __0x1091.Button == MouseButtons.Left )
			{
				ItemTreeNode __0x356 = __0x995( __0x812.SelectedNode );
				if( __0x356 != null )
				{
					if( __0x356.Nodes.Count == 0 || __0x356.item.chooseByDoubleClickAndReturnKey )
					{
						__0x941();

						__0x1091.Handled = true;
					}
				}
				
				
				
				
				
				
			}
		}

		bool __0x939( Keys __0x1092 )
		{
			if( __0x1092 >= Keys.D0 && __0x1092 <= Keys.D9 )
				return true;
			if( __0x1092 >= Keys.A && __0x1092 <= Keys.Z )
				return true;
			return false;
		}

		private void __0x940( object __0x1093, KeyEventArgs __0x1094 )
		{
			
			{
				bool __0x357 = false;
				KeyDownOverride?.Invoke( this, __0x1093, __0x1094, ref __0x357 );
				if( __0x357 )
					return;
			}

			if( __0x1094.KeyCode == Keys.Return )
			{
				ItemTreeNode __0x358 = __0x995( __0x812.SelectedNode );
				if( __0x358 != null )
				{
					__0x941();
					__0x1094.Handled = true;
					return;
				}
			}

			
			{
				var __0x359 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x359 != null )
				{
					foreach( var __0x869 in __0x359 )
					{
						Keys __0x360 = __0x1094.KeyCode | ModifierKeys;
						if( __0x869 == __0x360 )
						{
							__0x1001();
							return;
						}
					}
				}

				
				
				
				
				
			}

			
			if( ModifierKeys != Keys.None || !__0x939( __0x1094.KeyCode ) )
			{
				if( EditorAPI.ProcessShortcuts( __0x1094.KeyCode, true ) )
				{
					__0x1094.Handled = true;
					return;
				}
			}
		}

		void __0x941()
		{
			ItemTreeNode __0x361 = __0x995( __0x812.SelectedNode );
			if( __0x361 != null )
			{
				bool __0x362 = false;
				__0x960( __0x361.item, ref __0x362 );
				
			}
		}

		private void __0x942( object __0x1095, EventArgs __0x1096 )
		{
			
		}

		private void __0x943( object __0x1097, MouseEventArgs __0x1098 )
		{
			if( __0x1098.Button == MouseButtons.Right )
			{
				
				var __0x363 = __0x812.GetNodeAt( __0x1098.Location );
				ItemTreeNode __0x364 = __0x995( __0x363 );
				if( __0x364 != null && !__0x812.SelectedNodes.Contains( __0x363 ) )
					__0x812.SelectedNode = __0x363;

				var __0x365 = GetItemByNode( __0x364 );
				__0x963( __0x365, __0x812, __0x1098.Location );
			}
		}

		private void __0x944( object __0x1099, MouseEventArgs __0x1100 )
		{
			if( __0x1100.Button == MouseButtons.Right )
			{
				var __0x366 = __0x995( __0x812.GetNodeAt( __0x1100.Location ) );
				if( __0x366 == null )
					__0x963( null, __0x812, __0x1100.Location );
			}
		}

		public Item[] GetAllItems()
		{
			Item[] __0x367 = new Item[ __0x289.Keys.Count ];
			__0x289.Keys.CopyTo( __0x367, 0 );
			return __0x367;
		}

		void __0x945( bool __0x1101, Item __0x1102, List<Item> __0x1103 )
		{
			__0x1103.Add( __0x1102 );
			foreach( var __0x870 in __0x1102.GetChildren( __0x1101 ) )
				__0x945( __0x1101, __0x870, __0x1103 );
		}

		public List<Item> GetAllItemsByItemHierarchy( bool onlyAlreadyCreatedChildren )
		{
			var __0x368 = new List<Item>();
			foreach( var __0x871 in __0x290 )
				__0x945( onlyAlreadyCreatedChildren, __0x871, __0x368 );
			return __0x368;
		}

		public void SelectItems( IList<Item> items, bool expandNodes = false, bool considerAsSelectedByUser = false )
		
		{
			if( items == null )
				items = new Item[ 0 ];

			if( !considerAsSelectedByUser )
				__0x299 = true;

			try
			{
				

				if( items.Count != 0 )
				{
					var __0x369 = new List<TreeNodeAdv>();
					foreach( var __0x872 in items )
					{
						__0x289.TryGetValue( __0x872, out var node );
						if( node != null )
						{
							var __0x370 = __0x996( node );
							if( __0x370 != null )
								__0x369.Add( __0x370 );
						}
					}

					if( __0x369.Count != 0 )
					{
						
						if( __0x369.Count > 1 )
						{
							__0x1040();
							__0x308 = false;
							try
							{
								__0x812.ClearSelection();
								foreach( var __0x873 in __0x369 )
									__0x873.IsSelected = true;
							}
							finally
							{
								__0x308 = true;
							}
							__0x935();
							
						}
						else if( __0x369.Count == 1 )
							__0x812.SelectedNode = __0x369[ 0 ];
						else
							__0x812.SelectedNode = null;

						
						
						if( expandNodes )
						{
							foreach( var __0x874 in __0x369 )
							{
								__0x874.Expand();

								
								var __0x371 = __0x874.Children;
								if( __0x371.Count != 0 )
								{
									var __0x372 = __0x371[ __0x371.Count - 1 ];
									__0x812.EnsureVisible( __0x372 );
								}
							}
						}

						
						if( __0x369.Count > 1 )
						{
							int __0x373 = __0x369[ 0 ].Row, __0x374 = 0;
							int __0x375 = __0x369[ 0 ].Row, __0x376 = 0;

							for( int __0x377 = 0; __0x377 <= __0x369.Count - 1; __0x377++ )
							{
								if( __0x369[ __0x377 ].Row > __0x373 )
								{
									__0x373 = __0x369[ __0x377 ].Row;
									__0x374 = __0x377;
								}
								if( __0x369[ __0x377 ].Row < __0x375 )
								{
									__0x375 = __0x369[ __0x377 ].Row;
									__0x376 = __0x377;
								}
							}

							__0x812.EnsureVisible( __0x369[ __0x374 ] );
							__0x812.EnsureVisible( __0x369[ __0x376 ] );
						}
						else if( __0x369.Count == 1 )
							__0x812.EnsureVisible( __0x369[ 0 ] );


						

					}
					else
						__0x812.SelectedNode = null;
				}
				else
					__0x812.SelectedNode = null;
			}
			finally
			{
				if( !considerAsSelectedByUser )
					__0x299 = false;
			}
		}

		public void SelectItemsList( IList<Item> items, bool considerAsSelectedByUser = false )
		{
			if( !considerAsSelectedByUser )
				__0x299 = true;

			try
			{
				if( items != null && items.Count != 0 )
				{
					var __0x378 = items[ 0 ].Parent;
					if( __0x378 != null )
						SelectItems( new[] { __0x378 } );
					else
						SelectItems( new Item[ 0 ] );

					var __0x379 = new List<EngineListView.Item>();
					foreach( var __0x875 in items )
					{
						var __0x380 = GetListItemByItem( __0x875 );
						if( __0x380 != null )
							__0x379.Add( __0x380 );
					}
					__0x838.SelectedItems = __0x379;

					foreach( var __0x876 in __0x379 )
						__0x838.EnsureVisible( __0x876 );
				}
				else
				{
					

					

					__0x838.SelectedItems = new List<EngineListView.Item>();

					
				}
			}
			finally
			{
				if( !considerAsSelectedByUser )
					__0x299 = false;
			}
		}

		[Browsable( false )]
		public Item[] SelectedItems
		{
			get
			{
				List<Item> __0x381 = new List<Item>();

				if( __0x838.SelectedItems.Count != 0 )
				{
					foreach( var __0x877 in __0x838.SelectedItems )
						__0x381.Add( (Item)__0x877.Tag );
				}
				else
					__0x381.AddRange( __0x1036() );

				return __0x381.ToArray();
			}
		}

		[Browsable( false )]
		public Item[] SelectedItemsOnlyListView
		{
			get
			{
				if( __0x838.SelectedItems.Count != 0 )
				{
					List<Item> __0x382 = new List<Item>( __0x838.SelectedItems.Count );
					foreach( var __0x878 in __0x838.SelectedItems )
						__0x382.Add( (Item)__0x878.Tag );
					return __0x382.ToArray();
				}
				else
					return Array.Empty<Item>();
			}
		}

		
		
		
		

		
		
		
		
		

		
		
		
		
		

		private void __0x946( object __0x1104, EventArgs __0x1105 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x1047();

			double __0x383 = 0.05;
			{
				var __0x384 = __0x969().Count;
				if( __0x384 > 2000 )
					__0x383 = 2.0;
				else if( __0x384 > 500 )
					__0x383 = 1.0;
				else if( __0x384 > 250 )
					__0x383 = 0.5;
				else if( __0x384 > 100 )
					__0x383 = 0.35;
				else
					__0x383 = 0.2;
			}
			if( EngineApp.GetSystemTime() - __0x310 < __0x383 )
				return;

			__0x970();

			if( __0x283 != __0x282.PanelMode )
				SetPanelMode( __0x282.PanelMode, true );
			__0x1021( false );
			__0x1024();

			
			
			
			
			
			
			

			
			if( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference )
			{
				if( updatedDataSortBy != __0x282.SortFilesBy || updatedDataSortByAscending != __0x282.SortFilesByAscending )
				{
					updatedDataSortBy = __0x282.SortFilesBy;
					updatedDataSortByAscending = __0x282.SortFilesByAscending;

					

					foreach( var __0x879 in GetAllItems() )
					{
						var __0x385 = __0x879 as ContentBrowserItem_File;
						if( __0x385 != null && __0x385.IsDirectory )
							__0x385.PerformChildrenChanged();
					}
				}
			}

			__0x1010();

			__0x1037();

			
			foreach( var __0x880 in GetAllItems() )
				__0x880.LightweightUpdate();

			
			bool __0x386 = __0x312.SelectedItem?.Parent != null;
			if( __0x841.Enabled != __0x386 )
				__0x841.Enabled = __0x386;

			__0x1041();

			
			
			

			
			if( !__0x838.Visible )
				__0x838.Visible = true;

			
			if( needUpdateImages )
			{
				needUpdateImages = false;
				foreach( var __0x881 in GetAllItems() )
					__0x881.UpdateImage();
				UpdateListImages();
			}

			__0x310 = EngineApp.GetSystemTime();
		}

		public void UpdateData()
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			updatedDataSortBy = __0x282.SortFilesBy;
			updatedDataSortByAscending = __0x282.SortFilesByAscending;

			if( EditorAPI.ClosingApplication )
				return;

			var __0x387 = new List<Item>();

			if( Mode == ModeEnum.Objects )
				__0x947( __0x387 );
			else if( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference )
				__0x950( __0x387 );
			else
				Log.Fatal( "impl" );

			
			UpdateDataEvent?.Invoke( this, __0x387 );

			SetData( __0x387 );
		}

		void __0x947( List<Item> __0x1106 )
		{
			

			

			
			
			
			
			
			

			
			

			var __0x388 = __0x276 as Component;
			if( __0x388 != null )
			{
				

				var __0x389 = new ContentBrowserItem_Component( this, null, __0x388 );

				__0x389.expandAtStartup = true;
				

				
				
				
				if( __0x281 )
					__0x389.expandAllAtStartup = true;

				__0x1106.Add( __0x389 );
			}
			
			
			
			
			
			
			else
			{
				
				
				
			}

			
		}

		bool __0x948( Type __0x1107 )
		{
			if( __0x1107.IsArray )
				return true;

			
			if( __0x1107.IsGenericType && !__0x1107.IsGenericTypeDefinition )
				return true;

			
			

			return false;
		}

		internal static string GetTypeImageKey( Metadata.TypeInfo type )
		{
			switch( type.Classification )
			{
			case Metadata.TypeClassification.Enumeration: return "Enum";
			case Metadata.TypeClassification.Delegate: return "Delegate";
			}
			return "Class";
		}

		void __0x949( ContentBrowserItem_Type __0x1108 )
		{
			Type __0x390 = __0x1108.type.GetNetType();

			var __0x391 = new List<Type>( __0x390.GetNestedTypes() );
			
			CollectionUtility.MergeSort( __0x391, delegate ( Type __0x1109, Type __0x1110 )
			{
				return string.Compare( __0x1109.Name, __0x1110.Name );
			} );

			
			foreach( var __0x882 in __0x391 )
			{
				if( !__0x948( __0x882 ) ||
					( Mode == ModeEnum.SetReference && __0x277.selectTypeWindow ) )
				{
					bool __0x392 = false;
					if( Mode == ModeEnum.SetReference && __0x882.IsEnum )
						__0x392 = true;

					if( !__0x392 && Mode == ModeEnum.SetReference && __0x277.newObjectWindow )
					{
						if( !ContentBrowserUtility.ContainsComponentClasses( __0x390 ) )
							__0x392 = true;
						
						
					}
					if( !__0x392 && Mode == ModeEnum.SetReference && __0x277.selectTypeWindow )
					{
						if( !ContentBrowserUtility.ContainsType( __0x277.selectTypeDemandedType.GetNetType(), __0x390 ) )
							__0x392 = true;
						
						
					}

					if( !__0x392 )
					{
						Metadata.TypeInfo __0x393 = MetadataManager.GetTypeOfNetType( __0x882 );
						if( __0x393 != null )
						{
							var __0x394 = MetadataManager.GetNetTypeName( __0x882, true, false );
							var __0x395 = new ContentBrowserItem_Type( this, __0x1108, __0x393, __0x394 );
							__0x395.imageKey = GetTypeImageKey( __0x393 );
							__0x1108.nestedTypeChildren.Add( __0x395 );

							__0x949( __0x395 );
						}
					}
				}
			}
		}

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		

		
		internal  void Resources_RemoveExcessClassesItemsByFilteringMode( Item classesItem )
		{
			List<Item> __0x396 = new List<Item>( 16384 );
			classesItem.GetChildrenOnlyAlreadyCreatedRecursive( __0x396 );

			
			foreach( var __0x883 in __0x396.GetReverse() )
			{
				
				bool __0x397;
				{
					var __0x398 = __0x883 as ContentBrowserItem_Type;
					if( __0x398 != null )
					{
						__0x397 = true;

						if( !FilteringMode.AddItem( __0x398 ) )
							__0x397 = false;

						
					}
					else
						__0x397 = false;
				}

				bool __0x399 = !__0x397 && __0x883.GetChildrenFilter( false ).Count == 0;
				
				if( __0x399 )
				{
					var __0x400 = __0x883.Parent;

					var __0x401 = __0x400 as ContentBrowserItem_Type;
					var __0x402 = __0x400 as ContentBrowserItem_Virtual;

					if( __0x401 != null )
						__0x401.DeleteNestedTypeChild( __0x883 );
					else if( __0x402 != null )
						__0x402.DeleteChild( __0x883 );
					else
					{
						
					}
				}
			}
		}

		internal  void SetReference_RemoveExcessTypeItems( Item classesItem )
		{
			

			List<Item> __0x403 = new List<Item>( 16384 );
			classesItem.GetChildrenOnlyAlreadyCreatedRecursive( __0x403 );

			
			foreach( var __0x884 in __0x403.GetReverse() )
			{
				
				bool __0x404;
				{
					var __0x405 = __0x884 as ContentBrowserItem_Type;
					if( __0x405 != null )
					{
						__0x404 = false;

						var __0x406 = SetReferenceModeData.DemandedType;

						if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( __0x406 ) )
						{
							
							__0x404 = true;

							
							if( SetReferenceModeData.newObjectWindow )
							{
								var __0x407 = __0x405.type;
								if( !MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x407 ) || __0x407.Abstract )
									__0x404 = false;
							}
							if( SetReferenceModeData.selectTypeWindow )
							{
								var __0x408 = __0x405.type;
								if( !__0x277.selectTypeDemandedType.IsAssignableFrom( __0x408 ) || __0x408.Abstract && !__0x277.selectTypeWindowCanSelectAbstractClass )
									__0x404 = false;
								
								
							}
						}
						else
						{
							
							foreach( var __0x885 in __0x405.Type.MetadataGetMembers() )
							{
								if( ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x406, __0x885, true ) )
								{
									__0x404 = true;
									break;
								}
							}
						}
					}
					else
						__0x404 = false;
				}

				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				bool __0x409 = !__0x404 && __0x884.GetChildrenFilter( true ).Count == 0;
				if( __0x409 )
				{
					var __0x410 = __0x884.Parent;

					var __0x411 = __0x410 as ContentBrowserItem_Type;
					var __0x412 = __0x410 as ContentBrowserItem_Virtual;

					if( __0x411 != null )
						__0x411.DeleteNestedTypeChild( __0x884 );
					else if( __0x412 != null )
						__0x412.DeleteChild( __0x884 );
					else
					{
						
					}
				}
			}
		}

		void __0x950( List<Item> __0x1111 )
		{
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			if( Mode == ModeEnum.SetReference && __0x277.selectedComponents != null )
			{
				ESet<Component> __0x413 = new ESet<Component>();

				Component __0x414 = null;
				{
					foreach( var __0x886 in __0x277.selectedComponents )
					{
						var __0x415 = __0x886 as Component;
						if( __0x415 != null )
						{
							if( __0x414 == null )
								__0x414 = __0x415;
							else
							{
								if( __0x414 != __0x415 )
								{
									__0x414 = null;
									break;
								}
							}
						}
					}
				}

				if( __0x414 != null )
				{
					var __0x416 = new ContentBrowserItem_Component( this, null, __0x414 );
					__0x416.SpecialTextPrefix = "this: ";
					__0x416.ReferenceSelectionMode = ContentBrowserItem_Component.ReferenceSelectionModeEnum.This;
					__0x1111.Add( __0x416 );
				}
			}

			
			
			if( Mode == ModeEnum.SetReference && __0x277.selectedComponents != null )
			{
				Component __0x417 = null;
				{
					foreach( var __0x887 in __0x277.selectedComponents )
					{
						var __0x418 = __0x887 as Component;
						if( __0x418 != null )
						{
							if( __0x417 == null )
								__0x417 = __0x418.ParentRoot;
							else
							{
								if( __0x417 != __0x418.ParentRoot )
								{
									__0x417 = null;
									break;
								}
							}
						}
					}
				}

				if( __0x417 != null )
				{
					var __0x419 = new ContentBrowserItem_Component( this, null, __0x417 );
					__0x419.SpecialTextPrefix = "root: ";
					__0x419.ReferenceSelectionMode = ContentBrowserItem_Component.ReferenceSelectionModeEnum.Root;
					__0x1111.Add( __0x419 );
				}
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			

			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			if( ( Mode == ModeEnum.Resources && ( FilteringMode == null || FilteringMode.AddGroupsBaseTypesAddonsProject ) ) || ( Mode == ModeEnum.SetReference && MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( SetReferenceModeData.DemandedType ) && !__0x277.selectTypeWindow ) )
			{
				__0x291.Clear();

				Dictionary<string, Item> __0x420 = new Dictionary<string, Item>();

				Item GetBrowserItemByPath( string __0x1112 )
				{
					__0x420.TryGetValue( __0x1112, out var item );
					return item;
				}

				foreach( var __0x888 in ResourcesWindowItems.Items )
				{
					
					if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x888 ) )
						continue;

					
					bool __0x421 = false;
					if( Mode == ModeEnum.SetReference )
					{
						if( __0x277.newObjectWindow && !__0x277.newObjectWindowFileCreation )
						{
							if( !typeof( Component ).IsAssignableFrom( __0x888.Type ) )
								__0x421 = true;
						}
					}
					if( __0x421 )
						continue;

					__0x291.Add( __0x888.Type );

					var __0x422 = __0x888.Path.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

					string __0x423 = "";
					for( int __0x424 = 0; __0x424 < __0x422.Length; __0x424++ )
					{
						__0x423 = Path.Combine( __0x423, __0x422[ __0x424 ] );

						
						ContentBrowserItem_Virtual __0x425 = null;
						if( __0x424 != 0 )
							__0x425 = GetBrowserItemByPath( Path.GetDirectoryName( __0x423 ) ) as ContentBrowserItem_Virtual;

						if( GetBrowserItemByPath( __0x423 ) == null )
						{
							

							Item __0x426 = null;

							
							bool __0x427 = __0x424 < __0x422.Length - 1;
							if( __0x427 )
							{
								var __0x428 = EditorLocalization.Translate( "ContentBrowser.Group", __0x422[ __0x424 ] );
								var __0x429 = new ContentBrowserItem_Virtual( this, __0x425, __0x428 );

								__0x426 = __0x429;
								__0x426.imageKey = "Folder";

								ResourcesWindowItems.GroupDescriptions.TryGetValue( __0x423, out var description );
								if( !string.IsNullOrEmpty( description ) )
									__0x429.Description = description;
							}
							else
							{
								var __0x430 = MetadataManager.GetTypeOfNetType( __0x888.Type );
								var __0x431 = new ContentBrowserItem_Type( this, __0x425, __0x430, __0x422[ __0x424 ] );
								__0x426 = __0x431;
								__0x431.imageKey = GetTypeImageKey( __0x430 );
								__0x431.memberCreationDisable = true;
								__0x431.ShowDisabled = __0x888.Disabled;
							}

							if( __0x425 != null )
								__0x425.children.Add( __0x426 );

							__0x420.Add( __0x423, __0x426 );
							if( __0x424 == 0 )
								__0x1111.Add( __0x426 );
						}
					}
				}

				
				{
					var __0x432 = GetBrowserItemByPath( "Base" );
					if( __0x432 != null )
						__0x432.expandAtStartup = true;
				}
			}

			
			
			if( EditorFavorites.AllowFavorites && ( ( Mode == ModeEnum.Resources && ( FilteringMode == null || FilteringMode.AddGroupsBaseTypesAddonsProject ) ) || ( Mode == ModeEnum.SetReference && MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( SetReferenceModeData.DemandedType ) && !__0x277.selectTypeWindow ) ) )
			{
				__0x292 = new ContentBrowserItem_Favorites( this, null, EditorLocalization.Translate( "ContentBrowser.Group", "Favorites" ) );
				__0x292.imageKey = "Folder";

				if( Mode == ModeEnum.SetReference )
					SetReference_RemoveExcessTypeItems( (Item)__0x292 );

				
				if( Mode == ModeEnum.Resources && FilteringMode != null )
					Resources_RemoveExcessClassesItemsByFilteringMode( (Item)__0x292 );

				if( __0x292 != null )
					__0x1111.Add( __0x292 );
			}

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			if( AllowAllTypes && ( ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference ) && ( FilteringMode == null || FilteringMode.AddGroupAllTypes ) ) )
			{
				var __0x433 = new ContentBrowserItem_Virtual( this, null, EditorLocalization.Translate( "ContentBrowser.Group", "All types" ) );
				__0x433.imageKey = "Folder";
				__0x433.Tag = "All types";

				UpdateAllTypesItem( __0x433, false );

				if( __0x433 != null )
					__0x1111.Add( __0x433 );
			}

			
			
			
			
			
			

			
			

			
			
			

			
			
			if( FilteringMode == null || FilteringMode.AddFiles )
			{
				__0x293 = new ContentBrowserItem_File( this, null, VirtualFileSystem.Directories.Assets, true );
				__0x293.SetText( EditorLocalization.Translate( "ContentBrowser.Group", "Assets" ) );
				__0x293.imageKey = "Folder";
				__0x293.expandAtStartup = true;
				if( Mode == ModeEnum.SetReference && __0x277.selectTypeWindow )
					__0x293.expandAtStartup = false;

				if( FilteringMode != null && FilteringMode.ExpandAllFileItemsAtStartup )
					__0x293.expandAllAtStartup = true;
			}
			if( __0x293 != null )
				__0x1111.Add( __0x293 );

			
			
			if(  Mode == ModeEnum.SetReference && SetReferenceModeData.allowNull )
			
			
			
			
			
			{
				var __0x434 = new ContentBrowserItem_Null( this, null, "Null" );
				if( __0x434 != null )
					__0x1111.Add( __0x434 );
			}

			
		}

		string __0x951( string __0x1113 )
		{
			return EditorLocalization.Translate( "ContentBrowser", __0x1113 );
		}

		public bool CanNewObject( out Item newParentItem )
		{
			if( ReadOnlyHierarchy )
			{
				newParentItem = null;
				return false;
			}

			Item __0x435 = null;
			if( SelectedItems.Length == 1 )
				__0x435 = SelectedItems[ 0 ];

			

			if( __0x435 != null && __0x435.ContainedObject != null )
			{
				
				var __0x436 = __0x435 as ContentBrowserItem_Component;
				if( __0x436 != null && __0x436.Component != null && !__0x436.Component.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x436.Component ) != null )
				{
					newParentItem = __0x435;
					return true;
				}

				
				
				
				
				
				
				

				
				
				
				
				
				
				
			}

			newParentItem = null;
			return false;
		}

		
		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			Item __0x437;
			if( !CanNewObject( out __0x437 ) )
				return;

			

			
			
			
			
			
			

			
			
			
			

			
			
			
			

			

			
			

			
			
			

			
			

			
			

			

			
			

			
			
			
			

			
			
			

			
			{
				
			}

			
			var __0x438 = __0x437.ContainedObject;

			var __0x439 = new NewObjectWindow.CreationDataClass();
			__0x439.initDocumentWindow = DocumentWindow;

			__0x439.initParentObjects = new List<object>();
			
			__0x439.initParentObjects.Add( __0x438 );

			__0x439.createdFromContentBrowser = this;

			__0x439.initLockType = lockType;
			__0x439.initSupportAutoCreateAndClose = lockType != null;

			
			
			

			EditorAPI.OpenNewObjectWindow( __0x439 );

			
			
		}

		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		

		
		private void __0x952( FileSystemEventArgs __0x1114 )
		{
			

			switch( __0x1114.ChangeType )
			{
			case WatcherChangeTypes.Created:
			case WatcherChangeTypes.Deleted:
				{
					var __0x440 = Path.GetDirectoryName( __0x1114.FullPath );
					string __0x441 = VirtualPathUtility.GetVirtualPathByReal( __0x440 );
					__0x953( __0x441 );
				}
				break;

			case WatcherChangeTypes.Renamed:
				{
					RenamedEventArgs __0x442 = (RenamedEventArgs)__0x1114;

					

					var __0x443 = Path.GetDirectoryName( __0x442.OldFullPath );
					string __0x444 = VirtualPathUtility.GetVirtualPathByReal( __0x443 );
					__0x953( __0x444 );

					var __0x445 = Path.GetDirectoryName( __0x1114.FullPath );
					string __0x446 = VirtualPathUtility.GetVirtualPathByReal( __0x445 );
					if( string.Compare( __0x444, __0x446, true ) != 0 )
						__0x953( __0x446 );
				}
				break;

			case WatcherChangeTypes.Changed:
				{
					

				}
				break;
			}
		}

		void __0x953( string __0x1115 )
		{
			
			if( __0x293 != null )
			{
				var __0x447 = __0x1115.Split( new char[] { '/', '\\' }, StringSplitOptions.RemoveEmptyEntries );

				string __0x448 = "";
				ContentBrowserItem_File __0x449 = __0x293;

				for( int __0x450 = 0; __0x450 < __0x447.Length; __0x450++ )
				{
					__0x448 = Path.Combine( __0x448, __0x447[ __0x450 ] );

					string __0x451 = VirtualPathUtility.GetRealPathByVirtual( __0x448 );
					string __0x452 = ContentBrowserItem_File.GetFileChildrenKey( __0x451 );

					if( !__0x449.FileChildren.TryGetValue( __0x452, out Item item ) )
					{
						__0x449 = null;
						break;
					}

					__0x449 = (ContentBrowserItem_File)item;
				}

				
				if( __0x449 != null )
				{
					Item __0x453 = __0x449;
					while( __0x453 != null )
					{
						__0x453.PerformChildrenChanged();
						__0x453 = __0x453.Parent;
					}
				}
			}

			
			if( __0x292 != null )
			{
				var __0x454 = VirtualPathUtility.GetRealPathByVirtual( __0x1115 );

				foreach( var __0x889 in __0x292.GetChildren( true ).ToArray() )
				{
					var __0x455 = __0x889 as ContentBrowserItem_File;
					if( __0x455 != null && __0x455.FullPath == __0x454 )
						__0x455.PerformChildrenChanged();
				}
			}
		}

		
		private void __0x954( Resource.Instance __0x1116 )
		{
			if( EngineApp.Closing )
				return;
			if( __0x1116.InstanceType != Resource.InstanceType.Resource )
				return;

			

			

			switch( __0x1116.Status )
			{
			case Resource.Instance.StatusEnum.CreationProcess:
				break;

			case Resource.Instance.StatusEnum.Error:
				break;

			case Resource.Instance.StatusEnum.Ready:
				{
					
					if( __0x1116.Owner.LoadFromFile )
					{
						var __0x456 = __0x1116.Owner.Name;
						__0x953( __0x456 );
					}
				}
				break;
			}
		}

		
		private void __0x955( Resource.Instance __0x1117 )
		{
			if( EngineApp.Closing )
				return;
			if( __0x1117.InstanceType != Resource.InstanceType.Resource )
				return;

			
			if( __0x1117.Owner.LoadFromFile )
			{
				var __0x457 = __0x1117.Owner.Name;
				__0x953( __0x457 );
			}
		}

		
		void __0x956( Item __0x1118 )
		{
			


			
			bool __0x458 = true;

			
			
			if( __0x1118 != null && __0x458 )
			{
				
				

				ContentBrowserItem_File __0x459 = __0x1118 as ContentBrowserItem_File;
				if( __0x459 != null && !__0x459.IsDirectory )
				{
					

					
					

					
					var __0x460 = Path.GetExtension( __0x459.FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x460 ) != null )
					{
						string __0x461 = VirtualPathUtility.GetVirtualPathByReal( __0x459.FullPath );
						if( string.IsNullOrEmpty( __0x461 ) )
						{
							
						}

						
						
						
						var __0x462 = ResourceManager.LoadResource( __0x461, true );
					}
				}
			}
		}

		
		
		


		
		

		
		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		void __0x957()
		{
			var __0x463 = new List<object>();

			
			

			foreach( var __0x890 in SelectedItems )
			{
				

				
				var __0x464 = __0x890 as ContentBrowserItem_File;
				if( __0x464 != null && !__0x464.IsDirectory )
				{
					

					

					
					

					
					var __0x465 = Path.GetExtension( __0x464.FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x465 ) != null )
					{
						string __0x466 = VirtualPathUtility.GetVirtualPathByReal( __0x464.FullPath );
						if( string.IsNullOrEmpty( __0x466 ) )
						{
							
						}

						
						var __0x467 = ResourceManager.LoadResource( __0x466, true );

						if( __0x467 != null && __0x467.ResultObject != null )
						{
							var __0x468 = __0x467.ResultComponent;
							if( __0x468 != null )
								__0x463.Add( __0x468 );
						}
					}
				}

				
				var __0x469 = __0x890 as ContentBrowserItem_Component;
				if( __0x469 != null && __0x469.Component != null )
					__0x463.Add( __0x469.Component );

				
				
				
				
				
				
				

				
				
				
				
				
			}

			
			
			

			SettingsWindow.Instance?.SelectObjects( __0x275, __0x463 );
		}

		private void __0x958( ContentBrowser __0x1119, IList<Item> __0x1120, bool __0x1121, ref bool __0x1122 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			

			
			

			
			
			
			
			
			

			

			var __0x470 = false;

			if( PreloadResourceOnSelection )
			{
				foreach( var __0x891 in __0x1120 )
				{
					ContentBrowserItem_File __0x471 = __0x891 as ContentBrowserItem_File;
					if( __0x471 != null && !__0x471.IsDirectory )
					{
						

						
						

						
						var __0x472 = Path.GetExtension( __0x471.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x472 ) != null )
						{
							string __0x473 = VirtualPathUtility.GetVirtualPathByReal( __0x471.FullPath );
							if( string.IsNullOrEmpty( __0x473 ) )
							{
								
							}

							
							
							
							var __0x474 = ResourceManager.LoadResource( __0x473, true );
							if( __0x474 == null )
								__0x470 = true;

							
							
							

							
							
							
							
							
							
							
							
						}
					}
					else
					{
						
						
						
						
						
						
						
						
						
						
						
					}
				}
			}

			
			
			
			
			
			
			
			

			if( CanSelectObjectSettings && __0x1121 && !__0x470 )
				__0x957();
			
		}

		
		void __0x959( ContentBrowserItem_File __0x1123, ref bool __0x1124 )
		{
			

			

			

			
			

			if( EditorAPI.IsDocumentFileSupport( __0x1123.FullPath ) )
			{
				

				

				EditorAPI.OpenFileAsDocument( __0x1123.FullPath, true, true );
				
				
				
				
				
				

				__0x1124 = true;
			}
			else
			{
				
			}
		}

		void __0x960( Item __0x1125, ref bool __0x1126 )
		{
			ItemAfterChoose?.Invoke( this, __0x1125, ref __0x1126 );
			if( __0x1126 )
				return;

			

			

			
			
			

			
			

			
			
			if( Mode == ModeEnum.Resources )
			{
				ContentBrowserItem_File __0x475 = __0x1125 as ContentBrowserItem_File;
				if( __0x475 != null && !__0x475.IsDirectory )
				{
					__0x959( __0x475, ref __0x1126 );
				}
			}

			

			
			
			
			
			
			
			

			
			
			
			

		}

		void __0x961()
		{
			
		}

		void __0x962( List<KryptonContextMenuItemBase> __0x1127 )
		{
			KryptonContextMenuItem __0x476;

			KryptonContextMenuItem __0x477 = new KryptonContextMenuItem( __0x951( "Sort by" ), null );
			List<KryptonContextMenuItemBase> __0x478 = new List<KryptonContextMenuItemBase>();

			
			__0x476 = new KryptonContextMenuItem( __0x951( "Name" ), null, delegate ( object __0x1128, EventArgs __0x1129 )
			{
				if( __0x282.SortFilesBy != SortByItems.Name )
				{
					__0x282.SortFilesBy = SortByItems.Name;
					__0x961();
				}
			} );
			__0x476.Checked = __0x282.SortFilesBy == SortByItems.Name;
			__0x478.Add( __0x476 );

			
			__0x476 = new KryptonContextMenuItem( __0x951( "Date" ), null, delegate ( object __0x1130, EventArgs __0x1131 )
			{
				if( __0x282.SortFilesBy != SortByItems.Date )
				{
					__0x282.SortFilesBy = SortByItems.Date;
					__0x961();
				}
			} );
			__0x476.Checked = __0x282.SortFilesBy == SortByItems.Date;
			__0x478.Add( __0x476 );

			
			__0x476 = new KryptonContextMenuItem( __0x951( "Type" ), null, delegate ( object __0x1132, EventArgs __0x1133 )
			{
				if( __0x282.SortFilesBy != SortByItems.Type )
				{
					__0x282.SortFilesBy = SortByItems.Type;
					__0x961();
				}
			} );
			__0x476.Checked = __0x282.SortFilesBy == SortByItems.Type;
			__0x478.Add( __0x476 );

			
			__0x476 = new KryptonContextMenuItem( __0x951( "Size" ), null, delegate ( object __0x1134, EventArgs __0x1135 )
			{
				if( __0x282.SortFilesBy != SortByItems.Size )
				{
					__0x282.SortFilesBy = SortByItems.Size;
					__0x961();
				}
			} );
			__0x476.Checked = __0x282.SortFilesBy == SortByItems.Size;
			__0x478.Add( __0x476 );

			
			__0x478.Add( new KryptonContextMenuSeparator() );

			
			__0x476 = new KryptonContextMenuItem( __0x951( "Ascending" ), null, delegate ( object __0x1136, EventArgs __0x1137 )
			{
				__0x282.SortFilesByAscending = !__0x282.SortFilesByAscending;
				__0x961();
			} );
			__0x476.Checked = __0x282.SortFilesByAscending;
			__0x478.Add( __0x476 );


			__0x477.Items.Add( new KryptonContextMenuItems( __0x478.ToArray() ) );
			__0x1127.Add( __0x477 );
		}

		void __0x963( Item __0x1138, Control __0x1139, Point __0x1140 )
		{
			
			if( ReadOnlyHierarchy )
				return;

			
			
			

			var __0x479 = new List<KryptonContextMenuItemBase>();

			
			if( __0x1138 != null )
			{
				var __0x480 = __0x1138 as ContentBrowserItem_Component;
				if( __0x480 != null )
				{
					var __0x481 = EditorAPI.GetDocumentByObject( __0x480.Component );

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					{
						
						

						

						


						
						
						{
							

							

							
							
							var __0x482 = new KryptonContextMenuItem( __0x951( "Editor" ), EditorResourcesCache.Edit,
								delegate ( object __0x1141, EventArgs __0x1142 )
								{
									EditorAPI.OpenDocumentWindowForObject( DocumentWindow != null ? DocumentWindow.Document : null, __0x480.Component );
								} );
							__0x482.Enabled = __0x480.Component != null &&
								EditorAPI.IsDocumentObjectSupport( __0x480.Component ) &&
								!__0x480.Component.EditorReadOnlyInHierarchy;
							__0x479.Add( __0x482 );
						}

						
						{
							var __0x483 = new KryptonContextMenuItem( __0x951( "Settings" ), EditorResourcesCache.Settings,
								delegate ( object __0x1143, EventArgs __0x1144 )
								{
									EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
								} );
							__0x479.Add( __0x483 );
						}

						
						if( EditorUtility.AllowSeparateSettings )
						{
							var __0x484 = new KryptonContextMenuItem( __0x951( "Separate Settings" ), EditorResourcesCache.Settings,
								delegate ( object __0x1145, EventArgs __0x1146 )
								{
									if( __0x480 != null )
									{
										bool __0x485 = !ModifierKeys.HasFlag( Keys.Shift );
										EditorAPI.ShowObjectSettingsWindow( DocumentWindow.Document, __0x480.Component, __0x485 );
									}
									else
									{
										
										Log.Warning( "impl" );
									}
								} );
							__0x484.Enabled = __0x480.Component != null && !__0x480.Component.EditorReadOnlyInHierarchy && __0x481 != null;

							var __0x486 = ComponentUtility.GetResourceInstanceByComponent( __0x480.Component );
							if( __0x486 != null && __0x486.InstanceType == Resource.InstanceType.Resource )
								__0x484.Enabled = false;

							
							__0x479.Add( __0x484 );
						}

						__0x479.Add( new KryptonContextMenuSeparator() );

						
						{
							EditorContextMenuWinForms.AddNewObjectItem( __0x479, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x1147 )
							{
								TryNewObject( __0x1147 );
							} );

							
							
							
							
							
							
							
							
							
						}

						
						__0x479.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x487 = new KryptonContextMenuItem( __0x951( "Cut" ), EditorResourcesCache.Cut,
								delegate ( object __0x1148, EventArgs __0x1149 )
								{
									Cut();
								} );
							__0x487.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
							__0x487.Enabled = CanCut();
							__0x479.Add( __0x487 );
						}

						
						{
							var __0x488 = new KryptonContextMenuItem( __0x951( "Copy" ), EditorResourcesCache.Copy,
								delegate ( object __0x1150, EventArgs __0x1151 )
								{
									Copy();
								} );
							__0x488.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
							__0x488.Enabled = CanCopy();
							__0x479.Add( __0x488 );
						}

						
						{
							var __0x489 = new KryptonContextMenuItem( __0x951( "Paste" ), EditorResourcesCache.Paste,
								delegate ( object __0x1152, EventArgs __0x1153 )
								{
									Paste();
								} );
							__0x489.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
							__0x489.Enabled = CanPaste( out _, out _, out _, out _ );
							__0x479.Add( __0x489 );
						}

						
						{
							var __0x490 = new KryptonContextMenuItem( __0x951( "Duplicate" ), EditorResourcesCache.Clone,
								delegate ( object __0x1154, EventArgs __0x1155 )
								{
									TryCloneObjects();
								} );
							__0x490.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
							__0x490.Enabled = CanCloneObjects( out _ );
							__0x479.Add( __0x490 );
						}

						
						{
							var __0x491 = new KryptonContextMenuItem( __0x951( "Export to File" ), null, delegate ( object __0x1156, EventArgs __0x1157 )
							{
								EditorUtility.ExportComponentToFile( __0x480.Component );
							} );
							__0x491.Enabled = true;
							__0x479.Add( __0x491 );
						}

						
						__0x479.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x492 = new KryptonContextMenuItem( __0x951( "Delete" ), EditorResourcesCache.Delete,
								delegate ( object __0x1158, EventArgs __0x1159 )
								{
									TryDeleteObjects();
								} );
							__0x492.Enabled = CanDeleteObjects( out _ );
							__0x479.Add( __0x492 );
						}

						
						{
							var __0x493 = new KryptonContextMenuItem( __0x951( "Rename" ), null,
								delegate ( object __0x1160, EventArgs __0x1161 )
								{
									__0x1001();
								} );
							__0x493.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
							__0x493.Enabled = __0x1000();
							__0x479.Add( __0x493 );
						}
					}

					
					

					
					

					
					
					
					
					

					
					
					
					
					
					

					
					
					

					
					
					

					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					

					

					
					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					

					
					
					
					
					

					
					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					



					
					

					
					
					
					
					
					
					
					
					
					
				}
			}

			
			if( __0x1138 != null )
			{
				

				ContentBrowserItem_File __0x494 = null;
				var __0x495 = __0x1138 as ContentBrowserItem_File;
				{
					if( __0x495 != null )
					{
						if( !__0x495.IsDirectory )
						{
							var __0x496 = __0x495.Parent as ContentBrowserItem_File;
							if( __0x496 != null && __0x496.IsDirectory )
								__0x494 = __0x496;
						}
						else
							__0x494 = __0x495;
					}
				}

				if( __0x495 != null )
				{

					
					
					if( __0x495 != null && !__0x495.IsDirectory )
					{
						var __0x497 = new KryptonContextMenuItem( __0x951( "Open" ), null, delegate ( object __0x1162, EventArgs __0x1163 )
						{
							
							bool __0x498 = false;
							__0x959( __0x495, ref __0x498 );
						} );

						
						

						__0x497.Enabled = EditorAPI.IsDocumentFileSupport( __0x495.FullPath );
						
						__0x479.Add( __0x497 );
					}

					
					if( __0x495 != null && !__0x495.IsDirectory )
					{
						
						KryptonContextMenuItem __0x499 = new KryptonContextMenuItem( __0x951( "Open with" ), null );
						
						__0x499.Enabled = __0x494 != null || __0x1138.Parent == null;

						List<KryptonContextMenuItemBase> __0x500 = new List<KryptonContextMenuItemBase>();

						

						
						
						{
							var __0x501 = new KryptonContextMenuItem( __0x951( "Text editor" ), null,
							   delegate ( object __0x1164, EventArgs __0x1165 )
							   {
								   EditorAPI.OpenFileAsDocument( __0x495.FullPath, true, true, specialMode: "TextEditor" );

								   

								   
								   

								   
								   
							   } );
							__0x500.Add( __0x501 );
						}

						
						
						{
							var __0x502 = new KryptonContextMenuItem( __0x951( "External app" ), null,
							delegate ( object __0x1166, EventArgs __0x1167 )
							{
								string __0x503 = __0x495.FullPath;
								try
								{
									Process.Start( "rundll32.exe", "shell32.dll, OpenAs_RunDLL " + __0x503 );
								}
								catch( Exception e )
								{
									EditorMessageBox.ShowWarning( e.Message );
								}
							} );
							__0x500.Add( __0x502 );
						}

						
						

						
						
						
						
						
						
						
						
						

						__0x499.Items.Add( new KryptonContextMenuItems( __0x500.ToArray() ) );
						__0x479.Add( __0x499 );
					}

					if( __0x495.IsDirectory )
					{
						
						if( __0x479.Count != 0 )
							__0x479.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x504 = new KryptonContextMenuItem( __0x951( "New Folder" ), EditorResourcesCache.NewFolder,
							   delegate ( object __0x1168, EventArgs __0x1169 )
							   {
								   __0x1003();
							   } );
							__0x504.Enabled = __0x1002( out _ );
							__0x479.Add( __0x504 );
						}

						
						{
							EditorContextMenuWinForms.AddNewResourceItem( __0x479, __0x1004( out _ ), delegate ( Metadata.TypeInfo __0x1170 )
							{
								__0x1005( __0x1170 );
							} );

							
							
							
							
							
							
							
						}

						
						{
							var __0x505 = new KryptonContextMenuItem( __0x951( "Import" ), EditorResourcesCache.Import,
							   delegate ( object __0x1171, EventArgs __0x1172 )
							   {
								   __0x1007();
							   } );
							__0x505.Enabled = __0x1006( out _ );
							__0x479.Add( __0x505 );
						}
					}

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					

					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					

					

					
					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					if( __0x495.IsDirectory )
					{
						
						if( __0x479.Count != 0 )
							__0x479.Add( new KryptonContextMenuSeparator() );

						var __0x506 = new KryptonContextMenuItem( __0x951( "Open Folder in Explorer" ), null, delegate ( object __0x1173, EventArgs __0x1174 )
						{
							
							string __0x507 = __0x494.FullPath;
							Win32Utility.ShellExecuteEx( null, __0x507 );
						} );
						__0x506.Enabled = __0x494 != null;
						__0x479.Add( __0x506 );
					}

					
					if( __0x479.Count != 0 )
						__0x479.Add( new KryptonContextMenuSeparator() );

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					

					
					
					
					
					

					
					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					

					
					{
						var __0x508 = new KryptonContextMenuItem( __0x951( "Cut" ), EditorResourcesCache.Cut,
							delegate ( object __0x1175, EventArgs __0x1176 )
							{
								Cut();
							} );
						__0x508.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
						__0x508.Enabled = CanCut();
						__0x479.Add( __0x508 );
					}

					
					{
						var __0x509 = new KryptonContextMenuItem( __0x951( "Copy" ), EditorResourcesCache.Copy,
							delegate ( object __0x1177, EventArgs __0x1178 )
							{
								Copy();
							} );
						__0x509.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
						__0x509.Enabled = CanCopy();
						__0x479.Add( __0x509 );
					}

					
					if( __0x495.IsDirectory || ( !__0x495.IsDirectory && CanPaste( out _, out _, out _, out _ ) ) )
					{
						var __0x510 = new KryptonContextMenuItem( __0x951( "Paste" ), EditorResourcesCache.Paste,
							delegate ( object __0x1179, EventArgs __0x1180 )
							{
								Paste();
							} );
						__0x510.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
						__0x510.Enabled = CanPaste( out _, out _, out _, out _ );
						__0x479.Add( __0x510 );
					}

					
					if( EditorFavorites.AllowFavorites && !__0x495.IsDirectory )
					{
						
						__0x479.Add( new KryptonContextMenuSeparator() );

						var __0x511 = VirtualPathUtility.GetVirtualPathByReal( __0x495.FullPath );

						if( __0x1138.Parent != __0x292 )
						{
							

							var __0x512 = new KryptonContextMenuItem( __0x951( "Add to Favorites" ), EditorResourcesCache.Add,
							   delegate ( object __0x1181, EventArgs __0x1182 )
							   {
								   __0x1051();

								   
								   ContentBrowser __0x513 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x513 != this )
									   __0x513.__0x292?.PerformChildrenChanged();
								   __0x292?.PerformChildrenChanged();
							   } );
							__0x512.Enabled = __0x1050( true );
							__0x479.Add( __0x512 );
						}
						else
						{
							

							var __0x514 = new KryptonContextMenuItem( __0x951( "Remove from Favorites" ), EditorResourcesCache.Delete,
							   delegate ( object __0x1183, EventArgs __0x1184 )
							   {
								   __0x1052();

								   
								   ContentBrowser __0x515 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x515 != this )
									   __0x515.__0x292?.PerformChildrenChanged();
								   __0x292?.PerformChildrenChanged();
							   } );
							__0x514.Enabled = __0x1050( false );
							__0x479.Add( __0x514 );
						}
					}

					
					__0x479.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x516 = new KryptonContextMenuItem( __0x951( "Delete" ), EditorResourcesCache.Delete,
							delegate ( object __0x1185, EventArgs __0x1186 )
							{
								TryDeleteObjects();
							} );
						__0x516.Enabled = CanDeleteObjects( out _ );
						__0x479.Add( __0x516 );
					}

					
					{
						var __0x517 = new KryptonContextMenuItem( __0x951( "Rename" ), null,
							delegate ( object __0x1187, EventArgs __0x1188 )
							{
								__0x1001();
							} );
						__0x517.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
						__0x517.Enabled = __0x1000();
						__0x479.Add( __0x517 );
					}

					
					__0x479.Add( new KryptonContextMenuSeparator() );

					
					if( __0x495 != null && __0x495.IsDirectory )
					{
						__0x962( __0x479 );

						
						__0x479.Add( new KryptonContextMenuSeparator() );
					}

					
					{
						var __0x518 = new KryptonContextMenuItem( __0x951( "Properties" ), null, delegate ( object __0x1189, EventArgs __0x1190 )
						{
							
							string __0x519 = __0x495.FullPath;
							
							Win32Utility.ShellExecuteEx( "properties", __0x519 );
						} );
						__0x518.Enabled = __0x495 != null;
						
						__0x479.Add( __0x518 );
					}
				}
			}

			
			if( __0x1138 != null )
			{
				var __0x520 = __0x1138 as ContentBrowserItem_Type;
				if( __0x520 != null )
				{
					
					{
						
						var __0x521 = new KryptonContextMenuItem( __0x951( "New Resource" ), EditorResourcesCache.New,
						   delegate ( object __0x1191, EventArgs __0x1192 )
						   {
							   var __0x522 = new NewObjectWindow.CreationDataClass();
							   __0x522.initFileCreationDirectory = VirtualDirectory.Exists( "New" ) ? "New" : "";
							   
							   __0x522.initLockType = __0x520.Type;
							   __0x522.createdFromContentBrowser = this;
							   EditorAPI.OpenNewObjectWindow( __0x522 );
						   } );
						__0x521.Enabled =
							MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x520.Type ) ||
							MetadataManager.GetTypeOfNetType( typeof( NewResourceType ) ).IsAssignableFrom( __0x520.Type );
						__0x479.Add( __0x521 );
					}

					
					if( EditorFavorites.AllowFavorites )
					{
						if( __0x1138.Parent != __0x292 )
						{
							

							var __0x523 = new KryptonContextMenuItem( __0x951( "Add to Favorites" ), EditorResourcesCache.Add,
							   delegate ( object __0x1193, EventArgs __0x1194 )
							   {
								   __0x1051();

								   
								   ContentBrowser __0x524 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x524 != this )
									   __0x524.__0x292?.PerformChildrenChanged();
								   __0x292?.PerformChildrenChanged();
							   } );
							__0x523.Enabled = __0x1050( true );
							__0x479.Add( __0x523 );
						}
						else
						{
							

							var __0x525 = new KryptonContextMenuItem( __0x951( "Remove from Favorites" ), EditorResourcesCache.Delete,
							   delegate ( object __0x1195, EventArgs __0x1196 )
							   {
								   __0x1052();

								   
								   ContentBrowser __0x526 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x526 != this )
									   __0x526.__0x292?.PerformChildrenChanged();
								   __0x292?.PerformChildrenChanged();
							   } );
							__0x525.Enabled = __0x1050( false );
							__0x479.Add( __0x525 );
						}
					}

					
					{
						var __0x527 = __0x520.Type;
						var __0x528 = DocumentationLinksManager.GetFullLinkForType( __0x527.GetNetType() );

						var __0x529 = new KryptonContextMenuItem( __0x951( "Learn More" ), EditorResourcesCache.Help,
						   delegate ( object __0x1197, EventArgs __0x1198 )
						   {
							   if( !string.IsNullOrEmpty( __0x528 ) )
								   Process.Start( new ProcessStartInfo( __0x528 ) { UseShellExecute = true } );
						   } );
						__0x529.Enabled = !string.IsNullOrEmpty( __0x528 );
						__0x479.Add( __0x529 );
					}

				}
			}

			var __0x530 = EditorContextMenuWinForms.MenuTypeEnum.General;
			if( Mode == ModeEnum.Resources )
				__0x530 = EditorContextMenuWinForms.MenuTypeEnum.Resources;
			else if( DocumentWindow != null )
				__0x530 = EditorContextMenuWinForms.MenuTypeEnum.Document;

			EditorContextMenuWinForms.AddActionsToMenu( __0x530, __0x479 );

			ShowContextMenuEvent?.Invoke( this, __0x1138, __0x479 );

			EditorContextMenuWinForms.Show( __0x479, __0x1139, __0x1140 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		

		
		

		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		
		

		
		

		public bool CanDeleteObjects( out List<Item> resultItemsToDelete )
		{
			resultItemsToDelete = new List<Item>();

			if( ReadOnlyHierarchy )
				return false;

			
			
			
			{
				

				foreach( var __0x892 in SelectedItems )
				{
					if( __0x892.Parent != null )
					{
						var __0x531 = __0x892 as ContentBrowserItem_Component;
						if( __0x531 != null )
						{
							var __0x532 = __0x531.Component;
							if( __0x532 != null && __0x532.Parent != null && !__0x532.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x532 ) != null )
								resultItemsToDelete.Add( __0x531 );
						}

						
						
						
					}

					var __0x533 = __0x892 as ContentBrowserItem_File;
					if( __0x533 != null && __0x533.FullPath != VirtualFileSystem.Directories.Assets )
						resultItemsToDelete.Add( __0x533 );
				}
			}

			
			resultItemsToDelete = __0x964( resultItemsToDelete );

			if( resultItemsToDelete.Count == 0 )
				return false;

			return true;
		}

		
		

		public void TryDeleteObjects()
		{
			
			
			
			

			
			

			if( !CanDeleteObjects( out List<Item> itemsToDelete ) )
				return;

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			string __0x534;
			if( itemsToDelete.Count == 1 )
			{
				string __0x535 = __0x951( "Are you sure you want to delete \'{0}\'?" );

				var __0x536 = itemsToDelete[ 0 ];

				string __0x537;

				var __0x538 = __0x536 as ContentBrowserItem_File;
				if( __0x538 != null )
					__0x537 = __0x538.FullPath;
				else if( __0x536.ContainedObject != null )
					__0x537 = __0x536.ContainedObject.ToString();
				else
				{
					
					__0x537 = __0x536.ToString();
				}

				__0x534 = string.Format( __0x535, __0x537 );
			}
			else
			{
				string __0x539 = __0x951( "Are you sure you want to delete selected objects?" );
				__0x534 = string.Format( __0x539, itemsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x534, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			Item __0x540 = null;
			{
				Item __0x541 = null;
				int __0x542 = 0;
				foreach( var __0x893 in itemsToDelete )
				{
					if( __0x893.Parent != null )
					{
						int __0x543 = __0x893.Parent.GetChildrenFilter( true ).IndexOf( __0x893 );
						if( __0x541 == null || __0x543 < __0x542 )
						{
							__0x541 = __0x893;
							__0x542 = __0x543;
						}
					}
				}
				if( __0x541 != null )
				{
					if( __0x542 > 0 )
						__0x540 = __0x541.Parent.GetChildrenFilter( true )[ __0x542 - 1 ];
					else
						__0x540 = __0x541.Parent;
				}
			}

			var __0x544 = __0x276 as Component;
			if( __0x544 != null )
			{
				

				

				List<Component> __0x545 = new List<Component>();
				foreach( var __0x894 in itemsToDelete )
					__0x545.Add( (Component)__0x894.ContainedObject );

				
				if( DocumentWindow != null && DocumentWindow.Document != null )
				{
					var __0x546 = DocumentWindow.Document;
					var __0x547 = new UndoActionComponentCreateDelete( __0x546, __0x545, false );
					__0x546.UndoSystem.CommitAction( __0x547 );
					__0x546.Modified = true;
				}
				else
				{
					Log.Warning( "Can't be here." );
					
					
					
					
					
					
				}
			}
			
			
			

			

			
			
			
			
			
			
			

			
			
			
			

			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			else
			{
				foreach( var __0x895 in itemsToDelete )
				{
					var __0x548 = __0x895 as ContentBrowserItem_File;
					if( __0x548 != null )
					{
						try
						{
							if( Directory.Exists( __0x548.FullPath ) )
							{
								Directory.Delete( __0x548.FullPath, true );
							}
							else
							{
								if( File.Exists( __0x548.FullPath ) )
								{
									
									if( Path.GetExtension( __0x548.FullPath ).ToLower() == ".cs" )
										CSharpProjectFileUtility.UpdateProjectFile( null, new string[] { __0x548.FullPath }, out _ );

									File.Delete( __0x548.FullPath );
									
									
								}
							}
						}
						catch( Exception e )
						{
							Log.Error( e.Message );
						}
					}
					else
					{
						
					}
				}
			}

			
			if( __0x540 != null )
				SelectItems( new Item[] { __0x540 }, false, true );
		}

		static List<Item> __0x964( ICollection<Item> __0x1199 )
		{
			var __0x549 = new ESet<Item>( __0x1199.Count );
			__0x549.AddRangeWithCheckAlreadyContained( __0x1199 );

			var __0x550 = new List<Item>( __0x1199.Count );

			foreach( var __0x896 in __0x1199 )
			{
				var __0x551 = __0x896.GetAllParents( false );

				if( !__0x551.Any( __0x1200 => __0x549.Contains( __0x1200 ) ) )
					__0x550.Add( __0x896 );
			}

			return __0x550;
		}

		public bool CanCloneObjects( out List<Item> resultItemsToClone )
		{
			resultItemsToClone = new List<Item>();

			if( ReadOnlyHierarchy )
				return false;
			if( __0x275 == null || __0x275.Document == null )
				return false;

			foreach( var __0x897 in SelectedItems )
			{
				if( __0x897.Parent != null )
				{
					var __0x552 = __0x897 as ContentBrowserItem_Component;
					if( __0x552 != null )
					{
						var __0x553 = __0x552.Component;
						if( __0x553 != null && __0x553.Parent != null && !__0x553.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x553 ) != null )
							resultItemsToClone.Add( __0x552 );
					}

					

					
					
					
				}

				

				
				
				
			}

			
			resultItemsToClone = __0x964( resultItemsToClone );

			if( resultItemsToClone.Count == 0 )
				return false;

			return true;
		}

		public void TryCloneObjects()
		{
			
			

			if( !CanCloneObjects( out List<Item> itemsToClone ) )
				return;

			List<Component> __0x554 = new List<Component>();
			foreach( var __0x898 in itemsToClone )
			{
				var __0x555 = __0x898 as ContentBrowserItem_Component;
				if( __0x555 != null && __0x555.Component != null && __0x555.Component.Parent != null )
				{
					var __0x556 = __0x555.Component;
					var __0x557 = EditorUtility.CloneComponent( __0x556 );
					__0x554.Add( __0x557 );
				}

				
			}

			
			
			
			
			
			

			
			

			if( __0x554.Count == 0 )
				return;

			
			var __0x558 = new UndoActionComponentCreateDelete( __0x275.Document, __0x554, true );
			__0x275.Document.UndoSystem.CommitAction( __0x558 );
			__0x275.Document.Modified = true;
		}

		public int CalculateHeight()
		{
			return __0x806.Height + DpiHelper.Default.ScaleValue( __0x812.RowHeight ) * __0x812.ItemCount;
			
		}

		[Browsable( false )]
		public ESet<Item> Items
		{
			get { return __0x287; }
		}

		private void __0x965( object __0x1201, TreeViewAdvEventArgs __0x1202 )
		{
			var __0x559 = __0x995( __0x1202.Node );
			if( __0x559 == null )
				return;

			var __0x560 = GetItemByNode( __0x995( __0x1202.Node ) );

			
			
			
			
			

			
			if( __0x560 != null && !__0x560.wasExpanded )
			{
				__0x560.wasExpanded = true;

				__0x933( __0x560, null );

				
				
				
				
				
				
				
			}
		}

		private void __0x966( object __0x1203, TreeViewAdvEventArgs __0x1204 )
		{
			

			
			
			
			
			
		}

		private void __0x967( object __0x1205, EventArgs __0x1206 )
		{
			__0x968();
		}

		void __0x968()
		{
			var __0x561 = new ContentBrowserOptionsForm( this );
			

			if( EditorForm.Instance == null )
			{
				__0x561.ShowDialog();
			}
			else
			{
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x561.ShowDialog();
				} );
			}

			
			
			

			
			
			
			
			
			
			
			
			
			
			
		}

		
		[Browsable( false )]
		public ContentBrowserOptions Options
		{
			get { return __0x282; }
			set { __0x282 = value; }
		}

		
		List<Component> __0x969()
		{
			var __0x562 = new List<Component>();
			foreach( var __0x899 in SelectedItems )
			{
				var __0x563 = __0x899 as ContentBrowserItem_Component;
				if( __0x563 != null && __0x563.Component != null )
					__0x562.Add( __0x563.Component );
			}
			return __0x562;
		}

		void __0x970()
		{
			bool __0x564 = ShowToolBar && !ReadOnlyHierarchy;
			if( __0x806.Visible != __0x564 )
				__0x806.Visible = __0x564;

			

			

			__0x832.Visible = false;
			__0x824.Visible = ContentBrowserOptions.AllowFilteringModeButton && Options.FilteringModeButton && Mode == ModeEnum.Resources;

			__0x829.Visible = ContentBrowserOptions.AllowMembersButton && Options.MembersButton && Mode == ModeEnum.Objects;

			__0x835.Visible = Options.OpenButton && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x836.Visible = Options.OpenButton && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x836.Enabled = CanOpenFile( out _ );

			__0x823.Visible = Options.EditorButton || Options.SettingsButton;
			__0x816.Visible = Options.EditorButton;
			__0x817.Visible = Options.SettingsButton;

			__0x818.Visible = Options.ButtonsForEditing;

			__0x833.Visible = Options.ButtonsForEditing && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x834.Visible = Options.ButtonsForEditing && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x809.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x810.Visible = Options.ButtonsForEditing;
			__0x819.Visible = Options.ButtonsForEditing;
			
			
			__0x820.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x821.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x822.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			
			__0x826.Visible = Options.ButtonsForEditing;
			__0x827.Visible = Options.ButtonsForEditing;
			__0x828.Visible = Options.ButtonsForEditing;

			__0x849.Visible = Options.SearchButton && Mode == ModeEnum.Objects;
			__0x848.Visible = Options.SearchButton && Mode == ModeEnum.Objects;

			__0x808.Visible = Options.SearchBar;
			__0x811.Visible = Options.SearchBar;


			

			var __0x565 = __0x969();
			__0x816.Enabled = __0x565.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null && EditorAPI.IsDocumentObjectSupport( __0x565[ 0 ] ) && !__0x565[ 0 ].EditorReadOnlyInHierarchy;
			__0x817.Enabled = __0x565.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null && !__0x565[ 0 ].EditorReadOnlyInHierarchy;

			__0x833.Enabled = __0x1002( out _ );
			__0x834.Enabled = __0x1004( out _ );
			__0x809.Enabled = CanNewObject( out _ );
			__0x810.Enabled = CanDeleteObjects( out _ );
			__0x820.Enabled = CanCloneObjects( out _ );
			__0x821.Enabled = __0x984( out _ );
			__0x822.Enabled = __0x985( out _ );

			__0x826.Enabled = CanCut();
			__0x827.Enabled = CanCopy();
			__0x828.Enabled = CanPaste( out _, out _, out _, out _ );
			__0x819.Enabled = __0x1000();

			
			
			
			
			
			
			
		}

		private void __0x971( object __0x1207, EventArgs __0x1208 )
		{
			var __0x566 = __0x969();
			if( __0x566.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null )
			{
				EditorAPI.OpenDocumentWindowForObject( DocumentWindow.Document, __0x566[ 0 ] );
			}
		}

		private void __0x972( object __0x1209, EventArgs __0x1210 )
		{
			var __0x567 = __0x969();
			if( __0x567.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null )
			{
				bool __0x568 = !ModifierKeys.HasFlag( Keys.Shift );
				EditorAPI.ShowObjectSettingsWindow( DocumentWindow.Document, __0x567[ 0 ], __0x568 );
			}
		}

		private void __0x973( object __0x1211, EventArgs __0x1212 )
		{
			__0x1003();
		}

		private void __0x974( object __0x1213, EventArgs __0x1214 )
		{
			__0x1005( null );
		}

		private void __0x975( object __0x1215, EventArgs __0x1216 )
		{
			TryNewObject( null );
		}

		private void __0x976( object __0x1217, EventArgs __0x1218 )
		{
			TryDeleteObjects();
		}

		private void __0x977( object __0x1219, EventArgs __0x1220 )
		{
			__0x1001();
		}

		private void __0x978( object __0x1221, EventArgs __0x1222 )
		{
			TryCloneObjects();
		}

		private void __0x979( object __0x1223, EventArgs __0x1224 )
		{
			__0x986();
		}

		private void __0x980( object __0x1225, EventArgs __0x1226 )
		{
			__0x987();
		}

		private void __0x981( object __0x1227, EventArgs __0x1228 )
		{
			Cut();
		}

		private void __0x982( object __0x1229, EventArgs __0x1230 )
		{
			Copy();
		}

		private void __0x983( object __0x1231, EventArgs __0x1232 )
		{
			Paste();
		}

		
		
		
		bool __0x984( out Component __0x1233 )
		{
			var __0x569 = __0x969();
			if( __0x569.Count == 1 && SelectedItems[ 0 ].Parent != null && DocumentWindow != null && DocumentWindow.Document != null &&
				!__0x569[ 0 ].EditorReadOnlyInHierarchy )
			{
				var __0x570 = __0x569[ 0 ];

				var __0x571 = __0x570.Parent;
				if( __0x571 != null )
				{
					int __0x572 = __0x571.Components.IndexOf( __0x570 );
					if( __0x572 > 0 )
					{
						__0x1233 = __0x570;
						return true;
					}
				}
			}
			__0x1233 = null;
			return false;
		}

		bool __0x985( out Component __0x1234 )
		{
			var __0x573 = __0x969();
			if( __0x573.Count == 1 && SelectedItems[ 0 ].Parent != null && DocumentWindow != null && DocumentWindow.Document != null &&
				!__0x573[ 0 ].EditorReadOnlyInHierarchy )
			{
				var __0x574 = __0x573[ 0 ];

				var __0x575 = __0x574.Parent;
				if( __0x575 != null )
				{
					int __0x576 = __0x575.Components.IndexOf( __0x574 );
					if( __0x576 >= 0 && __0x576 < __0x575.Components.Count - 1 )
					{
						__0x1234 = __0x574;
						return true;
					}
				}
			}
			__0x1234 = null;
			return false;
		}

		void __0x986()
		{
			if( !__0x984( out Component component ) )
				return;

			
			

			var __0x577 = component.Parent;
			int __0x578 = __0x577.Components.IndexOf( component );
			int __0x579 = __0x578 - 1;

			__0x577.Components.MoveTo( component, __0x579 );

			var __0x580 = new UndoActionComponentMove( DocumentWindow.Document, component, __0x577, __0x578 );
			DocumentWindow.Document.UndoSystem.CommitAction( __0x580 );
			DocumentWindow.Document.Modified = true;

			
			{
				var __0x581 = FindItemByContainedObject( component );
				if( __0x581 != null )
					SelectItems( new Item[] { __0x581 } );
			}
		}

		void __0x987()
		{
			if( !__0x985( out Component component ) )
				return;

			var __0x582 = component.Parent;
			int __0x583 = __0x582.Components.IndexOf( component );
			int __0x584 = __0x583 + 1;
			__0x582.Components.MoveTo( component, __0x584 );

			var __0x585 = new UndoActionComponentMove( DocumentWindow.Document, component, __0x582, __0x583 );
			DocumentWindow.Document.UndoSystem.CommitAction( __0x585 );
			DocumentWindow.Document.Modified = true;

			
			{
				var __0x586 = FindItemByContainedObject( component );
				if( __0x586 != null )
					SelectItems( new Item[] { __0x586 } );
			}
		}

		public Item FindItemByContainedObject( object containedObject )
		{
			

			foreach( var __0x900 in GetAllItems() )
			{
				if( __0x900.ContainedObject == containedObject )
					return __0x900;
			}
			return null;
		}

		[DefaultValue( true )]
		public bool ShowToolBar
		{
			get { return __0x294; }
			set { __0x294 = value; }
		}

		
		
		
		
		
		
		
		
		
		

		internal static DragDropItemData GetDroppingItemData( IDataObject data )
		{
			if( data is EngineListView.DragData listViewData )
			{
				
				var __0x587 = listViewData.Items[ 0 ];
				var __0x588 = (Item)__0x587.Tag;
				return new DragDropItemData() { Item = __0x588 };
			}
			else
			{
				
				return (DragDropItemData)data.GetData( typeof( DragDropItemData ) );
			}
		}

		internal static DragDropSetReferenceData GetDroppingRefData( IDataObject data )
		{
			return (DragDropSetReferenceData)data.GetData( typeof( DragDropSetReferenceData ) );
		}

		
		
		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		

		
		private void __0x988( object __0x1235, DragEventArgs __0x1236 )
		{
			__0x1236.Effect = DragDropEffects.None;
			
			
			

			var __0x589 = __0x995( __0x812.GetNodeAt( __0x812.PointToClient( new Point( __0x1236.X, __0x1236.Y ) ) ) );
			var __0x590 = __0x995( __0x812.DropPosition.Node );

			Debug.Assert( __0x589 == __0x590 );

			var __0x591 = GetItemByNode( __0x589 );
			if( __0x591 == null )
				return;

			__0x956( __0x591 );

			var __0x592 = GetDroppingRefData( __0x1236.Data );
			if( __0x592 != null )
			{
				if( __0x991( __0x592, __0x590.item, __0x812.DropPosition.Position, true ) )
					__0x1236.Effect = DragDropEffects.Link;
			}
			else
			{
				var __0x593 = GetDroppingItemData( __0x1236.Data );
				var __0x594 = __0x992( __0x593, __0x591, __0x812.DropPosition.Position, true, out Component _ );
				if( __0x594 != DragDropEffects.None )
					__0x1236.Effect = __0x594;
			}

			
			

			
			__0x812.HighlightDropPosition = __0x1236.Effect != DragDropEffects.None;
		}

		
		private void __0x989( object __0x1237, DragEventArgs __0x1238 )
		{
			var __0x595 = __0x995( __0x812.DropPosition.Node );
			var __0x596 = GetItemByNode( __0x595 );

			var __0x597 = GetDroppingRefData( __0x1238.Data );
			if( __0x597 != null )
			{
				__0x991( __0x597, __0x596, __0x812.DropPosition.Position, false );
			}
			else
			{
				var __0x598 = GetDroppingItemData( __0x1238.Data );
				__0x992( __0x598, __0x596, __0x812.DropPosition.Position, false, out Component newObject );

				
				if( newObject != null )
				{
					var __0x599 = FindItemByContainedObject( newObject );
					if( __0x599 != null )
						SelectItems( new Item[] { __0x599 }, considerAsSelectedByUser: true );
					__0x812.Focus();
				}
			}
		}

		
		private void __0x990( object __0x1239, ItemDragEventArgs __0x1240 )
		{
			if( ReadOnlyHierarchy )
				return;

			
			ItemTreeNode __0x600 = null;
			{
				var __0x601 = __0x1240.Item as TreeNodeAdv[];
				if( __0x601 != null && __0x601.Length == 1 )
					__0x600 = __0x995( __0x601[ 0 ] );
			}

			
			if( __0x600 != null )
			{
				var __0x602 = __0x600.item;

				if( __0x602.CanDoDragDrop() )
				{
					__0x956( __0x602 );
					DoDragDrop( new DragDropItemData() { Item = __0x602 }, DragDropEffects.Link );
				}
			}
		}

		bool __0x991( DragDropSetReferenceData __0x1241, Item __0x1242, NodePosition __0x1243, bool __0x1244 )
		{
			if( __0x1241 != null && __0x1243 == NodePosition.Inside )
			{
				if( __0x1242 != null )
				{
					string[] __0x603 = new string[ __0x1241.controlledComponents.Length ];
					for( int __0x604 = 0; __0x604 < __0x1241.controlledComponents.Length; __0x604++ )
					{
						__0x1242.CalculateReferenceValue( __0x1241.controlledComponents[ __0x604 ], __0x1241.property.TypeUnreferenced, out string referenceValue, out bool canSet );
						__0x603[ __0x604 ] = referenceValue;
						if( !canSet )
						{
							__0x603 = null;
							break;
						}
					}

					if( __0x603 != null )
					{
						if( !__0x1244 )
						{
							__0x1241.SetProperty( __0x603 );

							
						}

						return true;
					}
				}
			}

			return false;
		}

		DragDropEffects __0x992( DragDropItemData __0x1245, Item __0x1246, NodePosition __0x1247, bool __0x1248, out Component __0x1249 )
		{
			__0x1249 = null;

			var __0x605 = __0x1245.Item;

			if( __0x605 == null || __0x1246 == null || __0x605 == __0x1246 )
				return DragDropEffects.None;

			
			
			
			{
				
				Metadata.TypeInfo __0x606 = null;
				Component __0x607 = null;
				{
					
					var __0x608 = __0x605 as ContentBrowserItem_Type;
					if( __0x608 != null )
					{
						var __0x609 = __0x608.Type;

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x609 ) && !__0x609.Abstract )
							__0x606 = __0x609;
					}

					
					var __0x610 = __0x605 as ContentBrowserItem_File;
					if( __0x610 != null && !__0x610.IsDirectory )
					{
						
						var __0x611 = Path.GetExtension( __0x610.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x611 ) != null )
						{
							var __0x612 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x610.FullPath ) );
							var __0x613 = __0x612?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x613 != null )
								__0x606 = __0x613;
						}
					}

					
					var __0x614 = __0x605 as ContentBrowserItem_Component;
					if( __0x614 != null && __0x614.Component != null )
					{
						var __0x615 = __0x614.Component;

						if( ComponentUtility.GetResourceInstanceByComponent( __0x615 )?.InstanceType == Resource.InstanceType.SeparateInstance )
							__0x607 = __0x615;
						else
							__0x606 = __0x615.GetProvidedType();
					}
				}

				if( __0x606 != null || __0x607 != null )
				{
					
					

					
					Component __0x616 = null;
					{
						if( __0x1246 != null )
						{
							var __0x617 = __0x1246 as ContentBrowserItem_Component;
							if( __0x617 != null )
								__0x616 = __0x617.Component;
						}
					}

					if( __0x616 != null && DocumentWindow?.Document != null )
					{
						if( __0x1247 == NodePosition.Inside )
						{
							

							if( __0x606 != null )
							{
								if( !__0x1248 )
								{
									
									__0x1249 = __0x616.CreateComponent( __0x606, -1, false );
									__0x1249.Name = ComponentUtility.GetNewObjectUniqueName( __0x1249 );
									__0x1249.NewObjectSetDefaultConfiguration();
									__0x1249.Enabled = true;

									
									var __0x618 = new List<Component>();
									__0x618.Add( __0x1249 );
									var __0x619 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x618, true );
									DocumentWindow.Document.UndoSystem.CommitAction( __0x619 );
									DocumentWindow.Document.Modified = true;
								}

								return DragDropEffects.Link;
							}

							if( __0x607 != null && !ComponentUtility.IsChildInHierarchy( __0x607, __0x616 ) )
							{
								bool __0x620 = ( ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control ) ) || __0x607.ParentRoot != __0x616.ParentRoot || __0x607.Parent == null;

								if( !__0x1248 )
								{
									string __0x621;
									if( __0x620 )
										__0x621 = __0x951( "Make copy of the object?" );
									else
										__0x621 = __0x951( "Move this object to the new place?" );
									
									
									
									

									if( EditorMessageBox.ShowQuestion( __0x621, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
									{
										if( __0x620 )
										{
											
											__0x1249 = __0x607.Clone();
											__0x1249.Name = ComponentUtility.GetNewObjectUniqueName( __0x1249 );
											__0x1249.NewObjectSetDefaultConfiguration();
											__0x616.AddComponent( __0x1249 );

											
											var __0x622 = new List<Component>();
											__0x622.Add( __0x1249 );
											var __0x623 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x622, true );
											DocumentWindow.Document.CommitUndoAction( __0x623 );
										}
										else
										{
											

											var __0x624 = __0x607.Parent;
											int __0x625 = __0x624.Components.IndexOf( __0x607 );

											__0x607.Parent.RemoveComponent( __0x607, false );
											__0x616.AddComponent( __0x607 );

											var __0x626 = new UndoActionComponentMove( DocumentWindow.Document, __0x607, __0x624, __0x625 );
											DocumentWindow.Document.CommitUndoAction( __0x626 );
										}
									}
								}

								return DragDropEffects.Link;
							}
						}
						else
						{
							

							var __0x627 = __0x616.Parent;
							if( __0x627 != null )
							{
								if( __0x606 != null )
								{
									if( !__0x1248 )
									{
										int __0x628 = -1;
										var __0x629 = __0x627.Components.IndexOf( __0x616 );
										if( __0x629 != -1 )
										{
											__0x628 = __0x629;
											if( __0x1247 == NodePosition.After )
												__0x628++;
										}

										
										__0x1249 = __0x616.Parent.CreateComponent( __0x606, __0x628, false );
										__0x1249.Name = ComponentUtility.GetNewObjectUniqueName( __0x1249 );
										__0x1249.NewObjectSetDefaultConfiguration();
										__0x1249.Enabled = true;

										
										var __0x630 = new List<Component>();
										__0x630.Add( __0x1249 );
										var __0x631 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x630, true );
										DocumentWindow.Document.UndoSystem.CommitAction( __0x631 );
										DocumentWindow.Document.Modified = true;
									}

									return DragDropEffects.Link;
								}

								if( __0x607 != null && !ComponentUtility.IsChildInHierarchy( __0x607, __0x616 ) )
								{
									bool __0x632 = ( ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control ) ) || __0x607.ParentRoot != __0x616.ParentRoot || __0x607.Parent == null;

									bool __0x633 = false;
									if( !__0x632 )
									{
										if( __0x607.Parent == __0x627 )
										{
											var __0x634 = __0x627.Components.IndexOf( __0x616 );
											var __0x635 = __0x627.Components.IndexOf( __0x607 );
											if( __0x634 == __0x635 )
												__0x633 = true;
											if( __0x1247 == NodePosition.Before && __0x634 - 1 == __0x635 )
												__0x633 = true;
											if( __0x1247 == NodePosition.After && __0x634 + 1 == __0x635 )
												__0x633 = true;
										}
									}

									if( !__0x633 )
									{
										if( !__0x1248 )
										{
											string __0x636;
											if( __0x632 )
												__0x636 = __0x951( "Make copy of the object?" );
											else
												__0x636 = __0x951( "Move this object to the new place?" );
											
											
											
											

											if( EditorMessageBox.ShowQuestion( __0x636, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
											{
												int __0x637 = -1;
												var __0x638 = __0x627.Components.IndexOf( __0x616 );
												if( __0x638 != -1 )
												{
													__0x637 = __0x638;
													if( __0x1247 == NodePosition.After )
														__0x637++;
												}

												if( __0x632 )
												{
													
													__0x1249 = __0x607.Clone();
													__0x1249.Name = ComponentUtility.GetNewObjectUniqueName( __0x1249 );
													__0x1249.NewObjectSetDefaultConfiguration();
													__0x616.Parent.AddComponent( __0x1249, __0x637 );

													
													var __0x639 = new List<Component>();
													__0x639.Add( __0x1249 );
													var __0x640 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x639, true );
													DocumentWindow.Document.CommitUndoAction( __0x640 );
												}
												else
												{
													

													var __0x641 = __0x607.Parent;
													int __0x642 = __0x641.Components.IndexOf( __0x607 );

													int __0x643 = __0x637;
													if( __0x616.Parent == __0x641 && __0x643 > __0x642 )
														__0x643--;

													__0x607.Parent.RemoveComponent( __0x607, false );
													__0x616.Parent.AddComponent( __0x607, __0x643 );

													var __0x644 = new UndoActionComponentMove( DocumentWindow.Document, __0x607, __0x641, __0x642 );
													DocumentWindow.Document.CommitUndoAction( __0x644 );
												}
											}
										}

										return DragDropEffects.Link;
									}
								}
							}
						}
					}
				}
			}

			
			if( __0x812.DropPosition.Position == NodePosition.Inside )
			{
				
				var __0x645 = __0x605 as ContentBrowserItem_File;
				if( __0x645 != null )
				{
					
					string __0x646 = null;
					{
						if( __0x1246 != null )
						{
							var __0x647 = __0x1246 as ContentBrowserItem_File;
							if( __0x647 != null && __0x647.IsDirectory )
								__0x646 = __0x647.FullPath;
						}
					}

					
					if( !string.IsNullOrEmpty( __0x646 ) && __0x645.FullPath != __0x646 )
					{
						bool __0x648 = ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control );

						bool __0x649 = false;

						if( !__0x649 )
						{
							if( !__0x1248 )
							{
								string __0x650;
								if( __0x648 )
									__0x650 = __0x951( "Copy files?" );
								else
									__0x650 = __0x951( "Move files?" );

								if( EditorMessageBox.ShowQuestion( __0x650, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
								{
									
									__0x999( new string[] { __0x645.FullPath }, !__0x648, __0x646 );
								}
							}

							
							return DragDropEffects.Link;
							
							
							
							
							
						}
					}
				}
			}

			return DragDropEffects.None;
		}

		private void __0x993( object __0x1250, EventArgs __0x1251 )
		{
			

			__0x829.Checked = !__0x829.Checked;

			if( Initialized )
				UpdateData();
		}

		
		[Browsable( false )]
		public bool ShowMembers
		{
			get
			{
				
				if( Mode == ModeEnum.Objects )
					return __0x829.Checked;
				else
					return true;
			}
		}

		private void __0x994( object __0x1252, EventArgs __0x1253 )
		{
			

			if( CanSelectObjectSettings )
				__0x957();
		}

		[Browsable( false )]
		public ContentBrowserFilteringMode FilteringMode
		{
			get { return __0x296; }
			set
			{
				if( __0x296 == value )
					return;
				__0x296 = value;

				if( __0x295 )
				{
					
					UpdateData();
				}
			}
		}

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		ItemTreeNode __0x995( TreeNodeAdv __0x1254 )
		{
			if( __0x1254 != null )
				return __0x1254.Tag as ItemTreeNode;
			return null;
		}

		TreeNodeAdv __0x996( Node __0x1255 )
		{
			if( __0x1255 == null )
				Log.Fatal( "ContentBrowser: FindTreeViewNode: findNode == null." );

			

			foreach( var __0x901 in __0x812.AllNodes )
			{
				var __0x651 = __0x901.Tag as Node;
				if( __0x651 == __0x1255 )
					return __0x901;
			}

			Log.Fatal( "ContentBrowser: FindTreeViewNode: Internal error: Node is not found." );
			return null;
		}

		
		
		

		
		

		
		
		
		
		
		

		
		

		void __0x997( bool __0x1256 )
		{
			var __0x652 = SelectedItems;

			
			if( __0x652.Length != 0 && __0x652.All( __0x1257 => __0x1257 is ContentBrowserItem_File ) )
			{
				List<string> __0x653 = new List<string>();
				foreach( var __0x902 in __0x652 )
				{
					var __0x654 = (ContentBrowserItem_File)__0x902;
					__0x653.Add( __0x654.FullPath );
				}

				
				IDataObject __0x655 = new DataObject( DataFormats.FileDrop, __0x653.ToArray() );
				MemoryStream __0x656 = new MemoryStream();
				__0x656.Write( new byte[] { (byte)( __0x1256 ? 2 : 5 ), 0, 0, 0 }, 0, 4 );
				__0x656.SetLength( 4 );
				__0x655.SetData( "Preferred DropEffect", __0x656 );
				Clipboard.SetDataObject( __0x655 );
				
				
				
			}

			
			if( __0x652.Length != 0 && __0x652.All( __0x1258 => __0x1258 is ContentBrowserItem_Component ) )
			{
				var __0x657 = new ObjectCutCopyPasteData( DocumentWindow, __0x1256, __0x969().ToArray() );
				ClipboardManager.CopyToClipboard( __0x657 );
			}
		}

		public bool CanCut()
		{
			
			var __0x658 = SelectedItems;
			if( __0x658.Length != 0 && __0x658.All( __0x1259 => __0x1259 is ContentBrowserItem_File ) )
				return true;

			
			if( __0x658.Length != 0 && __0x658.All( __0x1260 => __0x1260 is ContentBrowserItem_Component ) )
			{
				if( __0x969().All( __0x1261 => __0x1261.Parent != null && EditorAPI.GetDocumentByObject( __0x1261 ) != null ) )
					return true;
			}

			return false;
		}

		public void Cut()
		{
			if( CanCut() )
				__0x997( true );
		}

		public bool CanCopy()
		{
			
			var __0x659 = SelectedItems;
			if( __0x659.Length != 0 && __0x659.All( __0x1262 => __0x1262 is ContentBrowserItem_File ) )
				return true;

			
			if( __0x659.Length != 0 && __0x659.All( __0x1263 => __0x1263 is ContentBrowserItem_Component ) )
				return true;

			return false;
		}

		public void Copy()
		{
			if( CanCopy() )
				__0x997( false );
		}

		public bool CanPaste( out string[] filePaths, out bool cut, out string destinationFolder, out Component destinationParent )
		{
			filePaths = null;
			cut = false;
			destinationFolder = null;
			destinationParent = null;

			var __0x660 = SelectedItems;
			if( __0x660.Length == 1 )
			{
				
				var __0x661 = __0x660[ 0 ] as ContentBrowserItem_File;
				if( __0x661 != null )
				{
					if( !__0x661.IsDirectory )
						__0x661 = __0x661.Parent as ContentBrowserItem_File;
					if( __0x661 != null && __0x661.IsDirectory )
					{
						
						
#if BCL_CLIPBOARD
						IDataObject data = null;
						try
						{
							data = Clipboard.GetDataObject();
						}
						catch { }
						if( data != null )
						{
							MemoryStream stream = data.GetData( "Preferred DropEffect" ) as MemoryStream;
							if( stream != null )
							{
								int flag = stream.ReadByte();
								if( flag == 2 || flag == 5 )
								{
									filePaths = (string[])data.GetData( DataFormats.FileDrop );
									cut = flag == 2;
									destinationFolder = fileItem.FullPath;
									return true;
								}
							}
						}
#else
						var __0x662 = WindowsClipboard.GetFileDropPaths( EditorForm.Instance.Handle );
						if( __0x662.Count > 0 )
						{
							filePaths = __0x662.ToArray();
							cut = WindowsClipboard.IsCutPrefferdDropEffect( EditorForm.Instance.Handle );
							destinationFolder = __0x661.FullPath;
							return true;
						}
#endif
					}
				}

				
				var __0x663 = __0x660[ 0 ] as ContentBrowserItem_Component;
				if( __0x663 != null && !__0x280 && EditorAPI.GetDocumentByObject( __0x663.Component ) != null )
				{
					if( ClipboardManager.CheckAvailableInClipboard<ObjectCutCopyPasteData>() )
					{
						destinationParent = __0x663.Component;
						return true;
					}
				}
			}

			return false;
		}

		static void __0x998( string __0x1264, string __0x1265 )
		{
			string[] __0x664 = Directory.GetDirectories( __0x1264 );
			Directory.CreateDirectory( __0x1265 );
			foreach( string __0x903 in __0x664 )
				__0x998( __0x903, Path.Combine( __0x1265, Path.GetFileName( __0x903 ) ) );
			foreach( string __0x904 in Directory.GetFiles( __0x1264 ) )
				File.Copy( __0x904, Path.Combine( __0x1265, Path.GetFileName( __0x904 ) ) );
		}

		void __0x999( string[] __0x1266, bool __0x1267, string __0x1268 )
		{
			

			foreach( string __0x905 in __0x1266 )
			{
				try
				{
					string __0x665 = Path.Combine( __0x1268, Path.GetFileName( __0x905 ) );

					
					if( File.Exists( __0x905 ) )
					{
						if( string.Compare( __0x1268, Path.GetDirectoryName( __0x905 ), true ) == 0 )
						{
							for( int __0x666 = 1; ; __0x666++ )
							{
								string __0x667 = __0x1268 + Path.DirectorySeparatorChar;
								__0x667 += Path.GetFileNameWithoutExtension( __0x905 );
								if( __0x666 != 1 )
									__0x667 += __0x666.ToString();
								if( Path.GetExtension( __0x905 ) != null )
									__0x667 += Path.GetExtension( __0x905 );

								
								if( !File.Exists( __0x667 ) )
								{
									__0x665 = __0x667;
									break;
								}
							}
						}

						
						if( __0x1267 )
							File.Move( __0x905, __0x665 );
						else
							File.Copy( __0x905, __0x665 );

						continue;
					}

					
					if( Directory.Exists( __0x905 ) )
					{
						for( int __0x668 = 1; ; __0x668++ )
						{
							string __0x669 = Path.GetDirectoryName( __0x665 ) + Path.DirectorySeparatorChar;
							__0x669 += Path.GetFileName( __0x665 );
							if( __0x668 != 1 )
								__0x669 += __0x668.ToString();

							
							if( !Directory.Exists( __0x669 ) )
							{
								__0x665 = __0x669;
								break;
							}
						}

						
						__0x998( __0x905, __0x665 );
						if( __0x1267 )
							Directory.Delete( __0x905, true );

						continue;
					}
				}
				catch( Exception e )
				{
					Log.Error( e.Message );
					return;
				}
			}
		}

		public void Paste()
		{
			if( CanPaste( out string[] filePaths, out bool cut, out string destinationFolder, out Component destinationParent ) )
			{
				
				if( filePaths != null )
					__0x999( filePaths, cut, destinationFolder );

				
				if( destinationParent != null )
				{
					var __0x670 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
					if( __0x670 != null )
					{
						var __0x671 = new List<Component>();
						foreach( var __0x906 in __0x670.objects )
						{
							var __0x672 = __0x906 as Component;
							if( __0x672 != null )
								__0x671.Add( __0x672 );
						}

						

						var __0x673 = new List<Component>();

						foreach( var __0x907 in __0x671 )
						{
							var __0x674 = __0x907.Clone();
							destinationParent.AddComponent( __0x674 );

							__0x673.Add( __0x674 );
						}

						if( __0x670.cut )
						{
							
							if( __0x670.documentWindow.Document != DocumentWindow.Document )
							{
								
								{
									var __0x675 = new UndoActionComponentCreateDelete( __0x670.documentWindow.Document, __0x671, false );
									__0x670.documentWindow.Document.UndoSystem.CommitAction( __0x675 );
									__0x670.documentWindow.Document.Modified = true;
								}
								{
									var __0x676 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x673, true );
									DocumentWindow.Document.UndoSystem.CommitAction( __0x676 );
									DocumentWindow.Document.Modified = true;
								}
							}
							else
							{
								
								var __0x677 = new UndoMultiAction();
								__0x677.AddAction( new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x671, false ) );
								__0x677.AddAction( new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x673, true ) );
								DocumentWindow.Document.UndoSystem.CommitAction( __0x677 );
								DocumentWindow.Document.Modified = true;
							}
						}
						else
						{
							
							var __0x678 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x673, true );
							DocumentWindow.Document.UndoSystem.CommitAction( __0x678 );
							DocumentWindow.Document.Modified = true;
						}

						
						if( __0x673.Count == 1 )
						{
							var __0x679 = FindItemByContainedObject( destinationParent );
							if( __0x679 != null )
							{
								
								SelectItems( new Item[] { __0x679 }, true );

								var __0x680 = FindItemByContainedObject( __0x673[ 0 ] );
								if( __0x680 != null )
									SelectItems( new Item[] { __0x680 }, false, true );
							}
						}
					}
				}
			}
		}

		bool __0x1000()
		{
			var __0x681 = SelectedItems;
			if( __0x681.Length == 1 )
			{
				
				var __0x682 = __0x681[ 0 ] as ContentBrowserItem_File;
				if( __0x682 != null && __0x682.FullPath != VirtualFileSystem.Directories.Assets )
					return true;

				
				var __0x683 = __0x681[ 0 ] as ContentBrowserItem_Component;
				if( __0x683 != null && __0x275 != null && __0x275.Document != null && EditorAPI.GetDocumentByObject( __0x683.Component ) != null )
					return true;
			}

			return false;
		}

		void __0x1001()
		{
			if( __0x1000() )
			{
				

				var __0x684 = SelectedItems[ 0 ];

				
				var __0x685 = __0x684 as ContentBrowserItem_File;
				if( __0x685 != null )
				{
					var __0x686 = Path.GetDirectoryName( __0x685.FullPath );

					var __0x687 = new OKCancelTextBoxForm( __0x951( "Name" ) + ":", Path.GetFileName( __0x685.FullPath ), __0x951( "Rename" ),
						delegate ( string __0x1269, ref string __0x1270 )
						{
							if( string.IsNullOrEmpty( __0x1269 ) )
							{
								__0x1270 = __0x951( "The name is not specified." );
								return false;
							}

							if( __0x1269.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
							{
								__0x1270 = __0x951( "Invalid file path." );
								return false;
							}

							try
							{
								if( __0x1269.Contains( '\\' ) || __0x1269.Contains( '/' ) )
								{
									if( Path.GetFileName( __0x1269 ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
									{
										__0x1270 = __0x951( "Invalid file path." );
										return false;
									}
								}
							}
							catch { }

							var __0x688 = Path.Combine( __0x686, __0x1269 );

							if( __0x685.FullPath == __0x688 )
							{
								__0x1270 = __0x951( "Same name." );
								return false;
							}

							if( ( File.Exists( __0x688 ) || Directory.Exists( __0x688 ) ) && string.Compare( __0x685.FullPath, __0x688, true ) != 0 )
							{
								__0x1270 = __0x951( "A file or folder with same name already exists." );
								return false;
							}

							return true;
						},
						delegate ( string __0x1271, ref string __0x1272 )
						{
							var __0x689 = Path.Combine( __0x686, __0x1271 );

							try
							{
								if( string.Compare( __0x685.FullPath, __0x689, true ) == 0 )
								{
									
									if( __0x685.IsDirectory )
									{
										var __0x690 = __0x689 + "_";
										while( Directory.Exists( __0x690 ) )
											__0x690 += "_";
										Directory.Move( __0x685.FullPath, __0x690 );
										Directory.Move( __0x690, __0x689 );
									}
									else
									{
										var __0x691 = __0x689 + "_";
										while( File.Exists( __0x691 ) )
											__0x691 += "_";
										File.Move( __0x685.FullPath, __0x691 );
										File.Move( __0x691, __0x689 );
									}
								}
								else
								{
									
									if( __0x685.IsDirectory )
										Directory.Move( __0x685.FullPath, __0x689 );
									else
										File.Move( __0x685.FullPath, __0x689 );
								}
							}
							catch( Exception e )
							{
								__0x1272 = e.Message;
								return false;
							}

							return true;
						}
					);

					__0x687.ShowDialog();
				}

				
				var __0x692 = __0x684 as ContentBrowserItem_Component;
				if( __0x692 != null )
				{
					var __0x693 = __0x692.Component;
					EditorUtility.ShowRenameComponentDialog( __0x693 );
				}
			}
		}

		public string GetDirectoryPathOfSelectedFileOrParentDirectoryItem()
		{
			ContentBrowserItem_File __0x694 = null;

			

			var __0x695 = SelectedItems;
			if( __0x695.Length == 1 )
			{
				var __0x696 = __0x695[ 0 ];

				var __0x697 = __0x696 as ContentBrowserItem_File;
				if( __0x697 != null )
				{
					if( !__0x697.IsDirectory )
					{
						var __0x698 = __0x697.Parent as ContentBrowserItem_File;
						if( __0x698 != null && __0x698.IsDirectory )
							__0x694 = __0x698;
					}
					else
						__0x694 = __0x697;
				}
			}

			if( __0x694 != null && VirtualPathUtility.GetVirtualPathByReal( __0x694.FullPath, out string dummy ) )
				return __0x694.FullPath;
			return null;
		}

		bool __0x1002( out string __0x1273 )
		{
			__0x1273 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1273 );
		}

		void __0x1003()
		{
			if( __0x1002( out string directoryPath ) )
			{
				var __0x699 = new OKCancelTextBoxForm( __0x951( "Name" ) + ":", __0x951( "New Folder" ), __0x951( "New Folder" ),
					delegate ( string __0x1274, ref string __0x1275 )
					{
						if( string.IsNullOrEmpty( __0x1274 ) )
						{
							__0x1275 = __0x951( "The name is not specified." );
							return false;
						}

						if( __0x1274.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
						{
							__0x1275 = __0x951( "Invalid file path." );
							return false;
						}

						try
						{
							if( __0x1274.Contains( '\\' ) || __0x1274.Contains( '/' ) )
							{
								if( Path.GetFileName( __0x1274 ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
								{
									__0x1275 = __0x951( "Invalid file path." );
									return false;
								}
							}
						}
						catch { }

						var __0x700 = Path.Combine( directoryPath, __0x1274 );
						if( File.Exists( __0x700 ) || Directory.Exists( __0x700 ) )
						{
							__0x1275 = __0x951( "A file or folder with same name already exists." );
							return false;
						}

						return true;
					},
					delegate ( string __0x1276, ref string __0x1277 )
					{
						var __0x701 = Path.Combine( directoryPath, __0x1276 );

						try
						{
							Directory.CreateDirectory( __0x701 );
						}
						catch( Exception e )
						{
							__0x1277 = e.Message;
							return false;
						}

						

						return true;
					}
				);

				__0x699.ShowDialog();
			}
		}

		bool __0x1004( out string __0x1278 )
		{
			__0x1278 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1278 );
		}

		void __0x1005( Metadata.TypeInfo __0x1279 )
		{
			if( __0x1004( out string directoryPath ) )
			{
				var __0x702 = new NewObjectWindow.CreationDataClass();
				__0x702.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( directoryPath );
				
				__0x702.createdFromContentBrowser = this;

				__0x702.initLockType = __0x1279;

				EditorAPI.OpenNewObjectWindow( __0x702 );
			}
		}

		bool __0x1006( out string __0x1280 )
		{
			__0x1280 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1280 );
		}

		void __0x1007()
		{
			if( __0x1006( out string directoryPath ) )
				EditorAPI.OpenImportWindow( VirtualPathUtility.GetVirtualPathByReal( directoryPath ) );
		}

		private void __0x1008( TreeViewAdv __0x1281, TreeNodeAdv __0x1282, ref bool __0x1283 )
		{
			
			var __0x703 = __0x995( __0x1282 );
			if( __0x703 != null )
			{
				var __0x704 = __0x703.item;
				if( __0x704 != null )
				{
					var __0x705 = __0x704.ContainedObject as Component;
					if( __0x705 != null )
					{
						if( __0x705.ParentRoot != __0x276 && __0x705.ParentRoot?.HierarchyController == null && __0x704.Parent != null )
							__0x1283 = true;
					}
				}
			}
		}

		private void __0x1009( object __0x1284, Internal.Aga.Controls.Tree.NodeControls.DrawTextEventArgs __0x1285 )
		{
			var __0x706 = __0x995( __0x1285.Node );
			if( __0x706 != null )
			{
				var __0x707 = __0x706.item;
				if( __0x707 != null && __0x707.ShowDisabledInHierarchy )
					__0x1285.TextColor = Color.Gray;
			}
		}

		public void TreeViewHideVScroll()
		{
			
			__0x812.VScrollAlwaysHide = true;
		}

		public void NeedSelectFilesOrDirectories( string[] realPaths, bool expandNodes )
		{
			__0x301 = realPaths;
			__0x302 = expandNodes;
			__0x303 = DateTime.Now;
		}

		void __0x1010()
		{
			
			if( __0x301 != null )
			{
				if( ContentBrowserUtility.SelectFileItems( this, __0x301, __0x302 ) )
					__0x301 = null;

				
				
				
				
				
				
				
				
			}

			
			if( __0x301 != null )
			{
				var __0x708 = DateTime.Now - __0x303;
				if( __0x708.TotalSeconds > 3 )
					__0x301 = null;
			}
		}

		[Browsable( false )]
		public ContentBrowserItem_File DataItem
		{
			get { return __0x293; }
		}

		
		public bool CanOpenFile( out ContentBrowserItem_File fileItem )
		{
			if( SelectedItems.Length == 1 )
			{
				var __0x709 = SelectedItems[ 0 ] as ContentBrowserItem_File;
				if( __0x709 != null && !__0x709.IsDirectory )
				{
					fileItem = __0x709;
					return true;
				}
			}

			fileItem = null;
			return false;
		}

		private void __0x1011( object __0x1286, EventArgs __0x1287 )
		{
			if( !CanOpenFile( out var fileItem ) )
				return;

			bool __0x710 = false;
			__0x959( fileItem, ref __0x710 );
		}

		public object[] GetSelectedContainedObjects()
		{
			List<object> __0x711 = new List<object>();
			foreach( var __0x908 in SelectedItems )
			{
				var __0x712 = __0x908.ContainedObject;
				if( __0x712 != null )
					__0x711.Add( __0x712 );
			}
			return __0x711.ToArray();
		}

		

		void __0x1012()
		{
			if( __0x283 != PanelModeEnum.Tree )
			{
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				
				
				
				
				

				
				
				
				
				
				

				
				
				
				
				
				
				
				
				

				
				
				
				

				

				
				
				
				
				
				

				

				var __0x713 = new List<EngineListView.Item>();

				if( __0x812.SelectedNodes.Count <= 1 )
				{
					TreeNodeAdv __0x714;
					if( UseSelectedTreeNodeAsRootForList && __0x812.SelectedNode != null )
						__0x714 = __0x812.SelectedNode;
					else
						__0x714 = __0x1027();

					if( __0x714 == __0x1027() )
					{
						foreach( var __0x909 in __0x714.Children )
						{
							var __0x715 = GetItemByNode( __0x995( __0x909 ) );

							var __0x716 = new EngineListView.Item( __0x838 );
							__0x716.Tag = __0x715;
							__0x716.Text = __0x715.Text;
							__0x716.Description = __0x715.GetDescription();
							__0x716.ShowTooltip = !string.IsNullOrEmpty( __0x716.Description );

							__0x713.Add( __0x716 );
						}
					}
					else
					{
						if( __0x1036().Count == 1 )
						{
							var __0x717 = __0x1036()[ 0 ];

							foreach( var __0x910 in __0x717.GetChildrenFilter( true ) )
							{
								var __0x718 = new EngineListView.Item( __0x838 );
								__0x718.Tag = __0x910;
								__0x718.Text = __0x910.Text;
								__0x718.Description = __0x910.GetDescription();
								__0x718.ShowTooltip = !string.IsNullOrEmpty( __0x718.Description );

								__0x713.Add( __0x718 );
							}
						}
					}
				}

				
				{
					var __0x719 = new List<EngineListView.Item>();
					foreach( var __0x911 in __0x838.Items )
						__0x719.Add( __0x911 );

					bool __0x720 = false;
					if( __0x719.Count == __0x713.Count )
					{
						for( int __0x721 = 0; __0x721 < __0x719.Count; __0x721++ )
							if( __0x719[ __0x721 ].Tag != __0x713[ __0x721 ].Tag )
								__0x720 = true;
					}
					else
						__0x720 = true;

					if( !__0x720 )
						return;
				}

				
				__0x838.SelectedItem = null;

				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				


				
				
				

				

				
				
				__0x838.SetItems( __0x713 );
				

				foreach( var __0x912 in __0x838.Items )
				{
					var __0x722 = __0x1013( __0x912 );
					if( __0x722 != null )
						__0x912.ShowDisabled = __0x722.ShowDisabled;
				}

				UpdateListImages();

				
				
				
				if( !UseSelectedTreeNodeAsRootForList )
				{
					var __0x723 = __0x995( __0x812.SelectedNode );
					__0x838.SelectedItem = GetListItemByItem( __0x723?.item );
				}
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				

			}
		}

		Item __0x1013( EngineListView.Item __0x1288 )
		{
			if( __0x1288 != null )
				return __0x1288.Tag as Item;
			return null;
		}

		private void __0x1014( object __0x1289, MouseEventArgs __0x1290 )
		{
			if( __0x1290.Button == MouseButtons.Right )
			{
				var __0x724 = __0x1013( __0x838.GetItemAt( __0x1290.Location ) );
				if( __0x724 != null )
					__0x963( __0x724, __0x838, __0x1290.Location );

				
				
				
				

				
				
			}
		}

		private void __0x1015( object __0x1291, MouseEventArgs __0x1292 )
		{
			if( __0x1292.Button == MouseButtons.Right )
			{
				var __0x725 = __0x1013( __0x838.GetItemAt( __0x1292.Location ) );
				if( __0x725 == null )
				{
					if( SelectedItems.Length == 1 )
						__0x725 = SelectedItems[ 0 ];

					__0x963( __0x725, __0x838, __0x1292.Location );
				}
			}
		}

		public EngineListView.Item GetListItemByItem( Item item )
		{
			if( item == null )
				return null;
			foreach( var __0x913 in __0x838.Items )
				if( __0x913.Tag == item )
					return __0x913;
			return null;
		}

		private void __0x1016( EngineListView __0x1293 )
		{
			
			
			
			
			

			bool __0x726 = !__0x299 && !__0x300;

			var __0x727 = new List<Item>();
			if( __0x838.SelectedItems.Count != 0 )
			{
				foreach( var __0x914 in __0x838.SelectedItems )
					__0x727.Add( (Item)__0x914.Tag );
			}
			if( __0x727.Count == 0 )
				__0x727.AddRange( SelectedItems );

			bool __0x728 = false;
			ItemAfterSelect?.Invoke( this, __0x727, __0x726, ref __0x728 );
		}

		void __0x1017( Item __0x1294 )
		{
			try
			{
				
				

				
				var __0x729 = __0x1294.Parent;
				if( __0x729 != null )
				{
					SelectItems( new Item[] { __0x729 }, true, false );
				}
				else
				{
					
				}

				bool __0x730 = false;
				if( __0x1294.GetChildrenFilter( true ).Count == 0 || __0x1294.chooseByDoubleClickAndReturnKey )
				{
					
					var __0x731 = GetListItemByItem( __0x1294 );
					if( __0x731 != null )
						__0x838.SelectedItem = __0x731;

					__0x960( __0x1294, ref __0x730 );
					
				}

				if( !__0x730 )
				{
					if( __0x1294.GetChildrenFilter( true ).Count != 0 )
					{
						SelectItems( new Item[] { __0x1294 }, true, true );

						
						if( __0x838.Items.Count > 0 )
							__0x838.SelectedItem = __0x838.Items[ 0 ];
					}
				}
			}
			catch { }
		}

		private void __0x1018( object __0x1295, MouseEventArgs __0x1296 )
		{
			if( __0x1296.Button == MouseButtons.Left )
			{
				var __0x732 = __0x1013( __0x838.GetItemAt( __0x1296.Location ) );
				if( __0x732 != null )
					__0x1017( __0x732 );
			}
		}

		private void __0x1019( object __0x1297, KeyEventArgs __0x1298 )
		{
			
			{
				bool __0x733 = false;
				KeyDownOverride?.Invoke( this, __0x1297, __0x1298, ref __0x733 );
				if( __0x733 )
					return;
			}

			if( __0x1298.KeyCode == Keys.Return )
			{
				var __0x734 = __0x1013( __0x838.SelectedItem );
				if( __0x734 != null )
					__0x1017( __0x734 );
			}

			if( __0x1298.KeyCode == Keys.Back )
			{
				var __0x735 = __0x995( __0x812.SelectedNode );
				if( __0x735 != null )
				{
					Item[] __0x736;
					if( __0x735.item.Parent != null )
						__0x736 = new Item[] { __0x735.item.Parent };
					else
						__0x736 = new Item[ 0 ];

					SelectItems( __0x736, false, true );
					__0x838.SelectedItem = GetListItemByItem( __0x735.item );
				}
			}

			
			{
				var __0x737 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x737 != null )
				{
					foreach( var __0x915 in __0x737 )
					{
						Keys __0x738 = __0x1298.KeyCode | ModifierKeys;
						if( __0x915 == __0x738 )
						{
							__0x1001();
							break;
						}
					}
				}

				
				
			}

			
			if( ModifierKeys != Keys.None || !__0x939( __0x1298.KeyCode ) )
			{
				if( EditorAPI.ProcessShortcuts( __0x1298.KeyCode, true ) )
				{
					__0x1298.Handled = true;
					return;
				}
			}
		}

		ListModeEnum __0x1020()
		{
			var __0x739 = __0x282.ListMode;

			if( __0x739 == ListModeEnum.Auto )
			{
				if( __0x1036().Any( __0x1299 => __0x1299 is ContentBrowserItem_File ) )
					__0x739 = ListModeEnum.Tiles;
				else
					__0x739 = ListModeEnum.List;
			}

			return __0x739;
		}

		void __0x1021( bool __0x1300 )
		{
			var __0x740 = __0x1020();

			int __0x741 = (int)( (float)( __0x740 == ListModeEnum.Tiles ? __0x282.TileImageSize : __0x282.ListImageSize ) * EditorAPI.DPIScale );
			var __0x742 = (int)( (float)__0x282.ListColumnWidth * EditorAPI.DPIScale );

			if( __0x284 != __0x740 || __0x285 != __0x741 || __0x286 != __0x742 || __0x1300 )
			{
				__0x284 = __0x740;
				__0x285 = __0x741;
				__0x286 = __0x742;

				if( __0x311 != null )
				{
					__0x838.Mode = __0x311;
					
					
					
					
					
					
					
					
				}
				else
				{
					switch( __0x284 )
					{
					case ListModeEnum.List:
						__0x838.Mode = new ContentBrowserListModeList( this );
						break;
					case ListModeEnum.Tiles:
						__0x838.Mode = new ContentBrowserListModeTiles( this );
						break;
					}
				}

				__0x838.Mode?.Init();

				UpdateListImages();
			}
		}

		void __0x1022( EngineListView.Item __0x1301 )
		{
			var __0x743 = (Item)__0x1301.Tag;

			Image __0x744 = null;

			
			var __0x745 = __0x743 as ContentBrowserItem_File;
			if( __0x745 != null && !__0x745.IsDirectory )
				__0x744 = PreviewImagesManager.GetImageForResource( __0x745.FullPath, false );

			if( __0x744 == null )
				__0x744 = __0x743.image;
			if( __0x744 == null )
				__0x744 = __0x298.GetImage( __0x743.imageKey, __0x285, __0x743.ShowDisabled );
			if( __0x744 == null )
				__0x744 = ContentBrowserImageHelperBasicImages.Helper.GetImage( __0x743.imageKey, __0x285, __0x743.ShowDisabled );

			__0x1301.Image = __0x744;
		}

		public void UpdateListImages()
		{
			foreach( var __0x916 in __0x838.Items )
				__0x1022( __0x916 );

			__0x838.UpdateScrollBars();
			__0x838.Invalidate();
		}

		private void __0x1023( object __0x1302, MouseEventArgs __0x1303 )
		{
			var __0x746 = "";

			var __0x747 = __0x995( __0x812.GetNodeAt( __0x812.PointToClient( MousePosition ) ) );
			if( __0x747 != null )
				__0x746 = __0x747.item.GetDescription();

			if( __0x305 != __0x746 )
			{
				__0x839.SetToolTip( __0x812, __0x746 );

				
				
				
				__0x839.Hide( __0x812 );

				__0x305 = __0x746;
			}
		}

		
		
		
		
		

		bool __0x748 = true;
		bool __0x749;

		void __0x1024()
		{
			
			
			

			if( __0x748 == __0x282.Breadcrumb )
				return;

			__0x748 = __0x282.Breadcrumb;

			OnBreadcrumbVisibilityChanged( __0x748 );
		}

		protected virtual void OnBreadcrumbVisibilityChanged( bool visible )
		{
			var __0x750 = kryptonSplitContainer1.Panel2;
			if( visible )
			{
				if( !__0x750.Controls.Contains( __0x840 ) )
				{
					__0x750.Controls.Add( __0x840 );
					__0x750.Controls.Add( __0x843 );
				}

				UpdateBreadcrumb();
			}
			else
			{
				if( __0x750.Controls.Contains( __0x840 ) )
				{
					__0x750.Controls.Remove( __0x840 );
					__0x750.Controls.Remove( __0x843 );
				}
			}
		}

		private void __0x1025( object __0x1304, EventArgs __0x1305 )
		{
			__0x1030( __0x312.SelectedItem );
		}

		private void __0x1026( object __0x1306, EventArgs __0x1307 )
		{
			if( __0x312.SelectedItem.Parent != null )
				__0x312.SelectedItem = __0x312.SelectedItem.Parent;
		}

		public void UpdateBreadcrumb()
		{
			if( __0x283 != PanelModeEnum.Tree )
			{
				
				__0x1028();

				__0x1032( __0x812.SelectedNode );
			}
		}

		
		bool UseFirstTreeNodeAsRoot
		{
			get { return __0x274 == ModeEnum.Objects; }
		}

		internal bool UseSelectedTreeNodeAsRootForList { get; set; } = true;

		TreeNodeAdv __0x1027()
		{
			if( UseFirstTreeNodeAsRoot && __0x812.Root.Children.Count != 0 )
				return __0x812.Root.Children.First();
			return __0x812.Root;
		}

		void __0x1028()
		{
			try
			{
				__0x749 = true;

				if( UseFirstTreeNodeAsRoot )
					__0x312.RootItem.ShortText = __0x1027().ToString();
				else
					__0x312.RootItem.ShortText = EditorLocalization.Translate( "General", "Root" );

				__0x312.RootItem.Items.Clear();
				__0x1029( __0x1027(), __0x312.RootItem );
			}
			finally
			{
				__0x749 = false;
			}
		}

		void __0x1029( TreeNodeAdv __0x1308, KryptonBreadCrumbItem __0x1309 )
		{
			foreach( var __0x917 in __0x1308.Children )
			{
				if( __0x1034( __0x917 ) )
				{
					var __0x751 = new KryptonBreadCrumbItem( __0x917.ToString() );
					__0x1309.Items.Add( __0x751 );
					__0x1029( __0x917, __0x751 );
				}
			}
		}

		void __0x1030( KryptonBreadCrumbItem __0x1310 )
		{
			if( __0x749 )
				return;

			try
			{
				__0x749 = true;
				var __0x752 = __0x1031( __0x1310 );
				__0x752?.Expand();
				__0x812.SelectedNode = __0x752;
			}
			finally
			{
				__0x749 = false;
			}
		}

		TreeNodeAdv __0x1031( KryptonBreadCrumbItem __0x1311 )
		{
			if( __0x1311 == null )
				return null;

			Stack<string> __0x753 = new Stack<string>();
			var __0x754 = __0x1311;
			while( __0x754.Parent != null )
			{
				__0x753.Push( __0x754.ShortText );
				__0x754 = __0x754.Parent;
			}

			TreeNodeAdv __0x755 = __0x1027();
			while( __0x753.Count > 0 )
			{
				var __0x756 = __0x753.Pop();
				__0x755 = __0x755.Children.First( __0x1312 => __0x1312.ToString() == __0x756 );
			}
			return __0x755;
		}

		void __0x1032( TreeNodeAdv __0x1313 )
		{
			if( __0x749 )
				return;

			try
			{
				__0x749 = true;
				__0x312.SelectedItem = __0x1033( __0x1313 );
			}
			finally
			{
				__0x749 = false;
			}
		}

		KryptonBreadCrumbItem __0x1033( TreeNodeAdv __0x1314 )
		{
			Stack<string> __0x757 = new Stack<string>();
			if( __0x1314 != null )
			{
				var __0x758 = __0x1027();
				while( __0x1314 != __0x758 )
				{
					if( __0x1034( __0x1314 ) )
						__0x757.Push( __0x1314.ToString() );
					__0x1314 = __0x1314.Parent;
				}
			}
			var __0x759 = __0x312.RootItem;
			while( __0x757.Count > 0 )
				__0x759 = __0x759.Items[ __0x757.Pop() ];
			return __0x759;
		}

		bool __0x1034( TreeNodeAdv __0x1315 )
		{
			

			if( __0x1315.Children.Count > 0 ) 
				return true;

			var __0x760 = __0x995( __0x1315 );
			if( __0x760 == null )
				return false;
			
			return __0x760.item is ContentBrowserItem_File file && file.IsDirectory;
		}

		[Browsable( false )]
		public List<Item> RootItems
		{
			get { return __0x290; }
		}

		[DefaultValue( false )]
		public bool MultiSelect
		{
			get { return __0x307; }
			set
			{
				if( __0x307 == value )
					return;
				__0x307 = value;
				__0x1035();
			}
		}

		void __0x1035()
		{
			if( __0x812 != null )
				__0x812.SelectionMode = __0x307 ? TreeSelectionMode.Multi : TreeSelectionMode.Single;
			if( __0x838 != null )
				__0x838.MultiSelect = __0x307;
		}

		List<Item> __0x1036()
		{
			var __0x761 = new List<Item>();

			
			
			foreach( var __0x918 in __0x812.SelectedNodes )
			{
				var __0x762 = __0x995( __0x918 )?.item;
				if( __0x762 != null )
					__0x761.Add( __0x762 );
			}
			

			return __0x761;
		}

		void __0x1037()
		{
			if( !__0x304 )
			{
				if( __0x283 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x283 == PanelModeEnum.TwoPanelsSplitVertically )
				{
					var __0x763 = kryptonSplitContainer1.Orientation == Orientation.Horizontal ? kryptonSplitContainer1.Height : kryptonSplitContainer1.Width;
					if( __0x763 != 0 )
					{
						double __0x764 = __0x282.SplitterPosition * __0x763;
						kryptonSplitContainer1.SplitterDistance = (int)__0x764;
					}
				}
			}
		}

		private void __0x1038( object __0x1316, SplitterCancelEventArgs __0x1317 )
		{
			__0x304 = true;
		}

		private void __0x1039( object __0x1318, SplitterEventArgs __0x1319 )
		{
			__0x304 = false;

			
			if( __0x283 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x283 == PanelModeEnum.TwoPanelsSplitVertically )
			{
				var __0x765 = kryptonSplitContainer1.Orientation == Orientation.Horizontal ? kryptonSplitContainer1.Height : kryptonSplitContainer1.Width;
				if( __0x765 != 0 )
					__0x282.SplitterPosition = (double)kryptonSplitContainer1.SplitterDistance / __0x765;
			}
		}

		void __0x1040()
		{
			if( __0x309 )
				return;

			__0x812.BeginUpdate();
			__0x309 = true;
		}

		void __0x1041()
		{
			if( __0x309 )
			{
				__0x309 = false;
				__0x812.EndUpdate();
			}
		}

		public void RemoveTreeViewIconsColumn()
		{
			__0x812.NodeControls.RemoveAt( 0 );
			__0x812.NodeControls[ 0 ].LeftMargin = 0;
		}

		[Browsable( false )]
		public TreeViewAdv TreeView
		{
			get { return __0x812; }
		}

		private void __0x1042( object __0x1320, EventArgs __0x1321 )
		{
			var __0x766 = new ContentBrowserSearchForm();
			__0x766.Browser = this;

			EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
			{
				__0x766.ShowDialog();
			} );
		}

		[Browsable( false )]
		public EngineListView.ModeClass ListViewModeOverride
		{
			get { return __0x311; }
			set { __0x311 = value; }
		}

		
		
		
		
		
		

		public Item FindItemByTag( object tag )
		{
			foreach( var __0x919 in GetAllItems() )
				if( __0x919.Tag == tag )
					return __0x919;
			return null;
		}

		private void __0x1043( object __0x1322, EventArgs __0x1323 )
		{
			if( ReadOnlyHierarchy )
				return;

			var __0x767 = new List<KryptonContextMenuItemBase>();

			{
				var __0x768 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.FilteringMode", "All" ), null,
				   delegate ( object __0x1324, EventArgs __0x1325 )
				   {
					   FilteringMode = null;
				   } );
				__0x768.Checked = __0x296 == null;
				__0x767.Add( __0x768 );
			}

			foreach( var __0x920 in __0x272 )
			{
				var __0x769 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.FilteringMode", __0x920.Name ), null,
				   delegate ( object __0x1326, EventArgs __0x1327 )
				   {
					   FilteringMode = (ContentBrowserFilteringMode)( (KryptonContextMenuItem)__0x1326 ).Tag;
				   } );
				__0x769.Checked = __0x296 == __0x920;
				__0x769.Tag = __0x920;
				__0x767.Add( __0x769 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.None, __0x767 );

			ShowContextMenuEvent?.Invoke( this, null, __0x767 );

			EditorContextMenuWinForms.Show( __0x767, this, PointToClient( Cursor.Position ) );
		}

		public void SetEnabled( bool value )
		{
			if( Enabled == value )
				return;

			Enabled = value;
			__0x838.Enabled = value;
			TreeViewHideVScroll();

			
			if( !Enabled )
				__0x838.Visible = false;
		}

		private void __0x1044( object __0x1328, EngineScrollBarEventArgs __0x1329 )
		{
			__0x812.VScrollBar.Value = (int)__0x850.Value;
		}

		private void __0x1045( object __0x1330, EngineScrollBarEventArgs __0x1331 )
		{
			__0x812.HScrollBar.Value = (int)__0x851.Value;
		}

		void __0x1046()
		{
			if( __0x812.HScrollBar.Size != new Size( __0x812.HScrollBar.Size.Width, 0 ) )
				__0x812.HScrollBar.Size = new Size( __0x812.HScrollBar.Size.Width, 0 );
			if( __0x812.HScrollBar.TabStop )
				__0x812.HScrollBar.TabStop = false;

			if( __0x812.VScrollBar.Size != new Size( 0, __0x812.VScrollBar.Size.Height ) )
				__0x812.VScrollBar.Size = new Size( 0, __0x812.VScrollBar.Size.Height );
			if( __0x812.VScrollBar.TabStop )
				__0x812.VScrollBar.TabStop = false;

			bool __0x770 = __0x850.MouseUpDownStatus;
			if( !__0x770 )
			{
				var __0x771 = (int)( (double)__0x812.Height / (double)__0x812.RowHeightScaled ) - 1;
				__0x850.ItemSize = __0x812.RowHeightScaled;
				__0x850.Maximum = Math.Max( __0x812.VScrollBar.Maximum - __0x771, 0 );

				__0x850.SmallChange = __0x812.VScrollBar.SmallChange;
				__0x850.LargeChange = __0x812.VScrollBar.LargeChange;
				__0x850.Value = __0x812.VScrollBar.Value;
			}

			bool __0x772 = __0x851.MouseUpDownStatus;
			if( !__0x772 )
			{
				__0x851.Maximum = Math.Max( __0x812.HScrollBar.Maximum - __0x812.ClientSize.Width, 0 );
				__0x851.SmallChange = __0x812.HScrollBar.SmallChange;
				__0x851.LargeChange = __0x812.HScrollBar.LargeChange;
				__0x851.Value = __0x812.HScrollBar.Value;
			}

			__0x852.Panel2Collapsed = !__0x812.HScrollBar.Visible;
			__0x853.Panel2Collapsed = !__0x812.VScrollBar.Visible;
			__0x854.Panel2Collapsed = !__0x812.VScrollBar.Visible;
		}

		void __0x1047()
		{
			__0x1046();
		}

		private void __0x1048( object __0x1332, MouseEventArgs __0x1333 )
		{
			var __0x773 = "";

			var __0x774 = __0x838.PointToClient( MousePosition );
			var __0x775 = __0x838.GetItemAt( __0x774 );
			if( __0x775 != null && __0x775.ShowTooltip )
				__0x773 = __0x775.Description;

			if( __0x306 != __0x773 )
			{
				__0x855.SetToolTip( this.__0x838, __0x773 );

				
				
				
				__0x855.Hide( __0x838 );

				__0x306 = __0x773;
			}
		}

		public void AddImageKey( string key, Image imageSmall, Image imageBig )
		{
			if( imageSmall == null && imageBig == null )
				return;

			if( imageSmall == null )
			{
				AddImageKey( key, imageBig );
				return;
			}

			if( imageBig == null )
			{
				AddImageKey( key, imageSmall );
				return;
			}

			__0x298.AddImage( key, imageSmall, imageBig );
		}

		public void AddImageKey( string key, Image image )
		{
			__0x298.AddImage( key, null, image );
		}

		
		
		

		public EngineListView GetListView()
		{
			return __0x838;
		}

		private void __0x1049( EngineListView __0x1334, EngineListView.Item[] __0x1335, ref bool __0x1336 )
		{
			__0x1336 = __0x1335.Length == 1;
		}

		public List<Item> GetItemsByListView()
		{
			var __0x776 = new List<Item>();

			for( int __0x777 = 0; __0x777 < __0x838.Items.Count; __0x777++ )
			{
				
				
				var __0x778 = __0x838.Items[ __0x777 ];
				var __0x779 = __0x778.Tag as Item;
				if( __0x779 != null )
					__0x776.Add( __0x779 );
				
			}

			return __0x776;
		}

		
		public List<Item> GetVisibleItemsByListView()
		{
			var __0x780 = new List<Item>();

			for( int __0x781 = 0; __0x781 < __0x838.Items.Count; __0x781++ )
			{
				if( __0x838.GetItemRectangle( __0x781, out _ ) )
				{
					var __0x782 = __0x838.Items[ __0x781 ];
					var __0x783 = __0x782.Tag as Item;
					if( __0x783 != null )
						__0x780.Add( __0x783 );
				}
			}

			return __0x780;
		}

		bool __0x1050( bool __0x1337 )
		{
			foreach( var __0x921 in SelectedItems )
			{
				var __0x784 = __0x921 as ContentBrowserItem_Type;
				if( __0x784 != null && MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x784.Type ) )
				{
					
					

					var __0x785 = EditorFavorites.Contains( __0x784.Type.Name );
					if( __0x1337 && !__0x785 || !__0x1337 && __0x785 )
						return true;
				}

				var __0x786 = __0x921 as ContentBrowserItem_File;
				if( __0x786 != null )
				{
					var __0x787 = EditorFavorites.Contains( VirtualPathUtility.GetVirtualPathByReal( __0x786.FullPath ) );
					if( __0x1337 && !__0x787 || !__0x1337 && __0x787 )
						return true;
				}
			}

			return false;
		}

		void __0x1051()
		{
			foreach( var __0x922 in SelectedItems )
			{
				var __0x788 = __0x922 as ContentBrowserItem_Type;
				if( __0x788 != null )
					EditorFavorites.Add( __0x788.Type.Name );

				var __0x789 = __0x922 as ContentBrowserItem_File;
				if( __0x789 != null )
					EditorFavorites.Add( VirtualPathUtility.GetVirtualPathByReal( __0x789.FullPath ) );
			}
		}

		void __0x1052()
		{
			foreach( var __0x923 in SelectedItems )
			{
				var __0x790 = __0x923 as ContentBrowserItem_Type;
				if( __0x790 != null )
					EditorFavorites.Remove( __0x790.Type.Name );

				var __0x791 = __0x923 as ContentBrowserItem_File;
				if( __0x791 != null )
					EditorFavorites.Remove( VirtualPathUtility.GetVirtualPathByReal( __0x791.FullPath ) );
			}
		}

		public void UpdateAllTypesItem( ContentBrowserItem_Virtual specifiedAllTypesItem = null, bool callPerformChildrenChanged = true )
		{
			var __0x792 = specifiedAllTypesItem;
			if( __0x792 == null )
				__0x792 = __0x290.FirstOrDefault( __0x1338 => __0x1338.Tag as string == "All types" ) as ContentBrowserItem_Virtual;
			if( __0x792 == null )
				return;

			__0x792.children.Clear();

			
			
			var __0x793 = new List<Metadata.NetTypeInfo>( 16384 );
			var __0x794 = new ESet<string>();

			foreach( var __0x924 in MetadataManager.GetNetTypes() )
			{
				var __0x795 = __0x924.Type;

				if( !__0x795.IsNested && !__0x948( __0x795 ) )
				{
					bool __0x796 = false;
					if( Mode == ModeEnum.SetReference && __0x795.IsEnum )
						__0x796 = true;

					if( !__0x796 && Mode == ModeEnum.SetReference && __0x277.newObjectWindow )
					{
						if( !ContentBrowserUtility.ContainsComponentClasses( __0x795 ) )
							__0x796 = true;
						
						
					}
					if( !__0x796 && Mode == ModeEnum.SetReference && __0x277.selectTypeWindow )
					{
						if( !ContentBrowserUtility.ContainsType( __0x277.selectTypeDemandedType.GetNetType(), __0x795 ) )
							__0x796 = true;
						
						
					}

					if( !__0x796 )
					{
						__0x793.Add( __0x924 );

						
						if( !string.IsNullOrEmpty( __0x924.Namespace ) )
							__0x794.AddWithCheckAlreadyContained( __0x924.Namespace );
					}
				}
			}

			
			var __0x797 = new List<string>( __0x794 );
			CollectionUtility.MergeSort( __0x797, delegate ( string __0x1339, string __0x1340 )
			{
				return string.Compare( __0x1339, __0x1340 );
			} );

			
			CollectionUtility.MergeSort( __0x793, delegate ( Metadata.NetTypeInfo __0x1341, Metadata.NetTypeInfo __0x1342 )
			{
				return string.Compare( __0x1341.ToString(), __0x1342.ToString() );
			} );

			foreach( string __0x925 in __0x797 )
			{
				
				var __0x798 = new ContentBrowserItem_Virtual( this, __0x792, __0x925 );
				__0x798.imageKey = "Namespace";
				__0x792.children.Add( __0x798 );

				foreach( var __0x926 in __0x793 )
				{
					var __0x799 = __0x926.Type;

					if( __0x926.Namespace == __0x925 )
					{
						
						var __0x800 = MetadataManager.GetNetTypeName( __0x799, true, false );
						var __0x801 = new ContentBrowserItem_Type( this, __0x798, __0x926, __0x800 );
						__0x801.imageKey = GetTypeImageKey( __0x926 );
						__0x798.children.Add( __0x801 );

						
						__0x949( __0x801 );
					}
				}
			}

			
			
			
			
			
			
			
			
			

			

			
			
			if( Mode == ModeEnum.SetReference )
				SetReference_RemoveExcessTypeItems( __0x792 );

			
			if( Mode == ModeEnum.Resources && FilteringMode != null )
			{
				Resources_RemoveExcessClassesItemsByFilteringMode( __0x792 );

				
				
				var __0x802 = __0x792.GetChildrenFilter( true );
				if( __0x802.Count == 1 )
				{
					__0x792.expandAtStartup = true;
					if( __0x802[ 0 ].GetChildrenFilter( true ).Count <= 10 )
						__0x802[ 0 ].expandAtStartup = true;
				}
			}

			
			if( Mode == ModeEnum.SetReference && __0x277.selectTypeWindow )
			{
				var __0x803 = __0x792.GetChildrenFilter( true );
				if( __0x803.Count < 20 )
				{
					__0x792.expandAtStartup = true;
					if( __0x803.Count == 1 )
					{
						if( __0x803[ 0 ].GetChildrenFilter( true ).Count <= 10 )
							__0x803[ 0 ].expandAtStartup = true;
					}
				}
			}

			if( callPerformChildrenChanged )
				__0x792.PerformChildrenChanged();
		}

		public void UpdateDataIfResourcesWindowTypesChanged()
		{
			var __0x804 = new List<Type>();

			foreach( var __0x927 in ResourcesWindowItems.Items )
			{
				
				if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x927 ) )
					continue;

				__0x804.Add( __0x927.Type );
			}

			if( !Enumerable.SequenceEqual( __0x291, __0x804 ) )
				UpdateData();
		}

	}
}

namespace NeoAxis.Editor
{
    partial class ContentBrowser
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x805 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x805 != null))
            {
                __0x805.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x1053()
        {
			this.__0x805 = new System.ComponentModel.Container();
			this.__0x806 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x825 = new System.Windows.Forms.ToolStripButton();
			this.__0x829 = new System.Windows.Forms.ToolStripButton();
			this.__0x832 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x824 = new System.Windows.Forms.ToolStripButton();
			this.__0x835 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x836 = new System.Windows.Forms.ToolStripButton();
			this.__0x823 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x816 = new System.Windows.Forms.ToolStripButton();
			this.__0x817 = new System.Windows.Forms.ToolStripButton();
			this.__0x818 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x833 = new System.Windows.Forms.ToolStripButton();
			this.__0x834 = new System.Windows.Forms.ToolStripButton();
			this.__0x809 = new System.Windows.Forms.ToolStripButton();
			this.__0x810 = new System.Windows.Forms.ToolStripButton();
			this.__0x819 = new System.Windows.Forms.ToolStripButton();
			this.__0x820 = new System.Windows.Forms.ToolStripButton();
			this.__0x821 = new System.Windows.Forms.ToolStripButton();
			this.__0x822 = new System.Windows.Forms.ToolStripButton();
			this.__0x826 = new System.Windows.Forms.ToolStripButton();
			this.__0x827 = new System.Windows.Forms.ToolStripButton();
			this.__0x828 = new System.Windows.Forms.ToolStripButton();
			this.__0x849 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x848 = new System.Windows.Forms.ToolStripButton();
			this.__0x808 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x811 = new System.Windows.Forms.ToolStripTextBox();
			this.__0x807 = new System.Windows.Forms.ToolStripMenuItem();
			this.kryptonSplitContainer1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x837 = new NeoAxis.Editor.BordersContainer();
			this.__0x852 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x853 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x812 = new Internal.Aga.Controls.Tree.TreeViewAdv();
			this.__0x830 = new Internal.Aga.Controls.Tree.NodeControls.NodeStateIcon();
			this.__0x831 = new Internal.Aga.Controls.Tree.NodeControls.NodeTextBox();
			this.__0x850 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x854 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x851 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x814 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x815 = new System.Windows.Forms.ToolStripTextBox();
			this.__0x838 = new NeoAxis.Editor.EngineListView();
			this.__0x844 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x840 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x841 = new System.Windows.Forms.ToolStripButton();
			this.__0x842 = new NeoAxis.Editor.ToolStripBreadCrumbHost();
			this.__0x843 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x846 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x845 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x847 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x813 = new System.Windows.Forms.Timer(this.__0x805);
			this.__0x839 = new NeoAxis.Editor.EngineToolTip(this.__0x805);
			this.__0x855 = new NeoAxis.Editor.EngineToolTip(this.__0x805);
			this.__0x806.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			this.__0x837.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x852)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x852.Panel1)).BeginInit();
			this.__0x852.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x852.Panel2)).BeginInit();
			this.__0x852.Panel2.SuspendLayout();
			this.__0x852.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x853)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x853.Panel1)).BeginInit();
			this.__0x853.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x853.Panel2)).BeginInit();
			this.__0x853.Panel2.SuspendLayout();
			this.__0x853.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x854)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x854.Panel1)).BeginInit();
			this.__0x854.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x854.Panel2)).BeginInit();
			this.__0x854.SuspendLayout();
			this.__0x814.SuspendLayout();
			this.__0x840.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x806.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x806.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x806.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x825,
            this.__0x829,
            this.__0x832,
            this.__0x824,
            this.__0x835,
            this.__0x836,
            this.__0x823,
            this.__0x816,
            this.__0x817,
            this.__0x818,
            this.__0x833,
            this.__0x834,
            this.__0x809,
            this.__0x810,
            this.__0x819,
            this.__0x820,
            this.__0x821,
            this.__0x822,
            this.__0x826,
            this.__0x827,
            this.__0x828,
            this.__0x849,
            this.__0x848,
            this.__0x808,
            this.__0x811});
			this.__0x806.Location = new System.Drawing.Point(0, 0);
			this.__0x806.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x806.Name = "toolStripForTreeView";
			this.__0x806.ShowItemToolTips = false;
			this.__0x806.AutoSize = false;
			this.__0x806.Size = new System.Drawing.Size(511, 26);
			this.__0x806.TabIndex = 3;
			this.__0x806.Text = "toolStrip1";
			
			
			
			this.__0x825.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x825.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x825.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x825.Name = "toolStripButtonOptions";
			this.__0x825.AutoSize = false;
			this.__0x825.Size = new System.Drawing.Size(23, 22);
			this.__0x825.Text = "Options";
			this.__0x825.Click += new System.EventHandler(this.__0x967);
			
			
			
			this.__0x829.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x829.Image = global::NeoAxis.Properties.Resources.Members_16_2;
			this.__0x829.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x829.Name = "toolStripButtonShowMembers";
			this.__0x829.AutoSize = false;
			this.__0x829.Size = new System.Drawing.Size(23, 22);
			this.__0x829.Text = "Show Members";
			this.__0x829.Click += new System.EventHandler(this.__0x993);
			
			
			
			this.__0x832.Name = "toolStripSeparatorFilteringMode";
			this.__0x832.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x824.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x824.Image = global::NeoAxis.Properties.Resources.Selection_16_2;
			this.__0x824.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x824.Name = "toolStripDropDownButtonFilteringMode";
			this.__0x824.AutoSize = false;
			this.__0x824.Size = new System.Drawing.Size(30, 22);
			this.__0x824.Text = "Filtering Mode";
			
			
			
			this.__0x835.Name = "toolStripSeparatorOpen";
			this.__0x835.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x836.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x836.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.__0x836.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x836.Name = "toolStripButtonOpen";
			this.__0x836.AutoSize = false;
			this.__0x836.Size = new System.Drawing.Size(23, 22);
			this.__0x836.Text = "Open";
			this.__0x836.Click += new System.EventHandler(this.__0x1011);
			
			
			
			this.__0x823.Name = "toolStripSeparatorEditSettings";
			this.__0x823.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x816.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x816.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.__0x816.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x816.Name = "toolStripButtonEditor";
			this.__0x816.AutoSize = false;
			this.__0x816.Size = new System.Drawing.Size(23, 22);
			this.__0x816.Text = "Editor";
			this.__0x816.Click += new System.EventHandler(this.__0x971);
			
			
			
			this.__0x817.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x817.Image = global::NeoAxis.Properties.Resources.Maximize_16;
			this.__0x817.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x817.Name = "toolStripButtonSettings";
			this.__0x817.AutoSize = false;
			this.__0x817.Size = new System.Drawing.Size(23, 22);
			this.__0x817.Text = "Settings";
			this.__0x817.Click += new System.EventHandler(this.__0x972);
			
			
			
			this.__0x818.Name = "toolStripSeparatorButtonsForEditing";
			this.__0x818.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x833.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x833.Image = global::NeoAxis.Properties.Resources.NewFolder_16;
			this.__0x833.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x833.Name = "toolStripButtonNewFolder";
			this.__0x833.AutoSize = false;
			this.__0x833.Size = new System.Drawing.Size(23, 22);
			this.__0x833.Text = "New Folder";
			this.__0x833.Click += new System.EventHandler(this.__0x973);
			
			
			
			this.__0x834.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x834.Image = global::NeoAxis.Properties.Resources.New_16;
			this.__0x834.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x834.Name = "toolStripButtonNewResource";
			this.__0x834.AutoSize = false;
			this.__0x834.Size = new System.Drawing.Size(23, 22);
			this.__0x834.Text = "New Resource";
			this.__0x834.Click += new System.EventHandler(this.__0x974);
			
			
			
			this.__0x809.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x809.Image = global::NeoAxis.Properties.Resources.New_16;
			this.__0x809.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x809.Name = "toolStripButtonNewObject";
			this.__0x809.AutoSize = false;
			this.__0x809.Size = new System.Drawing.Size(23, 22);
			this.__0x809.Text = "New Object";
			this.__0x809.Click += new System.EventHandler(this.__0x975);
			
			
			
			this.__0x810.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x810.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x810.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x810.Name = "toolStripButtonDelete";
			this.__0x810.AutoSize = false;
			this.__0x810.Size = new System.Drawing.Size(23, 22);
			this.__0x810.Text = "Delete";
			this.__0x810.Click += new System.EventHandler(this.__0x976);
			
			
			
			this.__0x819.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x819.Enabled = false;
			this.__0x819.Image = global::NeoAxis.Properties.Resources.Rename_16x;
			this.__0x819.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x819.Name = "toolStripButtonRename";
			this.__0x819.AutoSize = false;
			this.__0x819.Size = new System.Drawing.Size(23, 22);
			this.__0x819.Text = "Rename";
			this.__0x819.Click += new System.EventHandler(this.__0x977);
			
			
			
			this.__0x820.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x820.Image = global::NeoAxis.Properties.Resources.Copy_16;
			this.__0x820.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x820.Name = "toolStripButtonClone";
			this.__0x820.AutoSize = false;
			this.__0x820.Size = new System.Drawing.Size(23, 22);
			this.__0x820.Text = "Duplicate";
			this.__0x820.Click += new System.EventHandler(this.__0x978);
			
			
			
			this.__0x821.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x821.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.__0x821.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x821.Name = "toolStripButtonMoveUp";
			this.__0x821.AutoSize = false;
			this.__0x821.Size = new System.Drawing.Size(23, 22);
			this.__0x821.Text = "Move Up";
			this.__0x821.Click += new System.EventHandler(this.__0x979);
			
			
			
			this.__0x822.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x822.Image = global::NeoAxis.Properties.Resources.MoveDown_16;
			this.__0x822.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x822.Name = "toolStripButtonMoveDown";
			this.__0x822.AutoSize = false;
			this.__0x822.Size = new System.Drawing.Size(23, 22);
			this.__0x822.Text = "Move Down";
			this.__0x822.Click += new System.EventHandler(this.__0x980);
			
			
			
			this.__0x826.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x826.Image = global::NeoAxis.Properties.Resources.Cut_16;
			this.__0x826.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x826.Name = "toolStripButtonCut";
			this.__0x826.AutoSize = false;
			this.__0x826.Size = new System.Drawing.Size(23, 22);
			this.__0x826.Text = "Cut";
			this.__0x826.Click += new System.EventHandler(this.__0x981);
			
			
			
			this.__0x827.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x827.Image = global::NeoAxis.Properties.Resources.Copy_16;
			this.__0x827.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x827.Name = "toolStripButtonCopy";
			this.__0x827.AutoSize = false;
			this.__0x827.Size = new System.Drawing.Size(23, 22);
			this.__0x827.Text = "Copy";
			this.__0x827.Click += new System.EventHandler(this.__0x982);
			
			
			
			this.__0x828.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x828.Image = global::NeoAxis.Properties.Resources.Paste_16;
			this.__0x828.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x828.Name = "toolStripButtonPaste";
			this.__0x828.AutoSize = false;
			this.__0x828.Size = new System.Drawing.Size(23, 22);
			this.__0x828.Text = "Paste";
			this.__0x828.Click += new System.EventHandler(this.__0x983);
			
			
			
			this.__0x849.Name = "toolStripSeparatorSearch";
			this.__0x849.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x848.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x848.Image = global::NeoAxis.Properties.Resources.Focus_16;
			this.__0x848.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x848.Name = "toolStripButtonSearch";
			this.__0x848.AutoSize = false;
			this.__0x848.Size = new System.Drawing.Size(23, 22);
			this.__0x848.Text = "Search";
			this.__0x848.Click += new System.EventHandler(this.__0x1042);
			
			
			
			this.__0x808.Name = "toolStripSeparatorSearchBar";
			this.__0x808.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x811.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x811.Enabled = false;
			this.__0x811.Name = "toolStripTextBoxSearch";
			this.__0x811.Size = new System.Drawing.Size(6, 25);
			this.__0x811.Text = "Search";
			
			
			
			this.__0x807.Name = "showFilesInTreeToolStripMenuItem";
			this.__0x807.Size = new System.Drawing.Size(197, 26);
			this.__0x807.Text = "Show files in tree";
			
			
			
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 25);
			this.kryptonSplitContainer1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			this.kryptonSplitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.__0x837);
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.__0x814);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add( this.__0x838 );
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x844);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x840);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x843);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x846);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x845);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x847);
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(511, 599);
			this.kryptonSplitContainer1.SplitterDistance = 214;
			this.kryptonSplitContainer1.SplitterPercent = 0.35726210350584309D;
			this.kryptonSplitContainer1.TabIndex = 0;
			this.kryptonSplitContainer1.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.__0x1039);
			this.kryptonSplitContainer1.SplitterMoving += new System.Windows.Forms.SplitterCancelEventHandler(this.__0x1038);
			
			
			
			this.__0x837.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(213)))), ((int)(((byte)(213)))), ((int)(((byte)(213)))));
			this.__0x837.Controls.Add(this.__0x852);
			this.__0x837.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x837.Location = new System.Drawing.Point(0, 0);
			this.__0x837.Margin = new System.Windows.Forms.Padding(4);
			this.__0x837.Name = "treeBordersContainer";
			this.__0x837.Size = new System.Drawing.Size(511, 214);
			this.__0x837.TabIndex = 2;
			
			
			
			this.__0x852.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x852.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x852.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x852.IsSplitterFixed = true;
			this.__0x852.Location = new System.Drawing.Point(1, 1);
			this.__0x852.Name = "kryptonSplitContainerTree";
			this.__0x852.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.__0x852.Panel1.Controls.Add(this.__0x853);
			
			
			
			this.__0x852.Panel2.Controls.Add(this.__0x854);
			this.__0x852.Panel2MinSize = 16;
			this.__0x852.Size = new System.Drawing.Size(509, 212);
			this.__0x852.SplitterDistance = 193;
			this.__0x852.SplitterPercent = 0.910377358490566D;
			this.__0x852.SplitterWidth = 0;
			this.__0x852.TabIndex = 2;
			
			
			
			this.__0x853.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x853.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x853.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x853.IsSplitterFixed = true;
			this.__0x853.Location = new System.Drawing.Point(0, 0);
			this.__0x853.Name = "kryptonSplitContainerTreeSub1";
			
			
			
			this.__0x853.Panel1.Controls.Add(this.__0x812);
			
			
			
			this.__0x853.Panel2.Controls.Add(this.__0x850);
			this.__0x853.Panel2MinSize = 16;
			this.__0x853.Size = new System.Drawing.Size(509, 193);
			this.__0x853.SplitterDistance = 489;
			this.__0x853.SplitterPercent = 0.96070726915520632D;
			this.__0x853.SplitterWidth = 1;
			this.__0x853.TabIndex = 0;
			
			
			
			this.__0x812.AllowDrop = true;
			this.__0x812.BackColor = System.Drawing.SystemColors.Window;
			this.__0x812.ColumnHeaderHeight = 0;
			this.__0x812.DefaultToolTipProvider = null;
			this.__0x812.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x812.DragDropMarkColor = System.Drawing.Color.Black;
			this.__0x812.Font = new System.Drawing.Font("Tahoma", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x812.FullRowSelect = true;
			this.__0x812.FullRowSelectActiveColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(120)))), ((int)(((byte)(215)))));
			this.__0x812.FullRowSelectInactiveColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x812.HighlightDropPosition = false;
			this.__0x812.LineColor = System.Drawing.SystemColors.ControlDark;
			this.__0x812.Location = new System.Drawing.Point(0, 0);
			this.__0x812.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x812.Model = null;
			this.__0x812.Name = "treeView";
			this.__0x812.NodeControls.Add(this.__0x830);
			this.__0x812.NodeControls.Add(this.__0x831);
			this.__0x812.NodeFilter = null;
			this.__0x812.RowHeight = 17;
			this.__0x812.SelectedNode = null;
			this.__0x812.ShowLines = false;
			this.__0x812.Size = new System.Drawing.Size(489, 193);
			this.__0x812.TabIndex = 0;
			this.__0x812.VScrollAlwaysHide = false;
			this.__0x812.ItemDrag += new System.Windows.Forms.ItemDragEventHandler(this.__0x990);
			this.__0x812.NodeMouseDoubleClick += new System.EventHandler<Internal.Aga.Controls.Tree.TreeNodeAdvMouseEventArgs>(this.__0x938);
			this.__0x812.SelectionChanged += new System.EventHandler(this.__0x936);
			this.__0x812.Collapsing += new System.EventHandler<Internal.Aga.Controls.Tree.TreeViewAdvEventArgs>(this.__0x966);
			this.__0x812.Expanding += new System.EventHandler<Internal.Aga.Controls.Tree.TreeViewAdvEventArgs>(this.__0x965);
			this.__0x812.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x989);
			this.__0x812.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x988);
			this.__0x812.Enter += new System.EventHandler(this.__0x994);
			this.__0x812.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x940);
			this.__0x812.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x943);
			this.__0x812.MouseDown += new System.Windows.Forms.MouseEventHandler(this.__0x937);
			this.__0x812.MouseMove += new System.Windows.Forms.MouseEventHandler(this.__0x1023);
			this.__0x812.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x944);
			
			
			
			this.__0x830.DataPropertyName = "Image";
			this.__0x830.LeftMargin = 1;
			this.__0x830.ParentColumn = null;
			this.__0x830.ScaleMode = Internal.Aga.Controls.Tree.ImageScaleMode.AlwaysScale;
			
			
			
			this.__0x831.DataPropertyName = "Text";
			this.__0x831.Font = new System.Drawing.Font("Segoe UI", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x831.IncrementalSearchEnabled = true;
			this.__0x831.LeftMargin = 3;
			this.__0x831.ParentColumn = null;
			this.__0x831.DrawText += new System.EventHandler<Internal.Aga.Controls.Tree.NodeControls.DrawTextEventArgs>(this.__0x1009);
			
			
			
			this.__0x850.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x850.Location = new System.Drawing.Point(0, 0);
			this.__0x850.Name = "engineScrollBarTreeVertical";
			this.__0x850.Size = new System.Drawing.Size(19, 193);
			this.__0x850.TabIndex = 0;
			
			
			
			this.__0x854.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x854.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x854.IsSplitterFixed = true;
			this.__0x854.Location = new System.Drawing.Point(0, 0);
			this.__0x854.Name = "kryptonSplitContainerTreeSub2";
			
			
			
			this.__0x854.Panel1.Controls.Add(this.__0x851);
			this.__0x854.Panel2MinSize = 16;
			this.__0x854.Size = new System.Drawing.Size(509, 19);
			this.__0x854.SplitterDistance = 489;
			this.__0x854.SplitterPercent = 0.96070726915520632D;
			this.__0x854.SplitterWidth = 1;
			this.__0x854.TabIndex = 0;
			
			
			
			this.__0x851.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x851.Location = new System.Drawing.Point(0, 0);
			this.__0x851.MinimumSize = new System.Drawing.Size(102, 0);
			this.__0x851.Name = "engineScrollBarTreeHorizontal";
			this.__0x851.Orientation = System.Windows.Forms.Orientation.Horizontal;
			this.__0x851.Size = new System.Drawing.Size(489, 19);
			this.__0x851.TabIndex = 1;
			
			
			
			this.__0x814.Font = new System.Drawing.Font("Segoe UI", 9F);
			this.__0x814.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x814.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x814.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x815});
			this.__0x814.Location = new System.Drawing.Point(0, 0);
			this.__0x814.Name = "toolStripSearch";
			this.__0x814.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
			this.__0x814.ShowItemToolTips = false;
			this.__0x814.Size = new System.Drawing.Size(511, 25);
			this.__0x814.TabIndex = 1;
			this.__0x814.Text = "toolStrip2";
			this.__0x814.Visible = false;
			
			
			
			this.__0x815.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x815.Name = "toolStripTextBoxSearch_notUsed";
			this.__0x815.Size = new System.Drawing.Size(200, 25);
			this.__0x815.Text = "Search";
			
			
			
			this.__0x838.Location = new System.Drawing.Point(-1, -1);
			this.__0x838.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x838.Margin = new System.Windows.Forms.Padding(4);
			this.__0x838.Name = "listView";
			this.__0x838.Size = new System.Drawing.Size(453, 288);
			this.__0x838.TabIndex = 2;
			this.__0x838.SelectedItemsChanged += new NeoAxis.Editor.EngineListView.SelectedItemsChangedDelegate(this.__0x1016);
			this.__0x838.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x1019);
			this.__0x838.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x1014);
			this.__0x838.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.__0x1018);
			this.__0x838.MouseMove += new System.Windows.Forms.MouseEventHandler(this.__0x1048);
			this.__0x838.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x1015);
			this.__0x838.Font = new System.Drawing.Font( "Tahoma", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ( (byte)( 204 ) ) );
			
			
			
			this.__0x844.Dock = System.Windows.Forms.DockStyle.Top;
			this.__0x844.Location = new System.Drawing.Point(1, 31);
			this.__0x844.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x844.Name = "kryptonBorderEdgeT2";
			this.__0x844.Size = new System.Drawing.Size(509, 1);
			this.__0x844.Text = "kryptonBorderEdge2";
			
			
			
			this.__0x840.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x840.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x840.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x841,
            this.__0x842});
			this.__0x840.Location = new System.Drawing.Point(1, 1);
			this.__0x840.Name = "toolStripForListView";
			this.__0x840.ShowItemToolTips = false;
			this.__0x840.AutoSize = false;
			this.__0x840.Size = new System.Drawing.Size(509, 27);
			this.__0x840.Stretch = true;
			this.__0x840.TabIndex = 3;
			
			
			
			this.__0x841.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x841.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.__0x841.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x841.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.__0x841.Name = "toolStripButtonUp";
			this.__0x841.AutoSize = false;
			this.__0x841.Size = new System.Drawing.Size(23, 22);
			this.__0x841.Click += new System.EventHandler(this.__0x1026);
			
			
			
			this.__0x842.Font = new System.Drawing.Font("Microsoft Sans Serif", 4F, System.Drawing.FontStyle.Italic);
			this.__0x842.Margin = new System.Windows.Forms.Padding( 0, 0, 0, 0 );
			this.__0x842.Padding = new System.Windows.Forms.Padding( 0, 0, 0, 0 );
			this.__0x842.Name = "toolStripBreadCrumbHost";
			
			this.__0x842.Size = new System.Drawing.Size(133, 27);
			
			
			
			this.__0x843.Dock = System.Windows.Forms.DockStyle.Top;
			this.__0x843.Location = new System.Drawing.Point(1, 0);
			this.__0x843.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x843.Name = "kryptonBorderEdgeT";
			this.__0x843.Size = new System.Drawing.Size(509, 1);
			this.__0x843.Text = "kryptonBorderEdge1";
			
			
			
			this.__0x846.Dock = System.Windows.Forms.DockStyle.Left;
			this.__0x846.Location = new System.Drawing.Point(0, 0);
			this.__0x846.Margin = new System.Windows.Forms.Padding(4);
			this.__0x846.Name = "kryptonBorderEdgeL";
			this.__0x846.Orientation = System.Windows.Forms.Orientation.Vertical;
			this.__0x846.Size = new System.Drawing.Size(1, 379);
			this.__0x846.Text = "kryptonBorderEdge1";
			
			
			
			this.__0x845.Dock = System.Windows.Forms.DockStyle.Right;
			this.__0x845.Location = new System.Drawing.Point(510, 0);
			this.__0x845.Margin = new System.Windows.Forms.Padding(4);
			this.__0x845.Name = "kryptonBorderEdgeR";
			this.__0x845.Orientation = System.Windows.Forms.Orientation.Vertical;
			this.__0x845.Size = new System.Drawing.Size(1, 379);
			this.__0x845.Text = "kryptonBorderEdge3";
			
			
			
			this.__0x847.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.__0x847.Location = new System.Drawing.Point(0, 379);
			this.__0x847.Margin = new System.Windows.Forms.Padding(4);
			this.__0x847.Name = "kryptonBorderEdgeB";
			this.__0x847.Size = new System.Drawing.Size(511, 1);
			this.__0x847.Text = "kryptonBorderEdge2";
			
			
			
			this.__0x813.Interval = 50;
			this.__0x813.Tick += new System.EventHandler(this.__0x946);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.kryptonSplitContainer1);
			this.Controls.Add(this.__0x806);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "ContentBrowser";
			this.Size = new System.Drawing.Size(511, 624);
			this.Load += new System.EventHandler(this.__0x928);
			this.Resize += new System.EventHandler(this.__0x942);
			this.__0x806.ResumeLayout(false);
			this.__0x806.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			this.__0x837.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x852.Panel1)).EndInit();
			this.__0x852.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x852.Panel2)).EndInit();
			this.__0x852.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x852)).EndInit();
			this.__0x852.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x853.Panel1)).EndInit();
			this.__0x853.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x853.Panel2)).EndInit();
			this.__0x853.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x853)).EndInit();
			this.__0x853.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x854.Panel1)).EndInit();
			this.__0x854.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x854.Panel2)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x854)).EndInit();
			this.__0x854.ResumeLayout(false);
			this.__0x814.ResumeLayout(false);
			this.__0x814.PerformLayout();
			this.__0x840.ResumeLayout(false);
			this.__0x840.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

        #endregion
        private NeoAxis.Editor.EngineToolStrip __0x806;
		private System.Windows.Forms.ToolStripMenuItem __0x807;
		private System.Windows.Forms.ToolStripSeparator __0x808;
		private System.Windows.Forms.ToolStripButton __0x809;
		private System.Windows.Forms.ToolStripButton __0x810;
		private System.Windows.Forms.ToolStripTextBox __0x811;
		private Internal.Aga.Controls.Tree.TreeViewAdv __0x812;
		private System.Windows.Forms.Timer __0x813;
		private NeoAxis.Editor.EngineToolStrip __0x814;
		private System.Windows.Forms.ToolStripTextBox __0x815;
		private System.Windows.Forms.ToolStripButton __0x816;
		private System.Windows.Forms.ToolStripButton __0x817;
		private System.Windows.Forms.ToolStripSeparator __0x818;
		private System.Windows.Forms.ToolStripButton __0x819;
		private System.Windows.Forms.ToolStripButton __0x820;
		private System.Windows.Forms.ToolStripButton __0x821;
		private System.Windows.Forms.ToolStripButton __0x822;
		private System.Windows.Forms.ToolStripSeparator __0x823;
		private System.Windows.Forms.ToolStripButton __0x824;
		private System.Windows.Forms.ToolStripButton __0x825;
		private System.Windows.Forms.ToolStripButton __0x826;
		private System.Windows.Forms.ToolStripButton __0x827;
		private System.Windows.Forms.ToolStripButton __0x828;
		private System.Windows.Forms.ToolStripButton __0x829;
		private Internal.Aga.Controls.Tree.NodeControls.NodeStateIcon __0x830;
		private Internal.Aga.Controls.Tree.NodeControls.NodeTextBox __0x831;
		private System.Windows.Forms.ToolStripSeparator __0x832;
		private System.Windows.Forms.ToolStripButton __0x833;
		private System.Windows.Forms.ToolStripButton __0x834;
		private System.Windows.Forms.ToolStripSeparator __0x835;
		private System.Windows.Forms.ToolStripButton __0x836;
		private BordersContainer __0x837;
		private NeoAxis.Editor.EngineListView __0x838;
		private NeoAxis.Editor.EngineToolTip __0x839;
		private NeoAxis.Editor.EngineToolStrip __0x840;
		private System.Windows.Forms.ToolStripButton __0x841;
		private ToolStripBreadCrumbHost __0x842;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x843;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x844;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x845;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x846;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x847;
		private System.Windows.Forms.ToolStripButton __0x848;
		private System.Windows.Forms.ToolStripSeparator __0x849;
		private EngineScrollBar __0x850;
		private EngineScrollBar __0x851;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x852;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x853;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x854;
		private NeoAxis.Editor.EngineToolTip __0x855;
	}
}





namespace NeoAxis.Editor
{
	public abstract class ContentBrowserFilteringMode
	{
		public abstract string Name
		{
			get;
		}

		public abstract bool AddGroupGeneral { get; }
		public abstract bool AddGroupsBaseTypesAddonsProject { get; }
		public abstract bool AddGroupsFavorites { get; }
		public abstract bool AddSolution { get; }
		public abstract bool AddGroupAllTypes { get; }
		public abstract bool AddFiles { get; }

		public virtual string[] FileSearchPatterns { get { return null; } }
		public virtual bool HideDirectoriesWithoutItems { get { return false; } }

		public virtual bool ExpandAllFileItemsAtStartup { get { return false; } }

		public virtual bool AddItem( ContentBrowser.Item item ) { return true; }
	}
}





namespace NeoAxis.Editor
{
	class ContentBrowserImageHelper
	{
		static Image __0x1345;
		static Image __0x1346;

		ImageCollection __0x1347 = new ImageCollection();
		ImageCollection __0x1348 = new ImageCollection();

		Dictionary<string, Image> __0x1349 = new Dictionary<string, Image>();
		Dictionary<string, Image> __0x1350 = new Dictionary<string, Image>();

		Dictionary<(string, int), Image> __0x1351 = new Dictionary<(string, int), Image>();

		

		static ContentBrowserImageHelper()
		{
			__0x1345 = Properties.Resources.Default_16;
			__0x1346 = Properties.Resources.Default_32;
		}

		public void Dispose()
		{
			
		}

		public void AddImage( string key, System.Drawing.Image smallImage, System.Drawing.Image largeImage )
		{
			if( !__0x1347.ContainsKey( key ) )
				__0x1347.Add( key, smallImage ?? __0x1345 );

			if( !__0x1348.ContainsKey( key ) )
				__0x1348.Add( key, largeImage ?? __0x1346 );
		}

		
		public Image GetImageScaledForTreeView( string key, bool disabled )
		{
			if( string.IsNullOrEmpty( key ) )
				key = "Default";

			
			if( !__0x1349.ContainsKey( key ) )
			{
				if( !__0x1347.ContainsKey( key ) )
					return null;

				var __0x1352 = EditorAPI.GetImageForDispalyScale( __0x1347[ key ], __0x1348[ key ] );
				__0x1349[ key ] = __0x1352;
			}

			var __0x1353 = __0x1349[ key ];

			if( disabled )
			{
				if( !__0x1350.TryGetValue( key, out var imageDisabled ) )
				{
					try
					{
						imageDisabled = ToolStripRenderer.CreateDisabledImage( __0x1353 );
					}
					catch { }

					if( imageDisabled != null )
						__0x1350[ key ] = imageDisabled;
				}

				__0x1353 = imageDisabled;
			}

			return __0x1353;
		}

		public Image GetImage( string key, int requestedSize, bool disabled )
		{
			if( string.IsNullOrEmpty( key ) )
				key = "Default";

			Image __0x1354 = null;
			if( requestedSize <= 16 )
				__0x1354 = __0x1347[ key ];
			if( __0x1354 == null )
				__0x1354 = __0x1348[ key ];
			if( __0x1354 == null )
				__0x1354 = __0x1347[ key ];

			if( disabled && __0x1354 != null )
			{
				var __0x1355 = (key, requestedSize);

				if( !__0x1351.TryGetValue( __0x1355, out var imageDisabled ) )
				{
					try
					{
						imageDisabled = ToolStripRenderer.CreateDisabledImage( __0x1354 );
					}
					catch { }

					if( imageDisabled != null )
						__0x1351[ __0x1355 ] = imageDisabled;
				}

				__0x1354 = imageDisabled;
			}

			return __0x1354;
		}
	}

	

	static class ContentBrowserImageHelperBasicImages
	{
		static ContentBrowserImageHelper __0x1356 = new ContentBrowserImageHelper();

		public static ContentBrowserImageHelper Helper
		{
			get { return __0x1356; }
		}

		static ContentBrowserImageHelperBasicImages()
		{
			Helper.AddImage( "Default", Properties.Resources.Default_16, Properties.Resources.Default_32 );
			Helper.AddImage( "Namespace", Properties.Resources.Namespace_16, null );
			Helper.AddImage( "Class", Properties.Resources.Class, Properties.Resources.Class_32 );
			Helper.AddImage( "Struct", Properties.Resources.Struct, null );
			Helper.AddImage( "Assembly", Properties.Resources.Assembly, null );

			
			
			
			Helper.AddImage( "Resource", Properties.Resources.Resource_16, Properties.Resources.Resource_32 );

			Helper.AddImage( "AssemblyList", Properties.Resources.AssemblyList, null );
			Helper.AddImage( "Folder", Properties.Resources.Folder_16, Properties.Resources.Folder_32 );
			Helper.AddImage( "Delegate", Properties.Resources.Delegate, null );
			Helper.AddImage( "Enum", Properties.Resources.Enum, null );
			Helper.AddImage( "Property", Properties.Resources.Property, null );
			Helper.AddImage( "GoUpper", Properties.Resources.GoUpper_16, null );
			Helper.AddImage( "Method", Properties.Resources.Method, null );
			Helper.AddImage( "Event", Properties.Resources.Event_16, null );
			Helper.AddImage( "StaticClass", Properties.Resources.StaticClass, null );
			Helper.AddImage( "StaticEvent", Properties.Resources.StaticEvent, null );
			Helper.AddImage( "StaticMethod", Properties.Resources.StaticMethod, null );
			Helper.AddImage( "StaticProperty", Properties.Resources.StaticProperty, null );
			Helper.AddImage( "Constructor", Properties.Resources.Constructor, null );
			Helper.AddImage( "Operator", Properties.Resources.Operator, null );

			Helper.AddImage( "CSharp", Properties.Resources.CSharp_16, Properties.Resources.CSharp_32 );
			Helper.AddImage( "UI", Properties.Resources.Window_16, Properties.Resources.Window_32 );
			Helper.AddImage( "Image", Properties.Resources.Image_16, Properties.Resources.Image_32 );
			Helper.AddImage( "Sound", Properties.Resources.Sound_16, Properties.Resources.Sound_32 );
			Helper.AddImage( "Mesh", Properties.Resources.Mesh_16, Properties.Resources.Mesh_32 );
			Helper.AddImage( "Material", Properties.Resources.Material_16, Properties.Resources.Material_32 );
			Helper.AddImage( "Scene", Properties.Resources.Scene_16, Properties.Resources.Scene_32 );
			Helper.AddImage( "Product", Properties.Resources.Package_16, Properties.Resources.Package_32 );
			Helper.AddImage( "Store Product", Properties.Resources.Package_16, Properties.Resources.Package_32 );

			Helper.AddImage( "Cog", Properties.Resources.Cog_16, Properties.Resources.Cog_32 );

			Helper.AddImage( "CSharpProject", Properties.Resources.CSharpProject_16, Properties.Resources.CSharpProject_32 );
			Helper.AddImage( "Attach", Properties.Resources.Attach_16, Properties.Resources.Attach_32 );
			Helper.AddImage( "New", Properties.Resources.New_16, Properties.Resources.New_32 );

			
		}

	}
}





namespace NeoAxis.Editor
{
	public class ContentBrowserItem_File : ContentBrowser.Item
	{
		string __0x1357;
		string __0x1358;
		bool __0x1359;

		EDictionary<string, ContentBrowser.Item> __0x1360 = new EDictionary<string, ContentBrowser.Item>();
		EDictionary<Component, ContentBrowser.Item> __0x1361 = new EDictionary<Component, ContentBrowser.Item>();
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1362 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		

		

		public ContentBrowserItem_File( ContentBrowser owner, ContentBrowser.Item parent, string fullPath, bool isDirectory )
			: base( owner, parent )
		{
			this.__0x1357 = fullPath;

			

			__0x1358 = Path.GetFileName( fullPath );
			if( string.IsNullOrEmpty( __0x1358 ) )
				__0x1358 = fullPath;
			this.__0x1359 = isDirectory;

			
			

			__0x1548( true );
		}

		public override void Dispose()
		{
			foreach( var __0x1492 in __0x1360.Values )
				__0x1492.Dispose();
			__0x1360.Clear();

			foreach( var __0x1493 in __0x1361.Values )
				__0x1493.Dispose();
			__0x1361.Clear();

			foreach( var __0x1494 in __0x1362.Values )
				__0x1494.Dispose();
			__0x1362.Clear();
		}

		public string FullPath
		{
			get { return __0x1357; }
		}

		public override string Text
		{
			get { return __0x1358; }
		}

		public void SetText( string text )
		{
			this.__0x1358 = text;
		}

		public bool IsDirectory
		{
			get { return __0x1359; }
		}

		public static string GetFileChildrenKey( string path )
		{
			
			return VirtualPathUtility.NormalizePath( path );
			
		}

		void __0x1544( out ESet<string> __0x1556 )
		{
			__0x1556 = new ESet<string>();

			__0x1556.Add( ".Directory.settings".ToLower() );

			

			string __0x1363 = Path.Combine( __0x1357, ".Directory.settings" );
			if( File.Exists( __0x1363 ) )
			{
				var __0x1364 = TextBlockUtility.LoadFromRealFile( __0x1363 );
				if( __0x1364 != null )
				{
					foreach( var __0x1495 in __0x1364.Children )
					{
						if( __0x1495.Name == "Item" )
						{
							string __0x1365 = __0x1495.Data;
							bool __0x1366 = bool.Parse( __0x1495.GetAttribute( "Hide", "False" ) );

							if( __0x1366 )
								__0x1556.Add( __0x1365.ToLower() );
						}
					}
				}
			}
		}

		

		public EDictionary<string, ContentBrowser.Item> FileChildren
		{
			get { return __0x1360; }
		}

		public EDictionary<Component, ContentBrowser.Item> ComponentChildren
		{
			get { return __0x1361; }
		}

		void __0x1545( List<(string, ContentBrowserItem_File)> __0x1557 )
		{
			CollectionUtility.MergeSort( __0x1557, delegate ( (string, ContentBrowserItem_File) __0x1558, (string, ContentBrowserItem_File) __0x1559 )
			{
				var __0x1367 = __0x1558.Item2;
				var __0x1368 = __0x1559.Item2;

				var __0x1369 = Path.GetFileName( __0x1367.FullPath );
				var __0x1370 = Path.GetFileName( __0x1368.FullPath );
				var __0x1371 = string.Compare( __0x1369, __0x1370 );
				if( !Owner.Options.SortFilesByAscending )
					__0x1371 *= -1;

				return __0x1371;
			} );
		}

		void __0x1546( List<(string, ContentBrowserItem_File)> __0x1560 )
		{
			CollectionUtility.MergeSort( __0x1560, delegate ( (string, ContentBrowserItem_File) __0x1561, (string, ContentBrowserItem_File) __0x1562 )
			{
				var __0x1372 = __0x1561.Item2;
				var __0x1373 = __0x1562.Item2;

				switch( Owner.Options.SortFilesBy )
				{
				case ContentBrowser.SortByItems.Date:
					{
						DateTime GetDate( ContentBrowserItem_File __0x1563 )
						{
							try
							{
								return File.GetLastWriteTime( __0x1563.__0x1357 );
							}
							catch
							{
								return new DateTime();
							}
						}

						var __0x1374 = GetDate( __0x1372 );
						var __0x1375 = GetDate( __0x1373 );
						int __0x1376 = 0;
						if( __0x1374 < __0x1375 )
							__0x1376 = -1;
						else if( __0x1374 > __0x1375 )
							__0x1376 = 1;
						if( !Owner.Options.SortFilesByAscending )
							__0x1376 *= -1;
						if( __0x1376 != 0 )
							return __0x1376;
					}
					break;

				case ContentBrowser.SortByItems.Type:
					{
						var __0x1377 = Path.GetExtension( __0x1372.FullPath );
						var __0x1378 = Path.GetExtension( __0x1373.FullPath );
						var __0x1379 = string.Compare( __0x1377, __0x1378 );
						if( !Owner.Options.SortFilesByAscending )
							__0x1379 *= -1;
						if( __0x1379 != 0 )
							return __0x1379;
					}
					break;

				case ContentBrowser.SortByItems.Size:
					{
						long GetSize( ContentBrowserItem_File __0x1564 )
						{
							try
							{
								return new FileInfo( __0x1564.__0x1357 ).Length;
							}
							catch
							{
								return 0;
							}
						}

						long __0x1380 = GetSize( __0x1372 );
						long __0x1381 = GetSize( __0x1373 );
						int __0x1382 = 0;
						if( __0x1380 < __0x1381 )
							__0x1382 = -1;
						else if( __0x1380 > __0x1381 )
							__0x1382 = 1;
						if( !Owner.Options.SortFilesByAscending )
							__0x1382 *= -1;
						if( __0x1382 != 0 )
							return __0x1382;
					}
					break;
				}

				
				{
					var __0x1383 = Path.GetFileName( __0x1372.FullPath );
					var __0x1384 = Path.GetFileName( __0x1373.FullPath );
					var __0x1385 = string.Compare( __0x1383, __0x1384 );
					if( !Owner.Options.SortFilesByAscending )
						__0x1385 *= -1;
					return __0x1385;
				}
			} );
		}

		void __0x1547()
		{
			
			if( __0x1359 )
			{
				
				__0x1544( out ESet<string> itemsToHide );

				
				var __0x1386 = new List<(string, ContentBrowserItem_File)>();
				var __0x1387 = new List<(string, ContentBrowserItem_File)>();

				
				{
					
					string[] __0x1388;
					try
					{
						__0x1388 = Directory.GetDirectories( __0x1357 );
					}
					catch
					{
						__0x1388 = new string[ 0 ];
					}

					foreach( var __0x1496 in __0x1388 )
					{
						string __0x1389 = Path.GetFileName( __0x1496 );
						if( !itemsToHide.Contains( __0x1389.ToLower() ) )
						{
							string __0x1390 = GetFileChildrenKey( __0x1496 );

							__0x1360.TryGetValue( __0x1390, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_File( Owner, this, __0x1496, true );
								item.imageKey = "Folder";
							}

							__0x1386.Add( (__0x1390, (ContentBrowserItem_File)item) );
						}
					}

					
					string[] __0x1391;
					try
					{
						var __0x1392 = Owner.FilteringMode?.FileSearchPatterns;
						if( __0x1392 != null )
						{
							var __0x1393 = new List<string>( 256 );
							foreach( var __0x1497 in __0x1392 )
								__0x1393.AddRange( Directory.GetFiles( __0x1357, __0x1497 ) );
							__0x1391 = __0x1393.ToArray();
						}
						else
							__0x1391 = Directory.GetFiles( __0x1357 );
					}
					catch
					{
						__0x1391 = new string[ 0 ];
					}

					foreach( var __0x1498 in __0x1391 )
					{
						string __0x1394 = Path.GetFileName( __0x1498 );
						if( !itemsToHide.Contains( __0x1394.ToLower() ) )
						{
							string __0x1395 = GetFileChildrenKey( __0x1498 );

							__0x1360.TryGetValue( __0x1395, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_File( Owner, this, __0x1498, false );
								item.imageKey = ResourceManager.GetResourceImageKey( __0x1498 );

								
								if( Owner.Mode == ContentBrowser.ModeEnum.Resources  )
									item.chooseByDoubleClickAndReturnKey = true;
							}

							__0x1387.Add( (__0x1395, (ContentBrowserItem_File)item) );
						}
					}
				}

				
				__0x1545( __0x1386 );
				__0x1546( __0x1387 );

				
				var __0x1396 = new EDictionary<string, ContentBrowser.Item>();
				foreach( var __0x1499 in __0x1386 )
					__0x1396[ __0x1499.Item1 ] = __0x1499.Item2;
				foreach( var __0x1500 in __0x1387 )
					__0x1396[ __0x1500.Item1 ] = __0x1500.Item2;

				
				{
					ESet<ContentBrowser.Item> __0x1397 = new ESet<ContentBrowser.Item>( __0x1396.Values );
					foreach( var __0x1501 in __0x1360.Values )
					{
						if( !__0x1397.Contains( __0x1501 ) )
							__0x1501.Dispose();
					}
				}

				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				

				__0x1360 = __0x1396;


				
				
				
				

				
				

				
				

				
				
				
				
				
				
				
				
				
			}
			else
			{
				

				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					bool __0x1398 = false;

					var __0x1399 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x1357 ) );
					if( __0x1399 != null && __0x1399.PrimaryInstance != null )
					{
						var __0x1400 = __0x1399.PrimaryInstance.ResultComponent;
						if( __0x1400 != null )
						{
							__0x1398 = true;

							
							{
								var __0x1401 = new EDictionary<Component, ContentBrowser.Item>();

								
								foreach( var __0x1502 in __0x1400.Components )
								{
									if( __0x1502.DisplayInEditor && __0x1502.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1502 ) )
									{
										

										
										
										
										
										
										

										
										
										__0x1361.TryGetValue( __0x1502, out ContentBrowser.Item item );

										if( item == null )
										{
											item = new ContentBrowserItem_Component( Owner, this, __0x1502 );
											item.imageKey = "Class";
										}

										__0x1401.Add( __0x1502, item );
										
									}
								}

								
								{
									ESet<ContentBrowser.Item> __0x1402 = new ESet<ContentBrowser.Item>( __0x1401.Values );
									foreach( var __0x1503 in __0x1361.Values )
									{
										if( !__0x1402.Contains( __0x1503 ) )
											__0x1503.Dispose();
									}
								}

								__0x1361 = __0x1401;
							}

							
							if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
								Owner.Mode == ContentBrowser.ModeEnum.SetReference )
							{
								
								var __0x1403 = new List<Metadata.Member>( 256 );
								{
									foreach( var __0x1504 in __0x1400.MetadataGetMembers() )
									{
										bool __0x1404;
										if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
										{
											if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
												__0x1404 = false;
											else
											{
												var __0x1405 = Owner.SetReferenceModeData.DemandedType;
												__0x1404 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1405, __0x1504, false );
											}

											
											
											
											
											
											
											
											
											
											
											
											
											
											
										}
										else
										{
											if( __0x1504.Owner == __0x1400 )
												__0x1404 = true;
											else
												__0x1404 = false;
											

											
											
											
											
											
											

											
											
											
											

											
											
											

											
											

											
											

										}

										if( __0x1404 )
											__0x1403.Add( __0x1504 );
									}

									
									ContentBrowserUtility.SortMemberItems( __0x1403 );
								}

								
								var __0x1406 = new EDictionary<Metadata.Member, ContentBrowser.Item>( 256 );
								foreach( var __0x1505 in __0x1403 )
								{
									__0x1362.TryGetValue( __0x1505, out ContentBrowser.Item item );
									if( item == null )
										item = new ContentBrowserItem_Member( Owner, this, __0x1505 );

									if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( item ) )
										__0x1406.Add( __0x1505, item );
									else
										item.Dispose();
								}

								
								{
									ESet<ContentBrowser.Item> __0x1407 = new ESet<ContentBrowser.Item>( __0x1406.Values );
									foreach( var __0x1506 in __0x1362.Values )
									{
										if( !__0x1407.Contains( __0x1506 ) )
											__0x1506.Dispose();
									}
								}

								__0x1362 = __0x1406;
							}
						}
					}

					if( !__0x1398 )
					{
						

						foreach( var __0x1507 in __0x1361.Values )
							__0x1507.Dispose();
						__0x1361 = new EDictionary<Component, ContentBrowser.Item>();

						foreach( var __0x1508 in __0x1362.Values )
							__0x1508.Dispose();
						__0x1362 = new EDictionary<Metadata.Member, ContentBrowser.Item>();
					}
				}
			}
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
				__0x1547();

			
			if( __0x1359 )
			{
				var __0x1408 = Owner.FilteringMode != null && Owner.FilteringMode.HideDirectoriesWithoutItems;
				if( __0x1408 )
				{
					List<ContentBrowser.Item> __0x1409 = new List<ContentBrowser.Item>( __0x1360.Values.Count );
					foreach( var __0x1509 in __0x1360.Values )
					{
						bool __0x1410 = false;

						var __0x1411 = __0x1509 as ContentBrowserItem_File;
						if( __0x1411 != null && __0x1411.IsDirectory && __0x1411.GetChildrenFilter( false ).Count == 0 )
							__0x1410 = true;

						if( !__0x1410 )
							__0x1409.Add( __0x1509 );
					}
					return __0x1409;
				}
				else
					return __0x1360.Values.ToArray();
			}
			else
			{
				List<ContentBrowser.Item> __0x1412 = new List<ContentBrowser.Item>( __0x1361.Values.Count + __0x1362.Count );
				foreach( var __0x1510 in __0x1361.Values )
					__0x1412.Add( __0x1510 );
				foreach( var __0x1511 in __0x1362.Values )
					__0x1412.Add( __0x1511 );
				return __0x1412;
			}
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = false;

			if( !IsDirectory )
			{
				

				referenceValue = VirtualPathUtility.GetVirtualPathByReal( FullPath );

				
				if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Resource ) ).IsAssignableFrom( expectedType ) )
				{
					canSet = true;
				}
				else
				{
					

					

					
					var __0x1413 = Path.GetExtension( FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x1413 ) != null )
					{
						var __0x1414 = ResourceManager.GetByName( referenceValue );
						if( __0x1414 != null && __0x1414.PrimaryInstance != null )
						{
							var __0x1415 = __0x1414.PrimaryInstance.ResultComponent;
							if( __0x1415 != null )
							{
								

								
								if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
								{
									canSet = true;
								}
								else
								{
									
									if( __0x1415 is Import3D && expectedType == MetadataManager.GetTypeOfNetType( typeof( Mesh ) ) )
									{
										var __0x1416 = __0x1415.GetComponent( "Mesh" ) as Mesh;
										if( __0x1416 != null )
										{
											canSet = true;
											referenceValue += "|$Mesh";
										}
									}

									
									if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, MetadataManager.MetadataGetType( __0x1415 ) ) )
										canSet = true;
								}
							}
						}
					}
				}
			}
			else
			{
				
				referenceValue = VirtualPathUtility.GetVirtualPathByReal( FullPath );
			}
		}

		public override object ContainedObject
		{
			get
			{
				var __0x1417 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x1357 ) );
				return __0x1417?.PrimaryInstance?.ResultComponent;
			}
		}

		void __0x1548( bool __0x1565 )
		{
			
			if( __0x1565 )
			{
				if( !__0x1359 )
				{
					var __0x1418 = Path.GetExtension( __0x1357 ).ToLower();

					if( __0x1418 == ".settings" )
					{
						try
						{
							if( File.Exists( __0x1357.Substring( 0, __0x1357.Length - ".settings".Length ) ) )
								ShowDisabled = true;
						}
						catch { }
					}
					else if( __0x1418 == ".meta" )
					{
						try
						{
							var __0x1419 = __0x1357.Substring( 0, __0x1357.Length - ".meta".Length );
							if( File.Exists( __0x1419 ) || Directory.Exists( __0x1419 ) )
								ShowDisabled = true;
						}
						catch { }
					}
					else if( __0x1418 == ".dds" )
					{
						if( __0x1357.Length > 11 )
						{
							var __0x1420 = __0x1357.Substring( __0x1357.Length - 11 );
							if( __0x1420 == "_GenEnv.dds" || __0x1420 == "_GenIrr.dds" )
							{
								var __0x1421 = __0x1357.Substring( 0, __0x1357.Length - 11 );
								try
								{
									if( File.Exists( __0x1421 ) )
										ShowDisabled = true;
								}
								catch { }
							}
						}
					}
					else if( __0x1418 == ".info" )
					{
						if( __0x1357.Length > 9 )
						{
							var __0x1422 = __0x1357.Substring( __0x1357.Length - 9 );
							if( __0x1422 == "_Gen.info" )
							{
								var __0x1423 = __0x1357.Substring( 0, __0x1357.Length - 9 );
								try
								{
									if( File.Exists( __0x1423 ) )
										ShowDisabled = true;
								}
								catch { }
							}
						}
					}
				}
			}

			
			if( !__0x1359 && Path.GetExtension( __0x1357 ).ToLower() == ".cs" )
			{
				var __0x1424 = false;
				if( !CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x1357 ) )
					__0x1424 = true;

				if( ShowDisabled != __0x1424 )
				{
					ShowDisabled = __0x1424;
					Owner?.Invalidate( true );
				}
			}
		}

		public override void LightweightUpdate()
		{
			base.LightweightUpdate();

			__0x1548( false );
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Virtual : ContentBrowser.Item
	{
		
		public string text;
		public List<ContentBrowser.Item> children = new List<ContentBrowser.Item>();

		public string Description { get; set; } = "";

		

		public ContentBrowserItem_Virtual( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.text = text;
		}

		public override void Dispose()
		{
			if( children != null )
			{
				foreach( var __0x1512 in children )
					__0x1512.Dispose();
			}
		}

		public void DeleteChildren()
		{
			foreach( var __0x1513 in children )
				__0x1513.Dispose();
			children.Clear();
		}

		public void DeleteChild( ContentBrowser.Item item )
		{
			item.Dispose();
			children.Remove( item );
		}

		public override string Text
		{
			get { return text; }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			return children;
		}

		public override string GetDescription()
		{
			return Description;
		}

		public void SetText( string value )
		{
			if( value != text )
			{
				text = value;
				PerformTextChanged();
			}
		}
	}

	

	public class ContentBrowserItem_Type : ContentBrowser.Item
	{
		public Metadata.TypeInfo type;
		public string text;
		public List<ContentBrowser.Item> nestedTypeChildren = new List<ContentBrowser.Item>();
		public List<ContentBrowserItem_Member> memberChildren = new List<ContentBrowserItem_Member>();

		
		public bool memberCreationDisable;

		

		public ContentBrowserItem_Type( ContentBrowser owner, ContentBrowser.Item parent, Metadata.TypeInfo type, string text )
			: base( owner, parent )
		{
			this.type = type;
			this.text = text;
		}

		public override void Dispose()
		{
			foreach( var __0x1514 in nestedTypeChildren )
				__0x1514.Dispose();
			nestedTypeChildren.Clear();
			foreach( var __0x1515 in memberChildren )
				__0x1515.Dispose();
			memberChildren.Clear();
		}

		public void DeleteNestedTypeChild( ContentBrowser.Item item )
		{
			item.Dispose();
			nestedTypeChildren.Remove( item );
		}

		public void DeleteMemberChild( ContentBrowserItem_Member item )
		{
			item.Dispose();
			memberChildren.Remove( item );
		}

		public Metadata.TypeInfo Type
		{
			get { return type; }
		}

		public override string Text
		{
			get { return text; }
		}

		void __0x1549()
		{
			
			var __0x1425 = new List<Metadata.Member>( 256 );
			{
				foreach( var __0x1516 in type.MetadataGetMembers() )
				{
					bool __0x1426;
					if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
					{
						if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
							__0x1426 = false;
						else
						{
							var __0x1427 = Owner.SetReferenceModeData.DemandedType;
							__0x1426 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1427, __0x1516, true );
						}
					}
					else
					{
						if( __0x1516.Owner == type )
							__0x1426 = true;
						else
							__0x1426 = false;
						
					}

					if( __0x1426 )
						__0x1425.Add( __0x1516 );
				}

				
				ContentBrowserUtility.SortMemberItems( __0x1425 );
			}

			
			memberChildren.Clear();
			foreach( var __0x1517 in __0x1425 )
			{
				var __0x1428 = new ContentBrowserItem_Member( Owner, this, __0x1517 );

				if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( __0x1428 ) )
					memberChildren.Add( __0x1428 );
				else
					__0x1428.Dispose();
			}
		}

		
		
		

		

		
		
		
		
		
		
		

		
		

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					if( !memberCreationDisable )
						__0x1549();
				}
			}

			
			List<ContentBrowser.Item> __0x1429 = new List<ContentBrowser.Item>( 1 + nestedTypeChildren.Count + memberChildren.Count );
			foreach( var __0x1518 in nestedTypeChildren )
				__0x1429.Add( __0x1518 );
			foreach( var __0x1519 in memberChildren )
				__0x1429.Add( __0x1519 );
			return __0x1429;
			
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = Type.Name;
			canSet = false;

			
			if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
				canSet = true;
		}

		public override string GetDescription()
		{
			var __0x1430 = XmlDocumentationFiles.GetTypeId( type );
			if( !string.IsNullOrEmpty( __0x1430 ) )
			{
				var __0x1431 = XmlDocumentationFiles.GetMemberSummary( __0x1430 );

				
				
				

				return __0x1431;
			}
			return "";
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Component : ContentBrowser.Item
	{
		Component __0x1432;
		EDictionary<Component, ContentBrowser.Item> __0x1433 = new EDictionary<Component, ContentBrowser.Item>();
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1434 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		string __0x1435 = "";
		ReferenceSelectionModeEnum __0x1436;
		ContentBrowserItem_Component __0x1437;

		

		public enum ReferenceSelectionModeEnum
		{
			None,
			Root,
			This,
		}

		

		public ContentBrowserItem_Component( ContentBrowser owner, ContentBrowser.Item parent, Component component )
			: base( owner, parent )
		{
			this.__0x1432 = component;

			component.NameChanged += __0x1552;
			component.EnabledInHierarchyChanged += __0x1553;
			component.ComponentsChanged += __0x1554;

			if( !component.EnabledInHierarchy )
				ShowDisabled = true;
		}

		public override void Dispose()
		{
			__0x1432.NameChanged -= __0x1552;
			__0x1432.EnabledInHierarchyChanged -= __0x1553;
			__0x1432.ComponentsChanged -= __0x1554;

			foreach( var __0x1520 in __0x1433.Values )
				__0x1520.Dispose();
			__0x1433.Clear();

			__0x1437?.Dispose();

			foreach( var __0x1521 in __0x1434.Values )
				__0x1521.Dispose();
			__0x1434.Clear();
		}

		public Component Component
		{
			get { return __0x1432; }
		}

		public override object ContainedObject
		{
			get { return __0x1432; }
		}

		public string SpecialTextPrefix
		{
			get { return __0x1435; }
			set { __0x1435 = value; }
		}

		public ReferenceSelectionModeEnum ReferenceSelectionMode
		{
			get { return __0x1436; }
			set { __0x1436 = value; }
		}

		public override string Text
		{
			get
			{
				
				

				var __0x1438 = __0x1432.Name;

				if( string.IsNullOrEmpty( SpecialTextPrefix ) )
				{
					if( __0x1438 == "" && __0x1432.Parent == null )
						__0x1438 = "\'" + EditorLocalization.Translate( "General", "Root" ) + "\'";
					if( __0x1438 == "" )
						__0x1438 = "\'" + EditorLocalization.Translate( "General", "No name" ) + "\'";
				}

				var __0x1439 = __0x1432.BaseType.ToString();
				
				{
					string __0x1440 = "NeoAxis.";
					if( __0x1439.Length > __0x1440.Length && __0x1439.Substring( 0, __0x1440.Length ) == __0x1440 )
						__0x1439 = __0x1439.Substring( __0x1440.Length );
				}
				
				
				
				
				
				

				if( Owner.ReadOnlyHierarchy )
				{
					
					return __0x1438;
				}
				else
				{
					string __0x1441 = "";
					if( !string.IsNullOrEmpty( SpecialTextPrefix ) )
						__0x1441 += SpecialTextPrefix;

					if( !string.IsNullOrEmpty( __0x1438 ) )
						__0x1441 += __0x1438 + " - ";
					__0x1441 += __0x1439;

					return __0x1441;
				}

				
			}
		}

		bool __0x1550()
		{
			if( Owner.ShowMembers )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference ||
					Owner.Mode == ContentBrowser.ModeEnum.Objects )
				{
					return true;
				}
			}
			return false;
		}

		void __0x1551()
		{
			
			var __0x1442 = new List<Metadata.Member>( 256 );
			{
				foreach( var __0x1522 in __0x1432.MetadataGetMembers() )
				{
					bool __0x1443;
					if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
					{
						if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
							__0x1443 = false;
						else
						{
							var __0x1444 = Owner.SetReferenceModeData.DemandedType;
							__0x1443 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1444, __0x1522, false );
						}
					}
					else
					{
						if( __0x1432.ParentRoot.hierarchyController != null &&
							__0x1432.ParentRoot.hierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
						{
							if( __0x1522.Owner == __0x1432 )
								__0x1443 = true;
							else
								__0x1443 = false;
						}
						else
							__0x1443 = true;

						

						
						
						
						
						
						

						
						
						
						

						
						
						

						
						

						
						

					}

					if( __0x1443 )
						__0x1442.Add( __0x1522 );
				}

				
				ContentBrowserUtility.SortMemberItems( __0x1442 );
			}

			
			var __0x1445 = new EDictionary<Metadata.Member, ContentBrowser.Item>( 256 );
			foreach( var __0x1523 in __0x1442 )
			{
				__0x1434.TryGetValue( __0x1523, out ContentBrowser.Item item );
				if( item == null )
					item = new ContentBrowserItem_Member( Owner, this, __0x1523 );

				if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( item ) )
					__0x1445.Add( __0x1523, item );
				else
					item.Dispose();
			}

			
			{
				ESet<ContentBrowser.Item> __0x1446 = new ESet<ContentBrowser.Item>( __0x1445.Values );
				foreach( var __0x1524 in __0x1434.Values )
				{
					if( !__0x1446.Contains( __0x1524 ) )
						__0x1524.Dispose();
				}
			}

			__0x1434 = __0x1445;
		}

		
		
		

		
		
		

		
		
		
		

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				{
					EDictionary<Component, ContentBrowser.Item> __0x1447 = new EDictionary<Component, ContentBrowser.Item>();

					
					foreach( var __0x1525 in __0x1432.Components )
					{
						if( __0x1525.DisplayInEditor && __0x1525.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1525 ) )
						{
							

							
							
							
							
							
							

							
							
							__0x1433.TryGetValue( __0x1525, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_Component( Owner, this, __0x1525 );

								
								
								if( !string.IsNullOrEmpty( imageKey ) && imageKey != "GoUpper" )
									item.imageKey = imageKey;
							}

							__0x1447.Add( __0x1525, item );
							
						}
					}

					
					{
						ESet<ContentBrowser.Item> __0x1448 = new ESet<ContentBrowser.Item>( __0x1447.Values );
						foreach( var __0x1526 in __0x1433.Values )
						{
							if( !__0x1448.Contains( __0x1526 ) )
								__0x1526.Dispose();
						}
					}

					__0x1433 = __0x1447;
				}

				if( ReferenceSelectionMode == ReferenceSelectionModeEnum.This && __0x1432.Parent != null )
				{
					if( __0x1437 == null )
					{
						__0x1437 = new ContentBrowserItem_Component( Owner, this, __0x1432.Parent );
						__0x1437.imageKey = "GoUpper";

						
						__0x1437.SpecialTextPrefix = ".. ";
						__0x1437.ReferenceSelectionMode = ReferenceSelectionModeEnum.This;

						

						
						
						
					}
				}

				
				if( __0x1550() )
				{
					__0x1551();
				}
			}

			
			List<ContentBrowser.Item> __0x1449 = new List<ContentBrowser.Item>( __0x1433.Values.Count + 1 + __0x1434.Count );
			if( __0x1437 != null )
				__0x1449.Add( __0x1437 );
			foreach( var __0x1527 in __0x1433.Values )
				__0x1449.Add( __0x1527 );
			foreach( var __0x1528 in __0x1434.Values )
				__0x1449.Add( __0x1528 );
			return __0x1449;
		}

		private void __0x1552( Component __0x1566 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			PerformTextChanged();
		}

		private void __0x1553( Component __0x1567 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			ShowDisabled = !__0x1432.EnabledInHierarchy;
			PerformTextColorChanged();
		}

		private void __0x1554( Component __0x1568 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			var __0x1450 = Owner?.DocumentWindow?.Document;
			if( __0x1450 != null && __0x1450.Destroyed )
				return;

			PerformChildrenChanged();
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = ContentBrowserUtility.CalculateReferenceValueForComponentItem( from, this );
			canSet = false;

			
			if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
			{
				
				var __0x1451 = __0x1432.GetProvidedType();
				if( __0x1451 != null )
					canSet = true;
			}
			else
			{
				

				
				if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, MetadataManager.MetadataGetType( __0x1432 ) ) )
				{
					if( from != null && from.ParentRoot == __0x1432.ParentRoot )
					{
						
						canSet = true;
					}
					else
					{
						
						var __0x1452 = __0x1432.ParentRoot?.HierarchyController.CreatedByResource;
						if( __0x1452 != null )
						{
							
							var __0x1453 = __0x1432.GetProvidedType();
							if( __0x1453 != null )
								canSet = true;
						}
					}
				}
			}
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Member : ContentBrowser.Item
	{
		Metadata.Member __0x1454;
		
		
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1455 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		

		
		

		
		
		
		

		

		public ContentBrowserItem_Member( ContentBrowser owner, ContentBrowser.Item parent, Metadata.Member member )
			: base( owner, parent )
		{
			this.__0x1454 = member;

			if( member is Metadata.Property )
				imageKey = member.Static ? "StaticProperty" : "Property";
			else if( member is Metadata.Method )
			{
				var __0x1456 = (Metadata.Method)member;
				if( __0x1456.Constructor )
					imageKey = "Constructor";
				else if( __0x1456.Operator )
					imageKey = "Operator";
				else
					imageKey = member.Static ? "StaticMethod" : "Method";
			}
			else if( member is Metadata.Event )
				imageKey = member.Static ? "StaticEvent" : "Event";

			
		}

		public override void Dispose()
		{
			

			foreach( var __0x1529 in __0x1455.Values )
				__0x1529.Dispose();
			__0x1455.Clear();

			
		}

		
		
		
		
		

		public Metadata.Member Member
		{
			get { return __0x1454; }
		}

		public override string Text
		{
			get { return __0x1454.ToString(); }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					

					

					
					

					var __0x1457 = __0x1454 as Metadata.Property;
					var __0x1458 = __0x1454 as Metadata.Method;
					if( __0x1457 != null || __0x1458 != null )
					{
						
						Metadata.TypeInfo __0x1459 = null;
						if( __0x1457 != null )
							__0x1459 = __0x1457.Type;
						else
						{
							var __0x1460 = __0x1458.GetReturnParameters();
							if( __0x1460.Length == 1 )
								__0x1459 = __0x1460[ 0 ].Type;
						}

						if( __0x1459 != null )
						{
							
							var __0x1461 = new List<Metadata.Member>( 256 );
							{
								
								
								if( __0x1457 != null && ReferenceUtility.IsReferenceType( __0x1457.Type.GetNetType() ) )
								{
									foreach( var __0x1530 in __0x1457.TypeUnreferenced.MetadataGetMembers() )
									{
										bool __0x1462 = false;
										if( !__0x1530.Static )
										{
											
											var __0x1463 = __0x1530 as Metadata.Property;
											if( __0x1463 != null && !__0x1463.HasIndexers )
												__0x1462 = true;
											var __0x1464 = __0x1530 as Metadata.Method;
											if( __0x1464 != null && __0x1464.Parameters.Length == 1 && __0x1464.GetReturnParameters().Length == 1 )
												__0x1462 = true;
										}

										if( __0x1462 )
											__0x1461.Add( __0x1530 );
									}
								}
								else
								{
									
									foreach( var __0x1531 in __0x1459.MetadataGetMembers() )
									{
										bool __0x1465 = false;
										if( !__0x1531.Static )
										{
											
											var __0x1466 = __0x1531 as Metadata.Property;
											if( __0x1466 != null && !__0x1466.HasIndexers )
												__0x1465 = true;
											var __0x1467 = __0x1531 as Metadata.Method;
											if( __0x1467 != null && __0x1467.Parameters.Length == 1 && __0x1467.GetReturnParameters().Length == 1 )
												__0x1465 = true;
										}

										if( __0x1465 )
											__0x1461.Add( __0x1531 );
									}
								}

								
								ContentBrowserUtility.SortMemberItems( __0x1461 );
							}

							
							var __0x1468 = new EDictionary<Metadata.Member, ContentBrowser.Item>();
							foreach( var __0x1532 in __0x1461 )
							{
								__0x1455.TryGetValue( __0x1532, out ContentBrowser.Item item );
								if( item == null )
									item = new ContentBrowserItem_Member( Owner, this, __0x1532 );
								__0x1468.Add( __0x1532, item );
							}

							
							{
								ESet<ContentBrowser.Item> __0x1469 = new ESet<ContentBrowser.Item>( __0x1468.Values );
								foreach( var __0x1533 in __0x1455.Values )
								{
									if( !__0x1469.Contains( __0x1533 ) )
										__0x1533.Dispose();
								}
							}

							__0x1455 = __0x1468;
						}
					}
					
				}
			}

			
			List<ContentBrowser.Item> __0x1470 = new List<ContentBrowser.Item>( __0x1455.Count );
			foreach( var __0x1534 in __0x1455.Values )
				__0x1470.Add( __0x1534 );
			return __0x1470;
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = ContentBrowserUtility.CalculateReferenceValueForMemberItem( from, expectedType, this );
			canSet = false;

			
			
			
			
			
			
			
			
			

			
			if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( expectedType ) )
			{
				if( ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( expectedType, __0x1454, false ) )
					canSet = true;
				
				
			}
			
			
			
			
			
			
			

			
			
			

			
			if( __0x1454 is Metadata.Property )
			{
				
				var __0x1471 = (Metadata.Property)__0x1454;

				if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, __0x1471.TypeUnreferenced ) )
					canSet = true;
			}
			else if( __0x1454 is Metadata.Method )
			{
				
				var __0x1472 = (Metadata.Method)__0x1454;

				var __0x1473 = __0x1472.GetReturnParameters();
				if( __0x1472.Parameters.Length == 1 && __0x1473.Length == 1 )
				{
					if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, __0x1473[ 0 ].Type ) )
						canSet = true;
				}
			}
		}

		public override string GetDescription()
		{
			var __0x1474 = XmlDocumentationFiles.GetMemberId( __0x1454 );
			if( !string.IsNullOrEmpty( __0x1474 ) )
			{
				var __0x1475 = XmlDocumentationFiles.GetMemberSummary( __0x1474 );

				
				
				

				return __0x1475;
			}
			return "";
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Null : ContentBrowser.Item
	{
		
		public string text;

		

		public ContentBrowserItem_Null( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.text = text;
		}

		public override void Dispose()
		{
		}

		public override string Text
		{
			get { return text; }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			return new ContentBrowser.Item[ 0 ];
		}

		public override void CalculateReferenceValue( Component propertyOwner, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = true;
		}
	}

	

	public class ContentBrowserItem_Favorites : ContentBrowser.Item
	{
		string __0x1476;
		EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type> __0x1477 = new EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type>();
		EDictionary<string, ContentBrowserItem_File> __0x1478 = new EDictionary<string, ContentBrowserItem_File>();

		

		public ContentBrowserItem_Favorites( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1476 = text;
		}

		public override void Dispose()
		{
			foreach( var __0x1535 in __0x1477.Values )
				__0x1535.Dispose();
			__0x1477.Clear();

			foreach( var __0x1536 in __0x1478.Values )
				__0x1536.Dispose();
			__0x1478.Clear();
		}

		public override string Text
		{
			get { return __0x1476; }
		}

		void __0x1555()
		{
			

			var __0x1479 = new List<Metadata.TypeInfo>( 32 );
			var __0x1480 = new List<string>( 32 );
			foreach( var __0x1537 in EditorFavorites.Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries ) )
			{
				var __0x1481 = MetadataManager.GetTypeOfNetType( __0x1537 );
				if( __0x1481 != null )
					__0x1479.Add( __0x1481 );
				else if( VirtualFile.Exists( __0x1537 ) )
					__0x1480.Add( __0x1537 );
			}

			CollectionUtility.MergeSort( __0x1479, delegate ( Metadata.TypeInfo __0x1569, Metadata.TypeInfo __0x1570 )
			{
				return string.Compare( __0x1569.Name, __0x1570.Name );
			} );

			CollectionUtility.MergeSort( __0x1480, delegate ( string __0x1571, string __0x1572 )
			{
				var __0x1482 = Path.GetFileName( __0x1571 );
				var __0x1483 = Path.GetFileName( __0x1572 );
				return string.Compare( __0x1482, __0x1483 );
			} );


			
			{
				
				var __0x1484 = new EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type>( 256 );
				foreach( var __0x1538 in __0x1479 )
				{
					__0x1477.TryGetValue( __0x1538, out var typeItem );
					if( typeItem == null )
					{
						var __0x1485 = __0x1538.DisplayName;
						{
							var __0x1486 = ResourcesWindowItems.GetItemByType( __0x1538.GetNetType() );
							if( __0x1486 != null )
							{
								try
								{
									__0x1485 = Path.GetFileName( __0x1486.Path );
								}
								catch { }
							}
						}

						typeItem = new ContentBrowserItem_Type( Owner, this, __0x1538, __0x1485 );
						typeItem.imageKey = ContentBrowser.GetTypeImageKey( __0x1538 );
						typeItem.memberCreationDisable = true;
					}

					if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( typeItem ) )
						__0x1484.Add( __0x1538, typeItem );
					else
						typeItem.Dispose();
				}

				
				{
					var __0x1487 = new ESet<ContentBrowserItem_Type>( __0x1484.Values );
					foreach( var __0x1539 in __0x1477.Values )
					{
						if( !__0x1487.Contains( __0x1539 ) )
							__0x1539.Dispose();
					}
				}

				__0x1477 = __0x1484;
			}

			
			{
				
				var __0x1488 = new EDictionary<string, ContentBrowserItem_File>( 256 );
				foreach( var __0x1540 in __0x1480 )
				{
					__0x1478.TryGetValue( __0x1540, out var fileItem );
					if( fileItem == null )
					{
						var __0x1489 = VirtualPathUtility.GetRealPathByVirtual( __0x1540 );

						fileItem = new ContentBrowserItem_File( Owner, this, __0x1489, false );
						fileItem.imageKey = ResourceManager.GetResourceImageKey( __0x1489 );
					}

					if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( fileItem ) )
						__0x1488.Add( __0x1540, fileItem );
					else
						fileItem.Dispose();
				}

				
				{
					var __0x1490 = new ESet<ContentBrowserItem_File>( __0x1488.Values );
					foreach( var __0x1541 in __0x1478.Values )
					{
						if( !__0x1490.Contains( __0x1541 ) )
							__0x1541.Dispose();
					}
				}

				__0x1478 = __0x1488;
			}
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
				__0x1555();

			
			List<ContentBrowser.Item> __0x1491 = new List<ContentBrowser.Item>( __0x1477.Values.Count + __0x1478.Count );
			foreach( var __0x1542 in __0x1477.Values )
				__0x1491.Add( __0x1542 );
			foreach( var __0x1543 in __0x1478.Values )
				__0x1491.Add( __0x1543 );
			return __0x1491;
		}

		public override void CalculateReferenceValue( Component propertyOwner, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = true;
		}
	}

	

	
	
	
	

	

	
	
	
	

	
	
	
	
	

	

	

	
	
	
	

	

	

	

	
	

	
	
	

	

	
	

	
	
	
	
	
	
	

	
	

	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	
	

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	

	

	
	
	


	
	

	
	
	
	

	

	
	

	
	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	

	
	

	
	
	

	
	
	
	
	
	
	
	

	
	

	
	
	

	

	
	
	
	

	
	
	

	
	

	

	

	
	
	

	
	
	
	

	

	
	
	
	
	
	
	
	

	

	
	
	
	
	

	
	
	

	
	
	

	
	
	

	
	
	
	
	

	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	

	

	

	
	
	
	
	
	

	

	
	
	
	
	

	
	
	

	

	
	

	
	

	
	
	
	

	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	

	
	
	

	

	
	
	
	

	
	
	
	
	

	

	

	
	
	
	

	

	

	

	
	

	
	
	

	

	
	
	

	
	
	
	
	
	
	

	
	

	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	

	



	
	
	

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	

	
	
	


	
	

	
	
	
	

	

	
	

	
	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	

	
	
	

	

	

	

	
	
	
	
	
	

	
	
	


	

	
	
	
	
	

	

	

	

	
	

	
	
	
	

	

	
	
	
	

	
	
	

	
	
	
	
	
	
	

	
	

	
	
	

	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	

	
	
	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	

	
	
	

	

	
	
	
	

	
	
	

	

	

	

	
	
	
	

	

	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	

	

	
	
	
	

	

	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	

	

	
	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	

}





namespace NeoAxis.Editor
{
	public class ContentBrowserItem_Solution : ContentBrowser.Item
	{
		List<ContentBrowser.Item> __0x1573 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_Solution( ContentBrowser owner, ContentBrowser.Item parent )
			: base( owner, parent )
		{
		}

		public override void Dispose()
		{
			if( __0x1573 != null )
			{
				foreach( var __0x1587 in __0x1573 )
					__0x1587.Dispose();
			}
		}

		public override string Text
		{
			get { return "Solution"; }
		}

		void __0x1593()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1573.Clear();

			
			
			
			
			
			
			
			
			


			
			

			
			
			
			
			
			
			
			
			
			
			
			
			


			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1593();
				
			}

			
			List<ContentBrowser.Item> __0x1574 = new List<ContentBrowser.Item>( __0x1573.Count );
			foreach( var __0x1588 in __0x1573 )
				__0x1574.Add( __0x1588 );
			return __0x1574;
		}

		
		
		
		
		
	}

	

	
	
	public class ContentBrowserItem_CSharpProject : ContentBrowser.Item
	{
		
		string __0x1575;
		List<ContentBrowser.Item> __0x1576 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_CSharpProject( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1575 = text;
		}

		public override void Dispose()
		{
			if( __0x1576 != null )
			{
				foreach( var __0x1589 in __0x1576 )
					__0x1589.Dispose();
			}
		}

		public override string Text
		{
			get { return __0x1575; }
		}

		void __0x1594()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1576.Clear();

			{
				var __0x1577 = new ContentBrowserItem_Virtual( Owner, this, "Properties" );
				__0x1577.imageKey = "Property";
				
				
				__0x1576.Add( __0x1577 );
				
				
			}

			{
				var __0x1578 = new ContentBrowserItem_CSharpProjectReferences( Owner, this, "References" );
				__0x1578.imageKey = "Attach";
				
				
				__0x1576.Add( __0x1578 );
				
				
			}

			{
				var __0x1579 = new ContentBrowserItem_Virtual( Owner, this, "File.cs" );
				__0x1579.imageKey = "CSharp";
				
				
				__0x1576.Add( __0x1579 );
				
				
			}

			{
				var __0x1580 = new ContentBrowserItem_Virtual( Owner, this, "File2.cs" );
				__0x1580.imageKey = "CSharp";
				
				
				__0x1576.Add( __0x1580 );
				
				
			}


			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1594();
				
			}

			
			List<ContentBrowser.Item> __0x1581 = new List<ContentBrowser.Item>( __0x1576.Count );
			foreach( var __0x1590 in __0x1576 )
				__0x1581.Add( __0x1590 );
			return __0x1581;
		}

		
		
		
		
		
	}

	

	public class ContentBrowserItem_CSharpProjectReferences : ContentBrowser.Item
	{
		
		string __0x1582;
		List<ContentBrowser.Item> __0x1583 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_CSharpProjectReferences( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1582 = text;
		}

		public override void Dispose()
		{
			if( __0x1583 != null )
			{
				foreach( var __0x1591 in __0x1583 )
					__0x1591.Dispose();
			}
		}

		public override string Text
		{
			get { return __0x1582; }
		}

		void __0x1595()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1583.Clear();

			{
				var __0x1584 = new ContentBrowserItem_Virtual( Owner, this, "System" );
				
				__0x1584.imageKey = "Attach";
				__0x1583.Add( __0x1584 );
			}

			{
				var __0x1585 = new ContentBrowserItem_Virtual( Owner, this, "NeoAxis.Core" );
				
				__0x1585.imageKey = "Attach";
				__0x1583.Add( __0x1585 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			


			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1595();
				
			}

			
			List<ContentBrowser.Item> __0x1586 = new List<ContentBrowser.Item>( __0x1583.Count );
			foreach( var __0x1592 in __0x1583 )
				__0x1586.Add( __0x1592 );
			return __0x1586;
		}

		
		
		
		
		
	}

	

	
	
	
	
	

	

	
	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	

	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	

	
	
	

	
	

	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	

}





namespace NeoAxis.Editor
{
	public class ContentBrowserListModeList : EngineListView.ModeClass
	{
		ContentBrowser __0x1596;
		int __0x1597;
		public int MarginLeft;
		public int MarginImageText;
		public int MarginRight;

		public ContentBrowserListModeList( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1596 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1597 = (int)( (float)__0x1596.Options.ListImageSize * EditorAPI.DPIScale );

			ItemSize = new Vector2I( (int)( (float)__0x1596.Options.ListColumnWidth * EditorAPI.DPIScale ), __0x1597 + (int)( EditorAPI.DPIScale * 10.0f ) );
			ClampItemWidthByListViewWidth = true;

			MarginLeft = (int)( EditorAPI.DPIScale * 4.0f );
			MarginImageText = (int)( EditorAPI.DPIScale * 2.0f );
			MarginRight = (int)( EditorAPI.DPIScale * 2.0f );
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1598 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1599 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1599, rect );


			int __0x1600 = MarginLeft;

			
			
			{
				var __0x1601 = __0x1598.Image;
				if( __0x1601 == null || __0x1601.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
				{
					__0x1601 = EditorResourcesCache.GetDefaultImage( __0x1597 );
					
					
					
					
				}

				e.Graphics.DrawImage( __0x1601, rect.Left + __0x1600, rect.Top + ( ItemSize.Y - __0x1597 ) / 2, __0x1597, __0x1597 );

				__0x1600 += __0x1597 + MarginImageText;
			}

			var __0x1602 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

			int __0x1603;
			{
				TextFormatFlags __0x1604 = __0x1602;

				var __0x1605 = TextRenderer.MeasureText( e.Graphics, __0x1598.Text, Owner.Font, new Size( int.MaxValue, int.MaxValue ), __0x1604 );
				__0x1603 = __0x1605.Height;
			}

			bool __0x1606 = __0x1603 * 2 + (int)( EditorAPI.DPIScale * 6.0f ) < rect.Height;

			if( __0x1606 )
			{
				
				if( !string.IsNullOrEmpty( __0x1598.Text ) )
				{
					var __0x1607 = __0x1602 | TextFormatFlags.Top | TextFormatFlags.Left;
					var __0x1608 = rect.Height / 2 - (int)( EditorAPI.DPIScale * 1.0f ) - __0x1603;

					var __0x1609 = new System.Drawing.Rectangle( rect.Left + __0x1600, rect.Top + __0x1608, rect.Width - __0x1600 - MarginRight, rect.Height - __0x1608 );
					TextRenderer.DrawText( e.Graphics, __0x1598.Text, Owner.Font, __0x1609, textColor, backColor, __0x1607 );
				}

				
				if( !string.IsNullOrEmpty( __0x1598.Description ) )
				{
					var __0x1610 = Color.Gray;
					var __0x1611 = __0x1602 | TextFormatFlags.Top | TextFormatFlags.Left;
					var __0x1612 = rect.Height / 2 + (int)( EditorAPI.DPIScale * 1.0f );

					var __0x1613 = new System.Drawing.Rectangle( rect.Left + __0x1600, rect.Top + __0x1612, rect.Width - __0x1600 - MarginRight, rect.Height - __0x1612 );
					TextRenderer.DrawText( e.Graphics, __0x1598.Description, Owner.Font, __0x1613, __0x1610, backColor, __0x1611 );
				}
			}
			else
			{
				
				if( !string.IsNullOrEmpty( __0x1598.Text ) )
				{
					var __0x1614 = __0x1602 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;

					var __0x1615 = new System.Drawing.Rectangle( rect.Left + __0x1600, rect.Top, rect.Width - __0x1600 - MarginRight, rect.Height );
					TextRenderer.DrawText( e.Graphics, __0x1598.Text, Owner.Font, __0x1615, textColor, backColor, __0x1614 );

					var __0x1616 = TextRenderer.MeasureText( e.Graphics, __0x1598.Text, Owner.Font, new Size( int.MaxValue, int.MaxValue ), __0x1614 );

					__0x1600 += __0x1616.Width + (int)( EditorAPI.DPIScale * 2.0f );
				}

				
				if( !string.IsNullOrEmpty( __0x1598.Description ) )
				{
					var __0x1617 = Color.Gray;

					var __0x1618 = __0x1602 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;

					var __0x1619 = new System.Drawing.Rectangle( rect.Left + __0x1600, rect.Top, rect.Width - __0x1600 - MarginRight, rect.Height );
					TextRenderer.DrawText( e.Graphics, __0x1598.Description, Owner.Font, __0x1619, __0x1617, backColor, __0x1618 );
				}
			}

		}
	}

	

	public class ContentBrowserListModeTiles : EngineListView.ModeClass
	{
		ContentBrowser __0x1620;
		int __0x1621;

		public ContentBrowserListModeTiles( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1620 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1621 = (int)( (float)__0x1620.Options.TileImageSize * EditorAPI.DPIScale );

			
			var __0x1622 = ( EditorAPI.DPIScale * new Vector2( 30, 40 ) ).ToVector2I();

			ItemSize = new Vector2I( __0x1621, __0x1621 ) + __0x1622;
			ClampItemWidthByListViewWidth = false;
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1623 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1624 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1624, rect );

			

			
			{
				var __0x1625 = __0x1623.Image;
				if( __0x1625 == null || __0x1625.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x1625 = EditorResourcesCache.GetDefaultImage( __0x1621 );

				e.Graphics.DrawImage( __0x1625, ( rect.Left + rect.Right ) / 2 - __0x1621 / 2, rect.Top + (int)( EditorAPI.DPIScale * 5.0f ), __0x1621, __0x1621 );
			}

			
			if( !string.IsNullOrEmpty( __0x1623.Text ) )
			{
				var __0x1626 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

				
				var __0x1627 = __0x1626 | TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;
				
				__0x1627 |= TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl;

				var __0x1628 = (int)( EditorAPI.DPIScale * 5.0f ) + __0x1621 + (int)( EditorAPI.DPIScale * 5.0f );

				var __0x1629 = new System.Drawing.Rectangle(
					rect.Left + (int)( EditorAPI.DPIScale * 3.0f ),
					rect.Top + __0x1628,
					rect.Width - (int)( EditorAPI.DPIScale * 6.0f ),
					rect.Height - __0x1628 - 1 );

				TextRenderer.DrawText( e.Graphics, __0x1623.Text, Owner.Font, __0x1629, textColor, backColor, __0x1627 );
			}
		}
	}

	

	public class ContentBrowserListModeTilesRibbon : EngineListView.ModeClass
	{
		ContentBrowser __0x1630;
		int __0x1631;

		public ContentBrowserListModeTilesRibbon( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1630 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1631 = (int)( (float)__0x1630.Options.TileImageSize * EditorAPI.DPIScale );

			ItemSize = ( EditorAPI.DPIScale * new Vector2( 60, 41 ) ).ToVector2I();
			ClampItemWidthByListViewWidth = false;
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1632 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1633 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1633, rect );

			
			{
				var __0x1634 = __0x1632.Image;
				if( __0x1634 == null || __0x1634.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x1634 = EditorResourcesCache.GetDefaultImage( __0x1631 );

				e.Graphics.DrawImage( __0x1634, ( rect.Left + rect.Right ) / 2 - __0x1631 / 2, rect.Top + (int)( EditorAPI.DPIScale * 2.0f ), __0x1631, __0x1631 );
			}

			
			if( !string.IsNullOrEmpty( __0x1632.Text ) )
			{
				var __0x1635 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

				
				var __0x1636 = __0x1635 | TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;
				
				__0x1636 |= TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl;

				var __0x1637 = (int)( EditorAPI.DPIScale * 2.0f ) + __0x1631 + (int)( EditorAPI.DPIScale * 1.0f );

				var __0x1638 = new System.Drawing.Rectangle(
					rect.Left + (int)( EditorAPI.DPIScale * 2 ),
					rect.Top + __0x1637,
					rect.Width - (int)( EditorAPI.DPIScale * 4 ),
					rect.Height - __0x1637 - 1 );

				TextRenderer.DrawText( e.Graphics, __0x1632.Text, Owner.Font, __0x1638, textColor, backColor, __0x1636 );
			}
		}
	}

}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents options for <see cref="ContentBrowser"/>.
	/// </summary>
	public class ContentBrowserOptions : Metadata.IMetadataProvider
	{
		public static bool AllowFilteringModeButton = true;
		public static bool AllowMembersButton = true;

		public delegate void ConfigureDelegate( ContentBrowserOptions __0x1656 );
		public static event ConfigureDelegate Configure;

		

		ContentBrowser __0x1639;

		

		[Browsable( false )]
		public ContentBrowser.PanelModeEnum PanelMode { get; set; } = ContentBrowser.PanelModeEnum.Tree;

		[DefaultValue( ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_Resources { get { return PanelMode; } set { PanelMode = value; } }

		[DefaultValue( ContentBrowser.PanelModeEnum.Tree )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_Objects { get { return PanelMode; } set { PanelMode = value; } }

		[DefaultValue( ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_SetReference { get { return PanelMode; } set { PanelMode = value; } }

		
		
		

		[DefaultValue( true )]
		public bool FilteringModeButton { get; set; } = true;

		[DefaultValue( true )]
		public bool MembersButton { get; set; } = true;

		[DefaultValue( true )]
		public bool OpenButton { get; set; } = true;

		[DefaultValue( true )]
		public bool EditorButton { get; set; } = true;

		[DefaultValue( true )]
		public bool SettingsButton { get; set; } = true;

		[DefaultValue( true )]
		public bool ButtonsForEditing { get; set; } = true;

		[DefaultValue( true )]
		public bool SearchButton { get; set; } = true;

		
		
		
		[DefaultValue( false )]
		public bool SearchBar { get; } = false;
		
		

		[DefaultValue( ContentBrowser.SortByItems.Name )]
		public ContentBrowser.SortByItems SortFilesBy { get; set; } = ContentBrowser.SortByItems.Name;

		[DefaultValue( true )]
		public bool SortFilesByAscending { get; set; } = true;

		[DefaultValue( true )]
		public bool Breadcrumb { get; set; } = true;

		[DefaultValue( ContentBrowser.ListModeEnum.Auto )]
		public ContentBrowser.ListModeEnum ListMode { get; set; } = ContentBrowser.ListModeEnum.Auto;

		const int __0x1640 = 32;
		[DefaultValue( __0x1640 )]
		[Range( 10, 128 )]
		public int ListImageSize { get; set; } = __0x1640;

		const int __0x1641 = 1000;
		[DefaultValue( __0x1641 )]
		[Range( 50, 2000 )]
		public int ListColumnWidth { get; set; } = __0x1641;

		const int __0x1642 = 32;
		[DefaultValue( __0x1642 )]
		[Range( 10, 128 )]
		public int TileImageSize { get; set; } = __0x1642;

		[Range( 0, 1 )]
		[DefaultValue( 0.6 )]
		public double SplitterPosition { get; set; } = 0.6;

		List<PropertyImpl> __0x1643 = new List<PropertyImpl>();

		

		public class PropertyImpl : Metadata.Property
		{
			IList<Attribute> __0x1644;
			string __0x1645;
			object __0x1646;

			public delegate void ValueChangedDelegate( PropertyImpl __0x1657 );
			public event ValueChangedDelegate ValueChanged;

			

			public PropertyImpl( ContentBrowserOptions owner, string name, Metadata.TypeInfo type, IList<Attribute> attributes, string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.__0x1644 = attributes;
				this.__0x1645 = category;
				this.__0x1646 = value;
			}

			public IList<Attribute> Attributes
			{
				get { return __0x1644; }
				set { __0x1644 = value; }
			}

			public string Category
			{
				get { return __0x1645; }
				set { __0x1645 = value; }
			}

			public object Value
			{
				get { return __0x1646; }
				set { this.__0x1646 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x1647 = new List<object>();

				if( __0x1644 != null )
				{
					foreach( var __0x1652 in __0x1644 )
					{
						if( attributeType.IsAssignableFrom( __0x1652.GetType() ) )
							__0x1647.Add( __0x1652 );
					}
				}

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x1645 ) )
						__0x1647.Add( new CategoryAttribute( __0x1645 ) );
				}

				return __0x1647.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x1646;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				bool __0x1648 = !Equals( this.__0x1646, value );

				this.__0x1646 = value;

				if( __0x1648 )
					ValueChanged?.Invoke( this );
			}
		}

		

		public ContentBrowserOptions( ContentBrowser owner )
		{
			this.__0x1639 = owner;

			Configure?.Invoke( this );
		}

		[Browsable( false )]
		public bool DisplayPropertiesEditorSettingsButtons { get; set; } = true;

		[Browsable( false )]
		public bool DisplayPropertiesSortFilesBy { get; set; } = true;

		[Browsable( false )]
		public bool DisplayPropertiesOpenButton { get; set; } = true;

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		protected virtual void MetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
		{
			var __0x1649 = member as Metadata.Property;
			if( __0x1649 != null )
			{
				switch( __0x1649.Name )
				{
				case nameof( PanelMode_Resources ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.Resources )
						skip = true;
					break;
				case nameof( PanelMode_Objects ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.Objects )
						skip = true;
					break;
				case nameof( PanelMode_SetReference ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.SetReference )
						skip = true;
					break;

				case nameof( ListMode ):
				case nameof( TileImageSize ):
				case nameof( ListImageSize ):
				case nameof( ListColumnWidth ):
				case nameof( Breadcrumb ):
					if( PanelMode == ContentBrowser.PanelModeEnum.Tree )
						skip = true;
					break;

				case nameof( EditorButton ):
				case nameof( SettingsButton ):
					if( !DisplayPropertiesEditorSettingsButtons )
						skip = true;
					break;

				case nameof( FilteringModeButton ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.Resources || !AllowFilteringModeButton )
						skip = true;
					break;

				case nameof( MembersButton ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.Objects || !AllowMembersButton )
						skip = true;
					break;

				case nameof( SortFilesBy ):
				case nameof( SortFilesByAscending ):
					if( !DisplayPropertiesSortFilesBy )
						skip = true;
					break;

				case nameof( OpenButton ):
					if( !DisplayPropertiesOpenButton )
						skip = true;
					break;

				case nameof( SearchButton ):
					if( __0x1639.Mode != ContentBrowser.ModeEnum.Objects )
						skip = true;
					break;

				case nameof( SearchBar ):
					skip = true;
					break;

				case nameof( SplitterPosition ):
					if( PanelMode == ContentBrowser.PanelModeEnum.Tree || PanelMode == ContentBrowser.PanelModeEnum.List )
						skip = true;
					break;
				}
			}
		}

		public virtual IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			foreach( var __0x1653 in BaseType.MetadataGetMembers( context ) )
			{
				bool __0x1650 = false;
				if( context == null || context.Filter )
					MetadataGetMembersFilter( context, __0x1653, ref __0x1650 );
				if( !__0x1650 )
					yield return __0x1653;
			}

			foreach( var __0x1654 in __0x1643 )
				yield return __0x1654;
		}

		public virtual Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			var __0x1651 = BaseType.MetadataGetMemberBySignature( signature, context );
			if( __0x1651 != null )
				return __0x1651;

			foreach( var __0x1655 in __0x1643 )
				if( __0x1655.Signature == signature )
					return __0x1655;

			return null;
		}

		public void AddProperty( PropertyImpl property )
		{
			__0x1643.Add( property );
		}

		public void Load( TextBlock block )
		{
			try
			{
				if( block.AttributeExists( nameof( PanelMode ) ) )
					PanelMode = (ContentBrowser.PanelModeEnum)Enum.Parse( typeof( ContentBrowser.PanelModeEnum ), block.GetAttribute( nameof( PanelMode ) ) );
				if( block.AttributeExists( nameof( ListMode ) ) )
					ListMode = (ContentBrowser.ListModeEnum)Enum.Parse( typeof( ContentBrowser.ListModeEnum ), block.GetAttribute( nameof( ListMode ) ) );
				if( block.AttributeExists( nameof( TileImageSize ) ) )
					TileImageSize = int.Parse( block.GetAttribute( nameof( TileImageSize ) ) );
				if( block.AttributeExists( nameof( ListImageSize ) ) )
					ListImageSize = int.Parse( block.GetAttribute( nameof( ListImageSize ) ) );
				if( block.AttributeExists( nameof( ListColumnWidth ) ) )
					ListColumnWidth = int.Parse( block.GetAttribute( nameof( ListColumnWidth ) ) );
				if( block.AttributeExists( nameof( Breadcrumb ) ) )
					Breadcrumb = bool.Parse( block.GetAttribute( nameof( Breadcrumb ) ) );
				if( block.AttributeExists( nameof( SortFilesBy ) ) )
					SortFilesBy = (ContentBrowser.SortByItems)Enum.Parse( typeof( ContentBrowser.SortByItems ), block.GetAttribute( nameof( SortFilesBy ) ) );
				if( block.AttributeExists( nameof( SortFilesByAscending ) ) )
					SortFilesByAscending = bool.Parse( block.GetAttribute( nameof( SortFilesByAscending ) ) );
				if( block.AttributeExists( nameof( FilteringModeButton ) ) )
					FilteringModeButton = bool.Parse( block.GetAttribute( nameof( FilteringModeButton ) ) );
				if( block.AttributeExists( nameof( MembersButton ) ) )
					MembersButton = bool.Parse( block.GetAttribute( nameof( MembersButton ) ) );
				if( block.AttributeExists( nameof( OpenButton ) ) )
					OpenButton = bool.Parse( block.GetAttribute( nameof( OpenButton ) ) );
				if( block.AttributeExists( nameof( EditorButton ) ) )
					EditorButton = bool.Parse( block.GetAttribute( nameof( EditorButton ) ) );
				if( block.AttributeExists( nameof( SettingsButton ) ) )
					SettingsButton = bool.Parse( block.GetAttribute( nameof( SettingsButton ) ) );
				if( block.AttributeExists( nameof( ButtonsForEditing ) ) )
					ButtonsForEditing = bool.Parse( block.GetAttribute( nameof( ButtonsForEditing ) ) );
				if( block.AttributeExists( nameof( SearchButton ) ) )
					SearchButton = bool.Parse( block.GetAttribute( nameof( SearchButton ) ) );
				
				
				

				if( block.AttributeExists( nameof( SplitterPosition ) ) )
					SplitterPosition = double.Parse( block.GetAttribute( nameof( SplitterPosition ) ) );
			}
			catch { }
		}

		public void Save( TextBlock block )
		{
			block.SetAttribute( nameof( PanelMode ), PanelMode.ToString() );
			if( ListMode != ContentBrowser.ListModeEnum.List )
				block.SetAttribute( nameof( ListMode ), ListMode.ToString() );
			if( TileImageSize != __0x1642 )
				block.SetAttribute( nameof( TileImageSize ), TileImageSize.ToString() );
			if( ListImageSize != __0x1640 )
				block.SetAttribute( nameof( ListImageSize ), ListImageSize.ToString() );
			if( ListColumnWidth != __0x1641 )
				block.SetAttribute( nameof( ListColumnWidth ), ListColumnWidth.ToString() );
			if( !Breadcrumb )
				block.SetAttribute( nameof( Breadcrumb ), Breadcrumb.ToString() );
			if( DisplayPropertiesSortFilesBy )
			{
				if( SortFilesBy != ContentBrowser.SortByItems.Name )
					block.SetAttribute( nameof( SortFilesBy ), SortFilesBy.ToString() );
				if( !SortFilesByAscending )
					block.SetAttribute( nameof( SortFilesByAscending ), SortFilesByAscending.ToString() );
			}
			if( __0x1639.Mode == ContentBrowser.ModeEnum.Resources )
			{
				if( !FilteringModeButton )
					block.SetAttribute( nameof( FilteringModeButton ), FilteringModeButton.ToString() );
			}
			if( __0x1639.Mode == ContentBrowser.ModeEnum.Objects )
			{
				if( !MembersButton )
					block.SetAttribute( nameof( MembersButton ), MembersButton.ToString() );
			}
			if( DisplayPropertiesOpenButton )
			{
				if( !OpenButton )
					block.SetAttribute( nameof( OpenButton ), OpenButton.ToString() );
			}
			if( DisplayPropertiesEditorSettingsButtons )
			{
				if( !EditorButton )
					block.SetAttribute( nameof( EditorButton ), EditorButton.ToString() );
				if( !SettingsButton )
					block.SetAttribute( nameof( SettingsButton ), SettingsButton.ToString() );
			}
			if( !ButtonsForEditing )
				block.SetAttribute( nameof( ButtonsForEditing ), ButtonsForEditing.ToString() );
			if( __0x1639.Mode == ContentBrowser.ModeEnum.Objects )
			{
				if( !SearchButton )
					block.SetAttribute( nameof( SearchButton ), SearchButton.ToString() );
			}

			
			if( !SearchBar )
				block.SetAttribute( nameof( SearchBar ), SearchBar.ToString() );

			block.SetAttribute( nameof( SplitterPosition ), SplitterPosition.ToString() );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ContentBrowserOptionsForm : EngineForm
	{
		public ContentBrowserOptionsForm( ContentBrowser browser )
		{
			Browser = browser;

			__0x1667();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = EditorLocalization.Translate( "ContentBrowser", Text );
			EditorLocalization.TranslateForm( "ContentBrowser", this );

			__0x1660.OverridePropertyDisplayName += __0x1664;
			__0x1660.OverridePropertyEnumItem += __0x1665;

			if( EditorLocalization.WideLanguage )
				__0x1660.SplitterRatio = 0.5f;

			if( Browser != null )
			{
				object[] __0x1658 = new object[ 1 ];
				__0x1658[ 0 ] = Browser.Options;
				__0x1660.SetData( null, __0x1658 );

				
				__0x1660.UpdateItems();
			}
		}

		[Browsable( false )]
		public ContentBrowser Browser { get; set; }

		private void __0x1662( object __0x1668, EventArgs __0x1669 )
		{
			__0x1666();

			
			
			
			
			
			
		}

		private void __0x1663( object __0x1670, EventArgs __0x1671 )
		{
			Close();
		}

		private void __0x1664( HierarchicalContainer __0x1672, HCItemProperty __0x1673, ref string __0x1674 )
		{
			__0x1674 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1674 );
		}

		private void __0x1665( HierarchicalContainer __0x1675, HCItemEnumDropDown __0x1676, ref string __0x1677, ref string __0x1678 )
		{
			__0x1677 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1677 );
			__0x1678 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1678 );
		}

		void __0x1666()
		{
			__0x1661.Location = new Point( ClientSize.Width - __0x1661.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x1661.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x1660.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x1660.Location.X, __0x1661.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x1660.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x1666();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class ContentBrowserOptionsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1659 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1659 != null ) )
			{
				__0x1659.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1667()
		{
			this.__0x1660 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x1661 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x1660.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x1660.DisplayGroups = false;
			this.__0x1660.Location = new System.Drawing.Point(0, 14);
			this.__0x1660.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1660.Name = "hierarchicalContainer1";
			this.__0x1660.Size = new System.Drawing.Size(550, 407);
			this.__0x1660.SplitterPosition = 220;
			this.__0x1660.SplitterRatio = 0.4F;
			this.__0x1660.TabIndex = 0;
			
			
			
			
			this.__0x1661.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x1661.Location = new System.Drawing.Point(433, 431);
			this.__0x1661.Name = "buttonClose";
			this.__0x1661.Size = new System.Drawing.Size(117, 32);
			this.__0x1661.TabIndex = 1;
			this.__0x1661.Values.Text = "Close";
			this.__0x1661.Click += new System.EventHandler(this.__0x1663);
			
			
			
			this.AcceptButton = this.__0x1661;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x1661;
			this.ClientSize = new System.Drawing.Size(562, 475);
			this.Controls.Add(this.__0x1661);
			this.Controls.Add(this.__0x1660);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ContentBrowserOptionsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Content Browser Options";
			this.Load += new System.EventHandler(this.__0x1662);
			this.ResumeLayout(false);

		}

		#endregion

		private HierarchicalContainer __0x1660;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x1661;
	}
}




namespace NeoAxis.Editor
{
	public partial class ContentBrowserSearchForm : EngineForm
	{
		public ContentBrowserSearchForm()
		{
			__0x1695();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			Text = EditorLocalization.Translate( "ContentBrowser.SearchForm", Text );
			EditorLocalization.TranslateForm( "ContentBrowser.SearchForm", this );
		}

		[Browsable( false )]
		public ContentBrowser Browser { get; set; }

		private void __0x1690( object __0x1696, EventArgs __0x1697 )
		{
			__0x1694();
		}

		private void __0x1691( object __0x1698, EventArgs __0x1699 )
		{
			Close();
		}

		static bool __0x1692( string __0x1700, string __0x1701 )
		{
			if( string.IsNullOrEmpty( __0x1701 ) )
				return true;

			return __0x1700.ToLower().Contains( __0x1701.ToLower() );

			
			

			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
		}

		private void __0x1693( object __0x1702, EventArgs __0x1703 )
		{
			var __0x1679 = Browser.RootObject as Component;
			if( __0x1679 == null )
				return;

			string __0x1680 = __0x1687.Text.Trim();
			
			

			var __0x1681 = new ESet<Component>();

			if( ModifierKeys.HasFlag( Keys.Shift ) )
			{
				foreach( var __0x1688 in Browser.SelectedItems.OfType<ContentBrowserItem_Component>() )
					__0x1681.Add( __0x1688.Component );
			}

			

			var __0x1682 = new List<Component>( 256 );
			__0x1682.Add( __0x1679 );
			__0x1682.AddRange( __0x1679.GetComponents( checkChildren: true ) );

			
			
			

			foreach( var __0x1689 in __0x1682 )
			{
				
				if( __0x1692( __0x1689.Name, __0x1680 ) )
				{
					
					
					

					
					
					
					
					
					
					

					__0x1681.AddWithCheckAlreadyContained( __0x1689 );
				}
			}

			ContentBrowserUtility.SelectComponentItems( Browser, __0x1681.ToArray() );
		}

		void __0x1694()
		{
			__0x1684.Location = new Point( ClientSize.Width - __0x1684.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x1684.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x1685.Location = new Point( __0x1684.Location.X - __0x1685.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x1684.Location.Y );
			__0x1687.Width = ClientSize.Width - __0x1687.Location.X - DpiHelper.Default.ScaleValue( 12 );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x1694();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class ContentBrowserSearchForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1683 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1683 != null ) )
			{
				__0x1683.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1695()
		{
			this.__0x1684 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x1685 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x1687 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x1686 = new NeoAxis.Editor.EngineLabel();
			this.SuspendLayout();
			
			
			
			
			this.__0x1684.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x1684.Location = new System.Drawing.Point(433, 431);
			this.__0x1684.Name = "buttonClose";
			this.__0x1684.Size = new System.Drawing.Size(117, 32);
			this.__0x1684.TabIndex = 2;
			this.__0x1684.Values.Text = "Close";
			this.__0x1684.Click += new System.EventHandler(this.__0x1691);
			
			
			
			
			this.__0x1685.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x1685.Location = new System.Drawing.Point(310, 431);
			this.__0x1685.Name = "kryptonButtonSearch";
			this.__0x1685.Size = new System.Drawing.Size(117, 32);
			this.__0x1685.TabIndex = 1;
			this.__0x1685.Values.Text = "Search";
			this.__0x1685.Click += new System.EventHandler(this.__0x1693);
			
			
			
			
   
			this.__0x1687.Location = new System.Drawing.Point(12, 37);
			this.__0x1687.Name = "kryptonTextBoxFilterByName";
			this.__0x1687.Size = new System.Drawing.Size(538, 23);
			this.__0x1687.TabIndex = 0;
			this.__0x1687.Text = "Light";
			
			
			
			this.__0x1686.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x1686.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x1686.Location = new System.Drawing.Point(12, 12);
			this.__0x1686.Name = "labelEx1";
			this.__0x1686.Size = new System.Drawing.Size(538, 23);
			this.__0x1686.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x1686.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x1686.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x1686.StateCommon.Border.ImageStyle = Internal.ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x1686.TabIndex = 7;
			this.__0x1686.Text = "Filter by name:";
			
			
			
			this.AcceptButton = this.__0x1685;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x1684;
			this.ClientSize = new System.Drawing.Size(562, 475);
			this.Controls.Add(this.__0x1687);
			this.Controls.Add(this.__0x1686);
			this.Controls.Add(this.__0x1685);
			this.Controls.Add(this.__0x1684);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ContentBrowserSearchForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Search";
			this.Load += new System.EventHandler(this.__0x1690);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x1684;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x1685;
		private EngineLabel __0x1686;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x1687;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="ContentBrowser"/>.
	/// </summary>
	static class ContentBrowserUtility
	{
		static __0x1766 __0x1704 = new __0x1766();

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		

		
		
		


		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		

		
		

		
		

		static ContentBrowserItem_Component.ReferenceSelectionModeEnum __0x1757( ContentBrowserItem_Component __0x1760 )
		{
			var __0x1705 = __0x1760;
			do
			{
				if( __0x1705.ReferenceSelectionMode != ContentBrowserItem_Component.ReferenceSelectionModeEnum.None )
					return __0x1705.ReferenceSelectionMode;
				__0x1705 = __0x1705.Parent as ContentBrowserItem_Component;
			} while( __0x1705 != null );

			return ContentBrowserItem_Component.ReferenceSelectionModeEnum.None;
		}

		public static void CalculateReferenceValueForComponentItem( Component from, ContentBrowserItem_Component item, out string referenceValue, out char addSeparator )
		{
			Component __0x1706 = item.Component;

			
			if( from == null || from.ParentRoot != __0x1706.ParentRoot )
			{
				
				
				
				ReferenceUtility.CalculateResourceReference( __0x1706, "", out referenceValue, out addSeparator );
				return;
			}

			
			{
				var __0x1707 = __0x1757( item );

				if( __0x1707 == ContentBrowserItem_Component.ReferenceSelectionModeEnum.This )
				{
					ReferenceUtility.CalculateThisReference( from, __0x1706, "", out referenceValue, out addSeparator );
					return;
				}
				else if( __0x1707 == ContentBrowserItem_Component.ReferenceSelectionModeEnum.Root )
				{
					ReferenceUtility.CalculateRootReference( __0x1706, "", out referenceValue, out addSeparator );
					return;
				}
			}

			
			{
				
				
				

				var __0x1708 = new List<ContentBrowserItem_Component>();
				ContentBrowser.Item __0x1709 = null;
				{
					ContentBrowser.Item __0x1710 = item;
					do
					{
						if( __0x1710 is ContentBrowserItem_Component )
						{
							if( __0x1710.Parent != null )
								__0x1708.Add( (ContentBrowserItem_Component)__0x1710 );
						}
						else if( __0x1710 is ContentBrowserItem_Type || __0x1710 is ContentBrowserItem_File )
						{
							__0x1709 = __0x1710;
							break;
						}
						else
							Log.Fatal( "ContentBrowserUtils: CalculateReferenceValueForComponentItem: Internal error." );

						__0x1710 = __0x1710.Parent;
					} while( __0x1710 != null );

					__0x1708.Reverse();
				}

				var __0x1711 = new StringBuilder();

				
				if( __0x1709 != null )
				{
					

					var __0x1712 = __0x1709 as ContentBrowserItem_File;
					if( __0x1712 != null )
						__0x1711.Append( VirtualPathUtility.GetVirtualPathByReal( __0x1712.FullPath ) );

					var __0x1713 = __0x1709 as ContentBrowserItem_Type;
					if( __0x1713 != null )
						__0x1711.Append( __0x1713.Type.Name );

					addSeparator = '|';
				}
				else
				{
					
					__0x1711.Append( "root:" );
					addSeparator = '\0';
				}

				
				foreach( var __0x1749 in __0x1708 )
				{
					if( addSeparator != '\0' )
						__0x1711.Append( addSeparator );
					__0x1711.Append( __0x1749.Component.GetPathFromParent() );
					addSeparator = '\\';
				}

				referenceValue = __0x1711.ToString();
			}
		}

		public static string CalculateReferenceValueForComponentItem( Component from, ContentBrowserItem_Component item )
		{
			CalculateReferenceValueForComponentItem( from, item, out string referenceValue, out char addSeparator );
			return referenceValue;

			

			
			
			

			
			
			
			
			

			
			
		}

		public static void CalculateReferenceValueForMemberItem( Component from, Metadata.TypeInfo expectedType, ContentBrowserItem_Member item, out string referenceValue, out char addSeparator )
		{
			var __0x1714 = new List<ContentBrowserItem_Member>();
			ContentBrowser.Item __0x1715 = null;
			{
				ContentBrowser.Item __0x1716 = item;
				do
				{
					if( __0x1716 is ContentBrowserItem_Member )
					{
						__0x1714.Add( (ContentBrowserItem_Member)__0x1716 );
					}
					else if( __0x1716 is ContentBrowserItem_Type || __0x1716 is ContentBrowserItem_File || __0x1716 is ContentBrowserItem_Component )
					{
						__0x1715 = __0x1716;
						break;
					}
					else
						Log.Fatal( "ContentBrowserUtils: CalculateReferenceValueForMemberItem: Internal error." );

					__0x1716 = __0x1716.Parent;
				} while( __0x1716 != null );

				__0x1714.Reverse();
			}

			var __0x1717 = new StringBuilder();
			

			if( __0x1715 is ContentBrowserItem_Component )
			{
				
				var __0x1718 = (ContentBrowserItem_Component)__0x1715;
				CalculateReferenceValueForComponentItem( from, __0x1718, out string referenceValue2, out addSeparator );
				__0x1717.Append( referenceValue2 );
			}
			else
			{
				

				var __0x1719 = __0x1715 as ContentBrowserItem_File;
				if( __0x1719 != null )
					__0x1717.Append( VirtualPathUtility.GetVirtualPathByReal( __0x1719.FullPath ) );

				var __0x1720 = __0x1715 as ContentBrowserItem_Type;
				if( __0x1720 != null )
					__0x1717.Append( __0x1720.Type.Name );

				addSeparator = '|';
			}

			
			foreach( var __0x1750 in __0x1714 )
			{
				if( addSeparator != '\0' )
					__0x1717.Append( addSeparator );

				var __0x1721 = __0x1750.Member;
				if( expectedType != null && MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( expectedType ) )
					__0x1717.Append( __0x1721.Signature );
				else
					__0x1717.Append( __0x1721.Name );

				addSeparator = '\\';
			}

			referenceValue = __0x1717.ToString();
			
		}

		public static string CalculateReferenceValueForMemberItem( Component from, Metadata.TypeInfo expectedType, ContentBrowserItem_Member item )
		{
			CalculateReferenceValueForMemberItem( from, expectedType, item, out string referenceValue, out _ );
			return referenceValue;
		}

		static int __0x1758( Metadata.Member __0x1761 )
		{
			

			if( __0x1761 is Metadata.Property )
				return 0;
			if( __0x1761 is Metadata.Method )
			{
				if( ( (Metadata.Method)__0x1761 ).Constructor )
					return 1;
				else
					return 2;
			}
			if( __0x1761 is Metadata.Event )
				return 3;

			return 100;
		}

		public static void SortMemberItems( List<Metadata.Member> members )
		{
			CollectionUtility.MergeSort( members, delegate ( Metadata.Member __0x1762, Metadata.Member __0x1763 )
			{
				int __0x1722 = __0x1758( __0x1762 );
				int __0x1723 = __0x1758( __0x1763 );
				if( __0x1722 < __0x1723 )
					return -1;
				if( __0x1722 > __0x1723 )
					return 1;

				if( __0x1762.Static && !__0x1763.Static )
					return -1;
				if( !__0x1762.Static && __0x1763.Static )
					return 1;

				return string.Compare( __0x1762.Name + "z", __0x1763.Name + "z" );
			} );
		}

		public static bool ContentBrowserSetReferenceModeCheckAllowAddMember( Metadata.TypeInfo propertyTypeUnreferenced, Metadata.Member member,
			bool staticForDefaultBehaviour )
		{
			var __0x1724 = propertyTypeUnreferenced;

			
			
			
			
			
			

			
			if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( __0x1724 ) )
			{
				if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Method ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Method )
						return true;
				}
				else if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Property ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Property )
						return true;
				}
				else if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Event ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Event )
						return true;
				}
				else
					return true;
			}

			
			if( staticForDefaultBehaviour == member.Static )
			{
				if( member is Metadata.Property )
				{
					
					var __0x1725 = (Metadata.Property)member;
					if( !__0x1725.HasIndexers )
						return true;
				}
				else if( member is Metadata.Method )
				{
					
					var __0x1726 = (Metadata.Method)member;
					if( __0x1726.Parameters.Length == 1 && __0x1726.GetReturnParameters().Length == 1 )
						return true;
				}
			}

			return false;
		}

		class __0x1766
		{
			public Dictionary<Type, bool> classes = new Dictionary<Type, bool>();
		}

		public static bool ContainsComponentClasses( Type type )
		{
			lock( __0x1704 )
			{
				var __0x1727 = __0x1704;

				bool __0x1728;
				if( !__0x1727.classes.TryGetValue( type, out __0x1728 ) )
				{
					__0x1728 = typeof( Component ).IsAssignableFrom( type );
					if( !__0x1728 )
					{
						foreach( var __0x1751 in type.GetNestedTypes( BindingFlags.Public ) )
						{
							if( ContainsComponentClasses( __0x1751 ) )
							{
								__0x1728 = true;
								break;
							}
						}
					}

					__0x1727.classes[ type ] = __0x1728;
				}

				return __0x1728;
			}
		}

		public static bool ContainsType( Type seekingType, Type type )
		{
			

			var __0x1729 = seekingType.IsAssignableFrom( type );
			if( !__0x1729 )
			{
				foreach( var __0x1752 in type.GetNestedTypes( BindingFlags.Public ) )
				{
					if( ContainsType( seekingType, __0x1752 ) )
					{
						__0x1729 = true;
						break;
					}
				}
			}
			return __0x1729;
		}

		static ContentBrowserItem_File __0x1759( ContentBrowser __0x1764, string __0x1765 )
		{
			foreach( var __0x1753 in __0x1764.GetAllItems() )
			{
				var __0x1730 = __0x1753 as ContentBrowserItem_File;
				if( __0x1730 != null && string.Compare( __0x1730.FullPath, __0x1765, true ) == 0 )
				{
					
					if( __0x1730.Parent as ContentBrowserItem_Favorites == null )
						return __0x1730;
				}
			}
			return null;
		}

		public static ContentBrowserItem_File GetItemByRealFilePath_WithCreationNotCreatedItems( ContentBrowser browser, string realPath )
		{
			if( browser.DataItem == null )
				return null;
			if( !VirtualPathUtility.GetVirtualPathByReal( realPath, out var virtualPath ) )
				return null;
			if( string.IsNullOrEmpty( virtualPath ) )
				return browser.DataItem;

			

			browser.SelectItems( new ContentBrowser.Item[] { browser.DataItem }, true );

			var __0x1731 = virtualPath.Split( new char[] { '\\', '/' } );
			var __0x1732 = VirtualFileSystem.Directories.Assets;
			for( int __0x1733 = 0; __0x1733 < __0x1731.Length; __0x1733++ )
			{
				var __0x1734 = __0x1731[ __0x1733 ];
				bool __0x1735 = __0x1733 == __0x1731.Length - 1;

				__0x1732 = Path.Combine( __0x1732, __0x1734 );

				var __0x1736 = __0x1759( browser, __0x1732 );
				if( __0x1736 == null )
					return null;

				if( !__0x1735 )
					browser.SelectItems( new ContentBrowser.Item[] { __0x1736 }, true );
				else
					return __0x1736;
			}
			return null;
		}

		public static bool SelectFileItems( ContentBrowser browser, string[] realPaths, bool expandNodes )
		{
			var __0x1737 = new List<ContentBrowserItem_File>();
			foreach( var __0x1754 in realPaths )
			{
				var __0x1738 = GetItemByRealFilePath_WithCreationNotCreatedItems( browser, __0x1754 );
				if( __0x1738 == null )
					return false;
				__0x1737.Add( __0x1738 );
			}
			browser.SelectItems( __0x1737.ToArray(), expandNodes, true );
			return true;
		}

		public static ContentBrowserItem_Component GetItemByComponent_WithCreationNotCreatedItems( ContentBrowser browser, Component component )
		{
			var __0x1739 = new Stack<Component>();
			{
				var __0x1740 = component.Parent;
				while( __0x1740 != null )
				{
					__0x1739.Push( __0x1740 );

					var __0x1741 = browser.FindItemByContainedObject( __0x1740 ) as ContentBrowserItem_Component;
					if( __0x1741 != null )
						break;

					__0x1740 = __0x1740.Parent;
				}
			}

			
			while( __0x1739.Count != 0 )
			{
				var __0x1742 = __0x1739.Pop();
				var __0x1743 = browser.FindItemByContainedObject( __0x1742 ) as ContentBrowserItem_Component;
				if( __0x1743 != null )
					browser.SelectItems( new ContentBrowser.Item[] { __0x1743 }, true );
			}

			return browser.FindItemByContainedObject( component ) as ContentBrowserItem_Component;
		}

		public static void SelectComponentItems( ContentBrowser browser, Component[] components )
		{
			var __0x1744 = new List<ContentBrowserItem_Component>();
			foreach( var __0x1755 in components )
			{
				var __0x1745 = GetItemByComponent_WithCreationNotCreatedItems( browser, __0x1755 );
				if( __0x1745 != null )
					__0x1744.Add( __0x1745 );
			}
			if( __0x1744.Count != 0 )
				browser.SelectItems( __0x1744.ToArray(), false, true );
		}

		

		public static bool allContentBrowsers_SuspendChildrenChangedEvent;
		public static ESet<(ContentBrowser, ContentBrowser.Item)> allContentBrowsers_SuspendChildrenChangedEvent_Items = new ESet<(ContentBrowser, ContentBrowser.Item)>();

		public static void AllContentBrowsers_SuspendChildrenChangedEvent()
		{
			allContentBrowsers_SuspendChildrenChangedEvent = true;
		}

		public static void AllContentBrowsers_ResumeChildrenChangedEvent()
		{
			allContentBrowsers_SuspendChildrenChangedEvent = false;

			var __0x1746 = allContentBrowsers_SuspendChildrenChangedEvent_Items.ToArray();
			allContentBrowsers_SuspendChildrenChangedEvent_Items.Clear();
			foreach( var __0x1756 in __0x1746 )
			{
				var __0x1747 = __0x1756.Item1;
				var __0x1748 = __0x1756.Item2;

				__0x1747.Item_ChildrenChanged( __0x1748 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Debug Info Window.
	/// </summary>
	public partial class DebugInfoWindow : DockWindow
	{
		string __0x1767 = "";

		List<ContentBrowser.Item> __0x1768 = new List<ContentBrowser.Item>();

		
		

		
		
		

		

		public DebugInfoWindow()
		{
			__0x1789();

			__0x1781.RemoveTreeViewIconsColumn();

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x1783( object __0x1790, PreviewKeyDownEventArgs __0x1791 )
		{
			
			
			
		}

		
		
		
		

		private void __0x1784( object __0x1792, EventArgs __0x1793 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			
			__0x1785();

			__0x1780.Start();
		}

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		void __0x1785()
		{
			var __0x1769 = new List<ContentBrowser.Item>();

			ContentBrowserItem_Virtual __0x1770 = null;

			foreach( var __0x1782 in DebugInfo.AllPages )
			{
				var __0x1771 = new ContentBrowserItem_Virtual( __0x1779, null, EditorLocalization.Translate( "DebugInfoWindow", __0x1782.Title ) );
				__0x1771.Tag = __0x1782;
				__0x1769.Add( __0x1771 );

				if( __0x1770 == null )
					__0x1770 = __0x1771;
			}

			__0x1779.SetData( __0x1769, false );
			__0x1779.SelectItems( new ContentBrowser.Item[] { __0x1770 } );
		}

		private void __0x1786( ContentBrowser __0x1794, IList<ContentBrowser.Item> __0x1795, bool __0x1796, ref bool __0x1797 )
		{
			__0x1788();
		}

		private void __0x1787( object __0x1798, EventArgs __0x1799 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x1788();
		}

		void __0x1788()
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			var __0x1772 = new List<string>();
			if( __0x1779.SelectedItems.Length != 0 )
			{
				var __0x1773 = (DebugInfo)( (ContentBrowserItem_Virtual)__0x1779.SelectedItems[ 0 ] ).Tag;
				__0x1772 = __0x1773.Content;
			}

			if( __0x1768 == null || __0x1768.Count != __0x1772.Count )
			{
				__0x1768 = new List<ContentBrowser.Item>();
				for( int __0x1774 = 0; __0x1774 < __0x1772.Count; __0x1774++ )
				{
					var __0x1775 = new ContentBrowserItem_Virtual( __0x1781, null, __0x1772[ __0x1774 ] );
					__0x1768.Add( __0x1775 );
				}
				__0x1781.SetData( __0x1768, false );
			}
			else
			{
				for( int __0x1776 = 0; __0x1776 < __0x1772.Count; __0x1776++ )
					( (ContentBrowserItem_Virtual)__0x1768[ __0x1776 ] ).SetText( __0x1772[ __0x1776 ] );
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DebugInfoWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1777 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1777 != null ) )
			{
				__0x1777.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1789()
		{
			this.__0x1777 = new System.ComponentModel.Container();
			this.__0x1778 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x1779 = new NeoAxis.Editor.ContentBrowser();
			this.__0x1781 = new NeoAxis.Editor.ContentBrowser();
			this.__0x1780 = new System.Windows.Forms.Timer(this.__0x1777);
			((System.ComponentModel.ISupportInitialize)(this.__0x1778)).BeginInit();
			this.__0x1778.Panel1.SuspendLayout();
			this.__0x1778.Panel2.SuspendLayout();
			this.__0x1778.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x1778.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1778.Location = new System.Drawing.Point(0, 0);
			this.__0x1778.Name = "splitContainer1";
			
			
			
			this.__0x1778.Panel1.Controls.Add(this.__0x1779);
			
			
			
			this.__0x1778.Panel2.Controls.Add(this.__0x1781);
			this.__0x1778.Size = new System.Drawing.Size(625, 442);
			this.__0x1778.SplitterDistance = 168;
			this.__0x1778.SplitterPercent = 0.3;
			this.__0x1778.TabIndex = 0;
			
			
			
			this.__0x1779.CanSelectObjectSettings = false;
			this.__0x1779.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1779.FilteringMode = null;
			this.__0x1779.Location = new System.Drawing.Point(0, 0);
			this.__0x1779.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1779.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x1779.Name = "contentBrowserList";
			this.__0x1779.ReadOnlyHierarchy = false;
			this.__0x1779.ShowToolBar = false;
			this.__0x1779.Size = new System.Drawing.Size(168, 442);
			this.__0x1779.TabIndex = 0;
			this.__0x1779.ThisIsSettingsWindow = false;
			this.__0x1779.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x1786);
			
			
			
			this.__0x1781.CanSelectObjectSettings = false;
			this.__0x1781.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1781.FilteringMode = null;
			this.__0x1781.Location = new System.Drawing.Point(0, 0);
			this.__0x1781.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1781.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x1781.Name = "contentBrowserData";
			this.__0x1781.ReadOnlyHierarchy = false;
			this.__0x1781.ShowToolBar = false;
			this.__0x1781.Size = new System.Drawing.Size(453, 442);
			this.__0x1781.TabIndex = 1;
			this.__0x1781.ThisIsSettingsWindow = false;
			
			
			
			this.__0x1780.Interval = 500;
			this.__0x1780.Tick += new System.EventHandler(this.__0x1787);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x1778);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "DebugInfoWindow";
			this.Size = new System.Drawing.Size(625, 442);
			this.WindowTitle = "Debug Info";
			this.Load += new System.EventHandler(this.__0x1784);
			this.__0x1778.Panel1.ResumeLayout(false);
			this.__0x1778.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x1778)).EndInit();
			this.__0x1778.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x1778;
		private ContentBrowser __0x1779;
		private System.Windows.Forms.Timer __0x1780;
		private ContentBrowser __0x1781;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a docking window of the editor.
	/// </summary>
	public partial class DockWindow : EUserControl
	{
		string __0x1800 = "";
		Image __0x1801;

		[Browsable( false )]
		public EDialogResult? ShowDialogAndSaveDocumentAutoAnswer { get; set; }

		
		

		
		
		

		

		public DockWindow()
		{
			__0x1812();

			if( IsDesignerHosted )
				return;

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			
			
			
			
		}

		
		public virtual bool HideOnRemoving { get { return false; } }

		
		internal virtual bool IsSystemWindow { get { return  HideOnRemoving; } }

		public bool CloseByEscape { get; set; }

		protected override void OnDestroy()
		{
			

			if( __0x1808 != null )
			{
				__0x1808.Dispose();
				__0x1808 = null;
			}

			base.OnDestroy();
		}

		[Browsable( false )]
		internal KryptonPage KryptonPage
		{
			get { return Parent as KryptonPage; }
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			if( KryptonPage != null )
			{
				if( Parent != null )
					UpdateWindowTitle();

				KryptonPage.Text = __0x1800;
				KryptonPage.TextTitle = __0x1800;
				
				KryptonPage.VisibleChanged += ( __0x1813, __0x1814 ) => { Visible = ( (KryptonPage)__0x1813 ).LastVisibleSet; };
				KryptonPage.ParentChanged += __0x1811;
			}
		}

		public string WindowTitle
		{
			get { return __0x1800; }
			set
			{
				if( __0x1800 == value )
					return;
				__0x1800 = value;

				if( KryptonPage != null )
				{
					KryptonPage.Text = __0x1800;
					KryptonPage.TextTitle = __0x1800;
					
				}
			}
		}

		protected virtual string GetResultWindowTitle()
		{
			return WindowTitle;
		}

		public void UpdateWindowTitle()
		{
			WindowTitle = GetResultWindowTitle();
		}

		public virtual Image WindowImage
		{
			get { return __0x1801; }
			set
			{
				if( __0x1801 == value )
					return;
				__0x1801 = value;

				
			}
		}

		internal protected virtual void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
		}

		private void __0x1809( object __0x1815, EventArgs __0x1816 )
		{
			if( IsDesignerHosted )
				return;

			__0x1808?.Start();
		}

		private void __0x1810( object __0x1817, EventArgs __0x1818 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			UpdateWindowTitle();
		}

		internal void CalculateBigSizeForFloatingWindowDependingScreenSize( out Point position, out Size size )
		{
			

			var __0x1802 = SystemSettings.AllDisplays.FirstOrDefault( __0x1819 => __0x1819.Primary ) ?? SystemSettings.AllDisplays[ 0 ];
			var __0x1803 = new Vector2I( __0x1802.WorkingArea.Size.X, __0x1802.WorkingArea.Size.Y );
			

			double __0x1804 = 1.45;
			double __0x1805 = 0.8;

			
			if( this is SetReferenceWindow || this is SelectTypeWindow )
			{
				__0x1804 = 1;
				__0x1805 = .7;
			}
			
			
			
			
			

			size = new Size( (int)( (double)__0x1803.Y * __0x1804 * __0x1805 ), (int)( (double)__0x1803.Y * __0x1805 ) );
			var __0x1806 = ( __0x1803 - new Vector2I( size.Width, size.Height ) ) / 2;
			position = new Point( __0x1806.X, __0x1806.Y );

			
			
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		
		

		public override string ToString()
		{
			return this.GetType().Name + ": " + GetResultWindowTitle();
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( CloseByEscape && keyData == Keys.Escape )
			{
				Close();
				return true;
			}
			return base.ProcessCmdKey( ref msg, keyData );
		}

		public void Close()
		{
			EditorForm.Instance?.WorkspaceController.CloseDockWindow( this );
		}

		public virtual ObjectsInFocus GetObjectsInFocus()
		{
			return null;
		}

		
		
		

		
		
		

		protected virtual void OnKryptonPageParentChanged() { }

		private void __0x1811( object __0x1820, EventArgs __0x1821 )
		{
			OnKryptonPageParentChanged();
		}

		public virtual Vector2I DefaultAutoHiddenSlideSize
		{
			get { return ( new Vector2( 280, 200 ) * EditorAPI.DPIScale ).ToVector2I(); }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DockWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1807 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1807 != null ) )
			{
				__0x1807.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1812()
		{
			this.__0x1807 = new System.ComponentModel.Container();
			this.__0x1808 = new System.Windows.Forms.Timer(this.__0x1807);
			this.SuspendLayout();
			
			
			
			this.__0x1808.Interval = 10;
			this.__0x1808.Tick += new System.EventHandler(this.__0x1810);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Name = "DockWindow";
			this.Load += new System.EventHandler(this.__0x1809);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x1808;
	}
}





namespace NeoAxis.Editor
{
	public class DockWindowEventArgs : EventArgs
	{
		public DockWindow DockWindow { get; set; }
		public DockWindowEventArgs(DockWindow dockWindow)
		{
			DockWindow = dockWindow;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class DocumentationLinksManager
	{
		static Dictionary<Type, string> __0x1822 = new Dictionary<Type, string>();

		

		public static void AddNameByType( Type type, string name )
		{
			__0x1822[ type ] = name;
		}

		public static string GetNameForType( Type type )
		{
			if( __0x1822.TryGetValue( type, out var name ) )
				return name;
			return "";
		}

		public static string GetFullLinkForType( Type type )
		{
			var __0x1823 = GetNameForType( type );
			if( !string.IsNullOrEmpty( __0x1823 ) )
			{
				var __0x1824 = __0x1823.Replace( ' ', '_' );
				return $"https://www.neoaxis.com/docs/html/{__0x1824}.htm";
			}
			return "";
		}
	}
}





namespace NeoAxis.Editor
{
	public class DocumentInstance
	{
		string __0x1825;
		Resource.Instance __0x1826;
		string __0x1827;
		bool __0x1828;
		UndoSystem __0x1829;
		bool __0x1830 = true;
		bool __0x1831;

		List<double> __0x1832 = new List<double>();

		

		public DocumentInstance( string realFileName, Resource.Instance loadedResource, string specialMode )
		{
			this.__0x1825 = realFileName;
			this.__0x1826 = loadedResource;
			this.__0x1827 = specialMode;

			
			__0x1829 = new UndoSystem( 32 );
			__0x1829.ListOfActionsChanged += __0x1861;
		}

		public string RealFileName
		{
			get { return __0x1825; }
		}

		public string Name
		{
			get { return PathUtility.GetFileName( RealFileName ); }
		}

		
		
		
		
		

		public Resource.Instance LoadedResource
		{
			get { return __0x1826; }
		}

		public string SpecialMode
		{
			get { return __0x1827; }
		}

		public Component ResultComponent
		{
			get { return __0x1826?.ResultComponent; }
		}

		public object ResultObject
		{
			get { return __0x1826?.ResultObject; }
		}

		public bool IsEditorDocumentConfigurationExist
		{
			get { return ResultComponent?.EditorDocumentConfiguration != null; }
		}

		
		
		

		public bool Modified
		{
			get { return __0x1828; }
			set
			{
				__0x1828 = value;
				

				
				
				
			}
		}

		public UndoSystem UndoSystem
		{
			get { return __0x1829; }
		}

		public bool AllowUndoRedo
		{
			get { return __0x1830; }
			set { __0x1830 = value; }
		}

		public bool Destroyed
		{
			get { return __0x1831; }
		}

		public void Destroy()
		{
			if( __0x1831 )
				return;
			__0x1831 = true;

			if( __0x1829 != null )
				__0x1829.Dispose();

			EditorForm.instance?.Documents.Remove( this );

			__0x1826?.Dispose();
			__0x1826 = null;
		}

		
		
		

		
		
		
		
		
		
		
		
		
		

		public virtual bool CanSaveAs()
		{
			
			
			
			
			
			
			
			
			

			if( LoadedResource != null && LoadedResource.ResultComponent != null && LoadedResource.Owner.LoadFromFile )
			{
				if( !string.IsNullOrEmpty( LoadedResource.Owner.GetSaveAddFileExtension() ) )
					return false;
			}

			return true;
		}

		public delegate void SaveEventDelegate( DocumentInstance __0x1862, string __0x1863, ref bool __0x1864, ref bool __0x1865 );
		public event SaveEventDelegate SaveEvent;

		protected virtual bool OnSave( string saveAsFileName )
		{
			
			{
				bool __0x1833 = false;
				bool __0x1834 = false;
				SaveEvent?.Invoke( this, saveAsFileName, ref __0x1833, ref __0x1834 );
				if( __0x1833 )
					return __0x1834;
			}

			
			if( LoadedResource != null && LoadedResource.ResultComponent != null && LoadedResource.Owner.LoadFromFile )
			{
				string __0x1835;
				string __0x1836;
				if( !string.IsNullOrEmpty( saveAsFileName ) )
				{
					__0x1835 = saveAsFileName;
					__0x1836 = saveAsFileName;
				}
				else
				{
					__0x1835 = VirtualPathUtility.GetRealPathByVirtual( LoadedResource.Owner.Name );
					__0x1836 = __0x1835 + LoadedResource.Owner.GetSaveAddFileExtension();
					
					
				}

				

				var __0x1837 = (WorkspaceControllerForForm)EditorForm.instance.WorkspaceController;
				__0x1860( __0x1837 );

				string __0x1838;
				if( !ComponentUtility.SaveComponentToFile( LoadedResource.ResultComponent, __0x1836, null, out __0x1838 ) )
				{
					
					Log.Error( __0x1838 );
					return false;
				}

				PreviewImagesManager.AddResourceToProcess( __0x1835 );

				return true;
			}
			else
			{
				
				Log.Warning( "impl" );
			}

			return false;
		}

		
		public bool Save( string saveAsFileName = null, bool setModifiedFlag = true )
		{
			if( !OnSave( saveAsFileName ) )
				return false;

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The document was saved successfully." ) );

			if( setModifiedFlag )
				Modified = false;

			return true;
		}

		public virtual void EditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Save":
				if( !string.IsNullOrEmpty( RealFileName ) )
					context.Enabled = true;
				break;

			case "Save As":
				if( !string.IsNullOrEmpty( RealFileName ) )
					context.Enabled = CanSaveAs();
				break;

			case "Undo":
				context.Enabled = AllowUndoRedo && __0x1829 != null && __0x1829.GetTopUndoAction() != null;
				break;

			case "Redo":
				context.Enabled = AllowUndoRedo && __0x1829 != null && __0x1829.GetTopRedoAction() != null;
				break;

			case "Play":
				{
					var __0x1839 = LoadedResource?.ResultComponent;
					if( __0x1839 != null && RunSimulation.CheckTypeSupportedByPlayer( __0x1839.BaseType ) )
						context.Enabled = true;
				}
				break;

			case "Find Resource":
				context.Enabled = !string.IsNullOrEmpty( RealFileName );
				break;
			}
		}

		public virtual void EditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Save":
				Save( null );
				break;

			case "Save As":
				{
					if( !EditorUtility.ShowSaveFileDialog( Path.GetDirectoryName( RealFileName ), RealFileName, "All files (*.*)|*.*", out var saveAsFileName ) )
						return;

					if( string.Compare( RealFileName, saveAsFileName, true ) == 0 )
						Save();
					else
					{
						Save( saveAsFileName, false );
						EditorAPI.OpenFileAsDocument( saveAsFileName, true, true );
					}
				}
				break;

			case "Undo":
				if( __0x1829 != null )
				{
					if( __0x1829.DoUndo() )
						Modified = true;
				}
				break;

			case "Redo":
				if( __0x1829 != null )
				{
					if( __0x1829.DoRedo() )
						Modified = true;
				}
				break;

			case "Play":
				{
					var __0x1840 = LoadedResource?.ResultComponent;
					if( __0x1840 != null && RunSimulation.CheckTypeSupportedByPlayer( __0x1840.BaseType ) )
					{
						if( !EditorAPI.SaveDocuments() )
							return;
						
						
						
						
						

						
						var __0x1841 = VirtualPathUtility.GetRealPathByVirtual( LoadedResource.Owner.Name );
						RunSimulation.Run( __0x1841, RunSimulation.RunMethod.Player );
					}
				}
				break;

			case "Find Resource":
				if( !string.IsNullOrEmpty( RealFileName ) )
				{
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { RealFileName } );
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
				}
				break;
			}
		}

		public virtual void EditorActionClick2( EditorAction.ClickContext context )
		{
		}

		private void __0x1860( WorkspaceControllerForForm __0x1866 )
		{
			var __0x1842 = this.ResultComponent;
			var __0x1843 = __0x1866.FindWorkspaceWindow( this );

			var __0x1844 = __0x1843?.WorkspaceController;

			bool __0x1845 = __0x1844 != null;
			bool __0x1846 = __0x1844 == null && __0x1842.EditorDocumentConfiguration != null;
			if( __0x1845 || __0x1846 )
			{
				__0x1842.EditorDocumentConfiguration = __0x1844?.SaveLayoutToString();
			}
		}

		public delegate void ShowTitleContextMenuDelegate( DocumentInstance __0x1867, IDocumentWindow __0x1868, KryptonContextMenuItems __0x1869 );
		public static event ShowTitleContextMenuDelegate ShowTitleContextMenu;

		internal protected virtual void OnShowTitleContextMenu( IDocumentWindow caller, KryptonContextMenuItems items )
		{
			ShowTitleContextMenu?.Invoke( this, caller, items );

			if( !string.IsNullOrEmpty( RealFileName ) )
			{
				
				
				

				
				{
					items.Items.Add( new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Find in Resources window" ), ( __0x1870, __0x1871 ) =>
					{
						EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { RealFileName } );
						EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
					} ) );
				}

				
				{
					var __0x1847 = new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Reload" ), ( __0x1872, __0x1873 ) =>
					{
						var __0x1848 = caller.Document;

						
						if( __0x1848.Modified )
						{
							var __0x1849 = EditorLocalization.Translate( "General", "Save changes to the following files?" ) + "\n";
							__0x1849 += "\n" + __0x1848.Name;
							var __0x1850 = EditorMessageBox.ShowQuestion( __0x1849, EMessageBoxButtons.YesNoCancel );

							switch( __0x1850 )
							{
							case EDialogResult.Cancel:
								return;

							case EDialogResult.Yes:
								__0x1848.Save();
								break;

							case EDialogResult.No:
								break;
							}
						}

						KryptonWinFormsUtility.EditorFormStartTemporaryLockUpdate();

						

						EditorAPI.CloseDocument( __0x1848, false );
						if( __0x1848.Destroyed )
							EditorAPI.OpenFileAsDocument( __0x1848.RealFileName, true, true, specialMode: __0x1848.SpecialMode );

					} );

					__0x1847.Enabled = caller.Document != null;
					items.Items.Add( __0x1847 );
				}

				

				

				
				

				

				

				
				
				
				

				
				
				
				

				
				
				
				

				
				
				
			}
		}

		public void CommitUndoAction( UndoSystem.Action action, bool setModified = true )
		{
			UndoSystem?.CommitAction( action );
			if( setModified )
				Modified = true;
		}

		private void __0x1861( object __0x1874, EventArgs __0x1875 )
		{
			if( !Destroyed )
			{
				
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() + 3.1 );
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() + 0.5 );
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() );
			}
		}

		
		
		
		
		

		public void EditorUpdateWhenDocumentModified_NeedUpdate( double updateTime )
		{
			
			again:;
			for( int __0x1851 = 0; __0x1851 < __0x1832.Count; __0x1851++ )
			{
				var __0x1852 = __0x1832[ __0x1851 ];
				if( __0x1852 < updateTime )
				{
					__0x1832.RemoveAt( __0x1851 );
					goto again;
				}
			}

			
			__0x1832.Add( updateTime );
		}

		public void EditorUpdateWhenDocumentModified_Tick()
		{
			bool __0x1853 = false;

			var __0x1854 = EngineApp.GetSystemTime();

			again:;
			for( int __0x1855 = 0; __0x1855 < __0x1832.Count; __0x1855++ )
			{
				var __0x1856 = __0x1832[ __0x1855 ];
				if( __0x1854 >= __0x1856 )
				{
					__0x1832.RemoveAt( __0x1855 );
					__0x1853 = true;
					goto again;
				}
			}

			
			if( __0x1853 )
			{
				if( __0x1826 != null && __0x1826.ResultComponent != null )
				{
					var __0x1857 = __0x1826.ResultComponent;

					var __0x1858 = __0x1857 as IEditorUpdateWhenDocumentModified;
					if( __0x1858 != null )
						__0x1858.EditorUpdateWhenDocumentModified();
					foreach( var __0x1859 in __0x1857.GetComponents<IEditorUpdateWhenDocumentModified>( checkChildren: true ) )
						__0x1859.EditorUpdateWhenDocumentModified();
				}
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a docking window of the document.
	/// </summary>
	public partial class DocumentWindow : DockWindow, IDocumentWindow
	{
		DocumentInstance __0x1876;
		object __0x1877;
		bool __0x1878;
		Dictionary<string, object> __0x1879 = new Dictionary<string, object>();

		bool __0x1880;

		object[] __0x1881 = new object[ 0 ];
		ESet<object> __0x1882 = new ESet<object>();

		

		[Browsable( false )]
		public DocumentInstance Document
		{
			get { return __0x1876; }
		}

		[Browsable( false )]
		public object ObjectOfWindow
		{
			get { return __0x1877; }
		}

		[Browsable( false )]
		public bool OpenAsSettings 
		{
			get { return __0x1878; }
		}

		[Browsable( false )]
		public Dictionary<string, object> WindowTypeSpecificOptions
		{
			get { return __0x1879; }
		}

		public bool IsDocumentSaved()
		{
			return __0x1876 == null || !__0x1876.Modified;
		}

		[Browsable( false )]
		public object[] SelectedObjects
		{
			get { return __0x1881; }
		}

		[Browsable( false )]
		public ESet<object> SelectedObjectsSet
		{
			get { return __0x1882; }
		}

		/// <summary>
		/// Main/root window in workspace.
		/// Only document window can be main. not SettingsWindow.
		/// </summary>
		[Browsable( false )]
		internal bool IsMainWindowInWorkspace
		{
			get
			{
				if( __0x1878 )
					return false;

				if( ObjectOfWindow != null )
					return ObjectOfWindow == __0x1876.ResultObject;
				else
					return true; 
			}
		}

		[Browsable( false )]
		public bool IsWindowInWorkspace
		{
			get { return __0x1880; }
			set
			{
				if( __0x1880 == value )
					return;
				__0x1880 = value;

				UpdateWindowTitle();
			}
		}

		public DocumentWindow()
		{
			__0x1954();
		}

		public virtual void InitDocumentWindow( DocumentInstance document, object objectOfWindow, bool openAsSettings, Dictionary<string, object> windowTypeSpecificOptions )
		{
			this.__0x1876 = document;
			this.__0x1877 = objectOfWindow;
			this.__0x1878 = openAsSettings;
			if( windowTypeSpecificOptions != null )
				this.__0x1879 = windowTypeSpecificOptions;
		}

		protected override string GetResultWindowTitle()
		{
			if( __0x1876 != null )
			{
				var __0x1883 = "";

				if( IsMainWindowInWorkspace && !string.IsNullOrEmpty( __0x1876.RealFileName ) )
					__0x1883 = Path.GetFileName( __0x1876.RealFileName );
				else if( ObjectOfWindow != null )
					__0x1883 = ObjectOfWindow.ToString();

				if( !string.IsNullOrEmpty( __0x1883 ) )
				{
					if( IsWindowInWorkspace )
					{
						if( ObjectOfWindowIsDeleted )
							__0x1883 += " (Deleted)";
						else if( IsMainWindowInWorkspace )
							__0x1883 = "'Root object'";
					}
					else
					{
						if( __0x1876 != null && __0x1876.Modified )
							__0x1883 += "*";
					}

					return __0x1883;
				}
			}

			return base.GetResultWindowTitle();
		}

		private void __0x1945( object __0x1955, EventArgs __0x1956 )
		{
			if( IsDesignerHosted )
				return;

			__0x1937.Start();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();

			if( IsDesignerHosted )
				return;

			
			if( IsMainWindowInWorkspace )
				__0x1876.Destroy();
		}

		internal protected override void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
			Document.OnShowTitleContextMenu( this, items );
		}

		public bool SaveDocument()
		{
			return __0x1876.Save();
		}

		public bool IsObjectSelected( object obj )
		{
			return SelectedObjectsSet.Contains( obj );
		}

		static bool __0x1946( ICollection<object> __0x1957, ICollection<object> __0x1958 )
		{
			if( __0x1957.Count != __0x1958.Count )
				return false;

			var __0x1884 = __0x1957.GetEnumerator();
			var __0x1885 = __0x1958.GetEnumerator();
			while( __0x1884.MoveNext() )
			{
				__0x1885.MoveNext();
				if( !ReferenceEquals( __0x1884.Current, __0x1885.Current ) )
					return false;
			}
			return true;
		}

		public delegate void SelectedObjectsChangedDelegate( DocumentWindow __0x1959, object[] __0x1960 );
		public event SelectedObjectsChangedDelegate SelectedObjectsChanged;

		public void SelectObjects( ICollection<object> objects, bool updateForeachDocumentWindowContainers = true, bool updateSettingsWindowSelectObjects = true, bool forceUpdate = false )
		{
			if( objects == null )
				objects = new object[ 0 ];

			if( !__0x1946( objects, SelectedObjects ) || forceUpdate )
			{
				var __0x1886 = SelectedObjects;

				__0x1881 = new object[ objects.Count ];
				objects.CopyTo( __0x1881, 0 );
				__0x1882 = new ESet<object>( __0x1881 );
				

				
				if( updateForeachDocumentWindowContainers )
				{
					var __0x1887 = new List<ForeachDocumentWindowContainer>();

					foreach( var __0x1938 in EditorForm.Instance.WorkspaceController.GetDockWindows() )
					{
						var __0x1888 = __0x1938 as ForeachDocumentWindowContainer;
						if( __0x1888 != null )
							__0x1887.Add( __0x1888 );
					}

					foreach( var __0x1939 in __0x1887 )
						__0x1939.OnDocumentWindowSelectedObjectsChangedByUser( this );
				}

				
				if( updateSettingsWindowSelectObjects )
					SettingsWindowSelectObjects();

				SelectedObjectsChanged?.Invoke( this, __0x1886 );
			}
		}

		protected virtual void OnTimer10MsTick()
		{
		}

		private void __0x1947( object __0x1961, EventArgs __0x1962 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			{
				var __0x1889 = ObjectOfWindow as Component;
				if( __0x1889 != null && __0x1889.HierarchyController != null )
					__0x1889.HierarchyController.ProcessDelayedOperations();
			}

			OnTimer10MsTick();
		}

		protected virtual bool CanUpdateSettingsWindowsSelectedObjects()
		{
			return true;
		}

		protected virtual object OnGetSelectObjectWhenNoSelectedObjects()
		{
			return ObjectOfWindow;
		}

		public void SettingsWindowSelectObjects()
		{
			if( CanUpdateSettingsWindowsSelectedObjects() )
			{
				var __0x1890 = SelectedObjects;

				if( __0x1890.Length == 0 )
				{
					var __0x1891 = OnGetSelectObjectWhenNoSelectedObjects();
					if( __0x1891 != null )
						__0x1890 = new object[] { __0x1891 };
				}

				if( __0x1890.Length == 0 && ObjectOfWindow != null )
					__0x1890 = new object[] { ObjectOfWindow };

				SettingsWindow.Instance?.SelectObjects( this, __0x1890 );
			}
		}

		public virtual void EditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Cut":
				if( CanCut() )
					context.Enabled = true;
				break;

			case "Copy":
				if( CanCopy() )
					context.Enabled = true;
				break;

			case "Paste":
				if( CanPaste( out _ ) )
					context.Enabled = true;
				break;

			case "Duplicate":
				if( CanCloneObjects( out _ ) )
					context.Enabled = true;
				break;

			case "Delete":
				if( CanDeleteObjects( out _ ) )
					context.Enabled = true;
				break;

			case "Rename":
				if( CanRename( out _ ) )
					context.Enabled = true;
				break;
			}
		}

		public virtual void EditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Cut":
				Cut();
				break;

			case "Copy":
				Copy();
				break;

			case "Paste":
				Paste();
				break;

			case "Duplicate":
				TryCloneObjects();
				break;

			case "Delete":
				TryDeleteObjects();
				break;

			case "Rename":
				TryRename();
				break;
			}
		}

		public virtual void EditorActionClick2( EditorAction.ClickContext context )
		{
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			if( SelectedObjects.Length != 0 )
				return new ObjectsInFocus( this, SelectedObjects );
			return base.GetObjectsInFocus();
		}

		[Browsable( false )]
		public virtual bool ObjectOfWindowIsDeleted
		{
			get
			{
				var __0x1892 = ObjectOfWindow as Component;
				if( __0x1892 != null && __0x1876 != null && ObjectOfWindow != __0x1876.ResultComponent &&
					__0x1876.ResultComponent != null && !__0x1892.GetAllParents( false ).Contains( __0x1876.ResultComponent ) )
				{
					return true;
				}

				return false;
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( keyData == ( Keys.Control | Keys.F4 ) )
			{
				
				if( IsMainWindowInWorkspace )
				{
					var __0x1893 = EditorForm.Instance.WorkspaceController.FindWorkspaceWindow( this );
					if( __0x1893 != null )
					{
						__0x1893.Close();
						return true;
					}
				}

				Close();
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		private void __0x1948( object __0x1963, KeyEventArgs __0x1964 )
		{
			if( GetType() == typeof( DocumentWindow ) && EditorAPI.ProcessShortcuts( __0x1964.KeyCode, true ) )
			{
				__0x1964.Handled = true;
				return;
			}
		}

		string __0x1949( string __0x1965 )
		{
			return EditorContextMenuWinForms.Translate( __0x1965 );
		}

		void __0x1950()
		{
			var __0x1894 = new List<KryptonContextMenuItemBase>();

			Component __0x1895 = ObjectOfWindow as Component;

			
			{
				var __0x1896 = new KryptonContextMenuItem( __0x1949( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x1966, EventArgs __0x1967 )
				{
					EditorAPI.OpenDocumentWindowForObject( Document, __0x1895 );
				} );
				__0x1896.Enabled = __0x1895 != null && EditorAPI.IsDocumentObjectSupport( __0x1895 );
				__0x1894.Add( __0x1896 );
			}

			
			{
				var __0x1897 = new KryptonContextMenuItem( __0x1949( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x1968, EventArgs __0x1969 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x1894.Add( __0x1897 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x1898 = new KryptonContextMenuItem( __0x1949( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x1970, EventArgs __0x1971 )
				{
					var __0x1899 = __0x1895 ?? ObjectOfWindow;
					bool __0x1900 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x1899, __0x1900 );
				} );
				__0x1898.Enabled = __0x1895 != null || SelectedObjects.Length == 0;
				__0x1894.Add( __0x1898 );
			}

			__0x1894.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x1894, __0x1951( out _ ), delegate ( Metadata.TypeInfo __0x1972 )
				{
					__0x1952( __0x1972 );
				} );
			}

			
			__0x1894.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x1901 = new KryptonContextMenuItem( __0x1949( "Cut" ), EditorResourcesCache.Cut,
					delegate ( object __0x1973, EventArgs __0x1974 )
					{
						
					} );
				__0x1901.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x1901.Enabled = false;
				__0x1894.Add( __0x1901 );
			}

			
			{
				var __0x1902 = new KryptonContextMenuItem( __0x1949( "Copy" ), EditorResourcesCache.Copy,
					delegate ( object __0x1975, EventArgs __0x1976 )
					{
						Copy();
					} );
				__0x1902.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x1902.Enabled = CanCopy();
				__0x1894.Add( __0x1902 );
			}

			
			{
				var __0x1903 = new KryptonContextMenuItem( __0x1949( "Paste" ), EditorResourcesCache.Paste,
					delegate ( object __0x1977, EventArgs __0x1978 )
					{
						Paste();
					} );
				__0x1903.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x1903.Enabled = CanPaste( out _ );
				__0x1894.Add( __0x1903 );
			}

			
			{
				var __0x1904 = new KryptonContextMenuItem( __0x1949( "Duplicate" ), EditorResourcesCache.Clone,
					delegate ( object __0x1979, EventArgs __0x1980 )
					{
						
					} );
				__0x1904.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x1904.Enabled = false;
				__0x1894.Add( __0x1904 );
			}

			
			__0x1894.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x1905 = new KryptonContextMenuItem( __0x1949( "Delete" ), EditorResourcesCache.Delete,
					delegate ( object __0x1981, EventArgs __0x1982 )
					{
						
					} );
				__0x1905.Enabled = false;
				__0x1894.Add( __0x1905 );
			}

			
			{
				var __0x1906 = new KryptonContextMenuItem( __0x1949( "Rename" ), null, delegate ( object __0x1983, EventArgs __0x1984 )
				{
					EditorUtility.ShowRenameComponentDialog( __0x1895 );
				} );
				__0x1906.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				
				__0x1906.Enabled = __0x1895 != null;
				__0x1894.Add( __0x1906 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x1894 );

			EditorContextMenuWinForms.Show( __0x1894, this );
		}

		bool __0x1951( out List<Component> __0x1985 )
		{
			__0x1985 = new List<Component>();

			var __0x1907 = ObjectOfWindow as Component;
			if( __0x1907 != null )
				__0x1985.Add( __0x1907 );

			return true;
		}

		void __0x1952( Metadata.TypeInfo __0x1986 )
		{
			if( !__0x1951( out List<Component> parentsForNewObjects ) )
				return;

			var __0x1908 = new NewObjectWindow.CreationDataClass();
			__0x1908.initDocumentWindow = this;
			__0x1908.initParentObjects = new List<object>();
			__0x1908.initParentObjects.AddRange( parentsForNewObjects );

			
			

			__0x1908.initLockType = __0x1986;
			__0x1908.initSupportAutoCreateAndClose = __0x1986 != null;

			

			

			EditorAPI.OpenNewObjectWindow( __0x1908 );
		}

		private void __0x1953( object __0x1987, MouseEventArgs __0x1988 )
		{
			
			if( GetType() == typeof( DocumentWindow ) && __0x1988.Button == MouseButtons.Right )
				__0x1950();
		}

		public virtual bool CanCut()
		{
			if( SelectedObjects.Length != 0 )
				return SelectedObjects.All( __0x1989 => __0x1989 is Component && ( (Component)__0x1989 ).Parent != null );
			return false;
		}

		public virtual bool CutCopy( bool cut )
		{
			if( !CanCut() )
				return false;
			var __0x1909 = new ObjectCutCopyPasteData( this, cut, (object[])SelectedObjects.Clone() );
			ClipboardManager.CopyToClipboard( __0x1909 );
			return true;
		}

		public bool Cut()
		{
			return CutCopy( true );
		}

		public virtual bool CanCopy()
		{
			if( SelectedObjects.Length != 0 )
				return SelectedObjects.All( __0x1990 => __0x1990 is Component );
			return false;
		}

		public bool Copy()
		{
			return CutCopy( false );
		}

		
		
		
		

		
		
		
		
		
		
		
		

		public virtual bool CanPaste( out Component destinationParent )
		{
			if( ClipboardManager.CheckAvailableInClipboard<ObjectCutCopyPasteData>() )
			{
				if( SelectedObjects.Length == 0 )
				{
					var __0x1910 = ObjectOfWindow as Component;
					if( __0x1910 != null )
					{
						destinationParent = __0x1910;
						return true;
					}
				}
				else if( SelectedObjects.Length == 1 )
				{
					var __0x1911 = SelectedObjects[ 0 ] as Component;
					if( __0x1911 != null )
					{
						destinationParent = __0x1911;
						return true;
					}
				}
			}

			destinationParent = null;
			return false;
		}

		
		
		
		
		
		
		
		

		
		
		

		public virtual bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x1912 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x1912 != null )
			{
				var __0x1913 = new List<Component>();
				foreach( var __0x1940 in __0x1912.objects )
				{
					var __0x1914 = __0x1940 as Component;
					if( __0x1914 != null )
						__0x1913.Add( __0x1914 );
				}

				

				var __0x1915 = new List<Component>();
				Vector3 __0x1916 = Vector3.Zero;

				for( int __0x1917 = 0; __0x1917 < __0x1913.Count; __0x1917++ )
				{
					var __0x1918 = __0x1913[ __0x1917 ];

					var __0x1919 = __0x1918.Clone();
					if( destinationParent.GetComponent( __0x1918.Name ) == null )
						__0x1919.Name = __0x1918.Name;
					else
						__0x1919.Name = destinationParent.Components.GetUniqueName( __0x1918.Name, true, 2 );
					destinationParent.AddComponent( __0x1919 );

					__0x1915.Add( __0x1919 );
				}

				if( __0x1912.cut )
				{
					
					if( __0x1912.documentWindow.Document != Document )
					{
						
						{
							var __0x1920 = new UndoActionComponentCreateDelete( __0x1912.documentWindow.Document, __0x1913, false );
							__0x1912.documentWindow.Document.UndoSystem.CommitAction( __0x1920 );
							__0x1912.documentWindow.Document.Modified = true;
						}
						{
							var __0x1921 = new UndoActionComponentCreateDelete( Document, __0x1915, true );
							Document.UndoSystem.CommitAction( __0x1921 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x1922 = new UndoMultiAction();
						__0x1922.AddAction( new UndoActionComponentCreateDelete( Document, __0x1913, false ) );
						__0x1922.AddAction( new UndoActionComponentCreateDelete( Document, __0x1915, true ) );
						Document.UndoSystem.CommitAction( __0x1922 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x1923 = new UndoActionComponentCreateDelete( Document, __0x1915, true );
					Document.UndoSystem.CommitAction( __0x1923 );
					Document.Modified = true;
				}
			}

			return true;
		}

		public virtual bool CanCloneObjects( out List<Component> resultObjectsToClone )
		{
			resultObjectsToClone = new List<Component>( SelectedObjects.Length );

			foreach( var __0x1941 in SelectedObjects )
			{
				var __0x1924 = __0x1941 as Component;
				if( __0x1924 != null && __0x1924.Parent != null )
					resultObjectsToClone.Add( __0x1924 );
			}

			
			resultObjectsToClone = ComponentUtility.GetComponentsWithoutChildren( resultObjectsToClone );

			if( resultObjectsToClone.Count == 0 )
				return false;

			return true;
		}

		public static void AddClonedSelectableChildrenToList( List<Component> list, Component component )
		{
			foreach( var __0x1942 in component.GetComponents() )
			{
				if( __0x1942.DisplayInEditor && __0x1942.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1942 ) )
				{
					
					if( __0x1942 is CurveInSpacePoint )
					{
						list.Add( __0x1942 );

						AddClonedSelectableChildrenToList( list, __0x1942 );
					}
				}
			}
		}

		public virtual void TryCloneObjects()
		{
			if( !CanCloneObjects( out var objectsToClone ) )
				return;

			var __0x1925 = new List<Component>();
			foreach( var __0x1943 in objectsToClone )
			{
				var __0x1926 = EditorUtility.CloneComponent( __0x1943 );
				__0x1925.Add( __0x1926 );
				AddClonedSelectableChildrenToList( __0x1925, __0x1926 );
			}

			
			{
				var __0x1927 = new List<object>();
				
				__0x1927.AddRange( __0x1925 );

				SelectObjects( __0x1927 );
			}

			if( __0x1925.Count == 0 )
				return;

			
			var __0x1928 = new UndoActionComponentCreateDelete( Document, __0x1925, true );
			Document.UndoSystem.CommitAction( __0x1928 );
			Document.Modified = true;

			
			EditorUtility.ShowScreenNotificationObjectsCloned( __0x1925.Count );
		}

		public virtual bool CanDeleteObjects( out List<object> resultObjectsToDelete )
		{
			var __0x1929 = new List<Component>();

			foreach( var __0x1944 in SelectedObjects )
			{
				var __0x1930 = __0x1944 as Component;
				if( __0x1930 != null && __0x1930.Parent != null )
					__0x1929.Add( __0x1930 );
			}

			
			resultObjectsToDelete = ComponentUtility.GetComponentsWithoutChildren( __0x1929 ).Cast<object>().ToList();

			if( resultObjectsToDelete.Count == 0 )
				return false;

			return true;
		}

		public virtual bool TryDeleteObjects()
		{
			if( !CanDeleteObjects( out var objectsToDelete ) )
				return false;

			string __0x1931;
			if( objectsToDelete.Count == 1 )
			{
				string __0x1932 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete \'{0}\'?" );
				var __0x1933 = objectsToDelete[ 0 ].ToString();
				__0x1931 = string.Format( __0x1932, __0x1933 );
			}
			else
			{
				string __0x1934 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete selected objects?" );
				__0x1931 = string.Format( __0x1934, objectsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x1931, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return false;

			
			
			SelectObjects( null );

			
			var __0x1935 = new UndoActionComponentCreateDelete( Document, objectsToDelete.Cast<Component>().ToArray(), false );
			Document.UndoSystem.CommitAction( __0x1935 );
			Document.Modified = true;

			return true;
		}

		public virtual bool CanRename( out Component component )
		{
			component = null;

			
			if( SelectedObjects.Length == 1 )
				component = SelectedObjects[ 0 ] as Component;

			return component != null;
		}

		public virtual void TryRename()
		{
			if( CanRename( out var component ) )
				EditorUtility.ShowRenameComponentDialog( component );
		}
	}
}
namespace NeoAxis.Editor
{
	partial class DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1936 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1954()
		{
			this.__0x1936 = new System.ComponentModel.Container();
			this.__0x1937 = new System.Windows.Forms.Timer(this.__0x1936);
			this.SuspendLayout();
			
			
			
			this.__0x1937.Interval = 10;
			this.__0x1937.Tick += new System.EventHandler(this.__0x1947);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "DocumentWindow";
			this.Load += new System.EventHandler(this.__0x1945);
			this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x1948);
			this.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x1953);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x1937;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a document window with a viewport.
	/// </summary>
	public partial class DocumentWindowWithViewport : DocumentWindow
	{
		
		Scene __0x1991;
		bool __0x1992;

		
		
		

		
		bool __0x1993;
		Vector2 __0x1994;
		bool __0x1995;

		
		class __0x2171
		{
			public string text;
			public ColorValue color;
			public double timeRemaining;
		}
		List<__0x2171> __0x1996 = new List<__0x2171>();

		bool __0x1997;

		
		

		
		
		
		

		float __0x1998 = 1;

		string __0x1999 = "";
		WorkareaModeClass __0x2000;

		ObjectCreationMode __0x2001;

		

		public abstract class WorkareaModeClass
		{
			DocumentWindowWithViewport __0x2002;

			

			protected WorkareaModeClass( DocumentWindowWithViewport documentWindow )
			{
				this.__0x2002 = documentWindow;
			}

			public DocumentWindowWithViewport DocumentWindow
			{
				get { return __0x2002; }
			}

			public virtual bool AllowControlCamera
			{
				get { return true; }
			}

			public virtual bool AllowSelectObjects
			{
				get { return false; }
			}

			public virtual bool DisplaySelectedObjects
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByDrop
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByClick
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByBrush
			{
				get { return AllowSelectObjects; }
			}

			protected virtual void OnDestroy() { }
			public delegate void DestroyDelegate( WorkareaModeClass __0x2115 );
			public event DestroyDelegate Destroy;
			internal void PerformDestroy()
			{
				OnDestroy();
				Destroy?.Invoke( this );
			}

			protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines ) { }
			public delegate void GetTextInfoRightBottomCornerDelegate( WorkareaModeClass __0x2116, List<string> __0x2117 );
			public event GetTextInfoRightBottomCornerDelegate GetTextInfoRightBottomCorner;
			internal void PerformGetTextInfoRightBottomCorner( List<string> lines )
			{
				OnGetTextInfoRightBottomCorner( lines );
				GetTextInfoRightBottomCorner?.Invoke( this, lines );
			}

			protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines ) { }
			public delegate void GetTextInfoCenterBottomCornerDelegate( WorkareaModeClass __0x2118, List<string> __0x2119 );
			public event GetTextInfoCenterBottomCornerDelegate GetTextInfoCenterBottomCorner;
			internal void PerformGetTextInfoCenterBottomCorner( List<string> lines )
			{
				OnGetTextInfoCenterBottomCorner( lines );
				GetTextInfoCenterBottomCorner?.Invoke( this, lines );
			}

			protected virtual bool OnKeyDown( Viewport viewport, KeyEvent e ) { return false; }
			public delegate void KeyDownUpDelegate( WorkareaModeClass __0x2120, Viewport __0x2121, KeyEvent __0x2122, ref bool __0x2123 );
			public event KeyDownUpDelegate KeyDown;
			internal bool PerformKeyDown( Viewport viewport, KeyEvent e )
			{
				var __0x2003 = OnKeyDown( viewport, e );
				if( !__0x2003 )
					KeyDown?.Invoke( this, viewport, e, ref __0x2003 );
				return __0x2003;
			}

			protected virtual bool OnKeyPress( Viewport viewport, KeyPressEvent e ) { return false; }
			public delegate void KeyPressDelegate( WorkareaModeClass __0x2124, Viewport __0x2125, KeyPressEvent __0x2126, ref bool __0x2127 );
			public event KeyPressDelegate KeyPress;
			internal bool PerformKeyPress( Viewport viewport, KeyPressEvent e )
			{
				var __0x2004 = OnKeyPress( viewport, e );
				if( !__0x2004 )
					KeyPress?.Invoke( this, viewport, e, ref __0x2004 );
				return __0x2004;
			}

			protected virtual bool OnKeyUp( Viewport viewport, KeyEvent e ) { return false; }
			public event KeyDownUpDelegate KeyUp;
			internal bool PerformKeyUp( Viewport viewport, KeyEvent e )
			{
				var __0x2005 = OnKeyUp( viewport, e );
				if( !__0x2005 )
					KeyUp?.Invoke( this, viewport, e, ref __0x2005 );
				return __0x2005;
			}

			protected virtual bool OnMouseDown( Viewport viewport, EMouseButtons button ) { return false; }
			public delegate void MouseClickDelegate( WorkareaModeClass __0x2128, Viewport __0x2129, EMouseButtons __0x2130, ref bool __0x2131 );
			public event MouseClickDelegate MouseDown;
			internal bool PerformMouseDown( Viewport viewport, EMouseButtons button )
			{
				var __0x2006 = OnMouseDown( viewport, button );
				if( !__0x2006 )
					MouseDown?.Invoke( this, viewport, button, ref __0x2006 );
				return __0x2006;
			}

			protected virtual bool OnMouseUp( Viewport viewport, EMouseButtons button ) { return false; }
			public event MouseClickDelegate MouseUp;
			internal bool PerformMouseUp( Viewport viewport, EMouseButtons button )
			{
				var __0x2007 = OnMouseUp( viewport, button );
				if( !__0x2007 )
					MouseUp?.Invoke( this, viewport, button, ref __0x2007 );
				return __0x2007;
			}

			protected virtual bool OnMouseDoubleClick( Viewport viewport, EMouseButtons button ) { return false; }
			public event MouseClickDelegate MouseDoubleClick;
			internal bool PerformMouseDoubleClick( Viewport viewport, EMouseButtons button )
			{
				var __0x2008 = OnMouseDoubleClick( viewport, button );
				if( !__0x2008 )
					MouseDoubleClick?.Invoke( this, viewport, button, ref __0x2008 );
				return __0x2008;
			}

			protected virtual void OnMouseMove( Viewport viewport, Vector2 mouse ) { }
			public delegate void MouseMoveDelegate( WorkareaModeClass __0x2132, Viewport __0x2133, Vector2 __0x2134 );
			public event MouseMoveDelegate MouseMove;
			internal void PerformMouseMove( Viewport viewport, Vector2 mouse )
			{
				OnMouseMove( viewport, mouse );
				MouseMove?.Invoke( this, viewport, mouse );
			}

			protected virtual bool OnMouseRelativeModeChanged( Viewport viewport ) { return false; }
			public delegate void MouseRelativeModeChangedDelegate( WorkareaModeClass __0x2135, Viewport __0x2136, ref bool __0x2137 );
			public event MouseRelativeModeChangedDelegate MouseRelativeModeChanged;
			internal bool PerformMouseRelativeModeChanged( Viewport viewport )
			{
				var __0x2009 = OnMouseRelativeModeChanged( viewport );
				if( !__0x2009 )
					MouseRelativeModeChanged?.Invoke( this, viewport, ref __0x2009 );
				return __0x2009;
			}

			protected virtual bool OnMouseWheel( Viewport viewport, int delta ) { return false; }
			public delegate void MouseWheelDelegate( WorkareaModeClass __0x2138, Viewport __0x2139, int __0x2140, ref bool __0x2141 );
			public event MouseWheelDelegate MouseWheel;
			internal bool PerformMouseWheel( Viewport viewport, int delta )
			{
				var __0x2010 = OnMouseWheel( viewport, delta );
				if( !__0x2010 )
					MouseWheel?.Invoke( this, viewport, delta, ref __0x2010 );
				return __0x2010;
			}

			protected virtual bool OnJoystickEvent( Viewport viewport, JoystickInputEvent e ) { return false; }
			public delegate void JoystickEventDelegate( WorkareaModeClass __0x2142, Viewport __0x2143, JoystickInputEvent __0x2144, ref bool __0x2145 );
			public event JoystickEventDelegate JoystickEvent;
			internal bool PerformJoystickEvent( Viewport viewport, JoystickInputEvent e )
			{
				var __0x2011 = OnJoystickEvent( viewport, e );
				if( !__0x2011 )
					JoystickEvent?.Invoke( this, viewport, e, ref __0x2011 );
				return __0x2011;
			}

			protected virtual bool OnSpecialInputDeviceEvent( Viewport viewport, InputEvent e ) { return false; }
			public delegate void SpecialInputDeviceEventDelegate( WorkareaModeClass __0x2146, Viewport __0x2147, InputEvent __0x2148, ref bool __0x2149 );
			public event SpecialInputDeviceEventDelegate SpecialInputDeviceEvent;
			internal bool PerformSpecialInputDeviceEvent( Viewport viewport, InputEvent e )
			{
				var __0x2012 = OnSpecialInputDeviceEvent( viewport, e );
				if( !__0x2012 )
					SpecialInputDeviceEvent?.Invoke( this, viewport, e, ref __0x2012 );
				return __0x2012;
			}

			protected virtual void OnTick( Viewport viewport, double delta ) { }
			public delegate void TickDelegate( WorkareaModeClass __0x2150, Viewport __0x2151, double __0x2152 );
			public event TickDelegate Tick;
			internal void PerformTick( Viewport viewport, double delta )
			{
				OnTick( viewport, delta );
				Tick?.Invoke( this, viewport, delta );
			}

			protected virtual void OnUpdateBegin( Viewport viewport ) { }
			public delegate void UpdateBeginDelegate( WorkareaModeClass __0x2153, Viewport __0x2154 );
			public event UpdateBeginDelegate UpdateBegin;
			internal void PerformUpdateBegin( Viewport viewport )
			{
				OnUpdateBegin( viewport );
				UpdateBegin?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context ) { }
			public delegate void UpdateGetObjectInSceneRenderingContextDelegate( WorkareaModeClass __0x2155, Viewport __0x2156, ref ObjectInSpace.RenderingContext __0x2157 );
			public event UpdateGetObjectInSceneRenderingContextDelegate UpdateGetObjectInSceneRenderingContext;
			internal void PerformUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context )
			{
				OnUpdateGetObjectInSceneRenderingContext( viewport, ref context );
				UpdateGetObjectInSceneRenderingContext?.Invoke( this, viewport, ref context );
			}

			protected virtual void OnUpdateBeforeOutput( Viewport viewport ) { }
			public delegate void UpdateBeforeOutputDelegate( WorkareaModeClass __0x2158, Viewport __0x2159 );
			public event UpdateBeforeOutputDelegate UpdateBeforeOutput;
			internal void PerformUpdateBeforeOutput( Viewport viewport )
			{
				OnUpdateBeforeOutput( viewport );
				UpdateBeforeOutput?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateBeforeOutput2( Viewport viewport ) { }
			public delegate void UpdateBeforeOutput2Delegate( WorkareaModeClass __0x2160, Viewport __0x2161 );
			public event UpdateBeforeOutput2Delegate UpdateBeforeOutput2;
			internal void PerformUpdateBeforeOutput2( Viewport viewport )
			{
				OnUpdateBeforeOutput2( viewport );
				UpdateBeforeOutput2?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateEnd( Viewport viewport ) { }
			public delegate void UpdateEndDelegate( WorkareaModeClass __0x2162, Viewport __0x2163 );
			public event UpdateEndDelegate UpdateEnd;
			internal void PerformUpdateEnd( Viewport viewport )
			{
				OnUpdateEnd( viewport );
				UpdateEnd?.Invoke( this, viewport );
			}

			protected virtual void OnViewportUpdateGetCameraSettings( ref Camera camera ) { }
			public delegate void ViewportUpdateGetCameraSettingsDelegate( WorkareaModeClass __0x2164, ref Camera __0x2165 );
			public event ViewportUpdateGetCameraSettingsDelegate ViewportUpdateGetCameraSettings;
			internal void PerformViewportUpdateGetCameraSettings( ref Camera camera )
			{
				OnViewportUpdateGetCameraSettings( ref camera );
				ViewportUpdateGetCameraSettings?.Invoke( this, ref camera );
			}

			
			protected virtual void OnEditorActionGetState( EditorAction.GetStateContext context ) { }
			public delegate void EditorActionGetStateDelegate( WorkareaModeClass __0x2166, EditorAction.GetStateContext __0x2167 );
			public event EditorActionGetStateDelegate EditorActionGetState;
			internal void PerformEditorActionGetState( EditorAction.GetStateContext context )
			{
				OnEditorActionGetState( context );
				EditorActionGetState?.Invoke( this, context );
			}

			
			protected virtual void OnEditorActionClick( EditorAction.ClickContext context ) { }
			public delegate void EditorActionClickDelegate( WorkareaModeClass __0x2168, EditorAction.ClickContext __0x2169 );
			public event EditorActionClickDelegate EditorActionClick;
			internal void PerformEditorActionClick( EditorAction.ClickContext context )
			{
				OnEditorActionClick( context );
				EditorActionClick?.Invoke( this, context );
			}

			
			protected virtual void OnEditorActionClick2( EditorAction.ClickContext context ) { }
			public event EditorActionClickDelegate EditorActionClick2;
			internal void PerformEditorActionClick2( EditorAction.ClickContext context )
			{
				OnEditorActionClick2( context );
				EditorActionClick2?.Invoke( this, context );
			}
		}

		

		public DocumentWindowWithViewport()
		{
			__0x2114();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			__0x2107.ViewportCreated += ViewportControl_ViewportCreated;
			__0x2107.ViewportDestroyed += ViewportControl_ViewportDestroyed;

			__0x1998 = EditorAPI.DPI > 96 ? 2 : 1;
		}

		[Browsable( false )]
		public EngineViewportControl ViewportControl
		{
			get { return __0x2107; }
		}

		[Browsable( false )]
		public Viewport Viewport
		{
			get { return ViewportControl?.Viewport; }
		}

		protected virtual void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			Viewport __0x2013 = sender.Viewport;

			__0x2013.KeyDown += Viewport_KeyDown;
			__0x2013.KeyPress += Viewport_KeyPress;
			__0x2013.KeyUp += Viewport_KeyUp;
			__0x2013.MouseDown += Viewport_MouseDown;
			__0x2013.MouseUp += Viewport_MouseUp;
			__0x2013.MouseDoubleClick += Viewport_MouseDoubleClick;
			__0x2013.MouseMove += Viewport_MouseMove;
			__0x2013.MouseRelativeModeChanged += Viewport_MouseRelativeModeChanged;
			__0x2013.MouseWheel += Viewport_MouseWheel;
			__0x2013.JoystickEvent += Viewport_JoystickEvent;
			__0x2013.SpecialInputDeviceEvent += Viewport_SpecialInputDeviceEvent;
			__0x2013.Tick += Viewport_Tick;
			__0x2013.UpdateBegin += Viewport_UpdateBegin;
			__0x2013.UpdateGetObjectInSceneRenderingContext += Viewport_UpdateGetObjectInSceneRenderingContext;
			__0x2013.UpdateBeforeOutput += Viewport_UpdateBeforeOutput;
			__0x2013.UpdateBeforeOutput += Viewport_UpdateBeforeOutput2;
			__0x2013.UpdateEnd += Viewport_UpdateEnd;

			
			ViewportControl.Viewport.AttachedScene = __0x1991;
		}

		protected virtual void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformKeyDown( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformKeyDown( viewport, e ) )
			{
				handled = true;
				return;
			}

			if( EditorAPI.ProcessShortcuts( (Keys)e.Key, true ) )
			{
				handled = true;
				return;
			}

			
			

			
		}

		protected virtual void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformKeyPress( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformKeyPress( viewport, e ) )
			{
				handled = true;
				return;
			}

			
			
			
			

		}

		protected virtual void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformKeyUp( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformKeyUp( viewport, e ) )
			{
				handled = true;
				return;
			}

			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			

			


		}

		protected virtual void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			

			

			
			
			

			
			
			
			
			
			

			

			if( __0x1991 != null && AllowCameraControl )
			{
				
				if( button == EMouseButtons.Right || button == EMouseButtons.Middle )
				
				{
					__0x1993 = true;
					__0x1994 = viewport.MousePosition;

					
					
					
				}
			}

			if( __0x2001 != null && __0x2001.PerformMouseDown( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformMouseDown( viewport, button ) )
			{
				handled = true;
				return;
			}

			
		}

		protected virtual void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			

			
			
			

			if( __0x1991 != null && AllowCameraControl )
			{
				
				if( button == EMouseButtons.Right || button == EMouseButtons.Middle )
				
				{
					__0x1993 = false;

					if( __0x1995 )
					{
						viewport.MouseRelativeMode = false;
						__0x1995 = false;

						handled = true;
					}
				}
			}

			if( __0x2001 != null && __0x2001.PerformMouseUp( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformMouseUp( viewport, button ) )
			{
				handled = true;
				return;
			}

			
			
			
			
			
			

			

		}

		protected virtual void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformMouseDoubleClick( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformMouseDoubleClick( viewport, button ) )
			{
				handled = true;
				return;
			}

			

			

			
			
			

			
			
			
			
			
			

			

		}

		protected virtual void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			
			
			
			
			
			


			

			

			

			
			

			
			if( __0x1991 != null && __0x1993 && AllowCameraControl )
			{
				
				if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) || viewport.IsMouseButtonPressed( EMouseButtons.Middle ) )
				
				
				
				{
					Vector2 __0x2014 = ( mouse - __0x1994 ) * viewport.SizeInPixels.ToVector2();
					if( Math.Abs( __0x2014.X ) >= 3 || Math.Abs( __0x2014.Y ) >= 3 )
					{
						__0x1993 = false;

						__0x1995 = true;
						viewport.MouseRelativeMode = true;

						
						
					}
				}
			}

			
			if( __0x1991 != null && viewport.MouseRelativeMode && AllowCameraControl )
			{
				Camera __0x2015 = __0x1991.Mode.Value == Scene.ModeEnum._3D ? __0x1991.CameraEditor : __0x1991.CameraEditor2D;
				if( __0x2015 != null && __0x1995 )
				{
					if( __0x1991.Mode.Value == Scene.ModeEnum._3D )
					{
						double __0x2016 = .001;

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && __0x1997 )
						{
							double __0x2017 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.SceneEditor.CameraMouseMovementSensitivityFast : ProjectSettings.Get.SceneEditor.CameraMouseMovementSensitivityNormal;
							double __0x2018 = ( mouse.X + mouse.Y ) * __0x2017 * __0x2016 * 5.0;

							Transform __0x2019 = __0x2015.Transform;
							__0x2015.Transform = __0x2019.UpdatePosition( __0x2019.Position + __0x2019.Rotation.GetForward() * __0x2018 );
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Left ) && __0x1997 )
						{
							
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && !__0x1997 )
						{
							Transform __0x2020 = __0x2015.Transform;
							SphericalDirection __0x2021 = SphericalDirection.FromVector( __0x2020.Rotation.GetForward() );

							__0x2021.Horizontal -= mouse.X * ProjectSettings.Get.SceneEditor.CameraMouseRotationSensitivityHorizontal.Value * __0x2016;
							__0x2021.Vertical -= mouse.Y * ProjectSettings.Get.SceneEditor.CameraMouseRotationSensitivityVertical.Value * __0x2016;
							
							
							
							
							
							
							
							
							
							
							
							

							__0x2021.Horizontal = MathEx.RadianNormalize360( __0x2021.Horizontal );

							const double __0x2022 = Math.PI / 2 - .01;
							if( __0x2021.Vertical > __0x2022 ) __0x2021.Vertical = __0x2022;
							if( __0x2021.Vertical < -__0x2022 ) __0x2021.Vertical = -__0x2022;

							__0x2015.Transform = __0x2020.UpdateRotation( Quaternion.LookAt( __0x2021.GetVector(), __0x2015.FixedUp ) );
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Middle ) )
						{
							double __0x2023 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.SceneEditor.CameraMouseTrackMovementSensitivityFast : ProjectSettings.Get.SceneEditor.CameraMouseTrackMovementSensitivityNormal;

							double __0x2024 = mouse.X * __0x2023 * __0x2016;
							double __0x2025 = -mouse.Y * __0x2023 * __0x2016;

							Transform __0x2026 = __0x2015.Transform;
							Vector3 __0x2027 = __0x2026.Rotation.GetForward();

							Vector3 __0x2028 = __0x2015.FixedUp;
							Vector3 __0x2029 = Vector3.Cross( __0x2027, __0x2028 );

							__0x2015.Transform = __0x2026.UpdatePosition( __0x2026.Position + __0x2029 * __0x2024 + __0x2028 * __0x2025 );
						}

						
						
						
					}
					else
					{
						
						
						
						
						

						
						
						

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && !__0x1997 )
						{
							Transform __0x2030 = __0x2015.Transform;

							var __0x2031 = __0x2030.Position;

							double __0x2032 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.SceneEditor.CameraMouseMovementSensitivityFast : ProjectSettings.Get.SceneEditor.CameraMouseMovementSensitivityNormal;

							__0x2031.X += mouse.X * __0x2032 * 0.005;
							__0x2031.Y -= mouse.Y * __0x2032 * 0.005;

							__0x2015.Transform = __0x2030.UpdatePosition( __0x2031 );
						}

						
						
						
						

						
						

						
						

						
						

						
						

					}
				}
			}

			__0x2000?.PerformMouseMove( viewport, mouse );
			__0x2001?.PerformMouseMove( viewport, mouse );
		}

		protected virtual void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformMouseRelativeModeChanged( viewport ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformMouseRelativeModeChanged( viewport ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			if( __0x1991 != null && AllowCameraControl )
			{
				Camera __0x2033 = __0x1991.Mode.Value == Scene.ModeEnum._3D ? __0x1991.CameraEditor : __0x1991.CameraEditor2D;
				if( __0x2033 != null )
				{
					double __0x2034 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.SceneEditor.CameraMouseWheelMovementSensitivityFast : ProjectSettings.Get.SceneEditor.CameraMouseWheelMovementSensitivityNormal;

					if( __0x1991.Mode.Value == Scene.ModeEnum._3D )
					{
						Transform __0x2035 = __0x2033.Transform;
						__0x2033.Transform = __0x2035.UpdatePosition( __0x2035.Position + __0x2035.Rotation.GetForward() * (double)delta * .003 * __0x2034 );
					}
					else
					{
						double __0x2036 = __0x2033.Height;
						__0x2036 -= (double)delta * __0x2034 * 0.01;
						if( __0x2036 < 0.01 )
							__0x2036 = 0.01;
						__0x2033.Height = __0x2036;
					}
				}
			}

			if( __0x2001 != null && __0x2001.PerformMouseWheel( viewport, delta ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformMouseWheel( viewport, delta ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformJoystickEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformJoystickEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			if( __0x2001 != null && __0x2001.PerformSpecialInputDeviceEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x2000 != null && __0x2000.PerformSpecialInputDeviceEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
		}

		bool __0x2109( EKeys __0x2170 )
		{
			if( __0x2107 != null )
			{
				var __0x2037 = __0x2107.viewport;
				if( __0x2037 != null && __0x2037.IsKeyPressed( __0x2170 ) )
				{
					if( __0x2037.GetKeyDownTime( __0x2170 ) > __0x2037.GetKeyDownTime( EKeys.Control ) )
						if( __0x2037.GetKeyDownTime( __0x2170 ) < __0x2037.GetKeyUpTime( EKeys.Control ) )
							return false;
					return true;
				}
			}
			return false;
		}

		protected virtual void Viewport_Tick( Viewport viewport, float delta )
		{
			if( __0x2107 != null )
				__0x2107.AutomaticUpdateFPS = (float)ProjectSettings.Get.General.MaxFramesPerSecondDocument;

			

			
			
			{
				var __0x2038 = ObjectOfWindow as Component;
				if( __0x2038 != null && __0x2038.HierarchyController != null )
					__0x2038.HierarchyController.ProcessDelayedOperations();
			}
			
			

			__0x1997 = ( System.Windows.Forms.Control.ModifierKeys & Keys.Control ) != 0;
			

			
			

			
			

			
			if( __0x1991 != null && ( System.Windows.Forms.Control.ModifierKeys & Keys.Alt ) == 0 && AllowCameraControl )
			{
				Camera __0x2039 = __0x1991.Mode.Value == Scene.ModeEnum._3D ? __0x1991.CameraEditor : __0x1991.CameraEditor2D;
				if( __0x2039 != null )
				{
					Transform __0x2040 = __0x2039.Transform.Value;
					Vector3 __0x2041 = __0x2040.Position;
					SphericalDirection __0x2042 = SphericalDirection.FromVector( __0x2040.Rotation.GetForward() );
					if( __0x1991.Mode.Value == Scene.ModeEnum._2D && Math.Abs( __0x2039.FixedUp.Value.Z ) < 0.001 )
						__0x2042 = SphericalDirection.FromVector( new Vector3( 0, 0, -1 ) );

					Vector3 __0x2043 = __0x2041;
					SphericalDirection __0x2044 = __0x2042;
					double __0x2045 = __0x2039.Height;
					double __0x2046 = __0x2045;


					double __0x2047;
					double __0x2048;
					if( ( System.Windows.Forms.Control.ModifierKeys & Keys.Shift ) != 0 || viewport.IsKeyLocked( EKeys.CapsLock ) )
					{
						__0x2047 = ProjectSettings.Get.SceneEditor.CameraKeyboardMovementSpeedFast;
						__0x2048 = ProjectSettings.Get.SceneEditor.CameraKeyboardRotationSpeedFast.Value.InRadians();
					}
					else
					{
						__0x2047 = ProjectSettings.Get.SceneEditor.CameraKeyboardMovementSpeedNormal;
						__0x2048 = ProjectSettings.Get.SceneEditor.CameraKeyboardRotationSpeedNormal.Value.InRadians();
					}
					var __0x2049 = __0x2047 * delta;
					var __0x2050 = __0x2048 * delta;
					
					var __0x2051 = __0x2049 * 4;

					if( ( Form.ModifierKeys & Keys.Control ) != 0 )
					{
						
						if( viewport.IsKeyPressed( EKeys.Up ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
							__0x2044.Vertical += __0x2050;
						if( viewport.IsKeyPressed( EKeys.Down ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
							__0x2044.Vertical -= __0x2050;
						if( viewport.IsKeyPressed( EKeys.Left ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
							__0x2044.Horizontal += __0x2050;
						if( viewport.IsKeyPressed( EKeys.Right ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
							__0x2044.Horizontal -= __0x2050;

						__0x2044.Horizontal = MathEx.RadianNormalize360( __0x2044.Horizontal );
						double __0x2052 = Math.PI / 2 - .01;
						if( __0x2044.Vertical > __0x2052 ) __0x2044.Vertical = __0x2052;
						if( __0x2044.Vertical < -__0x2052 ) __0x2044.Vertical = -__0x2052;
					}
					else
					{
						
						if( __0x1991.Mode.Value == Scene.ModeEnum._3D )
						{
							
							
							if( __0x2109( EKeys.W ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
								__0x2043 += __0x2044.GetVector() * __0x2049;
							if( __0x2109( EKeys.S ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
								__0x2043 -= __0x2044.GetVector() * __0x2049;
							if( __0x2109( EKeys.A ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.D ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.E ) || viewport.IsKeyPressed( EKeys.NumPad9 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical + Math.PI / 2 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.Q ) || viewport.IsKeyPressed( EKeys.NumPad3 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical - Math.PI / 2 ).GetVector() * __0x2049;
							

							if( viewport.IsKeyPressed( EKeys.Up ) )
								__0x2043 += __0x2044.GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Down ) )
								__0x2043 -= __0x2044.GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Left ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Right ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.PageUp ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical + Math.PI / 2 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.PageDown ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical - Math.PI / 2 ).GetVector() * __0x2049;

							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
						}
						else
						{
							
							
							if( __0x2109( EKeys.W ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.S ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.A ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical - Math.PI / 2 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.D ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical + Math.PI / 2 ).GetVector() * __0x2049;
							if( __0x2109( EKeys.E ) || viewport.IsKeyPressed( EKeys.NumPad9 ) )
								__0x2046 += __0x2051;
							if( __0x2109( EKeys.Q ) || viewport.IsKeyPressed( EKeys.NumPad3 ) )
								__0x2046 -= __0x2051;
							

							if( viewport.IsKeyPressed( EKeys.Up ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Down ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Left ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical - Math.PI / 2 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.Right ) )
								__0x2043 += new SphericalDirection( __0x2044.Horizontal, __0x2044.Vertical + Math.PI / 2 ).GetVector() * __0x2049;
							if( viewport.IsKeyPressed( EKeys.PageUp ) )
								__0x2046 -= __0x2051;
							if( viewport.IsKeyPressed( EKeys.PageDown ) )
								__0x2046 += __0x2051;
						}
					}

					if( __0x1991.Mode.Value == Scene.ModeEnum._2D )
					{
						__0x2043.Z = __0x1991.CameraEditor2DPositionZ;
						if( __0x2046 < 0.01 )
							__0x2046 = 0.01;
					}

					if( __0x2043 != __0x2041 || __0x2044 != __0x2042 )
					{
						var __0x2053 = __0x2040.UpdatePosition( __0x2043 );
						if( __0x2044 != __0x2042 )
						{
							var __0x2054 = __0x2044.GetVector();
							if( __0x1991.Mode.Value == Scene.ModeEnum._2D && Math.Abs( __0x2039.FixedUp.Value.Z ) < 0.001 )
								__0x2054 = new Vector3( 0, 0, -1 );
							__0x2053 = __0x2053.UpdateRotation( Quaternion.LookAt( __0x2054, __0x2039.FixedUp ) );
						}
						__0x2039.Transform = __0x2053;
					}
					if( __0x2046 != __0x2045 )
						__0x2039.Height = __0x2046;
				}
			}

			
			{
				for( int __0x2055 = 0; __0x2055 < __0x1996.Count; __0x2055++ )
				{
					__0x1996[ __0x2055 ].timeRemaining -= delta;
					if( __0x1996[ __0x2055 ].timeRemaining <= 0 )
					{
						__0x1996.RemoveAt( __0x2055 );
						__0x2055--;
					}
				}
			}

			__0x2000?.PerformTick( viewport, delta );
			__0x2001?.PerformTick( viewport, delta );

			
			
			
			
			
			
		}

		protected virtual void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x2000?.PerformUpdateBegin( viewport );
			__0x2001?.PerformUpdateBegin( viewport );
		}

		void __0x2110()
		{
			

			var __0x2056 = new List<string>();
			GetTextInfoLeftTopCorner( __0x2056 );
			var __0x2057 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x2056, new Rectangle( __0x2057.X, __0x2057.Y, 1, 1 ), EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 1, 1, 1 ) );
		}

		void __0x2111()
		{
			var __0x2058 = new List<string>();
			GetTextInfoRightBottomCorner( __0x2058 );
			var __0x2059 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x2058, new Rectangle( 0, 0, 1.0 - __0x2059.X, 1.0 - __0x2059.Y ), EHorizontalAlignment.Right, EVerticalAlignment.Bottom, new ColorValue( 1, 1, 1 ) );

			
			
			
			
			
		}

		void __0x2112()
		{
			var __0x2060 = GetFontSize() * 1.3;

			var __0x2061 = new List<string>();
			GetTextInfoCenterBottomCorner( __0x2061 );
			AddTextLinesWithShadow( null, __0x2060, __0x2061, new Rectangle( 0, 0.7, 1.0, 1.0 ), EHorizontalAlignment.Center, EVerticalAlignment.Center, new ColorValue( 1, 1, 1 ) );

			
			
			
			
			
		}

		void __0x2113()
		{
			
			var __0x2062 = ViewportControl.Viewport.CanvasRenderer;
			var __0x2063 = __0x2062.DefaultFont;
			if( __0x2063 == null )
				return;

			var __0x2064 = GetFontSize();
			var __0x2065 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );

			double __0x2066 = 1.0 - __0x2065.Y;
			for( int __0x2067 = __0x1996.Count - 1; __0x2067 >= 0; __0x2067-- )
			{
				__0x2171 __0x2068 = __0x1996[ __0x2067 ];

				Rectangle __0x2069 = new Rectangle( __0x2065.X, -1, 1.0 - __0x2065.X, __0x2066 );
				
				ColorValue __0x2070 = __0x2068.color * new ColorValue( 1, 1, 1, __0x2068.timeRemaining );
				
				
				if( __0x2070.Alpha > 1 )
					__0x2070.Alpha = 1;
				int __0x2071 = AddTextWordWrapWithShadow( __0x2063, __0x2064, __0x2068.text, __0x2069, EHorizontalAlignment.Left, EVerticalAlignment.Bottom, __0x2070 );

				__0x2066 -= (float)__0x2064 * (float)__0x2071;
				if( __0x2066 < 0 )
					break;
			}
		}

		protected virtual void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context )
		{
			__0x2000?.PerformUpdateGetObjectInSceneRenderingContext( viewport, ref context );
			__0x2001?.PerformUpdateGetObjectInSceneRenderingContext( viewport, ref context );
		}

		protected virtual void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			

			


			
			
			
			

			

			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			

			
			

			
			
			

			__0x2000?.PerformUpdateBeforeOutput( viewport );
			__0x2001?.PerformUpdateBeforeOutput( viewport );
		}

		protected virtual void GetTextInfoLeftTopCorner( List<string> lines )
		{
		}

		protected virtual void GetTextInfoRightBottomCorner( List<string> lines )
		{
			__0x2000?.PerformGetTextInfoRightBottomCorner( lines );
			__0x2001?.PerformGetTextInfoRightBottomCorner( lines );
		}

		protected virtual void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			__0x2000?.PerformGetTextInfoCenterBottomCorner( lines );
			__0x2001?.PerformGetTextInfoCenterBottomCorner( lines );

			foreach( var __0x2108 in SelectedObjects )
			{
				var __0x2072 = __0x2108 as Component;
				__0x2072?.PerformEditorGetTextInfoCenterBottomCorner( lines );
			}
		}

		
		protected virtual void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x2000?.PerformUpdateBeforeOutput2( viewport );
			__0x2001?.PerformUpdateBeforeOutput2( viewport );

			__0x2110();
			__0x2111();
			__0x2112();

			__0x2113();

			
			
			
			
			
			
			
			
			
			
			
			
		}

		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		protected virtual void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x2000?.PerformUpdateEnd( viewport );
			__0x2001?.PerformUpdateEnd( viewport );
		}

		protected virtual void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
		}

		protected override void OnDestroy()
		{
			DestroyScene();

			base.OnDestroy();
		}

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		

		

		public void AddScreenMessage( string text, ColorValue color )
		{
			__0x2171 __0x2073 = new __0x2171();
			__0x2073.text = text;
			__0x2073.color = color;
			__0x2073.timeRemaining = 5;
			__0x1996.Add( __0x2073 );

			
			while( __0x1996.Count > 100 )
				__0x1996.RemoveAt( 0 );
		}

		public void AddScreenMessage( string text )
		{
			AddScreenMessage( text, new ColorValue( 1, 1, 1 ) );
		}

		
		
		
		
		
		
		

		

		
		
		
		

		[Browsable( false )]
		public Scene Scene
		{
			get { return __0x1991; }
			set { __0x1991 = value; }
		}

		[Browsable( false )]
		public bool SceneNeedDispose
		{
			get { return __0x1992; }
			set { __0x1992 = value; }
		}

		public Scene CreateScene( bool enable )
		{
			DestroyScene();

			__0x1991 = ComponentUtility.CreateComponent<Scene>( null, true, enable );
			__0x1992 = true;

			
			__0x1991.OctreeEnabled = false;

			
			{
				var __0x2074 = (RenderingPipeline)__0x1991.CreateComponent( RenderingSystem.RenderingPipelineBasic, -1, false );
				__0x1991.RenderingPipeline = __0x2074;

				
				__0x2074.DeferredShading = AutoTrueFalse.False;
				__0x2074.LODRange = new RangeI( 0, 0 );

				double __0x2075 = 1;
				double __0x2076 = 1;

				if( EditorAPI.DarkTheme )
					__0x1991.BackgroundColor = new ColorValue( 40.0 / 255 * __0x2075, 40.0 / 255 * __0x2075, 40.0 / 255 * __0x2075 );
				else
					__0x1991.BackgroundColor = new ColorValue( 22.0 / 255 * __0x2075, 44.0 / 255 * __0x2075, 66.0 / 255 * __0x2075 );
				__0x1991.BackgroundColorAffectLighting = 1;
				__0x1991.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );

				var __0x2077 = __0x2074.CreateComponent<Component>();
				__0x2077.Name = "Background Effects";

				var __0x2078 = __0x2077.CreateComponent<RenderingEffect_Vignetting>();
				if( EditorAPI.DarkTheme )
					__0x2078.Color = new ColorValue( 45.0 / 255 * __0x2076, 45.0 / 255 * __0x2076, 45.0 / 255 * __0x2076 );
				else
					__0x2078.Color = new ColorValue( 24.0 / 255 * __0x2076, 48.0 / 255 * __0x2076, 72.0 / 255 * __0x2076 );
				__0x2078.Radius = 2;

				var __0x2079 = __0x2077.CreateComponent<RenderingEffect_Noise>();
				__0x2079.Multiply = new Range( 0.9, 1.1 );

				var __0x2080 = __0x2074.CreateComponent<Component>();
				__0x2080.Name = "Scene Effects";

				
				__0x2080.CreateComponent<RenderingEffect_ToLDR>();
				var __0x2081 = __0x2080.CreateComponent<RenderingEffect_Antialiasing>();
				__0x2081.BasicTechnique = RenderingEffect_Antialiasing.BasicTechniqueEnum.SSAAx4;

				__0x2074.Enabled = true;
			}

			
			{
				var __0x2082 = __0x1991.CreateComponent<Light>();
				__0x2082.Type = Light.TypeEnum.Ambient;
				__0x2082.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x2083 = __0x1991.CreateComponent<Light>();
				__0x2083.Type = Light.TypeEnum.Directional;
				__0x2083.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x2083.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewDirectionalLightBrightness" );
				
				__0x2083.Shadows = false;
				
				
			}

			
			__0x1991.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( ViewportControl != null && ViewportControl.Viewport != null )
				ViewportControl.Viewport.AttachedScene = __0x1991;

			return __0x1991;
		}

		public void DestroyScene()
		{
			if( __0x1991 != null )
			{
				if( ViewportControl != null && ViewportControl.Viewport != null )
					ViewportControl.Viewport.AttachedScene = null;

				if( __0x1992 )
					__0x1991.Dispose();
				__0x1991 = null;
				__0x1992 = false;
			}
		}

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			Camera __0x2084;

			if( scene.Mode.Value == Scene.ModeEnum._3D )
			{
				
				__0x2084 = scene.CameraEditor;
				if( __0x2084 == null )
				{
					string __0x2085 = "Camera Editor";

					__0x2084 = scene.GetComponent( __0x2085 ) as Camera;
					if( __0x2084 == null )
					{
						__0x2084 = scene.CreateComponent<Camera>();
						__0x2084.Name = __0x2085;
						__0x2084.Visible = false;
						__0x2084.CanBeSelected = false;
					}
					scene.CameraEditor = new Reference<Camera>( null, ReferenceUtility.CalculateThisReference( scene, __0x2084 ) );
				}
			}
			else
			{
				
				__0x2084 = scene.CameraEditor2D;
				if( __0x2084 == null )
				{
					string __0x2086 = "Camera Editor 2D";

					__0x2084 = scene.GetComponent( __0x2086 ) as Camera;
					if( __0x2084 == null )
					{
						__0x2084 = scene.CreateComponent<Camera>();
						__0x2084.Name = __0x2086;
						__0x2084.Visible = false;
						__0x2084.Transform = new Transform( new Vector3( 2.64918580053222, 3.02745193504869, 10 ), new Quaternion( -0.502493739596367, 0.497493760429674, 0.497493760429674, 0.502493739596367 ), Vector3.One );
						__0x2084.Projection = ProjectionType.Orthographic;
						__0x2084.Height = 16.8586419336498;
						__0x2084.FixedUp = Vector3.YAxis;
						__0x2084.FarClipPlane = 100;
						__0x2084.CanBeSelected = false;
					}
					scene.CameraEditor2D = new Reference<Camera>( null, ReferenceUtility.CalculateThisReference( scene, __0x2084 ) );
				}
			}

			__0x2000?.PerformViewportUpdateGetCameraSettings( ref __0x2084 );
			__0x2001?.PerformViewportUpdateGetCameraSettings( ref __0x2084 );

			

			
			
			
			

			

			
			
			
			
			
			
			
			
			

			viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x2084, scene.FrustumCullingTest );

			
			

			
			processed = true;
		}

		[Browsable( false )]
		public bool CameraRotating
		{
			get { return __0x1995; }
		}

		public double GetFontSize()
		{
			double __0x2087 = 14.0 * DpiHelper.Default.DpiScaleFactor;
			__0x2087 = (int)__0x2087;

			var __0x2088 = ViewportControl.Viewport.CanvasRenderer;

			int __0x2089 = __0x2088.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x2090 = (float)__0x2087 / (float)__0x2089;
			float __0x2091 = __0x2090;

			return __0x2091;
		}

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		public void AddTextWithShadow( FontComponent font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x2092 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2092.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x2092.DefaultFontSize;

			Vector2 __0x2093 = __0x1998 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			__0x2092.AddText( font, fontSize, text, position + __0x2093, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
			__0x2092.AddText( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextWithShadow( null, -1, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( FontComponent font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			if( lines.Count == 0 )
				return;

			var __0x2094 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2094.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x2094.DefaultFontSize;

			Vector2 __0x2095 = __0x1998 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			float __0x2096 = (float)lines.Count * (float)fontSize;

			double __0x2097 = 0;
			switch( verticalAlign )
			{
			case EVerticalAlignment.Top:
				__0x2097 = rectangle.Top;
				break;
			case EVerticalAlignment.Center:
				__0x2097 = rectangle.Top + ( rectangle.Size.Y - __0x2096 ) / 2;
				break;
			case EVerticalAlignment.Bottom:
				__0x2097 = rectangle.Bottom - __0x2096;
				break;
			}

			for( int __0x2098 = 0; __0x2098 < lines.Count; __0x2098++ )
			{
				string __0x2099 = lines[ __0x2098 ];

				double __0x2100 = 0;
				switch( horizontalAlign )
				{
				case EHorizontalAlignment.Left:
					__0x2100 = rectangle.Left;
					break;
				case EHorizontalAlignment.Center:
					__0x2100 = rectangle.Left + ( rectangle.Size.X - font.GetTextLength( fontSize, __0x2094, __0x2099 ) ) / 2;
					break;
				case EHorizontalAlignment.Right:
					__0x2100 = rectangle.Right - font.GetTextLength( fontSize, __0x2094, __0x2099 );
					break;
				}

				Vector2 __0x2101 = new Vector2( __0x2100, __0x2097 );

				__0x2094.AddText( font, fontSize, __0x2099, __0x2101 + __0x2095, EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
				__0x2094.AddText( font, fontSize, __0x2099, __0x2101, EHorizontalAlignment.Left, EVerticalAlignment.Top, color );
				__0x2097 += fontSize;
			}
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextLinesWithShadow( null, -1, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( FontComponent font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x2102 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2102.DefaultFont;
			if( font == null || font.Disposed )
				return 0;
			
			
			if( fontSize < 0 )
				fontSize = __0x2102.DefaultFontSize;

			var __0x2103 = font.GetWordWrapLines( fontSize, __0x2102, text, rectangle.Size.X );

			string[] __0x2104 = new string[ __0x2103.Length ];
			for( int __0x2105 = 0; __0x2105 < __0x2104.Length; __0x2105++ )
				__0x2104[ __0x2105 ] = __0x2103[ __0x2105 ].Text;

			AddTextLinesWithShadow( font, fontSize, __0x2104, rectangle, horizontalAlign, verticalAlign, color );

			return __0x2104.Length;
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return AddTextWordWrapWithShadow( null, -1, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		[Browsable( false )]
		public string WorkareaModeName
		{
			get { return __0x1999; }
		}

		[Browsable( false )]
		public WorkareaModeClass WorkareaMode
		{
			get { return __0x2000; }
		}

		public virtual void WorkareaModeSet( string name, WorkareaModeClass instance = null )
		{
			__0x2000?.PerformDestroy();

			__0x1999 = name;
			__0x2000 = instance;
		}

		[Browsable( false )]
		public bool AllowCameraControl
		{
			get
			{
				if( __0x2000 != null && !__0x2000.AllowControlCamera )
					return false;
				return true;
			}
		}

		[Browsable( false )]
		public bool AllowSelectObjects
		{
			get
			{
				if( __0x2000 != null && !__0x2000.AllowSelectObjects )
					return false;
				return true;
			}
		}

		[Browsable( false )]
		public bool DisplaySelectedObjects
		{
			get
			{
				if( __0x2000 != null && !__0x2000.DisplaySelectedObjects )
					return false;
				return true;
			}
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			__0x2001?.PerformEditorActionGetState( context );
			__0x2000?.PerformEditorActionGetState( context );
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			__0x2001?.PerformEditorActionClick( context );
			__0x2000?.PerformEditorActionClick( context );
		}

		public override void EditorActionClick2( EditorAction.ClickContext context )
		{
			base.EditorActionClick2( context );

			__0x2001?.PerformEditorActionClick2( context );
			__0x2000?.PerformEditorActionClick2( context );
		}

		[Browsable( false )]
		public ObjectCreationMode ObjectCreationMode
		{
			get { return __0x2001; }
		}

		public virtual void ObjectCreationModeSet( ObjectCreationMode mode )
		{
			__0x2001?.PerformDestroy();

			__0x2001 = mode;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DocumentWindowWithViewport
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x2106 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x2114()
		{
			this.__0x2107 = new NeoAxis.Editor.EngineViewportControl();
			this.SuspendLayout();
			
			
			
			this.__0x2107.AllowCreateRenderWindow = true;
			this.__0x2107.AutomaticUpdateFPS = 200F;
			this.__0x2107.BackColor = System.Drawing.Color.Transparent;
			this.__0x2107.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2107.Location = new System.Drawing.Point(0, 0);
			this.__0x2107.Margin = new System.Windows.Forms.Padding(0);
			this.__0x2107.Name = "viewportControl";
			this.__0x2107.OneFrameChangeCursor = null;
			this.__0x2107.Size = new System.Drawing.Size(354, 171);
			this.__0x2107.TabIndex = 0;
			
			
			
			this.AllowDrop = true;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x2107);
			this.Name = "DocumentWindowWithViewport";
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Editor.EngineViewportControl __0x2107;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Representation of an editor action.
	/// </summary>
	public class EditorAction
	{
		public string Name;
		public CommonTypeEnum CommonType = CommonTypeEnum.Document;
		public string Description;

		
		
		public Image ImageSmall;
		public Image ImageBig;
		public Image ImageSmallDark;
		public Image ImageBigDark;

		Image __0x2172;
		Image __0x2173;

		public Keys[] ShortcutKeys;

		
		public bool QatSupport;
		public bool QatAddByDefault;

		
		public (string, string) RibbonText;

		
		public enum ActionTypeEnum
		{
			Button,
			DropDown,
			Slider,
			
			ListBox,
		}
		public ActionTypeEnum ActionType = ActionTypeEnum.Button;
		public KryptonContextMenu DropDownContextMenu;

		public SliderSettings Slider = new SliderSettings();
		
		public ListBoxSettings ListBox = new ListBoxSettings();

		public EditorContextMenuWinForms.MenuTypeEnum ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.None;
		

		public string ContextMenuText;

		public object UserData;

		public bool CompletelyDisabled;

		

		public enum CommonTypeEnum
		{
			General,
			/// <summary>
			/// When this option is enabled, the action can be enabled even when the document window is not selected (another dock window is selected). The last selected document window will be used.
			/// </summary>
			Document,
		}

		

		public enum HolderEnum
		{
			RibbonQAT,
			ContextMenu,
			ShortcutKey,
		}

		

		public class SliderSettings
		{
			
			
			
			
			
			
			public double Minimum;
			public double Maximum = 1;
			public double ExponentialPower;
										   
										   

			public double Value;

			
			
			
			
			
			
			
			
			
			
			
			
		}

		

		
		
		
		
		
		

		

		public class ListBoxSettings
		{
			public int Length = 150;

			public enum ModeEnum
			{
				List,
				Tiles,
			}
			public ModeEnum Mode = ModeEnum.List;

			public List<(string, Image)> Items = new List<(string, Image)>();
			public int SelectedIndex;

			public int? SelectIndex;

			public bool LastSelectedIndexChangedByUser;
		}

		

		public class GetStateContext
		{
			HolderEnum __0x2174;
			ObjectsInFocus __0x2175;
			EditorAction __0x2176;

			

			internal GetStateContext( HolderEnum holder, ObjectsInFocus objectsInFocus, EditorAction action )
			{
				this.__0x2174 = holder;
				this.__0x2175 = objectsInFocus;
				this.__0x2176 = action;
			}

			public HolderEnum Holder
			{
				get { return __0x2174; }
			}

			public ObjectsInFocus ObjectsInFocus
			{
				get { return __0x2175; }
			}

			public EditorAction Action
			{
				get { return __0x2176; }
			}

			public bool Enabled { get; set; }
			public bool Checked { get; set; }
		}

		

		public class ClickContext
		{
			HolderEnum __0x2177;
			ObjectsInFocus __0x2178;
			EditorAction __0x2179;

			

			internal ClickContext( HolderEnum holder, ObjectsInFocus objectsInFocus, EditorAction action )
			{
				this.__0x2177 = holder;
				this.__0x2178 = objectsInFocus;
				this.__0x2179 = action;
			}

			public HolderEnum Holder
			{
				get { return __0x2177; }
			}

			public ObjectsInFocus ObjectsInFocus
			{
				get { return __0x2178; }
			}

			public EditorAction Action
			{
				get { return __0x2179; }
			}
		}

		

		public delegate void GetStateDelegate( GetStateContext __0x2208 );
		public event GetStateDelegate GetState;
		public void PerformGetState( GetStateContext context )
		{
			GetState?.Invoke( context );
		}

		
		public delegate void ClickDelegate( ClickContext __0x2209 );
		public event ClickDelegate Click;
		public void PerformClick( ClickContext context )
		{
			Click?.Invoke( context );
		}

		public event ClickDelegate Click2;
		public void PerformClick2( ClickContext context )
		{
			Click2?.Invoke( context );
		}

		public string ToolTip
		{
			get
			{
				string __0x2180 = "";

				if( !string.IsNullOrEmpty( Description ) )
					__0x2180 = EditorLocalization.Translate( "EditorAction.Description", Description );
				else
				{
					__0x2180 = Name;
					
				}

				var __0x2181 = EditorActions.ConvertShortcutKeysToString( ShortcutKeys );
				if( __0x2181 != "" )
					__0x2180 += " (" + __0x2181 + ")";

				return __0x2180;
			}
		}

		public string GetContextMenuText()
		{
			if( !string.IsNullOrEmpty( ContextMenuText ) )
				return EditorLocalization.Translate( "EditorAction.Name", ContextMenuText );
			return Name;
		}

		internal static Bitmap ResizeImage( Image image, int width, int height )
		{
			Bitmap __0x2182 = new Bitmap( width, height );
			using( Graphics __0x2183 = Graphics.FromImage( __0x2182 ) )
			{
				__0x2183.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.High;
				__0x2183.DrawImage( image, 0, 0, width, height );
			}
			return __0x2182;
		}

		void __0x2207()
		{
			if( __0x2172 == null && __0x2173 == null )
			{
				var __0x2184 = ( EditorAPI.DarkTheme && ImageBigDark != null ) ? ImageBigDark : ImageBig;
				var __0x2185 = ( EditorAPI.DarkTheme && ImageSmallDark != null ) ? ImageSmallDark : ImageSmall;

				if( __0x2185 == null && __0x2184 != null )
					__0x2185 = ResizeImage( __0x2184, 16, 16 );

				__0x2173 = __0x2184;
				__0x2172 = __0x2185;
			}
		}

		public Image GetImageBig()
		{
			__0x2207();
			return __0x2173;
		}

		public Image GetImageSmall()
		{
			__0x2207();
			return __0x2172;
			
			
			
		}
	}

	

	public class EditorAction_NewResource : EditorAction
	{
		Metadata.TypeInfo __0x2186;

		

		public EditorAction_NewResource( Metadata.TypeInfo type )
		{
			this.__0x2186 = type;

			ImageSmall = Properties.Resources.New_16;
			ImageBig = Properties.Resources.New_32;
			QatSupport = true;

			GetState += delegate ( EditorAction.GetStateContext __0x2210 )
			{
				__0x2210.Enabled = true;
			};
			Click += delegate ( EditorAction.ClickContext __0x2211 )
			{
				var __0x2187 = new NewObjectWindow.CreationDataClass();

				var __0x2188 = EditorAPI.FindWindow<ResourcesWindow>();
				string __0x2189 = __0x2188.ContentBrowser1.GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
				if( !string.IsNullOrEmpty( __0x2189 ) )
					__0x2187.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( __0x2189 );

				__0x2187.initLockType = type;

				EditorAPI.OpenNewObjectWindow( __0x2187 );
			};
		}

		public EditorAction_NewResource( Type type )
			: this( MetadataManager.GetTypeOfNetType( type ) )
		{
		}

		public Metadata.TypeInfo Type
		{
			get { return __0x2186; }
		}
	}

	

	
	
	
	

	

	
	
	

	
	
	

	
	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	

	

	public class EditorActionDockWindow : EditorAction
	{
		public Type windowClass;
	}

	

	public static class EditorActions
	{
		static Dictionary<string, EditorAction> __0x2190 = new Dictionary<string, EditorAction>();

		

		static EditorActions()
		{
			if( EditorForm.Instance != null )
				EditorStandardActions.Register();
		}

		public static ICollection<EditorAction> Actions
		{
			get { return __0x2190.Values; }
		}

		public static EditorAction GetByName( string name )
		{
			__0x2190.TryGetValue( name, out EditorAction action );
			return action;
		}

		
		

		public static void Register( EditorAction action )
		{
			
			if( action.RibbonText.Item1 == null )
			{
				var __0x2191 = action.Name;

				if( __0x2191.Contains( " " ) )
				{
					int __0x2192 = __0x2191.IndexOf( ' ' );
					action.RibbonText = (__0x2191.Substring( 0, __0x2192 ), __0x2191.Substring( __0x2192 + 1 ));
				}
				else
					action.RibbonText = (__0x2191, "");
			}

			
			
			
			

			__0x2190[ action.Name ] = action;
		}

		public static void Unregister( string name )
		{
			__0x2190.Remove( name );
		}

		public static void CompleteDisable( string name )
		{
			var __0x2193 = GetByName( name );
			if( __0x2193 != null )
				__0x2193.CompletelyDisabled = true;
		}

		public static void RegisterDockWindowAction( string name, (string, string) ribbonText, Type windowClass )
		{
			var __0x2194 = new EditorActionDockWindow();
			__0x2194.Name = name;
			__0x2194.Description = "Shows or hides the " + name + ".";
			__0x2194.ImageSmall = Properties.Resources.Window_16;
			__0x2194.ImageBig = Properties.Resources.Window_32;
			__0x2194.QatSupport = true;
			__0x2194.RibbonText = ribbonText;
			__0x2194.windowClass = windowClass;
			__0x2194.GetState += delegate ( EditorAction.GetStateContext __0x2212 )
			{
				var __0x2195 = (EditorActionDockWindow)__0x2212.Action;
				var __0x2196 = EditorForm.Instance.WorkspaceController.FindWindow( __0x2195.windowClass );
				if( __0x2196 != null )
				{
					__0x2212.Enabled = true;
					var __0x2197 = EditorForm.Instance.WorkspaceController.DockingManager;
					__0x2212.Checked = __0x2196 != null && __0x2196.Visible && __0x2197.ContainsPage( __0x2196.KryptonPage );
				}
			};
			__0x2194.Click += delegate ( EditorAction.ClickContext __0x2213 )
			{
				var __0x2198 = (EditorActionDockWindow)__0x2213.Action;
				var __0x2199 = EditorForm.Instance.WorkspaceController.FindWindow( __0x2198.windowClass );
				if( __0x2199 != null )
				{
					EditorForm.Instance.WorkspaceController.SetDockWindowVisibility( __0x2199, !__0x2199.Visible );

					var __0x2200 = EditorForm.Instance.WorkspaceController.DockingManager;
					if( !__0x2200.ContainsPage( __0x2199.KryptonPage ) )
						EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2199, true, false );
				}
			};
			Register( __0x2194 );
		}

		internal static string ConvertShortcutKeysToString( Keys[] shortcutKeys, bool onlyFirst = false )
		{
			if( shortcutKeys != null && shortcutKeys.Length != 0 )
			{
				string __0x2201 = "";

				for( int __0x2202 = 0; __0x2202 < shortcutKeys.Length; __0x2202++ )
				{
					if( onlyFirst && __0x2202 != 0 )
						break;

					var __0x2203 = shortcutKeys[ __0x2202 ];
					if( __0x2202 != 0 )
						__0x2201 += "; ";

					var __0x2204 = __0x2203.ToString();

					if( __0x2204.Contains( ", Control" ) )
						__0x2204 = "Ctrl+" + __0x2204.Replace( ", Control", "" );
					if( __0x2204.Contains( ", Shift" ) )
						__0x2204 = "Shift+" + __0x2204.Replace( ", Shift", "" );
					if( __0x2204.Contains( ", Alt" ) )
						__0x2204 = "Alt+" + __0x2204.Replace( ", Alt", "" );
					__0x2204 = __0x2204.Replace( ", ", "+" );

					__0x2201 += __0x2204;
				}

				return __0x2201;
			}
			else
				return "";
		}

		public static string GetFirstShortcutKeyString( string actionName )
		{
			var __0x2205 = ProjectSettings.Get.Shortcuts.ShortcutSettings.GetActionItem( actionName );
			if( __0x2205 != null )
			{
				var __0x2206 = __0x2205.ToArray();
				if( __0x2206 != null )
					return ConvertShortcutKeysToString( __0x2206, true );
			}
			return null;

			
			
			
			
		}
	}
}





namespace NeoAxis.Editor
{
	
	/// <summary>
	/// Provides an interface to work with the editor.
	/// </summary>
	public static class EditorAPI
	{
		static bool __0x2214;
		static bool __0x2215;
		static bool __0x2216;

		

		
		static EditorForm EditorForm
		{
			get { return EditorForm.Instance; }
		}

		public static bool IsEditor
		{
			get { return EngineApp.ApplicationType == EngineApp.ApplicationTypeEnum.Editor; }
		}

		public static DockWindow FindWindow( Type windowClass )
		{
			return EditorForm?.WorkspaceController.FindWindow( windowClass );
		}

		public static T FindWindow<T>() where T : DockWindow
		{
			return (T)FindWindow( typeof( T ) );
		}

		public static void ShowDockWindow( Type windowClass )
		{
			EditorForm?.WorkspaceController.ShowDockWindow( windowClass );
		}

		public static void ShowDockWindow<T>() where T : DockWindow
		{
			ShowDockWindow( typeof( T ) );
		}

		
		public static void SelectFilesOrDirectoriesInMainResourcesWindow( string[] realPaths, bool expandNodes = false )
		{
			var __0x2217 = FindWindow<ResourcesWindow>();
			if( __0x2217 != null )
			{
				__0x2217.ContentBrowser1?.NeedSelectFilesOrDirectories( realPaths, expandNodes );
				SelectDockWindow( __0x2217 );
			}
		}

		
		public static void SelectComponentsInMainObjectsWindow( DocumentWindow documentWindow, Component[] components )
		
		{
			if( documentWindow == null || components.Length == 0 )
				return;

			var __0x2218 = FindWindow<ObjectsWindow>();
			if( __0x2218 != null && __0x2218.Visible )
			{
				var __0x2219 = __0x2218.GetPanel( documentWindow );
				if( __0x2219 != null )
				{
					var __0x2220 = __0x2219.control as ContentBrowser;
					if( __0x2220 != null )
						ContentBrowserUtility.SelectComponentItems( __0x2220, components );
				}
			}
		}

		public static void GetRestartApplication( out bool needRestart, out bool resetWindowsSettings )
		{
			needRestart = __0x2214;
			resetWindowsSettings = __0x2215;
		}

		public static void SetRestartApplication( bool needRestart, bool resetWindowsSettings = false )
		{
			__0x2214 = needRestart;
			__0x2215 = resetWindowsSettings;
		}

		public static void BeginCloseApplication()
		{
			if( EditorForm != null )
				EditorForm.needClose = true;
		}

		public static void BeginRestartApplication( bool resetWindowsSettings = false )
		{
			SetRestartApplication( true, resetWindowsSettings );
			BeginCloseApplication();
		}

		public static List<DocumentInstance> Documents
		{
			get { return EditorForm.Instance.Documents; }
		}

		public static DocumentInstance GetDocumentByObject( object obj )
		{
			if( obj == null )
				Log.Fatal( "EditorAPI: GetDocumentByObject: obj == null." );

			foreach( var __0x2362 in Documents )
			{
				if( __0x2362.ResultObject == obj )
					return __0x2362;
			}

			
			{
				var __0x2221 = obj as Component;
				if( __0x2221 != null )
				{
					var __0x2222 = __0x2221.ParentRoot;
					foreach( var __0x2363 in Documents )
					{
						if( __0x2363.ResultObject == __0x2222 )
							return __0x2363;
					}
				}
			}

			return null;
		}

		public static void CloseAllDocumentWindowsOnSecondLevel( DocumentInstance document )
		{
			var __0x2223 = new List<DocumentWindow>();

			foreach( var __0x2364 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2224 = __0x2364 as DocumentWindow;
				if( __0x2224 != null && __0x2224.Document == document && __0x2224.IsWindowInWorkspace && __0x2224.ObjectOfWindow != document.ResultObject )
					__0x2223.Add( __0x2224 );
			}

			foreach( var __0x2365 in __0x2223 )
				__0x2365.Close();
		}

		public static void CloseAllDocumentWindowsOnSecondLevelWithDeletedObjects( DocumentInstance document )
		{
			var __0x2225 = new List<DocumentWindow>();

			foreach( var __0x2366 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2226 = __0x2366 as DocumentWindow;
				if( __0x2226 != null && __0x2226.Document == document && __0x2226.IsWindowInWorkspace && __0x2226.ObjectOfWindow != document.ResultObject && __0x2226.ObjectOfWindowIsDeleted )
					__0x2225.Add( __0x2226 );
			}

			foreach( var __0x2367 in __0x2225 )
				__0x2367.Close();
		}

		public static List<DocumentWindow> FindDocumentWindowsWithObject( object obj )
		{
			var __0x2227 = new List<DocumentWindow>();

			foreach( var __0x2368 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2228 = __0x2368 as DocumentWindow;
				if( __0x2228 != null && __0x2228.ObjectOfWindow == obj )
					__0x2227.Add( __0x2228 );
			}

			return __0x2227;
		}

		
		
		
		

		

		
		
		
		
		
		

		
		

		
		
		
		
		

		public static void SelectDockWindow( DockWindow window )
		{
			EditorForm.Instance.WorkspaceController.SelectDockWindow( window );
		}

		
		public static DocumentWindow SelectedDocumentWindow
		{
			get { return EditorForm.Instance.WorkspaceController.SelectedDocumentWindow; }
		}

		static DocumentWindow __0x2229;
		public static event Action SelectedDocumentWindowChanged;

		internal static void SelectedDocumentWindowChangedUpdate()
		{
			var __0x2230 = SelectedDocumentWindow;
			if( __0x2229 != __0x2230 )
			{
				__0x2229 = __0x2230;
				SelectedDocumentWindowChanged?.Invoke();
			}
		}

		public static DocumentInstance SelectedDocument
		{
			get
			{
				var __0x2231 = SelectedDocumentWindow;
				if( __0x2231 != null )
					return __0x2231.Document;
				return null;
			}
		}

		public static bool ExistsModifiedDocuments()
		{
			foreach( var __0x2369 in Documents )
			{
				if( __0x2369.Modified )
					return true;
			}
			return false;
		}

		public static bool SaveDocuments(  )
		{
			foreach( var __0x2370 in Documents )
			{
				
				

				if( __0x2370.Modified )
				{
					if( !__0x2370.Save() )
					{
						
						return false;
					}
				}
			}
			return true;
		}

		public static DocumentInstance GetDocumentByRealFileName( string realFileName, string specialMode )
		{
			realFileName = VirtualPathUtility.NormalizePath( realFileName );
			if( specialMode == null )
				specialMode = "";

			foreach( var __0x2371 in Documents )
			{
				if( !string.IsNullOrEmpty( __0x2371.RealFileName ) )
				{
					if( string.Compare( VirtualPathUtility.NormalizePath( __0x2371.RealFileName ), realFileName, true ) == 0 && __0x2371.SpecialMode == specialMode )
						return __0x2371;
				}
			}

			return null;
		}

		public static DocumentInstance GetDocumentByResource( Resource.Instance instance )
		{
			foreach( var __0x2372 in Documents )
			{
				if( __0x2372.LoadedResource == instance )
					return __0x2372;
			}
			return null;
		}

		public delegate void EditorActionGetStateEventDelegate( EditorAction.GetStateContext __0x2384 );
		public static event EditorActionGetStateEventDelegate EditorActionGetStateEvent;

		public delegate void EditorActionClickEventDelegate( EditorAction.ClickContext __0x2385 );
		public static event EditorActionClickEventDelegate EditorActionClickEvent;
		public static event EditorActionClickEventDelegate EditorActionClick2Event;

		public static EditorAction.GetStateContext EditorActionGetState( EditorAction.HolderEnum holder, EditorAction action )
		{
			var __0x2232 = GetObjectsInFocus( action.CommonType == EditorAction.CommonTypeEnum.Document );
			var __0x2233 = new EditorAction.GetStateContext( holder, __0x2232, action );

			
			action.PerformGetState( __0x2233 );
			
			__0x2232.DocumentWindow?.Document?.EditorActionGetState( __0x2233 );
			
			__0x2232.DocumentWindow?.EditorActionGetState( __0x2233 );
			
			EditorActionGetStateEvent?.Invoke( __0x2233 );

			if( !EditorUtility.PerformEditorActionVisibleFilter( action ) )
				__0x2233.Enabled = false;

			

			return __0x2233;
		}

		public static EditorAction.GetStateContext EditorActionGetState( EditorAction.HolderEnum holder, string actionName )
		{
			var __0x2234 = EditorActions.GetByName( actionName );
			if( __0x2234 == null || __0x2234.CompletelyDisabled )
				return null;
			return EditorActionGetState( holder, __0x2234 );
		}

		public static void EditorActionClick( EditorAction.HolderEnum holder, EditorAction action )
		{
			var __0x2235 = EditorActionGetState( holder, action );
			if( __0x2235.Enabled )
			{
				var __0x2236 = __0x2235.ObjectsInFocus;
				

				var __0x2237 = new EditorAction.ClickContext( holder, __0x2236, action );

				
				action.PerformClick( __0x2237 );
				
				__0x2236.DocumentWindow?.Document?.EditorActionClick( __0x2237 );
				
				__0x2236.DocumentWindow?.EditorActionClick( __0x2237 );
				
				EditorActionClickEvent?.Invoke( __0x2237 );
			}
		}

		public static void EditorActionClick( EditorAction.HolderEnum holder, string actionName )
		{
			var __0x2238 = EditorActions.GetByName( actionName );
			if( __0x2238 == null || __0x2238.CompletelyDisabled )
				return;
			EditorActionClick( holder, __0x2238 );
		}

		public static void EditorActionClick2( EditorAction.HolderEnum holder, EditorAction action )
		{
			var __0x2239 = EditorActionGetState( holder, action );
			if( __0x2239.Enabled )
			{
				var __0x2240 = __0x2239.ObjectsInFocus;
				

				var __0x2241 = new EditorAction.ClickContext( holder, __0x2240, action );

				
				action.PerformClick2( __0x2241 );
				
				__0x2240.DocumentWindow?.Document?.EditorActionClick2( __0x2241 );
				
				__0x2240.DocumentWindow?.EditorActionClick2( __0x2241 );
				
				EditorActionClick2Event?.Invoke( __0x2241 );
			}
		}

		public static void EditorActionClick2( EditorAction.HolderEnum holder, string actionName )
		{
			var __0x2242 = EditorActions.GetByName( actionName );
			if( __0x2242 == null || __0x2242.CompletelyDisabled )
				return;
			EditorActionClick2( holder, __0x2242 );
		}

		public static void ShowProjectSettings()
		{
			OpenFileAsDocument( VirtualPathUtility.GetRealPathByVirtual( ProjectSettings.FileName ), true, true, true, "ProjectSettingsUserMode" );
		}

		public static event Action ClosingApplicationChanged;

		
		public static bool ClosingApplication
		{
			get { return __0x2216; }
			set
			{
				if( __0x2216 == value )
					return;
				__0x2216 = value;

				ClosingApplicationChanged?.Invoke();
			}
		}

		public static float DPI
		{
			get { return DpiHelper.Default.Dpi; }
		}

		public static float DPIScale
		{
			get { return DpiHelper.Default.DpiScaleFactor; }
		}

		
		
		
		

		
		
		
		

		public static ObjectsInFocus GetObjectsInFocus( bool useOnlySelectedDocumentWindow )
		{
			return EditorForm.Instance.GetObjectsInFocus( useOnlySelectedDocumentWindow );
		}

		static Dictionary<string, Type> __0x2243;
		public static Dictionary<string, Type> DocumentWindowClassByFileExtension
		{
			get
			{
				if( __0x2243 == null )
					__0x2243 = EditorAssemblyInterface.Instance.DocumentWindowClassByFileExtension;
				return __0x2243;
			}
		}

		public static void OpenNewObjectWindow( NewObjectWindow.CreationDataClass initData )
		{
			var __0x2244 = new NewObjectWindow();
			__0x2244.creationData = initData;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2244, true, true );
		}

		public static void OpenImportWindow( string initialDestinationFolder )
		{
			var __0x2245 = new ImportWindow();
			__0x2245.InitialDestinationFolder = initialDestinationFolder;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2245, true, true );
		}

		public static void OpenSelectTypeWindow( SelectTypeWindow.CreationDataClass initData )
		{
			var __0x2246 = new SelectTypeWindow();
			__0x2246.creationData = initData;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2246, true, true );
		}

		public static void OpenSetReferenceWindow( DocumentWindow documentWindow, Component[] selectedComponents, object[] propertyOwners, Metadata.Property property, object[] propertyIndexes )
		
		{
			

			var __0x2247 = new SetReferenceWindow();
			__0x2247.documentWindow = documentWindow;

			var __0x2248 = new ContentBrowser.SetReferenceModeDataClass();
			__0x2248.selectedComponents = selectedComponents;
			__0x2248.propertyOwners = propertyOwners;
			__0x2248.property = property;
			__0x2248.propertyIndexes = propertyIndexes;
			__0x2247.setReferenceModeData = __0x2248;

			

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2247, true, true );
		}

		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		public static DocumentWindow ShowObjectSettingsWindow( DocumentInstance document, object obj, bool canUseAlreadyOpened )
		{
			

			
			if( canUseAlreadyOpened )
			{
				var __0x2249 = EditorForm.Instance.WorkspaceController.FindWindowRecursive( document, obj, typeof( ObjectSettingsWindow ) );
				if( __0x2249 != null )
				{
					EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2249 );
					return __0x2249;
				}
			}

			var __0x2250 = new ObjectSettingsWindow();
			__0x2250.InitDocumentWindow( document, obj, true, null );

			

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2250, true, true );

			return __0x2250;
		}

		static internal DocumentInstance CreateDocument( string realFileName, string specialMode = "" )
		{
			if( specialMode == "TextEditor" )
			{
				var __0x2251 = new DocumentInstance( realFileName, null, specialMode );
				Documents.Add( __0x2251 );
				return __0x2251;
			}

			string __0x2252 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
			if( !string.IsNullOrEmpty( __0x2252 ) && IsDocumentFileSupport( __0x2252 ) )
			{
				Resource.Instance __0x2253 = null;

				var __0x2254 = Path.GetExtension( __0x2252 ).ToLower();
				if( __0x2254 != "" && __0x2254[ 0 ] == '.' )
					__0x2254 = __0x2254.Substring( 1 );
				if( ResourceManager.GetTypeByFileExtension( __0x2254 ) != null )
				{
					
					{
						var __0x2255 = ResourceManager.GetByName( __0x2252 );
						if( __0x2255 != null && __0x2255.FileWasDeleted )
							__0x2255.Dispose();
					}

					
					

					__0x2253 = ResourceManager.LoadSeparateInstance( __0x2252, true, true, null );
					

					if( __0x2253 == null )
						return null;
				}

				var __0x2256 = new DocumentInstance( realFileName, __0x2253, specialMode );
				Documents.Add( __0x2256 );

				return __0x2256;
			}

			return null;
		}

		public static IDocumentWindow OpenFileAsDocument( string realFileName, bool canUseAlreadyOpened, bool select, bool floatingWindow = false, string specialMode = "" )
		{
			if( string.IsNullOrEmpty( specialMode ) && !IsDocumentFileSupport( realFileName ) )
				return null;

			realFileName = VirtualPathUtility.NormalizePath( realFileName );

			

			
			if( canUseAlreadyOpened )
			{
				var __0x2257 = GetDocumentByRealFileName( realFileName, specialMode );
				if( __0x2257 != null )
				{
					var __0x2258 = (DockWindow)EditorForm.Instance.WorkspaceController.FindWindow( __0x2257 );
					if( __0x2258 != null )
					{
						EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2258 );
						return __0x2258 as IDocumentWindow;
					}
				}
			}

			string __0x2259 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
			if( !string.IsNullOrEmpty( __0x2259 ) )
			{
				
				

				var __0x2260 = CreateDocument( realFileName, specialMode );
				if( __0x2260 == null )
				{
					
					return null;
				}

				var __0x2261 = CreateWindow( __0x2260 );
				EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2261, floatingWindow, select  );

				return __0x2261 as IDocumentWindow;
			}
			else
			{
				
				Log.Error( "Can't load resource outside Assets folder." );
				return null;
			}
		}

		public static DocumentWindow OpenDocumentWindowForObject( DocumentInstance document, object obj )
		{
			if( !IsDocumentObjectSupport( obj ) )
				return null;

			
			{
				var __0x2262 = GetDocumentByObject( obj );
				if( __0x2262 == null || __0x2262 != document )
				{
					var __0x2263 = obj as Component;
					if( __0x2263 != null )
					{
						var __0x2264 = ComponentUtility.GetOwnedFileNameOfComponent( __0x2263 );
						if( !string.IsNullOrEmpty( __0x2264 ) )
						{
							var __0x2265 = VirtualPathUtility.GetRealPathByVirtual( __0x2264 );

							if( IsDocumentFileSupport( __0x2265 ) )
							{
								var __0x2266 = OpenFileAsDocument( __0x2265, true, true ) as DocumentWindow;
								if( __0x2266 != null )
								{
									var __0x2267 = __0x2266.Document;
									var __0x2268 = __0x2267.ResultComponent.Components[ __0x2263.GetPathFromRoot() ];
									if( __0x2268 != null )
									{
										return OpenDocumentWindowForObject( __0x2267, __0x2268 );
									}
								}

								return null;
							}
						}
					}

					return null;
				}
			}

			
			var __0x2269 = !EditorForm.ModifierKeys.HasFlag( Keys.Shift );
			if( __0x2269 )
			{
				var __0x2270 = EditorForm.Instance.WorkspaceController.FindWindowRecursive( document, obj );
				if( __0x2270 != null )
				{
					EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2270 );
					return __0x2270;
				}
			}

			
			var __0x2271 = __0x2381( document, obj, false );

			
			bool __0x2272 = false;
			bool __0x2273 = true;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2271, __0x2272, __0x2273 );

			return __0x2271;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="text"></param>
		/// <param name="title"></param>
		/// <param name="select"></param>
		/// <param name="readOnly"></param>
		/// <param name="highlightingScheme">This is the prefix for file path. Specify \'CSharp\'. 'Base\Tools\Highlighting\{CSharp}Dark.xshd'</param>
		/// <returns></returns>
		public static DocumentInstance OpenTextAsDocument( string text, string title, bool select, bool readOnly = false, string highlightingScheme = "", int selectLine = 0 )
		{
			

			var __0x2274 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2274 );

			var __0x2275 = EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.TextEditorDocumentWindow" );
			var __0x2276 = (DocumentWindow)Activator.CreateInstance( __0x2275 );
			

			var __0x2277 = new Dictionary<string, object>();
			__0x2277[ "ReadOnly" ] = readOnly;
			__0x2277[ "HighlightingScheme" ] = highlightingScheme;
			__0x2277[ "SelectLine" ] = selectLine;
			

			__0x2276.InitDocumentWindow( __0x2274, null, false, __0x2277 );
			__0x2276.PropertySet( "Data", text );
			__0x2276.WindowTitle = title;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2276, false, select );

			return __0x2274;
		}

		
		internal static DockWindow CreateWindow( DocumentInstance document )
		{
			DockWindow __0x2278 = null;

			if( document.IsEditorDocumentConfigurationExist )
			{
				try
				{
					__0x2278 = new WorkspaceWindow( EditorForm.Instance );
					( (WorkspaceWindow)__0x2278 ).InitFromConfig( document );
				}
				catch( Exception e )
				{
					
					Log.Info( $"Warning: Layout for '{document.Name}' doesnt restored." );
					Log.Info( e.Message );

					if( __0x2278 != null )
						__0x2278.Dispose();

					
					__0x2278 = __0x2381( document, document.ResultObject, false );
				}
			}
			else
			{
				
				__0x2278 = __0x2381( document, document.ResultObject, false );
			}

			return __0x2278;
		}

		static internal DocumentWindow CreateWindowImpl( DocumentInstance document, string objectPath, bool openAsSettings )
		{
			object __0x2279 = null;
			if( string.IsNullOrEmpty( objectPath ) )
			{
				__0x2279 = document.ResultComponent; 
			}
			else
			{
				__0x2279 = document.ResultComponent.Components.GetByPath( objectPath );
				if( __0x2279 == null )
					throw new Exception( $"Object with path '{objectPath}' for window '{document.Name}' not found." );
			}

			return __0x2381( document, __0x2279, openAsSettings );
		}

		static DocumentWindow __0x2381( DocumentInstance __0x2386, object __0x2387, bool __0x2388 )
		{
			Type __0x2280;
			if( __0x2388 )
				__0x2280 = typeof( ObjectSettingsWindow );
			else if( __0x2386.SpecialMode == "TextEditor" )
				__0x2280 = EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.TextEditorDocumentWindow" );
			else
				__0x2280 = GetDocumentWindowClass( __0x2387 ) ?? __0x2382( __0x2386.RealFileName ) ?? typeof( DocumentWindow );

			DocumentWindow __0x2281;
			if( typeof( CanvasBasedEditor ).IsAssignableFrom( __0x2280 ) )
			{
				var __0x2282 = (CanvasBasedEditor)Activator.CreateInstance( __0x2280 );
				var __0x2283 = new DocumentWindowWithViewport_CanvasBasedEditor( __0x2282 );
				__0x2282.owner = __0x2283;
				__0x2281 = __0x2283;
			}
			else
				__0x2281 = (DocumentWindow)Activator.CreateInstance( __0x2280 );

			__0x2281.InitDocumentWindow( __0x2386, __0x2387, __0x2388, null );
			return __0x2281;
		}

		static internal bool IsDocumentFileSupport( string documentFileName )
		{
			var __0x2284 = Path.GetExtension( documentFileName ).ToLower();
			if( __0x2284 != "" && __0x2284[ 0 ] == '.' )
				__0x2284 = __0x2284.Substring( 1 );

			if( ResourceManager.GetTypeByFileExtension( __0x2284 ) != null )
				return true;

			return DocumentWindowClassByFileExtension.ContainsKey( __0x2284 );
		}

		
		public static bool IsDocumentObjectSupport( object obj )
		{
			

			Type __0x2285 = GetDocumentWindowClass( obj );
			return __0x2285 != null && __0x2285 != typeof( DocumentWindow );
		}

		internal static Type GetDocumentWindowClass( object obj )
		{
			if( obj != null )
			{
				var __0x2286 = (EditorControlAttribute[])obj.GetType().GetCustomAttributes( typeof( EditorControlAttribute ), true );
				if( __0x2286.Length != 0 )
				{
					var __0x2287 = __0x2286[ 0 ];

					Type __0x2288;

					if( !string.IsNullOrEmpty( __0x2287.DocumentClassName ) )
					{
						var __0x2289 = EditorUtility.GetTypeByName( __0x2287.DocumentClassName );
						if( __0x2289 == null )
							Log.Warning( $"PreviewWindow: GetDocumentWindowClass: Class with name \"{__0x2287.DocumentClassName}\" is not found." );
						__0x2288 = __0x2289;
					}
					else
						__0x2288 = __0x2287.DocumentClass;

					if( __0x2288 != null && __0x2287.OnlyWhenRootComponent && obj is Component c && c.Parent != null )
						__0x2288 = null;

					if( __0x2288 != null )
						return __0x2288;
				}
			}
			return null;
		}

		static Type __0x2382( string __0x2389 )
		{
			var __0x2290 = Path.GetExtension( __0x2389 ).ToLower();
			if( __0x2290 != "" && __0x2290[ 0 ] == '.' )
				__0x2290 = __0x2290.Substring( 1 );

			Type __0x2291 = null;
			if( !string.IsNullOrEmpty( __0x2290 ) )
				DocumentWindowClassByFileExtension.TryGetValue( __0x2290, out __0x2291 );

			return __0x2291;
		}

		public static List<DocumentWindow> GetAllDocumentWindowsOfDocument( DocumentInstance document )
		{
			var __0x2292 = new List<DocumentWindow>();

			foreach( var __0x2373 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2293 = __0x2373 as DocumentWindow;
				if( __0x2293 != null && __0x2293.Document == document )
					__0x2292.Add( __0x2293 );
			}

			return __0x2292;
		}

		public static DocumentInstance OpenStore( bool openBasicContent = false )
		{
			
			var __0x2294 = FindWindow<StoreDocumentWindow>();
			if( __0x2294 != null )
			{
				SelectDockWindow( __0x2294 );
				if( openBasicContent )
					__0x2294.LoadURL( StoreDocumentWindow.homeURLBasicContent );
				return __0x2294.Document;
			}

			var __0x2295 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2295 );

			var __0x2296 = new StoreDocumentWindow();
			__0x2296.InitDocumentWindow( __0x2295, null, false, null );
			if( openBasicContent )
				__0x2296.StartURL = StoreDocumentWindow.homeURLBasicContent;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2296, false, true );

			return __0x2295;
		}

		public static void OpenOrCloseStore()
		{
			var __0x2297 = FindWindow<StoreDocumentWindow>();
			if( __0x2297 != null )
				__0x2297.Close();
			else
				OpenStore();
		}

		public static DocumentInstance OpenStartPage()
		{
			
			var __0x2298 = FindWindow<StartPageWindow>();
			if( __0x2298 != null )
			{
				SelectDockWindow( __0x2298 );
				return __0x2298.Document;
			}

			var __0x2299 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2299 );

			var __0x2300 = new StartPageWindow();
			__0x2300.InitDocumentWindow( __0x2299, null, false, null );

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2300, false, true );

			return __0x2299;
		}

		public static void OpenOrCloseStartPage()
		{
			var __0x2301 = FindWindow<StartPageWindow>();
			if( __0x2301 != null )
				__0x2301.Close();
			else
				OpenStartPage();
		}

		public static void OpenStoresWindow()
		{
			var __0x2302 = FindWindow<StoresWindow>();
			if( __0x2302 != null )
				SelectDockWindow( __0x2302 );
		}

		public static void OpenPackages( string selectPackage, bool install )
		{
			var __0x2303 = FindWindow<StoresWindow>();
			if( __0x2303 != null )
			{
				SelectDockWindow( __0x2303 );
				if( !string.IsNullOrEmpty( selectPackage ) )
					__0x2303.NeedSelectPackage( selectPackage, install );
			}
		}

		public static Keys[] GetActionShortcuts( string name )
		{
			if( EditorForm != null )
			{
				var __0x2304 = ProjectSettings.Get.Shortcuts.ShortcutSettings.GetActionItem( name );
				if( __0x2304 != null )
					return __0x2304.ToArray();
			}
			return null;
		}

		public static bool ProcessShortcuts( Keys keyCode, bool allowKeysWithoutModifiers )
		{
			if( EditorForm != null )
			{
				Keys __0x2305 = keyCode | Control.ModifierKeys;

				var __0x2306 = new Dictionary<Keys, ProjectSettingsPage_Shortcuts.ShortcutSettingsClass.ActionItem>( 64 );
				foreach( var __0x2374 in ProjectSettings.Get.Shortcuts.ShortcutSettings.Actions )
				{
					if( __0x2374.Shortcut1 != Keys.None )
						__0x2306[ __0x2374.Shortcut1 ] = __0x2374;
					if( __0x2374.Shortcut2 != Keys.None )
						__0x2306[ __0x2374.Shortcut2 ] = __0x2374;
				}

				__0x2306.TryGetValue( __0x2305, out var actionItem );

				if( actionItem != null )
				{
					var __0x2307 = EditorActions.GetByName( actionItem.Name );
					if( __0x2307 != null && !__0x2307.CompletelyDisabled )
					{
						foreach( var __0x2375 in actionItem.ToArray() )
						{
							if( __0x2375 != Keys.None && __0x2375 == __0x2305 )
							{
								if( allowKeysWithoutModifiers || ( __0x2375 & ( Keys.Control | Keys.Shift | Keys.Alt ) ) != 0 )
								{
									var __0x2308 = EditorActionGetState( EditorAction.HolderEnum.ShortcutKey, __0x2307 );
									if( __0x2308.Enabled )
									{
										EditorActionClick( EditorAction.HolderEnum.ShortcutKey, __0x2307.Name );
										return true;
									}
								}
							}
						}
					}
				}
			}

			return false;
		}

		public static Image GetImageForDispalyScale( Image image16px, Image image32px )
		{
			
			
			
			
			return RenderStandard.GetImageForDispalyScale( image16px, image32px );
		}

		public static Image GetImageForDispalyScale( string name )
		{
			var __0x2309 = (Bitmap)Properties.Resources.ResourceManager.GetObject( name + "_16", Properties.Resources.Culture );
			var __0x2310 = (Bitmap)Properties.Resources.ResourceManager.GetObject( name + "_32", Properties.Resources.Culture );

			return RenderStandard.GetImageForDispalyScale( __0x2309, __0x2310 );
		}

		public delegate void GetObjectToCreateByContentBrowserItemEventDelegate( ContentBrowser.Item __0x2390, ref Metadata.TypeInfo __0x2391, ref string __0x2392, ref object __0x2393 );
		public static event GetObjectToCreateByContentBrowserItemEventDelegate GetObjectToCreateByContentBrowserItemEvent;

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetObjectToCreateByContentBrowserItem( ContentBrowser.Item item )
		{
			Metadata.TypeInfo __0x2311 = null;
			string __0x2312 = "";
			object __0x2313 = null;
			var __0x2314 = "";
			
			

			

			
			var __0x2315 = item as ContentBrowserItem_Type;
			if( __0x2315 != null )
			{
				var __0x2316 = __0x2315.Type;

				

				if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x2316 ) && !__0x2316.Abstract )
				{
					__0x2311 = __0x2316;
					
				}
			}

			
			
			
			
			

			
			
			
			

			
			var __0x2317 = item as ContentBrowserItem_File;
			if( __0x2317 != null && !__0x2317.IsDirectory )
			{
				
				var __0x2318 = Path.GetExtension( __0x2317.FullPath );
				if( ResourceManager.GetTypeByFileExtension( __0x2318 ) != null )
				{
					var __0x2319 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x2317.FullPath ) );
					var __0x2320 = __0x2319?.PrimaryInstance?.ResultComponent?.GetProvidedType();
					if( __0x2320 != null )
					{
						__0x2311 = __0x2320;
						__0x2312 = __0x2319.Name;
					}
				}
			}

			
			var __0x2321 = item as ContentBrowserItem_Component;
			if( __0x2321 != null )
			{
				var __0x2322 = __0x2321.Component;

				if( __0x2322.ParentRoot.HierarchyController != null &&
					__0x2322.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
				{
					__0x2311 = __0x2322.GetProvidedType();
					if( __0x2311 != null )
						__0x2312 = __0x2311.Name;
				}
				
				
				
				
				

				
				
				
				
			}

			
			var __0x2323 = item as StoresWindow.ContentBrowserItem_StoreItem;
			if( __0x2323 != null )
			{
				var __0x2324 = SceneEditor.CreateObjectsMode == SceneEditor.CreateObjectsModeEnum.Drop;
				var (type, reference) = __0x2323.GetFileToDrop( __0x2324 );

				switch( type )
				{
				case PackageManager.PackageInfo.FileTypeToDrop.Mesh:
					__0x2311 = MetadataManager.GetTypeOfNetType( typeof( Mesh ) );
					__0x2312 = reference;
					__0x2314 = __0x2323.Text;
					break;

				
				case PackageManager.PackageInfo.FileTypeToDrop.Material:
					{
						var __0x2325 = ResourceManager.LoadResource<Component>( reference, out _ );
						if( __0x2325 != null )
							__0x2311 = __0x2325.GetProvidedType();
					}
					break;

				case PackageManager.PackageInfo.FileTypeToDrop.Environment:
					{
						var __0x2326 = ResourceManager.LoadResource<Component>( reference, out _ );
						if( __0x2326 != null )
							__0x2311 = __0x2326.GetProvidedType();
					}
					break;

				
				
				case PackageManager.PackageInfo.FileTypeToDrop.Surface:
					{
						var __0x2327 = ResourceManager.LoadResource<Component>( reference, out _ );
						if( __0x2327 != null )
							__0x2311 = __0x2327.GetProvidedType();
					}
					break;
				}
			}

			GetObjectToCreateByContentBrowserItemEvent?.Invoke( item, ref __0x2311, ref __0x2312, ref __0x2313 );

			return (__0x2311, __0x2312, __0x2313, __0x2314);
		}

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetObjectToCreateByDropData( DragEventArgs e )
		{
			var __0x2328 = ContentBrowser.GetDroppingItemData( e.Data );
			if( __0x2328 != null )
			{
				var __0x2329 = __0x2328.Item;

				var __0x2330 = __0x2329;
				if( __0x2330 != null )
					return GetObjectToCreateByContentBrowserItem( __0x2330 );
			}

			return (null, "", null, "");
		}

		public static ContentBrowser.Item CreateObjectGetSelectedContentBrowserItem()
		{
			var __0x2331 = new List<DockWindow>();
			{
				var __0x2332 = FindWindow<StoresWindow>().ContentBrowser1;
				if( WinFormsUtility.IsControlVisibleInHierarchy( __0x2332 ) && WinFormsUtility.IsPhysicalVisibleCheckBy5Points( __0x2332 ) )
				{
					__0x2331.Add( FindWindow<StoresWindow>() );
					__0x2331.Add( FindWindow<ResourcesWindow>() );
				}
				else
				{
					__0x2331.Add( FindWindow<ResourcesWindow>() );
					__0x2331.Add( FindWindow<StoresWindow>() );
				}
			}

			foreach( var __0x2376 in __0x2331 )
			{
				var __0x2333 = __0x2376.GetObjectsInFocus().Objects;
				if( __0x2333.Length == 1 )
				{
					object __0x2334 = __0x2333[ 0 ];

					var __0x2335 = __0x2334 as ContentBrowser.Item;
					if( __0x2335 != null )
						return __0x2335;
				}
			}

			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			

			return null;
		}

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetSelectedObjectToCreate()
		{
			var __0x2336 = new List<DockWindow>();
			{
				var __0x2337 = FindWindow<StoresWindow>().ContentBrowser1;
				if( WinFormsUtility.IsControlVisibleInHierarchy( __0x2337 ) && WinFormsUtility.IsPhysicalVisibleCheckBy5Points( __0x2337 ) )
				{
					__0x2336.Add( FindWindow<StoresWindow>() );
					__0x2336.Add( FindWindow<ResourcesWindow>() );
				}
				else
				{
					__0x2336.Add( FindWindow<ResourcesWindow>() );
					__0x2336.Add( FindWindow<StoresWindow>() );
				}
			}

			foreach( var __0x2377 in __0x2336 )
			{
				var __0x2338 = __0x2377.GetObjectsInFocus().Objects;
				if( __0x2338.Length == 1 )
				{
					object __0x2339 = __0x2338[ 0 ];

					var __0x2340 = __0x2339 as ContentBrowser.Item;
					if( __0x2340 != null )
					{
						var __0x2341 = GetObjectToCreateByContentBrowserItem( __0x2340 );
						if( __0x2341.objectType != null )
							return __0x2341;
					}
				}
			}

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			return (null, "", null, "");
		}

		public static void ResetSelectedObjectToCreate()
		{
			
			{
				var __0x2342 = FindWindow<ResourcesWindow>();
				__0x2342.ContentBrowser1.SelectItems( null, false, true );
			}

			
			{
				var __0x2343 = FindWindow<StoresWindow>();
				__0x2343.ContentBrowser1.SelectItemsList( null, true );
			}
		}

		public static bool DarkTheme
		{
			get
			{
				return KryptonManager._globalPaletteMode == PaletteModeManager.NeoAxisBlack;
				
			}
		}

		public static void ShowTips()
		{
			var __0x2344 = EditorForm.Instance.WorkspaceController;
			var __0x2345 = __0x2344.FindWindow<TipsWindow>();
			if( __0x2345 != null )
				__0x2344.SelectDockWindow( __0x2345 );
			else
			{
				var __0x2346 = new DocumentInstance( "", null, "" );
				Documents.Add( __0x2346 );

				var __0x2347 = new TipsWindow();
				__0x2347.InitDocumentWindow( __0x2346, null, false, null );

				__0x2344.AddDockWindow( __0x2347, true, true );
			}
		}

		static DockWindow __0x2383( DocumentInstance __0x2394 )
		{
			foreach( var __0x2378 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2348 = __0x2378 as WorkspaceWindow;
				if( __0x2348 != null && __0x2348.Document == __0x2394 )
					return __0x2378;

				var __0x2349 = __0x2378 as DocumentWindow;
				if( __0x2349 != null && __0x2349.Document == __0x2394 && __0x2349.IsMainWindowInWorkspace )
					return __0x2378;
			}

			return null;
		}

		public static void CloseDocument( DocumentInstance document, bool askToSave )
		{
			var __0x2350 = __0x2383( document );
			if( __0x2350 != null )
			{
				if( askToSave )
				{
					var __0x2351 = EditorForm.Instance.WorkspaceController.DockingManager;
					var __0x2352 = __0x2350.KryptonPage;
					if( __0x2352 != null )
						__0x2351.CloseRequest( new string[] { __0x2352.UniqueName } );
				}
				else
					EditorForm.Instance.WorkspaceController.RemoveDockWindow( __0x2350, true );
			}
		}

		public static void BuildProjectSolution( bool reloadDocuments )
		{
#if !DEPLOY
			SaveDocuments();
			ScreenNotifications.ShowAllImmediately();

			CSharpProjectFileUtility.CheckToRemoveNotExistsFilesFromProject();

			var __0x2353 = Control.ModifierKeys.HasFlag( Keys.Control );

			if( __0x2353 || CSharpProjectFileUtility.CompilationIsRequired() )
			{
				ScreenNotifications.Show( EditorLocalization.Translate( "General", "Building Project.sln..." ) );
				ScreenNotifications.ShowAllImmediately();

				if( CSharpProjectFileUtility.Compile( __0x2353, out var outputDllFilePath ) )
				{
					
					{
						var __0x2354 = EngineApp.ProjectAssembly;
						var __0x2355 = AssemblyUtility.LoadAssemblyByRealFileName( outputDllFilePath, true, loadWithoutLocking: true, reloadingOldAssembly: __0x2354 );
						EngineApp.ProjectAssembly = __0x2355;
					}

					
					{
						var __0x2356 = FindWindow<ResourcesWindow>();
						var __0x2357 = __0x2356?.ContentBrowser1;
						if( __0x2357 != null )
						{
							
							__0x2357.UpdateDataIfResourcesWindowTypesChanged();
							__0x2357.UpdateAllTypesItem();
						}
					}

					

					
					if( reloadDocuments )
					{
						var __0x2358 = new List<DocumentInstance>();
						foreach( var __0x2379 in Documents )
						{
							if( __0x2379.ResultComponent != null )
								__0x2358.Add( __0x2379 );
						}

						if( __0x2358.Count > 0 )
						{
							
							
							

							KryptonWinFormsUtility.EditorFormStartTemporaryLockUpdate();

							

							var __0x2359 = SelectedDocument;

							foreach( var __0x2380 in __0x2358 )
							{
								CloseDocument( __0x2380, false );
								if( __0x2380.Destroyed )
								{
									var __0x2360 = OpenFileAsDocument( __0x2380.RealFileName, true, true, specialMode: __0x2380.SpecialMode );
									if( __0x2360 != null && __0x2359 == __0x2380 )
										__0x2359 = __0x2360.Document;
								}
							}

							if( __0x2359 != null )
							{
								var __0x2361 = __0x2383( __0x2359 );
								if( __0x2361 != null )
									SelectDockWindow( __0x2361 );
							}
						}

						
						
						

						

						

						

					}

					ScreenNotifications.Show( EditorLocalization.Translate( "General", "Project.sln was built successfully." ) );
				}
			}
			else
				ScreenNotifications.Show( EditorLocalization.Translate( "General", "The solution is up-to-date. Hold Ctrl to rebuild." ) );

#endif
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents main application class of the editor.
	/// </summary>
	public static class EditorApp
	{
		[DllImport( "user32.dll" )]
		internal static extern bool SetProcessDPIAware();

		
		public static void Main()
		{
			if( Debugger.IsAttached )
			{
				__0x2397();
			}
			else
			{
				try
				{
					__0x2397();
				}
				catch( Exception e )
				{
					Log.FatalAsException( e.ToString() );
				}
			}
		}

		static void __0x2397()
		{
#if !DEPLOY
			if( EditorCommandLineTools.Process() )
				return;
#endif

			if( Environment.OSVersion.Version.Major >= 6 )
			{
				try
				{
					
					
					
					
					
					
					

					SetProcessDPIAware();
				}
				catch { }
			}

			EngineApp.ApplicationType = EngineApp.ApplicationTypeEnum.Editor;

			Log.Handlers.WarningHandler += delegate ( string __0x2398, ref bool __0x2399, ref bool __0x2400 )
			{
				SplashForm.Instance?.Hide();
			};
			Log.Handlers.ErrorHandler += delegate ( string __0x2401, ref bool __0x2402, ref bool __0x2403 )
			{
				SplashForm.Instance?.Hide();
			};
			Log.Handlers.FatalHandler += delegate ( string __0x2404, string __0x2405, ref bool __0x2406 )
			{
				SplashForm.Instance?.Hide();
			};

			
			ProjectUtility.GetDefaultProjectPaths( out string projectDirectory, out string userSettingsDirectory );

			if( !VirtualFileSystem.Init( "user:Logs/Editor.log", true, projectDirectory, userSettingsDirectory ) )
				return;

			
			EngineApp.InitSettings.ConfigVirtualFileName = "user:Configs/Editor.config";

			
			
			
			

			
			
			
			
			
			
			

			EngineApp.Init();
			
			

			
			
			

			
			
			
			
			
			

			

			
			
			
			
			
			
			

			
			
			
			
			
			

			
			Application.SetCompatibleTextRenderingDefault( false );

			EditorForm __0x2395 = new EditorForm();
			__0x2395.Show();
			while( __0x2395.Created )
			{
				Application.DoEvents();

				if( EditorForm.Instance == null || EngineApp.Instance == null || EngineApp.Closing )
					break;

				EditorForm.Instance.RenderViewports( out bool existActiveViewports );
				if( !existActiveViewports && EngineApp.Instance != null )
					EngineApp.MessageLoopWaitMessage();

				
				
				

				
				
				
				
			}
			

			EngineApp.Shutdown();
			Log.DumpToFile( "Program END\r\n" );
			VirtualFileSystem.Shutdown();

			EditorAPI.GetRestartApplication( out var needRestart, out _ );
			if( needRestart )
			{
				string __0x2396 = Process.GetCurrentProcess().MainModule.FileName;
				Process.Start( new ProcessStartInfo( __0x2396 ) { UseShellExecute = true } );
				
			}
			else
			{
				
				Application.Exit();
			}

			
			
			
			
			
			
			

			
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			

			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			

			

			

			

			
			
			
			
			

			
			

			
			
			

			
			
			
			
			
			

		}
	}
}





namespace NeoAxis.Editor
{
	static class EditorAssembly
	{
		public static void Init()
		{
			var __0x2407 = Internal.AssemblyUtility.LoadAssemblyByRealFileName( "NeoAxis.Core.Editor.dll", false, false );

			var __0x2408 = __0x2407.GetType( "NeoAxis.Editor.EditorAssemblyInterfaceImpl" );
			if( __0x2408 == null )
				Log.Fatal( "EditorAssembly: Init: Type \"NeoAxis.Editor.EditorAssemblyInterfaceImpl\" is not exists." );

			var __0x2409 = __0x2408.GetMethod( "Init", BindingFlags.Public | BindingFlags.Static );
			if( __0x2409 == null )
				Log.Fatal( "EditorAssembly: Init: \"Init\" method of \"NeoAxis.Editor.EditorAssemblyInterfaceImpl\" type is not exists." );

			__0x2409.Invoke( null, new object[ 0 ] );
		}
	}

	

	internal abstract class EditorAssemblyInterface
	{
		static EditorAssemblyInterface __0x2410;
		public static EditorAssemblyInterface Instance { get { return __0x2410; } }
		protected EditorAssemblyInterface() { __0x2410 = this; }

		

		public abstract void SetDarkTheme();

		public abstract IScriptPrinter ScriptPrinterNew();

		public abstract Dictionary<string, Type> DocumentWindowClassByFileExtension { get; }

		public abstract void UpdateProjectFileForCSharpEditor( ICollection<string> addFiles, ICollection<string> removeFiles );

		public abstract void InitializeWPFApplicationAndScriptEditor();

		public abstract Type GetTypeByName( string typeName );

		public interface ITextEditorControl
		{
			string EditorText { get; set; }
			bool EditorReadOnly { get; set; }
			bool EditorWordWrap { get; set; }
			bool Border { get; set; }

			int SelectionStart { get; set; }
			int SelectionLength { get; set; }
			void Select( int start, int length );

			void ScrollToHome();
			void ScrollToEnd();
		}

		public abstract ITextEditorControl CreateTextEditorControl();

		

		public interface IScriptPrinter
		{
			ImageComponent PrintToTexture( string code, Vector2I size );
		}

		

		public abstract void ImportFBX( ImportGeneral.Settings settings, out string error );
		public abstract void ImportAssimp( ImportGeneral.Settings settings, out string error );
		public abstract bool ExportToFBX( Mesh sourceMesh, string realFileName, out string error );

		

		public abstract HCDropDownControl CreateColorValuePoweredSelectControl( HCItemProperty itemProperty );
		public abstract bool ColorValuePoweredSelectFormShowDialog( Point location, ColorValuePowered initialColor, out ColorValuePowered resultColor );
	}
}




#if !DEPLOY

namespace NeoAxis.Editor
{
	static class EditorCommandLineTools
	{
		public static bool Process()
		{
			if( SystemSettings.CommandLineParameters.ContainsKey( "-prepareProductAssets" ) )
			{
				__0x2523.Process();
				return true;
			}

			if( SystemSettings.CommandLineParameters.ContainsKey( "-platformProjectPatch" ) )
			{
				PlatformProjectPatch.Process();
				return true;
			}

			return false;
		}

		

		static class __0x2523
		{
			static SystemSettings.Platform __0x2411;
			static string __0x2412;
			static string __0x2413;
			
			static string __0x2414;
			static bool __0x2415;
			static bool __0x2416;
			static bool __0x2417;

			static readonly DateTime __0x2418 = new DateTime( 2001, 1, 1, 1, 1, 1 );

			

			static void __0x2508( string __0x2512 )
			{
				Directory.CreateDirectory( __0x2512 );

				
				
				
			}

			static void __0x2509( string __0x2513, string __0x2514, bool __0x2515 )
			{
				File.Copy( __0x2513, __0x2514, __0x2515 );

				
				
				
			}

			public static void CopyFolder( string sourceFolder, string destFolder, Range progressRange, IEnumerable<string> excludePaths = null )
			{
				if( !Directory.Exists( sourceFolder ) )
					return;

				__0x2508( destFolder );

				IEnumerable<FileInfo> __0x2419 = new DirectoryInfo( sourceFolder ).GetFiles( "*.*", SearchOption.AllDirectories ).ToList();
				IEnumerable<string> __0x2420 = Directory.GetDirectories( sourceFolder, "*", SearchOption.AllDirectories ).ToList();

				
				if( excludePaths != null )
				{
					__0x2419 = __0x2419.Where( __0x2516 => excludePaths.All( __0x2517 => !__0x2516.FullName.Contains( __0x2517 ) ) );
					__0x2420 = __0x2420.Where( __0x2518 => excludePaths.All( __0x2519 => !__0x2518.Contains( __0x2519 ) ) );
				}

				long __0x2421 = 0;
				foreach( var __0x2490 in __0x2419 )
					__0x2421 += __0x2490.Length;

				foreach( string __0x2491 in __0x2420 )
				{
					if( Directory.Exists( __0x2491 ) )
						__0x2508( __0x2491.Replace( sourceFolder, destFolder ) );
				}

				long __0x2422 = 0;
				foreach( var __0x2492 in __0x2419 )
				{
					if( File.Exists( __0x2492.FullName ) )
					{
						var __0x2423 = __0x2492.FullName.Replace( sourceFolder, destFolder );
						__0x2509( __0x2492.FullName, __0x2423, true );
					}

					
					
					
					
					

					__0x2422 += __0x2492.Length;
					
				}
			}

			static void __0x2510( IEnumerable<string> __0x2520, Range __0x2521 )
			{
				var __0x2424 = new List<string>();
				var __0x2425 = new List<string>();
				foreach( var __0x2493 in __0x2520 )
				{
					if( !__0x2493.Contains( "exclude:" ) )
						__0x2424.Add( __0x2493 );
					else
						__0x2425.Add( Path.Combine( __0x2412, __0x2493.Replace( "exclude:", "" ) ) );
				}

				if( __0x2424.Count != 0 )
				{
					var __0x2426 = __0x2521.Size / __0x2424.Count;
					var __0x2427 = __0x2521.Minimum;

					foreach( var __0x2494 in __0x2424 )
					{
						var __0x2428 = Path.Combine( __0x2412, __0x2494 );
						var __0x2429 = Path.Combine( __0x2414, __0x2494 );

						
						var __0x2430 = new Range( __0x2427, __0x2427 + __0x2426 );

						if( File.Exists( __0x2428 ) )
						{
							var __0x2431 = Path.GetDirectoryName( __0x2429 );
							if( !Directory.Exists( __0x2431 ) )
								Directory.CreateDirectory( __0x2431 );
							File.Copy( __0x2428, __0x2429, true );
						}
						else
							CopyFolder( __0x2428, __0x2429, __0x2430, __0x2425 );

						
						

						__0x2427 += __0x2426;
					}
				}
			}

			static void __0x2511( string __0x2522 )
			{
				
				{
					var __0x2432 = new List<string>();

					__0x2432.Add( "Caches" );

					
					if( !__0x2416 )
						__0x2432.Add( @"exclude:Caches\ShaderCache" );
					if( !__0x2417 )
						__0x2432.Add( @"exclude:Caches\Files" );
					__0x2432.Add( @"exclude:Caches\CSharpScripts\CSharpScripts.cache" );
					__0x2432.Add( @"exclude:Caches\CSharpScripts\CSharpScripts_Editor.dll" );
					__0x2432.Add( @"exclude:Caches\CSharpScripts\CSharpScripts_Simulation.dll" );
					__0x2432.Add( @"exclude:Caches\CSharpScripts\CSharpScripts_Editor.pdb" );
					__0x2432.Add( @"exclude:Caches\CSharpScripts\CSharpScripts_Simulation.pdb" );

					
					foreach( var __0x2495 in __0x2522.Split( '\n', StringSplitOptions.RemoveEmptyEntries ) )
					{
						var __0x2433 = __0x2495.Replace( "\r", "" );

						
						var __0x2434 = __0x2433.IndexOf( "//" );
						if( __0x2434 != -1 )
							__0x2433 = __0x2433.Substring( 0, __0x2434 );

						__0x2433 = __0x2433.Trim();

						if( __0x2433 != "" )
							__0x2432.Add( __0x2433 );
					}
					
					
					
					
					
					

					
					for( int __0x2435 = 0; __0x2435 < __0x2432.Count; __0x2435++ )
						__0x2432[ __0x2435 ] = __0x2432[ __0x2435 ].Replace( __0x2412 + Path.DirectorySeparatorChar, "" );

					
					__0x2510( __0x2432, new Range( 0, 0.4 ) );
				}

				
				
				
				

				
				
				
				

				
				
				
				
				
				
				
				
				
				
				

				

				
				
				
				
				
				
				
				
				
				
				

				

				
				
				
				

				
				

				
				
				

				
				
				
				

				
				
				
				
				

				
				


				
				{
					string __0x2436 = Path.Combine( __0x2412, "Binaries" );
					string __0x2437 = Path.Combine( __0x2414, "Binaries" );

					if( !Directory.Exists( __0x2437 ) )
						__0x2508( __0x2437 );

					__0x2509( Path.Combine( __0x2436, "NeoAxis.DefaultSettings.config" ), Path.Combine( __0x2437, "NeoAxis.DefaultSettings.config" ), true );
				}

				
				
				
				

				
				

				

				
				
				

				
				
				
				
				
				
				
				
				

				
				{
					var __0x2438 = Path.Combine( __0x2414, "Project.zip" );
					var __0x2439 = __0x2415 ? CompressionLevel.Optimal : CompressionLevel.NoCompression;

					if( File.Exists( __0x2438 ) )
						File.Delete( __0x2438 );

					var __0x2440 = new List<string>();
					__0x2440.Add( Path.Combine( __0x2414, "Assets" ) );
					__0x2440.Add( Path.Combine( __0x2414, @"Binaries\NeoAxis.DefaultSettings.config" ) );
					__0x2440.Add( Path.Combine( __0x2414, "Caches" ) );

					using( var __0x2441 = ZipFile.Open( __0x2438, ZipArchiveMode.Create ) )
					{
						foreach( var __0x2496 in __0x2440 )
						{
							if( Directory.Exists( __0x2496 ) )
							{
								foreach( var __0x2497 in Directory.GetFiles( __0x2496, "*.*", SearchOption.AllDirectories ) )
								{
									
									var __0x2442 = File.ReadAllBytes( __0x2497 );

									
									var __0x2443 = __0x2497.Substring( __0x2414.Length + 1 );
									var __0x2444 = __0x2441.CreateEntry( __0x2443, __0x2439 );
									__0x2444.LastWriteTime = new DateTimeOffset( __0x2418 );
									using( var __0x2445 = __0x2444.Open() )
										__0x2445.Write( __0x2442, 0, __0x2442.Length );
								}
							}
							else if( File.Exists( __0x2496 ) )
							{
								
								var __0x2446 = File.ReadAllBytes( __0x2496 );

								
								var __0x2447 = __0x2496.Substring( __0x2414.Length + 1 );
								var __0x2448 = __0x2441.CreateEntry( __0x2447, __0x2439 );
								__0x2448.LastWriteTime = new DateTimeOffset( __0x2418 );
								using( var __0x2449 = __0x2448.Open() )
									__0x2449.Write( __0x2446, 0, __0x2446.Length );
							}
						}
					}

					
					{
						string __0x2450 = "";

						using( var __0x2451 = File.Open( __0x2438, FileMode.Open ) )
						{
							using( var __0x2452 = System.Security.Cryptography.SHA1.Create() )
							{
								var __0x2453 = __0x2452.ComputeHash( __0x2451 );

								var __0x2454 = new StringBuilder( __0x2453.Length * 2 );
								foreach( byte __0x2498 in __0x2453 )
									__0x2454.Append( __0x2498.ToString( "X2" ) );

								__0x2450 = __0x2454.ToString();
							}
						}

						var __0x2455 = __0x2438 + ".hash";
						File.WriteAllText( __0x2455, __0x2450 );
					}
				}

				
				
				{
					var __0x2456 = Path.Combine( __0x2414, "Assets" );
					if( Directory.Exists( __0x2456 ) )
						Directory.Delete( __0x2456, true );

					__0x2456 = Path.Combine( __0x2414, "Caches" );
					if( Directory.Exists( __0x2456 ) )
						Directory.Delete( __0x2456, true );

					__0x2456 = Path.Combine( __0x2414, "Binaries" );
					if( Directory.Exists( __0x2456 ) )
						Directory.Delete( __0x2456, true );

					
					
					

					
					
					
				}

			}

			public static void Process()
			{
				Console.WriteLine( "NeoAxis.Editor.exe: PrepareProductAssets: Preparing Project.zip..." );


				if( !SystemSettings.CommandLineParameters.TryGetValue( "-prepareProductAssets", out var productFileName ) )
					return;

				if( !SystemSettings.CommandLineParameters.TryGetValue( "-destinationFolder", out var destinationFolder ) )
				{
					Log.Warning( "PrepareProductAssets: -destinationFolder is not specified." );
					return;
				}

				if( !SystemSettings.CommandLineParameters.TryGetValue( "-platform", out var platform ) )
				{
					Log.Warning( "PrepareProductAssets: -platform is not specified." );
					return;
				}
				if( !Enum.TryParse( platform, out __0x2411 ) )
				{
					Log.Warning( "PrepareProductAssets: Unable to parse platform parameter value \'{0}\'.", platform );
					return;
				}

				__0x2412 = Path.GetFullPath( Path.Combine( Path.GetDirectoryName( Assembly.GetExecutingAssembly().Location ), ".." ) );
				__0x2413 = Path.Combine( __0x2412, "Assets" );
				var __0x2457 = Path.Combine( __0x2413, productFileName );
				__0x2414 = destinationFolder;


				var __0x2458 = TextBlockUtility.LoadFromRealFile( __0x2457, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					Log.Warning( $"Unable to load \'{__0x2457 }\'. " + error );
					return;
				}

				

				try
				{
					var __0x2459 = Path.Combine( __0x2414, "Project.zip" );
					if( File.Exists( __0x2459 ) )
						File.Delete( __0x2459 );

					__0x2459 = Path.Combine( __0x2414, "Project.zip.hash" );
					if( File.Exists( __0x2459 ) )
						File.Delete( __0x2459 );

					__0x2459 = Path.Combine( __0x2414, "Assets" );
					if( Directory.Exists( __0x2459 ) )
						Directory.Delete( __0x2459, true );

					__0x2459 = Path.Combine( __0x2414, "Binaries" );
					if( Directory.Exists( __0x2459 ) )
						Directory.Delete( __0x2459, true );

					__0x2459 = Path.Combine( __0x2414, "Caches" );
					if( Directory.Exists( __0x2459 ) )
						Directory.Delete( __0x2459, true );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return;
				}

				

				var __0x2460 = __0x2458.Children[ 0 ];

				var __0x2461 = __0x2460.GetAttribute( "Paths" );
				
				

				if( !bool.TryParse( __0x2460.GetAttribute( "CompressData", "True" ), out __0x2415 ) )
					__0x2415 = true;
				if( !bool.TryParse( __0x2460.GetAttribute( "FileCache", "True" ), out __0x2417 ) )
					__0x2417 = true;
				if( !bool.TryParse( __0x2460.GetAttribute( "ShaderCache", "True" ), out __0x2416 ) )
					__0x2416 = true;

				

				try
				{
					__0x2511( __0x2461 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return;
				}

				
			}
		}

		

		public static class PlatformProjectPatch
		{
			public static bool Process( string destFile, string baseProjectFileName, out string error, out bool changed )
			{
				if( !Path.IsPathRooted( destFile ) )
					destFile = Path.Combine( Directory.GetCurrentDirectory(), destFile );
				if( !Path.IsPathRooted( baseProjectFileName ) )
					baseProjectFileName = Path.Combine( Directory.GetCurrentDirectory(), baseProjectFileName );

				string __0x2462 = Path.GetDirectoryName( destFile );

				error = "";
				changed = false;

				if( !File.Exists( destFile ) )
				{
					error = "Target project file not exists. File: " + destFile;
					return false;
				}

				if( !File.Exists( baseProjectFileName ) )
				{
					error = "Base project file not exists. File: " + baseProjectFileName;
					return false;
				}

				var __0x2463 = new ESet<string>();
				{
					var __0x2464 = new XmlDocument();
					__0x2464.Load( baseProjectFileName );

					var __0x2465 = new XmlNamespaceManager( __0x2464.NameTable );
					__0x2465.AddNamespace( "df", __0x2464.DocumentElement.NamespaceURI );

					
					{
						var __0x2466 = true;
						foreach( XmlNode __0x2499 in __0x2464.GetElementsByTagName( "EnableDefaultCompileItems" ) )
						{
							if( !string.IsNullOrEmpty( __0x2499.InnerText ) )
							{
								__0x2466 = bool.Parse( __0x2499.InnerText );
								break;
							}
						}

						if( __0x2466 )
						{
							foreach( var __0x2500 in Directory.GetFiles( __0x2462, "*.cs", SearchOption.AllDirectories ) )
							{
								var __0x2467 = __0x2500.Replace( __0x2462 + "\\", "" );
								__0x2463.AddWithCheckAlreadyContained( __0x2467 );
							}
						}
					}

					
					{
						var __0x2468 = __0x2464.SelectNodes( "//df:Compile", __0x2465 );
						foreach( XmlNode __0x2501 in __0x2468 )
						{
							var __0x2469 = __0x2501.Attributes[ "Include" ];
							if( __0x2469 != null )
							{
								var __0x2470 = __0x2469.Value;
								__0x2463.AddWithCheckAlreadyContained( __0x2470 );
							}
						}
					}

					
					{
						var __0x2471 = __0x2464.SelectNodes( "//df:Compile", __0x2465 );
						foreach( XmlNode __0x2502 in __0x2471 )
						{
							var __0x2472 = __0x2502.Attributes[ "Remove" ];
							if( __0x2472 != null )
							{
								var __0x2473 = __0x2472.Value;

								if( __0x2473.Length >= 2 && __0x2473[ __0x2473.Length - 2 ] == '*' && __0x2473[ __0x2473.Length - 1 ] == '*' )
								{
									var __0x2474 = __0x2473.Substring( 0, __0x2473.Length - 2 );

									again:;
									foreach( var __0x2503 in __0x2463 )
									{
										if( __0x2503.Length >= __0x2474.Length && __0x2503.Substring( 0, __0x2474.Length ) == __0x2474 )
										{
											__0x2463.Remove( __0x2503 );
											goto again;
										}
									}
								}
								else
									__0x2463.Remove( __0x2473 );
							}
						}
					}

				}

				var __0x2475 = new XmlDocument();
				__0x2475.Load( destFile );

				var __0x2476 = new XmlNamespaceManager( __0x2475.NameTable );
				__0x2476.AddNamespace( "df", __0x2475.DocumentElement.NamespaceURI );

				

				XmlNode __0x2477 = null;
				{
					var __0x2478 = __0x2475.SelectNodes( "//df:Compile", __0x2476 );
					
					foreach( XmlNode __0x2504 in __0x2478 )
					{
						__0x2477 = __0x2504.ParentNode;
						break;
					}
				}

				var __0x2479 = false;

				
				{
					var __0x2480 = new List<XmlNode>();

					var __0x2481 = __0x2475.SelectNodes( "//df:Compile", __0x2476 );
					
					foreach( XmlNode __0x2505 in __0x2481 )
					{
						var __0x2482 = __0x2505.Attributes[ "Include" ];
						if( __0x2482 != null )
						{
							var __0x2483 = __0x2482.Value;

							if( __0x2463.Contains( __0x2483 ) )
								__0x2463.Remove( __0x2483 );
							else
								__0x2480.Add( __0x2505 );
						}
					}

					foreach( var __0x2506 in __0x2480.GetReverse() )
						__0x2506.ParentNode.RemoveChild( __0x2506 );

					if( __0x2480.Count != 0 )
						__0x2479 = true;
				}

				
				foreach( var __0x2507 in __0x2463 )
				{
					var __0x2484 = __0x2475.CreateNode( XmlNodeType.Element, "Compile", null );
					var __0x2485 = __0x2475.CreateAttribute( "Include" );
					__0x2485.Value = __0x2507;
					__0x2484.Attributes.Append( __0x2485 );
					__0x2477.AppendChild( __0x2484 );

					__0x2479 = true;
				}

				

				if( __0x2479 )
				{
					var __0x2486 = File.ReadAllText( destFile, Encoding.UTF8 );

					var __0x2487 = new MemoryStream();
					__0x2475.Save( __0x2487 );
					__0x2487.Seek( 0, SeekOrigin.Begin );
					var __0x2488 = new StreamReader( __0x2487 );
					string __0x2489 = __0x2488.ReadToEnd();

					
					__0x2489 = __0x2489.Replace( " xmlns=\"\"", "" );

					if( __0x2486 != __0x2489 )
					{
						File.WriteAllText( destFile, __0x2489 );
						changed = true;
					}

					

					

					

					
					
					

					

					
				}

				return true;
			}

			public static void Process()
			{
				Console.WriteLine( "NeoAxis.Editor.exe: PlatformProjectPatch." );
				

				if( !SystemSettings.CommandLineParameters.TryGetValue( "-platformProjectPatch", out var destFile ) )
					return;
				if( !SystemSettings.CommandLineParameters.TryGetValue( "-baseProject", out var baseProjectFileName ) )
				{
					Log.Warning( "PlatformProjectPatch: -baseProject is not specified." );
					return;
				}

				if( !Process( destFile, baseProjectFileName, out var error, out var changed ) )
				{
					Log.Warning( error );
					return;
				}

				if( changed )
					Console.WriteLine( "Done. The file was changed. Need to rebuild the solution." );
				else
					Console.WriteLine( "Done. No changes." );
			}
		}
	}
}

#endif




namespace NeoAxis.Editor
{
	public class EditorControlAttribute : Attribute
	{
		Type __0x2524;
		string __0x2525;
		bool __0x2526;

		public EditorControlAttribute( Type documentClass, bool onlyWhenRootComponent = false )
		{
			this.__0x2524 = documentClass;
			this.__0x2526 = onlyWhenRootComponent;
		}

		public EditorControlAttribute( string documentClassName, bool onlyWhenRootComponent = false )
		{
			this.__0x2525 = documentClassName;
			this.__0x2526 = onlyWhenRootComponent;
		}

		public Type DocumentClass
		{
			get { return __0x2524; }
		}

		public string DocumentClassName
		{
			get { return __0x2525; }
		}

		public bool OnlyWhenRootComponent
		{
			get { return __0x2526; }
		}
	}

	

	[AttributeUsage( AttributeTargets.Class, AllowMultiple = true )]
	public class SettingsCellAttribute : Attribute
	{
		Type __0x2527;
		bool __0x2528;

		public SettingsCellAttribute( Type settingsCellClass, bool multiselectionSupport = false )
		{
			this.__0x2527 = settingsCellClass;
			this.__0x2528 = multiselectionSupport;
		}

		public Type SettingsCellClass
		{
			get { return __0x2527; }
		}

		public bool MultiselectionSupport
		{
			get { return __0x2528; }
		}
	}

	

	public class PreviewAttribute : Attribute
	{
		Type __0x2529;
		string __0x2530;

		public PreviewAttribute( Type previewClass )
		{
			this.__0x2529 = previewClass;
		}

		public PreviewAttribute( string previewClassName )
		{
			this.__0x2530 = previewClassName;
		}

		public Type PreviewClass
		{
			get { return __0x2529; }
		}

		public string PreviewClassName
		{
			get { return __0x2530; }
		}
	}

	

	public class PreviewImageAttribute : Attribute
	{
		Type __0x2531;
		string __0x2532;

		public PreviewImageAttribute( Type previewClass )
		{
			this.__0x2531 = previewClass;
		}

		public PreviewImageAttribute( string previewClassName )
		{
			this.__0x2532 = previewClassName;
		}

		public Type PreviewClass
		{
			get { return __0x2531; }
		}

		public string PreviewClassName
		{
			get { return __0x2532; }
		}
	}

	

	public class NewObjectSettingsAttribute : Attribute
	{
		Type __0x2533;

		public NewObjectSettingsAttribute( Type settingsClass )
		{
			this.__0x2533 = settingsClass;
		}

		public Type SettingsClass
		{
			get { return __0x2533; }
		}
	}

	

	public class NewObjectCellAttribute : Attribute
	{
		Type __0x2534;

		public NewObjectCellAttribute( Type cellClass )
		{
			this.__0x2534 = cellClass;
		}

		public Type CellClass
		{
			get { return __0x2534; }
		}
	}

	

	public enum RenderSelectionState
	{
		None,
		CanSelect,
		Selected,
	}

	

	/// <summary>
	/// Provides data to implement drag and drop functionaly for references.
	/// </summary>
	public class DragDropSetReferenceData
	{
		public DocumentInstance document;
		public Component[] controlledComponents;
		public object[] propertyOwners;
		
		public Metadata.Property property;
		public object[] indexers;

		public void SetProperty( string[] referenceValues )
		{
			EditorUtility.SetPropertyReference( document, propertyOwners, property, indexers, referenceValues );
		}

		
		
		
		
		
		
		
		
	}

	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	

	

	/// <summary>
	/// Auxiliary class to work with clipboard of the system.
	/// </summary>
	public abstract class EditorExtensions
	{
		public virtual void OnRegister() { }
		public virtual void OnUnregister() { }
	}

	

	/// <summary>
	/// Represents a collection of focuced objects in the document window.
	/// </summary>
	public class ObjectsInFocus
	{
		
		public DocumentWindow DocumentWindow;
		public object[] Objects;

		public ObjectsInFocus(  DocumentWindow documentWindow, object[] objects )
		{
			
			this.DocumentWindow = documentWindow;
			this.Objects = objects;
		}
	}

	

	/// <summary>
	/// Data for storing in clipboard of the system to implement cut/copy/paste functionality.
	/// </summary>
	public class ObjectCutCopyPasteData
	{
		public DocumentWindow documentWindow;
		
		public bool cut;
		public object[] objects;

		public ObjectCutCopyPasteData( DocumentWindow documentWindow, bool cut, object[] objects )
		{
			this.documentWindow = documentWindow;
			this.cut = cut;
			this.objects = objects;
		}
	}

	

	/// <summary>
	/// Auxiliary class to work with clipboard of the system.
	/// </summary>
	public static class ClipboardManager
	{
		static object __0x2535;

		public static void CopyToClipboard<T>( T objectToCopy ) where T : class
		{
			var __0x2536 = DataFormats.GetFormat( typeof( T ).FullName );

			__0x2535 = objectToCopy;

			var __0x2537 = new DataObject();
			__0x2537.SetData( __0x2536.Name, false, "NeoAxis.ClipboardManager" );
			Clipboard.SetDataObject( __0x2537, false );
		}

		public static bool CheckAvailableInClipboard<T>() where T : class
		{
			if( __0x2535 != null && __0x2535 is T )
			{
				var __0x2538 = Clipboard.GetDataObject();
				var __0x2539 = DataFormats.GetFormat( typeof( T ).FullName );

				if( __0x2538.GetDataPresent( __0x2539.Name ) )
					return true;
			}
			return false;
		}

		public static T GetFromClipboard<T>() where T : class
		{
			if( __0x2535 != null && __0x2535 is T )
			{
				var __0x2540 = Clipboard.GetDataObject();
				var __0x2541 = DataFormats.GetFormat( typeof( T ).FullName );

				if( __0x2540.GetDataPresent( __0x2541.Name ) && __0x2540.GetData( __0x2541.Name ) as string == "NeoAxis.ClipboardManager" )
				{
					var __0x2542 = __0x2535;
					__0x2535 = null;
					return (T)__0x2542;
				}
			}
			return null;
		}

		public static void Clear()
		{
			Clipboard.Clear();
		}
	}

	

	/// <summary>
	/// An interface provides the ability to inform the change document to objects.
	/// </summary>
	public interface IEditorUpdateWhenDocumentModified
	{
		void EditorUpdateWhenDocumentModified();
	}

	

	/// <summary>
	/// An attribute to mark dependent property from another. Used when working with the list of properties in the Settings Window.
	/// </summary>
	public class UndoDependentPropertyAttribute : Attribute
	{
		string __0x2543;

		public UndoDependentPropertyAttribute( string propertyName )
		{
			this.__0x2543 = propertyName;
		}

		public string PropertyName
		{
			get { return __0x2543; }
		}
	}

	

	/// <summary>
	/// An attribute to mark components to show warning when component creating if another component with same type already exists.
	/// </summary>
	public class WhenCreatingShowWarningIfItAlreadyExistsAttribute : Attribute
	{
		public WhenCreatingShowWarningIfItAlreadyExistsAttribute()
		{
		}
	}

	

	public class RestoreDockWindowAfterEditorReloadAttribute : Attribute
	{
		public RestoreDockWindowAfterEditorReloadAttribute()
		{
		}
	}

	

	public enum StoreProductLicense
	{
		None,
		MIT,
		[DisplayNameEnum( "CC Attribution" )]
		CCAttribution,
		[DisplayNameEnum( "CC Attribution BY-SA" )]
		CCAttributionBYSA,
		[DisplayNameEnum( "CC Attribution BY-ND" )]
		CCAttributionBYND,
		[DisplayNameEnum( "CC Attribution BY-NC" )]
		CCAttributionBYNC,
		[DisplayNameEnum( "CC Attribution BY-NC-SA" )]
		CCAttributionBYNCSA,
		[DisplayNameEnum( "CC Attribution BY-NC-ND" )]
		CCAttributionBYNCND,
		FreeToUse,
		[DisplayNameEnum( "Free To Use With NeoAxis" )]
		FreeToUseWithNeoAxis,
		PaidPerSeat,
		
	}
}





namespace NeoAxis.Editor
{
	public static class EditorContextMenu
	{
		

		public abstract class ItemBase
		{
			internal abstract KryptonContextMenuItemBase RealItem { get; }
		}

		

		public class Item : ItemBase
		{
			KryptonContextMenuItem __0x2544;

			
			
			
			

			public Item( string text, System.EventHandler clickHandler )
			{
				__0x2544 = new KryptonContextMenuItem( text, clickHandler );
			}

			public string Text
			{
				get { return __0x2544.Text; }
				set { __0x2544.Text = value; }
			}

			public bool Enabled
			{
				get { return __0x2544.Enabled; }
				set { __0x2544.Enabled = value; }
			}

			public string ShortcutKeyDisplayString
			{
				get { return __0x2544.ShortcutKeyDisplayString; }
				set { __0x2544.ShortcutKeyDisplayString = value; }
			}

			internal override KryptonContextMenuItemBase RealItem
			{
				get { return __0x2544; }
			}
		}

		

		public class Separator : ItemBase
		{
			internal KryptonContextMenuSeparator item;

			public Separator()
			{
				item = new KryptonContextMenuSeparator();
			}

			internal override KryptonContextMenuItemBase RealItem
			{
				get { return item; }
			}
		}

		

		public static void Show( ICollection<ItemBase> items, Vector2I screenPosition )
		{
			if( items.Count == 0 )
				return;

			var __0x2545 = new List<KryptonContextMenuItemBase>();
			foreach( var __0x2548 in items )
				__0x2545.Add( __0x2548.RealItem );

			var __0x2546 = new KryptonContextMenu();
			__0x2546.Items.Add( new KryptonContextMenuItems( __0x2545.ToArray() ) );
			__0x2546.Show( EditorForm.Instance, new Point( screenPosition.X, screenPosition.Y ) );
		}

		public static void Show( ICollection<ItemBase> items )
		{
			var __0x2547 = Cursor.Position;
			Show( items, new Vector2I( __0x2547.X, __0x2547.Y ) );
		}






		
		
		

		

		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		

		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		

		
		
		

		
		

		
		
		
		

		

		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	

	
	

	public static class EditorContextMenuWinForms
	{
		
		public delegate void ShowEventDelegate( KryptonContextMenu __0x2610, Control __0x2611, Point? __0x2612 );
		public static event ShowEventDelegate ShowEvent;

		

		public enum MenuTypeEnum
		{
			None,
			General,
			Resources,
			Document,
		}

		

		public static KryptonContextMenu Create()
		{
			var __0x2549 = new KryptonContextMenu();
			return __0x2549;
		}

		public static void Show( KryptonContextMenu menu, Control locationControl, Point locationPoint )
		{
			ShowEvent?.Invoke( menu, locationControl, locationPoint );

			
			

			
			menu.Show( locationControl, locationControl.PointToScreen( locationPoint ) );
		}

		public static void Show( KryptonContextMenu menu, Control locationControl )
		{
			ShowEvent?.Invoke( menu, locationControl, null );

			menu.Show( locationControl, Cursor.Position );
			
		}

		public static void Show( ICollection<KryptonContextMenuItemBase> items, Control locationControl, Point locationPoint )
		{
			if( items.Count == 0 )
				return;

			var __0x2550 = Create();

			var __0x2551 = new KryptonContextMenuItemBase[ items.Count ];
			items.CopyTo( __0x2551, 0 );
			__0x2550.Items.Add( new KryptonContextMenuItems( __0x2551 ) );

			Show( __0x2550, locationControl, locationPoint );
		}

		public static void Show( ICollection<KryptonContextMenuItemBase> items, Control locationControl )
		{
			if( items.Count == 0 )
				return;

			var __0x2552 = Create();

			var __0x2553 = new KryptonContextMenuItemBase[ items.Count ];
			items.CopyTo( __0x2553, 0 );
			__0x2552.Items.Add( new KryptonContextMenuItems( __0x2553 ) );

			Show( __0x2552, locationControl );
		}

		public static string Translate( string text )
		{
			return EditorLocalization.Translate( "ContextMenu", text );
		}

		public static void AddTransformToolToMenu( ICollection<KryptonContextMenuItemBase> items, TransformTool transformTool )
		
		{
			KryptonContextMenuItem __0x2554;
			string __0x2555;

			
			__0x2555 = Translate( "Select" );
			__0x2554 = new KryptonContextMenuItem( __0x2555, null, delegate ( object __0x2613, EventArgs __0x2614 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Select" );
			} );
			__0x2554.Checked = transformTool.Mode == TransformTool.ModeEnum.None;
			
			__0x2554.Image = EditorResourcesCache.Select;
			__0x2554.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Select" );
			items.Add( __0x2554 );

			
			__0x2555 = Translate( "Move && Rotate" );
			__0x2554 = new KryptonContextMenuItem( __0x2555, null, delegate ( object __0x2615, EventArgs __0x2616 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Move & Rotate" );
			} );
			__0x2554.Checked = transformTool.Mode == TransformTool.ModeEnum.PositionRotation;
			
			__0x2554.Image = EditorResourcesCache.MoveRotate;
			__0x2554.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Move & Rotate" );
			items.Add( __0x2554 );

			
			__0x2555 = Translate( "Move" );
			__0x2554 = new KryptonContextMenuItem( __0x2555, null, delegate ( object __0x2617, EventArgs __0x2618 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Move" );
			} );
			__0x2554.Checked = transformTool.Mode == TransformTool.ModeEnum.Position;
			
			__0x2554.Image = EditorResourcesCache.Move;
			__0x2554.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Move" );
			items.Add( __0x2554 );

			
			__0x2555 = Translate( "Rotate" );
			__0x2554 = new KryptonContextMenuItem( __0x2555, null, delegate ( object __0x2619, EventArgs __0x2620 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rotate" );
			} );
			__0x2554.Checked = transformTool.Mode == TransformTool.ModeEnum.Rotation;
			
			__0x2554.Image = EditorResourcesCache.Rotate;
			__0x2554.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rotate" );
			items.Add( __0x2554 );

			
			__0x2555 = Translate( "Scale" );
			__0x2554 = new KryptonContextMenuItem( __0x2555, null, delegate ( object __0x2621, EventArgs __0x2622 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Scale" );
			} );
			__0x2554.Checked = transformTool.Mode == TransformTool.ModeEnum.Scale;
			
			__0x2554.Image = EditorResourcesCache.Scale;
			__0x2554.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Scale" );
			items.Add( __0x2554 );
		}

		public static void AddActionsToMenu( MenuTypeEnum menuType, ICollection<KryptonContextMenuItemBase> items )
		{
			bool __0x2556 = true;

			foreach( var __0x2604 in EditorActions.Actions )
			{
				if( !__0x2604.CompletelyDisabled && __0x2604.ContextMenuSupport != MenuTypeEnum.None && __0x2604.ContextMenuSupport == menuType )
				{
					var __0x2557 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, __0x2604 );
					
					

					if( __0x2557.Enabled )
					{
						if( __0x2556 )
						{
							if( items.Count != 0 )
								items.Add( new KryptonContextMenuSeparator() );

							__0x2556 = false;
						}

						var __0x2558 = EditorAPI.GetImageForDispalyScale( __0x2604.GetImageSmall(), __0x2604.GetImageBig() );
						var __0x2559 = new KryptonContextMenuItem( Translate( __0x2604.GetContextMenuText() ), __0x2558, delegate ( object __0x2623, EventArgs __0x2624 )
						{
							

							
							var __0x2560 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, __0x2604 );
							
							if( __0x2560.Enabled )
								EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, __0x2604.Name );

							
						} );

						if( __0x2604.ActionType == EditorAction.ActionTypeEnum.DropDown )
						{
							var __0x2561 = new CancelEventArgs();
							__0x2604.DropDownContextMenu.PerformOpening( __0x2561 );
							
							
							

							foreach( var __0x2605 in __0x2604.DropDownContextMenu.Items )
								__0x2559.Items.Add( __0x2605 );
						}

						
						
						__0x2559.Tag = __0x2604;
						__0x2559.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( __0x2604.Name );
						items.Add( __0x2559 );
					}
				}
			}
		}

		public delegate void TryNewObjectDelegate( Metadata.TypeInfo __0x2625 );

		
		public static void AddNewObjectItem( IList<KryptonContextMenuItemBase> items, bool enabled, TryNewObjectDelegate select )
		{
			
			{
				var __0x2562 = new KryptonContextMenuItem( Translate( "New Object" ), EditorResourcesCache.New, null );
				__0x2562.Enabled = enabled;

				var __0x2563 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x2564 = new KryptonContextMenuItem( Translate( "Select..." ), null,
						delegate ( object __0x2626, EventArgs __0x2627 )
						{
							select( null );
							
						} );
					__0x2563.Add( __0x2564 );
				}

				
				__0x2563.Add( new KryptonContextMenuSeparator() );

				
				{
					var __0x2565 = new Dictionary<string, KryptonContextMenuItem>();

					KryptonContextMenuItem GetBrowserItemByPath( string __0x2628 )
					{
						__0x2565.TryGetValue( __0x2628, out var item );
						return item;
					}

					foreach( var __0x2606 in ResourcesWindowItems.Items )
					{
						
						if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x2606 ) )
							continue;

						
						if( !typeof( Component ).IsAssignableFrom( __0x2606.Type ) )
							continue;

						
						var __0x2566 = __0x2606.Path;
						{
							var __0x2567 = "Base\\";
							if( __0x2566.Length > __0x2567.Length && __0x2566.Substring( 0, __0x2567.Length ) == __0x2567 )
								__0x2566 = __0x2566.Substring( __0x2567.Length );
						}

						var __0x2568 = __0x2566.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

						string __0x2569 = "";
						for( int __0x2570 = 0; __0x2570 < __0x2568.Length; __0x2570++ )
						{
							__0x2569 = Path.Combine( __0x2569, __0x2568[ __0x2570 ] );

							
							KryptonContextMenuItem __0x2571 = null;
							if( __0x2570 != 0 )
								__0x2571 = GetBrowserItemByPath( Path.GetDirectoryName( __0x2569 ) );

							if( GetBrowserItemByPath( __0x2569 ) == null )
							{
								

								KryptonContextMenuItem __0x2572 = null;

								
								bool __0x2573 = __0x2570 < __0x2568.Length - 1;
								if( __0x2573 )
								{
									var __0x2574 = EditorLocalization.Translate( "ContentBrowser.Group", __0x2568[ __0x2570 ] );
									__0x2572 = new KryptonContextMenuItem( __0x2574, null, null );

									
									
									
								}
								else
								{
									var __0x2575 = MetadataManager.GetTypeOfNetType( __0x2606.Type );
									__0x2572 = new KryptonContextMenuItem( __0x2568[ __0x2570 ], EditorResourcesCache.Type,
										delegate ( object __0x2629, EventArgs __0x2630 )
										{
											var __0x2576 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2629 ).Tag;
											select( __0x2576 );
											
										} );
									__0x2572.Tag = __0x2575;

									

									__0x2572.Enabled = !__0x2606.Disabled;
								}

								if( __0x2571 != null )
								{
									if( __0x2571.Items.Count == 0 )
										__0x2571.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
									var __0x2577 = (KryptonContextMenuItems)__0x2571.Items[ 0 ];
									__0x2577.Items.Add( __0x2572 );
									
								}

								__0x2565.Add( __0x2569, __0x2572 );
								if( __0x2570 == 0 )
									__0x2563.Add( __0x2572 );
							}
						}
					}

				}

				
				if( EditorFavorites.AllowFavorites )
				{
					var __0x2578 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.Group", "Favorites" ), null, null );

					var __0x2579 = new List<Metadata.TypeInfo>( 32 );
					var __0x2580 = new List<string>( 32 );
					foreach( var __0x2607 in EditorFavorites.Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries ) )
					{
						var __0x2581 = MetadataManager.GetTypeOfNetType( __0x2607 );
						if( __0x2581 != null )
							__0x2579.Add( __0x2581 );
						else if( VirtualFile.Exists( __0x2607 ) )
							__0x2580.Add( __0x2607 );
					}

					CollectionUtility.MergeSort( __0x2579, delegate ( Metadata.TypeInfo __0x2631, Metadata.TypeInfo __0x2632 )
					{
						return string.Compare( __0x2631.Name, __0x2632.Name );
					} );

					CollectionUtility.MergeSort( __0x2580, delegate ( string __0x2633, string __0x2634 )
					{
						var __0x2582 = Path.GetFileName( __0x2633 );
						var __0x2583 = Path.GetFileName( __0x2634 );
						return string.Compare( __0x2582, __0x2583 );
					} );

					foreach( var __0x2608 in __0x2579 )
					{
						var __0x2584 = __0x2608.DisplayName;
						{
							var __0x2585 = ResourcesWindowItems.GetItemByType( __0x2608.GetNetType() );
							if( __0x2585 != null )
							{
								try
								{
									__0x2584 = Path.GetFileName( __0x2585.Path );
								}
								catch { }
							}
						}

						var __0x2586 = new KryptonContextMenuItem( __0x2584, EditorResourcesCache.Type,
							delegate ( object __0x2635, EventArgs __0x2636 )
							{
								var __0x2587 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2635 ).Tag;
								select( __0x2587 );
							} );
						__0x2586.Tag = __0x2608;

						if( __0x2578.Items.Count == 0 )
							__0x2578.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
						var __0x2588 = (KryptonContextMenuItems)__0x2578.Items[ 0 ];
						__0x2588.Items.Add( __0x2586 );
					}

					
					
					
					
					
					
					
					
					
					
					

					

					
					
					
					
					

					
					
					
					
					
					

					
					
					
					


					
					
					
					
					
					
					

					
					
					
					
					

					__0x2563.Add( __0x2578 );
				}

				__0x2562.Items.Add( new KryptonContextMenuItems( __0x2563.ToArray() ) );
				items.Add( __0x2562 );

				
				
				
				
				
				
			}
		}

		public static void AddNewResourceItem( IList<KryptonContextMenuItemBase> items, bool enabled, TryNewObjectDelegate select )
		{
			
			{
				var __0x2589 = new KryptonContextMenuItem( Translate( "New Resource" ), EditorResourcesCache.New, null );
				__0x2589.Enabled = enabled;

				var __0x2590 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x2591 = new KryptonContextMenuItem( Translate( "Select..." ), null,
						delegate ( object __0x2637, EventArgs __0x2638 )
						{
							select( null );
						} );
					__0x2590.Add( __0x2591 );
				}

				
				__0x2590.Add( new KryptonContextMenuSeparator() );

				
				{
					var __0x2592 = new Dictionary<string, KryptonContextMenuItem>();

					KryptonContextMenuItem GetBrowserItemByPath( string __0x2639 )
					{
						__0x2592.TryGetValue( __0x2639, out var item );
						return item;
					}

					foreach( var __0x2609 in ResourcesWindowItems.Items )
					{
						
						if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x2609 ) )
							continue;

						
						
						

						
						var __0x2593 = __0x2609.Path;
						{
							var __0x2594 = "Base\\";
							if( __0x2593.Length > __0x2594.Length && __0x2593.Substring( 0, __0x2594.Length ) == __0x2594 )
								__0x2593 = __0x2593.Substring( __0x2594.Length );
						}

						var __0x2595 = __0x2593.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

						string __0x2596 = "";
						for( int __0x2597 = 0; __0x2597 < __0x2595.Length; __0x2597++ )
						{
							__0x2596 = Path.Combine( __0x2596, __0x2595[ __0x2597 ] );

							
							KryptonContextMenuItem __0x2598 = null;
							if( __0x2597 != 0 )
								__0x2598 = GetBrowserItemByPath( Path.GetDirectoryName( __0x2596 ) );

							if( GetBrowserItemByPath( __0x2596 ) == null )
							{
								

								KryptonContextMenuItem __0x2599 = null;

								
								bool __0x2600 = __0x2597 < __0x2595.Length - 1;
								if( __0x2600 )
								{
									__0x2599 = new KryptonContextMenuItem( __0x2595[ __0x2597 ], null, null );

									
									
									
								}
								else
								{
									var __0x2601 = MetadataManager.GetTypeOfNetType( __0x2609.Type );
									__0x2599 = new KryptonContextMenuItem( __0x2595[ __0x2597 ], EditorResourcesCache.Type,
										delegate ( object __0x2640, EventArgs __0x2641 )
										{
											var __0x2602 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2640 ).Tag;
											select( __0x2602 );
											
										} );
									__0x2599.Tag = __0x2601;

									

									__0x2599.Enabled = !__0x2609.Disabled;
								}

								if( __0x2598 != null )
								{
									if( __0x2598.Items.Count == 0 )
										__0x2598.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
									var __0x2603 = (KryptonContextMenuItems)__0x2598.Items[ 0 ];
									__0x2603.Items.Add( __0x2599 );
									
								}

								__0x2592.Add( __0x2596, __0x2599 );
								if( __0x2597 == 0 )
									__0x2590.Add( __0x2599 );
							}
						}
					}
				}

				__0x2589.Items.Add( new KryptonContextMenuItems( __0x2590.ToArray() ) );
				items.Add( __0x2589 );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	public static class EditorFavorites
	{
		public static bool AllowFavorites = true;

		[EngineConfig( "Editor", "Favorites" )]
		public static string Favorites = "";

		

		internal static void Init()
		{
			EngineConfig.RegisterClassParameters( typeof( EditorFavorites ) );
		}

		public static void Add( string name )
		{
			if( !string.IsNullOrEmpty( name ) && !Contains( name ) )
			{
				if( !string.IsNullOrEmpty( Favorites ) )
					Favorites += "|";
				Favorites += name;
			}
		}

		public static void Remove( string name )
		{
			var __0x2642 = Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );

			Favorites = "";
			foreach( var __0x2644 in __0x2642 )
			{
				if( __0x2644 != name )
				{
					if( !string.IsNullOrEmpty( Favorites ) )
						Favorites += "|";
					Favorites += __0x2644;
				}
			}
		}

		public static bool Contains( string name )
		{
			var __0x2643 = Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );

			foreach( var __0x2645 in __0x2643 )
			{
				if( __0x2645 == name )
					return true;
			}
			return false;
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the main editor form.
	/// </summary>
	public partial class EditorForm : KryptonForm
	{
		const string __0x2646 = @"user:Configs\EditorDocking.config";
		const string __0x2647 = @"Base\Tools\EditorDockingDefault.config";

		public static EditorForm instance;

		List<DocumentInstance> __0x2648 = new List<DocumentInstance>();

		bool __0x2649;
		

		bool __0x2650;
		bool __0x2651 = true;
		bool __0x2652 = true;

		

		WorkspaceControllerForForm __0x2653;

		static bool __0x2654;

		

		public string ribbonLastSelectedTabTypeByUser = "";
		public bool ribbonLastSelectedTabTypeByUser_DisableUpdate = true;

		ObjectsInFocus __0x2655;

		public bool needClose;

		Control __0x2656;

		double __0x2657;

		public DateTime? unlockFormUpdateInTimer;

		public int skipPaintCounter = 2;

		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		public EditorForm()
		{
			instance = this;

			
			var __0x2658 = ProjectSettings.ReadParameterFromFile( "CustomWindowsStyle" );
			if( !string.IsNullOrEmpty( __0x2658 ) )
			{
				try
				{
					KryptonToolkitSettings.AllowFormChrome = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x2658 );
				}
				catch { }
			}
			AllowFormChrome = KryptonToolkitSettings.AllowFormChrome;

			
			var __0x2659 = ProjectSettings.ReadParameterFromFile( "SplashScreenAtStartup" );
			if( string.IsNullOrEmpty( __0x2659 ) && !Debugger.IsAttached )
			{
				var __0x2660 = new SplashForm();
				__0x2660.Show();
			}
			Application.EnterThreadModal += delegate ( object __0x2861, EventArgs __0x2862 )
			{
				SplashForm.Instance?.Close();
			};

			__0x2860();
			Icon = Properties.Resources.EditorLogo;

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			
			

			__0x2653 = new WorkspaceControllerForForm( __0x2794, this );

			

			EditorAssemblyInterface.Instance.InitializeWPFApplicationAndScriptEditor();
			
			

			
			

			
			EditorSettingsSerialization.Init();
			EditorFavorites.Init();
		}

		
		
		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		

		public static EditorForm Instance
		{
			get { return instance; }
		}

		public static event Action RegisterAdditionalDockWindows;

		private void __0x2826( object __0x2863, EventArgs __0x2864 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			kryptonRibbon.Visible = false;

			
			__0x2656 = new Control();
			__0x2656.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x2656.Dock = DockStyle.Fill;
			Controls.Add( __0x2656 );
			__0x2656.BringToFront();
			Application.DoEvents();

			
			
			
			
			
			
			
			
			
			
			
			
			

			kryptonRibbon.RibbonTabs.Clear();

			StoreManager.Init();

			{
				EngineApp.InitSettings.UseApplicationWindowHandle = Handle;

				if( !EngineApp.Create() )
				{
					Log.Fatal( "EngineApp.Create() failed." );
					Close();
					return;
				}

				

				

				
				
				
				
				
				
				
				

				

				
				

				
				
				
				
				

				
				
				

				
				
				
				
				
				

			}

			EngineApp.DefaultSoundChannelGroup.Volume = 0;

			__0x2838();
			PreviewImagesManager.Init();

			
			if( ProjectSettings.Get.General.Theme.Value == ProjectSettingsPage_General.ThemeEnum.Dark )
				__0x2793.GlobalPaletteMode = PaletteModeManager.NeoAxisBlack;
			else
				__0x2793.GlobalPaletteMode = PaletteModeManager.NeoAxisBlue;

			KryptonDarkThemeUtility.DarkTheme = EditorAPI.DarkTheme;
			if( EditorAPI.DarkTheme )
				EditorAssemblyInterface.Instance.SetDarkTheme();
			Internal.Aga.Controls.Tree.NodeControls.BaseTextControl.DarkTheme = EditorAPI.DarkTheme;

			BackColor = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 240, 240, 240 );

			
			kryptonRibbon.RibbonAppButton.AppButtonText = EditorLocalization.Translate( "AppButton", kryptonRibbon.RibbonAppButton.AppButtonText );
			if( EditorAPI.DarkTheme )
			{
				kryptonRibbon.RibbonAppButton.AppButtonBaseColorDark = Color.FromArgb( 40, 40, 40 );
				kryptonRibbon.RibbonAppButton.AppButtonBaseColorLight = Color.FromArgb( 54, 54, 54 );
			}

			

			
			
			
			__0x2653.AddToDockspaceStack( new DockWindow[] { new ObjectsWindow(), new SettingsWindow() }, DockingEdge.Right );
			

			__0x2653.AddToDockspaceStack( new DockWindow[] { new ResourcesWindow(), new SolutionExplorer(), new PreviewWindow(), new StoresWindow() }, DockingEdge.Left );
			


			__0x2653.AddToDockspace( new DockWindow[] { new MessageLogWindow(), new OutputWindow(), new DebugInfoWindow() }, DockingEdge.Bottom );

			RegisterAdditionalDockWindows?.Invoke();

			Log.Info( "Use Log.Info(), Log.Warning() methods to write to the window. These methods can be used in the Player. Press '~' to open console of the Player." );
			OutputWindow.Print( "Use OutputWindow.Print() method to write to the window. Unlike Message Log window, this window is not a list. Here you can add text in arbitrary format.\n" );

			
			{
				string __0x2661 = VirtualPathUtility.GetRealPathByVirtual( __0x2646 );
				
				if( !File.Exists( __0x2661 ) )
					__0x2661 = VirtualPathUtility.GetRealPathByVirtual( __0x2647 );

				if( File.Exists( __0x2661 ) )
				{
					

					
					

					__0x2653.LoadLayoutFromFile( __0x2661 );

					
					
					foreach( var __0x2797 in __0x2653.DockingManager.Pages )
					{
						if( __0x2797.needHideAfterLoading )
						{
							__0x2797.needHideAfterLoading = false;

							var __0x2662 = __0x2797.GetDockWindow();
							if( __0x2662 != null )
								__0x2653.SetDockWindowVisibility( __0x2662, false );
						}
					}

					
					
					
					
					
					
					
				}
			}

			__0x2845();
			__0x2851();

			__0x2829();

			
			EditorSettingsSerialization.InitAfterFormLoad();

			XmlDocumentationFiles.PreloadBaseAssemblies();

			EditorAPI.SelectedDocumentWindowChanged += __0x2835;

			__0x2836();

			LoginUtility.RequestFullLicenseInfo();

			kryptonRibbon.BeforeMinimizedModeChanged += __0x2841;
			kryptonRibbon.MinimizedModeChanged += __0x2842;

			KryptonWinFormsUtility.editorFormStartTemporaryLockUpdateAction = delegate ()
			{
				if( IsHandleCreated && !EditorAPI.ClosingApplication )
				{
					KryptonWinFormsUtility.LockFormUpdate( this );
					unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.1 );
				}
			};

			SplashForm.Instance?.Close();

			__0x2650 = true;
		}

		private void __0x2827( object __0x2865, FormClosingEventArgs __0x2866 )
		{
			if( __0x2828( __0x2653.GetDockWindows() ) )
			{
				__0x2866.Cancel = true;
				return;
			}

			
			if( __0x2649 )
			
			{
				string __0x2663 = VirtualPathUtility.GetRealPathByVirtual( __0x2646 );
				EditorAPI.GetRestartApplication( out _, out var resetWindowsSettings );
				if( resetWindowsSettings )
				{
					if( File.Exists( __0x2663 ) )
						File.Delete( __0x2663 );
				}
				else
				{
					if( !Directory.Exists( Path.GetDirectoryName( __0x2663 ) ) )
						Directory.CreateDirectory( Path.GetDirectoryName( __0x2663 ) );

					__0x2653.SaveLayoutToFile( __0x2663 );

					
					
					
					
					
					
					
					
				}

				
				__0x2653.SaveAdditionalConfig();
			}

			EditorAPI.ClosingApplication = true;

			EditorLocalization.Shutdown();

			StoreManager.Shutdown();

			
			{
				
				foreach( var __0x2798 in Documents.ToArray() )
					__0x2798.Destroy();
			}

			
			foreach( var __0x2799 in EngineViewportControl.AllInstances.ToArray() )
				__0x2799.Dispose();

			PreviewImagesManager.Shutdown();

			EditorUtility.PurgeCachedImages();

			if( !__0x2649 )
				EngineApp.NeedSaveConfig = false;
			EngineApp.Shutdown();
		}

		
		
		
		bool __0x2828( IEnumerable<DockWindow> __0x2867 )
		{
			var __0x2664 = new List<DocumentInstance>();

			foreach( var __0x2800 in __0x2867 )
			{
				if( __0x2800 is IDocumentWindow docWnd && !docWnd.IsDocumentSaved() )
					__0x2664.Add( docWnd.Document );
			}

			if( __0x2664.Count == 0 )
				return false;

			var __0x2665 = EditorLocalization.Translate( "General", "Save changes to the following files?" ) + "\n";
			foreach( var __0x2801 in __0x2664 )
				__0x2665 += "\n" + __0x2801.Name;

			switch( EditorMessageBox.ShowQuestion( __0x2665, EMessageBoxButtons.YesNoCancel ) )
			{
			case EDialogResult.Cancel:
				return true;
			case EDialogResult.Yes:
				
				__0x2664.ForEach( __0x2868 => __0x2868.Save() );
				return false;
			case EDialogResult.No:
				return false;
			}

			return false;
		}

		
		internal bool ShowDialogAndSaveDocument( DockWindow window )
		{
			var __0x2666 = window as DocumentWindow;
			if( __0x2666 == null )
				return false;

			
			if( __0x2666.IsMainWindowInWorkspace && !__0x2666.IsDocumentSaved() )
			{
				EDialogResult __0x2667;
				if( window.ShowDialogAndSaveDocumentAutoAnswer.HasValue )
					__0x2667 = window.ShowDialogAndSaveDocumentAutoAnswer.Value;
				else
				{
					var __0x2668 = EditorLocalization.Translate( "General", "Save changes to the following files?" ) + "\n";
					__0x2668 += "\n" + __0x2666.Document.Name;
					__0x2667 = EditorMessageBox.ShowQuestion( __0x2668, EMessageBoxButtons.YesNoCancel );
				}

				switch( __0x2667 )
				{
				case EDialogResult.Cancel:

					
					EditorAPI.SetRestartApplication( false );

					return true;
				case EDialogResult.Yes:
					
					__0x2666.SaveDocument();
					return false;
				case EDialogResult.No:
					return false;
				}
			}

			return false;
		}

		public static string ReplaceCaption { get; set; } = "";

		void __0x2829()
		{
			if( !string.IsNullOrEmpty( ReplaceCaption ) )
			{
				Text = ReplaceCaption;
				return;
			}

			string __0x2669 = "";
			var __0x2670 = ProjectSettings.Get;
			if( __0x2670 != null )
				__0x2669 = __0x2670.General.ProjectName.Value.Trim();

			var __0x2671 = "";
			if( EngineInfo.ExtendedEdition )
				__0x2671 += " " + EditorLocalization.Translate( "General", "Extended" );

			if( __0x2669 != "" )
				Text = __0x2669 + " - " + EngineInfo.NameWithVersion + __0x2671;
			else
				Text = EngineInfo.NameWithVersion + __0x2671;
		}

		private void __0x2830( object __0x2869, EventArgs __0x2870 )
		{
			Close();
		}

		private void __0x2831( object __0x2871, EventArgs __0x2872 )
		{
			if( !ribbonLastSelectedTabTypeByUser_DisableUpdate && __0x2650 )
			{
				var __0x2672 = kryptonRibbon.SelectedTab?.Tag as EditorRibbonDefaultConfiguration.Tab;
				ribbonLastSelectedTabTypeByUser = __0x2672 != null ? __0x2672.Type : "";
			}
		}

		private void __0x2832( object __0x2873, EventArgs __0x2874 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !__0x2650 )
				return;

			

			

			
			
			
			
			
			

			

			
			
			if( EngineApp.Instance != null )
				EngineApp.DoTick();

			if( EngineApp.GetSystemTime() - __0x2657 > 0.2 && !__0x2651 )
			{
				__0x2846();
				__0x2859();
				__0x2829();

				__0x2657 = EngineApp.GetSystemTime();
			}

			
			EditorSettingsSerialization.Dump();

			ScreenNotifications.Update();

			if( !needClose )
				EditorAPI.SelectedDocumentWindowChangedUpdate();

			if( !needClose )
			{
				foreach( var __0x2802 in EditorAPI.Documents )
					__0x2802.EditorUpdateWhenDocumentModified_Tick();
			}

			
			

			
			

			if( !needClose )
				__0x2834();

			
			if( !needClose )
				KryptonAutoHiddenSlidePanel.Animate = ProjectSettings.Get.General.AnimateWindowsAutoHiding;

			
			

			__0x2840();

			if( needClose )
			{
				needClose = false;
				Close();
			}

			
			if( __0x2651 && !needClose )
			{
				var __0x2673 = EditorSettingsSerialization.OpenFileAtStartup;
				EditorSettingsSerialization.OpenFileAtStartup = "";

				if( File.Exists( __0x2673 ) )
				{
					
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x2673 } );

					
					EditorAPI.OpenFileAsDocument( __0x2673, true, true );
				}
			}

			if( __0x2651 )
			{
				__0x2651 = false;

				
				

				
				kryptonRibbon.Visible = true;

				if( __0x2656 != null )
					Controls.Remove( __0x2656 );
				

				Invalidate( true );

				if( EditorSettingsSerialization.ShowTipsAsStartup )
					EditorAPI.ShowTips();
			}

			if( unlockFormUpdateInTimer.HasValue && ( DateTime.Now - unlockFormUpdateInTimer.Value ).TotalSeconds > 0 )
			{
				KryptonWinFormsUtility.LockFormUpdate( null );
				unlockFormUpdateInTimer = null;
			}

			if( !needClose )
				EngineToolTipManager.Update();

			__0x2649 = true;
		}

		[Browsable( false )]
		internal List<DocumentInstance> Documents
		{
			get { return __0x2648; }
		}

		
		
		

		
		
		
		

		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		private void __0x2833( object __0x2875, CancelEventArgs __0x2876 )
		{
			backstageMenu1.SelectDefaultPage();
			backstageMenu1.Refresh();
		}

		public void OpenBackstage()
		{
			kryptonRibbon.ClickAppButton();
		}

		public void RenderViewports( out bool existActiveViewports )
		{
			existActiveViewports = false;

			

			

			if( Visible && WindowState != FormWindowState.Minimized )
			{
				
				List<EngineViewportControl> __0x2674 = new List<EngineViewportControl>();
				List<EngineViewportControl> __0x2675 = new List<EngineViewportControl>();

				foreach( var __0x2803 in EngineViewportControl.AllInstances )
				{
					if( __0x2803.IsAllowRender() )
					{
						if( __0x2803.AutomaticUpdateFPS != 0 )
							__0x2674.Add( __0x2803 );
					}
					else
						__0x2675.Add( __0x2803 );
				}

				bool __0x2676 = false;

				
				foreach( var __0x2804 in __0x2675 )
				{
					var __0x2677 = __0x2804.Viewport?.RenderingContext;
					if( __0x2677 != null )
					{
						if( __0x2677.DynamicTexturesAreExists() )
						{
							__0x2677.MultiRenderTarget_DestroyAll();
							__0x2677.DynamicTexture_DestroyAll();

							__0x2676 = true;
						}
					}
				}

				if( __0x2676 )
				{
					RenderingSystem.CallBgfxFrame();
					RenderingSystem.CallBgfxFrame();
				}

				
				if( EngineApp.Instance != null && EngineApp.Created )
				{
					PreviewImagesManager.Update();
					if( PreviewImagesManager.ExistsWorkingProcessors() )
						existActiveViewports = true;
				}

				
				if( __0x2674.Count != 0 )
				{
					existActiveViewports = true;

					foreach( var __0x2805 in __0x2674 )
						__0x2805.TryRender();
				}
			}

			
			
			

			
			
			
			
			
			

			
			
			

			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			


		}

		
		
		
		
		
		
		

		
		
		

		

		
		

		
		
		
		

		
		
		
		
		
		
		

		
		

		[Browsable( false )]
		public WorkspaceControllerForForm WorkspaceController
		{
			get { return __0x2653; }
		}

		internal ObjectsInFocus GetObjectsInFocus( bool useOnlySelectedDocumentWindow = false )
		{
			ObjectsInFocus __0x2678 = null;

			
			var __0x2679 = __0x2653.GetSelectedDockWindow();

			bool __0x2680 = false;
			if( __0x2679 != null && __0x2679 is PreviewWindow )
				__0x2680 = true;

			if( !__0x2680 )
			{
				
				if( useOnlySelectedDocumentWindow && __0x2679 as DocumentWindow == null )
					__0x2679 = null;

				
				if( __0x2679 != null )
					__0x2678 = __0x2679.GetObjectsInFocus();

				
				if( __0x2678 == null && EditorAPI.SelectedDocumentWindow != null )
				{
					
					__0x2678 = new ObjectsInFocus( EditorAPI.SelectedDocumentWindow, EditorAPI.SelectedDocumentWindow.SelectedObjects );
					
				}

				
				if( __0x2678 != null )
					__0x2655 = __0x2678;
				else
				{
					if( __0x2655 != null )
						if( __0x2655.DocumentWindow != null && !__0x2655.DocumentWindow.IsHandleCreated )
							__0x2655 = null;
				}
			}

			if( __0x2655 != null )
				return __0x2655;
			else
				return new ObjectsInFocus( null, new object[ 0 ] );
		}

		void __0x2834()
		{
			
			{
				var __0x2681 = EditorAPI.SelectedDocumentWindow as DocumentWindowWithViewport;
				var __0x2682 = __0x2681?.ViewportControl?.Viewport;

				var __0x2683 = __0x2682?.AttachedScene;
				if( __0x2683 != null && __0x2683.EnabledInHierarchy )
				{
					var __0x2684 = __0x2682.CameraSettings;
					SoundWorld.SetListener( __0x2683, __0x2684.Position, Vector3.Zero, __0x2684.Rotation );
				}
				else
					SoundWorld.SetListenerReset();
			}

			
			EngineApp.DefaultSoundChannelGroup.Volume = ProjectSettings.Get.General.SoundVolume;
		}

		private void __0x2835()
		{
			var __0x2685 = EditorAPI.SelectedDocumentWindow;
			if( __0x2685 != null )
				__0x2685.SettingsWindowSelectObjects();
		}

		void __0x2836()
		{
#if !DEPLOY
			string __0x2686 = "";
			try
			{
				using( var __0x2687 = Registry.CurrentUser.OpenSubKey( "Software\\NeoAxis" ) )
				{
					if( __0x2687 != null )
					{
						var __0x2688 = __0x2687.GetValue( "RecentProjects" );
						if( __0x2688 != null )
							__0x2686 = __0x2688.ToString();
					}
				}
			}
			catch { }

			string __0x2689 = VirtualFileSystem.Directories.Project;

			var __0x2690 = __0x2686.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );
			var __0x2691 = new List<string>( __0x2690.Where( __0x2877 => __0x2877 != __0x2689 ) );
			__0x2691.Insert( 0, __0x2689 );

			string __0x2692 = "";
			foreach( var __0x2806 in __0x2691 )
			{
				if( __0x2692 != "" )
					__0x2692 += "|";
				__0x2692 += __0x2806;
			}

			try
			{
				using( var __0x2693 = Registry.CurrentUser.CreateSubKey( "Software\\NeoAxis" ) )
				{
					if( __0x2693 != null )
						__0x2693.SetValue( "RecentProjects", __0x2692 );
				}
			}
			catch { }
#endif
		}

		private void __0x2837( object __0x2878, EventArgs __0x2879 )
		{
			if( __0x2652 )
			{
				if( !needClose )
					EditorAPI.SelectedDocumentWindowChangedUpdate();
			}

			__0x2652 = false;
		}

		
		
		
		
		

		void __0x2838()
		{
			var __0x2694 = ProjectSettings.Get.General.Language.Value.ToString();
			if( !string.IsNullOrEmpty( __0x2694 ) && __0x2694 != "English" && __0x2694 != "New" )
				EditorLocalization.Init( __0x2694, true );

			var __0x2695 = kryptonRibbon.RibbonStrings;
			__0x2695.CustomizeQuickAccessToolbar = EditorLocalization.Translate( "General", __0x2695.CustomizeQuickAccessToolbar );
			__0x2695.ShowBelowRibbon = EditorLocalization.Translate( "General", __0x2695.ShowBelowRibbon );
			__0x2695.ShowAboveRibbon = EditorLocalization.Translate( "General", __0x2695.ShowAboveRibbon );
			__0x2695.Minimize = EditorLocalization.Translate( "General", __0x2695.Minimize );

			var __0x2696 = __0x2796.ContextMenus;
			__0x2696.TextClose = EditorLocalization.Translate( "Docking", __0x2696.TextClose );
			__0x2696.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x2696.TextCloseAllButThis );
			__0x2696.TextMovePrevious = EditorLocalization.Translate( "Docking", __0x2696.TextMovePrevious );
			__0x2696.TextMoveNext = EditorLocalization.Translate( "Docking", __0x2696.TextMoveNext );
			__0x2696.TextSplitHorizontal = EditorLocalization.Translate( "Docking", __0x2696.TextSplitHorizontal );
			__0x2696.TextSplitVertical = EditorLocalization.Translate( "Docking", __0x2696.TextSplitVertical );
			__0x2696.TextRebalance = EditorLocalization.Translate( "Docking", __0x2696.TextRebalance );
			__0x2696.TextMaximize = EditorLocalization.Translate( "Docking", __0x2696.TextMaximize );
			__0x2696.TextRestore = EditorLocalization.Translate( "Docking", __0x2696.TextRestore );

			var __0x2697 = __0x2653.DockingManager.Strings;
			__0x2697.TextTabbedDocument = EditorLocalization.Translate( "Docking", __0x2697.TextTabbedDocument );
			__0x2697.TextAutoHide = EditorLocalization.Translate( "Docking", __0x2697.TextAutoHide );
			__0x2697.TextClose = EditorLocalization.Translate( "Docking", __0x2697.TextClose );
			__0x2697.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x2697.TextCloseAllButThis );
			__0x2697.TextDock = EditorLocalization.Translate( "Docking", __0x2697.TextDock );
			__0x2697.TextFloat = EditorLocalization.Translate( "Docking", __0x2697.TextFloat );
			__0x2697.TextHide = EditorLocalization.Translate( "Docking", __0x2697.TextHide );
			__0x2697.TextWindowLocation = EditorLocalization.Translate( "Docking", __0x2697.TextWindowLocation );
		}

		bool __0x2839( DocumentInstance __0x2880 )
		{
			foreach( var __0x2807 in EditorAPI.GetAllDocumentWindowsOfDocument( __0x2880 ) )
			{
				bool __0x2698 = false;

				Control __0x2699 = __0x2807;
				while( __0x2699 != null )
				{
					if( __0x2699 is KryptonFloatingWindow )
					{
						__0x2698 = true;
						break;
					}

					__0x2699 = __0x2699.Parent;
				}

				if( !__0x2698 )
					return true;
			}

			return false;
		}

		void __0x2840()
		{
			try
			{
				foreach( var __0x2808 in Application.OpenForms )
				{
					if( __0x2808 is KryptonFloatingWindow floatingWindow )
					{
						bool __0x2700 = true;

						var __0x2701 = floatingWindow.FloatspaceControl;
						if( __0x2701 != null )
						{
							var __0x2702 = __0x2701.AllPages().Where( __0x2881 => __0x2881.LastVisibleSet ).ToArray();

							if( __0x2702.Length == 1 )
							{
								foreach( var __0x2809 in __0x2702 )
								{
									var __0x2703 = __0x2809.GetDockWindow();

									var __0x2704 = __0x2703 as DocumentWindow;
									if( __0x2704 != null )
									{
										var __0x2705 = __0x2704.Document;
										if( __0x2705 != null && !string.IsNullOrEmpty( __0x2705.RealFileName ) && __0x2839( __0x2705 ) )
										{
											if( EditorAPI.SelectedDocument != null && EditorAPI.SelectedDocument != __0x2705 )
												__0x2700 = false;
										}
									}
								}
							}
							else if( __0x2702.Length == 0 )
								__0x2700 = false;
						}

						if( BackstageMenu.BackstageVisible )
							__0x2700 = false;
						if( WindowState == FormWindowState.Minimized )
							__0x2700 = false;

						if( floatingWindow.Visible != __0x2700 )
							floatingWindow.Visible = __0x2700;
					}
				}
			}
			catch { }
		}

		private void __0x2841( object __0x2882, EventArgs __0x2883 )
		{
			KryptonWinFormsUtility.LockFormUpdate( this );
		}

		private void __0x2842( object __0x2884, EventArgs __0x2885 )
		{
			unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.1 );
			__0x2721 = true;
		}

		protected override void WndProc( ref Message m )
		{
			var __0x2706 = false;

			if( !IsDisposed && !Disposing )
			{
				switch( m.Msg )
				{
				case Internal.ComponentFactory.Krypton.Toolkit.PI.WM_ERASEBKGND:
				case Internal.ComponentFactory.Krypton.Toolkit.PI.WM_PAINT:
					if( skipPaintCounter > 0 )
					{
						using( var __0x2707 = new SolidBrush( Color.FromArgb( 40, 40, 40 ) ) )
						using( var __0x2708 = CreateGraphics() )
							__0x2708.FillRectangle( __0x2707, new System.Drawing.Rectangle( 0, 0, Width, Height ) );

						__0x2706 = true;

						if( m.Msg == Internal.ComponentFactory.Krypton.Toolkit.PI.WM_PAINT && skipPaintCounter > 0 )
							skipPaintCounter--;
					}
					break;
				}
			}

			if( !__0x2706 )
				base.WndProc( ref m );
		}





		
		

		ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass __0x2709;

		

		void __0x2843( EditorAction __0x2886 )
		{
			var __0x2710 = new KryptonRibbonQATButton();
			
			__0x2710.Enabled = false;

			__0x2710.Image = EditorAPI.GetImageForDispalyScale( __0x2886.GetImageSmall(), __0x2886.GetImageBig() );

			
			

			__0x2710.Tag = __0x2886;
			
			
			__0x2710.Text = __0x2886.Name;

			
			var __0x2711 = EditorLocalization.Translate( "EditorAction.Name", __0x2886.Name );
			if( __0x2886.Description != "" )
				__0x2711 += "\n" + EditorLocalization.Translate( "EditorAction.Description", __0x2886.Description );
			var __0x2712 = EditorActions.ConvertShortcutKeysToString( __0x2886.ShortcutKeys );
			if( __0x2712 != "" )
				__0x2711 += " (" + __0x2712 + ")";
			__0x2710.ToolTipBody = __0x2711;

			if( __0x2886.ActionType == EditorAction.ActionTypeEnum.DropDown )
			{
				__0x2710.IsDropDownButton = true;
				__0x2710.KryptonContextMenu = __0x2886.DropDownContextMenu;
			}

			kryptonRibbon.QATButtons.Add( __0x2710 );

			__0x2710.Click += __0x2844;
		}

		void __0x2844( object __0x2887, EventArgs __0x2888 )
		{
			var __0x2713 = (KryptonRibbonQATButton)__0x2887;

			var __0x2714 = __0x2713.Tag as EditorAction;
			if( __0x2714 != null )
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2714.Name );
		}

		void __0x2845()
		{
			__0x2654 = true;

			__0x2846();
		}

		void __0x2846()
		{
			if( __0x2654 )
			{
				bool __0x2715 = false;
				IgnoreRepaint = true;

				try
				{
					__0x2847( ref __0x2715 );
					__0x2848( ref __0x2715 );
				}
				finally
				{
					IgnoreRepaint = false;
					if( __0x2715 )
						PerformNeedPaint( true );
				}
			}
		}

		void __0x2847( ref bool __0x2889 )
		{
			var __0x2716 = ProjectSettings.Get.RibbonAndToolbar.RibbonAndToolbarActions;
			if( __0x2709 == null || !__0x2716.Equals( __0x2709 ) )
			{
				__0x2709 = __0x2716.Clone();

				kryptonRibbon.QATButtons.Clear();

				foreach( var __0x2810 in __0x2716.ToolbarActions )
				{
					var __0x2717 = EditorActions.GetByName( __0x2810.Name );

					if( __0x2717 != null && !__0x2717.CompletelyDisabled && __0x2717.QatSupport && __0x2810.Enabled && EditorUtility.PerformEditorActionVisibleFilter( __0x2717 ) )
						__0x2843( __0x2717 );
				}

				__0x2889 = true;
			}
		}

		void __0x2848( ref bool __0x2890 )
		{
			foreach( KryptonRibbonQATButton __0x2811 in kryptonRibbon.QATButtons )
			{
				if( __0x2811.Visible )
				{
					var __0x2718 = __0x2811.Tag as EditorAction;
					if( __0x2718 != null )
					{
						var __0x2719 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2718 );
						if( __0x2811.Enabled != __0x2719.Enabled )
						{
							__0x2811.Enabled = __0x2719.Enabled;
							__0x2890 = true;
						}
						if( __0x2811.Checked != __0x2719.Checked )
						{
							__0x2811.Checked = __0x2719.Checked;
							__0x2890 = true;
						}
					}
				}
			}
		}




		
		

		ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass __0x2720;
		bool __0x2721;

		ESet<string> __0x2722 = new ESet<string>( new string[] { "P" } );

		

		string __0x2723 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

		string __0x2849( string __0x2891 )
		{
			foreach( var __0x2812 in __0x2891 + __0x2723 )
			{
				var __0x2724 = __0x2812.ToString().ToUpper();
				if( __0x2724 != " " && !__0x2722.Contains( __0x2724 ) )
				{
					__0x2722.AddWithCheckAlreadyContained( __0x2724 );
					return __0x2724;
				}
			}
			return "";
		}

		void __0x2850( EditorRibbonDefaultConfiguration.Group __0x2892, KryptonContextMenuCollection __0x2893 )
		{
			var __0x2725 = new List<KryptonContextMenuItemBase>();

			foreach( var __0x2813 in __0x2892.Children )
			{
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				

				
				

				
				var __0x2726 = __0x2813 as EditorAction;
				if( __0x2726 == null )
				{
					var __0x2727 = __0x2813 as string;
					if( __0x2727 != null )
						__0x2726 = EditorActions.GetByName( __0x2727 );
				}
				if( __0x2726 != null )
				{
					if( !__0x2726.CompletelyDisabled )
					{
						EventHandler __0x2728 = delegate ( object __0x2894, EventArgs __0x2895 )
						{
							var __0x2729 = (KryptonContextMenuItem)__0x2894;

							var __0x2730 = __0x2729.Tag as EditorAction;
							if( __0x2730 != null )
								EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2730.Name );
						};

						var __0x2731 = new KryptonContextMenuItem( __0x2726.GetContextMenuText(), null, __0x2728 );
						
						__0x2731.Tag = __0x2726;
						__0x2725.Add( __0x2731 );
					}
				}
				
				else if( __0x2813 == null )
					__0x2725.Add( new KryptonContextMenuSeparator() );
			}

			if( __0x2725.Count != 0 )
				__0x2893.Add( new KryptonContextMenuItems( __0x2725.ToArray() ) );
		}

		void __0x2851()
		{
			kryptonRibbon.RibbonStrings.AppButtonKeyTip = "P";

			__0x2859();
		}

		private void __0x2852( object __0x2896, EventArgs __0x2897 )
		{
			var __0x2732 = (KryptonRibbonGroupButton)__0x2896;

			var __0x2733 = __0x2732.Tag as EditorAction;
			if( __0x2733 != null )
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2733.Name );
		}

		private void __0x2853( object __0x2898, EventArgs __0x2899 )
		{
			var __0x2734 = (KryptonRibbonGroupSliderControl)__0x2898;

			var __0x2735 = __0x2734.Tag as EditorAction;
			if( __0x2735 != null )
			{
				__0x2735.Slider.Value = __0x2734.GetValue();
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2735.Name );
			}
		}

		
		
		

		
		
		
		
		
		
		

		private void __0x2854( ContentBrowser __0x2900, IList<ContentBrowser.Item> __0x2901, bool __0x2902, ref bool __0x2903 )
		{
			var __0x2736 = __0x2900.Tag as EditorAction;
			if( __0x2736 != null )
			{
				ContentBrowser.Item[] __0x2737;
				if( __0x2736.ListBox.Mode == EditorAction.ListBoxSettings.ModeEnum.Tiles )
					__0x2737 = __0x2900.SelectedItemsOnlyListView;
				else
					__0x2737 = __0x2900.SelectedItems;

				if( __0x2737.Length != 0 )
					__0x2736.ListBox.SelectedIndex = (int)__0x2737[ 0 ].Tag;
				else
					__0x2736.ListBox.SelectedIndex = -1;

				__0x2736.ListBox.LastSelectedIndexChangedByUser = __0x2902;

				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2736.Name );
			}
		}

		private void __0x2855( ContentBrowser __0x2904, ContentBrowser.Item __0x2905, List<KryptonContextMenuItemBase> __0x2906 )
		{
			var __0x2738 = __0x2904.Tag as EditorAction;
			if( __0x2738 != null )
			{
				ContentBrowser.Item[] __0x2739;
				if( __0x2738.ListBox.Mode == EditorAction.ListBoxSettings.ModeEnum.Tiles )
					__0x2739 = __0x2904.SelectedItemsOnlyListView;
				else
					__0x2739 = __0x2904.SelectedItems;

				if( __0x2739.Length != 0 )
					__0x2738.ListBox.SelectedIndex = (int)__0x2739[ 0 ].Tag;
				else
					__0x2738.ListBox.SelectedIndex = -1;

				__0x2738.ListBox.LastSelectedIndexChangedByUser = true;

				EditorAPI.EditorActionClick2( EditorAction.HolderEnum.RibbonQAT, __0x2738.Name );
			}
		}

		void __0x2856()
		{
			var __0x2740 = ProjectSettings.Get.RibbonAndToolbar.RibbonAndToolbarActions;
			if( __0x2720 == null || !__0x2740.Equals( __0x2720 ) || __0x2721 )
			{
				__0x2720 = __0x2740.Clone();
				__0x2721 = false;

				ribbonLastSelectedTabTypeByUser_DisableUpdate = true;

				kryptonRibbon.RibbonTabs.Clear();

				foreach( var __0x2814 in ProjectSettings.Get.RibbonAndToolbar.RibbonAndToolbarActions.RibbonTabs )
				{
					if( !__0x2814.Enabled )
						continue;

					
					EditorRibbonDefaultConfiguration.Tab __0x2741 = null;
					if( __0x2814.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Basic )
						__0x2741 = EditorRibbonDefaultConfiguration.GetTab( __0x2814.Name );

					var __0x2742 = new KryptonRibbonTab();
					__0x2742.Tag = __0x2741;

					if( __0x2814.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Basic )
						__0x2742.Text = EditorLocalization.Translate( "Ribbon.Tab", __0x2814.Name );
					else
						__0x2742.Text = __0x2814.Name;

					__0x2742.KeyTip = __0x2849( __0x2814.Name );

					kryptonRibbon.RibbonTabs.Add( __0x2742 );

					var __0x2743 = new ESet<string>();

					string GetKeyTip( string __0x2907 )
					{
						foreach( var __0x2815 in __0x2907 + __0x2723 )
						{
							var __0x2744 = __0x2815.ToString().ToUpper();
							if( __0x2744 != " " && !__0x2743.Contains( __0x2744 ) )
							{
								__0x2743.AddWithCheckAlreadyContained( __0x2744 );
								return __0x2744;
							}
						}
						return "";
					}

					foreach( var __0x2816 in __0x2814.Groups )
					{
						if( !__0x2816.Enabled )
							continue;

						var __0x2745 = new KryptonRibbonGroup();

						if( __0x2816.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem.TypeEnum.Basic )
							__0x2745.TextLine1 = EditorLocalization.Translate( "Ribbon.Group", __0x2816.Name );
						else
							__0x2745.TextLine1 = __0x2816.Name;

						__0x2745.DialogBoxLauncher = false;
															  

						foreach( var __0x2817 in __0x2816.Actions )
						{
							if( !__0x2817.Enabled )
								continue;

							
							if( __0x2817.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.SubGroupOfActions )
							{
								EditorRibbonDefaultConfiguration.Group __0x2746 = null;
								if( __0x2741 != null )
								{
									var __0x2747 = __0x2741.Groups.Find( __0x2908 => __0x2908.Name == __0x2816.Name );
									if( __0x2747 != null )
									{
										foreach( var __0x2818 in __0x2747.Children )
										{
											var __0x2748 = __0x2818 as EditorRibbonDefaultConfiguration.Group;
											if( __0x2748 != null && __0x2748.Name == __0x2817.Name )
											{
												__0x2746 = __0x2748;
												break;
											}
										}
									}
								}

								if( __0x2746 != null && !__0x2746.AreAllChildrenCompletelyDisabled() )
								{
									var __0x2749 = new KryptonRibbonGroupTriple();
									__0x2745.Items.Add( __0x2749 );

									var __0x2750 = new KryptonRibbonGroupButton();
									__0x2750.Tag = "SubGroup";
									

									var __0x2751 = __0x2746.DropDownGroupText.Item1;
									if( __0x2746.DropDownGroupText.Item2 != "" )
										__0x2751 += "\n" + __0x2746.DropDownGroupText.Item2;

									var __0x2752 = EditorLocalization.Translate( "Ribbon.Action", __0x2751 );
									var __0x2753 = __0x2752.Split( new char[] { '\n' } );

									__0x2750.TextLine1 = __0x2753[ 0 ];
									if( __0x2753.Length > 1 )
										__0x2750.TextLine2 = __0x2753[ 1 ];

									
									

									if( __0x2746.DropDownGroupImageSmall != null )
										__0x2750.ImageSmall = __0x2746.DropDownGroupImageSmall;
									else if( __0x2746.DropDownGroupImageLarge != null )
										__0x2750.ImageSmall = EditorAction.ResizeImage( __0x2746.DropDownGroupImageLarge, 16, 16 );
									__0x2750.ImageLarge = __0x2746.DropDownGroupImageLarge;

									

									if( !string.IsNullOrEmpty( __0x2746.DropDownGroupDescription ) )
										__0x2750.ToolTipBody = EditorLocalization.Translate( "EditorAction.Description", __0x2746.DropDownGroupDescription );
									else
										__0x2750.ToolTipBody = __0x2746.Name;

									__0x2750.ButtonType = GroupButtonType.DropDown;
									__0x2750.ShowArrow = __0x2746.ShowArrow;

									__0x2750.KryptonContextMenu = new KryptonContextMenu();
									__0x2850( __0x2746, __0x2750.KryptonContextMenu.Items );

									__0x2749.Items.Add( __0x2750 );
								}
							}

							
							if( __0x2817.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.Action )
							{
								var __0x2754 = EditorActions.GetByName( __0x2817.Name );

								if( __0x2754 != null && !__0x2754.CompletelyDisabled )
								{
									if( __0x2754.ActionType == EditorAction.ActionTypeEnum.Button || __0x2754.ActionType == EditorAction.ActionTypeEnum.DropDown )
									{
										

										var __0x2755 = new KryptonRibbonGroupTriple();
										__0x2745.Items.Add( __0x2755 );

										var __0x2756 = new KryptonRibbonGroupButton();

										
										

										__0x2756.Tag = __0x2754;

										var __0x2757 = __0x2754.RibbonText.Item1;
										if( __0x2754.RibbonText.Item2 != "" )
											__0x2757 += "\n" + __0x2754.RibbonText.Item2;

										var __0x2758 = EditorLocalization.Translate( "Ribbon.Action", __0x2757 );
										var __0x2759 = __0x2758.Split( new char[] { '\n' } );

										__0x2756.TextLine1 = __0x2759[ 0 ];
										if( __0x2759.Length > 1 )
											__0x2756.TextLine2 = __0x2759[ 1 ];

										
										

										__0x2756.ImageSmall = __0x2754.GetImageSmall();
										__0x2756.ImageLarge = __0x2754.GetImageBig();
										__0x2756.ToolTipBody = __0x2754.ToolTip;
										__0x2756.KeyTip = GetKeyTip( __0x2754.Name );

										
										
										
										
										

										if( __0x2754.ActionType == EditorAction.ActionTypeEnum.DropDown )
										{
											__0x2756.ButtonType = GroupButtonType.DropDown;
											__0x2756.KryptonContextMenu = __0x2754.DropDownContextMenu;
										}

										__0x2756.Click += __0x2852;

										__0x2755.Items.Add( __0x2756 );
									}
									else if( __0x2754.ActionType == EditorAction.ActionTypeEnum.Slider )
									{
										

										var __0x2760 = new KryptonRibbonGroupTriple();
										__0x2745.Items.Add( __0x2760 );

										var __0x2761 = new KryptonRibbonGroupSlider();
										__0x2761.Tag = __0x2754;
										__0x2761.ToolTipBody = __0x2754.ToolTip;

										__0x2761.Control.Size = new System.Drawing.Size( (int)( (float)__0x2761.Control.Size.Width * EditorAPI.DPIScale ), __0x2761.Control.Size.Height );
										__0x2761.Control.kryptonSplitContainer2.Size = new System.Drawing.Size( (int)( (float)__0x2761.Control.kryptonSplitContainer2.Size.Width * EditorAPI.DPIScale ), __0x2761.Control.Size.Height );
										__0x2761.Control.kryptonSplitContainer2.Panel1MinSize = (int)( (float)__0x2761.Control.kryptonSplitContainer2.Panel1MinSize * EditorAPI.DPIScale );
										__0x2761.Control.kryptonSplitContainer1.Panel2MinSize = (int)( (float)__0x2761.Control.kryptonSplitContainer1.Panel2MinSize * EditorAPI.DPIScale );
										__0x2761.Control.kryptonSplitContainer1.SplitterDistance = 10000;

										__0x2761.Control.kryptonLabel1.Text = EditorLocalization.Translate( "Ribbon.Action", __0x2754.RibbonText.Item1 );
										__0x2761.Control.Init( __0x2754.Slider.Minimum, __0x2754.Slider.Maximum, __0x2754.Slider.ExponentialPower );
										__0x2761.Control.SetValue( __0x2754.Slider.Value );

										__0x2761.Control.Tag = __0x2754;
										__0x2761.Control.ValueChanged += __0x2853;

										__0x2760.Items.Add( __0x2761 );
									}
									
									
									

									
									

									
									

									
									
									

									
									

									
									

									

									
									
									else if( __0x2754.ActionType == EditorAction.ActionTypeEnum.ListBox )
									{
										

										var __0x2762 = new KryptonRibbonGroupTriple();
										__0x2745.Items.Add( __0x2762 );

										var __0x2763 = new KryptonRibbonGroupListBox();
										__0x2763.Tag = __0x2754;
										__0x2763.ToolTipBody = __0x2754.ToolTip;

										__0x2763.Control.Size = new System.Drawing.Size( (int)( (float)__0x2754.ListBox.Length * EditorAPI.DPIScale ), __0x2763.Control.Size.Height );
										__0x2763.Control.kryptonSplitContainer1.Size = new System.Drawing.Size( (int)( (float)__0x2754.ListBox.Length * EditorAPI.DPIScale ), __0x2763.Control.Size.Height );
										__0x2763.Control.kryptonSplitContainer1.Panel2MinSize = (int)( (float)__0x2763.Control.kryptonSplitContainer1.Panel2MinSize * EditorAPI.DPIScale );
										__0x2763.Control.kryptonSplitContainer1.SplitterDistance = 10000;
										
										

										__0x2763.Control.kryptonLabel1.Text = EditorLocalization.Translate( "Ribbon.Action", __0x2754.RibbonText.Item1 );

										var __0x2764 = __0x2763.Control.contentBrowser1;

										if( __0x2754.ListBox.Mode == EditorAction.ListBoxSettings.ModeEnum.Tiles )
										{
											__0x2764.ListViewModeOverride = new ContentBrowserListModeTilesRibbon( __0x2764 );
											__0x2764.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
											__0x2764.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
											__0x2764.UseSelectedTreeNodeAsRootForList = false;
											__0x2764.Options.Breadcrumb = false;
											__0x2764.ListViewBorderDraw = BorderSides.Left | BorderSides.Right | BorderSides.Bottom;
											__0x2764.Options.TileImageSize = 22;
										}
										else
										{
											__0x2764.RemoveTreeViewIconsColumn();
											__0x2764.TreeView.RowHeight -= 2;
										}

										__0x2764.Tag = __0x2754;

										
										__0x2763.SetItems( __0x2754.ListBox.Items );

										__0x2764.ItemAfterSelect += __0x2854;
										__0x2764.ShowContextMenuEvent += __0x2855;

										if( __0x2764.Items.Count != 0 )
											__0x2764.SelectItems( new ContentBrowser.Item[] { __0x2764.Items.ToArray()[ 0 ] } );

										

										__0x2762.Items.Add( __0x2763 );
									}

								}
							}
						}

						if( __0x2745.Items.Count != 0 )
							__0x2742.Groups.Add( __0x2745 );
					}

					
					var __0x2765 = "";
					if( __0x2741 != null )
						__0x2765 = __0x2741.Type;
					if( ribbonLastSelectedTabTypeByUser != "" && __0x2765 == ribbonLastSelectedTabTypeByUser )
						kryptonRibbon.SelectedTab = __0x2742;
				}

				ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
			}
		}

		void __0x2857( KryptonContextMenuCollection __0x2909, out bool __0x2910 )
		{
			__0x2910 = false;

			foreach( var __0x2819 in __0x2909 )
			{
				var __0x2766 = __0x2819 as KryptonContextMenuItems;
				if( __0x2766 != null )
				{
					foreach( var __0x2820 in __0x2766.Items )
					{
						var __0x2767 = __0x2820 as KryptonContextMenuItem;
						if( __0x2767 != null )
						{
							var __0x2768 = __0x2767.Tag as EditorAction;
							if( __0x2768 != null )
							{
								var __0x2769 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2768 );

								__0x2767.Enabled = __0x2769.Enabled;
								if( __0x2767.Checked != __0x2769.Checked )
									__0x2767.Checked = __0x2769.Checked;

								if( __0x2767.Enabled )
									__0x2910 = true;

								if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2768 ) )
									__0x2767.Visible = false;
							}
						}
					}
				}
			}
		}

		void __0x2858()
		{
			
			{
				Metadata.TypeInfo __0x2770 = null;
				{
					var __0x2771 = __0x2653.SelectedDocumentWindow?.ObjectOfWindow;
					if( __0x2771 != null )
						__0x2770 = MetadataManager.MetadataGetType( __0x2771 );
				}
				foreach( var __0x2821 in kryptonRibbon.RibbonTabs )
				{
					var __0x2772 = __0x2821.Tag as EditorRibbonDefaultConfiguration.Tab;
					if( __0x2772 != null )
					{
						bool __0x2773 = true;
						if( __0x2772.VisibleOnlyForType != null && __0x2773 )
							__0x2773 = __0x2770 != null && __0x2772.VisibleOnlyForType.IsAssignableFrom( __0x2770 );
						if( __0x2772.VisibleCondition != null && __0x2773 )
							__0x2773 = __0x2772.VisibleCondition();
						if( __0x2773 && !EditorUtility.PerformRibbonTabVisibleFilter( __0x2772 ) )
							__0x2773 = false;

						if( __0x2821.Visible != __0x2773 )
						{
							ribbonLastSelectedTabTypeByUser_DisableUpdate = true;
							__0x2821.Visible = __0x2773;
							ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
						}

						if( __0x2821.Visible && ribbonLastSelectedTabTypeByUser != "" && ribbonLastSelectedTabTypeByUser == __0x2772.Type )
						{
							ribbonLastSelectedTabTypeByUser_DisableUpdate = true;
							kryptonRibbon.SelectedTab = __0x2821;
							ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
						}
					}
				}
			}

			
			foreach( var __0x2822 in kryptonRibbon.RibbonTabs )
			{
				foreach( var __0x2823 in __0x2822.Groups )
				{
					foreach( var __0x2824 in __0x2823.Items )
					{
						var __0x2774 = __0x2824 as KryptonRibbonGroupTriple;
						if( __0x2774 != null )
						{
							foreach( var __0x2825 in __0x2774.Items )
							{
								
								var __0x2775 = __0x2825 as KryptonRibbonGroupButton;
								if( __0x2775 != null )
								{
									
									if( __0x2775.Tag as string == "SubGroup" && __0x2775.KryptonContextMenu != null )
									{
										__0x2857( __0x2775.KryptonContextMenu.Items, out var existsEnabled );

										
										__0x2775.Enabled = existsEnabled;
									}

									
									var __0x2776 = __0x2775.Tag as EditorAction;
									if( __0x2776 != null )
									{
										var __0x2777 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2776 );

										__0x2775.Enabled = __0x2777.Enabled;

										
										
										if( __0x2777.Checked && __0x2776.ActionType == EditorAction.ActionTypeEnum.Button )
											__0x2775.ButtonType = GroupButtonType.Check;

										__0x2775.Checked = __0x2777.Checked;

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2776 ) )
											__0x2775.Visible = false;
									}
								}

								
								var __0x2778 = __0x2825 as KryptonRibbonGroupSlider;
								if( __0x2778 != null )
								{
									var __0x2779 = __0x2778.Tag as EditorAction;
									if( __0x2779 != null )
									{
										var __0x2780 = __0x2779.Slider.Value;

										var __0x2781 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2779 );

										__0x2778.Enabled = __0x2781.Enabled;
										if( __0x2780 != __0x2779.Slider.Value )
										{
											__0x2778.Control.SetValue( __0x2779.Slider.Value );
											
										}

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2779 ) )
											__0x2778.Visible = false;
									}
								}

								
								
								
								
								
								
								
								
								

								

								

								
								
								

								
								
								

								
								
								
								
								
								
								
								
								

								
								var __0x2782 = __0x2825 as KryptonRibbonGroupListBox;
								if( __0x2782 != null )
								{
									var __0x2783 = __0x2782.Tag as EditorAction;
									if( __0x2783 != null )
									{
										var __0x2784 = __0x2783.ListBox.Items;
										var __0x2785 = __0x2783.ListBox.SelectedIndex;

										var __0x2786 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2783 );

										
										__0x2782.Enabled = __0x2786.Enabled;

										var __0x2787 = __0x2782.Control.contentBrowser1;

										
										if( !__0x2783.ListBox.Items.SequenceEqual( __0x2784 ) )
											__0x2782.SetItems( __0x2783.ListBox.Items );

										
										if( __0x2783.ListBox.SelectIndex != null )
										{
											int __0x2788 = __0x2783.ListBox.SelectIndex.Value;

											var __0x2789 = __0x2787.Items.FirstOrDefault( __0x2911 => (int)__0x2911.Tag == __0x2788 );
											if( __0x2789 != null )
											{
												var __0x2790 = new ContentBrowser.Item[] { __0x2789 };
												if( !__0x2790.SequenceEqual( __0x2787.SelectedItems ) )
													__0x2787.SelectItems( __0x2790 );
											}
											else
											{
												if( __0x2787.SelectedItems.Length != 0 )
													__0x2787.SelectItems( null );
											}

											__0x2783.ListBox.SelectIndex = null;
										}

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2783 ) )
											__0x2782.Visible = false;

										
										
										
										
										
										
										

										
										
										
										
										
										
										
										
										

										
										
										
										
										

										
										

									}
								}

							}
						}

					}
				}
			}
		}

		void __0x2859()
		{
			__0x2856();
			__0x2858();
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		
		


		
		
		
		
		
		
		
		
		
		

		
		
		



		




		

		
		
		

		
		
		
		
		
		

		
		
		

		
		

		

		
		
		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		

		



	}
}
namespace NeoAxis.Editor
{
    partial class EditorForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x2791 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x2791 != null))
            {
                __0x2791.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x2860()
        {
			this.__0x2791 = new System.ComponentModel.Container();
			this.__0x2793 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonManager(this.__0x2791);
			this.__0x2794 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonPanel();
			this.__0x2796 = new NeoAxis.Editor.LowProfileDockableWorkspace();
			this.__0x2795 = new System.Windows.Forms.Timer(this.__0x2791);
			this.backstageMenu1 = new NeoAxis.Editor.BackstageMenu();
			this.kryptonRibbon = new Internal.ComponentFactory.Krypton.Ribbon.KryptonRibbon();
			this.__0x2792 = new Internal.ComponentFactory.Krypton.Toolkit.ButtonSpecAny();
			((System.ComponentModel.ISupportInitialize)(this.__0x2794)).BeginInit();
			this.__0x2794.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x2796)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonRibbon)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x2794.Controls.Add(this.__0x2796);
			this.__0x2794.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2794.Location = new System.Drawing.Point(0, 136);
			this.__0x2794.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x2794.Name = "kryptonPanel";
			this.__0x2794.Padding = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x2794.Size = new System.Drawing.Size(1059, 783);
			this.__0x2794.TabIndex = 2;
			
			
			
			this.__0x2796.AutoHiddenHost = false;
			this.__0x2796.CompactFlags = ((Internal.ComponentFactory.Krypton.Workspace.CompactFlags)(((Internal.ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptyCells | Internal.ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptySequences) 
            | Internal.ComponentFactory.Krypton.Workspace.CompactFlags.PromoteLeafs)));
			this.__0x2796.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2796.Location = new System.Drawing.Point(5, 4);
			this.__0x2796.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x2796.Name = "kryptonDockableWorkspace";
			
			
			
			this.__0x2796.Root.UniqueName = "EditorFormKryptonDockableWorkspace";
			this.__0x2796.Root.WorkspaceControl = this.__0x2796;
			this.__0x2796.ShowMaximizeButton = false;
			this.__0x2796.Size = new System.Drawing.Size(1049, 775);
			this.__0x2796.TabIndex = 0;
			this.__0x2796.TabStop = true;
			
			
			
			this.__0x2795.Enabled = true;
			this.__0x2795.Interval = 10;
			this.__0x2795.Tick += new System.EventHandler(this.__0x2832);
			
			
			
			this.backstageMenu1.Location = new System.Drawing.Point(141, 114);
			this.backstageMenu1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.backstageMenu1.Name = "backstageMenu1";
			this.backstageMenu1.Ribbon = this.kryptonRibbon;
			this.backstageMenu1.Size = new System.Drawing.Size(1061, 959);
			this.backstageMenu1.TabIndex = 1;
			this.backstageMenu1.Visible = false;
			
			
			
			this.kryptonRibbon.AllowFormIntegrate = false;
			this.kryptonRibbon.ApplicationButtonDropDownMenu = this.backstageMenu1;
			this.kryptonRibbon.ButtonSpecs.AddRange(new Internal.ComponentFactory.Krypton.Toolkit.ButtonSpecAny[] {
            this.__0x2792});
			this.kryptonRibbon.HideRibbonSize = new System.Drawing.Size(375, 312);
			this.kryptonRibbon.InDesignHelperMode = true;
			this.kryptonRibbon.Name = "kryptonRibbon";
			this.kryptonRibbon.QATUserChange = false;
			
			this.kryptonRibbon.RibbonAppButton.AppButtonMinRecentSize = new System.Drawing.Size(300, 250);
			this.kryptonRibbon.RibbonAppButton.AppButtonText = "Project";
			this.kryptonRibbon.RibbonStrings.RecentDocuments = "Create New Outlook Item";
			this.kryptonRibbon.SelectedTab = null;
			this.kryptonRibbon.Size = new System.Drawing.Size(1059, 136);
			this.kryptonRibbon.TabIndex = 0;
			this.kryptonRibbon.SelectedTabChanged += new System.EventHandler(this.__0x2831);
			this.kryptonRibbon.AppButtonMenuOpening += new System.ComponentModel.CancelEventHandler(this.__0x2833);
			
			
			
			this.__0x2792.Image = global::NeoAxis.Properties.Resources.Help_16;
			this.__0x2792.UniqueName = "E0D28D217A1E48CEE0D28D217A1E48CE";
			this.__0x2792.Visible = false;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.ClientSize = new System.Drawing.Size(1059, 919);
			this.Controls.Add(this.backstageMenu1);
			this.Controls.Add(this.__0x2794);
			this.Controls.Add(this.kryptonRibbon);
			
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "EditorForm";
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.StateCommon.Header.Content.LongText.TextH = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.StateCommon.Header.Content.Padding = new System.Windows.Forms.Padding(8, -1, -1, -1);
			this.StateCommon.Header.Content.ShortText.TextH = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.Text = "NeoAxis Engine";
			this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
			this.Activated += new System.EventHandler(this.__0x2837);
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x2827);
			this.Load += new System.EventHandler(this.__0x2826);
			((System.ComponentModel.ISupportInitialize)(this.__0x2794)).EndInit();
			this.__0x2794.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x2796)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonRibbon)).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

        #endregion
        private Internal.ComponentFactory.Krypton.Toolkit.ButtonSpecAny __0x2792;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonManager __0x2793;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonPanel __0x2794;
        private System.Windows.Forms.Timer __0x2795;
		public Internal.ComponentFactory.Krypton.Ribbon.KryptonRibbon kryptonRibbon;
		private LowProfileDockableWorkspace __0x2796;
		public BackstageMenu backstageMenu1;
	}
}






namespace NeoAxis.Editor
{
	public static class EditorImportResource
	{
		public static void Import( string[] fileNames, string destRealFolder )
		{
			try
			{
				if( !Directory.Exists( destRealFolder ) )
					Directory.CreateDirectory( destRealFolder );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			
			
			
			
			
			
			
			
			
			
			
			

			

			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			List<string> __0x2912 = new List<string>();

			foreach( var __0x2915 in fileNames )
			{
				var __0x2913 = VirtualPathUtility.GetVirtualPathByReal( __0x2915 );
				if( !string.IsNullOrEmpty( __0x2913 ) )
				{
					
					__0x2912.Add( __0x2915 );
				}
				else
				{
					

					string __0x2914;
					try
					{
						__0x2914 = Path.Combine( destRealFolder, Path.GetFileName( __0x2915 ) );

						if( Directory.Exists( __0x2915 ) )
							IOUtility.CopyDirectory( __0x2915, __0x2914 );
						else
							File.Copy( __0x2915, __0x2914 );
					}
					catch( Exception e )
					{
						EditorMessageBox.ShowWarning( e.Message );
						
						return;
					}

					__0x2912.Add( __0x2914 );
				}
			}

			
			EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( __0x2912.ToArray() );
			EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorLocalization
	{
		static bool __0x2916;
		static string __0x2917;
		static bool __0x2918;
		static Dictionary<string, string> __0x2919 = new Dictionary<string, string>();
		static ESet<string> __0x2920 = new ESet<string>();
		static bool __0x2921;

		

		internal static void Init( string language, bool writeNotFound )
		{
			if( !string.IsNullOrEmpty( language ) && language != "English" )
			{
				EditorLocalization.__0x2917 = language;
				EditorLocalization.__0x2918 = writeNotFound;

				
				if( ParseFile( language, out var d, out _, out __0x2921 ) )
				{
					foreach( var __0x2951 in d )
						__0x2919[ __0x2951.Key ] = __0x2951.Value;
				}

				__0x2916 = true;
			}
		}

		internal static void Shutdown()
		{
			if( __0x2916 && __0x2918 )
			{
				var __0x2922 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Localization", __0x2917 );
				var __0x2923 = __0x2922 + "_NotFound.txt";

				EDictionary<string, string> __0x2924 = null;
				Encoding __0x2925 = null;
				if( File.Exists( __0x2923 ) )
					ParseFile( __0x2917 + "_NotFound", out __0x2924, out __0x2925, out _ );

				if( __0x2924 == null )
					__0x2924 = new EDictionary<string, string>();

				foreach( var __0x2952 in __0x2920 )
				{
					if( !__0x2924.ContainsKey( __0x2952 ) )
						__0x2924[ __0x2952 ] = "";
				}

				try
				{
					if( File.Exists( __0x2923 ) )
						File.Delete( __0x2923 );

					var __0x2926 = new List<string>();
					foreach( var __0x2953 in __0x2924 )
						__0x2926.Add( __0x2953.Key + "|" + __0x2953.Value );

					__0x2926.Sort();

					if( __0x2925 != null )
						File.WriteAllLines( __0x2923, __0x2926, __0x2925 );
					else
						File.WriteAllLines( __0x2923, __0x2926 );
				}
				catch( Exception e )
				{
					Log.Warning( "EditorLocalization: Shutdown: " + e.Message );
				}
			}
		}

		public static bool Initialized
		{
			get { return __0x2916; }
		}

		public static string Language
		{
			get { return __0x2917; }
		}

		public static bool WriteNotFound
		{
			get { return __0x2918; }
		}

		public static string Translate( string group, string text )
		{
			if( Initialized && text != null )
			{
				var __0x2927 = text.Trim();
				if( __0x2927 != "" )
				{
					var __0x2928 = group + "|" + __0x2927.Replace( "\n", "\\n" );

					if( __0x2919.TryGetValue( __0x2928, out var value ) )
						return value.Replace( "\\n", "\n" );

					if( __0x2918 )
						__0x2920.AddWithCheckAlreadyContained( __0x2928 );
				}
			}

			return text;
		}

		public static bool ParseFile( string fileName, out EDictionary<string, string> resultData, out Encoding encoding, out bool wide )
		{
			resultData = null;
			encoding = null;
			wide = false;

			var __0x2929 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Localization", fileName );
			var __0x2930 = __0x2929 + ".info";
			var __0x2931 = __0x2929 + ".txt";

			if( File.Exists( __0x2931 ) )
			{
				try
				{
					string __0x2932 = null;
					int? __0x2933 = null;

					if( File.Exists( __0x2930 ) )
					{
						var __0x2934 = TextBlockUtility.LoadFromRealFile( __0x2930 );
						if( __0x2934 != null )
						{
							
							{
								var __0x2935 = __0x2934.GetAttribute( "Encoding" );
								if( int.TryParse( __0x2935, out var codepage ) )
									__0x2933 = codepage;
								else
									__0x2932 = __0x2935;
							}

							
							{
								var __0x2936 = __0x2934.GetAttribute( "WideLanguage" );
								if( !string.IsNullOrEmpty( __0x2936 ) )
									wide = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x2936 );
							}
						}
					}

#if !DEPLOY
					if( __0x2933.HasValue )
						encoding = CodePagesEncodingProvider.Instance.GetEncoding( __0x2933.Value );
					else if( !string.IsNullOrEmpty( __0x2932 ) )
						encoding = CodePagesEncodingProvider.Instance.GetEncoding( __0x2932 );
#endif
					
					
					
					

					string[] __0x2937 = null;
					if( encoding != null )
						__0x2937 = File.ReadAllLines( __0x2931, encoding );
					else
						__0x2937 = File.ReadAllLines( __0x2931 );

					resultData = new EDictionary<string, string>();

					foreach( var __0x2954 in __0x2937 )
					{
						if( !string.IsNullOrEmpty( __0x2954 ) )
						{
							var __0x2938 = __0x2954.Split( new char[] { '|' } );
							if( __0x2938.Length != 3 )
								throw new Exception( string.Format( "Invalid format for line \'{0}\'.", __0x2954 ) );
							resultData[ __0x2938[ 0 ] + "|" + __0x2938[ 1 ] ] = __0x2938[ 2 ];
						}
					}

					return true;
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}
			}

			return false;
		}

		public static void TranslateForm( string group, Control control )
		{
			if( Initialized )
			{
				foreach( var __0x2955 in control.Controls )
				{
					
					{
						var __0x2939 = __0x2955 as KryptonLabel;
						if( __0x2939 != null && !string.IsNullOrEmpty( __0x2939.Text ) )
						{
							var __0x2940 = __0x2939.Text;

							if( __0x2940[ __0x2940.Length - 1 ] == ':' )
							{
								var __0x2941 = __0x2940.Substring( 0, __0x2940.Length - 1 );
								__0x2939.Text = Translate( group, __0x2941 ) + ":";
							}
							else
								__0x2939.Text = Translate( group, __0x2940 );
						}
					}

					
					{
						var __0x2942 = __0x2955 as Label;
						if( __0x2942 != null && !string.IsNullOrEmpty( __0x2942.Text ) )
						{
							var __0x2943 = __0x2942.Text;

							if( __0x2943.Length > 0 && __0x2943[ __0x2943.Length - 1 ] == ':' )
							{
								var __0x2944 = __0x2943.Substring( 0, __0x2943.Length - 1 );
								__0x2942.Text = Translate( group, __0x2944 ) + ":";
							}
							else
								__0x2942.Text = Translate( group, __0x2943 );
						}
					}

					
					{
						var __0x2945 = __0x2955 as EngineLabel;
						if( __0x2945 != null && !string.IsNullOrEmpty( __0x2945.Text ) )
						{
							var __0x2946 = __0x2945.Text;

							if( __0x2946.Length > 0 && __0x2946[ __0x2946.Length - 1 ] == ':' )
							{
								var __0x2947 = __0x2946.Substring( 0, __0x2946.Length - 1 );
								__0x2945.Text = Translate( group, __0x2947 ) + ":";
							}
							else
								__0x2945.Text = Translate( group, __0x2946 );
						}
					}

					
					{
						var __0x2948 = __0x2955 as KryptonButton;
						if( __0x2948 != null && !string.IsNullOrEmpty( __0x2948.Text ) )
							__0x2948.Text = Translate( group, __0x2948.Text );
					}

					
					{
						var __0x2949 = __0x2955 as KryptonCheckBox;
						if( __0x2949 != null && !string.IsNullOrEmpty( __0x2949.Text ) )
							__0x2949.Text = Translate( group, __0x2949.Text );
					}
				}
			}
		}

		public static string TranslateLabel( string group, string text )
		{
			if( Initialized && text != null )
			{
				if( text.Length > 0 && text[ text.Length - 1 ] == ':' )
				{
					var __0x2950 = text.Substring( 0, text.Length - 1 );
					return Translate( group, __0x2950 ) + ":";
				}
				else
					return Translate( group, text );
			}
			return text;
		}

		public static bool WideLanguage
		{
			get { return Initialized && __0x2921; }
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Message box of the editor.
	/// </summary>
	public class EditorMessageBox
	{
		public static EDialogResult ShowQuestion( string text, EMessageBoxButtons buttons )
		{
			return (EDialogResult)KryptonMessageBox.Show( text, EngineInfo.OriginalName, (MessageBoxButtons)buttons, MessageBoxIcon.Question );
		}

		public static void ShowWarning( string text )
		{
			KryptonMessageBox.Show( text, EngineInfo.OriginalName, MessageBoxButtons.OK, MessageBoxIcon.Warning );
		}

		public static void ShowInfo( string text )
		{
			KryptonMessageBox.Show( text, EngineInfo.OriginalName, MessageBoxButtons.OK, MessageBoxIcon.Information );
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorResourcesCache
	{
		static Dictionary<string, Image> __0x2956 = new Dictionary<string, Image>();

		

		

		public static readonly Image New = RenderStandard.GetImageForDispalyScale( Resources.New_16, Resources.New_32 );
		public static readonly Image Edit = RenderStandard.GetImageForDispalyScale( Resources.Edit_16, Resources.Edit_32 );
		public static readonly Image Settings = RenderStandard.GetImageForDispalyScale( Resources.Maximize_16, Resources.Maximize_32 );
		public static readonly Image Cut = RenderStandard.GetImageForDispalyScale( Resources.Cut_16, Resources.Cut_32 );
		public static readonly Image Copy = RenderStandard.GetImageForDispalyScale( Resources.Copy_16, Resources.Copy_32 );
		public static readonly Image Paste = RenderStandard.GetImageForDispalyScale( Resources.Paste_16, Resources.Paste_32 );
		public static readonly Image Clone = RenderStandard.GetImageForDispalyScale( Resources.Copy_16, Resources.Copy_32 );
		public static readonly Image Delete = RenderStandard.GetImageForDispalyScale( Resources.Delete_16, Resources.Delete_32 );
		public static readonly Image Add = RenderStandard.GetImageForDispalyScale( Resources.Add_16, Resources.Add_32 );

		
		public static readonly Image Move = RenderStandard.GetImageForDispalyScale( Resources.Move_16, Resources.Move_32 );
		public static readonly Image Rotate = RenderStandard.GetImageForDispalyScale( Resources.Rotate_16, Resources.Rotate_32 );
		public static readonly Image MoveRotate = RenderStandard.GetImageForDispalyScale( Resources.MoveRotate_16, Resources.MoveRotate_32 );
		public static readonly Image Scale = RenderStandard.GetImageForDispalyScale( Resources.Scale_16, Resources.Scale_32 );
		public static readonly Image Select = RenderStandard.GetImageForDispalyScale( Resources.Select_16, Resources.Select_32 );

		public static readonly Image MoveDown = RenderStandard.GetImageForDispalyScale( Resources.MoveDown_16, Resources.MoveDown_32 );
		public static readonly Image MoveUp = RenderStandard.GetImageForDispalyScale( Resources.MoveUp_16, Resources.MoveUp_32 );
		public static readonly Image NewFolder = RenderStandard.GetImageForDispalyScale( Resources.NewFolder_16, Resources.NewFolder_32 );
		public static readonly Image SelectFolder = RenderStandard.GetImageForDispalyScale( Resources.SelectFolder_16, Resources.SelectFolder_32 );
		public static readonly Image Options = RenderStandard.GetImageForDispalyScale( Resources.Options_16, Resources.Options_32 );
		public static readonly Image Rename = RenderStandard.GetImageForDispalyScale( Resources.Rename_16x, Resources.Rename_32x );
		public static readonly Image Selection = RenderStandard.GetImageForDispalyScale( Resources.Selection_16, Resources.Selection_32 );
		public static readonly Image Import = RenderStandard.GetImageForDispalyScale( Resources.Import_16, Resources.Import_32 );
		public static readonly Image Events = RenderStandard.GetImageForDispalyScale( Resources.Event_16, Resources.Event_32 );
		public static readonly Image Properties = RenderStandard.GetImageForDispalyScale( Resources.Properties_16, Resources.Properties_32 );
		public static readonly Image Refresh = RenderStandard.GetImageForDispalyScale( Resources.Refresh_16, Resources.Refresh_32 );
		public static readonly Image Download = RenderStandard.GetImageForDispalyScale( Resources.Download_16, Resources.Download_32 );

		public static readonly Image Info = RenderStandard.GetImageForDispalyScale( Resources.Info_16, Resources.Info_32 );
		public static readonly Image Warning = RenderStandard.GetImageForDispalyScale( Resources.Warning_16, Resources.Warning_32 );
		public static readonly Image Error = RenderStandard.GetImageForDispalyScale( Resources.Error_16, Resources.Error_32 );

		public static readonly Image Type = RenderStandard.GetImageForDispalyScale( Resources.Class, Resources.Class_32 );
		public static readonly Image Focus = RenderStandard.GetImageForDispalyScale( Resources.Focus_16, Resources.Focus_32 );
		public static readonly Image Help = RenderStandard.GetImageForDispalyScale( Resources.Help_16, Resources.Help_32 );
		public static readonly Image Save = RenderStandard.GetImageForDispalyScale( Resources.Save_16, Resources.Save_32 );
		public static readonly Image Money = RenderStandard.GetImageForDispalyScale( Resources.Money_16, Resources.Money_32 );
		public static readonly Image Filter = RenderStandard.GetImageForDispalyScale( Resources.Filter_16, Resources.Filter_32 );
		public static readonly Image Resource = RenderStandard.GetImageForDispalyScale( Resources.Resource_16, Resources.Resource_32 );

		

		public static Image GetImage( string name )
		{
			if( !__0x2956.TryGetValue( name, out var image ) )
			{
				image = Resources.ResourceManager.GetObject( name, Resources.Culture ) as Image;
				__0x2956.Add( name, image );
			}
			return image;
		}

		
		
		
		
		
		

		
		
		

		
		


		static Bitmap __0x2957;
		static Bitmap __0x2958;
		static Bitmap __0x2959;

		public static Bitmap GetDefaultImage( int size )
		{
			if( size > 32 )
			{
				var __0x2960 = __0x2959;
				if( __0x2960 == null || __0x2960.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x2959 = Resources.Default_512;
				return __0x2959;
			}
			else if( size > 16 )
			{
				var __0x2961 = __0x2958;
				if( __0x2961 == null || __0x2961.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x2958 = Resources.Default_32;
				return __0x2958;
			}
			else
			{
				var __0x2962 = __0x2957;
				if( __0x2962 == null || __0x2962.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x2957 = Resources.Default_16;
				return __0x2957;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorRibbonDefaultConfiguration
	{
		public static List<Tab> Tabs = new List<Tab>();

		

		
		
		

		
		
		

		
		
		
		
		
		
		

		

		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		

		

		public class Group
		{
			public string Name;
			public (string, string) DropDownGroupText;
			public Image DropDownGroupImageSmall;
			public Image DropDownGroupImageLarge;
			public string DropDownGroupDescription = "";
			
			public List<object> Children = new List<object>();
			public bool ShowArrow;
			
			

			public Group()
			{
			}

			public Group( string name )
			{
				this.Name = name;
			}

			public bool AddAction( string actionName )
			{
				var __0x2963 = EditorActions.GetByName( actionName );
				if( __0x2963 == null )
				{
					
					Children.Add( actionName );
					return true;
					
					
				}
				Children.Add( __0x2963 );
				return true;
			}

			public void RemoveAction( string actionName )
			{
				var __0x2964 = EditorActions.GetByName( actionName );
				if( __0x2964 != null )
					Children.Remove( __0x2964 );

				for( int __0x2965 = 0; __0x2965 < Children.Count; __0x2965++ )
				{
					var __0x2966 = Children[ __0x2965 ] as string;
					if( __0x2966 != null && __0x2966 == actionName )
					{
						Children.RemoveAt( __0x2965 );
						break;
					}
				}
			}

			public void AddSeparator()
			{
				Children.Add( null );
			}

			public bool AreAllChildrenCompletelyDisabled()
			{
				foreach( var __0x3012 in Children )
				{
					var __0x2967 = __0x3012 as Group;
					if( __0x2967 != null && !__0x2967.AreAllChildrenCompletelyDisabled() )
						return false;

					var __0x2968 = __0x3012 as EditorAction;
					if( __0x2968 != null && !__0x2968.CompletelyDisabled )
						return false;

					var __0x2969 = __0x3012 as string;
					if( __0x2969 != null )
					{
						var __0x2970 = EditorActions.GetByName( __0x2969 );
						if( __0x2970 != null && !__0x2970.CompletelyDisabled )
							return false;
					}
				}

				return true;
			}
		}

		

		public class Tab
		{
			public string Name;
			public string Type;

			public Metadata.TypeInfo VisibleOnlyForType;

			public delegate bool VisibleConditionDelegate();
			public VisibleConditionDelegate VisibleCondition;

			public List<Group> Groups = new List<Group>();

			public Tab()
			{
			}

			public Tab( string name, string type, Metadata.TypeInfo visibleOnlyForType = null, VisibleConditionDelegate visibleCondition = null )
			{
				Name = name;
				Type = type;
				VisibleOnlyForType = visibleOnlyForType;
				VisibleCondition = visibleCondition;
			}
		}

		

#if !DEPLOY

		static EditorRibbonDefaultConfiguration()
		{
			EditorStandardActions.Register();

			
			{
				var __0x2971 = new Tab( "Home", "Home" );
				
				Tabs.Add( __0x2971 );

				
				{
					var __0x2972 = new Group( "Resource" );
					
					__0x2971.Groups.Add( __0x2972 );

					__0x2972.AddAction( "New Resource" );
					__0x2972.AddAction( "Import Resource" );
				}

				
				{
					var __0x2973 = new Group( "Save" );
					__0x2971.Groups.Add( __0x2973 );

					__0x2973.AddAction( "Save" );
					__0x2973.AddAction( "Save As" );
					__0x2973.AddAction( "Save All" );
				}

				
				
				
				

				
				

				
				{
					var __0x2974 = new Group( "Editing" );
					__0x2971.Groups.Add( __0x2974 );

					__0x2974.AddAction( "Undo" );
					__0x2974.AddAction( "Redo" );
					
					
					
					__0x2974.AddAction( "Duplicate" );
					__0x2974.AddAction( "Delete" );
				}

				
				{
					var __0x2975 = new Group( "Transform" );
					__0x2971.Groups.Add( __0x2975 );

					__0x2975.AddAction( "Select" );
					__0x2975.AddAction( "Move & Rotate" );
					__0x2975.AddAction( "Move" );
					__0x2975.AddAction( "Rotate" );
					__0x2975.AddAction( "Scale" );
					
					__0x2975.AddAction( "Transform Using Local Coordinates" );
				}

				
				{
					var __0x2976 = new Group( "Play" );
					__0x2971.Groups.Add( __0x2976 );

					__0x2976.AddAction( "Play" );
					__0x2976.AddAction( "Run Player" );
					
					
				}

				
				{
					var __0x2977 = new Group( "Project" );
					__0x2971.Groups.Add( __0x2977 );

					__0x2977.AddAction( "Project Settings" );
				}

				
				{
					var __0x2978 = new Group( "Additions" );
					__0x2971.Groups.Add( __0x2978 );

					__0x2978.AddAction( "Stores" );
					__0x2978.AddAction( "Store" );
				}

				
				{
					var __0x2979 = new Group( "Docs" );
					__0x2971.Groups.Add( __0x2979 );

					__0x2979.AddAction( "Manual" );
					__0x2979.AddAction( "Tips" );
				}
			}

			
			{
				var __0x2980 = new Tab( "Scripting", "Scripting" );
				Tabs.Add( __0x2980 );

				
				{
					var __0x2981 = new Group( "Solution" );
					__0x2980.Groups.Add( __0x2981 );

					__0x2981.AddAction( "Build Project's Solution" );
					
					
					
				}

				
				{
					var __0x2982 = new Group( "C# Project" );
					
					__0x2980.Groups.Add( __0x2982 );

					__0x2982.AddAction( "C# File" );
					__0x2982.AddAction( "Add C# files to Project.csproj" );
					__0x2982.AddAction( "Remove C# files from Project.csproj" );
					
					
				}

				
				{
					var __0x2983 = new Group( "Components" );
					__0x2980.Groups.Add( __0x2983 );

					__0x2983.AddAction( "C# Script" );
					__0x2983.AddAction( "Flow Graph" );
				}

				
				{
					var __0x2984 = new Group( "C# Editing" );
					__0x2980.Groups.Add( __0x2984 );

					__0x2984.AddAction( "Comment Selection" );
					__0x2984.AddAction( "Uncomment Selection" );
					__0x2984.AddAction( "Rename" );
					__0x2984.AddAction( "Format Document" );
					__0x2984.AddAction( "Add Property Code" );
				}

				
				
				
				

				
				
				

				
				
				
				
				
				

				
				{
					var __0x2985 = new Group( "External" );
					
					__0x2980.Groups.Add( __0x2985 );

					
					__0x2985.AddAction( "Open Sources Solution in External IDE" );
				}
			}

			
			{
				var __0x2986 = new Tab( "Windows", "Windows" );
				Tabs.Add( __0x2986 );

				
				{
					var __0x2987 = new Group( "Windows" );
					__0x2986.Groups.Add( __0x2987 );

					__0x2987.AddAction( "Resources Window" );
					__0x2987.AddAction( "Stores Window" );
					
					__0x2987.AddAction( "Objects Window" );
					
					__0x2987.AddAction( "Settings Window" );
					
					__0x2987.AddAction( "Preview Window" );
					__0x2987.AddAction( "Message Log Window" );
					__0x2987.AddAction( "Output Window" );
					__0x2987.AddAction( "Debug Info Window" );

					__0x2987.AddAction( "Start Page" );
					__0x2987.AddAction( "Store" );
					
					__0x2987.AddAction( "Tips" );
				}

				
				{
					var __0x2988 = new Group( "Settings" );
					__0x2986.Groups.Add( __0x2988 );

					
					

					__0x2988.AddAction( "Reset Windows Settings" );
				}

				
				{
					var __0x2989 = new Group( "Document" );
					__0x2986.Groups.Add( __0x2989 );

					
					
					
					
					
					__0x2989.AddAction( "Find Resource" );
				}
			}

			
			{
				var __0x2990 = new Tab( "Tools", "Tools" );
				Tabs.Add( __0x2990 );

				
				
				
				

				
				

				
				{
					var __0x2991 = new Group( "Packing" );
					__0x2990.Groups.Add( __0x2991 );

					__0x2991.AddAction( "Create NeoAxis Baking File" );
				}
			}

			
			{
				var __0x2992 = new Tab( "Scene Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( Scene ) ) );
				Tabs.Add( __0x2992 );

				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				{
					var __0x2993 = new Group( "Display" );
					__0x2992.Groups.Add( __0x2993 );

					{
						var __0x2994 = new Group( "Display Development Data" );
						__0x2993.Children.Add( __0x2994 );
						__0x2994.DropDownGroupText = ("Development",  "Data");
						__0x2994.DropDownGroupImageLarge = Properties.Resources.ArrangeUp_32;
						__0x2994.DropDownGroupDescription = "Specifies the display settings of the development data.";
						

						__0x2994.AddAction( "Scene Display Development Data In Editor" );
						__0x2994.AddAction( "Scene Display Development Data In Simulation" );
						__0x2994.AddSeparator();
						__0x2994.AddAction( "Scene Display Text Info" );
						__0x2994.AddAction( "Scene Display Labels" );
						__0x2994.AddAction( "Scene Display Lights" );
						__0x2994.AddAction( "Scene Display Decals" );
						__0x2994.AddAction( "Scene Display Reflection Probes" );
						__0x2994.AddAction( "Scene Display Cameras" );

						__0x2994.AddAction( "Scene Display Physical Objects" );
						
						
						
						__0x2994.AddAction( "Scene Display Areas" );
						__0x2994.AddAction( "Scene Display Volumes" );
						__0x2994.AddAction( "Scene Display Sensors" );
						__0x2994.AddAction( "Scene Display Sound Sources" );
						__0x2994.AddAction( "Scene Display Object In Space Bounds" );
						__0x2994.AddAction( "Scene Display Scene Octree" );
						__0x2994.AddAction( "Scene Frustum Culling Test" );
						

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					}

					{
						var __0x2995 = new Group( "Debug Mode" );
						__0x2993.Children.Add( __0x2995 );
						__0x2995.DropDownGroupText = ("Debug", "Mode");
						__0x2995.DropDownGroupImageLarge = Properties.Resources.RenderingDebugMode_32;
						__0x2995.DropDownGroupDescription = "Changes the debug mode of the rendering pipeline.";
						

						foreach( var __0x3013 in (RenderingPipeline_Basic.DebugModeEnum[])Enum.GetValues( typeof( RenderingPipeline_Basic.DebugModeEnum ) ) )
						{
							var __0x2996 = EnumUtility.GetValueDisplayName( __0x3013 );
							
							__0x2995.AddAction( "Rendering Debug Mode " + __0x2996 );
						}
					}
				}

				
				{
					var __0x2997 = new Group( "Snap" );
					__0x2992.Groups.Add( __0x2997 );
					__0x2997.AddAction( "Snap All Axes" );
					__0x2997.AddAction( "Snap X" );
					__0x2997.AddAction( "Snap Y" );
					__0x2997.AddAction( "Snap Z" );
				}

				
				{
					var __0x2998 = new Group( "Physics" );
					__0x2992.Groups.Add( __0x2998 );
					__0x2998.AddAction( "Add Collision" );
					__0x2998.AddAction( "Delete Collision" );
					__0x2998.AddAction( "Simulate Physics" );
				}

				
				{
					var __0x2999 = new Group( "Attachment" );
					__0x2992.Groups.Add( __0x2999 );
					__0x2999.AddAction( "Attach Second to First" );
					__0x2999.AddAction( "Detach from Another Object" );
				}

				
				{
					var __0x3000 = new Group( "Find" );
					__0x2992.Groups.Add( __0x3000 );
					__0x3000.AddAction( "Focus Camera On Selected Object" );
				}

				
				{
					var __0x3001 = new Group( "Create Objects" );
					__0x2992.Groups.Add( __0x3001 );
					__0x3001.AddAction( "Create Objects By Drag & Drop" );
					__0x3001.AddAction( "Create Objects By Click" );
					__0x3001.AddAction( "Create Objects By Brush" );
					__0x3001.AddAction( "Create Objects Destination" );
					__0x3001.AddAction( "Create Objects Brush Radius" );
					__0x3001.AddAction( "Create Objects Brush Strength" );
					__0x3001.AddAction( "Create Objects Brush Hardness" );
				}

			}

			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3002 = new Tab( "Mesh Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( Mesh ) ) );
				Tabs.Add( __0x3002 );

				
				{
					var __0x3003 = new Group( "Display" );
					__0x3002.Groups.Add( __0x3003 );

					__0x3003.AddAction( "Mesh Display Pivot" );
					__0x3003.AddAction( "Mesh Display Bounds" );
					__0x3003.AddAction( "Mesh Display Triangles" );
					__0x3003.AddAction( "Mesh Display Vertices" );
					__0x3003.AddAction( "Mesh Display Vertex Color" );
					__0x3003.AddAction( "Mesh Display Normals" );
					__0x3003.AddAction( "Mesh Display Tangents" );
					__0x3003.AddAction( "Mesh Display Binormals" );
					
					__0x3003.AddAction( "Mesh Display UV" );
					__0x3003.AddAction( "Mesh Display LOD" );
					
					__0x3003.AddAction( "Mesh Display Skeleton" );
					__0x3003.AddAction( "Mesh Play Animation" );
					
					
					__0x3003.AddAction( "Mesh Display Collision" );
				}

				
				{
					var __0x3004 = new Group( "Collision" );
					__0x3002.Groups.Add( __0x3004 );

					__0x3004.AddAction( "Mesh Add Collision" );
					__0x3004.AddAction( "Mesh Delete Collision" );
				}

				
				
				
				

				
				
				

				
				{
					var __0x3005 = new Group( "Modify" );
					__0x3002.Groups.Add( __0x3005 );

					var __0x3006 = new Group( "Mesh Add Modifier" );
					__0x3005.Children.Add( __0x3006 );
					__0x3006.DropDownGroupText = ("Add", "Modifier");
					__0x3006.DropDownGroupImageLarge = Properties.Resources.Modify_32;
					__0x3006.DropDownGroupDescription = "Adds a new mesh modifier.";

					foreach( var __0x3014 in EditorStandardActions.GetAllMeshModifiers() )
					{
						var __0x3007 = __0x3014.GetUserFriendlyNameForInstance();
						__0x3006.AddAction( "Mesh Add Modifier " + __0x3007 );
					}

					__0x3005.AddAction( "Mesh Add Paint Layer" );
				}
			}

			
			{
				var __0x3008 = new Tab( "UI Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( UIControl ) ) );
				Tabs.Add( __0x3008 );

				
				{
					var __0x3009 = new Group( "Snap" );
					__0x3008.Groups.Add( __0x3009 );
					__0x3009.AddAction( "Snap All Axes" );
					__0x3009.AddAction( "Snap X" );
					__0x3009.AddAction( "Snap Y" );
				}

				
				{
					var __0x3010 = new Group( "Horizontal Alignment" );
					__0x3008.Groups.Add( __0x3010 );
					__0x3010.AddAction( "UI Align Left" );
					__0x3010.AddAction( "UI Align Center Horizontal" );
					__0x3010.AddAction( "UI Align Right" );
					__0x3010.AddAction( "UI Align Stretch Horizontal" );
				}

				
				{
					var __0x3011 = new Group( "Vertical Alignment" );
					__0x3008.Groups.Add( __0x3011 );
					__0x3011.AddAction( "UI Align Top" );
					__0x3011.AddAction( "UI Align Center Vertical" );
					__0x3011.AddAction( "UI Align Bottom" );
					__0x3011.AddAction( "UI Align Stretch Vertical" );
				}
			}
		}

#endif

		public static Tab GetTab( string name )
		{
			foreach( var __0x3015 in Tabs )
				if( __0x3015.Name == name )
					return __0x3015;
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	static class EditorSettingsSerialization
	{
		[EngineConfig( "Editor", "QATLocation" )]
		static QATLocation __0x3016 = QATLocation.Above;
		[EngineConfig( "Editor", "RibbonMinimizedMode" )]
		static bool __0x3017;
		[EngineConfig( "Editor", "RibbonLastSelectedTabTypeByUser" )]
		static string __0x3018 = "";
		[EngineConfig( "Editor", "ShowTipsAsStartup" )]
		public static bool ShowTipsAsStartup = true;

		[EngineConfig( "Editor", "OpenFileAtStartup" )]
		public static string OpenFileAtStartup = "";

		

		public static void Init()
		{
			EngineConfig.RegisterClassParameters( typeof( EditorSettingsSerialization ) );
			
			

			EditorForm.Instance.kryptonRibbon.QATLocation = __0x3016;
			EditorForm.Instance.kryptonRibbon.MinimizedMode = __0x3017;
			EditorForm.Instance.ribbonLastSelectedTabTypeByUser = __0x3018;
		}

		public static void InitAfterFormLoad()
		{
		}

		public static void Dump()
		{
			if( !EditorForm.Instance.backstageMenu1.Visible )
				__0x3016 = EditorForm.Instance.kryptonRibbon.QATLocation;
			__0x3017 = EditorForm.Instance.kryptonRibbon.MinimizedMode;
			__0x3018 = EditorForm.Instance.ribbonLastSelectedTabTypeByUser;
		}

		
		
		

		
		
		
	}
}





namespace NeoAxis.Editor
{
	public static class EditorStandardActions
	{
		static bool __0x3019;

		

		internal static void Register()
		{
			if( __0x3019 )
				return;
			__0x3019 = true;

#if !DEPLOY
			__0x3573();
			__0x3574();
			__0x3575();
			
			__0x3576();
			__0x3579();
			__0x3580();
			__0x3581();
			__0x3582();
			__0x3585();
#endif
		}

		

#if !DEPLOY

		static void __0x3573()
		{
			
			{
				var __0x3020 = new EditorAction();
				__0x3020.Name = "Restart";
				__0x3020.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3020.Description = "Restarts the editor.";
				__0x3020.ImageSmall = Properties.Resources.Refresh_16;
				__0x3020.ImageBig = Properties.Resources.Refresh_32;
				__0x3020.QatSupport = true;
				__0x3020.QatAddByDefault = true;
				__0x3020.RibbonText = ("Restart", "App");
				__0x3020.GetState += delegate ( EditorAction.GetStateContext __0x3586 )
				{
					__0x3586.Enabled = true;
					
				};
				__0x3020.Click += delegate ( EditorAction.ClickContext __0x3587 )
				{
					EditorAPI.BeginRestartApplication();
				};
				EditorActions.Register( __0x3020 );
			}

			
			{
				var __0x3021 = new EditorAction();
				__0x3021.Name = "New Resource";
				__0x3021.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3021.Description = "Creates a new resource in the project.";
				__0x3021.ImageSmall = Properties.Resources.New_16;
				__0x3021.ImageBig = Properties.Resources.New_32;
				__0x3021.QatSupport = true;
				__0x3021.QatAddByDefault = true;
				__0x3021.RibbonText = ("New", "");
				__0x3021.GetState += delegate ( EditorAction.GetStateContext __0x3588 )
				{
					__0x3588.Enabled = true;
				};
				__0x3021.Click += delegate ( EditorAction.ClickContext __0x3589 )
				{
					var __0x3022 = new NewObjectWindow.CreationDataClass();

					var __0x3023 = EditorAPI.FindWindow<ResourcesWindow>();
					string __0x3024 = __0x3023.ContentBrowser1.GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
					if( !string.IsNullOrEmpty( __0x3024 ) )
						__0x3022.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( __0x3024 );

					
					
					EditorAPI.OpenNewObjectWindow( __0x3022 );
				};
				EditorActions.Register( __0x3021 );
			}

			
			{
				var __0x3025 = new EditorAction();
				__0x3025.Name = "Import Resource";
				__0x3025.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3025.Description = "Imports resources to the project.";
				__0x3025.ImageSmall = Properties.Resources.Import_16;
				__0x3025.ImageBig = Properties.Resources.Import_32;
				__0x3025.QatSupport = true;
				__0x3025.QatAddByDefault = true;
				__0x3025.RibbonText = ("Import", "");
				__0x3025.GetState += delegate ( EditorAction.GetStateContext __0x3590 )
				{
					__0x3590.Enabled = true;
				};
				__0x3025.Click += delegate ( EditorAction.ClickContext __0x3591 )
				{
					string __0x3026 = "";

					var __0x3027 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1.SelectedItems;
					if( __0x3027.Length == 1 && __0x3027[ 0 ] is ContentBrowserItem_File fileItem )
					{
						if( fileItem.IsDirectory )
							__0x3026 = VirtualPathUtility.GetVirtualPathByReal( fileItem.FullPath );
					}

					EditorAPI.OpenImportWindow( __0x3026 );
				};
				EditorActions.Register( __0x3025 );
			}

			
			{
				var __0x3028 = new EditorAction();
				__0x3028.Name = "Save";
				__0x3028.Description = "Saves the current document.";
				__0x3028.ImageSmall = Properties.Resources.Save_16;
				__0x3028.ImageBig = Properties.Resources.Save_32;
				__0x3028.ShortcutKeys = new Keys[] { Keys.Control | Keys.S };
				__0x3028.QatSupport = true;
				__0x3028.QatAddByDefault = true;
				EditorActions.Register( __0x3028 );
			}

			
			{
				var __0x3029 = new EditorAction();
				__0x3029.Name = "Save As";
				__0x3029.Description = "Saves the current document in a different location, or with a different file name.";
				__0x3029.ImageSmall = Properties.Resources.Save_16;
				__0x3029.ImageBig = Properties.Resources.Save_32;
				__0x3029.QatSupport = true;
				__0x3029.QatAddByDefault = true;
				EditorActions.Register( __0x3029 );
			}

			
			{
				var __0x3030 = new EditorAction();
				__0x3030.Name = "Save All";
				__0x3030.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3030.Description = "Saves all modified documents.";
				__0x3030.ImageSmall = Properties.Resources.SaveAll_16;
				__0x3030.ImageBig = Properties.Resources.SaveAll_32;
				__0x3030.QatSupport = true;
				__0x3030.QatAddByDefault = true;
				__0x3030.GetState += delegate ( EditorAction.GetStateContext __0x3592 )
				{
					if( EditorAPI.ExistsModifiedDocuments() )
						__0x3592.Enabled = true;
				};
				__0x3030.Click += delegate ( EditorAction.ClickContext __0x3593 )
				{
					EditorAPI.SaveDocuments();
				};
				EditorActions.Register( __0x3030 );
			}

			
			{
				var __0x3031 = new EditorAction();
				__0x3031.Name = "Undo";
				__0x3031.Description = "Undoes the last action.";
				__0x3031.ImageSmall = Properties.Resources.Undo_16;
				__0x3031.ImageBig = Properties.Resources.Undo_32;
				__0x3031.ShortcutKeys = new Keys[] { Keys.Control | Keys.Z };
				__0x3031.QatSupport = true;
				__0x3031.QatAddByDefault = true;
				EditorActions.Register( __0x3031 );
			}

			
			{
				var __0x3032 = new EditorAction();
				__0x3032.Name = "Redo";
				__0x3032.Description = "Redos the last action.";
				__0x3032.ImageSmall = Properties.Resources.Redo_16;
				__0x3032.ImageBig = Properties.Resources.Redo_32;
				__0x3032.ShortcutKeys = new Keys[] { Keys.Control | Keys.Y };
				__0x3032.QatSupport = true;
				__0x3032.QatAddByDefault = true;
				EditorActions.Register( __0x3032 );
			}

			
			{
				var __0x3033 = new EditorAction();
				__0x3033.Name = "Cut";
				__0x3033.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x3033.ImageSmall = Properties.Resources.Cut_16;
				__0x3033.ImageBig = Properties.Resources.Cut_32;
				__0x3033.ShortcutKeys = new Keys[] { Keys.Control | Keys.X };
				__0x3033.QatSupport = true;
				__0x3033.QatAddByDefault = false;

				
				__0x3033.GetState += delegate ( EditorAction.GetStateContext __0x3594 )
				{
					var __0x3034 = __0x3594.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3034.Length != 0 && __0x3034[ 0 ].Owner.CanCut() )
						__0x3594.Enabled = true;
				};
				__0x3033.Click += delegate ( EditorAction.ClickContext __0x3595 )
				{
					var __0x3035 = __0x3595.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3035.Length != 0 )
						__0x3035[ 0 ].Owner.Cut();
				};

				EditorActions.Register( __0x3033 );
			}

			
			{
				var __0x3036 = new EditorAction();
				__0x3036.Name = "Copy";
				__0x3036.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x3036.ImageSmall = Properties.Resources.Copy_16;
				__0x3036.ImageBig = Properties.Resources.Copy_32;
				__0x3036.ShortcutKeys = new Keys[] { Keys.Control | Keys.C, Keys.Control | Keys.Insert };
				__0x3036.QatSupport = true;
				__0x3036.QatAddByDefault = false;

				__0x3036.GetState += delegate ( EditorAction.GetStateContext __0x3596 )
				{
					var __0x3037 = __0x3596.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3037.Length != 0 && __0x3037[ 0 ].Owner.CanCopy() )
						__0x3596.Enabled = true;
				};
				__0x3036.Click += delegate ( EditorAction.ClickContext __0x3597 )
				{
					var __0x3038 = __0x3597.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3038.Length != 0 )
						__0x3038[ 0 ].Owner.Copy();
				};

				EditorActions.Register( __0x3036 );
			}

			
			{
				var __0x3039 = new EditorAction();
				__0x3039.Name = "Paste";
				__0x3039.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x3039.ImageSmall = Properties.Resources.Paste_16;
				__0x3039.ImageBig = Properties.Resources.Paste_32;
				__0x3039.ShortcutKeys = new Keys[] { Keys.Control | Keys.V, Keys.Shift | Keys.Insert };
				__0x3039.QatSupport = true;
				__0x3039.QatAddByDefault = false;

				__0x3039.GetState += delegate ( EditorAction.GetStateContext __0x3598 )
				{
					var __0x3040 = __0x3598.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3040.Length != 0 && __0x3040[ 0 ].Owner.CanPaste( out _, out _, out _, out _ ) )
						__0x3598.Enabled = true;
				};
				__0x3039.Click += delegate ( EditorAction.ClickContext __0x3599 )
				{
					var __0x3041 = __0x3599.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x3041.Length != 0 )
						__0x3041[ 0 ].Owner.Paste();
				};

				EditorActions.Register( __0x3039 );
			}

			
			{
				var __0x3042 = new EditorAction();
				__0x3042.Name = "Duplicate";
				__0x3042.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3042.Description = "Duplicates selected objects.";
				
				__0x3042.ImageSmall = Properties.Resources.Copy_16;
				__0x3042.ImageBig = Properties.Resources.Copy_32;
				__0x3042.ShortcutKeys = new Keys[] { Keys.Control | Keys.D };
				__0x3042.QatSupport = true;
				__0x3042.QatAddByDefault = true;
				__0x3042.RibbonText = ("Copy", "");
				EditorActions.Register( __0x3042 );
			}

			
			{
				var __0x3043 = new EditorAction();
				__0x3043.Name = "Delete";
				__0x3043.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3043.Description = "Deletes selected objects.";
				__0x3043.ImageSmall = Properties.Resources.Delete_16;
				__0x3043.ImageBig = Properties.Resources.Delete_32;
				__0x3043.ShortcutKeys = new Keys[] { Keys.Delete };
				__0x3043.QatSupport = true;
				__0x3043.QatAddByDefault = true;

				__0x3043.GetState += delegate ( EditorAction.GetStateContext __0x3600 )
				{
					var __0x3044 = __0x3600.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().ToArray();
					if( __0x3044.Length != 0 )
					{
						

						if( __0x3044[ 0 ].Owner.CanDeleteObjects( out _ ) )
							__0x3600.Enabled = true;
					}
				};
				__0x3043.Click += delegate ( EditorAction.ClickContext __0x3601 )
				{
					var __0x3045 = __0x3601.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().ToArray();
					if( __0x3045.Length != 0 )
					{
						

						__0x3045[ 0 ].Owner.TryDeleteObjects();
					}
				};

				EditorActions.Register( __0x3043 );
			}

			
			{
				var __0x3046 = new EditorAction();
				__0x3046.Name = "Rename";
				__0x3046.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3046.Description = "Renames the selected object.";
				__0x3046.ImageSmall = Properties.Resources.Rename_16;
				__0x3046.ImageBig = Properties.Resources.Rename_32;
				__0x3046.ShortcutKeys = new Keys[] { Keys.F2 };
				__0x3046.QatSupport = true;
				__0x3046.RibbonText = ("Rename", "");
				EditorActions.Register( __0x3046 );
			}

			
			{
				var __0x3047 = new EditorAction();
				__0x3047.Name = "Select";
				__0x3047.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3047.Description = "Selection mode of the transform tool.";
				__0x3047.ImageSmall = Properties.Resources.Select_16;
				__0x3047.ImageBig = Properties.Resources.Select_32;
				__0x3047.ShortcutKeys = new Keys[] { Keys.R };
				__0x3047.QatSupport = true;
				__0x3047.QatAddByDefault = true;
				EditorActions.Register( __0x3047 );
			}

			
			{
				var __0x3048 = new EditorAction();
				__0x3048.Name = "Move & Rotate";
				__0x3048.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3048.Description = "Movement & rotation mode of the transform tool.";
				__0x3048.ImageSmall = Properties.Resources.MoveRotate_16;
				__0x3048.ImageBig = Properties.Resources.MoveRotate_32;
				__0x3048.ImageBigDark = Properties.Resources.MoveRotate_32_Dark;
				__0x3048.RibbonText = ("Move", "Rotate");
				__0x3048.ShortcutKeys = new Keys[] { Keys.T };
				__0x3048.QatSupport = true;
				__0x3048.QatAddByDefault = true;
				EditorActions.Register( __0x3048 );
			}

			
			{
				var __0x3049 = new EditorAction();
				__0x3049.Name = "Move";
				__0x3049.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3049.Description = "Movement mode of the transform tool.";
				__0x3049.ImageSmall = Properties.Resources.Move_16;
				__0x3049.ImageBig = Properties.Resources.Move_32;
				__0x3049.ImageBigDark = Properties.Resources.Move_32_Dark;
				__0x3049.ShortcutKeys = new Keys[] { Keys.Y };
				__0x3049.QatSupport = true;
				__0x3049.QatAddByDefault = true;
				EditorActions.Register( __0x3049 );
			}

			
			{
				var __0x3050 = new EditorAction();
				__0x3050.Name = "Rotate";
				__0x3050.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3050.Description = "Rotation mode of the transform tool.";
				__0x3050.ImageSmall = Properties.Resources.Rotate_16;
				__0x3050.ImageBig = Properties.Resources.Rotate_32;
				__0x3050.ShortcutKeys = new Keys[] { Keys.U };
				__0x3050.QatSupport = true;
				__0x3050.QatAddByDefault = true;
				EditorActions.Register( __0x3050 );
			}

			
			{
				var __0x3051 = new EditorAction();
				__0x3051.Name = "Scale";
				__0x3051.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3051.Description = "Scaling mode of the transform tool.";
				__0x3051.ImageSmall = Properties.Resources.Scale_16;
				__0x3051.ImageBig = Properties.Resources.Scale_32;
				__0x3051.ImageBigDark = Properties.Resources.Scale_32_Dark;
				__0x3051.ShortcutKeys = new Keys[] { Keys.I };
				__0x3051.QatSupport = true;
				__0x3051.QatAddByDefault = true;
				EditorActions.Register( __0x3051 );
			}

			
			{
				var __0x3052 = new EditorAction();
				__0x3052.Name = "Move, Rotate, Scale";
				__0x3052.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3052.Description = "Select 'move rotate and scale' tool.";
				__0x3052.ImageSmall = Properties.Resources.Default_16;
				__0x3052.ImageBig = Properties.Resources.Default_32;
				
				
				__0x3052.QatSupport = true;
				
				__0x3052.RibbonText = ("Move", "Rotate");
				EditorActions.Register( __0x3052 );
			}

			
			{
				var __0x3053 = new EditorAction();
				__0x3053.Name = "Transform Using Local Coordinates";
				__0x3053.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3053.Description = "Enables the use of local transform coordinates.";
				__0x3053.ImageSmall = Properties.Resources.TransformUsingLocalCoordinates_16;
				__0x3053.ImageBig = Properties.Resources.TransformUsingLocalCoordinates_32;
				__0x3053.ImageBigDark = Properties.Resources.TransformUsingLocalCoordinates_32_Dark;
				__0x3053.QatSupport = true;
				__0x3053.QatAddByDefault = true;
				__0x3053.RibbonText = ("Local", "");
				
				EditorActions.Register( __0x3053 );
			}

			
			{
				var __0x3054 = new EditorAction();
				__0x3054.Name = "Play";
				__0x3054.Description = "Saves and runs the document in the player application.";
				__0x3054.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3054.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3054.ShortcutKeys = new Keys[] { Keys.F5 };
				__0x3054.QatSupport = true;
				__0x3054.QatAddByDefault = true;
				EditorActions.Register( __0x3054 );
			}

			
			{
				var __0x3055 = new EditorAction();
				__0x3055.Name = "Run Player";
				__0x3055.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3055.Description = "Runs the application of the project.";
				__0x3055.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3055.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3055.ShortcutKeys = new Keys[] { Keys.F6 };
				__0x3055.QatSupport = true;
				__0x3055.QatAddByDefault = true;
				__0x3055.GetState += delegate ( EditorAction.GetStateContext __0x3602 )
				{
					__0x3602.Enabled = true;
				};
				__0x3055.Click += delegate ( EditorAction.ClickContext __0x3603 )
				{
					EditorAPI.SaveDocuments();
					RunSimulation.Run( "", RunSimulation.RunMethod.Player );
				};
				EditorActions.Register( __0x3055 );
			}

			
			{
				var __0x3056 = new EditorAction();
				__0x3056.Name = "Run Device";
				__0x3056.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3056.Description = "Runs the project on specific device. (The feature is not implemented)";
				__0x3056.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3056.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3056.ShortcutKeys = new Keys[] { Keys.F7 };
				__0x3056.QatSupport = true;
				__0x3056.QatAddByDefault = true;
				__0x3056.GetState += delegate ( EditorAction.GetStateContext __0x3604 )
				{
				};
				__0x3056.Click += delegate ( EditorAction.ClickContext __0x3605 )
				{
				};
				EditorActions.Register( __0x3056 );
			}

			
			{
				var __0x3057 = new EditorAction();
				__0x3057.Name = "Run Device 2";
				__0x3057.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3057.Description = "Runs the project on specific device. (The feature is not implemented)";
				__0x3057.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3057.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3057.ShortcutKeys = new Keys[] { Keys.F8 };
				__0x3057.QatSupport = true;
				
				__0x3057.GetState += delegate ( EditorAction.GetStateContext __0x3606 )
				{
				};
				__0x3057.Click += delegate ( EditorAction.ClickContext __0x3607 )
				{
				};
				EditorActions.Register( __0x3057 );
			}

			
			{
				var __0x3058 = new EditorAction();
				__0x3058.Name = "Project Settings";
				__0x3058.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3058.Description = "Opens the settings of the project.";
				__0x3058.ImageSmall = Properties.Resources.Options_16;
				__0x3058.ImageBig = Properties.Resources.Options_32;
				__0x3058.ImageBigDark = Properties.Resources.Options_32_Dark;
				__0x3058.QatSupport = true;
				__0x3058.QatAddByDefault = true;
				__0x3058.RibbonText = ("Settings", "");
				__0x3058.GetState += delegate ( EditorAction.GetStateContext __0x3608 )
				{
					__0x3608.Enabled = true;
				};
				__0x3058.Click += delegate ( EditorAction.ClickContext __0x3609 )
				{
					EditorAPI.ShowProjectSettings();
				};
				EditorActions.Register( __0x3058 );
			}

			
			{
				var __0x3059 = new EditorAction();
				__0x3059.Name = "Manual";
				__0x3059.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3059.Description = "Opens the online documentation.";
				__0x3059.ImageSmall = Properties.Resources.Help_16;
				__0x3059.ImageBig = Properties.Resources.Help_32;
				__0x3059.QatSupport = true;
				__0x3059.RibbonText = ("Manual", "");
				__0x3059.GetState += delegate ( EditorAction.GetStateContext __0x3610 )
				{
					__0x3610.Enabled = true;
				};
				__0x3059.Click += delegate ( EditorAction.ClickContext __0x3611 )
				{
					Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/docs/html/Manual_Root.htm" ) { UseShellExecute = true } );
				};
				EditorActions.Register( __0x3059 );
			}

			
			{
				var __0x3060 = new EditorAction();
				__0x3060.Name = "Tips";
				__0x3060.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3060.Description = "Opens the Tips window.";
				
				__0x3060.ImageSmall = Properties.Resources.Grow_16;
				__0x3060.ImageBig = Properties.Resources.Grow_32;
				__0x3060.QatSupport = true;
				__0x3060.RibbonText = ("Tips", "");
				__0x3060.GetState += delegate ( EditorAction.GetStateContext __0x3612 )
				{
					__0x3612.Enabled = true;
					__0x3612.Checked = EditorAPI.FindWindow<TipsWindow>() != null;
				};
				__0x3060.Click += delegate ( EditorAction.ClickContext __0x3613 )
				{
					EditorAPI.ShowTips();
				};
				EditorActions.Register( __0x3060 );
			}

			
			{
				var __0x3061 = new EditorAction();
				__0x3061.Name = "Stores";
				__0x3061.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3061.Description = "Opens the stores window.";
				__0x3061.ImageSmall = Properties.Resources.Download_16;
				__0x3061.ImageBig = Properties.Resources.Download_32;
				__0x3061.QatSupport = true;
				__0x3061.RibbonText = ("Stores", "");
				__0x3061.GetState += delegate ( EditorAction.GetStateContext __0x3614 )
				{
					__0x3614.Enabled = true;
					
				};
				__0x3061.Click += delegate ( EditorAction.ClickContext __0x3615 )
				{
					EditorAPI.OpenStoresWindow();
				};
				EditorActions.Register( __0x3061 );
			}

			
			{
				var __0x3062 = new EditorAction();
				__0x3062.Name = "Store";
				__0x3062.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3062.Description = "Opens the NeoAxis Asset Store.";
				__0x3062.ImageSmall = Properties.Resources.Stores_16;
				__0x3062.ImageBig = Properties.Resources.Stores_32;
				__0x3062.QatSupport = true;
				__0x3062.RibbonText = ("Store", "");
				__0x3062.GetState += delegate ( EditorAction.GetStateContext __0x3616 )
				{
					__0x3616.Enabled = true;
					__0x3616.Checked = EditorAPI.FindWindow<StoreDocumentWindow>() != null;
				};
				__0x3062.Click += delegate ( EditorAction.ClickContext __0x3617 )
				{
					EditorAPI.OpenOrCloseStore();
				};
				EditorActions.Register( __0x3062 );
			}
		}

		

		static void __0x3574()
		{
			
			EditorActions.RegisterDockWindowAction( "Resources Window", ("Resources", ""), typeof( ResourcesWindow ) );

			
			EditorActions.RegisterDockWindowAction( "Stores Window", ("Stores", ""), typeof( StoresWindow ) );

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			EditorActions.RegisterDockWindowAction( "Objects Window", ("Objects", ""), typeof( ObjectsWindow ) );

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			EditorActions.RegisterDockWindowAction( "Settings Window", ("Settings", ""), typeof( SettingsWindow ) );
			
			EditorActions.RegisterDockWindowAction( "Preview Window", ("Preview", ""), typeof( PreviewWindow ) );
			EditorActions.RegisterDockWindowAction( "Message Log Window", ("Message", "Log"), typeof( MessageLogWindow ) );
			EditorActions.RegisterDockWindowAction( "Output Window", ("Output", ""), typeof( OutputWindow ) );
			EditorActions.RegisterDockWindowAction( "Debug Info Window", ("Debug", "Info"), typeof( DebugInfoWindow ) );

			

			
			{
				var __0x3063 = new EditorAction();
				__0x3063.Name = "Start Page";
				__0x3063.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3063.Description = "Opens the start page.";
				__0x3063.ImageSmall = Properties.Resources.Window_16;
				__0x3063.ImageBig = Properties.Resources.Window_32;
				__0x3063.QatSupport = true;
				__0x3063.RibbonText = ("Start", "Page");
				__0x3063.GetState += delegate ( EditorAction.GetStateContext __0x3618 )
				{
					__0x3618.Enabled = true;
					__0x3618.Checked = EditorAPI.FindWindow<StartPageWindow>() != null;
				};
				__0x3063.Click += delegate ( EditorAction.ClickContext __0x3619 )
				{
					EditorAPI.OpenOrCloseStartPage();
				};
				EditorActions.Register( __0x3063 );
			}

			
			{
				var __0x3064 = new EditorAction();
				__0x3064.Name = "Reset Windows Settings";
				__0x3064.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3064.ImageSmall = Properties.Resources.Refresh_16;
				__0x3064.ImageBig = Properties.Resources.Refresh_32;
				__0x3064.QatSupport = true;
				__0x3064.RibbonText = ("Reset", "Settings");
				__0x3064.Description = "Resets windows settings.";
				__0x3064.GetState += delegate ( EditorAction.GetStateContext __0x3620 )
				{
					__0x3620.Enabled = true;
				};
				__0x3064.Click += delegate ( EditorAction.ClickContext __0x3621 )
				{
					if( EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "General", "Reset windows settings and restart the editor?" ), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
						EditorAPI.BeginRestartApplication( true );
				};
				EditorActions.Register( __0x3064 );
			}

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3065 = new EditorAction();
				__0x3065.Name = "Find Resource";
				__0x3065.ImageSmall = Properties.Resources.Focus_16;
				__0x3065.ImageBig = Properties.Resources.Focus_32;
				__0x3065.QatSupport = true;
				__0x3065.RibbonText = ("Find", "Resource");
				__0x3065.Description = "Finds a selected resource in the Resources Window.";
				__0x3065.GetState += delegate ( EditorAction.GetStateContext __0x3622 )
				{
				};
				__0x3065.Click += delegate ( EditorAction.ClickContext __0x3623 )
				{
				};
				EditorActions.Register( __0x3065 );
			}
		}

		

		static void __0x3575()
		{
			
			{
				var __0x3066 = new EditorAction();
				__0x3066.Name = "Scene Display Development Data In Editor";
				__0x3066.ImageSmall = Properties.Resources.Default_16;
				__0x3066.ImageBig = Properties.Resources.Default_32;
				__0x3066.QatSupport = true;
				__0x3066.RibbonText = ("Development", "Data");
				__0x3066.ContextMenuText = "Display In Editor";
				__0x3066.GetState += delegate ( EditorAction.GetStateContext __0x3624 )
				{
					

					var __0x3067 = __0x3624.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3067 != null )
					{
						__0x3624.Enabled = true;
						__0x3624.Checked = __0x3067.DisplayDevelopmentDataInEditor;
					}
				};
				__0x3066.Click += delegate ( EditorAction.ClickContext __0x3625 )
				{
					var __0x3068 = __0x3625.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3069 = __0x3625.ObjectsInFocus.DocumentWindow.Document;

					var __0x3070 = __0x3068.DisplayDevelopmentDataInEditor;

					__0x3068.DisplayDevelopmentDataInEditor = !__0x3068.DisplayDevelopmentDataInEditor;

					var __0x3071 = (Metadata.Property)__0x3068.MetadataGetMemberBySignature( "property:DisplayDevelopmentDataInEditor" );
					var __0x3072 = new UndoActionPropertiesChange.Item( __0x3068, __0x3071, __0x3070, new object[ 0 ] );
					var __0x3073 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3072 } );
					__0x3069.UndoSystem.CommitAction( __0x3073 );
					__0x3069.Modified = true;
				};
				EditorActions.Register( __0x3066 );
			}

			
			{
				var __0x3074 = new EditorAction();
				__0x3074.Name = "Scene Display Development Data In Simulation";
				__0x3074.ImageSmall = Properties.Resources.Default_16;
				__0x3074.ImageBig = Properties.Resources.Default_32;
				__0x3074.QatSupport = true;
				__0x3074.RibbonText = ("Development", "Data");
				__0x3074.ContextMenuText = "Display In Simulation";
				__0x3074.GetState += delegate ( EditorAction.GetStateContext __0x3626 )
				{
					

					var __0x3075 = __0x3626.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3075 != null )
					{
						__0x3626.Enabled = true;
						__0x3626.Checked = __0x3075.DisplayDevelopmentDataInSimulation;
					}
				};
				__0x3074.Click += delegate ( EditorAction.ClickContext __0x3627 )
				{
					var __0x3076 = __0x3627.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3077 = __0x3627.ObjectsInFocus.DocumentWindow.Document;

					var __0x3078 = __0x3076.DisplayDevelopmentDataInSimulation;

					__0x3076.DisplayDevelopmentDataInSimulation = !__0x3076.DisplayDevelopmentDataInSimulation;

					var __0x3079 = (Metadata.Property)__0x3076.MetadataGetMemberBySignature( "property:DisplayDevelopmentDataInSimulation" );
					var __0x3080 = new UndoActionPropertiesChange.Item( __0x3076, __0x3079, __0x3078, new object[ 0 ] );
					var __0x3081 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3080 } );
					__0x3077.UndoSystem.CommitAction( __0x3081 );
					__0x3077.Modified = true;
				};
				EditorActions.Register( __0x3074 );
			}

			
			{
				var __0x3082 = new EditorAction();
				__0x3082.Name = "Scene Display Text Info";
				__0x3082.ImageSmall = Properties.Resources.Default_16;
				__0x3082.ImageBig = Properties.Resources.Default_32;
				__0x3082.QatSupport = true;
				__0x3082.RibbonText = ("Text", "Info");
				__0x3082.ContextMenuText = __0x3082.Name.Replace( "Scene Display ", "" );
				__0x3082.GetState += delegate ( EditorAction.GetStateContext __0x3628 )
				{
					var __0x3083 = __0x3628.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3083 != null )
					{
						__0x3628.Enabled = __0x3083.DisplayDevelopmentDataInEditor || __0x3083.DisplayDevelopmentDataInSimulation;
						__0x3628.Checked = __0x3628.Enabled && __0x3083.DisplayTextInfo;
					}
				};
				__0x3082.Click += delegate ( EditorAction.ClickContext __0x3629 )
				{
					var __0x3084 = __0x3629.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3085 = __0x3629.ObjectsInFocus.DocumentWindow.Document;

					var __0x3086 = __0x3084.DisplayTextInfo;

					__0x3084.DisplayTextInfo = !__0x3084.DisplayTextInfo;

					var __0x3087 = (Metadata.Property)__0x3084.MetadataGetMemberBySignature( "property:DisplayTextInfo" );
					var __0x3088 = new UndoActionPropertiesChange.Item( __0x3084, __0x3087, __0x3086, new object[ 0 ] );
					var __0x3089 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3088 } );
					__0x3085.UndoSystem.CommitAction( __0x3089 );
					__0x3085.Modified = true;
				};
				EditorActions.Register( __0x3082 );
			}

			
			{
				var __0x3090 = new EditorAction();
				__0x3090.Name = "Scene Display Labels";
				__0x3090.ImageSmall = Properties.Resources.Default_16;
				__0x3090.ImageBig = Properties.Resources.Default_32;
				__0x3090.QatSupport = true;
				__0x3090.RibbonText = ("Labels", "");
				__0x3090.ContextMenuText = __0x3090.Name.Replace( "Scene Display ", "" );
				__0x3090.GetState += delegate ( EditorAction.GetStateContext __0x3630 )
				{
					var __0x3091 = __0x3630.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3091 != null )
					{
						__0x3630.Enabled = __0x3091.DisplayDevelopmentDataInEditor || __0x3091.DisplayDevelopmentDataInSimulation;
						__0x3630.Checked = __0x3630.Enabled && __0x3091.DisplayLabels;
					}
				};
				__0x3090.Click += delegate ( EditorAction.ClickContext __0x3631 )
				{
					var __0x3092 = __0x3631.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3093 = __0x3631.ObjectsInFocus.DocumentWindow.Document;

					var __0x3094 = __0x3092.DisplayLabels;

					__0x3092.DisplayLabels = !__0x3092.DisplayLabels;

					var __0x3095 = (Metadata.Property)__0x3092.MetadataGetMemberBySignature( "property:DisplayLabels" );
					var __0x3096 = new UndoActionPropertiesChange.Item( __0x3092, __0x3095, __0x3094, new object[ 0 ] );
					var __0x3097 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3096 } );
					__0x3093.UndoSystem.CommitAction( __0x3097 );
					__0x3093.Modified = true;
				};
				EditorActions.Register( __0x3090 );
			}

			
			{
				var __0x3098 = new EditorAction();
				__0x3098.Name = "Scene Display Lights";
				__0x3098.ImageSmall = Properties.Resources.Default_16;
				__0x3098.ImageBig = Properties.Resources.Default_32;
				__0x3098.QatSupport = true;
				__0x3098.RibbonText = ("Lights", "");
				__0x3098.ContextMenuText = __0x3098.Name.Replace( "Scene Display ", "" );
				__0x3098.GetState += delegate ( EditorAction.GetStateContext __0x3632 )
				{
					var __0x3099 = __0x3632.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3099 != null )
					{
						__0x3632.Enabled = __0x3099.DisplayDevelopmentDataInEditor || __0x3099.DisplayDevelopmentDataInSimulation;
						__0x3632.Checked = __0x3632.Enabled && __0x3099.DisplayLights;
					}
				};
				__0x3098.Click += delegate ( EditorAction.ClickContext __0x3633 )
				{
					var __0x3100 = __0x3633.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3101 = __0x3633.ObjectsInFocus.DocumentWindow.Document;

					var __0x3102 = __0x3100.DisplayLights;

					__0x3100.DisplayLights = !__0x3100.DisplayLights;

					var __0x3103 = (Metadata.Property)__0x3100.MetadataGetMemberBySignature( "property:DisplayLights" );
					var __0x3104 = new UndoActionPropertiesChange.Item( __0x3100, __0x3103, __0x3102, new object[ 0 ] );
					var __0x3105 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3104 } );
					__0x3101.UndoSystem.CommitAction( __0x3105 );
					__0x3101.Modified = true;
				};
				EditorActions.Register( __0x3098 );
			}

			
			{
				var __0x3106 = new EditorAction();
				__0x3106.Name = "Scene Display Decals";
				__0x3106.ImageSmall = Properties.Resources.Default_16;
				__0x3106.ImageBig = Properties.Resources.Default_32;
				__0x3106.QatSupport = true;
				__0x3106.RibbonText = ("Decals", "");
				__0x3106.ContextMenuText = __0x3106.Name.Replace( "Scene Display ", "" );
				__0x3106.GetState += delegate ( EditorAction.GetStateContext __0x3634 )
				{
					var __0x3107 = __0x3634.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3107 != null )
					{
						__0x3634.Enabled = __0x3107.DisplayDevelopmentDataInEditor || __0x3107.DisplayDevelopmentDataInSimulation;
						__0x3634.Checked = __0x3634.Enabled && __0x3107.DisplayDecals;
					}
				};
				__0x3106.Click += delegate ( EditorAction.ClickContext __0x3635 )
				{
					var __0x3108 = __0x3635.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3109 = __0x3635.ObjectsInFocus.DocumentWindow.Document;

					var __0x3110 = __0x3108.DisplayDecals;

					__0x3108.DisplayDecals = !__0x3108.DisplayDecals;

					var __0x3111 = (Metadata.Property)__0x3108.MetadataGetMemberBySignature( "property:DisplayDecals" );
					var __0x3112 = new UndoActionPropertiesChange.Item( __0x3108, __0x3111, __0x3110, new object[ 0 ] );
					var __0x3113 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3112 } );
					__0x3109.UndoSystem.CommitAction( __0x3113 );
					__0x3109.Modified = true;
				};
				EditorActions.Register( __0x3106 );
			}

			
			{
				var __0x3114 = new EditorAction();
				__0x3114.Name = "Scene Display Reflection Probes";
				__0x3114.ImageSmall = Properties.Resources.Default_16;
				__0x3114.ImageBig = Properties.Resources.Default_32;
				__0x3114.QatSupport = true;
				__0x3114.RibbonText = ("Reflection", "Probes");
				__0x3114.ContextMenuText = __0x3114.Name.Replace( "Scene Display ", "" );
				__0x3114.GetState += delegate ( EditorAction.GetStateContext __0x3636 )
				{
					var __0x3115 = __0x3636.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3115 != null )
					{
						__0x3636.Enabled = __0x3115.DisplayDevelopmentDataInEditor || __0x3115.DisplayDevelopmentDataInSimulation;
						__0x3636.Checked = __0x3636.Enabled && __0x3115.DisplayReflectionProbes;
					}
				};
				__0x3114.Click += delegate ( EditorAction.ClickContext __0x3637 )
				{
					var __0x3116 = __0x3637.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3117 = __0x3637.ObjectsInFocus.DocumentWindow.Document;

					var __0x3118 = __0x3116.DisplayReflectionProbes;

					__0x3116.DisplayReflectionProbes = !__0x3116.DisplayReflectionProbes;

					var __0x3119 = (Metadata.Property)__0x3116.MetadataGetMemberBySignature( "property:DisplayReflectionProbes" );
					var __0x3120 = new UndoActionPropertiesChange.Item( __0x3116, __0x3119, __0x3118, new object[ 0 ] );
					var __0x3121 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3120 } );
					__0x3117.UndoSystem.CommitAction( __0x3121 );
					__0x3117.Modified = true;
				};
				EditorActions.Register( __0x3114 );
			}

			
			{
				var __0x3122 = new EditorAction();
				__0x3122.Name = "Scene Display Cameras";
				__0x3122.ImageSmall = Properties.Resources.Default_16;
				__0x3122.ImageBig = Properties.Resources.Default_32;
				__0x3122.QatSupport = true;
				__0x3122.RibbonText = ("Cameras", "");
				__0x3122.ContextMenuText = __0x3122.Name.Replace( "Scene Display ", "" );
				__0x3122.GetState += delegate ( EditorAction.GetStateContext __0x3638 )
				{
					var __0x3123 = __0x3638.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3123 != null )
					{
						__0x3638.Enabled = __0x3123.DisplayDevelopmentDataInEditor || __0x3123.DisplayDevelopmentDataInSimulation;
						__0x3638.Checked = __0x3638.Enabled && __0x3123.DisplayCameras;
					}
				};
				__0x3122.Click += delegate ( EditorAction.ClickContext __0x3639 )
				{
					var __0x3124 = __0x3639.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3125 = __0x3639.ObjectsInFocus.DocumentWindow.Document;

					var __0x3126 = __0x3124.DisplayCameras;

					__0x3124.DisplayCameras = !__0x3124.DisplayCameras;

					var __0x3127 = (Metadata.Property)__0x3124.MetadataGetMemberBySignature( "property:DisplayCameras" );
					var __0x3128 = new UndoActionPropertiesChange.Item( __0x3124, __0x3127, __0x3126, new object[ 0 ] );
					var __0x3129 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3128 } );
					__0x3125.UndoSystem.CommitAction( __0x3129 );
					__0x3125.Modified = true;
				};
				EditorActions.Register( __0x3122 );
			}

			
			{
				var __0x3130 = new EditorAction();
				__0x3130.Name = "Scene Display Physical Objects";
				__0x3130.ImageSmall = Properties.Resources.Default_16;
				__0x3130.ImageBig = Properties.Resources.Default_32;
				__0x3130.QatSupport = true;
				__0x3130.RibbonText = ("Physical", "Objects");
				__0x3130.ContextMenuText = __0x3130.Name.Replace( "Scene Display ", "" );
				__0x3130.GetState += delegate ( EditorAction.GetStateContext __0x3640 )
				{
					var __0x3131 = __0x3640.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3131 != null )
					{
						__0x3640.Enabled = __0x3131.DisplayDevelopmentDataInEditor || __0x3131.DisplayDevelopmentDataInSimulation;
						__0x3640.Checked = __0x3640.Enabled && __0x3131.DisplayPhysicalObjects;
					}
				};
				__0x3130.Click += delegate ( EditorAction.ClickContext __0x3641 )
				{
					var __0x3132 = __0x3641.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3133 = __0x3641.ObjectsInFocus.DocumentWindow.Document;

					var __0x3134 = __0x3132.DisplayPhysicalObjects;

					__0x3132.DisplayPhysicalObjects = !__0x3132.DisplayPhysicalObjects;

					var __0x3135 = (Metadata.Property)__0x3132.MetadataGetMemberBySignature( "property:DisplayPhysicalObjects" );
					var __0x3136 = new UndoActionPropertiesChange.Item( __0x3132, __0x3135, __0x3134, new object[ 0 ] );
					var __0x3137 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3136 } );
					__0x3133.UndoSystem.CommitAction( __0x3137 );
					__0x3133.Modified = true;
				};
				EditorActions.Register( __0x3130 );
			}

			
			{
				var __0x3138 = new EditorAction();
				__0x3138.Name = "Scene Display Areas";
				__0x3138.ImageSmall = Properties.Resources.Default_16;
				__0x3138.ImageBig = Properties.Resources.Default_32;
				__0x3138.QatSupport = true;
				__0x3138.RibbonText = ("Areas", "");
				__0x3138.ContextMenuText = __0x3138.Name.Replace( "Scene Display ", "" );
				__0x3138.GetState += delegate ( EditorAction.GetStateContext __0x3642 )
				{
					var __0x3139 = __0x3642.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3139 != null )
					{
						__0x3642.Enabled = __0x3139.DisplayDevelopmentDataInEditor || __0x3139.DisplayDevelopmentDataInSimulation;
						__0x3642.Checked = __0x3642.Enabled && __0x3139.DisplayAreas;
					}
				};
				__0x3138.Click += delegate ( EditorAction.ClickContext __0x3643 )
				{
					var __0x3140 = __0x3643.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3141 = __0x3643.ObjectsInFocus.DocumentWindow.Document;

					var __0x3142 = __0x3140.DisplayAreas;

					__0x3140.DisplayAreas = !__0x3140.DisplayAreas;

					var __0x3143 = (Metadata.Property)__0x3140.MetadataGetMemberBySignature( "property:DisplayAreas" );
					var __0x3144 = new UndoActionPropertiesChange.Item( __0x3140, __0x3143, __0x3142, new object[ 0 ] );
					var __0x3145 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3144 } );
					__0x3141.UndoSystem.CommitAction( __0x3145 );
					__0x3141.Modified = true;
				};
				EditorActions.Register( __0x3138 );
			}

			
			{
				var __0x3146 = new EditorAction();
				__0x3146.Name = "Scene Display Volumes";
				__0x3146.ImageSmall = Properties.Resources.Default_16;
				__0x3146.ImageBig = Properties.Resources.Default_32;
				__0x3146.QatSupport = true;
				__0x3146.RibbonText = ("Volumes", "");
				__0x3146.ContextMenuText = __0x3146.Name.Replace( "Scene Display ", "" );
				__0x3146.GetState += delegate ( EditorAction.GetStateContext __0x3644 )
				{
					var __0x3147 = __0x3644.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3147 != null )
					{
						__0x3644.Enabled = __0x3147.DisplayDevelopmentDataInEditor || __0x3147.DisplayDevelopmentDataInSimulation;
						__0x3644.Checked = __0x3644.Enabled && __0x3147.DisplayVolumes;
					}
				};
				__0x3146.Click += delegate ( EditorAction.ClickContext __0x3645 )
				{
					var __0x3148 = __0x3645.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3149 = __0x3645.ObjectsInFocus.DocumentWindow.Document;

					var __0x3150 = __0x3148.DisplayVolumes;

					__0x3148.DisplayVolumes = !__0x3148.DisplayVolumes;

					var __0x3151 = (Metadata.Property)__0x3148.MetadataGetMemberBySignature( "property:DisplayVolumes" );
					var __0x3152 = new UndoActionPropertiesChange.Item( __0x3148, __0x3151, __0x3150, new object[ 0 ] );
					var __0x3153 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3152 } );
					__0x3149.UndoSystem.CommitAction( __0x3153 );
					__0x3149.Modified = true;
				};
				EditorActions.Register( __0x3146 );
			}

			
			{
				var __0x3154 = new EditorAction();
				__0x3154.Name = "Scene Display Sensors";
				__0x3154.ImageSmall = Properties.Resources.Default_16;
				__0x3154.ImageBig = Properties.Resources.Default_32;
				__0x3154.QatSupport = true;
				__0x3154.RibbonText = ("Sensors", "");
				__0x3154.ContextMenuText = __0x3154.Name.Replace( "Scene Display ", "" );
				__0x3154.GetState += delegate ( EditorAction.GetStateContext __0x3646 )
				{
					var __0x3155 = __0x3646.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3155 != null )
					{
						__0x3646.Enabled = __0x3155.DisplayDevelopmentDataInEditor || __0x3155.DisplayDevelopmentDataInSimulation;
						__0x3646.Checked = __0x3646.Enabled && __0x3155.DisplaySensors;
					}
				};
				__0x3154.Click += delegate ( EditorAction.ClickContext __0x3647 )
				{
					var __0x3156 = __0x3647.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3157 = __0x3647.ObjectsInFocus.DocumentWindow.Document;

					var __0x3158 = __0x3156.DisplaySensors;

					__0x3156.DisplaySensors = !__0x3156.DisplaySensors;

					var __0x3159 = (Metadata.Property)__0x3156.MetadataGetMemberBySignature( "property:DisplaySensors" );
					var __0x3160 = new UndoActionPropertiesChange.Item( __0x3156, __0x3159, __0x3158, new object[ 0 ] );
					var __0x3161 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3160 } );
					__0x3157.UndoSystem.CommitAction( __0x3161 );
					__0x3157.Modified = true;
				};
				EditorActions.Register( __0x3154 );
			}

			
			{
				var __0x3162 = new EditorAction();
				__0x3162.Name = "Scene Display Sound Sources";
				__0x3162.ImageSmall = Properties.Resources.Default_16;
				__0x3162.ImageBig = Properties.Resources.Default_32;
				__0x3162.QatSupport = true;
				__0x3162.RibbonText = ("Sound", "Sources");
				__0x3162.ContextMenuText = __0x3162.Name.Replace( "Scene Display ", "" );
				__0x3162.GetState += delegate ( EditorAction.GetStateContext __0x3648 )
				{
					var __0x3163 = __0x3648.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3163 != null )
					{
						__0x3648.Enabled = __0x3163.DisplayDevelopmentDataInEditor || __0x3163.DisplayDevelopmentDataInSimulation;
						__0x3648.Checked = __0x3648.Enabled && __0x3163.DisplaySoundSources;
					}
				};
				__0x3162.Click += delegate ( EditorAction.ClickContext __0x3649 )
				{
					var __0x3164 = __0x3649.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3165 = __0x3649.ObjectsInFocus.DocumentWindow.Document;

					var __0x3166 = __0x3164.DisplaySoundSources;

					__0x3164.DisplaySoundSources = !__0x3164.DisplaySoundSources;

					var __0x3167 = (Metadata.Property)__0x3164.MetadataGetMemberBySignature( "property:DisplaySoundSources" );
					var __0x3168 = new UndoActionPropertiesChange.Item( __0x3164, __0x3167, __0x3166, new object[ 0 ] );
					var __0x3169 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3168 } );
					__0x3165.UndoSystem.CommitAction( __0x3169 );
					__0x3165.Modified = true;
				};
				EditorActions.Register( __0x3162 );
			}

			
			{
				var __0x3170 = new EditorAction();
				__0x3170.Name = "Scene Display Object In Space Bounds";
				__0x3170.ImageSmall = Properties.Resources.Default_16;
				__0x3170.ImageBig = Properties.Resources.Default_32;
				__0x3170.QatSupport = true;
				__0x3170.RibbonText = ("Object", "Bounds");
				__0x3170.ContextMenuText = __0x3170.Name.Replace( "Scene Display ", "" );
				__0x3170.GetState += delegate ( EditorAction.GetStateContext __0x3650 )
				{
					var __0x3171 = __0x3650.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3171 != null )
					{
						__0x3650.Enabled = __0x3171.DisplayDevelopmentDataInEditor || __0x3171.DisplayDevelopmentDataInSimulation;
						__0x3650.Checked = __0x3650.Enabled && __0x3171.DisplayObjectInSpaceBounds;
					}
				};
				__0x3170.Click += delegate ( EditorAction.ClickContext __0x3651 )
				{
					var __0x3172 = __0x3651.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3173 = __0x3651.ObjectsInFocus.DocumentWindow.Document;

					var __0x3174 = __0x3172.DisplayObjectInSpaceBounds;

					__0x3172.DisplayObjectInSpaceBounds = !__0x3172.DisplayObjectInSpaceBounds;

					var __0x3175 = (Metadata.Property)__0x3172.MetadataGetMemberBySignature( "property:DisplayObjectInSpaceBounds" );
					var __0x3176 = new UndoActionPropertiesChange.Item( __0x3172, __0x3175, __0x3174, new object[ 0 ] );
					var __0x3177 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3176 } );
					__0x3173.UndoSystem.CommitAction( __0x3177 );
					__0x3173.Modified = true;
				};
				EditorActions.Register( __0x3170 );
			}

			
			{
				var __0x3178 = new EditorAction();
				__0x3178.Name = "Scene Display Scene Octree";
				__0x3178.ImageSmall = Properties.Resources.Default_16;
				__0x3178.ImageBig = Properties.Resources.Default_32;
				__0x3178.QatSupport = true;
				__0x3178.RibbonText = ("Scene", "Octree");
				__0x3178.ContextMenuText = __0x3178.Name.Replace( "Scene Display ", "" );
				__0x3178.GetState += delegate ( EditorAction.GetStateContext __0x3652 )
				{
					var __0x3179 = __0x3652.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3179 != null )
					{
						__0x3652.Enabled = __0x3179.DisplayDevelopmentDataInEditor || __0x3179.DisplayDevelopmentDataInSimulation;
						__0x3652.Checked = __0x3652.Enabled && __0x3179.DisplaySceneOctree;
					}
				};
				__0x3178.Click += delegate ( EditorAction.ClickContext __0x3653 )
				{
					var __0x3180 = __0x3653.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3181 = __0x3653.ObjectsInFocus.DocumentWindow.Document;

					var __0x3182 = __0x3180.DisplaySceneOctree;

					__0x3180.DisplaySceneOctree = !__0x3180.DisplaySceneOctree;

					var __0x3183 = (Metadata.Property)__0x3180.MetadataGetMemberBySignature( "property:DisplaySceneOctree" );
					var __0x3184 = new UndoActionPropertiesChange.Item( __0x3180, __0x3183, __0x3182, new object[ 0 ] );
					var __0x3185 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3184 } );
					__0x3181.UndoSystem.CommitAction( __0x3185 );
					__0x3181.Modified = true;
				};
				EditorActions.Register( __0x3178 );
			}

			
			{
				var __0x3186 = new EditorAction();
				__0x3186.Name = "Scene Frustum Culling Test";
				__0x3186.ImageSmall = Properties.Resources.Default_16;
				__0x3186.ImageBig = Properties.Resources.Default_32;
				__0x3186.QatSupport = true;
				__0x3186.RibbonText = ("Frustum", "Test");
				__0x3186.ContextMenuText = __0x3186.Name.Replace( "Scene ", "" );
				__0x3186.GetState += delegate ( EditorAction.GetStateContext __0x3654 )
				{
					var __0x3187 = __0x3654.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					if( __0x3187 != null )
					{
						__0x3654.Enabled = __0x3187.DisplayDevelopmentDataInEditor || __0x3187.DisplayDevelopmentDataInSimulation;
						__0x3654.Checked = __0x3654.Enabled && __0x3187.FrustumCullingTest;
					}
				};
				__0x3186.Click += delegate ( EditorAction.ClickContext __0x3655 )
				{
					var __0x3188 = __0x3655.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Scene;
					var __0x3189 = __0x3655.ObjectsInFocus.DocumentWindow.Document;

					var __0x3190 = __0x3188.FrustumCullingTest;

					__0x3188.FrustumCullingTest = !__0x3188.FrustumCullingTest;

					var __0x3191 = (Metadata.Property)__0x3188.MetadataGetMemberBySignature( "property:FrustumCullingTest" );
					var __0x3192 = new UndoActionPropertiesChange.Item( __0x3188, __0x3191, __0x3190, new object[ 0 ] );
					var __0x3193 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3192 } );
					__0x3189.UndoSystem.CommitAction( __0x3193 );
					__0x3189.Modified = true;
				};
				EditorActions.Register( __0x3186 );
			}

			
			
			
			
			
			
			
			
			
			
			

			

			
			
			
			
			
			
			
			
			
			

			
			

			

			

			
			
			
			
			
			
			
			


			
			foreach( var __0x3540 in (RenderingPipeline_Basic.DebugModeEnum[])Enum.GetValues( typeof( RenderingPipeline_Basic.DebugModeEnum ) ) )
			{
				var __0x3194 = EnumUtility.GetValueDisplayName( __0x3540 );
				

				var __0x3195 = new EditorAction();
				__0x3195.Name = "Rendering Debug Mode " + __0x3194;
				__0x3195.ImageSmall = Properties.Resources.Default_16;
				__0x3195.ImageBig = Properties.Resources.Default_32;
				__0x3195.QatSupport = true;
				__0x3195.RibbonText = (__0x3194, "");
				__0x3195.ContextMenuText = __0x3194;
				__0x3195.UserData = __0x3540;
				__0x3195.GetState += delegate ( EditorAction.GetStateContext __0x3656 )
				{
					var __0x3196 = __0x3656.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					var __0x3197 = __0x3196?.RenderingPipeline.Value as RenderingPipeline_Basic;

					if( __0x3197 != null )
					{
						var __0x3198 = (RenderingPipeline_Basic.DebugModeEnum)__0x3656.Action.UserData;

						__0x3656.Enabled = true;

						if( __0x3197.DebugMode.Value == __0x3198 )
							__0x3656.Checked = true;
					}
				};
				__0x3195.Click += delegate ( EditorAction.ClickContext __0x3657 )
				{
					var __0x3199 = __0x3657.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Scene;
					var __0x3200 = __0x3199?.RenderingPipeline.Value as RenderingPipeline_Basic;

					if( __0x3200 != null )
					{
						var __0x3201 = __0x3657.ObjectsInFocus.DocumentWindow.Document;

						var __0x3202 = __0x3200.DebugMode;

						var __0x3203 = (RenderingPipeline_Basic.DebugModeEnum)__0x3657.Action.UserData;
						__0x3200.DebugMode = __0x3203;

						var __0x3204 = (Metadata.Property)__0x3200.MetadataGetMemberBySignature( "property:DebugMode" );
						var __0x3205 = new UndoActionPropertiesChange.Item( __0x3200, __0x3204, __0x3202, new object[ 0 ] );
						var __0x3206 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3205 } );
						__0x3201.UndoSystem.CommitAction( __0x3206 );
						__0x3201.Modified = true;
					}
				};
				EditorActions.Register( __0x3195 );
			}

			
			{
				var __0x3207 = new EditorAction();
				__0x3207.Name = "Snap All Axes";
				__0x3207.Description = "Aligns the position of the selected objects by all axes.";
				__0x3207.ImageSmall = Properties.Resources.MoveSnap_16;
				__0x3207.ImageBig = Properties.Resources.MoveSnap_32;
				__0x3207.QatSupport = true;
				__0x3207.RibbonText = ("Snap", "All");
				EditorActions.Register( __0x3207 );
			}

			
			{
				var __0x3208 = new EditorAction();
				__0x3208.Name = "Snap X";
				__0x3208.Description = "Aligns the position of the selected objects by X axis.";
				__0x3208.ImageSmall = Properties.Resources.MoveSnapX_16;
				__0x3208.ImageBig = Properties.Resources.MoveSnapX_32;
				__0x3208.QatSupport = true;
				__0x3208.RibbonText = ("Snap X", "");
				EditorActions.Register( __0x3208 );
			}

			
			{
				var __0x3209 = new EditorAction();
				__0x3209.Name = "Snap Y";
				__0x3209.Description = "Aligns the position of the selected objects by Y axis.";
				__0x3209.ImageSmall = Properties.Resources.MoveSnapY_16;
				__0x3209.ImageBig = Properties.Resources.MoveSnapY_32;
				__0x3209.QatSupport = true;
				__0x3209.RibbonText = ("Snap Y", "");
				EditorActions.Register( __0x3209 );
			}

			
			{
				var __0x3210 = new EditorAction();
				__0x3210.Name = "Snap Z";
				__0x3210.Description = "Aligns the position of the selected objects by Z axis.";
				__0x3210.ImageSmall = Properties.Resources.MoveSnapZ_16;
				__0x3210.ImageBig = Properties.Resources.MoveSnapZ_32;
				__0x3210.QatSupport = true;
				__0x3210.RibbonText = ("Snap Z", "");
				EditorActions.Register( __0x3210 );
			}

			
			{
				var __0x3211 = new EditorAction();
				__0x3211.Name = "Focus Camera On Selected Object";
				__0x3211.Description = "Focuses the camera on the selected object.";
				__0x3211.ImageSmall = Properties.Resources.Focus_16;
				__0x3211.ImageBig = Properties.Resources.Focus_32;
				__0x3211.QatSupport = true;
				__0x3211.RibbonText = ("Focus", "Camera");
				__0x3211.ShortcutKeys = new Keys[] { Keys.F };
				EditorActions.Register( __0x3211 );
			}

			
			{
				var __0x3212 = new EditorAction();
				__0x3212.Name = "Create Objects By Drag & Drop";
				__0x3212.Description = "The mode of creation objects by Drag & Drop.";
				
				__0x3212.ImageBig = Properties.Resources.CreationObjectsDrop_32;
				__0x3212.QatSupport = true;
				__0x3212.RibbonText = ("Drop", "");
				
				
				EditorActions.Register( __0x3212 );
			}

			
			{
				var __0x3213 = new EditorAction();
				__0x3213.Name = "Create Objects By Click";
				__0x3213.Description = "The mode of creation objects by mouse click.";
				
				__0x3213.ImageBig = Properties.Resources.CreationObjectsClick_32;
				__0x3213.QatSupport = true;
				__0x3213.RibbonText = ("Click", "");
				
				
				EditorActions.Register( __0x3213 );
			}

			
			{
				var __0x3214 = new EditorAction();
				__0x3214.Name = "Create Objects By Brush";
				__0x3214.Description = "The mode of creation objects by brush.";
				
				__0x3214.ImageBig = Properties.Resources.CreationObjectsBrush_32;
				__0x3214.QatSupport = true;
				__0x3214.RibbonText = ("Brush", "");
				
				
				EditorActions.Register( __0x3214 );
			}

			
			{
				var __0x3215 = new EditorAction();
				__0x3215.Name = "Create Objects Brush Radius";
				__0x3215.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3215.Slider.Minimum = 0;
				__0x3215.Slider.Maximum = 100;
				__0x3215.Slider.ExponentialPower = 3;
				__0x3215.Slider.Value = SceneEditor.CreateObjectsBrushRadius;
				
				
				__0x3215.RibbonText = ("Radius", "");
				EditorActions.Register( __0x3215 );
			}

			
			{
				var __0x3216 = new EditorAction();
				__0x3216.Name = "Create Objects Brush Strength";
				__0x3216.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3216.Slider.Value = SceneEditor.CreateObjectsBrushStrength;
				
				
				__0x3216.RibbonText = ("Strength", "");
				EditorActions.Register( __0x3216 );
			}

			
			{
				var __0x3217 = new EditorAction();
				__0x3217.Name = "Create Objects Brush Hardness";
				__0x3217.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3217.Slider.Value = SceneEditor.CreateObjectsBrushHardness;
				
				
				__0x3217.RibbonText = ("Hardness", "");
				EditorActions.Register( __0x3217 );
			}

			
			{
				var __0x3218 = new EditorAction();
				__0x3218.Name = "Create Objects Destination";
				__0x3218.ActionType = EditorAction.ActionTypeEnum.ListBox;
				
				
				
				__0x3218.RibbonText = ("Destination", "");
				EditorActions.Register( __0x3218 );
			}

			
			{
				var __0x3219 = new EditorAction();
				__0x3219.Name = "Simulate Physics";
				__0x3219.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3219.ImageSmall = Properties.Resources.SimulatePhysics_16;
				__0x3219.ImageBig = Properties.Resources.SimulatePhysics_32;
				__0x3219.QatSupport = true;
				__0x3219.RibbonText = ("Simulate", "Physics");
				__0x3219.Description = "Simulates the physics of selected objects.";
				__0x3219.GetState += delegate ( EditorAction.GetStateContext __0x3658 )
				{
					var __0x3220 = __0x3658.ObjectsInFocus.DocumentWindow as SceneEditor;
					if( __0x3220 != null )
					{
						object[] __0x3221 = __0x3658.ObjectsInFocus.Objects;
						__0x3658.Enabled = Array.Exists( __0x3221, delegate ( object __0x3659 )
						{
							var __0x3222 = __0x3659 as ObjectInSpace;
							if( __0x3222 != null )
							{
								if( __0x3222 is IPhysicalObject || __0x3222.GetComponent<IPhysicalObject>( true ) != null )
								{
									
									if( !( __0x3222 is SoftBody ) && __0x3222.GetComponent<SoftBody>( true ) == null )
										return true;
								}
							}
							return false;
						} );

						__0x3658.Checked = __0x3220.WorkareaModeName == "Simulate Physics";
					}
				};
				__0x3219.Click += delegate ( EditorAction.ClickContext __0x3660 )
				{
					var __0x3223 = __0x3660.ObjectsInFocus.DocumentWindow as SceneEditor;
					if( __0x3223 != null )
					{
						if( __0x3223.WorkareaModeName != "Simulate Physics" )
						{
							var __0x3224 = new SimulatePhysicsWorkareaMode( __0x3223 );
							__0x3223.WorkareaModeSet( "Simulate Physics", __0x3224 );
							__0x3223.transformToolModeRestore = __0x3223.TransformTool.Mode;
							__0x3223.TransformTool.Mode = TransformTool.ModeEnum.Undefined;
						}
						else
						{
							__0x3223.WorkareaModeSet( "" );
							__0x3223.TransformTool.Mode = __0x3223.transformToolModeRestore;
						}
					}
				};
				EditorActions.Register( __0x3219 );
			}




			
			
			{
				var __0x3225 = new EditorAction();
				__0x3225.Name = "New Object";
				__0x3225.Description = "Add new object to the selected object.";
				__0x3225.ImageSmall = Properties.Resources.New_16;
				__0x3225.ImageBig = Properties.Resources.New_32;
				__0x3225.QatSupport = true;
				
				__0x3225.RibbonText = ("New", "Object");
				__0x3225.GetState += delegate ( EditorAction.GetStateContext __0x3661 )
				{
					var __0x3226 = __0x3661.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component;
					if( __0x3226 != null )
					{
						var __0x3227 = new List<Component>();
						if( __0x3661.ObjectsInFocus.DocumentWindow.SelectedObjects.Length != 0 )
							__0x3227.AddRange( __0x3661.ObjectsInFocus.DocumentWindow.SelectedObjects.OfType<Component>() );
						else
							__0x3227.Add( __0x3226 );

						if( __0x3227.Count != 0 )
							__0x3661.Enabled = true;
					}
				};
				__0x3225.Click += delegate ( EditorAction.ClickContext __0x3662 )
				{
					var __0x3228 = __0x3662.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component;
					if( __0x3228 != null )
					{
						var __0x3229 = new List<Component>();
						if( __0x3662.ObjectsInFocus.DocumentWindow.SelectedObjects.Length != 0 )
							__0x3229.AddRange( __0x3662.ObjectsInFocus.DocumentWindow.SelectedObjects.OfType<Component>() );
						else
							__0x3229.Add( __0x3228 );

						if( __0x3229.Count != 0 )
						{
							var __0x3230 = new NewObjectWindow.CreationDataClass();
							__0x3230.initDocumentWindow = __0x3662.ObjectsInFocus.DocumentWindow;
							__0x3230.initParentObjects = new List<object>();
							__0x3230.initParentObjects.AddRange( __0x3229 );

							EditorAPI.OpenNewObjectWindow( __0x3230 );
						}
					}
				};
				EditorActions.Register( __0x3225 );
			}
		}

		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		

		

		static void __0x3576()
		{
			
			{
				var __0x3231 = new EditorAction();
				__0x3231.Name = "Mesh Display Pivot";
				__0x3231.Description = "Whether to display the pivot.";
				
				__0x3231.ImageBig = Properties.Resources.MeshPivot_32;
				__0x3231.QatSupport = true;
				__0x3231.RibbonText = ("Pivot", "");
				__0x3231.GetState += delegate ( EditorAction.GetStateContext __0x3663 )
				{
					var __0x3232 = __0x3663.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3232 != null )
					{
						__0x3663.Enabled = true;
						__0x3663.Checked = __0x3232.EditorDisplayPivot;
					}
				};
				__0x3231.Click += delegate ( EditorAction.ClickContext __0x3664 )
				{
					var __0x3233 = __0x3664.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3234 = __0x3664.ObjectsInFocus.DocumentWindow.Document;

					var __0x3235 = __0x3233.EditorDisplayPivot;

					__0x3233.EditorDisplayPivot = !__0x3233.EditorDisplayPivot;

					var __0x3236 = (Metadata.Property)__0x3233.MetadataGetMemberBySignature( "property:EditorDisplayPivot" );
					var __0x3237 = new UndoActionPropertiesChange.Item( __0x3233, __0x3236, __0x3235, new object[ 0 ] );
					var __0x3238 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3237 } );
					__0x3234.UndoSystem.CommitAction( __0x3238 );
					__0x3234.Modified = true;
				};
				EditorActions.Register( __0x3231 );
			}

			
			{
				var __0x3239 = new EditorAction();
				__0x3239.Name = "Mesh Display Bounds";
				__0x3239.Description = "Whether to display the bounding box.";
				
				__0x3239.ImageBig = Properties.Resources.MeshBounds_32;
				__0x3239.QatSupport = true;
				__0x3239.RibbonText = ("Bounds", "");
				__0x3239.GetState += delegate ( EditorAction.GetStateContext __0x3665 )
				{
					var __0x3240 = __0x3665.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3240 != null )
					{
						__0x3665.Enabled = true;
						__0x3665.Checked = __0x3240.EditorDisplayBounds;
					}
				};
				__0x3239.Click += delegate ( EditorAction.ClickContext __0x3666 )
				{
					var __0x3241 = __0x3666.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3242 = __0x3666.ObjectsInFocus.DocumentWindow.Document;

					var __0x3243 = __0x3241.EditorDisplayBounds;

					__0x3241.EditorDisplayBounds = !__0x3241.EditorDisplayBounds;

					var __0x3244 = (Metadata.Property)__0x3241.MetadataGetMemberBySignature( "property:EditorDisplayBounds" );
					var __0x3245 = new UndoActionPropertiesChange.Item( __0x3241, __0x3244, __0x3243, new object[ 0 ] );
					var __0x3246 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3245 } );
					__0x3242.UndoSystem.CommitAction( __0x3246 );
					__0x3242.Modified = true;
				};
				EditorActions.Register( __0x3239 );
			}

			
			{
				var __0x3247 = new EditorAction();
				__0x3247.Name = "Mesh Display Triangles";
				__0x3247.Description = "Whether to display the triangles.";
				
				__0x3247.ImageBig = Properties.Resources.MeshTriangles_32;
				__0x3247.QatSupport = true;
				__0x3247.RibbonText = ("Triangles", "");
				__0x3247.GetState += delegate ( EditorAction.GetStateContext __0x3667 )
				{
					var __0x3248 = __0x3667.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3248 != null )
					{
						__0x3667.Enabled = true;
						__0x3667.Checked = __0x3248.EditorDisplayTriangles;
					}
				};
				__0x3247.Click += delegate ( EditorAction.ClickContext __0x3668 )
				{
					var __0x3249 = __0x3668.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3250 = __0x3668.ObjectsInFocus.DocumentWindow.Document;

					var __0x3251 = __0x3249.EditorDisplayTriangles;

					__0x3249.EditorDisplayTriangles = !__0x3249.EditorDisplayTriangles;

					var __0x3252 = (Metadata.Property)__0x3249.MetadataGetMemberBySignature( "property:EditorDisplayTriangles" );
					var __0x3253 = new UndoActionPropertiesChange.Item( __0x3249, __0x3252, __0x3251, new object[ 0 ] );
					var __0x3254 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3253 } );
					__0x3250.UndoSystem.CommitAction( __0x3254 );
					__0x3250.Modified = true;
				};
				EditorActions.Register( __0x3247 );
			}

			
			{
				var __0x3255 = new EditorAction();
				__0x3255.Name = "Mesh Display Vertices";
				__0x3255.Description = "Whether to display the vertices.";
				
				__0x3255.ImageBig = Properties.Resources.MeshVertices_32;
				__0x3255.QatSupport = true;
				__0x3255.RibbonText = ("Vertices", "");
				__0x3255.GetState += delegate ( EditorAction.GetStateContext __0x3669 )
				{
					var __0x3256 = __0x3669.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3256 != null )
					{
						__0x3669.Enabled = true;
						__0x3669.Checked = __0x3256.EditorDisplayVertices;
					}
				};
				__0x3255.Click += delegate ( EditorAction.ClickContext __0x3670 )
				{
					var __0x3257 = __0x3670.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3258 = __0x3670.ObjectsInFocus.DocumentWindow.Document;

					var __0x3259 = __0x3257.EditorDisplayVertices;

					__0x3257.EditorDisplayVertices = !__0x3257.EditorDisplayVertices;

					var __0x3260 = (Metadata.Property)__0x3257.MetadataGetMemberBySignature( "property:EditorDisplayVertices" );
					var __0x3261 = new UndoActionPropertiesChange.Item( __0x3257, __0x3260, __0x3259, new object[ 0 ] );
					var __0x3262 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3261 } );
					__0x3258.UndoSystem.CommitAction( __0x3262 );
					__0x3258.Modified = true;
				};
				EditorActions.Register( __0x3255 );
			}

			
			{
				var __0x3263 = new EditorAction();
				__0x3263.Name = "Mesh Display Normals";
				__0x3263.Description = "Whether to display the normals.";
				
				__0x3263.ImageBig = Properties.Resources.MeshNormals_32;
				__0x3263.QatSupport = true;
				__0x3263.RibbonText = ("Normals", "");
				__0x3263.GetState += delegate ( EditorAction.GetStateContext __0x3671 )
				{
					var __0x3264 = __0x3671.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3264 != null && __0x3264.Result != null && ( __0x3264.Result.ExtractedVerticesComponents & StandardVertex.Components.Normal ) != 0 )
					{
						__0x3671.Enabled = true;
						__0x3671.Checked = __0x3264.EditorDisplayNormals;
					}
				};
				__0x3263.Click += delegate ( EditorAction.ClickContext __0x3672 )
				{
					var __0x3265 = __0x3672.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3266 = __0x3672.ObjectsInFocus.DocumentWindow.Document;

					var __0x3267 = __0x3265.EditorDisplayNormals;

					__0x3265.EditorDisplayNormals = !__0x3265.EditorDisplayNormals;

					var __0x3268 = (Metadata.Property)__0x3265.MetadataGetMemberBySignature( "property:EditorDisplayNormals" );
					var __0x3269 = new UndoActionPropertiesChange.Item( __0x3265, __0x3268, __0x3267, new object[ 0 ] );
					var __0x3270 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3269 } );
					__0x3266.UndoSystem.CommitAction( __0x3270 );
					__0x3266.Modified = true;
				};
				EditorActions.Register( __0x3263 );
			}

			
			{
				var __0x3271 = new EditorAction();
				__0x3271.Name = "Mesh Display Tangents";
				__0x3271.Description = "Whether to display the tangent vectors.";
				
				__0x3271.ImageBig = Properties.Resources.MeshTangents_32;
				__0x3271.QatSupport = true;
				__0x3271.RibbonText = ("Tangents", "");
				__0x3271.GetState += delegate ( EditorAction.GetStateContext __0x3673 )
				{
					var __0x3272 = __0x3673.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3272 != null && __0x3272.Result != null && ( __0x3272.Result.ExtractedVerticesComponents & StandardVertex.Components.Tangent ) != 0 )
					{
						__0x3673.Enabled = true;
						__0x3673.Checked = __0x3272.EditorDisplayTangents;
					}
				};
				__0x3271.Click += delegate ( EditorAction.ClickContext __0x3674 )
				{
					var __0x3273 = __0x3674.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3274 = __0x3674.ObjectsInFocus.DocumentWindow.Document;

					var __0x3275 = __0x3273.EditorDisplayTangents;

					__0x3273.EditorDisplayTangents = !__0x3273.EditorDisplayTangents;

					var __0x3276 = (Metadata.Property)__0x3273.MetadataGetMemberBySignature( "property:EditorDisplayTangents" );
					var __0x3277 = new UndoActionPropertiesChange.Item( __0x3273, __0x3276, __0x3275, new object[ 0 ] );
					var __0x3278 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3277 } );
					__0x3274.UndoSystem.CommitAction( __0x3278 );
					__0x3274.Modified = true;
				};
				EditorActions.Register( __0x3271 );
			}

			
			{
				var __0x3279 = new EditorAction();
				__0x3279.Name = "Mesh Display Binormals";
				__0x3279.Description = "Whether to display the binormal vectors.";
				
				__0x3279.ImageBig = Properties.Resources.MeshBinormals_32;
				__0x3279.QatSupport = true;
				__0x3279.RibbonText = ("Binormals", "");
				__0x3279.GetState += delegate ( EditorAction.GetStateContext __0x3675 )
				{
					var __0x3280 = __0x3675.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3280 != null && __0x3280.Result != null && ( __0x3280.Result.ExtractedVerticesComponents & StandardVertex.Components.Normal ) != 0 && ( __0x3280.Result.ExtractedVerticesComponents & StandardVertex.Components.Tangent ) != 0 )
					{
						__0x3675.Enabled = true;
						__0x3675.Checked = __0x3280.EditorDisplayBinormals;
					}
				};
				__0x3279.Click += delegate ( EditorAction.ClickContext __0x3676 )
				{
					var __0x3281 = __0x3676.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3282 = __0x3676.ObjectsInFocus.DocumentWindow.Document;

					var __0x3283 = __0x3281.EditorDisplayBinormals;

					__0x3281.EditorDisplayBinormals = !__0x3281.EditorDisplayBinormals;

					var __0x3284 = (Metadata.Property)__0x3281.MetadataGetMemberBySignature( "property:EditorDisplayBinormals" );
					var __0x3285 = new UndoActionPropertiesChange.Item( __0x3281, __0x3284, __0x3283, new object[ 0 ] );
					var __0x3286 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3285 } );
					__0x3282.UndoSystem.CommitAction( __0x3286 );
					__0x3282.Modified = true;
				};
				EditorActions.Register( __0x3279 );
			}

			
			{
				var __0x3287 = new EditorAction();
				__0x3287.Name = "Mesh Display Vertex Color";
				__0x3287.Description = "Whether to display the vertex color.";
				
				__0x3287.ImageBig = Properties.Resources.MeshVertexColor_32;
				__0x3287.QatSupport = true;
				__0x3287.RibbonText = ("Vertex", "Color");
				__0x3287.GetState += delegate ( EditorAction.GetStateContext __0x3677 )
				{
					var __0x3288 = __0x3677.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3288 != null && __0x3288.Result != null && ( __0x3288.Result.ExtractedVerticesComponents & StandardVertex.Components.Color ) != 0 )
					{
						__0x3677.Enabled = true;
						__0x3677.Checked = __0x3288.EditorDisplayVertexColor;
					}
				};
				__0x3287.Click += delegate ( EditorAction.ClickContext __0x3678 )
				{
					var __0x3289 = __0x3678.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3290 = __0x3678.ObjectsInFocus.DocumentWindow.Document;

					var __0x3291 = __0x3289.EditorDisplayVertexColor;

					__0x3289.EditorDisplayVertexColor = !__0x3289.EditorDisplayVertexColor;

					var __0x3292 = (Metadata.Property)__0x3289.MetadataGetMemberBySignature( "property:EditorDisplayVertexColor" );
					var __0x3293 = new UndoActionPropertiesChange.Item( __0x3289, __0x3292, __0x3291, new object[ 0 ] );
					var __0x3294 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3293 } );
					__0x3290.UndoSystem.CommitAction( __0x3294 );
					__0x3290.Modified = true;
				};
				EditorActions.Register( __0x3287 );
			}

			
			{
				var __0x3295 = new EditorAction();
				__0x3295.Name = "Mesh Display UV";
				__0x3295.Description = "Specifies a texture coordinates channel to display.";
				
				__0x3295.ImageBig = Properties.Resources.MeshUV_32;
				__0x3295.QatSupport = true;
				__0x3295.RibbonText = ("UV", "");
				__0x3295.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3295.DropDownContextMenu = new KryptonContextMenu();

				var __0x3296 = new List<KryptonContextMenuItemBase>();

				System.EventHandler __0x3297 = delegate ( object __0x3679, EventArgs __0x3680 )
				{
					var __0x3298 = (KryptonContextMenuItem)__0x3679;

					var __0x3299 = EditorAPI.SelectedDocumentWindow;
					var __0x3300 = __0x3299?.ObjectOfWindow as Mesh;
					if( __0x3300 != null )
					{
						var __0x3301 = (int)__0x3298.Tag;
						var __0x3302 = __0x3300.EditorDisplayUV;
						if( __0x3301 != __0x3302 )
						{
							__0x3300.EditorDisplayUV = __0x3301;

							var __0x3303 = (Metadata.Property)__0x3300.MetadataGetMemberBySignature( "property:EditorDisplayUV" );
							var __0x3304 = new UndoActionPropertiesChange.Item( __0x3300, __0x3303, __0x3302, new object[ 0 ] );
							var __0x3305 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3304 } );
							__0x3299.Document.UndoSystem.CommitAction( __0x3305 );
							__0x3299.Document.Modified = true;
						}
					}
				};

				
				{
					var __0x3306 = new KryptonContextMenuItem( "None", null, __0x3297 );
					__0x3306.Tag = -1;
					__0x3296.Add( __0x3306 );
				}

				__0x3296.Add( new KryptonContextMenuSeparator() );

				
				for( int __0x3307 = 0; __0x3307 < 4; __0x3307++ )
				{
					var __0x3308 = new KryptonContextMenuItem( "UV Channel " + __0x3307.ToString(), null, __0x3297 );
					__0x3308.Tag = __0x3307;
					__0x3296.Add( __0x3308 );
				}

				__0x3295.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3296.ToArray() ) );

				__0x3295.GetState += delegate ( EditorAction.GetStateContext __0x3681 )
				{
					var __0x3309 = __0x3681.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3309 != null && __0x3309.Result != null )
					{
						var __0x3310 = __0x3309.Result.ExtractedVerticesComponents;
						if( ( __0x3310 & StandardVertex.Components.TexCoord0 ) != 0 || ( __0x3310 & StandardVertex.Components.TexCoord1 ) != 0 ||
							( __0x3310 & StandardVertex.Components.TexCoord2 ) != 0 || ( __0x3310 & StandardVertex.Components.TexCoord3 ) != 0 )
						{
							__0x3681.Enabled = true;

							var __0x3311 = ( (KryptonContextMenuItems)__0x3681.Action.DropDownContextMenu.Items[ 0 ] ).Items;
							foreach( var __0x3541 in __0x3311 )
							{
								if( __0x3541.Tag != null )
								{
									var __0x3312 = (KryptonContextMenuItem)__0x3541;

									int __0x3313 = (int)__0x3541.Tag;
									switch( __0x3313 )
									{
									case 0: __0x3312.Visible = ( StandardVertex.Components.TexCoord0 & __0x3310 ) != 0; break;
									case 1: __0x3312.Visible = ( StandardVertex.Components.TexCoord1 & __0x3310 ) != 0; break;
									case 2: __0x3312.Visible = ( StandardVertex.Components.TexCoord2 & __0x3310 ) != 0; break;
									case 3: __0x3312.Visible = ( StandardVertex.Components.TexCoord3 & __0x3310 ) != 0; break;
									}
									__0x3312.Checked = __0x3309.EditorDisplayUV == __0x3313;
								}
							}

							
							__0x3681.Checked = __0x3309.EditorDisplayUV != -1;
						}
					}
				};

				EditorActions.Register( __0x3295 );
			}

			
			{
				var __0x3314 = new EditorAction();
				__0x3314.Name = "Mesh Display LOD";
				__0x3314.Description = "Specifies a level of detail to display.";
				
				__0x3314.ImageBig = Properties.Resources.LOD_32;
				__0x3314.QatSupport = true;
				__0x3314.RibbonText = ("LOD", "");
				__0x3314.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3314.DropDownContextMenu = new KryptonContextMenu();

				var __0x3315 = new List<KryptonContextMenuItemBase>();

				System.EventHandler __0x3316 = delegate ( object __0x3682, EventArgs __0x3683 )
				{
					var __0x3317 = (KryptonContextMenuItem)__0x3682;

					var __0x3318 = EditorAPI.SelectedDocumentWindow;
					var __0x3319 = __0x3318?.ObjectOfWindow as Mesh;
					if( __0x3319 != null )
					{
						var __0x3320 = (int)__0x3317.Tag;
						var __0x3321 = __0x3319.EditorDisplayLOD;
						if( __0x3320 != __0x3321 )
						{
							__0x3319.EditorDisplayLOD = __0x3320;

							var __0x3322 = (Metadata.Property)__0x3319.MetadataGetMemberBySignature( "property:EditorDisplayLOD" );
							var __0x3323 = new UndoActionPropertiesChange.Item( __0x3319, __0x3322, __0x3321, new object[ 0 ] );
							var __0x3324 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3323 } );
							__0x3318.Document.UndoSystem.CommitAction( __0x3324 );
							__0x3318.Document.Modified = true;
						}
					}
				};

				int __0x3325 = 40;
				for( int __0x3326 = 0; __0x3326 < __0x3325; __0x3326++ )
				{
					var __0x3327 = new KryptonContextMenuItem( $"LOD {__0x3326}", null, __0x3316 );
					__0x3327.Tag = __0x3326;
					__0x3315.Add( __0x3327 );
				}

				__0x3314.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3315.ToArray() ) );

				__0x3314.GetState += delegate ( EditorAction.GetStateContext __0x3684 )
				{
					var __0x3328 = __0x3684.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					var __0x3329 = __0x3328?.Result?.MeshData?.LODs;
					if( __0x3329 != null )
					{
						__0x3684.Enabled = true;

						int __0x3330 = __0x3329.Length + 1;

						var __0x3331 = ( (KryptonContextMenuItems)__0x3684.Action.DropDownContextMenu.Items[ 0 ] ).Items;
						foreach( var __0x3542 in __0x3331 )
						{
							int __0x3332 = (int)__0x3542.Tag;
							__0x3542.Visible = __0x3332 < __0x3330;

							var __0x3333 = (KryptonContextMenuItem)__0x3542;
							__0x3333.Checked = __0x3332 == __0x3328.EditorDisplayLOD;
						}

						__0x3684.Checked = __0x3328.EditorDisplayLOD != 0;
					}
				};

				EditorActions.Register( __0x3314 );
			}

			
			{
				const string __0x3334 = "Collision Definition";

				var __0x3335 = new EditorAction();
				__0x3335.Name = "Mesh Display Collision";
				__0x3335.Description = "Whether to display the collision.";
				
				__0x3335.ImageBig = Properties.Resources.MeshCollision_32;
				__0x3335.QatSupport = true;
				__0x3335.RibbonText = ("Collision", "");
				__0x3335.GetState += delegate ( EditorAction.GetStateContext __0x3685 )
				{
					var __0x3336 = __0x3685.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3336 != null && __0x3336.GetComponent( __0x3334 ) as RigidBody != null )
					{
						__0x3685.Enabled = true;
						__0x3685.Checked = __0x3336.EditorDisplayCollision;
					}
				};
				__0x3335.Click += delegate ( EditorAction.ClickContext __0x3686 )
				{
					var __0x3337 = __0x3686.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3338 = __0x3686.ObjectsInFocus.DocumentWindow.Document;

					var __0x3339 = __0x3337.EditorDisplayCollision;

					__0x3337.EditorDisplayCollision = !__0x3337.EditorDisplayCollision;

					var __0x3340 = (Metadata.Property)__0x3337.MetadataGetMemberBySignature( "property:EditorDisplayCollision" );
					var __0x3341 = new UndoActionPropertiesChange.Item( __0x3337, __0x3340, __0x3339, new object[ 0 ] );
					var __0x3342 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3341 } );
					__0x3338.UndoSystem.CommitAction( __0x3342 );
					__0x3338.Modified = true;
				};
				EditorActions.Register( __0x3335 );
			}

			
			{
				var __0x3343 = new EditorAction();
				__0x3343.Name = "Mesh Display Skeleton";
				__0x3343.Description = "Whether to display the skeleton.";
				
				__0x3343.ImageBig = Properties.Resources.MeshSkeleton_32;
				__0x3343.QatSupport = true;
				__0x3343.RibbonText = ("Skeleton", "");
				__0x3343.GetState += delegate ( EditorAction.GetStateContext __0x3687 )
				{
					var __0x3344 = __0x3687.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3344 != null && __0x3344.Result != null && __0x3344.GetComponent<Skeleton>() != null )
					{
						__0x3687.Enabled = true;
						__0x3687.Checked = __0x3344.EditorDisplaySkeleton;
					}
				};
				__0x3343.Click += delegate ( EditorAction.ClickContext __0x3688 )
				{
					var __0x3345 = __0x3688.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
					var __0x3346 = __0x3688.ObjectsInFocus.DocumentWindow.Document;

					var __0x3347 = __0x3345.EditorDisplaySkeleton;

					__0x3345.EditorDisplaySkeleton = !__0x3345.EditorDisplaySkeleton;

					var __0x3348 = (Metadata.Property)__0x3345.MetadataGetMemberBySignature( "property:EditorDisplaySkeleton" );
					var __0x3349 = new UndoActionPropertiesChange.Item( __0x3345, __0x3348, __0x3347, new object[ 0 ] );
					var __0x3350 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3349 } );
					__0x3346.UndoSystem.CommitAction( __0x3350 );
					__0x3346.Modified = true;
				};
				EditorActions.Register( __0x3343 );
			}

			
			{
				var __0x3351 = new EditorAction();
				__0x3351.Name = "Mesh Play Animation";
				__0x3351.Description = "Specifies the animation to play.";
				
				__0x3351.ImageBig = Properties.Resources.MeshAnimation_32;
				__0x3351.QatSupport = true;
				__0x3351.RibbonText = ("Animation", "");
				__0x3351.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3351.DropDownContextMenu = new KryptonContextMenu();

				
				{
					var __0x3352 = new List<KryptonContextMenuItemBase>();
					__0x3352.Add( new KryptonContextMenuSeparator() );
					__0x3351.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3352.ToArray() ) );
				}

				__0x3351.DropDownContextMenu.Opening += delegate ( object __0x3689, CancelEventArgs __0x3690 )
				{
					var __0x3353 = (KryptonContextMenu)__0x3689;

					__0x3353.Items.Clear();

					var __0x3354 = ((DocumentInstance, Mesh))__0x3353.Tag;
					var __0x3355 = __0x3354.Item1;
					var __0x3356 = __0x3354.Item2;
					var __0x3357 = __0x3356.GetComponents<Animation>( checkChildren: true );

					var __0x3358 = new List<KryptonContextMenuItemBase>();

					void Handler( object __0x3691, EventArgs __0x3692 )
					{
						var __0x3359 = (KryptonContextMenuItem)__0x3691;

						var __0x3360 = (string)__0x3359.Tag;
						var __0x3361 = __0x3356.EditorPlayAnimation;
						if( __0x3360 != __0x3361 )
						{
							__0x3356.EditorPlayAnimation = __0x3360;

							var __0x3362 = (Metadata.Property)__0x3356.MetadataGetMemberBySignature( "property:EditorPlayAnimation" );
							var __0x3363 = new UndoActionPropertiesChange.Item( __0x3356, __0x3362, __0x3361, new object[ 0 ] );
							var __0x3364 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3363 } );
							__0x3355.UndoSystem.CommitAction( __0x3364 );
							__0x3355.Modified = true;
						}
					}

					
					{
						var __0x3365 = new KryptonContextMenuItem( "None", null, Handler );
						__0x3365.Tag = "";
						__0x3365.Checked = string.IsNullOrEmpty( __0x3356.EditorPlayAnimation );
						__0x3358.Add( __0x3365 );
					}

					__0x3358.Add( new KryptonContextMenuSeparator() );

					
					foreach( var __0x3543 in __0x3357 )
					{
						var __0x3366 = new KryptonContextMenuItem( string.IsNullOrEmpty( __0x3543.Name ) ? "'No name'" : __0x3543.Name, null, Handler );
						__0x3366.Tag = __0x3543.GetPathFromRoot();
						__0x3366.Checked = __0x3356.EditorPlayAnimation == __0x3543.GetPathFromRoot();
						__0x3358.Add( __0x3366 );
					}

					__0x3353.Items.Add( new KryptonContextMenuItems( __0x3358.ToArray() ) );
				};

				__0x3351.GetState += delegate ( EditorAction.GetStateContext __0x3693 )
				{
					var __0x3367 = __0x3693.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3367 != null && __0x3367.Result != null )
					{
						var __0x3368 = __0x3367.GetComponents<Animation>( checkChildren: true );
						var __0x3369 = __0x3368.Length != 0;

						__0x3693.Enabled = __0x3369;
						__0x3693.Checked = __0x3368.Any( __0x3694 => __0x3694.GetPathFromRoot() == __0x3367.EditorPlayAnimation );

						__0x3351.DropDownContextMenu.Tag = (__0x3693.ObjectsInFocus.DocumentWindow.Document, __0x3367);
					}
				};

				EditorActions.Register( __0x3351 );
			}

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			

			

			
			
			
			
			
			
			
			

			
			{
				const string __0x3370 = "Collision Definition";

				var __0x3371 = new EditorAction();
				__0x3371.Name = "Mesh Add Collision";
				__0x3371.ImageSmall = Properties.Resources.Add_16;
				__0x3371.ImageBig = Properties.Resources.MeshCollision_32;
				__0x3371.QatSupport = true;
				__0x3371.RibbonText = ("Add", "Collision");
				__0x3371.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3371.Description = "Precalculates the collision of the mesh.";

				
				

				__0x3371.GetState += delegate ( EditorAction.GetStateContext __0x3695 )
				{
					var __0x3372 = __0x3695.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3372 != null )
						__0x3695.Enabled = __0x3372.GetComponent( __0x3370 ) as RigidBody == null;
				};

				
				{
					__0x3371.DropDownContextMenu = new KryptonContextMenu();

					var __0x3373 = new List<KryptonContextMenuItemBase>();

					System.EventHandler __0x3374 = delegate ( object __0x3696, EventArgs __0x3697 )
					{
						var __0x3375 = (KryptonContextMenuItem)__0x3696;

						var __0x3376 = EditorAPI.SelectedDocumentWindow;
						EditorPhysicsUtility.AddCollision( __0x3376, (string)__0x3375.Tag );
					};

					var __0x3377 = new string[] { "Box", "Sphere", "Capsule", "Cylinder", "Convex", "Convex Decomposition", "Mesh" };
					foreach( var __0x3544 in __0x3377 )
					{
						var __0x3378 = new KryptonContextMenuItem( __0x3544, null, __0x3374 );
						__0x3378.Tag = __0x3544;
						__0x3373.Add( __0x3378 );
					}

					__0x3371.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3373.ToArray() ) );
				}

				EditorActions.Register( __0x3371 );
			}

			
			{
				const string __0x3379 = "Collision Definition";

				var __0x3380 = new EditorAction();
				__0x3380.Name = "Mesh Delete Collision";
				__0x3380.ImageSmall = Properties.Resources.Delete_16;
				__0x3380.ImageBig = Properties.Resources.Delete_32;
				__0x3380.QatSupport = true;
				__0x3380.RibbonText = ("Delete", "Collision");
				__0x3380.Description = "Deletes the collision body of the mesh.";

				
				

				__0x3380.GetState += delegate ( EditorAction.GetStateContext __0x3698 )
				{
					var __0x3381 = __0x3698.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3381 != null )
						__0x3698.Enabled = __0x3381.GetComponent( __0x3379 ) as RigidBody != null;
				};
				__0x3380.Click += delegate ( EditorAction.ClickContext __0x3699 )
				{
					var __0x3382 = string.Format( EditorLocalization.Translate( "General", "Delete \'{0}\'?" ), __0x3379 );
					if( EditorMessageBox.ShowQuestion( __0x3382, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						var __0x3383 = __0x3699.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Mesh;
						var __0x3384 = __0x3383.GetComponent( __0x3379 ) as RigidBody;
						if( __0x3384 != null )
						{
							var __0x3385 = __0x3699.ObjectsInFocus.DocumentWindow.Document;
							var __0x3386 = new UndoActionComponentCreateDelete( __0x3385, new Component[] { __0x3384 }, false );
							__0x3385.UndoSystem.CommitAction( __0x3386 );
							__0x3385.Modified = true;
						}
					}
				};
				EditorActions.Register( __0x3380 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			

			

			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			

			
			
			
			
			
			

			foreach( var __0x3545 in GetAllMeshModifiers() )
				__0x3584( __0x3545, false );

			
			{
				var __0x3387 = new EditorAction();
				__0x3387.Name = "Mesh Add Paint Layer";
				__0x3387.ImageSmall = Properties.Resources.Layers_16;
				__0x3387.ImageBig = Properties.Resources.Layers_32;
				__0x3387.QatSupport = true;
				__0x3387.RibbonText = ("Add", "Layer");
				__0x3387.Description = "Adds a masked paint layer.";
				__0x3387.GetState += delegate ( EditorAction.GetStateContext __0x3700 )
				{
					var __0x3388 = __0x3700.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3388 != null )
						__0x3700.Enabled = true;
				};
				__0x3387.Click += delegate ( EditorAction.ClickContext __0x3701 )
				{
					var __0x3389 = __0x3701.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3389 != null )
					{
						var __0x3390 = __0x3701.ObjectsInFocus.DocumentWindow;

						var __0x3391 = __0x3389.CreateComponent<PaintLayer>( enabled: false );
						__0x3391.Name = __0x3583( __0x3391 );
						__0x3391.Enabled = true;

						__0x3390.Focus();

						
						var __0x3392 = new Component[] { __0x3391 };
						var __0x3393 = __0x3390.Document;
						var __0x3394 = new UndoActionComponentCreateDelete( __0x3393, __0x3392, true );
						__0x3393.CommitUndoAction( __0x3394 );
						__0x3390.SelectObjects( __0x3392.ToArray() );
					}
				};
				EditorActions.Register( __0x3387 );
			}

			AssemblyUtility.RegisterAssemblyEvent += __0x3577;
			AssemblyUtility.UnregisterAssemblyEvent += __0x3578;
		}

		private static void __0x3577( Assembly __0x3702, Assembly __0x3703 )
		{
			
			foreach( var __0x3546 in __0x3702.GetTypes() )
			{
				try
				{
					if( typeof( MeshModifier ).IsAssignableFrom( __0x3546 ) && !__0x3546.IsAbstract )
					{
						var __0x3395 = MetadataManager.GetTypeOfNetType( __0x3546 );
						if( __0x3395 != null )
							__0x3584( __0x3395, false );
					}
				}
				catch { }
			}
		}

		private static void __0x3578( Assembly __0x3704, Assembly __0x3705 )
		{
			
			foreach( var __0x3547 in __0x3704.GetTypes() )
			{
				try
				{
					if( typeof( MeshModifier ).IsAssignableFrom( __0x3547 ) && !__0x3547.IsAbstract )
					{
						var __0x3396 = MetadataManager.GetTypeOfNetType( __0x3547 );
						if( __0x3396 != null )
							__0x3584( __0x3396, true );
					}
				}
				catch { }
			}
		}

		

		static void __0x3579()
		{
			
			{
				var __0x3397 = new EditorAction();
				__0x3397.Name = "Add C# files to Project.csproj";
				__0x3397.Description = "Adds C# files to the Project.csproj.";
				__0x3397.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3397.ImageSmall = Properties.Resources.Add_16;
				__0x3397.ImageBig = Properties.Resources.Add_32;
				__0x3397.QatSupport = true;
				__0x3397.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;
				__0x3397.RibbonText = ("Add", "");

				__0x3397.GetState += delegate ( EditorAction.GetStateContext __0x3706 )
				{
					if( __0x3706.ObjectsInFocus.DocumentWindow == null && __0x3706.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3398 = __0x3706.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3548 in __0x3398 )
						{
							if( __0x3548.IsDirectory )
							{
								bool __0x3399 = false;

								if( __0x3706.Holder == EditorAction.HolderEnum.ContextMenu )
								{
									var __0x3400 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
									var __0x3401 = Directory.GetFiles( __0x3548.FullPath, "*.cs", SearchOption.AllDirectories );
									var __0x3402 = __0x3401.Any( __0x3707 => !__0x3400.Contains( __0x3707 ) );
									if( !__0x3402 )
										__0x3399 = true;
								}

								if( !__0x3399 )
								{
									__0x3706.Enabled = true;
									break;
								}
							}

							if( !__0x3548.IsDirectory && Path.GetExtension( __0x3548.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3403 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3548.FullPath );
								if( !__0x3403 )
								{
									__0x3706.Enabled = true;
									break;
								}
							}
						}
					}
				};

				__0x3397.Click += delegate ( EditorAction.ClickContext __0x3708 )
				{
					if( __0x3708.ObjectsInFocus.DocumentWindow == null && __0x3708.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3404 = new ESet<string>();

						var __0x3405 = __0x3708.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3549 in __0x3405 )
						{
							if( __0x3549.IsDirectory )
							{
								var __0x3406 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
								var __0x3407 = Directory.GetFiles( __0x3549.FullPath, "*.cs", SearchOption.AllDirectories );
								foreach( var __0x3550 in __0x3407 )
								{
									if( !__0x3406.Contains( __0x3550 ) )
										__0x3404.AddWithCheckAlreadyContained( __0x3550 );
								}
							}

							if( !__0x3549.IsDirectory && Path.GetExtension( __0x3549.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3408 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3549.FullPath );
								if( !__0x3408 )
									__0x3404.Add( __0x3549.FullPath );
							}
						}

						if( __0x3404.Count != 0 )
						{
							if( CSharpProjectFileUtility.UpdateProjectFile( __0x3404, null, out var error ) )
							{
								if( __0x3404.Count > 1 )
									Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
								else
									Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
							}
							else
								Log.Warning( error );
						}
					}
				};

				EditorActions.Register( __0x3397 );
			}

			
			{
				var __0x3409 = new EditorAction();
				__0x3409.Name = "Remove C# files from Project.csproj";
				__0x3409.Description = "Removes C# files from the Project.csproj.";
				__0x3409.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3409.ImageSmall = Properties.Resources.Delete_16;
				__0x3409.ImageBig = Properties.Resources.Delete_32;
				__0x3409.QatSupport = true;
				__0x3409.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;
				__0x3409.RibbonText = ("Remove", "");

				__0x3409.GetState += delegate ( EditorAction.GetStateContext __0x3709 )
				{
					if( __0x3709.ObjectsInFocus.DocumentWindow == null && __0x3709.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3410 = __0x3709.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3551 in __0x3410 )
						{
							if( __0x3551.IsDirectory )
							{
								bool __0x3411 = false;

								if( __0x3709.Holder == EditorAction.HolderEnum.ContextMenu )
								{
									var __0x3412 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
									var __0x3413 = Directory.GetFiles( __0x3551.FullPath, "*.cs", SearchOption.AllDirectories );
									var __0x3414 = __0x3413.Any( __0x3710 => __0x3412.Contains( __0x3710 ) );
									if( !__0x3414 )
										__0x3411 = true;
								}

								if( !__0x3411 )
								{
									__0x3709.Enabled = true;
									break;
								}
							}

							if( !__0x3551.IsDirectory && Path.GetExtension( __0x3551.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3415 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3551.FullPath );
								if( __0x3415 )
								{
									__0x3709.Enabled = true;
									break;
								}
							}
						}
					}
				};

				__0x3409.Click += delegate ( EditorAction.ClickContext __0x3711 )
				{
					if( __0x3711.ObjectsInFocus.DocumentWindow == null && __0x3711.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3416 = new ESet<string>();

						var __0x3417 = __0x3711.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3552 in __0x3417 )
						{
							if( __0x3552.IsDirectory )
							{
								var __0x3418 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
								var __0x3419 = Directory.GetFiles( __0x3552.FullPath, "*.cs", SearchOption.AllDirectories );
								foreach( var __0x3553 in __0x3419 )
								{
									if( __0x3418.Contains( __0x3553 ) )
										__0x3416.AddWithCheckAlreadyContained( __0x3553 );
								}
							}

							if( !__0x3552.IsDirectory && Path.GetExtension( __0x3552.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3420 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3552.FullPath );
								if( __0x3420 )
									__0x3416.Add( __0x3552.FullPath );
							}
						}

						if( __0x3416.Count != 0 )
						{
							if( CSharpProjectFileUtility.UpdateProjectFile( null, __0x3416, out var error ) )
							{
								if( __0x3416.Count > 1 )
									Log.Info( EditorLocalization.Translate( "General", "Items have been removed from the Project.csproj." ) );
								else
									Log.Info( EditorLocalization.Translate( "General", "The item has been removed from the Project.csproj." ) );
							}
							else
								Log.Warning( error );
						}
					}
				};

				EditorActions.Register( __0x3409 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			{
				var __0x3421 = new EditorAction();
				__0x3421.Name = "Build Project's Solution";
				__0x3421.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3421.ImageSmall = Properties.Resources.Build_16;
				__0x3421.ImageSmallDark = Properties.Resources.Build_16_Dark;
				__0x3421.ImageBig = Properties.Resources.Build_32;
				__0x3421.ImageBigDark = Properties.Resources.Build_32_Dark;
				__0x3421.QatSupport = true;
				__0x3421.QatAddByDefault = true;
				
				__0x3421.RibbonText = ("Build", "Solution");
				__0x3421.Description = "Builds the project's solution and reloads opened resources to update.";
				
				__0x3421.GetState += delegate ( EditorAction.GetStateContext __0x3712 )
				{
					__0x3712.Enabled = true;
				};
				__0x3421.Click += delegate ( EditorAction.ClickContext __0x3713 )
				{
					EditorAPI.BuildProjectSolution( true );
				};
				EditorActions.Register( __0x3421 );
			}

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3422 = new EditorAction();
				__0x3422.Name = "Open Sources Solution in External IDE";
				__0x3422.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3422.ImageSmall = Properties.Resources.External_16;
				__0x3422.ImageBig = Properties.Resources.External_32;
				__0x3422.QatSupport = true;
				__0x3422.RibbonText = ("Sources", "Solution");
				__0x3422.Description = "Opens Sources solution in an external IDE.";
				__0x3422.GetState += delegate ( EditorAction.GetStateContext __0x3714 )
				{
					__0x3714.Enabled = true;
				};
				__0x3422.Click += delegate ( EditorAction.ClickContext __0x3715 )
				{
					string __0x3423 = Path.GetDirectoryName( VirtualFileSystem.Directories.Project );
					Win32Utility.ShellExecuteEx( null, __0x3423 );

					
				};
				EditorActions.Register( __0x3422 );
			}

			
			{
				var __0x3424 = new EditorAction_NewResource( typeof( NewResourceType_CSharpClass ) );
				__0x3424.Name = "C# File";
				__0x3424.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3424.Description = "Creates a new C# file in the project.";
				__0x3424.RibbonText = ("C# File", "");
				
				__0x3424.ImageSmall = Properties.Resources.NewCSharp_16;
				__0x3424.ImageBig = Properties.Resources.NewCSharp_32;
				EditorActions.Register( __0x3424 );
			}

			
			{
				var __0x3425 = new EditorAction_NewResource( typeof( CSharpScript ) );
				__0x3425.Name = "C# Script";
				__0x3425.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3425.Description = "Creates a new C# script file.";
				__0x3425.RibbonText = ("C#", "Script");
				
				__0x3425.ImageSmall = Properties.Resources.NewCSharp_16;
				__0x3425.ImageBig = Properties.Resources.NewCSharp_32;
				EditorActions.Register( __0x3425 );
			}

			
			{
				var __0x3426 = new EditorAction_NewResource( typeof( FlowGraph ) );
				__0x3426.Name = "Flow Graph";
				__0x3426.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3426.Description = "Creates a new flow graph file.";
				__0x3426.RibbonText = ("Flow", "Graph");
				EditorActions.Register( __0x3426 );
			}

			
			{
				var __0x3427 = new EditorAction();
				__0x3427.Name = "Comment Selection";
				__0x3427.Description = "Comments the selected text.";
				__0x3427.ImageSmall = Properties.Resources.Comment_16;
				__0x3427.ImageBig = Properties.Resources.Comment_32;
				__0x3427.ShortcutKeys = new Keys[] { Keys.Control | Keys.K };
				__0x3427.QatSupport = true;
				__0x3427.RibbonText = ("Comment", "");
				EditorActions.Register( __0x3427 );
			}

			
			{
				var __0x3428 = new EditorAction();
				__0x3428.Name = "Uncomment Selection";
				__0x3428.Description = "Uncomments the selected text.";
				__0x3428.ImageSmall = Properties.Resources.Uncomment_16;
				__0x3428.ImageBig = Properties.Resources.Uncomment_32;
				__0x3428.ShortcutKeys = new Keys[] { Keys.Control | Keys.U };
				__0x3428.QatSupport = true;
				__0x3428.RibbonText = ("Uncomment", "");
				EditorActions.Register( __0x3428 );
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3429 = new EditorAction();
				__0x3429.Name = "Format Document";
				__0x3429.Description = "Does auto formatting of selected text.";
				__0x3429.ImageSmall = Properties.Resources.FormatDocument_16;
				__0x3429.ImageBig = Properties.Resources.FormatDocument_32;
				__0x3429.ShortcutKeys = new Keys[] { Keys.Control | Keys.R };
				__0x3429.QatSupport = true;
				__0x3429.RibbonText = ("Format", "");
				EditorActions.Register( __0x3429 );
			}

			
			{
				var __0x3430 = new EditorAction();
				__0x3430.Name = "Go To Definition";
				
				
				
				__0x3430.ShortcutKeys = new Keys[] { Keys.Alt | Keys.Z, Keys.F12 };
				__0x3430.QatSupport = true;
				__0x3430.RibbonText = ("Definition", "");
				EditorActions.Register( __0x3430 );
			}

			
			{
				var __0x3431 = new EditorAction();
				__0x3431.Name = "Add Property Code";
				__0x3431.Description = "Adds property code for a component class.";
				__0x3431.ImageSmall = Properties.Resources.New_16;
				__0x3431.ImageBig = Properties.Resources.New_32;
				
				__0x3431.QatSupport = true;
				__0x3431.RibbonText = ("Add", "Property");
				EditorActions.Register( __0x3431 );
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

		}

		

		class __0x3774
		{
			public string name;
			public bool isState;
			public ICollection<string> fileNames;

			public __0x3774( string name, bool isState )
			{
				this.name = name;
				this.isState = isState;
			}
		}

		

		class __0x3775
		{
			public int size;
			public bool isDelete;
			public ICollection<string> fileNames;

			public __0x3775( int size, bool isDelete )
			{
				this.size = size;
				this.isDelete = isDelete;
			}
		}

		static void __0x3580()
		{
			
			{
				var __0x3432 = new EditorAction();
				__0x3432.Name = "Image Compression";
				__0x3432.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3432.ImageSmall = Properties.Resources.Compress_16;
				__0x3432.ImageBig = Properties.Resources.Compress_32;
				__0x3432.QatSupport = true;
				__0x3432.RibbonText = ("Image", "Compression");
				__0x3432.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3432.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;

				System.EventHandler __0x3433 = delegate ( object __0x3716, EventArgs __0x3717 )
				{
					var __0x3434 = (KryptonContextMenuItem)__0x3716;
					var __0x3435 = (__0x3774)__0x3434.Tag;

					if( __0x3435.isState )
					{
						var __0x3436 = __0x3435.name;
						if( __0x3436 == "Auto" )
							__0x3436 = "";

						foreach( var __0x3554 in __0x3435.fileNames )
						{
							
							if( !ImageSettingsFile.SetParameter( __0x3554, "Compression", __0x3436, out var error ) )
							{
								Log.Error( error );
								return;
							}

							
							if( !ImageComponent.DeleteCompressedFile( __0x3554, out error ) )
							{
								Log.Error( error );
								return;
							}

							
							var __0x3437 = ResourceManager.GetByName( __0x3554 );
							var __0x3438 = __0x3437?.PrimaryInstance?.ResultComponent as ImageComponent;
							if( __0x3438 != null )
								__0x3438.ShouldRecompile = true;
						}
					}
					else if( __0x3435.name == "Update" )
					{
						foreach( var __0x3555 in __0x3435.fileNames )
						{
							
							if( !ImageComponent.DeleteCompressedFile( __0x3555, out var error ) )
							{
								Log.Error( error );
								return;
							}

							
							var __0x3439 = ResourceManager.GetByName( __0x3555 );
							var __0x3440 = __0x3439?.PrimaryInstance?.ResultComponent as ImageComponent;
							if( __0x3440 != null )
								__0x3440.ShouldRecompile = true;
						}
					}

				};

				{
					var __0x3441 = new List<KryptonContextMenuItemBase>();

					
					var __0x3442 = new List<string>();
					__0x3442.Add( "Auto" );
					__0x3442.Add( "NoCompression" );
					__0x3442.Add( "DXT1" );
					__0x3442.Add( "DXT5" );
					__0x3442.Add( "NormalMap" );
					foreach( var __0x3556 in __0x3442 )
					{
						var __0x3443 = new KryptonContextMenuItem( EditorLocalization.Translate( "ImageCompression", TypeUtility.DisplayNameAddSpaces( __0x3556 ) ), null, __0x3433 );
						__0x3443.Tag = new __0x3774( __0x3556, true );
						__0x3441.Add( __0x3443 );
					}

					__0x3441.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x3444 = new KryptonContextMenuItem( EditorLocalization.Translate( "ImageCompression", "Update" ), null, __0x3433 );
						__0x3444.Tag = new __0x3774( "Update", false );
						__0x3441.Add( __0x3444 );
					}

					__0x3432.DropDownContextMenu = new KryptonContextMenu();
					__0x3432.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3441.ToArray() ) );
				}

				__0x3432.GetState += delegate ( EditorAction.GetStateContext __0x3718 )
				{
					if( __0x3718.ObjectsInFocus.DocumentWindow == null && __0x3718.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3445 = new List<string>();

						var __0x3446 = __0x3718.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3557 in __0x3446 )
						{
							if( !__0x3557.IsDirectory )
							{
								var __0x3447 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x3557.FullPath ) );
								if( __0x3447?.Name == "Image" )
								{
									var __0x3448 = VirtualPathUtility.GetVirtualPathByReal( __0x3557.FullPath );
									if( !string.IsNullOrEmpty( __0x3448 ) )
										__0x3445.Add( __0x3448 );
								}
							}
						}

						if( __0x3445.Count != 0 )
						{
							__0x3718.Enabled = true;

							string[] __0x3449 = new string[ __0x3445.Count ];
							for( int __0x3450 = 0; __0x3450 < __0x3449.Length; __0x3450++ )
							{
								var __0x3451 = ImageSettingsFile.GetParameter( __0x3445[ __0x3450 ], "Compression", out var error );
								if( string.IsNullOrEmpty( __0x3451 ) )
									__0x3451 = "Auto";
								__0x3449[ __0x3450 ] = __0x3451;
							}

							var __0x3452 = (KryptonContextMenuItems)__0x3432.DropDownContextMenu.Items[ 0 ];
							foreach( var __0x3558 in __0x3452.Items )
							{
								var __0x3453 = __0x3558 as KryptonContextMenuItem;
								if( __0x3453 != null )
								{
									var __0x3454 = (__0x3774)__0x3453.Tag;
									__0x3454.fileNames = __0x3445;

									__0x3453.Checked = __0x3449.Any( __0x3719 => __0x3719 == __0x3454.name );
								}
							}
						}
					}
				};

				EditorActions.Register( __0x3432 );
			}

			
			{
				var __0x3455 = new EditorAction();
				__0x3455.Name = "Process Environment Cubemap";
				__0x3455.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3455.ImageSmall = Properties.Resources.Default_16;
				__0x3455.ImageBig = Properties.Resources.Default_32;
				__0x3455.QatSupport = true;
				__0x3455.RibbonText = ("Process", "Env Cubemap");
				__0x3455.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3455.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;

				System.EventHandler __0x3456 = delegate ( object __0x3720, EventArgs __0x3721 )
				{
					var __0x3457 = (KryptonContextMenuItem)__0x3720;
					var __0x3458 = (__0x3775)__0x3457.Tag;

					if( !__0x3458.isDelete )
					{
						foreach( var __0x3559 in __0x3458.fileNames )
						{
							if( !CubemapProcessing.GetOrGenerate( __0x3559, true, __0x3458.size, out _, out _, out var error ) )
							{
								Log.Error( error );
								break;
							}
						}
					}
					else
					{
						var __0x3459 = new List<string>();
						foreach( var __0x3560 in __0x3458.fileNames )
						{
							var __0x3460 = new string[] { "_Gen.info", "_GenEnv.dds", "_GenIrr.dds" };
							foreach( var __0x3561 in __0x3460 )
							{
								var __0x3461 = VirtualPathUtility.GetRealPathByVirtual( __0x3560 + __0x3561 );
								if( File.Exists( __0x3461 ) )
									__0x3459.Add( __0x3461 );
							}
						}

						var __0x3462 = EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Are you sure you want to delete these files?" );
						if( EditorMessageBox.ShowQuestion( __0x3462, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
						{
							try
							{
								foreach( var __0x3562 in __0x3459 )
									File.Delete( __0x3562 );
							}
							catch( Exception e )
							{
								Log.Error( e.Message );
							}
						}
					}
				};

				{
					var __0x3463 = new List<KryptonContextMenuItemBase>();

					var __0x3464 = new List<int>();
					__0x3464.Add( 0 );
					__0x3464.Add( 64 );
					__0x3464.Add( 128 );
					__0x3464.Add( 256 );
					__0x3464.Add( 512 );
					__0x3464.Add( 1024 );
					__0x3464.Add( 2048 );
					__0x3464.Add( 4096 );
					__0x3464.Add( 8192 );
					foreach( var __0x3563 in __0x3464 )
					{
						var __0x3465 = __0x3563.ToString();
						if( __0x3563 == 0 )
							__0x3465 = EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Auto Size" );

						var __0x3466 = new KryptonContextMenuItem( __0x3465, null, __0x3456 );
						__0x3466.Tag = new __0x3775( __0x3563, false );
						__0x3463.Add( __0x3466 );
					}

					__0x3463.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x3467 = new KryptonContextMenuItem( EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Delete" ), null, __0x3456 );
						__0x3467.Tag = new __0x3775( 0, true );
						__0x3463.Add( __0x3467 );
					}

					__0x3455.DropDownContextMenu = new KryptonContextMenu();
					__0x3455.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3463.ToArray() ) );
				}

				__0x3455.GetState += delegate ( EditorAction.GetStateContext __0x3722 )
				{
					if( __0x3722.ObjectsInFocus.DocumentWindow == null && __0x3722.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3468 = new List<string>();

						var __0x3469 = __0x3722.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3564 in __0x3469 )
						{
							if( !__0x3564.IsDirectory )
							{
								var __0x3470 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x3564.FullPath ) );
								if( __0x3470?.Name == "Image" )
								{
									var __0x3471 = VirtualPathUtility.GetVirtualPathByReal( __0x3564.FullPath );
									if( !string.IsNullOrEmpty( __0x3471 ) )
										__0x3468.Add( __0x3471 );
								}
							}
						}

						if( __0x3468.Count != 0 )
						{
							__0x3722.Enabled = true;

							var __0x3472 = (KryptonContextMenuItems)__0x3455.DropDownContextMenu.Items[ 0 ];
							foreach( var __0x3565 in __0x3472.Items )
							{
								var __0x3473 = __0x3565 as KryptonContextMenuItem;
								if( __0x3473 != null )
								{
									var __0x3474 = (__0x3775)__0x3473.Tag;
									__0x3474.fileNames = __0x3468;

									if( __0x3474.isDelete )
									{
										bool __0x3475 = false;
										foreach( var __0x3566 in __0x3468 )
										{
											var __0x3476 = new string[] { "_Gen.info", "_GenEnv.dds", "_GenIrr.dds" };
											foreach( var __0x3567 in __0x3476 )
											{
												var __0x3477 = __0x3566 + __0x3567;
												if( VirtualFile.Exists( __0x3477 ) )
												{
													__0x3475 = true;
													break;
												}
											}
										}
										__0x3473.Enabled = __0x3475;
									}
								}
							}
						}
					}
				};

				EditorActions.Register( __0x3455 );
			}
		}

		

		static void __0x3581()
		{
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3478 = new EditorAction();
				__0x3478.Name = "Create NeoAxis Baking File";
				__0x3478.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3478.ImageSmall = Properties.Resources.Package_16;
				__0x3478.ImageBig = Properties.Resources.Package_32;
				__0x3478.QatSupport = true;
				
				__0x3478.RibbonText = ("NeoAxis", "Baking");
				__0x3478.Description = "Creates a NeoAxis Baking file from selected folders and files.";

				__0x3478.GetState += delegate ( EditorAction.GetStateContext __0x3723 )
				{
					if( __0x3723.ObjectsInFocus.DocumentWindow == null && __0x3723.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3479 = __0x3723.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().Select( __0x3724 => __0x3724.FullPath ).ToArray();
						if( __0x3479.Length != 0 )
						{
							
							try
							{
								string __0x3480 = "";

								bool __0x3481 = true;
								foreach( var __0x3568 in __0x3479 )
								{
									if( __0x3481 )
										__0x3480 = Path.GetDirectoryName( __0x3568 );
									else
									{
										var __0x3482 = Path.GetDirectoryName( __0x3568 );
										if( __0x3480 != __0x3482 )
											return;
									}

									__0x3481 = false;
								}
							}
							catch
							{
								return;
							}

							__0x3723.Enabled = true;
						}
					}
				};

				__0x3478.Click += delegate ( EditorAction.ClickContext __0x3725 )
				{
					if( __0x3725.ObjectsInFocus.DocumentWindow == null && __0x3725.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3483 = __0x3725.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().Select( __0x3726 => __0x3726.FullPath ).ToArray();
						if( __0x3483.Length != 0 )
						{
							string __0x3484;
							{
								if( __0x3483.Length > 1 )
								{
									string __0x3485 = "";
									foreach( var __0x3569 in __0x3483 )
									{
										__0x3485 = Path.GetDirectoryName( __0x3569 );
										break;
									}
									__0x3484 = Path.Combine( __0x3485, Path.GetFileName( __0x3485 ) + ".neoaxisbaking" );
								}
								else
								{
									var __0x3486 = __0x3483[ 0 ];
									var __0x3487 = Path.GetDirectoryName( __0x3486 );
									__0x3484 = Path.Combine( __0x3487, Path.GetFileName( __0x3486 ) + ".neoaxisbaking" );
								}
							}

							var __0x3488 = new OKCancelTextBoxForm( EditorLocalization.Translate( "Baking", "File name" ) + ":", __0x3484, EditorLocalization.Translate( "Baking", "NeoAxis Baking" ),
								delegate ( string __0x3727, ref string __0x3728 )
							{
								if( string.IsNullOrEmpty( __0x3727 ) )
								{
									__0x3728 = EditorLocalization.Translate( "Baking", "Please specify destination file name." );
									return false;
								}

								
								if( File.Exists( __0x3727 ) || Directory.Exists( __0x3727 ) )
								{
									__0x3728 = EditorLocalization.Translate( "Baking", "A file or folder with the same name already exists." );
									return false;
								}

								return true;
							}, delegate ( string __0x3729, ref string __0x3730 )
							{
								var __0x3489 = EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "Baking", "Compress archive?" ), EMessageBoxButtons.YesNoCancel );
								if( __0x3489 == EDialogResult.Cancel )
									return false;

								bool __0x3490 = __0x3489 == EDialogResult.Yes;

								var __0x3491 = BakingFile.Create( __0x3483, __0x3490, __0x3729, out __0x3730 );
								if( __0x3491 )
									ScreenNotifications.Show( EditorLocalization.Translate( "Baking", "The file was built successfully." ) );
								return __0x3491;
							} );

							__0x3488.ShowDialog();
						}
					}
				};

				EditorActions.Register( __0x3478 );
			}

		}

		

		static void __0x3582()
		{
			
			{
				var __0x3492 = new EditorAction();
				__0x3492.Name = "Load Settings From Camera";
				
				
				__0x3492.Description = "Copy camera settings of the current viewport from selected camera.";
				
				
				__0x3492.QatSupport = true;
				__0x3492.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x3492.GetState += delegate ( EditorAction.GetStateContext __0x3731 )
				{
					if( __0x3731.ObjectsInFocus.DocumentWindow as SceneEditor != null )
					{
						if( __0x3731.ObjectsInFocus.Objects.Count( __0x3732 => __0x3732 is Camera ) == 1 )
							__0x3731.Enabled = true;
					}
				};
				__0x3492.Click += delegate ( EditorAction.ClickContext __0x3733 )
				{
					var __0x3493 = ( __0x3733.ObjectsInFocus.DocumentWindow as SceneEditor ).Scene;
					var __0x3494 = (Camera)__0x3733.ObjectsInFocus.Objects.First( __0x3734 => __0x3734 is Camera );

					var __0x3495 = __0x3493.Mode.Value == Scene.ModeEnum._3D ? __0x3493.CameraEditor.Value : __0x3493.CameraEditor2D.Value;
					if( __0x3495 != null )
					{
						__0x3495.Transform = __0x3494.Transform;
						__0x3495.Projection = __0x3494.Projection;
						__0x3495.FieldOfView = __0x3494.FieldOfView;
						__0x3495.Height = __0x3494.Height;
						__0x3495.AspectRatio = __0x3494.AspectRatio;
						__0x3495.FixedUp = __0x3494.FixedUp;
						__0x3495.NearClipPlane = __0x3494.NearClipPlane;
						__0x3495.FarClipPlane = __0x3494.FarClipPlane;
					}
				};
				EditorActions.Register( __0x3492 );
			}

			
			{
				var __0x3496 = new EditorAction();
				__0x3496.Name = "Save Settings To Camera";
				
				
				__0x3496.Description = "Copy camera settings of the current viewport to selected camera.";
				
				
				__0x3496.QatSupport = true;
				__0x3496.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x3496.GetState += delegate ( EditorAction.GetStateContext __0x3735 )
				{
					if( __0x3735.ObjectsInFocus.DocumentWindow as SceneEditor != null )
					{
						if( __0x3735.ObjectsInFocus.Objects.Count( __0x3736 => __0x3736 is Camera ) == 1 )
							__0x3735.Enabled = true;
					}
				};
				__0x3496.Click += delegate ( EditorAction.ClickContext __0x3737 )
				{
					var __0x3497 = ( __0x3737.ObjectsInFocus.DocumentWindow as SceneEditor ).Scene;
					var __0x3498 = (Camera)__0x3737.ObjectsInFocus.Objects.First( __0x3738 => __0x3738 is Camera );

					var __0x3499 = __0x3497.Mode.Value == Scene.ModeEnum._3D ? __0x3497.CameraEditor.Value : __0x3497.CameraEditor2D.Value;
					if( __0x3499 != null )
					{
						var __0x3500 = new List<UndoActionPropertiesChange.Item>();

						var __0x3501 = new Metadata.GetMembersContext( false );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:Transform", __0x3501 ), __0x3498.Transform ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:Projection", __0x3501 ), __0x3498.Projection ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:FieldOfView", __0x3501 ), __0x3498.FieldOfView ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:Height", __0x3501 ), __0x3498.Height ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:AspectRatio", __0x3501 ), __0x3498.AspectRatio ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:FixedUp", __0x3501 ), __0x3498.FixedUp ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:NearClipPlane", __0x3501 ), __0x3498.NearClipPlane ) );
						__0x3500.Add( new UndoActionPropertiesChange.Item( __0x3498, (Metadata.Property)__0x3498.MetadataGetMemberBySignature( "property:FarClipPlane", __0x3501 ), __0x3498.FarClipPlane ) );

						__0x3498.Transform = __0x3499.Transform;
						__0x3498.Projection = __0x3499.Projection;
						__0x3498.FieldOfView = __0x3499.FieldOfView;
						__0x3498.Height = __0x3499.Height;
						__0x3498.AspectRatio = __0x3499.AspectRatio;
						__0x3498.FixedUp = __0x3499.FixedUp;
						__0x3498.NearClipPlane = __0x3499.NearClipPlane;
						__0x3498.FarClipPlane = __0x3499.FarClipPlane;

						var __0x3502 = __0x3737.ObjectsInFocus.DocumentWindow.Document;
						__0x3502.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x3500 ) );
						__0x3502.Modified = true;
					}

				};
				EditorActions.Register( __0x3496 );
			}
		}

		internal static List<Metadata.TypeInfo> GetAllMeshModifiers()
		{
			var __0x3503 = new List<Metadata.TypeInfo>();

			foreach( var __0x3570 in MetadataManager.GetNetTypes() )
			{
				if( MetadataManager.GetTypeOfNetType( typeof( MeshModifier ) ).IsAssignableFrom( __0x3570 ) && !__0x3570.Abstract )
					__0x3503.Add( __0x3570 );
			}

			CollectionUtility.InsertionSort( __0x3503, delegate ( Metadata.TypeInfo __0x3739, Metadata.TypeInfo __0x3740 )
			{
				if( __0x3739 == MetadataManager.GetTypeOfNetType( typeof( MeshModifier ) ) )
					return -1;
				if( __0x3740 == MetadataManager.GetTypeOfNetType( typeof( MeshModifier ) ) )
					return 1;

				var __0x3504 = __0x3739.GetUserFriendlyNameForInstance();
				var __0x3505 = __0x3740.GetUserFriendlyNameForInstance();
				return string.Compare( __0x3504, __0x3505 );
			} );

			return __0x3503;
		}

		static string __0x3583( Component __0x3741 )
		{
			var __0x3506 = __0x3741.BaseType.GetUserFriendlyNameForInstance();
			if( __0x3741.Parent.GetComponent( __0x3506 ) == null )
				return __0x3506;
			return __0x3741.Parent.Components.GetUniqueName( __0x3506, false, 2 );
		}

		static void __0x3584( Metadata.TypeInfo __0x3742, bool __0x3743 )
		{
			var __0x3507 = __0x3742.GetUserFriendlyNameForInstance();

			var __0x3508 = "Mesh Add Modifier " + __0x3507;

			if( __0x3743 )
			{
				EditorActions.Unregister( __0x3508 );
			}
			else
			{
				var __0x3509 = new EditorAction();
				__0x3509.Name = __0x3508;
				__0x3509.Description = "Adds a new mesh modifier.";
				__0x3509.ImageSmall = Properties.Resources.Modify_16;
				__0x3509.ImageBig = Properties.Resources.Modify_32;
				__0x3509.QatSupport = true;
				__0x3509.RibbonText = (__0x3507, "");
				__0x3509.ContextMenuText = __0x3507;
				__0x3509.UserData = __0x3742;
				__0x3509.GetState += delegate ( EditorAction.GetStateContext __0x3744 )
				{
					var __0x3510 = __0x3744.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3510 != null )
						__0x3744.Enabled = true;
				};
				__0x3509.Click += delegate ( EditorAction.ClickContext __0x3745 )
				{
					var __0x3511 = __0x3745.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Mesh;
					if( __0x3511 != null )
					{
						var __0x3512 = __0x3745.ObjectsInFocus.DocumentWindow;
						var __0x3513 = (Metadata.TypeInfo)__0x3509.UserData;

						var __0x3514 = __0x3511.CreateComponent( __0x3513, enabled: false );
						__0x3514.Name = __0x3583( __0x3514 );
						__0x3514.Enabled = true;

						__0x3512.Focus();

						
						var __0x3515 = new Component[] { __0x3514 };
						var __0x3516 = __0x3745.ObjectsInFocus.DocumentWindow.Document;
						var __0x3517 = new UndoActionComponentCreateDelete( __0x3516, __0x3515, true );
						__0x3516.CommitUndoAction( __0x3517 );
						__0x3512.SelectObjects( __0x3515.ToArray() );
					}
				};
				EditorActions.Register( __0x3509 );
			}
		}

		static void __0x3585()
		{

			void GetStateHorizontal( EditorAction.GetStateContext __0x3746, EHorizontalAlignment __0x3747 )
			{
				if( __0x3746.ObjectsInFocus.DocumentWindow as UIControlEditor != null )
				{
					var __0x3518 = __0x3746.ObjectsInFocus.Objects.OfType<UIControl>().ToArray();
					if( __0x3518.Length != 0 )
					{
						__0x3746.Enabled = true;
						if( __0x3518.FirstOrDefault( __0x3748 => __0x3748.HorizontalAlignment.Value == __0x3747 ) != null )
							__0x3746.Checked = true;
					}
				}
			};

			void ClickHorizontal( EditorAction.ClickContext __0x3749, EHorizontalAlignment __0x3750 )
			{
				if( __0x3749.ObjectsInFocus.DocumentWindow as UIControlEditor != null )
				{
					var __0x3519 = __0x3749.ObjectsInFocus.Objects.OfType<UIControl>();
					var __0x3520 = __0x3519.Where( __0x3751 => __0x3751.HorizontalAlignment.Value != __0x3750 );

					var __0x3521 = new List<UndoActionPropertiesChange.Item>();
					foreach( var __0x3571 in __0x3520 )
					{
						var __0x3522 = __0x3571.HorizontalAlignment;

						__0x3571.HorizontalAlignment = __0x3750;

						var __0x3523 = (Metadata.Property)__0x3571.MetadataGetMemberBySignature( "property:HorizontalAlignment" );
						if( __0x3523 != null )
							__0x3521.Add( new UndoActionPropertiesChange.Item( __0x3571, __0x3523, __0x3522, null ) );
					}
					var __0x3524 = new UndoActionPropertiesChange( __0x3521 );
					__0x3749.ObjectsInFocus.DocumentWindow.Document.CommitUndoAction( __0x3524 );
				}
			};

			void GetStateVertical( EditorAction.GetStateContext __0x3752, EVerticalAlignment __0x3753 )
			{
				if( __0x3752.ObjectsInFocus.DocumentWindow as UIControlEditor != null )
				{
					var __0x3525 = __0x3752.ObjectsInFocus.Objects.OfType<UIControl>().ToArray();
					if( __0x3525.Length != 0 )
					{
						__0x3752.Enabled = true;
						if( __0x3525.FirstOrDefault( __0x3754 => __0x3754.VerticalAlignment.Value == __0x3753 ) != null )
							__0x3752.Checked = true;
					}
				}
			};

			void ClickVertical( EditorAction.ClickContext __0x3755, EVerticalAlignment __0x3756 )
			{
				if( __0x3755.ObjectsInFocus.DocumentWindow as UIControlEditor != null )
				{
					var __0x3526 = __0x3755.ObjectsInFocus.Objects.OfType<UIControl>();
					var __0x3527 = __0x3526.Where( __0x3757 => __0x3757.VerticalAlignment.Value != __0x3756 );

					var __0x3528 = new List<UndoActionPropertiesChange.Item>();
					foreach( var __0x3572 in __0x3527 )
					{
						var __0x3529 = __0x3572.VerticalAlignment;

						__0x3572.VerticalAlignment = __0x3756;

						var __0x3530 = (Metadata.Property)__0x3572.MetadataGetMemberBySignature( "property:VerticalAlignment" );
						if( __0x3530 != null )
							__0x3528.Add( new UndoActionPropertiesChange.Item( __0x3572, __0x3530, __0x3529, null ) );
					}
					var __0x3531 = new UndoActionPropertiesChange( __0x3528 );
					__0x3755.ObjectsInFocus.DocumentWindow.Document.CommitUndoAction( __0x3531 );
				}
			};

			
			{
				var __0x3532 = new EditorAction();
				__0x3532.Name = "UI Align Left";
				__0x3532.Description = "Sets the horizontal left alignment for the selected controls.";
				__0x3532.ImageSmall = Properties.Resources.AlignLeft_16;
				__0x3532.ImageBig = Properties.Resources.AlignLeft_32;
				__0x3532.QatSupport = true;
				__0x3532.RibbonText = ("Left", "");
				__0x3532.GetState += delegate ( EditorAction.GetStateContext __0x3758 ) { GetStateHorizontal( __0x3758, EHorizontalAlignment.Left ); };
				__0x3532.Click += delegate ( EditorAction.ClickContext __0x3759 ) { ClickHorizontal( __0x3759, EHorizontalAlignment.Left ); };
				EditorActions.Register( __0x3532 );
			}

			
			{
				var __0x3533 = new EditorAction();
				__0x3533.Name = "UI Align Center Horizontal";
				__0x3533.Description = "Sets the horizontal center alignment for the selected controls.";
				__0x3533.ImageSmall = Properties.Resources.AlignCenterHorizontal_16;
				__0x3533.ImageBig = Properties.Resources.AlignCenterHorizontal_32;
				__0x3533.QatSupport = true;
				__0x3533.RibbonText = ("Center", "");
				__0x3533.GetState += delegate ( EditorAction.GetStateContext __0x3760 ) { GetStateHorizontal( __0x3760, EHorizontalAlignment.Center ); };
				__0x3533.Click += delegate ( EditorAction.ClickContext __0x3761 ) { ClickHorizontal( __0x3761, EHorizontalAlignment.Center ); };
				EditorActions.Register( __0x3533 );
			}

			
			{
				var __0x3534 = new EditorAction();
				__0x3534.Name = "UI Align Right";
				__0x3534.Description = "Sets the horizontal right alignment for the selected controls.";
				__0x3534.ImageSmall = Properties.Resources.AlignRight_16;
				__0x3534.ImageBig = Properties.Resources.AlignRight_32;
				__0x3534.QatSupport = true;
				__0x3534.RibbonText = ("Right", "");
				__0x3534.GetState += delegate ( EditorAction.GetStateContext __0x3762 ) { GetStateHorizontal( __0x3762, EHorizontalAlignment.Right ); };
				__0x3534.Click += delegate ( EditorAction.ClickContext __0x3763 ) { ClickHorizontal( __0x3763, EHorizontalAlignment.Right ); };
				EditorActions.Register( __0x3534 );
			}

			
			{
				var __0x3535 = new EditorAction();
				__0x3535.Name = "UI Align Stretch Horizontal";
				__0x3535.Description = "Sets the horizontal stretch alignment for the selected controls.";
				__0x3535.ImageSmall = Properties.Resources.AlignStretchHorizontal_16;
				__0x3535.ImageBig = Properties.Resources.AlignStretchHorizontal_32;
				__0x3535.QatSupport = true;
				__0x3535.RibbonText = ("Stretch", "");
				__0x3535.GetState += delegate ( EditorAction.GetStateContext __0x3764 ) { GetStateHorizontal( __0x3764, EHorizontalAlignment.Stretch ); };
				__0x3535.Click += delegate ( EditorAction.ClickContext __0x3765 ) { ClickHorizontal( __0x3765, EHorizontalAlignment.Stretch ); };
				EditorActions.Register( __0x3535 );
			}

			
			{
				var __0x3536 = new EditorAction();
				__0x3536.Name = "UI Align Top";
				__0x3536.Description = "Sets the vertical top alignment for the selected controls.";
				__0x3536.ImageSmall = Properties.Resources.AlignTop_16;
				__0x3536.ImageBig = Properties.Resources.AlignTop_32;
				__0x3536.QatSupport = true;
				__0x3536.RibbonText = ("Top", "");
				__0x3536.GetState += delegate ( EditorAction.GetStateContext __0x3766 ) { GetStateVertical( __0x3766, EVerticalAlignment.Top ); };
				__0x3536.Click += delegate ( EditorAction.ClickContext __0x3767 ) { ClickVertical( __0x3767, EVerticalAlignment.Top ); };
				EditorActions.Register( __0x3536 );
			}

			
			{
				var __0x3537 = new EditorAction();
				__0x3537.Name = "UI Align Center Vertical";
				__0x3537.Description = "Sets the vertical center alignment for the selected controls.";
				__0x3537.ImageSmall = Properties.Resources.AlignCenterVertical_16;
				__0x3537.ImageBig = Properties.Resources.AlignCenterVertical_32;
				__0x3537.QatSupport = true;
				__0x3537.RibbonText = ("Center", "");
				__0x3537.GetState += delegate ( EditorAction.GetStateContext __0x3768 ) { GetStateVertical( __0x3768, EVerticalAlignment.Center ); };
				__0x3537.Click += delegate ( EditorAction.ClickContext __0x3769 ) { ClickVertical( __0x3769, EVerticalAlignment.Center ); };
				EditorActions.Register( __0x3537 );
			}

			
			{
				var __0x3538 = new EditorAction();
				__0x3538.Name = "UI Align Bottom";
				__0x3538.Description = "Sets the vertical bottom alignment for the selected controls.";
				__0x3538.ImageSmall = Properties.Resources.AlignBottom_16;
				__0x3538.ImageBig = Properties.Resources.AlignBottom_32;
				__0x3538.QatSupport = true;
				__0x3538.RibbonText = ("Bottom", "");
				__0x3538.GetState += delegate ( EditorAction.GetStateContext __0x3770 ) { GetStateVertical( __0x3770, EVerticalAlignment.Bottom ); };
				__0x3538.Click += delegate ( EditorAction.ClickContext __0x3771 ) { ClickVertical( __0x3771, EVerticalAlignment.Bottom ); };
				EditorActions.Register( __0x3538 );
			}

			
			{
				var __0x3539 = new EditorAction();
				__0x3539.Name = "UI Align Stretch Vertical";
				__0x3539.Description = "Sets the vertical stretch alignment for the selected controls.";
				__0x3539.ImageSmall = Properties.Resources.AlignStretchVertical_16;
				__0x3539.ImageBig = Properties.Resources.AlignStretchVertical_32;
				__0x3539.QatSupport = true;
				__0x3539.RibbonText = ("Stretch", "");
				__0x3539.GetState += delegate ( EditorAction.GetStateContext __0x3772 ) { GetStateVertical( __0x3772, EVerticalAlignment.Stretch ); };
				__0x3539.Click += delegate ( EditorAction.ClickContext __0x3773 ) { ClickVertical( __0x3773, EVerticalAlignment.Stretch ); };
				EditorActions.Register( __0x3539 );
			}

		}

#endif

	}
}





namespace NeoAxis.Editor
{
	public static class EditorThemeUtility
	{
		static __0x3806 __0x3776;

		

		class __0x3806 : ToolStripRenderer
		{
			protected override void OnRenderItemBackground( ToolStripItemRenderEventArgs e )
			{
				
				
				

				base.OnRenderItemBackground( e );
			}

			protected override void OnRenderButtonBackground( ToolStripItemRenderEventArgs e )
			{
				base.OnRenderButtonBackground( e );

				var __0x3777 = e.Item as ToolStripButton;

				bool __0x3778 = false;
				Color __0x3779 = Color.Black;

				if( __0x3777.Selected )
				{
					__0x3778 = true;
					__0x3779 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				if( __0x3777.Checked )
				{
					__0x3778 = true;
					__0x3779 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				if( __0x3777.Pressed )
				{
					__0x3778 = true;
					__0x3779 = EditorAPI.DarkTheme ? Color.FromArgb( 110, 110, 110 ) : Color.FromArgb( 174, 174, 174 );
				}

				if( __0x3778 )
				{
#if !DEPLOY
					using( var __0x3780 = new SolidBrush( __0x3779 ) )
					{
						var __0x3781 = new System.Drawing.Rectangle( Point.Empty, __0x3777.Size );
						e.Graphics.FillRectangle( __0x3780, __0x3781.X, __0x3781.Y, __0x3781.Width - 1, __0x3781.Height - 1 );
					}
#endif
				}
			}

			protected override void OnRenderDropDownButtonBackground( ToolStripItemRenderEventArgs e )
			{
				base.OnRenderDropDownButtonBackground( e );

				var __0x3782 = e.Item as ToolStripDropDownButton;

				bool __0x3783 = false;
				Color __0x3784 = Color.Black;

				if( __0x3782.Selected )
				{
					__0x3783 = true;
					__0x3784 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				
				
				
				
				

				if( __0x3782.Pressed )
				{
					__0x3783 = true;
					__0x3784 = EditorAPI.DarkTheme ? Color.FromArgb( 110, 110, 110 ) : Color.FromArgb( 174, 174, 174 );
				}

				if( __0x3783 )
				{
#if !DEPLOY
					using( var __0x3785 = new SolidBrush( __0x3784 ) )
					{
						var __0x3786 = new System.Drawing.Rectangle( Point.Empty, __0x3782.Size );
						e.Graphics.FillRectangle( __0x3785, __0x3786.X, __0x3786.Y, __0x3786.Width - 1, __0x3786.Height - 1 );
					}
#endif
				}
			}

			protected override void OnRenderArrow( ToolStripArrowRenderEventArgs e )
			{
				e.ArrowColor = EditorAPI.DarkTheme ? Color.FromArgb( 140, 140, 140 ) : Color.FromArgb( 59, 59, 59 );

				base.OnRenderArrow( e );
			}

			protected override void OnRenderItemImage( ToolStripItemImageRenderEventArgs e )
			{
				System.Drawing.Rectangle __0x3787 = e.ImageRectangle;
				Image __0x3788 = e.Image;

				if( __0x3787 != System.Drawing.Rectangle.Empty && __0x3788 != null )
				{
					bool __0x3789 = false;
					if( !e.Item.Enabled )
					{
						__0x3788 = CreateDisabledImage( __0x3788 );
						__0x3789 = true;
					}

#if !DEPLOY
					if( e.Item.ImageScaling == ToolStripItemImageScaling.None )
						e.Graphics.DrawImage( __0x3788, __0x3787, new System.Drawing.Rectangle( Point.Empty, __0x3787.Size ), GraphicsUnit.Pixel );
					else
						e.Graphics.DrawImage( __0x3788, __0x3787 );
#endif

					if( __0x3789 )
						__0x3788.Dispose();
				}
			}

			void __0x3798( Graphics __0x3800, ToolStripItem __0x3801, System.Drawing.Rectangle __0x3802, bool __0x3803 )
			{
#if !DEPLOY
				var __0x3790 = EditorAPI.DarkTheme ? Color.FromArgb( 30, 30, 30 ) : Color.FromArgb( 210, 210, 210 );

				using( Pen __0x3791 = new Pen( __0x3790 ) )
				{
					var __0x3792 = __0x3802;
					__0x3792.Y += 2;
					__0x3792.Height = Math.Max( 0, __0x3792.Height - 4 );

					int __0x3793 = __0x3792.Width / 2;
					__0x3800.DrawLine( __0x3791, __0x3793, __0x3792.Top, __0x3793, __0x3792.Bottom - 1 );
				}
#endif
			}

			protected override void OnRenderSeparator( ToolStripSeparatorRenderEventArgs e )
			{
				__0x3798( e.Graphics, e.Item, new System.Drawing.Rectangle( Point.Empty, e.Item.Size ), e.Vertical );
			}

			protected override void OnRenderItemText( ToolStripItemTextRenderEventArgs e )
			{
				
				

				base.OnRenderItemText( e );
			}
		}

		

		public static void ApplyDarkThemeToForm( Control control )
		{
			if( EditorAPI.DarkTheme )
			{
				control.BackColor = Color.FromArgb( 54, 54, 54 );

				foreach( var __0x3797 in control.Controls )
				{
					
					{
						var __0x3794 = __0x3797 as KryptonLabel;
						if( __0x3794 != null )
						{
							__0x3794.StateCommon.ShortText.Color1 = Color.FromArgb( 230, 230, 230 );
							__0x3794.StateDisabled.ShortText.Color1 = Color.FromArgb( 90, 90, 90 );
						}
					}

					
					{
						var __0x3795 = __0x3797 as Label;
						if( __0x3795 != null )
							__0x3795.ForeColor = Color.FromArgb( 230, 230, 230 );
					}

					
					{
						var __0x3796 = __0x3797 as EngineLabel;
						if( __0x3796 != null )
						{
							__0x3796.ForeColor = Color.FromArgb( 230, 230, 230 );
							__0x3796.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );
						}
					}

					
					
					
					
					
					



				}
			}
		}

		
		
		
		
		

		static void __0x3799( object __0x3804, DrawToolTipEventArgs __0x3805 )
		{
			__0x3805.DrawBackground();
			__0x3805.DrawBorder();
			__0x3805.DrawText( TextFormatFlags.HidePrefix | TextFormatFlags.Left | TextFormatFlags.VerticalCenter );
		}

		public static void ApplyDarkThemeToToolTip( ToolTip control )
		{
			if( EditorAPI.DarkTheme && !control.OwnerDraw )
			{
				control.OwnerDraw = true;
				control.BackColor = Color.FromArgb( 10, 10, 10 );
				
				
				control.ForeColor = Color.FromArgb( 230, 230, 230 );
				control.Draw += __0x3799;
			}
		}

		public static ToolStripRenderer GetToolbarToolStripRenderer()
		{
			if( __0x3776 == null )
				__0x3776 = new __0x3806();
			return __0x3776;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorUtility
	{
		public static bool AllowConfigureComponentTypeSettings = true;
		public static bool AllowSeparateSettings = true;

		

		internal static Metadata.GetMembersContext getMemberContextNoFilter = new Metadata.GetMembersContext( false );

		public static Component CloneComponent( Component source )
		{
			var __0x3807 = source.Clone();

			__0x3807.Name = source.Parent.Components.GetUniqueName( source.Name, true, 2 );

			int __0x3808 = source.Parent.Components.IndexOf( source );
			if( __0x3808 != -1 )
				__0x3808++;
			source.Parent.AddComponent( __0x3807, __0x3808 );

			return __0x3807;
		}

		
		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		



		
		
		
		

		

		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		

		
		
		
		
		

		public static void SetPropertyReference( DocumentInstance document, object[] objects, Metadata.Property property, object[] indexers, string[] referenceValues )
		{
			var __0x3809 = property.Type.GetNetType();
			var __0x3810 = ReferenceUtility.GetUnderlyingType( __0x3809 );

			var __0x3811 = new List<UndoActionPropertiesChange.Item>();

			

			for( int __0x3812 = 0; __0x3812 < objects.Length; __0x3812++ )
			{
				var __0x3813 = objects[ __0x3812 ];

				var __0x3814 = ReferenceUtility.MakeReference( __0x3810, null, referenceValues[ __0x3812 ] );
				var __0x3815 = (IReference)property.GetValue( __0x3813, indexers );

				
				
				

				if( !__0x3814.Equals( __0x3815 ) )
				{
					property.SetValue( __0x3813, __0x3814, indexers );
					__0x3811.Add( new UndoActionPropertiesChange.Item( __0x3813, property, __0x3815, indexers ) );
				}
			}

			
			if( __0x3811.Count != 0 )
			{
				var __0x3816 = new UndoActionPropertiesChange( __0x3811.ToArray() );
				document.UndoSystem.CommitAction( __0x3816 );
				document.Modified = true;
			}
		}

		
		
		
		

		

		

		

		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		internal static void RegisterEditorExtensions( Assembly assembly, bool unregister )
		{
			Type[] __0x3817;
			try
			{
				__0x3817 = assembly.GetTypes();
			}
			catch
			{
				return;
			}

			foreach( var __0x3860 in __0x3817 )
			{
				if( typeof( EditorExtensions ).IsAssignableFrom( __0x3860 ) && !__0x3860.IsAbstract )
				{
					var __0x3818 = __0x3860.GetConstructor( new Type[ 0 ] );
					var __0x3819 = (EditorExtensions)__0x3818.Invoke( new object[ 0 ] );

					if( unregister )
						__0x3819.OnUnregister();
					else
						__0x3819.OnRegister();
				}
			}
		}

		
		public static DocumentInstance GetDocumentByComponent( Component component )
		{
			var __0x3820 = component.ParentRoot;
			foreach( var __0x3861 in EditorForm.Instance.Documents )
			{
				if( __0x3861.ResultComponent == __0x3820 )
					return __0x3861;
			}
			return null;
		}

		public static void ShowRenameComponentDialog( Component component )
		{
#if !DEPLOY
			var __0x3821 = GetDocumentByComponent( component );

			var __0x3822 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), component.Name, EditorLocalization.Translate( "General", "Rename" ),
				delegate ( string __0x3871, ref string __0x3872 )
				{
					if( !ComponentUtility.IsValidComponentName( __0x3871, out string error2 ) )
					{
						__0x3872 = error2;
						return false;
					}
					return true;
				},
				delegate ( string __0x3873, ref string __0x3874 )
				{
					if( __0x3873 != component.Name )
					{
						var __0x3823 = component.Name;

						
						component.Name = __0x3873;

						
						var __0x3824 = new List<UndoActionPropertiesChange.Item>();
						var __0x3825 = (Metadata.Property)MetadataManager.GetTypeOfNetType(
							typeof( Component ) ).MetadataGetMemberBySignature( "property:Name" );
						__0x3824.Add( new UndoActionPropertiesChange.Item( component, __0x3825, __0x3823, new object[ 0 ] ) );

						var __0x3826 = new UndoActionPropertiesChange( __0x3824.ToArray() );
						__0x3821.UndoSystem.CommitAction( __0x3826 );
						__0x3821.Modified = true;
					}
					return true;
				}
			);

			__0x3822.ShowDialog();
#endif
		}

		static bool __0x3869( Metadata.TypeInfo __0x3875, out double __0x3876 )
		{
			var __0x3827 = __0x3875.GetCustomAttributes( typeof( RenderingEffect.DefaultOrderOfEffectAttribute ), true );
			if( __0x3827.Length != 0 )
			{
				__0x3876 = ( (RenderingEffect.DefaultOrderOfEffectAttribute)__0x3827[ 0 ] ).Value;
				return true;
			}
			__0x3876 = -1;
			return false;
		}

		
		
		public static int GetNewObjectInsertIndex( Component parent, Metadata.TypeInfo objectType )
		{
			
			if( MetadataManager.GetTypeOfNetType( typeof( RenderingEffect ) ).IsAssignableFrom( objectType ) )
			{
				if( __0x3869( objectType, out var value ) )
				{
					int __0x3828 = 0;
					foreach( var __0x3862 in parent.Components )
					{
						if( MetadataManager.GetTypeOfNetType( typeof( RenderingEffect ) ).IsAssignableFrom( __0x3862.BaseType ) )
						{
							if( __0x3869( __0x3862.BaseType, out var childValue ) )
							{
								if( value < childValue )
									return __0x3828;
							}
						}
						__0x3828++;
					}
				}
			}

			return -1;
		}

		public delegate void IsMemberVisibleOverrideDelegate( object __0x3877, Metadata.Member __0x3878, ref bool __0x3879 );
		public static event IsMemberVisibleOverrideDelegate IsMemberVisibleOverride;

		public static bool IsMemberVisible( object obj, Metadata.Member member )
		{
			bool __0x3829 = true;

			if( member is Metadata.Property property )
				__0x3829 = property.Browsable && !property.HasIndexers && !property.Static ;
			else if( member is Metadata.Event evnt )
				__0x3829 = !evnt.Static;
			else
				Log.Fatal( "internal error." );

			IsMemberVisibleOverride?.Invoke( obj, member, ref __0x3829 );

			return __0x3829;
		}

		public static Type GetTypeByName( string typeName )
		{
			var __0x3830 = typeName;
			
			{
				var __0x3831 = __0x3830.IndexOf( "," );
				if( __0x3831 != -1 )
					__0x3830 = __0x3830.Substring( 0, __0x3831 );
			}

			
			var __0x3832 = EditorAssemblyInterface.Instance.GetTypeByName( __0x3830 );
			if( __0x3832 != null )
				return __0x3832;

			
			var __0x3833 = MetadataManager.GetType( __0x3830 );
			if( __0x3833 != null )
				return __0x3833.GetNetType();

			
			var __0x3834 = Assembly.GetExecutingAssembly().GetType( __0x3830 );
			if( __0x3834 != null )
				return __0x3834;

			return null;
		}

		public static void ShowScreenNotificationObjectsCloned( int amount )
		{
			string __0x3835;
			if( amount == 1 )
				__0x3835 = "The object was duplicated.";
			else
				__0x3835 = "Objects were duplicated.";
			__0x3835 = EditorLocalization.Translate( "General", __0x3835 );

			ScreenNotifications.Show( __0x3835 );
		}

		public static string GetUniqueFriendlyName( Component component, string namePrefix = "" )
		{
			string __0x3836;
			if( !string.IsNullOrEmpty( namePrefix ) )
				__0x3836 = namePrefix;
			else
				__0x3836 = component.BaseType.GetUserFriendlyNameForInstance();

			if( component.Parent.GetComponent( __0x3836 ) == null )
				return __0x3836;
			return component.Parent.Components.GetUniqueName( __0x3836, false, 2 );
		}

		

		public delegate void ComponentDisplayInEditorFilterDelegate( Component __0x3880, ref bool __0x3881 );
		public static event ComponentDisplayInEditorFilterDelegate ComponentDisplayInEditorFilter;

		public static bool PerformComponentDisplayInEditorFilter( Component obj )
		{
			var __0x3837 = true;
			ComponentDisplayInEditorFilter?.Invoke( obj, ref __0x3837 );
			return __0x3837;
		}

		

		public delegate void RibbonTabVisibleFilterDelegate( EditorRibbonDefaultConfiguration.Tab __0x3882, ref bool __0x3883 );
		public static event RibbonTabVisibleFilterDelegate RibbonTabVisibleFilter;

		public static bool PerformRibbonTabVisibleFilter( EditorRibbonDefaultConfiguration.Tab tab )
		{
			var __0x3838 = true;
			RibbonTabVisibleFilter?.Invoke( tab, ref __0x3838 );
			return __0x3838;
		}

		

		public delegate void EditorActionVisibleFilterDelegate( EditorAction __0x3884, ref bool __0x3885 );
		public static event EditorActionVisibleFilterDelegate EditorActionVisibleFilter;

		public static bool PerformEditorActionVisibleFilter( EditorAction action )
		{
			var __0x3839 = true;
			EditorActionVisibleFilter?.Invoke( action, ref __0x3839 );
			return __0x3839;
		}

		

		public delegate void ResourcesWindowItemVisibleFilterDelegate( ResourcesWindowItems.Item __0x3886, ref bool __0x3887 );
		public static event ResourcesWindowItemVisibleFilterDelegate ResourcesWindowItemVisibleFilter;

		public static bool PerformResourcesWindowItemVisibleFilter( ResourcesWindowItems.Item item )
		{
			var __0x3840 = true;
			ResourcesWindowItemVisibleFilter?.Invoke( item, ref __0x3840 );
			return __0x3840;
		}

		

		static string __0x3870( string __0x3888 )
		{
			char[] __0x3841 = Path.GetInvalidFileNameChars();
			string __0x3842 = __0x3888.Trim();
			StringBuilder __0x3843 = new StringBuilder();
			foreach( char __0x3863 in __0x3842 )
			{
				char __0x3844 = __0x3863;
				if( Array.IndexOf<char>( __0x3841, __0x3844 ) != -1 )
					__0x3844 = '_';
				__0x3843.Append( __0x3844 );
			}
			return __0x3843.ToString();
		}

		public static bool ShowOpenFileDialog( bool isFolderPicker, string initialDirectory, IEnumerable<(string rawDisplayName, string extensionList)> filters, out string[] fileNames )
		{
#if !DEPLOY
			var __0x3845 = new Microsoft.WindowsAPICodePack.Dialogs.CommonOpenFileDialog();
			__0x3845.IsFolderPicker = isFolderPicker;
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3845.InitialDirectory = initialDirectory;
			__0x3845.Multiselect = true;
			if( filters != null )
			{
				foreach( var __0x3864 in filters )
					__0x3845.Filters.Add( new Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilter( __0x3864.rawDisplayName, __0x3864.extensionList ) );
			}

			if( __0x3845.ShowDialog() == Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogResult.Ok && __0x3845.FileNames.ToArray().Length != 0 )
			{
				fileNames = __0x3845.FileNames.ToArray();
				return true;
			}
			else
			{
				fileNames = null;
				return false;
			}
#else
			fileNames = null;
			return false;
#endif
		}

		public static bool ShowOpenFileDialog( bool isFolderPicker, string initialDirectory, IEnumerable<(string rawDisplayName, string extensionList)> filters, out string fileName )
		{
#if !DEPLOY
			var __0x3846 = new Microsoft.WindowsAPICodePack.Dialogs.CommonOpenFileDialog();
			__0x3846.IsFolderPicker = isFolderPicker;
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3846.InitialDirectory = initialDirectory;
			__0x3846.Multiselect = false;
			if( filters != null )
			{
				foreach( var __0x3865 in filters )
					__0x3846.Filters.Add( new Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilter( __0x3865.rawDisplayName, __0x3865.extensionList ) );
			}

			if( __0x3846.ShowDialog() == Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogResult.Ok )
			{
				fileName = __0x3846.FileName;
				return true;
			}
			else
			{
				fileName = null;
				return false;
			}
#else
			fileName = "";
			return false;
#endif
		}

		public static bool ShowSaveFileDialog( string initialDirectory, string initialFileName, string filter, out string resultFileName )
		{
#if !DEPLOY
			var __0x3847 = new System.Windows.Forms.SaveFileDialog();
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3847.InitialDirectory = initialDirectory;
			if( !string.IsNullOrEmpty( initialFileName ) )
				__0x3847.FileName = initialFileName;
			if( !string.IsNullOrEmpty( filter ) )
				__0x3847.Filter = filter;
			__0x3847.RestoreDirectory = true;

			if( __0x3847.ShowDialog() == DialogResult.OK )
			{
				resultFileName = __0x3847.FileName;
				return true;
			}
			else
			{
				resultFileName = "";
				return false;
			}
#else
			resultFileName = "";
			return false;
#endif
		}

		public static void ExportComponentToFile( Component component )
		{
#if !DEPLOY
			var __0x3848 = "";
			{
				var __0x3849 = ComponentUtility.GetOwnedFileNameOfComponent( component );
				if( !string.IsNullOrEmpty( __0x3849 ) )
					__0x3848 = Path.GetDirectoryName( VirtualPathUtility.GetRealPathByVirtual( __0x3849 ) );
			}

			var __0x3850 = component.Name;
			if( string.IsNullOrEmpty( __0x3850 ) )
				__0x3850 = "Component";

			var __0x3851 = "component";
			{
				var __0x3852 = component.GetType().GetCustomAttributes<ResourceFileExtensionAttribute>().ToArray();
				if( __0x3852.Length != 0 )
					__0x3851 = __0x3852[ 0 ].Extension;
			}

			var __0x3853 = __0x3870( __0x3850 + "." + __0x3851 );
			if( !ShowSaveFileDialog( __0x3848, __0x3853, "All files (*.*)|*.*", out var saveAsFileName ) )
				return;

			var __0x3854 = new Metadata.SaveContext();
			__0x3854.SaveRootComponentName = false;

			if( !ComponentUtility.SaveComponentToFile( component, saveAsFileName, __0x3854, out var error ) )
				EditorMessageBox.ShowWarning( error );
#endif
		}

		public static void PurgeCachedImages()
		{
			try
			{
				var __0x3855 = new List<string>();
				{
					var __0x3856 = Path.Combine( VirtualFileSystem.Directories.Project, "Caches\\Files" );
					if( Directory.Exists( __0x3856 ) )
					{
						
						foreach( var __0x3866 in Directory.GetFiles( __0x3856, "*.dds", SearchOption.AllDirectories ) )
						{
							var __0x3857 = __0x3866.Substring( __0x3856.Length + 1 );
							__0x3857 = __0x3857.Substring( 0, __0x3857.Length - 4 );

							if( !VirtualFile.Exists( __0x3857 ) )
								__0x3855.Add( __0x3866 );
						}

						
						foreach( var __0x3867 in Directory.GetFiles( __0x3856, "*.preview.png", SearchOption.AllDirectories ) )
						{
							var __0x3858 = __0x3867.Substring( __0x3856.Length + 1 );
							__0x3858 = __0x3858.Substring( 0, __0x3858.Length - 12 );

							if( !VirtualFile.Exists( __0x3858 ) )
								__0x3855.Add( __0x3867 );
						}
					}
				}

				foreach( var __0x3868 in __0x3855 )
				{
					File.Delete( __0x3868 );

					var __0x3859 = __0x3868 + ".info";
					if( File.Exists( __0x3859 ) )
						File.Delete( __0x3859 );
				}
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Base class for forms in the editor.
	/// </summary>
	public partial class EngineForm : KryptonForm, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		public EngineForm()
		{
			__0x3891();
		}

		
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x3889 = base.CreateParams;
				__0x3889.ExStyle |= 0x02000000;
				return __0x3889;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class EngineForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x3890 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x3890 != null ) )
			{
				__0x3890.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x3891()
		{
			this.__0x3890 = new System.ComponentModel.Container();
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Text = "EngineForm";
		}

		#endregion
	}
}



namespace NeoAxis.Editor
{
	/// <summary>
	/// Advanced Label with text selection and context menu copy abilities.
	/// </summary>
	[ToolboxItem( true )]
	
	[DefaultProperty( "Text" )]
	[DefaultBindingProperty( "Text" )]
	[Description( "EngineLabel" )]
	
	[ComVisible( true )]
	public class EngineLabel : KryptonTextBox
	{
		PaletteContentInheritRedirect __0x3892;
		LabelStyle __0x3893;

		

		public EngineLabel()
		{
			__0x3893 = LabelStyle.NormalControl;
			__0x3892 = new PaletteContentInheritRedirect( Redirector, PaletteContentStyle.LabelNormalControl );

			ReadOnly = true;
			TabStop = false;
			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				StateCommon.Back.Color1 = GetResolvedPalette().GetBackColor1( PaletteBackStyle.PanelClient, PaletteState.Normal );
				StateCommon.Border.Draw = InheritBool.False;
			}
		}

		[Category( "Visuals" )]
		[Description( "Label style." )]
		public LabelStyle LabelStyle
		{
			get { return __0x3893; }
			set
			{
				if( __0x3893 != value )
				{
					__0x3893 = value;
					SetLabelStyle( __0x3893 );
					PerformNeedPaint( true );
				}
			}
		}

		[Browsable( true )]
		[EditorBrowsable( EditorBrowsableState.Always )]
		public override bool AutoSize
		{
			get { return base.AutoSize; }
			set { base.AutoSize = value; }
		}

		[Category( "Behavior" )]
		[Description( "Controls whether the text in the edit control can be changed or not." )]
		[RefreshProperties( RefreshProperties.Repaint )]
		[DefaultValue( true )]
		public new bool ReadOnly
		{
			get { return base.ReadOnly; }
			set { base.ReadOnly = value; }
		}

		[DefaultValue( false )]
		public new bool TabStop
		{
			get { return base.TabStop; }
			set { base.TabStop = value; }
		}

		protected virtual void SetLabelStyle( LabelStyle style )
		{
			if( !IsDisposed && !Disposing )
			{
				
				__0x3892.Style = CommonHelper.ContentStyleFromLabelStyle( style );
				StateCommon.Content.Font = __0x3892.GetContentShortTextFont( PaletteState.Normal );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class EngineListView : EUserControl
	{
		List<Item> __0x3894 = new List<Item>();
		
		bool __0x3895;
		bool __0x3896;

		List<Item> __0x3897 = new List<Item>();
		ESet<Item> __0x3898 = new ESet<Item>();

		ModeClass __0x3899;

		int __0x3900;

		EngineScrollBar __0x3901;
		EngineScrollBar __0x3902;

		

		

		System.Drawing.Rectangle? __0x3903;

		bool __0x3904;
		bool __0x3905;
		Point __0x3906;
		Item[] __0x3907;

		

		public delegate void SelectedItemsChangedDelegate( EngineListView __0x4002 );
		public event SelectedItemsChangedDelegate SelectedItemsChanged;

		public delegate void BeforeStartDragDelegate( EngineListView __0x4003, Item[] __0x4004, ref bool __0x4005 );
		public event BeforeStartDragDelegate BeforeStartDrag;

		public delegate void ItemCheckedChangedDelegate( EngineListView __0x4006, Item __0x4007 );
		public event ItemCheckedChangedDelegate ItemCheckedChanged;

		public delegate void PaintAdditionsDelegate( EngineListView __0x4008, PaintEventArgs __0x4009 );
		public event PaintAdditionsDelegate PaintAdditions;

		

		public class Item
		{
			EngineListView __0x3908;

			public Item( EngineListView owner )
			{
				this.__0x3908 = owner;
			}

			public EngineListView Owner
			{
				get { return __0x3908; }
			}

			public string Text
			{
				get { return __0x3909; }
				set
				{
					if( __0x3909 == value )
						return;
					__0x3909 = value;
					__0x3908?.Invalidate();
				}
			}
			string __0x3909 = "";

			public object Tag;

			public Image Image
			{
				get { return __0x3910; }
				set
				{
					if( __0x3910 == value )
						return;
					__0x3910 = value;
					__0x3908?.Invalidate();
				}
			}
			Image __0x3910;

			public string Description { get; set; } = "";

			public bool ShowTooltip { get; set; }

			public bool ShowDisabled
			{
				get { return __0x3911; }
				set
				{
					if( __0x3911 == value )
						return;
					__0x3911 = value;
					__0x3908?.Invalidate();
				}
			}
			bool __0x3911;

			public bool Checked
			{
				get { return __0x3912; }
				set
				{
					if( __0x3912 == value )
						return;
					__0x3912 = value;
					__0x3908?.ItemCheckedChanged?.Invoke( Owner, this );
					__0x3908?.Invalidate();
				}
			}
			bool __0x3912;

			public override string ToString()
			{
				return Text;
			}
		}

		

		public abstract class ModeClass
		{
			EngineListView __0x3913;

			public ModeClass( EngineListView owner )
			{
				this.__0x3913 = owner;
			}

			public EngineListView Owner
			{
				get { return __0x3913; }
			}

			public Vector2I ItemSize;
			public bool ClampItemWidthByListViewWidth;

			public abstract void Init();

			public abstract void PaintItem( PaintEventArgs e, int itemIndex );

			public bool GetItemRectangle( int itemIndex, out System.Drawing.Rectangle rect )
			{
				rect = Owner.GetItemRectangle_NoScrolling( itemIndex );
				if( Owner.ScrollBarHorizontal.Visible )
					rect.X -= Owner.ScrollBarHorizontal.Value;
				if( Owner.ScrollBarVertical.Visible )
					rect.Y -= Owner.ScrollBarVertical.Value;

				
				if( rect.Right < 0 || rect.Bottom < 0 )
					return false;
				var __0x3914 = Owner.GetClientRectangle();
				if( rect.Top > __0x3914.Bottom || rect.Left > __0x3914.Right )
					return false;

				return true;
			}

			public void GetItemColors( int itemIndex, out Color backColor, out Color textColor )
			{
				var __0x3915 = Owner.Items[ itemIndex ];

				if( Owner.IsItemSelected( __0x3915 ) )
				{
					if( Owner.Focused && Owner.CurrentItemIndex == itemIndex && Owner.Enabled )
					{
						backColor = EditorAPI.DarkTheme ? Color.FromArgb( 70, 70, 70 ) : Color.FromArgb( 0, 120, 215 );
						textColor = EditorAPI.DarkTheme ? Color.FromArgb( 255, 255, 255 ) : Color.FromArgb( 255, 255, 255 );
					}
					else
					{
						backColor = EditorAPI.DarkTheme ? Color.FromArgb( 60, 60, 60 ) : Color.FromArgb( 240, 240, 240 );
						textColor = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 0, 0, 0 );
					}
				}
				else
				{
					backColor = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 255, 255, 255 );
					textColor = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 0, 0, 0 );
				}

				if( __0x3915.ShowDisabled || !Owner.Enabled )
					textColor = Color.Gray;
			}

			public virtual bool IsOverImage( Point position ) { return false; }
		}

		

		public class DefaultListMode : ModeClass
		{
			public bool DisplayImages;
			public Vector2I ImageSize;
			public int MarginLeft;
			public int MarginImageText;
			public int MarginRight;

			

			public DefaultListMode( EngineListView owner, int imageSize )
				: base( owner )
			{
				ItemSize = new Vector2I( 10000, (int)( 17.0f * EditorAPI.DPIScale ) );
				ClampItemWidthByListViewWidth = true;

				DisplayImages = true;

				var __0x3916 = (int)( (float)imageSize * EditorAPI.DPIScale );
				

				
				ImageSize = new Vector2I( __0x3916, __0x3916 );

				MarginLeft = (int)( EditorAPI.DPIScale * 4.0f );
				MarginImageText = (int)( EditorAPI.DPIScale * 2.0f );
				MarginRight = (int)( EditorAPI.DPIScale * 2.0f );
			}

			public override void Init()
			{
			}

			public override void PaintItem( PaintEventArgs e, int itemIndex )
			{
				var __0x3917 = Owner.Items[ itemIndex ];
				if( !GetItemRectangle( itemIndex, out var rect ) )
					return;
				GetItemColors( itemIndex, out var backColor, out var textColor );

				
				using( Brush __0x3918 = new SolidBrush( backColor ) )
					e.Graphics.FillRectangle( __0x3918, rect );


				int __0x3919 = MarginLeft;

				
				if( DisplayImages || Owner.CheckBoxes )
				{
					var __0x3920 = __0x3917.Image;

					if( Owner.CheckBoxes && __0x3920 == null )
					{
						if( __0x3917.Checked )
						{
							var __0x3921 = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 50, 50, 50 );
							using( var __0x3922 = new SolidBrush( __0x3921 ) )
							{
								var __0x3923 = new Vector2[]
								{
									new Vector2( 290.04, 33.286 ),
									new Vector2( 118.861, 204.427 ),
									new Vector2( 52.32, 137.907 ),
									new Vector2( 0, 190.226 ),
									new Vector2( 118.861, 309.071 ),
									new Vector2( 342.357, 85.606 ),
								};
								var __0x3924 = new Vector2[ __0x3923.Length ];
								for( int __0x3925 = 0; __0x3925 < __0x3924.Length; __0x3925++ )
									__0x3924[ __0x3925 ] = __0x3923[ __0x3925 ] / new Vector2( 342.357, 342.357 );


								float __0x3926 = rect.Left + __0x3919;
								float __0x3927 = rect.Top + ( ItemSize.Y - ImageSize.Y ) / 2;

								__0x3926 += (float)ImageSize.X * 0.1f;
								__0x3927 += (float)ImageSize.X * 0.1f;

								var __0x3928 = new PointF[ __0x3923.Length ];
								for( int __0x3929 = 0; __0x3929 < __0x3928.Length; __0x3929++ )
								{
									var __0x3930 = __0x3924[ __0x3929 ];
									__0x3928[ __0x3929 ] = new PointF( __0x3926 + (float)__0x3930.X * ImageSize.X * 0.8f, __0x3927 + (float)__0x3930.Y * ImageSize.Y * 0.8f );
								}

								e.Graphics.FillPolygon( __0x3922, __0x3928 );
							}
						}
					}
					else
					{
						if( __0x3920 == null || __0x3920.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
						{
							__0x3920 = EditorResourcesCache.GetDefaultImage( ImageSize.Y );
							
							
							
							
							
							
						}

						e.Graphics.DrawImage( __0x3920, rect.Left + __0x3919, rect.Top + ( ItemSize.Y - ImageSize.Y ) / 2, ImageSize.X, ImageSize.Y );
					}

					__0x3919 += ImageSize.X + MarginImageText;
				}

				
				if( !string.IsNullOrEmpty( __0x3917.Text ) )
				{
					var __0x3931 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

					var __0x3932 = __0x3931 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;
					
					

					var __0x3933 = new System.Drawing.Rectangle( rect.Left + __0x3919, rect.Top, rect.Width - __0x3919 - MarginRight, rect.Height );

					TextRenderer.DrawText( e.Graphics, __0x3917.Text, Owner.Font, __0x3933, textColor, backColor, __0x3932 );
				}
			}

			public override bool IsOverImage( Point position )
			{
				if( DisplayImages || Owner.CheckBoxes )
				{
					if( position.X >= MarginLeft && position.X <= MarginLeft + ImageSize.X )
						return true;
				}
				return false;
			}
		}

		

		public class DragData : DataObject
		{
			public EngineListView ListView;
			public Item[] Items;
		}

		

		public EngineListView()
		{
			
			SetStyle( ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint, true );

			
			SetStyle( ControlStyles.ResizeRedraw, true );

			
			DoubleBuffered = true;

			SetStyle( ControlStyles.Selectable, true );
			TabStop = true;

			__0x3899 = new DefaultListMode( this, 16 );

			__0x3901 = new EngineScrollBar();
			__0x3901.TabIndex = 1;
			__0x3901.Scroll += __0x4000;
			__0x3901.TabStop = false;
			Controls.Add( __0x3901 );

			__0x3902 = new EngineScrollBar();
			__0x3902.TabIndex = 2;
			__0x3902.Orientation = Orientation.Horizontal;
			__0x3902.Scroll += __0x4001;
			__0x3902.TabStop = false;
			Controls.Add( __0x3902 );

			
			
			
			
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			UpdateScrollBars();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();

			
			
		}

		public System.Drawing.Rectangle GetClientRectangle()
		{
			if( __0x3903.HasValue )
				return __0x3903.Value;

			var __0x3934 = new System.Drawing.Rectangle( 0, 0, Width, Height );

			if( __0x3901 != null && __0x3901.Visible )
				__0x3934.Width -= __0x3901.Width + 2;
			if( __0x3902 != null && __0x3902.Visible )
				__0x3934.Height -= __0x3902.Height + 2;

			return __0x3934;
		}

		protected override void OnPaint( PaintEventArgs e )
		{
#if !DEPLOY

			__0x3903 = null;
			__0x3903 = GetClientRectangle();

			e.Graphics.InterpolationMode = InterpolationMode.High;

			
			{
				var __0x3935 = GetClientRectangle();

				var __0x3936 = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 255, 255, 255 );
				using( var __0x3937 = new SolidBrush( __0x3936 ) )
					e.Graphics.FillRectangle( __0x3937, __0x3935 );
			}

			
			for( int __0x3938 = 0; __0x3938 < __0x3894.Count; __0x3938++ )
			{
				var __0x3939 = __0x3894[ __0x3938 ];
				__0x3899.PaintItem( e, __0x3938 );
			}


			

			if( __0x3901 != null && __0x3901.Visible )
			{
				var __0x3940 = new System.Drawing.Rectangle( __0x3901.Location.X - 1, 0, Width - ( __0x3901.Location.X - 1 ), Height );

				var __0x3941 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				using( var __0x3942 = new SolidBrush( __0x3941 ) )
					e.Graphics.FillRectangle( __0x3942, __0x3940 );
			}

			if( __0x3902 != null && __0x3902.Visible )
			{
				var __0x3943 = new System.Drawing.Rectangle( 0, __0x3902.Location.Y - 1, Width, Height - ( __0x3902.Location.Y - 1 ) );

				var __0x3944 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				using( var __0x3945 = new SolidBrush( __0x3944 ) )
					e.Graphics.FillRectangle( __0x3945, __0x3943 );
			}
#endif

			PaintAdditions?.Invoke( this, e );

			__0x3903 = null;
		}

		[Browsable( false )]
		public IReadOnlyList<Item> Items
		{
			get { return __0x3894; }
		}

		[Browsable( false )]
		public bool SetItemsScrollBarPositionReset = true;

		public void SetItems( ICollection<Item> items )
		{
			this.__0x3894 = new List<Item>( items );

			
			

			if( __0x3901 != null )
			{
				if( SetItemsScrollBarPositionReset )
				{
					__0x3901.Value = 0;
					__0x3902.Value = 0;
				}

				UpdateScrollBars();
			}

			Invalidate();
		}

		public void ClearItems()
		{
			SetItems( new List<Item>() );
		}

		[Browsable( false )]
		public IReadOnlyList<Item> SelectedItems
		{
			get { return __0x3897; }
			set
			{
				if( __0x3897.SequenceEqual( value ) )
					return;

				if( value != null )
					__0x3897 = new List<Item>( value );
				else
					__0x3897 = new List<Item>();

				__0x3898 = new ESet<Item>();
				foreach( var __0x3995 in __0x3897 )
					__0x3898.AddWithCheckAlreadyContained( __0x3995 );

				SelectedItemsChanged?.Invoke( this );

				Invalidate();
			}
		}

		[Browsable( false )]
		public Item SelectedItem
		{
			get
			{
				if( SelectedItems.Count == 1 )
					return SelectedItems[ 0 ];
				return null;
			}
			set
			{
				if( SelectedItem == value )
					return;

				var __0x3946 = new List<Item>();
				if( value != null )
					__0x3946.Add( value );
				SelectedItems = __0x3946;
			}
		}

		public bool MultiSelect
		{
			get { return __0x3895; }
			set
			{
				if( __0x3895 == value )
					return;
				__0x3895 = value;
			}
		}

		[Browsable( false )]
		public ModeClass Mode
		{
			get { return __0x3899; }
			set
			{
				if( __0x3899 == value )
					return;
				__0x3899 = value;

				UpdateScrollBars();
				Invalidate();
			}
		}

		[Browsable( false )]
		public int CurrentItemIndex
		{
			get { return __0x3900; }
			set
			{
				if( __0x3900 == value )
					return;
				__0x3900 = value;

				
				if( !MultiSelect )
				{
					if( __0x3900 >= 0 && __0x3900 < Items.Count )
						SelectedItem = Items[ __0x3900 ];
					else
						SelectedItem = null;
				}

				Invalidate();
			}
		}

		[Browsable( false )]
		public Item CurrentItem
		{
			get
			{
				if( __0x3900 >= 0 && __0x3900 < Items.Count )
					return __0x3894[ __0x3900 ];
				return null;
			}
			set
			{
				if( value != null )
					CurrentItemIndex = GetItemIndex( value );
				else
					CurrentItemIndex = -1;
			}
		}

		public bool CheckBoxes
		{
			get { return __0x3896; }
			set
			{
				if( __0x3896 == value )
					return;
				__0x3896 = value;
			}
		}

		[Browsable( false )]
		public Item[] CheckedItems
		{
			get { return Items.Where( __0x4010 => __0x4010.Checked ).ToArray(); }
		}

		public int GetItemIndexAt( Point position, out bool overImage )
		{
			var __0x3947 = position;
			if( __0x3902 != null && __0x3902.Visible )
				__0x3947.X += __0x3902.Value;
			if( __0x3901 != null && __0x3901.Visible )
				__0x3947.Y += __0x3901.Value;

			

			for( int __0x3948 = 0; __0x3948 < Items.Count; __0x3948++ )
			{
				var __0x3949 = GetItemRectangle_NoScrolling( __0x3948 );
				if( __0x3949.Contains( __0x3947 ) )
				{
					overImage = __0x3899.IsOverImage( __0x3947 );
					return __0x3948;
				}
			}

			overImage = false;
			return -1;
		}

		public int GetItemIndexAt( Point position )
		{
			return GetItemIndexAt( position, out _ );
		}

		public Item GetItemAt( Point position )
		{
			var __0x3950 = GetItemIndexAt( position );
			return __0x3950 != -1 ? Items[ __0x3950 ] : null;
		}

		public bool IsItemSelected( Item item )
		{
			return __0x3898.Contains( item );
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			if( !Focused )
				Focus();

			base.OnMouseDown( e );

			if( e.Button == MouseButtons.Left || e.Button == MouseButtons.Right )
			{
				var __0x3951 = GetItemIndexAt( e.Location, out var overImage );
				var __0x3952 = __0x3951 != -1 ? Items[ __0x3951 ] : null;

				var __0x3953 = new ESet<Item>( SelectedItems.ToArray() );
				if( ( ModifierKeys & Keys.Control ) == 0 && ( ModifierKeys & Keys.Shift ) == 0 )
					__0x3953.Clear();

				if( ( ModifierKeys & Keys.Shift ) != 0 )
				{
					if( CurrentItemIndex != -1 && __0x3951 != -1 )
					{
						var __0x3954 = Math.Min( CurrentItemIndex, __0x3951 );
						var __0x3955 = Math.Max( CurrentItemIndex, __0x3951 );
						for( int __0x3956 = __0x3954; __0x3956 <= __0x3955; __0x3956++ )
							__0x3953.AddWithCheckAlreadyContained( Items[ __0x3956 ] );
					}
				}

				if( __0x3952 != null )
					__0x3953.AddWithCheckAlreadyContained( __0x3952 );

				SelectedItems = __0x3953.ToArray();
				CurrentItemIndex = __0x3951;
				__0x3997();

				if( CheckBoxes && __0x3952 != null && overImage )
					__0x3952.Checked = !__0x3952.Checked;
			}

			
			if( e.Button == MouseButtons.Left && CanDrag )
			{
				var __0x3957 = Cursor.Position;
				var __0x3958 = SelectedItems.ToArray();

				if( __0x3958.Length != 0 )
				{
					var __0x3959 = GetItemAt( PointToClient( __0x3957 ) );
					if( __0x3959 != null && __0x3958.Contains( __0x3959 ) )
					{
						__0x3905 = true;
						__0x3906 = __0x3957;
						__0x3907 = __0x3958;
					}
				}
			}
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			__0x3996();
		}

		void __0x3996()
		{
			__0x3905 = false;
			__0x3906 = new Point( 0, 0 );
			__0x3907 = null;
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			if( __0x3905 )
			{
				var __0x3960 = MouseButtons;
				if( ( __0x3960 & MouseButtons.Left ) != 0 )
				{
					var __0x3961 = 4;
					var __0x3962 = Cursor.Position;

					if( Math.Abs( __0x3906.X - __0x3962.X ) > __0x3961 || Math.Abs( __0x3906.Y - __0x3962.Y ) > __0x3961 )
					{
						var __0x3963 = true;
						BeforeStartDrag?.Invoke( this, __0x3907, ref __0x3963 );

						if( __0x3963 )
						{
							var __0x3964 = new DragData();
							__0x3964.ListView = this;
							__0x3964.Items = __0x3907;
							DoDragDrop( __0x3964, DragDropEffects.Link );

							__0x3996();
						}
					}
				}
			}
		}

		protected override void OnMouseWheel( MouseEventArgs e )
		{
			base.OnMouseWheel( e );

			if( __0x3901 != null && __0x3901.Visible )
			{
				int __0x3965 = e.Delta / 120;
				var __0x3966 = __0x3901.Value - 80 * __0x3965;
				MathEx.Clamp( ref __0x3966, 0, __0x3901.Maximum );

				if( __0x3901.Value != __0x3966 )
				{
					__0x3901.Value = __0x3966;
					Invalidate();
				}
			}
		}

		void __0x3997()
		{
			if( CurrentItemIndex != -1 && Items.Count != 0 )
				EnsureVisible( Items[ CurrentItemIndex ] );
		}

		void __0x3998( int __0x4011 )
		{
			Item __0x3967;
			if( __0x4011 >= 0 && __0x4011 < Items.Count )
				__0x3967 = Items[ __0x4011 ];
			else
				__0x3967 = null;

			var __0x3968 = new ESet<Item>( SelectedItems.ToArray() );
			if( ( ModifierKeys & Keys.Control ) == 0 && ( ModifierKeys & Keys.Shift ) == 0 )
				__0x3968.Clear();

			if( ( ModifierKeys & Keys.Shift ) != 0 )
			{
				if( CurrentItemIndex != -1 && __0x4011 != -1 )
				{
					var __0x3969 = Math.Min( CurrentItemIndex, __0x4011 );
					var __0x3970 = Math.Max( CurrentItemIndex, __0x4011 );
					for( int __0x3971 = __0x3969; __0x3971 <= __0x3970; __0x3971++ )
						__0x3968.AddWithCheckAlreadyContained( Items[ __0x3971 ] );
				}
			}

			if( __0x3967 != null )
				__0x3968.AddWithCheckAlreadyContained( __0x3967 );

			SelectedItems = __0x3968.ToArray();
			CurrentItemIndex = __0x4011;
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( Items.Count != 0 )
			{
				var __0x3972 = keyData & Keys.KeyCode;

				if( __0x3972 == Keys.Up )
				{
					if( CurrentItemIndex != 0 )
						__0x3998( Math.Max( CurrentItemIndex - GetItemCountPerRow(), 0 ) );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.Down )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3998( Math.Min( CurrentItemIndex + GetItemCountPerRow(), Items.Count - 1 ) );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.Home )
				{
					if( CurrentItemIndex != 0 )
						__0x3998( 0 );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.End )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3998( Items.Count - 1 );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.PageUp && Mode.ItemSize.Y != 0 )
				{
					var __0x3973 = CurrentItemIndex;
					__0x3973 -= Math.Max( GetClientRectangle().Height / Mode.ItemSize.Y * GetItemCountPerRow(), 1 );
					if( __0x3973 < 0 )
						__0x3973 = 0;
					__0x3998( __0x3973 );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.PageDown )
				{
					var __0x3974 = CurrentItemIndex;
					__0x3974 += Math.Max( GetClientRectangle().Height / Mode.ItemSize.Y * GetItemCountPerRow(), 1 );
					if( __0x3974 > Items.Count - 1 )
						__0x3974 = Items.Count - 1;
					__0x3998( __0x3974 );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.Left )
				{
					if( CurrentItemIndex != 0 )
						__0x3998( Math.Max( CurrentItemIndex - 1, 0 ) );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.Right )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3998( CurrentItemIndex + 1 );
					__0x3997();
					return true;
				}
				else if( __0x3972 == Keys.Space )
				{
					if( CheckBoxes && Enabled )
					{
						var __0x3975 = CurrentItem;
						if( __0x3975 != null )
							__0x3975.Checked = !__0x3975.Checked;
						return true;
					}
				}
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		protected override void OnGotFocus( EventArgs e )
		{
			base.OnGotFocus( e );

			Invalidate();
		}

		protected override void OnLostFocus( EventArgs e )
		{
			base.OnLostFocus( e );

			Invalidate();
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			UpdateScrollBars();
		}

		void __0x3999()
		{
			var __0x3976 = (int)( EditorAPI.DPIScale * 16.0f );

			if( __0x3901.Visible && !__0x3902.Visible )
				__0x3901.SetBounds( Width - __0x3976 - 1, 0, __0x3976, Height );
			else if( !__0x3901.Visible && __0x3902.Visible )
				__0x3902.SetBounds( 0, Height - __0x3976 - 1, Width, __0x3976 );
			else
			{
				__0x3901.SetBounds( Width - __0x3976 - 1, 0, __0x3976, Height - __0x3976 );
				__0x3902.SetBounds( 0, Height - __0x3976 - 1, Width - __0x3976, __0x3976 );
			}
		}

		public void UpdateScrollBars()
		{
			if( __0x3901 == null )
				return;

			

			bool __0x3977 = __0x3901.MouseUpDownStatus;
			if( !__0x3977 )
			{
				__0x3901.Maximum = Math.Max( GetSizeOfAllItems().Y - Height, 0 );
				__0x3901.SmallChange = 30;
				__0x3901.LargeChange = Height;

				if( __0x3901.Value > __0x3901.Maximum )
					__0x3901.Value = __0x3901.Maximum;

				

				
				

				

				
				
				

				
				
				
			}

			
			bool __0x3978 = __0x3902.MouseUpDownStatus;
			if( !__0x3978 )
			{
				

				
				
				
				
			}

			

			
			__0x3902.Visible = false;

			

			__0x3999();
			__0x3901.Visible = GetSizeOfAllItems().Y > GetClientRectangle().Height && Items.Count != 0;

			__0x3999();
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x3979 = base.CreateParams;
				__0x3979.ExStyle |= 0x02000000;
				return __0x3979;
			}
		}

		public Vector2I GetSizeOfAllItems()
		{
			
			var __0x3980 = GetClientRectangle().Width;

			if( Items.Count == 0 || __0x3980 == 0 )
				return new Vector2I( 0, 0 );

			
			if( Mode.ClampItemWidthByListViewWidth && Mode.ItemSize.X >= __0x3980 )
				return new Vector2I( __0x3980, Mode.ItemSize.Y * Items.Count );

			int __0x3981 = Math.Max( __0x3980 / Mode.ItemSize.X, 1 );
			if( __0x3981 == 1 )
				return new Vector2I( Mode.ItemSize.X, Mode.ItemSize.Y * Items.Count );

			var __0x3982 = Items.Count / __0x3981;
			if( __0x3982 * __0x3981 != Items.Count )
				__0x3982++;
			return new Vector2I( Mode.ItemSize.X * __0x3981, Mode.ItemSize.Y * __0x3982 );
		}

		public System.Drawing.Rectangle GetItemRectangle_NoScrolling( int itemIndex )
		{
			
			var __0x3983 = GetClientRectangle().Width;

			if( Items.Count == 0 || __0x3983 == 0 )
				return new System.Drawing.Rectangle( 0, 0, 0, 0 );

			
			if( Mode.ClampItemWidthByListViewWidth && Mode.ItemSize.X >= __0x3983 )
				return new System.Drawing.Rectangle( 0, Mode.ItemSize.Y * itemIndex, __0x3983, Mode.ItemSize.Y );

			int __0x3984 = Math.Max( __0x3983 / Mode.ItemSize.X, 1 );
			var __0x3985 = itemIndex / __0x3984;
			var __0x3986 = itemIndex % __0x3984;
			return new System.Drawing.Rectangle( Mode.ItemSize.X * __0x3986, Mode.ItemSize.Y * __0x3985, Mode.ItemSize.X, Mode.ItemSize.Y );
		}

		public bool GetItemRectangle( int itemIndex, out System.Drawing.Rectangle rect )
		{
			return __0x3899.GetItemRectangle( itemIndex, out rect );
		}

		public int GetItemCountPerRow()
		{
			
			var __0x3987 = GetClientRectangle().Width;

			int __0x3988;
			if( Mode.ItemSize.X != 0 )
				__0x3988 = Math.Max( __0x3987 / Mode.ItemSize.X, 1 );
			else
				__0x3988 = 1;
			return __0x3988;
		}

		private void __0x4000( object __0x4012, EngineScrollBarEventArgs __0x4013 )
		{
			
			

			Invalidate();
		}

		private void __0x4001( object __0x4014, EngineScrollBarEventArgs __0x4015 )
		{
			
			

			Invalidate();
		}

		
		
		
		
		
		

		
		
		
		
		
		

		[Browsable( false )]
		public EngineScrollBar ScrollBarVertical
		{
			get { return __0x3901; }
		}

		[Browsable( false )]
		public EngineScrollBar ScrollBarHorizontal
		{
			get { return __0x3902; }
		}

		public int GetItemIndex( Item item )
		{
			

			for( int __0x3989 = 0; __0x3989 < Items.Count; __0x3989++ )
				if( Items[ __0x3989 ] == item )
					return __0x3989;
			return -1;
		}

		public void EnsureVisible( Item item )
		{
			

			var __0x3990 = GetItemIndex( item );
			if( __0x3990 == -1 )
				return;

			if( __0x3901 != null && __0x3901.Visible )
			{
				var __0x3991 = GetItemRectangle_NoScrolling( __0x3990 );

				var __0x3992 = __0x3901.Value;
				var __0x3993 = __0x3992 + GetClientRectangle().Height;

				var __0x3994 = __0x3901.Value;

				if( __0x3992 > __0x3991.Top )
					__0x3994 = __0x3991.Top;
				else if( __0x3993 < __0x3991.Bottom )
					__0x3994 = __0x3991.Bottom - GetClientRectangle().Height;

				MathEx.Clamp( ref __0x3994, 0, __0x3901.Maximum );

				if( __0x3901.Value != __0x3994 )
				{
					__0x3901.Value = __0x3994;
					Invalidate();
				}
			}
		}

		public bool CanDrag
		{
			get { return __0x3904; }
			set { __0x3904 = value; }
		}



		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		


		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		

		

		

		
		
		
		


		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		

		

		
		
		
		
		

		
		
		
		
		
		

		

		


	}
}





namespace NeoAxis.Editor
{
	public class EngineProgressBar : Control
	{
		public EngineProgressBar()
		{
			
			SetStyle( ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint, true );

			
			SetStyle( ControlStyles.ResizeRedraw, true );

			
			DoubleBuffered = true;
		}

		[DefaultValue( 0 )]
		public int Value
		{
			get { return __0x4016; }
			set
			{
				if( __0x4016 == value )
					return;
				__0x4016 = value;
				Invalidate();
			}
		}
		int __0x4016;

		[DefaultValue( 100 )]
		public int Maximum
		{
			get { return __0x4017; }
			set { __0x4017 = value; }
		}
		int __0x4017 = 100;

		protected override void OnPaint( PaintEventArgs e )
		{
#if !DEPLOY

			var __0x4018 = new System.Drawing.Rectangle( 0, 0, Width, Height );

			using( var __0x4019 = new SolidBrush( EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 230, 230, 230 ) ) )
				e.Graphics.FillRectangle( __0x4019, __0x4018 );

			var __0x4020 = new System.Drawing.Rectangle( 0, 0, __0x4018.Width - 1, __0x4018.Height - 1 );
			using( var __0x4021 = new Pen( EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 188, 188, 188 ) ) )
				e.Graphics.DrawRectangle( __0x4021, __0x4020 );

			var __0x4022 = new System.Drawing.Rectangle( 2, 2, (int)( __0x4018.Width * ( (double)Value / Maximum ) ) - 4, __0x4018.Height - 4 );
			using( var __0x4023 = new SolidBrush( EditorAPI.DarkTheme ? Color.FromArgb( 0, 150, 0 ) : Color.FromArgb( 0, 190, 0 ) ) )
				e.Graphics.FillRectangle( __0x4023, __0x4022 );

#endif
		}
	}



	
	
	
	
	
	

	
	
	

	

	

	

	
	
	

	

	
	

	
	

	
	

	
	
	
	
	

	
	
	
}






























namespace NeoAxis.Editor
{
	[RefreshProperties( RefreshProperties.All )]
	public class EngineScrollBar : UserControl
	{
		#region Private fields

		internal bool MouseUpDownStatus;
		
		internal EngineScrollBarMouseLocation MouseScrollBarArea = EngineScrollBarMouseLocation.OutsideScrollBar;
		Point __0x4024;
		int __0x4025 = 0;

		int __0x4026 = -1;
		int __0x4027 = -1;

		int __0x4028 = -1;

		int __0x4029 = 0;
		int __0x4030 = 100;
		int __0x4031 = 0;

		int __0x4032 = 1;

		bool __0x4033;

		
		
		System.Windows.Forms.Timer __0x4034;

		
		

		Orientation __0x4035 = Orientation.Vertical;
		

		
		MouseEventArgs __0x4036 = null;

		#endregion

		#region Public Events

		/// <summary>
		/// Fires every time mouse is clicked over track area.
		/// </summary>
		[Description( "Fires every time mouse is clicked over track area." )]
		public new event EventHandler<EngineScrollBarMouseEventArgs> MouseClick = null;

		/// <summary>
		/// Fires every time mouse moves over track area.
		/// </summary>
		[Description( "Fires every time mouse moves over track area." )]
		public new event EventHandler<EngineScrollBarMouseEventArgs> MouseMove = null;

		/// <summary>
		/// Occurs each time scrollbar orientation has changed.
		/// </summary>
		[Description( "Occurs each time scrollbar orientation has changed." )]
		public event System.EventHandler OrientationChanged = null;

		/// <summary>
		/// Occurs every time scrollbar orientation is about to change.
		/// </summary>
		[Description( "Occurs every time scrollbar orientation is about to change." )]
		public event EventHandler<CancelEventArgs> OrientationChanging = null;

		/// <summary>
		/// 
		/// </summary>
		public new event EventHandler<EngineScrollBarEventArgs> Scroll = null;

		
		
		
		
		
		

		/// <summary>
		/// Fired every time <c>Value</c> of the ScrollBar changes.
		/// </summary>
		[Description( "Occurs every time scrollbar value changes." )]
		public event System.EventHandler ValueChanged = null;

		#endregion

		#region Constructor and related

		/// <summary>
		/// Constructor. Initialize properties.
		/// </summary>
		public EngineScrollBar()
		{
			__0x4101();

			SetStyle( ControlStyles.ResizeRedraw, true );
			SetStyle( ControlStyles.AllPaintingInWmPaint, true );
			SetStyle( ControlStyles.DoubleBuffer, true );

			
			
			
			
			
			
			
			

			__0x4034.Tick += new System.EventHandler( __0x4100 );

			
			
			

			

			MouseClick += __0x4130;
			MouseUp += __0x4131;
		}

		/// <summary>
		/// Generates repeat events when mouse is pressed and hold.
		/// </summary>
		/// <param name="__0x4133"></param>
		/// <param name="__0x4134"></param>
		void __0x4100( object __0x4133, EventArgs __0x4134 )
		{
			base.OnMouseDown( __0x4036 );

			__0x4102( __0x4036 );

			if( __0x4034.Enabled )
				__0x4034.Interval = RepeatRate;
			else
				__0x4034.Interval = InitialDelay;

			
			if( MouseScrollBarArea != EngineScrollBarMouseLocation.Thumb )
				__0x4034.Enabled = true;
			else
				__0x4034.Enabled = false;
		}

		IContainer __0x4037;
		void __0x4101()
		{
			this.__0x4037 = new System.ComponentModel.Container();
			
			this.__0x4034 = new System.Windows.Forms.Timer( this.__0x4037 );
			this.SuspendLayout();
			
			
			
			this.Name = "EngineScrollBar";
			this.ResumeLayout( false );
		}

		/// <summary>
		/// Dispose overridden method. When called from the host <c>disposing</c> parameter is <b>true</b>.
		/// When called from the finalize parameter is <b>false</b>.
		/// </summary>
		/// <param name="disposing"></param>
		protected override void Dispose( bool disposing )
		{
			if( !__0x4033 )
			{
				if( disposing )
				{
					if( __0x4037 != null )
					{
						__0x4037.Dispose();
					}
				}
				
				

				
				

				__0x4033 = true;

				base.Dispose();

			}
		}

		
		
		
		
		
		
		
		
		

		#endregion

		#region Public Properties

		
		/// <summary>
		/// BackColor doesn't have any meaning for the ScrollBar.
		/// </summary> 
		[Browsable( false ),
		EditorBrowsable( EditorBrowsableState.Never )]
		public new Color BackColor { get; set; }

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		/// <summary>
		/// Delay in milliseconds to start autorepeat behavior when mouse is pressed down and hold.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 400 ), Category( "Enhanced" )]
		[Description( "Delay in milliseconds to start autorepeat behavior when mouse is pressed down and hold." )]
		public int InitialDelay { set; get; } = 400;

		/// <summary>
		/// Large scrollbar change.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 10 ), Category( "Enhanced" )]
		[Description( "Large scrollbar change." )]
		public int LargeChange { set; get; } = 10;

		/// <summary>
		/// "Maximum scrollbar value.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 100 ), Category( "Enhanced" )]
		[Description( "Maximum scrollbar value." )]
		public int Maximum
		{
			get { return __0x4030; }
			set
			{
				if( __0x4030 == value )
					return;

				if( value < Minimum )
					throw new ArgumentException( "Minimum has to be less or equal Maximum", "Minimum" );

				
				decimal __0x4038 = value - Minimum;

				__0x4030 = value;
				Invalidate();
			}
		}

		/// <summary>
		/// Minimum scrollbar value.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 0 ), Category( "Enhanced" )]
		[Description( "Minimum scrollbar value." )]
		public int Minimum
		{
			get { return __0x4029; }
			set
			{
				if( __0x4029 == value )
					return;

				if( Maximum < value )
					throw new ArgumentException( "Minimum has to be less or equal Maximum", "Minimum" );

				
				decimal __0x4039 = Maximum - value;

				__0x4029 = value;
				Invalidate();
			}
		}

		/// <summary>
		/// ScrollBar orientation.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( Orientation.Vertical ), Category( "Enhanced" )]
		[Description( "ScrollBar orientation." )]
		public Orientation Orientation
		{
			set
			{
				if( OrientationChanging != null )
				{
					CancelEventArgs __0x4040 = new CancelEventArgs( false );
					OrientationChanging( this, __0x4040 );
					if( __0x4040.Cancel )
						return;
				}
				if( __0x4035 != value )
				{
					__0x4035 = value;

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					

					if( OrientationChanged != null )
					{
						OrientationChanged( this, EventArgs.Empty );
					}
				}

			}
			get
			{
				return __0x4035;
			}
		}

		
		
		
		
		
		
		
		

		/// <summary>
		/// Delay in milliseconds between autorepeat MouseDown events when mouse is pressed down and hold.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 62 ), Category( "Enhanced" )]
		[Description( "Delay in milliseconds between autorepeat MouseDown events when mouse is pressed down and hold." )]
		public int RepeatRate { set; get; } = 62;

		
		
		
		
		
		

		/// <summary>
		/// Small scrollbar change.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 1 ), Category( "Enhanced" )]
		[Description( "Small change." )]
		public int SmallChange { set; get; } = 1;

		/// <summary>
		/// Scrollbar value. Determines current thumb position.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 0 ), Category( "Enhanced" )]
		[Description( "Value" )]
		public int Value
		{
			get { return __0x4031; }
			set
			{
				if( __0x4031 == value )
					return;

				if( value < Minimum )
					__0x4031 = Minimum;
				else if( value > Maximum )
					__0x4031 = Maximum;
				else
					__0x4031 = value;

				__0x4103();
				Invalidate();
			}
		}

		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 1 ), Category( "Enhanced" )]
		[Description( "Value" )]
		public int ItemSize
		{
			get { return __0x4032; }
			set { __0x4032 = value; }
		}

		#endregion

		#region Overridden events

		/// <summary>
		/// What should happen here:
		/// 1. Save information that mouse is down
		/// 2. Call timer event handler (it will repeat periodically MouseDown events as long as mouse is down)
		/// </summary>
		/// <param name="e">Standard <c>MouseEventArgs</c>.</param>
		protected override void OnMouseDown( MouseEventArgs e )
		{
			
			__0x4036 = e;
			MouseUpDownStatus = true;

			
			__0x4034.Enabled = false;

			
			__0x4100( null, EventArgs.Empty );
		}

		/// <summary>
		/// This methods called from repeater timer event handler
		/// </summary>
		/// <param name="__0x4135"></param>
		void __0x4102( MouseEventArgs __0x4135 )
		{
			
			
			if( Orientation == Orientation.Vertical )
				MouseScrollBarArea = __0x4120( __0x4135.Y, out __0x4025 );
			else
				MouseScrollBarArea = __0x4120( __0x4135.X, out __0x4025 );

			
			__0x4024 = __0x4135.Location;

			
			var __0x4041 = Value;
			ScrollEventType __0x4042;
			
			
			
			
			
			
			
			
			
			
			
			{
				switch( MouseScrollBarArea )
				{
				case EngineScrollBarMouseLocation.BottomOrRightArrow:
				case EngineScrollBarMouseLocation.BottomOrRightTrack:
					if( MouseScrollBarArea == EngineScrollBarMouseLocation.BottomOrRightArrow )
					{
						__0x4041 += SmallChange;
						__0x4042 = ScrollEventType.SmallIncrement;
					}
					else    
					{
						__0x4041 += LargeChange;
						__0x4042 = ScrollEventType.LargeIncrement;
					}
					if( __0x4041 >= Maximum )
					{
						__0x4041 = Maximum;
						__0x4042 = ScrollEventType.Last;
					}
					__0x4106( __0x4041, Value, __0x4042 );
					break;
				case EngineScrollBarMouseLocation.Thumb:
					__0x4106( Value, Value, ScrollEventType.ThumbTrack );
					break;
				case EngineScrollBarMouseLocation.TopOrLeftArrow:
				case EngineScrollBarMouseLocation.TopOrLeftTrack:
					if( MouseScrollBarArea == EngineScrollBarMouseLocation.TopOrLeftArrow )
					{
						__0x4041 -= SmallChange;
						__0x4042 = ScrollEventType.SmallDecrement;
					}
					else
					{
						__0x4041 -= LargeChange;
						__0x4042 = ScrollEventType.LargeIncrement;
					}
					if( __0x4041 <= Minimum )
					{
						__0x4041 = Minimum;
						__0x4042 = ScrollEventType.First;
					}
					__0x4106( __0x4041, Value, __0x4042 );
					break;
				}
				Value = __0x4041;
			}

			
			Invalidate();

		}

		/// <summary>
		/// Captures mouse wheel actions and translates them to small decrement events.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseWheel( MouseEventArgs e )
		{
			int __0x4043 = e.Delta / 120;

			
			var __0x4044 = Value - SmallChange * __0x4043;

			if( __0x4044 < Value )
				__0x4106( __0x4044, Value, ScrollEventType.SmallDecrement );
			else
				__0x4106( __0x4044, Value, ScrollEventType.SmallIncrement );

			Value = __0x4044;
			__0x4106( Value, Value, ScrollEventType.EndScroll );

			base.OnMouseWheel( e );
		}

		/// <summary>
		/// MouseClick override. Calls MouseClick event handled with enhanced arguments. 
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseClick( MouseEventArgs e )
		{
			base.OnMouseClick( e );
			
			__0x4104( e, Value );
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseMove( MouseEventArgs e )
		{

			base.OnMouseMove( e );

			
			if( ( MouseUpDownStatus == true ) && ( MouseScrollBarArea == EngineScrollBarMouseLocation.Thumb ) )
			{
				

				
				int __0x4045;
				if( Orientation == Orientation.Vertical )
					__0x4045 = __0x4119( e.Y - __0x4025 );
				else
					__0x4045 = __0x4119( e.X - __0x4025 );

				if( __0x4045 < Minimum ) __0x4045 = Minimum;
				if( __0x4045 > Maximum ) __0x4045 = Maximum;

				
				__0x4106( __0x4045, Value, ScrollEventType.ThumbTrack );

				
				Value = __0x4045;  

				
				this.Invalidate();
			}
			else
			{
				
				

				
				EngineScrollBarMouseLocation __0x4046 = MouseScrollBarArea;

				int __0x4047;
				EngineScrollBarMouseLocation __0x4048;

				int __0x4049;
				if( Orientation == Orientation.Vertical )
				{
					__0x4048 = __0x4120( e.Y, out __0x4047 );
					__0x4049 = e.Y - __0x4132();
					switch( __0x4048 )
					{
					case EngineScrollBarMouseLocation.TopOrLeftArrow:
						__0x4049 = 0;
						break;
					case EngineScrollBarMouseLocation.BottomOrRightArrow:
						__0x4049 = ClientSize.Height - 2 * __0x4132();
						break;

					}
				}
				else
				{
					__0x4048 = __0x4120( e.X, out __0x4047 );

					__0x4049 = e.X - __0x4132();
					switch( __0x4048 )
					{
					case EngineScrollBarMouseLocation.TopOrLeftArrow:
						__0x4049 = 0;
						break;
					case EngineScrollBarMouseLocation.BottomOrRightArrow:
						__0x4049 = ClientSize.Width - 2 * __0x4132();
						break;

					}
				}
				__0x4027 = ( Maximum - Minimum ) * ( __0x4049 / TrackLength ) + Minimum;
				MouseScrollBarArea = __0x4048;

				if( ( __0x4049 < 0 ) || ( __0x4049 > TrackLength ) )
				{
					
				}
				else
				{
					
					

					if( __0x4026 != __0x4027 )
					{
						__0x4026 = __0x4027;
						
						
						
						
						
						
						
						
						
						
						

						
						
					}

					

					
					__0x4105( e, __0x4027 );


					
					if( __0x4046 != MouseScrollBarArea )
						this.Invalidate();
				}
			}
		}

		/// <summary>
		/// Forces repaint of ScrollBar when mouse moves outside of ScrollBar area.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseLeave( EventArgs e )
		{
			MouseUpDownStatus = false;
			MouseScrollBarArea = EngineScrollBarMouseLocation.OutsideScrollBar;
			__0x4034.Enabled = false;

			base.OnMouseLeave( e );
			this.Invalidate();
		}

		/// <summary>
		/// Fires <c>Scroll</c> events and refreshes ScrollBar display.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			__0x4034.Enabled = false;
			MouseUpDownStatus = false;

			switch( MouseScrollBarArea )
			{
			case EngineScrollBarMouseLocation.BottomOrRightArrow:
			case EngineScrollBarMouseLocation.TopOrLeftArrow:
			case EngineScrollBarMouseLocation.BottomOrRightTrack:
			case EngineScrollBarMouseLocation.TopOrLeftTrack:
				__0x4106( Value, Value, ScrollEventType.EndScroll );
				break;
			case EngineScrollBarMouseLocation.Thumb:
				__0x4106( Value, Value, ScrollEventType.ThumbPosition );
				__0x4106( Value, Value, ScrollEventType.EndScroll );
				break;
			}
			Invalidate();
		}

		#endregion

		#region Private helpers/wrappers of public events

		void __0x4103()
		{
			if( ( ValueChanged != null ) && ( this.Value != __0x4028 ) )
			{
				__0x4028 = this.Value;
				ValueChanged( this, new EventArgs() );
			}
		}

		void __0x4104( MouseEventArgs __0x4136, int __0x4137 )
		{
			if( MouseClick != null )
			{
				
				EngineScrollBarMouseEventArgs __0x4050 = new EngineScrollBarMouseEventArgs( __0x4027, __0x4136, MouseScrollBarArea );
				MouseClick( this, __0x4050 );
			}

		}

		void __0x4105( MouseEventArgs __0x4138, int __0x4139 )
		{
			if( MouseMove != null )
			{
				
				EngineScrollBarMouseEventArgs __0x4051 = new EngineScrollBarMouseEventArgs( __0x4139, __0x4138, MouseScrollBarArea );
				MouseMove( this, __0x4051 );
			}
		}

		void __0x4106( int __0x4140, int __0x4141, ScrollEventType __0x4142 )
		{
			if( Scroll != null )
			{
				ScrollOrientation __0x4052;
				if( Orientation == Orientation.Horizontal )
					__0x4052 = ScrollOrientation.HorizontalScroll;
				else
					__0x4052 = ScrollOrientation.VerticalScroll;

				
				__0x4140 = Math.Max( Math.Min( Maximum, __0x4140 ), Minimum );

				EngineScrollBarEventArgs __0x4053 = new EngineScrollBarEventArgs( __0x4141, __0x4140, __0x4142, __0x4052 );

				Scroll( this, __0x4053 );
			}
		}

		#endregion

		#region OnPaint override and DrawBookmark methods

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		


		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		int __0x4107()
		{
			return __0x4132();
			
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		Point __0x4108( Vector2I __0x4143 )
		{
			return new Point( __0x4143.X, __0x4143.Y );
		}

		void __0x4109( Graphics __0x4144, System.Drawing.Rectangle __0x4145, ScrollBarArrowButtonState __0x4146 )
		{
#if !DEPLOY

			Color __0x4054 = Color.Red;
			Color __0x4055 = Color.Red;
			switch( __0x4146 )
			{
			case ScrollBarArrowButtonState.UpNormal:
			case ScrollBarArrowButtonState.LeftNormal:
			case ScrollBarArrowButtonState.DownNormal:
			case ScrollBarArrowButtonState.RightNormal:
				__0x4054 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				__0x4055 = EditorAPI.DarkTheme ? Color.FromArgb( 130, 130, 130 ) : Color.FromArgb( 96, 96, 96 );
				
				break;
			case ScrollBarArrowButtonState.UpHot:
			case ScrollBarArrowButtonState.LeftHot:
			case ScrollBarArrowButtonState.DownHot:
			case ScrollBarArrowButtonState.RightHot:
				__0x4054 = EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 218, 218, 218 );
				__0x4055 = EditorAPI.DarkTheme ? Color.FromArgb( 150, 150, 150 ) : Color.FromArgb( 0, 0, 0 );
				
				break;
			case ScrollBarArrowButtonState.UpPressed:
			case ScrollBarArrowButtonState.LeftPressed:
			case ScrollBarArrowButtonState.DownPressed:
			case ScrollBarArrowButtonState.RightPressed:
				__0x4054 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 96, 96, 96 );
				__0x4055 = EditorAPI.DarkTheme ? Color.FromArgb( 170, 170, 170 ) : Color.FromArgb( 255, 255, 255 );
				
				break;
			case ScrollBarArrowButtonState.UpDisabled:
			case ScrollBarArrowButtonState.LeftDisabled:
			case ScrollBarArrowButtonState.DownDisabled:
			case ScrollBarArrowButtonState.RightDisabled:
				__0x4054 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				__0x4055 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 200, 200, 200 );
				break;
			}

			using( var __0x4056 = new SolidBrush( __0x4054 ) )
			{
				__0x4144.FillRectangle( __0x4056, __0x4145 );
			}

			using( var __0x4057 = new SolidBrush( __0x4055 ) )
			{
				RectangleI __0x4058 = new RectangleI( __0x4145.Left, __0x4145.Top, __0x4145.Right, __0x4145.Bottom );

				var __0x4059 = __0x4058.Size;
				
				var __0x4060 = ( __0x4059.MinComponent() / 2 + 1 ) / 2 * 2;
				var __0x4061 = __0x4058.GetCenter();

				var __0x4062 = new RectangleI( __0x4061.X - __0x4060 / 2, __0x4061.Y - __0x4060 / 2, __0x4061.X + __0x4060 / 2, __0x4061.Y + __0x4060 / 2 );

				Point[] __0x4063 = null;
				Point[] __0x4064 = null;

				if( __0x4146.ToString().Contains( "Up" ) || __0x4146.ToString().Contains( "Down" ) )
				{
					var __0x4065 = __0x4062.GetCenter().X - __0x4062.Left;
					var __0x4066 = (int)( (double)__0x4065 / 1.5 );

					if( __0x4146.ToString().Contains( "Up" ) )
					{
						var __0x4067 = new Vector2I( __0x4061.X, __0x4061.Y - __0x4065 - __0x4066 / 2 + 1 );

						__0x4063 = new Point[ 4 ];
						__0x4063[ 0 ] = __0x4108( __0x4067 + new Vector2I( -__0x4065, __0x4065 ) + new Vector2I( 1, 0 ) );
						__0x4063[ 1 ] = __0x4108( __0x4067 + new Vector2I( 1, 0 ) );
						__0x4063[ 2 ] = __0x4108( __0x4067 + new Vector2I( 0, __0x4066 ) + new Vector2I( 1, 0 ) );
						__0x4063[ 3 ] = __0x4108( __0x4067 + new Vector2I( -__0x4065, __0x4065 ) + new Vector2I( 0, __0x4066 ) + new Vector2I( 1, 0 ) );

						__0x4064 = new Point[ 4 ];
						__0x4064[ 0 ] = __0x4108( __0x4067 + new Vector2I( +__0x4065, __0x4065 ) );
						__0x4064[ 1 ] = __0x4108( __0x4067 + new Vector2I( +__0x4065, __0x4065 ) + new Vector2I( 0, __0x4066 ) );
						__0x4064[ 2 ] = __0x4108( __0x4067 + new Vector2I( 0, __0x4066 ) );
						__0x4064[ 3 ] = __0x4108( __0x4067 );

						
						
						
						
						
						
					}
					else
					{
						var __0x4068 = new Vector2I( __0x4061.X, __0x4061.Y + __0x4065 + __0x4066 / 2 - 1 );

						__0x4063 = new Point[ 4 ];
						__0x4063[ 0 ] = __0x4108( __0x4068 + new Vector2I( -__0x4065, -__0x4065 ) + new Vector2I( 1, 0 ) );
						__0x4063[ 1 ] = __0x4108( __0x4068 + new Vector2I( 1, 0 ) );
						__0x4063[ 2 ] = __0x4108( __0x4068 - new Vector2I( 0, __0x4066 ) + new Vector2I( 1, 0 ) );
						__0x4063[ 3 ] = __0x4108( __0x4068 + new Vector2I( -__0x4065, -__0x4065 ) - new Vector2I( 0, __0x4066 ) + new Vector2I( 1, 0 ) );

						__0x4064 = new Point[ 4 ];
						__0x4064[ 0 ] = __0x4108( __0x4068 + new Vector2I( __0x4065, -__0x4065 ) - new Vector2I( 0, __0x4066 ) );
						__0x4064[ 1 ] = __0x4108( __0x4068 + new Vector2I( __0x4065, -__0x4065 ) );
						__0x4064[ 2 ] = __0x4108( __0x4068 );
						__0x4064[ 3 ] = __0x4108( __0x4068 - new Vector2I( 0, __0x4066 ) );

						
						
						
						
						
						
						
					}
				}

				if( __0x4146.ToString().Contains( "Left" ) || __0x4146.ToString().Contains( "Right" ) )
				{
					var __0x4069 = __0x4062.GetCenter().Y - __0x4062.Top;
					var __0x4070 = (int)( (double)__0x4069 / 1.5 );

					if( __0x4146.ToString().Contains( "Left" ) )
					{
						var __0x4071 = new Vector2I( __0x4061.X - __0x4069 - __0x4070 / 2 + 1, __0x4061.Y );

						__0x4063 = new Point[ 4 ];
						__0x4063[ 0 ] = __0x4108( __0x4071 + new Vector2I( __0x4069, -__0x4069 ) + new Vector2I( 0, 1 ) );
						__0x4063[ 1 ] = __0x4108( __0x4071 + new Vector2I( 0, 1 ) );
						__0x4063[ 2 ] = __0x4108( __0x4071 + new Vector2I( __0x4070, 0 ) + new Vector2I( 0, 1 ) );
						__0x4063[ 3 ] = __0x4108( __0x4071 + new Vector2I( __0x4069, -__0x4069 ) + new Vector2I( __0x4070, 0 ) + new Vector2I( 0, 1 ) );

						__0x4064 = new Point[ 4 ];
						__0x4064[ 0 ] = __0x4108( __0x4071 + new Vector2I( __0x4069, __0x4069 ) + new Vector2I( 1, 0 ) );
						__0x4064[ 1 ] = __0x4108( __0x4071 + new Vector2I( __0x4069, __0x4069 ) + new Vector2I( __0x4070, 0 ) + new Vector2I( 1, 0 ) );
						__0x4064[ 2 ] = __0x4108( __0x4071 + new Vector2I( __0x4070, 0 ) + new Vector2I( 1, 0 ) );
						__0x4064[ 3 ] = __0x4108( __0x4071 + new Vector2I( 1, 0 ) );
					}
					else
					{
						var __0x4072 = new Vector2I( __0x4061.X + __0x4069 + __0x4070 / 2 - 1, __0x4061.Y );

						__0x4063 = new Point[ 4 ];
						__0x4063[ 0 ] = __0x4108( __0x4072 + new Vector2I( -__0x4069, -__0x4069 ) + new Vector2I( 0, 1 ) );
						__0x4063[ 1 ] = __0x4108( __0x4072 + new Vector2I( 0, 1 ) );
						__0x4063[ 2 ] = __0x4108( __0x4072 - new Vector2I( __0x4070, 0 ) + new Vector2I( 0, 1 ) );
						__0x4063[ 3 ] = __0x4108( __0x4072 + new Vector2I( -__0x4069, -__0x4069 ) - new Vector2I( __0x4070, 0 ) + new Vector2I( 0, 1 ) );

						__0x4064 = new Point[ 4 ];
						__0x4064[ 0 ] = __0x4108( __0x4072 + new Vector2I( -__0x4069, __0x4069 ) - new Vector2I( __0x4070, 0 ) + new Vector2I( -1, 0 ) );
						__0x4064[ 1 ] = __0x4108( __0x4072 + new Vector2I( -__0x4069, __0x4069 ) + new Vector2I( -1, 0 ) );
						__0x4064[ 2 ] = __0x4108( __0x4072 + new Vector2I( -1, 0 ) );
						__0x4064[ 3 ] = __0x4108( __0x4072 - new Vector2I( __0x4070, 0 ) + new Vector2I( -1, 0 ) );
					}
				}

				if( __0x4063 != null )
					__0x4144.FillPolygon( __0x4057, __0x4063 );
				if( __0x4064 != null )
					__0x4144.FillPolygon( __0x4057, __0x4064 );
			}

			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			

			
			
			
			
			


			

#endif
		}

		void __0x4110( Graphics __0x4147, System.Drawing.Rectangle __0x4148, ScrollBarState __0x4149 )
		{
			Color __0x4073 = Color.Red;
			switch( __0x4149 )
			{
			case ScrollBarState.Normal:
				__0x4073 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Hot:
				__0x4073 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Pressed:
				__0x4073 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Disabled:
				__0x4073 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			}

#if !DEPLOY
			using( var __0x4074 = new SolidBrush( __0x4073 ) )
			{
				__0x4147.FillRectangle( __0x4074, __0x4148 );
			}
#endif
		}

		void __0x4111( Graphics __0x4150, System.Drawing.Rectangle __0x4151, ScrollBarState __0x4152 )
		{
			__0x4110( __0x4150, __0x4151, __0x4152 );
			
		}

		void __0x4112( Graphics __0x4153, System.Drawing.Rectangle __0x4154, ScrollBarState __0x4155 )
		{
			__0x4110( __0x4153, __0x4154, __0x4155 );
			
		}

		void __0x4113( Graphics __0x4156, System.Drawing.Rectangle __0x4157, ScrollBarState __0x4158 )
		{
			__0x4110( __0x4156, __0x4157, __0x4158 );
			
		}

		void __0x4114( Graphics __0x4159, System.Drawing.Rectangle __0x4160, ScrollBarState __0x4161 )
		{
			__0x4110( __0x4159, __0x4160, __0x4161 );
			
		}

		void __0x4115( Graphics __0x4162, int __0x4163, int __0x4164 )
		{
			
			if( __0x4164 < __0x4107() )
			{
				__0x4163 -= __0x4107() - __0x4164;
				__0x4164 = __0x4107();
			}

			ScrollBarState __0x4075 = __0x4116( EngineScrollBarMouseLocation.Thumb );

			System.Drawing.Rectangle __0x4076;
			if( Orientation == Orientation.Vertical )
				__0x4076 = new System.Drawing.Rectangle( 0, __0x4164, ClientSize.Width, __0x4163 );
			else
				__0x4076 = new System.Drawing.Rectangle( __0x4164, 0, __0x4163, ClientSize.Height );

			Color __0x4077 = Color.Red;
			switch( __0x4075 )
			{
			case ScrollBarState.Normal:
				__0x4077 = EditorAPI.DarkTheme ? Color.FromArgb( 60, 60, 60 ) : Color.FromArgb( 205, 205, 205 );
				break;
			case ScrollBarState.Hot:
				__0x4077 = EditorAPI.DarkTheme ? Color.FromArgb( 70, 70, 70 ) : Color.FromArgb( 166, 166, 166 );
				break;
			case ScrollBarState.Pressed:
				__0x4077 = EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 96, 96, 96 );
				break;
			case ScrollBarState.Disabled:
				__0x4077 = EditorAPI.DarkTheme ? Color.FromArgb( 54, 54, 54 ) : Color.FromArgb( 220, 220, 220 );
				break;
			}

#if !DEPLOY
			using( var __0x4078 = new SolidBrush( __0x4077 ) )
			{
				__0x4162.FillRectangle( __0x4078, __0x4076 );
			}
#endif

			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
		}

		/// <summary>
		/// Overridden OnPaint. Draws all EnhancedScrollBar elements and draws all associated bookmarks.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnPaint( PaintEventArgs e )
		{
			
			System.Drawing.Rectangle __0x4079;
			ScrollBarState __0x4080 = __0x4116( EngineScrollBarMouseLocation.TopOrLeftArrow );
			if( Orientation == Orientation.Vertical )
			{
				__0x4079 = new System.Drawing.Rectangle( 0, 0, ClientSize.Width, __0x4107() );
				switch( __0x4080 )
				{
				case ScrollBarState.Disabled:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.UpDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.UpPressed ); break;
				case ScrollBarState.Normal:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.UpNormal ); break;
				case ScrollBarState.Hot:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.UpHot ); break;
				}
			}
			else
			{
				__0x4079 = new System.Drawing.Rectangle( 0, 0, __0x4107(), ClientSize.Height );
				switch( __0x4080 )
				{
				case ScrollBarState.Disabled:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.LeftDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.LeftPressed ); break;
				case ScrollBarState.Normal:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.LeftNormal ); break;
				case ScrollBarState.Hot:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.LeftHot ); break;
				}
			}

			
			int __0x4081 = __0x4118( Value );
			__0x4080 = __0x4116( EngineScrollBarMouseLocation.TopOrLeftTrack );
			if( Orientation == Orientation.Vertical )
			{
				__0x4079 = new System.Drawing.Rectangle( 0, __0x4107(), ClientSize.Width, __0x4081 - __0x4107() );
				
				__0x4111( e.Graphics, __0x4079, __0x4080 );
			}
			else
			{
				__0x4079 = new System.Drawing.Rectangle( __0x4107(), 0, __0x4081 - __0x4107(), ClientSize.Height );
				
				__0x4112( e.Graphics, __0x4079, __0x4080 );
			}

			
			int __0x4082 = ThumbLength;
			__0x4115( e.Graphics, __0x4082, __0x4081 );

			
			__0x4080 = __0x4116( EngineScrollBarMouseLocation.BottomOrRightTrack );
			if( Orientation == Orientation.Vertical )
			{
				__0x4079 = new System.Drawing.Rectangle( 0, __0x4081 + __0x4082, ClientSize.Width, TrackLength + __0x4107() - ( __0x4081 + __0x4082 ) );
				__0x4113( e.Graphics, __0x4079, __0x4080 );
			}
			else
			{
				__0x4079 = new System.Drawing.Rectangle( __0x4081 + __0x4082, 0, TrackLength + __0x4107() - ( __0x4081 + __0x4082 ), ClientSize.Height );
				__0x4114( e.Graphics, __0x4079, __0x4080 );
			}

			
			__0x4080 = __0x4116( EngineScrollBarMouseLocation.BottomOrRightArrow );
			if( Orientation == Orientation.Vertical )
			{
				__0x4079 = new System.Drawing.Rectangle( 0, ClientSize.Height - __0x4107(), ClientSize.Width, __0x4107() );
				switch( __0x4080 )
				{
				case ScrollBarState.Disabled:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.DownDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.DownPressed ); break;
				case ScrollBarState.Normal:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.DownNormal ); break;
				case ScrollBarState.Hot:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.DownHot ); break;
				}
			}
			else
			{
				__0x4079 = new System.Drawing.Rectangle( ClientSize.Width - __0x4107(), 0, __0x4107(), ClientSize.Height );
				switch( __0x4080 )
				{
				case ScrollBarState.Disabled:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.RightDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.RightPressed ); break;
				case ScrollBarState.Normal:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.RightNormal ); break;
				case ScrollBarState.Hot:
					__0x4109( e.Graphics, __0x4079, ScrollBarArrowButtonState.RightHot ); break;
				}
			}

			
			

			
			

		}

		
		
		
		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		ScrollBarState __0x4116( EngineScrollBarMouseLocation __0x4165 )
		{
			if( this.Enabled )
			{
				if( MouseScrollBarArea == __0x4165 )
					return MouseUpDownStatus == true ? ScrollBarState.Pressed : ScrollBarState.Hot;
				else
					return ScrollBarState.Normal;
			}
			else
				return ScrollBarState.Disabled;

		}

#endregion

#region helper methods

		void __0x4117( int __0x4166 )
		{
			__0x4106( Value, Value, ScrollEventType.ThumbTrack );
			__0x4106( Value, __0x4166, ScrollEventType.ThumbTrack );
			Value = __0x4166;
			__0x4106( Value, Value, ScrollEventType.ThumbPosition );
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		[Browsable( false )]
		
		int TrackLength
		{
			get
			{
				if( Orientation == Orientation.Vertical )
					return this.ClientSize.Height - 2 * __0x4132();
				else
					return this.ClientSize.Width - 2 * __0x4132();
			}
		}

		int ThumbLength
		{
			get
			{
				if( Minimum == Maximum ) return TrackLength;

				var __0x4083 = ItemSize * ( Maximum - Minimum + 1 ) + ( Orientation == Orientation.Vertical ? Height : Width );
				if( __0x4083 <= TrackLength || __0x4083 == 0 )
					return TrackLength;

				var __0x4084 = (double)TrackLength / (double)__0x4083;
				int __0x4085 = (int)( __0x4084 * TrackLength );

				

				
				

				if( Orientation == Orientation.Vertical )
				{
					if( __0x4085 < __0x4132() )
						__0x4085 = __0x4132();
				}
				else
				{
					if( __0x4085 < __0x4132() )
						__0x4085 = __0x4132();
				}
				return __0x4085;
			}
		}

		int __0x4118( int __0x4167 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( Maximum == Minimum ) return __0x4132();

				decimal __0x4086 = (decimal)( ClientSize.Height - 2 * __0x4132() - ThumbLength ) / ( Maximum - Minimum );
				return (int)( ( __0x4167 - Minimum ) * __0x4086 ) + __0x4132();
			}
			else
			{
				if( Maximum == Minimum ) return __0x4132();

				decimal __0x4087 = (decimal)( ClientSize.Width - 2 * __0x4132() - ThumbLength ) / ( Maximum - Minimum );
				return (int)( ( __0x4167 - Minimum ) * __0x4087 ) + __0x4132();
			}
		}

		int __0x4119( int __0x4168 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( ClientSize.Height - 2 * __0x4132() - ThumbLength == 0 )
					return 0;
				else
				{
					decimal __0x4088 = (decimal)( ( __0x4168 - __0x4132() ) ) / ( ClientSize.Height - 2 * __0x4132() - ThumbLength );
					return (int)( ( Maximum - Minimum ) * __0x4088 + Minimum );
				}
			}
			else
			{
				if( ClientSize.Width - 2 * __0x4132() - ThumbLength == 0 )
					return 0;
				else
				{
					decimal __0x4089 = (decimal)( ( __0x4168 - __0x4132() ) ) / ( ClientSize.Width - 2 * __0x4132() - ThumbLength );
					return (int)( ( Maximum - Minimum ) * __0x4089 + Minimum );
				}
			}
		}

		EngineScrollBarMouseLocation __0x4120( int __0x4169, out int __0x4170 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( __0x4169 <= __0x4132() )
				{
					__0x4170 = __0x4169;
					return EngineScrollBarMouseLocation.TopOrLeftArrow;
				}
				else if( __0x4169 > ClientSize.Height - __0x4132() )
				{
					__0x4170 = __0x4169 - ClientSize.Height + __0x4132();
					return EngineScrollBarMouseLocation.BottomOrRightArrow;
				}
				else
				{
					int __0x4090 = __0x4118( Value );
					if( __0x4169 < __0x4090 )
					{
						__0x4170 = __0x4169 - __0x4132();
						return EngineScrollBarMouseLocation.TopOrLeftTrack;
					}
					else if( __0x4169 < __0x4090 + ThumbLength )
					{
						__0x4170 = __0x4169 - __0x4090;
						return EngineScrollBarMouseLocation.Thumb;
					}
					else
					{
						__0x4170 = __0x4169 - __0x4090 - ThumbLength;
						return EngineScrollBarMouseLocation.BottomOrRightTrack;
					}
				}
			}
			else
			{
				if( __0x4169 <= __0x4132() )
				{
					__0x4170 = __0x4169;
					return EngineScrollBarMouseLocation.TopOrLeftArrow;
				}
				else if( __0x4169 > ClientSize.Width - __0x4132() )
				{
					__0x4170 = __0x4169 - ClientSize.Width + __0x4132();
					return EngineScrollBarMouseLocation.BottomOrRightArrow;
				}
				else
				{
					int __0x4091 = __0x4118( Value );
					if( __0x4169 < __0x4091 )
					{
						__0x4170 = __0x4169 - __0x4132();
						return EngineScrollBarMouseLocation.TopOrLeftTrack;
					}
					else if( __0x4169 < __0x4091 + ThumbLength )
					{
						__0x4170 = __0x4169 - __0x4091;
						return EngineScrollBarMouseLocation.Thumb;
					}
					else
					{
						__0x4170 = __0x4169 - __0x4091 - ThumbLength;
						return EngineScrollBarMouseLocation.BottomOrRightTrack;
					}
				}
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

#endregion

#region Context menu event handlers

		void __0x4121( object __0x4171, EventArgs __0x4172 )
		{
			__0x4106( Minimum, Value, ScrollEventType.First );
			Value = Minimum;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4122( object __0x4173, EventArgs __0x4174 )
		{
			__0x4106( Maximum, Value, ScrollEventType.Last );
			Value = Maximum;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4123( object __0x4175, EventArgs __0x4176 )
		{
			__0x4117( __0x4027 );
		}

		void __0x4124( object __0x4177, EventArgs __0x4178 )
		{
			__0x4106( Value - LargeChange, Value, ScrollEventType.LargeDecrement );
			Value -= LargeChange;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4125( object __0x4179, EventArgs __0x4180 )
		{
			__0x4106( Value + LargeChange, Value, ScrollEventType.LargeIncrement );
			Value += LargeChange;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4126( object __0x4181, EventArgs __0x4182 )
		{
			__0x4106( Value - SmallChange, Value, ScrollEventType.SmallDecrement );
			Value -= SmallChange;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4127( object __0x4183, EventArgs __0x4184 )
		{
			__0x4106( Value + SmallChange, Value, ScrollEventType.SmallIncrement );
			Value += SmallChange;
			__0x4106( Value, Value, ScrollEventType.EndScroll );
		}

#endregion

		
		
		
		
		
		
		
		
		

		string __0x4128( string __0x4185 )
		{
			return EditorContextMenuWinForms.Translate( __0x4185 );
		}

		void __0x4129( Point __0x4186 )
		{
			var __0x4092 = new List<KryptonContextMenuItemBase>();

			{
				var __0x4093 = new KryptonContextMenuItem( __0x4128( "Scroll Here" ), null, delegate ( object __0x4187, EventArgs __0x4188 )
				{
					__0x4117( __0x4027 );
				} );
				__0x4092.Add( __0x4093 );
			}

			
			__0x4092.Add( new KryptonContextMenuSeparator() );

			{
				var __0x4094 = new KryptonContextMenuItem( __0x4128( "Top" ), null, delegate ( object __0x4189, EventArgs __0x4190 )
				{
					__0x4106( Minimum, Value, ScrollEventType.First );
					Value = Minimum;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4094 );
			}

			{
				var __0x4095 = new KryptonContextMenuItem( __0x4128( "Bottom" ), null, delegate ( object __0x4191, EventArgs __0x4192 )
				{
					__0x4106( Maximum, Value, ScrollEventType.Last );
					Value = Maximum;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4095 );
			}

			
			__0x4092.Add( new KryptonContextMenuSeparator() );

			{
				var __0x4096 = new KryptonContextMenuItem( __0x4128( "Page Up" ), null, delegate ( object __0x4193, EventArgs __0x4194 )
				{
					__0x4106( Value - LargeChange, Value, ScrollEventType.LargeDecrement );
					Value -= LargeChange;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4096 );
			}

			{
				var __0x4097 = new KryptonContextMenuItem( __0x4128( "Page Down" ), null, delegate ( object __0x4195, EventArgs __0x4196 )
				{
					__0x4106( Value + LargeChange, Value, ScrollEventType.LargeIncrement );
					Value += LargeChange;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4097 );
			}

			
			__0x4092.Add( new KryptonContextMenuSeparator() );

			{
				var __0x4098 = new KryptonContextMenuItem( __0x4128( "Scroll Up" ), null, delegate ( object __0x4197, EventArgs __0x4198 )
				{
					__0x4106( Value - SmallChange, Value, ScrollEventType.SmallDecrement );
					Value -= SmallChange;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4098 );
			}

			{
				var __0x4099 = new KryptonContextMenuItem( __0x4128( "Scroll Down" ), null, delegate ( object __0x4199, EventArgs __0x4200 )
				{
					__0x4106( Value + SmallChange, Value, ScrollEventType.SmallIncrement );
					Value += SmallChange;
					__0x4106( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x4092.Add( __0x4099 );
			}

			

			EditorContextMenuWinForms.Show( __0x4092, this );
		}

		private void __0x4130( object __0x4201, MouseEventArgs __0x4202 )
		{
			
			
		}

		private void __0x4131( object __0x4203, MouseEventArgs __0x4204 )
		{
			if( __0x4204.Button == MouseButtons.Right )
				__0x4129( __0x4204.Location );
		}

		int __0x4132()
		{
			return Orientation == Orientation.Vertical ? Width : Height;
		}

	}

#region Enhanced event argument definitions

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	

	/// <summary>
	/// Arguments for EnhancedScrollEvent.
	/// </summary>
	public class EngineScrollBarEventArgs : EventArgs
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public EngineScrollBarEventArgs()
		{
			this.NewValue = 0;
			this.OldValue = 0;
			this.Type = ScrollEventType.EndScroll;
			this.ScrollOrientation = ScrollOrientation.VerticalScroll;

		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="OldValue">Previous EnhancedScrollBar value.</param>
		/// <param name="NewValue">New EnhancedScrollBar value.</param>
		/// <param name="Type">Type of the scroll event.</param>
		/// <param name="ScrollOrientation">EnhancedScrollBar orientation.</param>
		public EngineScrollBarEventArgs( int OldValue, int NewValue, ScrollEventType Type, ScrollOrientation ScrollOrientation )
		{
			this.NewValue = NewValue;
			this.OldValue = OldValue;
			this.ScrollOrientation = ScrollOrientation;
			this.Type = Type;
		}

		/// <summary>
		/// Previous EnhancedScrollBar value.
		/// </summary>
		public int OldValue { set; get; }

		/// <summary>
		/// New EnhancedScrollBar value.
		/// </summary>
		public int NewValue { set; get; }

		/// <summary>
		/// EnhancedScrollBar orientation.
		/// </summary>
		public ScrollOrientation ScrollOrientation { set; get; }

		/// <summary>
		/// Type of the scroll event.
		/// </summary>
		public ScrollEventType Type { set; get; }
	}

	/// <summary>
	/// Arguments for mouse related events.
	/// </summary>
	public class EngineScrollBarMouseEventArgs : MouseEventArgs
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="Value">ScrollBar <c>Value when event occurred.</c></param>
		/// <param name="MouseArgs">Original <c>MouseArgs</c>.</param>
		
		/// <param name="ScrollBarSection">Section of the EnhancedScrollBar where mouse pointer is located.</param>
		public EngineScrollBarMouseEventArgs( int Value, MouseEventArgs MouseArgs, EngineScrollBarMouseLocation ScrollBarSection ) : base( MouseArgs.Button, MouseArgs.Clicks, MouseArgs.X, MouseArgs.Y, MouseArgs.Delta )
		{

			this.Value = Value;
			
			this.ScrollBarSection = ScrollBarSection;

		}

		/// <summary>
		/// ScrollBar <c>Value</c> when event occurred.
		/// </summary>
		public int Value { set; get; }

		
		
		
		

		/// <summary>
		/// Section of the EnhancedScrollBar where mouse pointer is located.
		/// </summary>
		public EngineScrollBarMouseLocation ScrollBarSection { set; get; }
	}

#endregion

#region Public Enumerators

	/// <summary>
	/// Area of ScrollBar definitions. Used to describe relation of mouse pointer location
	/// to the distinct part of ScrollBar.
	/// </summary>
	public enum EngineScrollBarMouseLocation
	{
		/// <summary>
		/// Located outside of the ScrollBar.
		/// </summary>
		OutsideScrollBar,

		/// <summary>
		/// Located over top (for vertical ScrollBar) or 
		/// over left hand side arrow (for horizontal ScrollBar).
		/// </summary>
		TopOrLeftArrow,

		/// <summary>
		/// Located over top (for vertical Scrollbar) or
		/// over left hand side track (for horizontal ScrollBar).
		/// Track is the area between arrow and thumb images.
		/// </summary>
		TopOrLeftTrack,

		/// <summary>
		/// Located over ScrollBar thumb. Thumb is movable portion of the ScrollBar.
		/// </summary>
		Thumb,

		/// <summary>
		/// Located over bottom (for vertical Scrollbar) or
		/// over right hand side track (for horizontal ScrollBar).
		/// Track is the area between arrow and thumb images.
		/// </summary>
		BottomOrRightTrack,

		/// <summary>
		/// Located over bottom (for vertical ScrollBar) or 
		/// over right hand side arrow (for horizontal ScrollBar).
		/// </summary>
		BottomOrRightArrow
	}

#endregion

	

	
	
	
	
	
	
	
	

	
	
	
	
	

	

}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Advanced KryptonTextBox for Grid. It may look like a label.
	/// </summary>
	[ToolboxItem( true )]
	
	[DefaultProperty( "Text" )]
	[DefaultBindingProperty( "Text" )]
	[Description( "EngineTextBox" )]
	
	[ComVisible( true )]
	public class EngineTextBox : KryptonTextBox
	{
		bool __0x4205;
		string __0x4206 = string.Empty;
		Color? __0x4207;

		[Browsable( true )]
		[EditorBrowsable( EditorBrowsableState.Always )]
		public override bool AutoSize
		{
			get { return base.AutoSize; }
			set { base.AutoSize = value; }
		}

		[DefaultValue( false )]
		public bool LikeLabel
		{
			get { return __0x4205; }
			set
			{
				if( __0x4205 == value )
					return;
				__0x4205 = value;

				ReadOnly = value;
				
				StateCommon.Back.Color1 = GetResolvedPalette().GetBackColor1( __0x4205 ? PaletteBackStyle.PanelClient : PaletteBackStyle.InputControlStandalone, PaletteState.Normal );
				StateCommon.Border.Draw = __0x4205 ? InheritBool.False : InheritBool.True;
				TabStop = !__0x4205;
			}
		}

		public void SetError( string message )
		{
			if( __0x4206 == message )
				return;

			__0x4206 = message;

			if( __0x4207 == null )
				__0x4207 = StateCommon.Border.Color1;

			if( !string.IsNullOrEmpty( __0x4206 ) )
				StateCommon.Border.Color1 = Color.Red;
			else
				StateCommon.Border.Color1 = __0x4207.Value;

			
		}
	}
}




namespace NeoAxis.Editor
{
	public class EngineToolStrip : ToolStrip
	{
		ToolStripItem __0x4208 = null;
		Point __0x4209;
		System.Windows.Forms.Timer __0x4210;
		EngineToolTip __0x4211;
		string __0x4212;
		

		

		public EngineToolStrip()
			: base()
		{
			ShowItemToolTips = false;
			__0x4210 = new System.Windows.Forms.Timer();
			__0x4210.Enabled = false;
			__0x4210.Interval = SystemInformation.MouseHoverTime;
			__0x4210.Tick += new System.EventHandler( __0x4215 );
			__0x4211 = new EngineToolTip();
		}

		protected override void OnMouseMove( MouseEventArgs mea )
		{
			base.OnMouseMove( mea );
			ToolStripItem __0x4213 = this.GetItemAt( mea.Location );
			if( __0x4208 != __0x4213 ||
				( Math.Abs( __0x4209.X - mea.X ) > SystemInformation.MouseHoverSize.Width || ( Math.Abs( __0x4209.Y - mea.Y ) > SystemInformation.MouseHoverSize.Height ) ) )
			{
				__0x4208 = __0x4213;
				__0x4209 = mea.Location;
				if( __0x4211 != null )
					__0x4211.Hide( this );
				__0x4210.Stop();
				__0x4210.Start();
			}
		}

		protected override void OnMouseClick( MouseEventArgs e )
		{
			base.OnMouseClick( e );
			ToolStripItem __0x4214 = this.GetItemAt( e.Location );
			if( __0x4214 != null && __0x4211 != null )
				__0x4211.Hide( this );
		}

		protected override void OnMouseLeave( EventArgs e )
		{
			base.OnMouseLeave( e );
			__0x4210.Stop();
			if( __0x4211 != null )
				__0x4211.Hide( this );
			__0x4209 = new Point( -50, -50 );
			__0x4208 = null;
		}

		void __0x4215( object __0x4216, EventArgs __0x4217 )
		{
			__0x4210.Stop();
			try
			{
				
				
				
				
				

				if( __0x4208 == null )
				{
					if( __0x4212 != null && __0x4212.Length > 0 )
						__0x4211.SetToolTip( this, __0x4212 );
				}
				else if( ( !( __0x4208 is ToolStripDropDownButton ) && !( __0x4208 is ToolStripSplitButton ) ) ||
					( ( __0x4208 is ToolStripDropDownButton ) && !( (ToolStripDropDownButton)__0x4208 ).DropDown.Visible ) ||
					( ( ( __0x4208 is ToolStripSplitButton ) && !( (ToolStripSplitButton)__0x4208 ).DropDown.Visible ) ) )
				{
					if( __0x4208.ToolTipText != null && __0x4208.ToolTipText.Length > 0 && __0x4211 != null )
						__0x4211.SetToolTip( this, __0x4208.ToolTipText );
				}
			}
			catch { }
		}

		protected override void Dispose( bool disposing )
		{
			base.Dispose( disposing );
			if( disposing )
			{
				__0x4210.Dispose();
				__0x4211.Dispose();
			}
		}
	}
}





namespace NeoAxis.Editor
{
	static class ExtensionMethods
	{
		public static DockWindow GetDockWindow( this KryptonPage page )
		{
			
			if( page.Controls.Count == 0 )
				return null;
			return (DockWindow)page.Controls[ 0 ];
		}

		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	
	
	
	/// <summary>
	/// Represents a container of controls which create only for specific document.
	/// </summary>
	public partial class ForeachDocumentWindowContainer : DockWindow
	{
		/// <summary>
		/// Provides a panel data of <see cref="ForeachDocumentWindowContainer"/>.
		/// </summary>
		public class PanelData
		{
			public DocumentWindow documentWindow;
			public EUserControl control;
		}
		List<PanelData> __0x4218 = new List<PanelData>();
		EDictionary<DocumentWindow, PanelData> __0x4219 = new EDictionary<DocumentWindow, PanelData>();

		PanelData __0x4220;

		

		public ForeachDocumentWindowContainer()
		{
			__0x4238();
		}

		public PanelData GetPanel( DocumentWindow documentWindow )
		{
			if( documentWindow != null )
			{
				PanelData __0x4221;
				if( __0x4219.TryGetValue( documentWindow, out __0x4221 ) )
					return __0x4221;
			}
			return null;
		}

		private void __0x4233( object __0x4239, EventArgs __0x4240 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x4237();
		}

		protected virtual void OnSelectedPanelChanged( PanelData oldSelectedPanel ) { }

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x4220; }
			set
			{
				if( __0x4220 == value )
					return;

				var __0x4222 = __0x4220;
				__0x4220 = value;

				if( __0x4220 != null )
				{
					__0x4220.control.Enabled = true;
					__0x4220.control.Visible = true;
					
				}

				if( __0x4222 != null )
				{
					__0x4222.control.Visible = false;
					__0x4222.control.Enabled = false;
				}

				
				
				
				
				

				
				

				
				
				
				
				
				

				OnSelectedPanelChanged( __0x4222 );
			}
		}

		protected override void OnDestroy()
		{
			while( __0x4218.Count != 0 )
				__0x4235( __0x4218[ __0x4218.Count - 1 ] );

			base.OnDestroy();
		}

		protected virtual void OnCreatePanelControl( PanelData panel ) { }

		PanelData __0x4234( DocumentWindow __0x4241, bool __0x4242 )
		{
			PanelData __0x4223 = new PanelData();
			__0x4223.documentWindow = __0x4241;

			__0x4218.Add( __0x4223 );
			__0x4219.Add( __0x4223.documentWindow, __0x4223 );

			
			OnCreatePanelControl( __0x4223 );

			if( !__0x4242 && __0x4223.control != null )
			{
				__0x4223.control.Visible = false;
				__0x4223.control.Enabled = false;
			}

			return __0x4223;
		}

		void __0x4235( PanelData __0x4243 )
		{
			
			if( SelectedPanel == __0x4243 )
				SelectedPanel = null;

			var __0x4224 = __0x4243.control;
			__0x4224.Parent.Controls.Remove( __0x4224 );
			__0x4224.Dispose();

			__0x4218.Remove( __0x4243 );
			__0x4219.Remove( __0x4243.documentWindow );
		}

		private void __0x4236( object __0x4244, EventArgs __0x4245 )
		{
			
			if( !WinFormsUtility.IsDesignerHosted( this ) )
				__0x4231.Enabled = true;
		}

		public virtual void OnDocumentWindowSelectedObjectsChangedByUser( DocumentWindow documentWindow )
		{
			
			__0x4237();
		}

		void __0x4237()
		{
			var __0x4225 = EditorForm.Instance.WorkspaceController as WorkspaceControllerForForm;
			var __0x4226 = __0x4225.GetDockWindowsRecursive();
			var __0x4227 = __0x4225.SelectedDocumentWindow;

			
			if( __0x4227 != null )
			{
				if( __0x4227.OpenAsSettings )
					return;
				if( __0x4227.Document != null && __0x4227.Document.SpecialMode == "ProjectSettingsUserMode" )
					return;
			}

			
			foreach( PanelData __0x4232 in __0x4218.ToArray() )
			{
				if( !__0x4226.Contains( __0x4232.documentWindow ) )
					__0x4235( __0x4232 );
			}

			
			if( __0x4227 != null && GetPanel( __0x4227 ) == null )
				__0x4234( __0x4227, true );

			
			{
				bool __0x4228 = true;

				if( __0x4227 != null )
				{
					PanelData __0x4229 = GetPanel( __0x4227 );
					if( __0x4229 != null )
					{
						SelectedPanel = __0x4229;
						__0x4228 = false;
					}
				}

				if( __0x4228 )
					SelectedPanel = null;
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ForeachDocumentWindowContainer
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4230 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4230 != null))
            {
                __0x4230.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4238()
        {
			this.__0x4230 = new System.ComponentModel.Container();
			this.__0x4231 = new System.Windows.Forms.Timer(this.__0x4230);
			this.SuspendLayout();
			
			
			
			this.__0x4231.Interval = 10;
			this.__0x4231.Tick += new System.EventHandler(this.__0x4233);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ForeachDocumentContainer";
			this.Size = new System.Drawing.Size(621, 352);
			this.Load += new System.EventHandler(this.__0x4236);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x4231;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Provides read-only access to <see cref="DocumentWindow"/>.
	/// </summary>
	public interface IDocumentWindow
	{
		DocumentInstance Document { get; }
		bool IsDocumentSaved();
	}
}




namespace NeoAxis.Editor
{
	class ImageCollection : CollectionBase, IList, ICollection, IEnumerable
	{
		class __0x4275
		{
			public Image Image { get; set; }
			public string Key { get; set; }

			public __0x4275( Image image, string key )
			{
				Image = image;
				Key = key;
			}
		}

		public bool Empty => base.Count == 0;

		public bool IsReadOnly => false;

		public Image this[ int __0x4264 ]
		{
			get
			{
				if( __0x4264 < 0 || __0x4264 > base.Count - 1 )
					throw new ArgumentOutOfRangeException( "index" );
				return ( (__0x4275)base.InnerList[ __0x4264 ] ).Image;
				
			}
			set
			{
				if( __0x4264 < 0 || __0x4264 > base.Count - 1 )
					throw new ArgumentOutOfRangeException( "index" );
				if( value == null )
					throw new ArgumentNullException( "value" );
				( (__0x4275)base.InnerList[ __0x4264 ] ).Image = value;
			}
		}

		public Image this[ string __0x4265 ]
		{
			get
			{
				__0x4275 __0x4246 = null;
				foreach( __0x4275 __0x4259 in InnerList )
				{
					if( __0x4259.Key == __0x4265 )
					{
						__0x4246 = __0x4259;
						break;
					}
				}
				Image __0x4247 = null;
				if( __0x4246 != null )
				{
					__0x4247 = __0x4246.Image;
					
				}
				return __0x4247;
			}
			set
			{
				__0x4275 __0x4248 = null;
				foreach( __0x4275 __0x4260 in InnerList )
				{
					if( __0x4260.Key == __0x4265 )
					{
						__0x4248 = __0x4260;
						break;
					}
				}
				if( __0x4248 != null )
					__0x4248.Image = value;
				else
					this.Add( __0x4265, value );
			}
		}

		public StringCollection Keys
		{
			get
			{
				StringCollection __0x4249 = new StringCollection();
				for( int __0x4250 = 0; __0x4250 < base.Count; __0x4250++ )
				{
					string __0x4251 = ( (__0x4275)base.InnerList[ __0x4250 ] ).Key;
					if( __0x4251 != null )
						__0x4249.Add( __0x4251 );
				}
				return __0x4249;
			}
		}

		object IList.this[ int __0x4266 ]
		{
			get { return this[ __0x4266 ]; }
			set
			{
				if( !( value is Image ) )
					throw new ArgumentException( "value" );
				this[ __0x4266 ] = (Image)value;
			}
		}

		public void Add( Icon value )
		{
			if( value == null )
				throw new ArgumentNullException( "value" );
			base.InnerList.Add( new __0x4275( value.ToBitmap(), null ) );
		}

		public void Add( Image value )
		{
			if( value == null )
				throw new ArgumentNullException( "value" );
			base.InnerList.Add( new __0x4275( value, null ) );
		}

		public bool Contains( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			foreach( __0x4275 __0x4261 in base.InnerList )
			{
				if( __0x4261.Image == image )
					return true;
			}
			return false;
		}

		public int IndexOf( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			for( int __0x4252 = 0; __0x4252 < base.InnerList.Count; __0x4252++ )
			{
				if( ( (__0x4275)base.InnerList[ __0x4252 ] ).Image == image )
					return __0x4252;
			}
			return -1;
		}

		public void Remove( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			int __0x4253 = 0;
			while( true )
			{
				if( __0x4253 >= base.InnerList.Count )
					return;
				if( ( (__0x4275)base.InnerList[ __0x4253 ] ).Image == image )
					break;
				__0x4253++;
			}
			base.InnerList.RemoveAt( __0x4253 );
		}

		public void Add( string key, Icon icon )
		{
			base.InnerList.Add( new __0x4275( icon.ToBitmap(), key ) );
		}

		public void Add( string key, Image image )
		{
			base.InnerList.Add( new __0x4275( image, key ) );
		}

		public void AddRange( Image[] images )
		{
			if( images == null )
				throw new ArgumentNullException( "images" );
			foreach( var __0x4262 in images )
				Add( __0x4262 );
		}

		public bool ContainsKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			foreach( __0x4275 __0x4263 in base.InnerList )
			{
				if( __0x4263.Key == key )
					return true;
			}
			return false;
		}

		public new IEnumerator GetEnumerator()
		{
			var __0x4254 = new Image[ base.Count ];
			for( int __0x4255 = 0; __0x4255 < __0x4254.Length; __0x4255++ )
				__0x4254[ __0x4255 ] = this[ __0x4255 ];
			return __0x4254.GetEnumerator();
		}

		public int IndexOfKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			for( int __0x4256 = 0; __0x4256 < base.InnerList.Count; __0x4256++ )
			{
				if( ( (__0x4275)base.InnerList[ __0x4256 ] ).Key == key )
					return __0x4256;
			}
			return -1;
		}

		public void RemoveByKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			int __0x4257 = 0;
			while( true )
			{
				if( __0x4257 >= base.InnerList.Count )
					return;
				if( ( (__0x4275)base.InnerList[ __0x4257 ] ).Key == key )
					break;
				__0x4257++;
			}
			base.InnerList.RemoveAt( __0x4257 );
		}

		public void SetKeyName( int index, string name )
		{
			if( name == null )
				throw new ArgumentNullException( "name" );

			( (__0x4275)base.InnerList[ index ] ).Key = name;
		}

		void ICollection.CopyTo( Array __0x4267, int __0x4268 )
		{
			for( int __0x4258 = 0; __0x4258 < base.Count; __0x4258++ )
				__0x4267.SetValue( this[ __0x4258 ], __0x4268++ );
		}

		int IList.Add( object __0x4269 )
		{
			if( !( __0x4269 is Image ) )
				throw new ArgumentException( "value" );
			Add( (Image)__0x4269 );
			return base.Count - 1;
		}

		bool IList.Contains( object __0x4270 )
		{
			if( __0x4270 is Image )
				return Contains( (Image)__0x4270 );
			return false;
		}

		int IList.IndexOf( object __0x4271 )
		{
			if( __0x4271 is Image )
				return IndexOf( (Image)__0x4271 );
			return -1;
		}

		void IList.Insert( int __0x4272, object __0x4273 )
		{
			if( !( __0x4273 is Image ) )
				throw new ArgumentException( "value" );
			base.InnerList.Insert( __0x4272, new __0x4275( (Image)__0x4273, null ) );
		}

		void IList.Remove( object __0x4274 )
		{
			if( __0x4274 is Image )
				Remove( (Image)__0x4274 );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Import Window.
	/// </summary>
	public partial class ImportWindow : DockWindow
	{
		[Browsable( false )]
		public string InitialDestinationFolder = "";

		

		public ImportWindow()
		{
			__0x4310();

			
			__0x4293.Width = __0x4293.Parent.Width - DpiHelper.Default.ScaleValue( 8 );

			__0x4287.Values.Image = EditorResourcesCache.SelectFolder;

			CloseByEscape = true;

			WindowTitle = EditorLocalization.Translate( "ImportWindow", WindowTitle );
			EditorLocalization.TranslateForm( "ImportWindow", __0x4291 );

			EditorThemeUtility.ApplyDarkThemeToForm( __0x4291 );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x4293 );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4295.Location = new Point( __0x4294.Location.X + __0x4294.Width + DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
			

			__0x4295.Text = InitialDestinationFolder;

			__0x4298();

			__0x4290.Start();

			__0x4302();
		}

		void __0x4298()
		{
			__0x4284.Init( null, null, null );

			var __0x4276 = new List<ContentBrowser.Item>();
			foreach( var __0x4296 in DriveInfo.GetDrives() )
			{
				var __0x4277 = new ContentBrowserItem_File( __0x4284, null, __0x4296.Name, true );
				__0x4277.imageKey = "Folder";
				__0x4276.Add( __0x4277 );
			}
			__0x4284.SetData( __0x4276 );
		}

		private void __0x4299( ContentBrowser __0x4311, ContentBrowser.Item __0x4312, ref bool __0x4313 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4313 = true;
			if( __0x4301( out _ ) )
				__0x4303( null, null );
		}

		string __0x4300( string __0x4314 )
		{
			return EditorLocalization.Translate( "ImportWindow", __0x4314 );
		}

		bool __0x4301( out string __0x4315 )
		{
			__0x4315 = "";

			if( __0x4284.SelectedItems.Length == 0 )
			{
				__0x4315 = __0x4300( "No selected items." );
				return false;
			}

			return true;
		}

		void __0x4302()
		{
			
			__0x4293.Width = __0x4293.Parent.Width - DpiHelper.Default.ScaleValue( 8 );
			__0x4293.Height = DpiHelper.Default.ScaleValue( 25 );

			__0x4287.Location = new Point( __0x4293.Width - __0x4287.Width, __0x4287.Location.Y );

			__0x4295.Width = __0x4287.Location.X - DpiHelper.Default.ScaleValue( 4 ) - __0x4294.Bounds.Right;

			__0x4289.Location = new Point( __0x4293.Location.X, __0x4293.Bounds.Bottom + DpiHelper.Default.ScaleValue( 10 ) );
			__0x4289.Size = new Size(
				__0x4283.Bounds.Right - __0x4289.Location.X,
				__0x4283.Bounds.Top - DpiHelper.Default.ScaleValue( 10 ) - __0x4289.Location.Y );

			__0x4282.Enabled = __0x4301( out string reason );
			
			__0x4292.Text = reason;
		}

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		

		private void __0x4303( object __0x4316, EventArgs __0x4317 )
		{
			if( !__0x4308() )
				return;
			Close();
		}

		
		
		
		

		
		

		private void __0x4304( object __0x4318, EventArgs __0x4319 )
		{
			Close();
		}

		private void __0x4305( object __0x4320, EventArgs __0x4321 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x4302();
		}

		private void __0x4306( object __0x4322, EventArgs __0x4323 )
		{
		}

		private void __0x4307( object __0x4324, EventArgs __0x4325 )
		{
			again:;

			string __0x4278 = VirtualPathUtility.GetRealPathByVirtual( __0x4295.Text );

			if( EditorUtility.ShowOpenFileDialog( true, __0x4278, null, out string fileName ) )
			{
				__0x4278 = fileName;

				if( !VirtualPathUtility.GetVirtualPathByReal( __0x4278, out var virtualPath ) )
				{
					EditorMessageBox.ShowWarning( __0x4300( "Destination folder must be inside Assets folder." ) );
					goto again;
				}

				__0x4295.Text = virtualPath;
			}
		}

		
		
		
		

		bool __0x4308()
		{
			string __0x4279 = VirtualPathUtility.GetRealPathByVirtual( __0x4295.Text );

			List<string> __0x4280 = new List<string>();
			foreach( var __0x4297 in __0x4284.SelectedItems )
			{
				if( __0x4297 is ContentBrowserItem_File fileItem )
					__0x4280.Add( fileItem.FullPath );
			}

			if( __0x4280.Count != 0 )
				EditorImportResource.Import( __0x4280.ToArray(), __0x4279 );

			return true;
		}

		private void __0x4309( object __0x4326, EventArgs __0x4327 )
		{

		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4302();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ImportWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4281 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x4281 != null ) )
            {
                __0x4281.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4310()
        {
			this.__0x4281 = new System.ComponentModel.Container();
			this.__0x4282 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4283 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4285 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4284 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4293 = new System.Windows.Forms.Panel();
			this.__0x4294 = new System.Windows.Forms.Label();
			this.__0x4295 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4287 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4292 = new System.Windows.Forms.Label();
			this.__0x4288 = new System.Windows.Forms.Label();
			this.__0x4291 = new NeoAxis.Editor.EUserControl();
			this.__0x4289 = new System.Windows.Forms.TableLayoutPanel();
			this.__0x4286 = new System.Windows.Forms.Label();
			this.__0x4290 = new System.Windows.Forms.Timer(this.__0x4281);
			((System.ComponentModel.ISupportInitialize)(this.__0x4285)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4285.Panel1)).BeginInit();
			this.__0x4285.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4285.Panel2)).BeginInit();
			this.__0x4285.Panel2.SuspendLayout();
			this.__0x4285.SuspendLayout();
			this.__0x4293.SuspendLayout();
			this.__0x4291.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4282.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4282.Location = new System.Drawing.Point(375, 655);
			this.__0x4282.Name = "buttonImport";
			this.__0x4282.Size = new System.Drawing.Size(147, 32);
			this.__0x4282.TabIndex = 0;
			this.__0x4282.Values.Text = "Import";
			this.__0x4282.Click += new System.EventHandler(this.__0x4303);
			
			
			
			this.__0x4283.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4283.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4283.Location = new System.Drawing.Point(528, 655);
			this.__0x4283.Name = "buttonClose";
			this.__0x4283.Size = new System.Drawing.Size(147, 32);
			this.__0x4283.TabIndex = 1;
			this.__0x4283.Values.Text = "Close";
			this.__0x4283.Click += new System.EventHandler(this.__0x4304);
			
			
			
			this.__0x4285.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4285.Location = new System.Drawing.Point(12, 12);
			this.__0x4285.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4285.Panel1.Controls.Add(this.__0x4284);
			
			
			
			this.__0x4285.Panel2.Controls.Add(this.__0x4293);
			this.__0x4285.Panel2.Controls.Add(this.__0x4292);
			this.__0x4285.Panel2.Controls.Add(this.__0x4288);
			this.__0x4285.Panel2.Controls.Add(this.__0x4291);
			this.__0x4285.Size = new System.Drawing.Size(1030, 690);
			this.__0x4285.SplitterDistance = 350;
			this.__0x4285.SplitterPercent = 0.33980582524271846D;
			this.__0x4285.TabIndex = 3;
			
			
			
			this.__0x4284.CanSelectObjectSettings = false;
			this.__0x4284.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4284.FilteringMode = null;
			this.__0x4284.Location = new System.Drawing.Point(0, 0);
			this.__0x4284.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4284.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x4284.MultiSelect = true;
			this.__0x4284.Name = "contentBrowser1";
			this.__0x4284.ReadOnlyHierarchy = false;
			this.__0x4284.Size = new System.Drawing.Size(350, 690);
			this.__0x4284.TabIndex = 2;
			this.__0x4284.ThisIsSettingsWindow = false;
			this.__0x4284.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4299);
			
			
			
			
   
			this.__0x4293.Controls.Add(this.__0x4294);
			this.__0x4293.Controls.Add(this.__0x4295);
			this.__0x4293.Controls.Add(this.__0x4287);
			this.__0x4293.Location = new System.Drawing.Point(11, 22);
			this.__0x4293.Name = "panelName";
			this.__0x4293.Size = new System.Drawing.Size(664, 26);
			this.__0x4293.TabIndex = 10;
			
			
			
			this.__0x4294.AutoSize = true;
			this.__0x4294.Location = new System.Drawing.Point(4, 5);
			this.__0x4294.Name = "labelName";
			this.__0x4294.Size = new System.Drawing.Size(54, 17);
			this.__0x4294.TabIndex = 6;
			this.__0x4294.Text = "Assets\\";
			this.__0x4294.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			
			
			
			
   
			this.__0x4295.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x4295.Location = new System.Drawing.Point(63, 2);
			this.__0x4295.Name = "textBoxDestinationFolder";
			this.__0x4295.Size = new System.Drawing.Size(566, 21);
			this.__0x4295.TabIndex = 3;
			
			
			
			
			this.__0x4287.Location = new System.Drawing.Point(634, 0);
			this.__0x4287.Name = "buttonDestinationFolderBrowse";
			this.__0x4287.Size = new System.Drawing.Size(30, 26);
			this.__0x4287.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4287.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4287.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4287.TabIndex = 5;
			this.__0x4287.Values.Image = global::NeoAxis.Properties.Resources.SelectFolder_16;
			this.__0x4287.Values.Text = "";
			this.__0x4287.Click += new System.EventHandler(this.__0x4307);
			
			
			
			this.__0x4292.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4292.ForeColor = System.Drawing.Color.Red;
			this.__0x4292.Location = new System.Drawing.Point(222, 635);
			this.__0x4292.Name = "labelError";
			this.__0x4292.Size = new System.Drawing.Size(453, 17);
			this.__0x4292.TabIndex = 3;
			this.__0x4292.Text = "Error";
			this.__0x4292.Visible = false;
			
			
			
			this.__0x4288.AutoSize = true;
			this.__0x4288.Location = new System.Drawing.Point(26, 112);
			this.__0x4288.Name = "labelCreationPath";
			this.__0x4288.Size = new System.Drawing.Size(199, 17);
			this.__0x4288.TabIndex = 7;
			this.__0x4288.Text = "Creation path: CC\\FF\\BB.mesh";
			this.__0x4288.Visible = false;
			
			
			
			this.__0x4291.Controls.Add(this.__0x4289);
			this.__0x4291.Controls.Add(this.__0x4286);
			this.__0x4291.Controls.Add(this.__0x4282);
			this.__0x4291.Controls.Add(this.__0x4283);
			this.__0x4291.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4291.Location = new System.Drawing.Point(0, 0);
			this.__0x4291.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4291.Name = "eUserControl1";
			this.__0x4291.Size = new System.Drawing.Size(675, 690);
			this.__0x4291.TabIndex = 2;
			this.__0x4291.Load += new System.EventHandler(this.__0x4309);
			
			
			
			
   
   
			this.__0x4289.ColumnCount = 1;
			this.__0x4289.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4289.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4289.Location = new System.Drawing.Point(13, 132);
			this.__0x4289.Name = "tableLayoutPanel1";
			this.__0x4289.RowCount = 1;
			this.__0x4289.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4289.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4289.Size = new System.Drawing.Size(662, 500);
			this.__0x4289.TabIndex = 9;
			this.__0x4289.Visible = false;
			
			
			
			this.__0x4286.AutoSize = true;
			this.__0x4286.Location = new System.Drawing.Point(10, 0);
			this.__0x4286.Name = "label1";
			this.__0x4286.Size = new System.Drawing.Size(123, 17);
			this.__0x4286.TabIndex = 4;
			this.__0x4286.Text = "Destination folder:";
			
			
			
			this.__0x4290.Interval = 50;
			this.__0x4290.Tick += new System.EventHandler(this.__0x4305);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x4285);
			this.Name = "ImportWindow";
			this.Size = new System.Drawing.Size(1054, 714);
			this.WindowTitle = "Import";
			((System.ComponentModel.ISupportInitialize)(this.__0x4285.Panel1)).EndInit();
			this.__0x4285.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4285.Panel2)).EndInit();
			this.__0x4285.Panel2.ResumeLayout(false);
			this.__0x4285.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4285)).EndInit();
			this.__0x4285.ResumeLayout(false);
			this.__0x4293.ResumeLayout(false);
			this.__0x4293.PerformLayout();
			this.__0x4291.ResumeLayout(false);
			this.__0x4291.PerformLayout();
			this.ResumeLayout(false);

        }

        #endregion

        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4282;
        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4283;
		private ContentBrowser __0x4284;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4285;
		private System.Windows.Forms.Label __0x4286;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4287;
		private System.Windows.Forms.Label __0x4288;
		private System.Windows.Forms.TableLayoutPanel __0x4289;
		private System.Windows.Forms.Timer __0x4290;
		private NeoAxis.Editor.EUserControl __0x4291;
		private System.Windows.Forms.Label __0x4292;
		private System.Windows.Forms.Panel __0x4293;
		private System.Windows.Forms.Label __0x4294;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4295;
	}
}



namespace NeoAxis.Editor
{
	
	
	
	
	

	
	
	
	
	
	
	

	/// <summary>
	/// Helper class, to create initial DocumentWindow workspace configuration, and save to XML config.
	/// 
	/// only for wokspaces child windows.
	/// </summary>
	public static class KryptonConfigGenerator
	{
		public static string CreateEditorDocumentXmlConfiguration( IEnumerable<Component> components, Component selected = null )
		{
			var __0x4328 = new List<WorkspaceControllerForWindow.WindowConfig>();
			int __0x4329 = -1;

			foreach( var __0x4336 in components )
			{
				__0x4328.Add( WorkspaceControllerForWindow.WindowConfig.FromComponent( __0x4336 ) );

				if( selected == __0x4336 )
					__0x4329 = __0x4328.Count - 1;
			}
			return CreateEditorDocumentXmlConfiguration( __0x4328, __0x4329 );
		}

		internal static string CreateEditorDocumentXmlConfiguration( List<WorkspaceControllerForWindow.WindowConfig> config, int selectedIndex = -1 )
		{
			var __0x4330 = new KryptonDockingManager();
			__0x4330.PageSaving += __0x4338;

			var __0x4331 = new KryptonDockingWorkspace( "DockingWorkspace" );
			__0x4330.Add( __0x4331 );

			var __0x4332 = new List<KryptonPage>();
			foreach( var __0x4337 in config )
				__0x4332.Add( new KryptonPage() { Tag = __0x4337 } );

			var __0x4333 = __0x4330.AddToWorkspace( "DockingWorkspace", __0x4332.ToArray() );
			if( selectedIndex != -1 )
				__0x4333.SelectPage( __0x4332[ selectedIndex ].UniqueName );

			using( var __0x4334 = new MemoryStream() )
			{
				__0x4330.SaveConfigToStream( __0x4334, System.Text.Encoding.Unicode, Formatting.None );
				__0x4330.Dispose();

				return System.Text.Encoding.Unicode.GetString( __0x4334.ToArray() );
			}
		}

		private static void __0x4338( object __0x4339, DockPageSavingEventArgs __0x4340 )
		{
			var __0x4335 = __0x4340.Page.Tag as WorkspaceControllerForWindow.WindowConfig;
			__0x4335.Save( __0x4340.XmlWriter );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupListBox : KryptonRibbonGroupCustomControl
	{
		KryptonRibbonGroupListBoxControl __0x4341;

		
		Dictionary<Image, string> __0x4342 = new Dictionary<Image, string>();
		

		

		public KryptonRibbonGroupListBox()
		{
			__0x4352();

			__0x4341 = new KryptonRibbonGroupListBoxControl();
			CustomControl = __0x4341;
		}

		[Browsable( false )]
		public KryptonRibbonGroupListBoxControl Control
		{
			get { return __0x4341; }
		}

		public void SetItems( IList<(string, Image)> dataItems )
		{
			var __0x4343 = Control.contentBrowser1;

			
			int __0x4344;
			if( __0x4343.SelectedItems.Length != 0 )
				__0x4344 = (int)__0x4343.SelectedItems[ 0 ].Tag;
			else
				__0x4344 = -1;

			var __0x4345 = new List<ContentBrowser.Item>();

			var __0x4346 = false;

			for( int __0x4347 = 0; __0x4347 < dataItems.Count; __0x4347++ )
			{
				var __0x4348 = dataItems[ __0x4347 ];

				var __0x4349 = new ContentBrowserItem_Virtual( __0x4343, null, __0x4348.Item1 );
				__0x4349.Tag = __0x4347;

				var __0x4350 = __0x4348.Item2;
				if( __0x4350 != null )
				{
					if( !__0x4342.TryGetValue( __0x4350, out var imageKey ) )
					{
						

						imageKey = "_Image_" + __0x4342.Count.ToString();

						__0x4343.AddImageKey( imageKey, __0x4350 );

						__0x4342.Add( __0x4350, imageKey );

						__0x4346 = true;
					}

					__0x4349.imageKey = imageKey;
				}

				__0x4345.Add( __0x4349 );
			}

			if( __0x4346 )
				__0x4343.UpdateListImages();

			
			__0x4343.SetData( __0x4345, false );

			
			if( __0x4344 >= 0 && __0x4344 < __0x4343.Items.Count )
				__0x4343.SelectItems( new ContentBrowser.Item[] { __0x4345[ __0x4344 ] } );
			else if( __0x4343.Items.Count != 0 )
				__0x4343.SelectItems( new ContentBrowser.Item[] { __0x4345[ 0 ] } );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupListBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4351 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4351 != null ) )
			{
				__0x4351.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4352()
		{
			__0x4351 = new System.ComponentModel.Container();
		}

		#endregion
	}
}




namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupListBoxControl : EUserControl
	{
		public KryptonRibbonGroupListBoxControl()
		{
			__0x4355();

			if( kryptonLabel1.Height < kryptonLabel1.PreferredSize.Height )
				kryptonLabel1.Height = kryptonLabel1.PreferredSize.Height;
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x4353 = base.CreateParams;
				__0x4353.ExStyle |= 0x02000000;
				return __0x4353;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupListBoxControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4354 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4354 != null ) )
			{
				__0x4354.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4355()
		{
			this.kryptonLabel1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonSplitContainer1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowser1 = new NeoAxis.Editor.ContentBrowser();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.kryptonLabel1.AutoSize = false;
			this.kryptonLabel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonLabel1.Location = new System.Drawing.Point(0, 0);
			this.kryptonLabel1.Name = "kryptonLabel1";
			this.kryptonLabel1.Size = new System.Drawing.Size(169, 18);
			this.kryptonLabel1.StateCommon.Padding = new System.Windows.Forms.Padding(0);
			this.kryptonLabel1.StateCommon.ShortText.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.kryptonLabel1.StateCommon.ShortText.TextH = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.kryptonLabel1.StateCommon.ShortText.TextV = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Far;
			this.kryptonLabel1.TabIndex = 0;
			this.kryptonLabel1.Values.Text = "kryptonLabel1";
			
			
			
			this.kryptonSplitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.kryptonSplitContainer1.IsSplitterFixed = true;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer1.Margin = new System.Windows.Forms.Padding(0);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			this.kryptonSplitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.contentBrowser1);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.kryptonLabel1);
			this.kryptonSplitContainer1.Panel2MinSize = 18;
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(169, 89);
			this.kryptonSplitContainer1.SplitterDistance = 70;
			this.kryptonSplitContainer1.SplitterPercent = 0.7865168539325843D;
			this.kryptonSplitContainer1.SplitterWidth = 1;
			this.kryptonSplitContainer1.TabIndex = 3;
			
			
			
			this.contentBrowser1.CanSelectObjectSettings = false;
			this.contentBrowser1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowser1.FilteringMode = null;
			this.contentBrowser1.ListViewModeOverride = null;
			this.contentBrowser1.Location = new System.Drawing.Point(0, 0);
			this.contentBrowser1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.contentBrowser1.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowser1.Name = "contentBrowser1";
			this.contentBrowser1.ReadOnlyHierarchy = false;
			this.contentBrowser1.ShowToolBar = false;
			this.contentBrowser1.Size = new System.Drawing.Size(169, 70);
			this.contentBrowser1.TabIndex = 2;
			this.contentBrowser1.ThisIsSettingsWindow = false;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.kryptonSplitContainer1);
			this.Name = "KryptonRibbonGroupListBoxControl";
			this.Size = new System.Drawing.Size(172, 92);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel kryptonLabel1;
		public ContentBrowser contentBrowser1;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupSlider : KryptonRibbonGroupCustomControl
	{
		KryptonRibbonGroupSliderControl __0x4356;

		public KryptonRibbonGroupSlider()
		{
			__0x4358();

			__0x4356 = new KryptonRibbonGroupSliderControl();
			CustomControl = __0x4356;
		}

		[Browsable( false )]
		public KryptonRibbonGroupSliderControl Control
		{
			get { return __0x4356; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupSlider
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4357 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4357 != null ) )
			{
				__0x4357.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4358()
		{
			__0x4357 = new System.ComponentModel.Container();
		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupSliderControl : UserControl
	{
		double __0x4359;
		double __0x4360;
		double __0x4361;
		double __0x4362;

		public event System.EventHandler ValueChanged;

		bool __0x4363;

		

		public KryptonRibbonGroupSliderControl()
		{
			__0x4375();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( kryptonLabel1.Height < kryptonLabel1.PreferredSize.Height )
				kryptonLabel1.Height = kryptonLabel1.PreferredSize.Height;
		}

		public void Init( double minimum, double maximum, double exponentialPower )
		{
			this.__0x4359 = minimum;
			this.__0x4360 = maximum;
			this.__0x4361 = exponentialPower;
		}

		public double GetValue()
		{
			return __0x4362;
		}

		public void SetValue( double value )
		{
			this.__0x4362 = value;

			__0x4363 = true;
			__0x4370();
			__0x4371();
			__0x4363 = false;
		}

		void __0x4370()
		{
			double __0x4364 = ( __0x4362 - __0x4359 ) / ( __0x4360 - __0x4359 );
			if( __0x4361 != 0 )
				__0x4364 = Math.Pow( __0x4364, 1.0 / __0x4361 );
			kryptonTrackBar1.Value = MathEx.Clamp( (int)( __0x4364 * 1000 ), 0, 1000 );
		}

		void __0x4371()
		{
			var __0x4365 = __0x4362.ToString( "G29" );
			
			
			if( __0x4365.IndexOf( "-" ) == -1 && __0x4365.IndexOf( "." ) != -1 && __0x4365.IndexOf( "." ) <= 3 && __0x4365.Length > 4 )
			{
				__0x4365 = __0x4365.Substring( 0, 4 );
				if( __0x4365[ __0x4365.Length - 1 ] == '.' )
					__0x4365 = __0x4365.Substring( 0, __0x4365.Length - 1 );
			}
			kryptonTextBox1.Text = __0x4365;
			
		}

		private void __0x4372( object __0x4376, EventArgs __0x4377 )
		{
			if( __0x4363 )
				return;

			double __0x4366 = (double)kryptonTrackBar1.Value / 1000;
			if( __0x4361 != 0 )
				__0x4366 = Math.Pow( __0x4366, __0x4361 );
			__0x4366 = __0x4359 + __0x4366 * ( __0x4360 - __0x4359 );
			var __0x4367 = MathEx.Clamp( __0x4366, __0x4359, __0x4360 );

			if( __0x4367 != __0x4362 )
			{
				__0x4362 = __0x4367;

				__0x4363 = true;
				__0x4371();
				__0x4363 = false;

				ValueChanged?.Invoke( this, EventArgs.Empty );
			}
		}

		private void __0x4373( object __0x4378, EventArgs __0x4379 )
		{
			if( __0x4363 )
				return;

			if( double.TryParse( kryptonTextBox1.Text, out var newValue ) )
			{
				if( newValue != __0x4362 )
				{
					__0x4362 = newValue;

					__0x4363 = true;
					__0x4370();
					__0x4363 = false;

					ValueChanged?.Invoke( this, EventArgs.Empty );
				}
			}
		}

		private void __0x4374( object __0x4380, PaintEventArgs __0x4381 )
		{

		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x4368 = base.CreateParams;
				__0x4368.ExStyle |= 0x02000000;
				return __0x4368;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupSliderControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4369 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4369 != null ) )
			{
				__0x4369.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4375()
		{
			this.kryptonLabel1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonTrackBar1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.kryptonTextBox1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.kryptonSplitContainer1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.kryptonSplitContainer2 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel1)).BeginInit();
			this.kryptonSplitContainer2.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel2)).BeginInit();
			this.kryptonSplitContainer2.Panel2.SuspendLayout();
			this.kryptonSplitContainer2.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.kryptonLabel1.AutoSize = false;
			this.kryptonLabel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonLabel1.Location = new System.Drawing.Point(0, 0);
			this.kryptonLabel1.Name = "kryptonLabel1";
			this.kryptonLabel1.Size = new System.Drawing.Size(110, 62);
			this.kryptonLabel1.StateCommon.ShortText.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.kryptonLabel1.StateCommon.ShortText.TextH = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.kryptonLabel1.StateCommon.ShortText.TextV = Internal.ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Near;
			this.kryptonLabel1.TabIndex = 0;
			this.kryptonLabel1.Values.Text = "kryptonLabel1";
			this.kryptonLabel1.Paint += new System.Windows.Forms.PaintEventHandler(this.__0x4374);
			
			
			
			this.kryptonTrackBar1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonTrackBar1.DrawBackground = true;
			this.kryptonTrackBar1.LargeChange = 100;
			this.kryptonTrackBar1.Location = new System.Drawing.Point(0, 0);
			this.kryptonTrackBar1.Maximum = 1000;
			this.kryptonTrackBar1.Name = "kryptonTrackBar1";
			this.kryptonTrackBar1.Size = new System.Drawing.Size(75, 25);
			this.kryptonTrackBar1.SmallChange = 10;
			this.kryptonTrackBar1.TabIndex = 1;
			this.kryptonTrackBar1.TickStyle = System.Windows.Forms.TickStyle.None;
			this.kryptonTrackBar1.ValueChanged += new System.EventHandler(this.__0x4372);
			
			
			
			this.kryptonTextBox1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonTextBox1.Location = new System.Drawing.Point(0, 0);
			this.kryptonTextBox1.Name = "kryptonTextBox1";
			this.kryptonTextBox1.Size = new System.Drawing.Size(30, 23);
			this.kryptonTextBox1.TabIndex = 2;
			this.kryptonTextBox1.Text = "1.0";
			this.kryptonTextBox1.TextChanged += new System.EventHandler(this.__0x4373);
			
			
			
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonSplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.kryptonSplitContainer1.IsSplitterFixed = true;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.kryptonTrackBar1);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.kryptonTextBox1);
			this.kryptonSplitContainer1.Panel2MinSize = 28;
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(110, 25);
			this.kryptonSplitContainer1.SplitterDistance = 75;
			this.kryptonSplitContainer1.SplitterPercent = 0.68181818181818177D;
			this.kryptonSplitContainer1.TabIndex = 3;
			
			
			
			this.kryptonSplitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonSplitContainer2.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer2.IsSplitterFixed = true;
			this.kryptonSplitContainer2.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer2.Name = "kryptonSplitContainer2";
			this.kryptonSplitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer2.Panel1.Controls.Add(this.kryptonSplitContainer1);
			this.kryptonSplitContainer2.Panel1MinSize = 22;
			
			
			
			this.kryptonSplitContainer2.Panel2.Controls.Add(this.kryptonLabel1);
			this.kryptonSplitContainer2.Panel2MinSize = 10;
			this.kryptonSplitContainer2.Size = new System.Drawing.Size(110, 92);
			this.kryptonSplitContainer2.SplitterDistance = 25;
			this.kryptonSplitContainer2.SplitterPercent = 0.27173913043478259D;
			this.kryptonSplitContainer2.TabIndex = 4;
			
			
			
			this.Controls.Add(this.kryptonSplitContainer2);
			this.Name = "KryptonRibbonGroupSliderControl";
			this.Size = new System.Drawing.Size(110, 92);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel1)).EndInit();
			this.kryptonSplitContainer2.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel2)).EndInit();
			this.kryptonSplitContainer2.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2)).EndInit();
			this.kryptonSplitContainer2.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel kryptonLabel1;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar kryptonTrackBar1;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox kryptonTextBox1;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer2;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
	}
}





namespace NeoAxis.Editor
{
	public class LabelExtended : Label
	{
		public LabelExtended()
		{

			
			try
			{
				var __0x4382 = typeof( Label ).GetField( "controlToolTip", BindingFlags.NonPublic | BindingFlags.Instance );
				__0x4382?.SetValue( this, true );
			}
			catch { }

		}
	}
}





namespace NeoAxis.Editor
{
	public static class LoginUtility
	{
		const string __0x4383 = @"SOFTWARE\NeoAxis";

		static volatile string __0x4384 = "";
		static volatile ESet<string> __0x4385 = new ESet<string>();
		
		static volatile string __0x4386 = "";
		

		static string __0x4387;

		static string __0x4388;

		

		public static bool GetCurrentLicense( out string email, out string hash )
		{
#if !DEPLOY
			try
			{
				
				var __0x4389 = Registry.CurrentUser.OpenSubKey( __0x4383 );

				
				if( __0x4389 != null )
				{
					email = ( __0x4389.GetValue( "LoginEmail" ) ?? "" ).ToString();
					var __0x4390 = __0x4389.GetValue( "LoginHash" );
					if( __0x4390 != null )
						hash = EncryptDecrypt( __0x4390.ToString() );
					else
						hash = "";
					
					__0x4389.Close();
					return true;
				}
			}
			catch { }
#endif

			email = "";
			hash = "";
			return false;
		}

		internal static string EncryptDecrypt( string input )
		{
			char[] __0x4391 = { 'K', 'C', 'Q' }; 
			char[] __0x4392 = new char[ input.Length ];

			for( int __0x4393 = 0; __0x4393 < input.Length; __0x4393++ )
				__0x4392[ __0x4393 ] = (char)( input[ __0x4393 ] ^ __0x4391[ __0x4393 % __0x4391.Length ] );

			return new string( __0x4392 );
		}

		public static void SetCurrentLicense( string email, string hash )
		{
#if !DEPLOY
			try
			{
				var __0x4394 = Registry.CurrentUser.CreateSubKey( __0x4383 );

				__0x4394.SetValue( "LoginEmail", email );
				__0x4394.SetValue( "LoginHash", EncryptDecrypt( hash ) );
				__0x4394.Close();
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			RequestFullLicenseInfo();
#endif
		}

		static void __0x4416( object __0x4417 )
		{
			try
			{
				var __0x4395 = (Dictionary<string, string>)__0x4417;
				var __0x4396 = __0x4395[ "Email" ];
				var __0x4397 = __0x4395[ "Hash" ];

				var __0x4398 = StringUtility.EncodeToBase64URL( __0x4396 );
				var __0x4399 = StringUtility.EncodeToBase64URL( __0x4397 );
				
				

				string __0x4400 = $"email={__0x4398}&hash={__0x4399}";
				byte[] __0x4401 = Encoding.UTF8.GetBytes( __0x4400 );

				{
					WebRequest __0x4402 = WebRequest.Create( @"https://store.neoaxis.com/api/get_user_info2/" );
					
					__0x4402.Method = "POST";
					__0x4402.ContentType = "application/x-www-form-urlencoded";
					__0x4402.ContentLength = __0x4401.Length;
					Stream __0x4403 = __0x4402.GetRequestStream();
					__0x4403.Write( __0x4401, 0, __0x4401.Length );
					__0x4403.Close();

					string __0x4404;
					using( var __0x4405 = (HttpWebResponse)__0x4402.GetResponse() )
					using( var __0x4406 = __0x4405.GetResponseStream() )
					using( var __0x4407 = new StreamReader( __0x4406 ) )
						__0x4404 = __0x4407.ReadToEnd();

					if( !string.IsNullOrEmpty( __0x4404 ) )
					{
						var __0x4408 = new XmlDocument();
						__0x4408.LoadXml( __0x4404 );

						__0x4386 = "";

						if( __0x4408.DocumentElement != null )
						{
							foreach( XmlNode __0x4414 in __0x4408.DocumentElement.ChildNodes )
							{
								if( __0x4414.Name == "license" )
									__0x4384 = __0x4414.InnerText;
							}
						}
						
						
						
						
						
					}
					else
					{
						__0x4384 = "";
						__0x4386 = "Invalid username or password.";
					}
				}

				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				
				
				

				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				

				
				


				__0x4387 = null;
			}
			catch 
			{
				
			}
		}

		public static void RequestFullLicenseInfo()
		{
			__0x4384 = "";
			__0x4385.Clear();
			

			if( !GetCurrentLicense( out var email, out var hash ) )
				return;

			var __0x4409 = new Dictionary<string, string>();
			__0x4409[ "Email" ] = email;
			__0x4409[ "Hash" ] = hash;

			var __0x4410 = new Thread( __0x4416 );
			__0x4410.Start( __0x4409 );
		}

		public static bool GetRequestedFullLicenseInfo( out string license, out ESet<string> purchasedProducts, out string error )
		{
			if( !string.IsNullOrEmpty( __0x4384 ) || !string.IsNullOrEmpty( __0x4386 ) )
			{
				license = __0x4384;
				purchasedProducts = __0x4385;
				
				error = __0x4386;
				
				return true;
			}
			else
			{
				license = "";
				purchasedProducts = new ESet<string>();
				
				error = "";
				
				return false;
			}
		}

		
		
		

		

		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		
		

		public static string GetMachineId()
		{
#if !DEPLOY
			if( string.IsNullOrEmpty( __0x4388 ) )
			{
				try
				{
					var __0x4411 = new System.Management.ManagementClass( "win32_processor" );
					foreach( System.Management.ManagementObject __0x4415 in __0x4411.GetInstances() )
					{
						var __0x4412 = __0x4415.Properties[ "processorID" ].Value.ToString();
						__0x4388 = __0x4412;
						break;
					}
				}
				catch { }
			}
#endif

			return __0x4388;
		}

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		

		
		
		

		
		
		
		
		

		
		

		
		
		

		
		
		
		
		

		

		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		public static string GetLicenseCached()
		{
			if( __0x4387 == null )
			{
				__0x4387 = "";
				if( GetCurrentLicense( out _, out _ ) )
				{
					if( GetRequestedFullLicenseInfo( out var license, out _,  out _ ) )
						__0x4387 = license;
				}
			}

			var __0x4413 = __0x4387;
			if( __0x4413 == null )
				__0x4413 = "";
			return __0x4413;
		}

	}
}





namespace NeoAxis.Editor
{
	
	public class LowProfileDockableWorkspace : KryptonDockableWorkspace
	{
		protected readonly TabStyle CellBarTabStyle = TabStyle.LowProfile;
		protected readonly TabBorderStyle CellBarTabBorderStyle = TabBorderStyle.SquareEqualMedium;

		protected override void NewCellInitialize( KryptonWorkspaceCell cell )
		{
			base.NewCellInitialize( cell );

			cell.Bar.TabStyle = CellBarTabStyle;
			cell.Bar.TabBorderStyle = CellBarTabBorderStyle;

			
			cell.Button.CloseButtonDisplay = ButtonDisplay.Hide;
			cell.Button.ButtonDisplayLogic = ButtonDisplayLogic.Context;

			
			cell.Header.HeaderVisibleSecondary = false;
		}

		protected override void OnActiveCellChanged( ActiveCellChangedEventArgs e )
		{
			base.OnActiveCellChanged( e );

			
			KryptonWorkspaceCell __0x4418 = FirstCell();
			while( __0x4418 != null )
			{
				if( e.NewCell != __0x4418 )
				{
					__0x4418.Bar.TabStyle = CellBarTabStyle;
					__0x4418.Bar.TabBorderStyle = CellBarTabBorderStyle;
				}
				__0x4418 = NextCell( __0x4418 );
			}

			
			if( e.NewCell != null )
			{
				e.NewCell.Bar.TabStyle = CellBarTabStyle;
				e.NewCell.Bar.TabBorderStyle = CellBarTabBorderStyle;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class MessageLogOptions : Metadata.IMetadataProvider
	{
		[DefaultValue( Orientation.Vertical )]
		public Orientation SplitterOrientation { get; set; } = Orientation.Vertical;

		

		public MessageLogOptions()
		{
		}

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			foreach( var __0x4419 in BaseType.MetadataGetMembers( context ) )
			{
				
				
				
				
					yield return __0x4419;
			}
		}

		public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			return BaseType.MetadataGetMemberBySignature( signature, context );
		}

		public void Load( TextBlock block )
		{
			try
			{
				if( block.AttributeExists( nameof( SplitterOrientation ) ) )
					SplitterOrientation = (Orientation)Enum.Parse( typeof( Orientation ), block.GetAttribute( nameof( SplitterOrientation ) ) );
			}
			catch { }
		}

		public void Save( TextBlock block )
		{
			block.SetAttribute( nameof( SplitterOrientation ), SplitterOrientation.ToString() );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class MessageLogOptionsForm : EngineForm
	{
		public MessageLogOptionsForm()
		{
			__0x4430();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = __0x4428( Text );

			__0x4422.OverridePropertyDisplayName += __0x4426;
			__0x4422.OverridePropertyEnumItem += __0x4427;

			if( EditorLocalization.WideLanguage )
				__0x4422.SplitterRatio = 0.5f;
		}

		[Browsable( false )]
		public MessageLogOptions Options { get; set; }

		private void __0x4424( object __0x4431, EventArgs __0x4432 )
		{
			object[] __0x4420 = new object[ 1 ];
			__0x4420[ 0 ] = Options;
			__0x4422.SetData( null, __0x4420 );

			__0x4429();
		}

		private void __0x4425( object __0x4433, EventArgs __0x4434 )
		{
			Close();
		}

		private void __0x4426( HierarchicalContainer __0x4435, HCItemProperty __0x4436, ref string __0x4437 )
		{
			__0x4437 = __0x4428( __0x4437 );
		}

		private void __0x4427( HierarchicalContainer __0x4438, HCItemEnumDropDown __0x4439, ref string __0x4440, ref string __0x4441 )
		{
			__0x4440 = __0x4428( __0x4440 );
			__0x4441 = __0x4428( __0x4441 );
		}

		string __0x4428( string __0x4442 )
		{
			return EditorLocalization.Translate( "MessageLogOptionsForm", __0x4442 );
		}

		void __0x4429()
		{
			__0x4423.Location = new Point( ClientSize.Width - __0x4423.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x4423.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x4422.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x4422.Location.X, __0x4423.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x4422.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4429();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MessageLogOptionsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4421 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4421 != null ) )
			{
				__0x4421.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4430()
		{
			this.__0x4422 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x4423 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x4422.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x4422.DisplayGroups = false;
			this.__0x4422.Location = new System.Drawing.Point(0, 14);
			this.__0x4422.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4422.Name = "hierarchicalContainer1";
			this.__0x4422.Size = new System.Drawing.Size(550, 334);
			this.__0x4422.SplitterPosition = 220;
			this.__0x4422.SplitterRatio = 0.4F;
			this.__0x4422.TabIndex = 0;
			
			
			
			
			this.__0x4423.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4423.Location = new System.Drawing.Point(433, 358);
			this.__0x4423.Name = "buttonClose";
			this.__0x4423.Size = new System.Drawing.Size(117, 32);
			this.__0x4423.TabIndex = 5;
			this.__0x4423.Values.Text = "Close";
			this.__0x4423.Click += new System.EventHandler(this.__0x4425);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x4423;
			this.AcceptButton = this.__0x4423;
			this.ClientSize = new System.Drawing.Size(562, 402);
			this.Controls.Add(this.__0x4423);
			this.Controls.Add(this.__0x4422);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "MessageLogOptionsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Message Log Options";
			this.Load += new System.EventHandler(this.__0x4424);
			this.ResumeLayout(false);

		}

		#endregion

		private HierarchicalContainer __0x4422;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4423;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Message Log Window.
	/// </summary>
	public partial class MessageLogWindow : DockWindow
	{
		const int __0x4443 = 1000;

		const string __0x4444 = "Message Log";
		LogType __0x4445 = LogType.Info;
		int __0x4446;

		MessageLogOptions __0x4447 = new MessageLogOptions();
		int __0x4448 = -1;

		
		
		

		
		public delegate void ProcessCmdKeyEventDelegate( MessageLogWindow __0x4489, ref Message __0x4490, Keys __0x4491, ref bool __0x4492 );
		public event ProcessCmdKeyEventDelegate ProcessCmdKeyEvent;

		EditorAssemblyInterface.ITextEditorControl __0x4449;

		

		class __0x4520 : ContentBrowserItem_Virtual
		{
			public LogType type;

			public __0x4520( ContentBrowser owner, ContentBrowser.Item parent, string text )
				: base( owner, parent, text )
			{
			}
		}

		

		public enum LogType
		{
			
			Info,
			Warning,
			Error
		}

		public MessageLogWindow()
		{
			__0x4488();

			
			{
				__0x4449 = EditorAssemblyInterface.Instance.CreateTextEditorControl();
				var __0x4450 = (Control)this.__0x4449;

				this.__0x4468.Panel2.Controls.Add( __0x4450 );
				__0x4450.Dock = System.Windows.Forms.DockStyle.Fill;
				__0x4450.Location = new System.Drawing.Point( 0, 0 );
				__0x4450.Name = "kryptonRichTextBox1";
				this.__0x4449.EditorReadOnly = true;
				__0x4450.Size = new System.Drawing.Size( 363, 165 );
				
				
				__0x4450.TabIndex = 2;
				this.__0x4449.EditorText = "";
				this.__0x4449.EditorWordWrap = true;

				__0x4449.Border = true;
			}

			__0x4465.Image = EditorResourcesCache.Delete;
			__0x4466.Image = EditorResourcesCache.Options;

			Log.Handlers.InfoHandler += __0x4474;
			
			Log.Handlers.WarningHandler += __0x4475;
			Log.Handlers.ErrorHandler += __0x4476;

			
			__0x4469.SetData( new ContentBrowser.Item[ 0 ], false );
			__0x4469.AddImageKey( "Info", Properties.Resources.Info_16, Properties.Resources.Info_32 );
			__0x4469.AddImageKey( "Warning", Properties.Resources.Warning_16, Properties.Resources.Warning_32 );
			__0x4469.AddImageKey( "Error", Properties.Resources.Error_16, Properties.Resources.Error_32 );

			__0x4483();
			EngineConfig.SaveEvent += __0x4484;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			__0x4466.Text = EditorLocalization.Translate( "MessageLogWindow", __0x4466.Text );
			__0x4465.Text = EditorLocalization.Translate( "MessageLogWindow", __0x4465.Text );

			__0x4464.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		public override bool HideOnRemoving { get { return true; } }

		public void Clear()
		{
			__0x4449.EditorText = "";
		}

		private void __0x4472( object __0x4493, PreviewKeyDownEventArgs __0x4494 )
		{
			
			
			
		}

		void __0x4473()
		{
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( ProcessCmdKeyEvent != null )
			{
				bool __0x4451 = false;
				ProcessCmdKeyEvent( this, ref msg, keyData, ref __0x4451 );
				if( __0x4451 )
					return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		
		
		
		
		
		

		private void __0x4474( string __0x4495, ref bool __0x4496 )
		{
			if( IsDisposed )
				return;

			Print( __0x4495, LogType.Info );
		}

		private void __0x4475( string __0x4497, ref bool __0x4498, ref bool __0x4499 )
		{
			if( IsDisposed )
				return;

			Print( __0x4497, LogType.Warning );
			__0x4498 = true;
			
			
		}

		private void __0x4476( string __0x4500, ref bool __0x4501, ref bool __0x4502 )
		{
			if( IsDisposed )
				return;

			Print( __0x4500, LogType.Error );
			__0x4501 = true;
			
			

			
			{
				var __0x4452 = __0x4500;
				var __0x4453 = __0x4500.IndexOfAny( new char[] { '\r', '\n' } );
				if( __0x4453 != -1 )
					__0x4452 = __0x4452.Substring( 0, __0x4453 );
				ScreenNotifications.Show( __0x4452, true );
			}
		}

		public delegate void PrintFilterDelegate( string __0x4503, LogType __0x4504, ref bool __0x4505 );
		public static event PrintFilterDelegate PrintFilter;

		public void Print( string text, LogType type )
		{
			bool __0x4454 = false;
			PrintFilter?.Invoke( text, type, ref __0x4454 );
			if( __0x4454 )
				return;

			
			while( __0x4469.RootItems.Count >= __0x4443 )
				__0x4469.RemoveItem( __0x4469.RootItems[ 0 ] );

			var __0x4455 = text.Replace( "\r\n", " " ).Replace( "\r", " " ).Replace( "\n", "" ).Trim();
			var __0x4456 = new __0x4520( __0x4469, null, __0x4455 );
			__0x4456.type = type;
			__0x4456.Tag = text;
			__0x4456.imageKey = type.ToString();
			__0x4469.AddRootItem( __0x4456 );
			__0x4469.SelectItems( new ContentBrowser.Item[] { __0x4456 } );

			
			{
				__0x4445 = LogType.Info;
				__0x4446 = 0;
				foreach( __0x4520 __0x4471 in __0x4469.RootItems )
				{
					if( __0x4471.type > __0x4445 )
						__0x4445 = type;
					if( __0x4471.type != LogType.Info )
						__0x4446++;
				}
			}

			__0x4481();

			if( type == LogType.Error )
			{
				
				EditorAPI.ShowDockWindow<MessageLogWindow>();

				
				
			}
		}

		private void __0x4477( object __0x4506, EventArgs __0x4507 )
		{
			__0x4445 = LogType.Info;
			__0x4446 = 0;
			__0x4469.SetData( new ContentBrowser.Item[ 0 ], false );
			__0x4479();
			__0x4481();
		}

		private void __0x4478( ContentBrowser __0x4508, IList<ContentBrowser.Item> __0x4509, bool __0x4510, ref bool __0x4511 )
		{
			__0x4479();
		}

		void __0x4479()
		{
			if( __0x4469.SelectedItems.Length == 1 )
				__0x4449.EditorText = (string)__0x4469.SelectedItems[ 0 ].Tag;
			else
				__0x4449.EditorText = "";

			__0x4449.Select( 0, 0 );
			
		}

		Image __0x4480( LogType __0x4512 )
		{
			if( __0x4512 == LogType.Warning )
				return EditorResourcesCache.Warning;
			else if( __0x4512 == LogType.Error )
				return EditorResourcesCache.Error;
			else
				return null;
		}

		void __0x4481()
		{
			if( __0x4445 == LogType.Info )
				KryptonPage.ImageSmall = null;
			else
				KryptonPage.ImageSmall = __0x4480( __0x4445 );

			if( __0x4446 > 0 )
				KryptonPage.Text = EditorLocalization.Translate( "Windows", __0x4444 ) + $" ({__0x4446})";
			else
				KryptonPage.Text = EditorLocalization.Translate( "Windows", __0x4444 );

			
			EditorForm.Instance.WorkspaceController.RepaintAutoHiddenWindow( this );
		}

		void __0x4482( TextBlock __0x4513 )
		{
			__0x4447.Save( __0x4513 );

			__0x4513.SetAttribute( "SplitterDistance", __0x4468.SplitterDistance.ToString() );
		}

		void __0x4483()
		{
			var __0x4457 = EngineConfig.TextBlock.FindChild( nameof( MessageLogWindow ) );
			if( __0x4457 != null )
			{
				__0x4447.Load( __0x4457 );

				if( __0x4457.AttributeExists( "SplitterDistance" ) )
					__0x4448 = int.Parse( __0x4457.GetAttribute( "SplitterDistance" ) );
			}
		}

		void __0x4484()
		{
			var __0x4458 = EngineConfig.TextBlock;

			var __0x4459 = __0x4458.FindChild( nameof( MessageLogWindow ) );
			if( __0x4459 != null )
				__0x4458.DeleteChild( __0x4459 );

			var __0x4460 = __0x4458.AddChild( nameof( MessageLogWindow ) );

			__0x4447.Save( __0x4460 );
			__0x4460.SetAttribute( "SplitterDistance", __0x4468.SplitterDistance.ToString() );
		}

		private void __0x4485( object __0x4514, EventArgs __0x4515 )
		{
			__0x4464.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x4464.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x4466.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x4465.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x4473();

			var __0x4461 = (Control)__0x4449;
			__0x4461.Select();
			

			__0x4470.Start();
		}

		private void __0x4486( object __0x4516, EventArgs __0x4517 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			if( __0x4468.Orientation != __0x4447.SplitterOrientation )
				__0x4468.Orientation = __0x4447.SplitterOrientation;

			
			if( __0x4448 != -1 )
			{
				__0x4468.SplitterDistance = __0x4448;
				__0x4448 = -1;
			}
		}

		private void __0x4487( object __0x4518, EventArgs __0x4519 )
		{
			var __0x4462 = new MessageLogOptionsForm();
			__0x4462.Options = __0x4447;
			EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
			 {
				 __0x4462.ShowDialog();
			 } );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MessageLogWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4463 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4463 != null ) )
			{
				__0x4463.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4488()
		{
			this.__0x4463 = new System.ComponentModel.Container();
			this.__0x4464 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x4466 = new System.Windows.Forms.ToolStripButton();
			this.__0x4467 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x4465 = new System.Windows.Forms.ToolStripButton();
			this.__0x4468 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4469 = new NeoAxis.Editor.ContentBrowser();
			
			this.__0x4470 = new System.Windows.Forms.Timer(this.__0x4463);
			this.__0x4464.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4468)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4468.Panel1)).BeginInit();
			this.__0x4468.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4468.Panel2)).BeginInit();
			this.__0x4468.Panel2.SuspendLayout();
			this.__0x4468.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4464.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x4464.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x4464.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x4466,
            this.__0x4467,
            this.__0x4465});
			this.__0x4464.Location = new System.Drawing.Point(0, 0);
			this.__0x4464.Name = "toolStrip1";
			this.__0x4464.AutoSize = false;
			this.__0x4464.Size = new System.Drawing.Size(713, 25);
			this.__0x4464.TabIndex = 1;
			this.__0x4464.Text = "toolStrip1";
			
			
			
			this.__0x4466.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4466.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x4466.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4466.Name = "toolStripButtonOptions";
			this.__0x4466.AutoSize = false;
			this.__0x4466.Size = new System.Drawing.Size(23, 22);
			this.__0x4466.Text = "Options";
			this.__0x4466.Click += new System.EventHandler(this.__0x4487);
			
			
			
			this.__0x4467.Name = "toolStripSeparatorFilteringMode";
			this.__0x4467.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x4465.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4465.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x4465.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4465.Name = "toolStripButtonClear";
			this.__0x4465.AutoSize = false;
			this.__0x4465.Size = new System.Drawing.Size(23, 22);
			this.__0x4465.Text = "Clear";
			this.__0x4465.Click += new System.EventHandler(this.__0x4477);
			
			
			
			this.__0x4468.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4468.Location = new System.Drawing.Point(0, 25);
			this.__0x4468.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4468.Panel1.Controls.Add(this.__0x4469);
			
			
			
			
			this.__0x4468.Size = new System.Drawing.Size(713, 165);
			this.__0x4468.SplitterDistance = 345;
			this.__0x4468.SplitterPercent = 0.4838709677419355D;
			this.__0x4468.TabIndex = 2;
			
			
			
			this.__0x4469.CanSelectObjectSettings = false;
			this.__0x4469.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4469.FilteringMode = null;
			this.__0x4469.ListViewModeOverride = null;
			this.__0x4469.Location = new System.Drawing.Point(0, 0);
			this.__0x4469.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4469.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Objects;
			this.__0x4469.Name = "contentBrowser1";
			this.__0x4469.ReadOnlyHierarchy = false;
			this.__0x4469.ShowToolBar = false;
			this.__0x4469.Size = new System.Drawing.Size(345, 165);
			this.__0x4469.TabIndex = 2;
			this.__0x4469.ThisIsSettingsWindow = false;
			this.__0x4469.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4478);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.__0x4470.Interval = 50;
			this.__0x4470.Tick += new System.EventHandler(this.__0x4486);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x4468);
			this.Controls.Add(this.__0x4464);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "MessageLogWindow";
			this.Size = new System.Drawing.Size(713, 190);
			this.WindowTitle = "Message Log";
			this.Load += new System.EventHandler(this.__0x4485);
			this.__0x4464.ResumeLayout(false);
			this.__0x4464.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4468.Panel1)).EndInit();
			this.__0x4468.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4468.Panel2)).EndInit();
			this.__0x4468.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4468)).EndInit();
			this.__0x4468.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private NeoAxis.Editor.EngineToolStrip __0x4464;
		private System.Windows.Forms.ToolStripButton __0x4465;
		private System.Windows.Forms.ToolStripButton __0x4466;
		private System.Windows.Forms.ToolStripSeparator __0x4467;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4468;
		
		private ContentBrowser __0x4469;
		private System.Windows.Forms.Timer __0x4470;
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectCell : EUserControl
	{
		
		float __0x4521;

		

		public NewObjectCell()
		{
			__0x4523();
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		public virtual float CellsSortingPriority
		{
			get { return __0x4521; }
			set { __0x4521 = value; }
		}

		public virtual bool ReadyToCreate( out string reason )
		{
			reason = "";
			return true;
		}

		public class ObjectCreationContext
		{
			public object newObject;
			public string fileCreationRealFileName;
			public bool disableFileCreation;
		}
		public virtual bool ObjectCreation( ObjectCreationContext context )
		
		{
			return true;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class NewObjectCell
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4522 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4522 != null ) )
			{
				__0x4522.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4523()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewObjectCell";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public class NewObjectSettings : Metadata.IMetadataProvider
	{
		NewObjectWindow __0x4524;
		

		
		
		
		
		

		public virtual bool Init( NewObjectWindow window )
		{
			this.__0x4524 = window;
			
			return true;
		}

		[Browsable( false )]
		public NewObjectWindow Window
		{
			get { return __0x4524; }
		}

		public void GetCreateCSharpClassInfo( out string realFileName, out string className, out string csharpClassNameWithoutNamespace )
		{
			realFileName = Path.ChangeExtension( Window.GetFileCreationRealFileName(), "cs" );
			className = "Project." + Path.GetFileNameWithoutExtension( Window.GetFileCreationRealFileName() );
			csharpClassNameWithoutNamespace = Path.GetFileNameWithoutExtension( Window.GetFileCreationRealFileName() );
		}

		string __0x4536( string __0x4537 )
		{
			return EditorLocalization.Translate( "NewObjectWindow", __0x4537 );
		}

		public virtual bool ReadyToCreate( out string reason )
		{
			
			if( Window.IsFileCreation() && CreateCSharpClass )
			{
				GetCreateCSharpClassInfo( out var realFileName, out _, out _ );
				if( File.Exists( realFileName ) )
				{
					reason = string.Format( __0x4536( "A file with the name \'{0}\' already exists." ), Path.GetFileName( realFileName ) );
					return false;
				}
			}

			reason = "";
			return true;
		}

		public virtual bool Creation( NewObjectCell.ObjectCreationContext context )
		{
			if( Window.IsFileCreation() && CreateCSharpClass )
			{
				context.disableFileCreation = true;

				GetCreateCSharpClassInfo( out var csharpRealFileName, out var csharpClassName, out var csharpClassNameWithoutNamespace );

				Window.DisableUnableToCreateReason = true;
				try
				{

					try
					{
						
						
						{
							string __0x4525 = @"using System;

namespace Project
{
	public class {Name} : {Base}
	{
	}
}";

							__0x4525 = __0x4525.Replace( "{Name}", csharpClassNameWithoutNamespace );
							__0x4525 = __0x4525.Replace( "{Base}", Window.SelectedType.Name );

							File.WriteAllText( csharpRealFileName, __0x4525 );
						}
					}
					catch( Exception e )
					{
						EditorMessageBox.ShowWarning( e.Message );
						return false;
					}

					
					{
						
						{
							var __0x4526 = new List<string>();

							var __0x4527 = Path.Combine( "Assets", VirtualPathUtility.GetVirtualPathByReal( csharpRealFileName ) );
							__0x4526.Add( __0x4527 );

							if( CSharpProjectFileUtility.UpdateProjectFile( __0x4526, null, out var error ) )
							{
								if( __0x4526.Count > 1 )
									Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
								else
									Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
							}
							else
							{
								EditorMessageBox.ShowWarning( error );
								return false;
							}
						}

						EditorAPI.BuildProjectSolution( false );
					}

					try
					{
						
						{
							string __0x4528 = csharpClassName;
							
							var __0x4529 = ".component " + __0x4528 + "\r\n{\r\n}";

							File.WriteAllText( context.fileCreationRealFileName, __0x4529 );
						}
					}
					catch( Exception e )
					{
						EditorMessageBox.ShowWarning( e.Message );
						return false;
					}

				}
				finally
				{
					Window.DisableUnableToCreateReason = false;
				}

			}

			return true;
		}
		
		

		/// <summary>
		/// A base C# class will be created for the resource.
		/// </summary>
		[DefaultValue( false )]
		[Category( "Options" )]
		[DisplayName( "Create C# class" )]
		public bool CreateCSharpClass { get; set; }

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		protected virtual void OnMetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
		{
			var __0x4530 = member as Metadata.Property;
			if( __0x4530 != null )
			{
				switch( __0x4530.Name )
				{
				case nameof( CreateCSharpClass ):
					var __0x4531 = Window.SelectedType;
					if( !Window.IsFileCreation() || __0x4531 == null || !typeof( Component ).IsAssignableFrom( __0x4531.GetNetType() ) || typeof( CSharpScript ).IsAssignableFrom( __0x4531.GetNetType() ) )
						skip = true;
					break;
				}
			}
		}

		public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			var __0x4532 = new List<Metadata.Member>( BaseType.MetadataGetMembers( context ) );

			
			{
				var __0x4533 = BaseType.MetadataGetMemberBySignature( "property:" + nameof( CreateCSharpClass ) );
				if( __0x4533 != null )
				{
					if( __0x4532.Remove( __0x4533 ) )
						__0x4532.Add( __0x4533 );
				}
			}

			foreach( var __0x4535 in __0x4532 )
			
			{
				bool __0x4534 = false;
				if( context == null || context.Filter )
					OnMetadataGetMembersFilter( context, __0x4535, ref __0x4534 );
				if( !__0x4534 )
					yield return __0x4535;
			}
		}

		public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			return BaseType.MetadataGetMemberBySignature( signature, context );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectSettingsCell : NewObjectCell
	{
		NewObjectSettings __0x4538;

		public NewObjectSettingsCell()
		{
			__0x4544();
		}

		public bool Init( Type settingsClass, NewObjectWindow window )
		{
			__0x4538 = (NewObjectSettings)settingsClass.InvokeMember( "",
				BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance,
				null, null, null );

			if( !__0x4538.Init( window ) )
				return false;

			__0x4540.OverrideGroupDisplayName += __0x4541;
			__0x4540.OverridePropertyDisplayName += __0x4542;
			__0x4540.OverrideMemberDescription += __0x4543;

			__0x4540.SetData( null, new object[] { __0x4538 } );

			return true;
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			if( !__0x4538.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			if( !__0x4538.Creation( context ) )
				return false;

			return true;
		}

		private void __0x4541( HierarchicalContainer __0x4545, HCItemGroup __0x4546, ref string __0x4547 )
		{
			__0x4547 = EditorLocalization.Translate( "Object.Group", __0x4547 );
		}

		private void __0x4542( HierarchicalContainer __0x4548, HCItemProperty __0x4549, ref string __0x4550 )
		{
			__0x4550 = EditorLocalization.Translate( "Object.Property", __0x4550 );
		}

		private void __0x4543( HierarchicalContainer __0x4551, HCItemMember __0x4552, ref string __0x4553 )
		{
			__0x4553 = EditorLocalization.Translate( "Object.Description", __0x4553 );
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewObjectSettingsCell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4539 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4539 != null))
            {
                __0x4539.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4544()
        {
			this.__0x4540 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			this.__0x4540.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x4540.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4540.Location = new System.Drawing.Point(0, 0);
			this.__0x4540.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4540.Name = "hierarchicalContainer1";
			this.__0x4540.Size = new System.Drawing.Size(492, 163);
			this.__0x4540.SplitterPosition = 197;
			this.__0x4540.SplitterRatio = 0.4F;
			this.__0x4540.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4540);
			this.Name = "NewObjectSettingsCell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion

		private HierarchicalContainer __0x4540;
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectWindow : DockWindow
	{
		static ContentBrowserOptions __0x4554;

		
		public CreationDataClass creationData;

		Metadata.TypeInfo __0x4555;

		bool __0x4556 = true;

		

		public class CreationDataClass
		{
			public string initFileCreationDirectory = "";
			public DocumentWindow initDocumentWindow;
			public List<object> initParentObjects;
			public Metadata.TypeInfo initLockType;
			
			public bool initSupportAutoCreateAndClose;
			
			

			
			public ContentBrowser createdFromContentBrowser;

			

			
			
			

			public delegate bool BeforeCreateObjectsDelegate( NewObjectWindow __0x4654, Metadata.TypeInfo __0x4655 );
			public BeforeCreateObjectsDelegate beforeCreateObjectsFunction;

			public delegate void AdditionActionDelegate( NewObjectWindow __0x4656 );
			public AdditionActionDelegate additionActionBeforeEnabled;
			public AdditionActionDelegate additionActionAfterEnabled;



			
			public List<object> createdObjects;
			public List<object> createdObjectsToApplySettings = new List<object>();
			public List<Component> createdComponentsOnTopLevel = new List<Component>();

			public void ClearCreatedObjects()
			{
				createdObjects = null;
				createdObjectsToApplySettings = new List<object>();
				createdComponentsOnTopLevel = new List<Component>();
			}

			
			
			
			
		}

		

		static NewObjectWindow()
		{
			EngineConfig.SaveEvent += __0x4652;
		}

		public NewObjectWindow()
		{
			__0x4653();

			
			__0x4621.Width = __0x4621.Parent.Width - DpiHelper.Default.ScaleValue( 9 );

			
			if( __0x4554 != null )
				__0x4610.Options = __0x4554;
			else
			{
				if( !__0x4651() )
				{
					
					
					
					__0x4610.Options.PanelMode = ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally;
					__0x4610.Options.SplitterPosition = 3.0 / 5.0;
				}

				__0x4554 = __0x4610.Options;
			}

			CloseByEscape = true;

			WindowTitle = EditorLocalization.Translate( "NewObjectWindow", WindowTitle );
			EditorLocalization.TranslateForm( "NewObjectWindow", __0x4618 );

			EditorThemeUtility.ApplyDarkThemeToForm( __0x4618 );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x4621 );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4620.Visible = IsFileCreation();

			if( IsFileCreation() )
				__0x4613.Text = Path.Combine( creationData.initFileCreationDirectory, "File.ext" );
			else
				__0x4613.Text = "Object";
			

			if( creationData.initLockType != null )
				__0x4610.SetEnabled( false );

			__0x4630();

			if( creationData.initLockType != null )
				__0x4650();

			

			__0x4639();

			__0x4617.Start();
		}

		void __0x4630()
		{
			var __0x4557 = new ContentBrowser.SetReferenceModeDataClass();
			__0x4557.demandedType = MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) );
			
			
			
			
			
			__0x4557.allowNull = false;

			
			__0x4557.newObjectWindow = true;
			__0x4557.newObjectWindowFileCreation = IsFileCreation();

			__0x4610.Init( creationData.initDocumentWindow, null, __0x4557 );
			__0x4610.UpdateData();
			
			
			
			
			
		}

		[Browsable( false )]
		public CreationDataClass CreationData
		{
			get { return creationData; }
		}

		[Browsable( false )]
		public Metadata.TypeInfo SelectedType
		{
			get { return __0x4555; }
		}

		void __0x4631()
		{
			Metadata.TypeInfo __0x4558 = null;

			ContentBrowser.Item __0x4559 = null;
			if( __0x4610.SelectedItems.Length != 0 )
				__0x4559 = __0x4610.SelectedItems[ 0 ];

			if( __0x4559 != null )
			{
				__0x4559.CalculateReferenceValue( null, MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ),
					out string referenceValue, out bool canSet );

				if( !string.IsNullOrEmpty( referenceValue ) && canSet )
				{
					__0x4558 = (Metadata.TypeInfo)MetadataManager.GetValueByReference(
						__0x4610.SetReferenceModeData.demandedType.GetNetType(), null, referenceValue );
				}

				
				if( __0x4558 != null )
				{
					if( !MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x4558 ) &&
						!MetadataManager.GetTypeOfNetType( typeof( NewResourceType ) ).IsAssignableFrom( __0x4558 ) )
						__0x4558 = null;
				}
			}

			
			if( __0x4555 != __0x4558 )
			{
				__0x4555 = __0x4558;
				__0x4639();
			}
		}

		private void __0x4632( ContentBrowser __0x4657, IList<ContentBrowser.Item> __0x4658, bool __0x4659, ref bool __0x4660 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4631();
		}

		private void __0x4633( ContentBrowser __0x4661, ContentBrowser.Item __0x4662, ref bool __0x4663 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x4638( out string dummy ) )
				return;
			__0x4645( null, null );
		}

		string __0x4634()
		{
			
			var __0x4560 = __0x4555.GetNetType().GetCustomAttributes( typeof( NewObjectDefaultNameAttribute ), true );
			if( __0x4560.Length != 0 )
				return ( (NewObjectDefaultNameAttribute)__0x4560[ 0 ] ).Name;

			if( IsFileCreation() )
			{
				return "File.ext";
				
			}
			else
			{
				

				return __0x4555.GetUserFriendlyNameForInstance( true );
			}
		}

		string __0x4635( Metadata.TypeInfo __0x4664 )
		{
			

			var __0x4561 = __0x4664.GetNetType().GetCustomAttributes( typeof( ResourceFileExtensionAttribute ), true );
			if( __0x4561.Length != 0 )
			{
				var __0x4562 = (ResourceFileExtensionAttribute)__0x4561[ 0 ];
				return __0x4562.Extension;
			}

			
			return "UNKNOWN";
		}

		public bool IsFileCreation()
		{
			return creationData.initParentObjects == null;
		}

		void __0x4636()
		{
			if( __0x4555 != null )
			{
				var __0x4563 = __0x4634();

				if( IsFileCreation() )
				{
					var __0x4564 = "";
					try
					{
						__0x4564 = Path.GetDirectoryName( __0x4613.Text );
					}
					catch { }
					var __0x4565 = Path.Combine( __0x4564, __0x4563 );
					string __0x4566 = "." + __0x4635( __0x4555 );
					__0x4565 = Path.ChangeExtension( __0x4565, __0x4566 );

					
					

					
					

					
					if( VirtualFile.Exists( __0x4565 ) )
					{
						for( int __0x4567 = 2; ; __0x4567++ )
						{
							var __0x4568 = Path.ChangeExtension( __0x4565, null ) + __0x4567.ToString() + Path.GetExtension( __0x4565 );
							if( !VirtualFile.Exists( __0x4568 ) )
							{
								__0x4565 = __0x4568;
								break;
							}
						}
					}

					__0x4613.Text = __0x4565;
				}
				else
				{
					

					

					

					
					

					
					
					
					

					var __0x4569 = __0x4563;

					
					Component __0x4570 = null;
					if( creationData.initParentObjects.Count != 0 )
						__0x4570 = creationData.initParentObjects[ 0 ] as Component;

					
					if( __0x4570 != null && __0x4570.GetComponent( __0x4569 ) != null )
					{
						for( int __0x4571 = 2; ; __0x4571++ )
						{
							string __0x4572 = __0x4569 + " " + __0x4571.ToString();
							if( __0x4570.GetComponent( __0x4572 ) == null )
							{
								__0x4569 = __0x4572;
								break;
							}
						}
					}

					__0x4613.Text = __0x4569;
				}

				__0x4613.Enabled = true;
			}
			else
				__0x4613.Enabled = false;

			__0x4640();
		}

		string __0x4637( string __0x4665 )
		{
			return EditorLocalization.Translate( "NewObjectWindow", __0x4665 );
		}

		bool __0x4638( out string __0x4666 )
		{
			__0x4666 = "";

			if( __0x4555 == null )
				return false;

			if( IsFileCreation() )
			{
				if( string.IsNullOrEmpty( __0x4613.Text ) )
				{
					__0x4666 = __0x4637( "The file name is not specified." );
					return false;
				}

				if( __0x4613.Text.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
				{
					__0x4666 = __0x4637( "Invalid file name." );
					return false;
				}

				try
				{
					if( __0x4613.Text.Contains( '\\' ) || __0x4613.Text.Contains( '/' ) )
					{
						if( Path.GetFileName( __0x4613.Text ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
						{
							__0x4666 = __0x4637( "Invalid file name." );
							return false;
						}
					}
				}
				catch { }

				var __0x4573 = VirtualPathUtility.GetRealPathByVirtual( __0x4613.Text );
				if( File.Exists( __0x4573 ) )
				{
					__0x4666 = string.Format( __0x4637( "A file with the name \'{0}\' already exists." ), Path.GetFileName( __0x4573 ) );
					return false;
				}
			}

			foreach( var __0x4622 in __0x4616.Controls )
			{
				NewObjectCell __0x4574 = __0x4622 as NewObjectCell;
				if( __0x4574 != null )
				{
					if( !__0x4574.ReadyToCreate( out __0x4666 ) )
						return false;
				}
			}

			return true;
		}

		void __0x4639()
		{
			__0x4636();
			__0x4642();

			__0x4641();
		}

		void __0x4640()
		{
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		void __0x4641()
		{
			
			__0x4621.Width = __0x4621.Parent.Width - DpiHelper.Default.ScaleValue( 8 );
			__0x4621.Height = DpiHelper.Default.ScaleValue( 25 );

			if( !__0x4620.Visible )
			{
				__0x4613.Location = new Point( DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
				__0x4613.Width = __0x4621.Width - DpiHelper.Default.ScaleValue( 6 );
			}
			else
			{
				__0x4613.Location = new Point( __0x4620.Location.X + __0x4620.Width + DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
				__0x4613.Width = __0x4621.Width - __0x4620.Width - DpiHelper.Default.ScaleValue( 9 );
			}

			__0x4616.Location = new Point( __0x4621.Location.X, __0x4621.Bounds.Bottom + DpiHelper.Default.ScaleValue( 10 ) );
			__0x4616.Size = new Size(
				__0x4609.Bounds.Right - __0x4616.Location.X,
				__0x4609.Bounds.Top - DpiHelper.Default.ScaleValue( 10 ) - __0x4616.Location.Y );

			__0x4608.Enabled = __0x4638( out string reason );
			__0x4614.Enabled = __0x4608.Enabled;

			if( DisableUnableToCreateReason )
				__0x4619.Text = "";
			else
				__0x4619.Text = reason;
		}

		public Control AddCell( Type cellClass )
		{
			
			
			
			
			
			
			
			

			Control __0x4575 = (Control)cellClass.GetConstructor( new Type[ 0 ] ).Invoke( new object[ 0 ] );
			__0x4575.Anchor = AnchorStyles.Left | AnchorStyles.Right;
			__0x4616.Controls.Add( __0x4575 );

			return __0x4575;
		}

		void __0x4642()
		{
			

			__0x4616.Controls.Clear();

			if( SelectedType != null )
			{
				
				{
					

					var __0x4576 = SelectedType.GetNetType().GetCustomAttributes( typeof( NewObjectSettingsAttribute ), true );
					if( __0x4576.Length != 0 || IsFileCreation() )
					{
						Type __0x4577 = null;
						if( __0x4576.Length != 0 )
							__0x4577 = ( (NewObjectSettingsAttribute)__0x4576[ 0 ] ).SettingsClass;
						else
							__0x4577 = typeof( NewObjectSettings );

						var __0x4578 = (NewObjectSettingsCell)AddCell( typeof( NewObjectSettingsCell ) );
						if( !__0x4578.Init( __0x4577, this ) )
							__0x4616.Controls.Remove( __0x4578 );
					}

					
					
					
					
					
					
					
					
				}

				
				{
					var __0x4579 = SelectedType.GetNetType().GetCustomAttributes( typeof( NewObjectCellAttribute ), true );
					foreach( NewObjectCellAttribute __0x4623 in __0x4579 )
						AddCell( __0x4623.CellClass );
				}

				
				
				if( __0x4616.Controls.Count == 1 )
				{
					__0x4616.Controls[ 0 ].Size = new Size( 30, 15 );
					__0x4616.Controls[ 0 ].Dock = DockStyle.Fill;
				}
			}
		}

		
		
		
		
		
		

		private void __0x4643( object __0x4667, EventArgs __0x4668 )
		{
			__0x4640();
		}

		
		private void __0x4644( object __0x4669, EventArgs __0x4670 )
		{
			if( !__0x4647() )
				return;
		}

		private void __0x4645( object __0x4671, EventArgs __0x4672 )
		{
			if( !__0x4647() )
				return;

			Close();
		}

		private void __0x4646( object __0x4673, EventArgs __0x4674 )
		{
			Close();
		}

		
		
		
		
		

		public string GetFileCreationRealFileName()
		{
			return IsFileCreation() ? VirtualPathUtility.GetRealPathByVirtual( __0x4613.Text ) : "";
		}

		public bool ApplyCreationSettingsToObject( object createdObject, ref bool disableFileCreation )
		{
			var __0x4580 = createdObject as Component;
			var __0x4581 = GetFileCreationRealFileName();

			if( !IsFileCreation() && __0x4580 != null )
			{
				
				__0x4580.Name = __0x4613.Text;
			}

			__0x4580?.NewObjectSetDefaultConfiguration( true );

			foreach( var __0x4624 in __0x4616.Controls )
			{
				NewObjectCell __0x4582 = __0x4624 as NewObjectCell;
				if( __0x4582 != null )
				{
					var __0x4583 = new NewObjectCell.ObjectCreationContext();
					__0x4583.newObject = createdObject;
					__0x4583.fileCreationRealFileName = __0x4581;
					__0x4583.disableFileCreation = disableFileCreation;

					if( !__0x4582.ObjectCreation( __0x4583 ) )
					
					{
						

						return false;
					}

					disableFileCreation = __0x4583.disableFileCreation;
				}
			}

			return true;
		}

		bool __0x4647()
		{
			creationData.ClearCreatedObjects();

			

			
			

			
			
			{
				creationData.beforeCreateObjectsFunction?.Invoke( this, SelectedType );

				
				if( creationData.createdObjects == null )
				{
					creationData.createdObjects = new List<object>();

					if( creationData.initParentObjects != null )
					{
						foreach( var __0x4625 in creationData.initParentObjects )
						{
							var __0x4584 = __0x4625 as Component;

							object __0x4585;
							if( __0x4584 != null )
							{
								var __0x4586 = EditorUtility.GetNewObjectInsertIndex( __0x4584, SelectedType );
								__0x4585 = __0x4584.CreateComponent( SelectedType, __0x4586, false );
							}
							else
								__0x4585 = SelectedType.InvokeInstance( null );

							creationData.createdObjects.Add( __0x4585 );
							creationData.createdObjectsToApplySettings.Add( __0x4585 );
							var __0x4587 = __0x4585 as Component;
							if( __0x4587 != null )
								creationData.createdComponentsOnTopLevel.Add( __0x4587 );
						}
					}
					else
					{
						var __0x4588 = SelectedType.InvokeInstance( null );

						creationData.createdObjects.Add( __0x4588 );
						creationData.createdObjectsToApplySettings.Add( __0x4588 );
						var __0x4589 = __0x4588 as Component;
						if( __0x4589 != null )
							creationData.createdComponentsOnTopLevel.Add( __0x4589 );
					}
				}
			}

			
			
			if( creationData.createdObjects.Count == 0 )
			{
				
				return false;
			}

			string __0x4590 = "";
			if( IsFileCreation() )
				__0x4590 = VirtualPathUtility.GetRealPathByVirtual( __0x4613.Text );

			
			if( IsFileCreation() )
			{
				var __0x4591 = Path.GetDirectoryName( __0x4590 );
				if( !Directory.Exists( __0x4591 ) )
				{
					try
					{
						Directory.CreateDirectory( __0x4591 );
					}
					catch( Exception e )
					{
						Log.Warning( e.Message );
						return false;
					}
				}
			}

			
			bool __0x4592 = false;
			foreach( var __0x4626 in creationData.createdObjectsToApplySettings )
			{
				if( !ApplyCreationSettingsToObject( __0x4626, ref __0x4592 ) )
					return false;
			}

			
			creationData.additionActionBeforeEnabled?.Invoke( this );

			
			foreach( var __0x4627 in creationData.createdComponentsOnTopLevel )
				__0x4627.Enabled = true;

			creationData.additionActionAfterEnabled?.Invoke( this );
			
			

			
			if( IsFileCreation() )
			{
				
				

				if( creationData.createdComponentsOnTopLevel.Count == 1 && !__0x4592 )
				{
					var __0x4593 = creationData.createdComponentsOnTopLevel[ 0 ];
					if( !ComponentUtility.SaveComponentToFile( __0x4593, __0x4590, null, out string error ) )
					{
						if( !string.IsNullOrEmpty( error ) )
						{
							
							Log.Warning( error );
							return false;
						}
					}
				}

				
				foreach( var __0x4628 in creationData.createdObjects )
				{
					var __0x4594 = __0x4628 as IDisposable;
					if( __0x4594 != null )
						__0x4594.Dispose();
				}
			}

			
			if( !IsFileCreation() )
			{
				
				
				var __0x4595 = creationData.initDocumentWindow.Document;
				if( __0x4595 != null )
				{
					

					var __0x4596 = new UndoActionComponentCreateDelete( __0x4595, creationData.createdComponentsOnTopLevel, true );

					
					
					
					
					
					
					
					
					
					__0x4595.UndoSystem.CommitAction( __0x4596 );

					__0x4595.Modified = true;
				}
				else
				{
					
					Log.Warning( "impl" );
				}
			}

			
			if( IsFileCreation() )
			{
				

				EditorAPI.GetRestartApplication( out var needRestart, out _ );
				if( needRestart )
				{
					EditorSettingsSerialization.OpenFileAtStartup = __0x4590;
				}
				else
				{
					
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x4590 } );

					
					EditorAPI.OpenFileAsDocument( __0x4590, true, true );
				}
			}
			else
			{
				
				if( creationData.createdFromContentBrowser != null )
				{
					var __0x4597 = creationData.createdFromContentBrowser;
					if( __0x4597.IsHandleCreated && !__0x4597.IsDisposed )
						ContentBrowserUtility.SelectComponentItems( __0x4597, creationData.createdComponentsOnTopLevel.ToArray() );
				}
				else
					EditorAPI.SelectComponentsInMainObjectsWindow( creationData.initDocumentWindow, creationData.createdComponentsOnTopLevel.ToArray() );

				
				if( creationData.createdComponentsOnTopLevel.Count == 1 )
				{
					var __0x4598 = creationData.createdComponentsOnTopLevel[ 0 ];

					if( !__0x4598.EditorReadOnlyInHierarchy )
					{
						
						if( __0x4598 is FlowGraph || __0x4598 is CSharpScript )
							EditorAPI.OpenDocumentWindowForObject( creationData.initDocumentWindow.Document, __0x4598 );
					}
					
					
				}
			}

			
			creationData.ClearCreatedObjects();

			return true;
		}

		private void __0x4648( object __0x4675, EventArgs __0x4676 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x4631();

			__0x4641();

			
			
			if( __0x4556 && creationData.initSupportAutoCreateAndClose )
			{
				if( __0x4616.Controls.Count == 0 )
				{
					if( __0x4638( out _ ) )
						__0x4645( null, null );
				}
			}

			__0x4556 = false;
		}

		ContentBrowser.Item __0x4649( Metadata.TypeInfo __0x4677 )
		{
			

			

			foreach( var __0x4629 in __0x4610.Items )
			{
				var __0x4599 = __0x4629 as ContentBrowserItem_Type;
				if( __0x4599 != null )
				{
					if( __0x4599.type == __0x4677 )
						return __0x4629;
				}
			}
			return null;
		}

		void __0x4650()
		{
			var __0x4600 = __0x4649( creationData.initLockType );

			


			
			
			

			
			
			
			

			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			

			
			
			

			if( __0x4600 != null )
				__0x4610.SelectItems( new ContentBrowser.Item[] { __0x4600 }, true );
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x4610.DocumentWindow, __0x4610.GetSelectedContainedObjects() );
		}

		bool __0x4651()
		{
			var __0x4601 = EngineConfig.TextBlock.FindChild( "NewObjectWindow" );
			if( __0x4601 != null )
			{
				var __0x4602 = __0x4601.FindChild( "ContentBrowser" );
				if( __0x4602 != null )
				{
					__0x4610.Options.Load( __0x4602 );
					return true;
				}
			}

			return false;
		}

		static void __0x4652()
		{
			if( __0x4554 != null )
			{
				var __0x4603 = EngineConfig.TextBlock;

				var __0x4604 = __0x4603.FindChild( "NewObjectWindow" );
				if( __0x4604 != null )
					__0x4603.DeleteChild( __0x4604 );

				var __0x4605 = __0x4603.AddChild( "NewObjectWindow" );
				var __0x4606 = __0x4605.AddChild( "ContentBrowser" );
				__0x4554.Save( __0x4606 );
				
			}
		}

		[Browsable( false )]
		public bool DisableUnableToCreateReason { get; set; }

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4641();
		}

	}
}

namespace NeoAxis.Editor
{
    partial class NewObjectWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4607 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x4607 != null ) )
            {
                __0x4607.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4653()
        {
			this.__0x4607 = new System.ComponentModel.Container();
			this.__0x4608 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4609 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4611 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4610 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4621 = new System.Windows.Forms.Panel();
			this.__0x4620 = new System.Windows.Forms.Label();
			this.__0x4613 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4615 = new System.Windows.Forms.Label();
			this.__0x4619 = new System.Windows.Forms.Label();
			this.__0x4618 = new NeoAxis.Editor.EUserControl();
			this.__0x4616 = new System.Windows.Forms.TableLayoutPanel();
			this.__0x4612 = new System.Windows.Forms.Label();
			this.__0x4614 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4617 = new System.Windows.Forms.Timer(this.__0x4607);
			((System.ComponentModel.ISupportInitialize)(this.__0x4611)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4611.Panel1)).BeginInit();
			this.__0x4611.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4611.Panel2)).BeginInit();
			this.__0x4611.Panel2.SuspendLayout();
			this.__0x4611.SuspendLayout();
			this.__0x4621.SuspendLayout();
			this.__0x4618.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4608.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4608.Location = new System.Drawing.Point(222, 655);
			this.__0x4608.Name = "buttonCreate";
			this.__0x4608.Size = new System.Drawing.Size(147, 32);
			this.__0x4608.TabIndex = 0;
			this.__0x4608.Values.Text = "Create";
			this.__0x4608.Click += new System.EventHandler(this.__0x4644);
			
			
			
			this.__0x4609.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4609.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4609.Location = new System.Drawing.Point(528, 655);
			this.__0x4609.Name = "buttonClose";
			this.__0x4609.Size = new System.Drawing.Size(147, 32);
			this.__0x4609.TabIndex = 1;
			this.__0x4609.Values.Text = "Close";
			this.__0x4609.Click += new System.EventHandler(this.__0x4646);
			
			
			
			this.__0x4611.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4611.Location = new System.Drawing.Point(12, 12);
			this.__0x4611.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4611.Panel1.Controls.Add(this.__0x4610);
			
			
			
			this.__0x4611.Panel2.Controls.Add(this.__0x4621);
			this.__0x4611.Panel2.Controls.Add(this.__0x4615);
			this.__0x4611.Panel2.Controls.Add(this.__0x4619);
			this.__0x4611.Panel2.Controls.Add(this.__0x4618);
			this.__0x4611.Size = new System.Drawing.Size(1030, 690);
			this.__0x4611.SplitterDistance = 350;
			this.__0x4611.SplitterPercent = 0.33980582524271846D;
			this.__0x4611.TabIndex = 3;
			
			
			
			this.__0x4610.CanSelectObjectSettings = false;
			this.__0x4610.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4610.FilteringMode = null;
			this.__0x4610.ListViewModeOverride = null;
			this.__0x4610.Location = new System.Drawing.Point(0, 0);
			this.__0x4610.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4610.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x4610.Name = "contentBrowser1";
			this.__0x4610.ReadOnlyHierarchy = false;
			this.__0x4610.Size = new System.Drawing.Size(350, 690);
			this.__0x4610.TabIndex = 2;
			this.__0x4610.ThisIsSettingsWindow = false;
			this.__0x4610.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4632);
			this.__0x4610.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4633);
			
			
			
			
   
			this.__0x4621.Controls.Add(this.__0x4620);
			this.__0x4621.Controls.Add(this.__0x4613);
			this.__0x4621.Location = new System.Drawing.Point(13, 20);
			this.__0x4621.Name = "panelName";
			this.__0x4621.Size = new System.Drawing.Size(664, 26);
			this.__0x4621.TabIndex = 7;
			
			
			
			this.__0x4620.AutoSize = true;
			this.__0x4620.Location = new System.Drawing.Point(4, 5);
			this.__0x4620.Name = "labelName";
			this.__0x4620.Size = new System.Drawing.Size(54, 17);
			this.__0x4620.TabIndex = 6;
			this.__0x4620.Text = "Assets\\";
			this.__0x4620.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			
			
			
			
			
			this.__0x4613.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x4613.Location = new System.Drawing.Point(63, 2);
			this.__0x4613.Name = "textBoxName";
			this.__0x4613.Size = new System.Drawing.Size(596, 21);
			this.__0x4613.TabIndex = 3;
			this.__0x4613.TextChanged += new System.EventHandler(this.__0x4643);
			
			
			
			this.__0x4615.AutoSize = true;
			this.__0x4615.Location = new System.Drawing.Point(447, 46);
			this.__0x4615.Name = "labelCreationPath";
			this.__0x4615.Size = new System.Drawing.Size(199, 17);
			this.__0x4615.TabIndex = 7;
			this.__0x4615.Text = "Creation path: CC\\FF\\BB.mesh";
			this.__0x4615.Visible = false;
			
			
			
			this.__0x4619.AutoSize = true;
			this.__0x4619.ForeColor = System.Drawing.Color.Red;
			this.__0x4619.Location = new System.Drawing.Point(10, 48);
			this.__0x4619.Name = "labelError";
			this.__0x4619.Size = new System.Drawing.Size(40, 17);
			this.__0x4619.TabIndex = 3;
			this.__0x4619.Text = "Error";
			
			
			
			this.__0x4618.Controls.Add(this.__0x4616);
			this.__0x4618.Controls.Add(this.__0x4612);
			this.__0x4618.Controls.Add(this.__0x4608);
			this.__0x4618.Controls.Add(this.__0x4614);
			this.__0x4618.Controls.Add(this.__0x4609);
			this.__0x4618.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4618.Location = new System.Drawing.Point(0, 0);
			this.__0x4618.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4618.Name = "eUserControl1";
			this.__0x4618.Size = new System.Drawing.Size(675, 690);
			this.__0x4618.TabIndex = 2;
			
			
			
			
   
   
			this.__0x4616.ColumnCount = 1;
			this.__0x4616.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4616.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4616.Location = new System.Drawing.Point(13, 67);
			this.__0x4616.Name = "tableLayoutPanel1";
			this.__0x4616.RowCount = 1;
			this.__0x4616.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4616.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4616.Size = new System.Drawing.Size(662, 573);
			this.__0x4616.TabIndex = 9;
			
			
			
			this.__0x4612.AutoSize = true;
			this.__0x4612.Location = new System.Drawing.Point(10, 0);
			this.__0x4612.Name = "label1";
			this.__0x4612.Size = new System.Drawing.Size(49, 17);
			this.__0x4612.TabIndex = 4;
			this.__0x4612.Text = "Name:";
			
			
			
			this.__0x4614.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4614.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4614.Location = new System.Drawing.Point(375, 655);
			this.__0x4614.Name = "buttonCreateAndClose";
			this.__0x4614.Size = new System.Drawing.Size(147, 32);
			this.__0x4614.TabIndex = 8;
			this.__0x4614.Values.Text = "Create and Close";
			this.__0x4614.Click += new System.EventHandler(this.__0x4645);
			
			
			
			this.__0x4617.Interval = 50;
			this.__0x4617.Tick += new System.EventHandler(this.__0x4648);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x4611);
			this.Name = "NewObjectWindow";
			this.Size = new System.Drawing.Size(1054, 714);
			this.WindowTitle = "New Object";
			((System.ComponentModel.ISupportInitialize)(this.__0x4611.Panel1)).EndInit();
			this.__0x4611.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4611.Panel2)).EndInit();
			this.__0x4611.Panel2.ResumeLayout(false);
			this.__0x4611.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4611)).EndInit();
			this.__0x4611.ResumeLayout(false);
			this.__0x4621.ResumeLayout(false);
			this.__0x4621.PerformLayout();
			this.__0x4618.ResumeLayout(false);
			this.__0x4618.PerformLayout();
			this.ResumeLayout(false);

        }

        #endregion

        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4608;
        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4609;
		private ContentBrowser __0x4610;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4611;
		private System.Windows.Forms.Label __0x4612;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4613;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4614;
		private System.Windows.Forms.Label __0x4615;
		private System.Windows.Forms.TableLayoutPanel __0x4616;
		private System.Windows.Forms.Timer __0x4617;
		private NeoAxis.Editor.EUserControl __0x4618;
		private System.Windows.Forms.Label __0x4619;
		private System.Windows.Forms.Label __0x4620;
		private System.Windows.Forms.Panel __0x4621;
	}
}




namespace NeoAxis.Editor
{
	public class ObjectCreationModeAttribute : Attribute
	{
		Type __0x4678;

		public ObjectCreationModeAttribute( Type creationModeClass )
		{
			this.__0x4678 = creationModeClass;
		}

		public Type CreationModeClass
		{
			get { return __0x4678; }
		}
	}

	

	public abstract class ObjectCreationMode
	{
		DocumentWindowWithViewport __0x4679;
		Component __0x4680;

		

		protected ObjectCreationMode( DocumentWindowWithViewport documentWindow, Component creatingObject )
		{
			this.__0x4679 = documentWindow;
			this.__0x4680 = creatingObject;
		}

		public DocumentWindowWithViewport DocumentWindow
		{
			get { return __0x4679; }
		}

		public Component CreatingObject
		{
			get { return __0x4680; }
			set { __0x4680 = value; }
		}

		protected virtual void OnDestroy() { }
		public delegate void DestroyDelegate( ObjectCreationMode __0x4693 );
		public event DestroyDelegate Destroy;
		internal void PerformDestroy()
		{
			OnDestroy();
			Destroy?.Invoke( this );
		}

		protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines ) { }
		public delegate void GetTextInfoRightBottomCornerDelegate( ObjectCreationMode __0x4694, List<string> __0x4695 );
		public event GetTextInfoRightBottomCornerDelegate GetTextInfoRightBottomCorner;
		internal void PerformGetTextInfoRightBottomCorner( List<string> lines )
		{
			OnGetTextInfoRightBottomCorner( lines );
			GetTextInfoRightBottomCorner?.Invoke( this, lines );
		}

		protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines ) { }
		public delegate void GetTextInfoCenterBottomCornerDelegate( ObjectCreationMode __0x4696, List<string> __0x4697 );
		public event GetTextInfoCenterBottomCornerDelegate GetTextInfoCenterBottomCorner;
		internal void PerformGetTextInfoCenterBottomCorner( List<string> lines )
		{
			OnGetTextInfoCenterBottomCorner( lines );
			GetTextInfoCenterBottomCorner?.Invoke( this, lines );
		}

		protected virtual bool OnKeyDown( Viewport viewport, KeyEvent e ) { return false; }
		public delegate void KeyDownUpDelegate( ObjectCreationMode __0x4698, Viewport __0x4699, KeyEvent __0x4700, ref bool __0x4701 );
		public event KeyDownUpDelegate KeyDown;
		internal bool PerformKeyDown( Viewport viewport, KeyEvent e )
		{
			var __0x4681 = OnKeyDown( viewport, e );
			if( !__0x4681 )
				KeyDown?.Invoke( this, viewport, e, ref __0x4681 );
			return __0x4681;
		}

		protected virtual bool OnKeyPress( Viewport viewport, KeyPressEvent e ) { return false; }
		public delegate void KeyPressDelegate( ObjectCreationMode __0x4702, Viewport __0x4703, KeyPressEvent __0x4704, ref bool __0x4705 );
		public event KeyPressDelegate KeyPress;
		internal bool PerformKeyPress( Viewport viewport, KeyPressEvent e )
		{
			var __0x4682 = OnKeyPress( viewport, e );
			if( !__0x4682 )
				KeyPress?.Invoke( this, viewport, e, ref __0x4682 );
			return __0x4682;
		}

		protected virtual bool OnKeyUp( Viewport viewport, KeyEvent e ) { return false; }
		public event KeyDownUpDelegate KeyUp;
		internal bool PerformKeyUp( Viewport viewport, KeyEvent e )
		{
			var __0x4683 = OnKeyUp( viewport, e );
			if( !__0x4683 )
				KeyUp?.Invoke( this, viewport, e, ref __0x4683 );
			return __0x4683;
		}

		protected virtual bool OnMouseDown( Viewport viewport, EMouseButtons button ) { return false; }
		public delegate void MouseClickDelegate( ObjectCreationMode __0x4706, Viewport __0x4707, EMouseButtons __0x4708, ref bool __0x4709 );
		public event MouseClickDelegate MouseDown;
		internal bool PerformMouseDown( Viewport viewport, EMouseButtons button )
		{
			var __0x4684 = OnMouseDown( viewport, button );
			if( !__0x4684 )
				MouseDown?.Invoke( this, viewport, button, ref __0x4684 );
			return __0x4684;
		}

		protected virtual bool OnMouseUp( Viewport viewport, EMouseButtons button ) { return false; }
		public event MouseClickDelegate MouseUp;
		internal bool PerformMouseUp( Viewport viewport, EMouseButtons button )
		{
			var __0x4685 = OnMouseUp( viewport, button );
			if( !__0x4685 )
				MouseUp?.Invoke( this, viewport, button, ref __0x4685 );
			return __0x4685;
		}

		protected virtual bool OnMouseDoubleClick( Viewport viewport, EMouseButtons button ) { return false; }
		public event MouseClickDelegate MouseDoubleClick;
		internal bool PerformMouseDoubleClick( Viewport viewport, EMouseButtons button )
		{
			var __0x4686 = OnMouseDoubleClick( viewport, button );
			if( !__0x4686 )
				MouseDoubleClick?.Invoke( this, viewport, button, ref __0x4686 );
			return __0x4686;
		}

		protected virtual void OnMouseMove( Viewport viewport, Vector2 mouse ) { }
		public delegate void MouseMoveDelegate( ObjectCreationMode __0x4710, Viewport __0x4711, Vector2 __0x4712 );
		public event MouseMoveDelegate MouseMove;
		internal void PerformMouseMove( Viewport viewport, Vector2 mouse )
		{
			OnMouseMove( viewport, mouse );
			MouseMove?.Invoke( this, viewport, mouse );
		}

		protected virtual bool OnMouseRelativeModeChanged( Viewport viewport ) { return false; }
		public delegate void MouseRelativeModeChangedDelegate( ObjectCreationMode __0x4713, Viewport __0x4714, ref bool __0x4715 );
		public event MouseRelativeModeChangedDelegate MouseRelativeModeChanged;
		internal bool PerformMouseRelativeModeChanged( Viewport viewport )
		{
			var __0x4687 = OnMouseRelativeModeChanged( viewport );
			if( !__0x4687 )
				MouseRelativeModeChanged?.Invoke( this, viewport, ref __0x4687 );
			return __0x4687;
		}

		protected virtual bool OnMouseWheel( Viewport viewport, int delta ) { return false; }
		public delegate void MouseWheelDelegate( ObjectCreationMode __0x4716, Viewport __0x4717, int __0x4718, ref bool __0x4719 );
		public event MouseWheelDelegate MouseWheel;
		internal bool PerformMouseWheel( Viewport viewport, int delta )
		{
			var __0x4688 = OnMouseWheel( viewport, delta );
			if( !__0x4688 )
				MouseWheel?.Invoke( this, viewport, delta, ref __0x4688 );
			return __0x4688;
		}

		protected virtual bool OnJoystickEvent( Viewport viewport, JoystickInputEvent e ) { return false; }
		public delegate void JoystickEventDelegate( ObjectCreationMode __0x4720, Viewport __0x4721, JoystickInputEvent __0x4722, ref bool __0x4723 );
		public event JoystickEventDelegate JoystickEvent;
		internal bool PerformJoystickEvent( Viewport viewport, JoystickInputEvent e )
		{
			var __0x4689 = OnJoystickEvent( viewport, e );
			if( !__0x4689 )
				JoystickEvent?.Invoke( this, viewport, e, ref __0x4689 );
			return __0x4689;
		}

		protected virtual bool OnSpecialInputDeviceEvent( Viewport viewport, InputEvent e ) { return false; }
		public delegate void SpecialInputDeviceEventDelegate( ObjectCreationMode __0x4724, Viewport __0x4725, InputEvent __0x4726, ref bool __0x4727 );
		public event SpecialInputDeviceEventDelegate SpecialInputDeviceEvent;
		internal bool PerformSpecialInputDeviceEvent( Viewport viewport, InputEvent e )
		{
			var __0x4690 = OnSpecialInputDeviceEvent( viewport, e );
			if( !__0x4690 )
				SpecialInputDeviceEvent?.Invoke( this, viewport, e, ref __0x4690 );
			return __0x4690;
		}

		protected virtual void OnTick( Viewport viewport, double delta ) { }
		public delegate void TickDelegate( ObjectCreationMode __0x4728, Viewport __0x4729, double __0x4730 );
		public event TickDelegate Tick;
		internal void PerformTick( Viewport viewport, double delta )
		{
			OnTick( viewport, delta );
			Tick?.Invoke( this, viewport, delta );
		}

		protected virtual void OnUpdateBegin( Viewport viewport ) { }
		public delegate void UpdateBeginDelegate( ObjectCreationMode __0x4731, Viewport __0x4732 );
		public event UpdateBeginDelegate UpdateBegin;
		internal void PerformUpdateBegin( Viewport viewport )
		{
			OnUpdateBegin( viewport );
			UpdateBegin?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context ) { }
		public delegate void UpdateGetObjectInSceneRenderingContextDelegate( ObjectCreationMode __0x4733, Viewport __0x4734, ref ObjectInSpace.RenderingContext __0x4735 );
		public event UpdateGetObjectInSceneRenderingContextDelegate UpdateGetObjectInSceneRenderingContext;
		internal void PerformUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context )
		{
			OnUpdateGetObjectInSceneRenderingContext( viewport, ref context );
			UpdateGetObjectInSceneRenderingContext?.Invoke( this, viewport, ref context );
		}

		protected virtual void OnUpdateBeforeOutput( Viewport viewport ) { }
		public delegate void UpdateBeforeOutputDelegate( ObjectCreationMode __0x4736, Viewport __0x4737 );
		public event UpdateBeforeOutputDelegate UpdateBeforeOutput;
		internal void PerformUpdateBeforeOutput( Viewport viewport )
		{
			OnUpdateBeforeOutput( viewport );
			UpdateBeforeOutput?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateBeforeOutput2( Viewport viewport ) { }
		public delegate void UpdateBeforeOutput2Delegate( ObjectCreationMode __0x4738, Viewport __0x4739 );
		public event UpdateBeforeOutput2Delegate UpdateBeforeOutput2;
		internal void PerformUpdateBeforeOutput2( Viewport viewport )
		{
			OnUpdateBeforeOutput2( viewport );
			UpdateBeforeOutput2?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateEnd( Viewport viewport ) { }
		public delegate void UpdateEndDelegate( ObjectCreationMode __0x4740, Viewport __0x4741 );
		public event UpdateEndDelegate UpdateEnd;
		internal void PerformUpdateEnd( Viewport viewport )
		{
			OnUpdateEnd( viewport );
			UpdateEnd?.Invoke( this, viewport );
		}

		protected virtual void OnViewportUpdateGetCameraSettings( ref Camera camera ) { }
		public delegate void ViewportUpdateGetCameraSettingsDelegate( ObjectCreationMode __0x4742, ref Camera __0x4743 );
		public event ViewportUpdateGetCameraSettingsDelegate ViewportUpdateGetCameraSettings;
		internal void PerformViewportUpdateGetCameraSettings( ref Camera camera )
		{
			OnViewportUpdateGetCameraSettings( ref camera );
			ViewportUpdateGetCameraSettings?.Invoke( this, ref camera );
		}

		
		protected virtual void OnEditorActionGetState( EditorAction.GetStateContext context ) { }
		public delegate void EditorActionGetStateDelegate( ObjectCreationMode __0x4744, EditorAction.GetStateContext __0x4745 );
		public event EditorActionGetStateDelegate EditorActionGetState;
		internal void PerformEditorActionGetState( EditorAction.GetStateContext context )
		{
			OnEditorActionGetState( context );
			EditorActionGetState?.Invoke( this, context );
		}

		
		protected virtual void OnEditorActionClick( EditorAction.ClickContext context ) { }
		public delegate void EditorActionClickDelegate( ObjectCreationMode __0x4746, EditorAction.ClickContext __0x4747 );
		public event EditorActionClickDelegate EditorActionClick;
		internal void PerformEditorActionClick( EditorAction.ClickContext context )
		{
			OnEditorActionClick( context );
			EditorActionClick?.Invoke( this, context );
		}

		
		protected virtual void OnEditorActionClick2( EditorAction.ClickContext context ) { }
		public event EditorActionClickDelegate EditorActionClick2;
		internal void PerformEditorActionClick2( EditorAction.ClickContext context )
		{
			OnEditorActionClick2( context );
			EditorActionClick2?.Invoke( this, context );
		}

		public virtual void Finish( bool cancel )
		{
			if( !cancel )
			{
				
				var __0x4691 = DocumentWindow.Document;
				var __0x4692 = new UndoActionComponentCreateDelete( __0x4691, new Component[] { CreatingObject }, true );
				__0x4691.UndoSystem.CommitAction( __0x4692 );
				__0x4691.Modified = true;
			}
			else
			{
				CreatingObject?.Dispose();
				__0x4679.SelectObjects( null );
			}

			DocumentWindow.ObjectCreationModeSet( null );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectSettingsHeader : EUserControl
	{
		

		

		public ObjectSettingsHeader()
		{
			__0x4750();
		}

		[Browsable( false )]
		public ObjectSettingsWindow ObjectSettingsWindow
		{
			get
			{
				var __0x4748 = Parent as ObjectSettingsWindow;
				if( __0x4748 != null )
					return __0x4748;
				else
					return null;

				
				
				
				
				
			}
		}

		
		
		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class ObjectSettingsHeader
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4749 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4749 != null ) )
			{
				__0x4749.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4750()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectSettingsExtension";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectSettingsHeader_ObjectInfo : ObjectSettingsHeader
	{
		bool? __0x4751;

		

		public ObjectSettingsHeader_ObjectInfo()
		{
			__0x4781();

			__0x4771.Values.Image = EditorResourcesCache.Type;

			if( IsDesignerHosted )
				return;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x4772.SetToolTip( __0x4771, EditorLocalization.Translate( "SettingsWindow", "Type Settings" ) );
			__0x4772.SetToolTip( __0x4770, EditorLocalization.Translate( "SettingsWindow", "Reset Type Settings to default." ) );

			if( __0x4767.Height < __0x4767.PreferredSize.Height )
				__0x4767.Height = __0x4767.PreferredSize.Height;
			if( __0x4768.Height < __0x4768.PreferredSize.Height )
				__0x4768.Height = __0x4768.PreferredSize.Height;
		}

		private void __0x4773( object __0x4782, EventArgs __0x4783 )
		{

		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;
			if( ObjectSettingsWindow == null )
				return;
			if( ObjectSettingsWindow.ObjectOfWindow == null )
				return;

			__0x4769.Start();

			__0x4774();
			__0x4776();
			__0x4777();
		}

		void __0x4774()
		{
			var __0x4752 = ObjectSettingsWindow.ObjectOfWindow;


			string __0x4753;

			
			
			
			

			var __0x4754 = __0x4752 as Component;
			if( __0x4754 != null )
			{
				if( !string.IsNullOrEmpty( __0x4754.Name ) )
					__0x4753 = string.Format( "{0} - {1}", __0x4754.Name, __0x4754.BaseType.ToString() );
				else
					__0x4753 = __0x4754.BaseType.ToString();
			}
			else
				__0x4753 = __0x4752.ToString();
			
			
			
			
			
			

			if( __0x4767.Text != __0x4753 )
				__0x4767.Text = __0x4753;





			
			

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			






			

			

			
			
			

			

			
			
			

			
			
			

			
			

			
			
			
			
			

			
			
			
			
			
			


			
			

			
			

			
			


			
			
			





			
			
			
			
			

			
			
			
			
			
			
			
		}

		Component __0x4775()
		{
			if( ObjectSettingsWindow?.Document != null )
				return ObjectSettingsWindow.ObjectOfWindow as Component;
			else
				return null;
		}

		void __0x4776()
		{
			__0x4771.Location = new Point( ClientRectangle.Right - __0x4771.Width, 0 );
			__0x4770.Location = new Point( __0x4771.Location.X - __0x4770.Width - 2, 5 );

			__0x4767.Width = __0x4770.Location.X - 2 - __0x4767.Location.X;
			__0x4768.Width = __0x4767.Width;
		}

		void __0x4777()
		{
			var __0x4755 = __0x4775();

			bool __0x4756 = __0x4755 != null && __0x4755.TypeSettingsPrivateObjects != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4770.Enabled != __0x4756 )
				__0x4770.Enabled = __0x4756;
			if( __0x4770.Visible != __0x4756 )
				__0x4770.Visible = __0x4756;
			if( __0x4751 != __0x4756 )
			{
				__0x4751 = __0x4756;

				if( EditorAPI.DarkTheme )
					__0x4770.Values.Image = __0x4756 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
				else
					__0x4770.Values.Image = __0x4756 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
			}

			var __0x4757 = __0x4755 != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4771.Enabled != __0x4757 )
				__0x4771.Enabled = __0x4757;

			bool __0x4758 = ObjectSettingsWindow?.Document?.SpecialMode == "ProjectSettingsUserMode";
			var __0x4759 = !__0x4758 && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4771.Visible != __0x4759 )
				__0x4771.Visible = __0x4759;
		}

		private void __0x4778( object __0x4784, EventArgs __0x4785 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x4774();
			__0x4777();
		}

		private void __0x4779( object __0x4786, EventArgs __0x4787 )
		{
			var __0x4760 = __0x4775();
			if( __0x4760 != null )
			{
				var __0x4761 = new ComponentTypeSettingsForm( ObjectSettingsWindow.Document, __0x4760 );
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x4761.ShowDialog();
				} );
			}
		}

		private void __0x4780( object __0x4788, EventArgs __0x4789 )
		{
			var __0x4762 = __0x4775();
			if( __0x4762 != null )
			{
				var __0x4763 = EditorLocalization.Translate( "SettingsWindow", "Reset to default?" );
				if( EditorMessageBox.ShowQuestion( __0x4763, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
				{
					var __0x4764 = __0x4762.TypeSettingsPrivateObjects;

					__0x4762.TypeSettingsPrivateObjects = null;

					var __0x4765 = new UndoActionPropertiesChange.Item( __0x4762, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x4764, null );
					ObjectSettingsWindow.Document.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x4765 ) );
					ObjectSettingsWindow.Document.Modified = true;
				}
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( Created )
				__0x4776();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ObjectSettingsHeader_ObjectInfo
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4766 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4766 != null))
            {
                __0x4766.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4781()
        {
			this.__0x4766 = new System.ComponentModel.Container();
			this.__0x4767 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x4768 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x4769 = new System.Windows.Forms.Timer(this.__0x4766);
			this.__0x4770 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4771 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4772 = new NeoAxis.Editor.EngineToolTip(this.__0x4766);
			this.SuspendLayout();
			
			
			
			
   
			this.__0x4767.AutoSize = false;
			this.__0x4767.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.BoldControl;
			this.__0x4767.Location = new System.Drawing.Point(2, 2);
			this.__0x4767.Name = "kryptonLabel1";
			this.__0x4767.Size = new System.Drawing.Size(422, 25);
			this.__0x4767.TabIndex = 7;
			this.__0x4767.Values.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
   
			this.__0x4768.AutoSize = false;
			this.__0x4768.Location = new System.Drawing.Point(112, 22);
			this.__0x4768.Name = "kryptonLabel2";
			this.__0x4768.Size = new System.Drawing.Size(480, 25);
			this.__0x4768.TabIndex = 8;
			this.__0x4768.Values.Text = "{Object} {Object} {Object} {Object}";
			this.__0x4768.Visible = false;
			
			
			
			this.__0x4769.Interval = 50;
			this.__0x4769.Tick += new System.EventHandler(this.__0x4778);
			
			
			
			
			this.__0x4770.Location = new System.Drawing.Point(432, 5);
			this.__0x4770.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4770.Name = "buttonTypeSettingsDefaultValue";
			this.__0x4770.Size = new System.Drawing.Size(15, 15);
			this.__0x4770.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4770.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4770.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4770.TabIndex = 10;
			this.__0x4770.Values.Text = "";
			this.__0x4770.Click += new System.EventHandler(this.__0x4780);
			
			
			
			
			
			this.__0x4771.Location = new System.Drawing.Point(450, 0);
			this.__0x4771.Name = "buttonTypeSettings";
			this.__0x4771.Size = new System.Drawing.Size(30, 28);
			this.__0x4771.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4771.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4771.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x4771.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4771.TabIndex = 9;
			this.__0x4771.Values.Image = global::NeoAxis.Properties.Resources.Class;
			this.__0x4771.Values.Text = "";
			this.__0x4771.Click += new System.EventHandler(this.__0x4779);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4770);
			this.Controls.Add(this.__0x4771);
			this.Controls.Add(this.__0x4767);
			this.Controls.Add(this.__0x4768);
			this.Name = "ObjectSettingsHeader_ObjectInfo";
			this.Size = new System.Drawing.Size(480, 28);
			this.ResumeLayout(false);

        }

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x4767;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x4768;
		private System.Windows.Forms.Timer __0x4769;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4770;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4771;
		private NeoAxis.Editor.EngineToolTip __0x4772;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Object Settings Window.
	/// </summary>
	public partial class ObjectSettingsWindow : DocumentWindow
	{
		static string __0x4790 = "General";

		const int __0x4791 = 10;

		
		

		List<PanelData> __0x4792 = new List<PanelData>();

		PanelData __0x4793;

		bool __0x4794;

		bool __0x4795;
		object[] __0x4796;

		

		public class PanelData : PanelDataWithTableLayout
		{
		}

		

		public ObjectSettingsWindow()
		{
			__0x4833();

			__0x4810.Options.FilteringModeButton = false;
			__0x4810.Options.DisplayPropertiesSortFilesBy = false;
			__0x4810.Options.DisplayPropertiesOpenButton = false;

			if( EditorAPI.DarkTheme )
			{
				__0x4814.StateNormal.Back.Color1 = Color.FromArgb( 54, 54, 54 );

				
				
				
			}

			EditorLocalization.TranslateForm( "ObjectSettingsWindow", this );
		}

		public override void InitDocumentWindow( DocumentInstance document, object objectOfWindow, bool openAsSettings, Dictionary<string, object> windowTypeSpecificOptions )
		{
			base.InitDocumentWindow( document, objectOfWindow, openAsSettings, windowTypeSpecificOptions );

			if( __0x4810 != null )
				__0x4810.Init( this, objectOfWindow, null );

			
			
			if( document.SpecialMode == "ProjectSettingsUserMode" )
				ReadOnlyHierarchy = true;

			if( document.SpecialMode == "ProjectSettingsUserMode" )
			{
				__0x4813.Values.Text = EditorLocalization.Translate( "General", "Cancel" );
			}
			else
			{
				__0x4815.Enabled = false;
				__0x4815.Visible = false;
				__0x4816.Enabled = false;
				__0x4816.Visible = false;
			}

			if( document.SpecialMode == "ProjectSettingsUserMode" )
			{
				__0x4810.OverrideItemText += __0x4820;
			}
		}

		private void __0x4820( ContentBrowser __0x4834, ContentBrowser.Item __0x4835, ref string __0x4836 )
		{
			__0x4836 = EditorLocalization.Translate( "ProjectSettings.Page", __0x4836 );
		}

		[Browsable( false )]
		public bool ReadOnlyHierarchy
		{
			get { return __0x4794; }
			set
			{
				__0x4794 = value;
				if( __0x4810 != null )
					__0x4810.ReadOnlyHierarchy = value;
			}
		}

		private void __0x4821( object __0x4837, EventArgs __0x4838 )
		{
			

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			var __0x4797 = __0x4810.GetAllItems();
			if( __0x4797.Length != 0 )
			{
				ContentBrowser.Item __0x4798 = null;
				if( Document != null && Document.SpecialMode == "ProjectSettingsUserMode" && __0x4790 != "" )
					__0x4798 = __0x4797.FirstOrDefault( __0x4839 => __0x4839.Text == __0x4790 );
				if( __0x4798 == null )
					__0x4798 = __0x4797[ 0 ];

				__0x4810.SelectItems( new ContentBrowser.Item[] { __0x4798 } );
			}

			__0x4809.Start();

			__0x4822();
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		void __0x4822()
		{
			__0x4811.Width = ClientRectangle.Width - 18;
		}

		private void __0x4823( object __0x4840, EventArgs __0x4841 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( KryptonPage == null || KryptonPage.Parent == null )
				return;
			
			

			
			if( __0x4795 )
			{
				object[] __0x4799 = __0x4796;

				__0x4795 = false;
				__0x4796 = null;

				RemoveCachedPanels();

				if( __0x4799 != null )
					SelectObjects( __0x4799 );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4822();
		}

		
		
		
		
		

		
		
		
		
		

		private void __0x4824( ContentBrowser __0x4842, IList<ContentBrowser.Item> __0x4843, bool __0x4844, ref bool __0x4845 )
		{
			
			

			var __0x4800 = new List<object>();

			foreach( var __0x4817 in __0x4843 )
			{
				if( __0x4817 is ContentBrowserItem_Component )
				{
					if( __0x4817.ContainedObject != null )
						__0x4800.Add( __0x4817.ContainedObject );
				}
			}

			if( __0x4800.Count == 0 )
				__0x4800.Add( ObjectOfWindow );

			SelectObjects( __0x4800 );

			if( Document != null && Document.SpecialMode == "ProjectSettingsUserMode" )
			{
				if( __0x4843.Count == 1 )
					__0x4790 = __0x4843[ 0 ].Text;
				
				
			}
		}

		private void __0x4825( ContentBrowser __0x4846, ContentBrowser.Item __0x4847, ref bool __0x4848 )
		{
		}

		bool __0x4826( object[] __0x4849, object[] __0x4850 )
		{
			if( __0x4849.Length != __0x4850.Length )
				return false;
			for( int __0x4801 = 0; __0x4801 < __0x4849.Length; __0x4801++ )
			{
				if( __0x4849[ __0x4801 ] != __0x4850[ __0x4801 ] )
					return false;
			}
			return true;
		}

		PanelData __0x4827( object[] __0x4851 )
		{
			foreach( var __0x4818 in __0x4792 )
			{
				if( __0x4826( __0x4818.selectedObjects, __0x4851 ) )
					return __0x4818;
			}
			return null;
		}

		PanelData __0x4828( object[] __0x4852, bool __0x4853 )
		{
			PanelData __0x4802 = new PanelData();
			__0x4792.Add( __0x4802 );
			__0x4802.selectedObjects = __0x4852;
			__0x4802.CreateAndAddPanel( __0x4812 );

			
			if( !__0x4853 && __0x4802.layoutPanel != null )
			{
				__0x4802.layoutPanel.Visible = false;
				__0x4802.layoutPanel.Enabled = false;
			}

			SettingsProvider.Create( this, __0x4802.selectedObjects, __0x4802.layoutPanel, null, true );

			
			
			
			
			
			
			
			
			
			

			

			
			

			
			

			

			

			
			
			
			
			

			
			
			
			

			

			
			

			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			

			
			

			
			
			
			
			
			
			

			return __0x4802;
		}

		void __0x4829( PanelData __0x4854 )
		{
			if( SelectedPanel == __0x4854 )
				SelectedPanel = null;

			var __0x4803 = __0x4854.layoutPanel;
			__0x4803.Parent.Controls.Remove( __0x4803 );
			__0x4803.Dispose();

			__0x4792.Remove( __0x4854 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x4792.Count != 0 )
				__0x4829( __0x4792[ __0x4792.Count - 1 ] );
		}

		public void SelectObjects( IList<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			object[] __0x4804 = new object[ objects.Count ];
			objects.CopyTo( __0x4804, 0 );

			PanelData __0x4805 = __0x4827( __0x4804 );

			
			if( __0x4805 != null )
			{
				
				__0x4792.Remove( __0x4805 );
				__0x4792.Add( __0x4805 );
			}

			
			if( __0x4805 == null )
			{
				
				while( __0x4792.Count >= __0x4791 )
					__0x4829( __0x4792[ 0 ] );

				__0x4805 = __0x4828( __0x4804, true );
			}

			SelectedPanel = __0x4805;

			
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x4793; }
			set
			{
				if( __0x4793 == value )
					return;

				var __0x4806 = __0x4793;
				__0x4793 = value;

				if( __0x4793 != null )
				{
					__0x4793.layoutPanel.Enabled = true;
					__0x4793.layoutPanel.Visible = true;
					
				}

				if( __0x4806 != null )
				{
					__0x4806.layoutPanel.Visible = false;
					__0x4806.layoutPanel.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				
			}
		}

		private void __0x4830( object __0x4855, EventArgs __0x4856 )
		{
			if( Document.SpecialMode == "ProjectSettingsUserMode" )
				ShowDialogAndSaveDocumentAutoAnswer = EDialogResult.No;
			Close();
		}

		private void __0x4831( object __0x4857, EventArgs __0x4858 )
		{
			if( Document.SpecialMode == "ProjectSettingsUserMode" )
				ShowDialogAndSaveDocumentAutoAnswer = EDialogResult.Yes;
			Close();
		}

		private void __0x4832( object __0x4859, EventArgs __0x4860 )
		{
			Document.Save();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x4810.DocumentWindow, __0x4810.GetSelectedContainedObjects() );
		}

		protected override bool CanUpdateSettingsWindowsSelectedObjects()
		{
			return false;
		}

		
		
		
		
		
		
		
		
		
		

		protected override void OnKryptonPageParentChanged()
		{
			base.OnKryptonPageParentChanged();

			
			if( KryptonPage != null && KryptonPage.Parent == null )
			{
				if( SelectedPanel != null )
				{
					__0x4795 = true;
					__0x4796 = SelectedPanel.selectedObjects;
					
					

					RemoveCachedPanels();
				}
			}
		}
	}

	public class PanelDataWithTableLayout
	{
		

		public object[] selectedObjects;
		public TableLayoutPanel layoutPanel;

		

		public TableLayoutPanel CreateAndAddPanel( Control owner )
		{
			TableLayoutPanel __0x4807 = new TableLayoutPanel();
			__0x4807.ColumnStyles.Add( new ColumnStyle( SizeType.Percent, 50f ) );
			__0x4807.Tag = this;
			__0x4807.SetBounds( 0, 0, owner.Width, owner.Height );
			__0x4807.Dock = DockStyle.Fill;

			owner.Controls.Add( __0x4807 );

			this.layoutPanel = __0x4807;

			return __0x4807;
		}

		public T GetControl<T>() where T : Control
		{
			if( layoutPanel != null )
			{
				foreach( Control __0x4819 in layoutPanel.Controls )
					if( typeof( T ).IsAssignableFrom( __0x4819.GetType() ) )
						return (T)__0x4819;
			}
			return null;
		}
	}
}
namespace NeoAxis.Editor
{
    partial class ObjectSettingsWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4808 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4808 != null))
            {
                __0x4808.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4833()
        {
			this.__0x4808 = new System.ComponentModel.Container();
			this.__0x4809 = new System.Windows.Forms.Timer(this.__0x4808);
			this.__0x4810 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4812 = new System.Windows.Forms.Panel();
			this.__0x4811 = new NeoAxis.Editor.ObjectSettingsHeader_ObjectInfo();
			this.__0x4813 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4814 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4815 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4816 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			( (System.ComponentModel.ISupportInitialize)(this.__0x4814)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4814.Panel1)).BeginInit();
			this.__0x4814.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4814.Panel2)).BeginInit();
			this.__0x4814.Panel2.SuspendLayout();
			this.__0x4814.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4809.Interval = 10;
			this.__0x4809.Tick += new System.EventHandler(this.__0x4823);
			
			
			
			this.__0x4810.CanSelectObjectSettings = false;
			this.__0x4810.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4810.FilteringMode = null;
			this.__0x4810.ListViewModeOverride = null;
			this.__0x4810.Location = new System.Drawing.Point(0, 0);
			this.__0x4810.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4810.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Objects;
			this.__0x4810.MultiSelect = true;
			this.__0x4810.Name = "objectsBrowser1";
			this.__0x4810.ReadOnlyHierarchy = false;
			this.__0x4810.Size = new System.Drawing.Size(292, 545);
			this.__0x4810.TabIndex = 0;
			this.__0x4810.ThisIsSettingsWindow = false;
			this.__0x4810.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4824);
			this.__0x4810.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4825);
			
			
			
			this.__0x4812.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4812.Location = new System.Drawing.Point(0, 0);
			this.__0x4812.Name = "panelSettings";
			this.__0x4812.Size = new System.Drawing.Size(569, 545);
			this.__0x4812.Padding = new System.Windows.Forms.Padding( 8, 0, 0, 0 );
			this.__0x4812.TabIndex = 0;
			
			
			
			
   
			this.__0x4811.Location = new System.Drawing.Point(9, 5);
			this.__0x4811.Margin = new System.Windows.Forms.Padding(0);
			this.__0x4811.Name = "objectSettingsHeader_ObjectInfo1";
			this.__0x4811.Size = new System.Drawing.Size(880, 26);
			this.__0x4811.TabIndex = 0;
			
			
			
			this.__0x4813.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4813.Location = new System.Drawing.Point(770, 589);
			this.__0x4813.Name = "kryptonButtonClose";
			this.__0x4813.Size = new System.Drawing.Size(117, 32);
			this.__0x4813.TabIndex = 3;
			this.__0x4813.Values.Text = "Close";
			this.__0x4813.Click += new System.EventHandler(this.__0x4830);
			
			
			
			this.__0x4814.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4814.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x4814.Location = new System.Drawing.Point(12, 33);
			this.__0x4814.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4814.Panel1.Controls.Add(this.__0x4810);
			this.__0x4814.Panel1.StateCommon.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4814.Panel1.StateCommon.ImageStyle = Internal.ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			
			
			
			this.__0x4814.Panel2.Controls.Add(this.__0x4812);
			this.__0x4814.Panel2.StateCommon.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4814.Panel2.StateCommon.ImageStyle = Internal.ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x4814.Size = new System.Drawing.Size(876, 545);
			this.__0x4814.SplitterDistance = 292;
			this.__0x4814.SplitterPercent = 0.33333333333333331D;
			this.__0x4814.SplitterWidth = 8;
			this.__0x4814.StateNormal.Back.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4814.StateNormal.Back.ImageStyle = Internal.ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x4814.TabIndex = 2;
			
			
			
			this.__0x4815.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4815.Location = new System.Drawing.Point( 644, 589);
			this.__0x4815.Name = "kryptonButtonOK";
			this.__0x4815.Size = new System.Drawing.Size(117, 32);
			this.__0x4815.TabIndex = 2;
			this.__0x4815.Values.Text = "OK";
			this.__0x4815.Click += new System.EventHandler(this.__0x4831);
			
			
			
			this.__0x4816.Anchor = ( (System.Windows.Forms.AnchorStyles)( ( System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right ) ) );
			this.__0x4816.Location = new System.Drawing.Point( 518, 589 );
			this.__0x4816.Name = "kryptonButtonApply";
			this.__0x4816.Size = new System.Drawing.Size( 117, 32 );
			this.__0x4816.TabIndex = 1;
			this.__0x4816.Values.Text = "Apply";
			this.__0x4816.Click += new System.EventHandler( this.__0x4832 );
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4815);
			this.Controls.Add( this.__0x4816 );
			this.Controls.Add(this.__0x4814);
			this.Controls.Add(this.__0x4811);
			this.Controls.Add(this.__0x4813);
			this.Name = "ObjectSettingsWindow";
			this.Size = new System.Drawing.Size(900, 632);
			this.WindowTitle = "Object Settings";
			this.Load += new System.EventHandler(this.__0x4821);
			((System.ComponentModel.ISupportInitialize)(this.__0x4814.Panel1)).EndInit();
			this.__0x4814.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4814.Panel2)).EndInit();
			this.__0x4814.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4814)).EndInit();
			this.__0x4814.ResumeLayout(false);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x4809;
		private ContentBrowser __0x4810;
		private ObjectSettingsHeader_ObjectInfo __0x4811;
		private System.Windows.Forms.Panel __0x4812;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4813;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4814;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4815;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4816;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Objects Window.
	/// </summary>
	public partial class ObjectsWindow : ForeachDocumentWindowContainer
	{
		ContentBrowserOptions __0x4861;

		

		public ObjectsWindow()
		{
			__0x4893();

			
			EngineConfig.SaveEvent += __0x4892;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		protected override void OnCreatePanelControl( PanelData panel )
		{
			base.OnCreatePanelControl( panel );

			var __0x4862 = panel.documentWindow.Document?.ResultComponent;
			
			
			

			if( __0x4862 != null )
			{
				var __0x4863 = new ContentBrowser();

				if( __0x4861 != null )
					__0x4863.Options = __0x4861;
				else
				{
					__0x4891( __0x4863 );
					__0x4861 = __0x4863.Options;
				}

				__0x4863.Mode = ContentBrowser.ModeEnum.Objects;
				__0x4863.CanSelectObjectSettings = true;
				__0x4863.Options.FilteringModeButton = false;
				__0x4863.Options.DisplayPropertiesSortFilesBy = false;
				__0x4863.Options.DisplayPropertiesOpenButton = false;
				__0x4863.TreeViewBorderDraw = BorderSides.Top;
				__0x4863.ListViewBorderDraw = BorderSides.Top;
				__0x4863.MultiSelect = true;
				
				
				

				__0x4863.Init( panel.documentWindow, __0x4862,  null );
				panel.control = __0x4863;
				panel.control.Dock = DockStyle.Fill;
				Controls.Add( panel.control );
				__0x4863.ItemAfterSelect += __0x4889;

				__0x4890( panel.documentWindow );
			}
			else
			{
				panel.control = new EUserControl();
				panel.control.Dock = DockStyle.Fill;
				Controls.Add( panel.control );
			}
		}

		private void __0x4889( ContentBrowser __0x4894, IList<ContentBrowser.Item> __0x4895, bool __0x4896, ref bool __0x4897 )
		{
			if( __0x4896 )
			{
				var __0x4864 = new List<object>();

				foreach( var __0x4885 in __0x4895 )
				{
					var __0x4865 = __0x4885.Owner.DocumentWindow;
					if( __0x4865 != null )
					{
						var __0x4866 = GetPanel( __0x4865 );
						if( __0x4866 != null )
						{
							var __0x4867 = __0x4885 as ContentBrowserItem_Component;
							if( __0x4867 != null )
								__0x4864.Add( __0x4867.Component );
						}
					}
				}

				__0x4894.DocumentWindow?.SelectObjects( __0x4864, false );
			}
		}

		public override void OnDocumentWindowSelectedObjectsChangedByUser( DocumentWindow documentWindow )
		{
			base.OnDocumentWindowSelectedObjectsChangedByUser( documentWindow );

			__0x4890( documentWindow );
		}

		void __0x4890( DocumentWindow __0x4898 )
		{
			var __0x4868 = GetPanel( __0x4898 );
			if( __0x4868 != null )
			{
				var __0x4869 = __0x4868.control as ContentBrowser;
				if( __0x4869 != null )
				{
					var __0x4870 = new List<ContentBrowser.Item>();

					if( __0x4898.SelectedObjects.Length != 0 )
					{
						
						{
							var __0x4871 = new ESet<Component>();
							foreach( var __0x4886 in __0x4898.SelectedObjects )
							{
								var __0x4872 = __0x4886 as Component;
								if( __0x4872 != null )
									__0x4871.AddRangeWithCheckAlreadyContained( __0x4872.GetAllParents( false ) );
							}
							foreach( var __0x4887 in __0x4871 )
							{
								var __0x4873 = __0x4869.FindItemByContainedObject( __0x4887 );
								if( __0x4873 != null )
									__0x4869.SelectItems( new ContentBrowser.Item[] { __0x4873 }, true, false );
							}
						}

						
						foreach( var __0x4888 in __0x4869.GetAllItems() )
						{
							var __0x4874 = __0x4888 as ContentBrowserItem_Component;
							if( __0x4874 != null && __0x4898.SelectedObjectsSet.Contains( __0x4874.Component ) )
								__0x4870.Add( __0x4888 );
						}
					}

					__0x4869.SelectItems( __0x4870.ToArray(), __0x4870.Count == 1 );
					
				}
			}
		}

		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		
		

		
		

		
		
		
		

		

		

		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		
		

		

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x4875 = SelectedPanel;
			if( __0x4875 != null )
			{
				var __0x4876 = __0x4875.control as ContentBrowser;
				if( __0x4876 != null )
					return new ObjectsInFocus( __0x4876.DocumentWindow, __0x4876.GetSelectedContainedObjects() );
			}
			return null;
		}

		void __0x4891( ContentBrowser __0x4899 )
		{
			var __0x4877 = EngineConfig.TextBlock.FindChild( "ObjectsWindow" );
			if( __0x4877 != null )
			{
				var __0x4878 = __0x4877.FindChild( "ContentBrowser" );
				if( __0x4878 != null )
				{
					__0x4899.Options.Load( __0x4878 );
					
				}
			}
		}

		void __0x4892()
		{
			var __0x4879 = SelectedPanel?.control as ContentBrowser;
			if( __0x4879 != null )
			{
				var __0x4880 = EngineConfig.TextBlock;

				var __0x4881 = __0x4880.FindChild( "ObjectsWindow" );
				if( __0x4881 != null )
					__0x4880.DeleteChild( __0x4881 );

				var __0x4882 = __0x4880.AddChild( "ObjectsWindow" );
				var __0x4883 = __0x4882.AddChild( "ContentBrowser" );
				__0x4879.Options.Save( __0x4883 );
				
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ObjectsWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4884 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4884 != null))
            {
                __0x4884.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4893()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectsWindow";
			this.WindowTitle = "Objects";
			this.ResumeLayout(false);

        }

        #endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class OKCancelTextBoxForm : EngineForm
	{
		public delegate bool CheckDelegate( string __0x4916, ref string __0x4917 );
		CheckDelegate __0x4900;

		public delegate bool OKDelegate( string __0x4918, ref string __0x4919 );
		OKDelegate __0x4901;

		bool __0x4902;

		

		public OKCancelTextBoxForm( string labelText, string textBoxText, string caption, CheckDelegate checkHandler, OKDelegate okHandler )
		{
			this.__0x4900 = checkHandler;
			this.__0x4901 = okHandler;

			__0x4915();

			this.__0x4908.Text = labelText;
			__0x4909.Text = textBoxText;

			if( string.IsNullOrEmpty( caption ) )
				Text = EngineInfo.NameWithVersion;
			else
				Text = caption;

			__0x4910.Text = "";

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x4906.Text = EditorLocalization.Translate( "General", __0x4906.Text );
			__0x4907.Text = EditorLocalization.Translate( "General", __0x4907.Text );
		}

		private void __0x4911( object __0x4920, EventArgs __0x4921 )
		{
			__0x4902 = true;

			__0x4914();

			
		}

		public string TextBoxText
		{
			get { return __0x4909.Text; }
		}

		private void __0x4912( object __0x4922, EventArgs __0x4923 )
		{
			if( !__0x4902 )
				return;

			string __0x4903 = "";
			if( __0x4900 != null && !__0x4900( TextBoxText, ref __0x4903 ) )
			{
				__0x4910.Text = __0x4903;
				__0x4906.Enabled = false;
			}
			else
			{
				__0x4910.Text = "";
				__0x4906.Enabled = true;
			}
		}

		private void __0x4913( object __0x4924, FormClosingEventArgs __0x4925 )
		{
			if( DialogResult == DialogResult.OK )
			{
				string __0x4904 = "";
				if( __0x4901 != null && !__0x4901( TextBoxText, ref __0x4904 ) )
				{
					__0x4909.Focus();
					__0x4925.Cancel = true;
					__0x4910.Text = __0x4904;
					return;
				}
			}
		}

		void __0x4914()
		{
			__0x4907.Location = new Point( ClientSize.Width - __0x4907.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x4907.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x4906.Location = new Point( __0x4907.Location.X - __0x4906.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x4907.Location.Y );
			__0x4909.Width = ClientSize.Width - __0x4909.Location.X - DpiHelper.Default.ScaleValue( 12 );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4914();
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class OKCancelTextBoxForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4905 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4905 != null ) )
			{
				__0x4905.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4915()
		{
			this.__0x4906 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4907 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4908 = new System.Windows.Forms.Label();
			this.__0x4909 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4910 = new System.Windows.Forms.Label();
			this.SuspendLayout();
			
			
			
			
			this.__0x4906.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4906.Location = new System.Drawing.Point(197, 87);
			this.__0x4906.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4906.Name = "buttonOK";
			this.__0x4906.Size = new System.Drawing.Size(117, 32);
			this.__0x4906.TabIndex = 1;
			this.__0x4906.Values.Text = "OK";
			
			
			
			
			this.__0x4907.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4907.Location = new System.Drawing.Point(323, 87);
			this.__0x4907.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4907.Name = "buttonCancel";
			this.__0x4907.Size = new System.Drawing.Size(117, 32);
			this.__0x4907.TabIndex = 2;
			this.__0x4907.Values.Text = "Cancel";
			
			
			
			this.__0x4908.AutoSize = true;
			this.__0x4908.Location = new System.Drawing.Point(16, 11);
			this.__0x4908.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x4908.Name = "labelText";
			this.__0x4908.Size = new System.Drawing.Size(69, 17);
			this.__0x4908.TabIndex = 2;
			this.__0x4908.Text = "labelText:";
			
			
			
			
   
			this.__0x4909.Location = new System.Drawing.Point(20, 31);
			this.__0x4909.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4909.Name = "textBoxName";
			this.__0x4909.Size = new System.Drawing.Size(419, 22);
			this.__0x4909.TabIndex = 0;
			this.__0x4909.TextChanged += new System.EventHandler(this.__0x4912);
			
			
			
			this.__0x4910.AutoSize = true;
			this.__0x4910.ForeColor = System.Drawing.Color.Red;
			this.__0x4910.Location = new System.Drawing.Point(16, 57);
			this.__0x4910.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x4910.Name = "labelError";
			this.__0x4910.Size = new System.Drawing.Size(66, 17);
			this.__0x4910.TabIndex = 3;
			this.__0x4910.Text = "Error text";
			
			
			
			this.AcceptButton = this.__0x4906;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x4907;
			this.ClientSize = new System.Drawing.Size(456, 134);
			this.Controls.Add(this.__0x4910);
			this.Controls.Add(this.__0x4909);
			this.Controls.Add(this.__0x4908);
			this.Controls.Add(this.__0x4907);
			this.Controls.Add(this.__0x4906);
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "OKCancelTextBoxForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Form";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x4913);
			this.Load += new System.EventHandler(this.__0x4911);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4906;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x4907;
		private System.Windows.Forms.Label __0x4908;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4909;
		private System.Windows.Forms.Label __0x4910;
	}
}




namespace NeoAxis.Editor
{
	public partial class OutputWindow : DockWindow
	{
		
		
		

		
		public delegate void ProcessCmdKeyEventDelegate( OutputWindow __0x4946, ref Message __0x4947, Keys __0x4948, ref bool __0x4949 );
		public event ProcessCmdKeyEventDelegate ProcessCmdKeyEvent;

		EditorAssemblyInterface.ITextEditorControl __0x4926;

		

		public OutputWindow()
		{
			__0x4945();

			{
				__0x4926 = EditorAssemblyInterface.Instance.CreateTextEditorControl();
				var __0x4927 = (Control)this.__0x4926;

				this.Controls.Add( __0x4927 );
				
				
				
				__0x4927.Name = "kryptonRichTextBox1";
				this.__0x4926.EditorReadOnly = true;
				
				
				
				__0x4927.TabIndex = 2;
				this.__0x4926.EditorText = "";
				this.__0x4926.EditorWordWrap = true;

				__0x4926.Border = true;

				__0x4944();
			}

			__0x4936.Image = EditorResourcesCache.Options;
			__0x4935.Image = EditorResourcesCache.Delete;

			
			
			
			

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			__0x4936.Text = EditorLocalization.Translate( "OutputWindow", __0x4936.Text );
			__0x4935.Text = EditorLocalization.Translate( "OutputWindow", __0x4935.Text );

			__0x4934.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x4938( object __0x4950, PreviewKeyDownEventArgs __0x4951 )
		{
			
			
			
		}

		private void __0x4939( object __0x4952, EventArgs __0x4953 )
		{
			__0x4934.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x4934.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x4936.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x4935.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x4940();

			__0x4944();

			var __0x4928 = (Control)__0x4926;
			__0x4928.Select();
			
		}

		void __0x4940()
		{
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( ProcessCmdKeyEvent != null )
			{
				bool __0x4929 = false;
				ProcessCmdKeyEvent( this, ref msg, keyData, ref __0x4929 );
				if( __0x4929 )
					return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		void __0x4941( string __0x4954 )
		{
			__0x4926.EditorText += __0x4954;

			__0x4926.Select( __0x4926.EditorText.Length, 0 );
			__0x4926.ScrollToEnd();
			
		}

		public static void Print( string text )
		{
			var __0x4930 = EditorAPI.FindWindow<OutputWindow>();
			__0x4930?.__0x4941( text );
		}

		void __0x4942()
		{
			__0x4926.EditorText = "";

			__0x4926.Select( 0, 0 );
			__0x4926.ScrollToHome();
			
		}

		public static void Clear()
		{
			var __0x4931 = EditorAPI.FindWindow<OutputWindow>();
			__0x4931?.__0x4942();
		}

		private void __0x4943( object __0x4955, EventArgs __0x4956 )
		{
			__0x4942();
		}

		void __0x4944()
		{
			var __0x4932 = (Control)__0x4926;
			__0x4932?.SetBounds( 0, __0x4934.Height, ClientSize.Width, ClientSize.Height - __0x4934.Height );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x4944();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class OutputWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4933 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4933 != null ) )
			{
				__0x4933.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4945()
		{
			this.__0x4933 = new System.ComponentModel.Container();
			this.__0x4934 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x4936 = new System.Windows.Forms.ToolStripButton();
			this.__0x4937 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x4935 = new System.Windows.Forms.ToolStripButton();
			
			this.__0x4934.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4934.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x4934.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x4934.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x4936,
            this.__0x4937,
            this.__0x4935});
			this.__0x4934.Location = new System.Drawing.Point(0, 0);
			this.__0x4934.Name = "toolStrip1";
			this.__0x4934.AutoSize = false;
			this.__0x4934.Size = new System.Drawing.Size(713, 25);
			this.__0x4934.TabIndex = 1;
			this.__0x4934.Text = "toolStrip1";
			
			
			
			this.__0x4936.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4936.Enabled = false;
			this.__0x4936.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x4936.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4936.Name = "toolStripButtonOptions";
			this.__0x4936.AutoSize = false;
			this.__0x4936.Size = new System.Drawing.Size(23, 22);
			this.__0x4936.Text = "Options";
			
			
			
			this.__0x4937.Name = "toolStripSeparatorFilteringMode";
			this.__0x4937.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x4935.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4935.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x4935.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4935.Name = "toolStripButtonClear";
			this.__0x4935.AutoSize = false;
			this.__0x4935.Size = new System.Drawing.Size(23, 22);
			this.__0x4935.Text = "Clear";
			this.__0x4935.Click += new System.EventHandler(this.__0x4943);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			
			this.Controls.Add(this.__0x4934);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "OutputWindow";
			this.Size = new System.Drawing.Size(713, 190);
			this.WindowTitle = "Output";
			this.Load += new System.EventHandler( this.__0x4939 );
			this.__0x4934.ResumeLayout(false);
			this.__0x4934.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private NeoAxis.Editor.EngineToolStrip __0x4934;
		private System.Windows.Forms.ToolStripButton __0x4935;
		private System.Windows.Forms.ToolStripButton __0x4936;
		private System.Windows.Forms.ToolStripSeparator __0x4937;
		
	}
}





namespace NeoAxis.Editor
{
	

	public partial class PreviewControl : EUserControl
	{
		PreviewWindow.PanelData __0x4957;

		public PreviewControl()
		{
			__0x4959();
		}

		[Browsable( false )]
		public PreviewWindow.PanelData Panel
		{
			get { return __0x4957; }
			set { __0x4957 = value; }
		}

		[Browsable( false )]
		public object ObjectOfPreview
		{
			get
			{
				return __0x4957.objects[ 0 ];
				
			}
		}
	}
}
namespace NeoAxis.Editor
{
	partial class PreviewControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4958 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4959()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "PreviewControl";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	

	public partial class PreviewControlWithViewport : PreviewControl
	{
		
		Scene __0x4960;
		bool __0x4961;

		
		Bounds __0x4962 = new Bounds( -1, -1, -1, 1, 1, 1 );
		Vector3 __0x4963;
		bool __0x4964;
		double __0x4965 = .01;
		double __0x4966 = 1;
		
		bool __0x4967;
		bool __0x4968;
		SphericalDirection __0x4969 = new SphericalDirection( -3.83, -.47 );

		
		

		float __0x4970 = 1;

		

		public PreviewControlWithViewport()
		{
			__0x5021();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			__0x5019.ViewportCreated += ViewportControl_ViewportCreated;
			__0x5019.ViewportDestroyed += ViewportControl_ViewportDestroyed;

			__0x4970 = EditorAPI.DPI > 96 ? 2 : 1;
		}

		[Browsable( false )]
		public EngineViewportControl ViewportControl
		{
			get { return __0x5019; }
		}

		[Browsable( false )]
		public Viewport Viewport
		{
			get { return ViewportControl?.Viewport; }
		}

		protected virtual void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			Viewport __0x4971 = sender.Viewport;

			__0x4971.KeyDown += Viewport_KeyDown;
			__0x4971.KeyPress += Viewport_KeyPress;
			__0x4971.KeyUp += Viewport_KeyUp;
			__0x4971.MouseDown += Viewport_MouseDown;
			__0x4971.MouseUp += Viewport_MouseUp;
			__0x4971.MouseDoubleClick += Viewport_MouseDoubleClick;
			__0x4971.MouseMove += Viewport_MouseMove;
			__0x4971.MouseRelativeModeChanged += Viewport_MouseRelativeModeChanged;
			__0x4971.MouseWheel += Viewport_MouseWheel;
			__0x4971.JoystickEvent += Viewport_JoystickEvent;
			__0x4971.SpecialInputDeviceEvent += Viewport_SpecialInputDeviceEvent;
			__0x4971.Tick += Viewport_Tick;
			__0x4971.UpdateBegin += Viewport_UpdateBegin;
			__0x4971.UpdateBeforeOutput += Viewport_UpdateBeforeOutput;
			__0x4971.UpdateBeforeOutput += Viewport_UpdateBeforeOutput2;
			__0x4971.UpdateEnd += Viewport_UpdateEnd;

			
			ViewportControl.Viewport.AttachedScene = __0x4960;

			
			__0x4971.AllowRenderScreenLabels = false;
		}

		protected virtual void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( button == EMouseButtons.Right )
			{
				__0x4967 = true;
				viewport.MouseRelativeMode = true;
			}
			if( button == EMouseButtons.Left )
			{
				__0x4968 = true;
				viewport.MouseRelativeMode = true;
			}
		}

		protected virtual void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( button == EMouseButtons.Right )
			{
				__0x4967 = false;
				if( !__0x4967 && !__0x4968 )
					viewport.MouseRelativeMode = false;
			}
			if( button == EMouseButtons.Left )
			{
				__0x4968 = false;
				if( !__0x4967 && !__0x4968 )
					viewport.MouseRelativeMode = false;
			}
		}

		protected virtual void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			if( ViewportControl.Viewport.MouseRelativeMode )
			{
				

				double __0x4972 = .001;

				
				if( __0x4967 )
				{
					__0x4969.Horizontal -= mouse.X * __0x4972;
					__0x4969.Vertical -= mouse.Y * __0x4972;
					double __0x4973 = Math.PI / 2 - .01;
					if( __0x4969.Vertical > __0x4973 )
						__0x4969.Vertical = __0x4973;
					if( __0x4969.Vertical < -__0x4973 )
						__0x4969.Vertical = -__0x4973;

					
				}

				
				if( __0x4968 ) 
				{
					double __0x4974 = .3f;

					__0x4966 += mouse.Y * __0x4974 * __0x4972;
					if( __0x4966 < .01f )
						__0x4966 = .01f;

					
					
					
				}
			}
		}

		protected virtual void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			

			double __0x4975 = .001;

			__0x4966 -= (double)delta * __0x4975;
			if( __0x4966 < .01 )
				__0x4966 = .01;
		}

		protected virtual void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_Tick( Viewport sender, float delta )
		{
			if( __0x5019 != null )
				__0x5019.AutomaticUpdateFPS = (float)ProjectSettings.Get.General.MaxFramesPerSecondPreview;
		}

		protected virtual void Viewport_UpdateBegin( Viewport viewport )
		{
		}

		protected virtual void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
		}

		protected virtual void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x5020();
		}

		protected virtual void Viewport_UpdateEnd( Viewport viewport )
		{
		}

		protected virtual void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
		}

		protected override void OnDestroy()
		{
			DestroyScene();

			base.OnDestroy();
		}

		[Browsable( false )]
		public Scene Scene
		{
			get { return __0x4960; }
			set { __0x4960 = value; }
		}

		[Browsable( false )]
		public bool SceneNeedDispose
		{
			get { return __0x4961; }
			set { __0x4961 = value; }
		}

		[Browsable( false )]
		public Vector3 CameraLookTo
		{
			get { return __0x4963; }
			set { __0x4963 = value; }
		}

		[Browsable( false )]
		public double CameraInitialDistance
		{
			get { return __0x4965; }
			set { __0x4965 = value; }
		}

		[Browsable( false )]
		public bool CameraRotationMode
		{
			get { return __0x4967; }
			set { __0x4967 = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return __0x4969; }
			set { __0x4969 = value; }
		}

		public Scene CreateScene( bool enable )
		{
			DestroyScene();

			

			__0x4960 = ComponentUtility.CreateComponent<Scene>( null, true, enable );
			__0x4961 = true;

			
			__0x4960.OctreeEnabled = false;

			
			{
				var __0x4976 = (RenderingPipeline)__0x4960.CreateComponent( RenderingSystem.RenderingPipelineBasic, -1, false );
				__0x4960.RenderingPipeline = __0x4976;

				
				__0x4976.DeferredShading = AutoTrueFalse.False;
				__0x4976.LODRange = new RangeI( 0, 0 );

				double __0x4977 = 1.3;
				double __0x4978 = 0.4;

				if( EditorAPI.DarkTheme )
					__0x4960.BackgroundColor = new ColorValue( 40.0 / 255 * __0x4977, 40.0 / 255 * __0x4977, 40.0 / 255 * __0x4977 );
				else
					__0x4960.BackgroundColor = new ColorValue( 22.0 / 255 * __0x4977, 44.0 / 255 * __0x4977, 66.0 / 255 * __0x4977 );
				__0x4960.BackgroundColorAffectLighting = 1;
				
				__0x4960.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );

				var __0x4979 = __0x4976.CreateComponent<Component>();
				__0x4979.Name = "Background Effects";

				var __0x4980 = __0x4979.CreateComponent<RenderingEffect_Vignetting>();
				if( EditorAPI.DarkTheme )
					__0x4980.Color = new ColorValue( 45.0 / 255 * __0x4978, 45.0 / 255 * __0x4978, 45.0 / 255 * __0x4978 );
				else
					__0x4980.Color = new ColorValue( 24.0 / 255 * __0x4978, 48.0 / 255 * __0x4978, 72.0 / 255 * __0x4978 );
				__0x4980.Radius = 2;

				var __0x4981 = __0x4979.CreateComponent<RenderingEffect_Noise>();
				__0x4981.Multiply = new Range( 0.9, 1.1 );

				var __0x4982 = __0x4976.CreateComponent<Component>();
				__0x4982.Name = "Scene Effects";

				
				__0x4982.CreateComponent<RenderingEffect_ToLDR>();
				var __0x4983 = __0x4982.CreateComponent<RenderingEffect_Antialiasing>();
				__0x4983.BasicTechnique = RenderingEffect_Antialiasing.BasicTechniqueEnum.SSAAx4;

				__0x4976.Enabled = true;
			}

			
			{
				var __0x4984 = __0x4960.CreateComponent<Light>();
				__0x4984.Type = Light.TypeEnum.Ambient;
				__0x4984.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x4985 = __0x4960.CreateComponent<Light>();
				__0x4985.Type = Light.TypeEnum.Directional;
				__0x4985.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x4985.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewDirectionalLightBrightness" );
				
				__0x4985.Shadows = false;
				
				
			}

			
			__0x4960.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( ViewportControl != null && ViewportControl.Viewport != null )
				ViewportControl.Viewport.AttachedScene = __0x4960;

			return __0x4960;
		}

		public void DestroyScene()
		{
			if( __0x4960 != null )
			{
				if( ViewportControl != null && ViewportControl.Viewport != null )
					ViewportControl.Viewport.AttachedScene = null;

				if( __0x4961 )
					__0x4960.Dispose();
				__0x4960 = null;
				__0x4961 = false;
			}
		}

		
		
		
		
		
		
		
		
		

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			if( !__0x4964 )
			{
				var __0x4986 = __0x4963 - __0x4969.GetVector() * __0x4965 * __0x4966;
				var __0x4987 = __0x4963;

				Vector3 __0x4988 = __0x4986;
				Vector3 __0x4989 = __0x4987;
				Degree __0x4990 = 65;

				
				Camera __0x4991 = new Camera();
				__0x4991.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4991.FieldOfView = __0x4990;
				__0x4991.NearClipPlane = Math.Max( __0x4965 / 10000, 0.01 );
				__0x4991.FarClipPlane = Math.Max( 1000, __0x4965 * 2 );

				__0x4991.Transform = new Transform( __0x4988, Quaternion.LookAt( ( __0x4989 - __0x4988 ).GetNormalize(), Vector3.ZAxis ) );
				
				

				__0x4991.FixedUp = Vector3.ZAxis;
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4991 );

				
				
				
				
			}
			else
			{
				var __0x4992 = __0x4963 + new Vector3( 0, 0, scene.CameraEditor2DPositionZ );
				var __0x4993 = __0x4963;

				Camera __0x4994 = new Camera();
				__0x4994.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4994.NearClipPlane = 0.01;
				__0x4994.FarClipPlane = 1000;
				__0x4994.Transform = new Transform( __0x4992, Quaternion.LookAt( ( __0x4993 - __0x4992 ).GetNormalize(), Vector3.YAxis ) );
				__0x4994.Projection = ProjectionType.Orthographic;
				__0x4994.FixedUp = Vector3.YAxis;
				
				__0x4994.Height = __0x4962.GetSize().Y * 1.4;

				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4994 );
			}

			processed = true;
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			__0x4962 = bounds;
			__0x4963 = bounds.GetCenter();
			__0x4964 = mode2D;

			double __0x4995 = Math.Max( Math.Max( bounds.GetSize().X, bounds.GetSize().Y ), bounds.GetSize().Z );
			double __0x4996 = __0x4995 * 2 * distanceScale;
			if( __0x4996 < 2 )
				__0x4996 = 2;

			

			__0x4965 = __0x4996;

			
		}

		
		
		
		

		protected virtual void GetTextInfoLeftTopCorner( List<string> lines )
		{
		}

		void __0x5020()
		{
			

			var __0x4997 = new List<string>();
			GetTextInfoLeftTopCorner( __0x4997 );
			var __0x4998 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.5, GetFontSize() * 0.3 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x4997, new Rectangle( __0x4998.X, __0x4998.Y, 1, 1 ), EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 1, 1, 1, 0.7 ) );
		}

		public double GetFontSize()
		{
			double __0x4999 = 12.0 * DpiHelper.Default.DpiScaleFactor;
			__0x4999 = (int)__0x4999;

			var __0x5000 = ViewportControl.Viewport.CanvasRenderer;

			int __0x5001 = __0x5000.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x5002 = (float)__0x4999 / (float)__0x5001;
			float __0x5003 = __0x5002;

			return __0x5003;
		}

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		public void AddTextWithShadow( FontComponent font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x5004 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x5004.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x5004.DefaultFontSize;

			Vector2 __0x5005 = __0x4970 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			__0x5004.AddText( font, fontSize, text, position + __0x5005, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
			__0x5004.AddText( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextWithShadow( null, -1, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( FontComponent font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			if( lines.Count == 0 )
				return;

			var __0x5006 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x5006.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x5006.DefaultFontSize;

			Vector2 __0x5007 = __0x4970 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			float __0x5008 = (float)lines.Count * (float)fontSize;

			double __0x5009 = 0;
			switch( verticalAlign )
			{
			case EVerticalAlignment.Top:
				__0x5009 = rectangle.Top;
				break;
			case EVerticalAlignment.Center:
				__0x5009 = rectangle.Top + ( rectangle.Size.Y - __0x5008 ) / 2;
				break;
			case EVerticalAlignment.Bottom:
				__0x5009 = rectangle.Bottom - __0x5008;
				break;
			}

			for( int __0x5010 = 0; __0x5010 < lines.Count; __0x5010++ )
			{
				string __0x5011 = lines[ __0x5010 ];

				double __0x5012 = 0;
				switch( horizontalAlign )
				{
				case EHorizontalAlignment.Left:
					__0x5012 = rectangle.Left;
					break;
				case EHorizontalAlignment.Center:
					__0x5012 = rectangle.Left + ( rectangle.Size.X - font.GetTextLength( fontSize, __0x5006, __0x5011 ) ) / 2;
					break;
				case EHorizontalAlignment.Right:
					__0x5012 = rectangle.Right - font.GetTextLength( fontSize, __0x5006, __0x5011 );
					break;
				}

				Vector2 __0x5013 = new Vector2( __0x5012, __0x5009 );

				__0x5006.AddText( font, fontSize, __0x5011, __0x5013 + __0x5007, EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
				__0x5006.AddText( font, fontSize, __0x5011, __0x5013, EHorizontalAlignment.Left, EVerticalAlignment.Top, color );
				__0x5009 += fontSize;
			}
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextLinesWithShadow( null, -1, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( FontComponent font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x5014 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x5014.DefaultFont;
			if( font == null || font.Disposed )
				return 0;
			
			
			if( fontSize < 0 )
				fontSize = __0x5014.DefaultFontSize;

			var __0x5015 = font.GetWordWrapLines( fontSize, __0x5014, text, rectangle.Size.X );

			string[] __0x5016 = new string[ __0x5015.Length ];
			for( int __0x5017 = 0; __0x5017 < __0x5016.Length; __0x5017++ )
				__0x5016[ __0x5017 ] = __0x5015[ __0x5017 ].Text;

			AddTextLinesWithShadow( font, fontSize, __0x5016, rectangle, horizontalAlign, verticalAlign, color );

			return __0x5016.Length;
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return AddTextWordWrapWithShadow( null, -1, text, rectangle, horizontalAlign, verticalAlign, color );
		}

	}
}
namespace NeoAxis.Editor
{
	partial class PreviewControlWithViewport
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5018 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5021()
		{
			this.__0x5018 = new System.ComponentModel.Container();
			this.__0x5019 = new NeoAxis.Editor.EngineViewportControl();
			this.SuspendLayout();
			
			
			
			this.__0x5019.AllowCreateRenderWindow = true;
			this.__0x5019.AutomaticUpdateFPS = 60F;
			this.__0x5019.BackColor = System.Drawing.Color.Transparent;
			this.__0x5019.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x5019.Location = new System.Drawing.Point(0, 0);
			this.__0x5019.Margin = new System.Windows.Forms.Padding(0);
			this.__0x5019.Name = "viewportControl";
			this.__0x5019.Size = new System.Drawing.Size(785, 518);
			this.__0x5019.TabIndex = 0;

			this.Controls.Add( this.__0x5019 );

			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "DocumentItem";
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Editor.EngineViewportControl __0x5019;
	}
}





namespace NeoAxis.Editor
{
	public abstract class PreviewImageGenerator
	{
		
		Viewport __0x5022;
		object __0x5023;

		
		Scene __0x5024;
		bool __0x5025;

		
		Bounds __0x5026 = new Bounds( -1, -1, -1, 1, 1, 1 );
		Vector3 __0x5027;
		bool __0x5028;
		double __0x5029 = .01;
		SphericalDirection __0x5030 = new SphericalDirection( -3.83, -.47 );

		
		

		

		

		public PreviewImageGenerator()
		{
			

			
			

			
		}

		internal void Init( Viewport viewport, object objectOfPreview )
		{
			this.__0x5022 = viewport;
			this.__0x5023 = objectOfPreview;
		}

		public virtual bool ClampImage
		{
			get { return true; }
		}

		public Viewport Viewport
		{
			get { return __0x5022; }
		}

		public object ObjectOfPreview
		{
			get { return __0x5023; }
		}

		protected virtual void OnUpdate()
		{
		}
		public void PerformUpdate()
		{
			OnUpdate();
		}

		
		
		
		

		
		
		
		

		
		
		

		
		
		

		
		
		

		
		

		public Scene Scene
		{
			get { return __0x5024; }
			set { __0x5024 = value; }
		}

		public bool SceneNeedDispose
		{
			get { return __0x5025; }
			set { __0x5025 = value; }
		}

		public Scene CreateScene( bool enable )
		{
			DetachAndOrDestroyScene();

			__0x5024 = ComponentUtility.CreateComponent<Scene>( null, true, enable );
			__0x5025 = true;

			
			__0x5024.OctreeEnabled = false;

			
			{
				var __0x5031 = (RenderingPipeline)__0x5024.CreateComponent( RenderingSystem.RenderingPipelineBasic, -1, false );
				__0x5024.RenderingPipeline = __0x5031;

				
				__0x5031.DeferredShading = AutoTrueFalse.False;
				__0x5031.LODRange = new RangeI( 0, 0 );
				

				__0x5024.BackgroundColor = new ColorValue( 0, 0, 0, 0 );
				__0x5024.BackgroundColorAffectLighting = 1;
				
				
				
				
				__0x5024.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );
				

				
				

				
				
				
				
				
				

				
				

				
				

				
				
				
				
				
				
				
				

				__0x5031.Enabled = true;
			}

			
			{
				var __0x5032 = __0x5024.CreateComponent<Light>();
				__0x5032.Type = Light.TypeEnum.Ambient;
				__0x5032.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x5033 = __0x5024.CreateComponent<Light>();
				__0x5033.Type = Light.TypeEnum.Directional;
				__0x5033.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x5033.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|$General\\PreviewDirectionalLightBrightness" );
				
				__0x5033.Shadows = false;
				
				
			}

			
			__0x5024.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( Viewport != null )
				Viewport.AttachedScene = __0x5024;

			return __0x5024;
		}

		public void DetachAndOrDestroyScene()
		{
			if( __0x5024 != null )
			{
				if( Viewport != null )
					Viewport.AttachedScene = null;

				if( __0x5025 )
					__0x5024.Dispose();
				__0x5024 = null;
				__0x5025 = false;
			}
		}

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			if( !__0x5028 )
			{
				var __0x5034 = __0x5027 - __0x5030.GetVector() * __0x5029;
				var __0x5035 = __0x5027;

				Vector3 __0x5036 = __0x5034;
				Vector3 __0x5037 = __0x5035;
				Degree __0x5038 = 40;

				
				Camera __0x5039 = new Camera();
				__0x5039.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x5039.FieldOfView = __0x5038;
				__0x5039.NearClipPlane = Math.Max( __0x5029 / 10000, 0.01 );
				__0x5039.FarClipPlane = Math.Max( 1000, __0x5029 * 5 );

				__0x5039.Transform = new Transform( __0x5036, Quaternion.LookAt( ( __0x5037 - __0x5036 ).GetNormalize(), Vector3.ZAxis ) );
				
				

				__0x5039.FixedUp = Vector3.ZAxis;
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x5039 );

				
				
				
				
			}
			else
			{
				var __0x5040 = __0x5027 + new Vector3( 0, 0, scene.CameraEditor2DPositionZ );
				var __0x5041 = __0x5027;

				Camera __0x5042 = new Camera();
				__0x5042.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x5042.NearClipPlane = 0.01;
				__0x5042.FarClipPlane = 1000;
				__0x5042.Transform = new Transform( __0x5040, Quaternion.LookAt( ( __0x5041 - __0x5040 ).GetNormalize(), Vector3.YAxis ) );
				__0x5042.Projection = ProjectionType.Orthographic;
				__0x5042.FixedUp = Vector3.YAxis;
				
				__0x5042.Height = __0x5026.GetSize().Y * 1.4;

				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x5042 );
			}

			processed = true;
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			__0x5026 = bounds;
			__0x5027 = bounds.GetCenter();
			__0x5028 = mode2D;

			double __0x5043 = Math.Max( Math.Max( bounds.GetSize().X, bounds.GetSize().Y ), bounds.GetSize().Z );
			double __0x5044 = __0x5043 * distanceScale;

			

			__0x5029 = __0x5044;

			
		}

		public Vector3 CameraLookTo
		{
			get { return __0x5027; }
			set { __0x5027 = value; }
		}

		public double CameraDistance
		{
			get { return __0x5029; }
			set { __0x5029 = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return __0x5030; }
			set { __0x5030 = value; }
		}

		
		
		

		
		
		

		
		
		
		
		

		
		
		
		

		

		
		
		

		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		
		
		

		

		
		
		

		

		
		

		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	public static class PreviewImagesManager
	{
		
		const int __0x5045 = 1024;
		const int __0x5046 = 13;
		const int __0x5047 = 128;

		const int __0x5048 = 10;
		const int __0x5049 = 100;

		const PixelFormat __0x5050 = PixelFormat.A8R8G8B8;

		

		static ESet<ResourceManager.ResourceType> __0x5051 = new ESet<ResourceManager.ResourceType>();

		static Queue<__0x5141> __0x5052 = new Queue<__0x5141>();
		static List<__0x5142> __0x5053 = new List<__0x5142>();

		
		static Dictionary<string, __0x5143> __0x5054 = new Dictionary<string, __0x5143>();

		public static bool EnableVirtualFileWatcherUpdate { get; set; } = true;

		

		class __0x5141
		{
			public string virtualFileName;
		}

		

		class __0x5142
		{
			ImageComponent __0x5055;
			Viewport __0x5056;
			ImageComponent __0x5057;
			IntPtr __0x5058;

			__0x5141 __0x5059;
			PreviewImageGenerator __0x5060;
			int __0x5061;

			

			public bool Init()
			{
				try
				{
					__0x5055 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
					__0x5055.CreateType = ImageComponent.TypeEnum._2D;
					__0x5055.CreateSize = new Vector2I( __0x5045, __0x5045 );
					__0x5055.CreateMipmaps = false;
					__0x5055.CreateFormat = __0x5050;
					__0x5055.CreateUsage = ImageComponent.Usages.RenderTarget;
					__0x5055.CreateFSAA = 0;
					__0x5055.Enabled = true;

					var __0x5062 = __0x5055.Result.GetRenderTarget( 0, 0 );

					__0x5056 = __0x5062.AddViewport( false, true );
					__0x5056.AllowRenderScreenLabels = false;

					__0x5056.UpdateBegin += __0x5118;

					__0x5057 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
					__0x5057.CreateType = ImageComponent.TypeEnum._2D;
					__0x5057.CreateSize = __0x5055.CreateSize;
					__0x5057.CreateMipmaps = false;
					__0x5057.CreateFormat = __0x5055.CreateFormat;
					__0x5057.CreateUsage = ImageComponent.Usages.ReadBack | ImageComponent.Usages.BlitDestination;
					__0x5057.CreateFSAA = 0;
					__0x5057.Enabled = true;

					var __0x5063 = PixelFormatUtility.GetNumElemBytes( __0x5050 ) * __0x5045 * __0x5045;
					__0x5058 = NativeUtility.Alloc( NativeUtility.MemoryAllocationType.Utility, __0x5063 );

				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return false;
				}

				return true;
			}

			public bool Working
			{
				get { return __0x5059 != null; }
			}

			static Type __0x5116( object __0x5126 )
			{
				var __0x5064 = (PreviewImageAttribute[])__0x5126.GetType().GetCustomAttributes( typeof( PreviewImageAttribute ), true );
				if( __0x5064.Length != 0 )
				{
					var __0x5065 = __0x5064[ 0 ];
					if( !string.IsNullOrEmpty( __0x5065.PreviewClassName ) )
					{
						var __0x5066 = EditorUtility.GetTypeByName( __0x5065.PreviewClassName );
						if( __0x5066 == null )
							Log.Warning( $"PreviewImagesManager: GetPreviewClass: Class with name \"{__0x5065.PreviewClassName}\" is not found." );
						return __0x5066;
					}
					else
						return __0x5065.PreviewClass;
				}

				return null;
			}

			static void __0x5117( string __0x5127, out object __0x5128, out PreviewImageGenerator __0x5129 )
			{
				__0x5129 = null;
				__0x5128 = null;

				var __0x5067 = ResourceManager.LoadResource( __0x5127, true );
				if( __0x5067 != null )
				{
					__0x5128 = __0x5067.ResultComponent;
					if( __0x5128 != null )
					{
						var __0x5068 = __0x5116( __0x5128 );
						if( __0x5068 != null )
							__0x5129 = (PreviewImageGenerator)Activator.CreateInstance( __0x5068 );
					}
				}
			}

			private void __0x5118( Viewport __0x5130 )
			{
				__0x5060?.PerformUpdate();
			}

			public void StartTask( __0x5141 imageToProcess )
			{
				__0x5059 = imageToProcess;

				try
				{
					__0x5117( imageToProcess.virtualFileName, out var objectOfPreview, out __0x5060 );

					if( __0x5060 != null )
					{
						__0x5060.Init( __0x5056, objectOfPreview );

						__0x5056.Update( true );

						
						__0x5056.RenderingContext.MultiRenderTarget_DestroyAll();
						__0x5056.RenderingContext.DynamicTexture_DestroyAll();

						__0x5055.Result.GetNativeObject( true ).BlitTo( __0x5056.RenderingContext.CurrentViewNumber, __0x5057.Result.GetNativeObject( true ), 0, 0 );

						__0x5061 = __0x5057.Result.GetNativeObject( true ).Read( __0x5058, 0 );
					}
					else
						ClearTask();
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}
			}

			static RectangleI __0x5119( ImageUtility.Image2D __0x5131 )
			{
				int __0x5069 = 0;
				for( ; __0x5069 < __0x5131.Size.X; __0x5069++ )
				{
					for( int __0x5070 = 0; __0x5070 < __0x5131.Size.Y; __0x5070++ )
					{
						if( __0x5131.GetPixel( new Vector2I( __0x5069, __0x5070 ) ).W >= 0.004 )
							goto endMinX;
					}
				}
				endMinX:;

				int __0x5071 = 0;
				for( ; __0x5071 < __0x5131.Size.Y; __0x5071++ )
				{
					for( int __0x5072 = 0; __0x5072 < __0x5131.Size.X; __0x5072++ )
					{
						if( __0x5131.GetPixel( new Vector2I( __0x5072, __0x5071 ) ).W >= 0.004 )
							goto endMinY;
					}
				}
				endMinY:;

				int __0x5073 = __0x5131.Size.X - 1;
				for( ; __0x5073 >= 0; __0x5073-- )
				{
					for( int __0x5074 = 0; __0x5074 < __0x5131.Size.Y; __0x5074++ )
					{
						if( __0x5131.GetPixel( new Vector2I( __0x5073, __0x5074 ) ).W >= 0.004 )
							goto endMaxX;
					}
				}
				endMaxX:;

				int __0x5075 = __0x5131.Size.Y - 1;
				for( ; __0x5075 >= 0; __0x5075-- )
				{
					for( int __0x5076 = 0; __0x5076 < __0x5131.Size.X; __0x5076++ )
					{
						if( __0x5131.GetPixel( new Vector2I( __0x5076, __0x5075 ) ).W >= 0.004 )
							goto endMaxY;
					}
				}
				endMaxY:;

				
				if( __0x5073 < __0x5069 )
					__0x5073 = __0x5069;
				if( __0x5075 < __0x5071 )
					__0x5075 = __0x5071;

				var __0x5077 = new RectangleI( __0x5069, __0x5071, __0x5073 + 2, __0x5075 + 2 );

				
				if( __0x5077.Size.X < __0x5077.Size.Y )
					__0x5077.Expand( new Vector2I( ( __0x5077.Size.Y - __0x5077.Size.X ) / 2, 0 ) );
				else if( __0x5077.Size.Y < __0x5077.Size.X )
					__0x5077.Expand( new Vector2I( 0, ( __0x5077.Size.X - __0x5077.Size.Y ) / 2 ) );

				return __0x5077;
			}

			public void Update()
			{
#if !DEPLOY
				if( Working )
				{
					try
					{
						if( RenderingSystem.LastFrameNumber >= __0x5061 )
						{
							

							var __0x5078 = new ImageUtility.Image2D( __0x5050, new Vector2I( __0x5045, __0x5045 ), __0x5058 );

							
							RectangleI __0x5079;
							if( __0x5060.ClampImage )
							{
								__0x5079 = __0x5119( __0x5078 );

								
								__0x5079.Expand( __0x5046 );

								
								
								
								
								
								
								
								
								
								
							}
							else
								__0x5079 = new RectangleI( 0, 0, __0x5045, __0x5045 );

							var __0x5080 = __0x5079.Size;

							
							var __0x5081 = new ImageUtility.Image2D( __0x5050, __0x5080 );
							__0x5081.Blit( Vector2I.Zero, __0x5078, __0x5079.LeftTop );

							
							Bitmap __0x5082;
							unsafe
							{
								fixed( byte* __0x5083 = __0x5081.Data )
								{
									__0x5082 = new Bitmap( __0x5080.X, __0x5080.Y, __0x5080.X * PixelFormatUtility.GetNumElemBytes( __0x5050 ), System.Drawing.Imaging.PixelFormat.Format32bppArgb, (IntPtr)__0x5083 );
								}
							}
							

							
							var __0x5084 = Win32Utility.ResizeImage( __0x5082, __0x5047, __0x5047 );

							
							var __0x5085 = __0x5124( __0x5059.virtualFileName );
							try
							{
								if( !Directory.Exists( Path.GetDirectoryName( __0x5085 ) ) )
									Directory.CreateDirectory( Path.GetDirectoryName( __0x5085 ) );

								__0x5084.Save( __0x5085, ImageFormat.Png );
							}
							catch( Exception e )
							{
								Log.Warning( $"PreviewImagesManager: Processor: Update: Unable to save bitmap to \'{__0x5085}\'. " + e.Message );
							}
							finally
							{
								__0x5082.Dispose();
								__0x5084.Dispose();
							}

							
							ClearTask();

							
							foreach( var __0x5112 in ContentBrowser.AllInstances )
								__0x5112.needUpdateImages = true;
						}

					}
					catch( Exception e )
					{
						Log.Warning( e.Message );
					}
				}
#endif
			}

			public void ClearTask()
			{
				if( __0x5056 != null )
					__0x5056.AttachedScene = null;

				__0x5060?.DetachAndOrDestroyScene();

				__0x5059 = null;
				__0x5060 = null;
				__0x5061 = -1;
			}

			public void Dispose()
			{
				ClearTask();

				if( __0x5058 != IntPtr.Zero )
				{
					NativeUtility.Free( __0x5058 );
					__0x5058 = IntPtr.Zero;
				}

				__0x5055?.Dispose();
				__0x5055 = null;
				__0x5056 = null;
				__0x5057?.Dispose();
				__0x5057 = null;
			}
		}

		

		class __0x5143
		{
			public Image originalImage;
			public Image smallImageForTreeView;
			public bool needReload;

			
			
			
			
			
			
		}

		

		internal static void Init()
		{
			var __0x5086 = new string[] { "Material", "Image", "Mesh", "Import 3D", "Skybox", "Object In Space", "Surface" };
			
			
			
			

			foreach( var __0x5113 in __0x5086 )
			{
				var __0x5087 = ResourceManager.GetTypeByName( __0x5113 );
				if( __0x5087 != null )
					RegisterResourceType( __0x5087 );
			}

			VirtualFileWatcher.Update += __0x5125;
		}

		internal static void Shutdown()
		{
			VirtualFileWatcher.Update -= __0x5125;

			try
			{
				foreach( var __0x5114 in __0x5053 )
					__0x5114.Dispose();
				__0x5053.Clear();
			}
			catch { }
		}

		public static void RegisterResourceType( ResourceManager.ResourceType resourceType )
		{
			__0x5051.AddWithCheckAlreadyContained( resourceType );
		}

		public static void RegisterResourceType( string resourceTypeName )
		{
			var __0x5088 = ResourceManager.GetTypeByName( resourceTypeName );
			if( __0x5088 != null )
				RegisterResourceType( __0x5088 );
		}

		public static bool IsResourceTypeSupported( ResourceManager.ResourceType resourceType )
		{
			return __0x5051.Contains( resourceType );
		}

		static __0x5143 __0x5120( string __0x5132 )
		{
			if( __0x5054.TryGetValue( __0x5132, out var item ) )
				return item;
			return null;
		}

		static __0x5143 __0x5121( string __0x5133, out bool __0x5134 )
		{
			__0x5134 = false;

#if !DEPLOY
			var __0x5089 = __0x5120( __0x5133 );
			if( __0x5089 == null || __0x5089.needReload )
			{
				var __0x5090 = __0x5124( __0x5133 );
				if( File.Exists( __0x5090 ) )
				{
					
					
					

					

					__0x5089 = new __0x5143();

					
					var __0x5091 = File.ReadAllBytes( __0x5090 );
					var __0x5092 = new MemoryStream( __0x5091 );
					__0x5089.originalImage = Image.FromStream( __0x5092 );

					
					int __0x5093;
					if( EditorAPI.DPIScale >= 2.0 )
						__0x5093 = 32;
					else if( EditorAPI.DPIScale >= 1.75 )
						__0x5093 = 28;
					else if( EditorAPI.DPIScale >= 1.5 )
						__0x5093 = 24;
					else
						__0x5093 = 16;
					__0x5089.smallImageForTreeView = Win32Utility.ResizeImage( __0x5089.originalImage, __0x5093, __0x5093 );

					
					
					
					

					__0x5054[ __0x5133 ] = __0x5089;
				}
				else
					__0x5134 = true;
			}

			return __0x5089;
#else
			return null;
#endif
		}

		public static Image GetImageForResource( string realFileName, bool forTreeView )
		{
			try
			{
				var __0x5094 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( realFileName ) );
				if( __0x5094 != null && IsResourceTypeSupported( __0x5094 ) )
				{
					var __0x5095 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
					if( !string.IsNullOrEmpty( __0x5095 ) )
					{
						var __0x5096 = __0x5121( __0x5095, out var cacheNotExists );
						if( __0x5096 != null )
							return forTreeView ? __0x5096.smallImageForTreeView : __0x5096.originalImage;

						if( cacheNotExists )
							AddResourceToProcess( realFileName );
					}
				}

				return null;
			}
			catch( Exception e )
			{
				Log.Warning( "PreviewImagesManager: GetImageForResource: " + e.Message );
				return null;
			}
		}

		static __0x5141 __0x5122( string __0x5135 )
		{
			return __0x5052.FirstOrDefault( __0x5136 => __0x5136.virtualFileName == __0x5135 );
		}

		public static void AddResourceToProcess( string realFileName )
		{
			try
			{
				var __0x5097 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( realFileName ) );
				if( __0x5097 != null && IsResourceTypeSupported( __0x5097 ) )
				{
					var __0x5098 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
					if( !string.IsNullOrEmpty( __0x5098 ) )
					{

						
						var __0x5099 = __0x5120( __0x5098 );
						if( __0x5099 != null )
							__0x5099.needReload = true;

						
						if( __0x5122( __0x5098 ) == null )
						{
							
							if( __0x5052.Count < __0x5049 )
							{
								
								var __0x5100 = new __0x5141();
								__0x5100.virtualFileName = __0x5098;
								__0x5052.Enqueue( __0x5100 );
							}
						}

					}
				}
			}
			catch( Exception e )
			{
				Log.Warning( "PreviewImagesManager: NeedRefreshResource: " + e.Message );
			}
		}

		static __0x5142 __0x5123()
		{
			
			{
				var __0x5101 = __0x5053.FirstOrDefault( __0x5137 => !__0x5137.Working );
				if( __0x5101 != null )
					return __0x5101;
			}

			
			if( __0x5053.Count < __0x5048 )
			{
				var __0x5102 = new __0x5142();
				if( !__0x5102.Init() )
				{
					__0x5102.Dispose();
					return null;
				}
				__0x5053.Add( __0x5102 );
				return __0x5102;
			}

			return null;
		}

		public static bool ExistsWorkingProcessors()
		{
			return __0x5053.Exists( __0x5138 => __0x5138.Working );
		}

		public static void Update()
		{
			
			again:
			if( __0x5052.Count != 0 )
			{
				var __0x5103 = __0x5123();
				if( __0x5103 != null )
				{
					var __0x5104 = __0x5052.Dequeue();
					__0x5103.StartTask( __0x5104 );
					goto again;
				}
			}

			
			foreach( var __0x5115 in __0x5053 )
				__0x5115.Update();
		}

		static string __0x5124( string __0x5139 )
		{
			return PathUtility.Combine( VirtualFileSystem.Directories.Project, @"Caches\Files", __0x5139 ) + ".preview.png";
		}


		
		
		

		
		public static Image GetImageForPaintLayer( PaintLayer layer )
		{
			if( layer != null )
			{
				Component __0x5105 = layer.Material.Value;
				if( __0x5105 == null )
					__0x5105 = layer.Surface.Value;

				if( __0x5105 != null )
				{
					if( __0x5105.Parent == null )
					{
						var __0x5106 = ComponentUtility.GetOwnedFileNameOfComponent( __0x5105 );
						if( !string.IsNullOrEmpty( __0x5106 ) )
						{
							var __0x5107 = VirtualPathUtility.GetRealPathByVirtual( __0x5106 );
							return GetImageForResource( __0x5107, false );
						}
					}
				}
			}

			return EditorResourcesCache.GetDefaultImage( 32 );
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

		}

		public static void NeedRegenerateFile( string virtualFileName )
		{
			var __0x5108 = __0x5120( virtualFileName );
			if( __0x5108 != null )
			{
				

				var __0x5109 = VirtualPathUtility.GetRealPathByVirtual( virtualFileName );
				AddResourceToProcess( __0x5109 );
			}
			else
			{
				

				var __0x5110 = __0x5124( virtualFileName );
				try
				{
					if( File.Exists( __0x5110 ) )
						File.Delete( __0x5110 );
				}
				catch { }
			}
		}

		private static void __0x5125( FileSystemEventArgs __0x5140 )
		{
			if( EnableVirtualFileWatcherUpdate )
			{
				
				var __0x5111 = VirtualPathUtility.GetVirtualPathByReal( __0x5140.FullPath );
				if( !string.IsNullOrEmpty( __0x5111 ) )
					NeedRegenerateFile( __0x5111 );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	

	/// <summary>
	/// Represents the Preview Window.
	/// </summary>
	public partial class PreviewWindow : DockWindow
	{
		

		
		const int __0x5144 = 10;

		
		static PreviewWindow __0x5145;

		public class PanelData
		{
			

			public object[] objects;
			
			public PreviewControl control;
		}
		List<PanelData> __0x5146 = new List<PanelData>();

		PanelData __0x5147;

		double __0x5148;

		

		public PreviewWindow()
		{
			if( __0x5145 != null )
				Log.Fatal( "PreviewWindow: Constructor: instance != null." );
			__0x5145 = this;

			__0x5184();

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		public static PreviewWindow Instance
		{
			get { return __0x5145; }
		}

		static bool __0x5176( object[] __0x5185, object[] __0x5186 )
		{
			if( __0x5185.Length != __0x5186.Length )
				return false;
			for( int __0x5149 = 0; __0x5149 < __0x5185.Length; __0x5149++ )
				if( !ReferenceEquals( __0x5185[ __0x5149 ], __0x5186[ __0x5149 ] ) )
					return false;
			return true;
		}

		PanelData __0x5177( object[] __0x5187 )
		{
			foreach( var __0x5174 in __0x5146 )
			{
				if( __0x5176( __0x5174.objects, __0x5187 ) )
					return __0x5174;
			}
			return null;

			
			
			
			
			
			
		}

		
		
		
		
		
		
		
		
		

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		Type __0x5178( object __0x5188 )
		{
			

			
			
			
			
			
			

			var __0x5150 = (PreviewAttribute[])__0x5188.GetType().GetCustomAttributes( typeof( PreviewAttribute ), true );
			if( __0x5150.Length != 0 )
			{
				var __0x5151 = __0x5150[ 0 ];
				if( !string.IsNullOrEmpty( __0x5151.PreviewClassName ) )
				{
					var __0x5152 = EditorUtility.GetTypeByName( __0x5151.PreviewClassName );
					if( __0x5152 == null )
						Log.Warning( $"PreviewWindow: GetPreviewClass: Class with name \"{__0x5151.PreviewClassName}\" is not found." );
					return __0x5152;
				}
				else
					return __0x5151.PreviewClass;
			}

			return null;
		}

		PanelData __0x5179( object[] __0x5189, bool __0x5190 )
		
		{
			PanelData __0x5153 = new PanelData();
			__0x5146.Add( __0x5153 );
			__0x5153.objects = __0x5189;
			

			PreviewControl __0x5154 = null;
			{
				if( __0x5189.Length == 1 )
				
				{
					var __0x5155 = __0x5189[ 0 ];
					

					

					var __0x5156 = __0x5178( __0x5155 );
					if( __0x5156 != null )
					{
						if( typeof( CanvasBasedPreview ).IsAssignableFrom( __0x5156 ) )
						{
							var __0x5157 = (CanvasBasedPreview)Activator.CreateInstance( __0x5156 );
							var __0x5158 = new PreviewControlWithViewport_CanvasBasedPreview( __0x5157 );
							__0x5157.owner = __0x5158;
							__0x5154 = __0x5158;
						}
						else
						{
							__0x5154 = (PreviewControl)__0x5156.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
						}
					}

					

					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
				}

				
				if( __0x5154 == null )
					__0x5154 = new PreviewControl();
			}

			__0x5154.Panel = __0x5153;

			__0x5153.control = __0x5154;
			__0x5154.Dock = DockStyle.Fill;
			Controls.Add( __0x5153.control );

			
			if( !__0x5190 && __0x5153.control != null )
			{
				__0x5153.control.Visible = false;
				__0x5153.control.Enabled = false;
			}

			return __0x5153;
		}

		void __0x5180( PanelData __0x5191 )
		{
			if( SelectedPanel == __0x5191 )
				SelectedPanel = null;

			var __0x5159 = __0x5191.control;
			__0x5159.Parent.Controls.Remove( __0x5159 );
			__0x5159.Dispose();

			__0x5146.Remove( __0x5191 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5146.Count != 0 )
				__0x5180( __0x5146[ __0x5146.Count - 1 ] );
		}

		public void SelectObjects( object[] objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			
			if( objects.Length != 0 )
			{
				
				PanelData __0x5160 = __0x5177( objects );

				bool __0x5161 = __0x5160 != null && SelectedPanel == __0x5160;
				if( !__0x5161 )
				{
					if( __0x5160 != null )
					{
						
						__0x5146.Remove( __0x5160 );
						__0x5146.Add( __0x5160 );
					}

					
					if( __0x5160 == null )
					{
						
						while( __0x5146.Count >= __0x5144 )
							__0x5180( __0x5146[ 0 ] );

						__0x5160 = __0x5179( objects, true );
						
					}

					SelectedPanel = __0x5160;
				}
			}
			else
				SelectedPanel = null;
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5147; }
			set
			{
				if( __0x5147 == value )
					return;

				var __0x5162 = __0x5147;
				__0x5147 = value;

				if( __0x5147 != null )
				{
					__0x5147.control.Enabled = true;
					__0x5147.control.Visible = true;
					
				}

				if( __0x5162 != null )
				{
					__0x5162.control.Visible = false;
					__0x5162.control.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				

				
			}
		}

		object __0x5181( object __0x5192 )
		{
			var __0x5163 = __0x5192;

			again:;
			if( __0x5163 != null && __0x5178( __0x5163 ) == null )
			{
				var __0x5164 = __0x5163 as Component;
				if( __0x5164 != null )
					__0x5163 = __0x5164.Parent;
				else
					__0x5163 = null;

				goto again;
			}

			return __0x5163;
		}

		void __0x5182()
		{
			var __0x5165 = new List<object>();
			foreach( var __0x5175 in EditorForm.Instance.GetObjectsInFocus().Objects )
			{
				object __0x5166 = null;

				var __0x5167 = __0x5175 as ContentBrowser.Item;
				if( __0x5167 != null )
				{
					if( __0x5167.ContainedObject != null )
						__0x5166 = __0x5167.ContainedObject;
				}
				else
					__0x5166 = __0x5175;

				__0x5166 = __0x5181( __0x5166 );

				if( __0x5166 != null )
					__0x5165.Add( __0x5166 );
			}

			if( __0x5165.Count == 0 )
			{
				var __0x5168 = EditorAPI.SelectedDocumentWindow;
				if( __0x5168 != null )
				{
					var __0x5169 = __0x5181( __0x5168.ObjectOfWindow );
					if( __0x5169 != null )
						__0x5165.Add( __0x5169 );
				}
			}

			while( __0x5165.Count > 1 )
				__0x5165.RemoveAt( __0x5165.Count - 1 );

			SelectObjects( __0x5165.ToArray() );


			

			

			
			
			
			
			
			
			
			
			
			
			

			
		}


		private void __0x5183( object __0x5193, EventArgs __0x5194 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			double __0x5170 = 0.05;
			{
				var __0x5171 = EditorForm.Instance.GetObjectsInFocus().Objects.Length;
				if( __0x5171 > 2000 )
					__0x5170 = 2.0;
				else if( __0x5171 > 500 )
					__0x5170 = 1.0;
				else if( __0x5171 > 250 )
					__0x5170 = 0.5;
				else if( __0x5171 > 100 )
					__0x5170 = 0.1;
				else
					__0x5170 = 0.05;
			}
			if( EngineApp.GetSystemTime() - __0x5148 < __0x5170 )
				return;

			__0x5182();

			__0x5148 = EngineApp.GetSystemTime();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return null;
		}

		public override Vector2I DefaultAutoHiddenSlideSize
		{
			get { return ( new Vector2( 280, 200 ) * EditorAPI.DPIScale ).ToVector2I(); }
		}
	}
}

namespace NeoAxis.Editor
{
    partial class PreviewWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5172 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5172 != null))
            {
                __0x5172.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5184()
        {
			this.__0x5172 = new System.ComponentModel.Container();
			this.__0x5173 = new System.Windows.Forms.Timer(this.__0x5172);
			this.SuspendLayout();
			
			
			
			this.__0x5173.Enabled = true;
			this.__0x5173.Interval = 5;
			this.__0x5173.Tick += new System.EventHandler(this.__0x5183);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "PreviewWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Preview";
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x5173;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Resources Window.
	/// </summary>
	public partial class ResourcesWindow : DockWindow
	{
		public ResourcesWindow()
		{
			__0x5205();

			

			
			
			__0x5202.Init( null, null, null );
			__0x5202.Options.PanelMode = ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally;
			__0x5202.Options.SplitterPosition = 3.0 / 5.0;
			__0x5202.Options.EditorButton = false;
			__0x5202.Options.SettingsButton = false;
			__0x5202.Options.DisplayPropertiesEditorSettingsButtons = false;

			
			

			__0x5203();
			EngineConfig.SaveEvent += __0x5204;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x5202; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( null, __0x5202.SelectedItems );
			
		}

		void __0x5203()
		{
			var __0x5195 = EngineConfig.TextBlock.FindChild( nameof( ResourcesWindow ) );
			if( __0x5195 != null )
			{
				var __0x5196 = __0x5195.FindChild( "ContentBrowser" );
				if( __0x5196 != null )
				{
					ContentBrowser1.Options.Load( __0x5196 );
					
				}
			}
		}

		void __0x5204()
		{
			var __0x5197 = EngineConfig.TextBlock;

			var __0x5198 = __0x5197.FindChild( nameof( ResourcesWindow ) );
			if( __0x5198 != null )
				__0x5197.DeleteChild( __0x5198 );

			var __0x5199 = __0x5197.AddChild( nameof( ResourcesWindow ) );
			var __0x5200 = __0x5199.AddChild( "ContentBrowser" );
			ContentBrowser1.Options.Save( __0x5200 );
			
		}
	}
}


namespace NeoAxis.Editor
{
	partial class ResourcesWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5201 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5201 != null ) )
			{
				__0x5201.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5205()
		{
			this.__0x5202 = new NeoAxis.Editor.ContentBrowser();
			this.SuspendLayout();
			
			
			
			this.__0x5202.CanSelectObjectSettings = false;
			this.__0x5202.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x5202.FilteringMode = null;
			this.__0x5202.Location = new System.Drawing.Point(0, 0);
			this.__0x5202.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x5202.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5202.MultiSelect = true;
			this.__0x5202.Name = "resourcesBrowser1";
			this.__0x5202.ReadOnlyHierarchy = false;
			this.__0x5202.Size = new System.Drawing.Size(416, 596);
			this.__0x5202.TabIndex = 0;
			this.__0x5202.ThisIsSettingsWindow = false;
			this.__0x5202.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x5202.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Controls.Add(this.__0x5202);
			this.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.Name = "ResourcesWindow";
			this.Size = new System.Drawing.Size(416, 596);
			this.WindowTitle = "Resources";
			this.ResumeLayout(false);

		}

		#endregion

		private ContentBrowser __0x5202;
	}
}





namespace NeoAxis.Editor
{
	public static class ResourcesWindowItems
	{
		static List<Item> __0x5206 = new List<Item>();

		static bool __0x5207;
		static List<Item> __0x5208 = new List<Item>();
		static Dictionary<Type, Item> __0x5209 = new Dictionary<Type, Item>();
		static Dictionary<string, string> __0x5210 = new Dictionary<string, string>();

		

		public class Item
		{
			public string Path;
			public Type Type;
			public double SortOrder;
			public bool Disabled;

			public Item( string path, Type type, double sortOrder = 0, bool disabled = false )
			{
				Path = path;
				Type = type;
				SortOrder = sortOrder;
				Disabled = disabled;
			}

			public override string ToString()
			{
				return Path;
			}
		}

		

		public static IReadOnlyList<Item> Items
		{
			get
			{
				__0x5245();
				return __0x5208;
			}
		}

		public static Dictionary<string, string> GroupDescriptions
		{
			get
			{
				__0x5245();
				return __0x5210;
			}
		}

		public static event Action FixItems;

		static void __0x5245()
		{
			if( __0x5207 )
				return;

			__0x5208.Clear();
			__0x5209.Clear();
			__0x5210.Clear();

			__0x5246();
			

			
			CollectionUtility.MergeSort( __0x5206, delegate ( Item __0x5247, Item __0x5248 )
			{
				if( __0x5247.SortOrder < __0x5248.SortOrder )
					return -1;
				if( __0x5247.SortOrder > __0x5248.SortOrder )
					return 1;

				string __0x5211 = __0x5247.Path + " ";
				string __0x5212 = __0x5248.Path + " ";
				return string.Compare( __0x5211, __0x5212 );
			} );
			__0x5208.AddRange( __0x5206 );

			FixItems?.Invoke();

			__0x5207 = true;
		}

		public static void AddItem( Item item )
		{
			__0x5208.Add( item );
			__0x5209[ item.Type ] = item;
		}

		static void __0x5246()
		{
#if !DEPLOY

			
			{
				var __0x5213 = @"Base\Common";
				
				
				AddItem( new Item( __0x5213 + @"\Component", typeof( Component ) ) );
				AddItem( new Item( __0x5213 + @"\Text File", typeof( NewResourceType_TextFile ) ) );

				AddItem( new Item( __0x5213 + @"\Product\Store", typeof( Product_Store ) ) );
				AddItem( new Item( __0x5213 + @"\Product\Windows", typeof( Product_Windows ) ) );
				AddItem( new Item( __0x5213 + @"\Product\Android", typeof( Product_Android ) ) );
				AddItem( new Item( __0x5213 + @"\Product\iOS", typeof( Product_iOS ) ) );
				AddItem( new Item( __0x5213 + @"\Product\UWP", typeof( Product_UWP ) ) );

				
				
				
			}

			
			{
				
				{
					var __0x5214 = @"Base\Scripting";
					AddItem( new Item( __0x5214 + @"\C# File", typeof( NewResourceType_CSharpClass ) ) );
					AddItem( new Item( __0x5214 + @"\C# Script", typeof( CSharpScript ) ) );
					AddItem( new Item( __0x5214 + @"\Flow Graph", typeof( FlowGraph ) ) );
					

					
				}

				
				{
					var __0x5215 = @"Base\Scripting\Metadata";
					AddItem( new Item( __0x5215 + @"\Property", typeof( VirtualProperty ) ) );
					AddItem( new Item( __0x5215 + @"\Method", typeof( VirtualMethod ) ) );
					
					AddItem( new Item( __0x5215 + @"\Member Parameter", typeof( VirtualMemberParameter ) ) );
				}

				
				{
					var __0x5216 = @"Base\Scripting\Flow scripting";
					AddItem( new Item( __0x5216 + @"\Invoke Member", typeof( InvokeMember ) ) );
					AddItem( new Item( __0x5216 + @"\Event Handler", typeof( EventHandlerComponent ) ) );
					AddItem( new Item( __0x5216 + @"\Declare Variable", typeof( FlowDeclareVariable ) ) );
					AddItem( new Item( __0x5216 + @"\Set Variable", typeof( FlowSetVariable ) ) );
					AddItem( new Item( __0x5216 + @"\If", typeof( FlowIf ) ) );
					AddItem( new Item( __0x5216 + @"\Switch", typeof( FlowSwitch ) ) );
					AddItem( new Item( __0x5216 + @"\While", typeof( FlowWhile ) ) );
					AddItem( new Item( __0x5216 + @"\Do While", typeof( FlowDoWhile ) ) );
					AddItem( new Item( __0x5216 + @"\Do Number", typeof( FlowDoNumber ) ) );
					AddItem( new Item( __0x5216 + @"\For Each", typeof( FlowForEach ) ) );
					AddItem( new Item( __0x5216 + @"\For", typeof( FlowFor ) ) );
					AddItem( new Item( __0x5216 + @"\Sequence", typeof( FlowSequence ) ) );
					AddItem( new Item( __0x5216 + @"\Flow Start", typeof( FlowStart ) ) );
					AddItem( new Item( __0x5216 + @"\Convert To", typeof( FlowConvertTo ) ) );
					AddItem( new Item( __0x5216 + @"\Sleep", typeof( FlowSleep ) ) );
				}

				
				{
					var __0x5217 = @"Base\Scripting\Shader scripting";
					AddItem( new Item( __0x5217 + @"\Shader Script", typeof( ShaderScript ) ) );
				}

				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				

				
				
				
				
				
				

			}

			
			{
				{
					var __0x5218 = @"Base\UI";
					AddItem( new Item( __0x5218 + @"\Control", typeof( UIControl ) ) );
					AddItem( new Item( __0x5218 + @"\Window", typeof( UIWindow ) ) );
					AddItem( new Item( __0x5218 + @"\Text", typeof( UIText ) ) );
					AddItem( new Item( __0x5218 + @"\Image", typeof( UIImage ) ) );
					AddItem( new Item( __0x5218 + @"\Button", typeof( UIButton ) ) );
					AddItem( new Item( __0x5218 + @"\Check", typeof( UICheck ) ) );
					AddItem( new Item( __0x5218 + @"\Edit", typeof( UIEdit ) ) );
					AddItem( new Item( __0x5218 + @"\Slider", typeof( UISlider ) ) );
					AddItem( new Item( __0x5218 + @"\Progress", typeof( UIProgress ) ) );
					AddItem( new Item( __0x5218 + @"\Scroll", typeof( UIScroll ) ) );
					AddItem( new Item( __0x5218 + @"\Combo", typeof( UICombo ) ) );
					AddItem( new Item( __0x5218 + @"\List", typeof( UIList ) ) );
					
					AddItem( new Item( __0x5218 + @"\Video", typeof( UIVideo ) ) );
					AddItem( new Item( __0x5218 + @"\Web Browser", typeof( UIWebBrowser ) ) );
					AddItem( new Item( __0x5218 + @"\Render Target", typeof( UIRenderTarget ) ) );
					
				}

				
				{
					var __0x5219 = @"Base\UI\Containers";
					AddItem( new Item( __0x5219 + @"\Tab Control", typeof( UITabControl ) ) );
					
					AddItem( new Item( __0x5219 + @"\Grid", typeof( UIGrid ) ) );
					AddItem( new Item( __0x5219 + @"\Toolbar", typeof( UIToolbar ) ) );
				}

				
				{
					var __0x5220 = @"Base\UI\More";
					AddItem( new Item( __0x5220 + @"\Style", typeof( UIStyle ) ) );
					AddItem( new Item( __0x5220 + @"\Tooltip", typeof( UITooltip ) ) );
				}
			}

			
			{
				var __0x5221 = @"Base\Scene common";
				AddItem( new Item( __0x5221 + @"\Scene", typeof( Scene ) ) );
				AddItem( new Item( __0x5221 + @"\Material", typeof( Material ) ) );
				AddItem( new Item( __0x5221 + @"\Surface", typeof( Surface ) ) );
				AddItem( new Item( __0x5221 + @"\Image", typeof( ImageComponent ) ) );
				AddItem( new Item( __0x5221 + @"\Mesh", typeof( Mesh ) ) );
				AddItem( new Item( __0x5221 + @"\Mesh In Space Animation Controller", typeof( MeshInSpaceAnimationController ) ) );
				AddItem( new Item( __0x5221 + @"\Paint Layer", typeof( PaintLayer ) ) );
				AddItem( new Item( __0x5221 + @"\Rendering Pipeline Basic", typeof( RenderingPipeline_Basic ) ) );
			}

			
			{
				var __0x5222 = @"Base\Scene objects";

				AddItem( new Item( __0x5222 + @"\Object In Space", typeof( ObjectInSpace ) ) );
				AddItem( new Item( __0x5222 + @"\Group Of Objects", typeof( GroupOfObjects ) ) );
				AddItem( new Item( __0x5222 + @"\Layer", typeof( Layer ) ) );
				AddItem( new Item( __0x5222 + @"\Skybox", typeof( Skybox ) ) );
				AddItem( new Item( __0x5222 + @"\Fog", typeof( Fog ) ) );
				AddItem( new Item( __0x5222 + @"\Terrain", typeof( Terrain ) ) );
				
				
				
				AddItem( new Item( __0x5222 + @"\Light", typeof( Light ) ) );
				AddItem( new Item( __0x5222 + @"\Lens Flares", typeof( LensFlares ) ) );
				AddItem( new Item( __0x5222 + @"\Camera", typeof( Camera ) ) );
				AddItem( new Item( __0x5222 + @"\Billboard", typeof( Billboard ) ) );
				AddItem( new Item( __0x5222 + @"\Decal", typeof( Decal ) ) );
				AddItem( new Item( __0x5222 + @"\Reflection Probe", typeof( ReflectionProbe ) ) );
				AddItem( new Item( __0x5222 + @"\Sound Source", typeof( SoundSource ) ) );
				
				
				AddItem( new Item( __0x5222 + @"\Additional\Curve In Space", typeof( CurveInSpace ) ) );
				AddItem( new Item( __0x5222 + @"\Additional\Curve In Space Objects", typeof( CurveInSpaceObjects ) ) );
			}

			
			{
				var __0x5223 = @"Base\Primitives";

				AddItem( new Item( __0x5223 + @"\Arch", typeof( MeshGeometry_Arch ) ) );
				AddItem( new Item( __0x5223 + @"\Box", typeof( MeshGeometry_Box ) ) );
				AddItem( new Item( __0x5223 + @"\Capsule", typeof( MeshGeometry_Capsule ) ) );
				AddItem( new Item( __0x5223 + @"\Cone", typeof( MeshGeometry_Cone ) ) );
				AddItem( new Item( __0x5223 + @"\Cylinder", typeof( MeshGeometry_Cylinder ) ) );
				AddItem( new Item( __0x5223 + @"\Door", typeof( MeshGeometry_Door ) ) );
				AddItem( new Item( __0x5223 + @"\Pipe", typeof( MeshGeometry_Pipe ) ) );
				AddItem( new Item( __0x5223 + @"\Plane", typeof( MeshGeometry_Plane ) ) );
				AddItem( new Item( __0x5223 + @"\Prism", typeof( MeshGeometry_Prism ) ) );
				AddItem( new Item( __0x5223 + @"\Sphere", typeof( MeshGeometry_Sphere ) ) );
				AddItem( new Item( __0x5223 + @"\Stairs", typeof( MeshGeometry_Stairs ) ) );
				AddItem( new Item( __0x5223 + @"\Torus", typeof( MeshGeometry_Torus ) ) );
				AddItem( new Item( __0x5223 + @"\Polygon Based Polyhedron", typeof( MeshGeometry_PolygonBasedPolyhedron ) ) );
			}

			
			{
				var __0x5224 = @"Base\Physics";

				AddItem( new Item( __0x5224 + @"\Rigid Body", typeof( RigidBody ) ) );

				AddItem( new Item( __0x5224 + @"\Box Shape", typeof( CollisionShape_Box ) ) );
				AddItem( new Item( __0x5224 + @"\Sphere Shape", typeof( CollisionShape_Sphere ) ) );
				AddItem( new Item( __0x5224 + @"\Cylinder Shape", typeof( CollisionShape_Cylinder ) ) );
				AddItem( new Item( __0x5224 + @"\Cone Shape", typeof( CollisionShape_Cone ) ) );
				AddItem( new Item( __0x5224 + @"\Capsule Shape", typeof( CollisionShape_Capsule ) ) );
				AddItem( new Item( __0x5224 + @"\Mesh Shape", typeof( CollisionShape_Mesh ) ) );
				AddItem( new Item( __0x5224 + @"\Physical Material", typeof( PhysicalMaterial ) ) );
				
				AddItem( new Item( __0x5224 + @"\Constraint", typeof( Constraint ) ) );
				
				
				
			}

			
			{
				var __0x5225 = @"Base\Particles";
				AddItem( new Item( __0x5225 + @"\Particle System", typeof( ParticleSystem ) ) );
				AddItem( new Item( __0x5225 + @"\Particle Emitter", typeof( ParticleEmitter ) ) );

				var __0x5226 = @"Base\Particles\Shapes";
				AddItem( new Item( __0x5226 + @"\Box Shape", typeof( ParticleEmitterShape_Box ) ) );
				AddItem( new Item( __0x5226 + @"\Point Shape", typeof( ParticleEmitterShape_Point ) ) );
				AddItem( new Item( __0x5226 + @"\Sphere Shape", typeof( ParticleEmitterShape_Sphere ) ) );
				AddItem( new Item( __0x5226 + @"\Cylinder Shape", typeof( ParticleEmitterShape_Cylinder ) ) );
				AddItem( new Item( __0x5226 + @"\Custom Shape", typeof( ParticleEmitterShape ) ) );

				var __0x5227 = @"Base\Particles\Modules";
				AddItem( new Item( __0x5227 + @"\Size Multiplier By Time", typeof( ParticleSizeMultiplierByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Color Multiplier By Time", typeof( ParticleColorMultiplierByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Linear Acceleration By Time", typeof( ParticleLinearAccelerationByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Linear Velocity By Time", typeof( ParticleLinearVelocityByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Linear Speed Multiplier By Time", typeof( ParticleLinearSpeedMultiplierByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Angular Acceleration By Time", typeof( ParticleAngularAccelerationByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Angular Velocity By Time", typeof( ParticleAngularVelocityByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Angular Speed Multiplier By Time", typeof( ParticleAngularSpeedMultiplierByTime ) ) );
				AddItem( new Item( __0x5227 + @"\Custom Module", typeof( ParticleModuleCustom ) ) );
			}

			
			{
				{
					var __0x5228 = @"Base\Screen effects";

					var __0x5229 = new List<(string, string)>();
					__0x5229.Add( ("Bloom", "RenderingEffect_Bloom") );
					__0x5229.Add( ("Bokeh Blur", "RenderingEffect_BokehBlur") );
					__0x5229.Add( ("Chromatic Aberration", "RenderingEffect_ChromaticAberration") );
					__0x5229.Add( ("Color Grading", "RenderingEffect_ColorGrading") );
					__0x5229.Add( ("Depth Of Field", "RenderingEffect_DepthOfField") );
					__0x5229.Add( ("Edge Detection", "RenderingEffect_EdgeDetection") );
					__0x5229.Add( ("Gaussian Blur", "RenderingEffect_GaussianBlur") );
					__0x5229.Add( ("Grayscale", "RenderingEffect_Grayscale") );
					__0x5229.Add( ("Indirect Lighting", "RenderingEffect_IndirectLighting") );
					__0x5229.Add( ("Light Shafts", "RenderingEffect_LightShafts") );
					__0x5229.Add( ("Noise", "RenderingEffect_Noise") );
					__0x5229.Add( ("Outline", "RenderingEffect_Outline") );
					__0x5229.Add( ("Pixelate", "RenderingEffect_Pixelate") );
					__0x5229.Add( ("Posterize", "RenderingEffect_Posterize") );
					__0x5229.Add( ("Radial Blur", "RenderingEffect_RadialBlur") );
					__0x5229.Add( ("Reflection", "RenderingEffect_Reflection") );
					__0x5229.Add( ("Vignetting", "RenderingEffect_Vignetting") );

					foreach( var __0x5239 in __0x5229 )
					{
						var __0x5230 = MetadataManager.GetType( "NeoAxis." + __0x5239.Item2 );
						if( __0x5230 != null )
							AddItem( new Item( __0x5228 + "\\" + __0x5239.Item1, __0x5230.GetNetType() ) );
					}
				}

				{
					var __0x5231 = @"Base\Screen effects\Added by default";

					var __0x5232 = new List<(string, string)>();
					__0x5232.Add( ("Ambient Occlusion", "RenderingEffect_AmbientOcclusion") );
					__0x5232.Add( ("Antialiasing", "RenderingEffect_Antialiasing") );
					__0x5232.Add( ("Lens Effects", "RenderingEffect_LensEffects") );
					__0x5232.Add( ("Motion Blur", "RenderingEffect_MotionBlur") );
					__0x5232.Add( ("Resolution Upscale", "RenderingEffect_ResolutionUpscale") );
					__0x5232.Add( ("Sharpen", "RenderingEffect_Sharpen") );
					__0x5232.Add( ("To LDR", "RenderingEffect_ToLDR") );
					__0x5232.Add( ("Tone Mapping", "RenderingEffect_ToneMapping") );

					foreach( var __0x5240 in __0x5232 )
					{
						var __0x5233 = MetadataManager.GetType( "NeoAxis." + __0x5240.Item2 );
						if( __0x5233 != null )
							AddItem( new Item( __0x5231 + "\\" + __0x5240.Item1, __0x5233.GetNetType() ) );
					}
				}

				{
					var __0x5234 = @"Base\Screen effects\Special";

					var __0x5235 = new List<(string, string)>();
					__0x5235.Add( ("Script", "RenderingEffect_Script") );
					__0x5235.Add( ("Show Render Target", "RenderingEffect_ShowRenderTarget") );

					foreach( var __0x5241 in __0x5235 )
					{
						var __0x5236 = MetadataManager.GetType( "NeoAxis." + __0x5241.Item2 );
						if( __0x5236 != null )
							AddItem( new Item( __0x5234 + "\\" + __0x5241.Item1, __0x5236.GetNetType() ) );
					}
				}
			}

#endif
				}

				
				
				
				
				
				
				


				
				

				internal static void RegisterAssembly( Type[] exportedTypes )
		{
			var __0x5237 = new List<Item>();
			foreach( var __0x5242 in exportedTypes )
			{
				foreach( var __0x5243 in __0x5242.GetCustomAttributes<AddToResourcesWindowAttribute>() )
					__0x5237.Add( new Item( __0x5243.Path, __0x5242, __0x5243.SortOrder, __0x5243.Disabled ) );
			}
			__0x5206.AddRange( __0x5237 );

			if( __0x5237.Count != 0 )
				__0x5207 = false;
		}

		internal static void UnregisterAssembly( Assembly assembly )
		{
			var __0x5238 = new List<Item>();

			foreach( var __0x5244 in __0x5206 )
			{
				if( __0x5244.Type.Assembly != assembly )
					__0x5238.Add( __0x5244 );
			}

			if( __0x5238.Count != __0x5206.Count )
				__0x5207 = false;

			__0x5206 = __0x5238;
		}

		public static Item GetItemByPath( string path )
		{
			return Items.FirstOrDefault( __0x5249 => __0x5249.Path == path );
		}

		public static Item GetItemByType( Type type )
		{
			__0x5245();

			__0x5209.TryGetValue( type, out var item );
			return item;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class RunSimulation
	{
		static List<Metadata.TypeInfo> __0x5250 = new List<Metadata.TypeInfo>();
		

		

		public enum RunMethod
		{
			DocumentWindowEditorProcess,
			
			

			Player,

			
			
		}

		

		static RunSimulation()
		{
			__0x5250.Add( MetadataManager.GetTypeOfNetType( typeof( Scene ) ) );
			__0x5250.Add( MetadataManager.GetTypeOfNetType( typeof( UIControl ) ) );
			
			
		}

		public static List<Metadata.TypeInfo> SupportedTypesByPlayer
		{
			get { return __0x5250; }
		}

		public static bool CheckTypeSupportedByPlayer( Metadata.TypeInfo type )
		{
			foreach( var __0x5255 in __0x5250 )
				if( __0x5255.IsAssignableFrom( type ) )
					return true;
			return false;
		}

		public static void Run( string realFileName, RunMethod runMethod )
		{
			string __0x5251 = Path.Combine( VirtualFileSystem.Directories.Binaries, "NeoAxis.Player.exe" );

			string __0x5252 = "";

			if( ProjectSettings.Get.General.RunSimulationInFullscreen.Value )
				__0x5252 += "-fullscreen 1";
			else
				__0x5252 += "-windowed 1";

			if( !string.IsNullOrEmpty( realFileName ) )
				__0x5252 += string.Format( " -play \"{0}\"", realFileName );

			Process.Start( __0x5251, __0x5252 );
		}

		public static void RunRenderVideoToFile( string realFileName, string destRealFileName, RunMethod runMethod, int framesPerSecond, double length, string camera, string renderingPipeline, Vector2I resolution, string format )
		{
			string __0x5253 = Path.Combine( VirtualFileSystem.Directories.Binaries, "NeoAxis.Player.exe" );

			string __0x5254 = "";

			
			
			__0x5254 += "-fullscreen 1";
			
			

			if( !string.IsNullOrEmpty( realFileName ) )
				__0x5254 += string.Format( " -play \"{0}\"", realFileName );

			__0x5254 += string.Format( " -renderVideoToFile \"{0}\"", destRealFileName );
			__0x5254 += string.Format( " -framesPerSecond {0}", framesPerSecond );
			__0x5254 += string.Format( " -length {0}", length );
			if( !string.IsNullOrEmpty( camera ) )
				__0x5254 += string.Format( " -camera \"{0}\"", camera );
			if( !string.IsNullOrEmpty( renderingPipeline ) )
				__0x5254 += string.Format( " -renderingPipeline \"{0}\"", renderingPipeline );
			__0x5254 += string.Format( " -resolution \"{0}\"", resolution.ToString() );
			__0x5254 += string.Format( " -format \"{0}\"", format );

			Process.Start( __0x5253, __0x5254 );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a window for selection type.
	/// </summary>
	public partial class SelectTypeWindow : DockWindow
	{
		public CreationDataClass creationData;

		Metadata.TypeInfo __0x5256;
		bool __0x5257;

		

		public class CreationDataClass
		{
			public DocumentWindow initDocumentWindow;
			public Metadata.TypeInfo initDemandedType;
			public bool initCanSelectNull;
			public bool initCanSelectAbstractClass;

			public delegate void WasSelectedDelegate( SelectTypeWindow __0x5283, Metadata.TypeInfo __0x5284, ref bool __0x5285 );
			public WasSelectedDelegate WasSelected;
		}

		

		public SelectTypeWindow()
		{
			__0x5282();

			WindowTitle = EditorLocalization.Translate( "SelectTypeWindow", WindowTitle );
			EditorLocalization.TranslateForm( "SelectTypeWindow", this );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5270();
			__0x5275();
			__0x5268.Start();
		}

		void __0x5270()
		{
			var __0x5258 = new ContentBrowser.SetReferenceModeDataClass();
			__0x5258.demandedType = MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) );

			
			
			
			
			

			

			__0x5258.allowNull = creationData.initCanSelectNull;
			__0x5258.selectTypeWindow = true;
			__0x5258.selectTypeDemandedType = creationData.initDemandedType;
			__0x5258.selectTypeWindowCanSelectAbstractClass = creationData.initCanSelectAbstractClass;

			__0x5267.Init( creationData.initDocumentWindow, null, __0x5258 );
			__0x5267.UpdateData();
		}

		[Browsable( false )]
		public CreationDataClass CreationData
		{
			get { return creationData; }
		}

		[Browsable( false )]
		public Metadata.TypeInfo SelectedType
		{
			get { return __0x5256; }
		}

		[Browsable( false )]
		public bool SelectedTypeCanSelect
		{
			get { return __0x5257; }
		}

		void __0x5271()
		{
			Metadata.TypeInfo __0x5259 = null;
			bool __0x5260 = false;

			ContentBrowser.Item __0x5261 = null;
			if( __0x5267.SelectedItems.Length != 0 )
				__0x5261 = __0x5267.SelectedItems[ 0 ];

			if( __0x5261 != null )
			{
				__0x5261.CalculateReferenceValue( null, MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ),
					out string referenceValue, out bool canSet );

				if( canSet )
				{
					if( !string.IsNullOrEmpty( referenceValue ) )
					{
						__0x5259 = (Metadata.TypeInfo)MetadataManager.GetValueByReference(
							__0x5267.SetReferenceModeData.demandedType.GetNetType(), null, referenceValue );
						__0x5260 = true;
					}
					else
						__0x5260 = true;
				}

				
				if( __0x5259 != null && !creationData.initDemandedType.IsAssignableFrom( __0x5259 ) )
				{
					__0x5259 = null;
					__0x5260 = false;
				}
			}

			
			if( __0x5256 != __0x5259 || __0x5257 != __0x5260 )
			{
				__0x5256 = __0x5259;
				__0x5257 = __0x5260;
				__0x5275();
			}
		}

		private void __0x5272( ContentBrowser __0x5286, IList<ContentBrowser.Item> __0x5287, bool __0x5288, ref bool __0x5289 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5271();
		}

		private void __0x5273( ContentBrowser __0x5290, ContentBrowser.Item __0x5291, ref bool __0x5292 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5274() )
				return;
			__0x5277( null, null );
		}

		bool __0x5274()
		{
			

			if( !creationData.initCanSelectNull && __0x5256 == null )
				return false;

			return __0x5257;
		}

		void __0x5275()
		{
			__0x5276();
		}

		void __0x5276()
		{
			__0x5265.Enabled = __0x5274();
		}

		private void __0x5277( object __0x5293, EventArgs __0x5294 )
		{
			if( !__0x5279() )
				return;

			Close();
		}

		private void __0x5278( object __0x5295, EventArgs __0x5296 )
		{
			Close();
		}

		bool __0x5279()
		{
			bool __0x5262 = false;
			creationData.WasSelected?.Invoke( this, __0x5256, ref __0x5262 );
			if( __0x5262 )
				return false;
			return true;
		}

		private void __0x5280( object __0x5297, EventArgs __0x5298 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x5271();

			__0x5276();
		}

		ContentBrowser.Item __0x5281( Metadata.TypeInfo __0x5299 )
		{
			

			

			foreach( var __0x5269 in __0x5267.Items )
			{
				var __0x5263 = __0x5269 as ContentBrowserItem_Type;
				if( __0x5263 != null )
				{
					if( __0x5263.type == __0x5299 )
						return __0x5269;
				}
			}
			return null;
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x5267.DocumentWindow, __0x5267.GetSelectedContainedObjects() );
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SelectTypeWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5264 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x5264 != null ) )
            {
                __0x5264.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5282()
        {
			this.__0x5264 = new System.ComponentModel.Container();
			this.__0x5265 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5266 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5267 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5268 = new System.Windows.Forms.Timer(this.__0x5264);
			this.SuspendLayout();
			
			
			
			this.__0x5265.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5265.Location = new System.Drawing.Point(236, 529);
			this.__0x5265.Name = "buttonSelect";
			this.__0x5265.Size = new System.Drawing.Size(147, 32);
			this.__0x5265.TabIndex = 1;
			this.__0x5265.Values.Text = "Select";
			this.__0x5265.Click += new System.EventHandler(this.__0x5277);
			
			
			
			this.__0x5266.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5266.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5266.Location = new System.Drawing.Point(389, 529);
			this.__0x5266.Name = "buttonCancel";
			this.__0x5266.Size = new System.Drawing.Size(147, 32);
			this.__0x5266.TabIndex = 2;
			this.__0x5266.Values.Text = "Cancel";
			this.__0x5266.Click += new System.EventHandler(this.__0x5278);
			
			
			
			this.__0x5267.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5267.CanSelectObjectSettings = false;
			this.__0x5267.FilteringMode = null;
			this.__0x5267.Location = new System.Drawing.Point(12, 4);
			this.__0x5267.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5267.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x5267.Name = "contentBrowser1";
			this.__0x5267.ReadOnlyHierarchy = false;
			this.__0x5267.Size = new System.Drawing.Size(523, 514);
			this.__0x5267.TabIndex = 0;
			this.__0x5267.ThisIsSettingsWindow = false;
			this.__0x5267.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x5272);
			this.__0x5267.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x5273);
			
			
			
			this.__0x5268.Interval = 50;
			this.__0x5268.Tick += new System.EventHandler(this.__0x5280);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x5266);
			this.Controls.Add(this.__0x5265);
			this.Controls.Add(this.__0x5267);
			this.Name = "SelectTypeWindow";
			this.Size = new System.Drawing.Size(549, 573);
			this.WindowTitle = "Select Type";
			this.ResumeLayout(false);

        }

        #endregion

        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5265;
        private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5266;
		private ContentBrowser __0x5267;
		private System.Windows.Forms.Timer __0x5268;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a window for selection reference value.
	/// </summary>
	public partial class SetReferenceWindow : DockWindow
	{
		public DocumentWindow documentWindow;
		public ContentBrowser.SetReferenceModeDataClass setReferenceModeData;

		bool __0x5300;

		bool __0x5301 = true;

		bool __0x5302;
		
		string __0x5303;
		bool __0x5304;

		Color? __0x5305;

		

		public SetReferenceWindow()
		{
			__0x5374();

			WindowTitle = EditorLocalization.Translate( "SetReferenceWindow", WindowTitle );
			EditorLocalization.TranslateForm( "SetReferenceWindow", this );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				__0x5300 = true;
				__0x5358( out var selected );
				__0x5300 = false;

				if( selected )
				{
					__0x5366();
				}
				else
				{
					if( __0x5357( out var reference ) )
					{
						__0x5349.Text = reference;

						__0x5373( true );
						__0x5349.Select();
					}
				}

				if( !__0x5302 )
					__0x5360();
				__0x5365();

				__0x5347.Start();
			}
		}

		/// <summary>
		/// Getting from only created items. Not all _Member items can be created (expanded).
		/// </summary>
		/// <param name="__0x5375"></param>
		/// <returns></returns>
		ContentBrowser.Item __0x5355( string __0x5375 )
		{
			

			

			
			if( string.IsNullOrEmpty( __0x5375 ) )
			{
				foreach( var __0x5351 in __0x5345.Items )
				{
					if( __0x5351 is ContentBrowserItem_Null )
						return __0x5351;
				}
				return null;
			}

			foreach( var __0x5352 in __0x5345.Items )
			{
				__0x5352.CalculateReferenceValue( setReferenceModeData.selectedComponents[ 0 ], setReferenceModeData.property.TypeUnreferenced,
					out string itemReferenceValue, out bool itemCanSet );

				if( ReferenceUtility.EqualsReferences( itemReferenceValue, __0x5375 ) )
					return __0x5352;
			}

			return null;
		}

		bool __0x5356( string __0x5376, bool __0x5377 )
		{
			

			var __0x5306 = __0x5355( __0x5376 );
			if( __0x5306 == null && !string.IsNullOrEmpty( __0x5376 ) )
			{
				

				
				List<string> __0x5307 = new List<string>();
				{
					string __0x5308 = __0x5376;

					again:;

					int __0x5309 = __0x5308.LastIndexOfAny( new char[] { '\\', '/', '|' } );
					if( __0x5309 != -1 )
					{
						var __0x5310 = __0x5308.Substring( 0, __0x5309 );
						if( !string.IsNullOrEmpty( __0x5310 ) )
						{
							__0x5308 = __0x5310;
							__0x5307.Add( __0x5308 );
							goto again;
						}
					}
				}

				
				foreach( var __0x5353 in __0x5307.GetReverse() )
				{
					var __0x5311 = __0x5355( __0x5353 );
					if( __0x5311 != null )
					{
						__0x5345.SelectItems( new ContentBrowser.Item[] { __0x5311 }, true );

						
						
					}
				}

				
				__0x5306 = __0x5355( __0x5376 );
			}

			if( __0x5306 != null )
				__0x5345.SelectItems( new ContentBrowser.Item[] { __0x5306 }, __0x5377 );

			return __0x5306 != null;
		}

		bool __0x5357( out string __0x5378 )
		{
			if( setReferenceModeData.propertyOwners.Length != 0 )
			{
				
				var __0x5312 = setReferenceModeData.propertyOwners[ 0 ];

				try
				{
					var __0x5313 = setReferenceModeData.property.GetValue( __0x5312, setReferenceModeData.propertyIndexes );
					if( __0x5313 != null )
					{
						var __0x5314 = __0x5313 as IReference;
						if( __0x5314 != null )
						{
							__0x5378 = __0x5314.GetByReference;
							if( __0x5378 == null )
								__0x5378 = "";

							return true;
						}
					}
				}
				catch { }
			}

			__0x5378 = "";
			return false;
		}

		void __0x5358( out bool __0x5379 )
		{
			__0x5379 = false;

			__0x5345.Init( documentWindow, null, setReferenceModeData );
			__0x5345.UpdateData();

			if( __0x5357( out var reference ) )
			{
				
				
				
				if( ReferenceUtility.ConvertRelativePathToResource( reference, setReferenceModeData.selectedComponents[ 0 ], out var reference2 ) )
				{
					reference = reference2;
					__0x5350.Checked = true;
				}

				bool __0x5315 = false;

				
				if( string.IsNullOrEmpty( reference ) )
				{
					if( setReferenceModeData.propertyOwners.Length != 0 )
					{
						
						var __0x5316 = setReferenceModeData.propertyOwners[ 0 ];

						var __0x5317 = __0x5316 as Component;
						if( __0x5317 != null )
						{
							var __0x5318 = ComponentUtility.GetOwnedFileNameOfComponent( __0x5317 );
							if( !string.IsNullOrEmpty( __0x5318 ) )
							{
								try
								{
									reference = Path.GetDirectoryName( __0x5318 );
									__0x5315 = true;
								}
								catch { }
							}
						}
					}
				}

				try
				{
					__0x5379 = __0x5356( reference, __0x5315 );
				}
				catch { }
			}

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
		}

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return documentWindow; }
		}

		[Browsable( false )]
		public ContentBrowser.SetReferenceModeDataClass SetReferenceModeData
		{
			get { return setReferenceModeData; }
		}

		[Browsable( false )]
		public string SelectedReference
		{
			get { return __0x5303; }
		}

		[Browsable( false )]
		public bool SelectedReferenceCanSet
		{
			get { return __0x5304; }
		}

		static int __0x5359( IList<string> __0x5380 )
		{
			var __0x5319 = __0x5380.Min( __0x5381 => __0x5381.Length );
			int __0x5320;
			for( __0x5320 = 0; __0x5320 < __0x5319; __0x5320++ )
			{
				if( __0x5380.Select( __0x5382 => __0x5382[ __0x5320 ] ).Distinct().Count() > 1 )
					break;
			}
			return __0x5320;
			
		}

		void __0x5360()
		{
			

			
			ContentBrowser.Item __0x5321 = null;
			if( __0x5345.SelectedItems.Length != 0 )
				__0x5321 = __0x5345.SelectedItems[ 0 ];

			string __0x5322 = null;
			bool __0x5323 = false;

			if( __0x5321 != null )
			{
				

				__0x5321.CalculateReferenceValue( setReferenceModeData.selectedComponents[ 0 ], setReferenceModeData.property.TypeUnreferenced, out __0x5322, out __0x5323 );

				
				if( __0x5350.Checked && !string.IsNullOrEmpty( __0x5322 ) )
				{
					if( !__0x5322.Contains( ':' ) )
					{
						var __0x5324 = ComponentUtility.GetOwnedFileNameOfComponent( setReferenceModeData.selectedComponents[ 0 ] );
						var __0x5325 = "";
						if( !string.IsNullOrEmpty( __0x5324 ) )
							__0x5325 = Path.GetDirectoryName( __0x5324 );

						int __0x5326 = __0x5359( new string[] { __0x5325, __0x5322 } );

						var __0x5327 = "";

						
						{
							var __0x5328 = __0x5325.Substring( __0x5326 ).Split( new char[] { '\\', '/' }, StringSplitOptions.RemoveEmptyEntries ).Length;
							for( int __0x5329 = 0; __0x5329 < __0x5328; __0x5329++ )
								__0x5327 = Path.Combine( __0x5327, ".." );
						}

						
						{
							var __0x5330 = __0x5322.Substring( __0x5326 );
							if( __0x5330.Length != 0 && ( __0x5330[ 0 ] == '\\' || __0x5330[ 0 ] == '/' ) )
								__0x5330 = __0x5330.Substring( 1 );

							
							if( __0x5327.Length != 0 && __0x5327[ __0x5327.Length - 1 ] != '\\' && __0x5327[ __0x5327.Length - 1 ] != '/' )
								__0x5327 += "\\";
							__0x5327 += __0x5330;
							
						}

						__0x5322 = "relative:" + __0x5327;
					}
				}
			}

			
			__0x5303 = __0x5322;
			__0x5304 = __0x5323;
			__0x5365();
			__0x5366();
			__0x5373( false );
			
			
			
			
			
			
			
		}

		private void __0x5361( ContentBrowser __0x5383, IList<ContentBrowser.Item> __0x5384, bool __0x5385, ref bool __0x5386 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5300 )
			{
				__0x5302 = false;
				__0x5360();
			}
		}

		private void __0x5362( ContentBrowser __0x5387, ContentBrowser.Item __0x5388, ref bool __0x5389 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5364() )
				return;
			__0x5368( null, null );
		}

		string __0x5363( Metadata.TypeInfo __0x5390 )
		{
			

			var __0x5331 = __0x5390.GetNetType().GetCustomAttributes( typeof( ResourceFileExtensionAttribute ), true );
			if( __0x5331.Length != 0 )
			{
				var __0x5332 = (ResourceFileExtensionAttribute)__0x5331[ 0 ];
				return __0x5332.Extension;
			}

			
			return "UNKNOWN";
		}

		bool __0x5364()
		{
			

			if( SelectedReference == null )
				return false;
			if( !SelectedReferenceCanSet )
				return false;

			return true;
		}

		void __0x5365()
		{
			__0x5343.Enabled = __0x5364();
			__0x5346.Enabled = __0x5343.Enabled;
		}

		void __0x5366()
		{
			__0x5301 = false;
			__0x5349.Text = SelectedReference;
			__0x5301 = true;

			
			
			
			
		}

		private void __0x5367( object __0x5391, EventArgs __0x5392 )
		{
			if( !__0x5370() )
				return;
		}

		private void __0x5368( object __0x5393, EventArgs __0x5394 )
		{
			if( !__0x5370() )
				return;

			Close();
		}

		private void __0x5369( object __0x5395, EventArgs __0x5396 )
		{
			Close();
		}

		bool __0x5370()
		{
			
			

			string __0x5333 = SelectedReference;

			var __0x5334 = setReferenceModeData.property.Type.GetNetType();
			var __0x5335 = ReferenceUtility.GetUnderlyingType( __0x5334 );

			List<UndoActionPropertiesChange.Item> __0x5336 = null;
			if( documentWindow != null )
				__0x5336 = new List<UndoActionPropertiesChange.Item>();


			

			foreach( var __0x5354 in setReferenceModeData.propertyOwners )
			{
				
				
				var __0x5337 = setReferenceModeData.property.GetValue( __0x5354, setReferenceModeData.propertyIndexes );

				object __0x5338 = null;
				if( __0x5333 == "" )
				{
					

					var __0x5339 = ReferenceUtility.GetUnreferencedValue( __0x5337 );
					
					if( __0x5339 as Component != null )
						__0x5339 = null;

					__0x5338 = ReferenceUtility.MakeReference( __0x5335, __0x5339, "" );
				}
				else
					__0x5338 = ReferenceUtility.MakeReference( __0x5335, null, __0x5333 );

				setReferenceModeData.property.SetValue( __0x5354, __0x5338, setReferenceModeData.propertyIndexes );

				if( __0x5336 != null )
				{
					var __0x5340 = new UndoActionPropertiesChange.Item( __0x5354, setReferenceModeData.property, __0x5337, setReferenceModeData.propertyIndexes );
					__0x5336.Add( __0x5340 );
				}
			}

			
			if( __0x5336 != null && __0x5336.Count != 0 )
			{
				var __0x5341 = new UndoActionPropertiesChange( __0x5336.ToArray() );
				documentWindow.Document.UndoSystem.CommitAction( __0x5341 );
				documentWindow.Document.Modified = true;
			}

			return true;
		}

		private void __0x5371( object __0x5397, EventArgs __0x5398 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			if( !__0x5302 )
				__0x5360();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x5345.DocumentWindow, __0x5345.GetSelectedContainedObjects() );
		}

		private void __0x5372( object __0x5399, EventArgs __0x5400 )
		{
			if( __0x5301 )
			{
				__0x5302 = true;
				__0x5303 = __0x5349.Text;
				__0x5304 = true;
				__0x5365();
			}
		}

		void __0x5373( bool __0x5401 )
		{
			if( __0x5305 == null )
				__0x5305 = __0x5349.StateCommon.Border.Color1;

			if( __0x5401 )
				__0x5349.StateCommon.Border.Color1 = Color.Red; 
			else
				__0x5349.StateCommon.Border.Color1 = __0x5305.Value;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SetReferenceWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5342 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5342 != null ) )
			{
				__0x5342.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5374()
		{
			this.__0x5342 = new System.ComponentModel.Container();
			this.__0x5343 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5344 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5345 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5346 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5347 = new System.Windows.Forms.Timer(this.__0x5342);
			this.__0x5348 = new NeoAxis.Editor.EngineLabel();
			this.__0x5349 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x5350 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.SuspendLayout();
			
			
			
			this.__0x5343.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5343.Location = new System.Drawing.Point(218, 527);
			this.__0x5343.Name = "buttonSet";
			this.__0x5343.Size = new System.Drawing.Size(147, 32);
			this.__0x5343.TabIndex = 3;
			this.__0x5343.Values.Text = "Set";
			this.__0x5343.Click += new System.EventHandler(this.__0x5367);
			
			
			
			this.__0x5344.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5344.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5344.Location = new System.Drawing.Point(524, 527);
			this.__0x5344.Name = "buttonClose";
			this.__0x5344.Size = new System.Drawing.Size(147, 32);
			this.__0x5344.TabIndex = 5;
			this.__0x5344.Values.Text = "Close";
			this.__0x5344.Click += new System.EventHandler(this.__0x5369);
			
			
			
			this.__0x5345.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5345.CanSelectObjectSettings = false;
			this.__0x5345.FilteringMode = null;
			this.__0x5345.Location = new System.Drawing.Point(12, 12);
			this.__0x5345.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5345.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x5345.Name = "contentBrowser1";
			this.__0x5345.ReadOnlyHierarchy = false;
			this.__0x5345.Size = new System.Drawing.Size(658, 452);
			this.__0x5345.TabIndex = 0;
			this.__0x5345.ThisIsSettingsWindow = false;
			this.__0x5345.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x5361);
			this.__0x5345.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x5362);
			
			
			
			this.__0x5346.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5346.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x5346.Location = new System.Drawing.Point(371, 527);
			this.__0x5346.Name = "buttonSetAndClose";
			this.__0x5346.Size = new System.Drawing.Size(147, 32);
			this.__0x5346.TabIndex = 4;
			this.__0x5346.Values.Text = "Set and Close";
			this.__0x5346.Click += new System.EventHandler(this.__0x5368);
			
			
			
			this.__0x5347.Interval = 50;
			this.__0x5347.Tick += new System.EventHandler(this.__0x5371);
			
			
			
			this.__0x5348.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5348.Enabled = false;
			this.__0x5348.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x5348.Location = new System.Drawing.Point(31, 480);
			this.__0x5348.Name = "labelSelectedReference";
			this.__0x5348.Size = new System.Drawing.Size(651, 23);
			this.__0x5348.TabIndex = 4;
			this.__0x5348.Text = "(Selected reference)";
			this.__0x5348.Visible = false;
			
			
			
			this.__0x5349.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5349.Location = new System.Drawing.Point(12, 497);
			this.__0x5349.Name = "kryptonTextBox1";
			this.__0x5349.Size = new System.Drawing.Size(659, 21);
			this.__0x5349.TabIndex = 2;
			this.__0x5349.TextChanged += new System.EventHandler(this.__0x5372);
			
			
			
			this.__0x5350.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5350.Location = new System.Drawing.Point(12, 471);
			this.__0x5350.Name = "kryptonCheckBoxCanMakeRelativeFilePath";
			this.__0x5350.Size = new System.Drawing.Size(198, 20);
			this.__0x5350.TabIndex = 1;
			this.__0x5350.Values.Text = "Can make relative file path";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x5350);
			this.Controls.Add(this.__0x5349);
			this.Controls.Add(this.__0x5348);
			this.Controls.Add(this.__0x5345);
			this.Controls.Add(this.__0x5346);
			this.Controls.Add(this.__0x5344);
			this.Controls.Add(this.__0x5343);
			this.Name = "SetReferenceWindow";
			this.Size = new System.Drawing.Size(685, 572);
			this.WindowTitle = "Set Reference";
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5343;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5344;
		private ContentBrowser __0x5345;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5346;
		private System.Windows.Forms.Timer __0x5347;
		private NeoAxis.Editor.EngineLabel __0x5348;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x5349;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5350;
	}
}




namespace NeoAxis.Editor
{
	public partial class SettingsCell : EUserControl
	{
		float __0x5402;
		SizeType __0x5403 = SizeType.Percent;

		

		public SettingsCell()
		{
			__0x5408();
		}

		internal virtual void PerformInit()
		{
		}

		[Browsable( false )]
		public SettingsProvider Provider
		{
			get
			{
				var __0x5404 = Parent as TableLayoutPanel;
				if( __0x5404 != null )
					return __0x5404.Tag as SettingsProvider;
				else
					return null;
			}
		}

		public virtual float CellsSortingPriority
		{
			get { return __0x5402; }
			set { __0x5402 = value; }
		}

		public SizeType SizeType
		{
			get { return __0x5403; }
			set { __0x5403 = value; }
		}

		public T[] GetObjects<T>() where T : class
		{
			return Provider.SelectedObjects.OfType<T>().ToArray();
		}

		public T GetFirstObject<T>() where T : class
		{
			foreach( var __0x5407 in Provider.SelectedObjects )
			{
				var __0x5405 = __0x5407 as T;
				if( __0x5405 != null )
					return __0x5405;
			}
			return null;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SettingsCell
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5406 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5406 != null ) )
			{
				__0x5406.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5408()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsCell";
			this.Size = new System.Drawing.Size(381, 128);
			this.ResumeLayout(false);

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	partial class SettingsCellProcedureUI_Container : SettingsCell
	{
		internal SettingsCellProcedureUI procedureUI;
		WinFormsProcedureUI.WinFormsForm __0x5409;

		

		public SettingsCellProcedureUI_Container()
		{
			__0x5416();

			SizeType = SizeType.AutoSize;
		}

		[Browsable( false )]
		public ProcedureUI.Form ProcedureForm
		{
			get { return __0x5409; }
		}

		internal override void PerformInit()
		{
			base.PerformInit();

			__0x5409 = new WinFormsProcedureUI.WinFormsForm( this );
			procedureUI.PerformInit();

			Height = __0x5409.positionY + 6;
		}

		private void __0x5414( object __0x5417, EventArgs __0x5418 )
		{
			__0x5412.Start();
			procedureUI.PerformUpdate();
		}

		private void __0x5415( object __0x5419, EventArgs __0x5420 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			procedureUI.PerformUpdate();
		}
	}

	

	public abstract class SettingsCellProcedureUI
	{
		internal SettingsCellProcedureUI_Container container;

		

		public SettingsCell Container
		{
			get { return container; }
		}

		public SettingsProvider Provider
		{
			get { return container.Provider; }
		}

		public virtual float CellsSortingPriority
		{
			get { return container.CellsSortingPriority; }
			set { container.CellsSortingPriority = value; }
		}

		public SizeType SizeType
		{
			get { return container.SizeType; }
			set { container.SizeType = value; }
		}

		public T[] GetObjects<T>() where T : class
		{
			return Provider.SelectedObjects.OfType<T>().ToArray();
		}

		public T GetFirstObject<T>() where T : class
		{
			foreach( var __0x5413 in Provider.SelectedObjects )
			{
				var __0x5410 = __0x5413 as T;
				if( __0x5410 != null )
					return __0x5410;
			}
			return null;
		}

		

		protected virtual void OnInit() { }
		internal void PerformInit()
		{
			OnInit();
		}

		protected virtual void OnUpdate() { }
		internal void PerformUpdate()
		{
			OnUpdate();
		}

		[Browsable( false )]
		public ProcedureUI.Form ProcedureForm
		{
			get { return container.ProcedureForm; }
		}
	}

}

namespace NeoAxis.Editor
{
	partial class SettingsCellProcedureUI_Container
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5411 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5411 != null ) )
			{
				__0x5411.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5416()
		{
			this.__0x5411 = new System.ComponentModel.Container();
			this.__0x5412 = new System.Windows.Forms.Timer(this.__0x5411);
			this.SuspendLayout();
			
			
			
			this.__0x5412.Interval = 50;
			this.__0x5412.Tick += new System.EventHandler(this.__0x5415);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsCellProcedureUI_Container";
			this.Load += new System.EventHandler(this.__0x5414);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x5412;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsCell_Properties : SettingsCell
	{
		public static bool AllowConfigureEvents = true;

		

		bool __0x5421;

		bool __0x5422;
		bool __0x5423;

		

		public SettingsCell_Properties()
		{
			__0x5441();

			__0x5430.Image = EditorResourcesCache.Events;
			__0x5429.Image = EditorResourcesCache.Properties;

			__0x5429.Text = EditorLocalization.Translate( "SettingsWindow", __0x5429.Text );
			__0x5430.Text = EditorLocalization.Translate( "SettingsWindow", __0x5430.Text );

			__0x5428.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		private void __0x5432( object __0x5442, EventArgs __0x5443 )
		{
			__0x5431.Start();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5428.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x5428.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x5429.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x5430.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x5426.OverrideGroupDisplayName += __0x5437;
			__0x5426.OverridePropertyDisplayName += __0x5438;
			__0x5426.OverrideMemberDescription += __0x5439;
			__0x5427.OverrideGroupDisplayName += __0x5437;
			__0x5427.OverridePropertyDisplayName += __0x5438;
			__0x5427.OverrideMemberDescription += __0x5439;

			if( !AllowConfigureEvents )
			{
				__0x5428.Visible = false;
				__0x5430.Enabled = false;
				__0x5429.Enabled = false;
			}

			__0x5440();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();
		}

		public void UpdateData()
		{
			if( Provider.SelectedObjects != null && Provider.SelectedObjects.Length != 0 )
			{
				var __0x5424 = true;
				if( Provider?.DocumentWindow?.Document != null && Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5424 = false;

				__0x5428.Visible = __0x5424 && AllowConfigureEvents;

				__0x5440();

				if( !__0x5421 )
				{
					__0x5426.SetData( Provider.DocumentWindow, Provider.SelectedObjects );
					__0x5421 = true;
				}
			}
			else
			{
				__0x5428.Visible = false;
				__0x5426.SetData( null, null, false );
				__0x5427.SetData( null, null, false );
			}

			__0x5435();
		}

		private void __0x5433( object __0x5444, EventArgs __0x5445 )
		{
			__0x5422 = false;

			__0x5426.Visible = true;
			__0x5427.Visible = false;

			__0x5435();
		}

		private void __0x5434( object __0x5446, EventArgs __0x5447 )
		{
			__0x5422 = true;

			__0x5427.Visible = true;

			if( !__0x5423 )
			{
				__0x5427.SetData( Provider.DocumentWindow, Provider.SelectedObjects );
				__0x5423 = true;
			}

			__0x5426.Visible = false;

			__0x5435();
		}

		void __0x5435()
		{
			__0x5429.Checked = !__0x5422;
			__0x5430.Checked = __0x5422;
		}

		private void __0x5436( object __0x5448, EventArgs __0x5449 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5435();
		}

		private void __0x5437( HierarchicalContainer __0x5450, HCItemGroup __0x5451, ref string __0x5452 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5452 = EditorLocalization.Translate( "ProjectSettings.Group", __0x5452 );
				else
					__0x5452 = EditorLocalization.Translate( "Object.Group", __0x5452 );
			}
			catch { }
		}

		private void __0x5438( HierarchicalContainer __0x5453, HCItemProperty __0x5454, ref string __0x5455 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5455 = EditorLocalization.Translate( "ProjectSettings.Property", __0x5455 );
				else
					__0x5455 = EditorLocalization.Translate( "Object.Property", __0x5455 );
			}
			catch { }
		}

		private void __0x5439( HierarchicalContainer __0x5456, HCItemMember __0x5457, ref string __0x5458 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5458 = EditorLocalization.Translate( "ProjectSettings.Description", __0x5458 );
				else
					__0x5458 = EditorLocalization.Translate( "Object.Description", __0x5458 );
			}
			catch { }
		}

		void __0x5440()
		{
			if( AllowConfigureEvents )
			{
				__0x5426.SetBounds( 0, __0x5428.Bounds.Bottom, Size.Width, Size.Height - __0x5428.Bounds.Bottom );
				__0x5427.SetBounds( 0, __0x5428.Bounds.Bottom, Size.Width, Size.Height - __0x5428.Bounds.Bottom );
			}
			else
			{
				__0x5426.SetBounds( 0, __0x5428.Bounds.Top, Size.Width, Size.Height - __0x5428.Bounds.Top );
				__0x5427.SetBounds( 0, __0x5428.Bounds.Top, Size.Width, Size.Height - __0x5428.Bounds.Top );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x5440();
		}

		protected override void OnParentFormResizeBegin( EventArgs e )
		{
			base.OnParentFormResizeBegin( e );

			if( !__0x5422 && __0x5426.RootItems.Count > 20 )
				__0x5426.Visible = false;
			if( __0x5422 && __0x5427.RootItems.Count > 20 )
				__0x5427.Visible = false;
		}

		protected override void OnParentFormResizeEnd( EventArgs e )
		{
			base.OnParentFormResizeEnd( e );

			if( !__0x5422 )
				__0x5426.Visible = true;
			if( __0x5422 )
				__0x5427.Visible = true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsCell_Properties
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5425 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5425 != null))
            {
                __0x5425.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5441()
        {
			this.__0x5425 = new System.ComponentModel.Container();
			this.__0x5426 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x5427 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x5428 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x5429 = new System.Windows.Forms.ToolStripButton();
			this.__0x5430 = new System.Windows.Forms.ToolStripButton();
			this.__0x5431 = new System.Windows.Forms.Timer(this.__0x5425);
			this.__0x5428.SuspendLayout();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x5426.ReverseGroups = false;
			this.__0x5426.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x5426.Location = new System.Drawing.Point(0, 31);
			this.__0x5426.Margin = new System.Windows.Forms.Padding(3, 1, 3, 1);
			this.__0x5426.Name = "hierarchicalContainer1";
			this.__0x5426.Size = new System.Drawing.Size(149, 102);
			this.__0x5426.SplitterPosition = 67;
			this.__0x5426.SplitterRatio = 0.4464286F;
			this.__0x5426.TabIndex = 0;
			
			
			
			
			
			
			this.__0x5427.Visible = false;
			this.__0x5427.ReverseGroups = true;
			this.__0x5427.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Events;
			this.__0x5427.Location = new System.Drawing.Point( 0, 31 );
			this.__0x5427.Margin = new System.Windows.Forms.Padding( 3, 1, 3, 1 );
			this.__0x5427.Name = "hierarchicalContainer1";
			this.__0x5427.Size = new System.Drawing.Size( 149, 102 );
			this.__0x5427.SplitterPosition = 67;
			this.__0x5427.SplitterRatio = 0.4464286F;
			this.__0x5427.TabIndex = 0;
			
			
			
			this.__0x5428.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x5428.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x5428.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x5429,
            this.__0x5430});
			this.__0x5428.Location = new System.Drawing.Point(0, 0);
			this.__0x5428.Name = "toolStrip1";
			this.__0x5428.ShowItemToolTips = false;
			this.__0x5428.AutoSize = false;
			this.__0x5428.Size = new System.Drawing.Size(149, 25);
			this.__0x5428.TabIndex = 1;
			this.__0x5428.Text = "toolStrip1";
			
			
			
			this.__0x5429.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x5429.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x5429.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.__0x5429.Name = "toolStripButtonProperties";
			this.__0x5429.AutoSize = false;
			this.__0x5429.Size = new System.Drawing.Size(23, 22);
			this.__0x5429.Text = "Properties";
			this.__0x5429.Click += new System.EventHandler(this.__0x5433);
			
			
			
			this.__0x5430.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x5430.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x5430.ImageTransparentColor = System.Drawing.Color.Transparent;
			this.__0x5430.Name = "toolStripButtonEvents";
			this.__0x5430.AutoSize = false;
			this.__0x5430.Size = new System.Drawing.Size(23, 22);
			this.__0x5430.Text = "Events";
			this.__0x5430.Click += new System.EventHandler(this.__0x5434);
			
			
			
			this.__0x5431.Interval = 50;
			this.__0x5431.Tick += new System.EventHandler(this.__0x5436);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CellsSortingPriority = -98F;
			this.Controls.Add(this.__0x5428);
			this.Controls.Add(this.__0x5426);
			this.Controls.Add(this.__0x5427);
			this.Margin = new System.Windows.Forms.Padding(0);
			this.Name = "SettingsCell_Properties";
			this.Size = new System.Drawing.Size(149, 135);
			this.Load += new System.EventHandler(this.__0x5432);
			this.__0x5428.ResumeLayout(false);
			this.__0x5428.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion

		private HierarchicalContainer __0x5426;
		private HierarchicalContainer __0x5427;
		private NeoAxis.Editor.EngineToolStrip __0x5428;
		private System.Windows.Forms.ToolStripButton __0x5429;
		private System.Windows.Forms.ToolStripButton __0x5430;
		private System.Windows.Forms.Timer __0x5431;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader : EUserControl
	{
		

		

		public SettingsHeader()
		{
			__0x5461();
		}

		[Browsable( false )]
		public SettingsWindow.PanelData SettingsPanel
		{
			get
			{
				return __0x5460<SettingsWindow.PanelData>( this );
			}
		}

		private T __0x5460<T>( Control __0x5462 ) where T : class
		{
			if( __0x5462.Parent == null )
				return null;

			if( __0x5462.Parent.Tag is T parentTag )
				return parentTag;
			else
				return __0x5460<T>( __0x5462.Parent );
		}

		
		
		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class SettingsHeader
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5459 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5459 != null ) )
			{
				__0x5459.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5461()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectSettingsExtension";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader_Components : SettingsHeader
	{
		
		
		

		
		ContentBrowser __0x5463;

		

		public SettingsHeader_Components()
		{
			__0x5475();
		}

		
		
		
		
		

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			Component __0x5464 = null;
			
			if( SettingsPanel.selectedObjects.Length == 1 )
				__0x5464 = SettingsPanel.selectedObjects[ 0 ] as Component;

			__0x5463 = new ContentBrowser();
			__0x5463.TreeViewBorderDraw = BorderSides.All;
			__0x5463.Mode = ContentBrowser.ModeEnum.Objects;
			__0x5463.Options.FilteringModeButton = false;
			
			
			__0x5463.Options.DisplayPropertiesSortFilesBy = false;
			__0x5463.Options.DisplayPropertiesOpenButton = false;
			__0x5463.ThisIsSettingsWindow = true;
			__0x5463.MultiSelect = true;
			__0x5463.ItemAfterSelect += __0x5473;
			__0x5463.ItemAfterChoose += __0x5474;

			__0x5463.Init( SettingsPanel.documentWindow, __0x5464, null );
			
			__0x5463.Dock = DockStyle.Fill;
			Controls.Add( __0x5463 );
		}

		private void __0x5473( ContentBrowser __0x5476, IList<ContentBrowser.Item> __0x5477, bool __0x5478, ref bool __0x5479 )
		{
			
			

			var __0x5465 = new List<object>();

			foreach( var __0x5471 in __0x5477 )
			{
				var __0x5466 = __0x5471 as ContentBrowserItem_Component;
				if( __0x5466 != null && __0x5466.Component != null )
					__0x5465.Add( __0x5466.Component );
			}

			if( __0x5465.Count == 0 )
			{
				
			}

			SettingsPanel.GetControl<SettingsLevel2Window>().SelectObjects( SettingsPanel.documentWindow, __0x5465 );
		}

		private void __0x5474( ContentBrowser __0x5480, ContentBrowser.Item __0x5481, ref bool __0x5482 )
		{
		}

		
		public void SelectObjects( Component[] objs )
		{
			

			ESet<Component> __0x5467 = new ESet<Component>( objs );

			List<ContentBrowser.Item> __0x5468 = new List<ContentBrowser.Item>();

			foreach( var __0x5472 in __0x5463.GetAllItems() )
			{
				ContentBrowserItem_Component __0x5469 = __0x5472 as ContentBrowserItem_Component;
				if( __0x5469 != null )
				{
					if( __0x5467.Contains( __0x5469.Component ) )
						__0x5468.Add( __0x5472 );
				}
			}

			__0x5463.SelectItems( __0x5468.ToArray() );
		}

		public int CalculateHeight()
		{
			return __0x5463 != null ? __0x5463.CalculateHeight() : -1;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsHeader_Components
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5470 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5470 != null))
            {
                __0x5470.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5475()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsHeader_Components";
			this.Size = new System.Drawing.Size(142, 197);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader_ObjectInfo : SettingsHeader
	{
		bool? __0x5483;

		

		public SettingsHeader_ObjectInfo()
		{
			__0x5514();

			__0x5500.Values.Image = EditorResourcesCache.Type;

			__0x5504.SetToolTip( __0x5500, EditorLocalization.Translate( "SettingsWindow", "Type Settings" ) );
			__0x5504.SetToolTip( __0x5505, EditorLocalization.Translate( "SettingsWindow", "Reset Type Settings to default." ) );
		}

		private void __0x5506( object __0x5515, EventArgs __0x5516 )
		{

		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5507();
			__0x5509();
			__0x5510();

			__0x5501.Start();
		}

		void __0x5507()
		{
			string __0x5484;
			string __0x5485;

			var __0x5486 = SettingsPanel.selectedObjects;
			if( __0x5486.Length == 1 )
			{
				var __0x5487 = __0x5486[ 0 ];

				var __0x5488 = __0x5487 as Component;
				if( __0x5488 != null )
				{
					if( !string.IsNullOrEmpty( __0x5488.Name ) )
					{
						__0x5484 = __0x5488.Name;
						__0x5485 = __0x5488.BaseType.ToString();
					}
					else
					{
						__0x5484 = __0x5488.BaseType.ToString();
						__0x5485 = __0x5484;
					}
				}
				else
				{
					__0x5484 = __0x5487.ToString();
					__0x5485 = "";
				}
			}
			else
			{
				__0x5484 = string.Format( EditorLocalization.Translate( "SettingsWindow", "{0} objects" ), __0x5486.Length );
				__0x5485 = "";
			}

			if( __0x5502.Text != __0x5484 )
				__0x5502.Text = __0x5484;
			if( __0x5503.Text != __0x5485 )
				__0x5503.Text = __0x5485;





			

			
			
			
			

			
			
			

			

			
			
			

			
			
			

			
			

			
			
			
			
			

			
			
			
			
			
			

			
			

			
			

			
			


			
			
			
			
			
			
			
			
			


			
			
			
			
			

			
			
			
			
			
			
			
		}

		Component __0x5508()
		{
			

			if( SettingsPanel.documentWindow?.Document != null && SettingsPanel.selectedObjects.Length == 1 )
				return SettingsPanel.selectedObjects[ 0 ] as Component;
			else
				return null;
		}

		void __0x5509()
		{
			__0x5500.Location = new Point( ClientRectangle.Right - __0x5500.Width, 0 );
			__0x5505.Location = new Point( __0x5500.Location.X - __0x5505.Width - 2, 5 );

			__0x5502.Width = __0x5505.Location.X - 2 - __0x5502.Location.X;
			__0x5503.Width = __0x5502.Width;
		}

		void __0x5510()
		{
			var __0x5489 = __0x5508();

			bool __0x5490 = __0x5489 != null && __0x5489.TypeSettingsPrivateObjects != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5505.Enabled != __0x5490 )
				__0x5505.Enabled = __0x5490;
			if( __0x5505.Visible != __0x5490 )
				__0x5505.Visible = __0x5490;
			if( __0x5483 != __0x5490 )
			{
				__0x5483 = __0x5490;

				if( EditorAPI.DarkTheme )
					__0x5505.Values.Image = __0x5490 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
				else
					__0x5505.Values.Image = __0x5490 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
			}

			var __0x5491 = __0x5489 != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5500.Enabled != __0x5491 )
				__0x5500.Enabled = __0x5491;

			var __0x5492 = EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5500.Visible != __0x5492 )
				__0x5500.Visible = __0x5492;

			
			
			

			
			
			
		}

		
		
		
		
		

		
		
		

		
		
		

		
		
		
		
		

		
		
		

		
		
		

		private void __0x5511( object __0x5517, EventArgs __0x5518 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x5507();
			__0x5510();
		}

		private void __0x5512( object __0x5519, EventArgs __0x5520 )
		{
			var __0x5493 = __0x5508();
			if( __0x5493 != null )
			{
				var __0x5494 = new ComponentTypeSettingsForm( SettingsPanel.documentWindow.Document, __0x5493 );
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x5494.ShowDialog();
				} );
			}
		}

		private void __0x5513( object __0x5521, EventArgs __0x5522 )
		{
			var __0x5495 = __0x5508();
			if( __0x5495 != null )
			{
				var __0x5496 = EditorLocalization.Translate( "SettingsWindow", "Reset to default?" );
				if( EditorMessageBox.ShowQuestion( __0x5496, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
				{
					var __0x5497 = __0x5495.TypeSettingsPrivateObjects;

					__0x5495.TypeSettingsPrivateObjects = null;

					var __0x5498 = new UndoActionPropertiesChange.Item( __0x5495, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x5497, null );
					SettingsPanel.documentWindow.Document.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x5498 ) );
					SettingsPanel.documentWindow.Document.Modified = true;
				}
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( Created )
				__0x5509();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsHeader_ObjectInfo
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5499 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5499 != null))
            {
                __0x5499.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5514()
        {
			this.__0x5499 = new System.ComponentModel.Container();
			this.__0x5500 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5501 = new System.Windows.Forms.Timer(this.__0x5499);
			this.__0x5502 = new NeoAxis.Editor.EngineLabel();
			this.__0x5503 = new NeoAxis.Editor.EngineLabel();
			this.__0x5504 = new NeoAxis.Editor.EngineToolTip(this.__0x5499);
			this.__0x5505 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
			this.__0x5500.Location = new System.Drawing.Point(317, 0);
			this.__0x5500.Name = "buttonTypeSettings";
			this.__0x5500.Size = new System.Drawing.Size(30, 26);
			this.__0x5500.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5500.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x5500.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5500.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x5500.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5500.TabIndex = 2;
			this.__0x5504.SetToolTip(this.__0x5500, "Type Settings");
			this.__0x5500.Values.Image = global::NeoAxis.Properties.Resources.Class;
			this.__0x5500.Values.Text = "";
			this.__0x5500.Click += new System.EventHandler(this.__0x5512);
			
			
			
			this.__0x5501.Interval = 10;
			this.__0x5501.Tick += new System.EventHandler(this.__0x5511);
			
			
			
			
   
			this.__0x5502.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.8F);
			this.__0x5502.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.BoldControl;
			this.__0x5502.Location = new System.Drawing.Point(0, -1);
			this.__0x5502.Name = "kryptonLabel1";
			this.__0x5502.Size = new System.Drawing.Size(295, 26);
			this.__0x5502.StateCommon.Content.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Bold);
			this.__0x5502.TabIndex = 6;
			this.__0x5502.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
   
			this.__0x5503.LabelStyle = Internal.ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x5503.Location = new System.Drawing.Point(0, 24);
			this.__0x5503.Name = "kryptonLabel2";
			this.__0x5503.Size = new System.Drawing.Size(295, 23);
			this.__0x5503.TabIndex = 6;
			this.__0x5503.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
			this.__0x5505.Location = new System.Drawing.Point(299, 5);
			this.__0x5505.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5505.Name = "buttonTypeSettingsDefaultValue";
			this.__0x5505.Size = new System.Drawing.Size(15, 15);
			this.__0x5505.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5505.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x5505.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5505.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5505.TabIndex = 7;
			this.__0x5504.SetToolTip(this.__0x5505, "Type Settings reset to default");
			this.__0x5505.Values.Text = "";
			this.__0x5505.Click += new System.EventHandler(this.__0x5513);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x5505);
			this.Controls.Add(this.__0x5502);
			this.Controls.Add(this.__0x5503);
			this.Controls.Add(this.__0x5500);
			this.Name = "SettingsHeader_ObjectInfo";
			this.Size = new System.Drawing.Size(347, 48);
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5500;
		private System.Windows.Forms.Timer __0x5501;
		private EngineLabel __0x5502;
		private EngineLabel __0x5503;
		private NeoAxis.Editor.EngineToolTip __0x5504;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5505;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsLevel2Window : EUserControl
	{
		
		const int __0x5523 = 10;

		public class PanelData : PanelDataWithTableLayout
		{
		}
		List<PanelData> __0x5524 = new List<PanelData>();

		PanelData __0x5525;

		

		public SettingsLevel2Window()
		{
			__0x5538();
		}

		bool __0x5534( object[] __0x5539, object[] __0x5540 )
		{
			if( __0x5539.Length != __0x5540.Length )
				return false;
			for( int __0x5526 = 0; __0x5526 < __0x5539.Length; __0x5526++ )
			{
				if( __0x5539[ __0x5526 ] != __0x5540[ __0x5526 ] )
					return false;
			}
			return true;
		}

		PanelData __0x5535( object[] __0x5541 )
		{
			foreach( var __0x5533 in __0x5524 )
			{
				if( __0x5534( __0x5533.selectedObjects, __0x5541 ) )
					return __0x5533;
			}
			return null;
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		PanelData __0x5536( DocumentWindow __0x5542, object[] __0x5543, bool __0x5544 )
		{
			PanelData __0x5527 = new PanelData();
			__0x5524.Add( __0x5527 );
			__0x5527.selectedObjects = __0x5543;

			__0x5527.CreateAndAddPanel( this );

			
			if( !__0x5544 && __0x5527.layoutPanel != null )
			{
				__0x5527.layoutPanel.Visible = false;
				__0x5527.layoutPanel.Enabled = false;
			}

			SettingsProvider.Create( __0x5542, __0x5527.selectedObjects, __0x5527.layoutPanel, null, true );

			return __0x5527;
		}

		void __0x5537( PanelData __0x5545 )
		{
			if( SelectedPanel == __0x5545 )
				SelectedPanel = null;

			var __0x5528 = __0x5545.layoutPanel;
			__0x5528.Parent.Controls.Remove( __0x5528 );
			__0x5528.Dispose();

			__0x5524.Remove( __0x5545 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5524.Count != 0 )
				__0x5537( __0x5524[ __0x5524.Count - 1 ] );
		}

		public void SelectObjects( DocumentWindow document, IList<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			object[] __0x5529 = new object[ objects.Count ];
			objects.CopyTo( __0x5529, 0 );

			PanelData __0x5530 = __0x5535( __0x5529 );

			
			if( __0x5530 != null )
			{
				
				__0x5524.Remove( __0x5530 );
				__0x5524.Add( __0x5530 );
			}

			
			if( __0x5530 == null )
			{
				
				while( __0x5524.Count >= __0x5523 )
					__0x5537( __0x5524[ 0 ] );

				__0x5530 = __0x5536( document, __0x5529, true );
			}

			SelectedPanel = __0x5530;

			
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5525; }
			set
			{
				if( __0x5525 == value )
					return;

				var __0x5531 = __0x5525;
				__0x5525 = value;

				if( __0x5525 != null )
				{
					__0x5525.layoutPanel.Enabled = true;
					__0x5525.layoutPanel.Visible = true;
					
				}

				if( __0x5531 != null )
				{
					__0x5531.layoutPanel.Visible = false;
					__0x5531.layoutPanel.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				

				
				
			}
		}
	}
}
namespace NeoAxis.Editor
{
    partial class SettingsLevel2Window
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5532 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5532 != null))
            {
                __0x5532.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5538()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsLevel2Window";
			this.Size = new System.Drawing.Size(145, 31);
			this.ResumeLayout(false);

        }

        #endregion
	}
}





namespace NeoAxis.Editor
{
	
	
	
	

	
	
	
	
	
	

	public class SettingsProvider
	{
		

		

		

		

		DocumentWindow __0x5546;
		object[] __0x5547;
		TableLayoutPanel __0x5548;
		object __0x5549;

		

		public delegate void CreateProviderDelegate( DocumentWindow __0x5567, object[] __0x5568, TableLayoutPanel __0x5569, object __0x5570, ref SettingsProvider __0x5571 );
		public static event CreateProviderDelegate CreateProvider;

		public delegate void UpdateDelegate( SettingsProvider __0x5572 );
		public event UpdateDelegate UpdateBegin;
		public static event UpdateDelegate AllProviders_UpdateBegin;
		public event UpdateDelegate UpdateEnd;
		public static event UpdateDelegate AllProviders_UpdateEnd;

		

		public SettingsProvider( DocumentWindow documentWindow, object[] selectedObjects, TableLayoutPanel layoutPanel, object anyData )
		{
			this.__0x5547 = selectedObjects;
			this.__0x5546 = documentWindow;
			this.__0x5548 = layoutPanel;
			this.__0x5549 = anyData;

			this.__0x5548.Tag = this;
		}

		public static SettingsProvider Create( DocumentWindow documentWindow, object[] selectedObjects, TableLayoutPanel layoutPanel, object anyData, bool update )
		{
			
			SettingsProvider __0x5550 = null;
			CreateProvider?.Invoke( documentWindow, selectedObjects, layoutPanel, anyData, ref __0x5550 );

			
			if( __0x5550 == null )
				__0x5550 = new SettingsProvider( documentWindow, selectedObjects, layoutPanel, anyData );

			if( update )
			{
				try
				{
					
					layoutPanel.SuspendLayout();

					__0x5550.PerformUpdate( false );
				}
				finally
				{
					layoutPanel.ResumeLayout();
				}
			}

			return __0x5550;
		}

		public DocumentWindow DocumentWindow
		{
			get { return __0x5546; }
		}

		public object[] SelectedObjects
		{
			get { return __0x5547; }
		}

		public TableLayoutPanel LayoutPanel
		{
			get { return __0x5548; }
		}

		public object AnyData
		{
			get { return __0x5549; }
		}

		public void Clear()
		{
			if( __0x5548 != null )
			{
				__0x5548.RowStyles.Clear();
				__0x5548.Controls.Clear();
			}

			
		}

		protected virtual void OnUpdate()
		{
			for( int __0x5551 = 0; __0x5551 < __0x5547.Length; __0x5551++ )
			{
				var __0x5552 = __0x5547[ __0x5551 ];

				
				foreach( var __0x5563 in __0x5552.GetType().GetCustomAttributes<SettingsCellAttribute>( true ).Reverse() )
				{
					if( __0x5547.Length == 1 || __0x5563.MultiselectionSupport )
						AddCell( __0x5563.SettingsCellClass, true );
				}

				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				

				
				
				
				
				
				
				
				
				
				
			}

			
			
			

			
			
			
			

			

			
			
			foreach( Control __0x5564 in __0x5548.Controls )
			{
				SettingsCell_Properties __0x5553 = __0x5564 as SettingsCell_Properties;
				if( __0x5553 != null )
					__0x5553.UpdateData();
			}
		}

		
		public void PerformUpdate( bool clear )
		{
			if( clear )
				Clear();

			UpdateBegin?.Invoke( this );
			AllProviders_UpdateBegin?.Invoke( this );

			OnUpdate();

			

			
			{
				List<Tuple<Control, float>> __0x5554 = new List<Tuple<Control, float>>();
				foreach( Control __0x5565 in __0x5548.Controls )
				{
					float __0x5555 = 0;
					SettingsCell __0x5556 = __0x5565 as SettingsCell;
					if( __0x5556 != null )
						__0x5555 = __0x5556.CellsSortingPriority;
					__0x5554.Add( new Tuple<Control, float>( __0x5565, __0x5555 ) );
				}

				CollectionUtility.MergeSort( __0x5554, delegate ( Tuple<Control, float> __0x5573, Tuple<Control, float> __0x5574 )
				{
					if( __0x5573.Item2 < __0x5574.Item2 )
						return -1;
					if( __0x5573.Item2 > __0x5574.Item2 )
						return 1;
					return 0;
				} );

				for( int __0x5557 = 0; __0x5557 < __0x5554.Count; __0x5557++ )
				{
					var __0x5558 = __0x5554[ __0x5557 ];
					__0x5548.Controls.SetChildIndex( __0x5558.Item1, __0x5557 );
				}
			}

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			

			UpdateEnd?.Invoke( this );
			AllProviders_UpdateEnd?.Invoke( this );
		}

		public Control AddCell( Type cellClass, bool useIfAlreadyCreated )
		{
			if( useIfAlreadyCreated )
			{
				foreach( Control __0x5566 in __0x5548.Controls )
				{
					if( cellClass.IsAssignableFrom( __0x5566.GetType() ) )
						return __0x5566;

					if( typeof( SettingsCellProcedureUI ).IsAssignableFrom( cellClass ) )
					{
						var __0x5559 = __0x5566 as SettingsCellProcedureUI_Container;
						if( __0x5559 != null && cellClass.IsAssignableFrom( __0x5559.procedureUI.GetType() ) )
							return __0x5566;
					}
				}
			}

			SettingsCell __0x5560;
			if( typeof( SettingsCellProcedureUI ).IsAssignableFrom( cellClass ) )
			{
				var __0x5561 = (SettingsCellProcedureUI)Activator.CreateInstance( cellClass );
				var __0x5562 = new SettingsCellProcedureUI_Container();
				__0x5562.procedureUI = __0x5561;
				__0x5561.container = __0x5562;
				__0x5560 = __0x5562;
			}
			else
				__0x5560 = (SettingsCell)cellClass.GetConstructor( new Type[ 0 ] ).Invoke( new object[ 0 ] );

			AddCell( __0x5560 );
			return __0x5560;
		}

		public Control AddCell( SettingsCell cell )
		{
			cell.PerformInit();

			if( cell.SizeType != SizeType.AutoSize )
				cell.SetBounds( 0, 0, __0x5548.Width, __0x5548.Height );
			cell.Dock = DockStyle.Fill;

			if( cell.SizeType == SizeType.AutoSize )
				__0x5548.RowStyles.Add( new RowStyle() { SizeType = SizeType.AutoSize } );
			else
				__0x5548.RowStyles.Add( new RowStyle() { SizeType = SizeType.Percent, Height = 100 } );

			__0x5548.RowCount = __0x5548.RowStyles.Count;
			__0x5548.Controls.Add( cell );

			return cell;
		}

	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Settings Window.
	/// </summary>
	public partial class SettingsWindow : DockWindow
	{
		
		const int __0x5575 = 10;

		
		static SettingsWindow __0x5576;

		List<PanelData> __0x5577 = new List<PanelData>();

		PanelData __0x5578;

		bool __0x5579;

		
		
		

		

		public class PanelData : PanelDataWithTableLayout
		{
			

			public DocumentWindow documentWindow;
			public ESet<object> selectedObjectsSet;

			

			public new T GetControl<T>() where T : Control
			{
				return __0x5616<T>( layoutPanel );
			}

			private T __0x5616<T>( Control __0x5625 ) where T : Control
			{
				if( __0x5625 == null )
					return null;

				var __0x5580 = __0x5625.Controls.OfType<T>().FirstOrDefault();
				if( __0x5580 != null )
					return __0x5580;

				foreach( Control __0x5612 in __0x5625.Controls )
				{
					__0x5580 = __0x5616<T>( __0x5612 );
					if( __0x5580 != null )
						return __0x5580;
				}

				return null;
			}
		}

		

		public SettingsWindow()
		{
			if( __0x5576 != null )
				Log.Fatal( "SettingsWindow: Constructor: instance != null." );
			__0x5576 = this;

			__0x5624();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
				__0x5579 = ProjectSettings.Get.General.DisplayHierarchyOfObjectsInSettingsWindow;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x5617( object __0x5626, EventArgs __0x5627 )
		{
		}

		public static SettingsWindow Instance
		{
			get { return __0x5576; }
		}

		bool __0x5618( object[] __0x5628, object[] __0x5629 )
		{
			if( __0x5628.Length != __0x5629.Length )
				return false;
			for( int __0x5581 = 0; __0x5581 < __0x5628.Length; __0x5581++ )
			{
				if( __0x5628[ __0x5581 ] != __0x5629[ __0x5581 ] )
					return false;
			}
			return true;
		}

		PanelData __0x5619( object[] __0x5630 )
		{
			foreach( var __0x5613 in __0x5577 )
			{
				if( __0x5618( __0x5613.selectedObjects, __0x5630 ) )
					return __0x5613;
			}
			return null;
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		PanelData __0x5620( DocumentWindow __0x5631, object[] __0x5632 )
		{
			PanelData __0x5582 = new PanelData();
			__0x5577.Add( __0x5582 );
			__0x5582.documentWindow = __0x5631;
			__0x5582.selectedObjects = __0x5632;
			__0x5582.selectedObjectsSet = new ESet<object>( __0x5582.selectedObjects );

			__0x5582.CreateAndAddPanel( this );

			
			
			
			
			
			

			
			if( __0x5582.selectedObjects != null && __0x5582.selectedObjects.Length != 0 )
			{
				
				

				try
				{
					
					

					
					

					
					

					

					
					

					
					

					


					var __0x5583 = new SettingsHeader_ObjectInfo();
					__0x5583.Dock = DockStyle.Fill;
					__0x5582.layoutPanel.Controls.Add( __0x5583 );

					bool __0x5584 = Array.TrueForAll( __0x5582.selectedObjects, __0x5633 => __0x5633 is Component );
					if( __0x5584 )
					{
						if( ProjectSettings.Get.General.DisplayHierarchyOfObjectsInSettingsWindow.Value )
						{
							

							var __0x5585 = new KryptonSplitContainer();
							__0x5585.SplitterWidth = 8;
							__0x5585.Orientation = Orientation.Horizontal;
							__0x5585.Dock = DockStyle.Fill;
							if( EditorAPI.DarkTheme )
								__0x5585.StateNormal.Back.Color1 = Color.FromArgb( 54, 54, 54 );
							__0x5582.layoutPanel.Controls.Add( __0x5585 );

							{
								var __0x5586 = new SettingsHeader_Components();
								
								__0x5586.Dock = DockStyle.Fill;
								__0x5585.Panel1.Controls.Add( __0x5586 );

								
								float __0x5587 = (float)__0x5586.CalculateHeight() / __0x5585.Height;
								float __0x5588 = 0.33f;
								if( __0x5587 < __0x5588 )
									__0x5585.SplitterDistance = __0x5586.CalculateHeight() + 25;
								else
									__0x5585.SplitterDistance = (int)( __0x5585.Height * __0x5588 );
							}

							{
								var __0x5589 = new SettingsLevel2Window();
								__0x5589.Dock = DockStyle.Fill;
								__0x5585.Panel2.Controls.Add( __0x5589 );
							}

							
							
							
							

							
							

							
						}
						else
						{
							

							var __0x5590 = new SettingsLevel2Window();
							__0x5590.Dock = DockStyle.Fill;
							__0x5582.layoutPanel.Controls.Add( __0x5590 );

							__0x5590.SelectObjects( __0x5582.documentWindow, __0x5582.selectedObjects );
						}
					}
					else
					{
						

						

					}

				}
				finally
				{
					
					

					
					
				}
			}

			return __0x5582;
		}

		void __0x5621( PanelData __0x5634 )
		{
			if( SelectedPanel == __0x5634 )
				SelectedPanel = null;

			var __0x5591 = __0x5634.layoutPanel;
			__0x5591.Parent.Controls.Remove( __0x5591 );
			__0x5591.Dispose();

			__0x5577.Remove( __0x5634 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5577.Count != 0 )
				__0x5621( __0x5577[ __0x5577.Count - 1 ] );
		}

		public void SelectObjects( DocumentWindow documentWindow, ICollection<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;
			
			var __0x5592 = documentWindow?.Document;
			if( __0x5592 != null && __0x5592.Destroyed )
				return;

			if( objects == null )
				objects = new object[ 0 ];

			object[] __0x5593 = new object[ objects.Count ];
			objects.CopyTo( __0x5593, 0 );

			PanelData __0x5594 = __0x5619( __0x5593 );

			
			if( __0x5594 != null )
			{
				
				__0x5577.Remove( __0x5594 );
				__0x5577.Add( __0x5594 );
			}

			
			if( __0x5594 == null )
			{
				
				while( __0x5577.Count >= __0x5575 )
					__0x5621( __0x5577[ 0 ] );

				__0x5594 = __0x5620( documentWindow, __0x5593 );
			}

			
			if( __0x5594.selectedObjects != null && __0x5594.selectedObjects.Length != 0 )
			{
				bool __0x5595 = Array.TrueForAll( __0x5594.selectedObjects, __0x5635 => __0x5635 is Component );
				if( __0x5595 )
				{
					
					

					var __0x5596 = new List<Component>();
					foreach( var __0x5614 in __0x5594.selectedObjects )
						__0x5596.Add( (Component)__0x5614 );
					__0x5594.GetControl<SettingsHeader_Components>()?.SelectObjects( __0x5596.ToArray() );

					
				}
			}

			SelectedPanel = __0x5594;
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5578; }
			set
			{
				if( __0x5578 == value )
					return;

				var __0x5597 = __0x5578;
				__0x5578 = value;

				if( __0x5578 != null )
				{
					__0x5578.layoutPanel.Enabled = __0x5623();
					__0x5578.layoutPanel.Visible = true;
					
				}

				if( __0x5597 != null )
				{
					__0x5597.layoutPanel.Visible = false;
					__0x5597.layoutPanel.Enabled = false;
				}
			}
		}

		
		[Browsable( false )]
		public object[] SelectedObjects
		{
			get
			{
				var __0x5598 = SelectedPanel;
				if( __0x5598 == null )
					return new object[ 0 ];
				return __0x5598.selectedObjects;
			}
		}

		
		[Browsable( false )]
		public ESet<object> SelectedObjectsSet
		{
			get
			{
				var __0x5599 = SelectedPanel;
				if( __0x5599 == null )
					return new ESet<object>();
				return __0x5599.selectedObjectsSet;
			}
		}

		
		public bool IsObjectSelected( object obj )
		{
			return SelectedObjectsSet.Contains( obj );
		}

		private void __0x5622( object __0x5636, EventArgs __0x5637 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( KryptonPage == null || KryptonPage.Parent == null )
				return;

			if( __0x5578 != null )
			{
				var __0x5600 = __0x5623();
				if( __0x5578.layoutPanel.Enabled != __0x5600 )
				{
					KryptonWinFormsUtility.EditorFormStartTemporaryLockUpdate();
					__0x5578.layoutPanel.Enabled = __0x5600;
				}
			}

			
			if( __0x5579 != ProjectSettings.Get.General.DisplayHierarchyOfObjectsInSettingsWindow.Value )
			{
				__0x5579 = ProjectSettings.Get.General.DisplayHierarchyOfObjectsInSettingsWindow.Value;

				DocumentWindow __0x5601 = null;
				ESet<object> __0x5602 = null;
				if( SelectedPanel != null )
				{
					__0x5601 = SelectedPanel.documentWindow;
					__0x5602 = SelectedPanel.selectedObjectsSet;
				}

				RemoveCachedPanels();

				if( __0x5602 != null )
					SelectObjects( __0x5601, __0x5602 );
			}

			
			
			
			
			

			
			
			

			

			
			
			
		}

		bool __0x5623()
		{
			

			bool __0x5603 = false;

			if( SelectedPanel != null && SelectedPanel.selectedObjects != null && SelectedPanel.selectedObjects.Length != 0 )
			{
				var __0x5604 = SelectedPanel.selectedObjects;

				__0x5603 = true;

				foreach( object __0x5615 in __0x5604 )
				{
					Component __0x5605 = __0x5615 as Component;
					if( __0x5605 != null )
					{
						if( __0x5605.ParentRoot.HierarchyController != null )
						{
							var __0x5606 = __0x5605.ParentRoot.HierarchyController.CreatedByResource;
							if( __0x5606 != null )
							{
								if( EditorAPI.GetDocumentByResource( __0x5606 ) == null )
									__0x5603 = false;
							}
						}
						if( __0x5605.EditorReadOnlyInHierarchy )
							__0x5603 = false;
					}
				}
			}

			return __0x5603;
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x5607 = SelectedPanel;
			if( __0x5607 != null )
			{
				var __0x5608 = __0x5607.GetControl<SettingsLevel2Window>();
				if( __0x5608 != null )
				{
					var __0x5609 = __0x5608.SelectedPanel;
					if( __0x5609 != null )
						return new ObjectsInFocus( __0x5607.documentWindow, __0x5609.selectedObjects );
				}
			}
			return null;
		}

		protected override void OnKryptonPageParentChanged()
		{
			base.OnKryptonPageParentChanged();

			

			
			
			
			
			
			
			
			

			
			
			
		}
	}
}
namespace NeoAxis.Editor
{
    partial class SettingsWindow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5610 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5610 != null))
            {
                __0x5610.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5624()
        {
			this.__0x5610 = new System.ComponentModel.Container();
			this.__0x5611 = new System.Windows.Forms.Timer(this.__0x5610);
			this.SuspendLayout();
			
			
			
			this.__0x5611.Enabled = true;
			this.__0x5611.Interval = 10;
			this.__0x5611.Tick += new System.EventHandler(this.__0x5622);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Settings";
			this.Load += new System.EventHandler(this.__0x5617);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x5611;
	}
}





namespace NeoAxis.Editor
{
	public partial class SolutionExplorer : DockWindow
	{
		public SolutionExplorer()
		{
			__0x5642();

			

			
			
			__0x5639.Init( null, null, null );
			__0x5639.Options.PanelMode = ContentBrowser.PanelModeEnum.Tree;
			__0x5639.Options.SplitterPosition = 3.0 / 5.0;
			__0x5639.Options.EditorButton = false;
			__0x5639.Options.SettingsButton = false;
			__0x5639.Options.DisplayPropertiesEditorSettingsButtons = false;

			
			

			__0x5640();
			EngineConfig.SaveEvent += __0x5641;
		}

		public override bool HideOnRemoving { get { return true; } }

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x5639; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			
			return new ObjectsInFocus( null, __0x5639.SelectedItems );
			
		}

		void __0x5640()
		{
			
			
			
			
			
			
			
		}

		void __0x5641()
		{
			

			
			
			

			
			
			
		}
	}
}


namespace NeoAxis.Editor
{
	partial class SolutionExplorer
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5638 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5638 != null ) )
			{
				__0x5638.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5642()
		{
			this.__0x5639 = new NeoAxis.Editor.ContentBrowser();
			this.SuspendLayout();
			
			
			
			this.__0x5639.CanSelectObjectSettings = false;
			this.__0x5639.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x5639.FilteringMode = null;
			this.__0x5639.Location = new System.Drawing.Point(0, 0);
			this.__0x5639.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x5639.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5639.MultiSelect = true;
			this.__0x5639.Name = "resourcesBrowser1";
			this.__0x5639.ReadOnlyHierarchy = false;
			this.__0x5639.Size = new System.Drawing.Size(416, 596);
			this.__0x5639.TabIndex = 0;
			this.__0x5639.ThisIsSettingsWindow = false;
			this.__0x5639.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x5639.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Controls.Add(this.__0x5639);
			this.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.Name = "SolutionExplorer";
			this.Size = new System.Drawing.Size(416, 596);
			this.WindowTitle = "Solution Explorer";
			this.ResumeLayout(false);

		}

		#endregion

		private ContentBrowser __0x5639;
	}
}





namespace NeoAxis.Editor
{
	public partial class SpecifyParametersForm : EngineForm
	{
		__0x5675 __0x5643 = new __0x5675();

		public delegate bool CheckDelegate( ref string __0x5669 );
		CheckDelegate __0x5644;

		public delegate bool OKDelegate( ref string __0x5670 );
		OKDelegate __0x5645;

		bool __0x5646;

		

		public class PropertyImpl : Metadata.Property
		{
			IList<Attribute> __0x5647;
			string __0x5648;
			object __0x5649;

			

			public PropertyImpl( SpecifyParametersForm owner, string name, Metadata.TypeInfo type, IList<Attribute> attributes, string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.__0x5647 = attributes;
				this.__0x5648 = category;
				this.__0x5649 = value;
			}

			public IList<Attribute> Attributes
			{
				get { return __0x5647; }
				set { __0x5647 = value; }
			}

			public string Category
			{
				get { return __0x5648; }
				set { __0x5648 = value; }
			}

			public object Value
			{
				get { return __0x5649; }
				set { this.__0x5649 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x5650 = new List<object>();

				if( __0x5647 != null )
				{
					foreach( var __0x5661 in __0x5647 )
					{
						if( attributeType.IsAssignableFrom( __0x5661.GetType() ) )
							__0x5650.Add( __0x5661 );
					}
				}

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x5648 ) )
						__0x5650.Add( new CategoryAttribute( __0x5648 ) );
				}

				return __0x5650.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x5649;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				bool __0x5651 = !Equals( this.__0x5649, value );

				this.__0x5649 = value;

				if( __0x5651 )
				{
					var __0x5652 = (SpecifyParametersForm)Owner;
					__0x5652.__0x5665();
				}
			}
		}

		

		class __0x5675 : Metadata.IMetadataProvider
		{
			public List<PropertyImpl> properties = new List<PropertyImpl>();

			

			public Metadata.TypeInfo BaseType
			{
				get { return MetadataManager.GetTypeOfNetType( GetType() ); }
			}

			public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
			{
				foreach( var __0x5662 in properties )
					yield return __0x5662;
			}

			public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
			{
				foreach( var __0x5663 in properties )
				{
					if( __0x5663.Signature == signature )
						return __0x5663;
				}
				return null;
			}
		}

		

		public SpecifyParametersForm( string caption, object optionalObjectProvider, CheckDelegate checkHandler = null, OKDelegate okHandler = null )
		{
			this.__0x5644 = checkHandler;
			this.__0x5645 = okHandler;

			__0x5668();

			if( optionalObjectProvider != null )
				__0x5660.SetData( null, new object[] { optionalObjectProvider } );
			else
				__0x5660.SetData( null, new object[] { __0x5643 } );

			if( string.IsNullOrEmpty( caption ) )
				Text = EngineInfo.NameWithVersion;
			else
				Text = caption;

			__0x5659.Text = "";

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			__0x5659.ForeColor = Color.Red;
		}

		private void __0x5664( object __0x5671, EventArgs __0x5672 )
		{
			__0x5667();

			__0x5646 = true;

			
		}

		[Browsable( false )]
		public List<PropertyImpl> Properties
		{
			get
			{
				if( __0x5643 != null )
					return __0x5643.properties;
				else
					return new List<PropertyImpl>();
			}
		}

		[Browsable( false )]
		public CheckDelegate CheckHandler
		{
			get { return __0x5644; }
			set { __0x5644 = value; }
		}

		[Browsable( false )]
		public OKDelegate OKHandler
		{
			get { return __0x5645; }
			set { __0x5645 = value; }
		}

		public PropertyImpl AddProperty( string name, string category, object value, IList<Attribute> attributes = null )
		{
			var __0x5653 = new PropertyImpl( this, StringUtility.ToUpperFirstCharacter( name ), MetadataManager.GetTypeOfNetType( value.GetType() ), attributes, category, value );
			__0x5653.DefaultValueSpecified = true;
			__0x5653.DefaultValue = value;

			Properties.Add( __0x5653 );

			return __0x5653;
		}

		void __0x5665()
		{
			if( !__0x5646 )
				return;

			string __0x5654 = "";
			if( __0x5644 != null && !__0x5644( ref __0x5654 ) )
			{
				__0x5659.Text = __0x5654;
				__0x5657.Enabled = false;
			}
			else
			{
				__0x5659.Text = "";
				__0x5657.Enabled = true;
			}
		}

		private void __0x5666( object __0x5673, FormClosingEventArgs __0x5674 )
		{
			if( DialogResult == DialogResult.OK )
			{
				string __0x5655 = "";
				if( __0x5645 != null && !__0x5645( ref __0x5655 ) )
				{
					__0x5674.Cancel = true;
					__0x5659.Text = __0x5655;
					return;
				}
			}
		}

		void __0x5667()
		{
			__0x5658.Location = new Point( ClientSize.Width - __0x5658.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x5658.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x5657.Location = new Point( __0x5658.Location.X - __0x5657.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x5658.Location.Y );
			__0x5659.Location = new Point( __0x5659.Location.X, __0x5657.Location.Y + DpiHelper.Default.ScaleValue( 3 ) );
			__0x5660.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x5660.Location.X, __0x5657.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x5660.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x5667();
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class SpecifyParametersForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5656 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5656 != null ) )
			{
				__0x5656.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5668()
		{
			this.__0x5657 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5658 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5659 = new System.Windows.Forms.Label();
			this.__0x5660 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			
			this.__0x5657.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x5657.Location = new System.Drawing.Point(283, 432);
			this.__0x5657.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5657.Name = "buttonOK";
			this.__0x5657.Size = new System.Drawing.Size(117, 32);
			this.__0x5657.TabIndex = 1;
			this.__0x5657.Values.Text = "OK";
			
			
			
			
			this.__0x5658.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5658.Location = new System.Drawing.Point(409, 432);
			this.__0x5658.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5658.Name = "buttonCancel";
			this.__0x5658.Size = new System.Drawing.Size(117, 32);
			this.__0x5658.TabIndex = 2;
			this.__0x5658.Values.Text = "Cancel";
			
			
			
			
			this.__0x5659.AutoSize = true;
			this.__0x5659.ForeColor = System.Drawing.Color.Red;
			this.__0x5659.Location = new System.Drawing.Point(16, 411);
			this.__0x5659.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x5659.Name = "labelError";
			this.__0x5659.Size = new System.Drawing.Size(66, 17);
			this.__0x5659.TabIndex = 3;
			this.__0x5659.Text = "Error text";
			
			
			
			
   
   
			this.__0x5660.Location = new System.Drawing.Point(19, 16);
			this.__0x5660.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5660.Name = "hierarchicalContainer1";
			this.__0x5660.Size = new System.Drawing.Size(507, 392);
			this.__0x5660.SplitterPosition = 203;
			this.__0x5660.SplitterRatio = 0.4F;
			this.__0x5660.TabIndex = 4;
			
			
			
			this.AcceptButton = this.__0x5657;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x5658;
			this.ClientSize = new System.Drawing.Size(542, 479);
			this.Controls.Add(this.__0x5660);
			this.Controls.Add(this.__0x5659);
			this.Controls.Add(this.__0x5658);
			this.Controls.Add(this.__0x5657);
			
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "SpecifyParametersForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Form";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x5666);
			this.Load += new System.EventHandler(this.__0x5664);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5657;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5658;
		private System.Windows.Forms.Label __0x5659;
		private HierarchicalContainer __0x5660;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents splash screen of the editor.
	/// </summary>
	public partial class SplashForm : Form
	{
		static SplashForm __0x5676;

		float __0x5677;
		bool __0x5678;

		public SplashForm()
		{
			__0x5676 = this;
			__0x5687();

			
			

#if !DEPLOY
			var __0x5679 = Properties.Resources.Splash;
			Size = __0x5679.Size;
			BackgroundImage = __0x5679;
#endif
		}

		public static SplashForm Instance
		{
			get { return __0x5676; }
		}

		public bool AllowClose
		{
			get { return __0x5678; }
			set
			{
				if( value && !__0x5678 )
					__0x5683.Start();

				__0x5678 = value;
			}
		}

		private void __0x5685( object __0x5688, EventArgs __0x5689 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5677 += (float)__0x5683.Interval / 1000.0f;

			bool __0x5680 = true;
			
			
			
			
			
			
			
			

			float __0x5681 = 1.0f;

			if( __0x5680 )
			{
				if( __0x5677 > 0 )
					__0x5681 = ( 1.0f - __0x5677 ) / 1;
				if( __0x5681 < 0 )
					__0x5681 = 0;
			}

			if( Opacity != __0x5681 )
				Opacity = __0x5681;

			if( __0x5677 > 1 )
			{
				__0x5683.Stop();
				Close();
			}
		}

		private void __0x5686( object __0x5690, FormClosedEventArgs __0x5691 )
		{
			__0x5676 = null;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SplashForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5682 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5682 != null ) )
			{
				__0x5682.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5687()
		{
			this.__0x5682 = new System.ComponentModel.Container();
			this.__0x5683 = new System.Windows.Forms.Timer(this.__0x5682);
			this.__0x5684 = new System.Windows.Forms.Panel();
			this.SuspendLayout();
			
			
			
			this.__0x5683.Interval = 10;
			this.__0x5683.Tick += new System.EventHandler(this.__0x5685);
			
			
			
			this.__0x5684.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5684.BackColor = System.Drawing.Color.White;
			this.__0x5684.Location = new System.Drawing.Point(0, 337);
			this.__0x5684.Name = "panel1";
			this.__0x5684.Size = new System.Drawing.Size(609, 26);
			this.__0x5684.TabIndex = 0;
			this.__0x5684.Visible = false;
			
			
			
			this.BackColor = System.Drawing.Color.Black;
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
			this.ClientSize = new System.Drawing.Size(609, 363);
			this.Controls.Add(this.__0x5684);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Name = "SplashForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Splash";
			this.TopMost = true;
			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.__0x5686);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x5683;
		private System.Windows.Forms.Panel __0x5684;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Start Page.
	/// </summary>
	[RestoreDockWindowAfterEditorReload]
	public partial class StartPageWindow : DocumentWindow, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		string[] __0x5692 = new string[ 0 ];
		double __0x5693;

		static Image __0x5694;
		static Image __0x5695;

		
		private NeoAxis.Editor.EngineToolTip __0x5696;

		
		ESet<string> __0x5697 = new ESet<string>();
		bool __0x5698;

		

		public delegate void UpdateNewScenesDelegate( ref List<ContentBrowser.Item> __0x5807 );
		public static event UpdateNewScenesDelegate UpdateNewScenes;

		public StartPageWindow()
		{
			__0x5806();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5696 = new EngineToolTip();
			
			this.__0x5696.SetToolTip( this.__0x5761, "Set the light theme." );
			this.__0x5696.SetToolTip( this.__0x5762, "Set the dark theme." );

			if( EditorAPI.DarkTheme )
				BackColor = Color.FromArgb( 40, 40, 40 );

			var __0x5699 = 68;

			
			{
				__0x5770.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
				__0x5770.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
				__0x5770.UseSelectedTreeNodeAsRootForList = false;
				__0x5770.Options.Breadcrumb = false;
				__0x5770.Options.TileImageSize = __0x5699;

				
				try
				{
					var __0x5700 = new List<ContentBrowser.Item>();

					
					foreach( var __0x5777 in Scene.NewObjectSettingsScene.GetTemplates() )
					{
						__0x5770.AddImageKey( __0x5777.Name, __0x5777.Preview );

						var __0x5701 = new ContentBrowserItem_Virtual( __0x5770, null, __0x5777.ToString() + " scene" );
						__0x5701.Tag = __0x5777;
						__0x5701.imageKey = __0x5777.Name;

						__0x5700.Add( __0x5701 );
					}

					
					{
						var __0x5702 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\UIControl.ui" );
						if( File.Exists( __0x5702 ) )
						{
							var __0x5703 = Path.GetFileNameWithoutExtension( __0x5702 );

							if( __0x5694 == null )
							{
								var __0x5704 = Path.Combine( Path.GetDirectoryName( __0x5702 ), __0x5703 + ".png" );
								__0x5694 = File.Exists( __0x5704 ) ? Image.FromFile( __0x5704 ) : null;
							}

							if( __0x5694 != null )
								__0x5770.AddImageKey( __0x5703, __0x5694 );

							var __0x5705 = new ContentBrowserItem_Virtual( __0x5770, null, "UI Control" );
							__0x5705.Tag = "UIControl";
							if( __0x5694 != null )
								__0x5705.imageKey = __0x5703;

							__0x5700.Add( __0x5705 );
						}
					}

					
					{
						var __0x5706 = "SelectResource";

						if( __0x5695 == null )
						{
							var __0x5707 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\Resource.png" );
							__0x5695 = File.Exists( __0x5707 ) ? Image.FromFile( __0x5707 ) : null;
						}

						if( __0x5695 != null )
							__0x5770.AddImageKey( __0x5706, __0x5695 );

						var __0x5708 = new ContentBrowserItem_Virtual( __0x5770, null, "Select type" );
						__0x5708.Tag = "Resource";
						if( __0x5695 != null )
							__0x5708.imageKey = __0x5706;

						__0x5700.Add( __0x5708 );
					}

					
					
					
					
					
					

					

					
					

					
					
					
					
					
					

					

					
					

					UpdateNewScenes?.Invoke( ref __0x5700 );

					if( __0x5700.Count != 0 )
					{
						__0x5770.SetData( __0x5700, false );
						__0x5770.SelectItems( new ContentBrowser.Item[] { __0x5700[ 0 ] } );
					}
				}
				catch( Exception e2 )
				{
					Log.Warning( e2.Message );
				}

				__0x5770.ItemAfterChoose += __0x5791;
				__0x5771.Click += __0x5790;

				__0x5804();
			}

			
			{
				

				__0x5697.Add( "Sci_fi_Demo" );
				__0x5697.Add( "Nature_Demo" );

				
				__0x5697.Add( "Basic_Materials_2K" );
				__0x5697.Add( "Basic_Environments_4K" );

				

				
				__0x5697.Add( "Platform_Tools" );


				__0x5774.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
				__0x5774.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
				__0x5774.UseSelectedTreeNodeAsRootForList = false;
				__0x5774.Options.Breadcrumb = false;
				__0x5774.Options.TileImageSize = __0x5699;

				__0x5774.AddImageKey( "Default_512", Properties.Resources.Default_512 );

				__0x5774.ItemAfterChoose += __0x5801;
				__0x5775.Click += __0x5800;

				__0x5805();
			}

			
			{
				__0x5763.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
				__0x5763.Options.ListMode = ContentBrowser.ListModeEnum.List;
				__0x5763.UseSelectedTreeNodeAsRootForList = false;
				__0x5763.Options.Breadcrumb = false;

				var __0x5709 = EditorAPI.DPIScale >= 1.25f ? 13 : 16;

				__0x5763.Options.ListImageSize = __0x5709;
				__0x5763.Options.ListColumnWidth = 10000;
				__0x5763.ListViewModeOverride = new EngineListView.DefaultListMode( __0x5763.GetListView(), __0x5709 );

				__0x5763.PreloadResourceOnSelection = false;

				__0x5796();
			}

			WindowTitle = __0x5784( WindowTitle );
		}

		private void __0x5782( object __0x5808, EventArgs __0x5809 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			EditorLocalization.TranslateForm( "StartPageWindow", this );

			__0x5758.Start();

			__0x5783();

			if( EditorActions.GetByName( "Store" ) != null && EditorActions.GetByName( "Store" ).CompletelyDisabled )
				__0x5765.Visible = false;
		}

		void __0x5783()
		{
			__0x5771.Enabled = __0x5770.SelectedItemsOnlyListView.Length == 1;
			__0x5775.Enabled = __0x5774.SelectedItemsOnlyListView.Length == 1;
			__0x5764.Enabled = __0x5763.SelectedItems.Length == 1;

			__0x5761.Enabled = ProjectSettings.Get.General.Theme.Value != ProjectSettingsPage_General.ThemeEnum.Light;
			__0x5762.Enabled = ProjectSettings.Get.General.Theme.Value != ProjectSettingsPage_General.ThemeEnum.Dark;

			__0x5767.Checked = EditorForm.Instance.kryptonRibbon.MinimizedMode;
			__0x5768.Checked = EditorForm.Instance.kryptonRibbon.QATLocation == Internal.ComponentFactory.Krypton.Ribbon.QATLocation.Below;
		}

		string __0x5784( string __0x5810 )
		{
			return EditorLocalization.Translate( "StartPageWindow", __0x5810 );
		}

		private void __0x5785( object __0x5811, EventArgs __0x5812 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5783();

			var __0x5710 = Time.Current;
			if( __0x5710 > __0x5693 + 1.0 )
			{
				__0x5693 = __0x5710;
				__0x5796();
			}

			
			if( !__0x5698 )
			{
				var __0x5711 = StoreManager.GetStore( "NeoAxis Store" );
				if( __0x5711 != null )
				{
					var __0x5712 = StoreManager.GetPackages( __0x5711 );
					if( __0x5712.Length != 0 )
					{
						__0x5698 = true;
						__0x5799( __0x5712 );
					}
				}
			}

			__0x5803();
		}

		private void __0x5786( object __0x5813, EventArgs __0x5814 )
		{
			EditorAPI.OpenStoresWindow();
			
		}

		private void __0x5787( object __0x5815, EventArgs __0x5816 )
		{
			if( EditorMessageBox.ShowQuestion( "Set the light theme and restart the editor to apply changes?", EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			ProjectSettings.Get.General.Theme = ProjectSettingsPage_General.ThemeEnum.Light;
			ProjectSettings.SaveToFileAndUpdate();
			EditorAPI.BeginRestartApplication();
		}

		private void __0x5788( object __0x5817, EventArgs __0x5818 )
		{
			if( EditorMessageBox.ShowQuestion( "Set the dark theme and restart the editor to apply changes?", EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			ProjectSettings.Get.General.Theme = ProjectSettingsPage_General.ThemeEnum.Dark;
			ProjectSettings.SaveToFileAndUpdate();
			EditorAPI.BeginRestartApplication();
		}

		private void __0x5789( object __0x5819, EventArgs __0x5820 )
		{
			if( __0x5763.SelectedItems.Length == 1 )
			{
				var __0x5713 = __0x5763.SelectedItems[ 0 ];
				var __0x5714 = __0x5713.Tag as string;

				if( !string.IsNullOrEmpty( __0x5714 ) )
					EditorAPI.OpenFileAsDocument( VirtualPathUtility.GetRealPathByVirtual( __0x5714 ), true, true );
			}
		}

		private void __0x5790( object __0x5821, EventArgs __0x5822 )
		{
			if( __0x5770.SelectedItemsOnlyListView.Length == 1 )
			{
				var __0x5715 = __0x5770.SelectedItemsOnlyListView[ 0 ];
				__0x5792( __0x5715 );
			}
		}

		private void __0x5791( ContentBrowser __0x5823, ContentBrowser.Item __0x5824, ref bool __0x5825 )
		{
			if( __0x5824 != null )
				__0x5792( __0x5824 );
		}

		void __0x5792( ContentBrowser.Item __0x5826 )
		{
			if( __0x5826.Tag as Scene.NewObjectSettingsScene.TemplateClass != null )
				__0x5793( __0x5826 );
			else if( __0x5826.Tag as string != null && __0x5826.Tag as string == "UIControl" )
				__0x5794();
			else
				__0x5795();
		}

		void __0x5793( ContentBrowser.Item __0x5827 )
		{
			try
			{
				var __0x5716 = VirtualDirectory.Exists( "Scenes" ) ? @"Scenes\" : "";

				string __0x5717 = null;
				for( int __0x5718 = 1; ; __0x5718++ )
				{
					string __0x5719 = __0x5716 + string.Format( @"New{0}.scene", __0x5718 > 1 ? __0x5718.ToString() : "" );
					if( !VirtualFile.Exists( __0x5719 ) )
					{
						__0x5717 = __0x5719;
						break;
					}
				}

				if( !string.IsNullOrEmpty( __0x5717 ) )
				{
					var __0x5720 = VirtualPathUtility.GetRealPathByVirtual( __0x5717 );

					var __0x5721 = (Scene.NewObjectSettingsScene.TemplateClass)__0x5827.Tag;
					string __0x5722 = __0x5721.Name + ".scene";
					var __0x5723 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\" + __0x5722 );

					

					var __0x5724 = File.ReadAllText( __0x5723 );

					var __0x5725 = Path.GetDirectoryName( __0x5720 );
					if( !Directory.Exists( __0x5725 ) )
						Directory.CreateDirectory( __0x5725 );

					File.WriteAllText( __0x5720, __0x5724 );

					
					var __0x5726 = __0x5723 + "_Files";
					if( Directory.Exists( __0x5726 ) )
					{
						var __0x5727 = __0x5720 + "_Files";
						IOUtility.CopyDirectory( __0x5726, __0x5727 );
					}

					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x5720 } );
					EditorAPI.OpenFileAsDocument( __0x5720, true, true );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				
				return;
			}
		}

		void __0x5794()
		{
			try
			{
				var __0x5728 = VirtualDirectory.Exists( "UI" ) ? @"UI\" : "";

				string __0x5729 = null;
				for( int __0x5730 = 1; ; __0x5730++ )
				{
					string __0x5731 = __0x5728 + string.Format( @"New{0}.ui", __0x5730 > 1 ? __0x5730.ToString() : "" );
					if( !VirtualFile.Exists( __0x5731 ) )
					{
						__0x5729 = __0x5731;
						break;
					}
				}

				if( !string.IsNullOrEmpty( __0x5729 ) )
				{
					var __0x5732 = VirtualPathUtility.GetRealPathByVirtual( __0x5729 );

					var __0x5733 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\UIControl.ui" );

					var __0x5734 = VirtualFile.ReadAllText( __0x5733 );

					var __0x5735 = Path.GetDirectoryName( __0x5732 );
					if( !Directory.Exists( __0x5735 ) )
						Directory.CreateDirectory( __0x5735 );

					File.WriteAllText( __0x5732, __0x5734 );

					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x5732 } );
					EditorAPI.OpenFileAsDocument( __0x5732, true, true );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				
				return;
			}
		}

		void __0x5795()
		{
			var __0x5736 = new NewObjectWindow.CreationDataClass();
			EditorAPI.OpenNewObjectWindow( __0x5736 );
		}

		void __0x5796()
		{
			string[] __0x5737 = new string[ 0 ];
			try
			{
				__0x5737 = VirtualDirectory.GetFiles( "", "*.scene", SearchOption.AllDirectories );

				CollectionUtility.MergeSort( __0x5737, delegate ( string __0x5828, string __0x5829 )
				{
					var __0x5738 = __0x5828.Replace( "\\", " \\" );
					var __0x5739 = __0x5829.Replace( "\\", " \\" );
					return string.Compare( __0x5738, __0x5739 );
				} );
			}
			catch { }

			bool __0x5740 = !__0x5737.SequenceEqual( __0x5692 );
			if( !__0x5740 )
				return;

			__0x5692 = __0x5737;

			
			try
			{
				var __0x5741 = new List<ContentBrowser.Item>();

				foreach( var __0x5778 in __0x5692 )
				{
					if( !__0x5778.Contains( @"Base\Tools\NewResourceTemplates" ) )
					{
						var __0x5742 = VirtualPathUtility.GetRealPathByVirtual( __0x5778 );

						var __0x5743 = new ContentBrowserItem_File( __0x5763, null, __0x5742, false );
						__0x5743.SetText( __0x5778 );
						__0x5743.Tag = __0x5778;
						__0x5743.imageKey = "Scene";

						__0x5741.Add( __0x5743 );
					}
				}

				__0x5763.SetData( __0x5741, false );
				if( __0x5741.Count != 0 )
					__0x5763.SelectItems( new ContentBrowser.Item[] { __0x5741[ 0 ] } );
			}
			catch( Exception e2 )
			{
				Log.Warning( e2.Message );
			}
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x5744 = base.CreateParams;
				__0x5744.ExStyle |= 0x02000000;
				return __0x5744;
			}
		}

		private void __0x5797( object __0x5830, EventArgs __0x5831 )
		{
			EditorForm.Instance.kryptonRibbon.MinimizedMode = __0x5767.Checked;
		}

		private void __0x5798( object __0x5832, EventArgs __0x5833 )
		{
			EditorForm.Instance.kryptonRibbon.QATLocation = __0x5768.Checked ? Internal.ComponentFactory.Krypton.Ribbon.QATLocation.Below : Internal.ComponentFactory.Krypton.Ribbon.QATLocation.Above;
		}

		
		
		
		

		
		
		
		

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			if( IsHandleCreated )
			{
				var __0x5745 = __0x5773.Location.X - ( __0x5769.Location.X + __0x5769.Width );

				__0x5769.Width = Width / 2 - __0x5745 / 2 - __0x5769.Location.X;
				__0x5773.Location = new Point( __0x5769.Location.X + __0x5769.Width + __0x5745, __0x5773.Location.Y );
				__0x5773.Width = __0x5769.Width;
			}
		}

		void __0x5799( string[] __0x5834 )
		{
			try
			{
				var __0x5746 = new ESet<string>();
				foreach( var __0x5779 in __0x5834 )
					__0x5746.AddWithCheckAlreadyContained( __0x5779 );


				var __0x5747 = new List<ContentBrowser.Item>();

				foreach( var __0x5780 in __0x5697 )
				
				{
					if( __0x5746.Contains( __0x5780 ) )
					
					{
						var __0x5748 = StoreManager.GetPackageInfo( __0x5780, false );
						

						if( __0x5748 != null )
						{
							var __0x5749 = new ContentBrowserItem_Virtual( __0x5770, null, __0x5748.Title );
							__0x5749.Tag = __0x5748.Identifier;
							__0x5749.imageKey = "Default_512";
							__0x5749.Description = __0x5748.GetTooltipDescription();
							__0x5747.Add( __0x5749 );
						}
					}
				}

				

				__0x5774.SetData( __0x5747, false );
				
				
			}
			catch( Exception e2 )
			{
				Log.Warning( e2.Message );
			}
		}

		private void __0x5800( object __0x5835, EventArgs __0x5836 )
		{
			if( __0x5774.SelectedItemsOnlyListView.Length == 1 )
			{
				var __0x5750 = __0x5774.SelectedItemsOnlyListView[ 0 ];
				__0x5802( __0x5750 );
			}
		}

		private void __0x5801( ContentBrowser __0x5837, ContentBrowser.Item __0x5838, ref bool __0x5839 )
		{
			if( __0x5838 != null )
				__0x5802( __0x5838 );
		}

		void __0x5802( ContentBrowser.Item __0x5840 )
		{
			EditorAPI.OpenPackages( (string)__0x5840.Tag, false );
		}

		void __0x5803()
		{
#if !DEPLOY
			try
			{
				var __0x5751 = EngineApp.GetSystemTime();

				foreach( var __0x5781 in __0x5774.GetAllItems() )
				{
					var __0x5752 = (string)__0x5781.Tag;

					var __0x5753 = StoreManager.GetPackageInfo( __0x5752, false );
					if( __0x5753 != null && !string.IsNullOrEmpty( __0x5753.Thumbnail ) )
					{
						var __0x5754 = StoreManager.ImageManager.GetSquareImage( __0x5753.Thumbnail, __0x5751 );
						if( __0x5754 != null && __0x5781.image != __0x5754 )
						{
							__0x5781.image = __0x5754;

							
							__0x5774.needUpdateImages = true;
						}
					}
				}
			}
			catch( Exception e2 )
			{
				Log.Warning( e2.Message );
			}
#endif
		}

		void __0x5804()
		{
			__0x5770.ShowContextMenuEvent += delegate ( ContentBrowser __0x5841, ContentBrowser.Item __0x5842, List<KryptonContextMenuItemBase> __0x5843 )
			{
				if( __0x5842 != null && __0x5841.SelectedItemsOnlyListView.Length != 0 )
				{
					var __0x5755 = new KryptonContextMenuItem( __0x5784( "Create" ), null, delegate ( object __0x5844, EventArgs __0x5845 )
					{
						__0x5792( __0x5842 );
					} );
					__0x5843.Add( __0x5755 );
				}
			};
		}

		void __0x5805()
		{
			__0x5774.ShowContextMenuEvent += delegate ( ContentBrowser __0x5846, ContentBrowser.Item __0x5847, List<KryptonContextMenuItemBase> __0x5848 )
			{
				if( __0x5847 != null && __0x5846.SelectedItemsOnlyListView.Length != 0 )
				{
					var __0x5756 = new KryptonContextMenuItem( __0x5784( "Learn More" ), null, delegate ( object __0x5849, EventArgs __0x5850 )
					{
						__0x5802( __0x5847 );
					} );
					__0x5848.Add( __0x5756 );
				}
			};
		}

	}
}

namespace NeoAxis.Editor
{
    partial class StartPageWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5757 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5757 != null))
            {
                __0x5757.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5806()
        {
			this.__0x5757 = new System.ComponentModel.Container();
			this.__0x5758 = new System.Windows.Forms.Timer(this.__0x5757);
			this.__0x5759 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5760 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5761 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5762 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5763 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5764 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5765 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5766 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5767 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.__0x5768 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.__0x5769 = new System.Windows.Forms.Panel();
			this.__0x5770 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5771 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5772 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5773 = new System.Windows.Forms.Panel();
			this.__0x5774 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5775 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5776 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5769.SuspendLayout();
			this.__0x5773.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x5758.Tick += new System.EventHandler(this.__0x5785);
			
			
			
			this.__0x5759.Location = new System.Drawing.Point(23, 23);
			this.__0x5759.Name = "kryptonLabelSelectTheme";
			this.__0x5759.Size = new System.Drawing.Size(95, 19);
			this.__0x5759.TabIndex = 0;
			this.__0x5759.Values.Text = "Select theme:";
			
			
			
			this.__0x5760.Location = new System.Drawing.Point(23, 530);
			this.__0x5760.Name = "kryptonLabelOpenScene";
			this.__0x5760.Size = new System.Drawing.Size(90, 19);
			this.__0x5760.TabIndex = 0;
			this.__0x5760.Values.Text = "Open scene:";
			
			
			
			this.__0x5761.Location = new System.Drawing.Point(26, 48);
			this.__0x5761.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5761.Name = "kryptonButtonLightTheme";
			this.__0x5761.Size = new System.Drawing.Size(140, 102);
			this.__0x5761.StateCommon.Back.Image = global::NeoAxis.Properties.Resources.LightThemePreview;
			this.__0x5761.TabIndex = 0;
			this.__0x5761.Values.Text = "";
			this.__0x5761.Click += new System.EventHandler(this.__0x5787);
			
			
			
			this.__0x5762.Location = new System.Drawing.Point(174, 48);
			this.__0x5762.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5762.Name = "kryptonButtonDarkTheme";
			this.__0x5762.Size = new System.Drawing.Size(140, 102);
			this.__0x5762.StateCommon.Back.Image = global::NeoAxis.Properties.Resources.DarkThemePreview;
			this.__0x5762.TabIndex = 1;
			this.__0x5762.Values.Text = "";
			this.__0x5762.Click += new System.EventHandler(this.__0x5788);
			
			
			
			this.__0x5763.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5763.FilteringMode = null;
			this.__0x5763.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
			this.__0x5763.ListViewModeOverride = null;
			this.__0x5763.Location = new System.Drawing.Point(26, 554);
			this.__0x5763.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5763.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5763.Name = "contentBrowserOpenScene";
			this.__0x5763.ReadOnlyHierarchy = false;
			this.__0x5763.ShowToolBar = false;
			this.__0x5763.Size = new System.Drawing.Size(904, 175);
			this.__0x5763.TabIndex = 8;
			this.__0x5763.ThisIsSettingsWindow = false;
			
			
			
			this.__0x5764.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5764.Location = new System.Drawing.Point(26, 735);
			this.__0x5764.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5764.Name = "kryptonButtonOpenScene";
			this.__0x5764.Size = new System.Drawing.Size(117, 32);
			this.__0x5764.TabIndex = 9;
			this.__0x5764.Values.Text = "Open Scene";
			this.__0x5764.Click += new System.EventHandler(this.__0x5789);
			
			
			
			this.__0x5765.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5765.Location = new System.Drawing.Point(780, 23);
			this.__0x5765.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5765.Name = "kryptonButtonOpenStore";
			this.__0x5765.Size = new System.Drawing.Size(147, 32);
			this.__0x5765.TabIndex = 10;
			this.__0x5765.Values.Text = "Get Content";
			this.__0x5765.Visible = false;
			this.__0x5765.Click += new System.EventHandler(this.__0x5786);
			
			
			
			this.__0x5766.Location = new System.Drawing.Point(349, 23);
			this.__0x5766.Name = "kryptonLabelEditorConfiguration";
			this.__0x5766.Size = new System.Drawing.Size(131, 19);
			this.__0x5766.TabIndex = 7;
			this.__0x5766.Values.Text = "Editor configuration:";
			
			
			
			this.__0x5767.Location = new System.Drawing.Point(355, 50);
			this.__0x5767.Name = "kryptonCheckBoxMinimizeRibbon";
			this.__0x5767.Size = new System.Drawing.Size(150, 19);
			this.__0x5767.TabIndex = 2;
			this.__0x5767.Values.Text = "Minimize the Ribbon";
			this.__0x5767.CheckedChanged += new System.EventHandler(this.__0x5797);
			
			
			
			this.__0x5768.Location = new System.Drawing.Point(355, 76);
			this.__0x5768.Name = "kryptonCheckBoxShowQATBelowRibbon";
			this.__0x5768.Size = new System.Drawing.Size(306, 19);
			this.__0x5768.TabIndex = 3;
			this.__0x5768.Values.Text = "Show Quick Access Toolbar below the Ribbon";
			this.__0x5768.CheckedChanged += new System.EventHandler(this.__0x5798);
			
			
			
			this.__0x5769.Controls.Add(this.__0x5770);
			this.__0x5769.Controls.Add(this.__0x5771);
			this.__0x5769.Controls.Add(this.__0x5772);
			this.__0x5769.Location = new System.Drawing.Point(26, 172);
			this.__0x5769.Name = "panelNewResource";
			this.__0x5769.Size = new System.Drawing.Size(404, 336);
			this.__0x5769.TabIndex = 9;
			
			
			
			this.__0x5770.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5770.FilteringMode = null;
			this.__0x5770.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
			this.__0x5770.ListViewModeOverride = null;
			this.__0x5770.Location = new System.Drawing.Point(0, 24);
			this.__0x5770.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5770.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5770.Name = "contentBrowserNewScene";
			this.__0x5770.ReadOnlyHierarchy = false;
			this.__0x5770.ShowToolBar = false;
			this.__0x5770.Size = new System.Drawing.Size(404, 274);
			this.__0x5770.TabIndex = 4;
			this.__0x5770.ThisIsSettingsWindow = false;
			
			
			
			this.__0x5771.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5771.Location = new System.Drawing.Point(0, 304);
			this.__0x5771.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5771.Name = "buttonCreateScene";
			this.__0x5771.Size = new System.Drawing.Size(117, 32);
			this.__0x5771.TabIndex = 5;
			this.__0x5771.Values.Text = "Create";
			
			
			
			this.__0x5772.Location = new System.Drawing.Point(-2, 0);
			this.__0x5772.Name = "kryptonLabelNewResource";
			this.__0x5772.Size = new System.Drawing.Size(100, 19);
			this.__0x5772.TabIndex = 1;
			this.__0x5772.Values.Text = "New resource:";
			
			
			
			this.__0x5773.Controls.Add(this.__0x5774);
			this.__0x5773.Controls.Add(this.__0x5775);
			this.__0x5773.Controls.Add(this.__0x5776);
			this.__0x5773.Location = new System.Drawing.Point(436, 172);
			this.__0x5773.Name = "panelStoreItems";
			this.__0x5773.Size = new System.Drawing.Size(491, 336);
			this.__0x5773.TabIndex = 10;
			
			
			
			this.__0x5774.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5774.FilteringMode = null;
			this.__0x5774.Font = new System.Drawing.Font("Microsoft Sans Serif", 8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point);
			this.__0x5774.ListViewModeOverride = null;
			this.__0x5774.Location = new System.Drawing.Point(0, 24);
			this.__0x5774.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5774.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5774.Name = "contentBrowserStoreItems";
			this.__0x5774.ReadOnlyHierarchy = false;
			this.__0x5774.ShowToolBar = false;
			this.__0x5774.Size = new System.Drawing.Size(491, 274);
			this.__0x5774.TabIndex = 6;
			this.__0x5774.ThisIsSettingsWindow = false;
			
			
			
			this.__0x5775.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5775.Location = new System.Drawing.Point(0, 304);
			this.__0x5775.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5775.Name = "kryptonButtonInstallStoreItem";
			this.__0x5775.Size = new System.Drawing.Size(117, 32);
			this.__0x5775.TabIndex = 7;
			this.__0x5775.Values.Text = "Learn More";
			
			
			
			this.__0x5776.Location = new System.Drawing.Point(-2, 0);
			this.__0x5776.Name = "kryptonLabelStoreItems";
			this.__0x5776.Size = new System.Drawing.Size(139, 19);
			this.__0x5776.TabIndex = 9;
			this.__0x5776.Values.Text = "Featured store items:";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x5773);
			this.Controls.Add(this.__0x5769);
			this.Controls.Add(this.__0x5768);
			this.Controls.Add(this.__0x5767);
			this.Controls.Add(this.__0x5766);
			this.Controls.Add(this.__0x5765);
			this.Controls.Add(this.__0x5764);
			this.Controls.Add(this.__0x5763);
			this.Controls.Add(this.__0x5762);
			this.Controls.Add(this.__0x5761);
			this.Controls.Add(this.__0x5760);
			this.Controls.Add(this.__0x5759);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "StartPageWindow";
			this.Size = new System.Drawing.Size(957, 789);
			this.WindowTitle = "Start Page";
			this.Load += new System.EventHandler(this.__0x5782);
			this.__0x5769.ResumeLayout(false);
			this.__0x5769.PerformLayout();
			this.__0x5773.ResumeLayout(false);
			this.__0x5773.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion
		private System.Windows.Forms.Timer __0x5758;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5759;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5760;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5761;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5762;
		private ContentBrowser __0x5763;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5764;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5765;
		
		
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5766;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5767;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5768;
		private System.Windows.Forms.Panel __0x5769;
		private ContentBrowser __0x5770;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5771;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5772;
		private System.Windows.Forms.Panel __0x5773;
		private ContentBrowser __0x5774;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5775;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5776;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Tips Window.
	/// </summary>
	public partial class TipsWindow : DocumentWindowWithViewport
	{
		UIWebBrowser __0x5851;
		UIControl __0x5852;

		List<string> __0x5853;
		int __0x5854;

		bool __0x5855;

		bool __0x5856 = true;
		

		bool __0x5857 = true;
		bool __0x5858;
		int __0x5859;

		

		public TipsWindow()
		{
			__0x5896();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			WindowTitle = EditorLocalization.Translate( "TipsWindow", WindowTitle );
			EditorLocalization.TranslateForm( "TipsWindow", __0x5883 );

			BackColor = Color.FromArgb( 54, 54, 54 );
			if( EditorAPI.DarkTheme )
				__0x5883.BackColor = BackColor;
			else
				__0x5883.BackColor = Color.FromArgb( 240, 240, 240 );

			__0x5877.Checked = EditorSettingsSerialization.ShowTipsAsStartup;
		}

		private void __0x5885( object __0x5897, EventArgs __0x5898 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			ViewportControl.Dock = __0x5882.Dock;
			ViewportControl.Anchor = __0x5882.Anchor;
			ViewportControl.Location = __0x5882.Location;
			ViewportControl.Size = __0x5882.Size;

			__0x5876.Start();

			__0x5853 = __0x5887();
			__0x5886( 0 );

			__0x5855 = true;
		}

		void __0x5886( int __0x5899 )
		{
			if( __0x5899 < 0 || __0x5899 >= __0x5853.Count )
				return;

			__0x5854 = __0x5899;
			var __0x5860 = __0x5853[ __0x5899 ];

			if( __0x5851 != null )
				__0x5851.StartFile = __0x5860;

			__0x5881.Text = $"{__0x5899 + 1}/{__0x5853.Count}";
		}

		List<string> __0x5887()
		{
			var __0x5861 = new List<string>();

			var __0x5862 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Tips" );

			try
			{
				var __0x5863 = Directory.GetFiles( __0x5862, "*.html" );

				for( int __0x5864 = 1; ; __0x5864++ )
				{
					string __0x5865 = "";

					foreach( var __0x5884 in __0x5863 )
					{
						var __0x5866 = Path.GetFileName( __0x5884 );

						if( __0x5866.Length > 3 && __0x5866[ 2 ] == '_' )
						{
							var __0x5867 = __0x5866.Substring( 0, 2 );
							if( int.TryParse( __0x5867, out var number ) )
							{
								if( number == __0x5864 )
								{
									__0x5865 = __0x5884;
									break;
								}
							}
						}
					}

					if( string.IsNullOrEmpty( __0x5865 ) )
						break;

					if( EditorLocalization.Initialized )
					{
						try
						{
							var __0x5868 = Path.GetDirectoryName( __0x5865 );
							var __0x5869 = Path.GetFileName( __0x5865 );
							var __0x5870 = Path.Combine( __0x5868, EditorLocalization.Language + "_" + __0x5869 );
							if( File.Exists( __0x5870 ) )
								__0x5865 = __0x5870;
						}
						catch { }
					}

					__0x5861.Add( __0x5865 );
				}
			}
			catch { }

			return __0x5861;
		}

		private void __0x5888( object __0x5900, EventArgs __0x5901 )
		{
			Close();
		}

		private void __0x5889( object __0x5902, EventArgs __0x5903 )
		{
			int __0x5871 = __0x5854 + 1;
			if( __0x5871 >= __0x5853.Count )
				__0x5871 = 0;
			__0x5886( __0x5871 );
		}

		private void __0x5890( object __0x5904, EventArgs __0x5905 )
		{
			int __0x5872 = __0x5854 - 1;
			if( __0x5872 < 0 )
				__0x5872 = __0x5853.Count - 1;
			__0x5886( __0x5872 );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			var __0x5873 = sender.Viewport.UIContainer;
			__0x5873.AfterRenderUIWithChildren += __0x5893;

			__0x5851 = __0x5873.CreateComponent<UIWebBrowser>( enabled: false );
			__0x5851.LoadStart += __0x5891;
			__0x5851.LoadEnd += __0x5892;
			__0x5886( __0x5854 );
			__0x5851.Enabled = true;

			__0x5852 = __0x5873.CreateComponent<UIControl>( enabled: false );
			__0x5852.Margin = new UIMeasureValueRectangle( UIMeasure.Screen, Rectangle.Zero );
			__0x5852.Size = new UIMeasureValueVector2( UIMeasure.Screen, Vector2.One );
			__0x5852.BackgroundColor = new ColorValue( 54.0 / 255.0, 54.0 / 255.0, 54.0 / 255.0 );
			__0x5852.Enabled = true;

			
			
		}

		private void __0x5891( UIWebBrowser __0x5906, object __0x5907 )
		{
			if( __0x5857 )
				__0x5858 = false;
		}

		private void __0x5892( UIWebBrowser __0x5908, object __0x5909, int __0x5910 )
		{
			if( __0x5857 )
			{
				__0x5858 = true;
				__0x5859 = 10;

				__0x5857 = false;
			}
		}

		private void __0x5893( UIControl __0x5911, CanvasRenderer __0x5912 )
		{
			if( __0x5858 && __0x5859 > 0 )
				__0x5859--;

			if( !__0x5858 || __0x5859 != 0 )
				__0x5912.AddQuad( new Rectangle( 0, 0, 1, 1 ), new ColorValue( 54.0 / 255.0, 54.0 / 255.0, 54.0 / 255.0 ) );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x5859 = 10;
			__0x5856 = true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			
			

			var __0x5874 = __0x5856;
			if( __0x5852 != null )
				__0x5852.Visible = __0x5874;

			__0x5856 = false;

			viewport.UIContainer.PerformRenderUI( viewport.CanvasRenderer );
		}

		private void __0x5894( object __0x5913, EventArgs __0x5914 )
		{
			if( __0x5855 )
				EditorSettingsSerialization.ShowTipsAsStartup = __0x5877.Checked;
		}

		private void __0x5895( object __0x5915, EventArgs __0x5916 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

		}
	}
}

namespace NeoAxis.Editor
{
	partial class TipsWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5875 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5875 != null ) )
			{
				__0x5875.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5896()
		{
			this.__0x5875 = new System.ComponentModel.Container();
			this.__0x5876 = new System.Windows.Forms.Timer(this.__0x5875);
			this.__0x5877 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.__0x5878 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5879 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5880 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5881 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5882 = new System.Windows.Forms.Panel();
			this.__0x5883 = new System.Windows.Forms.Panel();
			this.__0x5883.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x5876.Tick += new System.EventHandler(this.__0x5895);
			
			
			
			this.__0x5877.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5877.Location = new System.Drawing.Point(14, 18);
			this.__0x5877.Name = "kryptonCheckBoxShowTipsAtStartup";
			this.__0x5877.Size = new System.Drawing.Size(155, 20);
			this.__0x5877.TabIndex = 0;
			this.__0x5877.Values.Text = "Show tips at startup";
			this.__0x5877.CheckedChanged += new System.EventHandler(this.__0x5894);
			
			
			
			this.__0x5878.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5878.Location = new System.Drawing.Point(384, 12);
			this.__0x5878.Name = "kryptonButtonPrevious";
			this.__0x5878.Size = new System.Drawing.Size(117, 32);
			this.__0x5878.TabIndex = 1;
			this.__0x5878.Values.Text = "Previous";
			this.__0x5878.Click += new System.EventHandler(this.__0x5890);
			
			
			
			this.__0x5879.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5879.Location = new System.Drawing.Point(507, 12);
			this.__0x5879.Name = "kryptonButtonNext";
			this.__0x5879.Size = new System.Drawing.Size(117, 32);
			this.__0x5879.TabIndex = 2;
			this.__0x5879.Values.Text = "Next";
			this.__0x5879.Click += new System.EventHandler(this.__0x5889);
			
			
			
			this.__0x5880.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5880.Location = new System.Drawing.Point(630, 12);
			this.__0x5880.Name = "kryptonButtonClose";
			this.__0x5880.Size = new System.Drawing.Size(117, 32);
			this.__0x5880.TabIndex = 3;
			this.__0x5880.Values.Text = "Close";
			this.__0x5880.Click += new System.EventHandler(this.__0x5888);
			
			
			
			this.__0x5881.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5881.Location = new System.Drawing.Point(303, 14);
			this.__0x5881.Name = "tipNumberLabel";
			this.__0x5881.Size = new System.Drawing.Size(69, 28);
			this.__0x5881.StateCommon.ShortText.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x5881.TabIndex = 7;
			this.__0x5881.Values.Text = "10/10";
			
			
			
			this.__0x5882.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5882.Location = new System.Drawing.Point(12, 42);
			this.__0x5882.Name = "panel1";
			this.__0x5882.Size = new System.Drawing.Size(734, 439);
			this.__0x5882.TabIndex = 8;
			this.__0x5882.Visible = false;
			
			
			
			this.__0x5883.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5883.Controls.Add(this.__0x5877);
			this.__0x5883.Controls.Add(this.__0x5878);
			this.__0x5883.Controls.Add(this.__0x5881);
			this.__0x5883.Controls.Add(this.__0x5879);
			this.__0x5883.Controls.Add(this.__0x5880);
			this.__0x5883.Location = new System.Drawing.Point(0, 480);
			this.__0x5883.Name = "panel2";
			this.__0x5883.Size = new System.Drawing.Size(759, 56);
			this.__0x5883.TabIndex = 9;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x5883);
			this.Controls.Add(this.__0x5882);
			
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "TipsWindow";
			this.Size = new System.Drawing.Size(759, 535);
			this.WindowTitle = "Tips";
			this.Load += new System.EventHandler(this.__0x5885);
			this.Controls.SetChildIndex(this.__0x5882, 0);
			this.Controls.SetChildIndex(this.__0x5883, 0);
			this.__0x5883.ResumeLayout(false);
			this.__0x5883.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion
		private System.Windows.Forms.Timer __0x5876;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5877;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5878;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5879;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x5880;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5881;
		private System.Windows.Forms.Panel __0x5882;
		private System.Windows.Forms.Panel __0x5883;
	}
}





namespace NeoAxis.Editor
{
	[DesignerCategory( "code" )]
	[ToolStripItemDesignerAvailability( ToolStripItemDesignerAvailability.ToolStrip | ToolStripItemDesignerAvailability.StatusStrip )]
	class ToolStripBreadCrumbHost : ToolStripControlHost
	{
		public KryptonBreadCrumb BreadCrumb
		{
			get { return Control as KryptonBreadCrumb; }
		}

		public ToolStripBreadCrumbHost()
			: base( __0x5922() )
		{
		}

		static Control __0x5922()
		{
			KryptonBreadCrumb __0x5917 = new KryptonBreadCrumb();
			__0x5917.StateCommon.Border.Draw = InheritBool.False;

			__0x5917.StateCommon.BreadCrumb.Content.Padding = new Padding( 0 );

			
			
			
			
			
			
			
			
			

			

			return __0x5917;
		}

		public override Size GetPreferredSize( Size constrainingSize )
		{
			if( DesignMode || IsOnOverflow || Owner.Orientation == Orientation.Vertical )
				return DefaultSize;

			int __0x5918 = Owner.DisplayRectangle.Width;

			if( Owner.OverflowButton.Visible )
				__0x5918 = __0x5918 - Owner.OverflowButton.Width - Owner.OverflowButton.Margin.Horizontal;

			int __0x5919 = 0;
			foreach( ToolStripItem __0x5921 in Owner.Items )
			{
				if( __0x5921.IsOnOverflow ) continue;

				if( __0x5921 is ToolStripBreadCrumbHost )
				{
					__0x5919++;
					__0x5918 -= __0x5921.Margin.Horizontal;
				}
				else
				{
					__0x5918 = __0x5918 - __0x5921.Width - __0x5921.Margin.Horizontal;
				}
			}

			if( __0x5919 > 1 )
				__0x5918 /= __0x5919;

			
			
			
			

			Size __0x5920 = base.GetPreferredSize( constrainingSize );
			__0x5920.Width = __0x5918;
			return __0x5920;
		}
	}
}





namespace NeoAxis.Editor
{
	[DesignerCategory( "code" )]
	[ToolStripItemDesignerAvailability( ToolStripItemDesignerAvailability.ToolStrip | ToolStripItemDesignerAvailability.StatusStrip )]
	class ToolStripTextBoxHost : ToolStripControlHost
	{
		public EngineTextBox TextBox
		{
			get { return Control as EngineTextBox; }
		}

		public ToolStripTextBoxHost()
			: base( __0x5924() )
		{
		}

		static Control __0x5924()
		{
			var __0x5923 = new EngineTextBox();
			__0x5923.Multiline = false;
			__0x5923.WordWrap = false;

			return __0x5923;
		}

		
		
		
		

		

		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		

		
		
		
		
	}
}




namespace NeoAxis.Editor
{
	

	static class WindowsClipboard
	{
		static class __0x5955
		{
			internal const uint CF_HDROP = 15;

			[DllImport( "User32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool IsClipboardFormatAvailable( uint format );

			[DllImport( "User32.dll", SetLastError = true )]
			internal static extern IntPtr GetClipboardData( uint uFormat );

			[DllImport( "kernel32.dll" )]
			internal static extern IntPtr GlobalAlloc( uint uFlags, IntPtr dwBytes );

			[DllImport( "kernel32.dll", SetLastError = true )]
			internal static extern IntPtr GlobalLock( IntPtr hMem );

			[DllImport( "kernel32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool GlobalUnlock( IntPtr hMem );

			[DllImport( "user32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool OpenClipboard( IntPtr hWndNewOwner );

			[DllImport( "user32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool CloseClipboard();

			[DllImport( "user32.dll", SetLastError = true )]
			internal static extern IntPtr SetClipboardData( uint uFormat, IntPtr data );

			[DllImport( "user32.dll" )]
			internal static extern bool EmptyClipboard();

			[DllImport( "Kernel32.dll", SetLastError = true )]
			internal static extern int GlobalSize( IntPtr hMem );

			[DllImport( "shell32.dll", CharSet = CharSet.Unicode )]
			internal static extern uint DragQueryFile( IntPtr hDrop, uint iFile, StringBuilder lpszFile, int cch );

			[DllImport( "user32.dll", CharSet = CharSet.Unicode )]
			internal static extern uint RegisterClipboardFormat( string lpszFormat );

			[DllImport( "user32.dll" )]
			internal static extern uint EnumClipboardFormats( uint format );

			[StructLayout( LayoutKind.Sequential, Pack = 1 )]
			public struct DROPFILES
			{
				public int pFiles;
				public Point pt;
				public bool fNC;
				public bool fWide;
			}
		}


		public static bool IsCutPrefferdDropEffect( IntPtr hwnd = default )
		{
			uint __0x5925 = __0x5955.RegisterClipboardFormat( "Preferred DropEffect" );
			bool __0x5926 = false;
			if( __0x5955.OpenClipboard( hwnd ) )
			{
				try
				{
					IntPtr __0x5927 = __0x5955.GetClipboardData( __0x5925 );
					if( !( __0x5927 != IntPtr.Zero ) )
					{
						return __0x5926;
					}
					IntPtr __0x5928 = __0x5955.GlobalLock( __0x5927 );
					try
					{
						if( __0x5928 != IntPtr.Zero )
						{
							byte[] __0x5929 = new byte[ 4 ];
							Marshal.Copy( __0x5928, __0x5929, 0, 4 );
							__0x5926 = ( __0x5929[ 0 ] & 2 ) != 0;
						}
					}
					finally
					{
						__0x5955.GlobalUnlock( __0x5927 );
					}
				}
				finally
				{
					__0x5955.CloseClipboard();
				}
			}
			return __0x5926;
		}

		public static bool ContainsFileDropPaths( IntPtr hwnd = default )
		{
			if( ( hwnd != IntPtr.Zero ) && __0x5955.OpenClipboard( hwnd ) )
			{
				try
				{
					for( uint __0x5930 = __0x5955.EnumClipboardFormats( 0 ); __0x5930 != 0; __0x5930 = __0x5955.EnumClipboardFormats( __0x5930 ) )
					{
						if( __0x5930 == __0x5955.CF_HDROP )
						{
							return true;
						}
					}
				}
				finally
				{
					__0x5955.CloseClipboard();
				}
			}
			return false;
		}

		public static List<string> GetFileDropPaths( IntPtr hwnd = default )
		{
			List<string> __0x5931 = new List<string>();
			if( __0x5955.OpenClipboard( hwnd ) )
			{
				try
				{
					IntPtr __0x5932 = __0x5955.GetClipboardData( __0x5955.CF_HDROP );
					if( !( __0x5932 != IntPtr.Zero ) )
					{
						return __0x5931;
					}
					IntPtr __0x5933 = __0x5955.GlobalLock( __0x5932 );
					if( !( __0x5933 != IntPtr.Zero ) )
					{
						return __0x5931;
					}
					try
					{
						uint __0x5934 = __0x5955.DragQueryFile( __0x5933, uint.MaxValue, null, 0 );
						if( __0x5934 > 0 )
						{
							for( uint __0x5935 = 0; __0x5935 < __0x5934; __0x5935++ )
							{
								const int __0x5936 = 260;
								StringBuilder __0x5937 = new StringBuilder( __0x5936 );
								__0x5955.DragQueryFile( __0x5933, __0x5935, __0x5937, __0x5937.Capacity );
								if( __0x5937.Length > 0 )
								{
									__0x5931.Add( __0x5937.ToString() );
								}
							}
						}
						return __0x5931;
					}
					finally
					{
						__0x5955.GlobalUnlock( __0x5932 );
					}
				}
				finally
				{
					__0x5955.CloseClipboard();
				}
			}
			return __0x5931;
		}

		
		public static bool SetFileDropPaths( List<string> lstPaths, bool fCut, IntPtr hwnd = default )
		{
			string __0x5938 = __0x5950( lstPaths );
			if(  ( __0x5938.Length > 1 ) )
			{
				if( !__0x5955.OpenClipboard( hwnd ) )
				{
					return false;
				}
				__0x5955.EmptyClipboard();
				try
				{
					__0x5955.DROPFILES __0x5939 = new __0x5955.DROPFILES();
					__0x5939.pFiles = Marshal.SizeOf( __0x5939 );
					__0x5939.fWide = true;
					int __0x5940 = Marshal.SizeOf( __0x5939 ) + ( __0x5938.Length * Marshal.SystemMaxDBCSCharSize );
					IntPtr __0x5941 = __0x5955.GlobalAlloc( 0x42, (IntPtr)__0x5940 );
					if( __0x5941 != IntPtr.Zero )
					{
						IntPtr __0x5942 = __0x5955.GlobalLock( __0x5941 );
						Marshal.StructureToPtr( __0x5939, __0x5942, false );
						Marshal.Copy( __0x5938.ToCharArray(), 0, __0x5951( __0x5942, Marshal.SizeOf( __0x5939 ) ), __0x5938.Length );
						__0x5955.GlobalUnlock( __0x5941 );
					}
					IntPtr __0x5943 = __0x5955.GlobalAlloc( 0x42, (IntPtr)4 );
					if( __0x5943 != IntPtr.Zero )
					{
						IntPtr __0x5944 = __0x5955.GlobalLock( __0x5943 );
						byte[] __0x5945 = new byte[ 4 ];
						__0x5945[ 0 ] = fCut ? ( (byte)2 ) : ( (byte)5 );
						Marshal.Copy( __0x5945, 0, __0x5944, 4 );
						__0x5955.GlobalUnlock( __0x5943 );
					}
					if( ( __0x5941 != IntPtr.Zero ) && ( __0x5943 != IntPtr.Zero ) )
					{
						uint __0x5946 = __0x5955.RegisterClipboardFormat( "Preferred DropEffect" );
						__0x5955.SetClipboardData( __0x5955.CF_HDROP, __0x5941 );
						__0x5955.SetClipboardData( __0x5946, __0x5943 );
						return true;
					}
				}
				finally
				{
					__0x5955.CloseClipboard();
				}
			}
			return false;
		}

		public static string StringJoin<T>( this IEnumerable<T> list, string separator )
		{
			StringBuilder __0x5947 = new StringBuilder();
			bool __0x5948 = true;
			foreach( T __0x5949 in list )
			{
				if( __0x5948 ) __0x5948 = false;
				else __0x5947.Append( separator );
				__0x5947.Append( __0x5949.ToString() );
			}
			return __0x5947.ToString();
		}

		static string __0x5950( List<string> __0x5952 )
		{
			return __0x5952.StringJoin( "\0" ) + "\0\0";
		}

		static IntPtr __0x5951( IntPtr __0x5953, int __0x5954 )
		{
			if( IntPtr.Size == 4 )
				return (IntPtr)( ( (int)__0x5953 ) + __0x5954 );
			return (IntPtr)( ( (long)__0x5953 ) + __0x5954 );
		}

	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Implements <see cref="ProcedureUI"/> for WinForms.
	/// </summary>
	public static class WinFormsProcedureUI
	{
		/// <summary>
		/// Implements button of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsButton : ProcedureUI.Button
		{
			public KryptonButton control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override event Action<ProcedureUI.Button> Click;
			public void PerformClick()
			{
				Click?.Invoke( this );
			}
		}

		

		/// <summary>
		/// Implements check box of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsCheck : ProcedureUI.Check
		{
			public KryptonCheckBox control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override CheckValue Checked
			{
				get { return (CheckValue)control.CheckState; }
				set { control.CheckState = (CheckState)value; }
			}

			public override event Action<ProcedureUI.Check> CheckedChanged;
			public void PerformCheckedChanged()
			{
				CheckedChanged?.Invoke( this );
			}

			public override event Action<ProcedureUI.Check> Click;
			public void PerformClick()
			{
				Click?.Invoke( this );
			}
		}

		

		/// <summary>
		/// Implements edit box of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsEdit : ProcedureUI.Edit
		{
			public KryptonTextBox control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
		}

		

		/// <summary>
		/// Implements text label of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsText : ProcedureUI.Text
		{
			public EngineLabel control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override bool Bold
			{
				get { return base.Bold; }
				set
				{
					if( Bold == value )
						return;
					base.Bold = value;

					control.LabelStyle = Bold ? LabelStyle.BoldControl : LabelStyle.NormalControl;
				}
			}

			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
		}

		

		/// <summary>
		/// Implements form of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsForm : ProcedureUI.Form
		{
			public Control owner;
			int __0x5956;
			public int positionY = 6;

			

			public WinFormsForm( Control owner )
			{
				this.owner = owner;

				owner.Resize += __0x5978;
			}

			private void __0x5978( object __0x5984, EventArgs __0x5985 )
			{
				foreach( var __0x5976 in owner.Controls )
				{
					var __0x5957 = __0x5976 as KryptonTextBox;
					if( __0x5957 != null )
						__0x5979( __0x5957 );

					var __0x5958 = __0x5976 as EngineLabel;
					if( __0x5958 != null )
						__0x5980( __0x5958 );
				}
			}

			void __0x5979( KryptonTextBox __0x5986 )
			{
				__0x5986.Width = owner.ClientSize.Width - __0x5986.Location.X * 2;
			}

			void __0x5980( EngineLabel __0x5987 )
			{
				__0x5987.Width = owner.ClientSize.Width - __0x5987.Location.X * 2;
			}

			public override ProcedureUI.Button CreateButton( string text, ProcedureUI.Button.SizeEnum size )
			{
				var __0x5959 = new KryptonButton();
				__0x5959.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				
				__0x5959.Name = "control" + __0x5956;
				__0x5956++;
				__0x5959.Size = DpiHelper.Default.ScaleValue( new Size( size == ProcedureUI.Button.SizeEnum.Long ? 117 : 93, 26 ) );
				
				__0x5959.TabIndex = __0x5956;
				__0x5959.Values.Text = text;
				__0x5959.Click += __0x5981;
				owner.Controls.Add( __0x5959 );

				var __0x5960 = new WinFormsButton();
				__0x5960.control = __0x5959;
				__0x5959.Tag = __0x5960;

				return __0x5960;
			}

			private void __0x5981( object __0x5988, EventArgs __0x5989 )
			{
				var __0x5961 = (WinFormsButton)( (KryptonButton)__0x5988 ).Tag;
				__0x5961.PerformClick();
			}

			public override ProcedureUI.Check CreateCheck( string text )
			{
				var __0x5962 = new KryptonCheckBox();
				__0x5962.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5962.Name = "control" + __0x5956;
				__0x5956++;
				__0x5962.AutoSize = true;
				__0x5962.TabIndex = __0x5956;
				__0x5962.Values.Text = text;
				__0x5962.CheckStateChanged += __0x5982;
				__0x5962.Click += __0x5983;
				owner.Controls.Add( __0x5962 );

				var __0x5963 = new WinFormsCheck();
				__0x5963.control = __0x5962;
				__0x5962.Tag = __0x5963;

				return __0x5963;
			}

			public override ProcedureUI.Edit CreateEdit( string text = "" )
			{
				var __0x5964 = new KryptonTextBox();
				__0x5964.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5964.Name = "control" + __0x5956;
				__0x5956++;
				
				__0x5964.TabIndex = __0x5956;
				__0x5964.Text = text;
				
				
				owner.Controls.Add( __0x5964 );

				var __0x5965 = new WinFormsEdit();
				__0x5965.control = __0x5964;
				__0x5964.Tag = __0x5965;

				__0x5979( __0x5964 );

				return __0x5965;
			}

			public override ProcedureUI.Text CreateText( string text )
			{
				var __0x5966 = new EngineLabel();
				__0x5966.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5966.Name = "control" + __0x5956;
				__0x5956++;
				
				__0x5966.TabIndex = __0x5956;
				__0x5966.Text = text;
				owner.Controls.Add( __0x5966 );

				var __0x5967 = new WinFormsText();
				__0x5967.control = __0x5966;
				__0x5966.Tag = __0x5967;

				__0x5980( __0x5966 );

				return __0x5967;
			}

			private void __0x5982( object __0x5990, EventArgs __0x5991 )
			{
				var __0x5968 = (WinFormsCheck)( (KryptonCheckBox)__0x5990 ).Tag;
				__0x5968.PerformCheckedChanged();
			}

			private void __0x5983( object __0x5992, EventArgs __0x5993 )
			{
				var __0x5969 = (WinFormsCheck)( (KryptonCheckBox)__0x5992 ).Tag;
				__0x5969.PerformClick();
			}

			public override void AddRow( IEnumerable<ProcedureUI.Control> controls )
			{
				int __0x5970 = DpiHelper.Default.ScaleValue( 3 );
				int __0x5971 = 0;

				foreach( var __0x5977 in controls )
				{
					var __0x5972 = __0x5977 as WinFormsButton;
					if( __0x5972 != null )
					{
						__0x5972.control.Location = new Point( __0x5970, positionY );
						__0x5970 += __0x5972.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5971 = Math.Max( __0x5971, __0x5972.control.Height );
					}

					var __0x5973 = __0x5977 as WinFormsCheck;
					if( __0x5973 != null )
					{
						__0x5973.control.Location = new Point( __0x5970, positionY + DpiHelper.Default.ScaleValue( 6 ) );
						__0x5970 += __0x5973.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5971 = Math.Max( __0x5971, __0x5973.control.Height );
					}

					var __0x5974 = __0x5977 as WinFormsEdit;
					if( __0x5974 != null )
					{
						__0x5974.control.Location = new Point( __0x5970, positionY );
						__0x5970 += __0x5974.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5971 = Math.Max( __0x5971, __0x5974.control.Height );
					}

					var __0x5975 = __0x5977 as WinFormsText;
					if( __0x5975 != null )
					{
						__0x5975.control.Location = new Point( __0x5970, positionY );
						__0x5970 += __0x5975.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5971 = Math.Max( __0x5971, __0x5975.control.Height );
					}
				}

				positionY += __0x5971 + DpiHelper.Default.ScaleValue( 5 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public abstract class WorkspaceController : IDisposable
	{
		protected bool disposing;
		protected Control ownerControl;
		protected EditorForm editorForm;
		protected KryptonDockingManager dockingManager;
		protected KryptonDockableWorkspace dockableWorkspaceControl;
		protected KryptonDockingControl dockingControl;

		protected Dictionary<KryptonPage, DockWindow> dockWindows = new Dictionary<KryptonPage, DockWindow>();

		
		
		


		internal virtual DockWindow GetSelectedDockWindow()
		{
			return null;
		}

		public virtual void SelectDockWindow( DockWindow window )
		{
			if( window == null )
				throw new ArgumentNullException( nameof( window ) );

			
			if( !window.Visible )
				EditorForm.Instance.WorkspaceController.SetDockWindowVisibility( window, true );

			
			if( dockingControl != null )
			{
				var __0x5994 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingAutoHiddenGroup;
				if( __0x5994 != null )
				{
					foreach( var __0x6045 in dockingControl )
					{
						var __0x5995 = __0x6045 as KryptonDockingEdge;
						if( __0x5995 != null )
						{
							
							KryptonDockingEdgeAutoHidden __0x5996 = null;
							foreach( var __0x6046 in __0x5995 )
							{
								if( __0x6046 is KryptonDockingEdgeAutoHidden )
								{
									__0x5996 = (KryptonDockingEdgeAutoHidden)__0x6046;
									break;
								}
							}

							if( __0x5996 != null )
								__0x5996.SlidePageOut( window.KryptonPage, true );
						}
					}
				}
			}

			
			var __0x5997 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingSpace;
			if( __0x5997 != null )
			{
				__0x5997.SelectPage( window.KryptonPage.UniqueName );

				
				var __0x5998 = __0x5997.CellForPage( window.KryptonPage.UniqueName );
				__0x5998?.Focus();
			}
		}

		public ICollection<DockWindow> GetDockWindows()
		{
			return dockWindows.Values;
		}

		public DockWindow FindWindow( Type windowClass )
		{
			return GetDockWindows().FirstOrDefault( __0x6066 => windowClass.IsAssignableFrom( __0x6066.GetType() ) );
		}

		public T FindWindow<T>() where T : DockWindow
		{
			return GetDockWindows().OfType<T>().FirstOrDefault();
		}

		public T FindWindow<T>( Func<T, bool> predicate )
		{
			return GetDockWindows().OfType<T>().FirstOrDefault( predicate );
		}

		public IDocumentWindow FindWindow( DocumentInstance doc )
		{
			return FindWindow<IDocumentWindow>( __0x6067 => __0x6067.Document == doc );
		}

		DockWindow __0x6048( KryptonPage __0x6068 )
		{
			if( __0x6068 == null )
				return null;
			dockWindows.TryGetValue( __0x6068, out DockWindow result );
			return result;
		}

		public void ShowDockWindow( Type windowClass )
		{
			var __0x5999 = FindWindow( windowClass );
			__0x5999?.KryptonPage?.Show();
		}
		
		
		
		
		
		

		public WorkspaceController( Control ownerControl, EditorForm editorForm )
		{
			this.ownerControl = ownerControl;
			this.editorForm = editorForm;

			this.dockableWorkspaceControl = ownerControl.Controls.OfType<KryptonDockableWorkspace>().First();

			dockingManager = new KryptonDockingManager();

			var __0x6000 = new KryptonDockingWorkspace( "DockingWorkspace", "Filler", dockableWorkspaceControl );
			dockingManager.Add( __0x6000 );

			if( this is WorkspaceControllerForForm )
			{
				dockingControl = new KryptonDockingControl( "DockingControl", ownerControl, __0x6000 );
				dockingManager.Add( dockingControl );
			}

			var __0x6001 = new KryptonDockingFloating( "DockingFloating", editorForm );
			dockingManager.Add( __0x6001 );

			dockingManager.PageLoading += __0x6057;
			dockingManager.PageSaving += __0x6056;
			dockingManager.RecreateLoadingPage += __0x6055;

			dockingManager.OrphanedPages += __0x6058;
			dockingManager.PageCloseRequest += __0x6059;

			dockableWorkspaceControl.WorkspaceCellAdding += __0x6062;
			dockableWorkspaceControl.WorkspaceCellRemoved += __0x6063;
			dockableWorkspaceControl.CellPageInserting += __0x6064;
		}

		public virtual void Dispose()
		{
			disposing = true;

			dockingManager.PageLoading -= __0x6057;
			dockingManager.PageSaving -= __0x6056;
			dockingManager.RecreateLoadingPage -= __0x6055;

			dockingManager.PageCloseRequest -= __0x6059;
			dockingManager.OrphanedPages -= __0x6058;

			dockableWorkspaceControl.WorkspaceCellAdding -= __0x6062;
			dockableWorkspaceControl.WorkspaceCellRemoved -= __0x6063;
			dockableWorkspaceControl.CellPageInserting -= __0x6064;

			
			foreach( var __0x6047 in dockWindows.Values.ToList() )
				RemoveDockWindow( __0x6047, true );
		}

		public KryptonDockingDockspace AddToDockspace( DockWindow[] windows, DockingEdge edge )
		{
			var __0x6002 = new KryptonPage[ windows.Length ];
			for( int __0x6003 = 0; __0x6003 < windows.Length; __0x6003++ )
			{
				AddDockWindowInternal( windows[ __0x6003 ], true );
				__0x6002[ __0x6003 ] = windows[ __0x6003 ].KryptonPage;
			}

			return dockingManager.AddDockspace( "DockingControl", edge, __0x6002 );
		}

		[Browsable( false )]
		public KryptonDockingManager DockingManager
		{
			get { return dockingManager; }
		}

		public KryptonDockingDockspace AddToDockspaceStack( DockWindow[] windows, DockingEdge edge )
		{
			var __0x6004 = new KryptonPage[ windows.Length ][];
			for( int __0x6005 = 0; __0x6005 < windows.Length; __0x6005++ )
			{
				AddDockWindowInternal( windows[ __0x6005 ], true );
				__0x6004[ __0x6005 ] = new KryptonPage[] { windows[ __0x6005 ].KryptonPage };
			}

			var __0x6006 = dockingManager.AddDockspace( "DockingControl", edge, __0x6004[ 0 ], __0x6004 );
			return __0x6006;
		}

		
		KryptonDockingFloatspace __0x6049( DockWindow __0x6069, bool __0x6070, Point __0x6071, Size __0x6072 )
		{
			AddDockWindowInternal( __0x6069, true );

			var __0x6007 = dockingManager.AddFloatingWindow( "DockingFloating", new KryptonPage[] { __0x6069.KryptonPage }, __0x6071, __0x6072 );

			
			
			

			return __0x6007.FloatspaceElement;
		}

		
		KryptonDockingFloatspace __0x6050( DockWindow __0x6073, bool __0x6074 )
		{
			
			__0x6073.CalculateBigSizeForFloatingWindowDependingScreenSize( out Point position, out Size size );
			return __0x6049( __0x6073, __0x6074, position, size );
		}

		KryptonDockingWorkspace __0x6051( DockWindow __0x6075, bool __0x6076 )
		{
			AddDockWindowInternal( __0x6075, false );

			var __0x6008 = dockingManager.AddToWorkspace( "DockingWorkspace", new KryptonPage[] { __0x6075.KryptonPage } );

			
			__0x6008.DockableWorkspaceControl.PerformLayout();

			if( __0x6076 )
				SelectDockWindow( __0x6075 );

			return __0x6008;
		}

		KryptonDockingWorkspace __0x6052( DockWindow __0x6077, bool __0x6078, int __0x6079 )
		{
			AddDockWindowInternal( __0x6077, false );

			var __0x6009 = dockingManager.ResolvePath( "DockingWorkspace" ) as KryptonDockingWorkspace;

			__0x6009.CellInsert( __0x6009.DockableWorkspaceControl.ActiveCell, __0x6079, __0x6077.KryptonPage );

			
			

			if( __0x6078 )
				SelectDockWindow( __0x6077 );

			return __0x6009;
		}


		public virtual void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			if( floatingWindow )
				__0x6050( window, select );
			else
				__0x6051( window, select );
		}

		protected void AddDockWindowInternal( DockWindow window, bool allowDocking, KryptonPage existPage = null )
		{
			CreatePage( window, true, existPage );

			dockWindows.Add( window.KryptonPage, window );
			window.KryptonPage.Disposed += KryptonPage_Disposed;
			window.KryptonPage.VisibleChanged += KryptonPage_VisibleChanged;

			if( !allowDocking )
				window.KryptonPage.ClearFlags( KryptonPageFlags.DockingAllowAutoHidden | KryptonPageFlags.DockingAllowDocked );

			OnDockWindowAdded( window );
		}

		protected virtual void OnDockWindowAdded( DockWindow window )
		{
			
		}

		public void ReplaceDockWindow( DockWindow oldWindow, DockWindow newWindow, bool disposeOldWindow, bool select )
		{
			if( __0x6054( oldWindow ) )
			{
				var __0x6010 = (KryptonDockingFloatspace)dockingManager.FindPageElement( oldWindow.KryptonPage );
				var __0x6011 = __0x6010.GetParentType( typeof( KryptonDockingFloatingWindow ) ) as KryptonDockingFloatingWindow;

				var __0x6012 = __0x6011.FloatingWindow.Location;
				var __0x6013 = __0x6011.FloatingWindow.ClientSize;
				RemoveDockWindow( oldWindow, disposeOldWindow );
				__0x6049( newWindow, select, __0x6012, __0x6013 );
			}
			else
			{
				int __0x6014 = __0x6053( oldWindow );
				if( __0x6014 == -1 )
					Log.Warning( $"Window {oldWindow} not found." );
				else
				{
					RemoveDockWindow( oldWindow, disposeOldWindow );
					__0x6052( newWindow, select, __0x6014 );
				}
			}
		}

		int __0x6053( DockWindow __0x6080 )
		{
			var __0x6015 = GetWorkspaceCell( __0x6080 );
			if( __0x6015 != null )
				return __0x6015.Pages.IndexOf( __0x6080.KryptonPage );
			else
				return -1;
		}

		bool __0x6054( DockWindow __0x6081 )
		{
			var __0x6016 = dockingManager.FindPageElement( __0x6081.KryptonPage );
			return __0x6016 is KryptonDockingFloatspace;
		}

		public virtual void RemoveDockWindow( DockWindow window, bool dispose )
		{
			RemoveDockWindow( window.KryptonPage, dispose );
		}

		internal void RemoveDockWindow( KryptonPage page, bool dispose )
		{
			page.Disposed -= KryptonPage_Disposed;
			page.VisibleChanged -= KryptonPage_VisibleChanged;

			Debug.Assert( dockWindows.ContainsKey( page ) );
			dockingManager.RemovePage( page, dispose );

			if( !dockWindows.ContainsKey( page ) )
				return;

			var __0x6017 = dockWindows[ page ];
			dockWindows.Remove( page );
			OnDockWindowRemoved( __0x6017 );
		}

		public void CloseDockWindow( DockWindow window )
		{
			OnDockWindowCloseRequest( window, out bool cancel );
			if( !cancel )
				RemoveDockWindow( window, true );
		}

		protected virtual void OnDockWindowRemoved( DockWindow window )
		{
			
		}

		public void LoadLayoutFromFile( string filename )
		{
			dockingManager.LoadConfigFromFile( filename );
		}

		public void SaveLayoutToFile( string filename )
		{
			dockingManager.SaveConfigToFile( filename );
		}

		public void LoadLayoutFromString( string text )
		{
			using( var __0x6018 = new MemoryStream( System.Text.Encoding.Unicode.GetBytes( text ) ) )
				dockingManager.LoadConfigFromStream( __0x6018 );
		}

		public string SaveLayoutToString()
		{
			using( var __0x6019 = new MemoryStream() )
			{
				dockingManager.SaveConfigToStream( __0x6019, System.Text.Encoding.Unicode, Formatting.None );
				return System.Text.Encoding.Unicode.GetString( __0x6019.ToArray() );
			}
		}

		protected virtual KryptonPage CreatePage( DockWindow window, bool createCloseButton, KryptonPage existPage = null )
		{
			var __0x6020 = window.IsSystemWindow ? window.GetType().Name : string.Empty;

			
			if( window is DocumentWindow )
				Debug.Assert( string.IsNullOrEmpty( __0x6020 ) );

			KryptonPage __0x6021 = existPage ?? CreatePage( __0x6020, createCloseButton );
			__0x6021.associatedDockWindow = window;

			window.Dock = DockStyle.Fill;

			var __0x6022 = window.DefaultAutoHiddenSlideSize;
			__0x6021.AutoHiddenSlideSize = new Size( __0x6022.X, __0x6022.Y );

			__0x6021.Controls.Add( window );
			return __0x6021;
		}

		protected KryptonPage CreatePage( string uniqueName, bool createCloseButton )
		{
			KryptonPage __0x6023 = new KryptonPage( "No data", null, uniqueName );
			__0x6023.TextTitle = "description";
			__0x6023.TextDescription = "description";

			if( createCloseButton )
			{
				var __0x6024 = new ButtonSpecAny();
				__0x6024.Tag = __0x6023;
				__0x6024.Type = PaletteButtonSpecStyle.Close;
				__0x6024.Click += ( __0x6082, __0x6083 ) =>
				{
					var __0x6025 = (KryptonPage)( (ButtonSpecAny)__0x6082 ).Tag;
					dockingManager.CloseRequest( new string[] { __0x6025.UniqueName } );
					
				};
				__0x6023.ButtonSpecs.Add( __0x6024 );
			}

			return __0x6023;
		}

		protected KryptonWorkspaceCell GetWorkspaceCell( DockWindow window )
		{
			var __0x6026 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingSpace;
			if( __0x6026 != null )
				return __0x6026.CellForPage( window.KryptonPage.UniqueName );
			else
				return null;
		}

		protected virtual void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			if( window is DocumentWindow )
				cancel = editorForm.ShowDialogAndSaveDocument( window );
			else
				cancel = false; 
		}

		protected virtual void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
		}

		protected virtual void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
		}

		internal void KryptonPage_Disposed( object sender, EventArgs e )
		{
			
			if( !ownerControl.IsHandleCreated )
				return;

			
			if( ownerControl.Disposing || ownerControl.IsDisposed )
				return;

			var __0x6027 = (KryptonPage)sender;

			
			
			
			
			
			
			
			
			
			
			

			try
			{
				RemoveDockWindow( __0x6027, true );
			}
			finally
			{
				
				
			}
		}

		internal void KryptonPage_VisibleChanged( object sender, EventArgs e )
		{
			if( ownerControl.Disposing )
				return;

			var __0x6028 = (KryptonPage)sender;

			if( __0x6028.LastVisibleSet != __0x6028.Visible ) 
				return;

			
		}

		private void __0x6055( object __0x6084, RecreateLoadingPageEventArgs __0x6085 )
		{
			__0x6085.Page = CreatePage( __0x6085.UniqueName, true );
		}

		private void __0x6056( object __0x6086, DockPageSavingEventArgs __0x6087 )
		{
			var __0x6029 = __0x6087.Page.GetDockWindow();
			if( __0x6029 == null )
				return;

			OnDockWindowSaving( __0x6029, __0x6087 );
		}

		private void __0x6057( object __0x6088, DockPageLoadingEventArgs __0x6089 )
		{
			if( __0x6089.Page is KryptonStorePage )
				return;

			if( __0x6089.XmlReader.Name != "CPD" )
				throw new ArgumentException( "Expected 'CPD' element was not found" );

			var __0x6030 = __0x6089.Page.GetDockWindow();
			OnDockWindowLoading( __0x6030, __0x6089 );
		}

		private void __0x6058( object __0x6090, PagesEventArgs __0x6091 )
		{
			
			
			

			__0x6091.Pages.Clear();
		}

		private void __0x6059( object __0x6092, CloseRequestEventArgs __0x6093 )
		{
			var __0x6031 = dockingManager.PageForUniqueName( __0x6093.UniqueName );
			var __0x6032 = __0x6031.GetDockWindow();
			if( __0x6032 != null )
			{
				OnDockWindowCloseRequest( __0x6032, out bool cancel );
				if( cancel )
					__0x6093.CloseRequest = DockingCloseRequest.None;
				else
					__0x6093.CloseRequest = __0x6032.HideOnRemoving ? DockingCloseRequest.HidePage : DockingCloseRequest.RemovePageAndDispose;
			}
		}

		
		private void __0x6060( object __0x6094, CloseActionEventArgs __0x6095 )
		{
			var __0x6033 = __0x6095.Item.GetDockWindow();
			if( __0x6033 != null )
			{
				OnDockWindowCloseRequest( __0x6033, out bool cancel );
				if( cancel )
					__0x6095.Action = CloseButtonAction.None;
				else
					__0x6095.Action = __0x6033.HideOnRemoving ? CloseButtonAction.HidePage : CloseButtonAction.RemovePageAndDispose;
			}
		}

		private void __0x6061( object __0x6096, ShowContextMenuArgs __0x6097 )
		{
			var __0x6034 = __0x6097.Item.GetDockWindow();
			if( __0x6034 != null )
			{
				var __0x6035 = new KryptonContextMenuItems();
				__0x6034.OnShowTitleContextMenu( __0x6035 );

				if( __0x6035.Items.Count != 0 )
				{
					
					__0x6097.KryptonContextMenu.Items.Insert( 0, __0x6035 );
					__0x6097.KryptonContextMenu.Items.Insert( 1, new KryptonContextMenuSeparator() );
				}
			}
		}

		private void __0x6062( object __0x6098, WorkspaceCellEventArgs __0x6099 )
		{
			__0x6099.Cell.CloseAction += __0x6060;
			__0x6099.Cell.ShowContextMenu += __0x6061;
		}

		private void __0x6063( object __0x6100, WorkspaceCellEventArgs __0x6101 )
		{
			__0x6101.Cell.ShowContextMenu -= __0x6061;
			__0x6101.Cell.CloseAction -= __0x6060;
		}

		private void __0x6064( object __0x6102, KryptonPageEventArgs __0x6103 )
		{
			var __0x6036 = __0x6048( __0x6103.Item ) as DocumentWindow;
			if( __0x6036 == null )
				return;

			

			var __0x6037 = editorForm.WorkspaceController;
			if( __0x6037.SelectedDocumentWindow == __0x6036 )
				return;

			var __0x6038 = __0x6037.FindWorkspaceWindow( __0x6036 );
			if( __0x6038 != null )
			{
				var __0x6039 = __0x6037.FindWorkspaceWindow( __0x6037.SelectedDocumentWindow );
				if( __0x6038 != __0x6039 )
					editorForm.WorkspaceController.SelectDockWindow( __0x6038 );
			}
		}

		

		internal void RepaintAutoHiddenWindow( DockWindow window )
		{
			var __0x6040 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingAutoHiddenGroup;
			if( __0x6040 != null )
				__0x6040.AutoHiddenGroupControl.PerformNeedPaint( true );
		}

		internal void HideAutoHiddenWindowWithoutAnimation( DockWindow window )
		{
			var __0x6041 = ownerControl.Controls.OfType<KryptonAutoHiddenSlidePanel>()
							.FirstOrDefault( __0x6104 => __0x6104.Page == window.KryptonPage );
			if( __0x6041 != null )
				__0x6041.HideUniqueName();
		}

		internal void BlockAutoHideForAutoHiddenWindow( DockWindow window, bool value )
		{
			var __0x6042 = ownerControl.Controls.OfType<KryptonAutoHiddenSlidePanel>()
							.FirstOrDefault( __0x6105 => __0x6105.Page == window.KryptonPage );
			if( __0x6042 != null ) 
				__0x6042.BlockAutoHide = value;
		}

		internal void BlockAutoHideAndDoAction( Control control, Action action )
		{
			var __0x6043 = control is DockWindow ?
				(DockWindow)control : __0x6065( control );

			BlockAutoHideForAutoHiddenWindow( __0x6043, true );
			try { action(); }
			finally { BlockAutoHideForAutoHiddenWindow( __0x6043, false ); }
		}

		static DockWindow __0x6065( Control __0x6106 )
		{
			Control __0x6044 = __0x6106;
			while( ( __0x6044 = __0x6044.Parent ) != null )
			{
				if( __0x6044 is KryptonPage page )
					return page.GetDockWindow();
			}
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	
	
	
	public class WorkspaceControllerForForm : WorkspaceController
	{
		
		
		

		
		internal class WindowConfig
		{
			internal string RealFileName { get; set; }
			internal Type Type { get; set; }
			internal string SpecialMode { get; set; }

			internal static WindowConfig FromDocumentWindow( IDocumentWindow window )
			{
				var __0x6107 = window.Document;
				return new WindowConfig()
				{
					RealFileName = __0x6107.RealFileName,
					Type = window.GetType(),
					SpecialMode = __0x6107.SpecialMode
				};
			}

			internal void Save( XmlWriter xmlWriter )
			{
				if( !string.IsNullOrEmpty( RealFileName ) )
					xmlWriter.WriteAttributeString( "FileName", VirtualPathUtility.GetVirtualPathByReal( RealFileName ) );
				else
					xmlWriter.WriteAttributeString( "Type", Type.FullName );

				if( !string.IsNullOrEmpty( SpecialMode ) )
					xmlWriter.WriteAttributeString( "SpecialMode", SpecialMode );
			}

			internal void Load( XmlReader xmlReader )
			{
				var __0x6108 = xmlReader.GetAttribute( "FileName" ) ?? "";
				if( !string.IsNullOrEmpty( __0x6108 ) )
					RealFileName = VirtualPathUtility.GetRealPathByVirtual( __0x6108 );

				var __0x6109 = xmlReader.GetAttribute( "Type" );
				if( !string.IsNullOrEmpty( __0x6109 ) )
				{
					var __0x6110 = MetadataManager.GetType( __0x6109 );
					if( __0x6110 != null )
						Type = __0x6110.GetNetType();
				}

				SpecialMode = xmlReader.GetAttribute( "SpecialMode" ) ?? "";
			}
		}

		List<DocumentWindow> __0x6111 = new List<DocumentWindow>();

		public DocumentWindow SelectedDocumentWindow 
		{
			get
			{
				
				__0x6111 = __0x6111.Where( __0x6155 => !__0x6155.Destroyed ).ToList();

				var __0x6112 = GetSelectedDockWindow();
				if( __0x6112 != null && __0x6112 is DocumentWindow documentWindow )
				{
					if( !documentWindow.OpenAsSettings && !( documentWindow is TipsWindow ) )
					{
						__0x6111.Remove( documentWindow );
						__0x6111.Add( documentWindow );
					}
				}

				if( __0x6111.Count != 0 )
					return __0x6111[ __0x6111.Count - 1 ];
				else
					return null;
			}
		}

		internal override DockWindow GetSelectedDockWindow()
		{
			var __0x6113 = __0x6154();
			if( __0x6113 == null )
				return null;

			var __0x6114 = __0x6113.ActivePage;
			if( __0x6114 == null )
				return null;

			var __0x6115 = __0x6114.GetDockWindow();
			if( __0x6115 != null && __0x6115 is WorkspaceWindow workspaceWindow )
				return workspaceWindow.GetSelectedDockWindow();
			else
				return __0x6115;
		}

		private KryptonSpace __0x6154()
		{
			KryptonSpace __0x6116 = null;

			var __0x6117 = Form.ActiveForm;

			if( __0x6117 is EditorForm )
				__0x6116 = __0x6117.ActiveControl as KryptonSpace;

			if( __0x6117 is KryptonFloatingWindow floatingWindow )
				__0x6116 = floatingWindow.FloatspaceControl;

			return __0x6116;
		}


		public WorkspaceControllerForForm( Control ownerControl, EditorForm ownerForm )
			: base( ownerControl, ownerForm )
		{
		}

		
		
		public List<DockWindow> GetDockWindowsRecursive()
		{
			var __0x6118 = new List<DockWindow>();
			foreach( var __0x6144 in dockWindows.Values )
			{
				__0x6118.Add( __0x6144 );
				if( __0x6144 is WorkspaceWindow workspaceWindow )
				{
					foreach( var __0x6145 in workspaceWindow.WorkspaceController.GetDockWindows() )
						__0x6118.Add( __0x6145 );
				}
			}
			return __0x6118;
		}

		public override void SelectDockWindow( DockWindow window )
		{
			if( window != null )
			{
				if( window is DocumentWindow wnd && wnd.IsWindowInWorkspace )
				{
					var __0x6119 = FindWorkspaceWindow( wnd );
					if( __0x6119 != null )
						__0x6119.WorkspaceController.SelectDockWindow( window );
				}
				else
					base.SelectDockWindow( window );
			}
		}

		public override void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			
			
			
			
			
			

			try
			{
				
				if( floatingWindow )
					select = true;

				
				if( !( window is DocumentWindow ) )
				{
					base.AddDockWindow( window, floatingWindow, select );
					return;
				}

				var __0x6120 = ( (DocumentWindow)window ).Document;
				var __0x6121 = FindWindowsRecursive( __0x6120 );

				if( __0x6121.Count() == 0 )
				{
					
					base.AddDockWindow( window, floatingWindow, select );
					return;
				}
				else
				{
					

					var __0x6122 = FindWorkspaceWindow( window );
					if( __0x6122 != null )
					{
						__0x6122.WorkspaceController.AddDockWindow( window, floatingWindow, select );
					}
					else
					{
						

						Debug.Assert( __0x6121.Count() == 1 );
						var __0x6123 = __0x6121.First();

						
						__0x6123.Size = new Size( 1, 1 );
						window.Size = new Size( 1, 1 );

						__0x6122 = new WorkspaceWindow( editorForm );
						__0x6122.Init( __0x6120 );

						
						ReplaceDockWindow( __0x6123, __0x6122, false, select );

						
						__0x6122.WorkspaceController.AddDockWindow( __0x6123, false, false );

						
						__0x6122.WorkspaceController.AddDockWindow( window, floatingWindow, select );
					}
				}
			}
			finally
			{
				
				
			}
		}

		public override void RemoveDockWindow( DockWindow window, bool dispose )
		{
			if( window is DocumentWindow wnd && wnd.IsWindowInWorkspace )
			{
				var __0x6124 = FindWorkspaceWindow( wnd );
				if( __0x6124 != null )
					__0x6124.WorkspaceController.RemoveDockWindow( window, dispose );
			}
			else
			{
				base.RemoveDockWindow( window, dispose );
			}
		}

		public void SetDockWindowVisibility( DockWindow window, bool visible )
		{
			if( visible )
				dockingManager.ShowPage( window.KryptonPage );
			else
				dockingManager.HidePage( window.KryptonPage );
		}

		
		public DocumentWindow FindWindowRecursive( DocumentInstance doc, object obj, Type type = null )
		{
			foreach( var __0x6146 in FindWindowsRecursive( doc ) )
			{
				if( type != null && __0x6146.GetType() != type )
					continue;

				if( ReferenceEquals( __0x6146.ObjectOfWindow, obj ) )
					return __0x6146;
			}

			return null;
		}

		public WorkspaceWindow FindWorkspaceWindow( DocumentInstance doc )
		{
			return FindWindow<WorkspaceWindow>( __0x6156 => __0x6156.Document == doc );
		}

		public WorkspaceWindow FindWorkspaceWindow( DockWindow window )
		{
			if( window is DocumentWindow docWindow )
				return FindWindow<WorkspaceWindow>( __0x6157 => __0x6157.Document == docWindow.Document );
			else
				return null;
		}

		public IEnumerable<DocumentWindow> FindWindowsRecursive( DocumentInstance doc )
		{
			return GetDockWindowsRecursive().OfType<DocumentWindow>().Where( __0x6158 => __0x6158.Document == doc );
		}

		protected override void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			if( window is WorkspaceWindow workspaceWindow )
			{
				var __0x6125 = workspaceWindow.GetMainWindow();
				cancel = editorForm.ShowDialogAndSaveDocument( __0x6125 );
			}
			else
			{
				base.OnDockWindowCloseRequest( window, out cancel );
			}

			
		}

		protected override void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
			
			if( window is IDocumentWindow docWindow )
				WindowConfig.FromDocumentWindow( docWindow ).Save( e.XmlWriter );
			
		}

		protected override void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
			if( window == null )
			{
				var __0x6126 = new WindowConfig();
				__0x6126.Load( e.XmlReader );

				if( !string.IsNullOrEmpty( __0x6126.RealFileName ) || !string.IsNullOrEmpty( __0x6126.SpecialMode ) )
				{
					var __0x6127 = EditorAPI.CreateDocument( __0x6126.RealFileName, __0x6126.SpecialMode );
					if( __0x6127 == null )
					{
						
						e.Page = null;
						return;
					}

					window = EditorAPI.CreateWindow( __0x6127 );
					AddDockWindowInternal( window, false, e.Page );
				}
				else
				{
					if( __0x6126.Type != null && __0x6126.Type.GetCustomAttribute<RestoreDockWindowAfterEditorReloadAttribute>( true ) != null )
					{
						
						

						var __0x6128 = new DocumentInstance( "", null, "" );
						EditorAPI.Documents.Add( __0x6128 );

						var __0x6129 = (DocumentWindow)__0x6126.Type.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
						window = __0x6129;
						__0x6129.InitDocumentWindow( __0x6128, null, false, null );

						AddDockWindowInternal( window, false, e.Page );
					}
				}

			}
			else
			{
				
			}

			
		}

		public void SaveAdditionalConfig()
		{
			var __0x6130 = EngineConfig.TextBlock;

			var __0x6131 = __0x6130.FindChild( "Docking" );
			if( __0x6131 != null )
				__0x6130.DeleteChild( __0x6131 );

			EditorAPI.GetRestartApplication( out _, out var resetWindowsSettings );
			if( !resetWindowsSettings )
			{
				var __0x6132 = __0x6130.AddChild( "Docking" );

				
				if( dockingControl != null )
				{
					
					var __0x6133 = new ESet<string>();
					foreach( var __0x6147 in dockingControl )
					{
						var __0x6134 = __0x6147 as KryptonDockingEdge;
						if( __0x6134 != null )
						{
							foreach( var __0x6148 in __0x6134 )
							{
								var __0x6135 = __0x6148 as KryptonDockingEdgeAutoHidden;
								if( __0x6135 != null )
								{
									foreach( var __0x6149 in __0x6135 )
									{
										var __0x6136 = __0x6149 as KryptonDockingAutoHiddenGroup;
										if( __0x6136 != null )
										{
											foreach( var __0x6150 in __0x6136.AutoHiddenGroupControl.Pages )
												__0x6133.AddWithCheckAlreadyContained( __0x6150.UniqueName );
										}
									}
								}
							}
						}
					}

					
					var __0x6137 = new Dictionary<string, KryptonPage>();
					foreach( var __0x6151 in DockingManager.Pages )
						__0x6137[ __0x6151.UniqueName ] = __0x6151;

					
					foreach( var __0x6152 in __0x6133 )
					{
						if( __0x6137.TryGetValue( __0x6152, out var page ) )
						{
							var __0x6138 = __0x6132.AddChild( "Page" );
							__0x6138.SetAttribute( "Name", page.UniqueName );
							__0x6138.SetAttribute( "AutoHiddenSlideSize", $"{page.AutoHiddenSlideSize.Width} {page.AutoHiddenSlideSize.Height}" );
						}
					}
				}
			}
		}

		protected override KryptonPage CreatePage( DockWindow window, bool createCloseButton, KryptonPage existPage = null )
		{
			var __0x6139 = base.CreatePage( window, createCloseButton, existPage );

			
			var __0x6140 = EngineConfig.TextBlock;
			var __0x6141 = __0x6140.FindChild( "Docking" );
			if( __0x6141 != null )
			{
				foreach( var __0x6153 in __0x6141.Children )
				{
					if( __0x6153.Name == "Page" )
					{
						var __0x6142 = __0x6153.GetAttribute( "Name" );
						if( __0x6139.UniqueName == __0x6142 )
						{
							try
							{
								var __0x6143 = Vector2I.Parse( __0x6153.GetAttribute( "AutoHiddenSlideSize" ) );
								__0x6139.AutoHiddenSlideSize = new Size( __0x6143.X, __0x6143.Y );
							}
							catch { }

							break;
						}
					}
				}
			}

			return __0x6139;
		}

	}

	
	
	
	
	
	

	
	
	
	

	
	
	

	
	
	
	

}





namespace NeoAxis.Editor
{
	
	
	
	
	class WorkspaceControllerForWindow : WorkspaceController
	{
		
		internal class WindowConfig
		{
			internal string ObjectPath { get; set; }
			internal bool OpenAsSettings { get; set; }

			internal static WindowConfig FromComponent( Component comp )
			{
				return new WindowConfig()
				{
					OpenAsSettings = EditorAPI.GetDocumentWindowClass( comp ) == typeof( ObjectSettingsWindow ), 
					ObjectPath = comp.GetPathFromRoot()
				};
			}

			public static WindowConfig FromDocumentWindow( DocumentWindow window )
			{
				var __0x6159 = (Component)window.ObjectOfWindow;
				return new WindowConfig()
				{
					OpenAsSettings = window.OpenAsSettings,
					ObjectPath = __0x6159.GetPathFromRoot()
				};
			}

			internal void Save( XmlWriter xmlWriter )
			{
				xmlWriter.WriteAttributeString( "ObjPath", ObjectPath );
				if( OpenAsSettings )
					xmlWriter.WriteAttributeString( "OpenAsSettings", OpenAsSettings.ToString() );
			}

			internal void Load( XmlReader xmlReader )
			{
				ObjectPath = xmlReader.GetAttribute( "ObjPath" );
				bool.TryParse( xmlReader.GetAttribute( "OpenAsSettings" ), out bool result );
				OpenAsSettings = result;
			}
		}

		bool __0x6160 = false;

		protected WorkspaceWindow WorkspaceWindow
		{
			get { return (WorkspaceWindow)ownerControl; }
		}

		public DocumentWindow GetMainWindow()
		{
			return GetDockWindows().OfType<DocumentWindow>().FirstOrDefault( __0x6171 => __0x6171.IsMainWindowInWorkspace );
		}

		internal override DockWindow GetSelectedDockWindow()
		{
			
			
			

			var __0x6161 = dockableWorkspaceControl.ActivePage;
			
			if( __0x6161 == null )
				return null;

			var __0x6162 = __0x6161.GetDockWindow();
			return __0x6162;
		}

		public WorkspaceControllerForWindow( Control ownerControl, EditorForm ownerForm )
			: base( ownerControl, ownerForm )
		{
		}

		public override void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			Debug.Assert( window is DocumentWindow );

			var __0x6163 = (DocumentWindow)window;

			if( __0x6163.Document == null )
				throw new ArgumentNullException( nameof( __0x6163.Document ) );

			if( __0x6163.Document != WorkspaceWindow.Document )
				throw new ArgumentException( nameof( __0x6163.Document ) + " should be equal to the " + nameof( WorkspaceWindow.Document ) );

			base.AddDockWindow( window, floatingWindow, select );
		}

		protected override void OnDockWindowAdded( DockWindow window )
		{
			base.OnDockWindowAdded( window );

			var __0x6164 = (DocumentWindow)window;
			__0x6164.IsWindowInWorkspace = true;
		}

		protected override void OnDockWindowRemoved( DockWindow window )
		{
			Debug.Assert( window is DocumentWindow );
			Debug.Assert( ( (DocumentWindow)window ).IsWindowInWorkspace );

			var __0x6165 = (DocumentWindow)window;
			__0x6165.IsWindowInWorkspace = false;

			if( !__0x6160 & !disposing )
			{
				var __0x6166 = editorForm.WorkspaceController;

				
				if( __0x6165.IsMainWindowInWorkspace )
				{
					
					__0x6166.RemoveDockWindow( WorkspaceWindow, true );
				}
				else
				{
					
					
					bool __0x6167 = dockWindows.Count() == 1;
					if( __0x6167 )
					{
						__0x6160 = true;
						var __0x6168 = dockWindows.First().Value;
						this.RemoveDockWindow( __0x6168, false );

						__0x6166.ReplaceDockWindow( WorkspaceWindow, __0x6168, true, true );

						__0x6160 = false;
					}
				}
			}

			base.OnDockWindowRemoved( window );
		}

		protected override void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
			
			if( window is DocumentWindow docWindow )
				WindowConfig.FromDocumentWindow( docWindow ).Save( e.XmlWriter );
			
		}

		protected override void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
			if( window == null )
			{
				var __0x6169 = new WindowConfig();
				__0x6169.Load( e.XmlReader );

				window = EditorAPI.CreateWindowImpl( WorkspaceWindow.Document, __0x6169.ObjectPath, __0x6169.OpenAsSettings );
				AddDockWindowInternal( window, false, e.Page );
			}
			else
			{
				
			}

			
		}

		protected override void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			
			var __0x6170 = window as DocumentWindow;
			if( __0x6170 != null && __0x6170.ObjectOfWindow == __0x6170.Document.ResultObject && !__0x6170.OpenAsSettings )
			{
				cancel = true;
				return;
			}

			base.OnDockWindowCloseRequest( window, out cancel );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class WorkspaceWindow : DockWindow, IDocumentWindow
	{
		WorkspaceControllerForWindow __0x6172;

		

		public DocumentInstance Document { get; private set; }

		public bool IsDocumentSaved()
		{
			return !Document.Modified;
		}

		public WorkspaceController WorkspaceController
		{
			get { return __0x6172; }
		}

		public DocumentWindow GetMainWindow()
		{
			return __0x6172.GetMainWindow();
		}

		public DockWindow GetSelectedDockWindow()
		{
			return __0x6172.GetSelectedDockWindow();
		}

		public WorkspaceWindow( EditorForm ownerForm )
		{
			__0x6179();
			__0x6172 = new WorkspaceControllerForWindow( this, ownerForm );

			var __0x6173 = __0x6172.DockingManager.Strings;
			__0x6173.TextTabbedDocument = EditorLocalization.Translate( "Docking", __0x6173.TextTabbedDocument );
			__0x6173.TextAutoHide = EditorLocalization.Translate( "Docking", __0x6173.TextAutoHide );
			__0x6173.TextClose = EditorLocalization.Translate( "Docking", __0x6173.TextClose );
			__0x6173.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x6173.TextCloseAllButThis );
			__0x6173.TextDock = EditorLocalization.Translate( "Docking", __0x6173.TextDock );
			__0x6173.TextFloat = EditorLocalization.Translate( "Docking", __0x6173.TextFloat );
			__0x6173.TextHide = EditorLocalization.Translate( "Docking", __0x6173.TextHide );
			__0x6173.TextWindowLocation = EditorLocalization.Translate( "Docking", __0x6173.TextWindowLocation );
		}

		public void Init( DocumentInstance document )
		{
			if( document == null )
				throw new ArgumentNullException( nameof( document ) );

			Document = document;
			UpdateWindowTitle();
		}

		public void InitFromConfig( DocumentInstance document )
		{
			Init( document );

			var __0x6174 = document.ResultComponent.EditorDocumentConfiguration;
			__0x6172.LoadLayoutFromString( __0x6174 );
		}

		protected override string GetResultWindowTitle()
		{
			var __0x6175 = Path.GetFileName( Document.RealFileName );
			if( Document.Modified )
				__0x6175 += "*";
			return __0x6175;
		}

		protected override void Dispose( bool disposing )
		{
			__0x6172.Dispose();
			base.Dispose( disposing );
		}

		protected internal override void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
			Document.OnShowTitleContextMenu( this, items );
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x6176 = GetSelectedDockWindow() as DocumentWindow;
			if( __0x6176 != null )
				return new ObjectsInFocus( __0x6176, __0x6176.SelectedObjects );
			return null;
		}
	}
}
namespace NeoAxis.Editor
{
	partial class WorkspaceWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x6177 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6179()
		{
			this.__0x6178 = new LowProfileDockableWorkspace();
			((System.ComponentModel.ISupportInitialize)(this.__0x6178)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x6178.AutoHiddenHost = false;
			this.__0x6178.CompactFlags = ((Internal.ComponentFactory.Krypton.Workspace.CompactFlags)(((Internal.ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptyCells | Internal.ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptySequences) 
            | Internal.ComponentFactory.Krypton.Workspace.CompactFlags.PromoteLeafs)));
			this.__0x6178.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x6178.Location = new System.Drawing.Point(0, 0);
			this.__0x6178.Name = "kryptonDockableWorkspace";
			
			
			
			this.__0x6178.Root.UniqueName = "4A87E34386084E14BC81ED10FBED4D99";
			this.__0x6178.Root.WorkspaceControl = this.__0x6178;
			this.__0x6178.ShowMaximizeButton = false;
			this.__0x6178.Size = new System.Drawing.Size(266, 139);
			this.__0x6178.TabIndex = 1;
			this.__0x6178.TabStop = true;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x6178);
			this.Name = "WorkspaceWindow";
			((System.ComponentModel.ISupportInitialize)(this.__0x6178)).EndInit();
			this.ResumeLayout(false);

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Docking.KryptonDockableWorkspace __0x6178;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// This class reads and provides data from XML documentation files of assemblies.
	/// </summary>
	public static class XmlDocumentationFiles
	{
		static Dictionary<string, string> __0x6180 = new Dictionary<string, string>( 2048 );
		static ESet<Assembly> __0x6181 = new ESet<Assembly>();
		static ESet<string> __0x6182 = new ESet<string>();

		

		public static void Load( string xmlFile )
		{
			if( __0x6182.Contains( xmlFile ) )
				return;
			__0x6182.Add( xmlFile );

			var __0x6183 = Path.Combine( VirtualFileSystem.Directories.Binaries, xmlFile );
			if( File.Exists( __0x6183 ) )
			{
				try
				{
					var __0x6184 = new XmlDocument();
					__0x6184.Load( __0x6183 );

					foreach( XmlNode __0x6216 in __0x6184.SelectNodes( "doc" ) )
					{
						foreach( XmlNode __0x6217 in __0x6216.SelectNodes( "members" ) )
						{
							foreach( XmlNode __0x6218 in __0x6217.ChildNodes )
							{
								if( __0x6218.Name == "member" )
								{
									var __0x6185 = __0x6218.Attributes[ "name" ].Value;

									XmlNode __0x6186 = null;
									try
									{
										__0x6186 = __0x6218.SelectSingleNode( "summary" );
									}
									catch { }

									if( __0x6186 != null )
									{
										string __0x6187 = null;
										if( __0x6186.InnerText != null )
										{
											

											__0x6187 = __0x6186.InnerXml.Trim();

											
											try
											{
												do
												{
													var __0x6188 = __0x6187.IndexOf( "<see " );
													if( __0x6188 == -1 )
														break;

													{
														int __0x6189 = __0x6187.IndexOf( "/>", __0x6188 + 1 );
														if( __0x6189 != -1 )
														{
															var __0x6190 = __0x6187.Substring( __0x6188, __0x6189 - __0x6188 + 2 );

															var __0x6191 = __0x6190.LastIndexOf( '.' );
															var __0x6192 = __0x6190.LastIndexOf( '"' );
															if( __0x6191 == -1 || __0x6192 == -1 )
																break;
															var __0x6193 = __0x6190.Substring( __0x6191 + 1, __0x6192 - __0x6191 - 1 );

															__0x6193 = TypeUtility.DisplayNameAddSpaces( __0x6193 );

															__0x6187 = __0x6187.Replace( __0x6190, __0x6193 );

															continue;
														}
													}

													{
														int __0x6194 = __0x6187.IndexOf( ">", __0x6188 + 1 );
														int __0x6195 = __0x6187.IndexOf( "</see>", __0x6188 + 1 );
														if( __0x6194 != -1 && __0x6195 != -1 )
														{
															var __0x6196 = __0x6187;
															__0x6187 = __0x6196.Substring( 0, __0x6188 ) + __0x6196.Substring( __0x6194 + 1, __0x6195 - __0x6194 - 1 ) + __0x6196.Substring( __0x6195 + "</see>".Length );
															continue;
														}
													}

													break;

												} while( true );
											}
											catch { }

											
										}

										if( !string.IsNullOrEmpty( __0x6187 ) )
											__0x6180[ __0x6185 ] = __0x6187;
									}
								}
							}
						}
					}

				}
				catch( Exception e )
				{
					Log.Warning( "XmlDocumentationData: Load: Unable to parse file \'{0}\'. Error: \'{1}\'", __0x6183, e.Message );
				}
			}
		}

		public static void PreloadBaseAssemblies()
		{
			Load( "NeoAxis.Core.xml" );
			Load( "NeoAxis.CoreExtension.xml" );
			Load( "NeoAxis.Extended.xml" );

			
		}

		internal static void LoadFileForType( Metadata.TypeInfo type )
		{
			try
			{
				var __0x6197 = type.GetNetType().Assembly;
				if( __0x6197 == null )
					return;
				if( __0x6181.Contains( __0x6197 ) )
					return;
				__0x6181.Add( __0x6197 );

				var __0x6198 = Path.GetFileName( __0x6197.Location );
				if( !string.IsNullOrEmpty( __0x6198 ) )
				{
					var __0x6199 = Path.ChangeExtension( __0x6198, ".xml" );
					Load( __0x6199 );
				}
			}
			catch { }
		}

		public static string GetMemberSummary( string member )
		{
			if( __0x6180.TryGetValue( member, out var value ) )
				return value;
			return null;
		}

		public static string GetTypeId( Metadata.TypeInfo type )
		{
			LoadFileForType( type );

			return "T:" + type.Name;
		}

		public static string GetMemberId( Metadata.Member member )
		{
			var __0x6200 = member.Owner as Metadata.TypeInfo;
			if( __0x6200 != null )
			{
				LoadFileForType( __0x6200 );

				{
					var __0x6201 = member as Metadata.Property;
					if( __0x6201 != null )
					{
						var __0x6202 = __0x6201 as Metadata.NetTypeInfo.NetProperty;
						if( __0x6202 != null && __0x6202.NetMember is FieldInfo )
							return "F:" + __0x6200.Name + "." + __0x6201.Name;
						else
							return "P:" + __0x6200.Name + "." + __0x6201.Name;
					}
				}

				{
					var __0x6203 = member as Metadata.Method;
					if( __0x6203 != null )
					{
						var __0x6204 = new StringBuilder( "M:" + __0x6200.Name + "." + __0x6203.Name );

						bool __0x6205 = false;
						for( int __0x6206 = 0; __0x6206 < __0x6203.Parameters.Length; __0x6206++ )
						{
							var __0x6207 = __0x6203.Parameters[ __0x6206 ];
							if( !__0x6207.ReturnValue )
							{
								if( __0x6205 )
									__0x6204.Append( ',' );
								else
									__0x6204.Append( '(' );

								if( !__0x6207.ReturnValue )
								{
									

									if( __0x6207.Output )
										__0x6204.Append( "out " );
									else if( __0x6207.ByReference )
										__0x6204.Append( "ref " );
								}
								__0x6204.Append( __0x6207.Type.Name );

								__0x6205 = true;
							}
						}
						if( __0x6205 )
							__0x6204.Append( ')' );

						return __0x6204.ToString();
					}
				}

				{
					var __0x6208 = member as Metadata.Event;
					if( __0x6208 != null )
						return "E:" + __0x6200.Name + "." + __0x6208.Name;
				}
			}

			return null;
		}

		static void __0x6221()
		{
			
			
			

			bool __0x6209 = false;

			ESet<Metadata.Member> __0x6210 = new ESet<Metadata.Member>( 8000 );

			foreach( var __0x6219 in MetadataManager.GetNetTypes() )
			{
				if( typeof( Component ).IsAssignableFrom( __0x6219.GetNetType() ) && __0x6219.GetNetType().IsPublic )
				{
					Metadata.GetMembersContext __0x6211 = new Metadata.GetMembersContext();
					__0x6211.Filter = false;
					foreach( var __0x6220 in __0x6219.MetadataGetMembers( __0x6211 ) )
					{
						string __0x6212 = null;

						var __0x6213 = __0x6220 as Metadata.Property;
						if( __0x6213 != null && __0x6213.Browsable && !__0x6210.Contains( __0x6213 ) )
						{
							__0x6210.AddWithCheckAlreadyContained( __0x6213 );

							var __0x6214 = GetMemberId( __0x6220 );
							if( !string.IsNullOrEmpty( __0x6214 ) )
							{
								if( string.IsNullOrEmpty( GetMemberSummary( __0x6214 ) ) )
								{
									var __0x6215 = __0x6219.Name + " " + "property: " + __0x6220.Name;
									
									__0x6212 = __0x6215;
								}
							}
						}

						


						if( __0x6212 != null )
						{
							if( !__0x6209 )
							{
								Log.InvisibleInfo( "-----------------------------" );
								Log.InvisibleInfo( "Missing type descriptions:" );
								__0x6209 = true;
							}

							Log.InvisibleInfo( __0x6212 );
						}
					}
				}
			}

			if( __0x6209 )
				Log.InvisibleInfo( "-----------------------------" );
		}
	}
}






#if !DEPLOY

namespace NeoAxis.Editor
{
	public static partial class BuilderActions
	{
		public class MeshInSpaceItem
		{
			public MeshInSpace meshInSpace;
			public List<UndoSystem.Action> undoMeshChanges = new List<UndoSystem.Action>();
			public bool undoMeshChangesLocked;
		}

		public delegate void ActionExecuteDelegate( MeshInSpaceItem[] __0x6396, List<UndoSystem.Action> __0x6397 );

		public static void ExecuteAction( BuilderActionContext actionContext, ActionExecuteDelegate execute, bool copyExternalMeshOnlyOfFirstMeshInSpace )
		{
			var __0x6222 = actionContext.GetSelectedMeshInSpaces();
			if( __0x6222.Length == 0 )
				return;

			

			var __0x6223 = new MeshInSpaceItem[ __0x6222.Length ];
			for( int __0x6224 = 0; __0x6224 < __0x6223.Length; __0x6224++ )
			{
				var __0x6225 = __0x6222[ __0x6224 ];

				var __0x6226 = new MeshInSpaceItem();
				__0x6223[ __0x6224 ] = __0x6226;

				__0x6226.meshInSpace = __0x6225;

				
				if( __0x6224 == 0 || !copyExternalMeshOnlyOfFirstMeshInSpace )
				{
					var __0x6227 = __0x6225.Mesh.Value;
					if( __0x6227 != null )
					{
						BuilderCommonFunctions.CopyExternalMesh( actionContext.DocumentWindow.Document, __0x6225, ref __0x6227, __0x6226.undoMeshChanges, ref __0x6226.undoMeshChangesLocked );
					}
				}
			}

			var __0x6228 = new List<UndoSystem.Action>();

			
			execute( __0x6223, __0x6228 );

			
			var __0x6229 = new UndoMultiAction();
			foreach( var __0x6375 in __0x6223 )
				__0x6229.AddActions( __0x6375.undoMeshChanges );
			__0x6229.AddActions( __0x6228 );

			__0x6229.Actions.Reverse();

			actionContext.DocumentWindow?.Document?.CommitUndoAction( __0x6229 );
		}

		
		
		
		
		
		
		
		
		

		public static void MergeObjectsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode != BuilderSelectionMode.Object )
				return;

			
			var __0x6230 = actionContext.GetSelectedMeshGeometries();
			if( actionContext.ObjectsInFocus.All( __0x6398 => __0x6398 is MeshGeometry ) && __0x6230.Length > 1 )
			{
				var __0x6231 = true;
				for( int __0x6232 = 1; __0x6232 < __0x6230.Length; __0x6232++ )
				{
					if( __0x6230[ 0 ].Parent != __0x6230[ __0x6232 ].Parent )
						__0x6231 = false;
				}
				if( __0x6231 )
					context.Enabled = true;
			}

			
			if( actionContext.ObjectsInFocus.All( __0x6399 => __0x6399 is MeshInSpace ) && actionContext.ObjectsInFocus.Length > 1 )
				context.Enabled = true;
		}

		public static void MergeObjects( BuilderActionContext actionContext )
		{
			
			var __0x6233 = actionContext.GetSelectedMeshGeometries();
			if( actionContext.ObjectsInFocus.All( __0x6400 => __0x6400 is MeshGeometry ) && __0x6233.Length > 1 )
			{
				var __0x6234 = __0x6233[ 0 ].Parent as Mesh;
				if( __0x6234 != null )
				{
					var __0x6235 = __0x6234.Parent as MeshInSpace;
					if( __0x6235 != null )
					{
						bool __0x6236 = __0x6235.Enabled;
						__0x6235.Enabled = false;
						try
						{
							var __0x6237 = actionContext.DocumentWindow.Document;

							var __0x6238 = new MeshInSpaceItem();
							__0x6238.meshInSpace = __0x6235;
							BuilderCommonFunctions.CopyExternalMesh( __0x6237, __0x6235, ref __0x6234, __0x6238.undoMeshChanges, ref __0x6238.undoMeshChangesLocked );

							__0x6390( __0x6234, __0x6233, __0x6237, __0x6238.undoMeshChanges, ref __0x6238.undoMeshChangesLocked );

							
							var __0x6239 = new UndoMultiAction();
							__0x6239.AddActions( __0x6238.undoMeshChanges );

							__0x6239.Actions.Reverse();

							__0x6237.CommitUndoAction( __0x6239 );
						}
						finally
						{
							__0x6235.Enabled = __0x6236;
						}
					}
				}
			}

			
			if( actionContext.ObjectsInFocus.All( __0x6401 => __0x6401 is MeshInSpace ) && actionContext.ObjectsInFocus.Length > 1 )
			{
				void Execute( MeshInSpaceItem[] __0x6402, List<UndoSystem.Action> __0x6403 )
				{
					__0x6391( __0x6402, actionContext.DocumentWindow?.Document, __0x6403 );
					
					
				}

				ExecuteAction( actionContext, Execute, true );
			}
		}

		static void __0x6390( Mesh __0x6404, MeshGeometry[] __0x6405, DocumentInstance __0x6406, List<UndoSystem.Action> __0x6407, ref bool __0x6408 )
		{
			var __0x6240 = __0x6404.ExtractData();

			var __0x6241 = new List<int>();
			var __0x6242 = new List<byte>();
			var __0x6243 = __0x6240.MeshGeometries[ 0 ].VertexStructure;
			var __0x6244 = new BuilderMeshData.MeshGeometryFormat( __0x6243 );

			for( int __0x6245 = 0; __0x6245 < __0x6240.MeshGeometries.Length; __0x6245++ )
			{
				var __0x6246 = __0x6240.MeshGeometries[ __0x6245 ];


				if( __0x6246.Vertices == null || __0x6246.Indices == null )
					continue;
				int __0x6247 = __0x6242.Count / __0x6244.vertexSize;

				for( int __0x6248 = 0; __0x6248 < __0x6246.Indices.Length; __0x6248++ )
					__0x6241.Add( __0x6246.Indices[ __0x6248 ] + __0x6247 );

				if( !BuilderCommonFunctions.IsSameVertexStructure( __0x6243, __0x6246.VertexStructure ) )
					__0x6246.Vertices = BuilderMeshData.ConvertToFormat( new BuilderMeshData.MeshGeometryFormat( __0x6246.VertexStructure ), __0x6246.Vertices, __0x6244 );

				__0x6242.AddRange( __0x6246.Vertices );

				if( __0x6240.Structure != null )
				{
					foreach( var __0x6376 in __0x6240.Structure.Faces )
					{
						for( int __0x6249 = 0; __0x6249 < __0x6376.Triangles.Length; __0x6249++ )
						{
							if( __0x6376.Triangles[ __0x6249 ].RawGeometry == __0x6245 )
							{
								__0x6376.Triangles[ __0x6249 ].RawGeometry = 0;
								__0x6376.Triangles[ __0x6249 ].RawVertex += __0x6247;
							}
						}
					}
				}
			}


			var __0x6250 = __0x6405[ 0 ];
			var __0x6251 = __0x6250.Parent.Components.IndexOf( __0x6250 );

			var __0x6252 = __0x6404.CreateComponent<MeshGeometry>( __0x6251 );
			__0x6252.VertexStructure = __0x6243;
			__0x6252.Vertices = __0x6242.ToArray();
			__0x6252.Indices = __0x6241.ToArray();
			__0x6252.Material = __0x6250.Material;

			
			if( !__0x6408 )
				__0x6407.Add( new UndoActionComponentCreateDelete( __0x6406, new Component[] { __0x6252 }, true ) );

			
			if( !__0x6408 )
				__0x6407.Add( new UndoActionComponentCreateDelete( __0x6406, __0x6405, false ) );
			else
			{
				foreach( var __0x6377 in __0x6405 )
					__0x6377.Dispose();
			}

			
			if( !__0x6408 )
			{
				var __0x6253 = (Metadata.Property)__0x6404.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
				__0x6407.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6404, __0x6253, __0x6404.Structure ) ) );
			}
			__0x6404.BuildStructure();

			__0x6252.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6252 );
		}

		static void __0x6391( MeshInSpaceItem[] __0x6409, DocumentInstance __0x6410, List<UndoSystem.Action> __0x6411 )
		{
			var __0x6254 = __0x6409.Select( __0x6412 => __0x6412.meshInSpace ).ToArray();

			if( __0x6254.Length < 2 )
				return;

			var __0x6255 = __0x6409[ 0 ];
			var __0x6256 = __0x6254[ 0 ];

			var __0x6257 = __0x6256.Transform.Value;
			var __0x6258 = __0x6257.ToMatrix4().GetInverse();
			var __0x6259 = __0x6257.Rotation.GetInverse();

			Mesh.StructureClass __0x6260 = null;
			var __0x6261 = new List<MeshGeometry>();
			for( int __0x6262 = 0; __0x6262 < __0x6254.Length; __0x6262++ )
			{
				var __0x6263 = __0x6254[ __0x6262 ].Mesh.Value;
				if( __0x6263 == null )
					continue;
				var __0x6264 = __0x6254[ __0x6262 ].Transform.Value;
				var __0x6265 = __0x6258 * __0x6264.ToMatrix4();
				var __0x6266 = __0x6259 * __0x6264.Rotation;

				var __0x6267 = __0x6263.GetComponents<MeshGeometry>();
				__0x6260 = Mesh.StructureClass.Concat( __0x6260, __0x6263.ExtractData().Structure, __0x6261.Count );
				foreach( var __0x6378 in __0x6267 )
				{
					if( __0x6378 is MeshGeometry_Procedural meshGeometryProcedural )
					{
						VertexElement[] __0x6268 = null;
						byte[] __0x6269 = null;
						int[] __0x6270 = null;
						Material __0x6271 = null;
						byte[] __0x6272 = null;
						Mesh.StructureClass __0x6273 = null;
						meshGeometryProcedural.GetProceduralGeneratedData( ref __0x6268, ref __0x6269, ref __0x6270, ref __0x6271, ref __0x6272, ref __0x6273 );

						var __0x6274 = new MeshGeometry();
						__0x6274.Name = meshGeometryProcedural.Name;
						__0x6274.VertexStructure = __0x6268;
						__0x6274.Vertices = __0x6269;
						__0x6274.Indices = __0x6270;

						__0x6274.Material = meshGeometryProcedural.Material;
						

						TransformVertices( __0x6274.Vertices.Value, new BuilderMeshData.MeshGeometryFormat( __0x6274.VertexStructure ), __0x6265, __0x6266 );
						__0x6261.Add( __0x6274 );
					}
					else
					{
						var __0x6275 = (MeshGeometry)__0x6378.Clone();

						if( __0x6275.Vertices.Value != null )
						{
							var __0x6276 = (byte[])__0x6275.Vertices.Value.Clone();
							TransformVertices( __0x6276, new BuilderMeshData.MeshGeometryFormat( __0x6275.VertexStructure ), __0x6265, __0x6266 );
							__0x6275.Vertices = __0x6276;
						}
						__0x6261.Add( __0x6275 );
					}
				}
			}

			

			
			

			
			bool __0x6277 = __0x6256.Enabled;
			try
			{
				__0x6256.Enabled = false;

				
				

				
				
				
				
				
				
				
				
				
				
				
				
				

				

				var __0x6278 = __0x6256.GetComponent<Mesh>();
				if( __0x6278 != null )
				{
					
					

					
					

					if( !__0x6255.undoMeshChangesLocked )
						__0x6255.undoMeshChanges.Add( new UndoActionComponentCreateDelete( __0x6410, __0x6278.GetComponents(), false ) );
					else
					{
						foreach( var __0x6379 in __0x6278.GetComponents() )
							__0x6379.Dispose();
					}

					foreach( var __0x6380 in __0x6261 )
					{
						__0x6278.AddComponent( __0x6380 );
						BuilderCommonFunctions.EnsureNameIsUnique( __0x6380 );
					}

					if( !__0x6255.undoMeshChangesLocked )
						__0x6255.undoMeshChanges.Add( new UndoActionComponentCreateDelete( __0x6410, __0x6261.ToArray(), true ) );

					
					if( !__0x6255.undoMeshChangesLocked )
					{
						var __0x6279 = (Metadata.Property)__0x6278.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
						__0x6255.undoMeshChanges.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6278, __0x6279, __0x6278.Structure ) ) );
					}
					__0x6278.BuildStructure();
				}
			}
			finally
			{
				__0x6256.Enabled = __0x6277;
				
			}

			var __0x6280 = new List<MeshInSpace>( __0x6254 );
			__0x6280.RemoveAt( 0 );

			__0x6411.Add( new UndoActionComponentCreateDelete( __0x6410, __0x6280.ToArray(), false ) );
			
			

			
		}

		internal  static unsafe void TransformVertices( byte[] vertices, BuilderMeshData.MeshGeometryFormat format, Matrix4 matrix, Quaternion rotation )
		{
			fixed( byte* __0x6281 = vertices )
			{
				int __0x6282 = vertices.Length / format.vertexSize;
				for( int __0x6283 = 0; __0x6283 < __0x6282; __0x6283++ )
				{
					byte* __0x6284 = __0x6281 + __0x6283 * format.vertexSize;
					Vector3F* __0x6285 = (Vector3F*)( __0x6284 + format.positionOffset );
					*__0x6285 = ( *__0x6285 * matrix ).ToVector3F();

					Vector3F* __0x6286 = (Vector3F*)( __0x6284 + format.normalOffset );
					*__0x6286 = ( *__0x6286 * rotation ).ToVector3F();

					Vector4F* __0x6287 = (Vector4F*)( __0x6284 + format.tangentOffset );
					*__0x6287 = new Vector4F( ( ( *__0x6287 ).ToVector3F() * rotation ).ToVector3F(), ( *__0x6287 ).W );
				}
			}
		}

		

		public static void BoolActionGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object )
			{
				var __0x6288 = actionContext.GetSelectedMeshInSpaces();
				if( __0x6288.Length == 2 && __0x6288[ 0 ].Mesh.Value != null && __0x6288[ 1 ].Mesh.Value != null )
					context.Enabled = true;
			}
		}

		public enum BoolActionEnum
		{
			Union,
			Intersect,
			Subtract
		}

		static bool __0x6392( Vector3F[] __0x6413, int[] __0x6414 )
		{
			foreach( var __0x6381 in __0x6414 )
			{
				if( __0x6381 < 0 || __0x6381 >= __0x6413.Length )
					return false;
			}
			return true;
		}

		public static void BoolActionExecute( MeshInSpaceItem[] meshInSpaceItems, List<UndoSystem.Action> undoMeshInSpacesCreateDelete, DocumentInstance document, BoolActionEnum boolAction )
		{
			var __0x6289 = meshInSpaceItems[ 0 ];
			var __0x6290 = __0x6289.meshInSpace;
			var __0x6291 = meshInSpaceItems[ 1 ].meshInSpace;

			
			if( boolAction == BoolActionEnum.Union && __0x6290.Mesh.Value.GetComponents<MeshGeometry>().Length > 1 )
			{
				var __0x6292 = __0x6290.Mesh.Value.GetComponents<MeshGeometry>();
				__0x6390( __0x6290.Mesh, __0x6292, document, __0x6289.undoMeshChanges, ref __0x6289.undoMeshChangesLocked );
			}

			BuilderCommonFunctions.ConvertProceduralMeshGeometries( document, __0x6290.Mesh, __0x6289.undoMeshChanges, ref __0x6289.undoMeshChangesLocked );

			List<(Vector3F[] positions, int[] indices)> __0x6293 = __0x6393( __0x6290 );

			(Vector3F[] positions, int[] indices) __0x6294 = __0x6394( __0x6393( __0x6291 ) );

			
			var __0x6295 = __0x6290.Transform.Value.ToMatrix4().GetInverse() * __0x6291.Transform.Value.ToMatrix4();
			var __0x6296 = new Internal.Net3dBool.Vector3[ __0x6294.positions.Length ];
			for( int __0x6297 = 0; __0x6297 < __0x6294.positions.Length; __0x6297++ )
				__0x6296[ __0x6297 ] = ToNet3DBoolVector3( ( __0x6295 * __0x6294.positions[ __0x6297 ] ).ToVector3F() );
			var __0x6298 = new Internal.Net3dBool.Solid( __0x6296, __0x6294.indices );

			var __0x6299 = __0x6290.Mesh.Value.GetComponents<MeshGeometry>();
			var __0x6300 = new List<(Vector3F[] positions, int[] indices, BuilderMeshData.MeshGeometryFormat format)>();
			var __0x6301 = new List<MeshGeometry>();

			for( int __0x6302 = 0; __0x6302 < __0x6293.Count; __0x6302++ )
			{
				var __0x6303 = __0x6293[ __0x6302 ];
				var __0x6304 = __0x6303.positions.Select( ToNet3DBoolVector3 ).ToArray();

				var __0x6305 = new Internal.Net3dBool.BooleanModeller( new Internal.Net3dBool.Solid( __0x6304, __0x6303.indices ), __0x6298 );

				Internal.Net3dBool.Solid __0x6306 = null;
				switch( boolAction )
				{
				case BoolActionEnum.Union: __0x6306 = __0x6305.GetUnion(); break;
				case BoolActionEnum.Intersect: __0x6306 = __0x6305.GetIntersection(); break;
				case BoolActionEnum.Subtract: __0x6306 = __0x6305.GetDifference(); break;
				}

				var __0x6307 = __0x6306.getVertices().Select( ToVector3F ).ToArray();
				if( __0x6307.Length != 0 )
				{
					__0x6300.Add( (__0x6307, __0x6306.getIndices(), new BuilderMeshData.MeshGeometryFormat( __0x6299[ __0x6302 ].VertexStructure )) );
				}
				else
					__0x6301.Add( __0x6299[ __0x6302 ] );
			}

			foreach( var __0x6382 in __0x6300 )
			{
				if( !__0x6392( __0x6382.positions, __0x6382.indices ) )
				{
					
					throw new Exception();
				}
			}

			
			if( __0x6301.Count != 0 )
			{
				if( !__0x6289.undoMeshChangesLocked )
					__0x6289.undoMeshChanges.Add( new UndoActionComponentCreateDelete( document, __0x6301.ToArray(), false ) );
				else
				{
					foreach( var __0x6383 in __0x6301 )
						__0x6383.Dispose();
				}
			}

			
			var __0x6308 = BuilderMeshData.BuildFromRaw( __0x6300 );

			
			__0x6308?.Save( __0x6290.Mesh.Value, null, __0x6289.undoMeshChanges, ref __0x6289.undoMeshChangesLocked );
			__0x6290.Mesh.Value?.BuildStructure();
		}

		
		
		public static void BoolAction( BuilderActionContext actionContext, BoolActionEnum boolAction )
		{
			if( actionContext.SelectionMode != BuilderSelectionMode.Object )
				return;

			void Execute( MeshInSpaceItem[] __0x6415, List<UndoSystem.Action> __0x6416 )
			{
				if( __0x6415.Length != 2 )
					return;

				BoolActionExecute( __0x6415, __0x6416, actionContext.DocumentWindow?.Document, boolAction );
			}

			ExecuteAction( actionContext, Execute, true );
		}

		internal static Vector3F ToVector3F( Internal.Net3dBool.Vector3 v ) => new Vector3F( (float)v.x, (float)v.y, (float)v.z );

		internal static Internal.Net3dBool.Vector3 ToNet3DBoolVector3( Vector3F v ) => new Internal.Net3dBool.Vector3( v.X, v.Y, v.Z );

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		

		
		
		static List<(Vector3F[] positions, int[] indices)> __0x6393( MeshInSpace __0x6417 )
		{
			var __0x6309 = new List<(Vector3F[] positions, int[] indices)>();

			var __0x6310 = __0x6417.Mesh.Value.ExtractData();
			if( __0x6310 != null )
			{
				
				var __0x6311 = new Vector3F[ __0x6310.MeshGeometries.Length ][];
				for( int __0x6312 = 0; __0x6312 < __0x6310.MeshGeometries.Length; __0x6312++ )
				{
					var __0x6313 = new BuilderMeshData.MeshGeometryFormat( __0x6310.MeshGeometries[ __0x6312 ].VertexStructure );
					__0x6311[ __0x6312 ] = new Vector3F[ __0x6310.MeshGeometries[ __0x6312 ].Vertices.Length / __0x6313.vertexSize ];

					unsafe
					{
						fixed( byte* __0x6314 = __0x6310.MeshGeometries[ __0x6312 ].Vertices )
						{
							for( int __0x6315 = 0; __0x6315 < __0x6311[ __0x6312 ].Length; __0x6315++ )
								__0x6311[ __0x6312 ][ __0x6315 ] = *(Vector3F*)( __0x6314 + __0x6315 * __0x6313.vertexSize + __0x6313.positionOffset );
						}
					}
				}
				

				var __0x6316 = new List<Mesh.StructureClass.FaceVertex>[ __0x6310.MeshGeometries.Length ];
				for( int __0x6317 = 0; __0x6317 < __0x6310.MeshGeometries.Length; __0x6317++ )
					__0x6316[ __0x6317 ] = new List<Mesh.StructureClass.FaceVertex>();
				for( int __0x6318 = 0; __0x6318 < __0x6310.Structure.Faces.Length; __0x6318++ )
				{
					var __0x6319 = __0x6310.Structure.Faces[ __0x6318 ];
					for( int __0x6320 = 0; __0x6320 < __0x6319.Triangles.Length; __0x6320++ )
						__0x6316[ __0x6319.Triangles[ __0x6320 ].RawGeometry ].Add( __0x6319.Triangles[ __0x6320 ] );
				}

				for( int __0x6321 = 0; __0x6321 < __0x6316.Length; __0x6321++ )
				{
					var __0x6322 = __0x6316[ __0x6321 ];
					int[] __0x6323 = new int[ __0x6310.Structure.Vertices.Length ];
					for( int __0x6324 = 0; __0x6324 < __0x6323.Length; __0x6324++ )
						__0x6323[ __0x6324 ] = -1;
					int __0x6325 = 0;
					var __0x6326 = new List<Vector3F>();
					var __0x6327 = new int[ __0x6322.Count ];

					for( int __0x6328 = 0; __0x6328 < __0x6322.Count; __0x6328++ )
					{
						var __0x6329 = __0x6322[ __0x6328 ];
						int __0x6330 = __0x6323[ __0x6329.Vertex ];
						if( __0x6330 == -1 )
						{
							__0x6330 = __0x6325++;
							__0x6323[ __0x6329.Vertex ] = __0x6330;
							__0x6326.Add( __0x6311[ __0x6329.RawGeometry ][ __0x6329.RawVertex ] );
						}
						__0x6327[ __0x6328 ] = __0x6330;
					}
					__0x6309.Add( (__0x6326.ToArray(), __0x6327) );
				}
			}

			return __0x6309;
		}

		

		static (Vector3F[] positions, int[] indices) __0x6394( List<(Vector3F[] positions, int[] indices)> __0x6418 )
		{
			var __0x6331 = new List<Vector3F>();
			var __0x6332 = new List<int>();

			foreach( var __0x6384 in __0x6418 )
			{
				int __0x6333 = __0x6331.Count;
				__0x6331.AddRange( __0x6384.positions );
				int __0x6334 = __0x6332.Count;
				__0x6332.AddRange( __0x6384.indices );
				for( int __0x6335 = __0x6334; __0x6335 < __0x6332.Count; __0x6335++ )
					__0x6332[ __0x6335 ] += __0x6333;
			}
			return (__0x6331.ToArray(), __0x6332.ToArray());
		}

		

		public static void SetColorGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMesh().mesh != null || actionContext.Selection.VertexCount != 0 || actionContext.Selection.EdgeCount != 0 || actionContext.Selection.FaceCount != 0 )
			{
				context.Enabled = true;
			}
		}

		public static void SetColor( BuilderActionContext actionContext, ColorValue color )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object )
			{
				var __0x6336 = actionContext.DocumentWindow.Document;
				var __0x6337 = new List<UndoSystem.Action>();
				var __0x6338 = false;

				foreach( var __0x6385 in actionContext.GetSelectedMeshInSpaces() )
				{
					
					{
						var __0x6339 = (Metadata.Property)__0x6385.MetadataGetMemberBySignature( "property:" + nameof( MeshInSpace.Color ) );
						__0x6337.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6385, __0x6339, __0x6385.Color ) ) );

						__0x6385.Color = color;
					}

					
					{
						var __0x6340 = new ReferenceNoValue( @"Base\Materials\White.material" );

						var __0x6341 = __0x6385.Mesh.Value;
						if( __0x6341 != null )
						{
							if( __0x6341.Parent == __0x6385 )
							{
								foreach( var __0x6386 in __0x6341.GetComponents<MeshGeometry>() )
								{
									if( !__0x6386.Material.ReferenceSpecified && __0x6386.Material.Value == null )
										BuilderOneMeshActions.SetMaterialForGeometry( __0x6386, __0x6340, __0x6337, ref __0x6338 );
								}
							}
						}
					}
				}

				var __0x6342 = new UndoMultiAction();
				__0x6342.AddActions( __0x6337 );
				__0x6336.CommitUndoAction( __0x6342 );
			}
			else
				BuilderOneMeshActions.SetVertexColor( actionContext, color );
		}

		public static ColorValue? GetInitialColor( BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object )
			{
				var __0x6343 = actionContext.GetSelectedMeshInSpaces();
				if( __0x6343.Length != 0 )
				{
					ColorValue __0x6344 = __0x6343[ 0 ].Color;
					for( int __0x6345 = 1; __0x6345 < __0x6343.Length; __0x6345++ )
						if( __0x6344 != __0x6343[ __0x6345 ].Color )
							return null;
					return __0x6344;
				}
				else
					return null;
			}
			else
				return BuilderOneMeshActions.GetInitialColor( actionContext );
		}

		

		public static void MirrorObjectsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMesh().mesh != null )
				context.Enabled = true;
		}

		static void __0x6395( Mesh __0x6419, int __0x6420, List<UndoSystem.Action> __0x6421, bool __0x6422 )
		{
			var __0x6346 = __0x6419.Structure;

			
			if( __0x6419.Structure == null )
				__0x6419.BuildStructure();

			var __0x6347 = __0x6419.ExtractData();

			for( int __0x6348 = 0; __0x6348 < __0x6347.MeshGeometries.Length; __0x6348++ )
			{
				var __0x6349 = __0x6347.MeshGeometries[ __0x6348 ];

				__0x6349.Vertices = (byte[])__0x6349.Vertices.Clone();
				__0x6349.Indices = (int[])__0x6349.Indices.Clone();

				var __0x6350 = new BuilderMeshData.MeshGeometryFormat( __0x6349.VertexStructure );
				int __0x6351 = __0x6349.Vertices.Length / __0x6350.vertexSize;

				unsafe
				{
					fixed( byte* __0x6352 = __0x6349.Vertices )
					{
						for( int __0x6353 = 0; __0x6353 < __0x6351; __0x6353++ )
						{
							byte* __0x6354 = __0x6352 + __0x6353 * __0x6350.vertexSize;

							ref Vector3F __0x6355 = ref *(Vector3F*)( __0x6354 + __0x6350.positionOffset );
							ref Vector3F __0x6356 = ref *(Vector3F*)( __0x6354 + __0x6350.normalOffset );
							ref Vector4F __0x6357 = ref *(Vector4F*)( __0x6354 + __0x6350.tangentOffset );

							switch( __0x6420 )
							{
							case 0:
								__0x6355.X = -__0x6355.X;
								if( __0x6350.normalOffset != -1 )
									__0x6356.X = -__0x6356.X;
								if( __0x6350.tangentOffset != -1 )
									__0x6357.X = -__0x6357.X;
								break;

							case 1:
								__0x6355.Y = -__0x6355.Y;
								if( __0x6350.normalOffset != -1 )
									__0x6356.Y = -__0x6356.Y;
								if( __0x6350.tangentOffset != -1 )
									__0x6357.Y = -__0x6357.Y;
								break;

							case 2:
								__0x6355.Z = -__0x6355.Z;
								if( __0x6350.normalOffset != -1 )
									__0x6356.Z = -__0x6356.Z;
								if( __0x6350.tangentOffset != -1 )
									__0x6357.Z = -__0x6357.Z;
								break;
							}
						}
					}
				}

				
				for( int __0x6358 = 0; __0x6358 < __0x6349.Indices.Length; __0x6358 += 3 )
				{
					int __0x6359 = __0x6349.Indices[ __0x6358 + 1 ];
					__0x6349.Indices[ __0x6358 + 1 ] = __0x6349.Indices[ __0x6358 + 2 ];
					__0x6349.Indices[ __0x6358 + 2 ] = __0x6359;
				}

				
				if( __0x6347.Structure != null )
				{
					foreach( var __0x6387 in __0x6347.Structure.Faces )
					{
						for( int __0x6360 = 0; __0x6360 < __0x6387.Triangles.Length; __0x6360 += 3 )
						{
							var __0x6361 = __0x6387.Triangles[ __0x6360 + 1 ];
							__0x6387.Triangles[ __0x6360 + 1 ] = __0x6387.Triangles[ __0x6360 + 2 ];
							__0x6387.Triangles[ __0x6360 + 2 ] = __0x6361;
						}
					}
				}
			}

			

			
			var __0x6362 = __0x6419.GetComponents<MeshGeometry>();
			for( int __0x6363 = 0; __0x6363 < __0x6362.Length; __0x6363++ )
			{
				var __0x6364 = __0x6362[ __0x6363 ];

				if( !__0x6422 )
				{
					var __0x6365 = (Metadata.Property)__0x6364.MetadataGetMemberBySignature( "property:" + nameof( MeshGeometry.Vertices ) );
					__0x6421.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6364, __0x6365, __0x6364.Vertices ) ) );

					var __0x6366 = (Metadata.Property)__0x6364.MetadataGetMemberBySignature( "property:" + nameof( MeshGeometry.Indices ) );
					__0x6421.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6364, __0x6366, __0x6364.Indices ) ) );
				}
				__0x6364.Vertices = __0x6347.MeshGeometries[ __0x6363 ].Vertices;
				__0x6364.Indices = __0x6347.MeshGeometries[ __0x6363 ].Indices;
			}

			
			if( !__0x6422 )
			{
				var __0x6367 = (Metadata.Property)__0x6419.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
				__0x6421.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6419, __0x6367, __0x6346 ) ) );
			}
			__0x6419.Structure = __0x6347.Structure;
		}

		public static void MirrorObjects( BuilderActionContext actionContext, int axis )
		{
			void Execute( MeshInSpaceItem[] __0x6423, List<UndoSystem.Action> __0x6424 )
			{
				foreach( var __0x6388 in __0x6423 )
				{
					var __0x6368 = __0x6388.meshInSpace;
					var __0x6369 = __0x6368.Mesh.Value;
					if( __0x6369 != null )
					{
						BuilderCommonFunctions.ConvertProceduralMeshGeometries( actionContext.DocumentWindow.Document, __0x6369, __0x6388.undoMeshChanges, ref __0x6388.undoMeshChangesLocked );

						__0x6395( __0x6369, axis, __0x6388.undoMeshChanges, __0x6388.undoMeshChangesLocked );
					}
				}
			}

			ExecuteAction( actionContext, Execute, false );
		}

		

		public static void AddPaintLayerGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length > 0 )
				context.Enabled = true;
		}

		public static void AddPaintLayer( BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object )
			{
				var __0x6370 = actionContext.GetSelectedMeshInSpaces();
				if( __0x6370.Length != 0 )
				{
					var __0x6371 = new List<Component>();

					foreach( var __0x6389 in __0x6370 )
					{
						var __0x6372 = __0x6389.CreateComponent<PaintLayer>( enabled: false );
						__0x6372.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6372 );
						__0x6372.Enabled = true;

						__0x6371.Add( __0x6372 );
					}

					actionContext.DocumentWindow.Focus();

					
					var __0x6373 = actionContext.DocumentWindow.Document;
					var __0x6374 = new UndoActionComponentCreateDelete( __0x6373, __0x6371, true );
					__0x6373.CommitUndoAction( __0x6374 );
					actionContext.DocumentWindow.SelectObjects( __0x6371.ToArray() );
				}
			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	public enum BuilderSelectionMode
	{
		Object, 
		Vertex, 
		Edge, 
		Face 
	}

	

	public class BuilderSelection
	{
		public BuilderSelectionMode SelectionMode;
		public bool Changed;
		int[] __0x6425, __0x6426, __0x6427;
		static readonly int[] __0x6428 = new int[ 0 ];

		public int[] Vertices
		{
			get => __0x6425 ?? __0x6428;
			set
			{
				__0x6425 = value;
				Changed = true;
			}
		}
		public int[] Edges
		{
			get => __0x6426 ?? __0x6428;
			set
			{
				__0x6426 = value;
				Changed = true;
			}
		}
		public int[] Faces
		{
			get => __0x6427 ?? __0x6428;
			set
			{
				__0x6427 = value;
				Changed = true;
			}
		}

		public int VertexCount => SelectionMode == BuilderSelectionMode.Vertex && __0x6425 != null ? __0x6425.Length : 0;
		public int EdgeCount => SelectionMode == BuilderSelectionMode.Edge && __0x6426 != null ? __0x6426.Length : 0;
		public int FaceCount => SelectionMode == BuilderSelectionMode.Face && __0x6427 != null ? __0x6427.Length : 0;

		public void ClearSelection()
		{
			Changed = 0 < VertexCount || 0 < EdgeCount || 0 < FaceCount;
			Vertices = null;
			Edges = null;
			Faces = null;
		}
	}

	

	public struct BuilderActionContext
	{
		public readonly DocumentWindow DocumentWindow;
		public readonly object[] ObjectsInFocus;
		public readonly BuilderWorkareaMode BuilderWorkareaMode;
		public readonly BuilderSelection Selection;

		

		public BuilderActionContext( EditorAction.ClickContext context )
		{
			DocumentWindow = context.ObjectsInFocus.DocumentWindow;
			ObjectsInFocus = context.ObjectsInFocus.Objects;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( DocumentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}

		public BuilderActionContext( EditorAction.GetStateContext context )
		{
			DocumentWindow = context.ObjectsInFocus.DocumentWindow;
			ObjectsInFocus = context.ObjectsInFocus.Objects;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( DocumentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}

		public BuilderActionContext( DocumentWindow documentWindow )
		{
			DocumentWindow = documentWindow;
			ObjectsInFocus = null;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( documentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}

		public BuilderActionContext( DocumentWindow documentWindow, object[] objectsInFocus )
		{
			DocumentWindow = documentWindow;
			ObjectsInFocus = objectsInFocus;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( documentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}

		public (MeshInSpace meshInSpace, Mesh mesh) GetSelectedMesh()
		{
			return BuilderWorkareaMode.GetSelectedMesh( DocumentWindow, ObjectsInFocus );
		}

		
		public MeshInSpace[] GetSelectedMeshInSpaces()
		{
			var __0x6429 = DocumentWindow?.SelectedObjects;
			if( __0x6429 != null )
			{
				List<MeshInSpace> __0x6430 = null;
				foreach( var __0x6433 in __0x6429 )
				{
					if( __0x6433 is MeshInSpace meshInSpace )
					{
						if( __0x6430 == null )
							__0x6430 = new List<MeshInSpace>();
						__0x6430.Add( meshInSpace );
					}
				}
				if( __0x6430 != null )
					return __0x6430.ToArray();
			}

			return Array.Empty<MeshInSpace>();
		}

		public MeshGeometry[] GetSelectedMeshGeometries()
		{
			var __0x6431 = DocumentWindow?.SelectedObjects;
			if( __0x6431 != null )
			{
				List<MeshGeometry> __0x6432 = null;
				foreach( var __0x6434 in __0x6431 )
				{
					if( __0x6434 is MeshGeometry meshGeometry )
					{
						if( __0x6432 == null )
							__0x6432 = new List<MeshGeometry>();
						__0x6432.Add( meshGeometry );
					}
				}
				if( __0x6432 != null )
					return __0x6432.ToArray();
			}

			return Array.Empty<MeshGeometry>();
		}

		public BuilderSelectionMode SelectionMode
		{
			get { return BuilderWorkareaMode?.selectionMode ?? BuilderSelectionMode.Object; }
		}

		public void SelectMeshesInSpace( params MeshInSpace[] meshesInSpace )
		{
			DocumentWindow.SelectObjects( meshesInSpace );
		}

		public void ActionEnd()
		{
			if( !Selection.Changed )
				return;

			switch( SelectionMode )
			{
			case BuilderSelectionMode.Vertex:
				BuilderWorkareaMode.SelectVertices( Selection.Vertices ?? new int[ 0 ] );
				break;
			case BuilderSelectionMode.Edge:
				BuilderWorkareaMode.SelectEdges( Selection.Edges ?? new int[ 0 ] );
				break;
			case BuilderSelectionMode.Face:
				BuilderWorkareaMode.SelectFaces( Selection.Faces ?? new int[ 0 ] );
				break;
			}
			Selection.Changed = false;
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	static class BuilderCommonFunctions
	{
		public static (int lowVertex, int highVertex) OrderVertices( int vertex1, int vertex2 ) => vertex1 < vertex2 ? (vertex1, vertex2) : (vertex2, vertex1);

		public static void CalculateNormal( BuilderMeshData.FaceVertex p0, BuilderMeshData.FaceVertex p1, BuilderMeshData.FaceVertex p2 )
		{
			var __0x6435 = p0.RawVertex.Position;
			var __0x6436 = Vector3F.Cross( p1.RawVertex.Position - __0x6435, p2.RawVertex.Position - __0x6435 ).GetNormalize();
			p0.RawVertex.Normal = p1.RawVertex.Normal = p2.RawVertex.Normal = __0x6436;
		}

		public static Vector3F CalculateNormal( Vector3F p0, Vector3F p1, Vector3F p2 )
		{
			return Vector3F.Cross( p1 - p0, p2 - p0 ).GetNormalize();
		}


		
		
		public static void CalculateTriangleTangentsAndNormalByOldNormalRotation( BuilderMeshData.FaceVertex v0, BuilderMeshData.FaceVertex v1, BuilderMeshData.FaceVertex v2, Vector3F oldNormal )
		{
			var __0x6437 = CalculateNormal( v0.RawVertex.Position, v1.RawVertex.Position, v2.RawVertex.Position );
			var __0x6438 = GetRotationMatrix( oldNormal, __0x6437 );
			v0.RawVertex.Normal = __0x6437;
			v1.RawVertex.Normal = __0x6437;
			v2.RawVertex.Normal = __0x6437;

			if( __0x6438 == null )
				return;

			v0.RawVertex.Tangent = Transform( v0.RawVertex.Tangent );
			v1.RawVertex.Tangent = Transform( v1.RawVertex.Tangent );
			v2.RawVertex.Tangent = Transform( v2.RawVertex.Tangent );

			Vector4F Transform( Vector4F __0x6519 )
			{
				var __0x6439 = __0x6438.Value * __0x6519.ToVector3F();
				return new Vector4F( __0x6439.X, __0x6439.Y, __0x6439.Z, __0x6519.W );
			}
		}

		
		
		
		
		
		internal static void CalculateTriangleTangentsAndNormalByAdjacent( BuilderMeshData meshData, BuilderMeshData.FaceVertex v0, BuilderMeshData.FaceVertex v1, BuilderMeshData.FaceVertex v2 )
		{
			CalculateNormal( v0, v1, v2 );
			Vector3F __0x6440 = v0.RawVertex.Normal;

			

			var __0x6441 = GetTrianglesByVertex( meshData, v0.Vertex );
			var __0x6442 = GetTrianglesByVertex( meshData, v1.Vertex );
			var __0x6443 = GetTrianglesByVertex( meshData, v2.Vertex );

			

			var __0x6444 = GetTangentCandidates( __0x6441, __0x6440 );
			var __0x6445 = GetTangentCandidates( __0x6442, __0x6440 );
			var __0x6446 = GetTangentCandidates( __0x6443, __0x6440 );

			

			int __0x6447 = -1;
			int __0x6448 = -1;
			int __0x6449 = -1;
			float __0x6450 = Single.MinValue;
			for( int __0x6451 = 0; __0x6451 < __0x6444.Count; __0x6451++ )
				for( int __0x6452 = 0; __0x6452 < __0x6445.Count; __0x6452++ )
					for( int __0x6453 = 0; __0x6453 < __0x6446.Count; __0x6453++ )
					{
						
						float __0x6454 = Vector3F.Dot( __0x6444[ __0x6451 ].tangent.ToVector3F(), __0x6445[ __0x6452 ].tangent.ToVector3F() );
						__0x6454 += Vector3F.Dot( __0x6444[ __0x6451 ].tangent.ToVector3F(), __0x6446[ __0x6453 ].tangent.ToVector3F() );
						__0x6454 += Vector3F.Dot( __0x6445[ __0x6452 ].tangent.ToVector3F(), __0x6446[ __0x6453 ].tangent.ToVector3F() );

						
						__0x6454 += __0x6444[ __0x6451 ].weigh * __0x6445[ __0x6452 ].weigh / 2;
						__0x6454 += __0x6444[ __0x6451 ].weigh * __0x6446[ __0x6453 ].weigh / 2;
						__0x6454 += __0x6445[ __0x6452 ].weigh * __0x6446[ __0x6453 ].weigh / 2;

						
						
						
						


						if( __0x6450 < __0x6454 )
						{
							__0x6450 = __0x6454;
							__0x6447 = __0x6451;
							__0x6448 = __0x6452;
							__0x6449 = __0x6453;
						}
					}

			if( __0x6447 == -1 )
			{
				
				return;
			}

			var __0x6455 = __0x6444[ __0x6447 ].tangent;
			var __0x6456 = __0x6445[ __0x6448 ].tangent;
			var __0x6457 = __0x6446[ __0x6449 ].tangent;

			

			
			float __0x6458 = Vector3F.Dot( __0x6455.ToVector3F(), __0x6456.ToVector3F() );
			float __0x6459 = Vector3F.Dot( __0x6455.ToVector3F(), __0x6457.ToVector3F() );
			float __0x6460 = Vector3F.Dot( __0x6456.ToVector3F(), __0x6457.ToVector3F() );
			if( __0x6459 <= __0x6458 && __0x6460 <= __0x6458 )
				__0x6457 = __0x6455;
			else if( __0x6458 <= __0x6459 && __0x6460 <= __0x6459 )
				__0x6456 = __0x6455;
			else if( __0x6458 <= __0x6460 && __0x6459 <= __0x6460 )
				__0x6455 = __0x6456;

			

			v0.RawVertex.Tangent = __0x6455;
			v1.RawVertex.Tangent = __0x6456;
			v2.RawVertex.Tangent = __0x6457;

			
			List<(Vector4F tangent, float weigh)> GetTangentCandidates( List<BuilderMeshData.FaceVertex> __0x6520, Vector3F __0x6521 )
			{
				var __0x6461 = new List<(Vector4F, float weigh)>();
				for( int __0x6462 = 0; __0x6462 < __0x6520.Count; __0x6462 += 3 )
				{
					var __0x6463 = BuilderCommonFunctions.CalculateNormal( __0x6520[ __0x6462 ].RawVertex.Position, __0x6520[ __0x6462 + 1 ].RawVertex.Position, __0x6520[ __0x6462 + 2 ].RawVertex.Position );
					var __0x6464 = __0x6520[ __0x6462 ].RawVertex.Tangent;
					__0x6461.Add( (
						new Vector4F( BuilderCommonFunctions.Rotate( __0x6463, __0x6521, __0x6464.ToVector3F() ), __0x6464.W ),
						( 1 + Vector3F.Dot( __0x6463, __0x6521 ) ) / 2
					) );
				}
				return __0x6461;
			}
		}

		

		public static List<BuilderMeshData.FaceVertex> GetTrianglesByVertex( BuilderMeshData meshData, int vertexIndex )
		{
			var __0x6465 = new List<BuilderMeshData.FaceVertex>();
			for( int __0x6466 = 0; __0x6466 < meshData.Faces.Count; __0x6466++ )
			{
				var __0x6467 = meshData.Faces[ __0x6466 ];
				for( int __0x6468 = 0; __0x6468 < __0x6467.Triangles.Count; __0x6468++ )
				{
					if( __0x6467.Triangles[ __0x6468 ].Vertex == vertexIndex )
					{
						__0x6465.Add( __0x6467.Triangles[ __0x6468 ] );

						int __0x6469 = __0x6468 - __0x6468 % 3;
						if( __0x6468 == __0x6469 )
						{
							__0x6465.Add( __0x6467.Triangles[ __0x6469 + 1 ] );
							__0x6465.Add( __0x6467.Triangles[ __0x6469 + 2 ] );
						}
						else if( __0x6468 == __0x6469 + 1 )
						{
							__0x6465.Add( __0x6467.Triangles[ __0x6469 + 2 ] );
							__0x6465.Add( __0x6467.Triangles[ __0x6469 ] );
						}
						else if( __0x6468 == __0x6469 + 2 )
						{
							__0x6465.Add( __0x6467.Triangles[ __0x6469 ] );
							__0x6465.Add( __0x6467.Triangles[ __0x6469 + 1 ] );
						}
					}
				}
			}
			return __0x6465;
		}


		
		public static Vector3F Rotate( Vector3F fromVector, Vector3F toVector, Vector3F vectorToRotate )
		{
			var __0x6470 = GetRotationMatrix( fromVector, toVector );
			if( __0x6470 == null )
				return vectorToRotate;
			return __0x6470.Value * vectorToRotate;
		}

		
		
		internal static Matrix3F? GetRotationMatrix( Vector3F fromVector, Vector3F toVector )
		{
			const double __0x6471 = 1e-5f;

			fromVector = fromVector.GetNormalize();
			toVector = toVector.GetNormalize();
			var __0x6472 = Vector3.Cross( fromVector, toVector );
			if( __0x6472.Length() < __0x6471 )
				return null;
			__0x6472 = __0x6472.GetNormalize();
			double __0x6473 = Math.Acos( Vector3.Dot( fromVector, toVector ) );
			return __0x6517( (float)__0x6473, __0x6472.ToVector3F() );
		}

		/// <summary>
		/// Creates a rotation matrix for a rotation about an arbitrary axis.
		/// </summary>
		/// <param name="__0x6522">Rotation angle, in radians</param>
		/// <param name="__0x6523">Rotation axis, which should be a normalized vector.</param>
		/// <returns>The rotation matrix</returns>
		static Matrix3F __0x6517( float __0x6522, Vector3F __0x6523 )
		{
			float __0x6474 = __0x6523.X;
			float __0x6475 = __0x6523.Y;
			float __0x6476 = __0x6523.Z;

			float __0x6477 = (float)Math.Sin( (double)__0x6522 );
			float __0x6478 = (float)Math.Cos( (double)__0x6522 );

			float __0x6479 = __0x6474 * __0x6474;
			float __0x6480 = __0x6475 * __0x6475;
			float __0x6481 = __0x6476 * __0x6476;
			float __0x6482 = __0x6474 * __0x6475;
			float __0x6483 = __0x6474 * __0x6476;
			float __0x6484 = __0x6475 * __0x6476;

			Matrix3F __0x6485 = new Matrix3F(
			__0x6479 + ( __0x6478 * ( 1.0f - __0x6479 ) ),
			( __0x6482 - ( __0x6478 * __0x6482 ) ) + ( __0x6477 * __0x6476 ),
			( __0x6483 - ( __0x6478 * __0x6483 ) ) - ( __0x6477 * __0x6475 ),

			( __0x6482 - ( __0x6478 * __0x6482 ) ) - ( __0x6477 * __0x6476 ),
			__0x6480 + ( __0x6478 * ( 1.0f - __0x6480 ) ),
			( __0x6484 - ( __0x6478 * __0x6484 ) ) + ( __0x6477 * __0x6474 ),

			( __0x6483 - ( __0x6478 * __0x6483 ) ) + ( __0x6477 * __0x6475 ),
			( __0x6484 - ( __0x6478 * __0x6484 ) ) - ( __0x6477 * __0x6474 ),
			__0x6481 + ( __0x6478 * ( 1.0f - __0x6481 ) )
				);

			return __0x6485;
		}

		static bool __0x6518( Mesh __0x6524 )
		{
			if( __0x6524.Structure != null )
				return true;

			var __0x6486 = __0x6524.GetComponents<MeshGeometry>();
			if( __0x6486.Length == 0 )
				return false;

			foreach( var __0x6514 in __0x6486 )
			{
				if( __0x6514 is MeshGeometry_Procedural meshGeometryProcedural )
				{
					if( !meshGeometryProcedural.ExistsMeshStructure() )
						return false;

					
					
					
					
					
					

					
					
				}
				else
					return false;
			}

			return true;
		}

		

		public static bool IsSameVertexStructure( Mesh.ExtractedData meshExtractedStructure, List<int> geometriesInSelection )
		{
			if( geometriesInSelection.Count == 1 )
				return true;

			var __0x6487 = meshExtractedStructure.MeshGeometries[ geometriesInSelection[ 0 ] ];
			for( int __0x6488 = 1; __0x6488 < geometriesInSelection.Count; __0x6488++ )
			{
				var __0x6489 = meshExtractedStructure.MeshGeometries[ geometriesInSelection[ __0x6488 ] ];
				if( !IsSameVertexStructure( __0x6487.VertexStructure, __0x6489.VertexStructure ) )
					return false;
			}
			return true;
		}

		public static bool IsSameVertexStructure( VertexElement[] a1, VertexElement[] a2 )
		{
			if( a1 == a2 )
				return true;
			if( a1.Length != a2.Length )
				return false;
			for( int __0x6490 = 0; __0x6490 < a1.Length; __0x6490++ )
				if( a1[ __0x6490 ] != a2[ __0x6490 ] )
					return false;
			return true;
		}

		public static string GetUniqueFriendlyName( Component component )
		{
			var __0x6491 = component.BaseType.GetUserFriendlyNameForInstance();
			if( component.Parent.GetComponent( __0x6491 ) == null )
				return __0x6491;
			return component.Parent.Components.GetUniqueName( __0x6491, false, 2 );
		}

		
		public static void EnsureNameIsUnique( Component component )
		{
			var __0x6492 = component.Name;
			if( component.Parent.GetComponents().Count( __0x6525 => __0x6525.Name == __0x6492 ) <= 1 )
				return;
			component.Name = component.Parent.Components.GetUniqueName( __0x6492, true, 2 );
		}

		
		
		
		
		
		
		

		

		
		
		

		/// <summary>
		/// 
		/// </summary>
		/// <param name="document"></param>
		/// <param name="meshInSpace"></param>
		/// <param name="mesh"></param>
		/// <param name="undoForMesh"></param>
		/// <param name="needUndoForNextActions"></param>
		/// <returns>Returns True when the external mesh was copied.</returns>
		public static void CopyExternalMesh( DocumentInstance document, MeshInSpace meshInSpace, ref Mesh mesh, List<UndoSystem.Action> undoForMesh, ref bool undoLocked )
		{
			if( mesh.Parent != meshInSpace )
			{
				
				var __0x6493 = (Mesh)mesh.Clone();
				__0x6493.Name = "Mesh";

				
				{
					foreach( var __0x6515 in __0x6493.GetComponents<MeshGeometry>() )
					{
						var __0x6494 = __0x6515.Material.GetByReference;
						if( !string.IsNullOrEmpty( __0x6494 ) )
						{
							ReferenceUtility.ParseReference( __0x6494, out var type, out var content );
							if( type == "root" )
							{
								var __0x6495 = ComponentUtility.GetOwnedFileNameOfComponent( mesh );
								if( !string.IsNullOrEmpty( __0x6495 ) )
								{
									var __0x6496 = __0x6495 + "|" + content;
									__0x6515.Material = ReferenceUtility.MakeReference( __0x6496 );
								}
							}
						}
					}
				}

				meshInSpace.AddComponent( __0x6493 );

				if( !undoLocked )
					undoForMesh.Add( new UndoActionComponentCreateDelete( document, new Component[] { __0x6493 }, true ) );

				
				if( !undoLocked )
				{
					var __0x6497 = (Metadata.Property)meshInSpace.MetadataGetMemberBySignature( "property:" + nameof( MeshInSpace.Mesh ) );
					undoForMesh.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( meshInSpace, __0x6497, meshInSpace.Mesh ) ) );
				}
				meshInSpace.Mesh = ReferenceUtility.MakeThisReference( meshInSpace, __0x6493 );

				mesh = __0x6493;

				undoLocked = true;
			}
		}

		public static void ConvertProceduralMeshGeometries( DocumentInstance document, Mesh mesh, List<UndoSystem.Action> undoMeshChanges, ref bool undoMeshChangesLocked )
		{
			var __0x6498 = mesh.GetComponents<MeshGeometry>();
			if( __0x6498.Any( __0x6526 => __0x6526 is MeshGeometry_Procedural ) )
			{
				var __0x6499 = __0x6498.All( __0x6527 => __0x6527 is MeshGeometry_Procedural );

				var __0x6500 = __0x6498;
				var __0x6501 = mesh.Structure;



				var __0x6502 = new List<MeshGeometry>();
				mesh.Structure = null;

				for( int __0x6503 = 0; __0x6503 < __0x6498.Length; __0x6503++ )
				{
					var __0x6504 = __0x6498[ __0x6503 ];

					
					if( __0x6504 is MeshGeometry_Procedural meshGeometryProcedural )
					{
						VertexElement[] __0x6505 = null;
						byte[] __0x6506 = null;
						int[] __0x6507 = null;
						Material __0x6508 = null;
						byte[] __0x6509 = null;
						Mesh.StructureClass __0x6510 = null;
						meshGeometryProcedural.GetProceduralGeneratedData( ref __0x6505, ref __0x6506, ref __0x6507, ref __0x6508, ref __0x6509, ref __0x6510 );

						var __0x6511 = mesh.CreateComponent<MeshGeometry>();
						__0x6511.Name = __0x6504.Name;
						__0x6511.VertexStructure = __0x6505;
						__0x6511.Vertices = __0x6506;
						__0x6511.Indices = __0x6507;
						__0x6511.Material = __0x6504.Material;

						
						if( __0x6499 )
							mesh.Structure = Mesh.StructureClass.Concat( mesh.Structure, __0x6510, __0x6503 );

						__0x6502.Add( __0x6511 );
					}
					else
					{
						var __0x6512 = mesh.CreateComponent<MeshGeometry>();
						
						__0x6512.Name = __0x6504.Name;
						__0x6512.VertexStructure = __0x6504.VertexStructure;
						__0x6512.Vertices = __0x6504.Vertices;
						__0x6512.Indices = __0x6504.Indices;
						__0x6512.Material = __0x6504.Material;

						
						

						__0x6502.Add( __0x6512 );
					}
				}

				
				if( !__0x6499 )
					mesh.BuildStructure();



				
				if( !undoMeshChangesLocked )
					undoMeshChanges.Add( new UndoActionComponentCreateDelete( document, __0x6500.ToArray(), false ) );
				else
				{
					foreach( var __0x6516 in __0x6500 )
						__0x6516.Dispose();
				}

				
				if( !undoMeshChangesLocked )
					undoMeshChanges.Add( new UndoActionComponentCreateDelete( document, __0x6502.ToArray(), true ) );

				
				if( !undoMeshChangesLocked )
				{
					var __0x6513 = (Metadata.Property)mesh.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
					undoMeshChanges.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( mesh, __0x6513, __0x6501 ) ) );
				}

				undoMeshChangesLocked = true;


				
				
				
				

				
				
				
				
				
				
				

				
				
				

				
				
				
				
				
				
				
				
				

				

				
				
				
				
				
				

				
				

				
				
				
				
				

				
				
				
				
				

			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	/// <summary>
	/// The class is intended to register Modeling add-on.
	/// </summary>
	class BuilderEditorExtensions : EditorExtensions
	{
		static EditorRibbonDefaultConfiguration.Group __0x6528;

		

		public override void OnRegister()
		{
			__0x6640();
			__0x6644();

			EditorAPI.EditorActionGetStateEvent += __0x6650;
			EditorAPI.EditorActionClickEvent += __0x6651;
		}

		static void __0x6640()
		{
			foreach( var __0x6632 in __0x6645() )
				__0x6646( __0x6632 );

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x6529 = new EditorAction();
				__0x6529.Name = "Modeling Object Selection";
				
				__0x6529.ImageBig = Properties.Resources.SelectionModeObject_32;
				__0x6529.QatSupport = true;
				__0x6529.Description = "Object Mode\nThis is the usual scene editor mode, enabled by default.";
				__0x6529.RibbonText = ("Object", "");
				EditorActions.Register( __0x6529 );
			}

			
			{
				var __0x6530 = new EditorAction();
				__0x6530.Name = "Modeling Vertex Selection";
				
				__0x6530.ImageBig = Properties.Resources.SelectionModeVertex_32;
				__0x6530.QatSupport = true;
				__0x6530.Description = "Vertex Mode\nIn this mode you can select the vertices, move them, perform actions to edit them.";
				__0x6530.RibbonText = ("Vertex", "");
				EditorActions.Register( __0x6530 );
			}

			
			{
				var __0x6531 = new EditorAction();
				__0x6531.Name = "Modeling Edge Selection";
				
				__0x6531.ImageBig = Properties.Resources.SelectionModeEdge_32;
				__0x6531.QatSupport = true;
				__0x6531.Description = "Edge Mode\nIn this mode you can select the edges, move them, perform actions to edit them.";
				__0x6531.RibbonText = ("Edge", "");
				EditorActions.Register( __0x6531 );
			}

			
			{
				var __0x6532 = new EditorAction();
				__0x6532.Name = "Modeling Face Selection";
				
				__0x6532.ImageBig = Properties.Resources.SelectionModeFace_32;
				__0x6532.QatSupport = true;
				__0x6532.Description = "Face Mode\nIn this mode you can select the faces, move them, perform actions to edit them.";
				__0x6532.RibbonText = ("Face", "");
				EditorActions.Register( __0x6532 );
			}



			
			{
				var __0x6533 = new EditorAction();
				__0x6533.Name = "Modeling Select All";
				
				__0x6533.ImageBig = Properties.Resources.SelectAll_32;
				__0x6533.QatSupport = true;
				__0x6533.Description = "Select All\nSelects all elements.";
				__0x6533.RibbonText = ("Select", "All");
				EditorActions.Register( __0x6533 );
			}

			
			{
				var __0x6534 = new EditorAction();
				__0x6534.Name = "Modeling Invert Selection";
				
				__0x6534.ImageBig = Properties.Resources.InvertSelection_32;
				__0x6534.QatSupport = true;
				__0x6534.Description = "Invert Selection\nSelects all the elements that are not currently selected and removes selection from the currently selected elements.";
				__0x6534.RibbonText = ("Invert", "");
				EditorActions.Register( __0x6534 );
			}

			
			{
				var __0x6535 = new EditorAction();
				__0x6535.Name = "Modeling Grow Selection";
				
				__0x6535.ImageBig = Properties.Resources.GrowSelection_32;
				__0x6535.QatSupport = true;
				__0x6535.Description = "Grow Selection\nAdds adjacent elements to the currently selected elements.";
				__0x6535.RibbonText = ("Grow", "");
				EditorActions.Register( __0x6535 );
			}

			
			{
				var __0x6536 = new EditorAction();
				__0x6536.Name = "Modeling Select By Material";
				
				__0x6536.ImageBig = Properties.Resources.SelectByMaterial_32;
				__0x6536.QatSupport = true;
				__0x6536.Description = "Select By Material\nSelects all the faces that have the same material as currently selected faces.";
				__0x6536.RibbonText = ("By", "Material");
				EditorActions.Register( __0x6536 );
			}

			
			
			
			
			
			
			
			
			
			
			


			
			{
				var __0x6537 = new EditorAction();
				__0x6537.Name = "Modeling Set Material";
				
				__0x6537.ImageBig = Properties.Resources.SetMaterial_32;
				__0x6537.QatSupport = true;
				__0x6537.Description = "Set Material\nSets a material for the selected objects or faces. The material must be selected in the Resources Window. Also the material can be changed from the Settings Window.";
				
				__0x6537.RibbonText = ("Set", "Material");
				EditorActions.Register( __0x6537 );
			}

			
			{
				var __0x6538 = new EditorAction();
				__0x6538.Name = "Modeling Set Color";
				__0x6538.ImageSmall = Properties.Resources.Color_16;
				__0x6538.ImageBig = Properties.Resources.Color_32;
				__0x6538.QatSupport = true;
				__0x6538.Description = "Set Color\nSets a color for the selected objects.";
				
				__0x6538.RibbonText = ("Set", "Color");
				EditorActions.Register( __0x6538 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			




			
			{
				var __0x6539 = new EditorAction();
				__0x6539.Name = "Modeling Merge Objects";
				
				__0x6539.ImageBig = Properties.Resources.MergeObjects_32;
				__0x6539.QatSupport = true;
				__0x6539.Description = "Merge Objects\nCombines the selected objects into a single one.";
				__0x6539.RibbonText = ("Merge", "");
				EditorActions.Register( __0x6539 );
			}

			
			{
				var __0x6540 = new EditorAction();
				__0x6540.Name = "Modeling Mirror Objects X";
				__0x6540.ImageSmall = Properties.Resources.Mirror_16;
				__0x6540.ImageBig = Properties.Resources.Mirror_32;
				__0x6540.QatSupport = true;
				__0x6540.Description = "Mirror Objects";
				__0x6540.RibbonText = ("Mirror", "");
				__0x6540.ContextMenuText = "X";
				EditorActions.Register( __0x6540 );
			}

			
			{
				var __0x6541 = new EditorAction();
				__0x6541.Name = "Modeling Mirror Objects Y";
				__0x6541.ImageSmall = Properties.Resources.Mirror_16;
				__0x6541.ImageBig = Properties.Resources.Mirror_32;
				__0x6541.QatSupport = true;
				__0x6541.Description = "Mirror Objects";
				__0x6541.RibbonText = ("Mirror", "");
				__0x6541.ContextMenuText = "Y";
				EditorActions.Register( __0x6541 );
			}

			
			{
				var __0x6542 = new EditorAction();
				__0x6542.Name = "Modeling Mirror Objects Z";
				__0x6542.ImageSmall = Properties.Resources.Mirror_16;
				__0x6542.ImageBig = Properties.Resources.Mirror_32;
				__0x6542.QatSupport = true;
				__0x6542.Description = "Mirror Objects";
				__0x6542.RibbonText = ("Mirror", "");
				__0x6542.ContextMenuText = "Z";
				EditorActions.Register( __0x6542 );
			}

			
			{
				var __0x6543 = new EditorAction();
				__0x6543.Name = "Modeling Center Pivot";
				__0x6543.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6543.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6543.QatSupport = true;
				__0x6543.Description = "Center Pivot";
				__0x6543.RibbonText = ("Center", "");
				EditorActions.Register( __0x6543 );
			}

			
			{
				var __0x6544 = new EditorAction();
				__0x6544.Name = "Modeling Merge Vertices Move To Middle";
				__0x6544.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6544.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6544.QatSupport = true;
				__0x6544.Description = "Merge vertices, move to the middle.";
				__0x6544.RibbonText = ("Merge", "");
				__0x6544.ContextMenuText = "Move to the Middle";
				EditorActions.Register( __0x6544 );
			}

			
			{
				var __0x6545 = new EditorAction();
				__0x6545.Name = "Modeling Merge Vertices Move To First";
				__0x6545.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6545.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6545.QatSupport = true;
				__0x6545.Description = "Merge vertices, move to the first vertex.";
				__0x6545.RibbonText = ("Merge", "");
				__0x6545.ContextMenuText = "Move to the First Vertex";
				EditorActions.Register( __0x6545 );
			}

			
			{
				var __0x6546 = new EditorAction();
				__0x6546.Name = "Modeling Split Vertices";
				
				__0x6546.ImageBig = Properties.Resources.SplitVertices_32;
				__0x6546.QatSupport = true;
				__0x6546.Description = "Split Vertices\nMakes the vertices that are shared by many triangles independent.";
				__0x6546.RibbonText = ("Split", "");
				EditorActions.Register( __0x6546 );
			}


			
			{
				var __0x6547 = new EditorAction();
				__0x6547.Name = "Modeling Bridge Edges";
				
				__0x6547.ImageBig = Properties.Resources.BridgeEdges_32;
				__0x6547.QatSupport = true;
				__0x6547.Description = "Bridge Edges\nConnects two selected edges with a new face.";
				__0x6547.RibbonText = ("Bridge", "");
				EditorActions.Register( __0x6547 );
			}

			
			{
				var __0x6548 = new EditorAction();
				__0x6548.Name = "Modeling Extrude Edges";
				__0x6548.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6548.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6548.QatSupport = true;
				__0x6548.Description = "Extrude Edges";
				__0x6548.RibbonText = ("Extrude", "");
				EditorActions.Register( __0x6548 );
			}

			
			{
				var __0x6549 = new EditorAction();
				__0x6549.Name = "Modeling Bevel Edges";
				__0x6549.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6549.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6549.QatSupport = true;
				__0x6549.Description = "Bevel Edges";
				__0x6549.RibbonText = ("Bevel", "");
				EditorActions.Register( __0x6549 );
			}



			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x6550 = new EditorAction();
				__0x6550.Name = "Modeling Merge Faces";
				
				__0x6550.ImageBig = Properties.Resources.MergeFaces_32;
				__0x6550.QatSupport = true;
				__0x6550.Description = "Merge Faces\nCombines selected faces into a single one.";
				__0x6550.RibbonText = ("Merge", "");
				EditorActions.Register( __0x6550 );
			}

			
			{
				var __0x6551 = new EditorAction();
				__0x6551.Name = "Modeling Detach Faces To Mesh In Space";
				__0x6551.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6551.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6551.QatSupport = true;
				__0x6551.Description = "Detach faces to mesh in space.";
				__0x6551.RibbonText = ("Detach", "");
				__0x6551.ContextMenuText = "Detach Faces to Mesh In Space";
				EditorActions.Register( __0x6551 );
			}

			
			{
				var __0x6552 = new EditorAction();
				__0x6552.Name = "Modeling Detach Faces To Mesh Geometry";
				__0x6552.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6552.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6552.QatSupport = true;
				__0x6552.Description = "Detach faces to mesh geometry.";
				__0x6552.RibbonText = ("Detach", "");
				__0x6552.ContextMenuText = "Detach Faces to Mesh Geometry";
				EditorActions.Register( __0x6552 );
			}

			
			{
				var __0x6553 = new EditorAction();
				__0x6553.Name = "Modeling Detach Faces To Mesh Geometry (Split Vertices)";
				__0x6553.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6553.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6553.QatSupport = true;
				__0x6553.Description = "Detach faces to mesh geometry (Split Vertices).";
				__0x6553.RibbonText = ("Detach", "");
				__0x6553.ContextMenuText = "Detach Faces to Mesh Geometry (Split Vertices)";
				EditorActions.Register( __0x6553 );
			}

			
			{
				var __0x6554 = new EditorAction();
				__0x6554.Name = "Modeling Triangulate Faces";
				
				__0x6554.ImageBig = Properties.Resources.TriangulateFaces_32;
				__0x6554.QatSupport = true;
				__0x6554.Description = "Triangulate Faces\nSplits selected faces to the separate triangles.";
				__0x6554.RibbonText = ("Triangulate", "");
				EditorActions.Register( __0x6554 );
			}

			
			{
				var __0x6555 = new EditorAction();
				__0x6555.Name = "Modeling Extrude Faces";
				__0x6555.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6555.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6555.QatSupport = true;
				__0x6555.Description = "Extrude Faces";
				__0x6555.RibbonText = ("Extrude", "");
				EditorActions.Register( __0x6555 );
			}

			
			{
				var __0x6556 = new EditorAction();
				__0x6556.Name = "Modeling Subdivide Faces";
				__0x6556.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x6556.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x6556.QatSupport = true;
				__0x6556.Description = "Subdivide Faces";
				__0x6556.RibbonText = ("Subdivide", "");
				EditorActions.Register( __0x6556 );
			}

			
			{
				var __0x6557 = new EditorAction();
				__0x6557.Name = "Modeling Conform Normals";
				
				__0x6557.ImageBig = Properties.Resources.ConformNormals_32;
				__0x6557.QatSupport = true;
				__0x6557.Description = "Conform Normals\nFix invalid normals of the mesh.";
				__0x6557.RibbonText = ("Conform", "Normals");
				EditorActions.Register( __0x6557 );
			}

			
			{
				var __0x6558 = new EditorAction();
				__0x6558.Name = "Modeling Flip Normals";
				
				__0x6558.ImageBig = Properties.Resources.FlipNormals_32;
				__0x6558.QatSupport = true;
				__0x6558.Description = "Flip Normals\nInverts the normals of selected faces.";
				__0x6558.RibbonText = ("Flip", "Normals");
				EditorActions.Register( __0x6558 );
			}

			
			{
				var __0x6559 = new EditorAction();
				__0x6559.Name = "Modeling Smooth Normals";
				
				__0x6559.ImageBig = Properties.Resources.SmoothNormals_32;
				__0x6559.QatSupport = true;
				__0x6559.Description = "Smooth Normals\nSmooths the normals of selected faces.";
				__0x6559.RibbonText = ("Smooth", "Normals");
				EditorActions.Register( __0x6559 );
			}

			
			{
				var __0x6560 = new EditorAction();
				__0x6560.Name = "Modeling Flat Normals";
				
				__0x6560.ImageBig = Properties.Resources.FlatNormals_32;
				__0x6560.QatSupport = true;
				__0x6560.Description = "Flat Normals\nRecalculates the normals of selected faces so that they do not have smoothing.";
				__0x6560.RibbonText = ("Flat", "Normals");
				EditorActions.Register( __0x6560 );
			}

			
			{
				var __0x6561 = new EditorAction();
				__0x6561.Name = "Modeling Union";
				__0x6561.ImageSmall = Properties.Resources.Union_16;
				__0x6561.ImageBig = Properties.Resources.Union_32;
				__0x6561.QatSupport = true;
				__0x6561.Description = "Union\nExecutes constructive solid geometry union operation for two selected objects.";
				__0x6561.RibbonText = ("Union", "");
				EditorActions.Register( __0x6561 );
			}

			
			{
				var __0x6562 = new EditorAction();
				__0x6562.Name = "Modeling Subtract";
				__0x6562.ImageSmall = Properties.Resources.Subtract_16;
				__0x6562.ImageBig = Properties.Resources.Subtract_32;
				__0x6562.QatSupport = true;
				__0x6562.Description = "Subtract\nExecutes constructive solid geometry difference operation for two selected objects.";
				__0x6562.RibbonText = ("Subtract", "");
				EditorActions.Register( __0x6562 );
			}

			
			{
				var __0x6563 = new EditorAction();
				__0x6563.Name = "Modeling Intersect";
				__0x6563.ImageSmall = Properties.Resources.Intersect_16;
				__0x6563.ImageBig = Properties.Resources.Intersect_32;
				__0x6563.QatSupport = true;
				__0x6563.Description = "Intersect\nExecutes constructive solid geometry intersect operation for two selected objects.";
				__0x6563.RibbonText = ("Intersect", "");
				EditorActions.Register( __0x6563 );
			}

			foreach( var __0x6633 in __0x6647( Assembly.GetExecutingAssembly() ) )
				__0x6649( __0x6633, false );

			
			{
				var __0x6564 = new EditorAction();
				__0x6564.Name = "Modeling Add Paint Layer";
				__0x6564.ImageSmall = NeoAxis.Properties.Resources.Layers_16;
				__0x6564.ImageBig = NeoAxis.Properties.Resources.Layers_32;
				__0x6564.QatSupport = true;
				__0x6564.Description = "Add Paint Layer\nAdds a masked paint layer.";
				__0x6564.RibbonText = ("Add", "Layer");
				EditorActions.Register( __0x6564 );
			}

			
			{
				var __0x6565 = new EditorAction();
				__0x6565.Name = "Modeling Export To FBX";
				__0x6565.ImageSmall = Properties.Resources.External_16;
				__0x6565.ImageBig = Properties.Resources.External_32;
				__0x6565.QatSupport = true;
				__0x6565.Description = "Export To FBX\nExports the selected 3D model to a FBX file.";
				__0x6565.RibbonText = ("Export", "FBX");
				__0x6565.GetState += delegate ( EditorAction.GetStateContext __0x6652 )
				{
					var __0x6566 = __0x6652.ObjectsInFocus.Objects;
					if( __0x6566.Length == 1 )
					{
						var __0x6567 = __0x6566[ 0 ];
						if( __0x6567 is MeshInSpace || __0x6567 is Mesh )
							__0x6652.Enabled = true;
					}
				};
				__0x6565.Click += delegate ( EditorAction.ClickContext __0x6653 )
				{
					var __0x6568 = __0x6653.ObjectsInFocus.Objects;
					if( __0x6568.Length == 1 )
					{
						var __0x6569 = __0x6568[ 0 ];

						Mesh __0x6570 = __0x6569 as Mesh;
						if( __0x6570 == null && __0x6569 is MeshInSpace meshInSpace )
							__0x6570 = meshInSpace.Mesh.Value;

						if( __0x6570 != null )
						{
							if( !EditorUtility.ShowSaveFileDialog( "", "Mesh.fbx", "FBX files (*.fbx)|*.fbx", out var fileName ) )
								return;

							if( !EditorAssemblyInterface.Instance.ExportToFBX( __0x6570, fileName, out var error ) )
								EditorMessageBox.ShowWarning( error );
							
							
						}
					}
				};
				EditorActions.Register( __0x6565 );
			}

			Internal.AssemblyUtility.RegisterAssemblyEvent += __0x6642;
			Internal.AssemblyUtility.UnregisterAssemblyEvent += __0x6643;
		}

		static void __0x6641( Assembly __0x6654, bool __0x6655 )
		{
			
			if( __0x6654 == Assembly.GetExecutingAssembly() )
				return;

			foreach( var __0x6634 in __0x6647( __0x6654 ) )
			{
				__0x6649( __0x6634, __0x6655 );

				if( __0x6528 != null )
				{
					var __0x6571 = __0x6634.GetUserFriendlyNameForInstance();
					if( __0x6655 )
						__0x6528.RemoveAction( "Modeling New Mesh Modifier " + __0x6571 );
					else
						__0x6528.AddAction( "Modeling New Mesh Modifier " + __0x6571 );
				}
			}
		}

		private static void __0x6642( Assembly __0x6656, Assembly __0x6657 )
		{
			__0x6641( __0x6656, false );
		}

		private static void __0x6643( Assembly __0x6658, Assembly __0x6659 )
		{
			__0x6641( __0x6658, true );
		}

		static void __0x6644()
		{
			var __0x6572 = new EditorRibbonDefaultConfiguration.Tab( "Modeling", "Modeling", MetadataManager.GetTypeOfNetType( typeof( Scene ) ) );
			EditorRibbonDefaultConfiguration.Tabs.Add( __0x6572 );

			
			{
				var __0x6573 = new EditorRibbonDefaultConfiguration.Group( "New" );
				__0x6572.Groups.Add( __0x6573 );

				var __0x6574 = new EditorRibbonDefaultConfiguration.Group( "New Shape" );
				__0x6573.Children.Add( __0x6574 );
				__0x6574.DropDownGroupText = ("Shape", "");
				__0x6574.DropDownGroupImageLarge = Properties.Resources.NewShape_32;
				__0x6574.DropDownGroupDescription = "Creates a new primitive.";
				

				foreach( var __0x6635 in __0x6645() )
					__0x6574.AddAction( "Modeling New Shape " + __0x6635 );

				
				
				
			}

			
			{
				var __0x6575 = new EditorRibbonDefaultConfiguration.Group( "Selection Mode" );
				__0x6572.Groups.Add( __0x6575 );
				__0x6575.AddAction( "Modeling Object Selection" );
				__0x6575.AddAction( "Modeling Vertex Selection" );
				__0x6575.AddAction( "Modeling Edge Selection" );
				__0x6575.AddAction( "Modeling Face Selection" );
			}

			
			{
				var __0x6576 = new EditorRibbonDefaultConfiguration.Group( "Selection Tools" );
				__0x6572.Groups.Add( __0x6576 );
				__0x6576.AddAction( "Modeling Select All" );
				__0x6576.AddAction( "Modeling Invert Selection" );
				__0x6576.AddAction( "Modeling Grow Selection" );
				__0x6576.AddAction( "Modeling Select By Material" );
				
			}

			
			{
				var __0x6577 = new EditorRibbonDefaultConfiguration.Group( "Material Tools" );
				__0x6572.Groups.Add( __0x6577 );
				__0x6577.AddAction( "Modeling Set Material" );
				__0x6577.AddAction( "Modeling Set Color" );
				
			}

			
			{
				var __0x6578 = new EditorRibbonDefaultConfiguration.Group( "Object Tools" );
				__0x6572.Groups.Add( __0x6578 );
				__0x6578.AddAction( "Modeling Merge Objects" );

				{
					var __0x6579 = new EditorRibbonDefaultConfiguration.Group( "Mirror" );
					__0x6578.Children.Add( __0x6579 );
					__0x6579.DropDownGroupText = ("Mirror", "");
					__0x6579.DropDownGroupImageLarge = Properties.Resources.Mirror_32;
					__0x6579.DropDownGroupDescription = "Mirror Objects\nCreates a mirror transformation of the selected object.";
					__0x6579.AddAction( "Modeling Mirror Objects X" );
					__0x6579.AddAction( "Modeling Mirror Objects Y" );
					__0x6579.AddAction( "Modeling Mirror Objects Z" );
				}
				

				
			}

			
			{
				var __0x6580 = new EditorRibbonDefaultConfiguration.Group( "Vertex Tools" );
				__0x6572.Groups.Add( __0x6580 );

				{
					var __0x6581 = new EditorRibbonDefaultConfiguration.Group( "Merge Vertices" );
					__0x6580.Children.Add( __0x6581 );
					__0x6581.DropDownGroupText = ("Merge", "");
					__0x6581.DropDownGroupImageLarge = Properties.Resources.MergeVertices_32;
					__0x6581.DropDownGroupDescription = "Merge Vertices\nMerges selected vertices into the single vertex.";
					__0x6581.AddAction( "Modeling Merge Vertices Move To Middle" );
					__0x6581.AddAction( "Modeling Merge Vertices Move To First" );
				}

				__0x6580.AddAction( "Modeling Split Vertices" );
			}

			
			{
				var __0x6582 = new EditorRibbonDefaultConfiguration.Group( "Edge" );
				
				__0x6572.Groups.Add( __0x6582 );
				__0x6582.AddAction( "Modeling Bridge Edges" );
				
				
			}

			
			{
				var __0x6583 = new EditorRibbonDefaultConfiguration.Group( "Face Tools" );
				__0x6572.Groups.Add( __0x6583 );
				
				

				

				
				__0x6583.AddAction( "Modeling Merge Faces" );
				__0x6583.AddAction( "Modeling Triangulate Faces" );

				{
					var __0x6584 = new EditorRibbonDefaultConfiguration.Group( "Detach Faces" );
					__0x6583.Children.Add( __0x6584 );
					__0x6584.DropDownGroupText = ("Detach", "");
					__0x6584.DropDownGroupImageLarge = Properties.Resources.DetachFaces_32;
					__0x6584.DropDownGroupDescription = "Detach Faces\nRemoves selected faces from a geometry and places them in a new geometry.";
					__0x6584.AddAction( "Modeling Detach Faces To Mesh Geometry" );
					__0x6584.AddAction( "Modeling Detach Faces To Mesh Geometry (Split Vertices)" );
					__0x6584.AddAction( "Modeling Detach Faces To Mesh In Space" );
				}

				
				
				__0x6583.AddAction( "Modeling Conform Normals" );
				__0x6583.AddAction( "Modeling Flip Normals" );
				__0x6583.AddAction( "Modeling Smooth Normals" );
				__0x6583.AddAction( "Modeling Flat Normals" );
			}

			
			{
				var __0x6585 = new EditorRibbonDefaultConfiguration.Group( "Boolean" );
				__0x6572.Groups.Add( __0x6585 );
				__0x6585.AddAction( "Modeling Union" );
				__0x6585.AddAction( "Modeling Subtract" );
				__0x6585.AddAction( "Modeling Intersect" );
			}

			
			{
				var __0x6586 = new EditorRibbonDefaultConfiguration.Group( "Modify" );
				__0x6572.Groups.Add( __0x6586 );

				var __0x6587 = new EditorRibbonDefaultConfiguration.Group( "Add Mesh Modifier" );
				__0x6586.Children.Add( __0x6587 );
				__0x6587.DropDownGroupText = ("Add", "Modifier");
				__0x6587.DropDownGroupImageLarge = NeoAxis.Properties.Resources.Modify_32;
				__0x6587.DropDownGroupDescription = "Add Mesh Modifier\nAdds a mesh modifier to the object.";

				__0x6528 = __0x6587;

				foreach( var __0x6636 in __0x6647( Assembly.GetExecutingAssembly() ) )
				{
					var __0x6588 = __0x6636.GetUserFriendlyNameForInstance();
					__0x6587.AddAction( "Modeling New Mesh Modifier " + __0x6588 );
				}

				__0x6586.AddAction( "Modeling Add Paint Layer" );
			}

			
			{
				var __0x6589 = new EditorRibbonDefaultConfiguration.Group( "Export" );
				__0x6572.Groups.Add( __0x6589 );
				__0x6589.AddAction( "Modeling Export To FBX" );
			}
		}

		static List<string> __0x6645()
		{
			var __0x6590 = new List<string>();
			__0x6590.Add( "Arch" );
			__0x6590.Add( "Box" );
			__0x6590.Add( "Capsule" );
			__0x6590.Add( "Cone" );
			__0x6590.Add( "Cylinder" );
			__0x6590.Add( "Door" );
			__0x6590.Add( "Pipe" );
			__0x6590.Add( "Plane" );
			__0x6590.Add( "Prism" );
			__0x6590.Add( "Sphere" );
			__0x6590.Add( "Stairs" );
			__0x6590.Add( "Torus" );
			__0x6590.Add( "PolygonBasedPolyhedron" );
			return __0x6590;
		}

		static void __0x6646( string __0x6660 )
		{
			var __0x6591 = TypeUtility.DisplayNameAddSpaces( __0x6660 );

			var __0x6592 = new EditorAction();
			__0x6592.Name = "Modeling New Shape " + __0x6660;
			__0x6592.ImageSmall = NeoAxis.Properties.Resources.New_16;
			__0x6592.ImageBig = Properties.Resources.NewShape_32;
			__0x6592.QatSupport = true;
			var __0x6593 = __0x6591;
			__0x6592.RibbonText = (__0x6593, "");
			__0x6592.ContextMenuText = __0x6593;
			__0x6592.UserData = __0x6660;
			__0x6592.GetState += delegate ( EditorAction.GetStateContext __0x6661 )
			{
				if( __0x6661.ObjectsInFocus.DocumentWindow as SceneEditor != null )
					__0x6661.Enabled = true;
			};
			__0x6592.Click += delegate ( EditorAction.ClickContext __0x6662 )
			{
				var __0x6594 = __0x6662.ObjectsInFocus.DocumentWindow as SceneEditor;
				var __0x6595 = __0x6594.Scene;
				var __0x6596 = (string)__0x6592.UserData;

				var __0x6597 = MetadataManager.GetType( "NeoAxis.MeshGeometry_" + __0x6596 );

				var __0x6598 = __0x6595.CreateComponent<MeshInSpace>( enabled: false );
				__0x6598.Name = EditorUtility.GetUniqueFriendlyName( __0x6598, __0x6597.GetUserFriendlyNameForInstance() );

				var __0x6599 = __0x6598.CreateComponent<Mesh>();
				__0x6599.Name = "Mesh";

				var __0x6600 = __0x6599.CreateComponent( __0x6597 );
				__0x6600.Name = "Mesh Geometry";

				__0x6598.Mesh = ReferenceUtility.MakeThisReference( __0x6598, __0x6599 );

				__0x6594.CalculateCreateObjectPosition( __0x6598, __0x6598, new Vector2( 0.5, 0.5 ) );

				__0x6598.Enabled = true;

				if( __0x6597 == MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_PolygonBasedPolyhedron ) ) )
				{
					__0x6594.StartObjectCreationMode( __0x6597, __0x6598 );
					
					foreach( var __0x6637 in __0x6600.GetComponents<MeshGeometry_PolygonBasedPolyhedron_Point>() )
						__0x6637.RemoveFromParent( false );
				}
				else
				{
					
					var __0x6601 = new Component[] { __0x6598 };
					var __0x6602 = __0x6662.ObjectsInFocus.DocumentWindow.Document;
					var __0x6603 = new UndoActionComponentCreateDelete( __0x6602, __0x6601, true );
					__0x6602.CommitUndoAction( __0x6603 );
					__0x6594.SelectObjects( __0x6601 );
				}

				__0x6594.Focus();
			};
			EditorActions.Register( __0x6592 );
		}

		static List<Metadata.TypeInfo> __0x6647( Assembly __0x6663 )
		{
			var __0x6604 = new List<Metadata.TypeInfo>();

			foreach( var __0x6638 in __0x6663.GetTypes() )
			{
				try
				{
					if( typeof( MeshModifier ).IsAssignableFrom( __0x6638 ) && !__0x6638.IsAbstract )
					{
						var __0x6605 = MetadataManager.GetTypeOfNetType( __0x6638 );
						if( __0x6605 != null )
							__0x6604.Add( __0x6605 );
					}
				}
				catch { }
			}

			CollectionUtility.InsertionSort( __0x6604, delegate ( Metadata.TypeInfo __0x6664, Metadata.TypeInfo __0x6665 )
			{
				if( __0x6664 == MetadataManager.GetTypeOfNetType( typeof( MeshModifier ) ) )
					return -1;
				if( __0x6665 == MetadataManager.GetTypeOfNetType( typeof( MeshModifier ) ) )
					return 1;

				var __0x6606 = __0x6664.GetUserFriendlyNameForInstance();
				var __0x6607 = __0x6665.GetUserFriendlyNameForInstance();
				return string.Compare( __0x6606, __0x6607 );
			} );

			return __0x6604;
		}

		static List<(MeshInSpace, Mesh)> __0x6648( object[] __0x6666 )
		{
			var __0x6608 = new List<(MeshInSpace, Mesh)>();

			foreach( var __0x6639 in __0x6666 )
			{
				if( __0x6639 is Mesh mesh )
					__0x6608.Add( (null, mesh) );

				var __0x6609 = __0x6639 as MeshInSpace;
				if( __0x6609 != null )
				{
					var __0x6610 = __0x6609.Mesh.Value;
					if( __0x6610 != null )
						__0x6608.Add( (__0x6609, __0x6610) );
				}
			}

			return __0x6608;
		}

		static void __0x6649( Metadata.TypeInfo __0x6667, bool __0x6668 )
		{
			var __0x6611 = __0x6667.GetUserFriendlyNameForInstance();

			var __0x6612 = "Modeling New Mesh Modifier " + __0x6611;

			if( __0x6668 )
			{
				EditorActions.Unregister( __0x6612 );
			}
			else
			{
				var __0x6613 = new EditorAction();
				__0x6613.Name = __0x6612;
				__0x6613.ImageSmall = NeoAxis.Properties.Resources.Modify_16;
				__0x6613.ImageBig = NeoAxis.Properties.Resources.Modify_32;
				__0x6613.QatSupport = true;
				__0x6613.RibbonText = (__0x6611, "");
				__0x6613.ContextMenuText = __0x6611;
				__0x6613.UserData = __0x6667;
				__0x6613.GetState += delegate ( EditorAction.GetStateContext __0x6669 )
				{
					if( __0x6648( __0x6669.ObjectsInFocus.Objects ).Count != 0 )
						__0x6669.Enabled = true;
				};
				__0x6613.Click += delegate ( EditorAction.ClickContext __0x6670 )
				{
					var __0x6614 = __0x6648( __0x6670.ObjectsInFocus.Objects );
					if( __0x6614.Count != 0 )
					{
						var __0x6615 = __0x6670.ObjectsInFocus.DocumentWindow;
						var __0x6616 = __0x6615.Document;
						var __0x6617 = (Metadata.TypeInfo)__0x6613.UserData;

						var __0x6618 = new List<Component>();

						var __0x6619 = new List<UndoSystem.Action>();
						var __0x6620 = false;

						foreach( (var meshInSpace, var mesh2) in __0x6614 )
						{
							var __0x6621 = mesh2;

							
							if( meshInSpace != null )
								BuilderCommonFunctions.CopyExternalMesh( __0x6616, meshInSpace, ref __0x6621, __0x6619, ref __0x6620 );

							var __0x6622 = __0x6621.CreateComponent( __0x6617, enabled: false );
							__0x6622.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6622 );
							__0x6622.Enabled = true;

							__0x6618.Add( __0x6622 );

							__0x6615.Focus();
						}

						
						var __0x6623 = new UndoMultiAction();
						if( __0x6619.Count != 0 )
							__0x6623.AddActions( __0x6619 );
						__0x6623.AddAction( new UndoActionComponentCreateDelete( __0x6616, __0x6618, true ) );
						__0x6616.CommitUndoAction( __0x6623 );

						
						__0x6615.SelectObjects( __0x6618.ToArray() );
					}
				};
				EditorActions.Register( __0x6613 );
			}
		}

		private void __0x6650( EditorAction.GetStateContext __0x6671 )
		{
			var __0x6624 = new BuilderActionContext( __0x6671 );

			switch( __0x6671.Action.Name )
			{
			
			
			
			
			
			
			
			
			

			case "Modeling Object Selection":
				__0x6671.Enabled = __0x6624.DocumentWindow is SceneEditor;
				__0x6671.Checked = __0x6624.BuilderWorkareaMode == null;
				break;
			case "Modeling Vertex Selection":
				__0x6671.Enabled = __0x6624.DocumentWindow is SceneEditor;
				__0x6671.Checked = __0x6624.SelectionMode == BuilderSelectionMode.Vertex;
				break;
			case "Modeling Edge Selection":
				__0x6671.Enabled = __0x6624.DocumentWindow is SceneEditor;
				__0x6671.Checked = __0x6624.SelectionMode == BuilderSelectionMode.Edge;
				break;
			case "Modeling Face Selection":
				__0x6671.Enabled = __0x6624.DocumentWindow is SceneEditor;
				__0x6671.Checked = __0x6624.SelectionMode == BuilderSelectionMode.Face;
				break;

			case "Modeling Merge Vertices Move To Middle":
			case "Modeling Merge Vertices Move To First":
				BuilderOneMeshActions.MergeVerticesGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Split Vertices":
				BuilderOneMeshActions.SplitVerticesGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Select All":
				__0x6624.BuilderWorkareaMode?.SelectAllGetState( __0x6671 );
				break;

			case "Modeling Invert Selection":
				__0x6624.BuilderWorkareaMode?.InvertSelectionGetState( __0x6671 );
				break;

			case "Modeling Bridge Edges":
				BuilderOneMeshActions.BridgeEdgesGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Conform Normals":
				BuilderOneMeshActions.ConformNormalsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Flat Normals":
				BuilderOneMeshActions.FlatNormalsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Smooth Normals":
				BuilderOneMeshActions.SmoothNormalsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Flip Normals":
				BuilderOneMeshActions.FlipNormalsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Merge Faces":
				BuilderOneMeshActions.MergeFacesGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Triangulate Faces":
				BuilderOneMeshActions.TriangulateFacesGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Detach Faces To Mesh Geometry (Split Vertices)":
				BuilderOneMeshActions.DetachFacesGetState( __0x6671, __0x6624, false );
				break;

			case "Modeling Detach Faces To Mesh Geometry":
				BuilderOneMeshActions.DetachFacesGetState( __0x6671, __0x6624, false );
				break;

			case "Modeling Detach Faces To Mesh In Space":
				BuilderOneMeshActions.DetachFacesGetState( __0x6671, __0x6624, true );
				break;

			case "Modeling Set Material":
				BuilderOneMeshActions.SetMaterialGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Set Color":
				BuilderActions.SetColorGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Grow Selection":
				BuilderOneMeshActions.GrowSelectionGetState( __0x6671, __0x6624 );
				break;
			case "Modeling Select By Material":
				BuilderOneMeshActions.SelectByMaterialGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Merge Objects":
				BuilderActions.MergeObjectsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Mirror Objects X":
			case "Modeling Mirror Objects Y":
			case "Modeling Mirror Objects Z":
				BuilderActions.MirrorObjectsGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Union":
			case "Modeling Intersect":
			case "Modeling Subtract":
				BuilderActions.BoolActionGetState( __0x6671, __0x6624 );
				break;

			case "Modeling Add Paint Layer":
				BuilderActions.AddPaintLayerGetState( __0x6671, __0x6624 );
				break;

			}
		}

		private void __0x6651( EditorAction.ClickContext __0x6672 )
		{
			var __0x6625 = new BuilderActionContext( __0x6672 );

			switch( __0x6672.Action.Name )
			{
			
			
			
			

			
			
			
			

			
			
			
			

			case "Modeling Object Selection":
			case "Modeling Vertex Selection":
			case "Modeling Edge Selection":
			case "Modeling Face Selection":
				{
					
					
					
					
					
					
					
					

					
					var __0x6626 = __0x6625.DocumentWindow as SceneEditor;
					if( __0x6626 != null )
					{
						if( __0x6672.Action.Name != "Modeling Object Selection" )
						{
							if( __0x6626.WorkareaModeName != "Modeling" )
							{
								var __0x6627 = new BuilderWorkareaMode( __0x6626 );
								__0x6626.WorkareaModeSet( "Modeling", __0x6627 );
							}

							var __0x6628 = __0x6626.WorkareaMode as BuilderWorkareaMode;
							if( __0x6628 != null )
							{
								switch( __0x6672.Action.Name )
								{
								case "Modeling Vertex Selection": __0x6628.ChangeSelectionMode( BuilderSelectionMode.Vertex ); break;
								case "Modeling Edge Selection": __0x6628.ChangeSelectionMode( BuilderSelectionMode.Edge ); break;
								case "Modeling Face Selection": __0x6628.ChangeSelectionMode( BuilderSelectionMode.Face ); break;
								}
							}
						}
						else
							__0x6626.WorkareaModeSet( "" );
					}
				}
				break;

			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			case "Modeling Merge Vertices Move To Middle":
			case "Modeling Merge Vertices Move To First":
				{
					bool __0x6629 = __0x6672.Action.Name == "Modeling Merge Vertices Move To First";
					
					BuilderOneMeshActions.MergeVertices( __0x6625, __0x6629 );
					
					
				}
				break;

			case "Modeling Split Vertices":
				BuilderOneMeshActions.SplitVertices( __0x6625, false, true );
				break;

			case "Modeling Select All":
				__0x6625.BuilderWorkareaMode?.SelectAll();
				break;

			case "Modeling Invert Selection":
				__0x6625.BuilderWorkareaMode?.InvertSelection();
				break;

			case "Modeling Bridge Edges":
				BuilderOneMeshActions.BridgeEdges( __0x6625 );
				break;

			case "Modeling Conform Normals":
				BuilderOneMeshActions.ConformNormals( __0x6625 );
				break;

			case "Modeling Flat Normals":
				BuilderOneMeshActions.FlatNormals( __0x6625 );
				break;

			case "Modeling Smooth Normals":
				BuilderOneMeshActions.SmoothNormals( __0x6625 );
				break;

			case "Modeling Flip Normals":
				BuilderOneMeshActions.FlipNormals( __0x6625 );
				break;

			case "Modeling Merge Faces":
				BuilderOneMeshActions.MergeFaces( __0x6625 );
				break;
			case "Modeling Triangulate Faces":
				BuilderOneMeshActions.TriangulateFaces( __0x6625 );
				break;
			case "Modeling Detach Faces To Mesh Geometry":
				BuilderOneMeshActions.DetachFaces( __0x6625, false, false );
				break;
			case "Modeling Detach Faces To Mesh Geometry (Split Vertices)":
				BuilderOneMeshActions.DetachFaces( __0x6625, false, true );
				break;
			case "Modeling Detach Faces To Mesh In Space":
				BuilderOneMeshActions.DetachFaces( __0x6625, true, true );
				break;

			case "Modeling Set Material":
				BuilderOneMeshActions.SetMaterial( __0x6625 );
				break;

			case "Modeling Set Color":
				{
					var __0x6630 = BuilderActions.GetInitialColor( __0x6625 ) ?? new ColorValue( 1, 1, 1 );

					var __0x6631 = new System.Drawing.Point( Cursor.Position.X + 10, Cursor.Position.Y + 10 );
					if( EditorAssemblyInterface.Instance.ColorValuePoweredSelectFormShowDialog( __0x6631, __0x6630.ToColorValuePowered(), out var resultColor ) )
						BuilderActions.SetColor( __0x6625, resultColor.ToColorValue() );

					
					
					
					
					
					
				}
				break;

			case "Modeling Grow Selection":
				BuilderOneMeshActions.GrowSelection( __0x6625 );
				break;
			case "Modeling Select By Material":
				BuilderOneMeshActions.SelectByMaterial( __0x6625 );
				break;
			case "Modeling Merge Objects":
				BuilderActions.MergeObjects( __0x6625 );
				break;

			case "Modeling Mirror Objects X":
				BuilderActions.MirrorObjects( __0x6625, 0 );
				break;
			case "Modeling Mirror Objects Y":
				BuilderActions.MirrorObjects( __0x6625, 1 );
				break;
			case "Modeling Mirror Objects Z":
				BuilderActions.MirrorObjects( __0x6625, 2 );
				break;

			case "Modeling Union":
				BuilderActions.BoolAction( __0x6625, BuilderActions.BoolActionEnum.Union );
				break;
			case "Modeling Intersect":
				BuilderActions.BoolAction( __0x6625, BuilderActions.BoolActionEnum.Intersect );
				break;
			case "Modeling Subtract":
				BuilderActions.BoolAction( __0x6625, BuilderActions.BoolActionEnum.Subtract );
				break;

			case "Modeling Add Paint Layer":
				BuilderActions.AddPaintLayer( __0x6625 );
				break;
			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	class BuilderMeshData
	{
		public List<Vertex> Vertices;
		public List<Edge> Edges;
		public List<Face> Faces;
		MeshGeometryFormat[] __0x6673;

		

		
		

		

		

		
		public class RawVertex
		{
			readonly byte[] __0x6674;
			readonly int __0x6675 = -1;
			readonly int __0x6676 = -1;
			readonly int __0x6677 = -1;
			readonly int __0x6678 = -1;
			readonly int __0x6679 = -1;

			private RawVertex() { }

			
			
			
			
			
			
			
			
			

			public RawVertex( byte[] data, MeshGeometryFormat format )
			{
				this.__0x6674 = data;
				__0x6675 = format.positionOffset;
				__0x6676 = format.normalOffset;
				__0x6677 = format.tangentOffset;
				__0x6678 = format.colorOffset;
				__0x6679 = format.texCoordOffset;
			}

			public byte[] Data
			{
				get { return __0x6674; }
			}

			public unsafe Vector3F Position
			{
				get
				{
					if( __0x6675 != -1 )
						fixed( byte* __0x6680 = __0x6674 )
							return *(Vector3F*)( __0x6680 + __0x6675 );
					return Vector3F.Zero;
				}
				set
				{
					if( __0x6675 != -1 )
						fixed( byte* __0x6681 = __0x6674 )
							*(Vector3F*)( __0x6681 + __0x6675 ) = value;
				}
			}

			public unsafe Vector3F Normal
			{
				get
				{
					if( __0x6676 != -1 )
						fixed( byte* __0x6682 = __0x6674 )
							return *(Vector3F*)( __0x6682 + __0x6676 );
					return Vector3F.Zero;
				}
				set
				{
					if( __0x6676 != -1 )
						fixed( byte* __0x6683 = __0x6674 )
							*(Vector3F*)( __0x6683 + __0x6676 ) = value;
				}
			}

			public unsafe Vector4F Tangent
			{
				get
				{
					if( __0x6677 != -1 )
						fixed( byte* __0x6684 = __0x6674 )
							return *(Vector4F*)( __0x6684 + __0x6677 );
					return Vector4F.Zero;
				}
				set
				{
					if( __0x6677 != -1 )
						fixed( byte* __0x6685 = __0x6674 )
							*(Vector4F*)( __0x6685 + __0x6677 ) = value;
				}
			}

			public unsafe Vector4F Color
			{
				get
				{
					if( __0x6678 != -1 )
						fixed( byte* __0x6686 = __0x6674 )
							return *(Vector4F*)( __0x6686 + __0x6678 );
					return Vector4F.Zero;
				}
				set
				{
					if( __0x6678 != -1 )
						fixed( byte* __0x6687 = __0x6674 )
							*(Vector4F*)( __0x6687 + __0x6678 ) = value;
				}
			}

			
			public unsafe Vector2F TexCoord
			{
				get
				{
					if( __0x6679 != -1 )
						fixed( byte* __0x6688 = __0x6674 )
							return *(Vector2F*)( __0x6688 + __0x6679 );
					return Vector2F.Zero;
				}
				set
				{
					if( __0x6679 != -1 )
						fixed( byte* __0x6689 = __0x6674 )
							*(Vector2F*)( __0x6689 + __0x6679 ) = value;
				}
			}
		}

		

		public class Vertex
		{
			public List<(string, string)> Properties;

			
			

			

			public Vertex( List<(string, string)> properties = null )
			{
				Properties = properties;
			}
		}

		

		public class Edge
		{
			public int Vertex1;
			public int Vertex2;
			public List<(string, string)> Properties;

			

			public Edge( int vertex1, int vertex2, List<(string, string)> properties = null )
			{
				Vertex1 = vertex1;
				Vertex2 = vertex2;
				Properties = properties;
			}
		}

		

		public class FaceVertex
		{
			public int Vertex;
			public int RawGeometry;
			public RawVertex RawVertex;

			

			public FaceVertex( int vertex, int rawGeometry, RawVertex rawVertex )
			{
				Vertex = vertex;
				RawGeometry = rawGeometry;
				RawVertex = rawVertex;
			}
		}

		

		public class Face
		{
			public List<FaceVertex> Triangles;
			public List<(string, string)> Properties;
			
			public int SmoothingGroup;

			

			public Face( List<FaceVertex> triangles, List<(string, string)> properties, int smoothingGroup )
			{
				Triangles = triangles;
				Properties = properties;
				SmoothingGroup = smoothingGroup;
			}
		}

		

		
		
		
		

		
		
		
		
		

		

		internal class MeshGeometryFormat
		{
			public int vertexSize;
			public int positionOffset = -1;
			public int normalOffset = -1;
			public int tangentOffset = -1;
			public int colorOffset = -1;
			public int texCoordOffset = -1;

			

			public MeshGeometryFormat( VertexElement[] vertexStructure )
			{
				vertexStructure.GetInfo( out vertexSize, out _ );

				foreach( var __0x6787 in vertexStructure )
				{
					switch( __0x6787.Semantic )
					{
					case VertexElementSemantic.Position:
						if( __0x6787.Type == VertexElementType.Float3 )
							positionOffset = __0x6787.Offset;
						break;

					case VertexElementSemantic.Normal:
						if( __0x6787.Type == VertexElementType.Float3 )
							normalOffset = __0x6787.Offset;
						break;

					case VertexElementSemantic.Tangent:
						if( __0x6787.Type == VertexElementType.Float4 )
							tangentOffset = __0x6787.Offset;
						break;

					case VertexElementSemantic.Color0:
						if( __0x6787.Type == VertexElementType.Float4 )
							colorOffset = __0x6787.Offset;
						break;

					case VertexElementSemantic.TextureCoordinate0:
						if( __0x6787.Type == VertexElementType.Float2 )
							texCoordOffset = __0x6787.Offset;
						break;

					}
				}
			}
		}

		

		static readonly Vector4F __0x6690 = new Vector4F( 1, 1, 1, 1 );


		static MeshGeometryFormat[] __0x6807( Mesh.ExtractedData.MeshGeometryItem[] __0x6808 )
		{
			var __0x6691 = new List<MeshGeometryFormat>();
			foreach( var __0x6788 in __0x6808 )
				__0x6691.Add( new MeshGeometryFormat( __0x6788.VertexStructure ) );
			return __0x6691.ToArray();
		}

		
		
		
		
		
		
		

		public static List<(string, string)> CloneProperties( List<(string, string)> source )
		{
			if( source != null )
				return source.ToList();
			return null;
		}

		public FaceVertex CreateFaceVertex( int vertex, int meshGeometry )
		{
			var __0x6692 = __0x6673[ meshGeometry ];
			var __0x6693 = new RawVertex( new byte[ __0x6692.vertexSize ], __0x6692 );
			__0x6693.Color = __0x6690;
			return new FaceVertex( vertex, meshGeometry, __0x6693 );
		}

		public FaceVertex CloneFaceVertex( FaceVertex vertex )
		{
			var __0x6694 = __0x6673[ vertex.RawGeometry ];
			return new FaceVertex( vertex.Vertex, vertex.RawGeometry, new RawVertex( (byte[])vertex.RawVertex.Data.Clone(), __0x6694 ) );
		}

		public static RawVertex ConvertRawVertex( RawVertex rv, MeshGeometryFormat newFormat )
		{
			var __0x6695 = new RawVertex( new byte[ newFormat.vertexSize ], newFormat )
			{
				Position = rv.Position, Normal = rv.Normal, Tangent = rv.Tangent, Color = rv.Color, TexCoord = rv.TexCoord
			};
			
			return __0x6695;
		}

		public static byte[] ConvertToFormat( MeshGeometryFormat originalFormat, byte[] originalData, MeshGeometryFormat newFormat )
		{
			int __0x6696 = originalData.Length / originalFormat.vertexSize;
			byte[] __0x6697 = new byte[ newFormat.vertexSize * __0x6696 ];

			byte[] __0x6698 = new byte[ originalFormat.vertexSize ];
			for( int __0x6699 = 0; __0x6699 < __0x6696; __0x6699++ )
			{
				Array.Copy( originalData, __0x6699 * originalFormat.vertexSize, __0x6698, 0, originalFormat.vertexSize );
				var __0x6700 = new RawVertex( __0x6698, originalFormat );
				var __0x6701 = ConvertRawVertex( __0x6700, newFormat );
				Array.Copy( __0x6701.Data, 0, __0x6697, __0x6699 * newFormat.vertexSize, newFormat.vertexSize );
			}
			return __0x6697;
		}

		public void Load( Mesh.ExtractedData extractedData )
		{
			var __0x6702 = extractedData.Structure;

			
			
			__0x6673 = __0x6807( extractedData.MeshGeometries );

			

			if( __0x6702 != null )
			{
				try
				{
					Vertices = new List<Vertex>( __0x6702.Vertices.Length );
					foreach( var __0x6789 in __0x6702.Vertices )
						Vertices.Add( new Vertex( CloneProperties( __0x6789.Properties ) ) );

					Edges = new List<Edge>( __0x6702.Edges.Length );
					foreach( var __0x6790 in __0x6702.Edges )
						Edges.Add( new Edge( __0x6790.Vertex1, __0x6790.Vertex2, CloneProperties( __0x6790.Properties ) ) );

					Faces = new List<Face>( __0x6702.Faces.Length );
					foreach( var __0x6791 in __0x6702.Faces )
					{
						var __0x6703 = new List<FaceVertex>( __0x6791.Triangles.Length );
						foreach( var __0x6792 in __0x6791.Triangles )
						{
							var __0x6704 = __0x6673[ __0x6792.RawGeometry ];
							var __0x6705 = extractedData.MeshGeometries[ __0x6792.RawGeometry ];

							var __0x6706 = new byte[ __0x6704.vertexSize ];
							Array.Copy( __0x6705.Vertices, __0x6792.RawVertex * __0x6704.vertexSize, __0x6706, 0, __0x6704.vertexSize );
							var __0x6707 = new RawVertex( __0x6706, __0x6704 );
							__0x6703.Add( new FaceVertex( __0x6792.Vertex, __0x6792.RawGeometry, __0x6707 ) );
						}

						Faces.Add( new Face( __0x6703, CloneProperties( __0x6791.Properties ), __0x6791.SmoothingGroup ) );
					}
				}
				catch
				{
					Log.Warning( "Unable to load mesh data structure. Invalid data." );
				}
			}
			else
			{
				Vertices = new List<Vertex>();
				Edges = new List<Edge>();
				Faces = new List<Face>();
			}
		}

		
		public void Save( Mesh mesh, BuilderSelection selection, List<UndoSystem.Action> undo, ref bool undoLocked )
		{
			
			var __0x6708 = mesh.GetComponents<MeshGeometry>();
			

			
			RemoveUnusedData( selection );

			var __0x6709 = new Mesh.StructureClass();

			var __0x6710 = new (List<byte> geometryVertices, List<int> geometryIndices, int geometryVerticesCounter)[ __0x6708.Length ];
			for( int __0x6711 = 0; __0x6711 < __0x6708.Length; __0x6711++ )
			{
				__0x6710[ __0x6711 ].geometryVertices = new List<byte>();
				__0x6710[ __0x6711 ].geometryIndices = new List<int>();
			}

			{
				var __0x6712 = new List<Mesh.StructureClass.Vertex>( Vertices.Count );
				foreach( var __0x6793 in Vertices )
					__0x6712.Add( new Mesh.StructureClass.Vertex( __0x6793.Properties ) );
				__0x6709.Vertices = __0x6712.ToArray();

				var __0x6713 = new List<Mesh.StructureClass.Edge>( Edges.Count );
				foreach( var __0x6794 in Edges )
					__0x6713.Add( new Mesh.StructureClass.Edge( __0x6794.Vertex1, __0x6794.Vertex2, __0x6794.Properties ) );
				__0x6709.Edges = __0x6713.ToArray();

				var __0x6714 = new List<Mesh.StructureClass.Face>( Faces.Count );
				foreach( var __0x6795 in Faces )
				{
					var __0x6715 = new List<Mesh.StructureClass.FaceVertex>( __0x6795.Triangles.Count );
					foreach( var __0x6796 in __0x6795.Triangles )
					{
						

						ref var __0x6716 = ref __0x6710[ __0x6796.RawGeometry ];

						var __0x6717 = __0x6716.geometryVerticesCounter;
						__0x6716.geometryVertices.AddRange( __0x6796.RawVertex.Data );
						__0x6716.geometryIndices.Add( __0x6716.geometryVerticesCounter );

						__0x6716.geometryVerticesCounter++;

						__0x6715.Add( new Mesh.StructureClass.FaceVertex( __0x6796.Vertex, __0x6796.RawGeometry, __0x6717 ) );
					}

					__0x6714.Add( new Mesh.StructureClass.Face( __0x6715.ToArray(), __0x6795.Properties, __0x6795.SmoothingGroup ) );
				}
				__0x6709.Faces = __0x6714.ToArray();
			}

			
			if( !undoLocked )
			{
				
				var __0x6718 = (Metadata.Property)mesh.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
				undo.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( mesh, __0x6718, mesh.Structure ) ) );

				foreach( var __0x6797 in __0x6708 )
				{
					
					__0x6718 = (Metadata.Property)__0x6797.MetadataGetMemberBySignature( "property:" + nameof( MeshGeometry.Vertices ) );
					undo.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6797, __0x6718, __0x6797.Vertices ) ) );

					
					__0x6718 = (Metadata.Property)__0x6797.MetadataGetMemberBySignature( "property:" + nameof( MeshGeometry.Indices ) );
					undo.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x6797, __0x6718, __0x6797.Indices ) ) );
				}
			}

			
			mesh.Structure = __0x6709;

			
			for( int __0x6719 = 0; __0x6719 < __0x6708.Length; __0x6719++ )
			{
				ref var __0x6720 = ref __0x6710[ __0x6719 ];
				__0x6708[ __0x6719 ].Vertices = __0x6720.geometryVertices.ToArray();
				__0x6708[ __0x6719 ].Indices = __0x6720.geometryIndices.ToArray();
			}
		}

		public void RemoveUnusedData( BuilderSelection selection )
		{
			
			

			

			var __0x6721 = new bool[ Vertices.Count ];
			var __0x6722 = new Dictionary<(int lowVertex, int highVertex), int>(); 
			void AddUsedEdge( int __0x6809, int __0x6810 ) => __0x6722[ BuilderCommonFunctions.OrderVertices( __0x6809, __0x6810 ) ] = -1;

			for( int __0x6723 = 0; __0x6723 < Faces.Count; __0x6723++ )
			{
				var __0x6724 = Faces[ __0x6723 ];
				if( __0x6724 == null )
					continue;

				int __0x6725 = __0x6724.Triangles.Count / 3;
				for( int __0x6726 = 0; __0x6726 < __0x6725; __0x6726++ )
				{
					var __0x6727 = __0x6724.Triangles;
					int __0x6728 = __0x6726 * 3;
					var __0x6729 = __0x6727[ __0x6728 ];
					var __0x6730 = __0x6727[ __0x6728 + 1 ];
					var __0x6731 = __0x6727[ __0x6728 + 2 ];

					if( __0x6729 == null || __0x6730 == null || __0x6731 == null || __0x6729.Vertex == __0x6730.Vertex || __0x6729.Vertex == __0x6731.Vertex || __0x6730.Vertex == __0x6731.Vertex )
					{
						__0x6727[ __0x6728 ] = null;
						__0x6727[ __0x6728 + 1 ] = null;
						__0x6727[ __0x6728 + 2 ] = null;
					}

					if( __0x6724.Triangles[ __0x6728 ] != null )
					{
						__0x6721[ __0x6727[ __0x6728 ].Vertex ] = true;
						__0x6721[ __0x6727[ __0x6728 + 1 ].Vertex ] = true;
						__0x6721[ __0x6727[ __0x6728 + 2 ].Vertex ] = true;

						AddUsedEdge( __0x6727[ __0x6728 ].Vertex, __0x6727[ __0x6728 + 1 ].Vertex );
						AddUsedEdge( __0x6727[ __0x6728 + 1 ].Vertex, __0x6727[ __0x6728 + 2 ].Vertex );
						AddUsedEdge( __0x6727[ __0x6728 ].Vertex, __0x6727[ __0x6728 + 2 ].Vertex );
					}
				}
			}

			
			for( int __0x6732 = 0; __0x6732 < Edges.Count; __0x6732++ )
			{
				var __0x6733 = Edges[ __0x6732 ];
				if( __0x6733 != null )
				{
					if( __0x6733.Vertex1 == __0x6733.Vertex2 || !__0x6721[ __0x6733.Vertex1 ] || !__0x6721[ __0x6733.Vertex2 ] )
						Edges[ __0x6732 ] = null;
					var __0x6734 = BuilderCommonFunctions.OrderVertices( __0x6733.Vertex1, __0x6733.Vertex2 );
					if( __0x6722.TryGetValue( __0x6734, out int edgeIndex ) && edgeIndex == -1 )
						__0x6722[ __0x6734 ] = __0x6732; 
					else
					{
						
						Edges[ __0x6732 ] = null;
					}
				}
			}

			

			
			

			var __0x6735 = new List<Vertex>();
			int[] __0x6736 = new int[ Vertices.Count ]; 
			for( int __0x6737 = 0; __0x6737 < Vertices.Count; __0x6737++ )
			{
				if( !__0x6721[ __0x6737 ] )
					__0x6736[ __0x6737 ] = -1;
				else
				{
					__0x6736[ __0x6737 ] = __0x6735.Count;
					__0x6735.Add( Vertices[ __0x6737 ] );
				}
			}
			Vertices = __0x6735;

			
			var __0x6738 = new List<Edge>();
			int[] __0x6739 = null;
			bool __0x6740 = selection != null && 0 < selection.EdgeCount;
			if( __0x6740 )
			{
				__0x6739 = new int[ Edges.Count ];
				for( int __0x6741 = 0; __0x6741 < __0x6739.Length; __0x6741++ )
					__0x6739[ __0x6741 ] = -1;
			}

			for( int __0x6742 = 0; __0x6742 < Edges.Count; __0x6742++ )
			{
				var __0x6743 = Edges[ __0x6742 ];
				if( __0x6743 != null )
				{
					__0x6743.Vertex1 = __0x6736[ __0x6743.Vertex1 ];
					__0x6743.Vertex2 = __0x6736[ __0x6743.Vertex2 ];
					__0x6738.Add( __0x6743 );
					if( __0x6740 )
						__0x6739[ __0x6742 ] = __0x6738.Count - 1;
				}
			}
			Edges = __0x6738;

			
			var __0x6744 = new List<Face>();

			int[] __0x6745 = null;
			bool __0x6746 = selection != null && 0 < selection.FaceCount;
			if( __0x6746 )
			{
				__0x6745 = new int[ Faces.Count ];
				for( int __0x6747 = 0; __0x6747 < __0x6745.Length; __0x6747++ )
					__0x6745[ __0x6747 ] = -1;
			}
			for( int __0x6748 = 0; __0x6748 < Faces.Count; __0x6748++ )
			{
				var __0x6749 = Faces[ __0x6748 ];
				if( __0x6749 == null || __0x6749.Triangles == null || __0x6749.Triangles.Count == 0 ) 
					continue;

				
				var __0x6750 = new List<FaceVertex>();
				for( int __0x6751 = 0; __0x6751 < __0x6749.Triangles.Count; __0x6751++ )
				{
					var __0x6752 = __0x6749.Triangles[ __0x6751 ];
					if( __0x6752 != null )
					{
						__0x6752.Vertex = __0x6736[ __0x6752.Vertex ];
						__0x6750.Add( __0x6752 );
					}
				}
				if( __0x6750.Count % 3 != 0 )
					throw new Exception(); 
				if( __0x6750.Count != 0 )
				{
					__0x6749.Triangles = __0x6750;
					__0x6744.Add( __0x6749 );
					if( __0x6746 )
						__0x6745[ __0x6748 ] = __0x6744.Count - 1;
				}
			}
			Faces = __0x6744;

			bool __0x6753 = selection != null && 0 < selection.VertexCount;
			if( __0x6753 )
			{
				for( int __0x6754 = 0; __0x6754 < selection.Vertices.Length; __0x6754++ )
				{
					int __0x6755 = __0x6736[ selection.Vertices[ __0x6754 ] ];
					if( selection.Vertices[ __0x6754 ] != __0x6755 )
					{
						selection.Vertices[ __0x6754 ] = __0x6755;
						selection.Changed = true;
					}
				}
			}

			if( __0x6740 )
			{
				for( int __0x6756 = 0; __0x6756 < selection.Edges.Length; __0x6756++ )
				{
					int __0x6757 = __0x6739[ selection.Edges[ __0x6756 ] ];
					if( selection.Edges[ __0x6756 ] != __0x6757 )
					{
						selection.Edges[ __0x6756 ] = __0x6757;
						selection.Changed = true;
					}
				}
			}

			if( __0x6746 )
			{
				for( int __0x6758 = 0; __0x6758 < selection.Faces.Length; __0x6758++ )
				{
					int __0x6759 = __0x6745[ selection.Faces[ __0x6758 ] ];
					if( selection.Faces[ __0x6758 ] != __0x6759 )
					{
						selection.Faces[ __0x6758 ] = __0x6759;
						selection.Changed = true;
					}
				}
			}

			
		}


		
		
		
		
		
		
		
		
		


		
		
		public void MoveVertices( int[] vertices, Vector3F[] newPositions )
		{
			var __0x6760 = new HashSet<int>( vertices );
			for( int __0x6761 = 0; __0x6761 < vertices.Length; __0x6761++ )
				MoveVertex( vertices[ __0x6761 ], newPositions[ __0x6761 ], __0x6760 );
		}

		public void MoveVertex( int vertex, Vector3F newPosition, HashSet<int> allMoved = null )
		{
			
			
			
			
			

			foreach( var __0x6798 in Faces )
			{
				var __0x6762 = __0x6798.Triangles;
				for( var __0x6763 = 0; __0x6763 < __0x6762.Count; __0x6763 += 3 )
				{
					var __0x6764 = __0x6762[ __0x6763 ];
					var __0x6765 = __0x6762[ __0x6763 + 1 ];
					var __0x6766 = __0x6762[ __0x6763 + 2 ];

					if( __0x6764.Vertex == vertex || __0x6765.Vertex == vertex || __0x6766.Vertex == vertex )
					{
						var __0x6767 = BuilderCommonFunctions.CalculateNormal( __0x6764.RawVertex.Position, __0x6765.RawVertex.Position, __0x6766.RawVertex.Position );

						if( __0x6764.Vertex == vertex )
							__0x6764.RawVertex.Position = newPosition;
						if( __0x6765.Vertex == vertex )
							__0x6765.RawVertex.Position = newPosition;
						if( __0x6766.Vertex == vertex )
							__0x6766.RawVertex.Position = newPosition;

						
						if( !( allMoved != null && allMoved.Contains( __0x6764.Vertex ) && allMoved.Contains( __0x6765.Vertex ) && allMoved.Contains( __0x6766.Vertex ) ) )
							UpdateNormalsAndTangentsAfterPositionChange( __0x6764, __0x6765, __0x6766, __0x6767 );
					}
				}
			}
		}

		
		
		

		
		public void MoveVertex( List<FaceVertex> fVertices, int triangleStart, int vertexToMoveIndex, Vector3F newPosition )
		{
			Vector3F __0x6768 = BuilderCommonFunctions.CalculateNormal(
				fVertices[ triangleStart ].RawVertex.Position,
				fVertices[ triangleStart + 1 ].RawVertex.Position,
				fVertices[ triangleStart + 2 ].RawVertex.Position );
			fVertices[ vertexToMoveIndex ].RawVertex.Position = newPosition;
			UpdateNormalsAndTangentsAfterPositionChange( fVertices[ triangleStart ], fVertices[ triangleStart + 1 ], fVertices[ triangleStart + 2 ], __0x6768 );
		}


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public void UpdateNormalsAndTangentsAfterPositionChange( FaceVertex v0, FaceVertex v1, FaceVertex v2, Vector3F? oldNormal )
		{
			

			

			
			
			
			BuilderCommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( this, v0, v1, v2 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		


		public Vector3F GetVertexPosition( int vertex )
		{
			foreach( var __0x6799 in Faces )
			{
				foreach( var __0x6800 in __0x6799.Triangles )
				{
					if( __0x6800.Vertex == vertex )
						return __0x6800.RawVertex.Position;
				}
			}
			return Vector3F.Zero;
		}

		public Dictionary<int, Vector3> GetVertexPositions()
		{
			int __0x6769 = 0;
			foreach( var __0x6801 in Faces )
				foreach( var __0x6802 in __0x6801.Triangles )
					__0x6769 = Math.Max( __0x6769, __0x6802.Vertex );

			var __0x6770 = new Dictionary<int, Vector3>( __0x6769 + 1 );

			foreach( var __0x6803 in Faces )
				foreach( var __0x6804 in __0x6803.Triangles )
					__0x6770[ __0x6804.Vertex ] = __0x6804.RawVertex.Position;

			return __0x6770;
		}

		public void ReplaceVertexIndexForEdgesAndFaces( int oldVertex, int newVertex )
		{
			foreach( var __0x6805 in Edges )
			{
				if( __0x6805.Vertex1 == oldVertex )
					__0x6805.Vertex1 = newVertex;
				if( __0x6805.Vertex2 == oldVertex )
					__0x6805.Vertex2 = newVertex;
			}

			foreach( var __0x6806 in Faces )
			{
				for( int __0x6771 = 0; __0x6771 < __0x6806.Triangles.Count; __0x6771++ )
				{
					if( __0x6806.Triangles[ __0x6771 ].Vertex == oldVertex )
						__0x6806.Triangles[ __0x6771 ].Vertex = newVertex;
				}
			}
		}

		public void AddEdge( int vertex1, int vertex2 )
		{
			
			Edges.Add( new Edge( vertex1, vertex2 ) );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		public static BuilderMeshData BuildFromRaw( List<(Vector3F[] positions, int[] indices, MeshGeometryFormat format)> geometries )
		{
			if( geometries == null || geometries.Count == 0 )
				return null;
			var __0x6772 = new BuilderMeshData();
			__0x6772.__0x6673 = geometries.Select( __0x6811 => __0x6811.format ).ToArray();

			__0x6772.Vertices = new List<Vertex>();
			__0x6772.Faces = new List<Face>();
			var __0x6773 = new HashSet<(int lowVertex, int highVertex)>();

			for( int __0x6774 = 0; __0x6774 < geometries.Count; __0x6774++ )
			{
				var __0x6775 = geometries[ __0x6774 ];

				int __0x6776 = __0x6772.Vertices.Count;
				for( int __0x6777 = 0; __0x6777 < __0x6775.positions.Length; __0x6777++ )
					__0x6772.Vertices.Add( new Vertex() );

				int __0x6778 = __0x6775.indices.Length / 3;
				if( __0x6775.indices.Length % 3 != 0 )
					throw new Exception();

				for( int __0x6779 = 0; __0x6779 < __0x6778; __0x6779++ )
				{
					int __0x6780 = __0x6779 * 3;

					var __0x6781 = new List<FaceVertex>();
					Vector4F __0x6782 = new Vector4F( 1, 0, 0, -1 ); 

					var __0x6783 = new FaceVertex( __0x6776 + __0x6775.indices[ __0x6780 ], __0x6774, new RawVertex( new byte[ __0x6775.format.vertexSize ], __0x6775.format ) )
					{
						RawVertex = { Position = __0x6775.positions[ __0x6775.indices[ __0x6780 ] ], Color = __0x6690, Tangent = __0x6782 }
					};
					__0x6781.Add( __0x6783 );

					var __0x6784 = new FaceVertex( __0x6776 + __0x6775.indices[ __0x6780 + 1 ], __0x6774, new RawVertex( new byte[ __0x6775.format.vertexSize ], __0x6775.format ) )
					{
						RawVertex = { Position = __0x6775.positions[ __0x6775.indices[ __0x6780 + 1 ] ], Color = __0x6690, Tangent = __0x6782 }
					};
					__0x6781.Add( __0x6784 );

					var __0x6785 = new FaceVertex( __0x6776 + __0x6775.indices[ __0x6780 + 2 ], __0x6774, new RawVertex( new byte[ __0x6775.format.vertexSize ], __0x6775.format ) )
					{
						RawVertex = { Position = __0x6775.positions[ __0x6775.indices[ __0x6780 + 2 ] ], Color = __0x6690, Tangent = __0x6782 }
					};
					__0x6781.Add( __0x6785 );

					BuilderCommonFunctions.CalculateNormal( __0x6783, __0x6784, __0x6785 );

					var __0x6786 = new Face( __0x6781, null, 0 );
					__0x6772.Faces.Add( __0x6786 );

					__0x6773.Add( BuilderCommonFunctions.OrderVertices( __0x6783.Vertex, __0x6784.Vertex ) );
					__0x6773.Add( BuilderCommonFunctions.OrderVertices( __0x6784.Vertex, __0x6785.Vertex ) );
					__0x6773.Add( BuilderCommonFunctions.OrderVertices( __0x6785.Vertex, __0x6783.Vertex ) );
				}
			}

			__0x6772.Edges = __0x6773.Select( __0x6812 => new Edge( __0x6812.lowVertex, __0x6812.highVertex ) ).ToList();

			return __0x6772;
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	

	

	public static partial class BuilderOneMeshActions
	{
		public delegate string OneMeshActionCanExecuteDelegate( Mesh __0x7172 );

		
		
		
		
		public delegate void OneMeshActionExecuteDelegate( Mesh __0x7173, List<UndoSystem.Action> __0x7174, ref bool __0x7175 );
		

		
		static void __0x7148( BuilderActionContext __0x7176, OneMeshActionCanExecuteDelegate __0x7177, OneMeshActionExecuteDelegate __0x7178, bool __0x7179 = true )
		{
			var (meshInSpace, mesh) = __0x7176.GetSelectedMesh();
			if( mesh != null )
			{
				
				if( mesh.GetComponents<MeshGeometry>().Length == 0 )
					return;

				
				
				
				
				
				
				

				
				bool __0x6813 = meshInSpace.Enabled;

				try
				{
					
					if( __0x7179 )
						meshInSpace.Enabled = false;

					var __0x6814 = __0x7176.DocumentWindow.Document;
					var __0x6815 = new List<UndoSystem.Action>();
					var __0x6816 = false;

					
					if( __0x7179 )
						BuilderCommonFunctions.CopyExternalMesh( __0x6814, meshInSpace, ref mesh, __0x6815, ref __0x6816 );

					
					if( __0x7179 )
						BuilderCommonFunctions.ConvertProceduralMeshGeometries( __0x6814, mesh, __0x6815, ref __0x6816 );

					
					
					__0x7178( mesh, __0x6815, ref __0x6816 );
					

					
					if( __0x6815.Count != 0 )
					{
						var __0x6817 = new UndoMultiAction();
						__0x6817.AddActions( __0x6815 );
						__0x6814.CommitUndoAction( __0x6817 );
					}
				}
				finally
				{
					
					if( __0x7179 )
						meshInSpace.Enabled = __0x6813;

					__0x7176.ActionEnd();
				}
			}
		}


		static string __0x7149( Mesh __0x7180 )
		{
			
			
			return "";
		}

		

		public static void MergeVerticesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.VertexCount != 0 )
				context.Enabled = true;
		}

		
		public static void MergeVertices( BuilderActionContext actionContext, bool moveToFirst )
		{
			void Execute( Mesh __0x7181, List<UndoSystem.Action> __0x7182, ref bool __0x7183 )
			{
				
				var __0x6818 = new BuilderMeshData();
				var __0x6819 = __0x7181.ExtractData();
				__0x6818.Load( __0x6819 );

				int __0x6820 = __0x7150( __0x6818, actionContext.Selection.Vertices, moveToFirst );
				actionContext.Selection.Vertices = new[] { __0x6820 };

				
				__0x6818.Save( __0x7181, actionContext.Selection, __0x7182, ref __0x7183 );

				
				
				
				

			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		static int __0x7150( BuilderMeshData __0x7184, int[] __0x7185, bool __0x7186 )
		{
			int __0x6821 = __0x7185[ 0 ];
			
			Vector3F __0x6822;
			{
				if( __0x7186 )
					__0x6822 = __0x7184.GetVertexPosition( __0x6821 );
				else
				{
					__0x6822 = Vector3F.Zero;
					foreach( var __0x7091 in __0x7185 )
						__0x6822 += __0x7184.GetVertexPosition( __0x7091 );
					__0x6822 /= __0x7185.Length;
				}
			}

			
			foreach( var __0x7092 in __0x7185 )
				__0x7184.MoveVertex( __0x7092, __0x6822 );

			
			for( int __0x6823 = 1; __0x6823 < __0x7185.Length; __0x6823++ )
				__0x7184.ReplaceVertexIndexForEdgesAndFaces( __0x7185[ __0x6823 ], __0x6821 );

			return __0x6821;
		}

		

		public static void DeleteFacesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		public static void DeleteFaces( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7187, List<UndoSystem.Action> __0x7188, ref bool __0x7189 )
			{
				var __0x6824 = actionContext.Selection.Faces;
				if( __0x6824.Length == 0 )
					return;
				string __0x6825 = __0x6824.Length > 1 ? "s" : "";
				if( EditorMessageBox.ShowQuestion( $"Delete selected face{__0x6825}?", EMessageBoxButtons.YesNo ) == EDialogResult.No )
					return;
				__0x7151( __0x7187, __0x6824, actionContext.Selection, __0x7188, ref __0x7189 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		static void __0x7151( Mesh __0x7190, int[] __0x7191, BuilderSelection __0x7192, List<UndoSystem.Action> __0x7193, ref bool __0x7194 )
		{
			if( __0x7191 == null || __0x7191.Length == 0 )
				return;

			var __0x6826 = new BuilderMeshData();
			var __0x6827 = __0x7190.ExtractData();
			__0x6826.Load( __0x6827 );

			
			for( int __0x6828 = 0; __0x6828 < __0x7191.Length; __0x6828++ )
				__0x6826.Faces[ __0x7191[ __0x6828 ] ] = null;

			__0x6826.Save( __0x7190, __0x7192, __0x7193, ref __0x7194 );
		}

		

		public static void MoveVertices( BuilderActionContext actionContext, int[] vertices, Vector3F[] newPositions )
		{
			void Execute( Mesh __0x7195, List<UndoSystem.Action> __0x7196, ref bool __0x7197 )
			{
				
				var __0x6829 = new BuilderMeshData();
				var __0x6830 = __0x7195.ExtractData();
				__0x6829.Load( __0x6830 );

				__0x6829.MoveVertices( vertices, newPositions );

				
				__0x6829.Save( __0x7195, selection: actionContext.Selection, __0x7196, ref __0x7197 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		
		#region SplitVertices

		const float __0x6831 = 15f;

		public static void SplitVerticesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.VertexCount != 0 )
				context.Enabled = true;
		}

		
		public static void SplitVertices( BuilderActionContext actionContext, bool splitOnlyOne, bool shiftSplitVertices )
		{
			void Execute( Mesh __0x7198, List<UndoSystem.Action> __0x7199, ref bool __0x7200 )
			{
				var __0x6832 = new BuilderMeshData();
				var __0x6833 = __0x7198.ExtractData();
				__0x6832.Load( __0x6833 );
				var __0x6834 = actionContext.Selection.Vertices;
				List<int>[] __0x6835;
				if( __0x7152( __0x6832, __0x6834 ) )
					__0x6835 = __0x7154( __0x6832, __0x6834, splitOnlyOne, shiftSplitVertices );
				else
					__0x6835 = __0x7153( __0x6832, __0x6834, splitOnlyOne, true );

				actionContext.Selection.ClearSelection();
				__0x6832.Save( __0x7198, actionContext.Selection, __0x7199, ref __0x7200 );
			}

			
			__0x7148( actionContext, __0x7149, Execute );
		}

		static bool __0x7152( BuilderMeshData __0x7201, int[] __0x7202 )
		{
			foreach( var __0x7093 in __0x7202 )
			{
				int __0x6836 = -1;
				for( int __0x6837 = 0; __0x6837 < __0x7201.Faces.Count; __0x6837++ )
				{
					var __0x6838 = __0x7201.Faces[ __0x6837 ];
					for( int __0x6839 = 0; __0x6839 < __0x6838.Triangles.Count; __0x6839++ )
					{
						if( __0x6838.Triangles[ __0x6839 ].Vertex == __0x7093 )
						{
							if( __0x6836 == -1 )
								__0x6836 = __0x6837;
							else
							{
								if( __0x6836 != __0x6837 )
									return true;
							}
						}
					}
				}
			}
			return false;
		}

		
		static List<int>[] __0x7153( BuilderMeshData __0x7203, int[] __0x7204, bool __0x7205, bool __0x7206 )
		{
			var __0x6840 = new List<int>[ __0x7204.Length ];

			if( __0x7204.Length == 0 )
				return new List<int>[ 0 ];

			for( int __0x6841 = 0; __0x6841 < __0x7204.Length; __0x6841++ )
			{
				var __0x6842 = BuilderCommonFunctions.GetTrianglesByVertex( __0x7203, __0x7204[ __0x6841 ] );
				if( 3 < __0x6842.Count )
				{
					__0x6840[ __0x6841 ] = new List<int>();
					

					int __0x6843 = __0x7205 ? 2 * 3 : __0x6842.Count;
					var __0x6844 = new Dictionary<(int lowVertex, int highVertex), int>();

					for( int __0x6845 = 0; __0x6845 < __0x6843; __0x6845 += 3 )
					{
						var __0x6846 = __0x6842[ __0x6845 ];

						var __0x6847 = new BuilderMeshData.Vertex( BuilderMeshData.CloneProperties( __0x7203.Vertices[ __0x6846.Vertex ].Properties ) );
						__0x7203.Vertices.Add( __0x6847 );
						__0x6846.Vertex = __0x7203.Vertices.Count - 1;
						__0x6840[ __0x6841 ].Add( __0x6846.Vertex );

						AddEdge( __0x6844, __0x6842[ __0x6845 ].Vertex, __0x6842[ __0x6845 + 1 ].Vertex );
						AddEdge( __0x6844, __0x6842[ __0x6845 ].Vertex, __0x6842[ __0x6845 + 2 ].Vertex );

						if( __0x7206 )
						{
							var __0x6848 = __0x6842[ __0x6845 + 1 ].RawVertex.Position - __0x6842[ __0x6845 ].RawVertex.Position;
							__0x6848 += __0x6842[ __0x6845 + 2 ].RawVertex.Position - __0x6842[ __0x6845 ].RawVertex.Position;
							__0x6848 /= 2 * __0x6831;
							
							__0x7203.MoveVertex( __0x6842, __0x6845, __0x6845, __0x6842[ __0x6845 ].RawVertex.Position + __0x6848 );
						}
					}
					foreach( var __0x7094 in __0x6844 )
						if( __0x7094.Value == 1 )
							__0x7203.AddEdge( __0x7094.Key.lowVertex, __0x7094.Key.highVertex );
				}
			}

			return __0x6840;
		}


		
		static List<int>[] __0x7154( BuilderMeshData __0x7207, int[] __0x7208, bool __0x7209, bool __0x7210 )
		{
			var __0x6849 = new List<int>[ __0x7208.Length ];

			if( __0x7208.Length == 0 )
				return new List<int>[ 0 ];

			for( int __0x6850 = 0; __0x6850 < __0x7208.Length; __0x6850++ )
			{
				__0x6849[ __0x6850 ] = new List<int>();
				

				var __0x6851 = __0x7155( __0x7207, __0x7208[ __0x6850 ] );
				if( 1 < __0x6851.Count )
				{
					int __0x6852 = __0x7209 ? 2 : __0x6851.Count;

					for( int __0x6853 = 0; __0x6853 < __0x6852; __0x6853++ )
					{
						var __0x6854 = __0x6851[ __0x6853 ];

						var __0x6855 = new BuilderMeshData.Vertex( BuilderMeshData.CloneProperties( __0x7207.Vertices[ __0x6854[ 0 ].Vertex ].Properties ) ); 
						__0x7207.Vertices.Add( __0x6855 );
						int __0x6856 = __0x7207.Vertices.Count - 1;
						__0x6849[ __0x6850 ].Add( __0x6856 );

						var __0x6857 = new Dictionary<(int lowVertex, int highVertex), int>();
						Vector3F __0x6858 = Vector3F.Zero;
						for( int __0x6859 = 0; __0x6859 < __0x6854.Count; __0x6859 += 3 )
						{
							__0x6854[ __0x6859 ].Vertex = __0x6856;
							AddEdge( __0x6857, __0x6854[ __0x6859 ].Vertex, __0x6854[ __0x6859 + 1 ].Vertex );
							AddEdge( __0x6857, __0x6854[ __0x6859 ].Vertex, __0x6854[ __0x6859 + 2 ].Vertex );
							if( __0x7210 )
							{
								__0x6858 += ( __0x6854[ __0x6859 + 1 ].RawVertex.Position - __0x6854[ __0x6859 ].RawVertex.Position );
								__0x6858 += ( __0x6854[ __0x6859 + 2 ].RawVertex.Position - __0x6854[ __0x6859 ].RawVertex.Position );
							}
						}

						if( __0x7210 )
						{
							__0x6858 /= 2 * ( __0x6854.Count / 3 ) * __0x6831;
							for( int __0x6860 = 0; __0x6860 < __0x6854.Count; __0x6860 += 3 ) 
								__0x7207.MoveVertex( __0x6854, __0x6860, __0x6860, __0x6854[ __0x6860 ].RawVertex.Position + __0x6858 );
						}

						foreach( var __0x7095 in __0x6857 )
							if( __0x7095.Value == 1 )
								__0x7207.AddEdge( __0x7095.Key.lowVertex, __0x7095.Key.highVertex );
					}
				}
			}

			return __0x6849;
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
		static List<List<BuilderMeshData.FaceVertex>> __0x7155( BuilderMeshData __0x7211, int __0x7212 )
		{
			var __0x6861 = new List<List<BuilderMeshData.FaceVertex>>();
			for( int __0x6862 = 0; __0x6862 < __0x7211.Faces.Count; __0x6862++ )
			{
				var __0x6863 = __0x7211.Faces[ __0x6862 ];
				List<BuilderMeshData.FaceVertex> __0x6864 = null;
				for( int __0x6865 = 0; __0x6865 < __0x6863.Triangles.Count; __0x6865++ )
				{
					if( __0x6863.Triangles[ __0x6865 ].Vertex == __0x7212 )
					{
						if( __0x6864 == null )
							__0x6864 = new List<BuilderMeshData.FaceVertex>();
						__0x6864.Add( __0x6863.Triangles[ __0x6865 ] );

						int __0x6866 = __0x6865 - __0x6865 % 3;
						if( __0x6865 == __0x6866 )
						{
							__0x6864.Add( __0x6863.Triangles[ __0x6866 + 1 ] );
							__0x6864.Add( __0x6863.Triangles[ __0x6866 + 2 ] );
						}
						else if( __0x6865 == __0x6866 + 1 )
						{
							__0x6864.Add( __0x6863.Triangles[ __0x6866 + 2 ] );
							__0x6864.Add( __0x6863.Triangles[ __0x6866 ] );
						}
						else if( __0x6865 == __0x6866 + 2 )
						{
							__0x6864.Add( __0x6863.Triangles[ __0x6866 ] );
							__0x6864.Add( __0x6863.Triangles[ __0x6866 + 1 ] );
						}
					}
				}
				if( __0x6864 != null )
					__0x6861.Add( __0x6864 );
			}
			return __0x6861;
		}

		#endregion

		

		public static void FlipNormalsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length == 1 ||
				 actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		
		public static void FlipNormals( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7213, List<UndoSystem.Action> __0x7214, ref bool __0x7215 )
			{
				var __0x6867 = __0x7213.ExtractData();
				var __0x6868 = new BuilderMeshData();
				__0x6868.Load( __0x6867 );

				if( actionContext.SelectionMode == BuilderSelectionMode.Object )
					for( int __0x6869 = 0; __0x6869 < __0x6868.Faces.Count; __0x6869++ )
						__0x7156( __0x6868, __0x6869 );
				else if( actionContext.SelectionMode == BuilderSelectionMode.Face )
					foreach( var __0x7096 in actionContext.Selection.Faces )
						__0x7156( __0x6868, __0x7096 );

				__0x6868.Save( __0x7213, actionContext.Selection, __0x7214, ref __0x7215 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		static void __0x7156( BuilderMeshData __0x7216, int __0x7217 )
		{
			var __0x6870 = __0x7216.Faces[ __0x7217 ];
			for( int __0x6871 = 0; __0x6871 < __0x6870.Triangles.Count; __0x6871 += 3 )
			{
				var __0x6872 = __0x6870.Triangles[ __0x6871 ];
				__0x6870.Triangles[ __0x6871 ] = __0x6870.Triangles[ __0x6871 + 1 ];
				__0x6870.Triangles[ __0x6871 + 1 ] = __0x6872;

				__0x6870.Triangles[ __0x6871 ].RawVertex.Normal = -__0x6870.Triangles[ __0x6871 ].RawVertex.Normal;
				__0x6870.Triangles[ __0x6871 + 1 ].RawVertex.Normal = -__0x6870.Triangles[ __0x6871 + 1 ].RawVertex.Normal;
				__0x6870.Triangles[ __0x6871 + 2 ].RawVertex.Normal = -__0x6870.Triangles[ __0x6871 + 2 ].RawVertex.Normal;
			}
		}


		

		#region BridgeEdges  

		public static void BridgeEdgesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			var __0x6873 = actionContext.Selection.Edges;
			if( __0x6873.Length == 2 )
			{
				var __0x6874 = actionContext.BuilderWorkareaMode.meshToEditData; 
				var __0x6875 = FindTriangles( __0x6874, __0x6874.Edges[ __0x6873[ 0 ] ].Vertex1, __0x6874.Edges[ __0x6873[ 0 ] ].Vertex2 );
				var __0x6876 = FindTriangles( __0x6874, __0x6874.Edges[ __0x6873[ 1 ] ].Vertex1, __0x6874.Edges[ __0x6873[ 1 ] ].Vertex2 );
				if( __0x6875.Count == 1 && __0x6876.Count == 1 )
					context.Enabled = true;
			}
		}

		
		public static void BridgeEdges( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7218, List<UndoSystem.Action> __0x7219, ref bool __0x7220 )
			{
				var __0x6877 = actionContext.Selection.Edges;
				if( __0x6877.Length == 2 )
				{
					var __0x6878 = new BuilderMeshData();
					var __0x6879 = __0x7218.ExtractData();
					__0x6878.Load( __0x6879 );

					__0x7157( __0x6878, __0x6877[ 0 ], __0x6877[ 1 ] );
					__0x6878.Save( __0x7218, actionContext.Selection, __0x7219, ref __0x7220 );
				}
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		
		
		
		
		
		

		static void __0x7157( BuilderMeshData __0x7221, int __0x7222, int __0x7223 )
		{
			int __0x6880 = __0x7221.Edges[ __0x7222 ].Vertex1;
			int __0x6881 = __0x7221.Edges[ __0x7222 ].Vertex2;
			int __0x6882 = __0x7221.Edges[ __0x7223 ].Vertex1;
			int __0x6883 = __0x7221.Edges[ __0x7223 ].Vertex2;

			bool __0x6884 = false;
			{
				int __0x6885 = -1;
				int __0x6886 = -1;
				int __0x6887 = -1;

				if( __0x6880 == __0x6882 )
				{
					__0x6885 = __0x6880;
					__0x6886 = __0x6881;
					__0x6887 = __0x6883;
				}
				else if( __0x6880 == __0x6883 )
				{
					__0x6885 = __0x6880;
					__0x6886 = __0x6881;
					__0x6887 = __0x6882;
				}
				else if( __0x6881 == __0x6882 )
				{
					__0x6885 = __0x6881;
					__0x6886 = __0x6880;
					__0x6887 = __0x6883;
				}
				else if( __0x6881 == __0x6883 )
				{
					__0x6885 = __0x6881;
					__0x6886 = __0x6880;
					__0x6887 = __0x6882;
				}

				if( __0x6885 != -1 ) 
				{
					__0x6884 = true;

					__0x7159( __0x7221, __0x6886, __0x6885, __0x6887 );
				}
			}

			if( !__0x6884 )
			{
				__0x7158( __0x7221, __0x6880, __0x6881, __0x6882, __0x6883 );
			}
		}

		static void __0x7158( BuilderMeshData __0x7224, int __0x7225, int __0x7226, int __0x7227, int __0x7228 )
		{
			var __0x6888 = FindTriangles( __0x7224, __0x7225, __0x7226 );
			var __0x6889 = FindTriangles( __0x7224, __0x7227, __0x7228 );
			if( __0x6888.Count != 1 || __0x6889.Count != 1 )
			{
				
				
				return;
			}

			var __0x6890 = __0x6888[ 0 ];
			var __0x6891 = __0x6889[ 0 ];

			int __0x6892 = __0x6890.fv0.RawGeometry; 

			if( __0x6890.reversed )
				__0x7160( ref __0x7225, ref __0x7226 );
			if( __0x6891.reversed )
				__0x7160( ref __0x7227, ref __0x7228 );

			var __0x6893 = __0x7224.GetVertexPosition( __0x7225 );
			var __0x6894 = __0x7224.GetVertexPosition( __0x7226 );
			var __0x6895 = __0x7224.GetVertexPosition( __0x7227 );
			var __0x6896 = __0x7224.GetVertexPosition( __0x7228 );

			
			{
				
				var __0x6897 = __0x7224.CreateFaceVertex( __0x7226, __0x6892 );
				__0x6897.RawVertex.Position = __0x6894;
				

				var __0x6898 = __0x7224.CreateFaceVertex( __0x7225, __0x6892 );
				__0x6898.RawVertex.Position = __0x6893;

				var __0x6899 = __0x7224.CreateFaceVertex( __0x7227, __0x6892 );
				__0x6899.RawVertex.Position = __0x6895;

				BuilderCommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x7224, __0x6897, __0x6898, __0x6899 );
				__0x7224.Faces.Add( new BuilderMeshData.Face(
					new List<BuilderMeshData.FaceVertex>() { __0x6897, __0x6898, __0x6899 },
					null,
					0 
				) );
				__0x7224.AddEdge( __0x7225, __0x7227 );
				__0x7224.AddEdge( __0x7226, __0x7227 );
			}
			{
				
				var __0x6900 = __0x7224.CreateFaceVertex( __0x7228, __0x6892 );
				__0x6900.RawVertex.Position = __0x6896;

				var __0x6901 = __0x7224.CreateFaceVertex( __0x7227, __0x6892 );
				__0x6901.RawVertex.Position = __0x6895;

				var __0x6902 = __0x7224.CreateFaceVertex( __0x7225, __0x6892 );
				__0x6902.RawVertex.Position = __0x6893;

				BuilderCommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x7224, __0x6900, __0x6901, __0x6902 );
				__0x7224.Faces.Add( new BuilderMeshData.Face(
					new List<BuilderMeshData.FaceVertex>() { __0x6900, __0x6901, __0x6902 },
					null,
					0 
				) );
				__0x7224.AddEdge( __0x7225, __0x7228 );
			}

		}

		static void __0x7159( BuilderMeshData __0x7229, int __0x7230, int __0x7231, int __0x7232 )
		{
			

			var __0x6903 = FindTriangles( __0x7229, __0x7230, __0x7231 );
			var __0x6904 = FindTriangles( __0x7229, __0x7231, __0x7232 );
			if( __0x6903.Count != 1 || __0x6904.Count != 1 )
			{
				
				
				return;
			}

			var __0x6905 = __0x6903[ 0 ];
			var __0x6906 = __0x6904[ 0 ];

			if( __0x6905.reversed != __0x6906.reversed )
			{
				
				
				return;
			}
			if( __0x6905.reversed )
			{
				__0x7160( ref __0x6905, ref __0x6906 );
				__0x7160( ref __0x7230, ref __0x7232 );
				
			}

			int __0x6907 = __0x6905.fv0.RawGeometry; 

			var __0x6908 = __0x7229.CreateFaceVertex( __0x7230, __0x6907 );
			__0x6908.RawVertex.Position = __0x7229.GetVertexPosition( __0x7230 );

			var __0x6909 = __0x7229.CreateFaceVertex( __0x7232, __0x6907 );
			__0x6909.RawVertex.Position = __0x7229.GetVertexPosition( __0x7232 );

			var __0x6910 = __0x7229.CreateFaceVertex( __0x7231, __0x6907 );
			__0x6910.RawVertex.Position = __0x7229.GetVertexPosition( __0x7231 );

			BuilderCommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x7229, __0x6908, __0x6909, __0x6910 );

			__0x7229.Faces.Add( new BuilderMeshData.Face(
				new List<BuilderMeshData.FaceVertex>() { __0x6908, __0x6909, __0x6910 },
				null,
				0 
			) );
			__0x7229.AddEdge( __0x7230, __0x7232 );
		}

		static void __0x7160<T>( ref T __0x7233, ref T __0x7234 )
		{
			T __0x6911 = __0x7233;
			__0x7233 = __0x7234;
			__0x7234 = __0x6911;
		}

		
		
		internal static List<(BuilderMeshData.FaceVertex fv0, BuilderMeshData.FaceVertex fv1, BuilderMeshData.FaceVertex fv2, bool reversed)> FindTriangles( BuilderMeshData data, int vertex1, int vertex2 )
		{
			var __0x6912 = new List<(BuilderMeshData.FaceVertex fv1, BuilderMeshData.FaceVertex fv2, BuilderMeshData.FaceVertex fv3, bool reversed)>();
			for( int __0x6913 = 0; __0x6913 < data.Faces.Count; __0x6913++ )
			{
				var __0x6914 = data.Faces[ __0x6913 ].Triangles;
				for( int __0x6915 = 0; __0x6915 < __0x6914.Count; __0x6915 += 3 )
				{
					var __0x6916 = __0x6914[ __0x6915 ];
					var __0x6917 = __0x6914[ __0x6915 + 1 ];
					var __0x6918 = __0x6914[ __0x6915 + 2 ];

					if( __0x6916.Vertex == vertex1 && __0x6917.Vertex == vertex2 )
						__0x6912.Add( (__0x6916, __0x6917, __0x6918, false) );
					else if( __0x6917.Vertex == vertex1 && __0x6918.Vertex == vertex2 )
						__0x6912.Add( (__0x6917, __0x6918, __0x6916, false) );
					else if( __0x6918.Vertex == vertex1 && __0x6916.Vertex == vertex2 )
						__0x6912.Add( (__0x6918, __0x6916, __0x6917, false) );

					if( __0x6916.Vertex == vertex2 && __0x6917.Vertex == vertex1 )
						__0x6912.Add( (__0x6916, __0x6917, __0x6918, true) );
					else if( __0x6917.Vertex == vertex2 && __0x6918.Vertex == vertex1 )
						__0x6912.Add( (__0x6917, __0x6918, __0x6916, true) );
					else if( __0x6918.Vertex == vertex2 && __0x6916.Vertex == vertex1 )
						__0x6912.Add( (__0x6918, __0x6916, __0x6917, true) );
				}
			}
			return __0x6912;
		}

		#endregion

		

		#region ConformNormals  

		public static void ConformNormalsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( 
				( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length == 1 ||
				  0 < actionContext.Selection.FaceCount ) )
				context.Enabled = true;
		}

		

		
		public static void ConformNormals( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7235, List<UndoSystem.Action> __0x7236, ref bool __0x7237 )
			{
				var __0x6919 = new BuilderMeshData();
				var __0x6920 = __0x7235.ExtractData();
				__0x6919.Load( __0x6920 );

				ConformNormals( __0x6919.Faces );
				__0x7162( __0x6919 );

				__0x6919.Save( __0x7235, actionContext.Selection, __0x7236, ref __0x7237 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		

		
		
		
		
		
		
		
		
		
		
		
		internal static void ConformNormals( List<BuilderMeshData.Face> faces )
		{
			

			
			

			
			
			var __0x6921 = new Dictionary<(int vertexLow, int vertexHigh), List<(int faceIndex, int triangleIndex, bool reversed)>>();

			void AddTriangle( int __0x7238, int __0x7239, int __0x7240, int __0x7241 ) 
			{
				bool __0x6922 = false;
				if( __0x7241 < __0x7240 )
				{
					__0x7160( ref __0x7240, ref __0x7241 );
					__0x6922 = true;
				}

				if( !__0x6921.TryGetValue( (__0x7240, __0x7241), out var list ) )
				{
					list = new List<(int faceIndex, int triangleIndex, bool reversed)>();
					__0x6921[ (__0x7240, __0x7241) ] = list;
				}
				list.Add( (__0x7238, __0x7239, __0x6922) );
			}

			

			for( int __0x6923 = 0; __0x6923 < faces.Count; __0x6923++ )
			{
				var __0x6924 = faces[ __0x6923 ];

				for( int __0x6925 = 0; __0x6925 < __0x6924.Triangles.Count; __0x6925 += 3 )
				{
					int __0x6926 = __0x6925 / 3;
					AddTriangle( __0x6923, __0x6926, __0x6924.Triangles[ __0x6925 ].Vertex, __0x6924.Triangles[ __0x6925 + 1 ].Vertex );
					AddTriangle( __0x6923, __0x6926, __0x6924.Triangles[ __0x6925 + 1 ].Vertex, __0x6924.Triangles[ __0x6925 + 2 ].Vertex );
					AddTriangle( __0x6923, __0x6926, __0x6924.Triangles[ __0x6925 + 2 ].Vertex, __0x6924.Triangles[ __0x6925 ].Vertex );
				}
			}

			
			ConformantMark[][] __0x6927 = new ConformantMark[ faces.Count ][];
			for( int __0x6928 = 0; __0x6928 < faces.Count; __0x6928++ )
				__0x6927[ __0x6928 ] = new ConformantMark[ faces[ __0x6928 ].Triangles.Count / 3 ];

			

			var __0x6929 = new Stack<(int faceIndex, int triangleIndex)>(); 

			
			
			while( true )
			{
				
				(int faceIndex, int triangleIndex)? __0x6930 = null;
				for( int __0x6931 = 0; __0x6931 < __0x6927.Length; __0x6931++ )
				{
					for( int __0x6932 = 0; __0x6932 < __0x6927[ __0x6931 ].Length; __0x6932++ )
					{
						if( __0x6927[ __0x6931 ][ __0x6932 ] == ConformantMark.NotProcessed )
						{
							__0x6930 = (__0x6931, __0x6932);
							break;
						}
					}
					if( __0x6930 != null )
						break;
				}

				if( __0x6930 == null )
					break;
				__0x6927[ __0x6930.Value.faceIndex ][ __0x6930.Value.triangleIndex ] = ConformantMark.Conformant; 
				__0x6929.Push( (__0x6930.Value.faceIndex, __0x6930.Value.triangleIndex) ); 
				__0x7161( faces, __0x6921, __0x6927, __0x6929 );

				
			}
		}

		enum ConformantMark { NotProcessed = 0, Conformant, NonConformant, Done }

		static void __0x7161(
			List<BuilderMeshData.Face> __0x7242,
			Dictionary<(int vertexLow, int vertexHigh), List<(int faceIndex, int triangleIndex, bool reversed)>> __0x7243,
			ConformantMark[][] __0x7244,
			Stack<(int faceIndex, int triangleIndex)> __0x7245 )
		{

			while( __0x7245.Count != 0 )
			{
				var __0x6933 = __0x7245.Pop();
				ConformantMark __0x6934 = __0x7244[ __0x6933.faceIndex ][ __0x6933.triangleIndex ];
				bool __0x6935;
				if( __0x6934 == ConformantMark.Conformant )
					__0x6935 = true;
				else if( __0x6934 == ConformantMark.NonConformant )
					__0x6935 = false;
				else
					continue;

				var __0x6936 = __0x7242[ __0x6933.faceIndex ].Triangles;
				int __0x6937 = __0x6933.triangleIndex * 3;

				ProcEdge( __0x6936[ __0x6937 ].Vertex, __0x6936[ __0x6937 + 1 ].Vertex, __0x6935 );
				ProcEdge( __0x6936[ __0x6937 + 1 ].Vertex, __0x6936[ __0x6937 + 2 ].Vertex, __0x6935 );
				ProcEdge( __0x6936[ __0x6937 + 2 ].Vertex, __0x6936[ __0x6937 ].Vertex, __0x6935 );
			}

			int __0x6938 = 0;
			int __0x6939 = 0;
			foreach( var __0x7097 in __0x7244 )
			{
				foreach( var __0x7098 in __0x7097 )
				{
					if( __0x7098 == ConformantMark.Conformant )
						__0x6938++;
					else if( __0x7098 == ConformantMark.NonConformant )
						__0x6939++;
				}
			}

			bool __0x6940 = __0x6939 < __0x6938;
			for( int __0x6941 = 0; __0x6941 < __0x7242.Count; __0x6941++ )
			{
				var __0x6942 = __0x7242[ __0x6941 ];
				int __0x6943 = __0x6942.Triangles.Count / 3;
				for( int __0x6944 = 0; __0x6944 < __0x6943; __0x6944++ )
				{
					if( __0x6940 && __0x7244[ __0x6941 ][ __0x6944 ] == ConformantMark.NonConformant ||
						!__0x6940 && __0x7244[ __0x6941 ][ __0x6944 ] == ConformantMark.Conformant )
					{
						int __0x6945 = __0x6944 * 3;
						var __0x6946 = __0x6942.Triangles[ __0x6945 ];
						__0x6942.Triangles[ __0x6945 ] = __0x6942.Triangles[ __0x6945 + 1 ];
						__0x6942.Triangles[ __0x6945 + 1 ] = __0x6946;

						__0x6942.Triangles[ __0x6945 ].RawVertex.Normal = -__0x6942.Triangles[ __0x6945 ].RawVertex.Normal;
						__0x6942.Triangles[ __0x6945 + 1 ].RawVertex.Normal = -__0x6942.Triangles[ __0x6945 + 1 ].RawVertex.Normal;
						__0x6942.Triangles[ __0x6945 + 2 ].RawVertex.Normal = -__0x6942.Triangles[ __0x6945 + 2 ].RawVertex.Normal;
					}
				}
			}

			foreach( var __0x7099 in __0x7244 )
			{
				for( int __0x6947 = 0; __0x6947 < __0x7099.Length; __0x6947++ )
				{
					if( __0x7099[ __0x6947 ] == ConformantMark.Conformant || __0x7099[ __0x6947 ] == ConformantMark.NonConformant )
						__0x7099[ __0x6947 ] = ConformantMark.Done;
				}
			}

			

			void ProcEdge( int __0x7246, int __0x7247, bool __0x7248 )
			{
				bool __0x6948 = false;
				if( __0x7247 < __0x7246 )
				{
					__0x7160( ref __0x7246, ref __0x7247 );
					__0x6948 = true;
				}

				var __0x6949 = __0x7243[ (__0x7246, __0x7247) ];
				foreach( var __0x7100 in __0x6949 )
				{
					if( __0x7244[ __0x7100.faceIndex ][ __0x7100.triangleIndex ] == ConformantMark.NotProcessed ) 
					{
						bool __0x6950 = __0x7100.reversed != __0x6948; 
						bool __0x6951 = __0x6950 ? __0x7248 : !__0x7248;
						__0x7244[ __0x7100.faceIndex ][ __0x7100.triangleIndex ] = __0x6951 ? ConformantMark.Conformant : ConformantMark.NonConformant;
						__0x7245.Push( (__0x7100.faceIndex, __0x7100.triangleIndex) );
					}
				}
			}
		}

		
		static void __0x7162( BuilderMeshData __0x7249 )
		{
			foreach( var __0x7101 in __0x7249.Faces )
			{
				for( int __0x6952 = 0; __0x6952 < __0x7101.Triangles.Count; __0x6952 += 3 )
				{
					var __0x6953 = __0x7101.Triangles[ __0x6952 ].RawVertex;
					var __0x6954 = __0x7101.Triangles[ __0x6952 + 1 ].RawVertex;
					var __0x6955 = __0x7101.Triangles[ __0x6952 + 2 ].RawVertex;

					var __0x6956 = BuilderCommonFunctions.CalculateNormal( __0x6953.Position, __0x6954.Position, __0x6955.Position );
					if( Vector3F.Dot( __0x6956, __0x6953.Normal ) < 0 || Vector3F.Dot( __0x6956, __0x6954.Normal ) < 0 || Vector3F.Dot( __0x6956, __0x6955.Normal ) < 0 )
					{
						__0x6953.Normal = __0x6956;
						__0x6954.Normal = __0x6956;
						__0x6955.Normal = __0x6956;
					}
				}
			}
		}

		#endregion

		

		public static void FlatNormalsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length == 1 || actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		
		public static void FlatNormals( BuilderActionContext actionContext )
		{

			Mesh __0x6957 = null;
			int[] __0x6958 = null;
			if( actionContext.SelectionMode == BuilderSelectionMode.Object )
				__0x6957 = actionContext.GetSelectedMesh().mesh;
			else
				__0x6958 = actionContext.Selection.Faces;


			void Execute( Mesh __0x7250, List<UndoSystem.Action> __0x7251, ref bool __0x7252 )
			{
				var __0x6959 = new BuilderMeshData();
				var __0x6960 = __0x7250.ExtractData();
				__0x6959.Load( __0x6960 );

				if( __0x6957 != null )
					foreach( var __0x7102 in __0x6959.Faces )
						CalculateNormals( __0x7102.Triangles );
				else if( __0x6958 != null )
					foreach( var __0x7103 in __0x6958 )
						CalculateNormals( __0x6959.Faces[ __0x7103 ].Triangles );

				__0x6959.Save( __0x7250, actionContext.Selection, __0x7251, ref __0x7252 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		internal static void CalculateNormals( List<BuilderMeshData.FaceVertex> triangles )
		{
			for( int __0x6961 = 0; __0x6961 < triangles.Count; __0x6961 += 3 )
				BuilderCommonFunctions.CalculateNormal( triangles[ __0x6961 ], triangles[ __0x6961 + 1 ], triangles[ __0x6961 + 2 ] );
		}

		

		public static void SmoothNormalsGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length == 1 || 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void SmoothNormals( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7253, List<UndoSystem.Action> __0x7254, ref bool __0x7255 )
			{
				var __0x6962 = new BuilderMeshData();
				var __0x6963 = __0x7253.ExtractData();
				__0x6962.Load( __0x6963 );

				int[] __0x6964 = actionContext.SelectionMode == BuilderSelectionMode.Object ?
					Enumerable.Range( 0, __0x6962.Faces.Count ).ToArray() :
					actionContext.Selection.Faces;

				Vector3F[] __0x6965 = new Vector3F[ __0x6962.Vertices.Count ];

				
				foreach( var __0x7104 in __0x6964 )
					CalculateNormals( __0x6962.Faces[ __0x7104 ].Triangles );

				
				foreach( var __0x7105 in __0x6962.Faces )
					foreach( var __0x7106 in __0x7105.Triangles )
						__0x6965[ __0x7106.Vertex ] += __0x7106.RawVertex.Normal;

				for( int __0x6966 = 0; __0x6966 < __0x6965.Length; __0x6966++ )
					__0x6965[ __0x6966 ] = __0x6965[ __0x6966 ].GetNormalize();

				foreach( var __0x7107 in __0x6964 )
					foreach( var __0x7108 in __0x6962.Faces[ __0x7107 ].Triangles )
						__0x7108.RawVertex.Normal = __0x6965[ __0x7108.Vertex ];

				__0x6962.Save( __0x7253, actionContext.Selection, __0x7254, ref __0x7255 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		

		#region MergeFaces

		public static void MergeFacesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount > 1 )
				context.Enabled = true;
		}

		

		
		
		public static void MergeFaces( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7256, List<UndoSystem.Action> __0x7257, ref bool __0x7258 )
			{
				var __0x6967 = actionContext.Selection.Faces;
				if( __0x6967.Length < 2 )
					return;
				var __0x6968 = new BuilderMeshData();
				var __0x6969 = __0x7256.ExtractData();
				__0x6968.Load( __0x6969 );

				int __0x6970 = __0x7163( __0x6968, __0x6967 );
				actionContext.Selection.Faces = new[] { __0x6970 };

				__0x6968.Save( __0x7256, actionContext.Selection, __0x7257, ref __0x7258 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		static int __0x7163( BuilderMeshData __0x7259, int[] __0x7260 )
		{
			int __0x6971 = __0x7260[ 0 ];
			var __0x6972 = __0x7259.Faces[ __0x6971 ];
			for( int __0x6973 = 1; __0x6973 < __0x7260.Length; __0x6973++ )
			{
				__0x6972.Triangles.AddRange( __0x7259.Faces[ __0x7260[ __0x6973 ] ].Triangles );
				
				
				__0x7259.Faces[ __0x7260[ __0x6973 ] ] = null;
			}

			
			var __0x6974 = GetEdgesCountDictionary( __0x6972.Triangles );

			for( int __0x6975 = 0; __0x6975 < __0x7259.Edges.Count; __0x6975++ )
			{
				var __0x6976 = __0x7259.Edges[ __0x6975 ];
				if( __0x6974.TryGetValue( __0x6976.Vertex1 < __0x6976.Vertex2 ? (__0x6976.Vertex1, __0x6976.Vertex2) : (__0x6976.Vertex2, __0x6976.Vertex1), out var foundEdgeCount ) && 1 < foundEdgeCount )
					__0x7259.Edges[ __0x6975 ] = null;
			}

			return __0x6971;
		}

		internal static Dictionary<(int lowVertex, int highVertex), int> GetEdgesCountDictionary( List<BuilderMeshData.FaceVertex> fVertices )
		{
			var __0x6977 = new Dictionary<(int lowVertex, int highVertex), int>();
			for( int __0x6978 = 0; __0x6978 < fVertices.Count; __0x6978 += 3 )
			{
				AddEdge( __0x6977, fVertices[ __0x6978 ].Vertex, fVertices[ __0x6978 + 1 ].Vertex );
				AddEdge( __0x6977, fVertices[ __0x6978 + 1 ].Vertex, fVertices[ __0x6978 + 2 ].Vertex );
				AddEdge( __0x6977, fVertices[ __0x6978 + 2 ].Vertex, fVertices[ __0x6978 ].Vertex );
			}
			return __0x6977;
		}

		internal static void AddEdge( Dictionary<(int lowVertex, int highVertex), int> edgesOrderedCount, int vertex1, int vertex2 )
		{
			var __0x6979 = BuilderCommonFunctions.OrderVertices( vertex1, vertex2 );
			if( edgesOrderedCount.TryGetValue( __0x6979, out var count ) )
				count++;
			else
				count = 1;
			edgesOrderedCount[ __0x6979 ] = count;
		}

		#endregion

		

		public static void TriangulateFacesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		
		public static void TriangulateFaces( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7261, List<UndoSystem.Action> __0x7262, ref bool __0x7263 )
			{
				var __0x6980 = actionContext.Selection.Faces;
				if( __0x6980.Length == 0 )
					return;
				var __0x6981 = new BuilderMeshData();
				var __0x6982 = __0x7261.ExtractData();
				__0x6981.Load( __0x6982 );
				actionContext.Selection.Faces = __0x7164( __0x6981, __0x6980 ).ToArray();
				__0x6981.Save( __0x7261, actionContext.Selection, __0x7262, ref __0x7263 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		static List<int> __0x7164( BuilderMeshData __0x7264, int[] __0x7265 )
		{
			var __0x6983 = new List<int>();
			foreach( var __0x7109 in __0x7265 )
			{
				var __0x6984 = __0x7264.Faces[ __0x7109 ];
				__0x7264.Faces[ __0x7109 ] = null;

				for( int __0x6985 = 0; __0x6985 < __0x6984.Triangles.Count; __0x6985 += 3 )
				{
					var __0x6986 = new List<BuilderMeshData.FaceVertex>( 3 );
					__0x6986.Add( __0x6984.Triangles[ __0x6985 ] );
					__0x6986.Add( __0x6984.Triangles[ __0x6985 + 1 ] );
					__0x6986.Add( __0x6984.Triangles[ __0x6985 + 2 ] );

					__0x7264.Edges.Add( new BuilderMeshData.Edge( __0x6986[ 0 ].Vertex, __0x6986[ 1 ].Vertex ) );
					__0x7264.Edges.Add( new BuilderMeshData.Edge( __0x6986[ 1 ].Vertex, __0x6986[ 2 ].Vertex ) );
					__0x7264.Edges.Add( new BuilderMeshData.Edge( __0x6986[ 2 ].Vertex, __0x6986[ 0 ].Vertex ) );

					__0x7264.Faces.Add( new BuilderMeshData.Face(
						__0x6986,
						null, 
						__0x6984.SmoothingGroup 
						) );
					__0x6983.Add( __0x7264.Faces.Count - 1 );
				}
			}

			return __0x6983;
		}

		

		#region DetachFaces

		public static void DetachFacesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext, bool toMeshInSpace )
		{
			if( actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		static (MeshInSpace newMeshInSpace, int[] newFaces) __0x7165( bool __0x7266, bool __0x7267, BuilderWorkareaMode __0x7268, Mesh __0x7269, int[] __0x7270, BuilderSelection __0x7271, List<UndoSystem.Action> __0x7272, ref bool __0x7273 )
		{
			var __0x6987 = new BuilderMeshData();
			var __0x6988 = __0x7269.ExtractData();
			__0x6987.Load( __0x6988 );

			(MeshInSpace newMeshInSpace, int[] newFaces) __0x6989 = (null, null);

			Mesh __0x6990 = null;
			MeshGeometry __0x6991;
			BuilderMeshData __0x6992 = null;
			int __0x6993;
			if( __0x7266 )
			{
				var __0x6994 = __0x7269.Parent?.Parent;
				if( __0x6994 == null )
				{
					return __0x6989; 
				}

				var __0x6995 = __0x6994.CreateComponent<MeshInSpace>();
				__0x6995.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6995 );
				__0x6995.Transform = ( (MeshInSpace)__0x7269.Parent ).Transform;

				__0x6990 = __0x6995.CreateComponent<Mesh>();
				__0x6990.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6990 );
				__0x6995.Mesh = ReferenceUtility.MakeReference<Mesh>( null, ReferenceUtility.CalculateRootReference( __0x6990 ) );

				__0x6991 = __0x6990.CreateComponent<MeshGeometry>();
				__0x6991.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6991 );

				if( !__0x7273 )
					__0x7272.Add( new UndoActionComponentCreateDelete( __0x7268.DocumentWindow.Document, new[] { __0x6995 }, true ) );
				__0x6992 = new BuilderMeshData();

				__0x6989.newMeshInSpace = __0x6995;
				__0x6989.newFaces = Enumerable.Range( 0, __0x7270.Length ).ToArray();
				__0x6993 = 0;
			}
			else
			{
				__0x6991 = __0x7269.CreateComponent<MeshGeometry>();
				__0x6991.Name = BuilderCommonFunctions.GetUniqueFriendlyName( __0x6991 );
				if( !__0x7273 )
					__0x7272.Add( new UndoActionComponentCreateDelete( __0x7268.DocumentWindow.Document, new[] { __0x6991 }, true ) );
				__0x6993 = __0x6988.MeshGeometries.Length;
			}

			if( __0x7267 )
				__0x7167( __0x6987, __0x7270 );

			
			
			if( !__0x7266 && __0x7267 )
			{
				
				var __0x6996 = new Vector3F( 0, 0, 0.2f );

				foreach( var __0x7110 in __0x7270 )
					foreach( var __0x7111 in __0x6987.Faces[ __0x7110 ].Triangles )
						__0x7111.RawVertex.Position += __0x6996;
			}

			var __0x6997 = __0x7166( __0x6987, __0x7270 );

			var __0x6998 = __0x6988.MeshGeometries[ __0x6997[ 0 ] ];
			var __0x6999 = (VertexElement[])__0x6998.VertexStructure.Clone();

			__0x6991.VertexStructure = __0x6999;
			__0x6991.Material = __0x6998.Material;

			if( !BuilderCommonFunctions.IsSameVertexStructure( __0x6988, __0x6997 ) )
			{
				var __0x7000 = new BuilderMeshData.MeshGeometryFormat( __0x6999 );
				foreach( var __0x7112 in __0x7270 )
					foreach( var __0x7113 in __0x6987.Faces[ __0x7112 ].Triangles )
						__0x7113.RawVertex = BuilderMeshData.ConvertRawVertex( __0x7113.RawVertex, __0x7000 );
			}

			foreach( var __0x7114 in __0x7270 )
				foreach( var __0x7115 in __0x6987.Faces[ __0x7114 ].Triangles )
					__0x7115.RawGeometry = __0x6993;

			if( __0x7266 )
			{
				__0x7271.Faces = null; 
				__0x6992.Faces = new List<BuilderMeshData.Face>();
				foreach( var __0x7116 in __0x7270 )
				{
					__0x6992.Faces.Add( __0x6987.Faces[ __0x7116 ] );
					__0x6987.Faces[ __0x7116 ] = null;
				}
				__0x6992.Vertices = new List<BuilderMeshData.Vertex>( __0x6987.Vertices );
				__0x6992.Edges = new List<BuilderMeshData.Edge>( __0x6987.Edges ); 
																					  
				var __0x7001 = new BuilderSelection() { SelectionMode = BuilderSelectionMode.Face, Faces = __0x6989.newFaces };
				__0x6992.Save( __0x6990, __0x7001, __0x7272, ref __0x7273 );
				__0x6989.newFaces = __0x7001.Faces;
			}

			if( __0x7266 )
				__0x6987.Save( __0x7269, __0x7271, __0x7272, ref __0x7273 );
			else
				__0x6987.Save( __0x7269, __0x7271, __0x7272, ref __0x7273 );

			
			if( !__0x7266 && __0x7267 )
				__0x6989.newFaces = new int[ 0 ];

			return __0x6989;
		}

		
		
		
		
		public static void DetachFaces( BuilderActionContext actionContext, bool toMeshInSpace, bool splitVertices )
		{
			(MeshInSpace newMeshInSpace, int[] faces) __0x7002 = (null, null);

			void Execute( Mesh __0x7274, List<UndoSystem.Action> __0x7275, ref bool __0x7276 )
			{
				var __0x7003 = actionContext.Selection.Faces;
				if( __0x7003.Length == 0 )
					return;

				__0x7002 = __0x7165( toMeshInSpace, splitVertices, actionContext.BuilderWorkareaMode, __0x7274, __0x7003, actionContext.Selection, __0x7275, ref __0x7276 );
			}

			__0x7148( actionContext, __0x7149, Execute );

			if( __0x7002.newMeshInSpace != null )
			{
				
				actionContext.SelectMeshesInSpace( __0x7002.newMeshInSpace );
				actionContext.BuilderWorkareaMode.SelectFaces( __0x7002.faces );
			}
			if( !toMeshInSpace && splitVertices )
				actionContext.BuilderWorkareaMode.SelectFaces( __0x7002.faces );
		}

		static List<int> __0x7166( BuilderMeshData __0x7277, int[] __0x7278 )
		{
			var __0x7004 = new List<int>();
			foreach( var __0x7117 in __0x7278 )
				foreach( var __0x7118 in __0x7277.Faces[ __0x7117 ].Triangles )
				{
					int __0x7005 = __0x7118.RawGeometry;
					if( !__0x7004.Contains( __0x7005 ) )
						__0x7004.Add( __0x7005 );
				}
			return __0x7004;
		}

		static void __0x7167( BuilderMeshData __0x7279, int[] __0x7280 )
		{
			var __0x7006 = new Dictionary<int, int>();
			foreach( var __0x7119 in __0x7280 )
			{
				var __0x7007 = __0x7279.Faces[ __0x7119 ];

				for( int __0x7008 = 0; __0x7008 < __0x7007.Triangles.Count; __0x7008++ )
				{
					int __0x7009 = __0x7007.Triangles[ __0x7008 ].Vertex;
					__0x7006[ __0x7009 ] = __0x7009;
				}
			}

			var __0x7010 = new List<int>();
			for( int __0x7011 = 0; __0x7011 < __0x7279.Faces.Count; __0x7011++ )
			{
				if( __0x7280.Contains( __0x7011 ) )
					continue;
				var __0x7012 = __0x7279.Faces[ __0x7011 ];

				for( int __0x7013 = 0; __0x7013 < __0x7012.Triangles.Count; __0x7013++ )
				{
					if( __0x7006.ContainsKey( __0x7012.Triangles[ __0x7013 ].Vertex ) )
						__0x7010.Add( __0x7012.Triangles[ __0x7013 ].Vertex );
				}
			}

			
			foreach( var __0x7120 in __0x7010 )
			{
				__0x7279.Vertices.Add( new BuilderMeshData.Vertex() );
				__0x7006[ __0x7120 ] = __0x7279.Vertices.Count - 1;
			}
			foreach( var __0x7121 in __0x7280 )
			{
				var __0x7014 = __0x7279.Faces[ __0x7121 ];

				for( int __0x7015 = 0; __0x7015 < __0x7014.Triangles.Count; __0x7015 += 3 )
				{
					var __0x7016 = __0x7014.Triangles[ __0x7015 ];
					var __0x7017 = __0x7014.Triangles[ __0x7015 + 1 ];
					var __0x7018 = __0x7014.Triangles[ __0x7015 + 2 ];

					var __0x7019 = __0x7006[ __0x7016.Vertex ];
					var __0x7020 = __0x7006[ __0x7017.Vertex ];
					var __0x7021 = __0x7006[ __0x7018.Vertex ];

					if( __0x7016.Vertex != __0x7019 || __0x7017.Vertex != __0x7020 )
						__0x7279.AddEdge( __0x7019, __0x7020 );
					if( __0x7017.Vertex != __0x7020 || __0x7018.Vertex != __0x7021 )
						__0x7279.AddEdge( __0x7020, __0x7021 );
					if( __0x7018.Vertex != __0x7021 || __0x7016.Vertex != __0x7019 )
						__0x7279.AddEdge( __0x7021, __0x7019 );

					__0x7016.Vertex = __0x7019; 
					__0x7017.Vertex = __0x7020;
					__0x7018.Vertex = __0x7021;
				}
			}
		}

		#endregion

		

		public static void CloneFacesGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		public static void CloneFaces( BuilderActionContext actionContext )
		{
			void Execute( Mesh __0x7281, List<UndoSystem.Action> __0x7282, ref bool __0x7283 )
			{
				var __0x7022 = new BuilderMeshData();
				var __0x7023 = __0x7281.ExtractData();
				__0x7022.Load( __0x7023 );

				var __0x7024 = actionContext.Selection.Faces;
				if( __0x7024.Length == 0 )
					return;
				string __0x7025 = __0x7024.Length > 1 ? "s" : "";
				if( EditorMessageBox.ShowQuestion( $"Clone selected face{__0x7025}?", EMessageBoxButtons.YesNo ) == EDialogResult.No )
					return;
				actionContext.Selection.Faces = __0x7168( __0x7022, __0x7024 );

				__0x7022.Save( __0x7281, actionContext.Selection, __0x7282, ref __0x7283 );
			}
			__0x7148( actionContext, __0x7149, Execute );
		}

		static int[] __0x7168( BuilderMeshData __0x7284, int[] __0x7285 )
		{
			int[] __0x7026 = Enumerable.Range( __0x7284.Faces.Count, __0x7285.Length ).ToArray();
			foreach( var __0x7122 in __0x7285 )
			{
				var __0x7027 = __0x7284.Faces[ __0x7122 ];
				var __0x7028 = new List<BuilderMeshData.FaceVertex>( __0x7027.Triangles.Count );
				foreach( var __0x7123 in __0x7027.Triangles )
					__0x7028.Add( __0x7284.CloneFaceVertex( __0x7123 ) );

				var __0x7029 = new BuilderMeshData.Face( __0x7028, BuilderMeshData.CloneProperties( __0x7027.Properties ), __0x7027.SmoothingGroup ); 
				__0x7284.Faces.Add( __0x7029 );
			}

			__0x7167( __0x7284, __0x7026 );

			return __0x7026;
		}

		

		public static void SetMaterialGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length != 0 ||
				actionContext.GetSelectedMesh().mesh != null && actionContext.Selection.FaceCount != 0 )
			{
				var __0x7030 = __0x7170();
				if( !string.IsNullOrEmpty( __0x7030.GetByReference ) )
					context.Enabled = true;
			}
		}

		
		public static void SetMaterial( BuilderActionContext actionContext )
		{
			if( actionContext.SelectionMode == BuilderSelectionMode.Object && actionContext.GetSelectedMeshInSpaces().Length != 0 )
			{
				

				var __0x7031 = __0x7170();
				
				
				

				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				{
					

					var __0x7032 = new List<UndoSystem.Action>();
					var __0x7033 = false;

					foreach( var __0x7124 in actionContext.GetSelectedMeshInSpaces() )
					{
						var __0x7034 = __0x7124.Mesh.Value;
						if( __0x7034 != null )
						{
							if( __0x7034.Parent == __0x7124 )
							{
								__0x7169( __0x7124, new Reference<Material>(), __0x7032, ref __0x7033 );
								foreach( var __0x7125 in __0x7034.GetComponents<MeshGeometry>() )
									SetMaterialForGeometry( __0x7125, __0x7031, __0x7032, ref __0x7033 );
							}
							else
								__0x7169( __0x7124, __0x7031, __0x7032, ref __0x7033 );
						}
					}

					
					var __0x7035 = new UndoMultiAction();
					__0x7035.AddActions( __0x7032 );
					actionContext.DocumentWindow?.Document?.CommitUndoAction( __0x7035 );
				}
			}
			else if( actionContext.GetSelectedMesh().mesh != null && actionContext.Selection.FaceCount != 0 )
			{
				

				var __0x7036 = __0x7170();

				void ExecuteFacesMode(Mesh __0x7286, List<UndoSystem.Action> __0x7287, ref bool __0x7288 )
				{
					var __0x7037 = actionContext.Selection.Faces;
					if( __0x7037.Length == 0 )
						return;

					

					

					var __0x7038 = new BuilderMeshData();
					var __0x7039 = __0x7286.ExtractData();
					__0x7038.Load( __0x7039 );

					

					var __0x7040 = __0x7286.GetComponents<MeshGeometry>();

					
					var __0x7041 = new List<MeshGeometry>();
					{
						foreach( var __0x7126 in __0x7166( __0x7038, actionContext.Selection.Faces ) )
							__0x7041.Add( __0x7040[ __0x7126 ] );
					}
					


					
					
					

					
					
					
					
					
					
					
					
					{
						

						if( __0x7286.Parent is MeshInSpace meshInSpace )
                            __0x7169( meshInSpace, new Reference<Material>(), __0x7287, ref __0x7288 );
						foreach( var __0x7127 in __0x7041 )
                            SetMaterialForGeometry( __0x7127, __0x7036, __0x7287, ref __0x7288 );
					}

					

					
					
					

					
					

					
					

					
					

				}

                __0x7148( actionContext, __0x7149, ExecuteFacesMode );
			}


			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			
			
		}

		public static void SetMaterialForGeometry( MeshGeometry geom, Reference<Material> material, List<UndoSystem.Action> undo, ref bool undoLocked )
		{
			if( !undoLocked )
			{
				var __0x7042 = (Metadata.Property)geom.MetadataGetMemberBySignature( "property:" + nameof( MeshGeometry.Material ) );
				undo.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( geom, __0x7042, geom.Material ) ) );
			}
			geom.Material = material;
		}

		static void __0x7169( MeshInSpace __0x7289, Reference<Material> __0x7290, List<UndoSystem.Action> __0x7291, ref bool __0x7292 )
		{
			if( !__0x7289.ReplaceMaterial.Equals( __0x7290 ) )
			{
				if( !__0x7292 )
				{
					var __0x7043 = (Metadata.Property)__0x7289.MetadataGetMemberBySignature( "property:" + nameof( MeshInSpace.ReplaceMaterial ) );
					__0x7291.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7289, __0x7043, __0x7289.ReplaceMaterial ) ) );
				}

				__0x7289.ReplaceMaterial = __0x7290;
			}

			
		}

		static ReferenceNoValue __0x7170()
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetSelectedObjectToCreate();
			if( objectType != null )
			{
				var __0x7044 = objectType as Metadata.ComponentTypeInfo;
				if( __0x7044 != null && __0x7044.BasedOnObject != null )
				{
					

					
					var __0x7045 = __0x7044.BasedOnObject as Material;
					if( __0x7045 != null )
						return ReferenceUtility.MakeResourceReference( __0x7045 );

					
					if( __0x7044.BasedOnObject is Import3D )
					{
						__0x7045 = __0x7044.BasedOnObject.GetComponent( "Material" ) as Material;
						if( __0x7045 != null )
							return ReferenceUtility.MakeResourceReference( __0x7045 );
					}
				}
			}

			return new ReferenceNoValue();
		}

		

		public static void GrowSelectionGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount != 0 || actionContext.Selection.EdgeCount != 0 || actionContext.Selection.VertexCount != 0 )
				context.Enabled = true;
		}

		
		public static void GrowSelection( BuilderActionContext actionContext )
		{
			

			void Execute( Mesh __0x7293, List<UndoSystem.Action> __0x7294, ref bool __0x7295 )
			{
				var __0x7046 = new BuilderMeshData();
				var __0x7047 = __0x7293.ExtractData();
				__0x7046.Load( __0x7047 );

				switch( actionContext.SelectionMode )
				{
				case BuilderSelectionMode.Face:
					{
						
						var __0x7048 = actionContext.Selection.Faces;
						var __0x7049 = new HashSet<(int lowVertex, int highVertex)>();
						foreach( var __0x7128 in __0x7046.Edges )
							__0x7049.Add( BuilderCommonFunctions.OrderVertices( __0x7128.Vertex1, __0x7128.Vertex2 ) );

						var __0x7050 = new HashSet<(int lowVertex, int highVertex)>();
						for( int __0x7051 = 0; __0x7051 < __0x7048.Length; __0x7051++ )
							__0x7050.UnionWith( IntersectEdgesByFace( __0x7049, __0x7046.Faces[ __0x7048[ __0x7051 ] ].Triangles ) );

						var __0x7052 = new List<int>();
						for( int __0x7053 = 0; __0x7053 < __0x7046.Faces.Count; __0x7053++ )
							if( IntersectEdgesByFace( __0x7050, __0x7046.Faces[ __0x7053 ].Triangles ).Count != 0 )
								__0x7052.Add( __0x7053 );
						actionContext.Selection.Faces = __0x7052.ToArray();
					}
					break;

				case BuilderSelectionMode.Edge:
					{
						var __0x7054 = actionContext.Selection.Edges;
						if( __0x7054.Length == 0 )
							return;

						var __0x7055 = new HashSet<int>();
						foreach( var __0x7129 in __0x7054 )
						{
							var __0x7056 = __0x7046.Edges[ __0x7129 ];
							__0x7055.Add( __0x7056.Vertex1 );
							__0x7055.Add( __0x7056.Vertex2 );
						}

						var __0x7057 = new List<int>();
						for( int __0x7058 = 0; __0x7058 < __0x7046.Edges.Count; __0x7058++ )
						{
							var __0x7059 = __0x7046.Edges[ __0x7058 ];
							if( __0x7055.Contains( __0x7059.Vertex1 ) || __0x7055.Contains( __0x7059.Vertex2 ) )
								__0x7057.Add( __0x7058 );
						}
						actionContext.Selection.Edges = __0x7057.ToArray();
					}
					break;

				case BuilderSelectionMode.Vertex:
					{
						var __0x7060 = new HashSet<int>( actionContext.Selection.Vertices );
						var __0x7061 = new HashSet<int>();
						foreach( var __0x7130 in __0x7046.Faces )
						{
							for( int __0x7062 = 0; __0x7062 < __0x7130.Triangles.Count; __0x7062 += 3 )
							{
								if( __0x7060.Contains( __0x7130.Triangles[ __0x7062 ].Vertex ) ||
									__0x7060.Contains( __0x7130.Triangles[ __0x7062 + 1 ].Vertex ) ||
									__0x7060.Contains( __0x7130.Triangles[ __0x7062 + 2 ].Vertex ) )
								{
									__0x7061.Add( __0x7130.Triangles[ __0x7062 ].Vertex );
									__0x7061.Add( __0x7130.Triangles[ __0x7062 + 1 ].Vertex );
									__0x7061.Add( __0x7130.Triangles[ __0x7062 + 2 ].Vertex );
								}
							}
						}

						actionContext.Selection.Vertices = __0x7061.ToArray();
					}
					break;
				}
			}

			__0x7148( actionContext, __0x7149, Execute, false );
		}

		internal static HashSet<(int lowVertex, int highVertex)> IntersectEdgesByFace( HashSet<(int lowVertex, int highVertex)> edges, List<BuilderMeshData.FaceVertex> triangles )
		{
			var __0x7063 = new HashSet<(int lowVertex, int highVertex)>();
			for( int __0x7064 = 0; __0x7064 < triangles.Count; __0x7064 += 3 )
			{
				var __0x7065 = BuilderCommonFunctions.OrderVertices( triangles[ __0x7064 ].Vertex, triangles[ __0x7064 + 1 ].Vertex );
				var __0x7066 = BuilderCommonFunctions.OrderVertices( triangles[ __0x7064 + 1 ].Vertex, triangles[ __0x7064 + 2 ].Vertex );
				var __0x7067 = BuilderCommonFunctions.OrderVertices( triangles[ __0x7064 + 2 ].Vertex, triangles[ __0x7064 ].Vertex );
				if( edges.Contains( __0x7065 ) )
					__0x7063.Add( __0x7065 );
				if( edges.Contains( __0x7066 ) )
					__0x7063.Add( __0x7066 );
				if( edges.Contains( __0x7067 ) )
					__0x7063.Add( __0x7067 );
			}

			return __0x7063;
		}

		

		public static void SelectByMaterialGetState( EditorAction.GetStateContext context, BuilderActionContext actionContext )
		{
			if( actionContext.Selection.FaceCount != 0 )
				context.Enabled = true;
		}

		
		public static void SelectByMaterial( BuilderActionContext actionContext )
		{
			
			bool Contains( List<Reference<Material>> __0x7296, Reference<Material> __0x7297 )
			{
				foreach( var __0x7131 in __0x7296 )
					if( __0x7131.Value == null && __0x7297.Value == null || __0x7297.Equals( __0x7131 ) )
						return true;
				return false;
			}

			void Execute( Mesh __0x7298, List<UndoSystem.Action> __0x7299, ref bool __0x7300 )
			{
				var __0x7068 = __0x7298.GetComponents<MeshGeometry>();

				var __0x7069 = new BuilderMeshData();
				var __0x7070 = __0x7298.ExtractData();
				__0x7069.Load( __0x7070 );

				var __0x7071 = actionContext.Selection.Faces;
				if( __0x7071.Length == 0 )
					return;

				var __0x7072 = new HashSet<int>(); 
				foreach( var __0x7132 in __0x7071 )
				{
					var __0x7073 = __0x7069.Faces[ __0x7132 ].Triangles;
					foreach( var __0x7133 in __0x7073 )
						__0x7072.Add( __0x7133.RawGeometry );
				}

				var __0x7074 = new List<Reference<Material>>();
				foreach( var __0x7134 in __0x7072 )
				{
					var __0x7075 = __0x7068[ __0x7134 ].Material;
					if( !Contains( __0x7074, __0x7075 ) )
						__0x7074.Add( __0x7075 );
				}

				var __0x7076 = new HashSet<int>();
				for( int __0x7077 = 0; __0x7077 < __0x7068.Length; __0x7077++ )
				{
					if( Contains( __0x7074, __0x7068[ __0x7077 ].Material ) )
						__0x7076.Add( __0x7077 );
				}

				var __0x7078 = new List<int>();
				for( int __0x7079 = 0; __0x7079 < __0x7069.Faces.Count; __0x7079++ )
				{
					var __0x7080 = __0x7069.Faces[ __0x7079 ].Triangles;
					foreach( var __0x7135 in __0x7080 )
					{
						if( __0x7076.Contains( __0x7135.RawGeometry ) )
						{
							__0x7078.Add( __0x7079 );
							break;
						}
					}
				}

				actionContext.Selection.Faces = __0x7078.ToArray();
			}

			__0x7148( actionContext, __0x7149, Execute, false );
		}

		

		public static void SetVertexColor( BuilderActionContext actionContext, ColorValue color )
		{
			void Execute( Mesh __0x7301, List<UndoSystem.Action> __0x7302, ref bool __0x7303 )
			{
				
				var __0x7081 = new BuilderMeshData();
				var __0x7082 = __0x7301.ExtractData();
				__0x7081.Load( __0x7082 );

				var __0x7083 = color.ToVector4F();
				if( actionContext.Selection.SelectionMode == BuilderSelectionMode.Face )
				{
					foreach( var __0x7136 in actionContext.Selection.Faces )
						foreach( var __0x7137 in __0x7081.Faces[ __0x7136 ].Triangles )
							__0x7137.RawVertex.Color = __0x7083;
				}
				else
				{
					
					var __0x7084 = __0x7171( actionContext, __0x7081 );
					foreach( var __0x7138 in __0x7081.Faces )
						foreach( var __0x7139 in __0x7138.Triangles )
							if( __0x7084.Contains( __0x7139.Vertex ) )
								__0x7139.RawVertex.Color = __0x7083;
				}

				
				__0x7081.Save( __0x7301, actionContext.Selection, __0x7302, ref __0x7303 );
			}

			__0x7148( actionContext, __0x7149, Execute );
		}

		public static ColorValue? GetInitialColor( BuilderActionContext actionContext )
		{
			var (_, mesh) = actionContext.GetSelectedMesh();
			if( mesh == null )
				return null;

			var __0x7085 = new BuilderMeshData();
			var __0x7086 = mesh.ExtractData();
			__0x7085.Load( __0x7086 );

			if( actionContext.SelectionMode == BuilderSelectionMode.Face )
			{
				ColorValue? __0x7087 = null;
				foreach( var __0x7140 in actionContext.Selection.Faces )
				{
					foreach( var __0x7141 in __0x7085.Faces[ __0x7140 ].Triangles )
					{
						if( __0x7087 == null )
							__0x7087 = new ColorValue( __0x7141.RawVertex.Color );
						else if( __0x7087 != new ColorValue( __0x7141.RawVertex.Color ) )
							return null;
					}
				}
				return __0x7087;
			}
			else
			{
				ColorValue? __0x7088 = null;

				var __0x7089 = __0x7171( actionContext, __0x7085 );
				if( __0x7089.Count != 0 )
				{
					foreach( var __0x7142 in __0x7085.Faces )
					{
						foreach( var __0x7143 in __0x7142.Triangles )
						{
							if( __0x7089.Contains( __0x7143.Vertex ) )
							{
								if( __0x7088 == null )
									__0x7088 = new ColorValue( __0x7143.RawVertex.Color );
								else if( __0x7088 != new ColorValue( __0x7143.RawVertex.Color ) )
									return null;
							}
						}
					}
				}

				return __0x7088;
			}
		}

		static ESet<int> __0x7171( BuilderActionContext __0x7304, BuilderMeshData __0x7305 )
		{
			var __0x7090 = new ESet<int>();
			switch( __0x7304.SelectionMode )
			{
			case BuilderSelectionMode.Vertex:
				foreach( var __0x7144 in __0x7304.Selection.Vertices )
					__0x7090.AddWithCheckAlreadyContained( __0x7144 );
				break;

			case BuilderSelectionMode.Edge:
				foreach( var __0x7145 in __0x7304.Selection.Edges )
				{
					__0x7090.AddWithCheckAlreadyContained( __0x7305.Edges[ __0x7145 ].Vertex1 );
					__0x7090.AddWithCheckAlreadyContained( __0x7305.Edges[ __0x7145 ].Vertex2 );
				}
				break;

			case BuilderSelectionMode.Face:
				foreach( var __0x7146 in __0x7304.Selection.Faces )
					foreach( var __0x7147 in __0x7305.Faces[ __0x7146 ].Triangles )
						__0x7090.AddWithCheckAlreadyContained( __0x7147.Vertex );
				break;
			}
			return __0x7090;
		}

	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	
	
	class BuilderTransformToolObject_Edge : TransformToolObject
	{
		public readonly BuilderWorkareaMode.Edge Edge;

		public Vector3 Vertex1Offset;
		public Vector3 Vertex2Offset;

		readonly List<BuilderWorkareaMode.Vertex> __0x7306;
		readonly BuilderMeshData __0x7307;
		readonly Func<Vector3> __0x7308;

		
		

		

		public BuilderTransformToolObject_Edge( BuilderWorkareaMode.Edge edge, BuilderMeshData meshData , List<BuilderWorkareaMode.Vertex> meshVertices, Func<Vector3> getOperationCenter)
			: base( edge )
		{
			Edge = edge;
			this.__0x7306 = meshVertices;
			this.__0x7307 = meshData;
			this.__0x7308 = getOperationCenter;
		}


		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			
			return true;
		}

		public override Vector3 Position
		{
			get { return Edge.Position; }
			set
			{
				if( IsAllowMove() )
				{
					Edge.Position = value;
					var __0x7309 = __0x7307.Edges[ Edge.Index ];
					__0x7306[ __0x7309.Vertex1 ].Position = Vertex1Offset + Position;
					__0x7306[ __0x7309.Vertex2 ].Position = Vertex2Offset + Position;
				}
			}
		}

		public override Quaternion Rotation
		{
			get { return Edge.Rotation; }
			set
			{
				if( IsAllowRotate() )
				{
					Edge.Rotation = value;

					var __0x7310 = __0x7307.Edges[ Edge.Index ];
					var __0x7311 = Edge.Rotation;

					__0x7306[ __0x7310.Vertex1 ].Position = __0x7311 * Vertex1Offset + Position;
					__0x7306[ __0x7310.Vertex2 ].Position = __0x7311 * Vertex2Offset + Position;
				}
			}
		}

		public override Vector3 Scale
		{
			get { return Edge.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					Edge.Scale = value;

					var __0x7312 = __0x7307.Edges[ Edge.Index ];

					var __0x7313 = Edge.Scale;
					var __0x7314 = __0x7308();
					__0x7306[ __0x7312.Vertex1 ].Position = __0x7313 * ( Vertex1Offset + Position - __0x7314 ) + __0x7314;
					__0x7306[ __0x7312.Vertex2 ].Position = __0x7313 * ( Vertex2Offset + Position - __0x7314 ) + __0x7314;
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();
			

			var __0x7315 = __0x7307.Edges[ Edge.Index ];
			Vertex1Offset = __0x7306[ __0x7315.Vertex1 ].Position - Edge.Position;
			Vertex2Offset = __0x7306[ __0x7315.Vertex2 ].Position - Edge.Position;
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();
			Edge.Rotation = Quaternion.Identity;
			Edge.Scale = Vector3.One;
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{

	
	
	
	
	
	
	class BuilderTransformToolObject_Face : TransformToolObject
	{
		public readonly BuilderWorkareaMode.Face Face;
		public Vector3[] VertexOffsets;

		readonly List<BuilderWorkareaMode.Vertex> __0x7316;
		readonly BuilderMeshData __0x7317;
		readonly Func<Vector3> __0x7318;


		
		

		public BuilderTransformToolObject_Face( BuilderWorkareaMode.Face face, BuilderMeshData meshData, List<BuilderWorkareaMode.Vertex> meshVertices, Func<Vector3> getOperationCenter )
			: base( face )
		{
			Face = face;
			this.__0x7316 = meshVertices;
			this.__0x7317 = meshData;
			this.__0x7318 = getOperationCenter;
		}


		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			
			return true;
		}

		public override Vector3 Position
		{
			get { return Face.Position; }
			set
			{
				if( IsAllowMove() )
				{
					Face.Position = value;

					try
					{
						var __0x7319 = __0x7317.Faces[ Face.Index ].Triangles;
						for( int __0x7320 = 0; __0x7320 < __0x7319.Count; __0x7320++ )
							__0x7316[ __0x7319[ __0x7320 ].Vertex ].Position = VertexOffsets[ __0x7320 ] + Position;
					}
					catch { }
				}
			}
		}


		public override Quaternion Rotation
		{
			get { return Face.Rotation; }
			set
			{
				if( IsAllowRotate() )
				{
					Face.Rotation = value;

					try
					{
						var __0x7321 = __0x7317.Faces[ Face.Index ].Triangles;
						for( int __0x7322 = 0; __0x7322 < __0x7321.Count; __0x7322++ )
							__0x7316[ __0x7321[ __0x7322 ].Vertex ].Position = Face.Rotation * VertexOffsets[ __0x7322 ] + Face.Position;
					}
					catch { }
				}
			}
		}

		public override Vector3 Scale
		{
			get { return Face.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					Face.Scale = value;
					var __0x7323 = __0x7318();
					try
					{
						var __0x7324 = __0x7317.Faces[ Face.Index ].Triangles;
						for( int __0x7325 = 0; __0x7325 < __0x7324.Count; __0x7325++ )
							__0x7316[ __0x7324[ __0x7325 ].Vertex ].Position = Face.Scale * ( VertexOffsets[ __0x7325 ] + Face.Position - __0x7323 ) + __0x7323;
					}
					catch { }
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();
			

			try
			{
				var __0x7326 = __0x7317.Faces[ Face.Index ].Triangles;
				var __0x7327 = new Vector3[ __0x7326.Count ];
				for( int __0x7328 = 0; __0x7328 < __0x7326.Count; __0x7328++ )
					__0x7327[ __0x7328 ] = __0x7316[ __0x7326[ __0x7328 ].Vertex ].Position - Face.Position;
				VertexOffsets = __0x7327;
			}
			catch { }
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();

			try
			{
				for( int __0x7329 = 0; __0x7329 < VertexOffsets.Length; __0x7329++ )
					VertexOffsets[ __0x7329 ] = Face.Rotation * ( Scale * VertexOffsets[ __0x7329 ] );
				Face.Rotation = Quaternion.Identity;
				Face.Scale = Vector3.One;
			}
			catch { }
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	class BuilderTransformToolObject_Vertex : TransformToolObject
	{
		BuilderWorkareaMode.Vertex __0x7330;

		
		

		public Vector3 PositionBeforeScaling;
		readonly Func<Vector3> __0x7331;

		public BuilderTransformToolObject_Vertex( BuilderWorkareaMode.Vertex vertex, Func<Vector3> getOperationCenter )
			: base( vertex )
		{
			this.__0x7330 = vertex;
			this.__0x7331 = getOperationCenter;
		}

		public BuilderWorkareaMode.Vertex Vertex
		{
			get { return __0x7330; }
		}

		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			return true;
		}

		public override Vector3 Position
		{
			get { return __0x7330.Position; }
			set
			{
				if( IsAllowMove() )
				{
					__0x7330.Position = value;
				}
			}
		}

		public override Quaternion Rotation
		{
			get { return __0x7330.Rotation; }
			set
			{
				if( IsAllowRotate() )
					__0x7330.Rotation = value;
			}
		}

		public override Vector3 Scale
		{
			get { return __0x7330.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					__0x7330.Scale = value;
					var __0x7332 = __0x7331();
					Vertex.Position = Vertex.Scale * ( PositionBeforeScaling - __0x7332 ) + __0x7332;
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();

			PositionBeforeScaling = __0x7330.Position;

			
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();
			__0x7330.Scale = Vector3.One;
			__0x7330.Rotation = Quaternion.Identity;
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Editor
{
	public class BuilderWorkareaMode : SceneEditor.WorkareaModeClassScene
	{
		public BuilderSelectionMode selectionMode;
		

		
		MeshInSpace __0x7333;
		
		internal BuilderMeshData meshToEditData;
		readonly List<Vertex> __0x7334 = new List<Vertex>();
		List<Edge> __0x7335 = new List<Edge>();
		List<Face> __0x7336 = new List<Face>();
		internal Mesh.ExtractedData meshExtractedData;

		bool __0x7337;

		bool __0x7338;

		__0x7660 __0x7339;
		Task __0x7340;

		__0x7661 __0x7341;
		Task __0x7342;

		

		public class Vertex
		{
			public int Index;

			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			public Rectangle lastLabelScreenRectangle;
		}

		

		public class Edge
		{
			public int Index;


			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			
		}

		

		public class Face
		{
			public int Index;


			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			
		}

		

		class __0x7660
		{
			public BuilderMeshData meshToEditData;

			public Matrix4 meshInSpaceTransformInvert;
			public Mesh.CompiledData meshCompiledData_OnlyToCompare;
			public bool meshInSpaceTwoSided;
			public Vector3F[] meshExtractedVerticesPositions;
			public int[] meshExtractedIndices;
			public MeshTest meshRayCast;

			public Vertex[] meshVertices;
			public Vector3 viewportCameraSettingsPosition;

			public ESet<Vertex> visiblePoints;
		}

		

		class __0x7661
		{
			public BuilderMeshData meshToEditData;

			public List<Vertex> meshVertices;
			public List<Edge> meshEdges;
			public Mesh.ExtractedData meshExtractedStructure;
			public Vector3 viewportCameraSettingsPosition;

			public ESet<int> visibleEdges;
		}

		

		public BuilderWorkareaMode( SceneEditor documentWindow )
			: base( documentWindow )
		{
			
			

			if( __0x7610( DocumentWindow.SelectedObjects, out var meshInSpace ) )
			{
				__0x7333 = meshInSpace;
				
				UpdateMeshData();

				
				DocumentWindow.SelectObjects( null );
			}

			DocumentWindow.Document.UndoSystem.ListOfActionsChanged += __0x7609;
			DocumentWindow.SelectedObjectsChanged += __0x7611;
		}

		protected override void OnDestroy()
		{
			DocumentWindow.Document.UndoSystem.ListOfActionsChanged -= __0x7609;
			DocumentWindow.SelectedObjectsChanged -= __0x7611;

			
			if( !EditorAPI.ClosingApplication )
			{
				if( __0x7333 != null && __0x7333.EnabledInHierarchy )
					DocumentWindow.SelectObjects( new object[] { __0x7333 } );
				else
				{
					if( DocumentWindow.SelectedObjects.FirstOrDefault( __0x7614 => __0x7614 is Vertex || __0x7614 is Edge || __0x7614 is Face ) != null )
						DocumentWindow.SelectObjects( null );
				}

				
				
				
				
				
				
				
				
				
				
				
			}
		}

		protected override bool OnMouseDown( Viewport viewport, EMouseButtons button )
		{
			return false;
		}

		protected override bool OnMouseUp( Viewport viewport, EMouseButtons button )
		{
			return false;
		}

		protected override void OnTick( Viewport viewport, double delta )
		{
			

			var __0x7343 = GetMeshToEdit();
			if( __0x7343 != null && !__0x7343.EnabledInHierarchy )
				__0x7338 = true;

			if( __0x7338 )
				UpdateMeshData();

			
			{
				bool __0x7344 = false;

				foreach( var __0x7555 in DocumentWindow.SelectedObjects )
				{
					var __0x7345 = __0x7555 as Vertex;
					if( __0x7345 != null && !__0x7334.Contains( __0x7345 ) )
					{
						__0x7344 = true;
						break;
					}

					var __0x7346 = __0x7555 as Edge;
					if( __0x7346 != null && !__0x7335.Contains( __0x7346 ) )
					{
						__0x7344 = true;
						break;
					}

					var __0x7347 = __0x7555 as Face;
					if( __0x7347 != null && !__0x7336.Contains( __0x7347 ) )
					{
						__0x7344 = true;
						break;
					}
				}

				if( __0x7344 )
					DocumentWindow.SelectObjects( null );
			}

			__0x7612( viewport );
			__0x7613( viewport );
		}

		static bool __0x7594( __0x7660 __0x7615, Ray __0x7616, out double __0x7617, out int __0x7618 )
		{
			__0x7617 = 0;
			__0x7618 = -1;

			RayF __0x7348 = __0x7616.ToRayF();

			
			var __0x7349 = __0x7615.meshRayCast.RayCast( __0x7348, MeshTest.Mode.OneClosest, __0x7615.meshInSpaceTwoSided );
			if( __0x7349.Length > 0 )
			{
				var __0x7350 = __0x7349[ 0 ];
				__0x7617 = __0x7350.Scale;
				__0x7618 = __0x7350.TriangleIndex;
				return true;
			}

			return false;
		}

		static bool __0x7595( __0x7660 __0x7619, ref Ray __0x7620 )
		{
			Ray __0x7351 = __0x7619.meshInSpaceTransformInvert * __0x7620;

			if( __0x7594( __0x7619, __0x7351, out _, out _ ) )
				return true;
			
			

			
			
			return false;
		}

		static bool __0x7596( __0x7660 __0x7621, ref Vector3 __0x7622 )
		{
			var __0x7352 = new Vector3[] {
				Vector3.Zero,
				new Vector3( -0.05, 0,0 ), new Vector3( 0.05, 0,0 ),
				new Vector3( 0, -0.05, 0 ), new Vector3( 0, 0.05, 0 ) ,
				new Vector3( 0, 0, -0.05 ), new Vector3( 0, 0, 0.05 ) };

			foreach( var __0x7556 in __0x7352 )
			{
				var __0x7353 = ( __0x7622 + __0x7556 ) - __0x7621.viewportCameraSettingsPosition;
				var __0x7354 = __0x7353.Normalize();
				__0x7353 *= __0x7354 - 0.05;

				var __0x7355 = new Ray( __0x7621.viewportCameraSettingsPosition, __0x7353 );
				if( !__0x7595( __0x7621, ref __0x7355 ) )
					return true;
			}

			return false;
		}

		static void __0x7597( object __0x7623 )
		{
			var __0x7356 = (__0x7660)__0x7623;

			__0x7356.meshRayCast = new MeshTest( __0x7356.meshExtractedVerticesPositions, __0x7356.meshExtractedIndices );

			__0x7356.visiblePoints = new ESet<Vertex>( __0x7356.meshVertices.Length );
			var __0x7357 = new ParallelOptions();
			__0x7357.MaxDegreeOfParallelism = Math.Max( Environment.ProcessorCount / 2, 1 );
			Parallel.ForEach( __0x7356.meshVertices, __0x7357, delegate ( Vertex __0x7624 )
			{
				if( __0x7596( __0x7356, ref __0x7624.Position ) )
				{
					lock( __0x7356.visiblePoints )
						__0x7356.visiblePoints.Add( __0x7624 );
				}
			} );

			
			
			
			
			
			
		}

		ESet<Vertex> __0x7598( Viewport __0x7625 )
		{
			if( __0x7339 != null && __0x7339.meshToEditData == meshToEditData )
				return __0x7339.visiblePoints;
			return new ESet<Vertex>();
		}

		void __0x7599( Viewport __0x7626, Vertex __0x7627, List<CanvasRenderer.TriangleVertex> __0x7628 )
		{
			var __0x7358 = __0x7626.RenderingContext.ObjectInSpaceRenderingContext;
			
			
			

			if( __0x7626.CameraSettings.ProjectToScreenCoordinates( __0x7627.Position, out Vector2 screenPosition ) )
			{
				if( new Rectangle( 0, 0, 1, 1 ).Contains( ref screenPosition ) )
				{
					
					
					
					
					Vector2 __0x7359 = new Vector2( 20, 20 );
					Vector2 __0x7360 = new Vector2( 5, 5 );
					double __0x7361 = 100;

					double __0x7362 = ( __0x7627.Position - __0x7626.CameraSettings.Position ).Length();
					if( __0x7362 < __0x7361 )
					{
						Vector2 __0x7363 = Vector2.Lerp( __0x7359, __0x7360, __0x7362 / __0x7361 );
						Vector2 __0x7364 = __0x7363 / __0x7626.SizeInPixels.ToVector2();

						ColorValue __0x7365;
						double __0x7366;
						if( __0x7358.selectedObjects.Contains( __0x7627 ) )
						{
							__0x7365 = ProjectSettings.Get.General.SelectedColor;
							__0x7366 = 0.5;
						}
						else if( __0x7358.canSelectObjects.Contains( __0x7627 ) )
						{
							__0x7365 = ProjectSettings.Get.General.CanSelectColor;
							__0x7366 = 0.5;
						}
						else
						{
							__0x7365 = ProjectSettings.Get.General.ScreenLabelColor;
							__0x7366 = 0.4;
						}

						Rectangle __0x7367 = new Rectangle( screenPosition - __0x7364 * .5, screenPosition + __0x7364 * .5 );
						var __0x7368 = new Rectangle( screenPosition - __0x7364 * .5 * __0x7366, screenPosition + __0x7364 * .5 * __0x7366 ).ToRectangleF();

						var __0x7369 = new CanvasRenderer.TriangleVertex( __0x7368.LeftTop, __0x7365, new Vector2F( 0, 0 ) );
						var __0x7370 = new CanvasRenderer.TriangleVertex( __0x7368.RightTop, __0x7365, new Vector2F( 1, 0 ) );
						var __0x7371 = new CanvasRenderer.TriangleVertex( __0x7368.RightBottom, __0x7365, new Vector2F( 1, 1 ) );
						var __0x7372 = new CanvasRenderer.TriangleVertex( __0x7368.LeftBottom, __0x7365, new Vector2F( 0, 1 ) );
						__0x7628.Add( __0x7369 );
						__0x7628.Add( __0x7370 );
						__0x7628.Add( __0x7371 );
						__0x7628.Add( __0x7371 );
						__0x7628.Add( __0x7372 );
						__0x7628.Add( __0x7369 );
						
						
						

						__0x7627.lastLabelScreenRectangle = __0x7367;
					}
				}
			}
		}

		void __0x7600( Viewport __0x7629 )
		{
			var __0x7373 = new List<CanvasRenderer.TriangleVertex>( 256 );

			var __0x7374 = __0x7598( __0x7629 );

			for( var __0x7375 = 0; __0x7375 < __0x7334.Count; __0x7375++ )
			{
				var __0x7376 = __0x7334[ __0x7375 ];
				__0x7376.lastLabelScreenRectangle = Rectangle.Cleared;

				if( __0x7374.Contains( __0x7376 ) )
					__0x7599( __0x7629, __0x7376, __0x7373 );
			}

			if( __0x7373.Count != 0 )
			{
				var __0x7377 = ResourceManager.LoadResource<ImageComponent>( "Base\\UI\\Images\\Circle.png" );
				__0x7629.CanvasRenderer.AddTriangles( __0x7373, __0x7377, true );
			}
		}

		ESet<int> __0x7601( Viewport __0x7630 )
		{
			if( __0x7341 != null && __0x7341.meshToEditData == meshToEditData )
				return __0x7341.visibleEdges;
			return new ESet<int>();
		}

		static long __0x7602( int __0x7631, int __0x7632 )
		{
			long __0x7378 = __0x7632;
			__0x7378 = __0x7378 << 32;
			__0x7378 = __0x7378 | (uint)__0x7631;
			return __0x7378;
		}

		static void __0x7603( object __0x7633 )
		{
			var __0x7379 = (__0x7661)__0x7633;
			var __0x7380 = __0x7379.meshExtractedStructure.Structure.Edges;
			var __0x7381 = __0x7379.meshExtractedStructure.Structure.Faces;

			__0x7379.visibleEdges = new ESet<int>( __0x7379.meshEdges.Count );

			var __0x7382 = new Dictionary<long, int>( __0x7379.meshEdges.Count );
			
			{
				var __0x7383 = new ParallelOptions();
				__0x7383.MaxDegreeOfParallelism = Math.Max( Environment.ProcessorCount / 2, 1 );
				Parallel.ForEach( __0x7379.meshEdges, __0x7383, delegate ( Edge __0x7634 )
				{
					if( __0x7634.Index < __0x7380.Length )
					{
						ref var __0x7384 = ref __0x7380[ __0x7634.Index ];

						long __0x7385;
						if( __0x7384.Vertex1 > __0x7384.Vertex2 )
							__0x7385 = __0x7602( __0x7384.Vertex2, __0x7384.Vertex1 );
						else
							__0x7385 = __0x7602( __0x7384.Vertex1, __0x7384.Vertex2 );

						
						
						
						
						

						lock( __0x7382 )
							__0x7382[ __0x7385 ] = __0x7634.Index;
					}
				} );

				
				
				
				
				

				
				
				
				
				

				
				
				
			}

			{
				var __0x7386 = new ParallelOptions();
				__0x7386.MaxDegreeOfParallelism = Math.Max( Environment.ProcessorCount / 2, 1 );
				Parallel.For( 0, __0x7381.Length, __0x7386, delegate ( int __0x7635 ) 
				{
					ref var __0x7387 = ref __0x7381[ __0x7635 ];

					for( int __0x7388 = 0; __0x7388 < __0x7387.Triangles.Length / 3; __0x7388++ )
					{
						var __0x7389 = __0x7387.Triangles[ __0x7388 * 3 + 0 ].Vertex;
						var __0x7390 = __0x7387.Triangles[ __0x7388 * 3 + 1 ].Vertex;
						var __0x7391 = __0x7387.Triangles[ __0x7388 * 3 + 2 ].Vertex;

						ref var __0x7392 = ref __0x7379.meshVertices[ __0x7389 ].Position;
						ref var __0x7393 = ref __0x7379.meshVertices[ __0x7390 ].Position;
						ref var __0x7394 = ref __0x7379.meshVertices[ __0x7391 ].Position;

						Plane.FromPoints( ref __0x7392, ref __0x7393, ref __0x7394, out var plane );

						if( plane.GetSide( ref __0x7379.viewportCameraSettingsPosition ) == Plane.Side.Positive )
						{
							for( int __0x7395 = 0; __0x7395 < 3; __0x7395++ )
							{
								int __0x7396 = 0, __0x7397 = 0;
								switch( __0x7395 )
								{
								case 0: __0x7396 = __0x7389; __0x7397 = __0x7390; break;
								case 1: __0x7396 = __0x7390; __0x7397 = __0x7391; break;
								case 2: __0x7396 = __0x7391; __0x7397 = __0x7389; break;
								}

								long __0x7398;
								if( __0x7396 > __0x7397 )
									__0x7398 = __0x7602( __0x7397, __0x7396 );
								else
									__0x7398 = __0x7602( __0x7396, __0x7397 );

								
								
								
								
								

								lock( __0x7382 )
								{
									if( __0x7382.TryGetValue( __0x7398, out var index ) )
										__0x7379.visibleEdges.AddWithCheckAlreadyContained( index );
								}
							}

							
							
							
							
							
							
							
							
							
							
							
							
							
							

							
							
							

							
							
							
						}
					}
				} );
			}
		}

		void __0x7604( Viewport __0x7636 )
		{
			var __0x7399 = __0x7636.RenderingContext.ObjectInSpaceRenderingContext;
			var __0x7400 = __0x7636.Simple3DRenderer;

			var __0x7401 = new List<Line3>( __0x7334.Count * 4 );
			var __0x7402 = new List<Line3>( __0x7334.Count * 4 );
			var __0x7403 = new List<Line3>( __0x7334.Count * 4 );

			foreach( var __0x7557 in __0x7601( __0x7636 ) )
			{
				var __0x7404 = meshExtractedData.Structure.Edges[ __0x7557 ];
				var __0x7405 = __0x7335[ __0x7557 ];

				var __0x7406 = __0x7334[ __0x7404.Vertex1 ].Position;
				var __0x7407 = __0x7334[ __0x7404.Vertex2 ].Position;
				var __0x7408 = new Line3( __0x7406, __0x7407 );

				__0x7401.Add( __0x7408 );

				if( __0x7399.selectedObjects.Contains( __0x7405 ) )
					__0x7403.Add( __0x7408 );
				else if( __0x7399.canSelectObjects.Contains( __0x7405 ) )
					__0x7402.Add( __0x7408 );
			}

			if( __0x7401.Count != 0 )
			{
				__0x7400.SetColor( new ColorValue( 0, 0, 1 ) );
				foreach( var __0x7558 in __0x7401 )
					__0x7400.AddLineThin( __0x7558 );
			}

			if( __0x7402.Count != 0 )
			{
				var __0x7409 = ProjectSettings.Get.General.CanSelectColor.Value;
				
				__0x7400.SetColor( __0x7409 );

				foreach( var __0x7559 in __0x7402 )
					__0x7400.AddLine( __0x7559 );
			}

			if( __0x7403.Count != 0 )
			{
				var __0x7410 = ProjectSettings.Get.General.SelectedColor.Value;
				
				__0x7400.SetColor( __0x7410 );

				foreach( var __0x7560 in __0x7403 )
					__0x7400.AddLine( __0x7560 );
			}
		}

		void __0x7605( Viewport __0x7637 )
		{
			var __0x7411 = __0x7637.RenderingContext.ObjectInSpaceRenderingContext;
			var __0x7412 = __0x7637.Simple3DRenderer;

			var __0x7413 = new List<Line3>( __0x7334.Count * 4 );
			
			var __0x7414 = new List<Vector3>( __0x7334.Count * 4 );
			var __0x7415 = new List<Vector3>( __0x7334.Count * 4 );

			foreach( var __0x7561 in __0x7336 )
			{
				if( __0x7561.Index < meshExtractedData.Structure.Faces.Length )
				{
					var __0x7416 = meshExtractedData.Structure.Faces[ __0x7561.Index ];

					var __0x7417 = new Dictionary<Vector2I, int>( __0x7416.Triangles.Length );

					for( int __0x7418 = 0; __0x7418 < __0x7416.Triangles.Length / 3; __0x7418++ )
					{
						var __0x7419 = __0x7416.Triangles[ __0x7418 * 3 + 0 ].Vertex;
						var __0x7420 = __0x7416.Triangles[ __0x7418 * 3 + 1 ].Vertex;
						var __0x7421 = __0x7416.Triangles[ __0x7418 * 3 + 2 ].Vertex;

						var __0x7422 = __0x7334[ __0x7419 ].Position;
						var __0x7423 = __0x7334[ __0x7420 ].Position;
						var __0x7424 = __0x7334[ __0x7421 ].Position;

						var __0x7425 = Plane.FromPoints( __0x7422, __0x7423, __0x7424 );
						if( __0x7425.GetSide( __0x7637.CameraSettings.Position ) == Plane.Side.Positive )
						{

							void AddEdge( int __0x7638, int __0x7639 )
							{
								int __0x7426, __0x7427;
								if( __0x7638 > __0x7639 )
								{
									__0x7426 = __0x7639;
									__0x7427 = __0x7638;
								}
								else
								{
									__0x7426 = __0x7638;
									__0x7427 = __0x7639;
								}
								var __0x7428 = new Vector2I( __0x7426, __0x7427 );
								__0x7417.TryGetValue( __0x7428, out var count );
								__0x7417[ __0x7428 ] = count + 1;
							}

							AddEdge( __0x7419, __0x7420 );
							AddEdge( __0x7420, __0x7421 );
							AddEdge( __0x7421, __0x7419 );
							
							
							

							if( __0x7411.selectedObjects.Contains( __0x7561 ) )
							{
								__0x7415.Add( __0x7422 );
								__0x7415.Add( __0x7423 );
								__0x7415.Add( __0x7424 );
							}
							else if( __0x7411.canSelectObjects.Contains( __0x7561 ) )
							{
								__0x7414.Add( __0x7422 );
								__0x7414.Add( __0x7423 );
								__0x7414.Add( __0x7424 );
							}
						}
					}

					foreach( var __0x7562 in __0x7417 )
					{
						if( __0x7562.Value == 1 )
						{
							var __0x7429 = __0x7562.Key;

							var __0x7430 = __0x7334[ __0x7429.X ].Position;
							var __0x7431 = __0x7334[ __0x7429.Y ].Position;
							__0x7413.Add( new Line3( __0x7430, __0x7431 ) );
						}
					}
				}
			}

			if( __0x7413.Count != 0 )
			{
				__0x7412.SetColor( new ColorValue( 0, 0, 1 ) );
				foreach( var __0x7563 in __0x7413 )
					__0x7412.AddLineThin( __0x7563 );
			}
			
			
			
			
			

			if( __0x7414.Count != 0 )
			{
				var __0x7432 = ProjectSettings.Get.General.CanSelectColor.Value;
				__0x7432.Alpha *= 0.5f;
				__0x7412.SetColor( __0x7432 );

				__0x7412.AddTriangles( __0x7414, false, true );
			}

			if( __0x7415.Count != 0 )
			{
				var __0x7433 = ProjectSettings.Get.General.SelectedColor.Value;
				__0x7433.Alpha *= 0.5f;
				__0x7412.SetColor( __0x7433 );

				__0x7412.AddTriangles( __0x7415, false, true );
			}
		}

		protected override void OnUpdateBeforeOutput( Viewport viewport )
		{
			if( meshToEditData != null )
			{
				
				if( __0x7337 )
					__0x7607( viewport );

				
				if( selectionMode == BuilderSelectionMode.Vertex )
					__0x7600( viewport );

				
				if( selectionMode == BuilderSelectionMode.Edge && meshExtractedData != null )
					__0x7604( viewport );

				
				if( selectionMode == BuilderSelectionMode.Face && meshExtractedData != null )
					__0x7605( viewport );
			}
		}

		protected override void OnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.OnGetTextInfoCenterBottomCorner( lines );

			
			
			
			
		}

		public override bool AllowSelectObjects
		{
			get { return true; }
		}

		public override bool AllowCreateObjectsByDrop
		{
			get { return true; }
		}

		public override bool AllowCreateObjectsByClick
		{
			get { return false; }
		}

		public override bool AllowCreateObjectsByBrush
		{
			get { return false; }
		}

		protected override bool OnGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect )
		{
			var __0x7434 = DocumentWindow.Viewport;

			
			if( selectionMode == BuilderSelectionMode.Vertex )
			{
				foreach( var __0x7564 in __0x7334 )
				{
					if( !__0x7564.lastLabelScreenRectangle.IsCleared() )
					{
						if( __0x7434.CameraSettings.ProjectToScreenCoordinates( __0x7564.Position, out var screenPosition ) )
						{
							if( rectangle.Contains( screenPosition ) )
								objectsToSelect.Add( __0x7564 );
						}
					}
				}
			}

			
			if( selectionMode == BuilderSelectionMode.Edge && meshExtractedData != null )
			{
				foreach( var __0x7565 in __0x7601( __0x7434 ) )
				{
					var __0x7435 = meshExtractedData.Structure.Edges[ __0x7565 ];
					var __0x7436 = __0x7335[ __0x7565 ];

					var __0x7437 = __0x7334[ __0x7435.Vertex1 ].Position;
					var __0x7438 = __0x7334[ __0x7435.Vertex2 ].Position;
					var __0x7439 = ( __0x7437 + __0x7438 ) / 2;

					if( __0x7434.CameraSettings.ProjectToScreenCoordinates( __0x7439, out var screenPosition ) )
					{
						if( rectangle.Contains( screenPosition ) )
							objectsToSelect.Add( __0x7436 );
					}
				}
			}

			
			if( selectionMode == BuilderSelectionMode.Face && meshExtractedData != null )
			{
				foreach( var __0x7566 in __0x7336 )
				{
					if( __0x7566.Index < meshExtractedData.Structure.Faces.Length )
					{
						var __0x7440 = meshExtractedData.Structure.Faces[ __0x7566.Index ];

						for( int __0x7441 = 0; __0x7441 < __0x7440.Triangles.Length / 3; __0x7441++ )
						{
							var __0x7442 = __0x7440.Triangles[ __0x7441 * 3 + 0 ].Vertex;
							var __0x7443 = __0x7440.Triangles[ __0x7441 * 3 + 1 ].Vertex;
							var __0x7444 = __0x7440.Triangles[ __0x7441 * 3 + 2 ].Vertex;

							var __0x7445 = __0x7334[ __0x7442 ].Position;
							var __0x7446 = __0x7334[ __0x7443 ].Position;
							var __0x7447 = __0x7334[ __0x7444 ].Position;

							var __0x7448 = Plane.FromPoints( __0x7445, __0x7446, __0x7447 );
							if( __0x7448.GetSide( __0x7434.CameraSettings.Position ) == Plane.Side.Positive )
							{
								var __0x7449 = ( __0x7445 + __0x7446 + __0x7447 ) / 3;

								if( __0x7434.CameraSettings.ProjectToScreenCoordinates( __0x7449, out var screenPosition ) )
								{
									if( rectangle.Contains( screenPosition ) )
									{
										objectsToSelect.Add( __0x7566 );
										break;
									}
								}
							}
						}
					}
				}
			}

			return true;
		}

		static bool __0x7606( Viewport __0x7640, Vector3 __0x7641, Vector3 __0x7642 )
		{
			double __0x7450 = 6 * EditorAPI.DPIScale;

			var __0x7451 = Vector2.Zero;
			

			Vector2 __0x7452 = __0x7640.SizeInPixels.ToVector2();
			Vector2 __0x7453 = __0x7640.MousePosition * __0x7452;

			Vector2 __0x7454;
			if( !__0x7640.CameraSettings.ProjectToScreenCoordinates( __0x7641, out __0x7454 ) )
				return false;
			Vector2 __0x7455;
			if( !__0x7640.CameraSettings.ProjectToScreenCoordinates( __0x7642, out __0x7455 ) )
				return false;

			Vector2 __0x7456 = __0x7454 * __0x7452;
			Vector2 __0x7457 = __0x7455 * __0x7452;

			Rectangle __0x7458 = new Rectangle( __0x7456 );
			__0x7458.Add( __0x7457 );
			__0x7458.Expand( __0x7450 );

			if( !__0x7458.Contains( __0x7453 ) )
				return false;

			__0x7451 = MathAlgorithms.ProjectPointToLine( __0x7456, __0x7457, __0x7453 );

			double __0x7459 = ( __0x7453 - __0x7451 ).Length();
			if( __0x7459 > __0x7450 )
				return false;

			
			

			return true;
		}

		protected override bool OnGetMouseOverObjectToSelectByClick( SceneEditor.GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x7460 = DocumentWindow.Viewport;
			var __0x7461 = __0x7460.MousePosition;

			double __0x7462 = double.MaxValue;

			
			DocumentWindow.GetMouseOverObjectInSpaceToSelectByClick( context );
			if( context.ResultObject != null )
			{
				if( __0x7333 == context.ResultObject )
					context.ResultObject = null;
				else
				{
					

					
					if( __0x7610( new object[] { context.ResultObject }, out var meshInSpace ) )
					{
						if( context.ResultPosition.HasValue )
							__0x7462 = ( context.ResultPosition.Value - __0x7460.CameraSettings.Position ).Length();
						else
							__0x7462 = 0;
					}
					else
						context.ResultObject = null;
				}
			}

			
			if( selectionMode == BuilderSelectionMode.Vertex )
			{
				foreach( var __0x7567 in __0x7334 )
				{
					if( __0x7460.CameraSettings.ProjectToScreenCoordinates( __0x7567.Position, out var screenPosition ) )
					{
						if( !__0x7567.lastLabelScreenRectangle.IsCleared() && __0x7567.lastLabelScreenRectangle.Contains( __0x7461 ) )
						{
							var __0x7463 = ( __0x7567.Position - __0x7460.CameraSettings.Position ).Length();
							if( __0x7463 < __0x7462 )
							{
								__0x7462 = __0x7463;
								context.ResultObject = __0x7567;
								context.ResultPosition = __0x7567.Position;
							}
						}
					}
				}
			}

			
			if( selectionMode == BuilderSelectionMode.Edge && meshExtractedData != null )
			{
				foreach( var __0x7568 in __0x7601( __0x7460 ) )
				{
					var __0x7464 = meshExtractedData.Structure.Edges[ __0x7568 ];
					var __0x7465 = __0x7335[ __0x7568 ];

					var __0x7466 = __0x7334[ __0x7464.Vertex1 ].Position;
					var __0x7467 = __0x7334[ __0x7464.Vertex2 ].Position;
					var __0x7468 = ( __0x7466 + __0x7467 ) / 2;

					if( __0x7606( __0x7460, __0x7466, __0x7467 ) )
					{
						var __0x7469 = ( __0x7468 - __0x7460.CameraSettings.Position ).Length();
						if( __0x7469 < __0x7462 )
						{
							__0x7462 = __0x7469;
							context.ResultObject = __0x7465;
						}
					}
				}
			}

			
			if( selectionMode == BuilderSelectionMode.Face && meshExtractedData != null )
			{
				var __0x7470 = __0x7460.CameraSettings.GetRayByScreenCoordinates( __0x7461 );

				foreach( var __0x7569 in __0x7336 )
				{
					if( __0x7569.Index < meshExtractedData.Structure.Faces.Length )
					{
						var __0x7471 = meshExtractedData.Structure.Faces[ __0x7569.Index ];

						for( int __0x7472 = 0; __0x7472 < __0x7471.Triangles.Length / 3; __0x7472++ )
						{
							var __0x7473 = __0x7471.Triangles[ __0x7472 * 3 + 0 ].Vertex;
							var __0x7474 = __0x7471.Triangles[ __0x7472 * 3 + 1 ].Vertex;
							var __0x7475 = __0x7471.Triangles[ __0x7472 * 3 + 2 ].Vertex;

							var __0x7476 = __0x7334[ __0x7473 ].Position;
							var __0x7477 = __0x7334[ __0x7474 ].Position;
							var __0x7478 = __0x7334[ __0x7475 ].Position;

							var __0x7479 = new Bounds( __0x7476 );
							__0x7479.Add( ref __0x7477 );
							__0x7479.Add( ref __0x7478 );

							if( __0x7479.Intersects( ref __0x7470 ) && MathAlgorithms.IntersectTriangleRay( ref __0x7476, ref __0x7477, ref __0x7478, ref __0x7470 ) )
							{
								var __0x7480 = ( __0x7476 + __0x7477 + __0x7478 ) / 3;

								var __0x7481 = ( __0x7480 - __0x7460.CameraSettings.Position ).Length();
								if( __0x7481 < __0x7462 )
								{
									__0x7462 = __0x7481;
									context.ResultObject = __0x7569;
								}
							}
						}
					}
				}
			}

			return true;
		}

		protected override bool OnTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject )
		{
			Vector3 GetCenter() => __0x7482;

			if( forObject is Vertex vertex )
				transformToolObject = new BuilderTransformToolObject_Vertex( vertex, GetCenter );
			else if( forObject is Edge edge )
				transformToolObject = new BuilderTransformToolObject_Edge( edge, meshToEditData, __0x7334, GetCenter );
			else if( forObject is Face face )
				transformToolObject = new BuilderTransformToolObject_Face( face, meshToEditData, __0x7334, GetCenter );

			return true;
		}

		Vector3 __0x7482;
		protected override bool OnTransformToolModifyBegin()
		{
			__0x7337 = true;

			
			var __0x7483 = DocumentWindow.TransformTool.Objects;
			Vector3 __0x7484 = Vector3.Zero;
			foreach( var __0x7570 in __0x7483 )
				__0x7484 += __0x7570.Position;
			__0x7482 = __0x7484 / __0x7483.Count;

			return true;
		}

		protected override bool OnTransformToolModifyCommit()
		{

			int[] __0x7485 = null;


			switch( selectionMode )
			{
			
			case BuilderSelectionMode.Vertex: __0x7485 = GetSelectedVertices( DocumentWindow ); break;

			case BuilderSelectionMode.Edge:
				{
					var __0x7486 = new HashSet<int>();
					foreach( int __0x7571 in GetSelectedEdges( DocumentWindow ) )
					{
						__0x7486.Add( meshToEditData.Edges[ __0x7571 ].Vertex1 );
						__0x7486.Add( meshToEditData.Edges[ __0x7571 ].Vertex2 );
					}
					__0x7485 = __0x7486.ToArray();
					break;
				}

			case BuilderSelectionMode.Face:
				{
					var __0x7487 = new HashSet<int>();
					foreach( int __0x7572 in GetSelectedFaces( DocumentWindow ) )
						foreach( var __0x7573 in meshToEditData.Faces[ __0x7572 ].Triangles )
							__0x7487.Add( __0x7573.Vertex );
					__0x7485 = __0x7487.ToArray();
					break;
				}
			}

			if( __0x7485 != null )
			{
				var __0x7488 = __0x7333.TransformV.ToMatrix4().GetInverse();

				var __0x7489 = new Vector3F[ __0x7485.Length ];
				for( int __0x7490 = 0; __0x7490 < __0x7485.Length; __0x7490++ )
				{
					var __0x7491 = __0x7485[ __0x7490 ];
					var __0x7492 = __0x7334[ __0x7491 ];

					var __0x7493 = __0x7488 * __0x7492.Position;

					__0x7489[ __0x7490 ] = __0x7493.ToVector3F();
				}

				BuilderOneMeshActions.MoveVertices( new BuilderActionContext( DocumentWindow ), __0x7485, __0x7489 );
			}


			

			__0x7337 = false;

			return true;
		}

		protected override bool OnTransformToolModifyCancel()
		{
			__0x7337 = false;

			return true;
		}

		protected override bool OnTransformToolCloneAndSelectObjects()
		{
			

			return true;
		}

		protected override void OnEditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Delete":
				BuilderOneMeshActions.DeleteFacesGetState( context, new BuilderActionContext( context ) );
				
				
				
				
				break;

			case "Duplicate":
				BuilderOneMeshActions.CloneFacesGetState( context, new BuilderActionContext( context ) );
				break;
			}
		}

		protected override void OnEditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Delete":
				BuilderOneMeshActions.DeleteFaces( new BuilderActionContext( context ) );
				SelectFaces( new int[] { } );
				break;
			case "Duplicate":
				BuilderOneMeshActions.CloneFaces( new BuilderActionContext( context ) );
				break;
			}
		}

		public Mesh GetMeshToEdit()
		{
			if( __0x7333 != null )
				return __0x7333.Mesh;
			return null;
		}

		public static (MeshInSpace meshInSpace, Mesh mesh) GetSelectedMesh( DocumentWindow documentWindow, object[] objectsInFocus )
		{
			var __0x7494 = GetWorkareaMode( documentWindow );

			if( __0x7494 != null )
				return (__0x7494.__0x7333, __0x7494.GetMeshToEdit());
			else
			{
				if( objectsInFocus != null && objectsInFocus.Length > 0 )
				{
					var __0x7495 = objectsInFocus[ 0 ] as MeshInSpace;
					if( __0x7495 != null )
						return (__0x7495, __0x7495.Mesh);
				}
				else
				{
					var __0x7496 = documentWindow?.SelectedObjects;
					if( __0x7496 != null && 0 < __0x7496.Length && __0x7496[ 0 ] is MeshInSpace meshInSpace )
						return (meshInSpace, meshInSpace.Mesh);
				}
				return (null, null);
			}
		}

		public static BuilderSelection GetSelection( DocumentWindow documentWindow )
		{
			var __0x7497 = new BuilderSelection();
			__0x7497.SelectionMode = BuilderSelectionMode.Object;

			var __0x7498 = GetWorkareaMode( documentWindow );
			if( __0x7498 != null )
			{
				__0x7497.SelectionMode = __0x7498.selectionMode;
				var __0x7499 = new List<int>();
				var __0x7500 = documentWindow.SelectedObjects;
				switch( __0x7498.selectionMode )
				{
				case BuilderSelectionMode.Vertex:
					{
						foreach( var __0x7574 in __0x7500 )
							if( __0x7574 is Vertex vertex )
								__0x7499.Add( vertex.Index );
						__0x7497.Vertices = __0x7499.ToArray();
						break;
					}
				case BuilderSelectionMode.Edge:
					{
						foreach( var __0x7575 in __0x7500 )
							if( __0x7575 is Edge edge )
								__0x7499.Add( edge.Index );
						__0x7497.Edges = __0x7499.ToArray();
						break;
					}
				case BuilderSelectionMode.Face:
					{
						foreach( var __0x7576 in __0x7500 )
							if( __0x7576 is Face face )
								__0x7499.Add( face.Index );
						__0x7497.Faces = __0x7499.ToArray();
						break;
					}
				}
			}

			__0x7497.Changed = false;
			return __0x7497;
		}

		
		public static int[] GetSelectedVertices( DocumentWindow documentWindow )
		{
			var __0x7501 = GetWorkareaMode( documentWindow );
			return __0x7501 == null ? new int[ 0 ] : __0x7501.GetSelectedVertices();
		}

		public int[] GetSelectedVertices()
		{
			var __0x7502 = new List<int>();
			if( selectionMode == BuilderSelectionMode.Vertex )
			{
				foreach( var __0x7577 in DocumentWindow.SelectedObjects )
					if( __0x7577 is Vertex vertex )
						__0x7502.Add( vertex.Index );
			}
			return __0x7502.ToArray();
		}

		public static int[] GetSelectedEdges( DocumentWindow documentWindow )
		{
			var __0x7503 = GetWorkareaMode( documentWindow );
			return __0x7503 == null ? new int[ 0 ] : __0x7503.GetSelectedEdges();
		}

		public int[] GetSelectedEdges()
		{
			var __0x7504 = new List<int>();
			if( selectionMode == BuilderSelectionMode.Edge )
			{
				foreach( var __0x7578 in DocumentWindow.SelectedObjects )
					if( __0x7578 is Edge edge )
						__0x7504.Add( edge.Index );
			}
			return __0x7504.ToArray();
		}

		public static int[] GetSelectedFaces( DocumentWindow documentWindow )
		{
			var __0x7505 = GetWorkareaMode( documentWindow );
			return __0x7505 == null ? new int[ 0 ] : __0x7505.GetSelectedFaces();
		}

		public int[] GetSelectedFaces()
		{
			var __0x7506 = new List<int>();

			if( selectionMode == BuilderSelectionMode.Face )
			{
				foreach( var __0x7579 in DocumentWindow.SelectedObjects )
					if( __0x7579 is Face face )
						__0x7506.Add( face.Index );
			}
			return __0x7506.ToArray();
		}

		void __0x7607( Viewport __0x7643 )
		{
			var __0x7507 = __0x7643.Simple3DRenderer;

			__0x7507.SetColor( new ColorValue( 0, 0, 1 ) );

			foreach( var __0x7580 in meshToEditData.Faces )
			{
				for( int __0x7508 = 0; __0x7508 < __0x7580.Triangles.Count / 3; __0x7508++ )
				{
					var __0x7509 = __0x7580.Triangles[ __0x7508 * 3 + 0 ].Vertex;
					var __0x7510 = __0x7580.Triangles[ __0x7508 * 3 + 1 ].Vertex;
					var __0x7511 = __0x7580.Triangles[ __0x7508 * 3 + 2 ].Vertex;

					var __0x7512 = __0x7334[ __0x7509 ].Position;
					var __0x7513 = __0x7334[ __0x7510 ].Position;
					var __0x7514 = __0x7334[ __0x7511 ].Position;

					__0x7507.AddLineThin( __0x7512, __0x7513 );
					__0x7507.AddLineThin( __0x7513, __0x7514 );
					__0x7507.AddLineThin( __0x7514, __0x7512 );
				}
			}
		}

		void __0x7608()
		{
			meshToEditData = null;
			__0x7334.Clear();
			__0x7335.Clear();
			__0x7336.Clear();
			meshExtractedData = null;
		}

		public void UpdateMeshData()
		{
			__0x7338 = false;

			var __0x7515 = GetMeshToEdit();

			if( __0x7515 == null || !__0x7515.EnabledInHierarchy )
			{
				__0x7608();
				return;
			}

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			meshToEditData = new BuilderMeshData();
			meshExtractedData = __0x7515.ExtractData();
			meshToEditData.Load( meshExtractedData );
			

			
			if( __0x7334.Count != meshToEditData.Vertices.Count )
			{
				__0x7334.Clear();
				foreach( var __0x7581 in meshToEditData.Vertices )
					__0x7334.Add( new Vertex() );
			}

			var __0x7516 = meshToEditData.GetVertexPositions();

			
			var __0x7517 = __0x7333.TransformV;
			for( int __0x7518 = 0; __0x7518 < meshToEditData.Vertices.Count; __0x7518++ )
			{
				var __0x7519 = __0x7334[ __0x7518 ];
				__0x7519.Index = __0x7518;

				__0x7516.TryGetValue( __0x7518, out var vertexPosition );
				__0x7519.Position = __0x7517 * vertexPosition;
				

				__0x7519.Rotation = Quaternion.Identity;
				__0x7519.Scale = new Vector3( 1, 1, 1 );
			}

			
			if( selectionMode == BuilderSelectionMode.Edge )
			{
				
				if( __0x7335.Count != meshToEditData.Edges.Count )
				{
					__0x7335.Clear();
					foreach( var __0x7582 in meshToEditData.Edges )
						__0x7335.Add( new Edge() );
				}

				
				for( int __0x7520 = 0; __0x7520 < meshToEditData.Edges.Count; __0x7520++ )
				{
					var __0x7521 = __0x7335[ __0x7520 ];
					__0x7521.Index = __0x7520;

					__0x7521.Rotation = Quaternion.Identity;
					__0x7521.Scale = new Vector3( 1, 1, 1 );

					__0x7521.Position = ( __0x7334[ meshToEditData.Edges[ __0x7520 ].Vertex1 ].Position + __0x7334[ meshToEditData.Edges[ __0x7520 ].Vertex2 ].Position ) / 2;
				}
			}

			if( selectionMode == BuilderSelectionMode.Face )
			{
				
				if( __0x7336.Count != meshToEditData.Faces.Count )
				{
					__0x7336.Clear();
					foreach( var __0x7583 in meshToEditData.Faces )
						__0x7336.Add( new Face() );
				}

				
				for( int __0x7522 = 0; __0x7522 < meshToEditData.Faces.Count; __0x7522++ )
				{
					var __0x7523 = __0x7336[ __0x7522 ];
					__0x7523.Index = __0x7522;

					__0x7523.Rotation = Quaternion.Identity;
					__0x7523.Scale = new Vector3( 1, 1, 1 );

					Vector3 __0x7524 = Vector3.Zero;
					int __0x7525 = 0;
					foreach( var __0x7584 in meshToEditData.Faces[ __0x7522 ].Triangles )
					{
						__0x7524 += __0x7334[ __0x7584.Vertex ].Position;
						__0x7525++;
					}
					__0x7523.Position = __0x7524 / __0x7525;
				}
			}
		}


		private void __0x7609( object __0x7644, EventArgs __0x7645 )
		{
			__0x7338 = true;
		}

		public static BuilderWorkareaMode GetWorkareaMode( DocumentWindow documentWindow )
		{
			var __0x7526 = documentWindow as SceneEditor;
			if( __0x7526 != null )
				return __0x7526.WorkareaMode as BuilderWorkareaMode;
			return null;
		}

		public void ChangeSelectionMode( BuilderSelectionMode value )
		{
			if( selectionMode != value )
			{
				var __0x7527 = selectionMode;

				if( meshToEditData == null )
				{
					selectionMode = value;
					DocumentWindow.SelectObjects( null );
					UpdateMeshData();
					return;
				}

				HashSet<int> __0x7528 = null;

				switch( __0x7527 )
				{
				case BuilderSelectionMode.Face:
					{
						int[] __0x7529 = GetSelectedFaces( DocumentWindow );
						if( __0x7529.Length != 0 )
						{
							var __0x7530 = __0x7529 
								.SelectMany( __0x7646 => meshToEditData.Faces[ __0x7646 ].Triangles )
								.Select( __0x7647 => __0x7647.Vertex ).ToArray();
							__0x7528 = new HashSet<int>();
							foreach( var __0x7585 in __0x7530 )
								__0x7528.Add( __0x7585 );
						}
					}
					break;

				case BuilderSelectionMode.Vertex:
					{
						var __0x7531 = GetSelectedVertices( DocumentWindow );
						if( __0x7531.Length != 0 )
						{
							__0x7528 = new HashSet<int>();
							foreach( var __0x7586 in __0x7531 )
								__0x7528.Add( __0x7586 );
						}
					}
					break;

				case BuilderSelectionMode.Edge:
					{
						var __0x7532 = GetSelectedEdges( DocumentWindow );
						if( __0x7532.Length != 0 )
						{
							__0x7528 = new HashSet<int>();
							foreach( var __0x7587 in __0x7532 )
							{
								__0x7528.Add( meshToEditData.Edges[ __0x7587 ].Vertex1 );
								__0x7528.Add( meshToEditData.Edges[ __0x7587 ].Vertex2 );
							}
						}
					}
					break;
				}


				

				selectionMode = value; 

				if( __0x7528 == null || __0x7528.Count == 0 )
				{
					DocumentWindow.SelectObjects( null );
					UpdateMeshData(); 
					return;
				}

				switch( selectionMode )
				{
				case BuilderSelectionMode.Vertex:
					SelectVertices( __0x7528.ToArray() );
					break;

				case BuilderSelectionMode.Edge:
					var __0x7533 = new List<int>();
					for( int __0x7534 = 0; __0x7534 < meshToEditData.Edges.Count; __0x7534++ )
						if( __0x7528.Contains( meshToEditData.Edges[ __0x7534 ].Vertex1 ) && __0x7528.Contains( meshToEditData.Edges[ __0x7534 ].Vertex2 ) )
							__0x7533.Add( __0x7534 );
					SelectEdges( __0x7533.ToArray() );
					break;

				case BuilderSelectionMode.Face:
					var __0x7535 = new List<int>();
					for( int __0x7536 = 0; __0x7536 < meshToEditData.Faces.Count; __0x7536++ )
					{
						var __0x7537 = meshToEditData.Faces[ __0x7536 ];
						bool __0x7538 = true;
						for( int __0x7539 = 0; __0x7539 < __0x7537.Triangles.Count; __0x7539++ )
						{
							if( !__0x7528.Contains( __0x7537.Triangles[ __0x7539 ].Vertex ) )
							{
								__0x7538 = false;
								break;
							}
						}

						if( __0x7538 )
							__0x7535.Add( __0x7536 );
					}
					SelectFaces( __0x7535.ToArray() );
					break;

				case BuilderSelectionMode.Object:
					DocumentWindow.SelectObjects( null );
					break;
				}

				UpdateMeshData(); 
			}
		}

		public void SelectVertices( int[] vertices )
		{
			UpdateMeshData();

			var __0x7540 = new ESet<int>();
			foreach( var __0x7588 in vertices )
				if( 0 <= __0x7588 )  
					__0x7540.Add( __0x7588 );

			var __0x7541 = new List<Vertex>();
			foreach( var __0x7589 in __0x7334 )
			{
				if( __0x7540.Contains( __0x7589.Index ) )
					__0x7541.Add( __0x7589 );
			}

			DocumentWindow.SelectObjects( __0x7541.ToArray() );
		}

		public void SelectEdges( int[] edges )
		{
			UpdateMeshData();

			var __0x7542 = new ESet<int>();
			foreach( var __0x7590 in edges )
				if( 0 <= __0x7590 )
					__0x7542.Add( __0x7590 );

			var __0x7543 = new List<Edge>();
			foreach( var __0x7591 in __0x7335 )
			{
				if( __0x7542.Contains( __0x7591.Index ) )
					__0x7543.Add( __0x7591 );
			}

			DocumentWindow.SelectObjects( __0x7543.ToArray() );
		}

		public void SelectFaces( int[] faces )
		{
			UpdateMeshData();

			var __0x7544 = new ESet<int>();
			foreach( var __0x7592 in faces )
				if( 0 <= __0x7592 )
					__0x7544.Add( __0x7592 );

			var __0x7545 = new List<Face>();
			foreach( var __0x7593 in __0x7336 )
			{
				if( __0x7544.Contains( __0x7593.Index ) )
					__0x7545.Add( __0x7593 );
			}

			DocumentWindow.SelectObjects( __0x7545.ToArray() );
		}

		static bool __0x7610( object[] __0x7648, out MeshInSpace __0x7649 )
		{
			
			
			if( __0x7648.Length != 0 )
			{
				var __0x7546 = __0x7648[ 0 ] as MeshInSpace;
				if( __0x7546 != null )
				{
					
					var __0x7547 = __0x7546.Mesh.Value; 

					if( __0x7547 != null )
					{
						__0x7649 = __0x7546;
						
						return true;
					}
				}
			}

			__0x7649 = null;
			
			return false;
		}

		private void __0x7611( DocumentWindow __0x7650, object[] __0x7651 )
		{
			
			
			
			
			
			

			if( __0x7610( DocumentWindow.SelectedObjects, out var meshInSpace ) )
			{
				__0x7333 = meshInSpace;
				
				UpdateMeshData();

				
				DocumentWindow.SelectObjects( null );
			}
		}

		public void SelectAllGetState( EditorAction.GetStateContext context )
		{
			switch( selectionMode )
			{
			case BuilderSelectionMode.Vertex:
				context.Enabled = !__0x7334.All( __0x7652 => DocumentWindow.IsObjectSelected( __0x7652 ) );
				break;
			case BuilderSelectionMode.Edge:
				context.Enabled = !__0x7335.All( __0x7653 => DocumentWindow.IsObjectSelected( __0x7653 ) );
				break;
			case BuilderSelectionMode.Face:
				context.Enabled = !__0x7336.All( __0x7654 => DocumentWindow.IsObjectSelected( __0x7654 ) );
				break;
			}
		}

		
		public void SelectAll()
		{
			switch( selectionMode )
			{
			case BuilderSelectionMode.Vertex:
				DocumentWindow.SelectObjects( __0x7334.ToArray() );
				break;
			case BuilderSelectionMode.Edge:
				DocumentWindow.SelectObjects( __0x7335.ToArray() );
				break;
			case BuilderSelectionMode.Face:
				DocumentWindow.SelectObjects( __0x7336.ToArray() );
				break;
			}
		}

		public void InvertSelectionGetState( EditorAction.GetStateContext context )
		{
			switch( selectionMode )
			{
			case BuilderSelectionMode.Vertex:
				if( __0x7334.Count != 0 )
					context.Enabled = true;
				break;
			case BuilderSelectionMode.Edge:
				if( __0x7335.Count != 0 )
					context.Enabled = true;
				break;
			case BuilderSelectionMode.Face:
				if( __0x7336.Count != 0 )
					context.Enabled = true;
				break;
			}
		}

		
		public void InvertSelection()
		{
			switch( selectionMode )
			{
			case BuilderSelectionMode.Vertex:
				DocumentWindow.SelectObjects( __0x7334.Where( __0x7655 => !DocumentWindow.IsObjectSelected( __0x7655 ) ).ToArray() );
				break;
			case BuilderSelectionMode.Edge:
				DocumentWindow.SelectObjects( __0x7335.Where( __0x7656 => !DocumentWindow.IsObjectSelected( __0x7656 ) ).ToArray() );
				break;
			case BuilderSelectionMode.Face:
				DocumentWindow.SelectObjects( __0x7336.Where( __0x7657 => !DocumentWindow.IsObjectSelected( __0x7657 ) ).ToArray() );
				break;
			}
		}

		void __0x7612( Viewport __0x7658 )
		{
			if( selectionMode == BuilderSelectionMode.Vertex )
			{
				
				if( __0x7340 != null && __0x7340.IsCanceled )
				{
					var __0x7548 = (__0x7660)__0x7340.AsyncState;
					__0x7548.meshRayCast?.Dispose();
					__0x7340 = null;
				}

				
				if( __0x7340 != null && __0x7340.IsCompleted )
				{
					var __0x7549 = (__0x7660)__0x7340.AsyncState;
					__0x7549.meshRayCast?.Dispose();
					__0x7340 = null;

					__0x7339 = __0x7549;
				}

				
				if( __0x7340 == null )
				{
					if( __0x7333 != null )
					{
						var __0x7550 = __0x7333.MeshOutput;
						if( __0x7550 != null && __0x7550.Result != null && __0x7550.Result.ExtractedVerticesPositions != null )
						{
							var __0x7551 = new __0x7660();
							__0x7551.meshToEditData = meshToEditData;

							__0x7551.meshInSpaceTransformInvert = __0x7333.Transform.Value.ToMatrix4().GetInverse();
							__0x7551.meshInSpaceTwoSided = MeshInSpace.IsTwoSided( __0x7550, __0x7333.ReplaceMaterial );
							__0x7551.meshCompiledData_OnlyToCompare = __0x7550.Result;
							__0x7551.meshExtractedVerticesPositions = __0x7550.Result.ExtractedVerticesPositions;
							__0x7551.meshExtractedIndices = __0x7550.Result.ExtractedIndices;

							__0x7551.meshVertices = __0x7334.ToArray();
							__0x7551.viewportCameraSettingsPosition = __0x7658.CameraSettings.Position;

							var __0x7552 = __0x7339 != null &&
								__0x7339.meshInSpaceTransformInvert == __0x7551.meshInSpaceTransformInvert &&
								__0x7339.meshInSpaceTwoSided == __0x7551.meshInSpaceTwoSided &&
								__0x7339.meshCompiledData_OnlyToCompare == __0x7551.meshCompiledData_OnlyToCompare &&
								__0x7339.meshToEditData == __0x7551.meshToEditData &&
								__0x7339.viewportCameraSettingsPosition == __0x7551.viewportCameraSettingsPosition;

							if( !__0x7552 )
							{
								__0x7340 = new Task( __0x7597, __0x7551 );
								__0x7340.Start();
							}
						}
					}
				}
			}
		}

		void __0x7613( Viewport __0x7659 )
		{
			if( selectionMode == BuilderSelectionMode.Edge && meshExtractedData != null )
			{
				
				if( __0x7342 != null && __0x7342.IsCanceled )
					__0x7342 = null;

				
				if( __0x7342 != null && __0x7342.IsCompleted )
				{
					__0x7341 = (__0x7661)__0x7342.AsyncState;
					__0x7342 = null;
				}

				
				if( __0x7342 == null )
				{
					var __0x7553 = new __0x7661();
					__0x7553.meshToEditData = meshToEditData;
					__0x7553.meshVertices = new List<Vertex>( __0x7334 );
					__0x7553.meshEdges = new List<Edge>( __0x7335 );
					__0x7553.meshExtractedStructure = meshExtractedData;
					__0x7553.viewportCameraSettingsPosition = __0x7659.CameraSettings.Position;

					var __0x7554 = __0x7341 != null &&
						__0x7341.meshToEditData == __0x7553.meshToEditData &&
						__0x7341.viewportCameraSettingsPosition == __0x7553.viewportCameraSettingsPosition;

					if( !__0x7554 )
					{
						__0x7342 = new Task( __0x7603, __0x7553 );
						__0x7342.Start();
					}
				}
			}
		}
	}
}
#endif




namespace NeoAxis.Editor
{
	public class EngineToolTip
	{
		static ESet<EngineToolTip> __0x7662 = new ESet<EngineToolTip>();

		Dictionary<Control, string> __0x7663 = new Dictionary<Control, string>();

		

		static EngineToolTip __0x7664;
		public static EngineToolTip Global
		{
			get
			{
				if( __0x7664 == null )
					__0x7664 = new EngineToolTip();
				return __0x7664;
			}
		}

		public EngineToolTip()
		{
		}

		public EngineToolTip( IContainer container )
		{
		}

		public void Dispose()
		{
			lock( __0x7663 )
			{
				foreach( var __0x7667 in __0x7663.Keys )
					Hide( __0x7667 );
			}
		}

		public string GetToolTip( Control control )
		{
			lock( __0x7663 )
			{
				if( control != null && __0x7663.TryGetValue( control, out var text ) )
					return text;
				return "";
			}
		}

		public void SetToolTip( Control control, string text )
		{
			Hide( control );

			if( control != null )
			{
				lock( __0x7663 )
				{
					if( !string.IsNullOrEmpty( text ) )
						__0x7663[ control ] = text;
					else
						__0x7663.Remove( control );
				}
			}

			lock( __0x7662 )
			{
				if( __0x7663.Count != 0 )
					__0x7662.AddWithCheckAlreadyContained( this );
				else
					__0x7662.Remove( this );
			}
		}

		public void Hide( Control control )
		{
			if( control != null )
				EngineToolTipManager.Hide( control );
		}

		void __0x7672( out bool __0x7673 )
		{
			lock( __0x7663 )
			{
				if( __0x7663.Count != 0 )
				{
					again:
					foreach( var __0x7668 in __0x7663.Keys )
					{
						if( __0x7668.IsDisposed )
						{
							__0x7663.Remove( __0x7668 );
							goto again;
						}
					}
				}

				__0x7673 = __0x7663.Count == 0;
			}
		}

		internal static void UpdateAllInstances()
		{
			lock( __0x7662 )
			{
				var __0x7665 = new List<EngineToolTip>();

				foreach( var __0x7669 in __0x7662 )
				{
					__0x7669.__0x7672( out var remove );
					if( remove )
						__0x7665.Add( __0x7669 );
				}

				foreach( var __0x7670 in __0x7665 )
					__0x7662.Remove( __0x7670 );
			}
		}

		internal static (EngineToolTip toolTip, string text) GetToolTipByControl( Control control )
		{
			

			lock( __0x7662 )
			{
				foreach( var __0x7671 in __0x7662 )
				{
					var __0x7666 = __0x7671.GetToolTip( control );
					if( !string.IsNullOrEmpty( __0x7666 ) )
							return (__0x7671, __0x7666);

					
					
					
					
					
				}
			}

			return (null, "");
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class EngineToolTipForm : Form
	{
		

		Color __0x7674 = Color.FromArgb( 100, 100, 100 );
		

		

		public EngineToolTipForm(string body )
		{
			__0x7688();

			
			
			
			
			

			
			
			__0x7683.Text = body;

			
			

			
			
			
			
			

			if( EditorAPI.DarkTheme )
			{
				
				BackColor = Color.FromArgb( 10, 10, 10 );
				__0x7674 = Color.FromArgb( 90, 90, 90 );
				__0x7683.ForeColor = Color.White;
			}
		}

		protected override bool ShowWithoutActivation
		{
			get { return true; }
		}

		const int __0x7675 = 0x00000008;
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x7676 = base.CreateParams;
				__0x7676.ExStyle |= __0x7675;
				return __0x7676;
			}
		}

		
		
		
		
		

		
		
		

		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			ControlPaint.DrawBorder( e.Graphics, ClientRectangle, __0x7674, ButtonBorderStyle.Solid );
		}

		private void __0x7684( object __0x7689, EventArgs __0x7690 )
		{
			
			

			using( var __0x7677 = CreateGraphics() )
			{
				

				__0x7677.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;

				var __0x7678 = __0x7677.MeasureString( __0x7683.Text, __0x7683.Font );
				var __0x7679 = new Vector2I( (int)( __0x7678.Width + EditorAPI.DPIScale * 7.0f ), (int)( __0x7678.Height + EditorAPI.DPIScale * 7.0f ) );

				
				var __0x7680 = SystemSettings.AllDisplaysBounds.RightBottom;
				var __0x7681 = Location;
				if( Location.X + __0x7679.X + (int)( EditorAPI.DPIScale * 2.0f ) > __0x7680.X )
					__0x7681.X = __0x7680.X - __0x7679.X - (int)( EditorAPI.DPIScale * 2.0f );
				if( Location.Y + __0x7679.Y + (int)( EditorAPI.DPIScale * 2.0f ) > __0x7680.Y )
					__0x7681.Y = __0x7680.Y - __0x7679.Y - (int)( EditorAPI.DPIScale * 2.0f );
				if( __0x7681 != Location )
					Location = __0x7681;

				Size = new Size( __0x7679.X, __0x7679.Y );
				__0x7683.Location = new Point( (int)( EditorAPI.DPIScale * 2.0f ), 0 );
				__0x7683.Size = new Size( Size.Width + 100, Size.Height );
			}
		}

		
		
		
		

		private void __0x7685( object __0x7691, EventArgs __0x7692 )
		{
			Close();
		}

		private void __0x7686( object __0x7693, EventArgs __0x7694 )
		{
			Close();
		}

		private void __0x7687( object __0x7695, EventArgs __0x7696 )
		{
			Close();
		}

		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
    partial class EngineToolTipForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x7682 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x7682 != null))
            {
                __0x7682.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x7688()
        {
			this.__0x7682 = new System.ComponentModel.Container();
			
			this.__0x7683 = new System.Windows.Forms.Label();
			
			
			this.SuspendLayout();
			
			
			
			
			
			
			
			this.__0x7683.BackColor = System.Drawing.Color.Transparent;
			
			this.__0x7683.Font = new System.Drawing.Font("Tahoma", 8, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x7683.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
			this.__0x7683.Location = new System.Drawing.Point(0, 0);
			this.__0x7683.Margin = new System.Windows.Forms.Padding(0, 0, 0, 0);
			this.__0x7683.Name = "labelBody";
			
			this.__0x7683.TabIndex = 0;
			this.__0x7683.Text = "Text Text Text";
			this.__0x7683.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			
			this.__0x7683.Click += new System.EventHandler(this.__0x7687);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(225)))));
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
			this.ClientSize = new System.Drawing.Size(459, 48);
			this.ControlBox = false;
			
			this.Controls.Add(this.__0x7683);
			this.DoubleBuffered = true;
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "EngineToolTipForm";
			
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "Text";
			this.Load += new System.EventHandler(this.__0x7684);
			this.Click += new System.EventHandler(this.__0x7685);
			this.ResumeLayout(false);

        }

        #endregion

        
        private System.Windows.Forms.Label __0x7683;
        
		
	}
}




namespace NeoAxis.Editor
{
	public static class EngineToolTipManager
	{
		const double __0x7697 = 0.5;

		static Control __0x7698;
		static string __0x7699;
		static double __0x7700;
		static Point __0x7701;
		static EngineToolTipForm __0x7702;

		

		[System.Runtime.InteropServices.DllImport( "user32.dll" )]
		internal static extern IntPtr WindowFromPoint( Point pnt );

		

		static Control __0x7707()
		{
			IntPtr __0x7703 = WindowFromPoint( Control.MousePosition );
			if( __0x7703 != IntPtr.Zero )
				return Control.FromHandle( __0x7703 );
			return null;
		}

		public static void Update()
		{
			EngineToolTip.UpdateAllInstances();

			var __0x7704 = __0x7707();

			if( __0x7698 != __0x7704 )
			{
				
				__0x7698 = null;
				__0x7702?.Close();
				__0x7702 = null;

				
				if( __0x7704 != null )
				{
					(EngineToolTip toolTip, string text) __0x7705 = EngineToolTip.GetToolTipByControl( __0x7704 );
					if( __0x7705.toolTip != null && !string.IsNullOrEmpty( __0x7705.text ) )
					{
						__0x7698 = __0x7704;
						__0x7699 = __0x7705.text;
						__0x7700 = EngineApp.GetSystemTime();
						__0x7701 = Control.MousePosition;
					}
				}
			}

			
			if( __0x7698 != null && __0x7702 == null )
			{
				
				if( __0x7701 != Control.MousePosition )
				{
					__0x7701 = Control.MousePosition;
					__0x7700 = EngineApp.GetSystemTime();
				}

				
				if( EngineApp.GetSystemTime() > __0x7700 + __0x7697 )
				{
					__0x7702 = new EngineToolTipForm( __0x7699 );
					__0x7702.StartPosition = FormStartPosition.Manual;
					var __0x7706 = Control.MousePosition;
					__0x7702.Location = new Point( __0x7706.X, __0x7706.Y + (int)( 16.0f * EditorAPI.DPIScale ) );
					__0x7702.Show();
				}
			}
		}

		internal static void Hide( Control control )
		{
			if( __0x7698 == control )
			{
				__0x7698 = null;
				try
				{
					__0x7702?.Close();
				}
				catch { }
				__0x7702 = null;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCColorPreviewButton : KryptonButton
	{
		public HCColorPreviewButton()
		{
			Text = "";
		}

		ColorValue __0x7708;

		public ColorValue PreviewColor
		{
			get
			{
				return __0x7708;
			}
			set
			{
				if( __0x7708 == value )
					return;
				__0x7708 = value;
				Invalidate();
			}
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			var __0x7709 = DisplayRectangle;
			__0x7709.Inflate( -1, -1 );

			int[] __0x7710 = new int[ 4 ];
			for( int __0x7711 = 0; __0x7711 < 4; __0x7711++ )
			{
				int __0x7712 = (int)( PreviewColor[ __0x7711 ] * 255.0f );
				if( __0x7712 < 0 )
					__0x7712 = 0;
				if( __0x7712 > 255 )
					__0x7712 = 255;
				__0x7710[ __0x7711 ] = __0x7712;
			}

#if !ANDROID && !IOS
			if( PreviewColor.Alpha != 1 )
			{
				using( HatchBrush __0x7713 = new HatchBrush( HatchStyle.LargeCheckerBoard,
					Color.FromArgb( 128, 128, 128 ), Color.FromArgb( 192, 192, 192 ) ) )
				{
					e.Graphics.FillRectangle( __0x7713, __0x7709 );
				}
			}

			Color __0x7714 = Color.FromArgb( 255, __0x7710[ 0 ], __0x7710[ 1 ], __0x7710[ 2 ] );
			Color __0x7715 = Color.FromArgb( __0x7710[ 3 ], __0x7710[ 0 ], __0x7710[ 1 ], __0x7710[ 2 ] );

			using( LinearGradientBrush __0x7716 = new LinearGradientBrush( __0x7709, __0x7714, __0x7715, 90, false ) )
			{
				e.Graphics.FillRectangle( __0x7716, __0x7709 );
			}
#endif 
		}
	}
}





namespace NeoAxis.Editor
{
	
	[AttributeUsage( AttributeTargets.Class | AttributeTargets.Struct )]
	public class HCExpandableAttribute : Attribute
	{
		public HCExpandableAttribute()
		{
		}
	}

	[AttributeUsage( AttributeTargets.Property | AttributeTargets.Field )]
	public class HCTextBoxPasswordAttribute : Attribute
	{
		char? __0x7717;

		public HCTextBoxPasswordAttribute()
		{
		}

		public HCTextBoxPasswordAttribute( char passwordChar )
		{
			this.__0x7717 = passwordChar;
		}

		public char? PasswordChar
		{
			get { return __0x7717; }
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCDropDownControl : EUserControl
	{
		public bool Resizable { get; set; }
		public bool UseFormDropDownHolder { get; set; }
		public IDropDownHolder ParentHolder { get; set; }

		public HCDropDownControl()
		{
			MinimumSize = new Size( 1, 1 );
			MaximumSize = new Size( 10000, 10000 );
		}

		public virtual void OnCommitChanges()
		{ }

		public virtual void OnCancelChanges()
		{ }

		public virtual void OnHolderOpened()
		{ }

		public void AddOkCancelButtons( out KryptonButton buttonOK, out KryptonButton buttonCancel )
		{
			var __0x7718 = DpiHelper.Default.ScaleValue( new Size( 94, 26 ) );

			buttonOK = new KryptonButton();
			buttonOK.Size = __0x7718;
			buttonOK.Text = "OK";
			buttonOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonOK.Location = new Point( Width - __0x7718.Width - buttonOK.Width - 20, Height - buttonOK.Height - 10 );
			buttonOK.Click += ( __0x7720, __0x7721 ) => ParentHolder.Close( true );
			Controls.Add( buttonOK );

			buttonCancel = new KryptonButton();
			buttonCancel.Size = __0x7718;
			buttonCancel.Text = "Cancel";
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.Location = new Point( Size - buttonCancel.Size - new Size( 10, 10 ) );
			buttonCancel.Click += ( __0x7722, __0x7723 ) => ParentHolder.Close( false );
			Controls.Add( buttonCancel );

			Height += buttonCancel.Height + 10;

			buttonOK.Text = EditorLocalization.Translate( "General", buttonOK.Text );
			buttonCancel.Text = EditorLocalization.Translate( "General", buttonCancel.Text );
		}

		protected override void WndProc( ref Message m )
		{
			if( Parent is IDropDownHolder holder && holder.ProcessResizing( ref m ) )
				return;

			base.WndProc( ref m );
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x7719 = base.CreateParams;
				__0x7719.ExStyle |= 0x02000000;
				return __0x7719;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public static class HCExtensions
	{
		public delegate void OverridePropertyReadOnlyDelegate( HCItemProperty __0x7752, ref bool? __0x7753 );
		public static event OverridePropertyReadOnlyDelegate OverridePropertyReadOnly;
		
		

		public static void PerformOverridePropertyReadOnly( HCItemProperty itemProperty, ref bool? readOnly )
		
		{
			
			OverridePropertyReadOnly?.Invoke( itemProperty, ref readOnly );
			
			
			

			var __0x7724 = itemProperty.Property;

			
			if( __0x7724.Name == "Position" || __0x7724.Name == "Rotation" || __0x7724.Name == "Scale" )
			{
				var __0x7725 = __0x7724.Owner as Metadata.NetTypeInfo;
				if( __0x7725 != null && __0x7725.Type == typeof( Transform ) )
				{
					readOnly = false;
					
				}
			}

			
			if( __0x7724.Name == "Length" )
			{
				var __0x7726 = __0x7724.Owner as Metadata.TypeInfo;
				if( __0x7726 != null && __0x7726.GetNetType() == typeof( Array ) )
				{
					var __0x7727 = itemProperty.Parent as HCItemProperty;
					if( __0x7727 != null && !__0x7727.Property.ReadOnly )
					{
						readOnly = false;
						
					}
				}
			}

			
			if( __0x7724.Name == "Count" )
			{
				var __0x7728 = __0x7724.Owner as Metadata.TypeInfo;
				if( __0x7728 != null && HCItemProperty.IsListType( __0x7728.GetNetType() ) )
				{
					readOnly = false;
					
				}
			}
		}

		

		public delegate void OverridePropertySetValueDelegate( HCItemProperty.PropertySetValueData __0x7754 );
		public static event OverridePropertySetValueDelegate OverridePropertySetValue;

		public static void PerformOverridePropertySetValue( HCItemProperty.PropertySetValueData data )
		{
			OverridePropertySetValue?.Invoke( data );

			var __0x7729 = data.itemProperty.Property;

			
			if( data.parentItemProperty != null && ReferenceUtility.GetUnreferencedType( data.parentItemProperty.Property.Type.GetNetType() ) == typeof( Transform ) )
			{
				for( int __0x7730 = 0; __0x7730 < data.itemProperty.ControlledObjects.Length; __0x7730++ )
				{
					var __0x7731 = data.itemProperty.ControlledObjects[ __0x7730 ];
					if( __0x7729.Name == "Position" )
						data.itemProperty.ControlledObjects[ __0x7730 ] = __0x7731.GetType().GetMethod( "UpdatePosition" ).Invoke( __0x7731, new object[] { data.value } );
					else if( __0x7729.Name == "Rotation" )
						data.itemProperty.ControlledObjects[ __0x7730 ] = __0x7731.GetType().GetMethod( "UpdateRotation" ).Invoke( __0x7731, new object[] { data.value } );
					else if( __0x7729.Name == "Scale" )
						data.itemProperty.ControlledObjects[ __0x7730 ] = __0x7731.GetType().GetMethod( "UpdateScale" ).Invoke( __0x7731, new object[] { data.value } );
				}

				data.setValueHandled = true;
			}

			
			if( __0x7729.Name == "Length" )
			{
				var __0x7732 = __0x7729.Owner as Metadata.TypeInfo;
				if( __0x7732 != null && __0x7732.GetNetType() == typeof( Array ) )
				{
					int __0x7733 = (int)data.unrefValue;

					for( int __0x7734 = 0; __0x7734 < data.parentItemProperty.ControlledObjects.Length; __0x7734++ )
					{
						var __0x7735 = (IList)ReferenceUtility.GetUnreferencedValue( data.itemProperty.ControlledObjects[ __0x7734 ] );
						if( __0x7735 != null && __0x7735.Count != __0x7733 )
						{
							var __0x7736 = Array.CreateInstance( __0x7735.GetType().GetElementType(), __0x7733 );
							Array.Copy( (Array)__0x7735, __0x7736, Math.Min( __0x7733, __0x7735.Count ) );

							

							data.parentItemProperty.SetValue( __0x7736, data.addUndo );
						}
					}

					data.setValueHandled = true;
					data.addUndoHandled = true;
					data.updateParentPropertyHandled = true;
				}
			}

			
			if( __0x7729.Name == "Count" )
			{
				var __0x7737 = __0x7729.Owner as Metadata.TypeInfo;
				if( __0x7737 != null && HCItemProperty.IsListType( __0x7737.GetNetType() ) )
				{
					int __0x7738 = (int)data.unrefValue;

					for( int __0x7739 = 0; __0x7739 < data.parentItemProperty.ControlledObjects.Length; __0x7739++ )
					{
						var __0x7740 = (IList)ReferenceUtility.GetUnreferencedValue( data.itemProperty.ControlledObjects[ __0x7739 ] );
						if( __0x7740 != null )
						{
							if( __0x7738 < __0x7740.Count )
							{
								

								if( !data.addUndoHandled && data.addUndo && data.itemProperty.Owner.DocumentWindow?.Document != null )
								{
									

									var __0x7741 = new List<int>();
									for( int __0x7742 = __0x7738; __0x7742 < __0x7740.Count; __0x7742++ )
										__0x7741.Add( __0x7742 );
									var __0x7743 = new UndoActionListAddRemove( __0x7740, __0x7741, false );

									DocumentInstance __0x7744 = data.itemProperty.Owner.DocumentWindow.Document;
									__0x7744.UndoSystem.CommitAction( __0x7743 );
									__0x7744.Modified = true;
								}
								else
								{
									
									while( __0x7740.Count > __0x7738 )
										__0x7740.RemoveAt( __0x7740.Count - 1 );
								}
							}
							else if( __0x7738 > __0x7740.Count )
							{
								

								var __0x7745 = new List<int>();
								for( int __0x7746 = __0x7740.Count; __0x7746 < __0x7738; __0x7746++ )
									__0x7745.Add( __0x7746 );

								var __0x7747 = __0x7740.GetType().GetGenericArguments()[ 0 ];
								while( __0x7740.Count < __0x7738 )
								{
									object __0x7748 = null;
									var __0x7749 = __0x7740 as IReferenceList;
									if( __0x7749 != null )
										__0x7748 = Activator.CreateInstance( __0x7749.GetItemType() );
									else if( __0x7747.IsValueType )
										__0x7748 = Activator.CreateInstance( __0x7747 );
									__0x7740.Add( __0x7748 );
								}

								
								if( !data.addUndoHandled && data.addUndo && data.itemProperty.Owner.DocumentWindow?.Document != null )
								{
									var __0x7750 = new UndoActionListAddRemove( __0x7740, __0x7745, true );

									DocumentInstance __0x7751 = data.itemProperty.Owner.DocumentWindow.Document;
									__0x7751.UndoSystem.CommitAction( __0x7750 );
									__0x7751.Modified = true;
								}
							}
						}
					}

					data.setValueHandled = true;
					data.addUndoHandled = true;
					data.updateParentPropertyHandled = true;
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCCheckBox
	{
		Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox CheckBox1 { get; }
		bool CheckBox1SetText { get; }
	}

	/// <summary>
	/// Represents a check box item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemCheckBox : HCItemProperty
	{
		bool __0x7755 = true;

		

		public HCItemCheckBox( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridCheckBox();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7756 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			__0x7756.CheckBox1.CheckedChanged += __0x7766;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7757 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			var __0x7758 = GetValues();
			if( __0x7758 == null )
				return;

			bool __0x7759 = false;
			bool __0x7760 = false;
			foreach( var __0x7765 in __0x7758 )
			{
				bool __0x7761 = (bool)ReferenceUtility.GetUnreferencedValue( __0x7765 );
				if( !__0x7761 )
					__0x7759 = true;
				if( __0x7761 )
					__0x7760 = true;
			}

			string __0x7762 = Property.Name;
			
			
			
			
			
			
			
			

			if( __0x7757.CheckBox1SetText )
				__0x7757.CheckBox1.Text = __0x7762;
			else
				__0x7757.CheckBox1.Text = "";

			__0x7757.CheckBox1.Enabled = CanEditValue();

			__0x7755 = false;

			if( __0x7759 && __0x7760 )
			{
				__0x7757.CheckBox1.ThreeState = true;
				__0x7757.CheckBox1.CheckState = CheckState.Indeterminate;
			}
			else
			{
				__0x7757.CheckBox1.ThreeState = false;
				__0x7757.CheckBox1.CheckState = __0x7760 ? CheckState.Checked : CheckState.Unchecked;
			}

			__0x7755 = true;
		}

		private void __0x7766( object __0x7767, EventArgs __0x7768 )
		{
			if( !__0x7755 )
				return;

			var __0x7763 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			object __0x7764 = __0x7763.CheckBox1.Checked;

			SetValue( __0x7764, true );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCCollection
	{
		EngineTextBox Label2 { get; }
		Internal.ComponentFactory.Krypton.Toolkit.KryptonButton ButtonEdit { get; }
	}

	public class HCItemCollection : HCItemProperty
	{
		public HCItemCollection( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridCollection();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			
			
			var __0x7769 = (IHCCollection)CreatedControlInsidePropertyItemControl;
			__0x7769.Label2.MouseUp += Control_MouseUp_ResetDefaultValue;

			
		}

		public virtual string GetValueText( object value )
		{
			if( value.GetType().IsArray )
			{
				int __0x7770 = (int)value.GetType().GetProperty( "Length" ).GetValue( value, null );
				return $"Length: {__0x7770}";
			}
			else
			{
				int __0x7771 = (int)value.GetType().GetProperty( "Count" ).GetValue( value, null );
				return $"Count: {__0x7771}";
			}
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7772 = (IHCCollection)CreatedControlInsidePropertyItemControl;
			var __0x7773 = GetValues();
			if( __0x7773 == null )
				return;

			var __0x7774 = "";

			for( int __0x7775 = 0; __0x7775 < __0x7773.Length; __0x7775++ )
			{
				var __0x7776 = __0x7773[ __0x7775 ];
				var __0x7777 = ReferenceUtility.GetUnreferencedValue( __0x7776 );
				string __0x7778;
				if( __0x7777 != null )
					__0x7778 = GetValueText( __0x7777 );
				else
					__0x7778 = "(Null)";

				if( __0x7775 == 0 )
					__0x7774 = __0x7778;
				else
				{
					if( __0x7774 != __0x7778 )
						__0x7774 = "";
				}
			}

			if( __0x7772.Label2 != null )
				__0x7772.Label2.Text = __0x7774;
		}

		
		
		
		
		

		
		

		

		
		
		
	}
}





namespace NeoAxis.Editor
{
	public interface IHCColorValue : IHCTextBox
	{
		HCColorPreviewButton PreviewButton { get; }
	}

	public class HCItemColorValue : HCItemTextBox
	{
		public HCItemColorValue( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridColorValue();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7779 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			__0x7779.PreviewButton.Click += __0x7790;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7780 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			__0x7789();
		}

		protected override void GetExpandablePropertiesFilter( Metadata.Property p, ref bool skip )
		{
			base.GetExpandablePropertiesFilter( p, ref skip );

			
			if( p.Name == "Alpha" && Property.GetCustomAttributes( typeof( ColorValueNoAlphaAttribute ), true ).Length != 0 )
				skip = true;
		}

		void __0x7789()
		{
			var __0x7781 = GetValues();
			if( __0x7781 == null )
				return;

			var __0x7782 = ColorValue.Zero;

			for( int __0x7783 = 0; __0x7783 < __0x7781.Length; __0x7783++ )
			{
				var __0x7784 = __0x7781[ __0x7783 ];
				var __0x7785 = ReferenceUtility.GetUnreferencedValue( __0x7784 );

				ColorValue __0x7786;
				if( __0x7785 is ColorValuePowered )
					__0x7786 = ( (ColorValuePowered)__0x7785 ).Color;
				else
					__0x7786 = (ColorValue)__0x7785;

				if( __0x7783 == 0 )
					__0x7782 = __0x7786;
				else
				{
					if( __0x7782 != __0x7786 )
						__0x7782 = ColorValue.One;
				}
			}

			var __0x7787 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			if( __0x7787 != null )
				__0x7787.PreviewButton.PreviewColor = __0x7782;
		}

		private void __0x7790( object __0x7791, EventArgs __0x7792 )
		{
			var __0x7788 = (IHCColorValue)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
			{
				Owner.ToggleDropDown( EditorAssemblyInterface.Instance.CreateColorValuePoweredSelectControl( this ), __0x7788.PreviewButton );
				
			}
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCColorValuePowered : IHCColorValue
	{
		Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar TrackBarPower { get; }
	}

	public class HCItemColorValuePowered : HCItemColorValue
	{
		ApplicableRangeColorValuePowerAttribute __0x7793;

		bool __0x7794;
		bool __0x7795;
		HCItemProperty __0x7796;
		bool __0x7797;

		

		public HCItemColorValuePowered( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridColorValuePowered();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7798 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			
			

			
			var __0x7799 = Property.GetCustomAttributes( typeof( ApplicableRangeColorValuePowerAttribute ), true );
			if( __0x7799.Length != 0 )
				__0x7793 = (ApplicableRangeColorValuePowerAttribute)__0x7799[ 0 ];
			if( __0x7793 == null )
				__0x7793 = new ApplicableRangeColorValuePowerAttribute( 0, 100, RangeAttribute.ConvenientDistributionEnum.Exponential, 2 );

			
			
			{
				var __0x7800 = __0x7798.TrackBarPower;

				__0x7797 = true;
				__0x7793.GetTrackBarMinMax( false, out int min, out int max );
				__0x7800.Minimum = min;
				__0x7800.Maximum = max;
				__0x7800.LargeChange = ( __0x7800.Maximum - __0x7800.Minimum ) / 10;
				__0x7800.SmallChange = ( __0x7800.Maximum - __0x7800.Minimum ) / 100;
				__0x7797 = false;

				__0x7800.GotFocus += __0x7827;
				__0x7800.LostFocus += __0x7829;
				__0x7800.MouseUp += __0x7830;
				__0x7800.ValueChanged += __0x7831;
			}

			
			
			
			
			
			
			
			
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7801 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x7802 = __0x7801.TrackBarPower;

			if( __0x7793 != null )
			{
				var __0x7803 = Property.Type.GetNetType();
				bool __0x7804 = ReferenceUtility.IsReferenceType( __0x7803 );

				var __0x7805 = GetValues();
				if( __0x7805 != null )
				{
					__0x7802.Enabled = CanEditValue();
					
					
					
					
					

					
					if( !__0x7795 )
						__0x7826();
				}
			}
		}

		void __0x7826()
		{
			var __0x7806 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x7807 = __0x7806.TrackBarPower;

			var __0x7808 = GetValues();
			if( __0x7808 == null )
				return;

			int __0x7809 = 0;

			for( int __0x7810 = 0; __0x7810 < __0x7808.Length; __0x7810++ )
			{
				var __0x7811 = __0x7808[ __0x7810 ];
				var __0x7812 = ReferenceUtility.GetUnreferencedValue( __0x7811 );
				var __0x7813 = ( (ColorValuePowered)__0x7812 ).Power;
				var __0x7814 = __0x7793.GetTrackBarValue( false, __0x7813 );

				if( __0x7810 == 0 )
					__0x7809 = __0x7814;
				else
				{
					if( __0x7809 != __0x7814 )
						__0x7809 = __0x7806.TrackBarPower.Minimum;
				}
			}

			if( __0x7807.Value != __0x7809 )
			{
				__0x7797 = true;
				__0x7807.Value = __0x7809;
				__0x7797 = false;
			}
		}

		protected override void TextBoxTextChanged()
		{
			base.TextBoxTextChanged();

			if( __0x7793 != null )
				__0x7826();
		}

		private void __0x7827( object __0x7832, EventArgs __0x7833 )
		{
			__0x7794 = true;
		}

		void __0x7828()
		{
			
			if( __0x7795 )
			{
				__0x7796.AddUndoActionWithSavedValuesToRestore();
				__0x7795 = false;
			}
		}

		private void __0x7829( object __0x7834, EventArgs __0x7835 )
		{
			__0x7794 = false;

			var __0x7815 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			if( !__0x7815.TextBox.ReadOnly )
				__0x7828();
		}

		private void __0x7830( object __0x7836, MouseEventArgs __0x7837 )
		{
			var __0x7816 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			if( !__0x7816.TextBox.ReadOnly )
				__0x7828();
		}

		private void __0x7831( object __0x7838, EventArgs __0x7839 )
		{
			if( __0x7797 )
				return;

			
			if( !__0x7794 )
				return;

			
			if( !__0x7795 )
			{
				__0x7796 = GetItemInHierarchyToRestoreValues();
				__0x7796.SaveValuesToRestore();
				__0x7795 = true;
			}

			var __0x7817 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x7818 = __0x7817.TrackBarPower;

			__0x7797 = true;

			var __0x7819 = Property.Type.GetNetType();
			var __0x7820 = ReferenceUtility.GetUnreferencedType( __0x7819 );


			var __0x7821 = GetValues();
			if( __0x7821 == null )
				return;

			
			var __0x7822 = __0x7821[ 0 ];

			var __0x7823 = ReferenceUtility.GetUnreferencedValue( __0x7822 );

			var __0x7824 = (ColorValuePowered)__0x7823;

			try
			{
				var __0x7825 = __0x7793.GetValueFromTrackBar( false, __0x7818.Value );
				__0x7824.Power = (float)__0x7825;

				SetValue( __0x7824, false );
			}
			catch
			{
			}

			__0x7797 = false;
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCItemEnumDropDown : HCItemProperty
	{
		object __0x7840;

		public HCItemEnumDropDown( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridDropDownButton();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7841 = (IHCDropDownButton)CreatedControlInsidePropertyItemControl;
			__0x7841.Button.MouseUp += Control_MouseUp_ResetDefaultValue;
			__0x7841.Button.DropDown += __0x7854;
		}

		private void __0x7854( object __0x7855, Internal.ComponentFactory.Krypton.Toolkit.ContextPositionMenuArgs __0x7856 )
		{
			var __0x7842 = (HCGridDropDownButton)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
				Owner.ToggleDropDown( new EnumDropDownControl( this ), __0x7842.Button );
			else
				Owner.ToggleDropDown( null, null );
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			bool __0x7843 = !CanEditValue();
			var __0x7844 = (HCGridDropDownButton )CreatedControlInsidePropertyItemControl;
			__0x7844.Button.Enabled = !__0x7843;

			
			__0x7844.Button.Width = __0x7844.Width - __0x7844.Button.Location.X;

			var __0x7845 = GetValues();
			if( __0x7845 == null )
				return;

			object __0x7846 = null;

			for( int __0x7847 = 0; __0x7847 < __0x7845.Length; __0x7847++ )
			{
				var __0x7848 = __0x7845[ __0x7847 ];
				object __0x7849 = ReferenceUtility.GetUnreferencedValue( __0x7848 );

				if( __0x7847 == 0 )
					__0x7846 = __0x7849;
				else
				{
					if( !Equals( __0x7846, __0x7849 ) )
						__0x7846 = "";
				}
			}

			if( !Equals( __0x7840, __0x7846 ) )
			{
				OnValueChanged( __0x7840, __0x7846 );
				__0x7840 = __0x7846;
			}
		}

		protected virtual void OnValueChanged( object oldValue, object newValue )
		{
			var __0x7850 = (IHCDropDownButton)CreatedControlInsidePropertyItemControl;

			var __0x7851 = EnumUtility.GetValueDisplayName( newValue );

			var __0x7852 = EnumUtility.GetValueDescription( newValue );
			Owner.PerformOverridePropertyEnumItem( this, ref __0x7851, ref __0x7852 );

			__0x7850.Button.Text = __0x7851;

			var __0x7853 = (IHCProperty)CreatedControl;
			__0x7853.SetToolTip( __0x7850.Button, __0x7852 );

			

			
			
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCGroup
	{
		Label Label1 { get; }
	}

	/// <summary>
	/// Represents a group item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemGroup : HierarchicalContainer.Item
	{
		string __0x7857;

		public HCItemGroup( HierarchicalContainer owner, HierarchicalContainer.Item parent, string name )
			: base( owner, parent )
		{
			this.__0x7857 = name;
		}

		public override EUserControl CreateControlImpl()
		{
			
			return new HCGridGroup();
			
			
		}

		public string Name
		{
			get { return __0x7857; }
		}

		public override void UpdateControl()
		{
			var __0x7858 = (IHCGroup)CreatedControl;

			if( __0x7858.Label1 != null )
			{
				var __0x7859 = __0x7857;
				Owner.PerformOverrideGroupDisplayName( this, ref __0x7859 );
				__0x7858.Label1.Text = __0x7859;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCLabel
	{
		
		EngineTextBox Label2 { get; }
	}

	public class HCItemLabel : HCItemProperty
	{
		public HCItemLabel( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridLabel();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			
			
			var __0x7860 = (IHCLabel)CreatedControlInsidePropertyItemControl;
			__0x7860.Label2.MouseUp += Control_MouseUp_ResetDefaultValue;
		}

		public static string GetValueText( object value )
		{
			if( value == null )
				return "(Null)";

			
			var __0x7861 = value as Component;
			if( __0x7861 != null )
			{
				if( string.IsNullOrEmpty( __0x7861.Name ) )
				{
					if( __0x7861.HierarchyController != null && __0x7861.HierarchyController.CreatedByResource != null )
					{
						var __0x7862 = __0x7861.HierarchyController.CreatedByResource.Owner;
						if( __0x7862.LoadFromFile )
						{
							var __0x7863 = Path.GetFileName( __0x7862.Name );
							if( !string.IsNullOrEmpty( __0x7863 ) )
								return __0x7863;
						}
					}
				}
			}

			return value.ToString();
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7864 = (IHCLabel)CreatedControlInsidePropertyItemControl;
			var __0x7865 = GetValues();
			if( __0x7865 == null )
				return;

			var __0x7866 = "";

			for( int __0x7867 = 0; __0x7867 < __0x7865.Length; __0x7867++ )
			{
				var __0x7868 = __0x7865[ __0x7867 ];
				var __0x7869 = ReferenceUtility.GetUnreferencedValue( __0x7868 );
				var __0x7870 = GetValueText( __0x7869 );

				if( __0x7867 == 0 )
					__0x7866 = __0x7870;
				else
				{
					if( __0x7866 != __0x7870 )
						__0x7866 = "";
				}
			}

			if( __0x7864.Label2 != null )
				__0x7864.Label2.Text = __0x7866;

			if( Property != null )
			{
				if( __0x7864.Label2.Enabled != !Property.ReadOnly )
					__0x7864.Label2.Enabled = !Property.ReadOnly;
			}

			
			

			

			
			
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a type member for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public abstract class HCItemMember : HierarchicalContainer.Item
	{
		object[] __0x7871;

		public HCItemMember( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects )
			: base( owner, parent )
		{
			this.__0x7871 = controlledObjects;
		}

		public object[] ControlledObjects
		{
			get { return __0x7871; }
			set { __0x7871 = value; }
		}

		public abstract Metadata.Member Member
		{
			get;
		}

		public T GetOneControlledObject<T>() where T : class
		{
			if( ControlledObjects.Length == 1 )
			{
				var __0x7872 = ControlledObjects[ 0 ] as T;
				if( __0x7872 != null )
					return __0x7872;
			}
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCProperty
	{
		Label LabelName { get; }

		void ButtonExpandInit();
		KryptonButton ButtonExpand { get; }

		void ButtonDefaultValueInit();
		KryptonButton ButtonDefaultValue { get; }

		void ButtonReferenceInit();
		KryptonButton ButtonReference { get; }

		void ButtonReferenceSetToolTip( string value );
		void LabelNameSetText( string value );
		void LabelNameSetToolTip( string value );
		void SetToolTip( Control control, string caption );

		void ButtonTypeInit();
		KryptonButton ButtonType { get; }
		

		bool ShowOnlyEditorControl { get; set; }

		
		Control EditorControl { get; set; }
	}

	/// <summary>
	/// Represents a property item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public abstract class HCItemProperty : HCItemMember
	{
		Metadata.Property __0x7873;
		object[] __0x7874;
		Metadata.Property __0x7875;

		EUserControl __0x7876;
		

		bool __0x7877;
		bool? __0x7878;

		bool __0x7879;
		bool? __0x7880;

		object[] __0x7881;
		object[] __0x7882;

		bool __0x7883;
		bool __0x7884;

		string __0x7885;
		string __0x7886;

		bool __0x7887;
		bool? __0x7888;

		bool __0x7889;

		

		public HCItemProperty( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects )
		{
			this.__0x7873 = property;
			this.__0x7874 = indexers;

			try
			{
				var __0x7890 = property.GetCustomAttribute<UndoDependentPropertyAttribute>();
				if( __0x7890 != null )
				{
					var __0x7891 = MetadataManager.MetadataGetType( controlledObjects[ 0 ] );
					__0x7875 = __0x7891.MetadataGetMemberBySignature( "property:" + __0x7890.PropertyName ) as Metadata.Property;
				}
			}
			catch { }
		}

		public Metadata.Property Property
		{
			get { return __0x7873; }
		}

		public object[] Indexers
		{
			get { return __0x7874; }
		}

		public override Metadata.Member Member
		{
			get { return __0x7873; }
		}

		private bool __0x8087()
		{
			return __0x7874.Length != 0;
		}

		public string DisplayName
		{
			get
			{
				if( __0x7886 == null )
				{
					var __0x7892 = Property.GetCustomAttribute<DisplayNameAttribute>( true );
					if( __0x7892 != null )
					{
						__0x7886 = __0x7892.DisplayName ?? string.Empty;
					}
					else
					{
						if( __0x8087() )
							__0x7886 = __0x8088();
						else
							__0x7886 = TypeUtility.DisplayNameAddSpaces( Property.Name );
					}

					Owner.PerformOverridePropertyDisplayName( this, ref __0x7886 );
				}
				return __0x7886;
			}
		}

		private string __0x8088()
		{
			var __0x7893 = new StringBuilder();
			
			for( int __0x7894 = 0; __0x7894 < __0x7874.Length; __0x7894++ )
			{
				var __0x7895 = __0x7874[ __0x7894 ];
				if( __0x7894 != 0 )
					__0x7893.Append( ", " );
				__0x7893.Append( __0x7874[ __0x7894 ].ToString() );
			}
			
			return __0x7893.ToString();
		}

		public string Description
		{
			get
			{
				if( __0x7885 == null )
				{
					var __0x7896 = Property.GetCustomAttribute<DescriptionAttribute>( true );
					if( __0x7896 != null )
						__0x7885 = __0x7896.Description;

					if( __0x7885 == null )
					{
						var __0x7897 = XmlDocumentationFiles.GetMemberId( __0x7873 );
						if( !string.IsNullOrEmpty( __0x7897 ) )
							__0x7885 = XmlDocumentationFiles.GetMemberSummary( __0x7897 );
					}

					if( __0x7885 == null )
						__0x7885 = "";

					Owner.PerformOverrideMemberDescription( this, ref __0x7885 );
				}
				return __0x7885;
			}
		}

		public override EUserControl CreateControlImpl()
		{
			
			var __0x7898 = new HCGridProperty();
			
			

			var __0x7899 = (IHCProperty)__0x7898;

			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			

			var __0x7900 = CreateControlInsidePropertyItemControl();

			
			__0x7898.Height = Math.Max( __0x7898.Height, __0x7900.Height );

			__0x7876 = __0x7900;
			ControlInsidePropertyItemControlWasCreated();
			__0x7899.EditorControl = __0x7900;

			
			
			__0x7898.MouseUp += Control_MouseUp_ResetDefaultValue;
			if( __0x7899.LabelName != null )
				__0x7899.LabelName.MouseUp += Control_MouseUp_ResetDefaultValue;

			__0x7900.MouseUp += Control_MouseUp_ResetDefaultValue;

			
			__0x7898.AllowDrop = true;
			__0x7898.DragEnter += __0x8106;
			__0x7898.DragOver += __0x8109;
			__0x7898.DragLeave += __0x8110;
			__0x7898.DragDrop += __0x8111;

			return __0x7898;
		}

		public abstract EUserControl CreateControlInsidePropertyItemControl();

		public EUserControl CreatedControlInsidePropertyItemControl
		{
			get { return __0x7876; }
		}

		public virtual void ControlInsidePropertyItemControlWasCreated() { }

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7901 = (IHCProperty)CreatedControl;
			var __0x7902 = GetValues();
			if( __0x7902 == null )
				return;

			if( __0x7901.LabelName != null )
			{
				__0x7901.LabelNameSetText( DisplayName );
				
				
				__0x7901.LabelNameSetToolTip( !string.IsNullOrEmpty( Description ) ? Description : DisplayName );
			}

			var __0x7903 = Property.Type.GetNetType();
			bool __0x7904 = ReferenceUtility.IsReferenceType( __0x7903 );

			bool __0x7905 = false;
			string __0x7906 = "";
			for( int __0x7907 = 0; __0x7907 < __0x7902.Length; __0x7907++ )
			{
				var __0x7908 = __0x7902[ __0x7907 ];

				if( __0x7904 && __0x7908 != null )
				{
					var __0x7909 = (IReference)__0x7908;
					if( __0x7909.ReferenceSpecified )
					{
						__0x7905 = true;

						if( __0x7907 == 0 )
							__0x7906 = __0x7909.GetByReference;
						else
						{
							if( __0x7906 != __0x7909.GetByReference )
								__0x7906 = "";
						}
					}
				}
			}
			if( __0x7906 == "" )
				__0x7906 = "Different references are specified (multiselection).";

			__0x7879 = __0x7905;

			__0x8089();
			__0x8090( __0x7904, __0x7905, __0x7906 );




			
			
			
			
			

			__0x8091();
			
			

			__0x8092();

			
			
			if( __0x7901 is HCGridProperty gridProp )
			{
				
				
				gridProp.SplitterPosition = Owner.SplitterPosition;
				gridProp.UpdateLayout();
				
				
				

				
			}
		}

		void __0x8089()
		{
			var __0x7910 = (IHCProperty)CreatedControl;

			bool __0x7911 = __0x8102() && !__0x7910.ShowOnlyEditorControl;

			if( __0x7911 && !__0x7877 )
			{
				__0x7877 = true;
				__0x7910.ButtonDefaultValueInit();
				__0x7910.ButtonDefaultValue.Click += __0x8105;
				__0x7910.ButtonDefaultValue.MouseUp += Control_MouseUp_ResetDefaultValue;
			}

			if( __0x7910.ButtonDefaultValue != null )
			{
				if( __0x7910.ButtonDefaultValue.Enabled != __0x7911 )
					__0x7910.ButtonDefaultValue.Enabled = __0x7911;
				if( __0x7910.ButtonDefaultValue.Visible != __0x7911 )
					__0x7910.ButtonDefaultValue.Visible = __0x7911;

				if( __0x7878 != __0x7911 && __0x7910.ButtonDefaultValue.Visible )
				{
					__0x7878 = __0x7911;

					if( EditorAPI.DarkTheme )
						__0x7910.ButtonDefaultValue.Values.Image = __0x7911 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
					else
						__0x7910.ButtonDefaultValue.Values.Image = __0x7911 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
				}
			}
		}

		void __0x8090( bool __0x8113, bool __0x8114, string __0x8115 )
		{
			var __0x7912 = (IHCProperty)CreatedControl;

			if( __0x8113 && !__0x7883 )
			{
				__0x7883 = true;
				__0x7912.ButtonReferenceInit();
				__0x7912.ButtonReference.Click += __0x8095;
				__0x7912.ButtonReference.MouseDown += __0x8096;
				__0x7912.ButtonReference.MouseMove += __0x8097;
				__0x7912.ButtonReference.MouseUp += __0x8099;
			}

			if( __0x7912.ButtonReference != null )
			{
				var __0x7913 = __0x8113 && !__0x7912.ShowOnlyEditorControl;

				if( __0x7912.ButtonReference.Visible != __0x7913 )
					__0x7912.ButtonReference.Visible = __0x7913;
				if( __0x7912.ButtonReference.Enabled != __0x8113 )
					__0x7912.ButtonReference.Enabled = __0x8113;

				if( __0x8113 )
				{
					if( __0x7880 != __0x8114 && __0x7912.ButtonReference.Visible )
					{
						__0x7880 = __0x8114;

						if( EditorAPI.DarkTheme )
							__0x7912.ButtonReference.Values.Image = __0x7880.Value ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "ReferenceEnabled2_Dark" : "ReferenceEnabled2_10_Dark" ) : null;
						else
							__0x7912.ButtonReference.Values.Image = __0x7880.Value ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "ReferenceEnabled2" : "ReferenceEnabled2_10" ) : null;

						
						

						
						
					}
				}

				__0x7912.ButtonReferenceSetToolTip( __0x8114 ? __0x8115 : __0x8098( "The reference is not specified." ) );
				
			}
		}

		void __0x8091()
		{
			var __0x7914 = (IHCProperty)CreatedControl;

			bool __0x7915 = ( CanExpand || Children.Count != 0 ) && !__0x7914.ShowOnlyEditorControl;

			if( __0x7915 && !__0x7887 )
			{
				__0x7887 = true;
				__0x7914.ButtonExpandInit();
				__0x7914.ButtonExpand.Click += __0x8093;
			}

			if( __0x7914.ButtonExpand != null )
			{
				if( __0x7914.ButtonExpand.Visible != __0x7915 )
					__0x7914.ButtonExpand.Visible = __0x7915;
				if( __0x7914.ButtonExpand.Enabled != __0x7915 )
					__0x7914.ButtonExpand.Enabled = __0x7915;

				if( __0x7888 != Expanded && __0x7914.ButtonExpand.Visible )
				{
					__0x7888 = Expanded;

					if( EditorAPI.DarkTheme )
					{
						if( Expanded )
							__0x7914.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Minus_Big_Dark" : "Minus_small_Dark" );
						else
							__0x7914.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big_Dark" : "Plus_small3_Dark" );
					}
					else
					{
						if( Expanded )
							__0x7914.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Minus_Big" : "Minus_small" );
						else
							__0x7914.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big" : "Plus_small3" );
					}
				}
			}
		}

		void __0x8092()
		{
			var __0x7916 = (IHCProperty)CreatedControl;

			var __0x7917 = __0x7873.TypeUnreferenced.GetNetType();
			var __0x7918 = !ReferenceSpecifiedCached;
			
			
			var __0x7919 = !__0x7873.ReadOnly && __0x7917.IsClass && !__0x7917.IsArray && !typeof( Component ).IsAssignableFrom( __0x7917 ) &&
				!__0x7917.IsSealed && !typeof( Metadata.TypeInfo ).IsAssignableFrom( __0x7917 ) && !typeof( ReferenceValueType_Resource ).IsAssignableFrom( __0x7917 ) && !typeof( ReferenceValueType_Member ).IsAssignableFrom( __0x7917 ) && __0x7917 != typeof( object );

			
			if( __0x7919 && __0x7917.IsGenericType && __0x7917.GetGenericTypeDefinition() == typeof( List<> ) )
				__0x7919 = false;

			if( __0x7919 && !__0x7889 )
			{
				__0x7889 = true;
				__0x7916.ButtonTypeInit();
				__0x7916.ButtonType.Click += __0x8112;
			}

			if( __0x7916.ButtonType != null )
			{
				if( __0x7916.ButtonType.Enabled != __0x7918 )
					__0x7916.ButtonType.Enabled = __0x7918;
				if( __0x7916.ButtonType.Visible != __0x7919 )
					__0x7916.ButtonType.Visible = __0x7919;
			}
		}

		private void __0x8093( object __0x8116, EventArgs __0x8117 )
		{
			Expanded = !Expanded;
		}

		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		

		public object[] GetValues()
		{
			
			try
			{
				object[] __0x7920 = new object[ ControlledObjects.Length ];
				for( int __0x7921 = 0; __0x7921 < __0x7920.Length; __0x7921++ )
					__0x7920[ __0x7921 ] = __0x7873.GetValue( ControlledObjects[ __0x7921 ], __0x7874 );
				return __0x7920;
			}
			catch
			{
				return null;
			}
		}

		public object[] GetValues_Dependent()
		{
			if( __0x7875 != null )
			{
				try
				{
					object[] __0x7922 = new object[ ControlledObjects.Length ];
					for( int __0x7923 = 0; __0x7923 < __0x7922.Length; __0x7923++ )
						__0x7922[ __0x7923 ] = __0x7875.GetValue( ControlledObjects[ __0x7923 ], new object[ 0 ] );
					return __0x7922;
				}
				catch
				{
					return null;
				}
			}
			return null;
		}

		public object[] SavedOldValuesToRestore
		{
			get { return __0x7881; }
		}

		public object[] SavedOldValuesToRestore_Dependent
		{
			get { return __0x7882; }
		}

		public void SaveValuesToRestore()
		{
			__0x7881 = GetValues();
			__0x7882 = GetValues_Dependent();
		}

		
		public void RestoreSavedOldValues()
		{
			for( int __0x7924 = 0; __0x7924 < ControlledObjects.Length; __0x7924++ )
			{
				if( __0x7875 != null )
					__0x7875.SetValue( ControlledObjects[ __0x7924 ], __0x7882[ __0x7924 ], new object[ 0 ] );

				__0x7873.SetValue( ControlledObjects[ __0x7924 ], __0x7881[ __0x7924 ], __0x7874 );
			}
		}

		public HCItemProperty GetItemInHierarchyToRestoreValues()
		{
			
			bool __0x7925 = false;
			HCItemProperty __0x7926 = null;
			if( Parent != null )
			{
				__0x7926 = Parent as HCItemProperty;
				if( __0x7926 != null )
				{
					var __0x7927 = __0x7926.Property.Type.GetNetType();
					var __0x7928 = ReferenceUtility.GetUnreferencedType( __0x7927 );

					if( __0x7928.IsValueType )
						__0x7925 = true;
					if( Property.ReadOnly )
						__0x7925 = true;
				}
			}

			
			if( __0x7925 )
				return __0x7926.GetItemInHierarchyToRestoreValues();

			return this;
		}

		public void AddUndoActionWithSavedValuesToRestore()
		{
			if( SavedOldValuesToRestore == null )
				return;

			if( Owner.DocumentWindow != null )
			{
				DocumentInstance __0x7929 = Owner.DocumentWindow.Document;
				if( __0x7929 != null )
				{
					var __0x7930 = new List<UndoActionPropertiesChange.Item>();
					for( int __0x7931 = 0; __0x7931 < ControlledObjects.Length; __0x7931++ )
					{
						if( __0x7875 != null )
						{
							var __0x7932 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x7931 ], __0x7875, SavedOldValuesToRestore_Dependent[ __0x7931 ], new object[ 0 ] );
							__0x7930.Add( __0x7932 );
						}

						var __0x7933 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x7931 ], __0x7873, SavedOldValuesToRestore[ __0x7931 ], __0x7874 );
						__0x7930.Add( __0x7933 );
					}
					if( __0x7930.Count != 0 )
					{
						var __0x7934 = new UndoActionPropertiesChange( __0x7930.ToArray() );
						__0x7929.UndoSystem.CommitAction( __0x7934 );
						__0x7929.Modified = true;
					}
				}
			}
		}

		public class PropertySetValueData
		{
			public HCItemProperty itemProperty;
			public object unrefValue;
			public bool addUndo;
			public object value;
			public HCItemProperty parentItemProperty;
			public bool updateParentProperty;

			public bool setValueHandled;
			public bool addUndoHandled;
			public bool updateParentPropertyHandled;
		}

		public void SetValue( object value, bool addUndo )
		
		{
			var __0x7935 = new PropertySetValueData();
			__0x7935.itemProperty = this;
			__0x7935.unrefValue = ReferenceUtility.GetUnreferencedValue( value );
			
			__0x7935.addUndo = addUndo;

			

			var __0x7936 = Property.Type.GetNetType();
			var __0x7937 = ReferenceUtility.GetUnreferencedType( __0x7936 );

			
			

			if( ReferenceUtility.IsReferenceType( __0x7936 ) )
			{
				if( value != null && value.GetType() == __0x7936 )
					__0x7935.value = value;
				else
					__0x7935.value = ReferenceUtility.MakeReference( ReferenceUtility.GetUnreferencedType( __0x7936 ), value, "" );
			}
			else
				__0x7935.value = value;

			
			if( Parent != null )
			{
				__0x7935.parentItemProperty = Parent as HCItemProperty;
				if( __0x7935.parentItemProperty != null )
				{
					var __0x7938 = __0x7935.parentItemProperty.Property.Type.GetNetType();
					var __0x7939 = ReferenceUtility.GetUnreferencedType( __0x7938 );

					if( __0x7939.IsValueType )
						__0x7935.updateParentProperty = true;
					if( Property.ReadOnly )
						__0x7935.updateParentProperty = true;
				}
			}

			

			object[] __0x7940 = null;
			object[] __0x7941 = null;
			
			
			
			
			
			
			if( addUndo && Owner.DocumentWindow != null && !__0x7935.updateParentProperty )
			{
				if( __0x7875 != null )
				{
					__0x7941 = new object[ ControlledObjects.Length ];
					for( int __0x7942 = 0; __0x7942 < ControlledObjects.Length; __0x7942++ )
						__0x7941[ __0x7942 ] = __0x7875.GetValue( ControlledObjects[ __0x7942 ], new object[ 0 ] );
				}

				__0x7940 = new object[ ControlledObjects.Length ];
				for( int __0x7943 = 0; __0x7943 < ControlledObjects.Length; __0x7943++ )
					__0x7940[ __0x7943 ] = __0x7873.GetValue( ControlledObjects[ __0x7943 ], __0x7874 );
			}
			
			

			HCExtensions.PerformOverridePropertySetValue( __0x7935 );

			
			if( !__0x7935.setValueHandled && !Property.ReadOnly )
			{
				for( int __0x7944 = 0; __0x7944 < ControlledObjects.Length; __0x7944++ )
					__0x7873.SetValue( ControlledObjects[ __0x7944 ], __0x7935.value, __0x7874 );
			}

			
			if( !__0x7935.addUndoHandled && addUndo && Owner.DocumentWindow != null && !__0x7935.updateParentProperty )
			{
				DocumentInstance __0x7945 = Owner.DocumentWindow.Document;
				if( __0x7945 != null )
				{
					var __0x7946 = new List<UndoActionPropertiesChange.Item>();
					for( int __0x7947 = 0; __0x7947 < ControlledObjects.Length; __0x7947++ )
					{
						
						if( __0x7875 != null )
						{
							var __0x7948 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x7947 ], __0x7875, __0x7941[ __0x7947 ], new object[ 0 ] );
							__0x7946.Add( __0x7948 );
						}

						var __0x7949 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x7947 ], __0x7873, __0x7940[ __0x7947 ], __0x7874 );
						__0x7946.Add( __0x7949 );
					}
					if( __0x7946.Count != 0 )
					{
						var __0x7950 = new UndoActionPropertiesChange( __0x7946.ToArray() );
						__0x7945.UndoSystem.CommitAction( __0x7950 );
						__0x7945.Modified = true;
					}
				}
			}

			
			if( !__0x7935.updateParentPropertyHandled && __0x7935.updateParentProperty )
			{
				

				__0x7935.parentItemProperty.SetValue( ControlledObjects[ 0 ], addUndo );
			}
		}

		
		
		
		

		
		
		
		
		

		
		
		
		

		Component[] __0x8094()
		{
			Component[] __0x7951 = new Component[ ControlledObjects.Length ];
			for( int __0x7952 = 0; __0x7952 < __0x7951.Length; __0x7952++ )
			{
				var __0x7953 = ControlledObjects[ __0x7952 ] as IReferenceList;
				if( __0x7953 != null )
					__0x7951[ __0x7952 ] = __0x7953.Owner;
				else
					__0x7951[ __0x7952 ] = (Component)ControlledObjects[ __0x7952 ];
			}
			return __0x7951;
		}

		private void __0x8095( object __0x8118, EventArgs __0x8119 )
		{
			EditorAPI.OpenSetReferenceWindow( Owner.DocumentWindow, __0x8094(), ControlledObjects, __0x7873, __0x7874 );
			
		}

		private void __0x8096( object __0x8120, MouseEventArgs __0x8121 )
		{
			if( __0x8121.Button == MouseButtons.Left )
				__0x7884 = true;
		}

		private void __0x8097( object __0x8122, MouseEventArgs __0x8123 )
		{
			var __0x7954 = (IHCProperty)CreatedControl;

			if( __0x7884 )
			{
				var __0x7955 = __0x7954.ButtonReference;
				if( !__0x7955.ClientRectangle.Contains( __0x7955.PointToClient( Control.MousePosition ) ) )
				{
					__0x7884 = false;

					var __0x7956 = new DragDropSetReferenceData();
					__0x7956.document = Owner.DocumentWindow.Document;
					__0x7956.controlledComponents = __0x8094();
					__0x7956.propertyOwners = ControlledObjects;
					
					__0x7956.property = __0x7873;
					__0x7956.indexers = __0x7874;
					__0x7955.DoDragDrop( __0x7956, DragDropEffects.Link );
				}
			}
		}

		string __0x8098( string __0x8124 )
		{
			return EditorLocalization.Translate( "SettingsWindow", __0x8124 );
		}

		private void __0x8099( object __0x8125, MouseEventArgs __0x8126 )
		{
			if( __0x8126.Button == MouseButtons.Left )
				__0x7884 = false;

			if( __0x8126.Button == MouseButtons.Right )
			{
				var __0x7957 = (IHCProperty)CreatedControl;

				var __0x7958 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x7959 = new KryptonContextMenuItem( __0x8098( "Reset Reference" ), null, delegate ( object __0x8127, EventArgs __0x8128 )
					{
						if( __0x7879 )
						{
							var __0x7960 = GetValues();
							if( __0x7960 != null )
							{
								var __0x7961 = __0x7960[ 0 ];
								var __0x7962 = ReferenceUtility.GetUnreferencedValue( __0x7961 );
								
								if( __0x7962 as Component != null )
									__0x7962 = null;

								SetValue( __0x7962, true );
							}
						}
					} );
					__0x7959.Enabled = __0x7879;
					__0x7958.Add( __0x7959 );
				}

				__0x7958.Add( new KryptonContextMenuSeparator() );

				
				{
					var __0x7963 = new KryptonContextMenuItem( __0x8098( "Find Resource" ), null, delegate ( object __0x8129, EventArgs __0x8130 )
					{
						if( __0x7879 )
						{
							var __0x7964 = GetValues();
							if( __0x7964 != null )
							{
								var __0x7965 = __0x7964[ 0 ];

								

								var __0x7966 = ReferenceUtility.GetUnreferencedValue( __0x7965 );
								if( __0x7966 != null )
								{
									
									var __0x7967 = __0x7966 as Component;
									if( __0x7967 != null )
									{
										var __0x7968 = ComponentUtility.GetOwnedFileNameOfComponent( __0x7967 );
										if( !string.IsNullOrEmpty( __0x7968 ) )
										{
											var __0x7969 = VirtualPathUtility.GetRealPathByVirtual( __0x7968 );
											EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x7969 } );
											EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
										}
									}
								}
							}
						}
					} );

					__0x7963.Enabled = false;
					if( __0x7879 )
					{
						var __0x7970 = GetValues();
						if( __0x7970 != null )
						{
							var __0x7971 = __0x7970[ 0 ];

							var __0x7972 = ReferenceUtility.GetUnreferencedValue( __0x7971 );
							if( __0x7972 != null )
							{
								
								var __0x7973 = __0x7972 as Component;
								if( __0x7973 != null )
								{
									var __0x7974 = ComponentUtility.GetOwnedFileNameOfComponent( __0x7973 );
									if( !string.IsNullOrEmpty( __0x7974 ) )
										__0x7963.Enabled = true;
								}

								
								
							}
						}
					}
					
					__0x7958.Add( __0x7963 );
				}

				
				{
					var __0x7975 = new KryptonContextMenuItem( __0x8098( "Open By Reference" ), null, delegate ( object __0x8131, EventArgs __0x8132 )
					{
						if( __0x7879 )
						{
							var __0x7976 = GetValues();
							if( __0x7976 != null )
							{
								var __0x7977 = __0x7976[ 0 ];

								

								var __0x7978 = ReferenceUtility.GetUnreferencedValue( __0x7977 );
								if( __0x7978 != null )
								{
									var __0x7979 = EditorAPI.GetDocumentByObject( __0x7978 );
									if( EditorAPI.IsDocumentObjectSupport( __0x7978 ) )
										EditorAPI.OpenDocumentWindowForObject( __0x7979, __0x7978 );
									else
									{
										
									}

									
									{
										var __0x7980 = __0x7978 as Component;
										if( __0x7980 != null )
										{
											var __0x7981 = ComponentUtility.GetOwnedFileNameOfComponent( __0x7980 );
											if( !string.IsNullOrEmpty( __0x7981 ) )
											{
												var __0x7982 = VirtualPathUtility.GetRealPathByVirtual( __0x7981 );
												EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x7982 } );
												EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
											}
										}
									}
								}
							}
						}
					} );

					__0x7975.Enabled = false;
					if( __0x7879 )
					{
						var __0x7983 = GetValues();
						if( __0x7983 != null )
						{
							var __0x7984 = __0x7983[ 0 ];

							var __0x7985 = ReferenceUtility.GetUnreferencedValue( __0x7984 );
							if( __0x7985 != null )
							{
								
								__0x7975.Enabled = true;
							}
						}
					}
					
					__0x7958.Add( __0x7975 );
				}

				EditorContextMenuWinForms.Show( __0x7958, CreatedControl );
			}
		}

		protected virtual void GetExpandablePropertiesFilter( Metadata.Property property, ref bool skip )
		{
		}

		public static bool IsOneDimensionArray( Type type )
		{
			return type.IsArray && type.GetArrayRank() == 1;
		}

		public static bool IsListType( Type type )
		{
			return type.IsGenericType &&
				( typeof( List<> ).IsAssignableFrom( type.GetGenericTypeDefinition() ) || typeof( ReferenceList<> ).IsAssignableFrom( type.GetGenericTypeDefinition() ) );
			
			
			
			
		}

		public override void Update()
		{
			

			ESet<HierarchicalContainer.Item> __0x7986 = new ESet<HierarchicalContainer.Item>();

			var __0x7987 = GetValues();
			if( __0x7987 == null )
				return;
			object[] __0x7988 = new object[ __0x7987.Length ];
			for( int __0x7989 = 0; __0x7989 < __0x7987.Length; __0x7989++ )
			{
				if( __0x7987[ __0x7989 ] != null )
					__0x7988[ __0x7989 ] = ReferenceUtility.GetUnreferencedValue( __0x7987[ __0x7989 ] );
			}

			
			var __0x7990 = __0x7988[ 0 ];

			if( __0x7990 != null )
			{
				var __0x7991 = MetadataManager.MetadataGetType( __0x7990 );

				
				var __0x7992 = __0x7991.GetCustomAttributes( typeof( HCExpandableAttribute ) );
				if( __0x7992.Length != 0 )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						Dictionary<Metadata.Property, HCItemProperty> __0x7993 = new Dictionary<Metadata.Property, HCItemProperty>();
						foreach( var __0x8076 in Children )
						{
							HCItemProperty __0x7994 = __0x8076 as HCItemProperty;
							if( __0x7994 != null )
								__0x7993.Add( __0x7994.Property, __0x7994 );
						}

						List<Metadata.Property> __0x7995 = new List<Metadata.Property>();
						foreach( var __0x8077 in MetadataManager.MetadataGetMembers( __0x7990 ) )
						{
							var __0x7996 = __0x8077 as Metadata.Property;

							
							if( __0x7996 != null && __0x7996.Browsable && !__0x7996.HasIndexers && !__0x7996.Static )
							{
								bool __0x7997 = false;
								GetExpandablePropertiesFilter( __0x7996, ref __0x7997 );
								if( !__0x7997 )
									__0x7995.Add( __0x7996 );
							}
						}

						foreach( var __0x8078 in __0x7995 )
						{
							if( !__0x7993.TryGetValue( __0x8078, out HCItemProperty item ) )
							{
								Type __0x7998 = Owner.GetSuitableItemType( __0x8078 );
								
								
								

								var __0x7999 = __0x7998.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								

								item = (HCItemProperty)__0x7999.Invoke( new object[] { Owner, this, __0x7988, __0x8078, __0x8078.Indexers } );
							}
							else
							{
								

								item.ControlledObjects = __0x7988;
							}

							__0x7986.Add( item );
						}
					}
				}

				
				if( IsOneDimensionArray( __0x7991.GetNetType() ) )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						var __0x8000 = __0x7991.GetNetType().GetElementType();
						int __0x8001 = (int)__0x7990.GetType().GetProperty( "Length" ).GetValue( __0x7990, null );

						
						var __0x8002 = __0x7991.GetNetType().GetInterface( "IList`1" );
						var __0x8003 = MetadataManager.GetTypeOfNetType( __0x8002 );
						var __0x8004 = (Metadata.Property)__0x8003.MetadataGetMemberBySignature( "property:Item[System.Int32]" );

						HCItemProperty __0x8005 = null;
						Dictionary<int, HCItemProperty> __0x8006 = new Dictionary<int, HCItemProperty>();
						foreach( var __0x8079 in Children )
						{
							HCItemProperty __0x8007 = __0x8079 as HCItemProperty;
							if( __0x8007 != null )
							{
								if( __0x8007.Property.Name == "Length" )
									__0x8005 = __0x8007;
								else if( __0x8007.Property.Name == "Item" )
								{
									int __0x8008 = (int)__0x8007.__0x7874[ 0 ];
									__0x8006.Add( __0x8008, __0x8007 );
								}
							}
						}

						
						{
							HCItemProperty __0x8009 = __0x8005;

							if( __0x8005 == null )
							{
								var __0x8010 = (Metadata.Property)__0x7991.MetadataGetMemberBySignature( "property:Length" );

								Type __0x8011 = Owner.GetSuitableItemType( __0x8010 );

								var __0x8012 = __0x8011.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								__0x8009 = (HCItemProperty)__0x8012.Invoke( new object[] { Owner, this, __0x7988, __0x8010, __0x8010.Indexers } );
							}
							else
							{
								
								__0x8009.ControlledObjects = __0x7988;
							}

							__0x7986.Add( __0x8009 );
						}

						
						if( __0x8001 <= ProjectSettings.Get.General.PropertiesMaxCountCollectionItemsToDisplay )
						{
							for( int __0x8013 = 0; __0x8013 < __0x8001; __0x8013++ )
							{
								if( !__0x8006.TryGetValue( __0x8013, out HCItemProperty item ) )
								{
									Type __0x8014 = Owner.GetSuitableItemType( __0x8004 );

									var __0x8015 = __0x8014.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( HierarchicalContainer.Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

									

									item = (HCItemProperty)__0x8015.Invoke( new object[] { Owner, this, __0x7988, __0x8004, new object[] { __0x8013 } } );
								}
								else
								{
									
									item.ControlledObjects = __0x7988;
								}

								__0x7986.Add( item );
							}
						}
					}
				}

				
				if( IsListType( __0x7991.GetNetType() ) )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						
						int __0x8016 = (int)__0x7990.GetType().GetProperty( "Count" ).GetValue( __0x7990, null );

						
						var __0x8017 = (Metadata.Property)__0x7991.MetadataGetMemberBySignature( "property:Item[System.Int32]" );

						HCItemProperty __0x8018 = null;
						Dictionary<int, HCItemProperty> __0x8019 = new Dictionary<int, HCItemProperty>();
						foreach( var __0x8080 in Children )
						{
							HCItemProperty __0x8020 = __0x8080 as HCItemProperty;
							if( __0x8020 != null )
							{
								if( __0x8020.Property.Name == "Count" )
									__0x8018 = __0x8020;
								else if( __0x8020.Property.Name == "Item" )
								{
									int __0x8021 = (int)__0x8020.__0x7874[ 0 ];
									__0x8019.Add( __0x8021, __0x8020 );
								}
							}
						}

						
						{
							HCItemProperty __0x8022 = __0x8018;

							if( __0x8018 == null )
							{
								var __0x8023 = (Metadata.Property)__0x7991.MetadataGetMemberBySignature( "property:Count" );

								Type __0x8024 = Owner.GetSuitableItemType( __0x8023 );

								var __0x8025 = __0x8024.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								__0x8022 = (HCItemProperty)__0x8025.Invoke( new object[] { Owner, this, __0x7988, __0x8023, __0x8023.Indexers } );
							}
							else
							{
								
								__0x8022.ControlledObjects = __0x7988;
							}

							__0x7986.Add( __0x8022 );
						}

						
						if( __0x8016 <= ProjectSettings.Get.General.PropertiesMaxCountCollectionItemsToDisplay )
						{
							for( int __0x8026 = 0; __0x8026 < __0x8016; __0x8026++ )
							{
								if( !__0x8019.TryGetValue( __0x8026, out HCItemProperty item ) )
								{
									Type __0x8027 = Owner.GetSuitableItemType( __0x8017 );

									var __0x8028 = __0x8027.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( HierarchicalContainer.Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

									

									item = (HCItemProperty)__0x8028.Invoke( new object[] { Owner, this, __0x7988, __0x8017, new object[] { __0x8026 } } );
								}
								else
								{
									
									item.ControlledObjects = __0x7988;
								}

								__0x7986.Add( item );
							}
						}
					}
				}
			}

			
			List<HierarchicalContainer.Item> __0x8029 = new List<HierarchicalContainer.Item>();
			foreach( var __0x8081 in Children )
			{
				if( !__0x7986.Contains( __0x8081 ) )
					__0x8029.Add( __0x8081 );
			}

			
			Children.Clear();
			Children.AddRange( __0x7986 );

			
			foreach( var __0x8082 in __0x8029 )
				__0x8082.Dispose();

			
			base.Update();
		}

		bool __0x8100()
		{
			bool? __0x8030 = null;
			HCExtensions.PerformOverridePropertyReadOnly( this, ref __0x8030 );
			if( __0x8030.HasValue )
				return __0x8030.Value;

			return Property.ReadOnly;
		}

		public bool IsReferenceSpecifiedInHierarchy()
		{
			if( __0x7879 )
				return true;

			var __0x8031 = Parent as HCItemProperty;
			if( __0x8031 != null && __0x8031.IsReferenceSpecifiedInHierarchy() )
				return true;

			return false;
		}

		public bool CanEditValue()
		{
			if( __0x8100() )
				return false;
			if( IsReferenceSpecifiedInHierarchy() )
				return false;

			return true;
		}

		void __0x8101( out bool __0x8133, out object __0x8134 )
		{
			var __0x8032 = GetOneControlledObject<Component>();
			if( __0x8032 != null )
			{
				__0x8032.BaseType.GetPropertyDefaultValue( __0x7873, out __0x8133, out __0x8134 );
				return;
			}

			__0x8133 = __0x7873.DefaultValueSpecified;
			__0x8134 = __0x7873.DefaultValue;
		}

		bool __0x8102()
		{
			var __0x8033 = Parent as HCItemProperty;
			if( __0x8033 != null && __0x8033.IsReferenceSpecifiedInHierarchy() )
				return false;

			__0x8101( out var defaultValueSpecified, out var defaultValue );

			if( __0x7879 )
			{
				
				
				if( defaultValueSpecified )
				{
					
					if( defaultValue != null && ReferenceUtility.IsReferenceType( defaultValue.GetType() ) )
					{
						var __0x8034 = GetValues();
						if( __0x8034 != null )
						{
							foreach( var __0x8083 in __0x8034 )
							{
								var __0x8035 = __0x8083 as IReference;
								if( __0x8035 != null && ( (IReference)defaultValue ).GetByReference != __0x8035.GetByReference )
									return true;
							}
							return false;

							

							
							
							
						}
					}
				}

				return true;
			}

			var __0x8036 = ReferenceUtility.GetUnreferencedType( __0x7873.Type.GetNetType() );

			
			
			if( ( IsOneDimensionArray( __0x8036 ) && !__0x7873.ReadOnly ) || IsListType( __0x8036 ) )
			{
				var __0x8037 = GetValues();
				if( __0x8037 != null )
				{
					foreach( var __0x8084 in __0x8037 )
					{
						object __0x8038 = ReferenceUtility.GetUnreferencedValue( __0x8084 );
						if( __0x8038 != null )
						{
							var __0x8039 = __0x8038 as IList;
							if( __0x8039 != null && __0x8039.Count != 0 )
								return true;
						}
					}
				}
				return false;
			}

			if( __0x8100() )
				return false;

			
			if( defaultValueSpecified )
			{
				

				var __0x8040 = GetValues();
				if( __0x8040 != null )
				{
					foreach( var __0x8085 in __0x8040 )
					{
						object __0x8041 = ReferenceUtility.GetUnreferencedValue( __0x8085 );

						bool __0x8042;
						if( defaultValue != null )
						{
							

							if( __0x8041 != null )
							{
								

								if( !( __0x8041 is string ) && defaultValue is string )
								{
									__0x8042 = __0x8041.ToString() == (string)defaultValue;
								}
								else
								{
									if( __0x8041.GetType().IsValueType )
										__0x8042 = __0x8041.Equals( defaultValue );
									else
										__0x8042 = Equals( __0x8041, defaultValue );
								}
							}
							else
								__0x8042 = false;
						}
						else
							__0x8042 = __0x8041 == null;

						if( !__0x8042 )
							return true;
					}
				}
			}

			return false;
		}

		void __0x8103()
		{
			if( !__0x8102() )
				return;

			var __0x8043 = ReferenceUtility.GetUnreferencedType( __0x7873.Type.GetNetType() );

			
			if( IsOneDimensionArray( __0x8043 ) && !Property.ReadOnly )
			{
				var __0x8044 = Array.CreateInstance( __0x8043.GetElementType(), 0 );
				SetValue( __0x8044, true );
				return;
			}

			
			if( IsListType( __0x8043 ) )
			{
				if( !Property.ReadOnly )
				{
					var __0x8045 = __0x8043.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
					SetValue( __0x8045, true );
				}
				else
				{
					var __0x8046 = GetValues();
					if( __0x8046 != null )
					{
						var __0x8047 = new List<UndoSystem.Action>();

						foreach( var __0x8086 in __0x8046 )
						{
							object __0x8048 = ReferenceUtility.GetUnreferencedValue( __0x8086 );

							var __0x8049 = (IList)__0x8048;
							if( __0x8049 != null )
							{
								
								var __0x8050 = new List<int>();
								for( int __0x8051 = 0; __0x8051 < __0x8049.Count; __0x8051++ )
									__0x8050.Add( __0x8051 );
								var __0x8052 = new UndoActionListAddRemove( __0x8049, __0x8050, false );

								__0x8047.Add( __0x8052 );
							}
						}

						if( __0x8047.Count != 0 )
						{
							var __0x8053 = Owner.DocumentWindow.Document;
							__0x8053.UndoSystem.CommitAction( new UndoMultiAction( __0x8047 ) );
							__0x8053.Modified = true;
						}
					}
				}
				return;
			}

			
			__0x8101( out var defaultValueSpecified, out var defaultValue );
			

			try
			{
				object __0x8054 = defaultValue;

				

				

				
				if( defaultValue != null )
				{
					if( __0x8043 != typeof( string ) && defaultValue is string )
					{
						if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x8043 ) )
						{
							var __0x8055 = __0x8043.GetMethod( "Parse", BindingFlags.Public | BindingFlags.Static );
							if( __0x8055 != null )
								__0x8054 = __0x8055.Invoke( null, new object[] { (string)defaultValue } );
						}
						else
							__0x8054 = SimpleTypes.ParseValue( __0x8043, (string)defaultValue );
					}
				}

				if( __0x8054 == null && __0x8043.IsValueType )
					__0x8054 = Activator.CreateInstance( __0x8043 );

				SetValue( __0x8054, true );
			}
			catch
			{
				
			}
		}

		void __0x8104()
		{
			var __0x8056 = new List<KryptonContextMenuItemBase>();

			
			{
				

				

				var __0x8057 = new KryptonContextMenuItem( __0x8098( "Reset To Default" ), null, delegate ( object __0x8135, EventArgs __0x8136 )
				{
					__0x8103();
				} );
				__0x8057.Enabled = __0x8102();
				__0x8056.Add( __0x8057 );
			}

			EditorContextMenuWinForms.Show( __0x8056, CreatedControl );
		}

		private void __0x8105( object __0x8137, EventArgs __0x8138 )
		{
			__0x8104();
		}

		public void Control_MouseUp_ResetDefaultValue( object sender, MouseEventArgs e )
		{
			if( e.Button == MouseButtons.Right )
				__0x8104();
		}

		

		private void __0x8106( object __0x8139, DragEventArgs __0x8140 )
		{
		}

		bool __0x8107( DragEventArgs __0x8141, bool __0x8142 )
		{
			DragDropSetReferenceData __0x8058 = (DragDropSetReferenceData)__0x8141.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x8058 != null )
			{
				var __0x8059 = __0x8094();

				var __0x8060 = __0x8058.controlledComponents;
				var __0x8061 = __0x8060[ 0 ];

				
				var __0x8062 = __0x8059[ 0 ];

				if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x8058.property.TypeUnreferenced, __0x7873.TypeUnreferenced ) &&
					( __0x8061 != __0x8062 || __0x8058.property != __0x7873 ) )
				{
					if( __0x8061.ParentRoot == __0x8062.ParentRoot )
					{
						

						if( !__0x8142 )
						{
							string[] __0x8063 = new string[ __0x8058.controlledComponents.Length ];
							for( int __0x8064 = 0; __0x8064 < __0x8063.Length; __0x8064++ )
								__0x8063[ __0x8064 ] = ReferenceUtility.CalculateThisReference( __0x8060[ __0x8064 ], __0x8062, __0x7873.Name );

							__0x8058.SetProperty( __0x8063 );
						}

						return true;
					}
					else
					{
						

						var __0x8065 = __0x8062.ParentRoot?.HierarchyController.CreatedByResource;
						if( __0x8065 != null )
						{
							if( !__0x8142 )
							{
								var __0x8066 = ReferenceUtility.CalculateResourceReference( __0x8062, __0x7873.Name );

								string[] __0x8067 = new string[ __0x8058.controlledComponents.Length ];
								for( int __0x8068 = 0; __0x8068 < __0x8067.Length; __0x8068++ )
									__0x8067[ __0x8068 ] = __0x8066;

								__0x8058.SetProperty( __0x8067 );
							}

							return true;
						}
					}
				}
			}

			return false;
		}

		bool __0x8108( DragEventArgs __0x8143, bool __0x8144 )
		{
			var __0x8069 = ContentBrowser.GetDroppingItemData( __0x8143.Data );
			if( __0x8069 != null )
			{
				var __0x8070 = __0x8069.Item;

				var __0x8071 = __0x8094();

				string[] __0x8072 = new string[ __0x8071.Length ];
				for( int __0x8073 = 0; __0x8073 < __0x8071.Length; __0x8073++ )
				{
					__0x8070.CalculateReferenceValue( __0x8071[ __0x8073 ], __0x7873.TypeUnreferenced, out string referenceValue, out bool canSet );
					__0x8072[ __0x8073 ] = referenceValue;
					if( !canSet )
					{
						__0x8072 = null;
						break;
					}
				}

				if( __0x8072 != null )
				{
					if( !__0x8144 )
						EditorUtility.SetPropertyReference( Owner.DocumentWindow.Document, ControlledObjects, __0x7873, __0x7874, __0x8072 );
					
					

					return true;
				}
			}

			return false;
		}

		private void __0x8109( object __0x8145, DragEventArgs __0x8146 )
		{
			__0x8146.Effect = DragDropEffects.None;
			if( __0x8107( __0x8146, true ) )
				__0x8146.Effect = DragDropEffects.Link;
			if( __0x8108( __0x8146, true ) )
				__0x8146.Effect = DragDropEffects.Link;
		}

		private void __0x8110( object __0x8147, EventArgs __0x8148 )
		{
		}

		private void __0x8111( object __0x8149, DragEventArgs __0x8150 )
		{
			__0x8107( __0x8150, false );
			__0x8108( __0x8150, false );
		}

		public bool ReferenceSpecifiedCached
		{
			get { return __0x7879; }
		}

		private void __0x8112( object __0x8151, EventArgs __0x8152 )
		{
			var __0x8074 = new SelectTypeWindow.CreationDataClass();
			__0x8074.initDocumentWindow = Owner.DocumentWindow;
			__0x8074.initDemandedType = __0x7873.TypeUnreferenced;
			__0x8074.initCanSelectNull = true;

			__0x8074.WasSelected = delegate ( SelectTypeWindow __0x8153, Metadata.TypeInfo __0x8154, ref bool __0x8155 )
			{
				object __0x8075 = null;
				if( __0x8154 != null )
					__0x8075 = __0x8154.InvokeInstance( null );
				SetValue( __0x8075, true );
			};

			
			

			EditorAPI.OpenSelectTypeWindow( __0x8074 );
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCItemRange : HCItemTextBoxSelect
	{
		public HCItemRange( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		protected override void OnDropDownMouseButtonDown()
		{
			var __0x8156 = (HCGridTextBoxSelect)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
				Owner.ToggleDropDown( new RangeDropDownControl( this ), __0x8156.ButtonSelect );
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCTextBox
	{
		
		EngineTextBox TextBox { get; }
	}

	/// <summary>
	/// Represents a text box item for property for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemTextBox : HCItemProperty
	{
		bool __0x8157;
		bool __0x8158;
		bool __0x8159;

		
		
		bool __0x8160;

		

		public HCItemTextBox( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridTextBox();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8161 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			__0x8161.TextBox.GotFocus += __0x8184;
			__0x8161.TextBox.LostFocus += __0x8186;
			__0x8161.TextBox.KeyDown += __0x8187;
			__0x8161.TextBox.TextChanged += __0x8188;
		}

		private void __0x8184( object __0x8190, EventArgs __0x8191 )
		{
			__0x8157 = true;

			if( !__0x8160 )
			{
				var __0x8162 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
				
				
			}
		}

		void __0x8185()
		{
			TextBoxTextChanged();

			
			
			
			
			
			

			__0x8158 = false;
		}

		private void __0x8186( object __0x8192, EventArgs __0x8193 )
		{
			__0x8157 = false;

			if( __0x8158 )
			{
				var __0x8163 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
				if( !__0x8163.TextBox.ReadOnly )
					__0x8185();
			}
		}

		private void __0x8187( object __0x8194, KeyEventArgs __0x8195 )
		{
			var __0x8164 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			if( !__0x8164.TextBox.ReadOnly )
			{
				if( __0x8195.KeyCode == Keys.Return )
					__0x8185();
			}
		}

		private void __0x8188( object __0x8196, EventArgs __0x8197 )
		{
			if( __0x8159 )
				return;

			if( __0x8157 )
				__0x8158 = true;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8165 = (IHCTextBox)CreatedControlInsidePropertyItemControl;

			
			

			bool __0x8166 = !CanEditValue();
			
			if( __0x8166 )
				__0x8160 = false;

			
			if( __0x8165.TextBox.LikeLabel != __0x8166 )
				__0x8165.TextBox.LikeLabel = __0x8166;

			
			if( __0x8165.TextBox.PasswordChar == '\0' || !__0x8165.TextBox.UseSystemPasswordChar )
			{
				var __0x8167 = Property.GetCustomAttribute<HCTextBoxPasswordAttribute>();
				if( __0x8167 != null )
				{
					if( __0x8167.PasswordChar != null )
						__0x8165.TextBox.PasswordChar = __0x8167.PasswordChar.Value;
					else
						__0x8165.TextBox.UseSystemPasswordChar = true;
				}
			}

			
			if( !__0x8158 && !__0x8160 )
			{
				var __0x8168 = GetValues();
				if( __0x8168 != null )
				{
					var __0x8169 = "";

					for( int __0x8170 = 0; __0x8170 < __0x8168.Length; __0x8170++ )
					{
						var __0x8171 = __0x8168[ __0x8170 ];
						var __0x8172 = Property.Type.GetNetType();
						var __0x8173 = ReferenceUtility.GetUnreferencedValue( __0x8171 );

						string __0x8174;
						if( __0x8173 != null )
						{
							if( __0x8173 is double )
								__0x8174 = ( (double)__0x8173 ).ToString( "0.#################" );
							else if( __0x8173 is float )
								__0x8174 = ( (float)__0x8173 ).ToString( "0.########" );
							else
								__0x8174 = __0x8173.ToString();
						}
						else
							__0x8174 = "";

						if( __0x8170 == 0 )
							__0x8169 = __0x8174;
						else
						{
							if( __0x8169 != __0x8174 )
								__0x8169 = "";
						}
					}

					if( __0x8165.TextBox.Text != __0x8169 )
					{
						__0x8159 = true;
						__0x8165.TextBox.Text = __0x8169;
						__0x8159 = false;
					}
				}
			}

			__0x8165.TextBox.SetError( __0x8160 ? "Invalid value" : "" );
		}

		object __0x8189( out bool __0x8198 )
		{
			var __0x8175 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			var __0x8176 = Property.Type.GetNetType();
			var __0x8177 = ReferenceUtility.GetUnreferencedType( __0x8176 );

			try
			{
				__0x8198 = false;

				var __0x8178 = __0x8175.TextBox.Text;

				if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x8177 ) )
				{
					var __0x8179 = __0x8177.GetMethod( "Parse", BindingFlags.Public | BindingFlags.Static );
					if( __0x8179 != null )
						return __0x8179.Invoke( null, new object[] { __0x8178 } );
				}

				return SimpleTypes.ParseValue( __0x8177, __0x8178 );
			}
			catch
			{
				__0x8198 = true;
				return null;
			}
		}

		protected virtual void TextBoxTextChanged()
		{
			var __0x8180 = GetValues();
			if( __0x8180 == null )
				return;

			var __0x8181 = __0x8180[ 0 ];
			var __0x8182 = ReferenceUtility.GetUnreferencedValue( __0x8181 );

			var __0x8183 = __0x8189( out __0x8160 );
			if( !__0x8160 )
			{
				try
				{
					if( !Equals( __0x8183, __0x8182 ) || __0x8180.Length > 1 )
						SetValue( __0x8183, true );
				}
				catch { }
			}

			
			
			

			
			
			
			

			
			
			
			
			
			
			
		}
	}
}




namespace NeoAxis.Editor
{
	public class HCItemTextBoxDropMultiline : HCItemTextBoxSelect
	{
		public HCItemTextBoxDropMultiline( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		protected override void OnDropDownMouseButtonDown()
		{
			if( !Owner.IsDropDownOpen )
			{
				var __0x8199 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;
				Owner.ToggleDropDown( new MultilineTextDropDownControl( this ), __0x8199.ButtonSelect );
			}
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}




namespace NeoAxis.Editor
{
	public interface IHCTextBoxNumeric : IHCTextBox
	{
		KryptonTrackBar TrackBar { get; }
	}

	/// <summary>
	/// Represents a numeric text box item for property for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemTextBoxNumeric : HCItemTextBox
	{
		RangeAttribute __0x8200;

		bool __0x8201;
		bool __0x8202;
		HCItemProperty __0x8203;
		bool __0x8204;

		

		public HCItemTextBoxNumeric( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridTextBoxNumeric();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8205 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;

			
			var __0x8206 = Property.GetCustomAttributes( typeof( RangeAttribute ), true );
			if( __0x8206.Length != 0 )
				__0x8200 = (RangeAttribute)__0x8206[ 0 ];

			
			if( __0x8200 != null )
			{
				var __0x8207 = __0x8205.TrackBar;

				__0x8204 = true;
				__0x8200.GetTrackBarMinMax( __0x8238(), out int min, out int max );
				__0x8207.Minimum = min;
				__0x8207.Maximum = max;
				__0x8207.LargeChange = Math.Max( ( __0x8207.Maximum - __0x8207.Minimum ) / 10, 1 );
				__0x8207.SmallChange = Math.Max( ( __0x8207.Maximum - __0x8207.Minimum ) / 100, 1 );
				__0x8204 = false;

				__0x8207.GotFocus += __0x8234;
				__0x8207.LostFocus += __0x8236;
				__0x8207.MouseUp += __0x8237;
				__0x8207.ValueChanged += __0x8239;
			}

			
			
			if( __0x8200 == null )
			{
				__0x8205.TrackBar.Enabled = false;
				__0x8205.TrackBar.Visible = false;
				__0x8205.TextBox.Width = ( (Control)__0x8205 ).Width;
				__0x8205.TextBox.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
			}
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8208 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x8209 = __0x8208.TrackBar;

			if( __0x8200 != null )
			{
				var __0x8210 = Property.Type.GetNetType();
				bool __0x8211 = ReferenceUtility.IsReferenceType( __0x8210 );

				var __0x8212 = GetValues();
				if( __0x8212 != null )
				{
					__0x8209.Enabled = CanEditValue();

					
					if( !__0x8202 )
						__0x8233();
				}
			}
		}

		void __0x8233()
		{
			var __0x8213 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x8214 = __0x8213.TrackBar;

			var __0x8215 = GetValues();
			if( __0x8215 == null )
				return;

			int __0x8216 = 0;

			for( int __0x8217 = 0; __0x8217 < __0x8215.Length; __0x8217++ )
			{
				var __0x8218 = __0x8215[ __0x8217 ];
				var __0x8219 = ReferenceUtility.GetUnreferencedValue( __0x8218 );
				
				double __0x8220 = double.Parse( __0x8219.ToString() );
				var __0x8221 = __0x8200.GetTrackBarValue( __0x8238(), __0x8220 );

				if( __0x8217 == 0 )
					__0x8216 = __0x8221;
				else
				{
					if( __0x8216 != __0x8221 )
						__0x8216 = __0x8213.TrackBar.Minimum;
				}
			}

			if( __0x8214.Value != __0x8216 )
			{
				__0x8204 = true;
				__0x8214.Value = __0x8216;
				__0x8204 = false;
			}
		}

		protected override void TextBoxTextChanged()
		{
			base.TextBoxTextChanged();

			if( __0x8200 != null )
				__0x8233();
		}

		private void __0x8234( object __0x8240, EventArgs __0x8241 )
		{
			__0x8201 = true;
		}

		void __0x8235()
		{
			
			if( __0x8202 )
			{
				__0x8203.AddUndoActionWithSavedValuesToRestore();
				__0x8202 = false;
			}
		}

		private void __0x8236( object __0x8242, EventArgs __0x8243 )
		{
			__0x8201 = false;

			var __0x8222 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			if( !__0x8222.TextBox.ReadOnly )
				__0x8235();
		}

		private void __0x8237( object __0x8244, MouseEventArgs __0x8245 )
		{
			var __0x8223 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			if( !__0x8223.TextBox.ReadOnly )
				__0x8235();
		}

		bool __0x8238()
		{
			var __0x8224 = Property.Type.GetNetType();
			var __0x8225 = ReferenceUtility.GetUnreferencedType( __0x8224 );

			return
				__0x8225 == typeof( sbyte ) ||
				__0x8225 == typeof( byte ) ||
				__0x8225 == typeof( char ) ||
				__0x8225 == typeof( short ) ||
				__0x8225 == typeof( ushort ) ||
				__0x8225 == typeof( int ) ||
				__0x8225 == typeof( uint ) ||
				__0x8225 == typeof( long ) ||
				__0x8225 == typeof( ulong );
		}

		private void __0x8239( object __0x8246, EventArgs __0x8247 )
		{
			if( __0x8204 )
				return;

			if( !__0x8201 )
				return;

			
			if( !__0x8202 )
			{
				__0x8203 = GetItemInHierarchyToRestoreValues();
				__0x8203.SaveValuesToRestore();
				__0x8202 = true;
			}

			var __0x8226 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x8227 = __0x8226.TrackBar;

			__0x8204 = true;

			var __0x8228 = Property.Type.GetNetType();
			var __0x8229 = ReferenceUtility.GetUnreferencedType( __0x8228 );

			try
			{
				double __0x8230 = __0x8200.GetValueFromTrackBar( __0x8238(), __0x8227.Value );

				
				string __0x8231;
				if( __0x8238() )
					__0x8231 = Convert.ToInt64( __0x8230 ).ToString();
				else
					__0x8231 = __0x8230.ToString();
				var __0x8232 = SimpleTypes.ParseValue( __0x8229, __0x8231 );

				SetValue( __0x8232, false );
			}
			catch
			{
			}

			__0x8204 = false;
		}
	}
}




namespace NeoAxis.Editor
{
	public interface IHCTextBoxSelect : IHCTextBox
	{
		Internal.ComponentFactory.Krypton.Toolkit.KryptonButton ButtonSelect { get; }
	}

	public class HCItemTextBoxSelect : HCItemTextBox
	{
		

		

		public HCItemTextBoxSelect( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridTextBoxSelect();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8248 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;

			__0x8248.TextBox.MouseUp += Control_MouseUp_ResetDefaultValue;
			__0x8248.ButtonSelect.MouseUp += ( __0x8252, __0x8253 ) => OnDropDownMouseButtonUp();
			__0x8248.ButtonSelect.MouseDown += ( __0x8254, __0x8255 ) => OnDropDownMouseButtonDown();

			
			
			
			
			
			
			
		}

		protected virtual void OnDropDownMouseButtonUp()
		{
		}

		protected virtual void OnDropDownMouseButtonDown()
		{
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8249 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;
			var __0x8250 = __0x8249.ButtonSelect;

			bool __0x8251 = !CanEditValue();
			__0x8250.Enabled = !__0x8251;

			
			
			
			

			

			
			

			
			
			

			
			
			
		}

		
		
		

		
		

		

		
		

		
		
		

		
		

		
		
		
		
		
		

		

		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a user control item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemUserControl : HCItemProperty
	{
		public HCItemUserControl( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x8256 = new EUserControl();
			__0x8256.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			return __0x8256;
		}

		

		
		
		

		
		

		
		
		

		
		

		
		
		
		
		
		
		

		
		
		
		
		
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a container to manage controls with the ability to set up the structure of controls in the form of a hierarchy.
	/// </summary>
	public partial class HierarchicalContainer : EUserControl, IMessageFilter, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		static Dictionary<Type, Type> __0x8257 = new Dictionary<Type, Type>();

		
		

		DocumentWindow __0x8258;
		object[] __0x8259;

		
		List<Item> __0x8260 = new List<Item>();

		
		bool __0x8261;

		bool __0x8262;

		IDropDownHolder __0x8263;

		internal const bool DrawSplitter = true;
		internal const int SpliterWidth = 6;
		
		float __0x8264 = 2.0f / 5.0f;
		SplitterState __0x8265 = SplitterState.None;
		int __0x8266 = 0;
		Point __0x8267 = Point.Empty;
		ContentModeEnum __0x8268 = ContentModeEnum.Properties;

		
		

		double __0x8269;

		DateTime? __0x8270;

		

		

		/// <summary>
		/// Represents an item of the <see cref="HierarchicalContainer"/>.
		/// </summary>
		public abstract class Item : IDisposable
		{
			HierarchicalContainer __0x8271;
			Item __0x8272;
			List<Item> __0x8273 = new List<Item>();

			EUserControl __0x8274;

			bool __0x8275;
			bool __0x8276;
			bool __0x8277;

			

			public Item( HierarchicalContainer owner, Item parent )
			{
				this.__0x8271 = owner;
				this.__0x8272 = parent;
			}

			public HierarchicalContainer Owner
			{
				get { return __0x8271; }
			}

			public Item Parent
			{
				get { return __0x8272; }
			}

			public List<Item> Children
			{
				get { return __0x8273; }
			}

			internal int GetTotalHeight()
			{
				int __0x8278 = CreatedControl?.Height ?? 0;
				if( Expanded )
				{
					foreach( var __0x8339 in Children )
						__0x8278 += __0x8339.GetTotalHeight();
				}
				return __0x8278;
			}

			public abstract EUserControl CreateControlImpl();

			public virtual void UpdateControl() { }

			
			public virtual void Update()
			{
				foreach( var __0x8340 in Children )
					__0x8340.Update();
			}

			public virtual void CreateControl()
			{
				if( CreatedControl == null )
				{

					try
					{
						
						KryptonToolkitSettings.DisableLayout = true;
						CreatedControl = CreateControlImpl();
					}
					catch( Exception )
					{
						
						throw;
					}
					finally
					{
						KryptonToolkitSettings.DisableLayout = false;
					}

					Owner.ContentPanel.Controls.Add( CreatedControl );

					

					
					
					
					
					
					
					
				}

				foreach( var __0x8341 in Children )
					__0x8341.CreateControl();
			}

			
			public virtual void UpdateLayout( ref int positionY, ref int tabIndex, bool needVerticalScroll )
			{
				if( VisibleDependingExpandedFlag )
				{
					if( CreatedControl != null )
					{
						CreatedControl.SuspendLayout();

						var __0x8279 = new Point( 0, positionY );
						

						

						if( CreatedControl.Location != __0x8279 )
							CreatedControl.Location = __0x8279;

						int __0x8280 = 0;
						if( needVerticalScroll )
							__0x8280 = Owner.ScrollBarWidth + 1;

						if( CreatedControl.Width != Owner.ClientSize.Width - __0x8280 )
							CreatedControl.Width = Owner.ClientSize.Width - __0x8280;

						
						
						

						
						
						

						
						



						UpdateControl();

						if( !CreatedControl.Visible )
							CreatedControl.Visible = true;
						CreatedControl.ResumeLayout( true );

						positionY += CreatedControl.Height;

						if( CreatedControl.TabIndex != tabIndex )
							CreatedControl.TabIndex = tabIndex;
						tabIndex++;
					}
				}
				else
				{
					if( CreatedControl != null && CreatedControl.Visible )
						CreatedControl.Visible = false;
				}

				foreach( var __0x8342 in Children )
					__0x8342.UpdateLayout( ref positionY, ref tabIndex, needVerticalScroll );
			}

			public virtual void Dispose()
			{
				foreach( var __0x8343 in Children.ToArray() )
					__0x8343.Dispose();
				Children.Clear();

				if( CreatedControl != null )
				{
					if( CreatedControl.Parent != null )
						CreatedControl.Parent.Controls.Remove( CreatedControl );
					CreatedControl.Dispose();
					CreatedControl = null;
				}
			}

			public EUserControl CreatedControl
			{
				get { return __0x8274; }
				set { __0x8274 = value; }
			}

			public bool CanExpand
			{
				get { return __0x8275; }
				set { __0x8275 = value; }
			}

			public bool Expanded
			{
				get { return __0x8276; }
				set
				{
					__0x8276 = value;
					if( __0x8276 )
						__0x8277 = true;
				}
			}

			public bool WasExpanded
			{
				get { return __0x8277; }
				set { __0x8277 = value; }
			}

			public bool VisibleDependingExpandedFlag
			{
				get
				{
					if( Parent != null )
						return Parent.VisibleDependingExpandedFlag && Parent.Expanded;
					return true;
				}
			}
		}

		

		[Flags]
		enum SplitterState
		{
			None = 0x0,
			Hovered = 0x1,
			Dragged = 0x2
		}

		

		public enum ContentModeEnum
		{
			Properties,
			Events
		}

		

		public delegate void BeforeTimerUpdateDelegate( HierarchicalContainer __0x8378, ref bool __0x8379 );
		public event BeforeTimerUpdateDelegate BeforeTimerUpdate;

		public delegate void OverridePropertyDisplayNameDelegate( HierarchicalContainer __0x8380, HCItemProperty __0x8381, ref string __0x8382 );
		public event OverridePropertyDisplayNameDelegate OverridePropertyDisplayName;

		public delegate void OverrideMemberDescriptionDelegate( HierarchicalContainer __0x8383, HCItemMember __0x8384, ref string __0x8385 );
		public event OverrideMemberDescriptionDelegate OverrideMemberDescription;

		public delegate void OverridePropertyEnumItemDelegate( HierarchicalContainer __0x8386, HCItemEnumDropDown __0x8387, ref string __0x8388, ref string __0x8389 );
		public event OverridePropertyEnumItemDelegate OverridePropertyEnumItem;

		public delegate void OverrideGroupDisplayNameDelegate( HierarchicalContainer __0x8390, HCItemGroup __0x8391, ref string __0x8392 );
		public event OverrideGroupDisplayNameDelegate OverrideGroupDisplayName;

		

		static HierarchicalContainer()
		{
			__0x8371();
		}

		public HierarchicalContainer()
		{
			__0x8377();

			
			
			
			
			
			

			
			
			
			
			

			

			
			Application.AddMessageFilter( this );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x8337.Visible = false;
			

			__0x8338.MouseLeave += __0x8361;
			__0x8338.MouseMove += __0x8362;
			__0x8338.MouseDown += __0x8363;
			__0x8338.MouseUp += __0x8364;
		}

		
		
		
		
		

		
		
		
		
		
		

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return __0x8258; }
		}

		[Browsable( false )]
		public object[] SelectedObjects
		{
			get { return __0x8259; }
		}

		[Browsable( false )]
		public List<Item> RootItems
		{
			get { return __0x8260; }
		}

		
		public float SplitterRatio
		{
			get { return __0x8264; }
			set
			{
				var __0x8281 = Math.Max( 50.0f / Width, Math.Min( value, ( Width - 50 ) / (float)Width ) );
				if( __0x8264 != __0x8281 )
				{
					__0x8264 = __0x8281;
					

					UpdateItems();
					Refresh();
					
					
				}
			}
		}

		public int SplitterPosition
		{
			get { return (int)Math.Round( SplitterRatio * Width ); }
			set { SplitterRatio = value / (float)Width; }
		}

		public ContentModeEnum ContentMode
		{
			get { return __0x8268; }
			set
			{
				if( __0x8268 == value )
					return;
				__0x8268 = value;

				
				
			}
		}

		[DefaultValue( true )]
		public bool DisplayGroups { get; set; } = true;

		private void __0x8360( object __0x8393, EventArgs __0x8394 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			
			
			
			
			
			
			

			
			__0x8337.ValueChanged += __0x8376;
		}

		
		
		
		

		private void __0x8361( object __0x8395, EventArgs __0x8396 )
		{
			
			

			if( __0x8265.HasFlag( SplitterState.Hovered ) )
			{
				__0x8265 &= ~SplitterState.Hovered;
				Cursor = Cursors.Default;
			}
		}

		private void __0x8362( object __0x8397, MouseEventArgs __0x8398 )
		{
			
			

			if( __0x8265.HasFlag( SplitterState.Dragged ) )
			{
				SplitterPosition = __0x8266 + __0x8398.X - __0x8267.X;
				__0x8365();
			}
			else
			{
				int __0x8282 = SplitterPosition;
				bool __0x8283 = __0x8398.Button == MouseButtons.None &&
					__0x8398.X < __0x8282 && __0x8398.X >= __0x8282 - SpliterWidth;
				if( __0x8283 && !__0x8265.HasFlag( SplitterState.Hovered ) )
				{
					__0x8265 |= SplitterState.Hovered;
					Cursor = KryptonCursors.VSplit;
				}
				else if( !__0x8283 && __0x8265.HasFlag( SplitterState.Hovered ) )
				{
					__0x8265 &= ~SplitterState.Hovered;
					Cursor = Cursors.Default;
				}
			}
		}

		private void __0x8363( object __0x8399, MouseEventArgs __0x8400 )
		{
			
			
			if( __0x8265.HasFlag( SplitterState.Hovered ) )
			{
				__0x8265 |= SplitterState.Dragged;
				__0x8267 = __0x8400.Location;
				__0x8266 = this.SplitterPosition;
				
				
				
				
			}
			
		}

		private void __0x8364( object __0x8401, MouseEventArgs __0x8402 )
		{
			
			

			if( __0x8265.HasFlag( SplitterState.Dragged ) )
			{
				__0x8265 &= ~SplitterState.Dragged;
				
				
				
				
			}
		}

		protected override void OnMouseLeave( EventArgs e )
		{
			base.OnMouseLeave( e );

			
			

			
			
			
			
			
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			
			
			
			
			
			
			
			
			
			
			
			
			

			base.OnMouseDown( e );
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			
			

			
			
			
			
			
			
			
			
		}

		protected override void OnDestroy()
		{
			Application.RemoveMessageFilter( this );

			__0x8262 = true;
			foreach( var __0x8344 in RootItems.ToArray() )
				__0x8344.Dispose();
			RootItems.Clear();

			base.OnDestroy();
		}

		protected override void OnResize( EventArgs e )
		{
			if( !IsHandleCreated )
				return;

			PerformUpdate();
			
			

			base.OnResize( e );
		}

		void __0x8365()
		{
			__0x8269 = 0;

			
			

			
			
		}

		protected override Point ScrollToControl( Control activeControl )
		{
			
			
			return this.AutoScrollPosition;
			
		}

		protected override void OnLostFocus( EventArgs e )
		{
			base.OnLostFocus( e );

			
			
			
		}

		private void __0x8366( object __0x8403, EventArgs __0x8404 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			bool __0x8284 = false;
			BeforeTimerUpdate?.Invoke( this, ref __0x8284 );
			if( __0x8284 )
				return;

			
			PerformUpdate();

			if( __0x8270.HasValue && ( DateTime.Now - __0x8270.Value ).TotalSeconds > 0 )
			{
				ControlDoubleBufferComposited.RestoreComposited( this );
				__0x8270 = null;
			}
		}

		public void PerformUpdate( bool forceUpdate = false )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( Destroyed || __0x8262 )
				return;

			double __0x8285 = 0.05;
			if( SelectedObjects != null )
			{
				if( SelectedObjects.Length > 2000 )
					__0x8285 = 2.0;
				else if( SelectedObjects.Length > 500 )
					__0x8285 = 1.0;
				else if( SelectedObjects.Length > 250 )
					__0x8285 = 0.5;
				else if( SelectedObjects.Length > 100 )
					__0x8285 = 0.35;
				else
					__0x8285 = 0.1;
			}

			if( EngineApp.GetSystemTime() - __0x8269 < __0x8285 && !forceUpdate )
				return;

			if( __0x8261 )
				return;
			try
			{
				__0x8261 = true;

				
				
				__0x8336?.Start();

				UpdateItems();

				
			}
			finally
			{
				__0x8269 = EngineApp.GetSystemTime();
				__0x8261 = false;
			}
		}

		public void SetData( DocumentWindow documentWindow, object[] objects, bool callPerformUpdate = true )
		{
			this.__0x8258 = documentWindow;
			this.__0x8259 = objects;

			if( callPerformUpdate )
				PerformUpdate( true );

			
			__0x8336?.Start();

			
			
			
			
			
			
			
		}

		IEnumerable<Item> __0x8367( object[] __0x8405 )
		{
			var __0x8286 = new Dictionary<string, HCItemGroup>();
			var __0x8287 = new Dictionary<Metadata.Member, HCItemMember>();
			foreach( var __0x8345 in __0x8260 )
			{
				var __0x8288 = __0x8345 as HCItemGroup;
				if( __0x8288 != null )
					__0x8286.Add( __0x8288.Name, __0x8288 );
				var __0x8289 = __0x8345 as HCItemMember;
				if( __0x8289 != null )
					__0x8287.Add( __0x8289.Member, __0x8289 );
			}

			var __0x8290 = new EDictionary<string, List<Metadata.Member>>();
			
			
			

			var __0x8291 = __0x8405[ 0 ];

			var __0x8292 = new EDictionary<Metadata.Member, int>( 128 );

			
			foreach( var __0x8346 in MetadataManager.MetadataGetMembers( __0x8291 ) )
			{
				if( __0x8268 == ContentModeEnum.Properties && !( __0x8346 is Metadata.Property ) )
					continue;
				if( __0x8268 == ContentModeEnum.Events && !( __0x8346 is Metadata.Event ) )
					continue;

				if( EditorUtility.IsMemberVisible( __0x8291, __0x8346 ) )
				{
					bool __0x8293 = false;

					
					var __0x8294 = __0x8291 as Component;
					if( __0x8294 != null && !__0x8294.TypeSettingsIsPublicMember( __0x8346 ) )
						__0x8293 = true;
					
					
					
					
					
					

					if( !__0x8293 )
						__0x8292[ __0x8346 ] = 1;
				}
			}

			for( int __0x8295 = 1; __0x8295 < __0x8405.Length; __0x8295++ )
			{
				var __0x8296 = __0x8405[ __0x8295 ];
				foreach( var __0x8347 in MetadataManager.MetadataGetMembers( __0x8296 ) )
				{
					if( __0x8292.TryGetValue( __0x8347, out var counter ) )
						__0x8292[ __0x8347 ] = counter + 1;
				}
			}

			foreach( var __0x8348 in __0x8292 )
			{
				var __0x8297 = __0x8348.Key;
				var __0x8298 = __0x8348.Value;
				if( __0x8298 == __0x8405.Length )
				{
					var __0x8299 = TypeUtility.GetUserFriendlyCategory( __0x8297 );

					List<Metadata.Member> __0x8300;
					if( !__0x8290.TryGetValue( __0x8299, out __0x8300 ) )
					{
						__0x8300 = new List<Metadata.Member>();
						__0x8290.Add( __0x8299, __0x8300 );
					}
					__0x8300.Add( __0x8297 );
				}
			}

			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			

			
			if( ReverseGroups )
			{
				var __0x8301 = new EDictionary<string, List<Metadata.Member>>( __0x8290.Count );
				foreach( var __0x8349 in __0x8290.Reverse() )
					__0x8301.Add( __0x8349.Key, __0x8349.Value );
				__0x8290 = __0x8301;
			}

			foreach( var __0x8350 in __0x8290 )
			{
				var __0x8302 = __0x8350.Key;
				var __0x8303 = __0x8350.Value;

				
				if( DisplayGroups )
				{
					if( !__0x8286.TryGetValue( __0x8302, out HCItemGroup groupItem ) )
						groupItem = new HCItemGroup( this, null, __0x8302 );
					yield return groupItem;
				}

				
				foreach( var __0x8351 in __0x8303 )
				{
					if( !__0x8287.TryGetValue( __0x8351, out var item ) )
					{
						Type __0x8304 = GetSuitableItemType( __0x8351 );
						
						
						

						
						if( __0x8304 != null )
						{
							var __0x8305 = __0x8351 as Metadata.Property;
							if( __0x8305 != null )
							{
								var __0x8306 = __0x8304.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

								item = (HCItemMember)__0x8306.Invoke( new object[] { this, null, SelectedObjects, __0x8305, __0x8305.Indexers } );
							}

							var __0x8307 = __0x8351 as Metadata.Event;
							if( __0x8307 != null )
							{
								var __0x8308 = __0x8304.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( Item ),
									typeof( object[] ),
									typeof( Metadata.Event )
								} );

								item = (HCItemMember)__0x8308.Invoke( new object[] { this, null, SelectedObjects, __0x8307 } );
							}
						}
					}

					if( item != null )
						yield return item;
				}
			}
		}

		
		internal void UpdateItems()
		
		{
			
			

			ESet<Item> __0x8309 = new ESet<Item>();

			if( SelectedObjects != null && SelectedObjects.Length != 0 )
			{
				foreach( var __0x8352 in __0x8367( SelectedObjects ) )
					__0x8309.Add( __0x8352 );
			}

			
			List<Item> __0x8310 = new List<Item>();
			foreach( var __0x8353 in __0x8260 )
			{
				if( !__0x8309.Contains( __0x8353 ) )
					__0x8310.Add( __0x8353 );
			}

			
			__0x8260.Clear();
			__0x8260.AddRange( __0x8309 );

			if( __0x8310.Count != 0 )
			{
				SuspendLayout();

				
				foreach( var __0x8354 in __0x8310 )
					__0x8354.Dispose();

				ResumeLayout( false );
			}

			foreach( var __0x8355 in __0x8260 )
				__0x8355.Update();

			
			if( __0x8260.Count != 0 )
			{
				
				try
				{
					foreach( var __0x8356 in __0x8260 )
						__0x8356.CreateControl();
				}
				catch { }

				var __0x8311 = __0x8368( out var itemsHeight );

				if( __0x8337.Visible != __0x8311 )
					__0x8337.Visible = __0x8311;

				__0x8337.Maximum = Math.Max( itemsHeight - Height, 0 );
				__0x8337.SmallChange = 30;
				__0x8337.LargeChange = Height;

				
				

				
				
				

				
				__0x8369( __0x8311 );

				
				__0x8375( __0x8311 );
			}
			else
			{
				if( __0x8337.Visible )
					__0x8337.Visible = false;
			}
		}

		bool __0x8368( out int __0x8406 )
		{
			__0x8406 = 0;
			
			foreach( var __0x8357 in __0x8260 )
				__0x8406 += __0x8357.GetTotalHeight();
			return __0x8406 > Height;
		}

		void __0x8369( bool __0x8407 )
		{
			SuspendLayout();

			int __0x8312 = 0;
			int __0x8313 = 0;
			foreach( var __0x8358 in __0x8260 )
				__0x8358.UpdateLayout( ref __0x8312, ref __0x8313, __0x8407 );

			ResumeLayout( true );
		}

		protected override void AdjustFormScrollbars( bool displayScrollbars )
		{
			

			
			

			
			

			
			displayScrollbars = false;

			
			base.AdjustFormScrollbars( displayScrollbars );
		}

		[Browsable( false )]
		public bool IsDropDownOpen
		{
			get { return __0x8263 != null; }
		}

		public void ToggleDropDown( HCDropDownControl control, Control parentControl )
		{
			if( __0x8263 == null && control != null )
			{
				if( control.UseFormDropDownHolder )
					__0x8263 = new HCFormDropDownHolder( control );
				else
					__0x8263 = new HCToolStripDropDownHolder( control );

				__0x8263.Show( parentControl );
				__0x8263.HolderClosed += __0x8370;
			}
			else
			{
				__0x8263?.Close( true );
			}
		}

		private void __0x8370( object __0x8408, EventArgs __0x8409 )
		{
			__0x8263.HolderClosed -= __0x8370;
			__0x8263 = null;
		}

		[Browsable( false )]
		public Dictionary<Type, Type> ItemTypeByPropertyType
		{
			get { return __0x8257; }
		}

		public static void RegisterItemTypeByPropertyType( Type propertyType, Type itemType )
		{
			__0x8257[ propertyType ] = itemType;
		}

		static void __0x8371()
		{
			RegisterItemTypeByPropertyType( typeof( object ), typeof( HCItemLabel ) );
			RegisterItemTypeByPropertyType( typeof( Enum ), typeof( HCItemEnumDropDown ) );
			

			
			foreach( var __0x8359 in SimpleTypes.Types )
				RegisterItemTypeByPropertyType( __0x8359.Type, typeof( HCItemTextBox ) );

			
			

			RegisterItemTypeByPropertyType( typeof( bool ), typeof( HCItemCheckBox ) );
			RegisterItemTypeByPropertyType( typeof( ColorValue ), typeof( HCItemColorValue ) );
			RegisterItemTypeByPropertyType( typeof( ColorValuePowered ), typeof( HCItemColorValuePowered ) );

			RegisterItemTypeByPropertyType( typeof( int ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( uint ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( long ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( ulong ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( float ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( double ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( DegreeF ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Degree ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( RadianF ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Radian ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Range ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( RangeF ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( RangeI ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2 ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2F ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2I ), typeof( HCItemRange ) );

			
			

			RegisterItemTypeByPropertyType( typeof( ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass ), typeof( HCItemProjectRibbonAndToolbarActions ) );
			RegisterItemTypeByPropertyType( typeof( ProjectSettingsPage_Shortcuts.ShortcutSettingsClass ), typeof( HCItemProjectShortcuts ) );
		}

		Type __0x8372( Type __0x8410 )
		{
			
			if( typeof( ICollection ).IsAssignableFrom( __0x8410 ) )
				return typeof( HCItemCollection );
			if( __0x8410.IsGenericType && typeof( ReferenceList<> ).IsAssignableFrom( __0x8410.GetGenericTypeDefinition() ) )
				return typeof( HCItemCollection );

			Type __0x8314;
			if( __0x8410.IsGenericType )
				__0x8314 = __0x8410.GetGenericTypeDefinition();
			else
				__0x8314 = __0x8410;

			var __0x8315 = __0x8314;

			do
			{
				if( __0x8315 == typeof( object ) )
				{
					if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x8314 ) )
						return typeof( HCItemTextBox );
				}

				__0x8257.TryGetValue( __0x8315, out Type type2 );
				if( type2 != null )
					return type2;

				__0x8315 = __0x8315.BaseType;
			} while( __0x8315 != null );

			return null;
		}

		public delegate void GetSuitableItemTypeOverrideDelegate( HierarchicalContainer __0x8411, Metadata.Member __0x8412, ref Type __0x8413 );
		public event GetSuitableItemTypeOverrideDelegate GetSuitableItemTypeOverride;

		public virtual Type GetSuitableItemType( Metadata.Member member )
		{
			Type __0x8316 = null;

			
			GetSuitableItemTypeOverride?.Invoke( this, member, ref __0x8316 );

			if( __0x8316 == null )
			{
				var __0x8317 = (EditorAttribute)member.GetCustomAttributes( typeof( EditorAttribute ), true ).FirstOrDefault();
				if( __0x8317 != null )
				{
					var __0x8318 = EditorUtility.GetTypeByName( __0x8317.EditorTypeName );
					if( typeof( HCItemProperty ).IsAssignableFrom( __0x8318 ) )
						return __0x8318;
				}

				var __0x8319 = member as Metadata.Property;
				if( __0x8319 != null )
				{
					
					
					
					
					
					
					
					
					
					
					var __0x8320 = __0x8319.Type.GetNetType();
					var __0x8321 = ReferenceUtility.GetUnreferencedType( __0x8320 );
					__0x8316 = __0x8372( __0x8321 );
					
				}

				var __0x8322 = member as Metadata.Event;
				if( __0x8322 != null )
					return EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.HCItemEvent" );
			}

			return __0x8316;
		}

		[DllImport( "user32.dll" )]
		internal static extern IntPtr WindowFromPoint( Point pnt );

		bool __0x8373( Control __0x8414 )
		{
			var __0x8323 = __0x8414;
			while( __0x8323 != null )
			{
				if( __0x8323 == this )
					return true;
				__0x8323 = __0x8323.Parent;
			}
			return false;
		}

		bool IMessageFilter.PreFilterMessage( ref Message __0x8415 )
		{
			if( !Enabled || !Visible || IsDisposed )
				return false;

			if( __0x8415.Msg == Internal.ComponentFactory.Krypton.Toolkit.PI.WM_MOUSEWHEEL )
			{
				
				if( !__0x8337.Visible )
					return false;
				
				

				Point __0x8324 = new Point( Internal.ComponentFactory.Krypton.Toolkit.PI.LOWORD( (int)__0x8415.LParam ), Internal.ComponentFactory.Krypton.Toolkit.PI.HIWORD( (int)__0x8415.LParam ) );

				try 
				{
					Control __0x8325 = GetChildAtPoint( PointToClient( __0x8324 ) );

					if( __0x8325 == null )
						return false;
					if( __0x8325 == __0x8337 )
						return false;

					var __0x8326 = WindowFromPoint( __0x8324 );
					if( __0x8326 != IntPtr.Zero )
					{
						var __0x8327 = FromHandle( __0x8326 );
						if( !__0x8373( __0x8327 ) )
							return false;
					}

					
					
					

					if( __0x8263 != null && __0x8263.Visible )
						return false;

					if( __0x8374( __0x8324 ) )
						return false;

					int __0x8328 = (short)( ( ( (long)__0x8415.WParam ) >> 0x10 ) & 0xffff );
					int __0x8329 = __0x8328 / 120;
					var __0x8330 = __0x8337.Value - 100 * __0x8329;
					__0x8337.Value = __0x8330;

					
					

					return true;
				}
				catch { }
			}

			return false;
		}

		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		

		private bool __0x8374( Point __0x8416 )
		{
			IntPtr __0x8331 = Internal.ComponentFactory.Krypton.Toolkit.PI.WindowFromPoint( new Internal.ComponentFactory.Krypton.Toolkit.PI.POINT( __0x8416 ) );
			if( __0x8331 != IntPtr.Zero )
			{
				string __0x8332 = Internal.ComponentFactory.Krypton.Toolkit.PI.GetClassName( __0x8331 );
				if( __0x8332 == "ComboLBox" )
					return true;
			}

			return false;
		}

		[DefaultValue( false )]
		public bool ReverseGroups { get; set; }

		
		

		public void PerformOverridePropertyDisplayName( HCItemProperty property, ref string displayName )
		{
			OverridePropertyDisplayName?.Invoke( this, property, ref displayName );
		}

		public void PerformOverrideMemberDescription( HCItemMember member, ref string description )
		{
			OverrideMemberDescription?.Invoke( this, member, ref description );
		}

		public void PerformOverridePropertyEnumItem( HCItemEnumDropDown property, ref string displayName, ref string description )
		{
			OverridePropertyEnumItem?.Invoke( this, property, ref displayName, ref description );
		}

		public void PerformOverrideGroupDisplayName( HCItemGroup group, ref string displayName )
		{
			OverrideGroupDisplayName?.Invoke( this, group, ref displayName );
		}

		
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x8333 = base.CreateParams;
				__0x8333.ExStyle |= 0x02000000;
				return __0x8333;
			}
		}

		[Browsable( false )]
		public Control ContentPanel
		{
			get { return __0x8338; }
		}

		void __0x8375( bool __0x8417 )
		{
			if( __0x8417 )
			{
				var __0x8334 = ScrollBarPosition;
				__0x8338.SetBounds( 0, -__0x8334, ClientRectangle.Right - __0x8337.Size.Width, ClientRectangle.Height + __0x8334 );
			}
			else
				__0x8338.SetBounds( 0, 0, ClientRectangle.Right, ClientRectangle.Height );

			__0x8337.SetBounds( ClientRectangle.Right - __0x8337.Size.Width, 0, __0x8337.Size.Width, ClientRectangle.Height );

			
			
		}

		[Browsable( false )]
		public int ScrollBarWidth
		{
			get { return __0x8337.Width; }
		}

		[Browsable( false )]
		public int ScrollBarPosition
		{
			get { return __0x8337.Value; }
		}

		public override bool AutoScroll
		{
			get { return false; }
			set { base.AutoScroll = value; }
		}

		private void __0x8376( object __0x8418, EventArgs __0x8419 )
		{
			__0x8269 = 0;

			__0x8270 = DateTime.Now + TimeSpan.FromSeconds( 0.5 );
			ControlDoubleBufferComposited.DisableComposited( this );
		}

		protected override void OnParentFormResizeBegin( EventArgs e )
		{
			base.OnParentFormResizeBegin( e );

			
			
		}

		protected override void OnParentFormResizeEnd( EventArgs e )
		{
			base.OnParentFormResizeEnd( e );

			Invalidate();
			
			
		}

	}
}

namespace NeoAxis.Editor
{
    partial class HierarchicalContainer
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8335 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8335 != null))
            {
                __0x8335.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8377()
        {
			this.__0x8335 = new System.ComponentModel.Container();
			this.__0x8336 = new System.Windows.Forms.Timer(this.__0x8335);
			this.__0x8337 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x8338 = new System.Windows.Forms.Panel();
			this.SuspendLayout();
			
			
			
			this.__0x8336.Interval = 10;
			this.__0x8336.Tick += new System.EventHandler(this.__0x8366);
			
			
			
			this.__0x8337.Location = new System.Drawing.Point(500, 0);
			this.__0x8337.Name = "engineScrollBar1";
			this.__0x8337.Size = new System.Drawing.Size(19, 624);
			this.__0x8337.TabIndex = 0;
			
			
			
			this.__0x8338.Location = new System.Drawing.Point(0, 0);
			this.__0x8338.Name = "panel1";
			this.__0x8338.Size = new System.Drawing.Size(450, 531);
			this.__0x8338.TabIndex = 1;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x8338);
			this.Controls.Add(this.__0x8337);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HierarchicalContainer";
			this.Size = new System.Drawing.Size(519, 624);
			this.Load += new System.EventHandler(this.__0x8360);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x8336;
		private EngineScrollBar __0x8337;
		private System.Windows.Forms.Panel __0x8338;
	}
}





namespace NeoAxis.Editor
{
	class HCItemProjectRibbonAndToolbarActions : HCItemProperty
	{
		Dictionary<Image, string> __0x8420 = new Dictionary<Image, string>();
		int __0x8421 = 0;

		

		class __0x8617 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8422;
			HCItemProjectRibbonAndToolbarActionsForm __0x8423;
			public ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem group;

			EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual> __0x8424 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual>();

			

			public __0x8617( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control, ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem group )
				: base( owner, parent, text )
			{
				this.__0x8422 = hcItem;
				this.__0x8423 = control;
				this.group = group;
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8425 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual>( __0x8424.Count );

					var __0x8426 = group != null ? group.Actions : __0x8422.__0x8580().ToolbarActions;
					foreach( var __0x8565 in __0x8426 )
					{
						var __0x8427 = EditorActions.GetByName( __0x8565.Name );

						
						
						
						if( !__0x8424.TryGetValue( __0x8565, out var item ) )
						{
							item = new ContentBrowserItem_Virtual( __0x8423.contentBrowserProject, this, __0x8565.Name );
							item.Tag = __0x8565;
							if( __0x8427 != null )
								item.Description = __0x8427.Description;

							if( __0x8427 != null && __0x8565.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.Action )
							{
								var __0x8428 = __0x8427.GetImageSmall();
								if( __0x8428 != null )
								{
									if( !__0x8422.__0x8420.TryGetValue( __0x8428, out var id ) )
									{
										id = "Name_" + __0x8422.__0x8421.ToString();
										__0x8422.__0x8420[ __0x8428 ] = id;
										__0x8423.contentBrowserProject.AddImageKey( id, __0x8428, __0x8427.GetImageBig() );
										__0x8422.__0x8421++;
									}
									item.imageKey = id;
								}
							}
							else if( __0x8565.Type == ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.SubGroupOfActions )
							{
								

								item.imageKey = "";
							}
						}

						if( item.ShowDisabled != !__0x8565.Enabled )
						{
							item.ShowDisabled = !__0x8565.Enabled;
							Owner?.Invalidate( true );
						}

						__0x8425[ __0x8565 ] = item;
						
					}

					__0x8424 = __0x8425;
				}

				var __0x8429 = new List<ContentBrowser.Item>( __0x8424.Count );
				foreach( var __0x8566 in __0x8424.Values )
					__0x8429.Add( __0x8566 );
				return __0x8429;
			}
		}

		

		class __0x8618 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8430;
			HCItemProjectRibbonAndToolbarActionsForm __0x8431;
			public ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem tabItem;

			EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual> __0x8432 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual>();

			

			public __0x8618( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control, ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem tabItem )
				: base( owner, parent, text )
			{
				this.__0x8430 = hcItem;
				this.__0x8431 = control;
				this.tabItem = tabItem;
			}

			public override void LightweightUpdate()
			{
				base.LightweightUpdate();

				if( ShowDisabled != !tabItem.Enabled )
				{
					ShowDisabled = !tabItem.Enabled;
					Owner?.Invalidate( true );
				}
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8433 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual>( __0x8432.Count );

					foreach( var __0x8567 in tabItem.Groups )
					{
						
						if( !__0x8432.TryGetValue( __0x8567, out var item ) )
						{
							item = new __0x8617( __0x8431.contentBrowserProject, this, __0x8567.Name, __0x8430, __0x8431, __0x8567 );
							item.Tag = __0x8567;
							item.imageKey = "Folder";
							item.expandAtStartup = true;
						}

						if( item.ShowDisabled != !__0x8567.Enabled )
						{
							item.ShowDisabled = !__0x8567.Enabled;
							Owner?.Invalidate( true );
						}

						__0x8433[ __0x8567 ] = item;
					}

					__0x8432 = __0x8433;
				}

				var __0x8434 = new List<ContentBrowser.Item>( __0x8432.Count );
				foreach( var __0x8568 in __0x8432.Values )
					__0x8434.Add( __0x8568 );
				return __0x8434;
			}
		}

		

		class __0x8619 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8435;
			HCItemProjectRibbonAndToolbarActionsForm __0x8436;

			EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual> __0x8437 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual>();

			

			public __0x8619( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control )
				: base( owner, parent, text )
			{
				this.__0x8435 = hcItem;
				this.__0x8436 = control;
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8438 = new EDictionary<ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual>( __0x8437.Count );

					foreach( var __0x8569 in __0x8435.__0x8580().RibbonTabs )
					{
						
						
						

						
						if( !__0x8437.TryGetValue( __0x8569, out var item ) )
						{
							item = new __0x8618( __0x8436.contentBrowserProject, this, __0x8569.Name, __0x8435, __0x8436, __0x8569 );
							item.Tag = __0x8569;
							item.imageKey = "Folder";

							

							
							
							
							
							
							
							
							
							
							
							
							
						}

						__0x8438[ __0x8569 ] = item;

						
					}

					__0x8437 = __0x8438;
				}

				var __0x8439 = new List<ContentBrowser.Item>( __0x8437.Count );
				foreach( var __0x8570 in __0x8437.Values )
					__0x8439.Add( __0x8570 );
				return __0x8439;
			}
		}

		

		public HCItemProjectRibbonAndToolbarActions( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x8440 = new HCItemProjectRibbonAndToolbarActionsForm();
			__0x8440.contentBrowserProject.ShowContextMenuEvent += ContentBrowserProject_ShowContextMenuEvent;
			return __0x8440;
		}

		public override EUserControl CreateControlImpl()
		{
			var __0x8441 = (HCGridProperty)base.CreateControlImpl();
			__0x8441.ShowOnlyEditorControl = true;
			return __0x8441;
		}

		string __0x8579( string __0x8588 )
		{
			return EditorLocalization.Translate( "ProjectSettingsRibbonAndToolbarActions", __0x8588 );
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8442 = __0x8580();
			if( __0x8442 == null )
				return;

			var __0x8443 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			__0x8443.kryptonButtonReset.Click += KryptonButtonReset_Click;
			__0x8443.toolStripButtonEnabled.Click += ToolStripButtonEnabled_Click;
			__0x8443.toolStripButtonDelete.Click += ToolStripButtonDelete_Click;
			__0x8443.toolStripButtonAdd.Click += ToolStripButtonAdd_Click;
			__0x8443.toolStripButtonRename.Click += ToolStripButtonRename_Click;
			__0x8443.toolStripButtonMoveUp.Click += ToolStripButtonMoveUp_Click;
			__0x8443.toolStripButtonMoveDown.Click += ToolStripButtonMoveDown_Click;
			__0x8443.toolStripButtonNewGroup.Click += ToolStripButtonNewGroup_Click;
			__0x8443.contentBrowserProject.KeyDownOverride += ContentBrowserProject_KeyDownOverride;

			
			{
				var __0x8444 = new List<ContentBrowser.Item>();

				var __0x8445 = new List<EditorAction>( EditorActions.Actions ).Where( __0x8589 => !__0x8589.CompletelyDisabled ).ToArray();
				CollectionUtility.InsertionSort( __0x8445, delegate ( EditorAction __0x8590, EditorAction __0x8591 )
				{
					return string.Compare( __0x8590.Name, __0x8591.Name );
				} );

				Dictionary<Image, string> __0x8446 = new Dictionary<Image, string>();
				int __0x8447 = 0;

				foreach( var __0x8571 in __0x8445 )
				{
					var __0x8448 = new ContentBrowserItem_Virtual( __0x8443.contentBrowserAll, null, __0x8571.Name );
					__0x8448.Tag = __0x8571;
					__0x8448.Description = __0x8571.Description;

					var __0x8449 = __0x8571.GetImageSmall();
					if( __0x8449 != null )
					{
						if( !__0x8446.TryGetValue( __0x8449, out var id ) )
						{
							id = "Name_" + __0x8447.ToString();
							__0x8446[ __0x8449 ] = id;
							__0x8443.contentBrowserAll.AddImageKey( id, __0x8449, __0x8571.GetImageBig() );
							__0x8447++;
						}
						__0x8448.imageKey = id;
					}

					__0x8444.Add( __0x8448 );
				}

				__0x8443.contentBrowserAll.SetData( __0x8444, false );
			}

			
			{
				var __0x8450 = new List<ContentBrowser.Item>();

				{
					var __0x8451 = new __0x8619( __0x8443.contentBrowserProject, null, "Ribbon", this, __0x8443 );
					__0x8451.imageKey = "Folder";
					__0x8451.expandAtStartup = true;
					__0x8450.Add( __0x8451 );
				}

				{
					var __0x8452 = new __0x8617( __0x8443.contentBrowserProject, null, "Quick Access Toolbar", this, __0x8443, null );
					__0x8452.imageKey = "Folder";
					__0x8452.expandAtStartup = true;
					__0x8450.Add( __0x8452 );
				}

				__0x8443.contentBrowserProject.SetData( __0x8450, true );

				
			}
		}

		internal void ContentBrowserProject_KeyDownOverride( ContentBrowser browser, object sender, KeyEventArgs e, ref bool handled )
		{
			
			{
				var __0x8453 = EditorAPI.GetActionShortcuts( "Delete" );
				if( __0x8453 != null )
				{
					foreach( var __0x8572 in __0x8453 )
					{
						Keys __0x8454 = e.KeyCode | Control.ModifierKeys;
						if( __0x8572 == __0x8454 )
						{
							TryDeleteObjects();
							handled = true;
							break;
						}
					}
				}
			}

			
			{
				var __0x8455 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x8455 != null )
				{
					foreach( var __0x8573 in __0x8455 )
					{
						Keys __0x8456 = e.KeyCode | Control.ModifierKeys;
						if( __0x8573 == __0x8456 )
						{
							TryRename();
							handled = true;
							break;
						}
					}
				}
			}
		}

		internal void KryptonButtonReset_Click( object sender, EventArgs e )
		{
			var __0x8457 = __0x8580();
			if( __0x8457 == null )
				return;

			if( EditorMessageBox.ShowQuestion( __0x8579( "Reset the configuration of the Ribbon and Quick Access Toolbar to default?" ), EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			__0x8457.ResetToDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;
		}

		ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass __0x8580()
		{
			var __0x8458 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8459 = GetValues();
			if( __0x8459 == null || __0x8459.Length != 1 )
				return null;
			return __0x8459[ 0 ] as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass;
		}

		void __0x8581()
		{
			var __0x8460 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8574 in __0x8460.contentBrowserProject.GetAllItems() )
				__0x8574.PerformChildrenChanged();
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8461 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8462 = __0x8580();
			if( __0x8462 == null )
				return;

			__0x8461.kryptonButtonReset.Enabled = !__0x8462.UseDefaultSettings;

			__0x8581();

			__0x8461.toolStripButtonEnabled.Enabled = CanSetEnabled( out _, out var enabledNewValue );
			__0x8461.toolStripButtonEnabled.Checked = __0x8461.toolStripButtonEnabled.Enabled && !enabledNewValue;
			__0x8461.toolStripButtonAdd.Enabled = CanAddAction( out _, out _ );
			__0x8461.toolStripButtonDelete.Enabled = CanDeleteObjects( out _ );
			__0x8461.toolStripButtonRename.Enabled = CanRename( out _ );
			__0x8461.toolStripButtonMoveUp.Enabled = __0x8584( out _, out _, out _ );
			__0x8461.toolStripButtonMoveDown.Enabled = __0x8586( out _, out _, out _ );

			__0x8461.toolStripButtonNewGroup.Enabled = CanNewGroup( out var newGroupText, out _ );
			if( __0x8461.toolStripButtonNewGroup.Text != newGroupText )
				__0x8461.toolStripButtonNewGroup.Text = newGroupText;
		}

		internal void ContentBrowserProject_ShowContextMenuEvent( ContentBrowser sender, ContentBrowser.Item contentItem, List<KryptonContextMenuItemBase> items )
		{
			var __0x8463 = __0x8580();
			if( __0x8463 == null )
				return;

			
			{
				var __0x8464 = new KryptonContextMenuItem( __0x8579( "Enabled" ), null,
					delegate ( object __0x8592, EventArgs __0x8593 )
					{
						TrySetEnabled();
					} );
				__0x8464.Enabled = CanSetEnabled( out _, out var newValue );
				__0x8464.Checked = __0x8464.Enabled && !newValue;
				items.Add( __0x8464 );
			}

			
			items.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x8465 = CanNewGroup( out var newGroupText, out _ );

				var __0x8466 = new KryptonContextMenuItem( __0x8579( newGroupText ), EditorResourcesCache.New,
					delegate ( object __0x8594, EventArgs __0x8595 )
					{
						TryNewGroup();
					} );
				__0x8466.Enabled = __0x8465;
				items.Add( __0x8466 );
			}

			
			{
				var __0x8467 = new KryptonContextMenuItem( __0x8579( "Add Action" ), EditorResourcesCache.Add,
					delegate ( object __0x8596, EventArgs __0x8597 )
					{
						TryAddAction();
					} );
				__0x8467.Enabled = CanAddAction( out _, out _ );
				items.Add( __0x8467 );
			}

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			

			
			{
				var __0x8468 = new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Delete" ), EditorResourcesCache.Delete,
					delegate ( object __0x8598, EventArgs __0x8599 )
					{
						TryDeleteObjects();
					} );
				__0x8468.Enabled = CanDeleteObjects( out _ );
				items.Add( __0x8468 );
			}

			
			{
				var __0x8469 = new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Rename" ), null,
					delegate ( object __0x8600, EventArgs __0x8601 )
					{
						TryRename();
					} );
				__0x8469.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x8469.Enabled = CanRename( out _ );
				items.Add( __0x8469 );
			}
		}

		public bool CanDeleteObjects( out List<ContentBrowser.Item> resultItemsToDelete )
		{
			resultItemsToDelete = new List<ContentBrowser.Item>();

			var __0x8470 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8575 in __0x8470.contentBrowserProject.SelectedItems )
			{
				var __0x8471 = __0x8575.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8471 != null )
				{
					var __0x8472 = __0x8575.Parent as __0x8617;
					if( __0x8472 != null )
						resultItemsToDelete.Add( __0x8575 );
				}

				var __0x8473 = __0x8575.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8473 != null )
					resultItemsToDelete.Add( __0x8575 );

				var __0x8474 = __0x8575.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8474 != null )
					resultItemsToDelete.Add( __0x8575 );
			}

			if( resultItemsToDelete.Count == 0 )
				return false;

			return true;
		}

		public void TryDeleteObjects()
		{
			if( !CanDeleteObjects( out var itemsToDelete ) )
				return;

			string __0x8475;
			if( itemsToDelete.Count == 1 )
				__0x8475 = string.Format( EditorLocalization.Translate( "General", "Delete \'{0}\'?" ), itemsToDelete[ 0 ].ToString() );
			else
				__0x8475 = EditorLocalization.Translate( "General", "Delete selected objects?" );

			if( EditorMessageBox.ShowQuestion( __0x8475, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			var __0x8476 = __0x8580();

			__0x8476.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			foreach( var __0x8576 in itemsToDelete )
			{
				var __0x8477 = __0x8576.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8477 != null )
				{
					var __0x8478 = __0x8576.Parent as __0x8617;
					if( __0x8478 != null )
					{
						if( __0x8478.group != null )
							__0x8478.group.Actions.Remove( __0x8477 );
						else
							__0x8476.ToolbarActions.Remove( __0x8477 );
					}
				}

				var __0x8479 = __0x8576.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8479 != null && __0x8576.Parent != null )
				{
					var __0x8480 = __0x8576.Parent.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8480 != null )
						__0x8480.Groups.Remove( __0x8479 );
				}

				var __0x8481 = __0x8576.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8481 != null )
					__0x8476.RibbonTabs.Remove( __0x8481 );
			}
		}

		internal void ToolStripButtonDelete_Click( object sender, EventArgs e )
		{
			TryDeleteObjects();
		}

		EditorAction __0x8582()
		{
			var __0x8482 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8483 = __0x8482.contentBrowserAll.SelectedItems;
			if( __0x8483.Length == 1 )
				return __0x8483[ 0 ].Tag as EditorAction;
			return null;
		}

		bool __0x8583( out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem __0x8602 )
		{
			var __0x8484 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8485 = __0x8484.contentBrowserProject.SelectedItems;
			if( __0x8485.Length == 1 )
			{
				var __0x8486 = __0x8485[ 0 ];

				var __0x8487 = __0x8486 as __0x8617;
				if( __0x8487 != null )
				{
					__0x8602 = __0x8487.group;
					return true;
				}

				var __0x8488 = __0x8486.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8488 != null )
				{
					var __0x8489 = __0x8486.Parent as __0x8617;
					if( __0x8489 != null )
					{
						__0x8602 = __0x8489.group;
						return true;
					}
				}
			}

			__0x8602 = null;
			return false;
		}

		public bool CanAddAction( out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem destinationGroup, out EditorAction actionToAdd )
		{
			var __0x8490 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8491 = __0x8580();

			actionToAdd = __0x8582();
			if( actionToAdd != null )
			{
				if( __0x8583( out var destinationGroup2 ) )
				{
					destinationGroup = destinationGroup2;
					return true;
				}
			}

			destinationGroup = null;
			actionToAdd = null;
			return false;
		}

		public void TryAddAction()
		{
			if( !CanAddAction( out var destinationGroup, out var actionToAdd ) )
				return;

			var __0x8492 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8493 = __0x8580();

			__0x8493.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( destinationGroup != null )
			{
				var __0x8494 = new ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem();
				__0x8494.Name = actionToAdd.Name;
				destinationGroup.Actions.Add( __0x8494 );
			}
			else
			{
				var __0x8495 = new ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem();
				__0x8495.Name = actionToAdd.Name;
				__0x8493.ToolbarActions.Add( __0x8495 );
			}

			
			
		}

		internal void ToolStripButtonAdd_Click( object sender, EventArgs e )
		{
			TryAddAction();
		}

		internal void ToolStripButtonRename_Click( object sender, EventArgs e )
		{
			TryRename();
		}

		bool __0x8584( out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem __0x8603, out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem __0x8604, out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem __0x8605 )
		{
			var __0x8496 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8497 = __0x8580();

			var __0x8498 = __0x8496.contentBrowserProject.SelectedItems;
			if( __0x8498.Length == 1 )
			{
				var __0x8499 = __0x8498[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8499 != null )
				{
					var __0x8500 = __0x8498[ 0 ].Parent.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
					var __0x8501 = __0x8500 != null ? __0x8500.Actions : __0x8497.ToolbarActions;

					var __0x8502 = __0x8501.IndexOf( __0x8499 );
					if( __0x8502 != -1 && __0x8502 > 0 )
					{
						__0x8603 = null;
						__0x8604 = __0x8500;
						__0x8605 = __0x8499;
						return true;
					}
				}

				var __0x8503 = __0x8498[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8503 != null )
				{
					var __0x8504 = __0x8498[ 0 ].Parent?.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8504 != null )
					{
						var __0x8505 = __0x8504.Groups.IndexOf( __0x8503 );
						if( __0x8505 != -1 && __0x8505 > 0 )
						{
							__0x8603 = __0x8504;
							__0x8604 = __0x8503;
							__0x8605 = null;
							return true;
						}
					}
				}

				var __0x8506 = __0x8498[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8506 != null )
				{
					var __0x8507 = __0x8497.RibbonTabs.IndexOf( __0x8506 );
					if( __0x8507 != -1 && __0x8507 > 0 )
					{
						__0x8603 = __0x8506;
						__0x8604 = null;
						__0x8605 = null;
						return true;
					}
				}
			}

			__0x8603 = null;
			__0x8604 = null;
			__0x8605 = null;
			return false;
		}

		void __0x8585()
		{
			if( !__0x8584( out var tab, out var group, out var actionItem ) )
				return;

			var __0x8508 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8509 = __0x8580();

			__0x8509.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( actionItem != null )
			{
				

				var __0x8510 = group != null ? group.Actions : __0x8509.ToolbarActions;

				var __0x8511 = __0x8510.IndexOf( actionItem );
				if( __0x8511 == -1 || __0x8511 == 0 )
					return;

				__0x8510.RemoveAt( __0x8511 );
				__0x8510.Insert( __0x8511 - 1, actionItem );

				
				{
					__0x8581();

					var __0x8512 = __0x8508.contentBrowserProject.FindItemByTag( actionItem );
					if( __0x8512 != null )
						__0x8508.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8512 } );
				}
			}
			else if( group != null )
			{
				

				var __0x8513 = tab.Groups.IndexOf( group );
				if( __0x8513 == -1 || __0x8513 == 0 )
					return;

				tab.Groups.RemoveAt( __0x8513 );
				tab.Groups.Insert( __0x8513 - 1, group );

				
				{
					__0x8581();

					var __0x8514 = __0x8508.contentBrowserProject.FindItemByTag( group );
					if( __0x8514 != null )
						__0x8508.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8514 } );
				}
			}
			else
			{
				

				var __0x8515 = __0x8509.RibbonTabs.IndexOf( tab );
				if( __0x8515 == -1 || __0x8515 == 0 )
					return;

				__0x8509.RibbonTabs.RemoveAt( __0x8515 );
				__0x8509.RibbonTabs.Insert( __0x8515 - 1, tab );

				
				{
					__0x8581();

					var __0x8516 = __0x8508.contentBrowserProject.FindItemByTag( tab );
					if( __0x8516 != null )
						__0x8508.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8516 } );
				}
			}
		}

		bool __0x8586( out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem __0x8606, out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem __0x8607, out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem __0x8608 )
		{
			var __0x8517 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8518 = __0x8580();

			var __0x8519 = __0x8517.contentBrowserProject.SelectedItems;
			if( __0x8519.Length == 1 )
			{
				var __0x8520 = __0x8519[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8520 != null )
				{
					var __0x8521 = __0x8519[ 0 ].Parent.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
					var __0x8522 = __0x8521 != null ? __0x8521.Actions : __0x8518.ToolbarActions;

					var __0x8523 = __0x8522.IndexOf( __0x8520 );
					if( __0x8523 != -1 && __0x8523 < __0x8522.Count - 1 )
					{
						__0x8606 = null;
						__0x8607 = __0x8521;
						__0x8608 = __0x8520;
						return true;
					}
				}

				var __0x8524 = __0x8519[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8524 != null )
				{
					var __0x8525 = __0x8519[ 0 ].Parent?.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8525 != null )
					{
						var __0x8526 = __0x8525.Groups.IndexOf( __0x8524 );
						if( __0x8526 != -1 && __0x8526 < __0x8525.Groups.Count - 1 )
						{
							__0x8606 = __0x8525;
							__0x8607 = __0x8524;
							__0x8608 = null;
							return true;
						}
					}
				}

				var __0x8527 = __0x8519[ 0 ].Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8527 != null )
				{
					var __0x8528 = __0x8518.RibbonTabs.IndexOf( __0x8527 );
					if( __0x8528 != -1 && __0x8528 < __0x8518.RibbonTabs.Count - 1 )
					{
						__0x8606 = __0x8527;
						__0x8607 = null;
						__0x8608 = null;
						return true;
					}
				}
			}

			__0x8606 = null;
			__0x8607 = null;
			__0x8608 = null;
			return false;
		}

		void __0x8587()
		{
			if( !__0x8586( out var tab, out var group, out var actionItem ) )
				return;

			var __0x8529 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8530 = __0x8580();

			__0x8530.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( actionItem != null )
			{
				

				var __0x8531 = group != null ? group.Actions : __0x8530.ToolbarActions;

				var __0x8532 = __0x8531.IndexOf( actionItem );
				if( __0x8532 == -1 || __0x8532 == __0x8531.Count - 1 )
					return;

				__0x8531.RemoveAt( __0x8532 );
				__0x8531.Insert( __0x8532 + 1, actionItem );

				
				{
					__0x8581();

					var __0x8533 = __0x8529.contentBrowserProject.FindItemByTag( actionItem );
					if( __0x8533 != null )
						__0x8529.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8533 } );
				}
			}
			else if( group != null )
			{
				

				var __0x8534 = tab.Groups.IndexOf( group );
				if( __0x8534 == -1 || __0x8534 == tab.Groups.Count - 1 )
					return;

				tab.Groups.RemoveAt( __0x8534 );
				tab.Groups.Insert( __0x8534 + 1, group );

				
				{
					__0x8581();

					var __0x8535 = __0x8529.contentBrowserProject.FindItemByTag( group );
					if( __0x8535 != null )
						__0x8529.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8535 } );
				}
			}
			else
			{
				

				var __0x8536 = __0x8530.RibbonTabs.IndexOf( tab );
				if( __0x8536 == -1 || __0x8536 == __0x8530.RibbonTabs.Count - 1 )
					return;

				__0x8530.RibbonTabs.RemoveAt( __0x8536 );
				__0x8530.RibbonTabs.Insert( __0x8536 + 1, tab );

				
				{
					__0x8581();

					var __0x8537 = __0x8529.contentBrowserProject.FindItemByTag( tab );
					if( __0x8537 != null )
						__0x8529.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8537 } );
				}
			}
		}

		internal void ToolStripButtonMoveUp_Click( object sender, EventArgs e )
		{
			__0x8585();
		}

		internal void ToolStripButtonMoveDown_Click( object sender, EventArgs e )
		{
			__0x8587();
		}

		internal void ToolStripButtonEnabled_Click( object sender, EventArgs e )
		{
			TrySetEnabled();
		}

		public bool CanSetEnabled( out List<ContentBrowser.Item> itemsToUpdate, out bool newValue )
		{
			itemsToUpdate = new List<ContentBrowser.Item>();
			newValue = false;

			var __0x8538 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8577 in __0x8538.contentBrowserProject.SelectedItems )
			{
				var __0x8539 = __0x8577.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8539 != null )
				{
					if( !__0x8539.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8577 );
				}

				var __0x8540 = __0x8577.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8540 != null )
				{
					if( !__0x8540.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8577 );
				}

				var __0x8541 = __0x8577.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8541 != null )
				{
					if( !__0x8541.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8577 );
				}
			}

			if( itemsToUpdate.Count == 0 )
				return false;

			return true;
		}

		public void TrySetEnabled()
		{
			if( !CanSetEnabled( out var itemsToUpdate, out var newValue ) )
				return;

			var __0x8542 = __0x8580();

			__0x8542.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			foreach( var __0x8578 in itemsToUpdate )
			{
				var __0x8543 = __0x8578.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8543 != null )
					__0x8543.Enabled = newValue;

				var __0x8544 = __0x8578.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8544 != null )
					__0x8544.Enabled = newValue;

				var __0x8545 = __0x8578.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8545 != null )
					__0x8545.Enabled = newValue;
			}
		}

		public bool CanRename( out ContentBrowser.Item itemToRename )
		{
			var __0x8546 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			if( __0x8546.contentBrowserProject.SelectedItems.Length == 1 )
			{
				var __0x8547 = __0x8546.contentBrowserProject.SelectedItems[ 0 ];

				var __0x8548 = __0x8547.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8548 != null )
				{
					itemToRename = __0x8547;
					return true;
				}

				var __0x8549 = __0x8547.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8549 != null )
				{
					itemToRename = __0x8547;
					return true;
				}
			}

			itemToRename = null;
			return false;
		}

		public void TryRename()
		{
			if( !CanRename( out var itemToRename ) )
				return;

			var __0x8550 = __0x8580();

			var __0x8551 = itemToRename.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem;
			if( __0x8551 != null )
			{
				var __0x8552 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), __0x8551.Name, EditorLocalization.Translate( "General", "Rename" ),
					delegate ( string __0x8609, ref string __0x8610 )
					{
						if( string.IsNullOrEmpty( __0x8609.Trim() ) )
							return false;
						return true;
					},
					delegate ( string __0x8611, ref string __0x8612 )
					{
						__0x8551.Name = __0x8611;
						return true;
					}
				);

				if( __0x8552.ShowDialog() == DialogResult.Cancel )
					return;

				__0x8550.SetToNotDefault();
				if( Owner?.DocumentWindow?.Document != null )
					Owner.DocumentWindow.Document.Modified = true;

				__0x8551.Name = __0x8552.TextBoxText;

				( (ContentBrowserItem_Virtual)itemToRename ).SetText( __0x8551.Name );
				Owner?.Invalidate( true );
			}

			var __0x8553 = itemToRename.Tag as ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem;
			if( __0x8553 != null )
			{
				var __0x8554 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), __0x8553.Name, EditorLocalization.Translate( "General", "Rename" ),
					delegate ( string __0x8613, ref string __0x8614 )
					{
						if( string.IsNullOrEmpty( __0x8613.Trim() ) )
							return false;
						return true;
					},
					delegate ( string __0x8615, ref string __0x8616 )
					{
						__0x8553.Name = __0x8615;
						return true;
					}
				);

				if( __0x8554.ShowDialog() == DialogResult.Cancel )
					return;

				__0x8550.SetToNotDefault();
				if( Owner?.DocumentWindow?.Document != null )
					Owner.DocumentWindow.Document.Modified = true;

				__0x8553.Name = __0x8554.TextBoxText;

				( (ContentBrowserItem_Virtual)itemToRename ).SetText( __0x8553.Name );
				Owner?.Invalidate( true );
			}
		}

		public bool CanNewGroup( out string newGroupText, out ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem destinationTab )
		{
			newGroupText = "New Group";
			destinationTab = null;

			var __0x8555 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8556 = __0x8555.contentBrowserProject.SelectedItems;
			if( __0x8556.Length == 1 )
			{
				var __0x8557 = __0x8556[ 0 ];

				if( __0x8557 is __0x8619 )
				{
					newGroupText = "New Tab";
					return true;
				}

				var __0x8558 = __0x8557 as __0x8618;
				if( __0x8558 != null )
				{
					destinationTab = __0x8558.tabItem;
					return true;
				}
			}

			return false;
		}

		public void TryNewGroup()
		{
			if( !CanNewGroup( out _, out var destinationTab ) )
				return;

			var __0x8559 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8560 = __0x8580();

			__0x8560.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			object __0x8561 = null;

			if( destinationTab == null )
			{
				

				var __0x8562 = new ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem();
				__0x8562.Name = "My Tab";
				__0x8562.Type = ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Additional;

				__0x8560.RibbonTabs.Add( __0x8562 );

				__0x8561 = __0x8562;
			}
			else
			{
				

				var __0x8563 = new ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem();
				__0x8563.Name = "My Group";
				__0x8563.Type = ProjectSettingsPage_RibbonAndToolbar.RibbonAndToolbarActionsClass.GroupItem.TypeEnum.Additional;

				destinationTab.Groups.Add( __0x8563 );

				__0x8561 = __0x8563;
			}

			

			__0x8581();

			var __0x8564 = __0x8559.contentBrowserProject.FindItemByTag( __0x8561 );
			if( __0x8564 != null )
				__0x8559.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8564 } );
		}

		internal void ToolStripButtonNewGroup_Click( object sender, EventArgs e )
		{
			TryNewGroup();
		}
	}
}





namespace NeoAxis.Editor
{
	partial class HCItemProjectRibbonAndToolbarActionsForm : EUserControl
	{
		public HCItemProjectRibbonAndToolbarActionsForm()
		{
			__0x8631();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x8626.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();

			
			
			
		}

		private void __0x8630( object __0x8632, EventArgs __0x8633 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			{
				var __0x8620 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x8634 )
				{
					__0x8634.Size = new Size( (int)( 20 * __0x8620 ), (int)( 20 * __0x8620 + 2 ) );
					
				}

				__0x8626.Padding = new Padding( (int)__0x8620 );
				__0x8626.Size = new Size( 10, (int)( 21 * __0x8620 + 2 ) );
				__0x8628.SplitterDistance = (int)( 21 * __0x8620 + 2 + (int)__0x8620 - 1 );

				foreach( var __0x8629 in __0x8626.Items )
				{
					var __0x8621 = __0x8629 as ToolStripButton;
					if( __0x8621 != null )
						UpdateSize( __0x8621 );
				}
			}
		}

	}
}

namespace NeoAxis.Editor
{
	partial class HCItemProjectRibbonAndToolbarActionsForm
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x8622 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x8622 != null ) )
			{
				__0x8622.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x8631()
		{
			this.__0x8623 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowserAll = new NeoAxis.Editor.ContentBrowser();
			this.__0x8628 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x8626 = new System.Windows.Forms.ToolStrip();
			this.toolStripButtonEnabled = new System.Windows.Forms.ToolStripButton();
			this.__0x8627 = new System.Windows.Forms.ToolStripSeparator();
			this.toolStripButtonNewGroup = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonAdd = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonDelete = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonRename = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonMoveUp = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonMoveDown = new System.Windows.Forms.ToolStripButton();
			this.contentBrowserProject = new NeoAxis.Editor.ContentBrowser();
			this.kryptonButtonReset = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8624 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x8625 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x8623)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x8623.Panel1)).BeginInit();
			this.__0x8623.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8623.Panel2)).BeginInit();
			this.__0x8623.Panel2.SuspendLayout();
			this.__0x8623.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8628)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x8628.Panel1)).BeginInit();
			this.__0x8628.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8628.Panel2)).BeginInit();
			this.__0x8628.Panel2.SuspendLayout();
			this.__0x8628.SuspendLayout();
			this.__0x8626.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x8623.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8623.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x8623.Location = new System.Drawing.Point(2, 24);
			this.__0x8623.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8623.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x8623.Panel1.Controls.Add(this.contentBrowserAll);
			
			
			
			this.__0x8623.Panel2.Controls.Add(this.__0x8628);
			this.__0x8623.Size = new System.Drawing.Size(452, 411);
			this.__0x8623.SplitterDistance = 226;
			this.__0x8623.SplitterPercent = 0.5D;
			this.__0x8623.TabIndex = 4;
			
			
			
			this.contentBrowserAll.CanSelectObjectSettings = false;
			this.contentBrowserAll.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserAll.FilteringMode = null;
			this.contentBrowserAll.ListViewModeOverride = null;
			this.contentBrowserAll.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserAll.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.contentBrowserAll.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserAll.Name = "contentBrowserAll";
			this.contentBrowserAll.ReadOnlyHierarchy = false;
			this.contentBrowserAll.ShowToolBar = false;
			this.contentBrowserAll.Size = new System.Drawing.Size(226, 411);
			this.contentBrowserAll.TabIndex = 3;
			this.contentBrowserAll.ThisIsSettingsWindow = false;
			
			
			
			this.__0x8628.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x8628.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x8628.FixedPanel = System.Windows.Forms.FixedPanel.Panel1;
			this.__0x8628.IsSplitterFixed = true;
			this.__0x8628.Location = new System.Drawing.Point(0, 0);
			this.__0x8628.Name = "kryptonSplitContainer2";
			this.__0x8628.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.__0x8628.Panel1.Controls.Add(this.__0x8626);
			this.__0x8628.Panel1MinSize = 10;
			
			
			
			this.__0x8628.Panel2.Controls.Add(this.contentBrowserProject);
			this.__0x8628.Size = new System.Drawing.Size(221, 411);
			this.__0x8628.SplitterDistance = 24;
			this.__0x8628.SplitterPercent = 0.058394160583941604D;
			this.__0x8628.SplitterWidth = 0;
			this.__0x8628.TabIndex = 6;
			
			
			
			this.__0x8626.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x8626.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x8626.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonEnabled,
            this.__0x8627,
            this.toolStripButtonNewGroup,
            this.toolStripButtonAdd,
            this.toolStripButtonDelete,
            this.toolStripButtonRename,
            this.toolStripButtonMoveUp,
            this.toolStripButtonMoveDown});
			this.__0x8626.Location = new System.Drawing.Point(0, 0);
			this.__0x8626.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x8626.Name = "toolStrip1";
			this.__0x8626.AutoSize = false;
			this.__0x8626.Size = new System.Drawing.Size(221, 26);
			this.__0x8626.TabIndex = 5;
			this.__0x8626.Text = "toolStrip1";
			
			
			
			this.toolStripButtonEnabled.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonEnabled.Image = global::NeoAxis.Properties.Resources.Checked_16;
			this.toolStripButtonEnabled.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonEnabled.Name = "toolStripButtonEnabled";
			this.toolStripButtonEnabled.AutoSize = false;
			this.toolStripButtonEnabled.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonEnabled.Text = "Enabled";
			
			
			
			this.__0x8627.Name = "toolStripSeparator1";
			this.__0x8627.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.toolStripButtonNewGroup.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonNewGroup.Image = global::NeoAxis.Properties.Resources.NewFolder_16;
			this.toolStripButtonNewGroup.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonNewGroup.Name = "toolStripButtonNewGroup";
			this.toolStripButtonNewGroup.AutoSize = false;
			this.toolStripButtonNewGroup.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonNewGroup.Text = "New Group";
			
			
			
			this.toolStripButtonAdd.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonAdd.Image = global::NeoAxis.Properties.Resources.Add_16;
			this.toolStripButtonAdd.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonAdd.Name = "toolStripButtonAdd";
			this.toolStripButtonAdd.AutoSize = false;
			this.toolStripButtonAdd.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonAdd.Text = "Add";
			
			
			
			this.toolStripButtonDelete.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonDelete.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.toolStripButtonDelete.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonDelete.Name = "toolStripButtonDelete";
			this.toolStripButtonDelete.AutoSize = false;
			this.toolStripButtonDelete.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonDelete.Text = "Delete";
			
			
			
			this.toolStripButtonRename.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonRename.Image = global::NeoAxis.Properties.Resources.Rename_16x;
			this.toolStripButtonRename.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonRename.Name = "toolStripButtonRename";
			this.toolStripButtonRename.AutoSize = false;
			this.toolStripButtonRename.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonRename.Text = "Rename";
			
			
			
			this.toolStripButtonMoveUp.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonMoveUp.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.toolStripButtonMoveUp.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonMoveUp.Name = "toolStripButtonMoveUp";
			this.toolStripButtonMoveUp.AutoSize = false;
			this.toolStripButtonMoveUp.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonMoveUp.Text = "Move Up";
			
			
			
			this.toolStripButtonMoveDown.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonMoveDown.Image = global::NeoAxis.Properties.Resources.MoveDown_16;
			this.toolStripButtonMoveDown.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonMoveDown.Name = "toolStripButtonMoveDown";
			this.toolStripButtonMoveDown.AutoSize = false;
			this.toolStripButtonMoveDown.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonMoveDown.Text = "Move Down";
			
			
			
			this.contentBrowserProject.CanSelectObjectSettings = false;
			this.contentBrowserProject.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserProject.FilteringMode = null;
			this.contentBrowserProject.ListViewModeOverride = null;
			this.contentBrowserProject.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserProject.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.contentBrowserProject.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserProject.MultiSelect = true;
			this.contentBrowserProject.Name = "contentBrowserProject";
			this.contentBrowserProject.ReadOnlyHierarchy = false;
			this.contentBrowserProject.ShowToolBar = false;
			this.contentBrowserProject.Size = new System.Drawing.Size(221, 387);
			this.contentBrowserProject.TabIndex = 4;
			this.contentBrowserProject.ThisIsSettingsWindow = false;
			
			
			
			this.kryptonButtonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonButtonReset.Location = new System.Drawing.Point(2, 441);
			this.kryptonButtonReset.Margin = new System.Windows.Forms.Padding(2);
			this.kryptonButtonReset.Name = "kryptonButtonReset";
			this.kryptonButtonReset.Size = new System.Drawing.Size(110, 26);
			this.kryptonButtonReset.TabIndex = 5;
			this.kryptonButtonReset.Values.Text = "Reset to Default";
			
			
			
			this.__0x8624.Location = new System.Drawing.Point(0, 3);
			this.__0x8624.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8624.Name = "kryptonLabel1";
			this.__0x8624.Size = new System.Drawing.Size(62, 16);
			this.__0x8624.TabIndex = 6;
			this.__0x8624.Values.Text = "All actions";
			
			
			
			this.__0x8625.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8625.Location = new System.Drawing.Point(342, 3);
			this.__0x8625.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8625.Name = "kryptonLabel2";
			this.__0x8625.Size = new System.Drawing.Size(112, 16);
			this.__0x8625.TabIndex = 7;
			this.__0x8625.Values.Text = "Current configuration";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x8625);
			this.Controls.Add(this.__0x8624);
			this.Controls.Add(this.kryptonButtonReset);
			this.Controls.Add(this.__0x8623);
			this.Margin = new System.Windows.Forms.Padding(2);
			this.Name = "HCItemProjectRibbonAndToolbarActionsForm";
			this.Size = new System.Drawing.Size(456, 470);
			this.Load += new System.EventHandler( this.__0x8630 );
			( (System.ComponentModel.ISupportInitialize)(this.__0x8623.Panel1)).EndInit();
			this.__0x8623.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8623.Panel2)).EndInit();
			this.__0x8623.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8623)).EndInit();
			this.__0x8623.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8628.Panel1)).EndInit();
			this.__0x8628.Panel1.ResumeLayout(false);
			this.__0x8628.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8628.Panel2)).EndInit();
			this.__0x8628.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8628)).EndInit();
			this.__0x8628.ResumeLayout(false);
			this.__0x8626.ResumeLayout(false);
			this.__0x8626.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public ContentBrowser contentBrowserAll;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x8623;
		public ContentBrowser contentBrowserProject;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton kryptonButtonReset;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8624;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8625;
		private System.Windows.Forms.ToolStrip __0x8626;
		public System.Windows.Forms.ToolStripButton toolStripButtonDelete;
		public System.Windows.Forms.ToolStripButton toolStripButtonAdd;
		public System.Windows.Forms.ToolStripButton toolStripButtonRename;
		public System.Windows.Forms.ToolStripButton toolStripButtonMoveUp;
		public System.Windows.Forms.ToolStripButton toolStripButtonMoveDown;
		public System.Windows.Forms.ToolStripButton toolStripButtonEnabled;
		private System.Windows.Forms.ToolStripSeparator __0x8627;
		public System.Windows.Forms.ToolStripButton toolStripButtonNewGroup;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x8628;
	}
}





namespace NeoAxis.Editor
{
	class HCItemProjectShortcuts : HCItemProperty
	{
		
		

		ProjectSettingsPage_Shortcuts.ShortcutSettingsClass.ActionItem __0x8635;

		

		public HCItemProjectShortcuts( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x8636 = new HCItemProjectShortcutsForm();
			return __0x8636;
		}

		public override EUserControl CreateControlImpl()
		{
			var __0x8637 = (HCGridProperty)base.CreateControlImpl();
			__0x8637.ShowOnlyEditorControl = true;
			return __0x8637;
		}

		string __0x8680( string __0x8687 )
		{
			return EditorLocalization.Translate( "ProjectShortcuts", __0x8687 );
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8638 = __0x8683();
			if( __0x8638 == null )
				return;

			var __0x8639 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			__0x8639.kryptonButtonReset.Click += KryptonButtonReset_Click;

			
			{
				var __0x8640 = new List<ContentBrowser.Item>();

				var __0x8641 = new List<EditorAction>( EditorActions.Actions ).Where( __0x8688 => !__0x8688.CompletelyDisabled ).ToArray();
				CollectionUtility.InsertionSort( __0x8641, delegate ( EditorAction __0x8689, EditorAction __0x8690 )
				{
					return string.Compare( __0x8689.Name, __0x8690.Name );
				} );

				Dictionary<Image, string> __0x8642 = new Dictionary<Image, string>();
				int __0x8643 = 0;

				foreach( var __0x8678 in __0x8641 )
				{
					var __0x8644 = __0x8678.Name;

					var __0x8645 = __0x8638.GetActionItem( __0x8678.Name );
					if( __0x8645 != null )
					{
						var __0x8646 = EditorActions.ConvertShortcutKeysToString( __0x8645.ToArray() );
						if( __0x8646 != "" )
							__0x8644 += " (" + __0x8646 + ")";
					}
					
					
					
					

					var __0x8647 = new ContentBrowserItem_Virtual( __0x8639.contentBrowserAll, null, __0x8644 );
					__0x8647.Tag = __0x8678;
					__0x8647.Description = __0x8678.Description;

					var __0x8648 = __0x8678.GetImageSmall();
					if( __0x8648 != null )
					{
						if( !__0x8642.TryGetValue( __0x8648, out var id ) )
						{
							id = "Name_" + __0x8643.ToString();
							__0x8642[ __0x8648 ] = id;
							__0x8639.contentBrowserAll.AddImageKey( id, __0x8648, __0x8678.GetImageBig() );
							__0x8643++;
						}
						__0x8647.imageKey = id;
					}

					__0x8640.Add( __0x8647 );
				}

				__0x8639.contentBrowserAll.SetData( __0x8640, false );
			}
		}

		class __0x8701
		{
			HCItemProjectShortcuts __0x8649;
			ProjectSettingsPage_Shortcuts.ShortcutSettingsClass.ActionItem __0x8650;

			

			static void __0x8681( Keys __0x8691, out EKeys __0x8692, out bool __0x8693, out bool __0x8694, out bool __0x8695 )
			{
				var __0x8651 = __0x8691;
				__0x8651 = __0x8651 & ~Keys.Shift;
				__0x8651 = __0x8651 & ~Keys.Control;
				__0x8651 = __0x8651 & ~Keys.Alt;
				__0x8692 = (EKeys)__0x8651;

				__0x8693 = ( ( __0x8691 & Keys.Shift ) == Keys.Shift );
				__0x8694 = ( ( __0x8691 & Keys.Control ) == Keys.Control );
				__0x8695 = ( ( __0x8691 & Keys.Alt ) == Keys.Alt );
			}

			static void __0x8682( EKeys __0x8696, bool __0x8697, bool __0x8698, bool __0x8699, out Keys __0x8700 )
			{
				__0x8700 = (Keys)__0x8696;
				if( __0x8697 )
					__0x8700 |= Keys.Shift;
				if( __0x8698 )
					__0x8700 |= Keys.Control;
				if( __0x8699 )
					__0x8700 |= Keys.Alt;
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Key" )]
			public EKeys Shortcut1Key
			{
				get
				{
					__0x8681( __0x8650.Shortcut1, out var value, out _, out _, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( key == value )
						return;

					var __0x8652 = __0x8649.__0x8683();
					if( __0x8652 != null )
						__0x8652.SetToNotDefault();

					key = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut1 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Shift" )]
			public bool Shortcut1Shift
			{
				get
				{
					__0x8681( __0x8650.Shortcut1, out _, out var value, out _, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( shift == value )
						return;

					var __0x8653 = __0x8649.__0x8683();
					if( __0x8653 != null )
						__0x8653.SetToNotDefault();

					shift = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut1 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Control" )]
			public bool Shortcut1Control
			{
				get
				{
					__0x8681( __0x8650.Shortcut1, out _, out _, out var value, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( control == value )
						return;

					var __0x8654 = __0x8649.__0x8683();
					if( __0x8654 != null )
						__0x8654.SetToNotDefault();

					control = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut1 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Alt" )]
			public bool Shortcut1Alt
			{
				get
				{
					__0x8681( __0x8650.Shortcut1, out _, out _, out _, out var value );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( alt == value )
						return;

					var __0x8655 = __0x8649.__0x8683();
					if( __0x8655 != null )
						__0x8655.SetToNotDefault();

					alt = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut1 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Key" )]
			public EKeys Shortcut2Key
			{
				get
				{
					__0x8681( __0x8650.Shortcut2, out var value, out _, out _, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( key == value )
						return;

					var __0x8656 = __0x8649.__0x8683();
					if( __0x8656 != null )
						__0x8656.SetToNotDefault();

					key = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut2 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Shift" )]
			public bool Shortcut2Shift
			{
				get
				{
					__0x8681( __0x8650.Shortcut2, out _, out var value, out _, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( shift == value )
						return;

					var __0x8657 = __0x8649.__0x8683();
					if( __0x8657 != null )
						__0x8657.SetToNotDefault();

					shift = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut2 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Control" )]
			public bool Shortcut2Control
			{
				get
				{
					__0x8681( __0x8650.Shortcut2, out _, out _, out var value, out _ );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( control == value )
						return;

					var __0x8658 = __0x8649.__0x8683();
					if( __0x8658 != null )
						__0x8658.SetToNotDefault();

					control = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut2 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Alt" )]
			public bool Shortcut2Alt
			{
				get
				{
					__0x8681( __0x8650.Shortcut2, out _, out _, out _, out var value );
					return value;
				}
				set
				{
					__0x8681( __0x8650.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( alt == value )
						return;

					var __0x8659 = __0x8649.__0x8683();
					if( __0x8659 != null )
						__0x8659.SetToNotDefault();

					alt = value;
					__0x8682( key, shift, control, alt, out __0x8650.Shortcut2 );

					if( __0x8649.Owner?.DocumentWindow?.Document != null )
						__0x8649.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			public __0x8701( HCItemProjectShortcuts owner, ProjectSettingsPage_Shortcuts.ShortcutSettingsClass.ActionItem obj )
			{
				this.__0x8649 = owner;
				this.__0x8650 = obj;
			}
		}

		internal void KryptonButtonReset_Click( object sender, EventArgs e )
		{
			var __0x8660 = __0x8683();
			if( __0x8660 == null )
				return;

			if( EditorMessageBox.ShowQuestion( __0x8680( "Reset the configuration of shortcuts to default?" ), EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			__0x8660.ResetToDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;
		}

		ProjectSettingsPage_Shortcuts.ShortcutSettingsClass __0x8683()
		{
			var __0x8661 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x8662 = GetValues();
			if( __0x8662 == null || __0x8662.Length != 1 )
				return null;
			return __0x8662[ 0 ] as ProjectSettingsPage_Shortcuts.ShortcutSettingsClass;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8663 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x8664 = __0x8683();
			if( __0x8664 == null )
				return;

			__0x8663.kryptonButtonReset.Enabled = !__0x8664.UseDefaultSettings;

			__0x8686();
			__0x8685();
		}

		EditorAction __0x8684()
		{
			var __0x8665 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x8666 = __0x8665.contentBrowserAll.SelectedItems;
			if( __0x8666.Length == 1 )
				return __0x8666[ 0 ].Tag as EditorAction;
			return null;
		}

		void __0x8685()
		{
			var __0x8667 = __0x8683();
			if( __0x8667 == null )
				return;
			var __0x8668 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			ProjectSettingsPage_Shortcuts.ShortcutSettingsClass.ActionItem __0x8669 = null;

			var __0x8670 = __0x8684();
			if( __0x8670 != null )
				__0x8669 = __0x8667.GetActionItem( __0x8670.Name );

			if( __0x8669 != __0x8635 )
			{
				__0x8635 = __0x8669;

				

				__0x8668.hierarchicalContainerSelected.SetData( null, new object[ 0 ], false );
				__0x8668.hierarchicalContainerSelected.UpdateItems();

				if( __0x8635 != null )
				{
					var __0x8671 = new __0x8701( this, __0x8635 );

					__0x8668.hierarchicalContainerSelected.SetData( null, new object[] { __0x8671 }, false );
					__0x8668.hierarchicalContainerSelected.UpdateItems();
				}

				
				
				

				
				
				
				
				

				

				

				
				
				

				
				
				
				

				

				
				

			}

			

			
			
			
			
			
			
			
			
			

			

			

			
			
			
			
			

			
			
			
			

			
			
			
			

			
			
		}

		void __0x8686()
		{
			var __0x8672 = __0x8683();
			if( __0x8672 == null )
				return;
			var __0x8673 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8679 in __0x8673.contentBrowserAll.GetAllItems() )
			{
				var __0x8674 = __0x8679.Tag as EditorAction;
				if( __0x8674 != null )
				{
					var __0x8675 = __0x8674.Name;

					var __0x8676 = __0x8672.GetActionItem( __0x8674.Name );
					if( __0x8676 != null )
					{
						var __0x8677 = EditorActions.ConvertShortcutKeysToString( __0x8676.ToArray() );
						if( __0x8677 != "" )
							__0x8675 += " (" + __0x8677 + ")";
					}

					( (ContentBrowserItem_Virtual)__0x8679 ).SetText( __0x8675 );
				}
			}
		}

	}
}





namespace NeoAxis.Editor
{
	partial class HCItemProjectShortcutsForm : EUserControl
	{
		public HCItemProjectShortcutsForm()
		{
			__0x8706();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCItemProjectShortcutsForm
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x8702 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x8702 != null ) )
			{
				__0x8702.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x8706()
		{
			this.__0x8703 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowserAll = new NeoAxis.Editor.ContentBrowser();
			this.hierarchicalContainerSelected = new NeoAxis.Editor.HierarchicalContainer();
			this.kryptonButtonReset = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8704 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x8705 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x8703)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x8703.Panel1)).BeginInit();
			this.__0x8703.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8703.Panel2)).BeginInit();
			this.__0x8703.Panel2.SuspendLayout();
			this.__0x8703.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x8703.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8703.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x8703.Location = new System.Drawing.Point(3, 30);
			this.__0x8703.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x8703.Panel1.Controls.Add(this.contentBrowserAll);
			
			
			
			this.__0x8703.Panel2.Controls.Add(this.hierarchicalContainerSelected);
			this.__0x8703.Size = new System.Drawing.Size(602, 506);
			this.__0x8703.SplitterDistance = 301;
			this.__0x8703.SplitterPercent = 0.5D;
			this.__0x8703.TabIndex = 4;
			
			
			
			this.contentBrowserAll.CanSelectObjectSettings = false;
			this.contentBrowserAll.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserAll.FilteringMode = null;
			this.contentBrowserAll.ListViewModeOverride = null;
			this.contentBrowserAll.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserAll.Margin = new System.Windows.Forms.Padding(4);
			this.contentBrowserAll.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserAll.Name = "contentBrowserAll";
			this.contentBrowserAll.ReadOnlyHierarchy = false;
			this.contentBrowserAll.ShowToolBar = false;
			this.contentBrowserAll.Size = new System.Drawing.Size(301, 506);
			this.contentBrowserAll.TabIndex = 3;
			this.contentBrowserAll.ThisIsSettingsWindow = false;
			
			
			
			this.hierarchicalContainerSelected.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.hierarchicalContainerSelected.Dock = System.Windows.Forms.DockStyle.Fill;
			this.hierarchicalContainerSelected.Location = new System.Drawing.Point(0, 0);
			this.hierarchicalContainerSelected.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.hierarchicalContainerSelected.Name = "hierarchicalContainerSelected";
			this.hierarchicalContainerSelected.Size = new System.Drawing.Size(296, 506);
			this.hierarchicalContainerSelected.SplitterPosition = 118;
			this.hierarchicalContainerSelected.SplitterRatio = 0.4F;
			this.hierarchicalContainerSelected.TabIndex = 6;
			
			
			
			this.kryptonButtonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonButtonReset.Location = new System.Drawing.Point(3, 543);
			this.kryptonButtonReset.Name = "kryptonButtonReset";
			this.kryptonButtonReset.Size = new System.Drawing.Size(147, 32);
			this.kryptonButtonReset.TabIndex = 5;
			this.kryptonButtonReset.Values.Text = "Reset to Default";
			
			
			
			this.__0x8704.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8704.Location = new System.Drawing.Point(493, 4);
			this.__0x8704.Name = "kryptonLabel2";
			this.__0x8704.Size = new System.Drawing.Size(112, 20);
			this.__0x8704.TabIndex = 9;
			this.__0x8704.Values.Text = "Selected action";
			this.__0x8704.Visible = false;
			
			
			
			this.__0x8705.Location = new System.Drawing.Point(0, 4);
			this.__0x8705.Name = "kryptonLabel1";
			this.__0x8705.Size = new System.Drawing.Size(79, 20);
			this.__0x8705.TabIndex = 8;
			this.__0x8705.Values.Text = "All actions";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x8704);
			this.Controls.Add(this.__0x8705);
			this.Controls.Add(this.kryptonButtonReset);
			this.Controls.Add(this.__0x8703);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCItemProjectShortcutsForm";
			this.Size = new System.Drawing.Size(608, 578);
			((System.ComponentModel.ISupportInitialize)(this.__0x8703.Panel1)).EndInit();
			this.__0x8703.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8703.Panel2)).EndInit();
			this.__0x8703.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8703)).EndInit();
			this.__0x8703.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public ContentBrowser contentBrowserAll;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x8703;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton kryptonButtonReset;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8704;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8705;
		public HierarchicalContainer hierarchicalContainerSelected;
	}
}





namespace NeoAxis.Editor
{
	public class NewResourceType
	{
	}

	/// <summary>
	/// Create a new text file.
	/// </summary>
	[NewObjectCell( typeof( NewResourceType_TextFile_Cell ) )]
	[ResourceFileExtension( "txt" )]
	public class NewResourceType_TextFile : NewResourceType
	{
	}

	
	
	/// <summary>
	/// Create a new C# class library. The feature is not implemented.
	/// </summary>
	[ResourceFileExtension( "csproj" )]
	public class NewResourceType_CSharpClassLibrary : NewResourceType
	{
	}

	
	
	
	/// <summary>
	/// Create a new executable module (C# app). The feature is not implemented.
	/// </summary>
	public class NewResourceType_ExecutableApp : NewResourceType
	{
	}

	
	
	
	
	
}





namespace NeoAxis.Editor
{
	[NewObjectSettings( typeof( NewObjectSettingsCSharpClass ) )]
	[ResourceFileExtension( "cs" )]
	[NewObjectDefaultName( "MyClass" )]
	public class NewResourceType_CSharpClass : NewResourceType
	{
		/// <summary>
		/// A set of settings for creation <see cref="NewResourceType_CSharpClass"/> in the editor.
		/// </summary>
		public class NewObjectSettingsCSharpClass : NewObjectSettings
		{
			[DefaultValue( "NeoAxis.Component" )]
			[Category( "Options" )]
			[DisplayName( "Base class" )]
			public string BaseClass { get; set; } = "NeoAxis.Component";

			[DefaultValue( true )]
			[Category( "Options" )]
			[DisplayName( "Add to Project.csproj" )]
			public bool AddToProjectCsproj { get; set; } = true;

			[DefaultValue( false )]
			[Category( "Options" )]
			[DisplayName( "Add example properties" )]
			public bool AddExampleProperties { get; set; } = false;

			public override bool Creation( NewObjectCell.ObjectCreationContext context )
			{
				string __0x8707 = @"using System;

namespace Project
{
	public class {Name}{BasedOnComponentClass}
	{
{Body}
	}
}";

				
				var __0x8708 = Path.GetFileNameWithoutExtension( context.fileCreationRealFileName );
				__0x8707 = __0x8707.Replace( "{Name}", __0x8708 );

				
				if( !string.IsNullOrEmpty( BaseClass ) )
					__0x8707 = __0x8707.Replace( "{BasedOnComponentClass}", " : " + BaseClass );
				else
					__0x8707 = __0x8707.Replace( "{BasedOnComponentClass}", "" );

				
				{
					var __0x8709 = new List<string>();

					if( AddExampleProperties )
					{
						__0x8709.Add( "[DefaultValue( 1 )]" );
						__0x8709.Add( "[Range( 0, 2 )]" );
						__0x8709.Add( "public double Power { get; set; } = 1;" );
						__0x8709.Add( "" );
						__0x8709.Add( "[DefaultValue( \"1 1 1\" )]" );
						__0x8709.Add( "public ColorValue Color { get; set; } = new ColorValue( 1, 1, 1 );" );

						
						
					}

					var __0x8710 = false;
					if( !string.IsNullOrEmpty( BaseClass ) )
					{
						if( BaseClass == "NeoAxis.Component" )
							__0x8710 = true;
						var __0x8711 = MetadataManager.GetType( BaseClass );
						if( __0x8711 != null && typeof( Component ).IsAssignableFrom( __0x8711.GetNetType() ) )
							__0x8710 = true;
						var __0x8712 = MetadataManager.GetType( "NeoAxis." + BaseClass );
						if( __0x8712 != null && typeof( Component ).IsAssignableFrom( __0x8712.GetNetType() ) )
							__0x8710 = true;
					}

					if( __0x8710 )
					{
						if( __0x8709.Count != 0 )
							__0x8709.Add( "" );

						__0x8709.Add( "protected override void OnEnabledInSimulation()" );
						__0x8709.Add( "{" );
						__0x8709.Add( "}" );
						__0x8709.Add( "" );

						__0x8709.Add( "protected override void OnUpdate( float delta )" );
						__0x8709.Add( "{" );
						__0x8709.Add( "}" );
						__0x8709.Add( "" );

						__0x8709.Add( "protected override void OnSimulationStep()" );
						__0x8709.Add( "{" );
						__0x8709.Add( "}" );
					}

					var __0x8713 = "";
					foreach( var __0x8716 in __0x8709 )
					{
						if( __0x8713 != "" )
							__0x8713 += "\r\n";
						__0x8713 += "\t\t" + __0x8716;
					}
					__0x8707 = __0x8707.Replace( "{Body}", __0x8713 );
				}

				
				try
				{
					File.WriteAllText( context.fileCreationRealFileName, __0x8707 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return false;
				}

				
				if( AddToProjectCsproj )
				{
					var __0x8714 = new List<string>();

					var __0x8715 = Path.Combine( "Assets", VirtualPathUtility.GetVirtualPathByReal( context.fileCreationRealFileName ) );
					__0x8714.Add( __0x8715 );

					if( CSharpProjectFileUtility.UpdateProjectFile( __0x8714, null, out var error ) )
					{
						if( __0x8714.Count > 1 )
							Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
						else
							Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
					}
					else
						Log.Warning( error );
				}

				return true;
			}
		}
	}
}




namespace NeoAxis.Editor
{
	public partial class NewResourceType_CSharpClassLibrary_Cell : NewObjectCell
	{
		public NewResourceType_CSharpClassLibrary_Cell()
		{
			__0x8718();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			

			
			
			
			
			
			
			
			
			

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_CSharpClassLibrary_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8717 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8717 != null))
            {
                __0x8717.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8718()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_CSharpClassLibrary_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class NewResourceType_FlowGraphLibrary_Cell : NewObjectCell
	{
		public NewResourceType_FlowGraphLibrary_Cell()
		{
			__0x8721();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			var __0x8719 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\FlowGraphLibrary.component" );

			try
			{
				File.Copy( __0x8719, context.fileCreationRealFileName );
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return false;
			}

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_FlowGraphLibrary_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8720 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8720 != null))
            {
                __0x8720.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8721()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_FlowGraphLibrary_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class NewResourceType_TextFile_Cell : NewObjectCell
	{
		public NewResourceType_TextFile_Cell()
		{
			__0x8723();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			try
			{
				File.WriteAllText( context.fileCreationRealFileName, "" );
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return false;
			}

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_TextFile_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8722 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8722 != null))
            {
                __0x8722.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8723()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_TextFile_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class ScreenNotificationForm : Form
	{
		const double __0x8724 = 0.93;

		static readonly List<ScreenNotificationForm> __0x8725 = new List<ScreenNotificationForm>();
		Color __0x8726 = Color.FromArgb( 144, 171, 231 );
		double __0x8727;

		

		public ScreenNotificationForm( string title, string body, bool error, int duration )
		{
			__0x8746();

			var __0x8728 = duration;
			if( __0x8728 < 0 )
				__0x8728 = int.MaxValue;
			else
				__0x8728 = __0x8728 * 1000;

			__0x8733.Interval = __0x8728;
			__0x8735.Text = title;
			__0x8734.Text = body;

			if( error )
				BackColor = Color.FromArgb( 206, 0, 0 );

			if( duration == -1 )
			{
				__0x8727 = __0x8724;
				Opacity = __0x8727;
			}

			if( EditorAPI.DarkTheme )
			{
				if( !error )
					BackColor = Color.FromArgb( 10, 10, 10 );
				
				__0x8726 = Color.FromArgb( 90, 90, 90 );
			}
		}

		protected override bool ShowWithoutActivation
		{
			get { return true; }
		}

		const int __0x8729 = 0x00000008;
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x8730 = base.CreateParams;
				__0x8730.ExStyle |= __0x8729;
				return __0x8730;
			}
		}

		
		
		
		
		

		
		
		

		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			System.Drawing.Rectangle __0x8731 = ClientRectangle;
			
			ControlPaint.DrawBorder( e.Graphics, __0x8731, __0x8726, ButtonBorderStyle.Solid );
		}

		private void __0x8739( object __0x8747, EventArgs __0x8748 )
		{
			
			Location = new Point( Screen.PrimaryScreen.WorkingArea.Width - Width - 2, Screen.PrimaryScreen.WorkingArea.Height - Height - 2 );

			
			foreach( ScreenNotificationForm __0x8737 in __0x8725 )
				__0x8737.Top -= Height + 3;

			__0x8725.Add( this );
			__0x8733.Start();
			__0x8736.Start();
		}

		private void __0x8740( object __0x8749, FormClosedEventArgs __0x8750 )
		{
			
			foreach( ScreenNotificationForm __0x8738 in __0x8725 )
			{
				if( __0x8738 == this )
				{
					
					break;
				}
				__0x8738.Top += Height + 3;
			}

			__0x8725.Remove( this );
		}

		private void __0x8741( object __0x8751, EventArgs __0x8752 )
		{
			Close();
		}

		private void __0x8742( object __0x8753, EventArgs __0x8754 )
		{
			Close();
		}

		private void __0x8743( object __0x8755, EventArgs __0x8756 )
		{
			Close();
		}

		private void __0x8744( object __0x8757, EventArgs __0x8758 )
		{
			Close();
		}

		public void UpdateOpacity()
		{
			if( __0x8727 < __0x8724 )
			{
				__0x8727 += 10.0 / 1000.0 * 8;
				if( __0x8727 > __0x8724 )
					__0x8727 = __0x8724;
				Opacity = __0x8727;
			}
		}

		public void SetMaxOpacity()
		{
			__0x8727 = __0x8724;
			Opacity = __0x8727;
		}

		private void __0x8745( object __0x8759, EventArgs __0x8760 )
		{
			UpdateOpacity();
		}
	}
}
namespace NeoAxis.Editor
{
    partial class ScreenNotificationForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8732 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8732 != null))
            {
                __0x8732.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8746()
        {
			this.__0x8732 = new System.ComponentModel.Container();
			this.__0x8733 = new System.Windows.Forms.Timer(this.__0x8732);
			this.__0x8734 = new System.Windows.Forms.Label();
			this.__0x8735 = new System.Windows.Forms.Label();
			this.__0x8736 = new System.Windows.Forms.Timer(this.__0x8732);
			this.SuspendLayout();
			
			
			
			this.__0x8733.Tick += new System.EventHandler(this.__0x8741);
			
			
			
			this.__0x8734.BackColor = System.Drawing.Color.Transparent;
			this.__0x8734.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x8734.Font = new System.Drawing.Font("Tahoma", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x8734.ForeColor = System.Drawing.Color.White;
			this.__0x8734.Location = new System.Drawing.Point(0, 0);
			this.__0x8734.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x8734.Name = "labelBody";
			this.__0x8734.Size = new System.Drawing.Size(459, 48);
			this.__0x8734.TabIndex = 0;
			this.__0x8734.Text = "Text Text Text";
			this.__0x8734.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			this.__0x8734.Click += new System.EventHandler(this.__0x8744);
			
			
			
			this.__0x8735.BackColor = System.Drawing.Color.Transparent;
			this.__0x8735.Font = new System.Drawing.Font("Calibri", 12.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.__0x8735.ForeColor = System.Drawing.Color.Gainsboro;
			this.__0x8735.Location = new System.Drawing.Point(4, 1);
			this.__0x8735.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x8735.Name = "labelTitle";
			this.__0x8735.Size = new System.Drawing.Size(49, 26);
			this.__0x8735.TabIndex = 0;
			this.__0x8735.Text = "title goes here";
			this.__0x8735.Visible = false;
			this.__0x8735.Click += new System.EventHandler(this.__0x8743);
			
			
			
			this.__0x8736.Interval = 10;
			this.__0x8736.Tick += new System.EventHandler(this.__0x8745);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
			this.ClientSize = new System.Drawing.Size(459, 48);
			this.ControlBox = false;
			this.Controls.Add(this.__0x8735);
			this.Controls.Add(this.__0x8734);
			this.DoubleBuffered = true;
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ScreenNotificationForm";
			this.Opacity = 0D;
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "Notification";
			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.__0x8740);
			this.Load += new System.EventHandler(this.__0x8739);
			this.Click += new System.EventHandler(this.__0x8742);
			this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Timer __0x8733;
        private System.Windows.Forms.Label __0x8734;
        private System.Windows.Forms.Label __0x8735;
		private System.Windows.Forms.Timer __0x8736;
	}
}




namespace NeoAxis.Editor
{
	public static class ScreenNotifications
	{
		
		static int __0x8761 = 5;

		static List<NotificationItem> __0x8762 = new List<NotificationItem>();

		static Queue<(string, bool, bool)> __0x8763 = new Queue<(string, bool, bool)>();

		

		
		
		
		
		
		

		

		public class NotificationItem
		{
			string __0x8764;
			bool __0x8765;
			
			internal ScreenNotificationForm notificationForm;

			internal NotificationItem( string text, bool error )
			{
				this.__0x8764 = text;
				this.__0x8765 = error;
				
			}

			public string Text
			{
				get { return __0x8764; }
			}

			public bool Error
			{
				get { return __0x8765; }
			}
			
			
			
			
		}

		

		public class StickyNotificationItem : NotificationItem
		{
			public object UserData { get; set; }

			internal StickyNotificationItem( string text, bool error )
				: base( text, error )
			{
			}

			public void Close()
			{
				ScreenNotifications.__0x8772( this );
			}
		}

		

		static void __0x8772( NotificationItem __0x8774 )
		{
			__0x8762.Remove( __0x8774 );

			if( __0x8774.notificationForm != null )
			{
				try
				{
					__0x8774.notificationForm.Close();
					__0x8774.notificationForm.Dispose();
				}
				catch { }
			}
		}

		public static int DurationInSeconds
		{
			get { return __0x8761; }
			set { __0x8761 = value; }
		}

		public static void Show( string text, bool error = false )
		{
			__0x8773( text, error, false );
		}

		public static StickyNotificationItem ShowSticky( string text, bool error = false )
		{
			return (StickyNotificationItem)__0x8773( text, error, true );
		}

		static NotificationItem __0x8773( string __0x8775, bool __0x8776, bool __0x8777 )
		{
			if( EngineApp.ApplicationType != EngineApp.ApplicationTypeEnum.Editor )
			{
				if( __0x8777 )
					return new StickyNotificationItem( __0x8775, __0x8776 );
				else
					return new NotificationItem( __0x8775, __0x8776 );
			}

			Thread __0x8766 = Thread.CurrentThread;
			if( Log.MainThread == null || __0x8766 == Log.MainThread )
			{
				NotificationItem __0x8767;
				if( __0x8777 )
					__0x8767 = new StickyNotificationItem( __0x8775, __0x8776 );
				else
					__0x8767 = new NotificationItem( __0x8775, __0x8776 );
				__0x8762.Add( __0x8767 );

				if( EditorForm.Instance != null && !EngineApp.Closing )
				{
					
					string __0x8768 = "";

					int __0x8769 = __0x8777 ? -1 : DurationInSeconds;

					__0x8767.notificationForm = new ScreenNotificationForm( __0x8768, __0x8775, __0x8776, __0x8769 );
					__0x8767.notificationForm.Show();
					if( __0x8777 )
					{
						__0x8767.notificationForm.Update();
						Application.DoEvents();
					}
				}

				return __0x8767;
			}
			else
			{
				

				lock( __0x8763 )
				{
					while( __0x8763.Count > 100 )
						__0x8763.Dequeue();
					__0x8763.Enqueue( (__0x8775, __0x8776, __0x8777) );
				}
				return null;
			}
		}

		internal static void Update()
		{
			lock( __0x8763 )
			{
				while( __0x8763.Count != 0 )
				{
					var __0x8770 = __0x8763.Dequeue();
					__0x8773( __0x8770.Item1, __0x8770.Item2, __0x8770.Item3 );
				}
			}
		}

		public static void ShowAllImmediately()
		{
			Update();

			foreach( var __0x8771 in __0x8762 )
				__0x8771.notificationForm?.SetMaxOpacity();

			Application.DoEvents();
		}
	}
}





namespace NeoAxis.Editor
{
	public class NeoAxisStoreImplementation : StoreManager.StoreImplementation
	{
		__0x8815 __0x8778;

		

		class __0x8815
		{
			public Thread thread;
			public bool needStop;
			public string search;
			public StoreManager.FilterSettingsClass filterSettings;
		}

		

		void __0x8809( object __0x8810 )
		{
			__0x8815 __0x8779 = (__0x8815)__0x8810;
			var __0x8780 = __0x8779.filterSettings;

			try
			{
				string __0x8781 = "";

				string __0x8782 = @"https://store.neoaxis.com/api/get_store_items2/";

				
				__0x8782 += "?min_triangle_count=" + __0x8780.MinTriangleCount.ToString();
				if( __0x8780.MaxTriangleCount > 0 )
					__0x8782 += "&max_triangle_count=" + __0x8780.MaxTriangleCount.ToString();

				if( !string.IsNullOrEmpty( __0x8779.search ) )
					__0x8782 += "&search=" + __0x8779.search.Replace( ' ', '+' );

				if( __0x8780.LicenseMIT )
					__0x8782 += "&license_mit=true";
				if( __0x8780.CCAttribution )
					__0x8782 += "&license_cc_attribution=true";
				
				
				
				
				
				
				
				
				
				
				
				

				

				if( __0x8780.FreeToUseWithNeoAxis )
					__0x8782 += "&license_free_to_use_with_neoaxis=true";
				if( __0x8780.PaidPerSeat )
					__0x8782 += "&license_paid_per_seat=true";

				if( __0x8780.SortBy == StoreManager.FilterSettingsClass.SortByEnum.Latest )
					__0x8782 += "&sort_by=latest";
				
				



				var __0x8783 = (HttpWebRequest)WebRequest.Create( __0x8782 );

				using( var __0x8784 = (HttpWebResponse)__0x8783.GetResponse() )
				using( var __0x8785 = __0x8784.GetResponseStream() )
				using( var __0x8786 = new StreamReader( __0x8785 ) )
					__0x8781 = __0x8786.ReadToEnd();

				if( __0x8779.needStop || EditorAPI.ClosingApplication )
					return;

				XmlDocument __0x8787 = new XmlDocument();
				__0x8787.LoadXml( __0x8781 );

				if( __0x8779.needStop || EditorAPI.ClosingApplication )
					return;

				var __0x8788 = new List<PackageManager.PackageInfo>();
				
				

				foreach( XmlNode __0x8807 in __0x8787.GetElementsByTagName( "item" ) )
				{
					var __0x8789 = new PackageManager.PackageInfo();
					__0x8789.Store = store;

					
					

					foreach( XmlNode __0x8808 in __0x8807.ChildNodes )
					{
						if( __0x8808.Name == "identifier" )
							__0x8789.Identifier = __0x8808.InnerText;
						else if( __0x8808.Name == "title" )
							__0x8789.Title = __0x8808.InnerText;
						else if( __0x8808.Name == "author" )
							__0x8789.Author = __0x8808.InnerText;
						else if( __0x8808.Name == "version" )
							__0x8789.Version = __0x8808.InnerText;
						else if( __0x8808.Name == "size" )
						{
							double.TryParse( __0x8808.InnerText, out var value );
							__0x8789.Size = (long)value;
						}
						else if( __0x8808.Name == "free_download" )
							__0x8789.FreeDownload = __0x8808.InnerText;
						else if( __0x8808.Name == "secure_download" && !string.IsNullOrEmpty( __0x8808.InnerText ) )
							__0x8789.SecureDownload = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x8808.InnerText );
						else if( __0x8808.Name == "short_description" )
							__0x8789.ShortDescription = __0x8808.InnerText;
						else if( __0x8808.Name == "full_description" )
							__0x8789.FullDescription = __0x8808.InnerText;
						else if( __0x8808.Name == "permalink" )
							__0x8789.Permalink = __0x8808.InnerText;
						else if( __0x8808.Name == "cost" )
							__0x8789.Cost = __0x8808.InnerText;
						else if( __0x8808.Name == "date" )
							__0x8789.Date = __0x8808.InnerText;
						else if( __0x8808.Name == "files" )
							__0x8789.Files = __0x8808.InnerText;
						else if( __0x8808.Name == "categories" )
							__0x8789.Categories = __0x8808.InnerText;
						else if( __0x8808.Name == "tags" )
							__0x8789.Tags = __0x8808.InnerText;
						else if( __0x8808.Name == "thumbnail" )
							__0x8789.Thumbnail = __0x8808.InnerText;
						else if( __0x8808.Name == "triangles" )
						{
							int.TryParse( __0x8808.InnerText, out var value );
							__0x8789.Triangles = value;
						}
						else if( __0x8808.Name == "vertices" )
						{
							int.TryParse( __0x8808.InnerText, out var value );
							__0x8789.Vertices = value;
						}
						else if( __0x8808.Name == "rigged" && !string.IsNullOrEmpty( __0x8808.InnerText ) )
							__0x8789.Rigged = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x8808.InnerText );
						else if( __0x8808.Name == "animations" )
						{
							int.TryParse( __0x8808.InnerText, out var value );
							__0x8789.Animations = value;
						}
						else if( __0x8808.Name == "license" )
						{
							var __0x8790 = __0x8808.InnerText.Replace( " ", "" ).Replace( "-", "" );
							Enum.TryParse<StoreProductLicense>( __0x8790, out var value );
							__0x8789.License = value;
						}
					}

					__0x8788.Add( __0x8789 );
				}

				if( __0x8779.needStop || EditorAPI.ClosingApplication )
					return;

				
				
				
				
				
				
				

				StoreManager.SetDownloadedListOfPackages( store, __0x8788 );
			}
			catch { }
		}

		public override void StartRefreshPackageList( string search, StoreManager.FilterSettingsClass filterSettings )
		{
			StopCurrentTask();

			var __0x8791 = new Thread( __0x8809 );
			var __0x8792 = new __0x8815() { thread = __0x8791, search = search, filterSettings = filterSettings };
			__0x8778 = __0x8792;

			__0x8791.Start( __0x8792 );
		}

		public override void StopCurrentTask()
		{
			var __0x8793 = __0x8778;
			if( __0x8793 != null )
				__0x8793.needStop = true;
			__0x8778 = null;
		}

		public override void ThreadDownloadBody( StoresWindow.ThreadDownloadData data )
		{
			var __0x8794 = data.State;

			using( WebClient __0x8795 = new WebClient() )
			{
				__0x8794.downloadingClient = __0x8795;

				var __0x8796 = Path.Combine( Path.GetTempPath(), "Temp5" + Path.GetRandomFileName() );
				

				__0x8795.DownloadProgressChanged += delegate ( object __0x8811, DownloadProgressChangedEventArgs __0x8812 )
				{
					
					if( data.Cancelled )
						return;

					if( __0x8812.TotalBytesToReceive != 0 )
						__0x8794.downloadProgress = MathEx.Saturate( (float)__0x8812.BytesReceived / (float)__0x8812.TotalBytesToReceive );
				};

				__0x8795.DownloadFileCompleted += delegate ( object __0x8813, AsyncCompletedEventArgs __0x8814 )
				{
					
					if( !data.Cancelled )
					{
						
						lock( __0x8814.UserState )
							Monitor.Pulse( __0x8814.UserState );

						data.Cancelled = __0x8814.Cancelled;
						data.Error = __0x8814.Error;

						
						if( !data.Cancelled && data.Error == null )
							File.Copy( __0x8796, __0x8794.downloadingDestinationPath, true );
					}

					try
					{
						if( File.Exists( __0x8796 ) )
							File.Delete( __0x8796 );
					}
					catch { }
				};

				using( var __0x8797 = __0x8795.DownloadFileTaskAsync( new Uri( __0x8794.downloadingAddress ), __0x8796 ) )
				{
					while( !string.IsNullOrEmpty( __0x8794.downloadingAddress ) && !__0x8797.Wait( 10 ) )
					{
					}
				}

				__0x8794.downloadingClient = null;
			}

			if( data.Cancelled || data.Error != null )
				return;


			
			using( var __0x8798 = ZipFile.Open( __0x8794.downloadingDestinationPath, ZipArchiveMode.Update ) )
			{
				var __0x8799 = __0x8798.GetEntry( "Package.info" );
				if( __0x8799 != null )
				{
					
					string __0x8800;
					using( var __0x8801 = __0x8799.Open() )
					using( var __0x8802 = new StreamReader( __0x8801 ) )
						__0x8800 = __0x8802.ReadToEnd();

					
					var __0x8803 = TextBlock.Parse( __0x8800, out var error );
					if( !string.IsNullOrEmpty( error ) )
						throw new Exception( error );

					

					var __0x8804 = data.Package;

					__0x8803.SetAttribute( "Store", store.Name );
					if( !string.IsNullOrEmpty( __0x8804.Permalink ) )
						__0x8803.SetAttribute( "Permalink", __0x8804.Permalink );
					if( !string.IsNullOrEmpty( __0x8804.Thumbnail ) )
						__0x8803.SetAttribute( "Thumbnail", __0x8804.Thumbnail );
					if( __0x8804.Triangles != 0 )
						__0x8803.SetAttribute( "Triangles", __0x8804.Triangles.ToString() );
					if( __0x8804.Vertices != 0 )
						__0x8803.SetAttribute( "Vertices", __0x8804.Vertices.ToString() );
					if( __0x8804.Rigged )
						__0x8803.SetAttribute( "Rigged", __0x8804.Rigged.ToString() );
					if( __0x8804.Animations != 0 )
						__0x8803.SetAttribute( "Animations", __0x8804.Animations.ToString() );

					
					
					

					
					__0x8799.Delete();
					__0x8799 = __0x8798.CreateEntry( "Package.info" );
					using( var __0x8805 = __0x8799.Open() )
					using( var __0x8806 = new StreamWriter( __0x8805 ) )
						__0x8806.Write( __0x8803.DumpToString() );
				}
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public static class PackageManager
	{
		static Dictionary<string, PackageInfo> __0x8816 = new Dictionary<string, PackageInfo>();
		static ESet<string> __0x8817 = new ESet<string>();

		

		public class PackageInfo
		{
			public StoreManager.StoreItem Store;
			public string Identifier;

			public string FullFilePath;
			public string Title;
			public string Version;
			public string Author;
			public string ShortDescription;
			public string FullDescription;
			public string Permalink;
			public string Cost;
			public long Size;
			public string FreeDownload;
			public bool SecureDownload;
			public string Date;
			public string Files;
			public string Categories;
			public string Tags;
			public string Thumbnail;
			public int Triangles;
			public int Vertices;
			public bool Rigged;
			public int Animations;
			public StoreProductLicense License;

			bool __0x8818;

			

			public override string ToString()
			{
				return Identifier.Replace( '_', ' ' );
				
			}

			public int CostNumber
			{
				get
				{
					var __0x8819 = 0;
					if( !string.IsNullOrEmpty( Cost ) )
						int.TryParse( Cost, out __0x8819 );
					return __0x8819;
				}
			}

			public void UpdateDataFromArchive()
			{
				if( !__0x8818 )
				{
					__0x8818 = true;

					if( !string.IsNullOrEmpty( FullFilePath ) && File.Exists( FullFilePath ) )
					{
						var __0x8820 = ReadPackageArchiveInfo( FullFilePath, out _ );
						if( __0x8820 != null )
						{
							if( string.IsNullOrEmpty( Files ) )
							{
								var __0x8821 = "";
								foreach( var __0x8876 in __0x8820.Files )
								{
									if( __0x8821 != "" )
										__0x8821 += "\r\n";
									__0x8821 += __0x8876;
								}
								Files = __0x8821;
							}

							if( !string.IsNullOrEmpty( __0x8820.Title ) )
								Title = __0x8820.Title;
							if( !string.IsNullOrEmpty( __0x8820.Permalink ) )
								Permalink = __0x8820.Permalink;
							if( !string.IsNullOrEmpty( __0x8820.Thumbnail ) )
								Thumbnail = __0x8820.Thumbnail;
							if( __0x8820.Triangles != 0 )
								Triangles = __0x8820.Triangles;
							if( __0x8820.Vertices != 0 )
								Vertices = __0x8820.Vertices;
							if( __0x8820.Rigged )
								Rigged = __0x8820.Rigged;
							if( __0x8820.Animations != 0 )
								Animations = __0x8820.Animations;
							if( !string.IsNullOrEmpty( __0x8820.ShortDescription ) )
								ShortDescription = __0x8820.ShortDescription;
							if( !string.IsNullOrEmpty( __0x8820.FullDescription ) )
								FullDescription = __0x8820.FullDescription;
							if( !string.IsNullOrEmpty( __0x8820.Author ) )
								Author = __0x8820.Author;
							if( !string.IsNullOrEmpty( __0x8820.Cost ) )
								Cost = __0x8820.Cost;
							if( __0x8820.License != StoreProductLicense.None )
								License = __0x8820.License;
							if( !string.IsNullOrEmpty( __0x8820.Categories ) )
								Categories = __0x8820.Categories;
							if( !string.IsNullOrEmpty( __0x8820.Tags ) )
								Tags = __0x8820.Tags;
							if( !string.IsNullOrEmpty( __0x8820.Store ) )
								Store = StoreManager.GetStore( __0x8820.Store );
						}

						try
						{
							if( Size == 0 )
								Size = new FileInfo( FullFilePath ).Length;
						}
						catch { }
					}
				}
			}

			string[] __0x8822;
			public string[] GetFiles()
			{
				if( __0x8822 == null && !string.IsNullOrEmpty( Files ) )
				{
					var __0x8823 = Files.Trim( new char[] { ' ', '\r', '\n' } );
					__0x8822 = __0x8823.Split( new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries );
				}
				if( __0x8822 != null )
					return __0x8822;
				else
					return Array.Empty<string>();
			}

			public static PackageInfo Merge( PackageInfo p1, PackageInfo p2 )
			{
				var __0x8824 = new PackageInfo();
				__0x8824.Store = p1.Store ?? p2.Store;
				__0x8824.Identifier = p1.Identifier;

				__0x8824.FullFilePath = p1.FullFilePath ?? p2.FullFilePath;
				__0x8824.Title = p1.Title ?? p2.Title;
				__0x8824.Version = p1.Version ?? p2.Version;
				__0x8824.Author = p1.Author ?? p2.Author;
				__0x8824.ShortDescription = p1.ShortDescription ?? p2.ShortDescription;
				__0x8824.FullDescription = p1.FullDescription ?? p2.FullDescription;
				__0x8824.Permalink = p1.Permalink ?? p2.Permalink;
				__0x8824.Cost = p1.Cost ?? p2.Cost;
				__0x8824.Size = p1.Size != 0 ? p1.Size : p2.Size;
				__0x8824.FreeDownload = p1.FreeDownload ?? p2.FreeDownload;
				__0x8824.SecureDownload = p1.SecureDownload || p2.SecureDownload;
				__0x8824.Date = p1.Date ?? p2.Date;
				__0x8824.Files = p1.Files ?? p2.Files;
				__0x8824.Categories = p1.Categories ?? p2.Categories;
				__0x8824.Tags = p1.Tags ?? p2.Tags;
				__0x8824.Thumbnail = p1.Thumbnail ?? p2.Thumbnail;
				__0x8824.Triangles = p1.Triangles != 0 ? p1.Triangles : p2.Triangles;
				__0x8824.Vertices = p1.Vertices != 0 ? p1.Vertices : p2.Vertices;
				__0x8824.Rigged = p1.Rigged || p2.Rigged;
				__0x8824.Animations = p1.Animations != 0 ? p1.Animations : p2.Animations;
				__0x8824.License = p1.License != StoreProductLicense.None ? p1.License : p2.License;

				return __0x8824;
			}

			public enum FileTypeToDrop
			{
				None,
				Mesh,
				Material,
				Environment,
				Surface,
			}

			public (FileTypeToDrop type, string file) GetFileToDrop()
			{
				var __0x8825 = GetFiles();

				
				{
					var __0x8826 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x8877 in __0x8825 )
					{
						try
						{
							var __0x8827 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x8877 ) );
							
							if( __0x8827 != null && __0x8827.Name == "Skybox" )
								__0x8826.Add( (__0x8827, __0x8877) );
						}
						catch { }
					}

					if( __0x8826.Count == 1 )
					{
						var __0x8828 = Path.Combine( VirtualFileSystem.Directories.Project, __0x8826[ 0 ].Item2 );
						var __0x8829 = VirtualPathUtility.GetVirtualPathByReal( __0x8828 );

						if( !string.IsNullOrEmpty( __0x8829 ) )
							return (FileTypeToDrop.Environment, __0x8829);
					}
				}

				
				{
					var __0x8830 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x8878 in __0x8825 )
					{
						try
						{
							var __0x8831 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x8878 ) );
							if( __0x8831 != null && __0x8831.Name == "Surface" )
								__0x8830.Add( (__0x8831, __0x8878) );
						}
						catch { }
					}

					if( __0x8830.Count == 1 )
					{
						var __0x8832 = Path.Combine( VirtualFileSystem.Directories.Project, __0x8830[ 0 ].Item2 );
						var __0x8833 = VirtualPathUtility.GetVirtualPathByReal( __0x8832 );

						if( !string.IsNullOrEmpty( __0x8833 ) )
							return (FileTypeToDrop.Surface, __0x8833);
					}
				}

				
				{
					var __0x8834 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x8879 in __0x8825 )
					{
						try
						{
							var __0x8835 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x8879 ) );
							if( __0x8835 != null && ( __0x8835.Name == "Import 3D" || __0x8835.Name == "Mesh" ) )
								__0x8834.Add( (__0x8835, __0x8879) );
						}
						catch { }
					}

					if( __0x8834.Count == 1 )
					{
						var __0x8836 = __0x8834[ 0 ].Item1;
						var __0x8837 = Path.Combine( VirtualFileSystem.Directories.Project, __0x8834[ 0 ].Item2 );
						var __0x8838 = VirtualPathUtility.GetVirtualPathByReal( __0x8837 );

						if( !string.IsNullOrEmpty( __0x8838 ) )
						{
							if( __0x8836.Name == "Import 3D" )
								return (FileTypeToDrop.Mesh, __0x8838 + "|$Mesh");
							else
								return (FileTypeToDrop.Mesh, __0x8838);
						}
					}
				}

				
				{
					var __0x8839 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x8880 in __0x8825 )
					{
						try
						{
							var __0x8840 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x8880 ) );
							if( __0x8840 != null && __0x8840.Name == "Material" )
								__0x8839.Add( (__0x8840, __0x8880) );
						}
						catch { }
					}

					if( __0x8839.Count == 1 )
					{
						var __0x8841 = Path.Combine( VirtualFileSystem.Directories.Project, __0x8839[ 0 ].Item2 );
						var __0x8842 = VirtualPathUtility.GetVirtualPathByReal( __0x8841 );

						if( !string.IsNullOrEmpty( __0x8842 ) )
							return (FileTypeToDrop.Material, __0x8842);
					}
				}

				return (FileTypeToDrop.None, "");
			}

			public static string GetSizeAsString( long size )
			{
				if( size == 0 )
					return "";

				var __0x8843 = size / 1024 / 1024;
				if( __0x8843 >= 1 )
					return __0x8843.ToString() + " MB";
				else
				{
					__0x8843 = size / 1024;
					return __0x8843.ToString() + " KB";
				}
			}

			public static string GetTrianglesVerticesAsString( int count )
			{
				if( count >= 1000000 )
				{
					var __0x8844 = ( (double)count / 1000000 ).ToString( "F1" );
					return __0x8844.Replace( ".0", "" ) + "M";
				}

				if( count >= 1000 )
				{
					var __0x8845 = ( (double)count / 1000 ).ToString( "F1" );
					return __0x8845.Replace( ".0", "" ) + "k";
				}

				return count.ToString();
			}

			public string GetTooltipDescription()
			{
				var __0x8846 = Title;

				if( Triangles != 0 )
				{
					__0x8846 += "\r\nTriangles " + GetTrianglesVerticesAsString( Triangles );
					__0x8846 += ", Vertices " + GetTrianglesVerticesAsString( Vertices );
				}

				if( Rigged )
					__0x8846 += "\r\nRigged";

				if( Animations != 0 )
					__0x8846 += "\r\nAnimations " + Animations;

				if( Size != 0 )
					__0x8846 += "\r\n" + GetSizeAsString( Size );

				if( License != StoreProductLicense.None && !License.ToString().Contains( "Paid" ) )
					__0x8846 += "\r\nFree (" + EnumUtility.GetValueDisplayName( License ) + ")";
				else if( CostNumber > 0 || !string.IsNullOrEmpty( FreeDownload ) )
				{
					__0x8846 += "\r\n";
					if( CostNumber > 0 )
						__0x8846 += "$" + CostNumber.ToString();
					else
						__0x8846 += "Free";

					if( License != StoreProductLicense.None )
						__0x8846 += " (" + EnumUtility.GetValueDisplayName( License ) + ")";
				}

				if( !string.IsNullOrEmpty( ShortDescription ) )
					__0x8846 += "\r\n\r\n" + ShortDescription;

				
				
				
				
				
				
				
				
				
				
				
				

				return __0x8846;
			}

			
			
			

			
			
			
			
			

			
			
			

			
			
			
			
			
		}

		

		public class PackageArchiveInfo
		{
			public string Title;
			
			public string Author = "";
			public string ShortDescription = "";
			public string FullDescription = "";
			public List<string> Files = new List<string>();
			public bool MustRestart = false;
			public string OpenAfterInstall = "";
			public string AddCSharpFilesToProject = "";
			public string Permalink = "";
			public string Thumbnail = "";
			public int Triangles;
			public int Vertices;
			public bool Rigged;
			public int Animations;
			public string Cost = "";
			public StoreProductLicense License;
			public string Categories = "";
			public string Tags = "";
			public string Store = "";
		}

		

		public static string PackagesFolder
		{
			get { return Path.Combine( VirtualFileSystem.Directories.Project, "EnginePackages" ); }
		}

		public static Dictionary<string, PackageInfo> GetPackagesInfoByFileArchives( bool update )
		{
			if( update )
			{
				
				
				

				__0x8816.Clear();

				var __0x8847 = new List<PackageInfo>();

				
				
				var __0x8848 = "*.neoaxispackage";
				

				if( Directory.Exists( PackagesFolder ) )
				{
					foreach( var __0x8881 in Directory.GetFiles( PackagesFolder, __0x8848 ) )
					{
						var __0x8849 = Path.GetFileNameWithoutExtension( __0x8881 );
						var __0x8850 = __0x8849.Split( new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries );
						if( __0x8850.Length >= 2 )
						{
							var __0x8851 = __0x8850[ 0 ];

							var __0x8852 = new PackageInfo();
							
							

							__0x8852.Identifier = __0x8851;
							__0x8852.FullFilePath = __0x8881;
							__0x8852.Title = __0x8851.Replace( '_', ' ' );
							__0x8852.Version = __0x8850[ 1 ];

							__0x8847.Add( __0x8852 );
							
						}
					}
				}
				

				CollectionUtility.MergeSort( __0x8847, delegate ( PackageInfo __0x8888, PackageInfo __0x8889 )
				{
					return string.Compare( __0x8888.Identifier, __0x8889.Identifier );
				} );

				foreach( var __0x8882 in __0x8847 )
					__0x8816[ __0x8882.Identifier ] = __0x8882;
			}

			return __0x8816;
		}

		public static ESet<string> GetInstalledPackages( bool update )
		{
			if( update )
			{
				__0x8817.Clear();

				var __0x8853 = Path.Combine( PackagesFolder, "PackagesState.txt" );
				if( File.Exists( __0x8853 ) )
				{
					var __0x8854 = TextBlockUtility.LoadFromRealFile( __0x8853, out _ );
					if( __0x8854 != null )
					{
						foreach( var __0x8883 in __0x8854.Children )
						{
							if( __0x8883.Name == "Package" )
								__0x8817.AddWithCheckAlreadyContained( __0x8883.GetAttribute( "Name" ) );
						}
					}
				}
			}

			return __0x8817;
		}

		public static bool IsInstalled( string packageName, bool update )
		{
			return GetInstalledPackages( update ).Contains( packageName );
		}

		public static bool ChangeInstalledState( string packageName, bool installed )
		{
			var __0x8855 = Path.Combine( PackagesFolder, "PackagesState.txt" );

			
			TextBlock __0x8856;
			if( File.Exists( __0x8855 ) )
			{
				__0x8856 = TextBlockUtility.LoadFromRealFile( __0x8855, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					EditorMessageBox.ShowWarning( error );
					return false;
				}
			}
			else
				__0x8856 = new TextBlock();

			
			{
				foreach( var __0x8884 in __0x8856.Children )
				{
					if( __0x8884.Name == "Package" )
					{
						if( __0x8884.GetAttribute( "Name" ) == packageName )
						{
							__0x8856.DeleteChild( __0x8884 );
							break;
						}
					}
				}

				if( installed )
				{
					var __0x8857 = __0x8856.AddChild( "Package" );
					__0x8857.SetAttribute( "Name", packageName );
				}
			}

			
			{
				if( !Directory.Exists( PackagesFolder ) )
					Directory.CreateDirectory( PackagesFolder );

				TextBlockUtility.SaveToRealFile( __0x8856, __0x8855, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					EditorMessageBox.ShowWarning( error );
					return false;
				}
			}

			return true;
		}

		public static PackageArchiveInfo ReadPackageArchiveInfo( string fullPath, out string error )
		{
			error = "";

			try
			{
				using( var __0x8858 = ZipFile.OpenRead( fullPath ) )
				{
					PackageArchiveInfo __0x8859 = new PackageArchiveInfo();

					
					var __0x8860 = __0x8858.GetEntry( "Package.info" );
					using( var __0x8861 = new StreamReader( __0x8860.Open() ) )
					{
						var __0x8862 = __0x8861.ReadToEnd();

						var __0x8863 = TextBlock.Parse( __0x8862, out error );
						if( __0x8863 == null )
							return null;

						__0x8859.Title = __0x8863.GetAttribute( "Title" );
						__0x8859.Author = __0x8863.GetAttribute( "Author" );
						__0x8859.ShortDescription = __0x8863.GetAttribute( "Description" );
						__0x8859.FullDescription = __0x8863.GetAttribute( "FullDescription" );

						if( bool.TryParse( __0x8863.GetAttribute( "MustRestart" ), out var mustRestart ) )
							__0x8859.MustRestart = mustRestart;

						__0x8859.OpenAfterInstall = __0x8863.GetAttribute( "OpenAfterInstall" );
						__0x8859.AddCSharpFilesToProject = __0x8863.GetAttribute( "AddCSharpFilesToProject" );
						__0x8859.Permalink = __0x8863.GetAttribute( "Permalink" );
						__0x8859.Thumbnail = __0x8863.GetAttribute( "Thumbnail" );

						if( int.TryParse( __0x8863.GetAttribute( "Triangles" ), out var triangles ) )
							__0x8859.Triangles = triangles;

						if( int.TryParse( __0x8863.GetAttribute( "Vertices" ), out var vertices ) )
							__0x8859.Vertices = vertices;

						if( bool.TryParse( __0x8863.GetAttribute( "Rigged" ), out var rigged ) )
							__0x8859.Rigged = rigged;

						if( int.TryParse( __0x8863.GetAttribute( "Animations" ), out var animations ) )
							__0x8859.Animations = animations;

						__0x8859.Cost = __0x8863.GetAttribute( "Cost" );

						var __0x8864 = __0x8863.GetAttribute( "License" ).Replace( " ", "" ).Replace( "-", "" );
						Enum.TryParse<StoreProductLicense>( __0x8864, out var value );
						__0x8859.License = value;

						__0x8859.Categories = __0x8863.GetAttribute( "Categories" );
						__0x8859.Tags = __0x8863.GetAttribute( "Tags" );
						__0x8859.Store = __0x8863.GetAttribute( "Store" );
					}

					
					foreach( var __0x8885 in __0x8858.Entries )
					{
						var __0x8865 = __0x8885.FullName;
						bool __0x8866 = __0x8865[ __0x8865.Length - 1 ] == '/';
						if( __0x8865 != "Package.info" && !__0x8866 )
							__0x8859.Files.Add( __0x8865 );
					}

					return __0x8859;
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return null;
			}
		}

		public static bool ReadPackageArchiveInfo_CheckOnly( string fullPath, out string error )
		{
			error = "";

			try
			{
				using( var __0x8867 = ZipFile.OpenRead( fullPath ) )
				{
					PackageArchiveInfo __0x8868 = new PackageArchiveInfo();

					
					var __0x8869 = __0x8867.GetEntry( "Package.info" );

					return __0x8869 != null;
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return false;
			}
		}

		public static void DeleteFilesAsStartup()
		{
			try
			{
				var __0x8870 = Path.Combine( PackagesFolder, "FilesToDeleteAtStartup.txt" );
				if( File.Exists( __0x8870 ) )
				{
					var __0x8871 = File.ReadAllLines( __0x8870 );

					foreach( var __0x8886 in __0x8871 )
					{
						var __0x8872 = Path.Combine( VirtualFileSystem.Directories.Project, __0x8886 );

						var __0x8873 = DateTime.Now;
						Exception __0x8874 = null;
						do
						{
							try
							{
								if( File.Exists( __0x8872 ) )
									File.Delete( __0x8872 );
								__0x8874 = null;
								break;
							}
							catch( Exception e2 )
							{
								__0x8874 = e2;
							}

						} while( ( DateTime.Now - __0x8873 ).TotalSeconds < 30 );

						if( __0x8874 != null )
							throw __0x8874;
					}

					File.Delete( __0x8870 );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
			}
		}

		public static void AddFilesToDeletionAtStartup( List<string> fileNames )
		{
			try
			{
				var __0x8875 = Path.Combine( PackagesFolder, "FilesToDeleteAtStartup.txt" );
				foreach( var __0x8887 in fileNames )
					File.AppendAllText( __0x8875, __0x8887 + "\r\n" );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowInfo( e.Message );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Store Window.
	/// </summary>
	[RestoreDockWindowAfterEditorReload]
	public partial class StoreDocumentWindow : DocumentWindowWithViewport
	{
		public const string homeURL = "https://store.neoaxis.com";
		public const string homeURLBasicContent = "https://store.neoaxis.com/product-category/basic-content/";
		readonly bool __0x8890 = false;

		
		UIWebBrowser __0x8891;

		double __0x8892;

		volatile bool __0x8893;

		volatile string __0x8894;

		

		public StoreDocumentWindow()
		{
			__0x8924();

			WindowTitle = EditorLocalization.Translate( "StoreDocumentWindow", WindowTitle );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x8905 );
		}

		private void __0x8912( object __0x8925, EventArgs __0x8926 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x8892 = Time.Current;
			__0x8906.Start();

			__0x8914();
		}

		[Browsable( false )]
		public string StartURL { get; set; } = homeURL;

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			var __0x8895 = sender.Viewport.UIContainer;

			
			
			
			
			
			

			__0x8891 = __0x8895.CreateComponent<UIWebBrowser>( enabled: false );
			__0x8891.StartURL = StartURL;
			__0x8891.Enabled = true;

			__0x8891.AddressChanged += __0x8920;
			__0x8891.TargetUrlChanged += __0x8921;
			__0x8891.DownloadBefore += __0x8923;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			
			viewport.UIContainer.PerformRenderUI( viewport.CanvasRenderer );

			
			if( EditorAPI.SelectedDocumentWindow == this )
			{
				if( __0x8891 != null && __0x8891.CurrentCursor != null )
					ViewportControl.OneFrameChangeCursor = __0x8891.CurrentCursor;
			}
		}

		void __0x8913()
		{
			if( __0x8890 )
			{
				var __0x8896 = __0x8905.PointToClient( Cursor.Position );

				Rectangle __0x8897 = new Rectangle( 0, 0, __0x8905.Size.Width, 0 );
				var __0x8898 = __0x8897.GetPointDistance( new Vector2( __0x8896.X, __0x8896.Y ) ) < 10;

				if( __0x8905.Visible )
				{
					Rectangle __0x8899 = new Rectangle( 0, 0, __0x8905.Size.Width, __0x8905.Size.Height );
					if( __0x8899.Contains( new Vector2( __0x8896.X, __0x8896.Y ) ) )
						__0x8898 = true;
				}

				if( __0x8907.Focused )
					__0x8898 = true;

				if( __0x8898 )
					__0x8892 = Time.Current;

				var __0x8900 = __0x8892 > Time.Current - 2.0;

				if( __0x8905.Visible != __0x8900 )
					__0x8905.Visible = __0x8900;
			}
			else
			{
				__0x8905.Visible = true;
			}
		}

		void __0x8914()
		{
			__0x8908.Enabled = __0x8891 != null && __0x8891.CanGoBack;
			__0x8909.Enabled = __0x8891 != null && __0x8891.CanGoForward;

			if( __0x8893 )
			{
				__0x8893 = false;
				__0x8907.Text = __0x8891 != null ? __0x8891.TargetURL : "";
			}

			__0x8907.Width = Width - __0x8907.Location.X - 6;

			if( !__0x8890 )
			{
				if( ViewportControl != null )
				{
					var __0x8901 = ViewportControl.Parent.ClientSize;

					ViewportControl.Dock = DockStyle.None;
					ViewportControl.Location = new Point( 0, __0x8905.Height );
					ViewportControl.Size = new Size( __0x8901.Width, __0x8901.Height - __0x8905.Height );
				}
				
				
			}
		}

		private void __0x8915( object __0x8927, EventArgs __0x8928 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x8913();

			__0x8914();

			
			if( EditorAPI.SelectedDocumentWindow == this )
			{
				if( __0x8891 != null && __0x8891.CurrentCursor != null )
					ViewportControl.Cursor = __0x8891.CurrentCursor;
			}

			if( !string.IsNullOrEmpty( __0x8894 ) )
			{
				EditorAPI.OpenPackages( __0x8894, true );
				__0x8894 = null;
			}
		}

		private void __0x8916( object __0x8929, EventArgs __0x8930 )
		{
			__0x8891?.GoBack();
		}

		private void __0x8917( object __0x8931, EventArgs __0x8932 )
		{
			__0x8891?.GoForward();
		}

		private void __0x8918( object __0x8933, EventArgs __0x8934 )
		{
			__0x8891?.Reload();
		}

		private void __0x8919( object __0x8935, KeyEventArgs __0x8936 )
		{
			if( __0x8936.KeyCode == Keys.Return )
				__0x8891?.LoadURL( __0x8907.Text );
		}

		private void __0x8920( UIWebBrowser __0x8937, string __0x8938 )
		{
			__0x8893 = true;
		}

		private void __0x8921( UIWebBrowser __0x8939, string __0x8940 )
		{
		}

		private void __0x8922( object __0x8941, EventArgs __0x8942 )
		{
			__0x8891.LoadURL( homeURL );
		}

		public void LoadURL( string url )
		{
			__0x8891.LoadURL( url );
		}

		private void __0x8923( UIWebBrowser __0x8943, object __0x8944, string __0x8945, object __0x8946 )
		{
			try
			{
				if( Path.GetExtension( __0x8945 ).ToLower() == ".neoaxispackage" )
				{
					var __0x8902 = Path.GetFileNameWithoutExtension( __0x8945 );
					var __0x8903 = __0x8902.Split( new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries );
					if( __0x8903.Length >= 2 )
						__0x8894 = __0x8903[ 0 ];
				}
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return;
			}
		}

	}
}

namespace NeoAxis.Editor
{
    partial class StoreDocumentWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x8904 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x8904 != null))
            {
                __0x8904.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x8924()
        {
			this.__0x8904 = new System.ComponentModel.Container();
			this.__0x8905 = new System.Windows.Forms.Panel();
			this.__0x8911 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8910 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8909 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8908 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8907 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x8906 = new System.Windows.Forms.Timer(this.__0x8904);
			this.__0x8905.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x8905.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8905.Controls.Add(this.__0x8911);
			this.__0x8905.Controls.Add(this.__0x8910);
			this.__0x8905.Controls.Add(this.__0x8909);
			this.__0x8905.Controls.Add(this.__0x8908);
			this.__0x8905.Controls.Add(this.__0x8907);
			this.__0x8905.Location = new System.Drawing.Point(0, 0);
			this.__0x8905.Name = "panelToolbar";
			this.__0x8905.Size = new System.Drawing.Size(477, 36);
			this.__0x8905.TabIndex = 1;
			
			
			
			this.__0x8911.Location = new System.Drawing.Point(2, 2);
			this.__0x8911.Name = "kryptonButtonHome";
			this.__0x8911.Size = new System.Drawing.Size(32, 32);
			this.__0x8911.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8911.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x8911.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8911.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x8911.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8911.TabIndex = 0;
			this.__0x8911.Values.Image = global::NeoAxis.Properties.Resources.House_16;
			this.__0x8911.Values.Text = "";
			this.__0x8911.Click += new System.EventHandler(this.__0x8922);
			
			
			
			this.__0x8910.Location = new System.Drawing.Point(117, 2);
			this.__0x8910.Name = "kryptonButtonRefresh";
			this.__0x8910.Size = new System.Drawing.Size(32, 32);
			this.__0x8910.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8910.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x8910.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8910.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x8910.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8910.TabIndex = 3;
			this.__0x8910.Values.Image = global::NeoAxis.Properties.Resources.Refresh_16;
			this.__0x8910.Values.Text = "";
			this.__0x8910.Click += new System.EventHandler(this.__0x8918);
			
			
			
			this.__0x8909.Location = new System.Drawing.Point(79, 2);
			this.__0x8909.Name = "kryptonButtonForward";
			this.__0x8909.Size = new System.Drawing.Size(32, 32);
			this.__0x8909.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8909.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x8909.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8909.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x8909.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8909.TabIndex = 2;
			this.__0x8909.Values.Image = global::NeoAxis.Properties.Resources.Forward_16;
			this.__0x8909.Values.Text = "";
			this.__0x8909.Click += new System.EventHandler(this.__0x8917);
			
			
			
			this.__0x8908.Location = new System.Drawing.Point(41, 2);
			this.__0x8908.Name = "kryptonButtonBack";
			this.__0x8908.Size = new System.Drawing.Size(32, 32);
			this.__0x8908.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8908.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x8908.StateDisabled.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8908.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x8908.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x8908.TabIndex = 1;
			this.__0x8908.Values.Image = global::NeoAxis.Properties.Resources.Back_16;
			this.__0x8908.Values.Text = "";
			this.__0x8908.Click += new System.EventHandler(this.__0x8916);
			
			
			
			this.__0x8907.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x8907.Location = new System.Drawing.Point(162, 6);
			this.__0x8907.Name = "kryptonTextBoxAddress";
			this.__0x8907.Size = new System.Drawing.Size(306, 21);
			this.__0x8907.TabIndex = 4;
			this.__0x8907.WordWrap = false;
			this.__0x8907.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x8919);
			
			
			
			this.__0x8906.Tick += new System.EventHandler(this.__0x8915);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x8905);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "StoreDocumentWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Asset Store";
			this.Load += new System.EventHandler(this.__0x8912);
			this.Controls.SetChildIndex(this.__0x8905, 0);
			this.__0x8905.ResumeLayout(false);
			this.__0x8905.PerformLayout();
			this.ResumeLayout(false);

        }

		#endregion

		private System.Windows.Forms.Panel __0x8905;
		private System.Windows.Forms.Timer __0x8906;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x8907;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x8908;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x8909;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x8910;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x8911;
	}
}





namespace NeoAxis.Editor
{
	public static class StoreManager
	{
		static List<StoreItem> __0x8947 = new List<StoreItem>();

		static ImageManagerClass __0x8948 = new ImageManagerClass();
		

		static List<Dictionary<string, PackageManager.PackageInfo>> __0x8949 = new List<Dictionary<string, PackageManager.PackageInfo>>();
		
		public static event Action DownloadedListOfPackagesUpdated;

		public static ESet<StoreItem> needGetNextItemsForStores = new ESet<StoreItem>();

		

		public class StoreItem
		{
			public string Name;
			public Image Icon16;
			public Image Icon32;
			public string Website;
			public StoreImplementation Implementation;

			internal Image IconScaled;
		}

		

		public abstract class StoreImplementation
		{
			public StoreItem store;

			public abstract void StartRefreshPackageList( string search, FilterSettingsClass filterSettings );
			public abstract void StopCurrentTask();

			public void Shutdown()
			{
				StopCurrentTask();
			}

			public abstract void ThreadDownloadBody( StoresWindow.ThreadDownloadData data );
			
		}

		

		public class ImageManagerClass
		{
			Dictionary<string, __0x9001> __0x8950 = new Dictionary<string, __0x9001>();

			

			class __0x9001
			{
				public string url;

				public volatile HttpWebRequest webRequest;
				public volatile HttpWebResponse webResponse;

				public volatile Image sourceImage;
				public volatile Image squareImage;

				public volatile bool disposed;

				public double lastUsedTime;

				

				public void Dispose()
				{
					disposed = true;

					try
					{
						webResponse?.Close();
						webRequest?.Abort();
					}
					catch { }

					try
					{
						sourceImage?.Dispose();
						squareImage?.Dispose();
					}
					catch { }
				}
			}

			

			__0x9001 __0x8996( string __0x8998 )
			{
				if( !__0x8950.TryGetValue( __0x8998, out var item ) )
				{
					item = new __0x9001();
					item.url = __0x8998;
					__0x8950[ __0x8998 ] = item;

					var __0x8951 = new Thread( __0x8997 );
					__0x8951.Start( item );
				}

				return item;
			}

			public Image GetSourceImage( string url, double currentTime )
			{
				var __0x8952 = __0x8996( url );
				if( __0x8952.sourceImage != null && __0x8952.sourceImage.PixelFormat != System.Drawing.Imaging.PixelFormat.DontCare )
				{
					__0x8952.lastUsedTime = currentTime;
					return __0x8952.sourceImage;
				}
				return null;
			}

			public Image GetSquareImage( string url, double currentTime )
			{
				var __0x8953 = __0x8996( url );
				if( __0x8953.squareImage != null && __0x8953.squareImage.PixelFormat != System.Drawing.Imaging.PixelFormat.DontCare )
				{
					__0x8953.lastUsedTime = currentTime;
					return __0x8953.squareImage;
				}
				return null;
			}

			void __0x8997( object __0x8999 )
			{
				var __0x8954 = (__0x9001)__0x8999;

				try
				{
					var __0x8955 = (HttpWebRequest)WebRequest.Create( __0x8954.url );
					if( __0x8954.disposed )
						return;
					__0x8954.webRequest = __0x8955;

					using( var __0x8956 = (HttpWebResponse)__0x8955.GetResponse() )
					{
						if( __0x8954.disposed )
							return;
						__0x8954.webResponse = __0x8956;

						using( var __0x8957 = __0x8956.GetResponseStream() )
						{
							var __0x8958 = Image.FromStream( __0x8957, true, true );

							
							var __0x8959 = 512;

							var __0x8960 = 1.0;
							if( __0x8958.Height > __0x8959 )
								__0x8960 = (double)__0x8959 / (double)__0x8958.Height;

							var __0x8961 = (int)( __0x8960 * (double)__0x8958.Height );

							
							
							

							var __0x8962 = new Bitmap( __0x8961, __0x8961, __0x8958.PixelFormat );
							using( var __0x8963 = Graphics.FromImage( __0x8962 ) )
							{
								__0x8963.DrawImage( __0x8958, new System.Drawing.Rectangle( 0, 0, __0x8961, __0x8961 ), new System.Drawing.Rectangle( ( __0x8958.Width - __0x8958.Height ) / 2, 0, __0x8958.Height, __0x8958.Height ), GraphicsUnit.Pixel );
							}

							if( __0x8954.disposed )
								return;

							__0x8954.sourceImage = __0x8958;
							__0x8954.squareImage = __0x8962;
						}
					}
				}
				catch
				{
				}
				finally
				{
					__0x8954.webRequest = null;
					__0x8954.webResponse = null;
				}
			}

			public void Clear()
			{
				foreach( var __0x8984 in __0x8950.Values )
					__0x8984.Dispose();
				__0x8950.Clear();
			}

			public void DeleteItemsNotUsedForLongTime()
			{
				var __0x8964 = EngineApp.GetSystemTime();

				var __0x8965 = new List<__0x9001>();
				foreach( var __0x8985 in __0x8950.Values )
				{
					if( __0x8985.lastUsedTime != 0 && __0x8985.lastUsedTime + 30 < __0x8964 )
						__0x8965.Add( __0x8985 );
				}

				foreach( var __0x8986 in __0x8965 )
				{
					__0x8950.Remove( __0x8986.url );
					__0x8986.Dispose();
				}
			}
		}

		

		public class FilterSettingsClass
		{
			
			
			

			
			
			

			

			
			
			
			

			
			
			
			

			

			[Category( "Licenses" )]
			[Description( "Permissive free software license." )]
			[DefaultValue( true )]
			[DisplayName( "MIT" )]
			[EngineConfig( "StoresWindowFilterSettings" )]
			public bool LicenseMIT { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution alone. Licensees may copy, distribute, display and perform the work and make derivative works and remixes based on it only if they give the author the credits." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution" )]
			public bool CCAttribution { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, share-alike. Licensees may distribute derivative works only under a license identical to the license that governs the original work." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution BY-SA" )]
			public bool CCAttributionBYSA { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, no derivative works. Licensees may copy, distribute, display and perform only verbatim copies of the work, not derivative works and remixes based on it." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution BY-ND" )]
			public bool CCAttributionBYND { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial. Licensees may copy, distribute, display, and perform the work and make derivative works and remixes based on it only for non-commercial purposes." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC" )]
			public bool CCAttributionBYNC { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial, share-alike." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC-SA" )]
			public bool CCAttributionBYNCSA { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial, no derivative works." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC-ND" )]
			public bool CCAttributionBYNCND { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Freeing content globally without restrictions." )]
			[DefaultValue( true )]
			[DisplayName( "CC0" )]
			public bool CC0 { get; set; } = true;

			
			
			
			
			
			

			[Category( "Licenses" )]
			[Description( "Free to use, can only be used in NeoAxis products." )]
			[DefaultValue( true )]
			[DisplayName( "Free To Use With NeoAxis" )]
			public bool FreeToUseWithNeoAxis { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Paid license for individual person or per seat in an organization." )]
			[DefaultValue( true )]
			public bool PaidPerSeat { get; set; } = true;

			
			
			
			

			

			public enum SortByEnum
			{
				Relevance,
				Latest,
			}

			[Category( "Sort" )]
			
			[DefaultValue( SortByEnum.Relevance )]
			public SortByEnum SortBy { get; set; } = SortByEnum.Relevance;

			
			
			
			
			

			

			[Category( "Models" )]
			[Description( "Minimum number of triangles in the model." )]
			[DefaultValue( 1 )]
			[Range( 1, 10000000, RangeAttribute.ConvenientDistributionEnum.Exponential, 4 )]
			public int MinTriangleCount { get; set; } = 1;

			[Category( "Models" )]
			[Description( "Maximum number of triangles in the model." )]
			[DefaultValue( 10000000 )]
			[Range( 1, 10000000, RangeAttribute.ConvenientDistributionEnum.Exponential, 4 )]
			public int MaxTriangleCount { get; set; } = 10000000;

			[Category( "Models" )]
			[Description( "Selected as awesome content by staff." )]
			[DefaultValue( false )]
			public bool StaffPicks { get; set; } = false;

			[Category( "Models" )]
			[Description( "The content has animations." )]
			[DefaultValue( false )]
			public bool Animated { get; set; } = false;

			[Category( "Models" )]
			[Description( "Content that contain partial or full nudity, that depict drug use, extreme or realistically violent content are filtered." )]
			[DefaultValue( false )]
			public bool ShowRestricted { get; set; } = false;

			

			public FilterSettingsClass Clone()
			{
				var __0x8966 = new FilterSettingsClass();

				var __0x8967 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x8987 in __0x8967.MetadataGetMembers() )
				{
					var __0x8968 = __0x8987 as Metadata.Property;
					if( __0x8968 != null && !__0x8968.ReadOnly )
					{
						var __0x8969 = __0x8968.GetValue( this, null );
						__0x8968.SetValue( __0x8966, __0x8969, null );
					}
				}

				return __0x8966;
			}

			public void Load( TextBlock block )
			{
				try
				{
					var __0x8970 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
					foreach( var __0x8988 in __0x8970.MetadataGetMembers() )
					{
						var __0x8971 = __0x8988 as Metadata.Property;
						if( __0x8971 != null && !__0x8971.ReadOnly )
						{
							if( block.AttributeExists( __0x8971.Name ) )
							{
								var __0x8972 = SimpleTypes.ParseValue( __0x8971.Type.GetNetType(), block.GetAttribute( __0x8971.Name ) );
								__0x8971.SetValue( this, __0x8972, null );
							}
						}
					}
				}
				catch { }
			}

			public void Save( TextBlock block )
			{
				var __0x8973 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x8989 in __0x8973.MetadataGetMembers() )
				{
					var __0x8974 = __0x8989 as Metadata.Property;
					if( __0x8974 != null && !__0x8974.ReadOnly )
						block.SetAttribute( __0x8974.Name, __0x8974.GetValue( this, null ).ToString() );
				}
			}

			public bool Equals( FilterSettingsClass other )
			{
				var __0x8975 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x8990 in __0x8975.MetadataGetMembers() )
				{
					var __0x8976 = __0x8990 as Metadata.Property;
					if( __0x8976 != null && !__0x8976.ReadOnly )
					{
						var __0x8977 = __0x8976.GetValue( this, null );
						var __0x8978 = __0x8976.GetValue( other, null );
						if( !__0x8977.Equals( __0x8978 ) )
							return false;
					}
				}
				return true;
			}
		}

		

		
		
		

		

		

		
		
		

		
		

		

		

		
		

		

		

		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		


		

		public static List<StoreItem> Stores
		{
			get { return __0x8947; }
		}

		public static ImageManagerClass ImageManager
		{
			get { return __0x8948; }
		}

		
		
		
		

		public static void RegisterStore( StoreItem storeItem )
		{
			storeItem.IconScaled = RenderStandard.GetImageForDispalyScale( storeItem.Icon16, storeItem.Icon32 );
			storeItem.Implementation.store = storeItem;

			__0x8947.Add( storeItem );
		}

		internal static void Init()
		{
			RegisterStore( new StoreItem() { Name = "NeoAxis Store", Website = "https://store.neoaxis.com/", Icon16 = Properties.Resources.NeoAxis_16, Icon32 = Properties.Resources.NeoAxis_32, Implementation = new NeoAxisStoreImplementation() } );
		}

		internal static void Shutdown()
		{
			foreach( var __0x8991 in __0x8947 )
				__0x8991.Implementation.Shutdown();
		}

		public static void SetDownloadedListOfPackages( StoreItem store, List<PackageManager.PackageInfo> list )
		{
			var __0x8979 = Stores.IndexOf( store );

			lock( __0x8949 )
			{
				while( __0x8979 >= __0x8949.Count )
					__0x8949.Add( new Dictionary<string, PackageManager.PackageInfo>() );

				var __0x8980 = __0x8949[ __0x8979 ];

				__0x8980.Clear();
				foreach( var __0x8992 in list )
					__0x8980[ __0x8992.Identifier ] = __0x8992;
			}

			
			
			
			
			
			

			
			DownloadedListOfPackagesUpdated?.Invoke();
		}

		public static void ClearDownloadedListOfPackages()
		{
			lock( __0x8949 )
				__0x8949.Clear();

			DownloadedListOfPackagesUpdated?.Invoke();
		}

		public static string[] GetPackages( StoreItem specifiedStore = null )
		{
			var __0x8981 = new ESet<string>();

			lock( __0x8949 )
			{
				foreach( var __0x8993 in __0x8949 )
				{
					foreach( var __0x8994 in __0x8993.Values )
					{
						if( specifiedStore == null || specifiedStore == __0x8994.Store )
							__0x8981.AddWithCheckAlreadyContained( __0x8994.Identifier );
					}

					
				}
			}

			return __0x8981.ToArray();

			
			
		}

		public static PackageManager.PackageInfo GetPackageInfo( string packageId, bool needDetailedInfo )
		{
			

			lock( __0x8949 )
			{
				foreach( var __0x8995 in __0x8949 )
				{
					if( __0x8995.TryGetValue( packageId, out var package ) )
						return package;
				}
			}

			return null;

			
			
			
			
			
			
			
		}

		public static StoreItem GetPackageStore( string packageId )
		{
			lock( __0x8949 )
			{
				for( int __0x8982 = 0; __0x8982 < __0x8949.Count; __0x8982++ )
				{
					var __0x8983 = __0x8949[ __0x8982 ];
					if( __0x8983.ContainsKey( packageId ) )
						return __0x8947[ __0x8982 ];
				}
			}
			return null;
		}

		public static StoreItem DefaultStore
		{
			get { return __0x8947[ 0 ]; }
		}

		public static StoreItem GetStore( string name )
		{
			return Stores.FirstOrDefault( __0x9000 => __0x9000.Name == name );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Stores window.
	/// </summary>
	public partial class StoresWindow : DockWindow
	{
		double __0x9002;

		StoreManager.StoreItem __0x9003;

		Dictionary<string, ContentBrowserItem_StoreGroupItem> __0x9004 = new Dictionary<string, ContentBrowserItem_StoreGroupItem>();

		double __0x9005;
		bool __0x9006;
		bool __0x9007;

		Dictionary<string, PackageState> __0x9008 = new Dictionary<string, PackageState>();

		string __0x9009;
		bool __0x9010;

		
		List<(string, bool)> __0x9011 = new List<(string, bool)>();

		Dictionary<string, CategoryItem> __0x9012 = new Dictionary<string, CategoryItem>();

		double __0x9013;

		StoreManager.FilterSettingsClass __0x9014 = new StoreManager.FilterSettingsClass();

		public static bool needOpenOptions;

		

		public class ContentBrowserItem_StoreGroupItem : ContentBrowserItem_Virtual
		{
			public StoreGroupType groupType;

			public ContentBrowserItem_StoreGroupItem( ContentBrowser owner, ContentBrowser.Item parent, string text, StoreGroupType groupType )
				: base( owner, parent, text )
			{
				this.groupType = groupType;
			}
		}

		

		[Preview( typeof( StoreItemPreview ) )]
		public class ContentBrowserItem_StoreItem : ContentBrowserItem_Virtual
		{
			public StoresWindow storesWindow;
			public string packageId;

			public double stateProgress;
			public Color stateColor;

			public Image createdImage;
			public double createdImageStateProgress;
			public Color createdImageStateColor;
			public double createdImageLastUsedTime;

			

			public ContentBrowserItem_StoreItem( ContentBrowser owner, ContentBrowser.Item parent, string text, StoresWindow storesWindow, string packageId )
				: base( owner, parent, text )
			{
				this.storesWindow = storesWindow;
				this.packageId = packageId;
			}

			public override string GetDescription()
			{
				var __0x9015 = storesWindow.GetPackage( packageId, false );
				if( __0x9015 != null )
					return __0x9015.GetTooltipDescription();
				return "";
			}

			public override void Dispose()
			{
				createdImage?.Dispose();
				createdImage = null;

				base.Dispose();
			}

			public override object ContainedObject
			{
				get
				{
					return this;
					
				}
			}

			public (PackageManager.PackageInfo.FileTypeToDrop type, string reference) GetFileToDrop( bool allowAutoInstall )
			{
				var __0x9016 = storesWindow.GetPackage( packageId, false );
				if( __0x9016 != null )
				{
					var __0x9017 = __0x9016.GetFileToDrop();

					
					if( allowAutoInstall && __0x9017.type != PackageManager.PackageInfo.FileTypeToDrop.None )
					{
						var __0x9018 = storesWindow.__0x9279( packageId );
						if( __0x9018 == null || ( !__0x9018.Installed && !__0x9018.Downloaded ) )
							storesWindow.__0x9270( __0x9016.Identifier, true, false );
					}

					return __0x9017;
				}

				return (PackageManager.PackageInfo.FileTypeToDrop.None, "");
			}

			public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
			{
				referenceValue = "";
				canSet = false;

				var (type, reference) = GetFileToDrop( false );

				if( !string.IsNullOrEmpty( reference ) )
				{
					switch( type )
					{
					case PackageManager.PackageInfo.FileTypeToDrop.Mesh:
						if( MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( expectedType ) )
						{
							referenceValue = reference;
							canSet = true;
						}
						break;

					case PackageManager.PackageInfo.FileTypeToDrop.Material:
						if( MetadataManager.GetTypeOfNetType( typeof( Material ) ).IsAssignableFrom( expectedType ) )
						{
							referenceValue = reference;
							canSet = true;
						}
						break;

					case PackageManager.PackageInfo.FileTypeToDrop.Surface:
						if( MetadataManager.GetTypeOfNetType( typeof( Surface ) ).IsAssignableFrom( expectedType ) )
						{
							referenceValue = reference;
							canSet = true;
						}
						break;
					}
				}

				
				if( canSet )
					GetFileToDrop( true );
			}
		}

		

		public class StoresContentBrowserOptions : ContentBrowserOptions
		{
			public StoresContentBrowserOptions( ContentBrowser owner )
				: base( owner )
			{
			}

			protected override void MetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
			{
				var __0x9019 = member as Metadata.Property;
				if( __0x9019 != null )
				{
					if( __0x9019.Name != nameof( TileImageSize ) && __0x9019.Name != nameof( Breadcrumb ) )
						skip = true;
				}

				base.MetadataGetMembersFilter( context, member, ref skip );
			}
		}

		

		public enum StoreGroupType
		{
			None,
			
			
			Models,
			
			
		}

		

		public class PackageState
		{
			public StoresWindow storesWindow;
			public string packageId;

			public volatile string downloadingAddress = "";
			public volatile string downloadingDestinationPath = "";
			public volatile float downloadProgress;
			public volatile bool downloadingInstallAfterDownload;
			public volatile WebClient downloadingClient;

			

			public bool Installed
			{
				get { return PackageManager.IsInstalled( packageId, false ); }
			}

			public bool Downloaded
			{
				get
				{
					var __0x9020 = storesWindow.GetPackage( packageId, false );
					if( __0x9020 == null )
						return false;
					return !string.IsNullOrEmpty( __0x9020.FullFilePath ) && PackageManager.ReadPackageArchiveInfo_CheckOnly( __0x9020.FullFilePath, out _ );
				}
			}

			public bool Downloading
			{
				get { return !string.IsNullOrEmpty( downloadingAddress ); }
			}

			public bool CanDownload
			{
				get
				{
					var __0x9021 = storesWindow.GetPackage( packageId, false );
					if( __0x9021 == null )
						return false;
					return !string.IsNullOrEmpty( __0x9021.FreeDownload ) || __0x9021.SecureDownload && __0x9267( __0x9021.Identifier );
				}
			}
		}

		

		public class CategoryItem
		{
			public string Name;
			public CategoryItem Parent;
			

			public CategoryItem( string name )
			{
				Name = name;
			}
		}

		

		public StoresWindow()
		{
			__0x9283();

			__0x9246();

			__0x9204.Image = EditorResourcesCache.Options;
			__0x9205.Image = EditorResourcesCache.Refresh;
			__0x9206.Image = EditorResourcesCache.Selection;
			__0x9207.Image = EditorResourcesCache.Filter;

			foreach( var __0x9209 in __0x9201.Items )
			{
				var __0x9022 = __0x9209 as ToolStripButton;
				if( __0x9022 != null )
					__0x9022.Text = EditorLocalization.Translate( "StoresWindow", __0x9022.Text );

				var __0x9023 = __0x9209 as ToolStripDropDownButton;
				if( __0x9023 != null )
					__0x9023.Text = EditorLocalization.Translate( "StoresWindow", __0x9023.Text );
			}

			__0x9201.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();


			
			
			__0x9203.Init( null, null, null );
			__0x9203.Options = new StoresContentBrowserOptions( __0x9203 );

			__0x9203.Options.TileImageSize = 60;

			__0x9247();

			__0x9249();
			EngineConfig.SaveEvent += __0x9250;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			

			__0x9208.TextChanged += __0x9259;
			__0x9201.Layout += __0x9252;
			Resize += __0x9253;
		}

		void __0x9246()
		{
			var __0x9024 = new[] {   "Basic Content", "Demos", "Environments", "Extensions",  "Materials", "Models", "Surfaces", "Visual Effects", "Uncategorized", "Installed" };
			foreach( var __0x9210 in __0x9024 )
			{
				var __0x9025 = new CategoryItem( __0x9210 );
				__0x9012.Add( __0x9025.Name, __0x9025 );
			}

			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x9026 = __0x9012[ "Extensions" ];
				var __0x9027 = new[] { "Basic Extensions", "Components", "Constructors", "Kits" };
				foreach( var __0x9211 in __0x9027 )
				{
					var __0x9028 = new CategoryItem( __0x9211 );
					__0x9028.Parent = __0x9026;
					__0x9012.Add( __0x9028.Name, __0x9028 );
				}
			}

			
			{
				var __0x9029 = __0x9012[ "Models" ];
				var __0x9030 = new[] { "Animals", "Architecture", "Characters", "Exterior", "Food", "Industrial", "Interior", "Nature",  "Uncategorized Models", "Vehicles" };
				foreach( var __0x9212 in __0x9030 )
				{
					var __0x9031 = new CategoryItem( __0x9212 );
					__0x9031.Parent = __0x9029;
					__0x9012.Add( __0x9031.Name, __0x9031 );
				}
			}
		}

		void __0x9247()
		{
			__0x9203.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x9203.Options.SplitterPosition = 3.0 / 5.0;
			__0x9203.Options.EditorButton = false;
			__0x9203.Options.SettingsButton = false;
			__0x9203.Options.DisplayPropertiesEditorSettingsButtons = false;
			__0x9203.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
			__0x9203.ShowToolBar = false;
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x9248( object __0x9284, EventArgs __0x9285 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x9002 = Time.Current;
			__0x9202.Start();


			
			{
				var __0x9032 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x9286 )
				{
					int __0x9033 = 20;
					if( __0x9286 is ToolStripDropDownButton )
						__0x9033 = 28;
					__0x9286.Size = new Size( (int)( __0x9033 * __0x9032 ), (int)( 20 * __0x9032 + 2 ) );
					
				}

				__0x9201.Padding = new Padding( (int)__0x9032 );
				__0x9201.Size = new Size( 10, (int)( 21 * __0x9032 + 2 ) );

				foreach( var __0x9213 in __0x9201.Items )
				{
					var __0x9034 = __0x9213 as ToolStripButton;
					if( __0x9034 != null )
						UpdateSize( __0x9034 );

					var __0x9035 = __0x9213 as ToolStripDropDownButton;
					if( __0x9035 != null )
						UpdateSize( __0x9035 );
				}


				__0x9201.Padding = new Padding( (int)__0x9032 );
				__0x9201.Size = new Size( 10, (int)( 21 * __0x9032 + 2 ) );
			}


			__0x9251();

			__0x9261();

			EditorAPI.ClosingApplicationChanged += __0x9277;

			
			try
			{
				if( !Directory.Exists( PackageManager.PackagesFolder ) )
					Directory.CreateDirectory( PackageManager.PackagesFolder );
			}
			catch( Exception e2 )
			{
				Log.Warning( e2.Message );
			}

			__0x9262();

			
			StoreManager.DownloadedListOfPackagesUpdated += delegate ()
			{
				__0x9005 = EngineApp.GetSystemTime();
			};

			__0x9269( false );
			PackageManager.GetInstalledPackages( true );

			
			
			
		}


		protected override void OnDestroy()
		{
			EditorAPI.ClosingApplicationChanged -= __0x9277;

			base.OnDestroy();
		}

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x9203; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( null, __0x9203.SelectedItems );
			
		}

		void __0x9249()
		{
			var __0x9036 = EngineConfig.TextBlock.FindChild( nameof( StoresWindow ) );
			if( __0x9036 != null )
			{
				var __0x9037 = __0x9036.FindChild( "ContentBrowser" );
				if( __0x9037 != null )
				{
					ContentBrowser1.Options.Load( __0x9037 );
					__0x9247();
				}

				if( __0x9036.AttributeExists( "Store" ) )
				{
					var __0x9038 = __0x9036.GetAttribute( "Store" );
					__0x9003 = StoreManager.Stores.Find( __0x9287 => __0x9287.Name == __0x9038 );
				}

				var __0x9039 = __0x9036.FindChild( "Filter" );
				if( __0x9039 != null )
					__0x9014.Load( __0x9039 );

				__0x9255();
			}
		}

		void __0x9250()
		{
			var __0x9040 = EngineConfig.TextBlock;

			var __0x9041 = __0x9040.FindChild( nameof( StoresWindow ) );
			if( __0x9041 != null )
				__0x9040.DeleteChild( __0x9041 );

			var __0x9042 = __0x9040.AddChild( nameof( StoresWindow ) );
			var __0x9043 = __0x9042.AddChild( "ContentBrowser" );
			ContentBrowser1.Options.Save( __0x9043 );

			if( __0x9003 != null )
				__0x9042.SetAttribute( "Store", __0x9003.Name );

			var __0x9044 = __0x9042.AddChild( "Filter" );
			__0x9014.Save( __0x9044 );
		}

		void __0x9251()
		{
			var __0x9045 = __0x9203.Parent.ClientSize;
			__0x9203.Location = new Point( 0, __0x9201.Height );
			__0x9203.Size = new Size( __0x9045.Width, __0x9045.Height - __0x9201.Height );
		}

		private void __0x9252( object __0x9288, LayoutEventArgs __0x9289 )
		{
			int __0x9046 = __0x9201.DisplayRectangle.Width;

			foreach( ToolStripItem __0x9214 in __0x9201.Items )
			{
				if( !( __0x9214 == __0x9208 ) )
				{
					__0x9046 -= __0x9214.Width;
					__0x9046 -= __0x9214.Margin.Horizontal;
				}
			}

			__0x9208.Width = Math.Max( 0, __0x9046 - __0x9208.Margin.Horizontal - 1 );
		}

		private void __0x9253( object __0x9290, EventArgs __0x9291 )
		{
			__0x9251();
		}

		private void __0x9254( object __0x9292, EventArgs __0x9293 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x9251();

			var __0x9047 = EngineApp.GetSystemTime();

			if( __0x9005 != 0 && __0x9047 > __0x9005 )
			{
				var __0x9048 = __0x9006;
				var __0x9049 = __0x9007;

				__0x9006 = false;
				__0x9007 = false;
				__0x9005 = 0;

				if( __0x9049 )
					__0x9269( false );
				else
					__0x9265( false, __0x9048 );

				
				__0x9013 = 0;
			}
			
			
			
			
			

			if( __0x9013 + 1.0 < __0x9047 )
			{
				__0x9013 = __0x9047;

				PackageManager.GetPackagesInfoByFileArchives( true );
				PackageManager.GetInstalledPackages( true );

				StoreManager.ImageManager.DeleteItemsNotUsedForLongTime();

				try
				{
					__0x9278();
				}
				catch { }

				__0x9281();
			}

			
			{
				List<(string, bool)> __0x9050;
				lock( __0x9011 )
				{
					__0x9050 = new List<(string, bool)>( __0x9011 );
					__0x9011.Clear();
				}
				foreach( var __0x9215 in __0x9050 )
					__0x9273( __0x9215.Item1, __0x9215.Item2 );
			}

			
			if( !string.IsNullOrEmpty( __0x9009 ) )
			{
				foreach( var __0x9216 in __0x9203.GetAllItemsByItemHierarchy( true ) )
				{
					var __0x9051 = __0x9216 as ContentBrowserItem_StoreItem;
					if( __0x9051 != null && __0x9051.packageId == __0x9009 )
					{
						__0x9203.SelectItemsList( new ContentBrowser.Item[] { __0x9216 }, true );

						if( __0x9010 )
							__0x9270( __0x9009, true, true );

						break;
					}
				}

				__0x9009 = null;
				__0x9010 = false;
			}

			if( needOpenOptions )
			{
				needOpenOptions = false;
				__0x9257( null, null );
			}

		}

		void __0x9255()
		{
			__0x9206.Image = __0x9003 != null ? __0x9003.IconScaled : EditorResourcesCache.Selection;
		}

		private void __0x9256( object __0x9294, EventArgs __0x9295 )
		{
			var __0x9052 = new List<KryptonContextMenuItemBase>();

			{
				var __0x9053 = new KryptonContextMenuItem( __0x9260( "All" ), EditorResourcesCache.Selection, delegate ( object __0x9296, EventArgs __0x9297 )
				{
					var __0x9054 = GetSelectedStore();

					__0x9003 = null;

					if( __0x9054 != __0x9003 )
					{
						__0x9255();
						__0x9203.SelectItems( new List<ContentBrowser.Item>() );
						__0x9269( false );
						
					}
				} );
				__0x9053.Checked = __0x9003 == null;
				__0x9052.Add( __0x9053 );
			}

			foreach( var __0x9217 in StoreManager.Stores )
			{
				var __0x9055 = new KryptonContextMenuItem( __0x9217.Name, __0x9217.IconScaled, delegate ( object __0x9298, EventArgs __0x9299 )
				{
					var __0x9056 = GetSelectedStore();

					__0x9003 = (StoreManager.StoreItem)( (KryptonContextMenuItem)__0x9298 ).Tag;

					if( __0x9056 != __0x9003 )
					{
						__0x9255();
						__0x9203.SelectItems( new List<ContentBrowser.Item>() );
						__0x9269( false );
						
					}
				} );
				__0x9055.Checked = GetSelectedStore() == __0x9217;
				__0x9055.Tag = __0x9217;
				__0x9052.Add( __0x9055 );
			}

			
			

			EditorContextMenuWinForms.Show( __0x9052, this, PointToClient( Cursor.Position ) );
		}

		private void __0x9257( object __0x9300, EventArgs __0x9301 )
		{
			var __0x9057 = new ContentBrowserOptionsForm( __0x9203 );

			if( EditorForm.Instance == null )
				__0x9057.ShowDialog();
			else
			{
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x9057.ShowDialog();
				} );
			}
		}

		private void __0x9258( object __0x9302, EventArgs __0x9303 )
		{
			StoreManager.ImageManager.Clear();
			
			__0x9269( true );

			
			
			
		}

		private void __0x9259( object __0x9304, EventArgs __0x9305 )
		{
			__0x9006 = true;
			__0x9007 = true;
			__0x9005 = EngineApp.GetSystemTime() + 1.0;
		}

		static string __0x9260( string __0x9306 )
		{
			return EditorLocalization.Translate( "StoresWindow", __0x9306 );
		}

		void __0x9261()
		{
			__0x9203.ShowContextMenuEvent += delegate ( ContentBrowser __0x9307, ContentBrowser.Item __0x9308, List<KryptonContextMenuItemBase> __0x9309 )
			{
				
				var __0x9058 = __0x9308 as ContentBrowserItem_StoreItem;
				if( __0x9058 != null )
				{
					var __0x9059 = GetPackage( __0x9058.packageId, false );
					if( __0x9059 != null )
					{
						var __0x9060 = __0x9279( __0x9058.packageId );

						
						
						
						

						
						
						
						

						if( __0x9059.CostNumber > 0 && !__0x9060.CanDownload )
						{
							var __0x9061 = new KryptonContextMenuItem( __0x9260( "Buy" ), EditorResourcesCache.Money, delegate ( object __0x9310, EventArgs __0x9311 )
							{
								
								var __0x9062 = __0x9059.Permalink;
								Process.Start( new ProcessStartInfo( __0x9062 ) { UseShellExecute = true } );
							} );
							
							__0x9309.Add( __0x9061 );
						}

						
						

						var __0x9063 = __0x9060.Downloading;
						if( __0x9063 )
						{
							var __0x9064 = new KryptonContextMenuItem( __0x9260( "Cancel Installation" ), EditorResourcesCache.Download, delegate ( object __0x9312, EventArgs __0x9313 )
							{
								__0x9271( __0x9058.packageId );
							} );
							
							__0x9309.Add( __0x9064 );
						}
						else
						{
							var __0x9065 = new KryptonContextMenuItem( __0x9260( "Install" ), EditorResourcesCache.Download, delegate ( object __0x9314, EventArgs __0x9315 )
							{
								__0x9270( __0x9058.packageId, true, true );
							} );
							__0x9065.Enabled = !__0x9060.Installed && ( __0x9060.CanDownload || __0x9060.Downloaded );
							
							__0x9309.Add( __0x9065 );
						}

						{
							var __0x9066 = new KryptonContextMenuItem( __0x9260( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x9316, EventArgs __0x9317 )
							{
								__0x9276( __0x9058.packageId, true );
							} );
							__0x9066.Enabled = ( __0x9060.Installed || __0x9060.Downloaded ) && !__0x9060.Downloading;
							__0x9309.Add( __0x9066 );
						}

						if( __0x9060.Installed )
						{
							var __0x9067 = new KryptonContextMenuItem( __0x9260( "Delete (Save Archive)" ), EditorResourcesCache.Delete, delegate ( object __0x9318, EventArgs __0x9319 )
							{
								__0x9276( __0x9058.packageId, false );
							} );
							__0x9067.Enabled = ( __0x9060.Installed || __0x9060.Downloaded ) && !__0x9060.Downloading;
							__0x9309.Add( __0x9067 );
						}

						
						__0x9309.Add( new KryptonContextMenuSeparator() );

						{
							var __0x9068 = "";
							try
							{
								if( !string.IsNullOrEmpty( __0x9059.FullFilePath ) )
								{
									var __0x9069 = PackageManager.ReadPackageArchiveInfo( __0x9059.FullFilePath, out _ );
									if( __0x9069 != null )
									{
										foreach( var __0x9218 in __0x9069.Files )
										{
											var __0x9070 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9218 );
											if( File.Exists( __0x9070 ) )
											{
												var __0x9071 = Path.GetDirectoryName( __0x9070 );
												if( string.IsNullOrEmpty( __0x9068 ) || __0x9071.Length < __0x9068.Length )
													__0x9068 = __0x9071;
											}
										}
									}
								}
								else if( !string.IsNullOrEmpty( __0x9059.Files ) )
								{
									foreach( var __0x9219 in __0x9059.GetFiles() )
									{
										var __0x9072 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9219 );
										if( File.Exists( __0x9072 ) )
										{
											var __0x9073 = Path.GetDirectoryName( __0x9072 );
											if( string.IsNullOrEmpty( __0x9068 ) || __0x9073.Length < __0x9068.Length )
												__0x9068 = __0x9073;
										}
									}
								}
							}
							catch { }

							var __0x9074 = new KryptonContextMenuItem( __0x9260( "Go to Folder" ), EditorResourcesCache.SelectFolder, delegate ( object __0x9320, EventArgs __0x9321 )
							{
								if( !string.IsNullOrEmpty( __0x9068 ) )
									EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x9068 }, true );
							} );
							__0x9074.Enabled = __0x9060.Installed && !string.IsNullOrEmpty( __0x9068 );
							__0x9309.Add( __0x9074 );
						}

						{
							var __0x9075 = new KryptonContextMenuItem( __0x9260( "View on Website" ), null, delegate ( object __0x9322, EventArgs __0x9323 )
							{
								Process.Start( new ProcessStartInfo( __0x9059.Permalink ) { UseShellExecute = true } );
							} );
							__0x9075.Enabled = !string.IsNullOrEmpty( __0x9059.Permalink );
							__0x9309.Add( __0x9075 );
						}
					}
				}
			};
		}

		void __0x9262()
		{
			__0x9004.Clear();

			var __0x9076 = new List<ContentBrowser.Item>();

			__0x9203.AddImageKey( "Folder_512", Properties.Resources.Folder_512 );
			__0x9203.AddImageKey( "Default_512", Properties.Resources.Default_512 );

			var __0x9077 = new ContentBrowserItem_Virtual( __0x9203, null, "Root" );
			__0x9077.imageKey = "Folder_512";
			__0x9076.Add( __0x9077 );

			foreach( var __0x9220 in __0x9012.Values )
			{
				if( __0x9220.Parent == null )
				{
					var __0x9078 = __0x9220.Name;

					StoreGroupType __0x9079;
					if( !Enum.TryParse( __0x9078, out __0x9079 ) )
						__0x9079 = StoreGroupType.None;

					var __0x9080 = new ContentBrowserItem_StoreGroupItem( __0x9203, __0x9077, __0x9078, __0x9079 );
					__0x9080.imageKey = "Folder_512";
					__0x9080.Tag = __0x9078;
					__0x9077.children.Add( __0x9080 );

					__0x9004[ __0x9078 ] = __0x9080;
				}
			}

			__0x9203.SetData( __0x9076 );
		}

		ContentBrowserItem_StoreGroupItem __0x9263( string __0x9324, bool __0x9325 )
		{
			var __0x9081 = __0x9324;

			next:
			if( __0x9004.TryGetValue( __0x9081, out var item ) )
				return item;

			if( __0x9325 )
			{
				if( __0x9012.TryGetValue( __0x9081, out var categoryItem ) && categoryItem.Parent != null )
				{
					__0x9081 = categoryItem.Parent.Name;
					goto next;
				}
			}

			return null;
		}

		ContentBrowserItem_StoreItem __0x9264( ContentBrowserItem_StoreGroupItem __0x9326, string __0x9327 )
		{
			foreach( var __0x9221 in __0x9326.GetChildren( true ) )
			{
				var __0x9082 = __0x9221 as ContentBrowserItem_StoreItem;
				if( __0x9082 != null && __0x9082.packageId == __0x9327 )
					return __0x9082;
			}
			return null;
		}

		void __0x9265( bool __0x9328, bool __0x9329 )
		{
			var __0x9083 = new ESet<ContentBrowserItem_StoreGroupItem>();

			
			if( __0x9329 )
			{
				foreach( var __0x9222 in __0x9004.Values )
				{
					if( __0x9222.children.Count != 0 )
					{
						__0x9222.DeleteChildren();

						__0x9222.SetText( (string)__0x9222.Tag );

						
						__0x9222.PerformChildrenChanged();
					}
				}
			}

			
			{
				var __0x9084 = __0x9263( "Uncategorized", true );
				if( __0x9084 != null && __0x9084.children.Count != 0 )
				{
					__0x9084.DeleteChildren();

					__0x9083.AddWithCheckAlreadyContained( __0x9084 );
				}
			}

			
			
			


			if( !__0x9328 )
			{
				
				
				
				
				
				
				
				
				

				foreach( var __0x9223 in GetAllPackages( true ) )
				{
					var __0x9085 = GetPackage( __0x9223, false );
					if( __0x9085 != null )
					{
						var __0x9086 = __0x9279( __0x9223 );

						var __0x9087 = false;
						

						var __0x9088 = __0x9085.Categories;
						if( __0x9088 == null )
							__0x9088 = "";
						if( __0x9086 != null && __0x9086.Installed )
						{
							if( !string.IsNullOrEmpty( __0x9088 ) )
								__0x9088 += ", ";
							__0x9088 += "Installed";
						}

						foreach( var __0x9224 in __0x9088.Split( new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries ) )
						{
							var __0x9089 = __0x9224.Trim();

							var __0x9090 = __0x9263( __0x9089, true );
							if( __0x9090 != null )
							{
								if( __0x9264( __0x9090, __0x9223 ) == null )
								{
									var __0x9091 = new ContentBrowserItem_StoreItem( __0x9203, __0x9090, __0x9085.Title, this, __0x9223 );
									__0x9091.imageKey = "Default_512";
									__0x9090.children.Add( __0x9091 );

									__0x9083.AddWithCheckAlreadyContained( __0x9090 );
								}

								if( __0x9089 != "Installed" )
									__0x9087 = true;
								
							}

							
							
							
							
							
							
							

							
							

							
							
							
							
						}

						if( !__0x9087 )
						{
							
							

							var __0x9092 = __0x9263( "Uncategorized", true );

							if( __0x9264( __0x9092, __0x9223 ) == null )
							{
								var __0x9093 = new ContentBrowserItem_StoreItem( __0x9203, __0x9092, __0x9085.Title, this, __0x9223 );
								__0x9093.imageKey = "Default_512";
								__0x9092.children.Add( __0x9093 );

								__0x9083.AddWithCheckAlreadyContained( __0x9092 );
							}

							
						}
					}
				}
			}

			foreach( var __0x9225 in __0x9083 )
			{
				
				{
					var __0x9094 = (string)__0x9225.Tag;
					if( __0x9225.children.Count != 0 )
					{
						
						var __0x9095 = "";
						if( __0x9225.children.Count >= 24 && __0x9225.groupType == StoreGroupType.Models )
							__0x9095 = "+";

						__0x9094 += $" ({__0x9225.children.Count}{__0x9095})";
					}
					__0x9225.SetText( __0x9094 );
				}

				
				CollectionUtility.InsertionSort( __0x9225.children, delegate ( ContentBrowser.Item __0x9330, ContentBrowser.Item __0x9331 )
				{
					var __0x9096 = (ContentBrowserItem_StoreItem)__0x9330;
					var __0x9097 = (ContentBrowserItem_StoreItem)__0x9331;

					var __0x9098 = StoreManager.GetPackageStore( __0x9096.packageId );
					var __0x9099 = StoreManager.GetPackageStore( __0x9097.packageId );

					if( __0x9098 != null && __0x9099 != null )
					{
						var __0x9100 = StoreManager.Stores.IndexOf( __0x9098 );
						var __0x9101 = StoreManager.Stores.IndexOf( __0x9099 );
						if( __0x9100 < __0x9101 )
							return -1;
						if( __0x9100 > __0x9101 )
							return 1;
					}

					return 0;
				} );

				

				
				var __0x9102 = __0x9203.GetListView();
				__0x9102.SetItemsScrollBarPositionReset = false;

				__0x9225.PerformChildrenChanged();

				__0x9102.SetItemsScrollBarPositionReset = true;
			}

			
			if( __0x9329 || __0x9083.Count != 0 )
				__0x9203.UpdateBreadcrumb();
		}

		void __0x9266()
		{
			
		}

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		static bool __0x9267( string __0x9332 )
		{
			if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
			{
				if( LoginUtility.GetRequestedFullLicenseInfo( out var license, out var purchasedProducts,  out _ ) )
				{
					if( !string.IsNullOrEmpty( license ) )
						return purchasedProducts.Contains( __0x9332 );
				}
			}
			return false;
		}

		string __0x9268()
		{
			var __0x9103 = __0x9208.Text.Trim().ToLower().Replace( '&', ' ' ).Replace( '\t', ' ' );
			__0x9103 = new string( __0x9103.Where( __0x9333 => !char.IsControl( __0x9333 ) ).ToArray() );
			return __0x9103;
		}

		void __0x9269( bool __0x9334 )
		{
			if( __0x9334 )
			{
				LoginUtility.RequestFullLicenseInfo();
				Thread.Sleep( 500 );
			}

			__0x9265( true, true );

			StoreManager.ClearDownloadedListOfPackages();

			

			var __0x9104 = __0x9268();
			var __0x9105 = __0x9014.Clone();

			foreach( var __0x9226 in StoreManager.Stores )
			{
				if( GetSelectedStore() == __0x9226 || GetSelectedStore() == null )
					__0x9226.Implementation.StartRefreshPackageList( __0x9104, __0x9105 );
				else
					__0x9226.Implementation.StopCurrentTask();
			}
		}

		
		
		
		
		
		
		

		void __0x9270( string __0x9335, bool __0x9336, bool __0x9337 )
		{
			var __0x9106 = GetPackage( __0x9335, true );
			if( __0x9106 == null )
				return;
			var __0x9107 = __0x9279( __0x9335 );

			
			if( !string.IsNullOrEmpty( __0x9107.downloadingAddress ) )
				return;

			if( __0x9107.CanDownload && !__0x9107.Downloaded )
			{
				if( !string.IsNullOrEmpty( __0x9106.FreeDownload ) )
				{
					__0x9107.downloadingAddress = __0x9106.FreeDownload;

					var __0x9108 = Path.GetFileName( __0x9107.downloadingAddress );
					if( Path.GetExtension( __0x9108 ) != ".neoaxispackage" )
						__0x9108 = $"{__0x9106.Identifier}-{__0x9106.Version}.neoaxispackage";

					__0x9107.downloadingDestinationPath = Path.Combine( PackageManager.PackagesFolder, __0x9108 );
					
				}
				else if( __0x9106.SecureDownload )
				{
					if( !LoginUtility.GetCurrentLicense( out var email, out var hash ) )
						return;

					var __0x9109 = __0x9106.Identifier;
					var __0x9110 = __0x9106.Version;

					var __0x9111 = StringUtility.EncodeToBase64URL( email );
					var __0x9112 = StringUtility.EncodeToBase64URL( hash );
					var __0x9113 = StringUtility.EncodeToBase64URL( __0x9109 );
					var __0x9114 = StringUtility.EncodeToBase64URL( "download" );
					
					
					
					

					

					__0x9107.downloadingAddress = $@"https://store.neoaxis.com/api/secure_download?email={__0x9111}&hash={__0x9112}&product={__0x9113}&action={__0x9114}";

					var __0x9115 = $"{__0x9109}-{__0x9110}.neoaxispackage";
					__0x9107.downloadingDestinationPath = Path.Combine( PackageManager.PackagesFolder, __0x9115 );
				}

				__0x9107.downloadProgress = 0;
				__0x9107.downloadingInstallAfterDownload = __0x9336;

				Thread __0x9116 = new Thread( __0x9272 );
				__0x9116.Start( (__0x9335, __0x9337, __0x9106) );
			}
			else if( __0x9107.Downloaded && !__0x9107.Installed )
				__0x9273( __0x9335, __0x9337 );
		}

		void __0x9271( string __0x9338 )
		{
			var __0x9117 = __0x9279( __0x9338 );

			__0x9117.downloadingClient?.CancelAsync();
			
			

			__0x9117.downloadingAddress = "";
			
			__0x9117.downloadProgress = 0;
			__0x9117.downloadingInstallAfterDownload = false;
			__0x9117.downloadingClient = null;
			
		}

		public class ThreadDownloadData
		{
			public PackageManager.PackageInfo Package;
			public PackageState State;
			public bool Cancelled;
			public Exception Error;
		}

		void __0x9272( object __0x9339 )
		{
			var (packageId, openAfterInstall, package) = ((string, bool, PackageManager.PackageInfo))__0x9339;
			var __0x9118 = __0x9279( packageId );

			var __0x9119 = new ThreadDownloadData();
			__0x9119.Package = package;
			__0x9119.State = __0x9118;

			try
			{
				package.Store?.Implementation?.ThreadDownloadBody( __0x9119 );
			}
			catch( Exception e )
			{
				if( !e.Message.Contains( "A task may only be disposed if it is in a completion state (RanToCompletion, Faulted or Canceled)." ) )
					Log.Warning( e.Message );

				__0x9119.Error = e;

				return;
			}
			finally
			{
				try
				{
					if( !__0x9119.Cancelled )
					{
						if( File.Exists( __0x9118.downloadingDestinationPath ) && new FileInfo( __0x9118.downloadingDestinationPath ).Length == 0 )
						{
							File.Delete( __0x9118.downloadingDestinationPath );
							__0x9119.Cancelled = true;
						}
					}
					if( !__0x9119.Cancelled && !File.Exists( __0x9118.downloadingDestinationPath ) )
						__0x9119.Cancelled = true;

					if( __0x9119.Cancelled || __0x9119.Error != null )
					{
						if( File.Exists( __0x9118.downloadingDestinationPath ) )
							File.Delete( __0x9118.downloadingDestinationPath );
					}
				}
				catch { }

				if( __0x9119.Error != null && !__0x9119.Cancelled )
					Log.Warning( ( __0x9119.Error.InnerException ?? __0x9119.Error ).Message );

				var __0x9120 = __0x9118.downloadingInstallAfterDownload;

				__0x9118.downloadingAddress = "";
				__0x9118.downloadingDestinationPath = "";
				__0x9118.downloadProgress = 0;
				__0x9118.downloadingInstallAfterDownload = false;
				__0x9118.downloadingClient = null;
				

				
				if( __0x9120 && !__0x9119.Cancelled )
				{
					lock( __0x9011 )
						__0x9011.Add( (packageId, openAfterInstall) );
				}
			}

			if( !__0x9119.Cancelled )
			{
				if( __0x9119.Error != null )
					ScreenNotifications.Show( EditorLocalization.Translate( "General", "Error downloading the package." ), true );
				else
					ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully downloaded." ) );
			}
		}

		void __0x9273( string __0x9340, bool __0x9341 )
		{
			var __0x9121 = GetPackage( __0x9340, true );
			if( __0x9121 == null )
				return;

			var __0x9122 = PackageManager.ReadPackageArchiveInfo( __0x9121.FullFilePath, out var error );
			if( __0x9122 == null )
			{
				
				__0x9270( __0x9340, true, __0x9341 );
				return;
			}

			var __0x9123 = new ESet<string>();
			foreach( var __0x9227 in __0x9122.Files )
			{
				__0x9123.AddWithCheckAlreadyContained( __0x9227 );
				
				
			}

			var __0x9124 = new List<string>();
			foreach( var __0x9228 in __0x9123 )
			{
				var __0x9125 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9228 );
				if( File.Exists( __0x9125 ) )
					__0x9124.Add( __0x9228 );
			}

			if( __0x9124.Count != 0 )
			{
				var __0x9126 = $"{__0x9124.Count} files already exist. Overwrite?";
				__0x9126 += "\r\n";

				int __0x9127 = 0;
				foreach( var __0x9229 in __0x9123 )
				{
					__0x9126 += "\r\n";
					if( __0x9127 > 10 )
					{
						__0x9126 += "...";
						break;
					}
					__0x9126 += __0x9229;
				}

				if( EditorMessageBox.ShowQuestion( __0x9126, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
					return;
			}

			
			
			

			var __0x9128 = ScreenNotifications.ShowSticky( "Installing the package..." );

			
			PreviewImagesManager.EnableVirtualFileWatcherUpdate = false;

			var __0x9129 = new List<string>();

			try
			{
				using( var __0x9130 = ZipFile.OpenRead( __0x9121.FullFilePath ) )
				{
					foreach( var __0x9230 in __0x9130.Entries )
					{
						var __0x9131 = __0x9230.FullName;
						bool __0x9132 = __0x9131[ __0x9131.Length - 1 ] == '/';
						if( __0x9131 != "Package.info" && !__0x9132 )
						{
							var __0x9133 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9131 );

							var __0x9134 = Path.GetDirectoryName( __0x9133 );
							if( !Directory.Exists( __0x9134 ) )
								Directory.CreateDirectory( __0x9134 );

							__0x9230.ExtractToFile( __0x9133, true );

							__0x9129.Add( __0x9133 );
						}
					}
				}

				PackageManager.ChangeInstalledState( __0x9121.Identifier, true );

				
				Thread.Sleep( 1000 );
				VirtualFileWatcher.ProcessEvents();

			}
			catch( Exception e2 )
			{
				EditorMessageBox.ShowWarning( e2.Message );
				return;
			}
			finally
			{
				
				PreviewImagesManager.EnableVirtualFileWatcherUpdate = true;

				__0x9128.Close();
			}


			if( !string.IsNullOrEmpty( __0x9122.AddCSharpFilesToProject ) )
			{
				var __0x9135 = new ESet<string>();

				var __0x9136 = Path.Combine( VirtualFileSystem.Directories.Assets, __0x9122.AddCSharpFilesToProject );
				if( Directory.Exists( __0x9136 ) )
				{
					var __0x9137 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
					var __0x9138 = Directory.GetFiles( __0x9136, "*.cs", SearchOption.AllDirectories );
					foreach( var __0x9231 in __0x9138 )
					{
						if( !__0x9137.Contains( __0x9231 ) )
							__0x9135.AddWithCheckAlreadyContained( __0x9231 );
					}
				}

				
				
				
				
				
				

				if( __0x9135.Count != 0 )
				{
					if( CSharpProjectFileUtility.UpdateProjectFile( __0x9135, null, out var error2 ) )
					{
						if( __0x9135.Count > 1 )
							Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
						else
							Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );

						EditorAPI.BuildProjectSolution( false );
					}
					else
						Log.Warning( error2 );
				}
			}

			
			foreach( var __0x9232 in __0x9129 )
			{
				try
				{
					var __0x9139 = Path.GetExtension( __0x9232 ).ToLower();
					if( __0x9139 == ".neoaxisbaking" )
						ArchiveManager.LoadBakingFile( __0x9232 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}
			}

			
			
			
			
			
			
			
			
			
			
			
			
			

			if( __0x9122.MustRestart )
				__0x9266();

			
			if( __0x9341 && !string.IsNullOrEmpty( __0x9122.OpenAfterInstall ) )
			{
				var __0x9140 = VirtualPathUtility.GetRealPathByVirtual( __0x9122.OpenAfterInstall );

				if( __0x9122.MustRestart )
				{
					EditorSettingsSerialization.OpenFileAtStartup = __0x9140;
				}
				else
				{
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x9140 }, Directory.Exists( __0x9140 ) );
					EditorAPI.OpenFileAsDocument( __0x9140, true, true );
				}
			}

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully installed." ) );

			
			if( __0x9122.MustRestart )
			{
				var __0x9141 = EditorLocalization.Translate( "General", "To apply changes need restart the editor. Restart?" );
				if( EditorMessageBox.ShowQuestion( __0x9141, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					EditorAPI.BeginRestartApplication();
			}

			
			
			
			
		}

		bool __0x9274( string __0x9342 )
		{
			return !Directory.EnumerateFileSystemEntries( __0x9342 ).Any();
		}

		bool __0x9275( string __0x9343 )
		{
			var __0x9142 = GetPackage( __0x9343, true );
			if( __0x9142 == null )
				return false;

			var __0x9143 = new List<string>();
			bool __0x9144 = false;

			
			if( !string.IsNullOrEmpty( __0x9142.FullFilePath ) && File.Exists( __0x9142.FullFilePath ) )
			{
				

				var __0x9145 = PackageManager.ReadPackageArchiveInfo( __0x9142.FullFilePath, out var error );
				if( __0x9145 == null )
				{
					ScreenNotifications.Show( "Could not read the package info.", true );
					Log.Warning( error );
					return false;
				}

				foreach( var __0x9233 in __0x9145.Files )
				{
					var __0x9146 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9233 );
					if( File.Exists( __0x9146 ) )
						__0x9143.Add( __0x9233 );
				}

				__0x9144 = __0x9145.MustRestart;
			}
			else
			{
				

				foreach( var __0x9234 in __0x9142.GetFiles() )
				{
					var __0x9147 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9234 );
					if( File.Exists( __0x9147 ) )
						__0x9143.Add( __0x9234 );
				}

				
			}

			if( __0x9143.Count == 0 )
				return false;

			var __0x9148 = string.Format( __0x9260( "Uninstall {0}?\n\n{1} files will deleted." ), __0x9142.Title, __0x9143.Count );
			if( EditorMessageBox.ShowQuestion( __0x9148, EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return false;

			var __0x9149 = new List<string>();

			try
			{
				
				try
				{
					var __0x9150 = new List<string>();

					foreach( var __0x9235 in __0x9143 )
					{
						var __0x9151 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9235 );
						if( Path.GetExtension( __0x9151 ).ToLower() == ".cs" )
							__0x9150.Add( VirtualPathUtility.NormalizePath( __0x9151 ) );
					}

					if( __0x9150.Count != 0 )
						CSharpProjectFileUtility.UpdateProjectFile( null, __0x9150, out _ );
				}
				catch { }

				
				foreach( var __0x9236 in __0x9143 )
				{
					try
					{
						var __0x9152 = Path.GetExtension( __0x9236 ).ToLower();
						if( __0x9152 == ".neoaxisbaking" )
						{
							var __0x9153 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9236 );
							ArchiveManager.UnloadBakingFile( __0x9153 );
						}
					}
					catch( Exception e )
					{
						Log.Warning( e.Message );
					}
				}

				
				foreach( var __0x9237 in __0x9143 )
				{
					var __0x9154 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9237 );

					try
					{
						File.Delete( __0x9154 );
					}
					catch( UnauthorizedAccessException )
					{
						__0x9149.Add( __0x9237 );
					}
					catch( IOException )
					{
						__0x9149.Add( __0x9237 );
					}
				}

				
				{
					var __0x9155 = new ESet<string>();
					foreach( var __0x9238 in __0x9143 )
					{
						var __0x9156 = Path.GetDirectoryName( __0x9238 );
						while( !string.IsNullOrEmpty( __0x9156 ) )
						{
							__0x9155.AddWithCheckAlreadyContained( __0x9156 );
							__0x9156 = Path.GetDirectoryName( __0x9156 );
						}
					}

					var __0x9157 = __0x9155.ToArray();
					CollectionUtility.MergeSort( __0x9157, delegate ( string __0x9344, string __0x9345 )
					{
						var __0x9158 = __0x9344.Split( new char[] { '\\' } ).Length;
						var __0x9159 = __0x9345.Split( new char[] { '\\' } ).Length;
						return __0x9159 - __0x9158;
					} );

					foreach( var __0x9239 in __0x9157 )
					{
						var __0x9160 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9239 );

						if( Directory.Exists( __0x9160 ) && __0x9274( __0x9160 ) )
							Directory.Delete( __0x9160 );
					}
				}

				PackageManager.ChangeInstalledState( __0x9142.Identifier, false );
			}
			catch( Exception e2 )
			{
				EditorMessageBox.ShowWarning( e2.Message );
				return false;
			}

			if( __0x9149.Count != 0 )
				PackageManager.AddFilesToDeletionAtStartup( __0x9149 );

			if( __0x9144 )
				__0x9266();

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully uninstalled." ) );

			
			
			
			
			
			
			

			return true;
		}

		void __0x9276( string __0x9346, bool __0x9347 )
		{
			var __0x9161 = GetPackage( __0x9346, true );
			if( __0x9161 == null )
				return;

			bool __0x9162 = PackageManager.IsInstalled( __0x9346, true );

			
			var __0x9163 = false;
			if( __0x9162 )
			{
				if( !__0x9275( __0x9346 ) )
					return;
				__0x9163 = true;
			}

			if( __0x9347 )
			{
				
				if( !File.Exists( __0x9161.FullFilePath ) )
					return;

				
				if( !__0x9163 )
				{
					var __0x9164 = __0x9260( "Are you sure you want to uninstall \'{0}\'?" );
					var __0x9165 = string.Format( __0x9164, __0x9161.FullFilePath );
					if( EditorMessageBox.ShowQuestion( __0x9165, EMessageBoxButtons.YesNo ) == EDialogResult.No )
						return;
				}

				
				try
				{
					File.Delete( __0x9161.FullFilePath );
				}
				catch( Exception e2 )
				{
					EditorMessageBox.ShowWarning( e2.Message );
					return;
				}
			}
		}

		private void __0x9277()
		{
			if( EditorAPI.ClosingApplication )
			{
				foreach( var __0x9240 in __0x9008.Values.ToArray() )
				{
					try
					{
						__0x9240.downloadingClient?.CancelAsync();
					}
					catch { }
				}
			}
		}

		public void NeedSelectPackage( string packageId, bool install )
		{
			__0x9009 = packageId;
			__0x9010 = install;
		}

		void __0x9278()
		{
#if !DEPLOY
			var __0x9166 = EngineApp.GetSystemTime();

			var __0x9167 = new ESet<ContentBrowser.Item>( __0x9203.GetVisibleItemsByListView() );

			foreach( var __0x9241 in __0x9203.GetAllItemsByItemHierarchy( true ) )
			{
				var __0x9168 = __0x9241 as ContentBrowserItem_StoreItem;
				if( __0x9168 != null )
				{
					if( __0x9167.Contains( __0x9168 ) )
					{
						var __0x9169 = GetPackage( __0x9168.packageId, false );

						if( __0x9169 != null && !string.IsNullOrEmpty( __0x9169.Thumbnail ) )
						{
							var __0x9170 = StoreManager.ImageManager.GetSquareImage( __0x9169.Thumbnail, __0x9166 );
							if( __0x9170 != null )
							{
								var __0x9171 = __0x9279( __0x9168.packageId );

								
								if( __0x9171.Installed )
								{
									__0x9168.stateProgress = 1;
									__0x9168.stateColor = Color.FromArgb( 0, 255, 0 );
								}
								else if( __0x9171.Downloading )
								{
									__0x9168.stateProgress = __0x9171.downloadProgress;
									__0x9168.stateColor = Color.FromArgb( 255, 255, 0 );
								}
								else if( __0x9171.Downloaded )
								{
									__0x9168.stateProgress = 1;
									__0x9168.stateColor = Color.FromArgb( 255, 255, 0 );
								}
								else
								{
									__0x9168.stateProgress = 0;
									__0x9168.stateColor = Color.FromArgb( 0, 0, 0, 0 );
								}

								
								if( __0x9168.createdImage == null || __0x9168.stateProgress != __0x9168.createdImageStateProgress || __0x9168.stateColor != __0x9168.createdImageStateColor )
								{
									__0x9168.createdImage = new Bitmap( __0x9170.Width, __0x9170.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb );
									__0x9168.createdImageStateProgress = __0x9168.stateProgress;
									__0x9168.createdImageStateColor = __0x9168.stateColor;

									using( var __0x9172 = Graphics.FromImage( __0x9168.createdImage ) )
									{
										__0x9172.CompositingMode = CompositingMode.SourceOver;
										__0x9172.DrawImage( __0x9170, 0, 0 );

										if( __0x9168.createdImageStateProgress > 0 && __0x9168.createdImageStateColor.A > 0 )
										{
											using( var __0x9173 = new SolidBrush( __0x9168.createdImageStateColor ) )
											{
												var __0x9174 = __0x9168.createdImage.Size;

												var __0x9175 = (int)( __0x9168.createdImageStateProgress * __0x9174.Width );
												var __0x9176 = (int)( 0.93 * __0x9174.Height );

												__0x9172.FillRectangle( __0x9173, 0, __0x9176, __0x9175, __0x9174.Height - __0x9176 );
											}
										}

										
										var __0x9177 = StoreManager.GetPackageStore( __0x9168.packageId );
										if( __0x9177 != null )
										{
											var __0x9178 = __0x9177.Icon32;
											var __0x9179 = __0x9168.createdImage.Width / 7;
											__0x9172.DrawImage( __0x9178, new System.Drawing.RectangleF( __0x9179 / 6, __0x9179 / 6, __0x9179, __0x9179 ), new System.Drawing.RectangleF( 0, 0, __0x9178.Width, __0x9178.Height ), GraphicsUnit.Pixel );
										}

										
										if( __0x9169.CostNumber > 0 )
										{
											var __0x9180 = Properties.Resources.Money_32;
											var __0x9181 = __0x9168.createdImage.Width / 7;
											__0x9172.DrawImage( __0x9180, new System.Drawing.RectangleF( __0x9168.createdImage.Width - __0x9181, __0x9181 / 6, __0x9181, __0x9181 ), new System.Drawing.RectangleF( 0, 0, __0x9180.Width, __0x9180.Height ), GraphicsUnit.Pixel );
										}
									}

									__0x9168.imageKey = null;
									__0x9168.image = __0x9168.createdImage;

									
									__0x9203.needUpdateImages = true;
								}

								
								__0x9168.createdImageLastUsedTime = __0x9166;
							}
						}
					}
					else
					{
						
						if( __0x9168.createdImage != null && __0x9168.createdImageLastUsedTime + 10 < __0x9166 )
						{
							__0x9168.imageKey = null;
							__0x9168.image = null;
							__0x9168.createdImage?.Dispose();
							__0x9168.createdImage = null;

							__0x9168.imageKey = "Default_512";

							
							__0x9203.needUpdateImages = true;
						}
					}
				}
			}
#endif
		}

		PackageState __0x9279( string __0x9348 )
		{
			PackageState __0x9182 = null;
			lock( __0x9008 )
			{
				if( !__0x9008.TryGetValue( __0x9348, out __0x9182 ) )
				{
					__0x9182 = new PackageState();
					__0x9182.storesWindow = this;
					__0x9182.packageId = __0x9348;
					__0x9008[ __0x9348 ] = __0x9182;
				}
			}
			return __0x9182;
		}

		public PackageManager.PackageInfo GetPackage( string packageId, bool updateDownloadedPackages, bool needDetailedInfo = false )
		{
			PackageManager.PackageInfo __0x9183 = null;

			
			{
				var __0x9184 = PackageManager.GetPackagesInfoByFileArchives( updateDownloadedPackages );
				if( __0x9184.TryGetValue( packageId, out var package ) )
					__0x9183 = package;

				__0x9183?.UpdateDataFromArchive();
			}

			
			

			
			{
				var __0x9185 = StoreManager.GetPackageInfo( packageId, needDetailedInfo );
				if( __0x9185 != null )
				{
					if( __0x9183 != null )
						__0x9183 = PackageManager.PackageInfo.Merge( __0x9185, __0x9183 );
					else
						__0x9183 = __0x9185;
				}
			}

			return __0x9183;
		}

		bool __0x9280( string[] __0x9349, PackageManager.PackageInfo __0x9350 )
		{
			if( __0x9349.Length != 0 )
			{
				foreach( var __0x9242 in __0x9349 )
				{
					if( !__0x9350.Title.ToLower().Contains( __0x9242 ) )
						return false;
				}

				
				
				
				
				
				
				
				
				
				
				
			}

			return true;
		}

		public ESet<string> GetAllPackages( bool updateDownloadedPackages )
		{
			var __0x9186 = new ESet<string>();

			
			
			

			
			foreach( var __0x9243 in StoreManager.GetPackages() )
				__0x9186.AddWithCheckAlreadyContained( __0x9243 );


			

			var __0x9187 = __0x9268();
			var __0x9188 = __0x9187.Split( ' ' );

			foreach( var __0x9244 in PackageManager.GetPackagesInfoByFileArchives( updateDownloadedPackages ).Keys )
			{
				var __0x9189 = GetPackage( __0x9244, false );

				if( __0x9189 != null )
				{
					if( !__0x9280( __0x9188, __0x9189 ) )
						continue;

					if( __0x9003 != null )
					{
						var __0x9190 = __0x9189.Store ?? StoreManager.Stores[ 0 ];
						if( __0x9003 != __0x9190 )
							continue;
					}
				}

				__0x9186.AddWithCheckAlreadyContained( __0x9244 );
			}

			return __0x9186;
		}

		public StoreManager.StoreItem GetSelectedStore()
		{
			var __0x9191 = __0x9003;
			
			
			return __0x9191;
		}

		void __0x9281()
		{
			var __0x9192 = new List<StoreManager.StoreItem>();

			

			var __0x9193 = __0x9203.GetItemsByListView().Where( __0x9351 => __0x9351 is ContentBrowserItem_StoreItem ).Cast<ContentBrowserItem_StoreItem>();
			var __0x9194 = new ESet<ContentBrowser.Item>( __0x9203.GetVisibleItemsByListView() );

			
			for( int __0x9195 = 0; __0x9195 < StoreManager.Stores.Count; __0x9195++ )
			{
				var __0x9196 = StoreManager.Stores[ __0x9195 ];

				
				foreach( var __0x9245 in __0x9193.Reverse() )
				{
					
					var __0x9197 = StoreManager.GetPackageStore( __0x9245.packageId );
					if( __0x9196 == __0x9197 )
					{
						
						if( __0x9194.Contains( __0x9245 ) )
							__0x9192.Add( __0x9196 );

						break;
					}
				}
			}

			lock( StoreManager.needGetNextItemsForStores )
			{
				StoreManager.needGetNextItemsForStores.Clear();
				StoreManager.needGetNextItemsForStores.AddRange( __0x9192 );
			}
		}

		private void __0x9282( object __0x9352, EventArgs __0x9353 )
		{
			

			var __0x9198 = __0x9014.Clone();

			var __0x9199 = new SpecifyParametersForm( "Filters", __0x9198 );
			__0x9199.Size = new Size( __0x9199.Size.Width, (int)( (double)__0x9199.Size.Height * 1.3 ) );

			if( __0x9199.ShowDialog() != DialogResult.OK )
				return;

			if( !__0x9014.Equals( __0x9198 ) )
			{
				__0x9014 = __0x9198;

				__0x9006 = true;
				__0x9007 = true;
				__0x9005 = EngineApp.GetSystemTime();
			}
		}

		[Browsable( false )]
		public StoreManager.FilterSettingsClass FilterSettings
		{
			get { return __0x9014; }
		}

	}
}


namespace NeoAxis.Editor
{
	partial class StoresWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x9200 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x9200 != null ) )
			{
				__0x9200.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x9283()
		{
			this.__0x9200 = new System.ComponentModel.Container();
			this.__0x9201 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x9204 = new System.Windows.Forms.ToolStripButton();
			this.__0x9205 = new System.Windows.Forms.ToolStripButton();
			this.__0x9206 = new System.Windows.Forms.ToolStripButton();
			this.__0x9207 = new System.Windows.Forms.ToolStripButton();
			this.__0x9208 = new NeoAxis.Editor.ToolStripTextBoxHost();
			this.__0x9202 = new System.Windows.Forms.Timer( this.__0x9200 );
			this.__0x9203 = new NeoAxis.Editor.ContentBrowser();
			
			this.__0x9201.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x9201.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x9201.ImageScalingSize = new System.Drawing.Size( 20, 20 );
			this.__0x9201.Items.AddRange( new System.Windows.Forms.ToolStripItem[] {
			this.__0x9204,
			this.__0x9205,
			this.__0x9206,
			this.__0x9207,
			this.__0x9208} );
			this.__0x9201.Location = new System.Drawing.Point( 0, 0 );
			this.__0x9201.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x9201.Name = "toolStripForTreeView";
			this.__0x9201.ShowItemToolTips = false;
			this.__0x9201.CanOverflow = false;
			this.__0x9201.AutoSize = false;
			this.__0x9201.Size = new System.Drawing.Size( 511, 26 );
			this.__0x9201.TabIndex = 3;
			this.__0x9201.Text = "toolStrip1";
			
			
			
			this.__0x9204.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9204.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x9204.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9204.Name = "toolStripButtonOptions";
			this.__0x9204.AutoSize = false;
			this.__0x9204.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9204.Text = "Options";
			this.__0x9204.Click += new System.EventHandler( this.__0x9257 );
			
			
			
			this.__0x9205.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9205.Image = global::NeoAxis.Properties.Resources.Refresh_16;
			this.__0x9205.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9205.Name = "toolStripButtonRefresh";
			this.__0x9205.AutoSize = false;
			this.__0x9205.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9205.Text = "Refresh";
			this.__0x9205.Click += new System.EventHandler( this.__0x9258 );
			
			
			
			this.__0x9206.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9206.Image = global::NeoAxis.Properties.Resources.Selection_16;
			this.__0x9206.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9206.Name = "toolStripButtonStores";
			this.__0x9206.AutoSize = false;
			this.__0x9206.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9206.Text = "Stores";
			this.__0x9206.Click += new System.EventHandler( this.__0x9256 );
			
			
			
			this.__0x9207.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9207.Image = global::NeoAxis.Properties.Resources.Filter_32;
			this.__0x9207.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9207.Name = "toolStripButtonFilter";
			this.__0x9207.AutoSize = false;
			this.__0x9207.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9207.Text = "Filter";
			this.__0x9207.Click += new System.EventHandler( this.__0x9282 );
			
			
			
			this.__0x9208.Font = new System.Drawing.Font( "Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ( (byte)( 204 ) ) );
			this.__0x9208.Name = "toolStripButtonSearch";
			this.__0x9208.AutoSize = false;
			this.__0x9208.Size = new System.Drawing.Size( 106, 22 );
			this.__0x9208.Text = "";
			this.__0x9208.ToolTipText = "Search";
			
			
			
			this.__0x9202.Tick += new System.EventHandler( this.__0x9254 );
			
			
			
			this.__0x9203.CanSelectObjectSettings = false;
			this.__0x9203.Dock = System.Windows.Forms.DockStyle.None;
			this.__0x9203.FilteringMode = null;
			this.__0x9203.Location = new System.Drawing.Point( 0, 0 );
			this.__0x9203.Margin = new System.Windows.Forms.Padding( 5, 4, 5, 4 );
			this.__0x9203.Mode = ContentBrowser.ModeEnum.Objects;
			this.__0x9203.MultiSelect = true;
			this.__0x9203.Name = "contentBrowser1";
			this.__0x9203.ReadOnlyHierarchy = false;
			this.__0x9203.Size = new System.Drawing.Size( 416, 596 );
			this.__0x9203.TabIndex = 0;
			this.__0x9203.ThisIsSettingsWindow = false;
			this.__0x9203.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x9203.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add( this.__0x9201 );
			this.Controls.Add( this.__0x9203 );
			this.Margin = new System.Windows.Forms.Padding( 5, 4, 5, 4 );
			this.Name = "StoresWindow";
			this.Size = new System.Drawing.Size( 416, 596 );
			this.WindowTitle = "Stores";
			this.Load += new System.EventHandler( this.__0x9248 );
			this.__0x9201.ResumeLayout( false );
			this.__0x9201.PerformLayout();
			this.ResumeLayout( false );
			this.PerformLayout();
		}

		#endregion

		private NeoAxis.Editor.EngineToolStrip __0x9201;
		private System.Windows.Forms.Timer __0x9202;
		private ContentBrowser __0x9203;
		
		private System.Windows.Forms.ToolStripButton __0x9204;
		private System.Windows.Forms.ToolStripButton __0x9205;
		private System.Windows.Forms.ToolStripButton __0x9206;
		private System.Windows.Forms.ToolStripButton __0x9207;
		private NeoAxis.Editor.ToolStripTextBoxHost __0x9208;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Object implemetation of <see cref="TransformTool"/>.
	/// </summary>
	public abstract class TransformToolObject
	{
		object __0x9354;
		

		

		protected TransformToolObject( object controlledObject )
		{
			this.__0x9354 = controlledObject;
		}

		public object ControlledObject { get { return __0x9354; } }
		

		public virtual bool IsAllowMove() { return false; }
		public virtual bool IsAllowRotate() { return false; }
		public virtual bool IsAllowScale() { return false; }

		public abstract Vector3 Position { get; set; }
		public abstract Quaternion Rotation { get; set; }
		public abstract Vector3 Scale { get; set; }

		
		
		
		

		public virtual void OnModifyBegin() { }
		public virtual void OnModifyCommit() { }
		public virtual void OnModifyCancel() { }
		
		
		
	}

	

	/// <summary>
	/// Config for <see cref="TransformTool"/>.
	/// </summary>
	public static class TransformToolConfig
	{
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		[EngineConfig( "TransformTool", "moveObjectsDuringRotation" )]
		public static bool moveObjectsDuringRotation = true;
		[EngineConfig( "TransformTool", "moveObjectsDuringScaling" )]
		public static bool moveObjectsDuringScaling;

		
		
		
		
		
		
		
		
	}

	

	/// <summary>
	/// A tool for editing the transformation of objects.
	/// </summary>
	public partial class TransformTool
	{
		EngineViewportControl __0x9355;

		List<TransformToolObject> __0x9356 = new List<TransformToolObject>();
		ModeEnum __0x9357;
		CoordinateSystemModeEnum __0x9358 = CoordinateSystemModeEnum.World;
		ModeClass[] __0x9359 = new ModeClass[ 6 ];

		bool __0x9360 = true;

		static Cursor __0x9361;
		static Cursor __0x9362;
		static Cursor __0x9363;

		

		/// <summary>
		/// Defines the position in space of an object for <see cref="TransformTool"/>.
		/// </summary>
		public struct TransformOfObject
		{
			public Vector3 position;
			public Quaternion rotation;
			public Vector3 scale;

			public TransformOfObject( Vector3 position, Quaternion rotation, Vector3 scale )
			{
				this.position = position;
				this.rotation = rotation;
				this.scale = scale;
			}
		}

		

		public TransformTool( EngineViewportControl viewportControl )
		{
			this.__0x9355 = viewportControl;
			viewportControl.TransformTool = this;

			__0x9359[ 0 ] = new ModeClass();
			__0x9359[ 1 ] = new __0x10116();
			__0x9359[ 2 ] = new __0x10122();
			__0x9359[ 3 ] = new __0x10119();
			__0x9359[ 4 ] = new __0x10123();
			__0x9359[ 5 ] = new ModeClass();
			foreach( var __0x10032 in __0x9359 )
				__0x10032.owner = this;

			Mode = ModeEnum.None;

			try
			{
				if( __0x9361 == null )
				{
					var __0x9364 = PlatformFunctionality.Instance.GetSystemCursorByFileName( @"Base\UI\Cursors\Move.cur" );
					if( __0x9364 != IntPtr.Zero )
						__0x9361 = new Cursor( __0x9364 );
					else
						__0x9361 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.MoveCursor ) );
				}

				if( __0x9362 == null )
				{
					var __0x9365 = PlatformFunctionality.Instance.GetSystemCursorByFileName( @"Base\UI\Cursors\Rotate.cur" );
					if( __0x9365 != IntPtr.Zero )
						__0x9362 = new Cursor( __0x9365 );
					else
						__0x9362 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.RotateCursor ) );
				}

				if( __0x9363 == null )
				{
					var __0x9366 = PlatformFunctionality.Instance.GetSystemCursorByFileName( @"Base\UI\Cursors\Scale.cur" );
					if( __0x9366 != IntPtr.Zero )
						__0x9363 = new Cursor( __0x9366 );
					else
						__0x9363 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.ScaleCursor ) );
				}
			}
			catch { }
		}

		

		static double ArrowPixelSize
		{
			get { return (double)ProjectSettings.Get.SceneEditor.TransformToolSizeScaled; }
		}

		static double SelectNearPixels
		{
			get { return ArrowPixelSize * .07f; }
		}

		
		
		
		

		

		public enum ModeEnum
		{
			None,
			Position,
			Rotation,
			PositionRotation,
			Scale,
			Undefined
		}

		

		public enum CoordinateSystemModeEnum
		{
			World,
			Local
		}

		

		public class ModeClass
		{
			internal TransformTool owner;

			protected Vector2 modifyStartPos;
			protected bool modify_Prepare;
			protected bool modify_Activated;
			protected Screen cursorTransitionOnScreenBorderScreen;
			protected Vector2 cursorTransitionOnScreenBorderOffset;

			public TransformTool Owner
			{
				get { return owner; }
			}

			
			public EngineViewportControl ViewportControl
			{
				get { return owner.ViewportControl; }
			}
			public Viewport Viewport
			{
				get { return owner.ViewportControl.Viewport; }
			}
			public Viewport.CameraSettingsClass CameraSettings
			{
				get { return owner.__0x9355.Viewport.CameraSettings; }
			}
			public Simple3DRenderer DebugGeometry
			{
				get { return owner.__0x9355.Viewport.Simple3DRenderer; }
			}

			public virtual bool OnKeyDown( KeyEvent e )
			{
				if( e.Key == EKeys.Escape && modify_Prepare )
				{
					OnCancelModify();
					return true;
				}
				return false;
			}

			public virtual bool OnKeyUp( KeyEvent e ) { return false; }

			public virtual bool OnMouseDown( EMouseButtons button )
			{
				if( button == EMouseButtons.Left && Owner.Objects.Count != 0 )
				{
					if( OnTryBeginModify() )
					{
						modify_Prepare = true;
						modifyStartPos = Viewport.MousePosition;
						return true;
					}
				}

				return false;
			}

			public virtual void OnUpdateInitialObjectsTransform() { }

			public virtual bool OnMouseUp( EMouseButtons button )
			{
				if( button == EMouseButtons.Left && modify_Prepare )
				{
					OnCommitModify();
					return true;
				}

				if( button == EMouseButtons.Right && modify_Prepare )
				{
					OnCancelModify();
					return true;
				}

				return false;
			}

			public virtual bool OnMouseDoubleClick( EMouseButtons button ) { return false; }

			public virtual void OnMouseMove( Vector2 mouse )
			{
				if( modify_Prepare && !modify_Activated )
				{
					Vector2 __0x9367 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					Vector2 __0x9368 = ( mouse - modifyStartPos ) * __0x9367;
					if( Math.Abs( __0x9368.X ) >= 3 || Math.Abs( __0x9368.Y ) >= 3 )
					{
						

						ViewportControl.Capture = true;

						modify_Activated = true;
						cursorTransitionOnScreenBorderScreen = Screen.FromPoint( Cursor.Position );
						cursorTransitionOnScreenBorderOffset = Vector2.Zero;

						if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
							Owner.__0x10054();

						Owner.__0x10048();
					}
				}
			}

			public virtual void OnTick( double delta ) { }
			public virtual bool OnIsMouseOverAxisToActivation() { return false; }
			public virtual void OnRender() { }
			public virtual void OnRenderUI() { }

			public bool IsMouseNearLine( Vector3 start, Vector3 end, out Vector2 projectedScreenPointInPixels, out Radian projectedScreenAngle, out double distance )
			{
				projectedScreenPointInPixels = Vector2.Zero;
				projectedScreenAngle = 0;
				distance = 0;

				Vector2 __0x9369 = Viewport.SizeInPixels.ToVector2();
				Vector2 __0x9370 = Viewport.MousePosition * __0x9369;

				Vector2 __0x9371;
				if( !CameraSettings.ProjectToScreenCoordinates( start, out __0x9371 ) )
					return false;
				Vector2 __0x9372;
				if( !CameraSettings.ProjectToScreenCoordinates( end, out __0x9372 ) )
					return false;

				Vector2 __0x9373 = __0x9371 * __0x9369;
				Vector2 __0x9374 = __0x9372 * __0x9369;

				Rectangle __0x9375 = new Rectangle( __0x9373 );
				__0x9375.Add( __0x9374 );
				__0x9375.Expand( SelectNearPixels );

				if( !__0x9375.Contains( __0x9370 ) )
					return false;

				projectedScreenPointInPixels = MathAlgorithms.ProjectPointToLine( __0x9373, __0x9374, __0x9370 );

				
				distance = ( __0x9370 - projectedScreenPointInPixels ).Length();
				if( distance > SelectNearPixels )
					return false;

				Vector2 __0x9376 = __0x9374 - __0x9373;
				projectedScreenAngle = Math.Atan2( __0x9376.Y, __0x9376.X );

				return true;
			}

			public bool IsMouseNearLine( Vector3 start, Vector3 end )
			{
				return IsMouseNearLine( start, end, out _, out _, out _ );
			}

			double __0x10045( Vector2 __0x10091, Vector2 __0x10092, Vector2 __0x10093 )
			{
				return ( __0x10091.X - __0x10093.X ) * ( __0x10092.Y - __0x10093.Y ) - ( __0x10092.X - __0x10093.X ) * ( __0x10091.Y - __0x10093.Y );
			}

			bool __0x10046( Vector2 __0x10094, Vector2 __0x10095, Vector2 __0x10096, Vector2 __0x10097 )
			{
				bool __0x9377 = __0x10045( __0x10094, __0x10095, __0x10096 ) < 0;
				bool __0x9378 = __0x10045( __0x10094, __0x10096, __0x10097 ) < 0;
				bool __0x9379 = __0x10045( __0x10094, __0x10097, __0x10095 ) < 0;
				return ( ( __0x9377 == __0x9378 ) && ( __0x9378 == __0x9379 ) );
			}

			public bool IsMouseOverTriangle( Vector3 p1, Vector3 p2, Vector3 p3 )
			{
				Vector2 __0x9380;
				if( !CameraSettings.ProjectToScreenCoordinates( p1, out __0x9380 ) )
					return false;
				Vector2 __0x9381;
				if( !CameraSettings.ProjectToScreenCoordinates( p2, out __0x9381 ) )
					return false;
				Vector2 __0x9382;
				if( !CameraSettings.ProjectToScreenCoordinates( p3, out __0x9382 ) )
					return false;

				Vector2 __0x9383 = Viewport.MousePosition;
				return __0x10046( __0x9383, __0x9380, __0x9381, __0x9382 );
			}

			public double GetSize()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				return DebugGeometry.GetThicknessByPixelSize( Owner.__0x10047(), ArrowPixelSize );
			}

			protected virtual bool OnTryBeginModify() { return false; }

			protected virtual void OnCommitModify()
			{
				bool __0x9384 = modify_Activated;

				if( modify_Activated )
					ViewportControl.Capture = false;

				modify_Activated = false;
				modify_Prepare = false;

				if( __0x9384 )
					Owner.__0x10049();
			}

			internal protected virtual void OnCancelModify()
			{
				bool __0x9385 = modify_Activated;

				if( modify_Activated )
					ViewportControl.Capture = false;

				modify_Activated = false;
				modify_Prepare = false;

				if( __0x9385 )
					Owner.__0x10050();
			}

			public bool Modify_Activated
			{
				get { return modify_Activated; }
			}

			internal protected virtual bool OnMouseOverAxis() { return false; }

			protected void UpdateCursorTransitionOnScreenBorder()
			{
				System.Drawing.Point __0x9386 = Cursor.Position;
				Vector2I __0x9387 = new Vector2I( __0x9386.X, __0x9386.Y );

				System.Drawing.Rectangle __0x9388 = cursorTransitionOnScreenBorderScreen.Bounds;
				RectangleI __0x9389 = new RectangleI( __0x9388.Left, __0x9388.Top, __0x9388.Right, __0x9388.Bottom );

				if( __0x9387.X < __0x9389.Left + 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9389.Right - 6, __0x9387.Y );
					cursorTransitionOnScreenBorderOffset -= new Vector2( __0x9389.Size.X, 0 );
				}
				if( __0x9387.X > __0x9389.Right - 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9389.Left + 6, __0x9387.Y );
					cursorTransitionOnScreenBorderOffset += new Vector2( __0x9389.Size.X, 0 );
				}
				if( __0x9387.Y < __0x9389.Top + 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9387.X, __0x9389.Bottom - 6 );
					cursorTransitionOnScreenBorderOffset -= new Vector2( 0, __0x9389.Size.Y );
				}
				if( __0x9387.Y > __0x9389.Bottom - 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9387.X, __0x9389.Top + 6 );
					cursorTransitionOnScreenBorderOffset += new Vector2( 0, __0x9389.Size.Y );
				}
			}

			protected double GetLineWorldThickness( Vector3 position )
			{
				return DebugGeometry.GetThicknessByPixelSize( position, ProjectSettings.Get.SceneEditor.TransformToolLineThicknessScaled );
			}

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			protected void AddLine( Vector3 start, Vector3 end, double thickness, double drawShadowsFactor )
			{
				
				
				

				if( thickness != 0 )
				{
					

					Vector3 __0x9390 = start;
					Vector3 __0x9391 = end;
					double __0x9392 = thickness;
					if( drawShadowsFactor != 0 )
					{
						

						double __0x9393 = ( end - start ).Length();
						__0x9393 -= __0x9392;
						
						__0x9392 *= 2.7 * drawShadowsFactor;
															  
															  

						var __0x9394 = ( end + start ) / 2;
						__0x9390 = __0x9394 + ( start - __0x9394 ).GetNormalize() * __0x9393 / 2;
						__0x9391 = __0x9394 + ( end - __0x9394 ).GetNormalize() * __0x9393 / 2;
					}

					Viewport.Simple3DRenderer.AddLine( __0x9390, __0x9391, __0x9392 );
				}
				else
					Viewport.Simple3DRenderer.AddLine( start, end );
			}

			protected void AddCone( Vector3 from, Vector3 to, double radius, double lineThickness, double drawShadowsFactor )
			{
				Vector3 __0x9395 = from;
				Vector3 __0x9396 = to;
				double __0x9397 = radius;
				if( drawShadowsFactor != 0 )
				{
					Vector3 __0x9398 = ( __0x9396 - __0x9395 ).GetNormalize();
					__0x9395 -= __0x9398 * lineThickness * 0.4 * drawShadowsFactor;
					__0x9396 += __0x9398 * lineThickness * 3 * drawShadowsFactor;
					__0x9397 += lineThickness * 1.5f * drawShadowsFactor;
				}

				double __0x9399 = ( __0x9396 - __0x9395 ).Length();
				Matrix4 __0x9400 = new Matrix4( Quaternion.FromDirectionZAxisUp( __0x9396 - __0x9395 ).ToMatrix3(), __0x9395 );
				DebugGeometry.AddCone( __0x9400, 0, SimpleMeshGenerator.ConeOrigin.Bottom, __0x9397, __0x9399, 32, 32, true );

				

				
				
				
				

				
				

				
				
				

				
				
				

				
			}

			protected void AddSphere( Sphere sphere, double lineThickness, double drawShadowsFactor )
			{
				double __0x9401 = sphere.Radius;
				if( drawShadowsFactor != 0 )
					__0x9401 += lineThickness * drawShadowsFactor;

				DebugGeometry.AddSphere( sphere.Center, __0x9401, 32, true );

				
				
				

				
				
			}

			protected void AddPolygonalChain( Vector3[] points, double radius, double drawShadowsFactor )
			{
				if( points.Length < 2 )
					return;

				double __0x9402 = radius;
				if( drawShadowsFactor != 0 )
					__0x9402 *= 2.5 * drawShadowsFactor;

				Vector3 __0x9403 = Vector3.Zero;
				foreach( Vector3 __0x10033 in points )
					__0x9403 += __0x10033;
				__0x9403 /= points.Length;

				Vector3[] __0x9404 = new Vector3[ points.Length ];
				for( int __0x9405 = 0; __0x9405 < points.Length; __0x9405++ )
					__0x9404[ __0x9405 ] = points[ __0x9405 ] - __0x9403;

				Vector3[] __0x9406;
				int[] __0x9407;
				SimpleMeshGenerator.GeneratePolygonalChain( __0x9404, __0x9402, out __0x9406, out __0x9407 );

				Matrix4 __0x9408 = Matrix4.FromTranslate( __0x9403 );
				DebugGeometry.AddTriangles( __0x9406, __0x9407, __0x9408, false, true );

				
				
				
				
				
				
			}

			public double GetFontSize()
			{
				double __0x9409 = 14.0;
				if( SystemSettings.CurrentPlatform == SystemSettings.Platform.Windows )
				{
					try
					{
						__0x9409 *= DpiHelper.Default.DpiScaleFactor;
					}
					catch { }
				}
				__0x9409 = (int)__0x9409;

				var __0x9410 = ViewportControl.Viewport.CanvasRenderer;

				int __0x9411 = __0x9410.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
				float __0x9412 = (float)__0x9409 / (float)__0x9411;
				float __0x9413 = __0x9412;

				return __0x9413;
			}

			protected void AddTextWithShadow( CanvasRenderer renderer, string text, Vector2 position, EHorizontalAlignment horizontalAlign,
				EVerticalAlignment verticalAlign, ColorValue color, double shadowOffsetInPixels )
			{
				Vector2 __0x9414 = shadowOffsetInPixels / Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
				renderer.AddText( null, GetFontSize(), text, position + __0x9414, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2.5f ) );
				renderer.AddText( null, GetFontSize(), text, position, horizontalAlign, verticalAlign, color );
			}
		}

		

		public EngineViewportControl ViewportControl
		{
			get { return __0x9355; }
		}

		public ModeEnum Mode
		{
			get { return __0x9357; }
			set
			{
				if( Modifying )
					return;
				if( __0x9357 == value )
					return;
				__0x9357 = value;

				ModeChanged?.Invoke( this, new EventArgs() );
			}
		}

		public CoordinateSystemModeEnum CoordinateSystemMode
		{
			get { return __0x9358; }
			set
			{
				if( __0x9358 == value )
					return;
				__0x9358 = value;

				
				ModeChanged?.Invoke( this, new EventArgs() );
			}
		}

		
		public event System.EventHandler ModeChanged;

		public List<TransformToolObject> Objects
		{
			get { return __0x9356; }
		}

		
		
		public void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9359[ (int)__0x9357 ].OnKeyDown( e ) )
				handled = true;
		}

		
		public void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9359[ (int)__0x9357 ].OnKeyUp( e ) )
				handled = true;
		}

		public void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9359[ (int)__0x9357 ].OnMouseDown( button ) )
				handled = true;
		}

		public void PerformUpdateInitialObjectsTransform()
		{
			if( !Active )
				return;
			__0x9359[ (int)__0x9357 ].OnUpdateInitialObjectsTransform();
		}

		public void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9359[ (int)__0x9357 ].OnMouseUp( button ) )
				handled = true;
		}

		public void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9359[ (int)__0x9357 ].OnMouseDoubleClick( button ) )
				handled = true;
		}

		public void PerformMouseMove( Vector2 mouse )
		{
			if( Active )
				__0x9359[ (int)__0x9357 ].OnMouseMove( mouse );
		}

		public void PerformTick( double delta )
		{
			if( Active )
				__0x9359[ (int)__0x9357 ].OnTick( delta );
		}

		public bool IsMouseOverAxisToActivation()
		{
			if( Active )
				return __0x9359[ (int)__0x9357 ].OnIsMouseOverAxisToActivation();
			return false;
		}

		public void PerformRender()
		{
			if( Active )
				__0x9359[ (int)__0x9357 ].OnRender();
		}

		public void PerformOnRenderUI()
		{
			if( Active )
				__0x9359[ (int)__0x9357 ].OnRenderUI();
		}

		Vector3 __0x10047()
		{
			Trace.Assert( Objects.Count != 0 );
			Vector3 __0x9415 = Vector3.Zero;
			foreach( TransformToolObject __0x10034 in Objects )
				__0x9415 += __0x10034.Position;
			__0x9415 = __0x9415 / (double)Objects.Count;

			
			Plane __0x9416 = __0x9355.Viewport.CameraSettings.Frustum.Planes[ 0 ];
			double __0x9417 = __0x9416.GetDistance( __0x9415 );
			if( __0x9417 > 0 && __0x9417 < .1f )
				__0x9415 += __0x9416.Normal * ( .1f - __0x9417 );

			return __0x9415;
		}

		
		
		

		
		
		
		
		
		
		
		

		public delegate void ChangeMofidyStateDelegate( TransformTool __0x10098 );
		public event ChangeMofidyStateDelegate ModifyBegin;
		public event ChangeMofidyStateDelegate ModifyCommit;
		public event ChangeMofidyStateDelegate ModifyCancel;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyBegin;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyCommit;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyCancel;

		void __0x10048()
		{
			foreach( TransformToolObject __0x10035 in Objects )
				__0x10035.OnModifyBegin();

			ModifyBegin?.Invoke( this );
			AllInstances_ModifyBegin?.Invoke( this );
		}

		void __0x10049()
		{
			foreach( TransformToolObject __0x10036 in Objects )
				__0x10036.OnModifyCommit();

			ModifyCommit?.Invoke( this );
			AllInstances_ModifyCommit?.Invoke( this );
		}

		void __0x10050()
		{
			foreach( TransformToolObject __0x10037 in Objects )
				__0x10037.OnModifyCancel();

			ModifyCancel?.Invoke( this );
			AllInstances_ModifyCancel?.Invoke( this );
		}

		double __0x10051()
		{
			if( __0x9355.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditor.SceneEditorStepMovement;
			else
				return 0;
			
		}

		Degree __0x10052()
		{
			if( __0x9355.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditor.SceneEditorStepRotation;
			else
				return 0;
			
		}

		double __0x10053()
		{
			if( __0x9355.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditor.SceneEditorStepScaling;
			else
				return 0;
			
		}

		public delegate void CloneAndSelectObjectsDelegate();
		public event CloneAndSelectObjectsDelegate CloneAndSelectObjects;

		void __0x10054()
		{
			if( CloneAndSelectObjects != null )
				CloneAndSelectObjects();
		}

		bool __0x10055()
		{
			foreach( TransformToolObject __0x10038 in Objects )
				if( __0x10038.IsAllowMove() )
					return true;
			return false;
		}

		bool __0x10056()
		{
			foreach( TransformToolObject __0x10039 in Objects )
				if( __0x10039.IsAllowRotate() )
					return true;
			return false;
		}

		bool __0x10057()
		{
			foreach( TransformToolObject __0x10040 in Objects )
				if( __0x10040.IsAllowScale() )
					return true;
			return false;
		}

		

		public bool Active
		{
			get { return __0x9360; }
			set { __0x9360 = value; }
		}

		public bool Modifying
		{
			get
			{
				foreach( ModeClass __0x10041 in __0x9359 )
				{
					if( __0x10041.Modify_Activated )
						return true;
				}
				return false;
			}
		}

		public void DoCancelModify()
		{
			if( __0x9359[ (int)__0x9357 ].Modify_Activated )
				__0x9359[ (int)__0x9357 ].OnCancelModify();
		}

		protected virtual void OnPositionModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 positionOffset )
		{
			for( int __0x9418 = 0; __0x9418 < Objects.Count; __0x9418++ )
			{
				TransformOfObject __0x9419 = initialObjectsTransform[ __0x9418 ];
				Objects[ __0x9418 ].Position = __0x9419.position + positionOffset;
				Objects[ __0x9418 ].Rotation = __0x9419.rotation;
			}
		}

		protected virtual void OnRotationModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 modifyPosition, Quaternion rotationOffset )
		{
			for( int __0x9420 = 0; __0x9420 < Objects.Count; __0x9420++ )
			{
				TransformOfObject __0x9421 = initialObjectsTransform[ __0x9420 ];
				if( TransformToolConfig.moveObjectsDuringRotation )
				{
					Vector3 __0x9422 = __0x9421.position - modifyPosition;
					Objects[ __0x9420 ].Position = modifyPosition + __0x9422 * rotationOffset;
				}
				Objects[ __0x9420 ].Rotation = rotationOffset * __0x9421.rotation;
			}
		}

		protected virtual void OnScaleModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 modifyPosition, Vector3 scaleOffset )
		{
			for( int __0x9423 = 0; __0x9423 < Objects.Count; __0x9423++ )
			{
				if( TransformToolConfig.moveObjectsDuringScaling )
				{
					Vector3 __0x9424 = initialObjectsTransform[ __0x9423 ].position - modifyPosition;
					Objects[ __0x9423 ].Position = modifyPosition + __0x9424 * scaleOffset;
				}
				Objects[ __0x9423 ].Scale = initialObjectsTransform[ __0x9423 ].scale * scaleOffset;
			}
		}

		public bool MouseOverAxis
		{
			get { return __0x9359[ (int)__0x9357 ].OnMouseOverAxis(); }
		}

		bool SceneMode2D
		{
			get
			{
				var __0x9425 = __0x9355.Viewport.AttachedScene;
				if( __0x9425 != null )
					return __0x9425.Mode.Value == Scene.ModeEnum._2D;
				return false;
			}
		}

		
		
		

		
		
		
		
		
		
		

	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10116 : ModeClass
		{
			Vector3 __0x9426;
			Vector2 __0x9427;
			TransformOfObject[] __0x9428;
			__0x10117 __0x9429;
			string __0x9430 = "";

			

			struct __0x10117
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10117( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			

			struct __0x10118
			{
				public enum ItemType
				{
					Line,
					Cone
				}
				public ItemType type;
				public Vector3 start;
				public Vector3 end;
				public ColorValue color;
				public double coneArrowSize;

				public __0x10118( ItemType type, Vector3 start, Vector3 end, ColorValue color, double coneArrowSize )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = coneArrowSize;
				}

				public __0x10118( ItemType type, Vector3 start, Vector3 end, ColorValue color )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = 0;
				}
			}

			

			Quaternion __0x10058()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
						return Owner.Objects[ 0 ].Rotation;
				}
				return Quaternion.Identity;
			}

			__0x10117 __0x10059()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9431 = Owner.__0x10047();
				double __0x9432 = GetSize();

				if( __0x9432 == 0 )
					return new __0x10117( false, false, false );

				Quaternion __0x9433 = __0x10058();

				bool __0x9434;
				{
					Vector3 __0x9435 = __0x9431 + __0x9433 * new Vector3( __0x9432, 0, 0 );
					Vector3 __0x9436 = __0x9431 - __0x9433 * new Vector3( __0x9432, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9434 = __0x10061( __0x9435 ) < __0x10061( __0x9436 );
					else
						__0x9434 = true;
				}
				bool __0x9437;
				{
					Vector3 __0x9438 = __0x9431 + __0x9433 * new Vector3( 0, __0x9432, 0 );
					Vector3 __0x9439 = __0x9431 - __0x9433 * new Vector3( 0, __0x9432, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9437 = __0x10061( __0x9438 ) < __0x10061( __0x9439 );
					else
						__0x9437 = true;
				}
				bool __0x9440;
				{
					Vector3 __0x9441 = __0x9431 + __0x9433 * new Vector3( 0, 0, __0x9432 );
					Vector3 __0x9442 = __0x9431 - __0x9433 * new Vector3( 0, 0, __0x9432 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9440 = __0x10061( __0x9441 ) < __0x10061( __0x9442 );
					else
						__0x9440 = true;
				}
				double __0x9443 = __0x9434 ? __0x9432 : -__0x9432;
				double __0x9444 = __0x9437 ? __0x9432 : -__0x9432;
				double __0x9445 = __0x9440 ? __0x9432 : -__0x9432;

				
				Vector3 __0x9446 = __0x9431 + __0x9433 * new Vector3( __0x9443 / 2, 0, 0 );
				Vector3 __0x9447 = __0x9431 + __0x9433 * new Vector3( 0, __0x9444 / 2, 0 );
				Vector3 __0x9448 = __0x9431 + __0x9433 * new Vector3( 0, 0, __0x9445 / 2 );
				Vector3 __0x9449 = __0x9431 + __0x9433 * new Vector3( __0x9443 / 2, __0x9444 / 2, 0 );
				Vector3 __0x9450 = __0x9431 + __0x9433 * new Vector3( __0x9443 / 2, 0, __0x9445 / 2 );
				Vector3 __0x9451 = __0x9431 + __0x9433 * new Vector3( 0, __0x9444 / 2, __0x9445 / 2 );
				
				if( IsMouseOverTriangle( __0x9431, __0x9446, __0x9449 ) || IsMouseOverTriangle( __0x9449, __0x9447, __0x9431 ) )
					return new __0x10117( true, true, false );
				if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					
					if( IsMouseOverTriangle( __0x9431, __0x9446, __0x9450 ) || IsMouseOverTriangle( __0x9450, __0x9448, __0x9431 ) )
						return new __0x10117( true, false, true );
					
					if( IsMouseOverTriangle( __0x9431, __0x9447, __0x9451 ) || IsMouseOverTriangle( __0x9451, __0x9448, __0x9431 ) )
						return new __0x10117( false, true, true );
				}

				{
					double __0x9452 = double.MaxValue;
					__0x10117 __0x9453 = new __0x10117( false, false, false );

					double __0x9454;

					
					if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( __0x9432 / 5, 0, 0 ), __0x9431 + __0x9433 * new Vector3( __0x9432, 0, 0 ), out _, out _, out __0x9454 ) )
					{
						if( __0x9454 < __0x9452 )
						{
							__0x9452 = __0x9454;
							__0x9453 = new __0x10117( true, false, false );
						}
					}
					if( !__0x9434 )
					{
						if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( -__0x9432 / 5, 0, 0 ), __0x9431 + __0x9433 * new Vector3( -__0x9432, 0, 0 ), out _, out _, out __0x9454 ) )
						{
							if( __0x9454 < __0x9452 )
							{
								__0x9452 = __0x9454;
								__0x9453 = new __0x10117( true, false, false );
							}
						}
					}

					
					if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( 0, __0x9432 / 5, 0 ), __0x9431 + __0x9433 * new Vector3( 0, __0x9432, 0 ), out _, out _, out __0x9454 ) )
					{
						if( __0x9454 < __0x9452 )
						{
							__0x9452 = __0x9454;
							__0x9453 = new __0x10117( false, true, false );
						}
					}

					if( !__0x9437 )
					{
						if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( 0, -__0x9432 / 5, 0 ), __0x9431 + __0x9433 * new Vector3( 0, -__0x9432, 0 ), out _, out _, out __0x9454 ) )
						{
							if( __0x9454 < __0x9452 )
							{
								__0x9452 = __0x9454;
								__0x9453 = new __0x10117( false, true, false );
							}
						}
					}

					
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( 0, 0, __0x9432 / 5 ), __0x9431 + __0x9433 * new Vector3( 0, 0, __0x9432 ), out _, out _, out __0x9454 ) )
						{
							if( __0x9454 < __0x9452 )
							{
								__0x9452 = __0x9454;
								__0x9453 = new __0x10117( false, false, true );
							}
						}

						if( !__0x9440 )
						{
							if( IsMouseNearLine( __0x9431 + __0x9433 * new Vector3( 0, 0, -__0x9432 / 5 ), __0x9431 + __0x9433 * new Vector3( 0, 0, -__0x9432 ), out _, out _, out __0x9454 ) )
							{
								if( __0x9454 < __0x9452 )
								{
									__0x9452 = __0x9454;
									__0x9453 = new __0x10117( false, false, true );
								}
							}
						}
					}

					if( __0x9453.TrueCount != 0 )
						return __0x9453;
				}


				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				

				return new __0x10117( false, false, false );
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10055() )
					return false;
				__0x10117 __0x9455 = __0x10059();
				return __0x9455.TrueCount != 0;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10055() )
					return false;

				__0x10117 __0x9456 = __0x10059();
				if( __0x9456.TrueCount != 0 )
				{
					__0x9426 = Owner.__0x10047();
					Vector2 __0x9457;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9426, out __0x9457 ) )
					{
						__0x9427 = Viewport.MousePosition - __0x9457;
						__0x9429 = __0x9456;
						__0x9430 = "";
						__0x9428 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9458 = 0; __0x9458 < Owner.Objects.Count; __0x9458++ )
						{
							TransformToolObject __0x9459 = Owner.Objects[ __0x9458 ];
							__0x9428[ __0x9458 ] = new TransformOfObject( __0x9459.Position, __0x9459.Rotation, __0x9459.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9428 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9460 = 0; __0x9460 < Owner.Objects.Count; __0x9460++ )
				{
					TransformToolObject __0x9461 = Owner.Objects[ __0x9460 ];
					__0x9428[ __0x9460 ] = new TransformOfObject( __0x9461.Position, __0x9461.Rotation, __0x9461.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9428 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10060();
				__0x9428 = null;
			}

			void __0x10060()
			{
				if( __0x9428 != null && Owner.Objects.Count == __0x9428.Length )
				{
					for( int __0x9462 = 0; __0x9462 < Owner.Objects.Count; __0x9462++ )
					{
						Owner.Objects[ __0x9462 ].Position = __0x9428[ __0x9462 ].position;
						Owner.Objects[ __0x9462 ].Rotation = __0x9428[ __0x9462 ].rotation;
					}
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !Viewport.MouseRelativeMode )
				{
					Vector2 __0x9463 = Viewport.MousePosition - __0x9427;
					Ray __0x9464 = CameraSettings.GetRayByScreenCoordinates( __0x9463 );

					if( !double.IsNaN( __0x9464.Direction.X ) )
					{
						Quaternion __0x9465 = __0x10058();

						Plane __0x9466 = Plane.FromVectors( __0x9465 * new Vector3( 0, 1, 0 ),
							__0x9465 * new Vector3( 0, 0, 1 ), __0x9426 );
						Plane __0x9467 = Plane.FromVectors( __0x9465 * new Vector3( 1, 0, 0 ),
							__0x9465 * new Vector3( 0, 0, 1 ), __0x9426 );
						Plane __0x9468 = Plane.FromVectors( __0x9465 * new Vector3( 1, 0, 0 ),
							__0x9465 * new Vector3( 0, 1, 0 ), __0x9426 );

						Vector3 __0x9469 = Vector3.Zero;

						if( __0x9429.x && __0x9429.TrueCount == 1 )
						{
							double __0x9470;
							if( __0x9468.Intersects( __0x9464, out __0x9470 ) )
							{
								Vector3 __0x9471 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 1, 0, 0 ), __0x9464.GetPointOnRay( __0x9470 ) );
								__0x9469 += __0x9471 - __0x9426;
							}
						}

						if( __0x9429.y && __0x9429.TrueCount == 1 )
						{
							double __0x9472;
							if( __0x9468.Intersects( __0x9464, out __0x9472 ) )
							{
								Vector3 __0x9473 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 1, 0 ), __0x9464.GetPointOnRay( __0x9472 ) );
								__0x9469 += __0x9473 - __0x9426;
							}
						}

						if( __0x9429.z && __0x9429.TrueCount == 1 )
						{
							Vector3 __0x9474 = CameraSettings.Direction;

							bool __0x9475 = Math.Abs( CameraSettings.Direction.X ) > Math.Abs( CameraSettings.Direction.Y );
							Plane __0x9476 = __0x9475 ? __0x9466 : __0x9467;

							double __0x9477;
							if( __0x9476.Intersects( __0x9464, out __0x9477 ) )
							{
								Vector3 __0x9478 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 0, 1 ), __0x9464.GetPointOnRay( __0x9477 ) );
								__0x9469 += __0x9478 - __0x9426;
							}
						}

						if( __0x9429.x && __0x9429.y )
						{
							double __0x9479;
							if( __0x9468.Intersects( __0x9464, out __0x9479 ) )
							{
								Vector3 __0x9480 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 1, 0, 0 ), __0x9464.GetPointOnRay( __0x9479 ) );
								Vector3 __0x9481 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 1, 0 ), __0x9464.GetPointOnRay( __0x9479 ) );
								__0x9469 += __0x9480 - __0x9426;
								__0x9469 += __0x9481 - __0x9426;
							}
						}

						if( __0x9429.x && __0x9429.z )
						{
							double __0x9482;
							if( __0x9467.Intersects( __0x9464, out __0x9482 ) )
							{
								Vector3 __0x9483 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 1, 0, 0 ), __0x9464.GetPointOnRay( __0x9482 ) );
								Vector3 __0x9484 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 0, 1 ), __0x9464.GetPointOnRay( __0x9482 ) );
								__0x9469 += __0x9483 - __0x9426;
								__0x9469 += __0x9484 - __0x9426;
							}
						}

						if( __0x9429.y && __0x9429.z )
						{
							double __0x9485;
							if( __0x9466.Intersects( __0x9464, out __0x9485 ) )
							{
								Vector3 __0x9486 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 1, 0 ), __0x9464.GetPointOnRay( __0x9485 ) );
								Vector3 __0x9487 = MathAlgorithms.ProjectPointToLine( __0x9426,
									__0x9426 + __0x9465 * new Vector3( 0, 0, 1 ), __0x9464.GetPointOnRay( __0x9485 ) );
								__0x9469 += __0x9486 - __0x9426;
								__0x9469 += __0x9487 - __0x9426;
							}
						}

						
						__0x9469 *= __0x9465.GetInverse();
						double __0x9488 = Owner.__0x10051();
						if( __0x9488 != 0 )
						{
							Vector3 __0x9489 = __0x9469;

							Vector3 __0x9490 = new Vector3( __0x9488, __0x9488, __0x9488 );
							__0x9489 += __0x9490 / 2;
							__0x9489 /= __0x9490;
							__0x9489 = new Vector3I( (int)__0x9489.X, (int)__0x9489.Y,
								(int)__0x9489.Z ).ToVector3();
							__0x9489 *= __0x9490;

							if( __0x9429.x )
								__0x9469.X = __0x9489.X;
							if( __0x9429.y )
								__0x9469.Y = __0x9489.Y;
							if( __0x9429.z )
								__0x9469.Z = __0x9489.Z;
						}
						__0x9469 *= __0x9465;

						
						if( __0x9428 != null && Owner.Objects.Count == __0x9428.Length )
							Owner.OnPositionModeUpdateObjects( __0x9428, __0x9469 );

						__0x9430 = string.Format( "[{0} {1} {2}]", __0x9469.X.ToString( "F2" ), __0x9469.Y.ToString( "F2" ),
							__0x9469.Z.ToString( "F2" ) );
					}
				}
			}

			double __0x10061( Vector3 __0x10099 )
			{
				return ( Viewport.CameraSettings.Position - __0x10099 ).Length();
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10055() )
					return false;

				__0x10117 __0x9491 = new __0x10117( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9491 = __0x10059();
					else
						__0x9491 = __0x9429;
				}

				Vector3 __0x9492 = Owner.__0x10047();
				double __0x9493 = GetLineWorldThickness( __0x9492 );
				double __0x9494 = GetSize();
				if( __0x9494 == 0 )
					return false;

				return __0x9491.TrueCount != 0;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10055() )
					return;

				ColorValue __0x9495 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9496 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9497 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9498 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9499 = new ColorValue( 0, 0, 0, ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity );

				__0x10117 __0x9500 = new __0x10117( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9500 = __0x10059();
					else
						__0x9500 = __0x9429;
				}

				Vector3 __0x9501 = Owner.__0x10047();
				double __0x9502 = GetLineWorldThickness( __0x9501 );
				double __0x9503 = GetSize();
				if( __0x9503 == 0 )
					return;

				

				double __0x9504 = __0x9503 / 4.0f;
				Quaternion __0x9505 = __0x10058();

				bool __0x9506;
				{
					Vector3 __0x9507 = __0x9501 + __0x9505 * new Vector3( __0x9503, 0, 0 );
					Vector3 __0x9508 = __0x9501 - __0x9505 * new Vector3( __0x9503, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9506 = __0x10061( __0x9507 ) < __0x10061( __0x9508 );
					else
						__0x9506 = true;
				}
				bool __0x9509;
				{
					Vector3 __0x9510 = __0x9501 + __0x9505 * new Vector3( 0, __0x9503, 0 );
					Vector3 __0x9511 = __0x9501 - __0x9505 * new Vector3( 0, __0x9503, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9509 = __0x10061( __0x9510 ) < __0x10061( __0x9511 );
					else
						__0x9509 = true;
				}
				bool __0x9512;
				{
					Vector3 __0x9513 = __0x9501 + __0x9505 * new Vector3( 0, 0, __0x9503 );
					Vector3 __0x9514 = __0x9501 - __0x9505 * new Vector3( 0, 0, __0x9503 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9512 = __0x10061( __0x9513 ) < __0x10061( __0x9514 );
					else
						__0x9512 = true;
				}

				double __0x9515 = __0x9506 ? __0x9503 : -__0x9503;
				double __0x9516 = __0x9509 ? __0x9503 : -__0x9503;
				double __0x9517 = __0x9512 ? __0x9503 : -__0x9503;

				double __0x9518 = __0x9503 - __0x9502;
				double __0x9519 = __0x9506 ? __0x9518 : -__0x9518;
				double __0x9520 = __0x9509 ? __0x9518 : -__0x9518;
				double __0x9521 = __0x9512 ? __0x9518 : -__0x9518;

				
				{
					List<__0x10118> __0x9522 = new List<__0x10118>( 32 );
					ColorValue __0x9523;

					

					__0x9523 = __0x9500.x ? __0x9495 : __0x9496;
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
						__0x9501 + __0x9505 * new Vector3( __0x9503 / 5, 0, 0 ),
						__0x9501 + __0x9505 * new Vector3( __0x9503 - __0x9504, 0, 0 ),
						__0x9523 ) );
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Cone,
						__0x9501 + __0x9505 * new Vector3( __0x9503 - __0x9504, 0, 0 ),
						__0x9501 + __0x9505 * new Vector3( __0x9503, 0, 0 ),
						__0x9523, __0x9504 / 6 ) );
					if( !__0x9506 )
					{
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( -__0x9503 / 5, 0, 0 ),
							__0x9501 + __0x9505 * new Vector3( -__0x9503, 0, 0 ),
							__0x9523, __0x9502 ) );
					}

					__0x9523 = __0x9500.x && __0x9500.y ? __0x9495 : __0x9496;
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
						__0x9501 + __0x9505 * new Vector3( __0x9515 / 2, 0, 0 ),
						__0x9501 + __0x9505 * new Vector3( __0x9515 / 2, __0x9520 / 2, 0 ),
						__0x9523, __0x9502 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9523 = __0x9500.x && __0x9500.z ? __0x9495 : __0x9496;
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( __0x9515 / 2, 0, 0 ),
							__0x9501 + __0x9505 * new Vector3( __0x9515 / 2, 0, __0x9521 / 2 ),
							__0x9523, __0x9502 ) );
					}

					

					__0x9523 = __0x9500.y ? __0x9495 : __0x9497;
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
						__0x9501 + __0x9505 * new Vector3( 0, __0x9503 / 5, 0 ),
						__0x9501 + __0x9505 * new Vector3( 0, __0x9503 - __0x9504, 0 ),
						__0x9523, __0x9502 ) );
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Cone,
						__0x9501 + __0x9505 * new Vector3( 0, __0x9503 - __0x9504, 0 ),
						__0x9501 + __0x9505 * new Vector3( 0, __0x9503, 0 ),
						__0x9523, __0x9504 / 6 ) );
					if( !__0x9509 )
					{
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( 0, -__0x9503 / 5, 0 ),
							__0x9501 + __0x9505 * new Vector3( 0, -__0x9503, 0 ),
							__0x9523, __0x9502 ) );
					}

					__0x9523 = __0x9500.x && __0x9500.y ? __0x9495 : __0x9497;
					__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
						__0x9501 + __0x9505 * new Vector3( 0, __0x9516 / 2, 0 ),
						__0x9501 + __0x9505 * new Vector3( __0x9519 / 2, __0x9516 / 2, 0 ),
						__0x9523, __0x9502 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9523 = __0x9500.y && __0x9500.z ? __0x9495 : __0x9497;
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( 0, __0x9516 / 2, 0 ),
							__0x9501 + __0x9505 * new Vector3( 0, __0x9516 / 2, __0x9521 / 2 ),
							__0x9523, __0x9502 ) );
					}

					

					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9523 = __0x9500.z ? __0x9495 : __0x9498;
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9503 / 5 ),
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9503 - __0x9504 ),
							__0x9523, __0x9502 ) );
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Cone,
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9503 - __0x9504 ),
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9503 ),
							__0x9523, __0x9504 / 6 ) );
						if( !__0x9512 )
						{
							__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
								__0x9501 + __0x9505 * new Vector3( 0, 0, -__0x9503 / 5 ),
								__0x9501 + __0x9505 * new Vector3( 0, 0, -__0x9503 ),
								__0x9523, __0x9502 ) );
						}

						__0x9523 = __0x9500.x && __0x9500.z ? __0x9495 : __0x9498;
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9517 / 2 ),
							__0x9501 + __0x9505 * new Vector3( __0x9519 / 2, 0, __0x9517 / 2 ),
							__0x9523, __0x9502 ) );
						__0x9523 = __0x9500.y && __0x9500.z ? __0x9495 : __0x9498;
						__0x9522.Add( new __0x10118( __0x10118.ItemType.Line,
							__0x9501 + __0x9505 * new Vector3( 0, 0, __0x9517 / 2 ),
							__0x9501 + __0x9505 * new Vector3( 0, __0x9520 / 2, __0x9517 / 2 ),
							__0x9523, __0x9502 ) );
					}

					
					CollectionUtility.SelectionSort( __0x9522, delegate ( __0x10118 __0x10100, __0x10118 __0x10101 )
					{
						double __0x9524 = Math.Max( __0x10061( __0x10100.start ), __0x10061( __0x10100.end ) );
						double __0x9525 = Math.Max( __0x10061( __0x10101.start ), __0x10061( __0x10101.end ) );
						if( __0x9524 > __0x9525 )
							return -1;
						if( __0x9524 < __0x9525 )
							return 1;
						return 0;
					} );

					
					for( int __0x9526 = 0; __0x9526 < 5; __0x9526++ )
					{
						bool __0x9527 = __0x9526 <= 3;
						if( __0x9527 && ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity == 0 )
							continue;

						var __0x9528 = 0.0;
						if( __0x9527 )
							__0x9528 = ( (double)__0x9526 + 1.0 ) / 4.0;

						
						

						if( __0x9527 )
							DebugGeometry.SetColor( __0x9499 * new ColorValue( 1, 1, 1, 0.25 ), false );
						foreach( __0x10118 __0x10042 in __0x9522 )
						{
							if( !__0x9527 )
								DebugGeometry.SetColor( __0x10042.color, false );
							switch( __0x10042.type )
							{
							case __0x10118.ItemType.Line:
								AddLine( __0x10042.start, __0x10042.end, __0x9502, __0x9528 );
								break;
							case __0x10118.ItemType.Cone:
								AddCone( __0x10042.start, __0x10042.end, __0x10042.coneArrowSize, __0x9502, __0x9528 );
								break;
							}
						}

						
						
					}
				}

				
				if( __0x9500.TrueCount == 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x9529 = new List<Vector3>();
					List<int> __0x9530 = new List<int>();

					Vector3 __0x9531;
					Vector3 __0x9532;

					if( __0x9500.x )
					{
						__0x9531 = Vector3.XAxis;
						__0x9532 = __0x9500.y ? Vector3.YAxis : Vector3.ZAxis;
					}
					else
					{
						__0x9531 = Vector3.YAxis;
						__0x9532 = Vector3.ZAxis;
					}

					__0x9531 *= new Vector3( __0x9515 / 2, __0x9516 / 2, __0x9517 / 2 );
					__0x9532 *= new Vector3( __0x9515 / 2, __0x9516 / 2, __0x9517 / 2 );

					__0x9529.Add( __0x9501 );
					__0x9529.Add( __0x9501 + __0x9505 * __0x9531 );
					__0x9529.Add( __0x9501 + __0x9505 * ( __0x9531 + __0x9532 ) );
					__0x9529.Add( __0x9501 + __0x9505 * __0x9532 );

					__0x9530.Add( 0 ); __0x9530.Add( 1 ); __0x9530.Add( 2 );
					__0x9530.Add( 2 ); __0x9530.Add( 3 ); __0x9530.Add( 0 );

					DebugGeometry.AddTriangles( __0x9529, __0x9530,
						Matrix4.Identity, false, false );
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10055() )
					return;

				Vector2 __0x9533 = Viewport.SizeInPixels.ToVector2();
				var __0x9534 = Viewport.CanvasRenderer;

				__0x10117 __0x9535 = new __0x10117( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9535 = __0x10059();
					else
						__0x9535 = __0x9429;
				}

				Vector3 __0x9536 = Owner.__0x10047();
				Quaternion __0x9537 = __0x10058();
				double __0x9538 = GetSize();

				
				if( __0x9361 != null && __0x9535.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9361;

				if( __0x9538 != 0 )
				{
					
					
					
					
					
					
					

					

					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					

					
					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					
					

					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					

					
					
					

					
					{
						Vector3 __0x9539 = __0x9536 + __0x9537 * new Vector3( __0x9538, 0, 0 );
						Vector3 __0x9540 = __0x9536 + __0x9537 * new Vector3( 0, __0x9538, 0 );
						Vector3 __0x9541 = __0x9536 + __0x9537 * new Vector3( 0, 0, __0x9538 );
						double __0x9542 = ( ArrowPixelSize / 20.0f ) / __0x9533.Y;

						Vector2 __0x9543;

						if( CameraSettings.ProjectToScreenCoordinates( __0x9539, out __0x9543 ) )
						{
							Vector2 __0x9544 = new Vector2( __0x9543.X, __0x9543.Y - __0x9542 );
							ColorValue __0x9545 = __0x9535.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x9534, "x", __0x9544, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9545, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x9540, out __0x9543 ) )
						{
							Vector2 __0x9546 = new Vector2( __0x9543.X, __0x9543.Y - __0x9542 );
							ColorValue __0x9547 = __0x9535.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x9534, "y", __0x9546, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9547, 1 );
						}

						if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						{
							if( CameraSettings.ProjectToScreenCoordinates( __0x9541, out __0x9543 ) )
							{
								Vector2 __0x9548 = new Vector2( __0x9543.X, __0x9543.Y - __0x9542 );
								ColorValue __0x9549 = __0x9535.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
								AddTextWithShadow( __0x9534, "z", __0x9548, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9549, 1 );
							}
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x9430 ) )
					{
						Vector2 __0x9550;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10047(), out __0x9550 ) )
						{
							double __0x9551 = ( ArrowPixelSize / __0x9533.Y ) * 1.2f;
							Vector2 __0x9552 = new Vector2( __0x9550.X, __0x9550.Y - __0x9551 );
							AddTextWithShadow( __0x9534, __0x9430, __0x9552, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
								new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10119 : ModeClass
		{
			Vector3 __0x9553;
			Vector2 __0x9554;
			TransformOfObject[] __0x9555;
			__0x10120 __0x9556;
			string __0x9557 = "";

			Vector3 __0x9558;
			Axis __0x9559 = Axis.None;
			Vector2 __0x9560;
			Radian __0x9561;
			Vector2 __0x9562;
			
			

			bool __0x9563;

			

			
			struct __0x10120
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10120( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			
			enum Axis
			{
				None,
				X,
				Y,
				Z,
				Radius,
				InnerCircle,
			}

			

			struct __0x10121
			{
				public enum ItemType
				{
					Line,
					Cone
				}
				public ItemType type;
				public Vector3 start;
				public Vector3 end;
				public ColorValue color;
				public double coneArrowSize;

				public __0x10121( ItemType type, Vector3 start, Vector3 end, ColorValue color, double coneArrowSize )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = coneArrowSize;
				}

				public __0x10121( ItemType type, Vector3 start, Vector3 end, ColorValue color )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = 0;
				}
			}

			

			Quaternion __0x10062()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
						return Owner.Objects[ 0 ].Rotation;
				}
				return Quaternion.Identity;
			}

			__0x10120 __0x10063()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9564 = Owner.__0x10047();
				double __0x9565 = GetSize();

				if( __0x9565 == 0 )
					return new __0x10120( false, false, false );

				Quaternion __0x9566 = __0x10062();

				bool __0x9567;
				{
					Vector3 __0x9568 = __0x9564 + __0x9566 * new Vector3( __0x9565, 0, 0 );
					Vector3 __0x9569 = __0x9564 - __0x9566 * new Vector3( __0x9565, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9567 = __0x10074( __0x9568 ) < __0x10074( __0x9569 );
					else
						__0x9567 = true;
				}
				bool __0x9570;
				{
					Vector3 __0x9571 = __0x9564 + __0x9566 * new Vector3( 0, __0x9565, 0 );
					Vector3 __0x9572 = __0x9564 - __0x9566 * new Vector3( 0, __0x9565, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9570 = __0x10074( __0x9571 ) < __0x10074( __0x9572 );
					else
						__0x9570 = true;
				}
				bool __0x9573;
				{
					Vector3 __0x9574 = __0x9564 + __0x9566 * new Vector3( 0, 0, __0x9565 );
					Vector3 __0x9575 = __0x9564 - __0x9566 * new Vector3( 0, 0, __0x9565 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9573 = __0x10074( __0x9574 ) < __0x10074( __0x9575 );
					else
						__0x9573 = true;
				}
				double __0x9576 = __0x9567 ? __0x9565 : -__0x9565;
				double __0x9577 = __0x9570 ? __0x9565 : -__0x9565;
				double __0x9578 = __0x9573 ? __0x9565 : -__0x9565;

				
				Vector3 __0x9579 = __0x9564 + __0x9566 * new Vector3( __0x9576 / 2, 0, 0 );
				Vector3 __0x9580 = __0x9564 + __0x9566 * new Vector3( 0, __0x9577 / 2, 0 );
				Vector3 __0x9581 = __0x9564 + __0x9566 * new Vector3( 0, 0, __0x9578 / 2 );
				Vector3 __0x9582 = __0x9564 + __0x9566 * new Vector3( __0x9576 / 2, __0x9577 / 2, 0 );
				Vector3 __0x9583 = __0x9564 + __0x9566 * new Vector3( __0x9576 / 2, 0, __0x9578 / 2 );
				Vector3 __0x9584 = __0x9564 + __0x9566 * new Vector3( 0, __0x9577 / 2, __0x9578 / 2 );
				
				if( IsMouseOverTriangle( __0x9564, __0x9579, __0x9582 ) || IsMouseOverTriangle( __0x9582, __0x9580, __0x9564 ) )
					return new __0x10120( true, true, false );
				if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					
					if( IsMouseOverTriangle( __0x9564, __0x9579, __0x9583 ) || IsMouseOverTriangle( __0x9583, __0x9581, __0x9564 ) )
						return new __0x10120( true, false, true );
					
					if( IsMouseOverTriangle( __0x9564, __0x9580, __0x9584 ) || IsMouseOverTriangle( __0x9584, __0x9581, __0x9564 ) )
						return new __0x10120( false, true, true );
				}

				{
					double __0x9585 = double.MaxValue;
					__0x10120 __0x9586 = new __0x10120( false, false, false );

					double __0x9587;

					
					if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( __0x9565 / 5, 0, 0 ), __0x9564 + __0x9566 * new Vector3( __0x9565, 0, 0 ), out _, out _, out __0x9587 ) )
					{
						if( __0x9587 < __0x9585 )
						{
							__0x9585 = __0x9587;
							__0x9586 = new __0x10120( true, false, false );
						}
					}
					if( !__0x9567 )
					{
						if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( -__0x9565 / 5, 0, 0 ), __0x9564 + __0x9566 * new Vector3( -__0x9565, 0, 0 ), out _, out _, out __0x9587 ) )
						{
							if( __0x9587 < __0x9585 )
							{
								__0x9585 = __0x9587;
								__0x9586 = new __0x10120( true, false, false );
							}
						}
					}

					
					if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( 0, __0x9565 / 5, 0 ), __0x9564 + __0x9566 * new Vector3( 0, __0x9565, 0 ), out _, out _, out __0x9587 ) )
					{
						if( __0x9587 < __0x9585 )
						{
							__0x9585 = __0x9587;
							__0x9586 = new __0x10120( false, true, false );
						}
					}

					if( !__0x9570 )
					{
						if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( 0, -__0x9565 / 5, 0 ), __0x9564 + __0x9566 * new Vector3( 0, -__0x9565, 0 ), out _, out _, out __0x9587 ) )
						{
							if( __0x9587 < __0x9585 )
							{
								__0x9585 = __0x9587;
								__0x9586 = new __0x10120( false, true, false );
							}
						}
					}

					
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( 0, 0, __0x9565 / 5 ), __0x9564 + __0x9566 * new Vector3( 0, 0, __0x9565 ), out _, out _, out __0x9587 ) )
						{
							if( __0x9587 < __0x9585 )
							{
								__0x9585 = __0x9587;
								__0x9586 = new __0x10120( false, false, true );
							}
						}

						if( !__0x9573 )
						{
							if( IsMouseNearLine( __0x9564 + __0x9566 * new Vector3( 0, 0, -__0x9565 / 5 ), __0x9564 + __0x9566 * new Vector3( 0, 0, -__0x9565 ), out _, out _, out __0x9587 ) )
							{
								if( __0x9587 < __0x9585 )
								{
									__0x9585 = __0x9587;
									__0x9586 = new __0x10120( false, false, true );
								}
							}
						}
					}

					if( __0x9586.TrueCount != 0 )
						return __0x9586;
				}


				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				

				return new __0x10120( false, false, false );
			}

			Quaternion __0x10064()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
					{
						if( modify_Activated )
							return __0x9555[ 0 ].rotation;
						else
							return Owner.Objects[ 0 ].Rotation;
					}
				}
				return Quaternion.Identity;
			}

			Axis __0x10065( out Vector2 __0x10102, out Radian __0x10103 )
			{
				__0x10102 = Vector2.Zero;
				__0x10103 = 0;

				
				if( __0x10063().TrueCount != 0 )
					return Axis.None;

				Vector2 __0x9588 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9589 = Owner.__0x10047();
				double __0x9590 = GetSize();
				if( __0x9590 == 0 )
					return Axis.None;

				const double __0x9591 = MathEx.PI / 64;

				double __0x9592 = __0x9590 * .75f;
				double __0x9593 = __0x10074( __0x9589 );

				Vector3 __0x9594 = Vector3.Zero;

				Quaternion __0x9595 = __0x10064();

				
				for( double __0x9596 = 0; __0x9596 <= MathEx.PI * 2 + __0x9591 * .5f; __0x9596 += __0x9591 )
				{
					Vector3 __0x9597 = __0x9589 + __0x9595 * ( new Vector3( Math.Sin( __0x9596 ),
						Math.Cos( __0x9596 ), 0 ) * __0x9592 );
					if( __0x9596 != 0 && ( __0x10074( __0x9597 ) <= __0x9593 || Owner.SceneMode2D ) &&
						IsMouseNearLine( __0x9594, __0x9597, out __0x10102, out __0x10103, out _ ) )
					{
						return Axis.Z;
					}
					__0x9594 = __0x9597;
				}

				return Axis.None;
			}

			internal protected override bool OnMouseOverAxis()
			{
				return __0x10066() || __0x10067();
			}

			bool __0x10066()
			{
				if( !Owner.__0x10055() )
					return false;
				__0x10120 __0x9598 = __0x10063();
				return __0x9598.TrueCount != 0;
			}

			bool __0x10067()
			{
				if( !Owner.__0x10056() )
					return false;
				Vector2 __0x9599;
				Radian __0x9600;
				Axis __0x9601 = __0x10065( out __0x9599, out __0x9600 );
				return __0x9601 != Axis.None;
			}

			protected override bool OnTryBeginModify()
			{
				if( __0x10068() )
				{
					__0x9563 = true;
					return true;
				}

				if( __0x10069() )
				{
					__0x9563 = false;
					return true;
				}

				return false;
			}

			bool __0x10068()
			{
				if( !Owner.__0x10055() )
					return false;

				__0x10120 __0x9602 = __0x10063();
				if( __0x9602.TrueCount != 0 )
				{
					__0x9553 = Owner.__0x10047();
					Vector2 __0x9603;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9553, out __0x9603 ) )
					{
						__0x9554 = Viewport.MousePosition - __0x9603;
						__0x9556 = __0x9602;
						__0x9557 = "";
						__0x9555 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9604 = 0; __0x9604 < Owner.Objects.Count; __0x9604++ )
						{
							TransformToolObject __0x9605 = Owner.Objects[ __0x9604 ];
							__0x9555[ __0x9604 ] = new TransformOfObject( __0x9605.Position, __0x9605.Rotation, __0x9605.Scale );
						}
						return true;
					}
				}

				return false;
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9555 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9606 = 0; __0x9606 < Owner.Objects.Count; __0x9606++ )
				{
					TransformToolObject __0x9607 = Owner.Objects[ __0x9606 ];
					__0x9555[ __0x9606 ] = new TransformOfObject( __0x9607.Position, __0x9607.Rotation, __0x9607.Scale );
				}
			}

			bool __0x10069()
			{
				if( !Owner.__0x10056() )
					return false;

				Vector2 __0x9608;
				Radian __0x9609;
				Axis __0x9610 = __0x10065( out __0x9608, out __0x9609 );

				if( __0x9610 != Axis.None )
				{
					__0x9558 = Owner.__0x10047();

					Vector2 __0x9611;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9558, out __0x9611 ) )
					{
						Vector2 __0x9612 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

						__0x9559 = __0x9610;
						__0x9560 = __0x9608;
						__0x9561 = __0x9609;
						__0x9562 = Viewport.MousePosition;
						
						__0x9557 = "";
						__0x9555 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9613 = 0; __0x9613 < Owner.Objects.Count; __0x9613++ )
						{
							TransformToolObject __0x9614 = Owner.Objects[ __0x9613 ];
							__0x9555[ __0x9613 ] = new TransformOfObject( __0x9614.Position, __0x9614.Rotation, __0x9614.Scale );
						}
						return true;
					}
				}

				return false;
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9555 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10070();
				__0x9555 = null;
			}

			void __0x10070()
			{
				if( __0x9555 != null && Owner.Objects.Count == __0x9555.Length )
				{
					for( int __0x9615 = 0; __0x9615 < Owner.Objects.Count; __0x9615++ )
					{
						Owner.Objects[ __0x9615 ].Position = __0x9555[ __0x9615 ].position;
						Owner.Objects[ __0x9615 ].Rotation = __0x9555[ __0x9615 ].rotation;
					}
				}
			}

			void __0x10071( ref Radian __0x10104 )
			{
				
				Degree __0x9616 = Owner.__0x10052();
				if( __0x9616 != 0 )
				{
					Radian __0x9617 = __0x9616.InRadians();
					__0x10104 += __0x9617 / 2;
					__0x10104 /= __0x9617;
					__0x10104 = (int)__0x10104;
					__0x10104 *= __0x9617;
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				__0x10072();
				__0x10073();
			}

			void __0x10072()
			{
				if( modify_Activated && !Viewport.MouseRelativeMode && __0x9563 )
				{
					Vector2 __0x9618 = Viewport.MousePosition - __0x9554;
					Ray __0x9619 = CameraSettings.GetRayByScreenCoordinates( __0x9618 );

					if( !double.IsNaN( __0x9619.Direction.X ) )
					{
						Quaternion __0x9620 = __0x10062();

						Plane __0x9621 = Plane.FromVectors( __0x9620 * new Vector3( 0, 1, 0 ),
							__0x9620 * new Vector3( 0, 0, 1 ), __0x9553 );
						Plane __0x9622 = Plane.FromVectors( __0x9620 * new Vector3( 1, 0, 0 ),
							__0x9620 * new Vector3( 0, 0, 1 ), __0x9553 );
						Plane __0x9623 = Plane.FromVectors( __0x9620 * new Vector3( 1, 0, 0 ),
							__0x9620 * new Vector3( 0, 1, 0 ), __0x9553 );

						Vector3 __0x9624 = Vector3.Zero;

						if( __0x9556.x && __0x9556.TrueCount == 1 )
						{
							double __0x9625;
							if( __0x9623.Intersects( __0x9619, out __0x9625 ) )
							{
								Vector3 __0x9626 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 1, 0, 0 ), __0x9619.GetPointOnRay( __0x9625 ) );
								__0x9624 += __0x9626 - __0x9553;
							}
						}

						if( __0x9556.y && __0x9556.TrueCount == 1 )
						{
							double __0x9627;
							if( __0x9623.Intersects( __0x9619, out __0x9627 ) )
							{
								Vector3 __0x9628 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 1, 0 ), __0x9619.GetPointOnRay( __0x9627 ) );
								__0x9624 += __0x9628 - __0x9553;
							}
						}

						if( __0x9556.z && __0x9556.TrueCount == 1 )
						{
							Vector3 __0x9629 = CameraSettings.Direction;

							bool __0x9630 = Math.Abs( CameraSettings.Direction.X ) > Math.Abs( CameraSettings.Direction.Y );
							Plane __0x9631 = __0x9630 ? __0x9621 : __0x9622;

							double __0x9632;
							if( __0x9631.Intersects( __0x9619, out __0x9632 ) )
							{
								Vector3 __0x9633 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 0, 1 ), __0x9619.GetPointOnRay( __0x9632 ) );
								__0x9624 += __0x9633 - __0x9553;
							}
						}

						if( __0x9556.x && __0x9556.y )
						{
							double __0x9634;
							if( __0x9623.Intersects( __0x9619, out __0x9634 ) )
							{
								Vector3 __0x9635 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 1, 0, 0 ), __0x9619.GetPointOnRay( __0x9634 ) );
								Vector3 __0x9636 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 1, 0 ), __0x9619.GetPointOnRay( __0x9634 ) );
								__0x9624 += __0x9635 - __0x9553;
								__0x9624 += __0x9636 - __0x9553;
							}
						}

						if( __0x9556.x && __0x9556.z )
						{
							double __0x9637;
							if( __0x9622.Intersects( __0x9619, out __0x9637 ) )
							{
								Vector3 __0x9638 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 1, 0, 0 ), __0x9619.GetPointOnRay( __0x9637 ) );
								Vector3 __0x9639 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 0, 1 ), __0x9619.GetPointOnRay( __0x9637 ) );
								__0x9624 += __0x9638 - __0x9553;
								__0x9624 += __0x9639 - __0x9553;
							}
						}

						if( __0x9556.y && __0x9556.z )
						{
							double __0x9640;
							if( __0x9621.Intersects( __0x9619, out __0x9640 ) )
							{
								Vector3 __0x9641 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 1, 0 ), __0x9619.GetPointOnRay( __0x9640 ) );
								Vector3 __0x9642 = MathAlgorithms.ProjectPointToLine( __0x9553,
									__0x9553 + __0x9620 * new Vector3( 0, 0, 1 ), __0x9619.GetPointOnRay( __0x9640 ) );
								__0x9624 += __0x9641 - __0x9553;
								__0x9624 += __0x9642 - __0x9553;
							}
						}

						
						__0x9624 *= __0x9620.GetInverse();
						double __0x9643 = Owner.__0x10051();
						if( __0x9643 != 0 )
						{
							Vector3 __0x9644 = __0x9624;

							Vector3 __0x9645 = new Vector3( __0x9643, __0x9643, __0x9643 );
							__0x9644 += __0x9645 / 2;
							__0x9644 /= __0x9645;
							__0x9644 = new Vector3I( (int)__0x9644.X, (int)__0x9644.Y,
								(int)__0x9644.Z ).ToVector3();
							__0x9644 *= __0x9645;

							if( __0x9556.x )
								__0x9624.X = __0x9644.X;
							if( __0x9556.y )
								__0x9624.Y = __0x9644.Y;
							if( __0x9556.z )
								__0x9624.Z = __0x9644.Z;
						}
						__0x9624 *= __0x9620;

						
						if( __0x9555 != null && Owner.Objects.Count == __0x9555.Length )
							Owner.OnPositionModeUpdateObjects( __0x9555, __0x9624 );

						__0x9557 = string.Format( "[{0} {1} {2}]", __0x9624.X.ToString( "F2" ), __0x9624.Y.ToString( "F2" ),
							__0x9624.Z.ToString( "F2" ) );
					}
				}
			}

			void __0x10073()
			{
				if( modify_Activated && !owner.__0x9355.Viewport.MouseRelativeMode && !__0x9563 )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x9646 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					var __0x9647 = owner.__0x9355.Viewport.CameraSettings;
					Vector2 __0x9648 = owner.__0x9355.Viewport.MousePosition * __0x9646 + cursorTransitionOnScreenBorderOffset;

					Vector2 __0x9649 = __0x9562 * __0x9646;
					Vector2 __0x9650 = __0x9648 - __0x9649;
					Quaternion __0x9651 = __0x10064();
					double __0x9652 = ProjectSettings.Get.SceneEditor.TransformToolRotationSensitivity / 150;

					Quaternion __0x9653 = Quaternion.Identity;

					if( __0x9559 == Axis.Z )
					{
						Radian __0x9654;
						{
							Matrix2 __0x9655 = Matrix2.FromRotate( __0x9561 );
							Vector2 __0x9656 = __0x9655 * __0x9650;
							__0x9654 = __0x9656.X * __0x9652;
							__0x10071( ref __0x9654 );
						}

						string __0x9657 = 0.0f.ToString( "F2" );

						__0x9653 = new Quaternion( new Vector3( 0, 0, Math.Sin( -__0x9654 / 2 ) ), Math.Cos( -__0x9654 / 2 ) );
						__0x9653 = __0x9651 * __0x9653.GetNormalize() * __0x9651.GetInverse();
						__0x9557 = string.Format( "[{0} {1} {2}]", __0x9657, __0x9657, ( (double)__0x9654.InDegrees() ).ToString( "F2" ) );
					}

					__0x9653.Normalize();

					
					if( __0x9555 != null && Owner.Objects.Count == __0x9555.Length )
						Owner.OnRotationModeUpdateObjects( __0x9555, __0x9558, __0x9653 );
				}
			}

			double __0x10074( Vector3 __0x10105 )
			{
				return ( Viewport.CameraSettings.Position - __0x10105 ).Length();
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				return __0x10075() || __0x10076();
			}

			bool __0x10075()
			{
				if( !Owner.__0x10055() )
					return false;

				__0x10120 __0x9658 = new __0x10120( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9658 = __0x10063();
					else
						__0x9658 = __0x9556;
				}

				Vector3 __0x9659 = Owner.__0x10047();
				double __0x9660 = GetLineWorldThickness( __0x9659 );
				double __0x9661 = GetSize();
				if( __0x9661 == 0 )
					return false;

				return __0x9658.TrueCount != 0;
			}

			bool __0x10076()
			{
				if( !Owner.__0x10056() )
					return false;

				Axis __0x9662 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x9663;
						Radian __0x9664;
						__0x9662 = __0x10065( out __0x9663, out __0x9664 );
					}
					else
						__0x9662 = __0x9559;
				}

				Vector3 __0x9665;
				if( !modify_Activated )
					__0x9665 = Owner.__0x10047();
				else
					__0x9665 = __0x9558;
				double __0x9666 = GetLineWorldThickness( __0x9665 );
				double __0x9667 = GetSize();
				if( __0x9667 == 0 )
					return false;

				return __0x9662 != Axis.None;
			}

			public override void OnRender()
			{
				base.OnRender();

				__0x10078();
				__0x10077();
			}

			void __0x10077()
			{
				if( !Owner.__0x10055() )
					return;

				ColorValue __0x9668 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9669 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9670 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9671 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9672 = new ColorValue( 0, 0, 0, ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity );

				__0x10120 __0x9673 = new __0x10120( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9673 = __0x10063();
					else
						__0x9673 = __0x9556;
				}

				Vector3 __0x9674 = Owner.__0x10047();
				double __0x9675 = GetLineWorldThickness( __0x9674 );
				double __0x9676 = GetSize();
				if( __0x9676 == 0 )
					return;

				

				double __0x9677 = __0x9676 / 4.0f;
				Quaternion __0x9678 = __0x10062();

				bool __0x9679;
				{
					Vector3 __0x9680 = __0x9674 + __0x9678 * new Vector3( __0x9676, 0, 0 );
					Vector3 __0x9681 = __0x9674 - __0x9678 * new Vector3( __0x9676, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9679 = __0x10074( __0x9680 ) < __0x10074( __0x9681 );
					else
						__0x9679 = true;
				}
				bool __0x9682;
				{
					Vector3 __0x9683 = __0x9674 + __0x9678 * new Vector3( 0, __0x9676, 0 );
					Vector3 __0x9684 = __0x9674 - __0x9678 * new Vector3( 0, __0x9676, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9682 = __0x10074( __0x9683 ) < __0x10074( __0x9684 );
					else
						__0x9682 = true;
				}
				bool __0x9685;
				{
					Vector3 __0x9686 = __0x9674 + __0x9678 * new Vector3( 0, 0, __0x9676 );
					Vector3 __0x9687 = __0x9674 - __0x9678 * new Vector3( 0, 0, __0x9676 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9685 = __0x10074( __0x9686 ) < __0x10074( __0x9687 );
					else
						__0x9685 = true;
				}

				double __0x9688 = __0x9679 ? __0x9676 : -__0x9676;
				double __0x9689 = __0x9682 ? __0x9676 : -__0x9676;
				double __0x9690 = __0x9685 ? __0x9676 : -__0x9676;

				double __0x9691 = __0x9676 - __0x9675;
				double __0x9692 = __0x9679 ? __0x9691 : -__0x9691;
				double __0x9693 = __0x9682 ? __0x9691 : -__0x9691;
				double __0x9694 = __0x9685 ? __0x9691 : -__0x9691;

				
				{
					List<__0x10121> __0x9695 = new List<__0x10121>( 32 );
					ColorValue __0x9696;

					

					__0x9696 = __0x9673.x ? __0x9668 : __0x9669;
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
						__0x9674 + __0x9678 * new Vector3( __0x9676 / 5, 0, 0 ),
						__0x9674 + __0x9678 * new Vector3( __0x9676 - __0x9677, 0, 0 ),
						__0x9696 ) );
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Cone,
						__0x9674 + __0x9678 * new Vector3( __0x9676 - __0x9677, 0, 0 ),
						__0x9674 + __0x9678 * new Vector3( __0x9676, 0, 0 ),
						__0x9696, __0x9677 / 6 ) );
					if( !__0x9679 )
					{
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( -__0x9676 / 5, 0, 0 ),
							__0x9674 + __0x9678 * new Vector3( -__0x9676, 0, 0 ),
							__0x9696, __0x9675 ) );
					}

					__0x9696 = __0x9673.x && __0x9673.y ? __0x9668 : __0x9669;
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
						__0x9674 + __0x9678 * new Vector3( __0x9688 / 2, 0, 0 ),
						__0x9674 + __0x9678 * new Vector3( __0x9688 / 2, __0x9693 / 2, 0 ),
						__0x9696, __0x9675 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9696 = __0x9673.x && __0x9673.z ? __0x9668 : __0x9669;
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( __0x9688 / 2, 0, 0 ),
							__0x9674 + __0x9678 * new Vector3( __0x9688 / 2, 0, __0x9694 / 2 ),
							__0x9696, __0x9675 ) );
					}

					

					__0x9696 = __0x9673.y ? __0x9668 : __0x9670;
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
						__0x9674 + __0x9678 * new Vector3( 0, __0x9676 / 5, 0 ),
						__0x9674 + __0x9678 * new Vector3( 0, __0x9676 - __0x9677, 0 ),
						__0x9696, __0x9675 ) );
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Cone,
						__0x9674 + __0x9678 * new Vector3( 0, __0x9676 - __0x9677, 0 ),
						__0x9674 + __0x9678 * new Vector3( 0, __0x9676, 0 ),
						__0x9696, __0x9677 / 6 ) );
					if( !__0x9682 )
					{
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( 0, -__0x9676 / 5, 0 ),
							__0x9674 + __0x9678 * new Vector3( 0, -__0x9676, 0 ),
							__0x9696, __0x9675 ) );
					}

					__0x9696 = __0x9673.x && __0x9673.y ? __0x9668 : __0x9670;
					__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
						__0x9674 + __0x9678 * new Vector3( 0, __0x9689 / 2, 0 ),
						__0x9674 + __0x9678 * new Vector3( __0x9692 / 2, __0x9689 / 2, 0 ),
						__0x9696, __0x9675 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9696 = __0x9673.y && __0x9673.z ? __0x9668 : __0x9670;
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( 0, __0x9689 / 2, 0 ),
							__0x9674 + __0x9678 * new Vector3( 0, __0x9689 / 2, __0x9694 / 2 ),
							__0x9696, __0x9675 ) );
					}

					

					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9696 = __0x9673.z ? __0x9668 : __0x9671;
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9676 / 5 ),
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9676 - __0x9677 ),
							__0x9696, __0x9675 ) );
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Cone,
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9676 - __0x9677 ),
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9676 ),
							__0x9696, __0x9677 / 6 ) );
						if( !__0x9685 )
						{
							__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
								__0x9674 + __0x9678 * new Vector3( 0, 0, -__0x9676 / 5 ),
								__0x9674 + __0x9678 * new Vector3( 0, 0, -__0x9676 ),
								__0x9696, __0x9675 ) );
						}

						__0x9696 = __0x9673.x && __0x9673.z ? __0x9668 : __0x9671;
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9690 / 2 ),
							__0x9674 + __0x9678 * new Vector3( __0x9692 / 2, 0, __0x9690 / 2 ),
							__0x9696, __0x9675 ) );
						__0x9696 = __0x9673.y && __0x9673.z ? __0x9668 : __0x9671;
						__0x9695.Add( new __0x10121( __0x10121.ItemType.Line,
							__0x9674 + __0x9678 * new Vector3( 0, 0, __0x9690 / 2 ),
							__0x9674 + __0x9678 * new Vector3( 0, __0x9693 / 2, __0x9690 / 2 ),
							__0x9696, __0x9675 ) );
					}

					
					CollectionUtility.SelectionSort( __0x9695, delegate ( __0x10121 __0x10106, __0x10121 __0x10107 )
					{
						double __0x9697 = Math.Max( __0x10074( __0x10106.start ), __0x10074( __0x10106.end ) );
						double __0x9698 = Math.Max( __0x10074( __0x10107.start ), __0x10074( __0x10107.end ) );
						if( __0x9697 > __0x9698 )
							return -1;
						if( __0x9697 < __0x9698 )
							return 1;
						return 0;
					} );

					
					for( int __0x9699 = 0; __0x9699 < 5; __0x9699++ )
					{
						bool __0x9700 = __0x9699 <= 3;
						if( __0x9700 && ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity == 0 )
							continue;

						var __0x9701 = 0.0;
						if( __0x9700 )
							__0x9701 = ( (double)__0x9699 + 1.0 ) / 4.0;

						
						

						if( __0x9700 )
							DebugGeometry.SetColor( __0x9672 * new ColorValue( 1, 1, 1, 0.25 ), false );
						foreach( __0x10121 __0x10043 in __0x9695 )
						{
							if( !__0x9700 )
								DebugGeometry.SetColor( __0x10043.color, false );
							switch( __0x10043.type )
							{
							case __0x10121.ItemType.Line:
								AddLine( __0x10043.start, __0x10043.end, __0x9675, __0x9701 );
								break;
							case __0x10121.ItemType.Cone:
								AddCone( __0x10043.start, __0x10043.end, __0x10043.coneArrowSize, __0x9675, __0x9701 );
								break;
							}
						}

						
						
					}
				}

				
				if( __0x9673.TrueCount == 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x9702 = new List<Vector3>();
					List<int> __0x9703 = new List<int>();

					Vector3 __0x9704;
					Vector3 __0x9705;

					if( __0x9673.x )
					{
						__0x9704 = Vector3.XAxis;
						__0x9705 = __0x9673.y ? Vector3.YAxis : Vector3.ZAxis;
					}
					else
					{
						__0x9704 = Vector3.YAxis;
						__0x9705 = Vector3.ZAxis;
					}

					__0x9704 *= new Vector3( __0x9688 / 2, __0x9689 / 2, __0x9690 / 2 );
					__0x9705 *= new Vector3( __0x9688 / 2, __0x9689 / 2, __0x9690 / 2 );

					__0x9702.Add( __0x9674 );
					__0x9702.Add( __0x9674 + __0x9678 * __0x9704 );
					__0x9702.Add( __0x9674 + __0x9678 * ( __0x9704 + __0x9705 ) );
					__0x9702.Add( __0x9674 + __0x9678 * __0x9705 );

					__0x9703.Add( 0 ); __0x9703.Add( 1 ); __0x9703.Add( 2 );
					__0x9703.Add( 2 ); __0x9703.Add( 3 ); __0x9703.Add( 0 );

					DebugGeometry.AddTriangles( __0x9702, __0x9703,
						Matrix4.Identity, false, false );
				}

				
			}

			void __0x10078()
			{
				if( !Owner.__0x10056() )
					return;

				ColorValue __0x9706 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9707 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9708 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9709 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9710 = new ColorValue( .66f, .66f, .66f );
				ColorValue __0x9711 = new ColorValue( .33f, .33f, .33f );
				ColorValue __0x9712 = new ColorValue( 0, 0, 0, ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity );

				Axis __0x9713 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated || __0x9563 )
					{
						Vector2 __0x9714;
						Radian __0x9715;
						__0x9713 = __0x10065( out __0x9714, out __0x9715 );
					}
					else
						__0x9713 = __0x9559;
				}

				Vector3 __0x9716;
				if( !modify_Activated || __0x9563 )
					__0x9716 = Owner.__0x10047();
				else
					__0x9716 = __0x9558;
				double __0x9717 = GetLineWorldThickness( __0x9716 );
				double __0x9718 = GetSize();
				if( __0x9718 == 0 )
					return;

				

				const double __0x9719 = MathEx.PI / 64;

				double __0x9720 = __0x9718 * .75f;
				double __0x9721 = __0x10074( __0x9716 );
				Vector3 __0x9722 = Vector3.Cross( CameraSettings.Direction, CameraSettings.Up );
				Vector3 __0x9723 = Vector3.Zero;
				Quaternion __0x9724 = __0x10064();

				for( int __0x9725 = 0; __0x9725 < 5; __0x9725++ )
				{
					bool __0x9726 = __0x9725 <= 3;
					if( __0x9726 && ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity == 0 )
						continue;

					var __0x9727 = 0.0;
					if( __0x9726 )
						__0x9727 = ( (double)__0x9725 + 1.0 ) / 4.0;

					if( __0x9726 )
						DebugGeometry.SetColor( __0x9712 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					
					
					
					
					
					
					
					

					

					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x9728 = new List<Vector3>( 64 );
						List<bool> __0x9729 = new List<bool>( 64 );
						for( double __0x9730 = 0; __0x9730 <= MathEx.PI * 2 + __0x9719 * .5f; __0x9730 += __0x9719 )
						{
							Vector3 __0x9731 = __0x9716 + __0x9724 * ( new Vector3( Math.Sin( __0x9730 ),
								Math.Cos( __0x9730 ), 0 ) * __0x9720 );
							__0x9728.Add( __0x9731 );
							bool __0x9732 = __0x10074( __0x9731 ) > __0x9721;
							if( Owner.SceneMode2D )
								__0x9732 = false;
							__0x9729.Add( __0x9732 );
							
							
						}
						if( !__0x9726 )
							DebugGeometry.SetColor( ( __0x9713 == Axis.Z ) ? __0x9706 : __0x9709, false );

						List<Vector3> __0x9733 = new List<Vector3>( 64 );
						for( int __0x9734 = 0; __0x9734 < __0x9728.Count; __0x9734++ )
						{
							if( !__0x9729[ __0x9734 ] )
							{
								__0x9733.Add( __0x9728[ __0x9734 ] );
							}
							else
							{
								if( __0x9733.Count != 0 )
								{
									AddPolygonalChain( __0x9733.ToArray(), __0x9717, __0x9727 );
									__0x9733.Clear();
								}
							}
						}
						if( __0x9733.Count != 0 )
						{
							AddPolygonalChain( __0x9733.ToArray(), __0x9717, __0x9727 );
							__0x9733.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					
					
					
					
					
					

					

					
					
					

					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				__0x10080();
				__0x10079();
			}

			void __0x10079()
			{
				if( !Owner.__0x10055() )
					return;

				Vector2 __0x9735 = Viewport.SizeInPixels.ToVector2();
				var __0x9736 = Viewport.CanvasRenderer;

				__0x10120 __0x9737 = new __0x10120( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9737 = __0x10063();
					else
						__0x9737 = __0x9556;
				}

				Vector3 __0x9738 = Owner.__0x10047();
				Quaternion __0x9739 = __0x10062();
				double __0x9740 = GetSize();

				
				if( __0x9361 != null && __0x9737.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9361;

				if( __0x9740 != 0 )
				{
					
					{
						Vector3 __0x9741 = __0x9738 + __0x9739 * new Vector3( __0x9740, 0, 0 );
						Vector3 __0x9742 = __0x9738 + __0x9739 * new Vector3( 0, __0x9740, 0 );
						Vector3 __0x9743 = __0x9738 + __0x9739 * new Vector3( 0, 0, __0x9740 );
						double __0x9744 = ( ArrowPixelSize / 20.0f ) / __0x9735.Y;

						Vector2 __0x9745;

						if( CameraSettings.ProjectToScreenCoordinates( __0x9741, out __0x9745 ) )
						{
							Vector2 __0x9746 = new Vector2( __0x9745.X, __0x9745.Y - __0x9744 );
							ColorValue __0x9747 = __0x9737.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x9736, "x", __0x9746, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9747, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x9742, out __0x9745 ) )
						{
							Vector2 __0x9748 = new Vector2( __0x9745.X, __0x9745.Y - __0x9744 );
							ColorValue __0x9749 = __0x9737.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x9736, "y", __0x9748, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9749, 1 );
						}

						if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						{
							if( CameraSettings.ProjectToScreenCoordinates( __0x9743, out __0x9745 ) )
							{
								Vector2 __0x9750 = new Vector2( __0x9745.X, __0x9745.Y - __0x9744 );
								ColorValue __0x9751 = __0x9737.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
								AddTextWithShadow( __0x9736, "z", __0x9750, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9751, 1 );
							}
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x9557 ) )
					{
						Vector2 __0x9752;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10047(), out __0x9752 ) )
						{
							double __0x9753 = ( ArrowPixelSize / __0x9735.Y ) * 1.2f;
							Vector2 __0x9754 = new Vector2( __0x9752.X, __0x9752.Y - __0x9753 );
							AddTextWithShadow( __0x9736, __0x9557, __0x9754, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
								new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}

			void __0x10080()
			{
				if( !Owner.__0x10056() )
					return;

				var __0x9755 = Viewport.CanvasRenderer;
				Vector2 __0x9756 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Axis __0x9757 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated && !modify_Prepare )
					{
						Vector2 __0x9758;
						Radian __0x9759;
						__0x9757 = __0x10065( out __0x9758, out __0x9759 );
					}
					else
						__0x9757 = __0x9559;
				}

				
				if( __0x9362 != null && __0x9757 != Axis.None )
					ViewportControl.OneFrameChangeCursor = __0x9362;

				
				if( modify_Activated && !string.IsNullOrEmpty( __0x9557 ) )
				{
					Vector2 __0x9760;
					if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10047(), out __0x9760 ) )
					{
						double __0x9761 = ( ArrowPixelSize / __0x9756.Y ) * 1.2f;
						Vector2 __0x9762 = new Vector2( __0x9760.X, __0x9760.Y - __0x9761 );
						AddTextWithShadow( __0x9755, __0x9557, __0x9762, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
							new ColorValue( 1, 1, 0 ), 2 );
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10122 : ModeClass
		{
			TransformOfObject[] __0x9763;
			Vector3 __0x9764;
			Axis __0x9765 = Axis.None;
			Vector2 __0x9766;
			Radian __0x9767;
			Vector2 __0x9768;
			
			string __0x9769 = "";

			

			enum Axis
			{
				None,
				X,
				Y,
				Z,
				Radius,
				InnerCircle,
			}

			

			Axis __0x10081( out Vector2 __0x10108, out Radian __0x10109 )
			{
				__0x10108 = Vector2.Zero;
				__0x10109 = 0;

				Vector2 __0x9770 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9771 = Owner.__0x10047();
				double __0x9772 = GetSize();
				if( __0x9772 == 0 )
					return Axis.None;

				const double __0x9773 = MathEx.PI / 64;

				double __0x9774 = __0x9772 * .75f;
				double __0x9775 = __0x10082( __0x9771 );

				Vector3 __0x9776 = Vector3.Zero;

				Quaternion __0x9777 = __0x10084();

				
				for( double __0x9778 = 0; __0x9778 <= MathEx.PI * 2 + __0x9773 * .5f; __0x9778 += __0x9773 )
				{
					Vector3 __0x9779 = __0x9771 + __0x9777 * ( new Vector3( 0, Math.Sin( __0x9778 ), Math.Cos( __0x9778 ) ) * __0x9774 );
					if( __0x9778 != 0 && __0x10082( __0x9779 ) <= __0x9775 &&
						IsMouseNearLine( __0x9776, __0x9779, out __0x10108, out __0x10109, out _ ) )
					{
						return Axis.X;
					}
					__0x9776 = __0x9779;
				}

				
				for( double __0x9780 = 0; __0x9780 <= MathEx.PI * 2 + __0x9773 * .5f; __0x9780 += __0x9773 )
				{
					Vector3 __0x9781 = __0x9771 + __0x9777 * ( new Vector3( Math.Sin( __0x9780 ), 0, Math.Cos( __0x9780 ) ) * __0x9774 );
					if( __0x9780 != 0 && __0x10082( __0x9781 ) <= __0x9775 &&
						IsMouseNearLine( __0x9776, __0x9781, out __0x10108, out __0x10109, out _ ) )
					{
						return Axis.Y;
					}
					__0x9776 = __0x9781;
				}

				
				for( double __0x9782 = 0; __0x9782 <= MathEx.PI * 2 + __0x9773 * .5f; __0x9782 += __0x9773 )
				{
					Vector3 __0x9783 = __0x9771 + __0x9777 * ( new Vector3( Math.Sin( __0x9782 ),
						Math.Cos( __0x9782 ), 0 ) * __0x9774 );
					if( __0x9782 != 0 && ( __0x10082( __0x9783 ) <= __0x9775 || Owner.SceneMode2D ) &&
						IsMouseNearLine( __0x9776, __0x9783, out __0x10108, out __0x10109, out _ ) )
					{
						return Axis.Z;
					}
					__0x9776 = __0x9783;
				}

				Vector2 __0x9784 = Owner.__0x9355.Viewport.MousePosition * __0x9770;

				Vector2 __0x9785;
				if( CameraSettings.ProjectToScreenCoordinates( __0x9771, out __0x9785 ) )
				{
					Vector2 __0x9786 = __0x9785 * __0x9770;
					double __0x9787 = ( __0x9784 - __0x9786 ).Length();

					
					if( Math.Abs( __0x9787 - ArrowPixelSize ) < SelectNearPixels && !Owner.SceneMode2D )
					{
						Vector2 __0x9788 = __0x9784 - __0x9786;
						Vector2 __0x9789 = __0x9788.GetNormalize();

						__0x10108 = ( __0x9786 + __0x9789 * ArrowPixelSize );
						__0x10109 = Math.Atan2( __0x9788.Y, __0x9788.X ) + MathEx.PI / 2;

						return Axis.Radius;
					}

					
					if( __0x9787 < ( ArrowPixelSize ) * .75f + SelectNearPixels )
						return Axis.InnerCircle;
				}

				return Axis.None;
			}

			double __0x10082( Vector3 __0x10110 )
			{
				return ( CameraSettings.Position - __0x10110 ).Length();
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10056() )
					return false;
				Vector2 __0x9790;
				Radian __0x9791;
				Axis __0x9792 = __0x10081( out __0x9790, out __0x9791 );
				return __0x9792 != Axis.None;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10056() )
					return false;

				Vector2 __0x9793;
				Radian __0x9794;
				Axis __0x9795 = __0x10081( out __0x9793, out __0x9794 );

				if( __0x9795 != Axis.None )
				{
					__0x9764 = Owner.__0x10047();

					Vector2 __0x9796;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9764, out __0x9796 ) )
					{
						Vector2 __0x9797 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

						__0x9765 = __0x9795;
						__0x9766 = __0x9793;
						__0x9767 = __0x9794;
						__0x9768 = Viewport.MousePosition;
						
						__0x9769 = "";
						__0x9763 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9798 = 0; __0x9798 < Owner.Objects.Count; __0x9798++ )
						{
							TransformToolObject __0x9799 = Owner.Objects[ __0x9798 ];
							__0x9763[ __0x9798 ] = new TransformOfObject( __0x9799.Position, __0x9799.Rotation, __0x9799.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9763 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9800 = 0; __0x9800 < Owner.Objects.Count; __0x9800++ )
				{
					TransformToolObject __0x9801 = Owner.Objects[ __0x9800 ];
					__0x9763[ __0x9800 ] = new TransformOfObject( __0x9801.Position, __0x9801.Rotation, __0x9801.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9763 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10083();
				__0x9763 = null;
			}

			void __0x10083()
			{
				if( __0x9763 != null && Owner.Objects.Count == __0x9763.Length )
				{
					for( int __0x9802 = 0; __0x9802 < Owner.Objects.Count; __0x9802++ )
					{
						Owner.Objects[ __0x9802 ].Position = __0x9763[ __0x9802 ].position;
						Owner.Objects[ __0x9802 ].Rotation = __0x9763[ __0x9802 ].rotation;
					}
				}
			}

			Quaternion __0x10084()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
					{
						if( modify_Activated )
							return __0x9763[ 0 ].rotation;
						else
							return Owner.Objects[ 0 ].Rotation;
					}
				}
				return Quaternion.Identity;
			}

			void __0x10085( ref Radian __0x10111 )
			{
				
				Degree __0x9803 = Owner.__0x10052();
				if( __0x9803 != 0 )
				{
					Radian __0x9804 = __0x9803.InRadians();
					__0x10111 += __0x9804 / 2;
					__0x10111 /= __0x9804;
					__0x10111 = (int)__0x10111;
					__0x10111 *= __0x9804;
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !owner.__0x9355.Viewport.MouseRelativeMode )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x9805 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					var __0x9806 = owner.__0x9355.Viewport.CameraSettings;
					Vector2 __0x9807 = owner.__0x9355.Viewport.MousePosition * __0x9805 + cursorTransitionOnScreenBorderOffset;

					Vector2 __0x9808 = __0x9768 * __0x9805;
					Vector2 __0x9809 = __0x9807 - __0x9808;
					Quaternion __0x9810 = __0x10084();
					double __0x9811 = ProjectSettings.Get.SceneEditor.TransformToolRotationSensitivity / 150;

					Quaternion __0x9812 = Quaternion.Identity;

					if( __0x9765 == Axis.X || __0x9765 == Axis.Y || __0x9765 == Axis.Z ||
						__0x9765 == Axis.Radius )
					{
						Radian __0x9813;
						{
							Matrix2 __0x9814 = Matrix2.FromRotate( __0x9767 );
							Vector2 __0x9815 = __0x9814 * __0x9809;
							__0x9813 = __0x9815.X * __0x9811;
							__0x10085( ref __0x9813 );
						}

						string __0x9816 = 0.0f.ToString( "F2" );

						switch( __0x9765 )
						{
						case Axis.X:
							__0x9812 = new Quaternion( new Vector3( Math.Sin( -__0x9813 / 2 ), 0, 0 ), Math.Cos( -__0x9813 / 2 ) );
							__0x9812 = __0x9810 * __0x9812.GetNormalize() * __0x9810.GetInverse();
							__0x9769 = string.Format( "[{0} {1} {2}]", ( (double)__0x9813.InDegrees() ).ToString( "F2" ), __0x9816, __0x9816 );
							break;

						case Axis.Y:
							__0x9812 = new Quaternion( new Vector3( 0, Math.Sin( __0x9813 / 2 ), 0 ), Math.Cos( __0x9813 / 2 ) );
							__0x9812 = __0x9810 * __0x9812.GetNormalize() * __0x9810.GetInverse();
							__0x9769 = string.Format( "[{0} {1} {2}]", __0x9816, ( (double)-__0x9813.InDegrees() ).ToString( "F2" ), __0x9816 );
							break;

						case Axis.Z:
							__0x9812 = new Quaternion( new Vector3( 0, 0, Math.Sin( -__0x9813 / 2 ) ), Math.Cos( -__0x9813 / 2 ) );
							__0x9812 = __0x9810 * __0x9812.GetNormalize() * __0x9810.GetInverse();
							__0x9769 = string.Format( "[{0} {1} {2}]", __0x9816, __0x9816, ( (double)__0x9813.InDegrees() ).ToString( "F2" ) );
							break;

						case Axis.Radius:
							Vector3 __0x9817 = Vector3.Cross( __0x9806.Direction, __0x9806.Up );
							Matrix3 __0x9818 = new Matrix3( __0x9806.Direction, -__0x9817, __0x9806.Up );
							Matrix3 __0x9819 = __0x9818 * Matrix3.FromRotateByX( -__0x9813 ) * __0x9818.GetInverse();
							__0x9812 = __0x9819.ToQuaternion();
							break;
						}
					}
					else if( __0x9765 == Axis.InnerCircle )
					{
						Radian __0x9820 = __0x9809.X * __0x9811;
						Radian __0x9821 = __0x9809.Y * __0x9811;
						__0x10085( ref __0x9820 );
						__0x10085( ref __0x9821 );

						Vector3 __0x9822 = Vector3.Cross( __0x9806.Direction, __0x9806.Up );
						Matrix3 __0x9823 = new Matrix3( __0x9806.Direction, -__0x9822, __0x9806.Up );

						Matrix3 __0x9824 = Matrix3.FromRotateByZ( -__0x9820 ) * Matrix3.FromRotateByY( __0x9821 );
						Matrix3 __0x9825 = __0x9823 * __0x9824 * __0x9823.GetInverse();
						__0x9812 = __0x9825.ToQuaternion();
					}

					__0x9812.Normalize();

					
					if( __0x9763 != null && Owner.Objects.Count == __0x9763.Length )
						Owner.OnRotationModeUpdateObjects( __0x9763, __0x9764, __0x9812 );
				}
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10056() )
					return false;

				Axis __0x9826 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x9827;
						Radian __0x9828;
						__0x9826 = __0x10081( out __0x9827, out __0x9828 );
					}
					else
						__0x9826 = __0x9765;
				}

				Vector3 __0x9829;
				if( !modify_Activated )
					__0x9829 = Owner.__0x10047();
				else
					__0x9829 = __0x9764;
				double __0x9830 = GetLineWorldThickness( __0x9829 );
				double __0x9831 = GetSize();
				if( __0x9831 == 0 )
					return false;

				return __0x9826 != Axis.None;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10056() )
					return;

				ColorValue __0x9832 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9833 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9834 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9835 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9836 = new ColorValue( .66f, .66f, .66f );
				ColorValue __0x9837 = new ColorValue( .33f, .33f, .33f );
				ColorValue __0x9838 = new ColorValue( 0, 0, 0, ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity );

				Axis __0x9839 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x9840;
						Radian __0x9841;
						__0x9839 = __0x10081( out __0x9840, out __0x9841 );
					}
					else
						__0x9839 = __0x9765;
				}

				Vector3 __0x9842;
				if( !modify_Activated )
					__0x9842 = Owner.__0x10047();
				else
					__0x9842 = __0x9764;
				double __0x9843 = GetLineWorldThickness( __0x9842 );
				double __0x9844 = GetSize();
				if( __0x9844 == 0 )
					return;

				

				const double __0x9845 = MathEx.PI / 64;

				double __0x9846 = __0x9844 * .75f;
				double __0x9847 = __0x10082( __0x9842 );
				Vector3 __0x9848 = Vector3.Cross( CameraSettings.Direction, CameraSettings.Up );
				Vector3 __0x9849 = Vector3.Zero;
				Quaternion __0x9850 = __0x10084();

				for( int __0x9851 = 0; __0x9851 < 5; __0x9851++ )
				{
					bool __0x9852 = __0x9851 <= 3;
					if( __0x9852 && ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity == 0 )
						continue;

					var __0x9853 = 0.0;
					if( __0x9852 )
						__0x9853 = ( (double)__0x9851 + 1.0 ) / 4.0;

					if( __0x9852 )
						DebugGeometry.SetColor( __0x9838 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					if( __0x9839 == Axis.InnerCircle && !__0x9852 )
					{
						if( !__0x9852 )
							DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );
																							

						List<Vector3> __0x9854 = new List<Vector3>();

						for( double __0x9855 = 0; __0x9855 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9855 += __0x9845 )
						{
							Vector3 __0x9856 = __0x9842;
							__0x9856 += __0x9848 * Math.Cos( __0x9855 ) * __0x9846;
							__0x9856 += CameraSettings.Up * Math.Sin( __0x9855 ) * __0x9846;

							if( __0x9855 != 0 )
							{
								int __0x9857 = __0x9854.Count;

								__0x9854.Add( __0x9842 );
								__0x9854.Add( __0x9849 );
								__0x9854.Add( __0x9856 );
							}
							__0x9849 = __0x9856;
						}

						DebugGeometry.AddTriangles( __0x9854, Matrix4.Identity, false, false );
					}

					
					
					if( !__0x9852 && Owner.Objects.Count <= 30 )
					{
						foreach( TransformToolObject __0x10044 in Owner.Objects )
						{
							var __0x9858 = __0x9844 / 3;
							double __0x9859 = 1;
							double __0x9860 = GetLineWorldThickness( __0x10044.Position );

							Matrix4 __0x9861 = new Matrix4( __0x10044.Rotation.ToMatrix3() * Matrix3.FromScale( new Vector3( __0x9858, __0x9858, __0x9858 ) ), __0x10044.Position );

							var __0x9862 = __0x9858 / 4;
							DebugGeometry.SetColor( new ColorValue( 1, 0, 0, __0x9859 ), false );
							DebugGeometry.AddArrow( __0x9861 * Vector3.Zero, __0x9861 * Vector3.XAxis, __0x9862, 0, true, __0x9860 );
							DebugGeometry.SetColor( new ColorValue( 0, 1, 0, __0x9859 ), false );
							DebugGeometry.AddArrow( __0x9861 * Vector3.Zero, __0x9861 * Vector3.YAxis, __0x9862, 0, true, __0x9860 );
							DebugGeometry.SetColor( new ColorValue( 0, 0, 1, __0x9859 ), false );
							DebugGeometry.AddArrow( __0x9861 * Vector3.Zero, __0x9861 * Vector3.ZAxis, __0x9862, 0, true, __0x9860 );
						}
					}

					
					{
						List<Vector3> __0x9863 = new List<Vector3>( 64 );
						for( double __0x9864 = 0; __0x9864 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9864 += __0x9845 )
						{
							Vector3 __0x9865 = __0x9842;
							__0x9865 += __0x9848 * Math.Cos( __0x9864 ) * __0x9846;
							__0x9865 += CameraSettings.Up * Math.Sin( __0x9864 ) * __0x9846;
							__0x9863.Add( __0x9865 );
						}
						if( !__0x9852 )
							DebugGeometry.SetColor( __0x9837, false );
						AddPolygonalChain( __0x9863.ToArray(), __0x9843, __0x9853 );
					}
					
					
					
					
					
					
					
					
					
					
					

					
					if( !Owner.SceneMode2D )
					{
						List<Vector3> __0x9866 = new List<Vector3>( 64 );
						for( double __0x9867 = 0; __0x9867 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9867 += __0x9845 )
						{
							Vector3 __0x9868 = __0x9842;
							__0x9868 += __0x9848 * Math.Cos( __0x9867 ) * __0x9844;
							__0x9868 += CameraSettings.Up * Math.Sin( __0x9867 ) * __0x9844;
							__0x9866.Add( __0x9868 );
						}
						if( !__0x9852 )
							DebugGeometry.SetColor( ( __0x9839 == Axis.Radius ) ? __0x9832 : __0x9836, false );
						AddPolygonalChain( __0x9866.ToArray(), __0x9843, __0x9853 );
					}
					
					
					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x9869 = new List<Vector3>( 64 );
						List<bool> __0x9870 = new List<bool>( 64 );
						for( double __0x9871 = 0; __0x9871 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9871 += __0x9845 )
						{
							Vector3 __0x9872 = __0x9842 + __0x9850 * ( new Vector3( 0, Math.Sin( __0x9871 ),
								Math.Cos( __0x9871 ) ) * __0x9846 );
							__0x9869.Add( __0x9872 );
							bool __0x9873 = __0x10082( __0x9872 ) > __0x9847;
							__0x9870.Add( __0x9873 );
							
							
						}
						if( !__0x9852 )
							DebugGeometry.SetColor( ( __0x9839 == Axis.X ) ? __0x9832 : __0x9833, false );

						List<Vector3> __0x9874 = new List<Vector3>( 64 );
						for( int __0x9875 = 0; __0x9875 < __0x9869.Count; __0x9875++ )
						{
							if( !__0x9870[ __0x9875 ] )
							{
								__0x9874.Add( __0x9869[ __0x9875 ] );
							}
							else
							{
								if( __0x9874.Count != 0 )
								{
									AddPolygonalChain( __0x9874.ToArray(), __0x9843, __0x9853 );
									__0x9874.Clear();
								}
							}
						}
						if( __0x9874.Count != 0 )
						{
							AddPolygonalChain( __0x9874.ToArray(), __0x9843, __0x9853 );
							__0x9874.Clear();
						}
					}
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x9876 = new List<Vector3>( 64 );
						List<bool> __0x9877 = new List<bool>( 64 );
						for( double __0x9878 = 0; __0x9878 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9878 += __0x9845 )
						{
							Vector3 __0x9879 = __0x9842 + __0x9850 * ( new Vector3( Math.Sin( __0x9878 ), 0,
								Math.Cos( __0x9878 ) ) * __0x9846 );
							__0x9876.Add( __0x9879 );
							bool __0x9880 = __0x10082( __0x9879 ) > __0x9847;
							__0x9877.Add( __0x9880 );
							
							
						}
						if( !__0x9852 )
							DebugGeometry.SetColor( ( __0x9839 == Axis.Y ) ? __0x9832 : __0x9834, false );

						List<Vector3> __0x9881 = new List<Vector3>( 64 );
						for( int __0x9882 = 0; __0x9882 < __0x9876.Count; __0x9882++ )
						{
							if( !__0x9877[ __0x9882 ] )
							{
								__0x9881.Add( __0x9876[ __0x9882 ] );
							}
							else
							{
								if( __0x9881.Count != 0 )
								{
									AddPolygonalChain( __0x9881.ToArray(), __0x9843, __0x9853 );
									__0x9881.Clear();
								}
							}
						}
						if( __0x9881.Count != 0 )
						{
							AddPolygonalChain( __0x9881.ToArray(), __0x9843, __0x9853 );
							__0x9881.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x9883 = new List<Vector3>( 64 );
						List<bool> __0x9884 = new List<bool>( 64 );
						for( double __0x9885 = 0; __0x9885 <= MathEx.PI * 2 + __0x9845 * .5f; __0x9885 += __0x9845 )
						{
							Vector3 __0x9886 = __0x9842 + __0x9850 * ( new Vector3( Math.Sin( __0x9885 ),
								Math.Cos( __0x9885 ), 0 ) * __0x9846 );
							__0x9883.Add( __0x9886 );
							bool __0x9887 = __0x10082( __0x9886 ) > __0x9847;
							if( Owner.SceneMode2D )
								__0x9887 = false;
							__0x9884.Add( __0x9887 );
							
							
						}
						if( !__0x9852 )
							DebugGeometry.SetColor( ( __0x9839 == Axis.Z ) ? __0x9832 : __0x9835, false );

						List<Vector3> __0x9888 = new List<Vector3>( 64 );
						for( int __0x9889 = 0; __0x9889 < __0x9883.Count; __0x9889++ )
						{
							if( !__0x9884[ __0x9889 ] )
							{
								__0x9888.Add( __0x9883[ __0x9889 ] );
							}
							else
							{
								if( __0x9888.Count != 0 )
								{
									AddPolygonalChain( __0x9888.ToArray(), __0x9843, __0x9853 );
									__0x9888.Clear();
								}
							}
						}
						if( __0x9888.Count != 0 )
						{
							AddPolygonalChain( __0x9888.ToArray(), __0x9843, __0x9853 );
							__0x9888.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					if( __0x9839 != Axis.None && __0x9839 != Axis.InnerCircle )
					{
						Plane __0x9890 = new Plane();
						switch( __0x9839 )
						{
						case Axis.X: __0x9890 = Plane.FromPointAndNormal( __0x9842, __0x10084() * Vector3.XAxis ); break;
						case Axis.Y: __0x9890 = Plane.FromPointAndNormal( __0x9842, __0x10084() * Vector3.YAxis ); break;
						case Axis.Z: __0x9890 = Plane.FromPointAndNormal( __0x9842, __0x10084() * Vector3.ZAxis ); break;
						case Axis.Radius: __0x9890 = Plane.FromPointAndNormal( __0x9842, CameraSettings.Direction ); break;
						}

						Vector2 __0x9891;
						if( modify_Activated || __0x9763 != null )
							__0x9891 = __0x9768;
						else
							__0x9891 = Viewport.MousePosition;
						Ray __0x9892 = CameraSettings.GetRayByScreenCoordinates( __0x9891 );

						Vector3 __0x9893;
						if( __0x9890.Intersects( __0x9892, out __0x9893 ) )
						{
							Vector3 __0x9894 = ( __0x9893 - __0x9842 ).GetNormalize();
							Vector3 __0x9895;
							if( __0x9839 == Axis.Radius )
								__0x9895 = __0x9842 + __0x9894 * __0x9844;
							else
								__0x9895 = __0x9842 + __0x9894 * __0x9846;

							double __0x9896 = __0x9844 * .3f;

							Vector3 __0x9897 = Vector3.Cross( __0x9894, __0x9890.Normal );
							Vector3 __0x9898 = __0x9895 + __0x9897 * __0x9896;
							Vector3 __0x9899 = __0x9895 - __0x9897 * __0x9896;

							if( !__0x9852 )
								DebugGeometry.SetColor( __0x9832, false );

							{
								Vector3 __0x9900 = ( __0x9898 - __0x9895 ).GetNormalize();
								AddCone(
									__0x9895 + __0x9900 * __0x9896 / 2,
									__0x9898,
									__0x9896 / 8, __0x9843, __0x9853 );
							}
							{
								Vector3 __0x9901 = ( __0x9899 - __0x9895 ).GetNormalize();
								AddCone(
									__0x9895 + __0x9901 * __0x9896 / 2,
									__0x9899,
									__0x9896 / 8, __0x9843, __0x9853 );
							}
						}
					}
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10056() )
					return;

				var __0x9902 = Viewport.CanvasRenderer;
				Vector2 __0x9903 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Axis __0x9904 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated && !modify_Prepare )
					{
						Vector2 __0x9905;
						Radian __0x9906;
						__0x9904 = __0x10081( out __0x9905, out __0x9906 );
					}
					else
						__0x9904 = __0x9765;
				}

				
				if( __0x9362 != null && __0x9904 != Axis.None )
					ViewportControl.OneFrameChangeCursor = __0x9362;

				
				if( modify_Activated && !string.IsNullOrEmpty( __0x9769 ) )
				{
					Vector2 __0x9907;
					if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10047(), out __0x9907 ) )
					{
						double __0x9908 = ( ArrowPixelSize / __0x9903.Y ) * 1.2f;
						Vector2 __0x9909 = new Vector2( __0x9907.X, __0x9907.Y - __0x9908 );
						AddTextWithShadow( __0x9902, __0x9769, __0x9909, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
							new ColorValue( 1, 1, 0 ), 2 );
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10123 : ModeClass
		{
			Vector2 __0x9910;
			Vector2 __0x9911;
			TransformOfObject[] __0x9912;
			Vector3 __0x9913;
			__0x10124 __0x9914;
			string __0x9915 = "";

			

			struct __0x10124
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10124( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			

			Quaternion __0x10086()
			{
				if( Owner.Objects.Count == 0 )
					return Quaternion.Identity;
				return Owner.Objects[ 0 ].Rotation;
			}

			void __0x10087( out Vector3 __0x10112, out Vector3 __0x10113, out Vector3 __0x10114 )
			{
				Vector3 __0x9916 = Owner.__0x10047();
				Quaternion __0x9917 = __0x10086();
				double __0x9918 = GetSize();

				{
					Vector3 __0x9919 = __0x9916 + __0x9917 * new Vector3( __0x9918, 0, 0 );
					Vector3 __0x9920 = __0x9916 - __0x9917 * new Vector3( __0x9918, 0, 0 );
					Vector3 __0x9921 = ( ( __0x10089( __0x9919 ) < __0x10089( __0x9920 ) ) || Owner.SceneMode2D ) ? __0x9919 : __0x9920;
					__0x10112 = __0x9921 - __0x9916;
				}

				{
					Vector3 __0x9922 = __0x9916 + __0x9917 * new Vector3( 0, __0x9918, 0 );
					Vector3 __0x9923 = __0x9916 - __0x9917 * new Vector3( 0, __0x9918, 0 );
					Vector3 __0x9924 = ( ( __0x10089( __0x9922 ) < __0x10089( __0x9923 ) ) || Owner.SceneMode2D ) ? __0x9922 : __0x9923;
					__0x10113 = __0x9924 - __0x9916;
				}

				{
					Vector3 __0x9925 = __0x9916 + __0x9917 * new Vector3( 0, 0, __0x9918 );
					Vector3 __0x9926 = __0x9916 - __0x9917 * new Vector3( 0, 0, __0x9918 );
					Vector3 __0x9927 = ( ( __0x10089( __0x9925 ) < __0x10089( __0x9926 ) ) || Owner.SceneMode2D ) ? __0x9925 : __0x9926;
					__0x10114 = __0x9927 - __0x9916;
				}
			}

			__0x10124 __0x10088()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9928 = Owner.__0x10047();
				double __0x9929 = GetSize();
				if( __0x9929 == 0 )
					return new __0x10124( false, false, false );

				Vector3 __0x9930, __0x9931, __0x9932;
				__0x10087( out __0x9930, out __0x9931, out __0x9932 );

				
				{
					Vector3 __0x9933 = __0x9928 + __0x9930 * .5f;
					Vector3 __0x9934 = __0x9928 + __0x9931 * .5f;
					Vector3 __0x9935 = __0x9928 + __0x9932 * .5f;
					if( IsMouseOverTriangle( __0x9935, __0x9933, __0x9934 ) )
						return new __0x10124( true, true, true );
				}

				
				{
					Vector3 __0x9936 = __0x9928 + __0x9930 * .7f;
					Vector3 __0x9937 = __0x9928 + __0x9931 * .7f;
					Vector3 __0x9938 = __0x9928 + __0x9930 * .5f;
					Vector3 __0x9939 = __0x9928 + __0x9931 * .5f;
					if( IsMouseOverTriangle( __0x9938, __0x9936, __0x9937 ) || IsMouseOverTriangle( __0x9937, __0x9939, __0x9938 ) )
						return new __0x10124( true, true, false );
				}

				
				{
					Vector3 __0x9940 = __0x9928 + __0x9930 * .7f;
					Vector3 __0x9941 = __0x9928 + __0x9932 * .7f;
					Vector3 __0x9942 = __0x9928 + __0x9930 * .5f;
					Vector3 __0x9943 = __0x9928 + __0x9932 * .5f;
					if( IsMouseOverTriangle( __0x9942, __0x9940, __0x9941 ) || IsMouseOverTriangle( __0x9941, __0x9943, __0x9942 ) )
						return new __0x10124( true, false, true );
				}

				
				{
					Vector3 __0x9944 = __0x9928 + __0x9931 * .7f;
					Vector3 __0x9945 = __0x9928 + __0x9932 * .7f;
					Vector3 __0x9946 = __0x9928 + __0x9931 * .5f;
					Vector3 __0x9947 = __0x9928 + __0x9932 * .5f;
					if( IsMouseOverTriangle( __0x9946, __0x9944, __0x9945 ) || IsMouseOverTriangle( __0x9945, __0x9947, __0x9946 ) )
						return new __0x10124( false, true, true );
				}

				
				if( IsMouseNearLine( __0x9928, __0x9928 + __0x9930 ) )
					return new __0x10124( true, false, false );

				
				if( IsMouseNearLine( __0x9928, __0x9928 + __0x9931 ) )
					return new __0x10124( false, true, false );

				
				if( IsMouseNearLine( __0x9928, __0x9928 + __0x9932 ) )
					return new __0x10124( false, false, true );

				return new __0x10124( false, false, false );
			}

			double __0x10089( Vector3 __0x10115 )
			{
				return ( Viewport.CameraSettings.Position - __0x10115 ).Length();
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10057() )
					return false;
				__0x10124 __0x9948 = __0x10088();
				return __0x9948.TrueCount != 0;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10057() )
					return false;

				__0x10124 __0x9949 = __0x10088();
				if( __0x9949.TrueCount != 0 )
				{
					__0x9913 = Owner.__0x10047();
					Vector2 __0x9950;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9913, out __0x9950 ) )
					{
						__0x9910 = Viewport.MousePosition - __0x9950;
						__0x9911 = Viewport.MousePosition;
						
						__0x9914 = __0x9949;
						__0x9915 = "";
						__0x9912 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9951 = 0; __0x9951 < Owner.Objects.Count; __0x9951++ )
						{
							TransformToolObject __0x9952 = Owner.Objects[ __0x9951 ];
							__0x9912[ __0x9951 ] = new TransformOfObject( __0x9952.Position, __0x9952.Rotation, __0x9952.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9912 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9953 = 0; __0x9953 < Owner.Objects.Count; __0x9953++ )
				{
					TransformToolObject __0x9954 = Owner.Objects[ __0x9953 ];
					__0x9912[ __0x9953 ] = new TransformOfObject( __0x9954.Position, __0x9954.Rotation, __0x9954.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9912 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10090();
				__0x9912 = null;
			}

			void __0x10090()
			{
				if( __0x9912 != null && Owner.Objects.Count == __0x9912.Length )
				{
					for( int __0x9955 = 0; __0x9955 < Owner.Objects.Count; __0x9955++ )
					{
						Owner.Objects[ __0x9955 ].Position = __0x9912[ __0x9955 ].position;
						Owner.Objects[ __0x9955 ].Scale = __0x9912[ __0x9955 ].scale;
					}
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !Viewport.MouseRelativeMode )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x9956 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					Vector2 __0x9957 = mouse + cursorTransitionOnScreenBorderOffset / __0x9956;

					Vector2 __0x9958 = __0x9957 - __0x9910;
					Ray __0x9959 = CameraSettings.GetRayByScreenCoordinates( __0x9958 );

					Vector3 __0x9960 = __0x9913;
					double __0x9961 = GetSize();

					if( __0x9961 == 0 )
						return;

					Vector3 __0x9962, __0x9963, __0x9964;
					__0x10087( out __0x9962, out __0x9963, out __0x9964 );

					double __0x9965 = 0;

					if( !double.IsNaN( __0x9959.Direction.X ) )
					{
						Vector2 __0x9966 = ( __0x9957 - __0x9911 ) * __0x9956;
						double __0x9967 = Math.Atan2( -__0x9966.Y, __0x9966.X );

						if( __0x9914.TrueCount == 3 )
						{
							__0x9965 = __0x9957.Y - __0x9911.Y;
							__0x9965 *= -1;
							__0x9965 *= __0x9956.Y;
						}
						else
						{
							Vector2 __0x9968;
							if( CameraSettings.ProjectToScreenCoordinates( __0x9913, out __0x9968 ) )
							{
								__0x9968 *= __0x9956;

								__0x9965 = 0;

								if( __0x9914.x )
								{
									Vector2 __0x9969;
									CameraSettings.ProjectToScreenCoordinates( __0x9960 + __0x9962, out __0x9969 );
									if( __0x9969.X != 0 && __0x9969.Y != 0 )
									{
										__0x9969 *= __0x9956;
										Vector2 __0x9970 = __0x9969 - __0x9968;
										double __0x9971 = Math.Atan2( -__0x9970.Y, __0x9970.X );
										double __0x9972 = __0x9967 - __0x9971;
										__0x9972 = MathEx.RadianNormalize360( __0x9972 );
										double __0x9973 = Math.Cos( __0x9972 ) * __0x9966.Length();
										__0x9965 += __0x9973;
									}
								}

								if( __0x9914.y )
								{
									Vector2 __0x9974;
									CameraSettings.ProjectToScreenCoordinates( __0x9960 + __0x9963, out __0x9974 );
									if( __0x9974.X != 0 && __0x9974.Y != 0 )
									{
										__0x9974 *= __0x9956;
										Vector2 __0x9975 = __0x9974 - __0x9968;
										double __0x9976 = Math.Atan2( -__0x9975.Y, __0x9975.X );
										double __0x9977 = __0x9967 - __0x9976;
										__0x9977 = MathEx.RadianNormalize360( __0x9977 );
										double __0x9978 = Math.Cos( __0x9977 ) * __0x9966.Length();
										__0x9965 += __0x9978;
									}
								}

								if( __0x9914.z )
								{
									Vector2 __0x9979;
									CameraSettings.ProjectToScreenCoordinates( __0x9960 + __0x9964, out __0x9979 );
									if( __0x9979.X != 0 && __0x9979.Y != 0 )
									{
										__0x9979 *= __0x9956;
										Vector2 __0x9980 = __0x9979 - __0x9968;
										double __0x9981 = Math.Atan2( -__0x9980.Y, __0x9980.X );
										double __0x9982 = __0x9967 - __0x9981;
										__0x9982 = MathEx.RadianNormalize360( __0x9982 );
										double __0x9983 = Math.Cos( __0x9982 ) * __0x9966.Length();
										__0x9965 += __0x9983;
									}
								}
							}
						}

						const double __0x9984 = .01f;
						__0x9965 *= __0x9984;


						double __0x9985;
						if( __0x9965 > 0 )
						{
							double __0x9986 = Owner.__0x10053();
							if( __0x9986 != 0 )
							{
								__0x9965 += __0x9986 / 2;
								__0x9965 /= __0x9986;
								__0x9965 = (int)__0x9965;
								__0x9965 *= __0x9986;
							}

							__0x9985 = __0x9965 + 1.0f;
						}
						else
						{
							double __0x9987 = Owner.__0x10053();
							if( __0x9987 != 0 )
							{
								__0x9965 -= __0x9987 / 2;
								__0x9965 /= __0x9987;
								__0x9965 = (int)__0x9965;
								__0x9965 *= __0x9987;
							}

							__0x9985 = 1.0f / ( 1.0f - __0x9965 );
						}

						Vector3 __0x9988 = new Vector3( __0x9914.x ? __0x9985 : 1, __0x9914.y ? __0x9985 : 1, __0x9914.z ? __0x9985 : 1 );

						
						if( __0x9912 != null && Owner.Objects.Count == __0x9912.Length )
							Owner.OnScaleModeUpdateObjects( __0x9912, __0x9913, __0x9988 );

						__0x9915 = string.Format( "[{0} {1} {2}]", __0x9988.X.ToString( "F2" ), __0x9988.Y.ToString( "F2" ),
							__0x9988.Z.ToString( "F2" ) );
					}
				}
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10057() )
					return false;

				__0x10124 __0x9989 = new __0x10124( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9989 = __0x10088();
					else
						__0x9989 = __0x9914;
				}

				Vector3 __0x9990 = Owner.__0x10047();
				double __0x9991 = GetLineWorldThickness( __0x9990 );
				double __0x9992 = GetSize();
				if( __0x9992 == 0 )
					return false;

				return __0x9989.TrueCount != 0;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10057() )
					return;

				ColorValue __0x9993 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9994 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9995 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9996 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9997 = new ColorValue( 0, 0, 0, ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity );

				__0x10124 __0x9998 = new __0x10124( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9998 = __0x10088();
					else
						__0x9998 = __0x9914;
				}

				Vector3 __0x9999 = Owner.__0x10047();
				double __0x10000 = GetLineWorldThickness( __0x9999 );
				double __0x10001 = GetSize();
				if( __0x10001 == 0 )
					return;

				
				

				Vector3 __0x10002, __0x10003, __0x10004;
				__0x10087( out __0x10002, out __0x10003, out __0x10004 );

				
				for( int __0x10005 = 0; __0x10005 < 5; __0x10005++ )
				{
					bool __0x10006 = __0x10005 <= 3;
					if( __0x10006 && ProjectSettings.Get.SceneEditor.TransformToolShadowIntensity == 0 )
						continue;

					var __0x10007 = 0.0;
					if( __0x10006 )
						__0x10007 = ( (double)__0x10005 + 1.0 ) / 4.0;

					if( __0x10006 )
						DebugGeometry.SetColor( __0x9997 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					if( !__0x10006 )
						DebugGeometry.SetColor( ( __0x9998.x && __0x9998.TrueCount != 3 ) ? __0x9993 : __0x9994, false );
					AddLine( __0x9999, __0x9999 + __0x10002, __0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10002, __0x10001 / 80 ), __0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10002, __0x10001 / 40 ), __0x10000, __0x10007 );

					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.x && __0x9998.y ? __0x9993 : __0x9994, false );
					AddLine( __0x9999 + __0x10002 * .7f, __0x9999 + ( __0x10002 * .7f + __0x10003 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10002 * .5f, __0x9999 + ( __0x10002 * .5f + __0x10003 * .5f ) / 2,
						 __0x10000, __0x10007 );
					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.x && __0x9998.z ? __0x9993 : __0x9994, false );
					AddLine( __0x9999 + __0x10002 * .7f, __0x9999 + ( __0x10002 * .7f + __0x10004 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10002 * .5f, __0x9999 + ( __0x10002 * .5f + __0x10004 * .5f ) / 2,
						 __0x10000, __0x10007 );

					
					if( !__0x10006 )
						DebugGeometry.SetColor( ( __0x9998.y && __0x9998.TrueCount != 3 ) ? __0x9993 : __0x9995, false );
					AddLine( __0x9999, __0x9999 + __0x10003,
						 __0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10003, __0x10001 / 80 ), __0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10003, __0x10001 / 40 ), __0x10000, __0x10007 );

					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.y && __0x9998.x ? __0x9993 : __0x9995, false );
					AddLine( __0x9999 + __0x10003 * .7f, __0x9999 + ( __0x10003 * .7f + __0x10002 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10003 * .5f, __0x9999 + ( __0x10003 * .5f + __0x10002 * .5f ) / 2,
						 __0x10000, __0x10007 );
					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.y && __0x9998.z ? __0x9993 : __0x9995, false );
					AddLine( __0x9999 + __0x10003 * .7f, __0x9999 + ( __0x10003 * .7f + __0x10004 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10003 * .5f, __0x9999 + ( __0x10003 * .5f + __0x10004 * .5f ) / 2,
						 __0x10000, __0x10007 );

					
					if( !__0x10006 )
						DebugGeometry.SetColor( ( __0x9998.z && __0x9998.TrueCount != 3 ) ? __0x9993 : __0x9996, false );
					AddLine( __0x9999, __0x9999 + __0x10004,
						__0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10004, __0x10001 / 80 ), __0x10000, __0x10007 );
					AddSphere( new Sphere( __0x9999 + __0x10004, __0x10001 / 40 ), __0x10000, __0x10007 );

					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.z && __0x9998.x ? __0x9993 : __0x9996, false );
					AddLine( __0x9999 + __0x10004 * .7f, __0x9999 + ( __0x10004 * .7f + __0x10002 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10004 * .5f, __0x9999 + ( __0x10004 * .5f + __0x10002 * .5f ) / 2,
						 __0x10000, __0x10007 );
					if( !__0x10006 )
						DebugGeometry.SetColor( __0x9998.z && __0x9998.y ? __0x9993 : __0x9996, false );
					AddLine( __0x9999 + __0x10004 * .7f, __0x9999 + ( __0x10004 * .7f + __0x10003 * .7f ) / 2,
						 __0x10000, __0x10007 );
					AddLine( __0x9999 + __0x10004 * .5f, __0x9999 + ( __0x10004 * .5f + __0x10003 * .5f ) / 2,
						 __0x10000, __0x10007 );
				}

				
				if( __0x9998.TrueCount >= 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x10008 = new List<Vector3>();
					List<int> __0x10009 = new List<int>();

					if( __0x9998.TrueCount == 3 )
					{
						__0x10008.Add( __0x9999 + __0x10002 * .5f );
						__0x10008.Add( __0x9999 + __0x10003 * .5f );
						__0x10008.Add( __0x9999 + __0x10004 * .5f );

						__0x10009.Add( 0 ); __0x10009.Add( 1 ); __0x10009.Add( 2 );
					}
					else
					{
						Vector3 __0x10010;
						Vector3 __0x10011;

						if( __0x9998.x )
						{
							__0x10010 = __0x10002;
							__0x10011 = __0x9998.y ? __0x10003 : __0x10004;
						}
						else
						{
							__0x10010 = __0x10003;
							__0x10011 = __0x10004;
						}

						__0x10008.Add( __0x9999 + __0x10010 * .5f );
						__0x10008.Add( __0x9999 + __0x10010 * .7f );
						__0x10008.Add( __0x9999 + __0x10011 * .7f );
						__0x10008.Add( __0x9999 + __0x10011 * .5f );

						__0x10009.Add( 0 ); __0x10009.Add( 1 ); __0x10009.Add( 2 );
						__0x10009.Add( 2 ); __0x10009.Add( 3 ); __0x10009.Add( 0 );
					}

					DebugGeometry.AddTriangles( __0x10008, __0x10009, Matrix4.Identity, false, false );
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10057() )
					return;

				var __0x10012 = Viewport.CanvasRenderer;
				Vector2 __0x10013 = Viewport.SizeInPixels.ToVector2();

				__0x10124 __0x10014 = new __0x10124( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10014 = __0x10088();
					else
						__0x10014 = __0x9914;
				}

				
				if( __0x9363 != null && __0x10014.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9363;

				Vector3 __0x10015, __0x10016, __0x10017;
				__0x10087( out __0x10015, out __0x10016, out __0x10017 );

				Vector3 __0x10018 = Owner.__0x10047();
				Quaternion __0x10019 = __0x10086();
				double __0x10020 = GetSize();
				if( __0x10020 != 0 )
				{
					
					{
						double __0x10021 = ( ArrowPixelSize / 20.0f ) / __0x10013.Y;

						Vector2 __0x10022;

						if( CameraSettings.ProjectToScreenCoordinates( __0x10018 + __0x10015, out __0x10022 ) )
						{
							Vector2 __0x10023 = new Vector2( __0x10022.X, __0x10022.Y - __0x10021 );
							ColorValue __0x10024 = __0x10014.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x10012, "x", __0x10023, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10024, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x10018 + __0x10016, out __0x10022 ) )
						{
							Vector2 __0x10025 = new Vector2( __0x10022.X, __0x10022.Y - __0x10021 );
							ColorValue __0x10026 = __0x10014.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x10012, "y", __0x10025, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10026, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x10018 + __0x10017, out __0x10022 ) )
						{
							Vector2 __0x10027 = new Vector2( __0x10022.X, __0x10022.Y - __0x10021 );
							ColorValue __0x10028 = __0x10014.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
							AddTextWithShadow( __0x10012, "z", __0x10027, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10028, 1 );
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x9915 ) )
					{
						Vector2 __0x10029;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10047(), out __0x10029 ) )
						{
							double __0x10030 = ( ArrowPixelSize / __0x10013.Y ) * 1.2f;
							Vector2 __0x10031 = new Vector2( __0x10029.X, __0x10029.Y - __0x10030 );
							AddTextWithShadow( __0x10012, __0x9915, __0x10031, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents undo/redo system.
	/// </summary>
	public class UndoSystem
	{
		int __0x10125;
		List<Action> __0x10126 = new List<Action>();
		List<Action> __0x10127 = new List<Action>();

		

		/// <summary>
		/// Represents an action of undo/redo system.
		/// </summary>
		public abstract class Action
		{
			protected internal abstract void DoUndo();
			protected internal abstract void DoRedo();

			protected internal abstract void Destroy();
		}

		

		public event System.EventHandler ListOfActionsChanged;
		public event System.EventHandler WasCleaned;

		public delegate void ActionDelegate( Action __0x10137 );
		public event ActionDelegate ActionUndo;
		public event ActionDelegate ActionRedo;
		public event ActionDelegate ActionDestroy;

		public UndoSystem( int maxLevel )
		{
			this.__0x10125 = maxLevel;
		}

		
		public void Dispose()
		{
			Clear();
		}

		public int MaxLevel
		{
			get { return __0x10125; }
			set { __0x10125 = value; }
		}

		public void Clear()
		{
			bool __0x10128 = __0x10127.Count != 0 || __0x10126.Count != 0;

			foreach( Action __0x10134 in __0x10126 )
			{
				__0x10134.Destroy();
				ActionDestroy?.Invoke( __0x10134 );
			}
			__0x10126.Clear();

			foreach( Action __0x10135 in __0x10127 )
			{
				__0x10135.Destroy();
				ActionDestroy?.Invoke( __0x10135 );
			}
			__0x10127.Clear();

			if( __0x10128 )
			{
				ListOfActionsChanged?.Invoke( this, EventArgs.Empty );
			}

			WasCleaned?.Invoke( this, EventArgs.Empty );
		}

		public void CommitAction( Action action )
		{
			foreach( Action __0x10136 in __0x10126 )
			{
				__0x10136.Destroy();
				ActionDestroy?.Invoke( __0x10136 );
			}
			__0x10126.Clear();

			if( __0x10127.Count + 1 >= __0x10125 )
			{
				__0x10127[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10127[ 0 ] );
				__0x10127.RemoveAt( 0 );
			}

			__0x10127.Add( action );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );
		}

		public Action GetTopUndoAction()
		{
			if( __0x10127.Count == 0 )
				return null;
			return __0x10127[ __0x10127.Count - 1 ];
		}

		public Action GetTopRedoAction()
		{
			if( __0x10126.Count == 0 )
				return null;
			return __0x10126[ __0x10126.Count - 1 ];
		}

		public bool DoUndo()
		{
			if( __0x10127.Count == 0 )
				return false;

			
			Action __0x10129 = __0x10127[ __0x10127.Count - 1 ];
			__0x10127.RemoveAt( __0x10127.Count - 1 );

			
			__0x10129.DoUndo();
			ActionUndo?.Invoke( __0x10129 );

			
			if( __0x10126.Count + 1 >= __0x10125 )
			{
				__0x10126[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10126[ 0 ] );
				__0x10126.RemoveAt( 0 );
			}
			__0x10126.Add( __0x10129 );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );

			return true;
		}

		public bool DoRedo()
		{
			if( __0x10126.Count == 0 )
				return false;

			
			Action __0x10130 = __0x10126[ __0x10126.Count - 1 ];
			__0x10126.RemoveAt( __0x10126.Count - 1 );

			
			__0x10130.DoRedo();
			ActionRedo?.Invoke( __0x10130 );

			
			if( __0x10127.Count + 1 >= __0x10125 )
			{
				__0x10127[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10127[ 0 ] );
				__0x10127.RemoveAt( 0 );
			}
			__0x10127.Add( __0x10130 );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );

			return true;
		}

		public string[] DumpDebugToLines()
		{
			List<string> __0x10131 = new List<string>();

			__0x10131.Add( "UndoSystem" );

			__0x10131.Add( "" );
			__0x10131.Add( "Undo actions:" );
			for( int __0x10132 = 0; __0x10132 < __0x10127.Count; __0x10132++ )
				__0x10131.Add( __0x10127[ __0x10132 ].ToString() );

			__0x10131.Add( "" );
			__0x10131.Add( "Redo actions:" );
			for( int __0x10133 = __0x10126.Count - 1; __0x10133 >= 0; __0x10133-- )
				__0x10131.Add( __0x10126[ __0x10133 ].ToString() );

			return __0x10131.ToArray();
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Compound action of undo/redo system.
	/// </summary>
	public class UndoMultiAction : UndoSystem.Action
	{
		List<UndoSystem.Action> __0x10138;

		public UndoMultiAction()
		{
			__0x10138 = new List<UndoSystem.Action>();
		}

		public UndoMultiAction( ICollection<UndoSystem.Action> actions )
		{
			this.__0x10138 = new List<UndoSystem.Action>( actions );
		}

		public void AddAction( UndoSystem.Action action )
		{
			__0x10138.Add( action );
		}

		public void AddActions( IEnumerable<UndoSystem.Action> actions )
		{
			this.__0x10138.AddRange( actions );
		}

		public List<UndoSystem.Action> Actions
		{
			get { return __0x10138; }
		}

		protected internal override void Destroy()
		{
			for( int __0x10139 = 0; __0x10139 < __0x10138.Count; __0x10139++ )
				__0x10138[ __0x10139 ].Destroy();
		}

		protected internal override void DoRedo()
		{
			for( int __0x10140 = 0; __0x10140 < __0x10138.Count; __0x10140++ )
				__0x10138[ __0x10140 ].DoRedo();

			__0x10138.Reverse();
		}

		protected internal override void DoUndo()
		{
			for( int __0x10141 = 0; __0x10141 < __0x10138.Count; __0x10141++ )
				__0x10138[ __0x10141 ].DoUndo();

			__0x10138.Reverse();
		}

		
		
		
		
		
		
		
		

		
		
		
		
	}

	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	

	

	
	/// <summary>
	/// The action of undo/redo system for creating and deleting objects.
	/// </summary>
	public class UndoActionComponentCreateDelete : UndoSystem.Action
	{
		DocumentInstance __0x10142;
		List<Component> __0x10143;
		bool __0x10144;
		Dictionary<Component, __0x10194> __0x10145 = new Dictionary<Component, __0x10194>();

		class __0x10194
		{
			public Component parent;
			public int insertIndex;
		}

		

		public UndoActionComponentCreateDelete( DocumentInstance document, ICollection<Component> objects, bool create )
		{
			this.__0x10142 = document;
			this.__0x10143 = new List<Component>( objects );
			this.__0x10144 = create;

			
			if( !create )
			{
				CollectionUtility.InsertionSort( this.__0x10143, delegate ( Component __0x10190, Component __0x10191 )
				{
					if( __0x10190.Parent != null && __0x10190.Parent == __0x10191.Parent )
						return __0x10190.Parent.Components.IndexOf( __0x10190 ) - __0x10191.Parent.Components.IndexOf( __0x10191 );
					return 0;
				} );
			}

			if( !create )
				__0x10186();
		}

		void __0x10185()
		{
			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();
			ESet<ComponentHierarchyController> __0x10146 = new ESet<ComponentHierarchyController>();
			try
			{
				foreach( var __0x10177 in Objects )
				{
					
					if( __0x10177.Disposed )
						continue;

					__0x10145.TryGetValue( __0x10177, out __0x10194 data );
					if( data != null )
					{
						__0x10145.Remove( __0x10177 );

						data.parent.AddComponent( __0x10177, data.insertIndex );

						if( __0x10177.ParentRoot?.HierarchyController != null )
							__0x10146.AddWithCheckAlreadyContained( __0x10177.ParentRoot?.HierarchyController );
					}
				}
			}
			finally
			{
				foreach( var __0x10178 in __0x10146 )
					__0x10178.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}
		}

		void __0x10186()
		{
			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();
			ESet<ComponentHierarchyController> __0x10147 = new ESet<ComponentHierarchyController>();

			List<Component> __0x10148 = new List<Component>();

			try
			{
				foreach( var __0x10179 in Objects )
				{
					var __0x10149 = __0x10179.Parent;
					if( __0x10149 != null )
					{
						__0x10194 __0x10150 = new __0x10194();
						__0x10150.parent = __0x10149;
						__0x10150.insertIndex = __0x10149.Components.IndexOf( __0x10179 );

						__0x10145[ __0x10179 ] = __0x10150;

						__0x10179.RemoveFromParent( true );

						__0x10148.Add( __0x10179 );

						if( __0x10179.ParentRoot?.HierarchyController != null )
							__0x10147.AddWithCheckAlreadyContained( __0x10179.ParentRoot?.HierarchyController );
					}
				}
			}
			finally
			{
				foreach( var __0x10180 in __0x10147 )
					__0x10180.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}

			
			if( __0x10142 != null )
			{
				foreach( var __0x10181 in EditorAPI.GetAllDocumentWindowsOfDocument( __0x10142 ) )
				{
					var __0x10151 = new ESet<object>( __0x10181.SelectedObjectsSet );
					bool __0x10152 = false;

					foreach( var __0x10182 in __0x10148 )
					{
						if( __0x10151.Remove( __0x10182 ) )
							__0x10152 = true;
					}

					if( __0x10152 )
						__0x10181.SelectObjects( __0x10151 );
				}
			}
			
			
			
			
			
			
			
			

			
			

			
			
			
			
		}

		protected internal override void DoUndo()
		{
			if( __0x10144 )
				__0x10186();
			else
				__0x10185();

			__0x10144 = !__0x10144;
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			
			
			
			
			
			
			

			__0x10143.Clear();
		}

		public DocumentInstance Document
		{
			get { return __0x10142; }
		}

		public List<Component> Objects
		{
			get { return __0x10143; }
		}

		public override string ToString()
		{
			return string.Format( "{0}: Objects: {1}", ( __0x10144 ? "Create" : "Delete" ), __0x10143.Count );
		}
	}

	

	/// <summary>
	/// The action of undo/redo system for moving components relative to other components.
	/// </summary>
	public class UndoActionComponentMove : UndoSystem.Action
	{
		DocumentInstance __0x10153;
		Component __0x10154;
		__0x10195 __0x10155 = new __0x10195();

		class __0x10195
		{
			public Component parent;
			public int insertIndex;
		}

		

		public UndoActionComponentMove( DocumentInstance document, Component obj, Component oldParent, int oldIndex )
		{
			this.__0x10153 = document;
			this.__0x10154 = obj;

			__0x10155.parent = oldParent;
			__0x10155.insertIndex = oldIndex;
		}

		void __0x10187()
		{
			
			if( __0x10154.Disposed )
				return;

			if( __0x10155.parent != __0x10154.Parent )
			{
				var __0x10156 = new __0x10195();
				__0x10156.parent = __0x10154.Parent;
				__0x10156.insertIndex = __0x10154.Parent.Components.IndexOf( __0x10154 );

				__0x10154.Parent.RemoveComponent( __0x10154, false );
				__0x10155.parent.AddComponent( __0x10154, __0x10155.insertIndex );

				__0x10155 = __0x10156;
			}
			else
			{
				var __0x10157 = new __0x10195();
				__0x10157.parent = __0x10155.parent;
				__0x10157.insertIndex = __0x10154.Parent.Components.IndexOf( __0x10154 );

				__0x10155.parent.Components.MoveTo( __0x10154, __0x10155.insertIndex );

				__0x10155 = __0x10157;
			}
		}

		protected internal override void DoUndo()
		{
			__0x10187();
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			__0x10154 = null;
		}

		public DocumentInstance Document
		{
			get { return __0x10153; }
		}

		public Component Obj
		{
			get { return __0x10154; }
		}

		public override string ToString()
		{
			return string.Format( "Move: Object: {0}", __0x10154 );
		}
	}

	

	
	
	
	
	
	
	
	
	
	
	

	/// <summary>
	/// The action of undo/redo system for adding and removing items of a list.
	/// </summary>
	public class UndoActionListAddRemove : UndoSystem.Action
	{
		object __0x10158;
		List<int> __0x10159;
		bool __0x10160;
		Dictionary<int, __0x10196> __0x10161 = new Dictionary<int, __0x10196>();

		

		class __0x10196
		{
			public object objectToRestore;
		}

		

		public UndoActionListAddRemove( object list, ICollection<int> objectIndexes, bool add )
		{
			this.__0x10158 = list;
			this.__0x10159 = new List<int>( objectIndexes );

			
			
			

			CollectionUtility.MergeSort( this.__0x10159, delegate ( int __0x10192, int __0x10193 )
			{
				if( __0x10192 < __0x10193 )
					return -1;
				if( __0x10192 > __0x10193 )
					return 1;
				return 0;
			} );

			this.__0x10160 = add;

			if( !add )
				__0x10189();
			
			
			
			
		}

		void __0x10188()
		{
			MethodInfo __0x10162;
			var __0x10163 = __0x10158 as IReferenceList;
			if( __0x10163 != null )
				__0x10162 = __0x10158.GetType().GetMethod( "Insert", new Type[] { typeof( int ), __0x10163.GetItemType() } );
			else
				__0x10162 = __0x10158.GetType().GetMethod( "Insert" );

			foreach( var __0x10183 in ObjectIndexes )
			{
				
				

				__0x10161.TryGetValue( __0x10183, out __0x10196 data );
				if( data != null )
				{
					
					__0x10161.Remove( __0x10183 );

					
					__0x10162.Invoke( __0x10158, new object[] { __0x10183, data.objectToRestore } );
					
				}
			}
			
		}

		void __0x10189()
		{
			var __0x10164 = __0x10158.GetType().GetGenericArguments()[ 0 ];
			MethodInfo __0x10165 = __0x10158.GetType().GetMethod( "RemoveAt" );
			var __0x10166 = __0x10158.GetType().GetProperty( "Item" );

			var __0x10167 = new List<int>( ObjectIndexes );
			__0x10167.Reverse();

			foreach( var __0x10184 in __0x10167 )
			{
				
				var __0x10168 = new __0x10196();
				__0x10168.objectToRestore = __0x10166.GetValue( __0x10158, new object[] { __0x10184 } );
				__0x10161[ __0x10184 ] = __0x10168;

				
				__0x10165.Invoke( __0x10158, new object[] { __0x10184 } );
				
			}
			
		}

		protected internal override void DoUndo()
		{
			if( __0x10160 )
				__0x10189();
			else
				__0x10188();

			__0x10160 = !__0x10160;
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			
			
			
			
			
			
			__0x10159.Clear();
		}

		public object List
		{
			get { return __0x10158; }
		}

		public List<int> ObjectIndexes
		{
			get { return __0x10159; }
		}

		public override string ToString()
		{
			return string.Format( "{0}: Objects: {1}", ( __0x10160 ? "Add" : "Remove" ), __0x10159.Count );
		}
	}

	

	
	
	
	
	
	

	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	

	
	
	

	
	
	

	
	

	
	
	
	

	
	
	

	
	
	
	
	

	

	
	/// <summary>
	/// The action of undo/redo system for changing properties.
	/// </summary>
	public class UndoActionPropertiesChange : UndoSystem.Action
	{
		IList<Item> __0x10169;

		

		
		/// <summary>
		/// Represents an item of <see cref="UndoActionPropertiesChange"/>.
		/// </summary>
		public class Item
		{
			object __0x10170;
			Metadata.Property __0x10171;
			object __0x10172;
			object[] __0x10173;

			public Item( object obj, Metadata.Property property, object restoreValue, object[] indexes = null )
			{
				if( indexes == null )
					indexes = new object[ 0 ];

				if( property == null )
				{
					
					Log.Fatal( "UndoActionPropertiesChange: Item: Constructor: property == null." );
				}

				this.__0x10170 = obj;
				this.__0x10171 = property;
				this.__0x10172 = restoreValue;
				this.__0x10173 = indexes;
			}

			public object Obj
			{
				get { return __0x10170; }
				set { __0x10170 = value; }
			}

			public Metadata.Property Property
			{
				get { return __0x10171; }
				set { __0x10171 = value; }
			}

			public object RestoreValue
			{
				get { return __0x10172; }
				set { __0x10172 = value; }
			}

			public object[] Indexes
			{
				get { return __0x10173; }
				set { __0x10173 = value; }
			}
		}

		

		public UndoActionPropertiesChange( IList<Item> items )
		{
			this.__0x10169 = items;
		}

		public UndoActionPropertiesChange( Item item )
		{
			this.__0x10169 = new Item[] { item };
		}

		protected internal override void DoUndo()
		{
			for( int __0x10174 = 0; __0x10174 < __0x10169.Count; __0x10174++ )
			{
				Item __0x10175 = __0x10169[ __0x10174 ];

				

				object __0x10176 = __0x10175.Property.GetValue( __0x10175.Obj, __0x10175.Indexes );
				__0x10175.Property.SetValue( __0x10175.Obj, __0x10175.RestoreValue, __0x10175.Indexes );
				__0x10175.RestoreValue = __0x10176;

				
			}
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
		}

		public override string ToString()
		{
			return string.Format( "Property change: Items: {0}", __0x10169.Count );
		}

		public IList<Item> Items
		{
			get { return __0x10169; }
		}

		public void PerformUndo()
		{
			DoUndo();
		}
	}

	

	
	
	
	
	

	

	
	
	
	
	

	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	

	
	
	
	
	
	
	
	

	
	
	

	
	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	
}





namespace NeoAxis.Editor
{
	public partial class CameraPreview : ObjectInSpacePreview
	{
		bool __0x10197;

		

		public CameraPreview()
		{
		}

		public Camera Camera
		{
			get { return ObjectOfPreview as Camera; }
		}

		protected override bool EnableViewportControl
		{
			get { return Camera != null && Camera.ParentScene != null; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			if( Camera != null && Camera.ParentScene != null )
				__0x10197 = true;
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			if( __0x10197 )
			{
				Viewport.AttachedScene = Camera.ParentScene;
				ViewportControl.OverrideCameraSettings = new Viewport.CameraSettingsClass( Viewport, Camera );
			}
		}

		protected override void OnViewportUpdateBegin()
		{
			base.OnViewportUpdateBegin();

			if( __0x10197 )
				ViewportControl.OverrideCameraSettings = new Viewport.CameraSettingsClass( Viewport, Camera );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class FlowGraphEditor : DocumentWindowWithViewport
	{
		
		

		
		
		
		
		
		

		
		FontComponent __0x10198;
		
		
		
		

		static float[] __0x10199 = new float[] { .1f, .2f, .35f, .5f, .6f, .7f, .8f, .9f, 1, 1.1f, 1.2f, 1.3f, 1.5f, 1.75f, 2.0f, 2.5f, 3.0f };

		
		float __0x10200;

		
		
		FlowGraphNode.Representation.Connector __0x10201;

		
		bool __0x10202;
		bool __0x10203;
		Vector2 __0x10204;
		Vector2I __0x10205;
		Vector2 __0x10206;

		
		bool __0x10207;
		bool __0x10208;
		Vector2 __0x10209;
		Vector2 __0x10210;
		Vector2 __0x10211;

		
		bool __0x10212;
		bool __0x10213;
		bool __0x10214;
		Vector2I __0x10215;
		Vector2 __0x10216;
		FlowGraphNode __0x10217;
		
		ESet<FlowGraphNode> __0x10218;
		Dictionary<FlowGraphNode, Vector2I> __0x10219;

		
		FlowGraphNode.Representation.Item __0x10220;

		
		Component __0x10221;
		
		DragDropSetReferenceData __0x10222;
		bool __0x10223;
		string[] __0x10224;

		

		public class PinInputMouseSelection
		{
			public FlowGraphNode.Representation.Item socket;

			public PinInputMouseSelection( FlowGraphNode.Representation.Item socket )
			{
				this.socket = socket;
			}
		}

		

		public FlowGraphEditor()
		{
			__0x10500();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x10499();

			

			
			
		}

		[Browsable( false )]
		public FlowGraph FlowGraph
		{
			get { return ObjectOfWindow as FlowGraph; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			

			__0x10451.Start();

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		
		
		
		
		

		private void __0x10475( object __0x10501, FormClosingEventArgs __0x10502 )
		{
		}

		
		
		
		
		

		
		
		
		
		
		

		
		
		
		

		
		
		

		public float GetZoom()
		{
			if( FlowGraph.EditorZoomIndex >= 0 && FlowGraph.EditorZoomIndex < __0x10199.Length )
				return __0x10199[ FlowGraph.EditorZoomIndex ];
			return 1;
		}

		double __0x10476()
		{
			return (double)__0x10200 / (double)ViewportControl.Viewport.SizeInPixels.X;
		}

		double __0x10477()
		{
			return (double)__0x10200 / (double)ViewportControl.Viewport.SizeInPixels.Y;
		}

		double __0x10478()
		{
			return FlowGraph.EditorScrollPosition.X - ConvertScreenToUnitX( 0.5, false );
		}

		double __0x10479()
		{
			return FlowGraph.EditorScrollPosition.Y - ConvertScreenToUnitY( 0.5, false );
		}

		public double ConvertUnitToScreenX( double posX )
		{
			double __0x10225 = ( posX - __0x10478() ) * __0x10476();
			__0x10225 *= GetZoom();
			return __0x10225;
		}

		public double ConvertUnitToScreenY( double posY )
		{
			double __0x10226 = ( posY - __0x10479() ) * __0x10477();
			__0x10226 *= GetZoom();
			return __0x10226;
		}

		public Vector2 ConvertUnitToScreen( Vector2 vector )
		{
			return new Vector2(
				ConvertUnitToScreenX( vector.X ),
				ConvertUnitToScreenY( vector.Y ) );
		}

		public Rectangle ConvertUnitToScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertUnitToScreenX( rect.Left ),
				ConvertUnitToScreenY( rect.Top ),
				ConvertUnitToScreenX( rect.Right ),
				ConvertUnitToScreenY( rect.Bottom ) );
		}

		public double ConvertScreenToUnitX( double screenX, bool applyScrollPosition )
		{
			double __0x10227 = screenX / __0x10476() / GetZoom();
			if( applyScrollPosition )
				__0x10227 += __0x10478();
			return __0x10227;
		}

		public double ConvertScreenToUnitY( double screenY, bool applyScrollPosition )
		{
			double __0x10228 = screenY / __0x10477() / GetZoom();
			if( applyScrollPosition )
				__0x10228 += __0x10479();
			return __0x10228;
		}

		public Vector2 ConvertScreenToUnit( Vector2 screen, bool applyScrollPosition )
		{
			return new Vector2(
				ConvertScreenToUnitX( screen.X, applyScrollPosition ),
				ConvertScreenToUnitY( screen.Y, applyScrollPosition ) );
		}

		public RectangleI GetVisibleCells()
		{
			Vector2I __0x10229 = ConvertScreenToUnit( Vector2.Zero, true ).ToVector2I() - new Vector2I( 1, 1 );
			Vector2I __0x10230 = ConvertScreenToUnit( Vector2.One, true ).ToVector2I() + new Vector2I( 1, 1 );
			return new RectangleI( __0x10229, __0x10230 );
		}

		public Rectangle SelectByRectangle_GetRectangleInUnits()
		{
			Rectangle __0x10231 = new Rectangle( __0x10210 );
			__0x10231.Add( __0x10211 );
			return __0x10231;
		}

		

		void __0x10480( CanvasRenderer __0x10503 )
		{
			if( __0x10198 == null )
				__0x10198 = ResourceManager.LoadResource<FontComponent>( @"Base\Fonts\FlowGraphEditor.ttf" );

			
			
			

			
			
			
			
			

			
			
			
			
			
			
		}

		public void GetFontSizes( CanvasRenderer renderer, out float nodeFontSize, out float nodeFontSizeComment )
		{
			int __0x10232 = renderer.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x10233 = (float)__0x10200 / (float)__0x10232;
			nodeFontSize = __0x10233 * GetZoom();

			float __0x10234 = GetZoom();
			if( __0x10234 < .5f )
				__0x10234 = .5f;
			nodeFontSizeComment = __0x10233 * __0x10234 * 1.4f;
		}

		private void __0x10481( object __0x10504, KeyEventArgs __0x10505 )
		{
			
			
			
		}

		
		void __0x10482()
		{
			var __0x10235 = new List<KryptonContextMenuItemBase>();

			
			
			Component __0x10236 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x10236 = SelectedObjects[ 0 ] as Component;
			}

			

			
			
			{
				

				
				var __0x10237 = new KryptonContextMenuItem( __0x10484( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x10506, EventArgs __0x10507 )
				{
					
					EditorAPI.OpenDocumentWindowForObject( Document, __0x10236 );
				} );
				__0x10237.Enabled = __0x10236 != null && EditorAPI.IsDocumentObjectSupport( __0x10236 );
				__0x10235.Add( __0x10237 );
			}

			
			{
				var __0x10238 = new KryptonContextMenuItem( __0x10484( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x10508, EventArgs __0x10509 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x10235.Add( __0x10238 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x10239 = new KryptonContextMenuItem( __0x10484( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x10510, EventArgs __0x10511 )
				{
					var __0x10240 = __0x10236 ?? ObjectOfWindow;
					bool __0x10241 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x10240, __0x10241 );
				} );
				__0x10239.Enabled = __0x10236 != null || SelectedObjects.Length == 0;
				__0x10235.Add( __0x10239 );
			}

			__0x10235.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x10235, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x10512 )
				{
					TryNewObject( __0x10512 );
				} );

				
				
				
				
				
				
			}

			
			__0x10235.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x10242 = new KryptonContextMenuItem( __0x10484( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x10513, EventArgs __0x10514 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x10242.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x10242.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x10235.Add( __0x10242 );
			}

			
			{
				var __0x10243 = new KryptonContextMenuItem( __0x10484( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x10515, EventArgs __0x10516 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x10243.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x10243.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x10235.Add( __0x10243 );
			}

			
			{
				var __0x10244 = new KryptonContextMenuItem( __0x10484( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x10517, EventArgs __0x10518 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x10244.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x10244.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x10235.Add( __0x10244 );
			}

			
			{
				var __0x10245 = new KryptonContextMenuItem( __0x10484( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x10519, EventArgs __0x10520 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x10245.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x10245.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x10235.Add( __0x10245 );
			}

			
			{
				var __0x10246 = new KryptonContextMenuItem( __0x10484( "Export to File" ), null, delegate ( object __0x10521, EventArgs __0x10522 )
				{
					EditorUtility.ExportComponentToFile( __0x10236 );
				} );
				__0x10246.Enabled = __0x10236 != null;
				__0x10235.Add( __0x10246 );
			}

			
			__0x10235.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x10247 = new KryptonContextMenuItem( __0x10484( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x10523, EventArgs __0x10524 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x10247.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x10235.Add( __0x10247 );
			}

			
			{
				var __0x10248 = new KryptonContextMenuItem( __0x10484( "Rename" ), null, delegate ( object __0x10525, EventArgs __0x10526 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x10248.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x10248.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x10235.Add( __0x10248 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x10235 );

			EditorContextMenuWinForms.Show( __0x10235, this );
		}

		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		object __0x10483()
		
		{
			
			

			foreach( FlowGraphNode __0x10452 in FlowGraph.GetComponents<FlowGraphNode>( true ) )
			{
				var __0x10249 = __0x10452.GetResultStyle( FlowGraph );

				var __0x10250 = __0x10249.GetMouseOverObject( this, __0x10452 );
				if( __0x10250 != null )
					return __0x10250;
			}

			return null;
		}
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		

		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		

		string __0x10484( string __0x10527 )
		{
			return EditorContextMenuWinForms.Translate( __0x10527 );
		}

		
		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		

		
		
		
		
		
		

		

		public bool CanCreateReferenceDragDropSetReference( DragDropSetReferenceData dragDropData, FlowGraphNode.Representation.Connector to,
			out string[] outReferenceValues )
		
		{
			
			var __0x10251 = to.item as FlowGraphNode.Representation.ItemThisObject;
			if( __0x10251 != null )
			{
				Component __0x10252 = __0x10251.Owner.Owner.ControlledObject;
				if( __0x10252 != null && ReferenceUtility.CanMakeReferenceToObjectWithType( dragDropData.property.TypeUnreferenced,
					MetadataManager.MetadataGetType( __0x10252 ) ) )
				{
					if( __0x10252.ParentRoot.HierarchyController != null &&
						__0x10252.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
					{
						
						var __0x10253 = __0x10252.GetProvidedType();
						if( __0x10253 != null )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10254 = 0; __0x10254 < outReferenceValues.Length; __0x10254++ )
								outReferenceValues[ __0x10254 ] = __0x10253.Name;
							return true;
						}
					}
					else
					{
						if( dragDropData.controlledComponents[ 0 ].ParentRoot == __0x10252.ParentRoot )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10255 = 0; __0x10255 < outReferenceValues.Length; __0x10255++ )
								outReferenceValues[ __0x10255 ] = ReferenceUtility.CalculateThisReference( dragDropData.controlledComponents[ __0x10255 ], __0x10252 );
							return true;
						}
					}
				}
			}

			
			var __0x10256 = to.item as FlowGraphNode.Representation.ItemProperty;
			if( __0x10256 != null &&
				ReferenceUtility.CanMakeReferenceToObjectWithType( dragDropData.property.TypeUnreferenced, __0x10256.Property.TypeUnreferenced ) )
			{
				Component __0x10257 = __0x10256.Owner.Owner.ControlledObject;
				if( __0x10257 != null )
				{
					

					if( __0x10257.ParentRoot.HierarchyController != null &&
						__0x10257.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
					{
						
						var __0x10258 = __0x10257.GetProvidedType();
						if( __0x10258 != null )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10259 = 0; __0x10259 < outReferenceValues.Length; __0x10259++ )
							{
								
								if( __0x10257.Parent == null )
									outReferenceValues[ __0x10259 ] = __0x10258.Name + "|" + __0x10256.Property.Name;
								else
									outReferenceValues[ __0x10259 ] = __0x10258.Name + "\\" + __0x10256.Property.Name;
								
							}
							return true;
						}
					}
					else
					{
						if( dragDropData.controlledComponents[ 0 ].ParentRoot == __0x10257.ParentRoot )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10260 = 0; __0x10260 < outReferenceValues.Length; __0x10260++ )
							{
								outReferenceValues[ __0x10260 ] = ReferenceUtility.CalculateThisReference(
									dragDropData.controlledComponents[ __0x10260 ], __0x10257, __0x10256.Property.Name );
							}
							return true;
						}
					}
				}
			}

			outReferenceValues = null;
			return false;
		}

		public bool CanCreateReference( FlowGraphNode.Representation.Connector c1, FlowGraphNode.Representation.Connector c2 )
		{
			if( c1.item == c2.item )
				return false;
			if( c1.input == c2.input )
				return false;

			FlowGraphNode.Representation.Connector __0x10261;
			FlowGraphNode.Representation.Connector __0x10262;
			if( !c1.input )
			{
				__0x10261 = c2;
				__0x10262 = c1;
			}
			else
			{
				__0x10261 = c1;
				__0x10262 = c2;
			}

			

			var __0x10263 = __0x10261.item as FlowGraphNode.Representation.ItemProperty;
			if( __0x10263 != null )
			{
				
				var __0x10264 = __0x10262.item as FlowGraphNode.Representation.ItemThisObject;
				if( __0x10264 != null )
				{
					var __0x10265 = __0x10264.Owner.Owner.ControlledObject.Value as Component;
					if( __0x10265 != null )
					{
						var __0x10266 = MetadataManager.MetadataGetType( __0x10265 );
						if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x10263.Property.TypeUnreferenced, __0x10266 ) )
							return true;
					}
					return false;
				}

				
				var __0x10267 = __0x10262.item as FlowGraphNode.Representation.ItemProperty;
				if( __0x10267 != null )
				{
					if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x10263.Property.TypeUnreferenced, __0x10267.Property.TypeUnreferenced ) )
						return true;
					return false;

					
					
					
					
					
					
				}
			}

			return false;
		}

		
		
		
		

		
		

		
		
		
		
		
		

		
		

		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		

		

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			if( button == EMouseButtons.Left )
			{
				__0x10201 = null;

				var __0x10268 = __0x10483();
				var __0x10269 = __0x10268 as FlowGraphNode;
				var __0x10270 = __0x10268 as FlowGraphNode.Representation.Connector;

				if( __0x10269 != null )
				{
					
					

					
					
					

					

					Vector2 __0x10271 = viewport.MousePosition;
					Vector2I __0x10272 = ( __0x10271 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

					__0x10212 = true;
					__0x10213 = false;
					__0x10214 = false;
					__0x10217 = __0x10269;
					__0x10215 = __0x10272;
					__0x10216 = ConvertScreenToUnit( __0x10271, true );

					__0x10218 = new ESet<FlowGraphNode>();
					__0x10218.Add( __0x10269 );

					var __0x10273 = __0x10487();

					foreach( var __0x10453 in SelectedObjectsSet )
					{
						var __0x10274 = __0x10453 as FlowGraphNode;
						if( __0x10274 != null )
							__0x10218.AddWithCheckAlreadyContained( __0x10274 );

						var __0x10275 = __0x10453 as Component;
						if( __0x10275 != null )
						{
							if( __0x10273.TryGetValue( __0x10275, out List<FlowGraphNode> nodes ) )
							{
								foreach( var __0x10454 in nodes )
								{
									var __0x10276 = __0x10217.ControlledObject.Value;
									if( __0x10276 != null && __0x10454.ControlledObject.Value == __0x10276 )
										continue;

									__0x10218.AddWithCheckAlreadyContained( __0x10454 );
								}
							}
						}
					}

					__0x10219 = new Dictionary<FlowGraphNode, Vector2I>();
					foreach( var __0x10455 in __0x10218 )
						__0x10219.Add( __0x10455, __0x10455.Position );

					handled = true;
					return;
				}
				else if( __0x10270 != null )
				{
					__0x10201 = __0x10270;

					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					handled = true;
					return;
				}
				else
				{
					
					__0x10207 = true;
					__0x10208 = false;
					__0x10209 = viewport.MousePosition;
					__0x10210 = ConvertScreenToUnit( __0x10209, true );
					__0x10211 = __0x10210;

					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				Vector2 __0x10277 = viewport.MousePosition;
				Vector2I __0x10278 = ( __0x10277 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

				__0x10202 = true;
				__0x10203 = false;
				__0x10204 = FlowGraph.EditorScrollPosition;
				__0x10205 = __0x10278;
				__0x10206 = __0x10277;

				handled = true;
				return;
			}
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( viewport, button, ref handled );

			
			
			
			
			

			object __0x10279 = __0x10483();
			var __0x10280 = __0x10279 as FlowGraphNode.Representation.Connector;


			var __0x10281 = new ESet<object>( SelectedObjectsSet );

			
			
			if( button == EMouseButtons.Left )
			{
				
				bool __0x10282 = true;

				
				if( __0x10213 || __0x10201 != null )
					__0x10282 = false;
				if( __0x10282 )
				{
					bool __0x10283 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x10283 )
						__0x10281.Clear();

					
					var __0x10284 = __0x10279 as FlowGraphNode;
					if( __0x10284 != null )
					{
						var __0x10285 = __0x10284.ControlledObject.Value;
						if( __0x10285 != null )
						{
							if( !__0x10281.Contains( __0x10285 ) )
								__0x10281.Add( __0x10285 );
							else
								__0x10281.Remove( __0x10285 );
						}
						else
						{
							
							__0x10281.Add( __0x10284 );
						}
					}

					
					if( __0x10220 != null )
					{
						

						__0x10281.Add( __0x10220 );

						
						__0x10220 = null;
					}
				}

				
				if( __0x10201 != null )
				{
					if( __0x10280 != null && CanCreateReference( __0x10201, __0x10280 ) )
					{
						FlowGraphNode.Representation.Connector __0x10286;
						FlowGraphNode.Representation.Connector __0x10287;

						bool __0x10288 = false;
						{
							var __0x10289 = __0x10201.item as FlowGraphNode.Representation.ItemProperty;
							if( __0x10289 != null )
							{
								if( MetadataManager.GetTypeOfNetType( typeof( FlowInput ) ).IsAssignableFrom( __0x10289.Property.TypeUnreferenced ) )
									__0x10288 = true;
							}
						}

						if( __0x10288 )
						{
							if( __0x10201.input )
							{
								__0x10286 = __0x10280;
								__0x10287 = __0x10201;
							}
							else
							{
								__0x10286 = __0x10201;
								__0x10287 = __0x10280;
							}
						}
						else
						{
							if( __0x10201.input )
							{
								__0x10286 = __0x10201;
								__0x10287 = __0x10280;
							}
							else
							{
								__0x10286 = __0x10280;
								__0x10287 = __0x10201;
							}
						}

						var __0x10290 = __0x10286.item as FlowGraphNode.Representation.ItemProperty;

						var __0x10291 = __0x10286.item.Owner.Owner.ControlledObject.Value;
						var __0x10292 = __0x10287.item.Owner.Owner.ControlledObject.Value;

						string __0x10293 = "";
						{
							
							var __0x10294 = __0x10287.item as FlowGraphNode.Representation.ItemThisObject;
							if( __0x10294 != null )
								__0x10293 = ReferenceUtility.CalculateThisReference( __0x10291, __0x10292 );

							
							var __0x10295 = __0x10287.item as FlowGraphNode.Representation.ItemProperty;
							if( __0x10295 != null )
								__0x10293 = ReferenceUtility.CalculateThisReference( __0x10291, __0x10292, __0x10295.Property.Name );
						}
						

						var __0x10296 = __0x10290.Property.Type.GetNetType();
						var __0x10297 = ReferenceUtility.GetUnderlyingType( __0x10296 );
						object __0x10298 = ReferenceUtility.MakeReference( __0x10297, null, __0x10293 );

						var __0x10299 = new List<UndoActionPropertiesChange.Item>();

						var __0x10300 = __0x10290.Property.GetValue( __0x10291, null );
						__0x10290.Property.SetValue( __0x10291, __0x10298, null );
						__0x10299.Add( new UndoActionPropertiesChange.Item( __0x10291, __0x10290.Property, __0x10300, null ) );

						
						if( __0x10299.Count != 0 )
						{
							var __0x10301 = new UndoActionPropertiesChange( __0x10299.ToArray() );
							Document.UndoSystem.CommitAction( __0x10301 );
							Document.Modified = true;
						}
					}

					
					__0x10201 = null;
				}

				
				if( __0x10213 )
				{
					

					

					if( !__0x10214 )
					{
						

						var __0x10302 = new List<UndoActionPropertiesChange.Item>();

						foreach( var __0x10456 in __0x10218 )
						{
							var __0x10303 = __0x10219[ __0x10456 ];
							var __0x10304 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x10456.GetType() ).
								MetadataGetMemberBySignature( "property:Position" );
							var __0x10305 = new UndoActionPropertiesChange.Item( __0x10456, __0x10304, __0x10303, null );
							__0x10302.Add( __0x10305 );
						}

						if( __0x10302.Count != 0 )
						{
							var __0x10306 = new UndoActionPropertiesChange( __0x10302.ToArray() );
							Document.UndoSystem.CommitAction( __0x10306 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x10307 = new UndoActionComponentCreateDelete( Document, __0x10218.ToArray(), true );
						Document.UndoSystem.CommitAction( __0x10307 );
						Document.Modified = true;

						
						SelectObjects( SelectedObjects, forceUpdate: true );
					}
				}
				__0x10212 = false;
				__0x10213 = false;
				__0x10214 = false;
				__0x10217 = null;
				__0x10218 = null;
				__0x10219 = null;
				__0x10215 = Vector2I.Zero;
				__0x10216 = Vector2.Zero;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x10207 )
				{
					if( __0x10208 )
					{
						bool __0x10308 = ( Form.ModifierKeys & Keys.Shift ) != 0;
						if( !__0x10308 )
							__0x10281.Clear();

						if( __0x10208 )
						{
							foreach( var __0x10457 in __0x10486() )
								__0x10281.AddWithCheckAlreadyContained( __0x10457 );
						}

						if( __0x10208 )
							handled = true;
					}

					__0x10207 = false;
					__0x10208 = false;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				if( __0x10203 )
					handled = true;

				__0x10202 = false;
				__0x10203 = false;
			}

			
			SelectObjects( __0x10281 );

			
			if( !handled && button == EMouseButtons.Right )
				__0x10482();
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			

			
			if( __0x10212 && !__0x10213 )
			{
				Vector2I __0x10309 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x10310 = __0x10215 - __0x10309;
				if( Math.Abs( __0x10310.X ) > 2 || Math.Abs( __0x10310.Y ) > 2 )
				{
					__0x10213 = true;

					
					if( ( ModifierKeys & Keys.Shift ) != 0 )
					{
						FlowGraphNode __0x10311 = __0x10217;
						ESet<FlowGraphNode> __0x10312 = __0x10218;
						Dictionary<FlowGraphNode, Vector2I> __0x10313 = __0x10219;

						__0x10217 = null;
						__0x10218 = new ESet<FlowGraphNode>();
						__0x10219 = new Dictionary<FlowGraphNode, Vector2I>();

						

						foreach( var __0x10458 in __0x10312 )
						{
							var __0x10314 = (FlowGraphNode)EditorUtility.CloneComponent( __0x10458 );

							if( __0x10311 == __0x10458 )
								__0x10217 = __0x10314;
							__0x10218.Add( __0x10314 );
							__0x10219[ __0x10314 ] = __0x10313[ __0x10458 ];
						}

						__0x10214 = true;

						SelectObjects( __0x10218.ToArray(), updateSettingsWindowSelectObjects: false );

						
						EditorUtility.ShowScreenNotificationObjectsCloned( __0x10218.Count );


						
						
						
						
						

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						

						

						
						
						
						
						

						
						
						
						

						
						
						
						
					}
				}
			}
			if( __0x10213 )
			{
				Vector2 __0x10315 = ConvertScreenToUnit( viewport.MousePosition, true );
				Vector2 __0x10316 = __0x10315 - __0x10216;
				if( __0x10316.X < 0 )
					__0x10316.X -= .5f;
				if( __0x10316.Y < 0 )
					__0x10316.Y -= .5f;

				foreach( var __0x10459 in __0x10218 )
					__0x10459.Position = __0x10219[ __0x10459 ] + __0x10316.ToVector2I();
			}

			
			if( __0x10202 )
			{
				Vector2I __0x10317 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x10318 = __0x10205 - __0x10317;
				if( Math.Abs( __0x10318.X ) > 2 || Math.Abs( __0x10318.Y ) > 2 )
					__0x10203 = true;
			}
			if( __0x10203 )
			{
				Vector2 __0x10319 = mouse - __0x10206;
				FlowGraph.EditorScrollPosition = __0x10204 - ConvertScreenToUnit( __0x10319, false );
			}

			
			if( __0x10207 )
			{
				Vector2 __0x10320 = ( viewport.MousePosition - __0x10209 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x10320.X ) >= 3 || Math.Abs( __0x10320.Y ) >= 3 )
					__0x10208 = true;

				__0x10211 = ConvertScreenToUnit( viewport.MousePosition, true );
			}
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( viewport, delta, ref handled );
			if( handled )
				return;

			

			Vector2 __0x10321 = viewport.MousePosition;
			Vector2 __0x10322 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

			
			bool __0x10323 = false;

			if( delta > 0 )
			{
				int __0x10324 = delta / 120;
				if( __0x10324 == 0 )
					__0x10324 = 1;

				for( int __0x10325 = 0; __0x10325 < __0x10324; __0x10325++ )
				{
					if( FlowGraph.EditorZoomIndex < __0x10199.Length - 1 )
					{
						FlowGraph.EditorZoomIndex++;
						__0x10323 = true;
					}
				}
			}
			else if( delta < 0 )
			{
				int __0x10326 = -delta / 120;
				if( __0x10326 == 0 )
					__0x10326 = 1;

				for( int __0x10327 = 0; __0x10327 < __0x10326; __0x10327++ )
				{
					if( FlowGraph.EditorZoomIndex > 0 )
					{
						FlowGraph.EditorZoomIndex--;
						__0x10323 = true;
					}
				}
			}

			if( __0x10323 )
			{
				Vector2 __0x10328 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

				Vector2 __0x10329 = __0x10322 * ( __0x10321 - new Vector2( 0.5, 0.5 ) );
				Vector2 __0x10330 = __0x10328 * ( __0x10321 - new Vector2( 0.5, 0.5 ) );

				Vector2 __0x10331 = FlowGraph.EditorScrollPosition;
				__0x10331 += __0x10329;
				__0x10331 -= __0x10330;
				FlowGraph.EditorScrollPosition = __0x10331;

				AddScreenMessage( string.Format( "Zoom {0}", GetZoom() ) );
			}

			handled = true;
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			base.Viewport_UpdateBegin( viewport );
		}

		List<FlowGraphNode> __0x10485( Rectangle __0x10528 )
		{
			List<FlowGraphNode> __0x10332 = new List<FlowGraphNode>();

			foreach( FlowGraphNode __0x10460 in FlowGraph.GetComponents<FlowGraphNode>( false ) )
			{
				var __0x10333 = __0x10460.GetResultStyle( FlowGraph );
				if( __0x10333.IsIntersectsWithRectangle( this, __0x10460, __0x10528 ) )
					__0x10332.Add( __0x10460 );
			}

			return __0x10332;
		}

		ESet<FlowGraphNode> __0x10486()
		{
			ESet<FlowGraphNode> __0x10334 = new ESet<FlowGraphNode>();
			if( __0x10208 )
			{
				foreach( var __0x10461 in __0x10485( SelectByRectangle_GetRectangleInUnits() ) )
					__0x10334.Add( __0x10461 );
			}
			return __0x10334;
		}
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		Dictionary<Component, List<FlowGraphNode>> __0x10487()
		{
			var __0x10335 = new Dictionary<Component, List<FlowGraphNode>>();

			foreach( FlowGraphNode __0x10462 in FlowGraph.GetComponents<FlowGraphNode>( false ) )
			{
				Component __0x10336 = __0x10462.ControlledObject.Value;
				if( __0x10336 != null )
				{
					if( !__0x10335.TryGetValue( __0x10336, out List<FlowGraphNode> list ) )
					{
						list = new List<FlowGraphNode>();
						__0x10335.Add( __0x10336, list );
					}
					list.Add( __0x10462 );
				}
			}

			return __0x10335;
		}

		public FlowGraphStyle GetFlowGraphStyle()
		{
			FlowGraphStyle __0x10337 = FlowGraph.Style;
			if( __0x10337 == null )
			{
				__0x10337 = FlowGraphStyle_Default.Instance;
				
				
			}

			return __0x10337;
		}

		bool __0x10488()
		{
			if( __0x10213 || __0x10222 != null )
				return false;
			return true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			

			var __0x10338 = viewport.CanvasRenderer;

			
			var __0x10339 = __0x10483();
			var __0x10340 = __0x10339 as FlowGraphNode;
			var __0x10341 = __0x10339 as FlowGraphNode.Representation.Connector;
			

			var __0x10342 = new Dictionary<FlowGraphNode.Representation.Item, RenderSelectionState>();
			{
				if( __0x10220 != null && __0x10488() )
					__0x10342[ __0x10220 ] = RenderSelectionState.CanSelect;
				foreach( var __0x10463 in SelectedObjects )
				{
					var __0x10343 = __0x10463 as FlowGraphNode.Representation.Item;
					if( __0x10343 != null )
						__0x10342[ __0x10343 ] = RenderSelectionState.Selected;
				}
			}

			__0x10480( __0x10338 );

			
			var __0x10344 = GetFlowGraphStyle();

			
			__0x10344.RenderBackground( this );

			
			

			var __0x10345 = __0x10487();
			var __0x10346 = __0x10486();

			FlowGraphNode.Representation.Item __0x10347 = null;

			
			
			foreach( FlowGraphNode __0x10464 in FlowGraph.GetComponents<FlowGraphNode>( false ) )
			{
				
				

				
				var __0x10348 = __0x10464.GetResultStyle( FlowGraph );

				
				__0x10348.RenderNodeReferences( this, __0x10464, __0x10345, __0x10342, out FlowGraphNode.Representation.Item outMouseOver );

				if( outMouseOver != null && __0x10347 == null )
					__0x10347 = outMouseOver;
			}

			
			
			if( __0x10201 == null && __0x10339 == null )
				__0x10220 = __0x10347;
			else
				__0x10220 = null;

			
			{
				
				
				
				
				
				
				

				
				
				

				
				
				
				

				
				foreach( FlowGraphNode __0x10465 in FlowGraph.GetComponents<FlowGraphNode>( false ) )
				{
					
					

					
					var __0x10349 = __0x10465.GetResultStyle( FlowGraph );

					
					var __0x10350 = RenderSelectionState.None;

					if( __0x10346.Contains( __0x10465 ) && __0x10488() )
						__0x10350 = RenderSelectionState.CanSelect;

					if( IsObjectSelected( __0x10465 ) )
						__0x10350 = RenderSelectionState.Selected;
					else
					{
						
						if( __0x10201 == null )
						{
							if( __0x10340 == __0x10465 && __0x10465.ControlledObject.Value == null && __0x10488() )
								__0x10350 = RenderSelectionState.CanSelect;
						}
					}

					
					var __0x10351 = RenderSelectionState.None;
					object __0x10352 = __0x10465.ControlledObject.Value;
					if( __0x10352 != null )
					{
						if( __0x10201 == null )
						{
							if( __0x10340 != null && __0x10340.ControlledObject.Value == __0x10352 && __0x10488() )
								__0x10351 = RenderSelectionState.CanSelect;
						}
						if( IsObjectSelected( __0x10352 ) )
							__0x10351 = RenderSelectionState.Selected;
					}

					
					__0x10349.RenderNode( this, __0x10465, __0x10350, __0x10351, __0x10339, __0x10201,
						__0x10222 );

					
					
					
					
					
				}
			}

			
			
			if( __0x10201 != null )
			{
				var __0x10353 = __0x10201.item.Owner.Owner;

				
				var __0x10354 = __0x10353.GetResultStyle( FlowGraph );

				

				Vector2 __0x10355 = __0x10354.GetSocketPositionInUnits( __0x10201.item, __0x10201.input );

				Vector2 __0x10356;
				if( __0x10341 != null && CanCreateReference( __0x10201, __0x10341 ) )
					__0x10356 = __0x10354.GetSocketPositionInUnits( __0x10341.item, __0x10341.input );
				else
					__0x10356 = ConvertScreenToUnit( ViewportControl.Viewport.MousePosition, true );

				__0x10344.RenderReference( this, __0x10355, __0x10201.input, __0x10356, new ColorValue( 1, 1, 1 ), out bool mouseOver );

				
				
			}

			
			if( __0x10207 && __0x10208 )
			{
				Rectangle __0x10357 = new Rectangle( ConvertUnitToScreen( __0x10210 ) );
				__0x10357.Add( viewport.MousePosition );

				Vector2I __0x10358 = viewport.SizeInPixels;
				Vector2 __0x10359 = new Vector2( 1.0f / (float)__0x10358.X, 1.0f / (float)__0x10358.Y );

				__0x10338.AddRectangle( __0x10357 + __0x10359, new ColorValue( 0, 0, 0, .5f ) );
				__0x10338.AddRectangle( __0x10357, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			

			
			__0x10223 = false;
			if( __0x10222 != null && __0x10341 != null )
			{
				bool __0x10360 = MetadataManager.GetTypeOfNetType( typeof( FlowInput ) ).IsAssignableFrom( __0x10222.property.TypeUnreferenced );

				if( __0x10360 )
				{
					if( __0x10341.input )
					{
						if( CanCreateReferenceDragDropSetReference( __0x10222, __0x10341, out __0x10224 ) )
							__0x10223 = true;
					}
				}
				else
				{
					if( !__0x10341.input )
					{
						if( CanCreateReferenceDragDropSetReference( __0x10222, __0x10341, out __0x10224 ) )
							__0x10223 = true;
					}
				}
			}
			
			
			
			
			
			
			
			

			
			__0x10344.RenderForeground( this );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			base.Viewport_UpdateEnd( viewport );
		}

		[Browsable( false )]
		public FontComponent NodeFont
		{
			get { return __0x10198; }
		}

		
		
		
		
		

		
		
		
		
		

		[Browsable( false )]
		public FontComponent NodeFontComment
		{
			get { return __0x10198; }
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x10466 in SelectedObjects )
			{
				var __0x10361 = __0x10466 as Component;
				if( __0x10361 != null )
					parentsForNewObjects.Add( __0x10361 );
			}

			
			foreach( var __0x10467 in SelectedObjects )
			{
				var __0x10362 = __0x10467 as FlowGraphNode.Representation.Item;
				if( __0x10362 != null )
					return false;
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( FlowGraph );
			return true;
			
		}

		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out List<Component> parentsForNewObjects ) )
				return;

			bool __0x10363 = false;
			Vector2I __0x10364 = Vector2I.Zero;
			if( parentsForNewObjects.Count == 1 && parentsForNewObjects[ 0 ] == FlowGraph )
			{
				__0x10363 = true;
				__0x10364 = ConvertScreenToUnit( ViewportControl.Viewport.MousePosition, true ).ToVector2I();
			}

			var __0x10365 = new NewObjectWindow.CreationDataClass();
			__0x10365.initDocumentWindow = this;
			__0x10365.initParentObjects = new List<object>();
			__0x10365.initParentObjects.AddRange( parentsForNewObjects );

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			

			
			
			


			__0x10365.beforeCreateObjectsFunction = delegate ( NewObjectWindow __0x10529, Metadata.TypeInfo __0x10530 )
			{
				if( __0x10363 && !typeof( FlowGraphNode ).IsAssignableFrom( __0x10530.GetNetType() ) )
				{
					__0x10529.creationData.createdObjects = new List<object>();

					
					var __0x10366 = FlowGraph.CreateComponent<FlowGraphNode>( -1, false );
					__0x10529.creationData.createdObjects.Add( __0x10366 );
					__0x10529.creationData.createdComponentsOnTopLevel.Add( __0x10366 );

					
					var __0x10367 = __0x10366.CreateComponent( __0x10530 );

					
					
					bool __0x10368 = false;
					if( !__0x10529.ApplyCreationSettingsToObject( __0x10367, ref __0x10368 ) )
						return false;

					__0x10529.creationData.createdObjects.Add( __0x10367 );

					var __0x10369 = "Node " + __0x10367.Name;
					__0x10366.Name = FlowGraph.Components.GetUniqueName( __0x10369, false, 1 );

					
					
					__0x10366.ControlledObject = new Reference<Component>( null, ReferenceUtility.CalculateThisReference( __0x10366, __0x10367 ) );
				}

				return true;
			};

			
			__0x10365.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x10531 )
			{
				if( __0x10363 )
				{
					foreach( var __0x10468 in __0x10365.createdComponentsOnTopLevel )
					{
						var __0x10370 = __0x10468 as FlowGraphNode;
						if( __0x10370 != null )
							__0x10370.Position = __0x10364;
					}
				}
			};

			__0x10365.initLockType = lockType;
			__0x10365.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x10365 );
		}

		public override bool CanDeleteObjects( out List<object> resultObjectsToDelete )
		{
			resultObjectsToDelete = new List<object>();

			foreach( var __0x10469 in SelectedObjects )
			{
				var __0x10371 = __0x10469 as Component;
				if( __0x10371 != null && __0x10371.Parent != null )
					resultObjectsToDelete.Add( __0x10371 );

				var __0x10372 = __0x10469 as FlowGraphNode.Representation.Item;
				if( __0x10372 != null )
					resultObjectsToDelete.Add( __0x10372 );
			}

			

			if( resultObjectsToDelete.Count == 0 )
				return false;

			return true;
		}

		public override bool TryDeleteObjects()
		{
			if( !CanDeleteObjects( out List<object> objectsToDelete ) )
				return false;

			string __0x10373;
			if( objectsToDelete.Count == 1 )
			{
				string __0x10374 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete \'{0}\'?" );
				var __0x10375 = objectsToDelete[ 0 ].ToString();
				__0x10373 = string.Format( __0x10374, __0x10375 );
			}
			else
			{
				string __0x10376 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete selected objects?" );
				__0x10373 = string.Format( __0x10376, objectsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x10373, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return false;

			SelectObjects( null );

			
			List<Component> __0x10377 = new List<Component>();
			List<UndoActionPropertiesChange.Item> __0x10378 = new List<UndoActionPropertiesChange.Item>();

			foreach( var __0x10470 in objectsToDelete )
			{
				var __0x10379 = __0x10470 as Component;
				if( __0x10379 != null )
					__0x10377.Add( __0x10379 );

				var __0x10380 = __0x10470 as FlowGraphNode.Representation.ItemProperty;
				if( __0x10380 != null )
				{
					var __0x10381 = __0x10380.Owner.Owner.ControlledObject.Value;
					var __0x10382 = __0x10380.Property;

					var __0x10383 = __0x10382.GetValue( __0x10381, null );

					object __0x10384 = null;
					{
						var __0x10385 = __0x10382.TypeUnreferenced;

						
						if( __0x10382.DefaultValueSpecified )
						{
							__0x10384 = __0x10382.DefaultValue;

							
							if( __0x10384 != null )
							{
								if( __0x10385.GetNetType() != typeof( string ) && __0x10384 is string )
									__0x10384 = SimpleTypes.ParseValue( __0x10385.GetNetType(), (string)__0x10384 );
							}
						}

						if( __0x10384 != null && !__0x10385.IsAssignableFrom( MetadataManager.MetadataGetType( __0x10384 ) ) )
							__0x10384 = null;
					}

					var __0x10386 = ReferenceUtility.MakeReference( ReferenceUtility.GetUnreferencedType( __0x10382.Type.GetNetType() ), __0x10384, "" );
					
					

					__0x10382.SetValue( __0x10381, __0x10386, null );

					__0x10378.Add( new UndoActionPropertiesChange.Item( __0x10381, __0x10382, __0x10383, null ) );
				}
			}

			UndoSystem.Action __0x10387 = null;
			if( __0x10377.Count != 0 && __0x10378.Count != 0 )
			{
				UndoMultiAction __0x10388 = new UndoMultiAction();
				__0x10388.Actions.Add( new UndoActionComponentCreateDelete( Document, __0x10377, false ) );
				__0x10388.Actions.Add( new UndoActionPropertiesChange( __0x10378.ToArray() ) );
				__0x10387 = __0x10388;
			}
			else if( __0x10377.Count != 0 )
				__0x10387 = new UndoActionComponentCreateDelete( Document, __0x10377, false );
			else if( __0x10378.Count != 0 )
				__0x10387 = new UndoActionPropertiesChange( __0x10378.ToArray() );

			Document.UndoSystem.CommitAction( __0x10387 );
			
			
			Document.Modified = true;

			return true;
		}

		public override bool CanCloneObjects( out List<Component> resultObjectsToClone )
		{
			resultObjectsToClone = new List<Component>();

			var __0x10389 = __0x10487();

			
			foreach( var __0x10471 in SelectedObjects )
			{
				var __0x10390 = __0x10471 as Component;
				if( __0x10390 != null )
				{
					if( __0x10389.TryGetValue( __0x10390, out List<FlowGraphNode> nodes ) )
					{
						foreach( var __0x10472 in nodes )
							resultObjectsToClone.Add( __0x10472 );
					}
					else
					{
						if( __0x10390.Parent != null )
							resultObjectsToClone.Add( __0x10390 );
					}
				}
			}

			
			resultObjectsToClone = ComponentUtility.GetComponentsWithoutChildren( resultObjectsToClone );

			if( resultObjectsToClone.Count == 0 )
				return false;

			return true;
		}

		private void __0x10489( object __0x10532, EventArgs __0x10533 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			foreach( FlowGraphNode __0x10473 in FlowGraph.GetComponents<FlowGraphNode>( false ) )
				__0x10473.RepresentationNeedUpdate();
		}

		

		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		

		private void __0x10490( object __0x10534, DragEventArgs __0x10535 )
		{
			__0x10494( __0x10535 );

			
			
			
			
		}

		private void __0x10491( object __0x10536, DragEventArgs __0x10537 )
		{
			__0x10537.Effect = DragDropEffects.None;

			
			ViewportControl?.PerformMouseMove();

			__0x10497();
			if( __0x10221 != null )
				__0x10537.Effect = DragDropEffects.Link;

			DragDropSetReferenceData __0x10391 = (DragDropSetReferenceData)__0x10537.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x10391 != null )
				__0x10222 = __0x10391;
			if( __0x10222 != null && __0x10223 )
				__0x10537.Effect = DragDropEffects.Link;

			
			ViewportControl.TryRender();
		}

		private void __0x10492( object __0x10538, EventArgs __0x10539 )
		{
			__0x10495();

			__0x10222 = null;

			
			ViewportControl.TryRender();
		}

		private void __0x10493( object __0x10540, DragEventArgs __0x10541 )
		{
			__0x10498();

			if( __0x10222 != null )
			{
				if( __0x10223 )
				{
					__0x10222.SetProperty( __0x10224 );
					__0x10223 = false;
				}
				__0x10222 = null;
			}
		}

		void __0x10494( DragEventArgs __0x10542 )
		{
			Metadata.TypeInfo __0x10392 = null;
			string __0x10393 = "";
			Component __0x10394 = null;
			Component __0x10395 = null;
			{
				var __0x10396 = ContentBrowser.GetDroppingItemData( __0x10542.Data );
				if( __0x10396 != null )
				{
					var __0x10397 = __0x10396.Item;
					

					
					var __0x10398 = __0x10397 as ContentBrowserItem_File;
					if( __0x10398 != null && !__0x10398.IsDirectory )
					{
						
						var __0x10399 = Path.GetExtension( __0x10398.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x10399 ) != null )
						{
							var __0x10400 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x10398.FullPath ) );

							var __0x10401 = __0x10400?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x10401 != null )
								__0x10392 = __0x10401;
						}
					}

					
					var __0x10402 = __0x10397 as ContentBrowserItem_Type;
					if( __0x10402 != null )
					{
						var __0x10403 = __0x10402.Type;

						

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x10403 ) && !__0x10403.Abstract )
							__0x10392 = __0x10403;
					}

					
					var __0x10404 = __0x10397 as ContentBrowserItem_Member;
					if( __0x10404 != null )
					{
						var __0x10405 = __0x10404.Member;

						

						var __0x10406 = __0x10405.Owner as Metadata.TypeInfo;
						if( __0x10406 != null )
							__0x10393 = string.Format( "{0}|{1}", __0x10406.Name, __0x10405.Signature );

						

						var __0x10407 = __0x10405.Owner as Component;
						if( __0x10407 != null )
							__0x10393 = ReferenceUtility.CalculateResourceReference( __0x10407, __0x10405.Signature );

						
						var __0x10408 = __0x10397.Parent as ContentBrowserItem_Component;
						if( __0x10408 != null )
						{
							var __0x10409 = __0x10408.Component;

							
							if( __0x10409.ParentRoot == Document.ResultComponent )
								__0x10394 = __0x10409;
						}
					}

					
					var __0x10410 = __0x10397 as ContentBrowserItem_Component;
					if( __0x10410 != null )
					{
						var __0x10411 = __0x10410.Component;

						if( FlowGraph.ParentRoot == __0x10411.ParentRoot )
						{
							
							__0x10395 = __0x10411;
						}
						else
						{
							var __0x10412 = __0x10411.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x10412 != null )
							{
								
								__0x10392 = __0x10411.GetProvidedType();
							}
						}
					}
				}
			}

			if( __0x10392 != null || __0x10393 != "" || __0x10395 != null )
			{
				

				
				var __0x10413 = FlowGraph.CreateComponent<FlowGraphNode>( -1, false );
				bool __0x10414 = false;

				Component __0x10415 = null;

				
				bool __0x10416 = false;
				var __0x10417 = FlowGraph.Specialization.Value;
				if( __0x10417 != null )
				{
					var __0x10418 = new FlowGraphSpecialization.DragDropObjectCreateInitNodeContext();
					__0x10418.createComponentType = __0x10392;
					__0x10418.memberFullSignature = __0x10393;
					
					__0x10418.createNodeWithComponent = __0x10395;

					__0x10417.DragDropObjectCreateInitNode( __0x10413, __0x10418, ref __0x10416 );

					if( __0x10416 )
						__0x10415 = __0x10418.controlledObject;
				}

				
				if( !__0x10416 )
				{
					
					if( !__0x10414 && __0x10415 == null && __0x10392 != null && MetadataManager.GetTypeOfNetType( typeof( CSharpScript ) ).IsAssignableFrom( __0x10392 ) )
					{
						var __0x10419 = __0x10392 as Metadata.ComponentTypeInfo;
						if( __0x10419 != null && __0x10419.BasedOnObject != null )
						{
							var __0x10420 = __0x10419.BasedOnObject as CSharpScript;
							if( __0x10420 != null )
							{
								if( __0x10420.CompiledOneMethod != null )
								{
									var __0x10421 = __0x10413.CreateComponent<InvokeMember>();
									__0x10415 = __0x10421;
									__0x10421.Name = "Invoke Member";

									var __0x10422 = __0x10392.Name + "|" + __0x10420.CompiledOneMethod.Signature;
									__0x10421.Member = new Reference<ReferenceValueType_Member>( null, __0x10422 );
								}
							}

							if( __0x10415 == null )
								__0x10414 = true;
						}
					}

					
					if( !__0x10414 && __0x10415 == null && __0x10392 != null && __0x10392 != MetadataManager.GetTypeOfNetType( typeof( FlowGraphNode ) ) )
					{
						var __0x10423 = __0x10413.CreateComponent( __0x10392 );
						__0x10423.Name = __0x10392.GetUserFriendlyNameForInstance( true );
						__0x10423.NewObjectSetDefaultConfiguration();
						__0x10415 = __0x10423;
					}

					
					if( !__0x10414 && __0x10415 == null && __0x10393 != "" )
					{
						var __0x10424 = __0x10413.CreateComponent<InvokeMember>();
						__0x10424.Name = "Invoke Member";
						__0x10424.Member = new Reference<ReferenceValueType_Member>( null, __0x10393 );

						if( __0x10394 != null )
						{
							var __0x10425 = __0x10424.MetadataGetMemberBySignature( "property:" + __0x10424.GetThisPropertyName() ) as Metadata.Property;
							if( __0x10425 != null )
							{
								var __0x10426 = ReferenceUtility.CalculateThisReference( __0x10424, __0x10394 );
								var __0x10427 = ReferenceUtility.MakeReference( __0x10425.TypeUnreferenced.GetNetType(), null, __0x10426 );
								__0x10425.SetValue( __0x10424, __0x10427, new object[ 0 ] );
							}
						}

						__0x10415 = __0x10424;
					}

					
					if( !__0x10414 && __0x10395 != null )
						__0x10415 = __0x10395;
				}

				
				

				if( __0x10414 )
				{
					__0x10413.Dispose();
					__0x10221 = null;
				}
				else
				{
					
					if( __0x10415 != null )
					{
						var __0x10428 = "Node " + __0x10415.Name;
						__0x10413.Name = FlowGraph.Components.GetUniqueName( __0x10428, false, 1 );

						
						__0x10413.ControlledObject = new Reference<Component>( null, ReferenceUtility.CalculateThisReference( __0x10413, __0x10415 ) );
					}
					__0x10413.Enabled = true;
					__0x10221 = __0x10413;

					__0x10497();
				}
			}
		}

		void __0x10495()
		{
			if( __0x10221 != null )
			{
				__0x10221.RemoveFromParent( true );
				__0x10221.Dispose();
				__0x10221 = null;
			}
		}

		void __0x10496( FlowGraphNode __0x10543 )
		{
			var __0x10429 = ViewportControl.Viewport;
			Vector2 __0x10430 = __0x10429.MousePosition;
			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x10430 ) )
				__0x10430 = new Vector2( 0.5, 0.5 );

			
			var __0x10431 = ConvertScreenToUnit( __0x10430, true ) - __0x10543.GetRepresentation().Size.ToVector2() / 2 + new Vector2( 1, 1 );
			__0x10543.Position = __0x10431.ToVector2I();
		}

		void __0x10497()
		{
			if( __0x10221 != null )
			{
				var __0x10432 = __0x10221 as FlowGraphNode;
				if( __0x10432 != null )
					__0x10496( __0x10432 );
			}
		}

		void __0x10498()
		{
			if( __0x10221 != null )
			{
				
				var __0x10433 = new List<Component>();
				__0x10433.Add( __0x10221 );
				var __0x10434 = new UndoActionComponentCreateDelete( Document, __0x10433, true );
				Document.UndoSystem.CommitAction( __0x10434 );
				Document.Modified = true;

				__0x10221 = null;

				EditorAPI.SelectDockWindow( this );

				
				
			}
		}

		void __0x10499()
		{
			__0x10200 = 14;

			float __0x10435 = EditorAPI.DPI;
			if( __0x10435 > 96 )
			{
				__0x10200 *= __0x10435 / 96;
				__0x10200 = (int)__0x10200;
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x10436 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x10436 != null )
			{
				var __0x10437 = new List<Component>();
				foreach( var __0x10474 in __0x10436.objects )
				{
					var __0x10438 = __0x10474 as Component;
					if( __0x10438 != null )
						__0x10437.Add( __0x10438 );
				}

				

				var __0x10439 = new List<Component>();
				Vector2I __0x10440 = Vector2I.Zero;

				for( int __0x10441 = 0; __0x10441 < __0x10437.Count; __0x10441++ )
				{
					var __0x10442 = __0x10437[ __0x10441 ];

					var __0x10443 = __0x10442.Clone();
					if( destinationParent.GetComponent( __0x10442.Name ) == null )
						__0x10443.Name = __0x10442.Name;
					else
						__0x10443.Name = destinationParent.Components.GetUniqueName( __0x10442.Name, true, 2 );
					destinationParent.AddComponent( __0x10443 );

					
					if( destinationParent == FlowGraph )
					{
						var __0x10444 = __0x10443 as FlowGraphNode;
						if( __0x10444 != null )
						{
							if( __0x10441 == 0 )
							{
								__0x10496( __0x10444 );
								__0x10440 = __0x10444.Position - ( (FlowGraphNode)__0x10442 ).Position;
							}
							else
								__0x10444.Position += __0x10440;
						}
					}

					__0x10439.Add( __0x10443 );
				}

				if( __0x10436.cut )
				{
					
					if( __0x10436.documentWindow.Document != Document )
					{
						
						{
							var __0x10445 = new UndoActionComponentCreateDelete( __0x10436.documentWindow.Document, __0x10437, false );
							__0x10436.documentWindow.Document.UndoSystem.CommitAction( __0x10445 );
							__0x10436.documentWindow.Document.Modified = true;
						}
						{
							var __0x10446 = new UndoActionComponentCreateDelete( Document, __0x10439, true );
							Document.UndoSystem.CommitAction( __0x10446 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x10447 = new UndoMultiAction();
						__0x10447.AddAction( new UndoActionComponentCreateDelete( Document, __0x10437, false ) );
						__0x10447.AddAction( new UndoActionComponentCreateDelete( Document, __0x10439, true ) );
						Document.UndoSystem.CommitAction( __0x10447 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x10448 = new UndoActionComponentCreateDelete( Document, __0x10439, true );
					Document.UndoSystem.CommitAction( __0x10448 );
					Document.Modified = true;
				}
			}

			return true;
		}

		protected override object OnGetSelectObjectWhenNoSelectedObjects()
		{
			
			
			var __0x10449 = FlowGraph?.Specialization.Value;
			if( __0x10449 as FlowGraphSpecialization_Shader != null )
			{
				if( FlowGraph.Parent as Material != null )
					return FlowGraph.Parent;
			}

			return base.OnGetSelectObjectWhenNoSelectedObjects();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class FlowGraphEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x10450 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x10500()
		{
			this.__0x10450 = new System.ComponentModel.Container();
			this.__0x10451 = new System.Windows.Forms.Timer(this.__0x10450);
			this.SuspendLayout();
			
			
			
			this.__0x10451.Interval = 50;
			this.__0x10451.Tick += new System.EventHandler(this.__0x10489);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "FlowGraph_DocumentWindow";
			this.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x10493);
			this.DragEnter += new System.Windows.Forms.DragEventHandler(this.__0x10490);
			this.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x10491);
			this.DragLeave += new System.EventHandler(this.__0x10492);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x10451;
	}
}






namespace NeoAxis.Editor
{
	public class GroupOfObjectsElementSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10544;
		ProcedureUI.Button __0x10545;
		ProcedureUI.Button __0x10546;
		ProcedureUI.Button __0x10547;
		ProcedureUI.Button __0x10548;

		

		string __0x10572( string __0x10580 )
		{
			return EditorLocalization.Translate( "GroupOfObjectsElement", __0x10580 );
		}

		protected override void OnInit()
		{
			__0x10544 = ProcedureForm.CreateButton( __0x10572( "Clear Objects" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10544.Click += __0x10573;

			__0x10545 = ProcedureForm.CreateButton( __0x10572( "Update Alignment" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10545.Click += __0x10574;

			__0x10546 = ProcedureForm.CreateButton( __0x10572( "Update Variations" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10546.Click += __0x10577;

			__0x10547 = ProcedureForm.CreateButton( __0x10572( "Random Groups" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10547.Click += __0x10578;

			__0x10548 = ProcedureForm.CreateButton( __0x10572( "Reset Colors" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10548.Click += __0x10579;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10544, __0x10545 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10546, __0x10547 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10548 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x10549 = GetObjects<GroupOfObjectsElement>();
			__0x10544.Enabled = __0x10549.Any( __0x10581 => __0x10581.ObjectsExists() );
			__0x10545.Enabled = __0x10544.Enabled;

			__0x10546.Enabled = __0x10544.Enabled && GetObjects<GroupOfObjectsElement_Surface>().Length != 0;
			__0x10547.Enabled = __0x10546.Enabled;

			__0x10548.Enabled = __0x10544.Enabled;
		}

		private void __0x10573( ProcedureUI.Button __0x10582 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10572( "Delete all objects of the element?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10550 = new UndoMultiAction();

			foreach( var __0x10565 in GetObjects<GroupOfObjectsElement>() )
			{
				var __0x10551 = __0x10565.Parent as GroupOfObjects;
				if( __0x10551 != null )
				{
					var __0x10552 = __0x10565.GetObjectsOfElement();
					if( __0x10552.Count != 0 )
					{
						var __0x10553 = new GroupOfObjectsUndo.UndoActionCreateDelete( __0x10551, __0x10552.ToArray(), false, true );
						__0x10550.AddAction( __0x10553 );
					}
				}
			}

			if( __0x10550.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10550 );
		}

		private unsafe void __0x10574( ProcedureUI.Button __0x10583 )
		{
			var __0x10554 = new UndoMultiAction();
			var __0x10555 = new ESet<GroupOfObjects>();

			foreach( var __0x10566 in GetObjects<GroupOfObjectsElement>() )
			{
				var __0x10556 = __0x10566.Parent as GroupOfObjects;
				if( __0x10556 != null )
				{
					var __0x10557 = __0x10566 as GroupOfObjectsElement_Mesh;
					if( __0x10557 != null )
					{
						__0x10557.UpdateAlignment( __0x10554 );
						__0x10555.AddWithCheckAlreadyContained( __0x10556 );
					}

					var __0x10558 = __0x10566 as GroupOfObjectsElement_Surface;
					if( __0x10558 != null )
					{
						__0x10558.UpdateAlignment( __0x10554 );
						__0x10555.AddWithCheckAlreadyContained( __0x10556 );
					}
				}
			}

			foreach( var __0x10567 in __0x10555 )
				__0x10567.CreateSectors();

			if( __0x10554.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10554 );
		}

		void __0x10575( bool __0x10584 )
		{
			var __0x10559 = new UndoMultiAction();
			var __0x10560 = new ESet<GroupOfObjects>();

			foreach( var __0x10568 in GetObjects<GroupOfObjectsElement_Surface>() )
			{
				var __0x10561 = __0x10568.Parent as GroupOfObjects;
				if( __0x10561 != null )
				{
					__0x10568.UpdateVariations( __0x10584, __0x10559 );
					__0x10560.AddWithCheckAlreadyContained( __0x10561 );
				}
			}

			foreach( var __0x10569 in __0x10560 )
				__0x10569.CreateSectors();

			if( __0x10559.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10559 );
		}

		void __0x10576()
		{
			var __0x10562 = new UndoMultiAction();
			var __0x10563 = new ESet<GroupOfObjects>();

			foreach( var __0x10570 in GetObjects<GroupOfObjectsElement>() )
			{
				var __0x10564 = __0x10570.Parent as GroupOfObjects;
				if( __0x10564 != null )
				{
					__0x10570.ResetColors( __0x10562 );
					__0x10563.AddWithCheckAlreadyContained( __0x10564 );
				}
			}

			foreach( var __0x10571 in __0x10563 )
				__0x10571.CreateSectors();

			if( __0x10562.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10562 );
		}

		private unsafe void __0x10577( ProcedureUI.Button __0x10585 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10572( "Update variations of the objects?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10575( false );
		}

		private void __0x10578( ProcedureUI.Button __0x10586 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10572( "Refresh surface groups randomly?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10575( true );
		}

		private void __0x10579( ProcedureUI.Button __0x10587 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10572( "Reset color of the objects to \'1 1 1\'?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10576();
		}
	}
}





namespace NeoAxis.Editor
{
	public class GroupOfObjectsSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10588;
		ProcedureUI.Button __0x10589;
		ProcedureUI.Button __0x10590;
		ProcedureUI.Button __0x10591;

		

		string __0x10619( string __0x10624 )
		{
			return EditorLocalization.Translate( "GroupOfObjects", __0x10624 );
		}

		protected override void OnInit()
		{
			__0x10588 = ProcedureForm.CreateButton( __0x10619( "Clear" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10588.Click += __0x10620;

			__0x10589 = ProcedureForm.CreateButton( __0x10619( "Clear Objects" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10589.Click += __0x10621;

			__0x10590 = ProcedureForm.CreateButton( __0x10619( "Update Alignment" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10590.Click += __0x10622;

			__0x10591 = ProcedureForm.CreateButton( __0x10619( "Statistics" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10591.Click += __0x10623;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10588, __0x10589 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10590, __0x10591 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x10592 = GetObjects<GroupOfObjects>();
			__0x10588.Enabled = __0x10592.Any( __0x10625 => __0x10625.ObjectsExists() || __0x10625.Components.Count != 0 );
			__0x10589.Enabled = __0x10592.Any( __0x10626 => __0x10626.ObjectsExists() );
			__0x10590.Enabled = __0x10592.Any( __0x10627 => __0x10627.ObjectsExists() );

			__0x10591.Enabled = GetObjects<GroupOfObjects>().Length == 1;
		}

		private void __0x10620( ProcedureUI.Button __0x10628 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10619( "Delete all objects and child components?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10593 = new UndoMultiAction();

			foreach( var __0x10612 in GetObjects<GroupOfObjects>() )
			{
				var __0x10594 = __0x10612.ObjectsGetAll();
				if( __0x10594.Count != 0 )
				{
					var __0x10595 = new GroupOfObjectsUndo.UndoActionCreateDelete( __0x10612, __0x10594.ToArray(), false, true );
					__0x10593.AddAction( __0x10595 );
				}

				var __0x10596 = __0x10612.GetComponents();
				__0x10593.AddAction( new UndoActionComponentCreateDelete( Provider.DocumentWindow.Document, __0x10596, false ) );
			}

			if( __0x10593.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10593 );
		}

		private void __0x10621( ProcedureUI.Button __0x10629 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10619( "Delete all objects?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10597 = new UndoMultiAction();

			foreach( var __0x10613 in GetObjects<GroupOfObjects>() )
			{
				var __0x10598 = __0x10613.ObjectsGetAll();
				if( __0x10598.Count != 0 )
				{
					var __0x10599 = new GroupOfObjectsUndo.UndoActionCreateDelete( __0x10613, __0x10598.ToArray(), false, true );
					__0x10597.AddAction( __0x10599 );
				}
			}

			if( __0x10597.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10597 );
		}

		private unsafe void __0x10622( ProcedureUI.Button __0x10630 )
		{
			var __0x10600 = new UndoMultiAction();
			foreach( var __0x10614 in GetObjects<GroupOfObjects>() )
			{
				foreach( var __0x10615 in __0x10614.GetComponents<GroupOfObjectsElement>() )
				{
					var __0x10601 = __0x10615 as GroupOfObjectsElement_Mesh;
					if( __0x10601 != null )
						__0x10601.UpdateAlignment( __0x10600 );

					var __0x10602 = __0x10615 as GroupOfObjectsElement_Surface;
					if( __0x10602 != null )
						__0x10602.UpdateAlignment( __0x10600 );
				}

				__0x10614.CreateSectors();
			}
			if( __0x10600.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10600 );

			
			
			
			
			

			
			

			
			
			
			

			
			
			
			

			
			
			
			
			

			
			
			
			
			

			
			
			
			

			
			
		}

		private unsafe void __0x10623( ProcedureUI.Button __0x10631 )
		{
			var __0x10603 = GetObjects<GroupOfObjects>();
			if( __0x10603.Length != 1 )
				return;

			var __0x10604 = __0x10603[ 0 ];
			var __0x10605 = __0x10604.ObjectsGetAll();
			var __0x10606 = sizeof( GroupOfObjects.Object );

			var __0x10607 = new List<string>();
			long __0x10608 = 0;

			foreach( var __0x10616 in __0x10604.GetComponents<GroupOfObjectsElement>() )
			{
				long __0x10609 = 0;
				foreach( var __0x10617 in __0x10605 )
				{
					ref var __0x10610 = ref __0x10604.ObjectGetData( __0x10617 );
					if( __0x10610.Element == __0x10616.Index )
						__0x10609++;
				}

				__0x10607.Add( $"{__0x10616}: {__0x10609 }" );
				
				__0x10608 += __0x10609;
			}

			__0x10607.Add( "" );
			__0x10607.Add( string.Format( __0x10619( "Total objects: {0}" ), __0x10608 ) );
			__0x10607.Add( string.Format( __0x10619( "Total data size: {0} MB." ), __0x10608 * __0x10606 / 1024 / 1024 ) );

			

			string __0x10611 = "";
			foreach( var __0x10618 in __0x10607 )
			{
				if( __0x10611 != "" )
					__0x10611 += "\r\n";
				__0x10611 += __0x10618;
			}

			EditorMessageBox.ShowInfo( __0x10611 );
		}

	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="GroupOfObjects"/>.
	/// </summary>
	public class GroupOfObjectsUndo
	{
		public class UndoActionCreateDelete : UndoSystem.Action
		{
			GroupOfObjects __0x10632;
			GroupOfObjects.Object[] __0x10633;
			bool __0x10634;

			

			public UndoActionCreateDelete( GroupOfObjects groupOfObjects, int[] indexes, bool create, bool callDestroyObjects )
			{
				this.__0x10632 = groupOfObjects;
				this.__0x10633 = groupOfObjects.ObjectsGetData( indexes );
				this.__0x10634 = create;

				if( !create && callDestroyObjects )
					__0x10638();
			}

			public UndoActionCreateDelete( GroupOfObjects groupOfObjects, GroupOfObjects.Object[] objects, bool create, bool callDestroyObjects )
			{
				this.__0x10632 = groupOfObjects;
				this.__0x10633 = objects;
				this.__0x10634 = create;

				if( !create && callDestroyObjects )
					__0x10638();
			}

			void __0x10637()
			{
				var __0x10635 = __0x10632.ObjectsAdd( __0x10633 );
				__0x10633 = __0x10632.ObjectsGetData( __0x10635 );
			}

			void __0x10638()
			{
				var __0x10636 = __0x10632.ObjectsRemove( __0x10633 );
				if( __0x10636 != __0x10633.Length )
					Log.Fatal( "GroupOfObjectsEditor: DestroyObjects: removedCount != objects.Length." );
			}

			protected internal override void DoUndo()
			{
				if( __0x10634 )
					__0x10638();
				else
					__0x10637();

				__0x10634 = !__0x10634;
			}

			protected internal override void DoRedo()
			{
				DoUndo();
			}

			protected internal override void Destroy()
			{
			}

			public override string ToString()
			{
				return string.Format( "GroupOfObjects: {0}", __0x10634 ? "Create" : "Delete" );
			}
		}

		

		
		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		

		
		

		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	public partial class ImageEditor : DocumentWindowWithViewport
	{
		public ImageEditor()
		{
			__0x10650();
		}

		public ImageComponent Texture
		{
			get { return (ImageComponent)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x10639 = CreateScene( false );

			if( Texture?.Result?.TextureType == ImageComponent.TypeEnum.Cube )
			{
				var __0x10640 = __0x10639.CreateComponent<Skybox>();
				__0x10640.Cubemap = Texture;
				__0x10640.AllowProcessEnvironmentCubemap = false;
			}

			__0x10639.Enabled = true;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			if( Texture?.Result?.TextureType == ImageComponent.TypeEnum._2D )
			{
				var __0x10641 = Texture.Result;

				var __0x10642 = __0x10641.ResultSize.ToVector2();
				var __0x10643 = viewport.SizeInPixels.ToVector2();

				
				{
					if( __0x10642.X > __0x10643.X * .95f )
					{
						var __0x10644 = __0x10643.X * .95f / __0x10642.X;
						__0x10642 *= __0x10644;
					}
					if( __0x10642.Y > __0x10643.Y * .95f )
					{
						var __0x10645 = __0x10643.Y * .95f / __0x10642.Y;
						__0x10642 *= __0x10645;
					}
				}

				var __0x10646 = __0x10642 / __0x10643;

				var __0x10647 = ( new Vector2( 1, 1 ) - __0x10646 ) / 2;

				var __0x10648 = new Rectangle( __0x10647, __0x10647 + __0x10646 );
				viewport.CanvasRenderer.AddQuad( __0x10648, new Rectangle( 0, 0, 1, 1 ), Texture, new ColorValue( 1, 1, 1 ), true );
			}
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

		}
	}
}

namespace NeoAxis.Editor
{
	partial class ImageEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x10649 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x10650()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "ImageEditor";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class ImagePreview : PreviewControlWithViewport
	{
		public ImagePreview()
		{
			__0x10667();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x10651 = CreateScene( false );

			var __0x10652 = ObjectOfPreview as ImageComponent;
			if( __0x10652?.Result?.TextureType == ImageComponent.TypeEnum.Cube )
			{
				var __0x10653 = __0x10651.CreateComponent<Skybox>();
				__0x10653.Cubemap = __0x10652;
				__0x10653.AllowProcessEnvironmentCubemap = false;
			}

			__0x10651.Enabled = true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			var __0x10654 = ObjectOfPreview as ImageComponent;
			if( __0x10654?.Result?.TextureType == ImageComponent.TypeEnum._2D )
			{
				double __0x10655 = 0.95;

				double __0x10656 = Math.Min(
					(double)viewport.SizeInPixels.X / (double)__0x10654.Result.ResultSize.X,
					(double)viewport.SizeInPixels.Y / (double)__0x10654.Result.ResultSize.Y );
				Vector2 __0x10657 = __0x10654.Result.ResultSize.ToVector2() * __0x10656 * __0x10655;
				Vector2 __0x10658 = viewport.SizeInPixels.ToVector2() / 2;
				Rectangle __0x10659 = new Rectangle( __0x10658 - __0x10657 / 2, __0x10658 + __0x10657 / 2 );

				Rectangle __0x10660 = __0x10659 / viewport.SizeInPixels.ToVector2();

				var __0x10661 = viewport.CanvasRenderer;

				var __0x10662 = false;
				if( __0x10659.Size.X >= __0x10654.Result.ResultSize.X && __0x10659.Size.Y >= __0x10654.Result.ResultSize.Y )
					__0x10662 = true;

				if( __0x10662 )
					__0x10661.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
				__0x10661.AddQuad( __0x10660, new Rectangle( 0, 0, 1, 1 ), __0x10654 );
				if( __0x10662 )
					__0x10661.PopTextureFilteringMode();
			}
		}

		static string __0x10666( string __0x10668 )
		{
			return EditorLocalization.Translate( "ImagePreviewControl", __0x10668 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			var __0x10663 = ObjectOfPreview as ImageComponent;
			if( __0x10663 != null )
			{
				var __0x10664 = __0x10663.Result;
				if( __0x10664 != null )
				{
					lines.Add( __0x10666( "Source" ) + $": {__0x10664.SourceSize}, {TypeUtility.DisplayNameAddSpaces( __0x10664.SourceFormat.ToString() )}" );
					lines.Add( __0x10666( "Processed" ) + $": {__0x10664.ResultSize}, {TypeUtility.DisplayNameAddSpaces( __0x10664.ResultFormat.ToString() )}" );
					lines.Add( __0x10666( "Type" ) + $": " + TypeUtility.DisplayNameAddSpaces( __0x10664.TextureType.ToString() ) );
				}
				else
					lines.Add( __0x10666( "No data" ) );
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ImagePreview
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x10665 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x10665 != null))
            {
                __0x10665.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x10667()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ImagePreview";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class ImagePreviewImage : PreviewImageGenerator
	{
		public ImagePreviewImage()
		{
		}

		public override bool ClampImage
		{
			get { return false; }
		}

		protected override void OnUpdate()
		{
			var __0x10669 = CreateScene( false );

			var __0x10670 = ObjectOfPreview as ImageComponent;
			if( __0x10670?.Result?.TextureType == ImageComponent.TypeEnum.Cube )
			{
				var __0x10671 = __0x10669.CreateComponent<Skybox>();
				__0x10671.Cubemap = __0x10670;
				__0x10671.AllowProcessEnvironmentCubemap = false;
			}

			__0x10669.Enabled = true;

			if( __0x10670?.Result?.TextureType == ImageComponent.TypeEnum._2D )
			{
				double __0x10672 = 0.95;

				double __0x10673 = Math.Min(
					(double)Viewport.SizeInPixels.X / (double)__0x10670.Result.ResultSize.X,
					(double)Viewport.SizeInPixels.Y / (double)__0x10670.Result.ResultSize.Y );
				Vector2 __0x10674 = __0x10670.Result.ResultSize.ToVector2() * __0x10673 * __0x10672;
				Vector2 __0x10675 = Viewport.SizeInPixels.ToVector2() / 2;
				Rectangle __0x10676 = new Rectangle( __0x10675 - __0x10674 / 2, __0x10675 + __0x10674 / 2 );

				Rectangle __0x10677 = __0x10676 / Viewport.SizeInPixels.ToVector2();

				var __0x10678 = Viewport.CanvasRenderer;

				var __0x10679 = false;
				if( __0x10676.Size.X >= __0x10670.Result.ResultSize.X && __0x10676.Size.Y >= __0x10670.Result.ResultSize.Y )
					__0x10679 = true;

				if( __0x10679 )
					__0x10678.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
				__0x10678.AddQuad( __0x10677, new Rectangle( 0, 0, 1, 1 ), __0x10670 );
				if( __0x10679 )
					__0x10678.PopTextureFilteringMode();
			}
		}

	}
}





namespace NeoAxis.Editor
{
	public class Import3DEditor : CanvasBasedEditor
	{
		bool __0x10680 = true;

		bool __0x10681;
		Import3D __0x10682;
		Dictionary<Mesh, Transform> __0x10683;

		

		public Import3D Import
		{
			get { return (Import3D)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x10684 = CreateScene( false );
			__0x10726();
			__0x10684.Enabled = true;

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x10725;
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x10725;

			base.OnDestroy();
		}

		public void NeedRecreateDisplayObject( bool resetCamera )
		{
			__0x10681 = true;
			if( resetCamera )
				__0x10680 = true;

			unchecked
			{
				if( Import != null )
					Import.VersionForPreviewDisplay++;
			}
		}

		private void __0x10725( object __0x10731, EventArgs __0x10732 )
		{
			__0x10681 = true;

			unchecked
			{
				if( Import != null )
					Import.VersionForPreviewDisplay++;
			}
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		void __0x10726()
		{
			if( Import != null )
				__0x10682 = Import.CreateForPreviewDisplay( Scene, out _, out __0x10683 );
		}

		void __0x10727()
		{
			if( __0x10682 != null )
			{
				__0x10682.RemoveFromParent( false );
				__0x10682.Dispose();
				__0x10682 = null;
				__0x10683 = null;
			}
		}

		protected override void OnViewportUpdateBegin()
		{
			base.OnViewportUpdateBegin();

			if( Scene != null && __0x10681 )
			{
				__0x10681 = false;
				__0x10727();
				__0x10726();
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x10680 && Scene.CameraEditor.Value != null )
			{
				__0x10728();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );

				__0x10680 = false;
			}
		}

		void __0x10728()
		{
			var __0x10685 = Scene.CameraEditor.Value;

			var __0x10686 = Scene.CalculateTotalBoundsOfObjectsInSpace();

			var __0x10687 = __0x10686.GetCenter();

			

			double __0x10688 = Math.Max( Math.Max( __0x10686.GetSize().X, __0x10686.GetSize().Y ), __0x10686.GetSize().Z );
			double __0x10689 = __0x10688 * 2;
			if( __0x10689 < 2 )
				__0x10689 = 2;

			double __0x10690 = 1;
			SphericalDirection __0x10691 = new SphericalDirection( -3.83, -.47 );

			var __0x10692 = __0x10687 - __0x10691.GetVector() * __0x10689 * __0x10690;
			var __0x10693 = __0x10687;

			Vector3 __0x10694 = __0x10692;
			Vector3 __0x10695 = __0x10693;
			Degree __0x10696 = 65;

			
			
			__0x10685.FieldOfView = __0x10696;
			__0x10685.NearClipPlane = Math.Max( __0x10689 / 10000, 0.01 );
			__0x10685.FarClipPlane = Math.Max( 1000, __0x10689 * 2 );

			__0x10685.Transform = new Transform( __0x10694, Quaternion.LookAt( ( __0x10695 - __0x10694 ).GetNormalize(), Vector3.ZAxis ) );
			__0x10685.FixedUp = Vector3.ZAxis;
		}

		Bounds __0x10729()
		{
			Bounds __0x10697 = NeoAxis.Bounds.Cleared;

			if( __0x10682 != null )
			{
				
				
				foreach( var __0x10720 in __0x10682.GetComponents<ObjectInSpace>( false, true ) )
				{
					if( __0x10720.SpaceBounds.BoundingBox.HasValue )
						__0x10697.Add( __0x10720.SpaceBounds.BoundingBox.Value );
				}
			}

			return __0x10697;
		}

		protected override void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.OnGetTextInfoLeftTopCorner( lines );

			if( Import != null )
			{
				{
					int __0x10698 = Import.GetComponents<Material>( false, true ).Length;
					lines.Add( "Materials: " + __0x10698.ToString() );
				}

				{
					int __0x10699 = Import.GetComponents<Mesh>( false, true ).Where( __0x10733 => __0x10733.FindParent<Mesh>() == null ).Count();
					lines.Add( "Meshes: " + __0x10699.ToString() );
				}

				int __0x10700 = Import.GetComponents<ObjectInSpace>( false, true ).Length;
				if( __0x10700 != 0 )
					lines.Add( "Scene objects: " + __0x10700.ToString() );

				var __0x10701 = __0x10729();
				if( !__0x10701.IsCleared() )
				{
					string __0x10702 = "";
					if( Import.GetComponent( "Mesh" ) != null )
						__0x10702 = "Mesh size";
					else if( __0x10700 != 0 )
						__0x10702 = "Total size of scene objects";
					if( !string.IsNullOrEmpty( __0x10702 ) )
						lines.Add( string.Format( "{0}: {1}", __0x10702, __0x10701.GetSize().ToString( 3 ) ) );
				}
			}
		}

		T[] __0x10730<T>( byte[] __0x10734, int __0x10735, int __0x10736, int __0x10737 ) where T : unmanaged
		{
			T[] __0x10703 = new T[ __0x10736 ];
			unsafe
			{
				fixed ( byte* __0x10704 = __0x10734 )
				{
					byte* __0x10705 = __0x10704 + __0x10737;
					for( int __0x10706 = 0; __0x10706 < __0x10736; __0x10706++ )
					{
						__0x10703[ __0x10706 ] = *(T*)__0x10705;
						__0x10705 += __0x10735;
					}
				}
			}
			return __0x10703;
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			{
				var __0x10707 = new ESet<MeshGeometry>();
				foreach( var __0x10721 in Import.GetComponents<MeshGeometry>( checkChildren: true ) )
				{
					
					if( __0x10721.ParentMesh != null && __0x10721.ParentMesh.FindParent<Mesh>() == null )
					{
						
						if( SelectedObjectsSet.Contains( __0x10721.ParentMesh ) && Import.GetComponent( "Mesh" ) == null )
							__0x10707.AddWithCheckAlreadyContained( __0x10721 );

						if( SelectedObjectsSet.Contains( __0x10721 ) )
							__0x10707.AddWithCheckAlreadyContained( __0x10721 );

						var __0x10708 = __0x10721.Material.Value;
						if( __0x10708 != null && SelectedObjectsSet.Contains( __0x10708 ) )
							__0x10707.AddWithCheckAlreadyContained( __0x10721 );
					}
				}

				foreach( var __0x10722 in __0x10707 )
				{
					var __0x10709 = __0x10722.ParentMesh;
					var __0x10710 = __0x10722.VertexStructure.Value;
					var __0x10711 = __0x10722.Vertices.Value;
					var __0x10712 = __0x10722.Indices.Value;

					if( __0x10710 != null )
					{
						__0x10710.GetInfo( out var vertexSize, out var holes );
						var __0x10713 = __0x10711.Length / vertexSize;

						try
						{
							if( __0x10710.GetElementBySemantic( VertexElementSemantic.Position, out var element ) && element.Type == VertexElementType.Float3 )
							{
								if( __0x10711 != null && __0x10712 != null )
								{
									

									var __0x10714 = __0x10730<Vector3F>( __0x10711, vertexSize, __0x10713, element.Offset );

									Transform __0x10715;
									if( !__0x10683.TryGetValue( __0x10709, out __0x10715 ) )
										__0x10715 = Transform.Identity;
									var __0x10716 = __0x10715.ToMatrix4();

									Viewport.Simple3DRenderer.SetColor( ProjectSettings.Get.General.SelectedColor );
									Viewport.Simple3DRenderer.AddTriangles( __0x10714, __0x10712, ref __0x10716, true, true );
								}
							}
						}
						catch( Exception e )
						{
							Log.Warning( e.Message );
						}
					}
				}
			}

			
			
			
			
			
			
			

			
			{
				var __0x10717 = new ESet<ObjectInSpace>();
				foreach( var __0x10723 in SelectedObjects )
				{
					var __0x10718 = __0x10723 as ObjectInSpace;
					if( __0x10718 != null )
						__0x10717.Add( __0x10718 );
				}

				foreach( var __0x10724 in __0x10717 )
				{
					var __0x10719 = __0x10724.SpaceBounds.CalculatedBoundingBox;

					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, 0.5 ) );
					Viewport.Simple3DRenderer.AddBounds( __0x10719 );

					
					
					
					
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Import3DPreview : CanvasBasedPreview
	{
		Import3D __0x10738;
		long __0x10739;

		bool __0x10740;
		Mesh __0x10741;
		Reference<ImageComponent> __0x10742;
		Skybox __0x10743;

		

		protected override void OnCreate()
		{
			base.OnCreate();

			CreateScene( false );
			__0x10750();
			Scene.Enabled = true;
			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );

			var __0x10744 = ObjectOfPreview as Import3D;
			var __0x10745 = __0x10744?.GetComponent( "Mesh" ) as Mesh;
			if( __0x10745 != null && __0x10745.EditorCameraTransform != null )
			{
				var __0x10746 = __0x10745.EditorCameraTransform;
				CameraInitialDistance = ( __0x10746.Position - CameraLookTo ).Length();
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x10746.Position );
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			
			{
				var __0x10747 = __0x10740 ? ProjectSettings.Get.General.GetMaterialPreviewEnvironment() : new Reference<ImageComponent>();
				if( !__0x10742.Equals( __0x10747 ) )
					__0x10751();
			}
		}

		protected override void OnTick( float delta )
		{
			base.OnTick( delta );

			__0x10750();
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
		}

		void __0x10750()
		{
			if( Scene == null )
				return;

			var __0x10748 = ObjectOfPreview as Import3D;
			if( __0x10748 != null )
			{
				if( __0x10738 == null || __0x10739 != __0x10748.VersionForPreviewDisplay || __0x10741 != ProjectSettings.Get.General.MaterialPreviewMesh.Value )
				{
					Scene.Enabled = false;

					if( __0x10738 != null )
					{
						__0x10738.RemoveFromParent( false );
						__0x10738.Dispose();
					}

					__0x10738 = __0x10748.CreateForPreviewDisplay( Scene, out __0x10740, out _ );
					__0x10739 = __0x10748.VersionForPreviewDisplay;

					Scene.Enabled = true;

					__0x10741 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;
				}
			}
		}

		void __0x10751()
		{
			var __0x10749 = __0x10740 ? ProjectSettings.Get.General.GetMaterialPreviewEnvironment() : new Reference<ImageComponent>();

			__0x10742 = __0x10749;

			if( __0x10749.ReferenceSpecified )
			{
				if( __0x10743 == null )
					__0x10743 = Scene.CreateComponent<Skybox>();
				__0x10743.Cubemap = __0x10749;
			}
			else
			{
				__0x10743?.Dispose();
				__0x10743 = null;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Import3DPreviewImage : PreviewImageGenerator
	{
		public Import3DPreviewImage()
		{
		}

		protected override void OnUpdate()
		{
			CreateScene( false );

			var __0x10752 = ObjectOfPreview as Import3D;
			if( __0x10752 != null )
				__0x10752.CreateForPreviewDisplay( Scene, out _, out _ );

			Scene.Enabled = true;

			var __0x10753 = 2.6;

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), __0x10753 );

			var __0x10754 = __0x10752.GetComponent( "Mesh" ) as Mesh;
			if( __0x10754 != null && __0x10754.EditorCameraTransform != null )
			{
				var __0x10755 = __0x10754.EditorCameraTransform;
				CameraDistance = ( __0x10755.Position - CameraLookTo ).Length() * __0x10753;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x10755.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Import3DSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10756;

		


		static string __0x10764( string __0x10767 )
		{
			return EditorLocalization.Translate( "Import3D", __0x10767 );
		}

		protected override void OnInit()
		{
			__0x10756 = ProcedureForm.CreateButton( __0x10764( "Re-import" ) );
			__0x10756.Click += __0x10766;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10756 } );
		}

		void __0x10765()
		{
			var __0x10757 = Provider.SelectedObjects[ 0 ] as Import3D;
			if( __0x10757 == null )
				return;

			var __0x10758 = new Import3D.ReimportSettings();

			var __0x10759 = new SpecifyParametersForm( __0x10764( "Re-import" ), __0x10758 );
			__0x10759.CheckHandler = delegate ( ref string __0x10768 )
			{
				return true;
			};
			if( __0x10759.ShowDialog() != DialogResult.OK )
				return;


			
			Provider.DocumentWindow?.Document?.UndoSystem.Clear();

			if( !__0x10757.DoUpdate( __0x10758, out string error ) )
			{
				var __0x10760 = __0x10757.ParentRoot.HierarchyController?.CreatedByResource?.Owner.Name;
				if( string.IsNullOrEmpty( __0x10760 ) )
					__0x10760 = "NO FILE NAME";
				var __0x10761 = string.Format( __0x10764( "Unable to load or import resource \'{0}\'." ), __0x10760 ) + "\r\n\r\n" + error;
				Log.Error( __0x10761 );
				return;
			}

			if( Provider?.DocumentWindow != null )
			{
				Provider.DocumentWindow.Document.Modified = true;

				
				var __0x10762 = Provider.DocumentWindow as DocumentWindowWithViewport_CanvasBasedEditor;
				if( __0x10762 != null )
				{
					var __0x10763 = __0x10762.Editor as Import3DEditor;
					__0x10763?.NeedRecreateDisplayObject( true );
				}
				
				
			}
		}

		private void __0x10766( ProcedureUI.Button __0x10769 )
		{
			__0x10765();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class MaterialEditor : DocumentWindowWithViewport
	{
		bool __0x10770 = true;

		
		

		Mesh __0x10771;
		Mesh __0x10772;

		Reference<ImageComponent> __0x10773;
		ColorValuePowered __0x10774;
		double __0x10775 = -1;
		Skybox __0x10776;

		

		public MaterialEditor()
		{
			__0x10807();
		}

		public Material Material
		{
			get { return (Material)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			
			{
				var __0x10777 = CreateScene( false );

				var __0x10778 = __0x10777.CreateComponent<MeshInSpace>();
				__0x10778.Name = "Mesh In Space";
				__0x10778.ReplaceMaterial = Material;

				__0x10805();
				__0x10806();

				__0x10777.Enabled = true;
			}

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );

			
			

			__0x10801.Start();
		}

		protected override void OnDestroy()
		{
			
			

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			
			{
				var __0x10779 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;
				if( __0x10771 != __0x10779 )
				{
					__0x10805();
					__0x10770 = true;
				}
			}

			__0x10806();

			if( __0x10770 && scene.CameraEditor.Value != null )
			{
				__0x10802();
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, scene.CameraEditor );

				__0x10770 = false;
			}
		}

		void __0x10802()
		{
			var __0x10780 = Scene.CameraEditor.Value;
			var __0x10781 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			var __0x10782 = __0x10781.GetCenter();

			

			double __0x10783 = Math.Max( Math.Max( __0x10781.GetSize().X, __0x10781.GetSize().Y ), __0x10781.GetSize().Z );
			double __0x10784 = __0x10783 * 2;
			if( __0x10784 < 2 )
				__0x10784 = 2;

			double __0x10785 = 1;
			SphericalDirection __0x10786 = new SphericalDirection( -3.83, -.47 );

			var __0x10787 = __0x10782 - __0x10786.GetVector() * __0x10784 * __0x10785;
			var __0x10788 = __0x10782;

			Vector3 __0x10789 = __0x10787;
			Vector3 __0x10790 = __0x10788;
			Degree __0x10791 = 65;

			
			
			__0x10780.FieldOfView = __0x10791;
			__0x10780.NearClipPlane = Math.Max( __0x10784 / 10000, 0.01 );
			__0x10780.FarClipPlane = Math.Max( 1000, __0x10784 * 2 );

			__0x10780.Transform = new Transform( __0x10789, Quaternion.LookAt( ( __0x10790 - __0x10789 ).GetNormalize(), Vector3.ZAxis ) );
			__0x10780.FixedUp = Vector3.ZAxis;
		}

		static string __0x10803( string __0x10808 )
		{
			return EditorLocalization.Translate( "MaterialDocumentWindow", __0x10808 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			if( Material != null )
			{
				var __0x10792 = Material.Result;
				if( __0x10792 != null )
				{
					var __0x10793 = __0x10792 as Material.CompiledMaterialData;
					if( __0x10793 != null )
					{
						if( __0x10793.deferredShadingSupport )
							lines.Add( __0x10803( "Deferred shading is supported." ) );
						else
							lines.Add( string.Format( __0x10803( "Deferred shading is not supported because {0}." ), __0x10793.deferredShadingSupportReason ) );

						if( __0x10793.receiveDecalsSupport )
							lines.Add( __0x10803( "Receiving decals is supported." ) );
						else
							lines.Add( string.Format( __0x10803( "Receiving decals is not supported because {0}." ), __0x10793.receiveDecalsSupportReason ) );

						if( __0x10793.decalSupport )
							lines.Add( __0x10803( "Decal rendering is supported." ) );
						else
							lines.Add( string.Format( __0x10803( "Decal rendering is not supported because {0}." ), __0x10793.decalSupportReason ) );
					}
				}
			}
		}

		
		
		
		

		
		
		

		private void __0x10804( object __0x10809, EventArgs __0x10810 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( Material != null )
			{
				

				
				
				

				
				
				

				
				
				
				
				
				
				
				
				
				
			}
		}

		void __0x10805()
		{
			var __0x10794 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;

			__0x10771 = __0x10794;

			if( __0x10794 == null )
			{
				if( __0x10772 == null )
				{
					
					__0x10772 = Scene.CreateComponent<Mesh>( enabled: false );
					var __0x10795 = __0x10772.CreateComponent<MeshGeometry_Sphere>();
					__0x10795.SegmentsHorizontal = 64;
					__0x10795.SegmentsVertical = 64;
					__0x10772.Enabled = true;
				}
				__0x10794 = __0x10772;
			}

			var __0x10796 = (MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x10796.Mesh = __0x10794;
		}

		void __0x10806()
		{
			var __0x10797 = ProjectSettings.Get.General.GetMaterialPreviewEnvironment();
			var __0x10798 = ProjectSettings.Get.General.MaterialPreviewEnvironmentMultiplier.Value;
			var __0x10799 = ProjectSettings.Get.General.MaterialPreviewEnvironmentAffectLighting.Value;

			if( !__0x10773.Equals( __0x10797 ) || __0x10774 != __0x10798 || __0x10775 != __0x10799 )
			{
				__0x10773 = __0x10797;
				__0x10774 = __0x10798;
				__0x10775 = __0x10799;

				if( __0x10797.Value != null )
				{
					if( __0x10776 == null )
						__0x10776 = Scene.CreateComponent<Skybox>();
					__0x10776.Cubemap = __0x10797;
					__0x10776.Multiplier = __0x10798;
					__0x10776.AffectLighting = __0x10799;
				}
				else
				{
					__0x10776?.Dispose();
					__0x10776 = null;
				}
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MaterialEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x10800 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x10807()
		{
			this.__0x10800 = new System.ComponentModel.Container();
			this.__0x10801 = new System.Windows.Forms.Timer(this.__0x10800);
			this.SuspendLayout();
			
			
			
			this.__0x10801.Interval = 50;
			this.__0x10801.Tick += new System.EventHandler(this.__0x10804);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "MaterialEditor";
			this.Size = new System.Drawing.Size(785, 518);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x10801;
	}
}






namespace NeoAxis.Editor
{
	public partial class MaterialPreview : PreviewControlWithViewport
	{
		Mesh __0x10811;
		Mesh __0x10812;

		Reference<ImageComponent> __0x10813;
		ColorValuePowered __0x10814;
		double __0x10815 = -1;
		Skybox __0x10816;

		

		public MaterialPreview()
		{
			__0x10830();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			Material __0x10817 = ObjectOfPreview as Material;

			
			{
				var __0x10818 = CreateScene( false );

				var __0x10819 = __0x10818.CreateComponent<MeshInSpace>();
				__0x10819.Name = "Mesh In Space";
				__0x10819.ReplaceMaterial = __0x10817;

				__0x10828();
				__0x10829();

				__0x10818.Enabled = true;
			}

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			
			{
				var __0x10820 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;
				if( __0x10811 != __0x10820 )
				{
					__0x10828();
					SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );
					
				}
			}

			__0x10829();
		}

		void __0x10828()
		{
			var __0x10821 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;

			__0x10811 = __0x10821;

			if( __0x10821 == null )
			{
				if( __0x10812 == null )
				{
					
					__0x10812 = Scene.CreateComponent<Mesh>( enabled: false );
					var __0x10822 = __0x10812.CreateComponent<MeshGeometry_Sphere>();
					__0x10822.SegmentsHorizontal = 64;
					__0x10822.SegmentsVertical = 64;
					__0x10812.Enabled = true;
				}
				__0x10821 = __0x10812;
			}

			var __0x10823 = (MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x10823.Mesh = __0x10821;
		}

		void __0x10829()
		{
			var __0x10824 = ProjectSettings.Get.General.GetMaterialPreviewEnvironment();
			var __0x10825 = ProjectSettings.Get.General.MaterialPreviewEnvironmentMultiplier.Value;
			var __0x10826 = ProjectSettings.Get.General.MaterialPreviewEnvironmentAffectLighting.Value;

			if( !__0x10813.Equals( __0x10824 ) || __0x10814 != __0x10825 || __0x10815 != __0x10826 )
			{
				__0x10813 = __0x10824;
				__0x10814 = __0x10825;
				__0x10815 = __0x10826;

				if( __0x10824.Value != null )
				{
					if( __0x10816 == null )
						__0x10816 = Scene.CreateComponent<Skybox>();
					__0x10816.Cubemap = __0x10824;
					__0x10816.Multiplier = __0x10825;
					__0x10816.AffectLighting = __0x10826;
				}
				else
				{
					__0x10816?.Dispose();
					__0x10816 = null;
				}
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class MaterialPreview
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x10827 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x10827 != null))
            {
                __0x10827.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x10830()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Material_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class MaterialPreviewImage : PreviewImageGenerator
	{
		public MaterialPreviewImage()
		{
		}

		protected override void OnUpdate()
		{
			var __0x10831 = ObjectOfPreview as Material;

			
			{
				var __0x10832 = CreateScene( false );

				var __0x10833 = __0x10832.CreateComponent<MeshInSpace>();
				__0x10833.Name = "Mesh In Space";
				__0x10833.ReplaceMaterial = __0x10831;

				__0x10832.Enabled = true;
			}

			__0x10837();
			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), 2.6 );
		}

		void __0x10837()
		{
			var __0x10834 = ProjectSettings.Get.General.MaterialPreviewMesh.Value;

			if( __0x10834 == null )
			{
				
				__0x10834 = Scene.CreateComponent<Mesh>( enabled: false );
				var __0x10835 = __0x10834.CreateComponent<MeshGeometry_Sphere>();
				__0x10835.SegmentsHorizontal = 64;
				__0x10835.SegmentsVertical = 64;
				__0x10834.Enabled = true;
			}

			var __0x10836 = (MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x10836.Mesh = __0x10834;
		}

	}
}





namespace NeoAxis.Editor
{
	public class MaterialSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10838;
		ProcedureUI.Check __0x10839;

		

		protected override void OnInit()
		{
			__0x10838 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x10838.Click += __0x10847;

			__0x10839 = ProcedureForm.CreateCheck( EditorLocalization.Translate( "General", "Auto update" ) );
			__0x10839.Click += __0x10848;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10838, __0x10839 } );
		}

		private void __0x10847( ProcedureUI.Button __0x10849 )
		{
			foreach( var __0x10845 in GetObjects<Material>() )
				__0x10845.PerformResultCompile();
			
			
		}

		private void __0x10848( ProcedureUI.Check __0x10850 )
		{
			if( __0x10839.Checked == ProcedureUI.Check.CheckValue.Indeterminate )
				return;

			var __0x10840 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x10846 in GetObjects<Material>() )
			{
				var __0x10841 = __0x10846.EditorAutoUpdate;

				__0x10846.EditorAutoUpdate = __0x10839.Checked == ProcedureUI.Check.CheckValue.Checked;

				var __0x10842 = (Metadata.Property)__0x10846.MetadataGetMemberBySignature( "property:EditorAutoUpdate" );
				__0x10840.Add( new UndoActionPropertiesChange.Item( __0x10846, __0x10842, __0x10841 ) );
			}

			var __0x10843 = new UndoActionPropertiesChange( __0x10840 );
			Provider.DocumentWindow.Document.CommitUndoAction( __0x10843 );
		}

		protected override void OnUpdate()
		{
			var __0x10844 = GetObjects<Material>();

			if( __0x10844.All( __0x10851 => __0x10851.EditorAutoUpdate ) )
				__0x10839.Checked = ProcedureUI.Check.CheckValue.Checked;
			else if( __0x10844.All( __0x10852 => !__0x10852.EditorAutoUpdate ) )
				__0x10839.Checked = ProcedureUI.Check.CheckValue.Unchecked;
			else
				__0x10839.Checked = ProcedureUI.Check.CheckValue.Indeterminate;

			
		}
	}
}





namespace NeoAxis.Editor
{
	public class MeshEditor : CanvasBasedEditor
	{
		bool __0x10853 = true;

		int __0x10854 = -1;
		Mesh.CompiledData __0x10855;
		CanvasRenderer.TriangleVertex[] __0x10856;
		CanvasRenderer.TriangleVertex[] __0x10857;

		MeshInSpaceAnimationController __0x10858;

		bool __0x10859;

		MeshInSpace __0x10860;
		
		MeshInSpace __0x10861;

		

		public Mesh Mesh
		{
			get { return (Mesh)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x10862 = CreateScene( false );
			if( Mesh != null )
			{
				__0x10860 = __0x10862.CreateComponent<MeshInSpace>();
				__0x10860.Mesh = Mesh;
				__0x10858 = __0x10860.CreateComponent<MeshInSpaceAnimationController>();
			}
			__0x10862.Enabled = true;

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x10990;

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x10990;

			__0x10860?.Dispose();
			__0x10860 = null;
			__0x10861?.Dispose();
			__0x10861 = null;

			base.OnDestroy();
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x10853 && Scene.CameraEditor.Value != null )
			{
				__0x10984();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );
			}

			if( Mesh != null && Scene.CameraEditor.Value != null )
				Mesh.EditorCameraTransform = Scene.CameraEditor.Value.Transform;

			__0x10853 = false;
		}

		void __0x10984()
		{
			

			var __0x10863 = Scene.CameraEditor.Value;
			var __0x10864 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			
			var __0x10865 = __0x10864.GetCenter();

			

			double __0x10866 = Math.Max( Math.Max( __0x10864.GetSize().X, __0x10864.GetSize().Y ), __0x10864.GetSize().Z );
			double __0x10867 = __0x10866 * 2;
			if( __0x10867 < 2 )
				__0x10867 = 2;

			double __0x10868 = 1;
			SphericalDirection __0x10869 = new SphericalDirection( -3.83, -.47 );

			var __0x10870 = __0x10865 - __0x10869.GetVector() * __0x10867 * __0x10868;
			var __0x10871 = __0x10865;

			Vector3 __0x10872 = __0x10870;
			Vector3 __0x10873 = __0x10871;
			Degree __0x10874 = 65;

			
			
			__0x10863.FieldOfView = __0x10874;
			__0x10863.NearClipPlane = Math.Max( __0x10867 / 10000, 0.01 );
			__0x10863.FarClipPlane = Math.Max( 1000, __0x10867 * 2 );

			if( Mesh != null && Mesh.EditorCameraTransform != null )
				__0x10863.Transform = Mesh.EditorCameraTransform;
			else
				__0x10863.Transform = new Transform( __0x10872, Quaternion.LookAt( ( __0x10873 - __0x10872 ).GetNormalize(), Vector3.ZAxis ) );

			__0x10863.FixedUp = Vector3.ZAxis;

		}

		T[] __0x10985<T>( byte[] __0x10991, int __0x10992, int __0x10993, int __0x10994 ) where T : unmanaged
		{
			T[] __0x10875 = new T[ __0x10993 ];
			unsafe
			{
				fixed( byte* __0x10876 = __0x10991 )
				{
					byte* __0x10877 = __0x10876 + __0x10994;
					for( int __0x10878 = 0; __0x10878 < __0x10993; __0x10878++ )
					{
						__0x10875[ __0x10878 ] = *(T*)__0x10877;
						__0x10877 += __0x10992;
					}
				}
			}
			return __0x10875;
		}

		int __0x10986()
		{
			if( Mesh.EditorDisplayLOD != 0 )
			{
				var __0x10879 = Mesh.Result?.MeshData?.LODs;
				if( __0x10879 != null )
					return Math.Min( Mesh.EditorDisplayLOD, __0x10879.Length );
			}
			return 0;
		}

		Mesh.CompiledData __0x10987()
		{
			return Mesh.Result?.GetLOD( __0x10986() );
		}

		protected override void OnTick( float delta )
		{
			base.OnTick( delta );

			if( Mesh != null && __0x10859 )
			{
				Mesh.PerformResultCompile();
				__0x10859 = false;

				__0x10861?.Dispose();
				__0x10861 = null;
			}
			
			
			
			
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			if( Mesh != null && Mesh.Result != null )
			{
				var __0x10880 = Mesh.Result.SpaceBounds;
				var __0x10881 = __0x10987();

				
				if( ProjectSettings.Get.General.ShowCenteringBorders )
				{
					double __0x10882 = 0.8;

					var __0x10883 = __0x10882 * 0.5 * Viewport.CanvasRenderer.AspectRatioInv;
					var __0x10884 = __0x10882 * 0.5;

					var __0x10885 = new Rectangle( new Vector2( 0.5, 0.5 ) );
					__0x10885.Expand( new Vector2( __0x10883, __0x10884 ) );
					Viewport.CanvasRenderer.AddRectangle( __0x10885, new ColorValue( 1, 1, 1, 0.05 ) );
				}

				
				if( Mesh.EditorDisplayPivot )
				{
					var __0x10886 = 35 * EditorAPI.DPIScale;
					var __0x10887 = Viewport.Simple3DRenderer.GetThicknessByPixelSize( Vector3.Zero, __0x10886 );
					
					

					var __0x10888 = __0x10887 / 20;
					var __0x10889 = __0x10887 / 3;
					var __0x10890 = __0x10889 / 3;
					var __0x10891 = 1.0;

					
					
					
					
					
					

					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, __0x10891 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.XAxis * __0x10887, __0x10889, __0x10890, true, __0x10888 );
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, __0x10891 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.YAxis * __0x10887, __0x10889, __0x10890, true, __0x10888 );
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, __0x10891 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.ZAxis * __0x10887, __0x10889, __0x10890, true, __0x10888 );
				}

				
				if( Mesh.EditorDisplayVertexColor )
				{
					var __0x10892 = __0x10881.GetExtractedVertices( true );

					var __0x10893 = new Simple3DRenderer.Vertex[ __0x10892.Length ];
					for( int __0x10894 = 0; __0x10894 < __0x10893.Length; __0x10894++ )
					{
						ref var __0x10895 = ref __0x10892[ __0x10894 ];

						var __0x10896 = new Simple3DRenderer.Vertex();
						__0x10896.position = __0x10895.Position;

						__0x10896.color = RenderingSystem.ConvertColorValue( ref __0x10895.Color );
						

						
						__0x10893[ __0x10894 ] = __0x10896;
					}

					Viewport.Simple3DRenderer.AddTriangles( __0x10893, __0x10881.ExtractedIndices, false, true );
				}

				
				if( Mesh.EditorDisplayTriangles )
				{
					
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, 0.7 ) );
					
					Viewport.Simple3DRenderer.AddTriangles( __0x10881.ExtractedVerticesPositions, __0x10881.ExtractedIndices, true, false );
				}

				
				if( Mesh.EditorDisplayVertices )
				{
					var __0x10897 = __0x10880.CalculatedBoundingBox.GetSize();
					var __0x10898 = (float)Math.Max( __0x10897.X, Math.Max( __0x10897.Y, __0x10897.Z ) ) / 200;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, 0.7 ) );
					
					foreach( var __0x10973 in __0x10881.ExtractedVerticesPositions )
					{
						Viewport.Simple3DRenderer.AddLineThin( __0x10973 - new Vector3F( __0x10898, 0, 0 ), __0x10973 + new Vector3F( __0x10898, 0, 0 ) );
						Viewport.Simple3DRenderer.AddLineThin( __0x10973 - new Vector3F( 0, __0x10898, 0 ), __0x10973 + new Vector3F( 0, __0x10898, 0 ) );
						Viewport.Simple3DRenderer.AddLineThin( __0x10973 - new Vector3F( 0, 0, __0x10898 ), __0x10973 + new Vector3F( 0, 0, __0x10898 ) );
					}
				}

				
				if( Mesh.EditorDisplayNormals )
				{
					var __0x10899 = __0x10880.CalculatedBoundingBox.GetSize();
					var __0x10900 = (float)Math.Max( __0x10899.X, Math.Max( __0x10899.Y, __0x10899.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, 0.7 ) );
					foreach( var __0x10974 in __0x10881.GetExtractedVertices( true ) )
					{
						if( __0x10974.Normal != Vector3F.Zero )
							Viewport.Simple3DRenderer.AddLineThin( __0x10974.Position, __0x10974.Position + __0x10974.Normal * __0x10900 );
					}
				}

				
				if( Mesh.EditorDisplayTangents )
				{
					var __0x10901 = __0x10880.CalculatedBoundingBox.GetSize();
					var __0x10902 = (float)Math.Max( __0x10901.X, Math.Max( __0x10901.Y, __0x10901.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, 0.7 ) );
					foreach( var __0x10975 in __0x10881.GetExtractedVertices( true ) )
					{
						if( __0x10975.Tangent != Vector4F.Zero )
							Viewport.Simple3DRenderer.AddLineThin( __0x10975.Position, __0x10975.Position + __0x10975.Tangent.ToVector3F() * __0x10902 );
					}
				}

				
				if( Mesh.EditorDisplayBinormals )
				{
					var __0x10903 = __0x10880.CalculatedBoundingBox.GetSize();
					var __0x10904 = (float)Math.Max( __0x10903.X, Math.Max( __0x10903.Y, __0x10903.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, 0.7 ) );
					foreach( var __0x10976 in __0x10881.GetExtractedVertices( true ) )
					{
						if( __0x10976.Normal != Vector3F.Zero && __0x10976.Tangent != Vector4F.Zero )
						{
							var __0x10905 = Vector3.Cross( __0x10976.Tangent.ToVector3F(), __0x10976.Normal ) * __0x10976.Tangent.W;
							Viewport.Simple3DRenderer.AddLineThin( __0x10976.Position, __0x10976.Position + __0x10905 * __0x10904 );
						}
					}
				}

				
				if( Mesh.EditorDisplayCollision )
				{
					var __0x10906 = Mesh.GetComponent( "Collision Definition" ) as RigidBody;
					if( __0x10906 != null )
					{
						ColorValue __0x10907 = new ColorValue( 0, 0, 1, 0.7 );
						
						
						
						
						
						
						Viewport.Simple3DRenderer.SetColor( __0x10907, __0x10907 * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );

						int __0x10908 = 0;
						foreach( var __0x10977 in __0x10906.GetComponents<CollisionShape>( false, true, true ) )
							__0x10977.Render( Viewport, Transform.Identity, false, ref __0x10908 );
					}
				}

				
				if( !string.IsNullOrEmpty( Mesh.EditorPlayAnimation ) )
				{
					var __0x10909 = Mesh.ParentRoot.GetComponentByPath( Mesh.EditorPlayAnimation ) as Animation;
					__0x10858.PlayAnimation = __0x10909;
					
				}
				else
					__0x10858.PlayAnimation = null;

				
				if( Mesh.EditorDisplaySkeleton )
				{
					var __0x10910 = Mesh.Skeleton.Value;
					if( __0x10910 != null )
					{
						var __0x10911 = __0x10858.GetCurrentAnimatedSkeletonArrows();
						if( __0x10911 != null )
						{
							var __0x10912 = new ColorValue( 0, 0.5, 1, 0.7 );
							Viewport.Simple3DRenderer.SetColor( __0x10912, __0x10912 * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );

							foreach( var __0x10978 in __0x10911 )
								Viewport.Simple3DRenderer.AddArrow( __0x10978.Start, __0x10978.End );
						}
						else
						{
							foreach( var __0x10979 in __0x10910.GetBones() )
							{
								var __0x10913 = __0x10979.Transform.Value;

								var __0x10914 = __0x10913.Position;
								var __0x10915 = __0x10979.Parent as SkeletonBone;
								if( __0x10915 != null )
								{
									var __0x10916 = __0x10915.Transform.Value.Position;

									var __0x10917 = SelectedObjectsSet.Contains( __0x10979 );

									ColorValue __0x10918;
									if( __0x10917 )
										__0x10918 = new ColorValue( 0, 1, 0 );
									else
										__0x10918 = new ColorValue( 0, 0.5, 1, 0.7 );
									Viewport.Simple3DRenderer.SetColor( __0x10918, __0x10918 * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );

									Viewport.Simple3DRenderer.AddArrow( __0x10916, __0x10914 );

									if( __0x10917 )
									{
										var __0x10919 = ( __0x10914 - __0x10916 ).Length() / 3;

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ), new ColorValue( 1, 0, 0 ) * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x10914, __0x10914 + __0x10913.Rotation * new Vector3( __0x10919, 0, 0 ) );

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0 ), new ColorValue( 0, 1, 0 ) * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x10914, __0x10914 + __0x10913.Rotation * new Vector3( 0, __0x10919, 0 ) );

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1 ), new ColorValue( 0, 0, 1 ) * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x10914, __0x10914 + __0x10913.Rotation * new Vector3( 0, 0, __0x10919 ) );
									}
								}
							}
						}
					}
				}

				
				if( Mesh.EditorDisplayBounds )
				{
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0, 0.7 ) );
					
					if( __0x10880.BoundingBox.HasValue )
						Viewport.Simple3DRenderer.AddBounds( __0x10880.BoundingBox.Value );
					if( __0x10880.BoundingSphere.HasValue )
						Viewport.Simple3DRenderer.AddSphere( __0x10880.BoundingSphere.Value );
				}

				
				int __0x10920 = -1;
				if( !Viewport.MouseRelativeMode )
				{
					var __0x10921 = Viewport.CameraSettings.GetRayByScreenCoordinates( Viewport.MousePosition );
					if( __0x10881.RayCast( __0x10921, Mesh.CompiledData.RayCastMode.BruteforceNoCache, false, out double scale2, out int triangleIndex2 ) )
						__0x10920 = triangleIndex2;
				}

				
				if( __0x10920 != -1 )
				{
					var __0x10922 = __0x10881.GetExtractedVertices( true );
					var __0x10923 = __0x10881.ExtractedIndices;

					int __0x10924 = __0x10923[ __0x10920 * 3 + 0 ];
					int __0x10925 = __0x10923[ __0x10920 * 3 + 1 ];
					int __0x10926 = __0x10923[ __0x10920 * 3 + 2 ];
					var __0x10927 = new int[] { __0x10924, __0x10925, __0x10926 };
					Vector3F __0x10928 = __0x10922[ __0x10924 ].Position;
					Vector3F __0x10929 = __0x10922[ __0x10925 ].Position;
					Vector3F __0x10930 = __0x10922[ __0x10926 ].Position;

					
					
					

					
					
					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					

					
					
					

					
					
					
					
					

					
					
					
					
					
					
					
					

					
					{
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0, 0.3 ) );
						Viewport.Simple3DRenderer.AddTriangles( new Vector3F[] { __0x10928, __0x10929, __0x10930 }, false, false );
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0 ) );
						Viewport.Simple3DRenderer.AddLine( __0x10928, __0x10929 );
						Viewport.Simple3DRenderer.AddLine( __0x10929, __0x10930 );
						Viewport.Simple3DRenderer.AddLine( __0x10930, __0x10928 );
					}

					float __0x10931 = Math.Max( ( __0x10928 - __0x10929 ).Length(), Math.Max( ( __0x10929 - __0x10930 ).Length(), ( __0x10930 - __0x10928 ).Length() ) );
					float __0x10932 = __0x10931 / 5;
					float __0x10933 = __0x10931 / 40;

					
					
					foreach( int __0x10980 in __0x10927 )
					{
						var __0x10934 = __0x10922[ __0x10980 ];
						Vector3F __0x10935 = __0x10934.Position;

						if( __0x10934.Normal != Vector3F.Zero )
						{
							Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1 ) );
							Viewport.Simple3DRenderer.AddArrow( __0x10935, __0x10935 + __0x10934.Normal * __0x10932, 0, 0, true );

							if( __0x10934.Tangent != Vector4F.Zero )
							{
								Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ) );
								Viewport.Simple3DRenderer.AddArrow( __0x10935, __0x10935 + __0x10934.Tangent.ToVector3F() * __0x10932, 0, 0, true );

								var __0x10936 = Vector3F.Cross( __0x10934.Tangent.ToVector3F(), __0x10934.Normal ) * __0x10934.Tangent.W;
								Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0 ) );
								Viewport.Simple3DRenderer.AddArrow( __0x10935, __0x10935 + __0x10936 * __0x10932, 0, 0, true );
							}
						}
					}

					
					{
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ) );
						

						foreach( int __0x10981 in __0x10927 )
						{
							var __0x10937 = __0x10922[ __0x10981 ];
							Vector3F __0x10938 = __0x10937.Position;
							Viewport.Simple3DRenderer.AddSphere( new Sphere( __0x10938, __0x10933 ), 10, true );
							
						}
					}
				}

				
				if( __0x10986() == 0 )
				{
					var __0x10939 = new ESet<MeshGeometry>();
					foreach( var __0x10982 in Mesh.GetComponents<MeshGeometry>() )
					{
						if( SelectedObjectsSet.Contains( __0x10982 ) )
							__0x10939.AddWithCheckAlreadyContained( __0x10982 );

						var __0x10940 = __0x10982.Material.Value;
						if( __0x10940 != null && SelectedObjectsSet.Contains( __0x10940 ) )
							__0x10939.AddWithCheckAlreadyContained( __0x10982 );
					}

					foreach( var __0x10983 in __0x10939 )
					{
						var __0x10941 = __0x10983.VertexStructure.Value;
						var __0x10942 = __0x10983.Vertices.Value;
						var __0x10943 = __0x10983.Indices.Value;

						if( __0x10942 != null & __0x10943 != null )
						{
							__0x10941.GetInfo( out var vertexSize, out var holes );
							var __0x10944 = __0x10942.Length / vertexSize;

							try
							{
								if( __0x10941.GetElementBySemantic( VertexElementSemantic.Position, out var element ) && element.Type == VertexElementType.Float3 )
								{
									if( __0x10942 != null && __0x10943 != null )
									{
										

										var __0x10945 = __0x10985<Vector3F>( __0x10942, vertexSize, __0x10944, element.Offset );

										Viewport.Simple3DRenderer.SetColor( ProjectSettings.Get.General.SelectedColor );
										Viewport.Simple3DRenderer.AddTriangles( __0x10945, __0x10943, true, true );
									}
								}
							}
							catch( Exception e )
							{
								Log.Warning( e.Message );
							}
						}
					}
				}

				
				if( Scene.RenderingPipeline.Value != null )
					Scene.RenderingPipeline.Value.LODRange = new RangeI( Mesh.EditorDisplayLOD, Mesh.EditorDisplayLOD );

				
				

				
				
				
				
				
			}
		}

		protected override void OnViewportUpdateBeforeOutput2()
		{
			base.OnViewportUpdateBeforeOutput2();

			if( Mesh != null && Mesh.Result != null )
			{
				
				if( Mesh.EditorDisplayUV != -1 )
					__0x10989();
			}
		}

		static string __0x10988( string __0x10995 )
		{
			return EditorLocalization.Translate( "MeshDocumentWindow", __0x10995 );
		}

		protected override void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.OnGetTextInfoLeftTopCorner( lines );

			if( Mesh != null )
			{
				var __0x10946 = __0x10987();
				if( __0x10946 != null )
				{
					lines.Add( __0x10988( "Level of detail" ) + ": " + __0x10986().ToString() );
					lines.Add( __0x10988( "Triangles" ) + ": " + ( __0x10946.ExtractedIndices.Length / 3 ).ToString( "N0" ) );
					lines.Add( __0x10988( "Vertices" ) + ": " + __0x10946.ExtractedVerticesPositions.Length.ToString( "N0" ) );
					lines.Add( __0x10988( "Render operations" ) + ": " + __0x10946.MeshData.RenderOperations.Count.ToString() );
					lines.Add( __0x10988( "Bounding box size" ) + ": " + __0x10946.SpaceBounds.BoundingBox.Value.GetSize().ToString( 3 ) );
					lines.Add( __0x10988( "Bounding sphere radius" ) + ": " + __0x10946.SpaceBounds.BoundingSphere.Value.Radius.ToString( "N3" ) );
				}
			}
		}

		

		void __0x10989()
		{
			var __0x10947 = __0x10987();

			if( Mesh.EditorDisplayUV >= 0 && Mesh.EditorDisplayUV < 4 )
			{
				StandardVertex.Components __0x10948 = StandardVertex.Components.TexCoord0;
				if( Mesh.EditorDisplayUV == 0 )
					__0x10948 = StandardVertex.Components.TexCoord0;
				else if( Mesh.EditorDisplayUV == 1 )
					__0x10948 = StandardVertex.Components.TexCoord1;
				else if( Mesh.EditorDisplayUV == 2 )
					__0x10948 = StandardVertex.Components.TexCoord2;
				else if( Mesh.EditorDisplayUV == 3 )
					__0x10948 = StandardVertex.Components.TexCoord3;

				if( ( __0x10947.ExtractedVerticesComponents & __0x10948 ) != 0 )
				{
					var __0x10949 = (Vector2F[])StandardVertex.ExtractOneComponentArray( __0x10947.GetExtractedVertices( true ), __0x10948 );

					
					
					

					
					if( __0x10856 != null )
					{
						if( __0x10854 != Mesh.EditorDisplayUV || __0x10855 != __0x10947 )
						{
							__0x10856 = null;
							__0x10857 = null;
						}
					}

					Vector2F __0x10950 = new Vector2F( Viewport.CanvasRenderer.AspectRatioInv * .8f, 0.8f );
					Vector2F __0x10951 = new Vector2F( 1.0f - __0x10950.X - 0.01f, 1.0f - __0x10950.Y - 0.01f );

					Vector2F Convert( Vector2F __0x10996 )
					{
						return __0x10996 * __0x10950 + __0x10951;
					};

					
					if( __0x10856 == null )
					{
						__0x10854 = Mesh.EditorDisplayUV;
						__0x10855 = __0x10947;

						var __0x10952 = __0x10947.ExtractedIndices;

						


						var __0x10953 = new Vector2F[ __0x10949.Length ];
						for( int __0x10954 = 0; __0x10954 < __0x10953.Length; __0x10954++ )
							__0x10953[ __0x10954 ] = Convert( __0x10949[ __0x10954 ] );

						var __0x10955 = new ColorValue( 0, 1, 0, 0.5 );
						var __0x10956 = new ColorValue( 1, 1, 1 );

						
						{
							var __0x10957 = new List<CanvasRenderer.TriangleVertex>( __0x10952.Length / 3 );

							for( int __0x10958 = 0; __0x10958 < __0x10952.Length / 3; __0x10958++ )
							{
								int __0x10959 = __0x10952[ __0x10958 * 3 + 0 ];
								int __0x10960 = __0x10952[ __0x10958 * 3 + 1 ];
								int __0x10961 = __0x10952[ __0x10958 * 3 + 2 ];

								Vector2F __0x10962 = __0x10953[ __0x10959 ];
								Vector2F __0x10963 = __0x10953[ __0x10960 ];
								Vector2F __0x10964 = __0x10953[ __0x10961 ];

								__0x10957.Add( new CanvasRenderer.TriangleVertex( __0x10962, __0x10955 ) );
								__0x10957.Add( new CanvasRenderer.TriangleVertex( __0x10963, __0x10955 ) );
								__0x10957.Add( new CanvasRenderer.TriangleVertex( __0x10964, __0x10955 ) );
							}

							__0x10856 = __0x10957.ToArray();
						}

						
						{
							int[] __0x10965 = MathAlgorithms.TriangleListToLineList( __0x10952 );

							var __0x10966 = new List<CanvasRenderer.LineItem>( __0x10965.Length / 2 );
							for( int __0x10967 = 0; __0x10967 < __0x10965.Length / 2; __0x10967++ )
							{
								var __0x10968 = __0x10953[ __0x10965[ __0x10967 * 2 + 0 ] ];
								var __0x10969 = __0x10953[ __0x10965[ __0x10967 * 2 + 1 ] ];
								__0x10966.Add( new CanvasRenderer.LineItem( __0x10968, __0x10969, __0x10956 ) );
							}

							var __0x10970 = new CanvasRenderer.TriangleVertex[ __0x10966.Count * 2 ];
							for( int __0x10971 = 0; __0x10971 < __0x10966.Count; __0x10971++ )
							{
								var __0x10972 = __0x10966[ __0x10971 ];
								__0x10970[ __0x10971 * 2 + 0 ] = new CanvasRenderer.TriangleVertex( __0x10972.start, __0x10972.color, Vector2F.Zero );
								__0x10970[ __0x10971 * 2 + 1 ] = new CanvasRenderer.TriangleVertex( __0x10972.end, __0x10972.color, Vector2F.Zero );
							}

							__0x10857 = __0x10970;
						}
					}

					
					if( __0x10856 != null )
					{
						Viewport.CanvasRenderer.AddQuad( new RectangleF( Convert( Vector2F.Zero ), Convert( Vector2F.One ) ), new ColorValue( 0, 0, 0, .5 ) );
						Viewport.CanvasRenderer.AddTriangles( __0x10856 );
						Viewport.CanvasRenderer.AddLines( __0x10857 );
					}
				}
			}
		}

		private void __0x10990( object __0x10997, EventArgs __0x10998 )
		{
			__0x10859 = true;
		}

		

		
		
		
		
		

		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		

		


		

		
		
		


		
		
		

		
		
		
		
		

		

		
		
		
		

		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		

		
		

		
		
		
		

		

		

		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		

		

		

		

		
		

		
		
		
		

		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		
		
		
		
		
		

		
		
		
		

		

		
		
		
		
		

		
		
		
		
		
		
		

		


		

		
		
		


		
		
		

		
		
		
		
		


		

		
		
		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		

		
		

		

		
		
		
		

		

		

		
		

		
		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		



		

		
		

		
		
		

		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	public class MeshModifierSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10999;

		

		string __0x11005( string __0x11008 )
		{
			return EditorLocalization.Translate( "MeshModifier", __0x11008 );
		}

		protected override void OnInit()
		{
			__0x10999 = ProcedureForm.CreateButton( __0x11005( "Bake into Mesh" ) );
			__0x10999.Click += __0x11007;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10999 } );
		}

		MeshModifier[] __0x11006()
		{
			return GetObjects<MeshModifier>().Where( __0x11009 => __0x11009.Parent as Mesh != null ).ToArray();
		}

		private void __0x11007( ProcedureUI.Button __0x11010 )
		{
			var __0x11000 = Provider.DocumentWindow.Document;
			var __0x11001 = new UndoMultiAction();

			var __0x11002 = __0x11006();
			if( __0x11002.Length != 0 )
			{
				string __0x11003;
				if( __0x11002.Length > 1 )
					__0x11003 = __0x11005( "Bake selected geometries into the mesh?" );
				else
					__0x11003 = __0x11005( "Bake selected geometry into the mesh?" );

				if( EditorMessageBox.ShowQuestion( __0x11003, EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
				{
					
					foreach( var __0x11004 in __0x11002 )
						__0x11004.BakeIntoMesh( __0x11000, __0x11001 );

					
					__0x11001.AddAction( new UndoActionComponentCreateDelete( __0x11000, __0x11002, false ) );

					if( __0x11001.Actions.Count != 0 )
						__0x11000.CommitUndoAction( __0x11001 );
				}
			}
		}

		protected override void OnUpdate()
		{
			__0x10999.Enabled = __0x11006().Length != 0;
		}
	}
}





namespace NeoAxis.Editor
{
	public class MeshPreview : CanvasBasedPreview
	{
		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x11011 = CreateScene( false );

			Mesh __0x11012 = ObjectOfPreview as Mesh;
			if( __0x11012 != null )
			{
				MeshInSpace __0x11013 = __0x11011.CreateComponent<MeshInSpace>();
				__0x11013.Mesh = __0x11012;
			}

			__0x11011.Enabled = true;

			SetCameraByBounds( __0x11011.CalculateTotalBoundsOfObjectsInSpace() );

			if( __0x11012 != null && __0x11012.EditorCameraTransform != null )
			{
				var __0x11014 = __0x11012.EditorCameraTransform;
				CameraInitialDistance = ( __0x11014.Position - CameraLookTo ).Length() * 1.3;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11014.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class MeshPreviewImage : PreviewImageGenerator
	{
		public MeshPreviewImage()
		{
		}

		protected override void OnUpdate()
		{
			var __0x11015 = CreateScene( false );

			var __0x11016 = ObjectOfPreview as Mesh;
			if( __0x11016 != null )
			{
				var __0x11017 = __0x11015.CreateComponent<MeshInSpace>();
				__0x11017.Mesh = __0x11016;
			}

			__0x11015.Enabled = true;

			var __0x11018 = 2.6;

			SetCameraByBounds( __0x11015.CalculateTotalBoundsOfObjectsInSpace(), __0x11018 );

			if( __0x11016 != null && __0x11016.EditorCameraTransform != null )
			{
				var __0x11019 = __0x11016.EditorCameraTransform;
				CameraDistance = ( __0x11019.Position - CameraLookTo ).Length() * __0x11018;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11019.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class MeshSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11020;
		ProcedureUI.Button __0x11021;
		ProcedureUI.Button __0x11022;
		ProcedureUI.Button __0x11023;

		

		protected override void OnInit()
		{
			__0x11020 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x11020.Click += __0x11036;

			__0x11021 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Export to FBX" ) );
			__0x11021.Click += __0x11037;

			__0x11022 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Build Structure" ) );
			__0x11022.Click += __0x11038;

			__0x11023 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Delete Structure" ) );
			__0x11023.Click += __0x11039;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11020, __0x11021 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11022, __0x11023 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			Mesh __0x11024 = null;
			if( GetObjects<Mesh>().Length == 1 )
				__0x11024 = GetObjects<Mesh>()[ 0 ];

			__0x11021.Enabled = __0x11024 != null;
			__0x11022.Enabled = __0x11024 != null && __0x11024.Structure == null;
			__0x11023.Enabled = __0x11024 != null && __0x11024.Structure != null;
		}

		private void __0x11036( ProcedureUI.Button __0x11040 )
		{
			foreach( var __0x11035 in GetObjects<Mesh>() )
				__0x11035.PerformResultCompile();
		}

		private void __0x11037( ProcedureUI.Button __0x11041 )
		{
			var __0x11025 = GetObjects<Mesh>();
			if( __0x11025.Length != 1 )
				return;
			var __0x11026 = __0x11025[ 0 ];

			if( !EditorUtility.ShowSaveFileDialog( "", "Mesh.fbx", "FBX files (*.fbx)|*.fbx", out var fileName ) )
				return;

			if( !EditorAssemblyInterface.Instance.ExportToFBX( __0x11026, fileName, out var error ) )
				EditorMessageBox.ShowWarning( error );
			
			
		}

		private void __0x11038( ProcedureUI.Button __0x11042 )
		{
			var __0x11027 = GetObjects<Mesh>();
			if( __0x11027.Length != 1 )
				return;
			var __0x11028 = __0x11027[ 0 ];

			var __0x11029 = (Metadata.Property)__0x11028.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
			var __0x11030 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11028, __0x11029, __0x11028.Structure ) );

			__0x11028.BuildStructure();

			Provider.DocumentWindow.Document.CommitUndoAction( __0x11030 );
		}

		private void __0x11039( ProcedureUI.Button __0x11043 )
		{
			var __0x11031 = GetObjects<Mesh>();
			if( __0x11031.Length != 1 )
				return;
			var __0x11032 = __0x11031[ 0 ];

			if( EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "General", "Delete structure?" ), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
			{
				var __0x11033 = (Metadata.Property)__0x11032.MetadataGetMemberBySignature( "property:" + nameof( Mesh.Structure ) );
				var __0x11034 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11032, __0x11033, __0x11032.Structure ) );

				__0x11032.Structure = null;

				Provider.DocumentWindow.Document.CommitUndoAction( __0x11034 );
			}
		}

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	class MeshInSpaceEditorExtensions : EditorExtensions
	{
		string __0x11126( string __0x11127 )
		{
			return EditorLocalization.Translate( "MeshInSpace", __0x11127 );
		}

		public override void OnRegister()
		{
			
			{
				const string __0x11044 = "Collision Body";

				var __0x11045 = new EditorAction();
				__0x11045.Name = "Add Collision";
				__0x11045.Description = "Adds a collision body to selected objects.";
				__0x11045.ImageSmall = Properties.Resources.Add_16;
				__0x11045.ImageBig = Properties.Resources.MeshCollision_32;
				__0x11045.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x11045.QatSupport = true;
				
				__0x11045.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11045.GetState += delegate ( EditorAction.GetStateContext __0x11128 )
				{
					if( __0x11128.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11046 = __0x11128.ObjectsInFocus.Objects;
						if( __0x11046.Length != 0 && Array.TrueForAll( __0x11046, __0x11129 => __0x11129 is MeshInSpace ) )
						{
							__0x11128.Enabled = Array.Exists( __0x11046, delegate ( object __0x11130 )
							{
								var __0x11047 = ( (Component)__0x11130 ).GetComponent( __0x11044 );
								if( __0x11047 != null )
								{
									if( __0x11047 is RigidBody )
										return false;
									if( __0x11047 is RigidBody2D )
										return false;
								}
								return true;
							} );
						}

						__0x11045.DropDownContextMenu.Tag = (__0x11128.ObjectsInFocus.DocumentWindow.Document, __0x11046);
					}
				};

				
				{
					__0x11045.DropDownContextMenu = new KryptonContextMenu();

					__0x11045.DropDownContextMenu.Opening += delegate ( object __0x11131, CancelEventArgs __0x11132 )
					{
						var __0x11048 = (KryptonContextMenu)__0x11131;
						var __0x11049 = ((DocumentInstance, object[]))__0x11048.Tag;

						
						{
							var __0x11050 = (KryptonContextMenuItems)__0x11048.Items[ 0 ];
							var __0x11051 = (KryptonContextMenuItem)__0x11050.Items[ 0 ];

							bool __0x11052 = false;

							foreach( var __0x11121 in __0x11049.Item2 )
							{
								var __0x11053 = __0x11121 as MeshInSpace;
								if( __0x11053 != null )
								{
									RigidBody __0x11054 = null;
									{
										var __0x11055 = __0x11053.Mesh.Value;
										if( __0x11055 != null )
											__0x11054 = __0x11055.GetComponent( "Collision Definition" ) as RigidBody;
									}

									if( __0x11054 != null )
										__0x11052 = true;
								}
							}

							__0x11051.Enabled = __0x11052;
						}

					};

					System.EventHandler __0x11056 = delegate ( object __0x11133, EventArgs __0x11134 )
					{
						var __0x11057 = (KryptonContextMenuItem)__0x11133;
						var __0x11058 = ((KryptonContextMenu, string))__0x11057.Tag;
						var __0x11059 = __0x11058.Item1;
						var __0x11060 = __0x11058.Item2;

						var __0x11061 = ((DocumentInstance, object[]))__0x11059.Tag;
						var __0x11062 = __0x11061.Item1;
						var __0x11063 = __0x11061.Item2;

						List<UndoSystem.Action> __0x11064 = new List<UndoSystem.Action>();

						foreach( var __0x11122 in __0x11063 )
						{
							if( __0x11122 is MeshInSpace meshInSpace && meshInSpace.GetComponent( __0x11044 ) as RigidBody == null && meshInSpace.GetComponent( __0x11044 ) as RigidBody2D == null )
							{
								var __0x11065 = meshInSpace.MeshOutput;
								if( __0x11065 == null )
									continue;

								Component __0x11066 = null;
								bool __0x11067 = false;

								if( __0x11060 == "Use Collision of the Mesh" )
								{
									var __0x11068 = __0x11065.GetComponent( "Collision Definition" ) as RigidBody;
									if( __0x11068 != null )
									{
										var __0x11069 = (RigidBody)__0x11068.Clone();
										__0x11066 = __0x11069;
										__0x11069.Enabled = false;
										__0x11069.Name = __0x11044;
										__0x11069.MotionType = RigidBody.MotionTypeEnum.Static;
										__0x11069.Transform = meshInSpace.Transform;

										meshInSpace.AddComponent( __0x11069 );
									}
									else
										__0x11067 = true;
								}
								else
								{
									RigidBody CreateRigidBody()
									{
										var __0x11070 = meshInSpace.CreateComponent<RigidBody>( enabled: false );
										__0x11070.Name = __0x11044;
										__0x11070.Transform = meshInSpace.Transform;
										return __0x11070;
									}

									RigidBody2D CreateRigidBody2D()
									{
										var __0x11071 = meshInSpace.CreateComponent<RigidBody2D>( enabled: false );
										__0x11071.Name = __0x11044;
										__0x11071.Transform = meshInSpace.Transform;
										return __0x11071;
									}

									switch( __0x11060 )
									{
									case "Box":
										{
											__0x11066 = CreateRigidBody();
											var __0x11072 = __0x11066.CreateComponent<CollisionShape_Box>();
											var __0x11073 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11072.TransformRelativeToParent = new Transform( __0x11073.GetCenter(), Quaternion.Identity );
											__0x11072.Dimensions = __0x11073.GetSize();
										}
										break;

									case "Sphere":
										{
											__0x11066 = CreateRigidBody();
											var __0x11074 = __0x11066.CreateComponent<CollisionShape_Sphere>();
											var __0x11075 = __0x11065.Result.SpaceBounds.CalculatedBoundingSphere;
											__0x11074.TransformRelativeToParent = new Transform( __0x11075.Center, Quaternion.Identity );
											__0x11074.Radius = __0x11075.Radius;
										}
										break;

									case "Capsule":
										{
											__0x11066 = CreateRigidBody();
											var __0x11076 = __0x11066.CreateComponent<CollisionShape_Capsule>();
											var __0x11077 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11076.TransformRelativeToParent = new Transform( __0x11077.GetCenter(), Quaternion.Identity );
											__0x11076.Radius = Math.Max( __0x11077.GetSize().X, __0x11077.GetSize().Y ) / 2;
											__0x11076.Height = Math.Max( __0x11077.GetSize().Z - __0x11076.Radius * 2, 0 );
										}
										break;

									case "Cylinder":
										{
											__0x11066 = CreateRigidBody();
											var __0x11078 = __0x11066.CreateComponent<CollisionShape_Cylinder>();
											var __0x11079 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11078.TransformRelativeToParent = new Transform( __0x11079.GetCenter(), Quaternion.Identity );
											__0x11078.Radius = Math.Max( __0x11079.GetSize().X, __0x11079.GetSize().Y ) / 2;
											__0x11078.Height = __0x11079.GetSize().Z;
										}
										break;

									case "Convex":
										{
											__0x11066 = CreateRigidBody();
											var __0x11080 = __0x11066.CreateComponent<CollisionShape_Mesh>();
											__0x11080.ShapeType = CollisionShape_Mesh.ShapeTypeEnum.Convex;
											__0x11080.Mesh = ReferenceUtility.MakeThisReference( __0x11080, meshInSpace, "Mesh" );
										}
										break;

									case "Convex Decomposition":
										{
											__0x11066 = CreateRigidBody();

											var __0x11081 = new ConvexDecomposition.Settings();

											var __0x11082 = new SpecifyParametersForm( "Convex Decomposition", __0x11081 );
											__0x11082.CheckHandler = delegate ( ref string __0x11135 )
											{
												return true;
											};
											if( __0x11082.ShowDialog() != DialogResult.OK )
												__0x11067 = true;
											else
											{
												var __0x11083 = ConvexDecomposition.Decompose( __0x11065.Result.ExtractedVerticesPositions, __0x11065.Result.ExtractedIndices, __0x11081 );

												if( __0x11083 == null )
												{
													Log.Warning( "Unable to decompose." );
													__0x11067 = true;
												}
												else
												{
													foreach( var __0x11123 in __0x11083 )
													{
														var __0x11084 = __0x11066.CreateComponent<CollisionShape_Mesh>();
														__0x11084.Vertices = __0x11123.Vertices;
														__0x11084.Indices = __0x11123.Indices;
														__0x11084.ShapeType = CollisionShape_Mesh.ShapeTypeEnum.Convex;
													}
												}
											}
										}
										break;

									case "Mesh":
										{
											__0x11066 = CreateRigidBody();
											var __0x11085 = __0x11066.CreateComponent<CollisionShape_Mesh>();
											__0x11085.Mesh = ReferenceUtility.MakeThisReference( __0x11085, meshInSpace, "Mesh" );
										}
										break;

									case "Box 2D":
										{
											__0x11066 = CreateRigidBody2D();
											var __0x11086 = __0x11066.CreateComponent<CollisionShape2D_Box>();
											var __0x11087 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11086.TransformRelativeToParent = new Transform( __0x11087.GetCenter(), Quaternion.Identity );
											__0x11086.Dimensions = __0x11087.GetSize().ToVector2();
										}
										break;

									case "Circle 2D":
										{
											__0x11066 = CreateRigidBody2D();
											var __0x11088 = __0x11066.CreateComponent<CollisionShape2D_Ellipse>();
											var __0x11089 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11088.TransformRelativeToParent = new Transform( __0x11089.GetCenter(), Quaternion.Identity );
											var __0x11090 = __0x11089.GetSize().ToVector2().MaxComponent();
											__0x11088.Dimensions = new Vector2( __0x11090, __0x11090 );
										}
										break;

									case "Ellipse 2D":
										{
											__0x11066 = CreateRigidBody2D();
											var __0x11091 = __0x11066.CreateComponent<CollisionShape2D_Ellipse>();
											var __0x11092 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11091.TransformRelativeToParent = new Transform( __0x11092.GetCenter(), Quaternion.Identity );
											__0x11091.Dimensions = __0x11092.GetSize().ToVector2();
										}
										break;

									case "Capsule 2D":
										{
											__0x11066 = CreateRigidBody2D();
											var __0x11093 = __0x11066.CreateComponent<CollisionShape2D_Capsule>();
											var __0x11094 = __0x11065.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11093.TransformRelativeToParent = new Transform( __0x11094.GetCenter(), Quaternion.Identity );

											var __0x11095 = __0x11094.GetSize();

											if( __0x11095.X > __0x11095.Y )
											{
												__0x11093.Axis = 0;
												__0x11093.Radius = __0x11095.Y / 2;
												__0x11093.Height = Math.Max( __0x11095.X - __0x11093.Radius * 2, 0 );
											}
											else
											{
												__0x11093.Axis = 0;
												__0x11093.Radius = __0x11095.X / 2;
												__0x11093.Height = Math.Max( __0x11095.Y - __0x11093.Radius * 2, 0 );
											}
										}
										break;

									case "Convex 2D":
										{
											__0x11066 = CreateRigidBody2D();

											var __0x11096 = new Vector2[ __0x11065.Result.ExtractedVerticesPositions.Length ];
											for( int __0x11097 = 0; __0x11097 < __0x11096.Length; __0x11097++ )
												__0x11096[ __0x11097 ] = __0x11065.Result.ExtractedVerticesPositions[ __0x11097 ].ToVector2();
											var __0x11098 = MathAlgorithms.GetConvexByPoints( __0x11096 );

											var __0x11099 = new Vector3F[ __0x11098.Count ];
											var __0x11100 = new int[ ( __0x11098.Count - 2 ) * 3 ];
											{
												for( int __0x11101 = 0; __0x11101 < __0x11098.Count; __0x11101++ )
													__0x11099[ __0x11101 ] = new Vector3F( __0x11098[ __0x11101 ].ToVector2F(), 0 );

												for( int __0x11102 = 0; __0x11102 < __0x11098.Count - 2; __0x11102++ )
												{
													__0x11100[ __0x11102 * 3 + 0 ] = 0;
													__0x11100[ __0x11102 * 3 + 1 ] = __0x11102 + 1;
													__0x11100[ __0x11102 * 3 + 2 ] = __0x11102 + 2;
												}
											}

											var __0x11103 = __0x11066.CreateComponent<CollisionShape2D_Mesh>();
											__0x11103.Vertices = __0x11099;
											__0x11103.Indices = __0x11100;
											__0x11103.ShapeType = CollisionShape2D_Mesh.ShapeTypeEnum.Convex;

											
											
											

											
											
											

											
											
											

											
											
											
											
											

											
											
											

											
											
											
											
											
											
											

											
											
											
											
											
											
											

											
											
											
											
											
										}
										break;

									
									
									

									

									
									
									
									
									
									
									
									
									
									
									
									
									

									

									
									

									
									
									
									

									


									
									
									
									

									

									
									
									
									
									
									
									
									
									
									
									
									
									
									
									
									



									
									
									

									

									

									
									
									

									
									
									

									
									
									
									

									
									
									
									
									
									
									
									

									
									
									

									
									
									
									
									

									
									
									
									



									
									

									
									
									
									

									
									
									
									
									
									
									
									

									
									
									

									
									
									
									
									

									
									
									

									
									

									

									
									
									
									
									
									

									case "Mesh 2D":
										{
											__0x11066 = CreateRigidBody2D();
											var __0x11104 = __0x11066.CreateComponent<CollisionShape2D_Mesh>();
											__0x11104.Mesh = ReferenceUtility.MakeThisReference( __0x11104, meshInSpace, "Mesh" );
											__0x11104.ShapeType = CollisionShape2D_Mesh.ShapeTypeEnum.TriangleMesh;

											
											

											

											
											
											
											

											
											
											

											
											
											
											
										}
										break;

									
									
									
									
									
									
									
									
									
									
									

									

									
									
									
									

									
									
									

									
									
									
									
									
									
									
									
									
									

									default:
										Log.Warning( "No implementation." );
										__0x11067 = true;
										continue;
									}
								}

								if( __0x11067 )
								{
									__0x11066?.Dispose();
									continue;
								}

								if( __0x11066 != null )
								{
									__0x11066.Enabled = true;

									__0x11064.Add( new UndoActionComponentCreateDelete( __0x11062, new Component[] { __0x11066 }, true ) );

									
									{
										
										var __0x11105 = (Metadata.Property)meshInSpace.MetadataGetMemberBySignature( "property:Transform" );
										var __0x11106 = new UndoActionPropertiesChange.Item( meshInSpace, __0x11105, meshInSpace.Transform, new object[ 0 ] );
										__0x11064.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11106 } ) );

										
										meshInSpace.Transform = ReferenceUtility.MakeReference<Transform>( null, ReferenceUtility.CalculateThisReference( meshInSpace, __0x11066, "Transform" ) );
									}
								}
							}
						}

						if( __0x11064.Count != 0 )
						{
							__0x11062.UndoSystem.CommitAction( new UndoMultiAction( __0x11064 ) );
							__0x11062.Modified = true;
							ScreenNotifications.Show( __0x11126( "The collision was added successfully." ) );
						}

					};

					var __0x11107 = new List<KryptonContextMenuItemBase>();
					var __0x11108 = new string[] { "Use Collision of the Mesh", "", "Box", "Sphere", "Capsule", "Cylinder", "Convex", "Convex Decomposition", "Mesh", "", "Box 2D", "Circle 2D", "Ellipse 2D", "Capsule 2D", "Convex 2D", "Mesh 2D" };
					foreach( var __0x11124 in __0x11108 )
					{
						if( __0x11124 == "" )
							__0x11107.Add( new KryptonContextMenuSeparator() );
						else
						{
							var __0x11109 = new KryptonContextMenuItem( __0x11124, null, __0x11056 );
							__0x11109.Tag = (__0x11045.DropDownContextMenu, __0x11124);
							__0x11107.Add( __0x11109 );
						}
					}

					__0x11045.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x11107.ToArray() ) );
				}

				EditorActions.Register( __0x11045 );
			}

			
			{
				const string __0x11110 = "Collision Body";

				var __0x11111 = new EditorAction();
				__0x11111.Name = "Delete Collision";
				__0x11111.Description = "Deletes the collision body of selected objects.";
				__0x11111.ImageSmall = Properties.Resources.Delete_16;
				__0x11111.ImageBig = Properties.Resources.Delete_32;
				__0x11111.QatSupport = true;
				
				__0x11111.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11111.GetState += delegate ( EditorAction.GetStateContext __0x11136 )
				{
					if( __0x11136.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11112 = __0x11136.ObjectsInFocus.Objects;
						if( __0x11112.Length != 0 && Array.TrueForAll( __0x11112, __0x11137 => __0x11137 is MeshInSpace ) )
						{
							__0x11136.Enabled = Array.Exists( __0x11112, delegate ( object __0x11138 )
							{
								var __0x11113 = ( (Component)__0x11138 ).GetComponent( __0x11110 );
								if( __0x11113 != null )
								{
									if( __0x11113 is RigidBody )
										return true;
									if( __0x11113 is RigidBody2D )
										return true;
								}
								return false;
							} );
						}
					}
				};

				__0x11111.Click += delegate ( EditorAction.ClickContext __0x11139 )
				{
					var __0x11114 = string.Format( __0x11126( "Delete \'{0}\'?" ), __0x11110 );
					if( EditorMessageBox.ShowQuestion( __0x11114, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						List<UndoSystem.Action> __0x11115 = new List<UndoSystem.Action>();

						foreach( MeshInSpace __0x11125 in __0x11139.ObjectsInFocus.Objects )
						{
							Component __0x11116 = null;
							{
								var __0x11117 = __0x11125.GetComponent( __0x11110 );
								if( __0x11117 != null && ( __0x11117 is RigidBody || __0x11117 is RigidBody2D ) )
									__0x11116 = __0x11117;
							}

							if( __0x11116 != null )
							{
								var __0x11118 = __0x11125.Transform;

								__0x11115.Add( new UndoActionComponentCreateDelete( __0x11139.ObjectsInFocus.DocumentWindow.Document, new Component[] { __0x11116 }, false ) );

								
								if( __0x11125.Transform.GetByReference == string.Format( "this:${0}\\Transform", __0x11110 ) )
								{
									
									var __0x11119 = (Metadata.Property)__0x11125.MetadataGetMemberBySignature( "property:Transform" );
									var __0x11120 = new UndoActionPropertiesChange.Item( __0x11125, __0x11119, __0x11118, new object[ 0 ] );
									__0x11115.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11120 } ) );

									
									__0x11125.Transform = __0x11118.Value;
								}
							}
						}

						if( __0x11115.Count != 0 )
						{
							__0x11139.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( new UndoMultiAction( __0x11115 ) );
							__0x11139.ObjectsInFocus.DocumentWindow.Document.Modified = true;
							ScreenNotifications.Show( __0x11126( "The collision was deleted." ) );
						}
					}
				};

				EditorActions.Register( __0x11111 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public class ObjectInSpaceEditor : CanvasBasedEditor
	{
		bool __0x11140 = true;

		bool __0x11141;
		ObjectInSpace __0x11142;

		

		public ObjectInSpace ObjectInSpace
		{
			get { return (ObjectInSpace)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			if( ObjectInSpace != null )
			{
				var __0x11143 = CreateScene( false );
				__0x11143.DisplayPhysicalObjects = true;

				__0x11142 = (ObjectInSpace)ObjectInSpace.Clone();
				__0x11143.AddComponent( __0x11142 );

				__0x11143.Enabled = true;

				if( Document != null )
					Document.UndoSystem.ListOfActionsChanged += __0x11157;

				if( ObjectOfEditor != null )
					SelectObjects( new object[] { ObjectOfEditor } );
			}
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11157;

			base.OnDestroy();
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnTick( float delta )
		{
			base.OnTick( delta );

			if( ObjectInSpace != null && __0x11141 )
			{
				__0x11142?.Dispose();

				__0x11142 = (ObjectInSpace)ObjectInSpace.Clone();
				Scene.AddComponent( __0x11142 );

				__0x11141 = false;
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x11140 && Scene.CameraEditor.Value != null )
			{
				__0x11156();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );
			}

			__0x11140 = false;
		}

		void __0x11156()
		{
			var __0x11144 = Scene.CameraEditor.Value;
			var __0x11145 = ObjectInSpace.SpaceBounds.CalculatedBoundingBox;
			var __0x11146 = __0x11145.GetCenter();

			double __0x11147 = Math.Max( Math.Max( __0x11145.GetSize().X, __0x11145.GetSize().Y ), __0x11145.GetSize().Z );
			double __0x11148 = __0x11147 * 2;
			if( __0x11148 < 2 )
				__0x11148 = 2;

			double __0x11149 = 1;
			SphericalDirection __0x11150 = new SphericalDirection( -3.83, -.47 );

			var __0x11151 = __0x11146 - __0x11150.GetVector() * __0x11148 * __0x11149;
			var __0x11152 = __0x11146;

			Vector3 __0x11153 = __0x11151;
			Vector3 __0x11154 = __0x11152;
			Degree __0x11155 = 65;

			__0x11144.FieldOfView = __0x11155;
			__0x11144.NearClipPlane = Math.Max( __0x11148 / 10000, 0.01 );
			__0x11144.FarClipPlane = Math.Max( 1000, __0x11148 * 2 );

			__0x11144.Transform = new Transform( __0x11153, Quaternion.LookAt( ( __0x11154 - __0x11153 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11144.FixedUp = Vector3.ZAxis;
		}

		private void __0x11157( object __0x11158, EventArgs __0x11159 )
		{
			__0x11141 = true;
		}
	}
}





namespace NeoAxis.Editor
{
	class ObjectInSpaceEditorExtensions : EditorExtensions
	{
		string __0x11179( string __0x11180 )
		{
			return EditorLocalization.Translate( "ObjectInSpace", __0x11180 );
		}

		public override void OnRegister()
		{
			
			{
				const string __0x11160 = "Attach Transform Offset";

				var __0x11161 = new EditorAction();
				__0x11161.Name = "Attach Second to First";
				__0x11161.Description = "Attaches the second, third and next selected objects to the first selected object.";
				__0x11161.ImageSmall = Properties.Resources.Attach_16;
				__0x11161.ImageBig = Properties.Resources.Attach_32;
				__0x11161.RibbonText = ("Attach", "");

				
				__0x11161.QatSupport = true;
				
				__0x11161.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11161.GetState += delegate ( EditorAction.GetStateContext __0x11181 )
				{
					if( __0x11181.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11162 = __0x11181.ObjectsInFocus.Objects;
						if( __0x11162.Length > 1 )
						{
							var __0x11163 = __0x11162[ 0 ] as ObjectInSpace;
							if( __0x11163 != null )
							{
								for( int __0x11164 = 1; __0x11164 < __0x11162.Length; __0x11164++ )
								{
									var __0x11165 = __0x11162[ __0x11164 ] as ObjectInSpace;
									if( __0x11165 != null )
									{
										var __0x11166 = ObjectInSpaceUtility.CalculateObjectToTransform( __0x11165 );
										if( __0x11166 != null )
											__0x11165 = __0x11166;

										
										if( !__0x11165.Transform.ReferenceSpecified && __0x11165.GetComponent( __0x11160 ) as TransformOffset == null )
										{
											__0x11181.Enabled = true;
										}
									}

									
									
									
									
									
								}
							}
						}
					}
				};

				__0x11161.Click += delegate ( EditorAction.ClickContext __0x11182 )
				{
					object[] __0x11167 = __0x11182.ObjectsInFocus.Objects;

					var __0x11168 = new UndoMultiAction();

					var __0x11169 = __0x11167[ 0 ] as ObjectInSpace;
					for( int __0x11170 = 1; __0x11170 < __0x11167.Length; __0x11170++ )
					{
						var __0x11171 = __0x11167[ __0x11170 ] as ObjectInSpace;
						if( __0x11171 != null )
							ObjectInSpaceUtility.Attach( __0x11169, __0x11171, TransformOffset.ModeEnum.Elements, __0x11182.ObjectsInFocus.DocumentWindow.Document, __0x11168 );
					}

					__0x11182.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( __0x11168 );
					__0x11182.ObjectsInFocus.DocumentWindow.Document.Modified = true;
					ScreenNotifications.Show( __0x11179( "The object was attached to another object." ) );

					

					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					

					
					

					
					

					
					

					

					
					

					
					
					
					
					
					

					
					
					
					
					

					
					
					
				};

				EditorActions.Register( __0x11161 );
			}

			
			{
				

				var __0x11172 = new EditorAction();
				__0x11172.Name = "Detach from Another Object";
				__0x11172.Description = "Detaches selected objects from another object.";
				__0x11172.ImageSmall = Properties.Resources.Detach_16;
				__0x11172.ImageBig = Properties.Resources.Detach_32;
				__0x11172.RibbonText = ("Detach", "");

				
				__0x11172.QatSupport = true;
				
				__0x11172.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11172.GetState += delegate ( EditorAction.GetStateContext __0x11183 )
				{
					if( __0x11183.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11173 = __0x11183.ObjectsInFocus.Objects;
						if( __0x11173.Length != 0 && Array.TrueForAll( __0x11173, __0x11184 => __0x11184 is ObjectInSpace ) )
						{
							foreach( ObjectInSpace __0x11177 in __0x11173 )
							{
								var __0x11174 = ObjectInSpaceUtility.FindObjectToDetach( __0x11177 );
								if( __0x11174 != null )
								{
									__0x11183.Enabled = true;
									break;
								}

								
								
								
								

								
								
								
								
								
							}

							
							
						}
					}
				};

				__0x11172.Click += delegate ( EditorAction.ClickContext __0x11185 )
				{
					if( EditorMessageBox.ShowQuestion( __0x11179( "Detach from another object?" ), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						var __0x11175 = new UndoMultiAction();

						foreach( ObjectInSpace __0x11178 in __0x11185.ObjectsInFocus.Objects )
						{
							var __0x11176 = ObjectInSpaceUtility.FindObjectToDetach( __0x11178 );
							if( __0x11176 != null )
								ObjectInSpaceUtility.Detach( __0x11176, __0x11185.ObjectsInFocus.DocumentWindow.Document, __0x11175 );
						}

						if( __0x11175.Actions.Count != 0 )
						{
							__0x11185.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( __0x11175 );
							__0x11185.ObjectsInFocus.DocumentWindow.Document.Modified = true;
							ScreenNotifications.Show( __0x11179( "The object was detached from another object." ) );
						}


						

						
						
						
						
						
						

						
						
						
						
						
						
						
						
						

						
						
						

						
						
						
						

						
						
						
						
						
						
					}
				};

				EditorActions.Register( __0x11172 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectInSpacePreview : CanvasBasedPreview
	{
		public ObjectInSpacePreview()
		{
		}

		[Browsable( false )]
		protected virtual bool EnableViewportControl
		{
			get
			{
				var __0x11186 = ObjectOfPreview as ObjectInSpace;
				if( __0x11186 != null && __0x11186.ParentScene == null )
					return true;
				return false;
			}
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			if( EnableViewportControl )
			{
				var __0x11187 = ObjectOfPreview as ObjectInSpace;
				if( __0x11187 != null && __0x11187.ParentScene == null )
				{
					var __0x11188 = CreateScene( false );

					var __0x11189 = __0x11187.GetProvidedType();
					if( __0x11189 != null )
					{
						var __0x11190 = (ObjectInSpace)__0x11188.CreateComponent( __0x11189 );
						__0x11190.Transform = Transform.Identity;
					}

					__0x11188.Enabled = true;
					SetCameraByBounds( __0x11188.CalculateTotalBoundsOfObjectsInSpace() );
				}
			}
			else
			{
				ViewportControl.AllowCreateRenderWindow = false;
				ViewportControl.Visible = false;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectInSpacePreviewImage : PreviewImageGenerator
	{
		public ObjectInSpacePreviewImage()
		{
		}

		protected override void OnUpdate()
		{
			var __0x11191 = ObjectOfPreview as ObjectInSpace;
			if( __0x11191 != null )
			{
				var __0x11192 = CreateScene( false );

				var __0x11193 = __0x11191.GetProvidedType();
				if( __0x11193 != null )
				{
					var __0x11194 = (ObjectInSpace)__0x11192.CreateComponent( __0x11193 );
					__0x11194.Transform = Transform.Identity;
				}

				__0x11192.Enabled = true;

				SetCameraByBounds( __0x11192.CalculateTotalBoundsOfObjectsInSpace(), 2.6 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class PaintLayerSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11195;
		ProcedureUI.Button __0x11196;
		ProcedureUI.Button __0x11197;

		

		protected override void OnInit()
		{
			__0x11195 = ProcedureForm.CreateButton( EditorLocalization.Translate( "PaintLayer", "Import Mask" ), ProcedureUI.Button.SizeEnum.Long );
			__0x11195.Click += __0x11213;
			__0x11196 = ProcedureForm.CreateButton( EditorLocalization.Translate( "PaintLayer", "Export Mask" ), ProcedureUI.Button.SizeEnum.Long );
			__0x11196.Click += __0x11214;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11195, __0x11196 } );

			__0x11197 = ProcedureForm.CreateButton( EditorLocalization.Translate( "PaintLayer", "Fill Mask" ), ProcedureUI.Button.SizeEnum.Long );
			__0x11197.Click += __0x11212;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11197 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x11198 = GetFirstObject<PaintLayer>();
			__0x11197.Enabled = __0x11198 != null;
			__0x11195.Enabled = __0x11198 != null;
			__0x11196.Enabled = __0x11198 != null && __0x11198.Mask.Value != null;
		}

		private void __0x11212( ProcedureUI.Button __0x11215 )
		{
			var __0x11199 = GetFirstObject<PaintLayer>();
			if( __0x11199 == null )
				return;

			var __0x11200 = new OKCancelTextBoxForm( "Mask value", "1", "Fill Mask", delegate ( string __0x11216, ref string __0x11217 )
			{
				if( !float.TryParse( __0x11216, out var value ) || value < 0 || value > 1 )
				{
					__0x11217 = "Must be value between 0 and 1.";
					return false;
				}
				return true;
			},
			delegate ( string __0x11218, ref string __0x11219 )
			{
				if( !float.TryParse( __0x11218, out var valueFloat ) )
					return false;

				var __0x11201 = (byte)( valueFloat * 255 );

				var __0x11202 = __0x11199.Mask;
				var __0x11203 = (Metadata.Property)__0x11199.MetadataGetMemberBySignature( "property:Mask" );
				var __0x11204 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11199, __0x11203, __0x11202 ) );
				Provider.DocumentWindow.Document.CommitUndoAction( __0x11204 );

				byte[] __0x11205;
				if( __0x11202.Value != null )
					__0x11205 = new byte[ __0x11202.Value.Length ];
				else
				{
					var __0x11206 = __0x11199.Parent as Terrain;
					if( __0x11206 != null )
						__0x11205 = new byte[ __0x11206.GetPaintMaskSizeInteger() * __0x11206.GetPaintMaskSizeInteger() ];
					else
					{
						
						__0x11205 = new byte[ 1 ];
					}
				}

				for( int __0x11207 = 0; __0x11207 < __0x11205.Length; __0x11207++ )
					__0x11205[ __0x11207 ] = __0x11201;

				__0x11199.Mask = __0x11205;

				return true;
			} );

			__0x11200.ShowDialog();
		}

		private void __0x11213( ProcedureUI.Button __0x11220 )
		{
			var __0x11208 = GetFirstObject<PaintLayer>();
			if( __0x11208 == null )
				return;

			if( !EditorUtility.ShowOpenFileDialog( false, "", null, out string fileName ) )
				return;
			
			

			if( !PaintLayer.LoadMask( fileName, out var mask, out var error ) )
			{
				EditorMessageBox.ShowWarning( error );
				return;
			}

			var __0x11209 = (Metadata.Property)__0x11208.MetadataGetMemberBySignature( "property:" + nameof( PaintLayer.Mask ) );
			var __0x11210 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11208, __0x11209, __0x11208.Mask ) );

			__0x11208.Mask = mask;

			Provider.DocumentWindow.Document.CommitUndoAction( __0x11210 );
		}

		private void __0x11214( ProcedureUI.Button __0x11221 )
		{
			var __0x11211 = GetFirstObject<PaintLayer>();
			if( __0x11211 == null || __0x11211.Mask.Value == null )
				return;

			if( !EditorUtility.ShowSaveFileDialog( "", "Mask.png", "PNG files (*.png)|*.png", out var fileName ) )
				return;

			if( !__0x11211.SaveMask( fileName, out var error ) )
				EditorMessageBox.ShowWarning( error );
			else
				ScreenNotifications.Show( EditorLocalization.Translate( "PaintLayer", "The image was created successfully." ) );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ParticleSystemEditor : DocumentWindowWithViewport
	{
		bool __0x11222 = true;

		bool __0x11223;

		int __0x11224;
		double __0x11225;

		

		public ParticleSystemEditor()
		{
			__0x11251();
		}

		public ParticleSystem ParticleSystem
		{
			get { return (ParticleSystem)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11226 = CreateScene( false );
			if( ParticleSystem != null )
			{
				var __0x11227 = __0x11226.CreateComponent<ParticleSystemInSpace>();
				__0x11227.ParticleSystem = ParticleSystem;
			}
			__0x11226.Enabled = true;

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x11250;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11250;

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			if( __0x11222 && scene.CameraEditor.Value != null )
			{
				__0x11248();
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, scene.CameraEditor );
			}

			__0x11222 = false;
		}

		void __0x11248()
		{
			

			var __0x11228 = Scene.CameraEditor.Value;
			
			var __0x11229 = new Bounds( -5, -5, -5, 5, 5, 5 );
			
			var __0x11230 = __0x11229.GetCenter();

			

			double __0x11231 = Math.Max( Math.Max( __0x11229.GetSize().X, __0x11229.GetSize().Y ), __0x11229.GetSize().Z );
			double __0x11232 = __0x11231 * 2;
			if( __0x11232 < 2 )
				__0x11232 = 2;

			double __0x11233 = 1;
			SphericalDirection __0x11234 = new SphericalDirection( -3.83, -.47 );

			var __0x11235 = __0x11230 - __0x11234.GetVector() * __0x11232 * __0x11233;
			var __0x11236 = __0x11230;

			Vector3 __0x11237 = __0x11235;
			Vector3 __0x11238 = __0x11236;
			Degree __0x11239 = 65;

			
			
			__0x11228.FieldOfView = __0x11239;
			__0x11228.NearClipPlane = Math.Max( __0x11232 / 10000, 0.01 );
			__0x11228.FarClipPlane = Math.Max( 1000, __0x11232 * 2 );

			__0x11228.Transform = new Transform( __0x11237, Quaternion.LookAt( ( __0x11238 - __0x11237 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11228.FixedUp = Vector3.ZAxis;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			if( ParticleSystem != null && __0x11223 )
			{
				ParticleSystem.PerformResultCompile();
				__0x11223 = false;
			}

			
			if( ParticleSystem != null && ParticleSystem.Result != null )
			{
				foreach( var __0x11246 in ParticleSystem.GetComponents<ParticleEmitter>() )
				{
					if( __0x11246.Enabled )
					{
						bool __0x11240 = SelectedObjectsSet.Contains( __0x11246 );

						var __0x11241 = Transform.Identity;
						int __0x11242 = 0;

						foreach( var __0x11247 in __0x11246.GetComponents<ParticleEmitterShape>( false, false, false ) )
						{
							if( __0x11247.Enabled )
							{
								ColorValue __0x11243;
								if( __0x11240 || SelectedObjectsSet.Contains( __0x11247 ) )
									__0x11243 = ProjectSettings.Get.General.SelectedColor;
								else
								{
									
									__0x11243 = new ColorValue( 0, 0, 0.8 );
								}
								viewport.Simple3DRenderer.SetColor( __0x11243, __0x11243 * ProjectSettings.Get.General.HiddenByOtherObjectsColorMultiplier );
								__0x11247.PerformRender( viewport, __0x11241, false, ref __0x11242 );
							}
						}
					}
				}

				
				
				
				
				

				
				
				
				

				
				
				
				
				
				
				
			}
		}

		static string __0x11249( string __0x11252 )
		{
			return EditorLocalization.Translate( "ParticleSystemDocumentWindow", __0x11252 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			if( ParticleSystem != null && Scene != null )
			{
				var __0x11244 = Scene.GetComponent<ParticleSystemInSpace>();
				if( __0x11244 != null )
				{
					
					

					if( Time.Current > __0x11225 + 0.25 )
					{
						__0x11225 = Time.Current;
						__0x11224 = __0x11244.ObjectsGetCount();
					}
					lines.Add( __0x11249( "Particles" ) + ": " + __0x11224.ToString() );
				}
			}
		}

		

		private void __0x11250( object __0x11253, EventArgs __0x11254 )
		{
			__0x11223 = true;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class ParticleSystemEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x11245 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x11251()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "ParticleSystemEditor";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public class ParticleSystemInSpaceSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11255;
		ProcedureUI.Button __0x11256;

		

		string __0x11268( string __0x11272 )
		{
			return EditorLocalization.Translate( "ParticleSystemInSpace", __0x11272 );
		}

		protected override void OnInit()
		{
			__0x11255 = ProcedureForm.CreateButton( __0x11268( "Play" ) );
			__0x11255.Click += __0x11270;

			__0x11256 = ProcedureForm.CreateButton( __0x11268( "Stop" ) );
			__0x11256.Click += __0x11271;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11255, __0x11256 } );
		}

		protected override void OnUpdate()
		{
			var __0x11257 = __0x11269();

			__0x11255.Enabled = __0x11257 != null;
			__0x11256.Enabled = __0x11257 != null && __0x11257.Activated;
		}

		ParticleSystemInSpace __0x11269()
		{
			foreach( var __0x11267 in Provider.SelectedObjects )
			{
				var __0x11258 = __0x11267 as ParticleSystemInSpace;
				if( __0x11258 != null )
					return __0x11258;
			}
			return null;
		}

		private void __0x11270( ProcedureUI.Button __0x11273 )
		{
			var __0x11259 = __0x11269();
			if( __0x11259 == null )
				return;

			var __0x11260 = __0x11259.Activated;

			
			if( __0x11259.Activated )
				__0x11259.RecreateData( false );
			else
				__0x11259.Activated = true;

			
			if( __0x11260 != __0x11259.Activated )
			{
				var __0x11261 = (Metadata.Property)__0x11259.MetadataGetMemberBySignature( "property:Activated" );
				var __0x11262 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11259, __0x11261, __0x11260, null ) );
				Provider.DocumentWindow.Document.CommitUndoAction( __0x11262 );
			}
		}

		private void __0x11271( ProcedureUI.Button __0x11274 )
		{
			var __0x11263 = __0x11269();
			if( __0x11263 == null )
				return;

			var __0x11264 = __0x11263.Activated;

			
			__0x11263.Activated = false;

			
			var __0x11265 = (Metadata.Property)__0x11263.MetadataGetMemberBySignature( "property:Activated" );
			var __0x11266 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11263, __0x11265, __0x11264, null ) );
			Provider.DocumentWindow.Document.CommitUndoAction( __0x11266 );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ParticleSystemPreview : PreviewControlWithViewport
	{
		public ParticleSystemPreview()
		{
			__0x11279();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11275 = CreateScene( false );

			var __0x11276 = ObjectOfPreview as ParticleSystem;
			if( __0x11276 != null )
			{
				var __0x11277 = __0x11275.CreateComponent<ParticleSystemInSpace>();
				__0x11277.ParticleSystem = __0x11276;
			}

			__0x11275.Enabled = true;

			
			SetCameraByBounds( new Bounds( -5, -5, -5, 5, 5, 5 ) );
			
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ParticleSystemPreview
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x11278 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x11278 != null))
            {
                __0x11278.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x11279()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ParticleSystemPreview";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public class ParticleSystemSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11280;

		

		protected override void OnInit()
		{
			__0x11280 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x11280.Click += __0x11282;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11280 } );
		}

		private void __0x11282( ProcedureUI.Button __0x11283 )
		{
			foreach( var __0x11281 in GetObjects<ParticleSystem>() )
			{
				__0x11281.MustRecreateInstances();
				__0x11281.PerformResultCompile();
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorPhysicsUtility
	{
		public static void AddCollision( DocumentWindow documentWindow, string collisionName )
		{
			const string __0x11284 = "Collision Definition";

			var __0x11285 = documentWindow.ObjectOfWindow as Mesh;

			var __0x11286 = __0x11285.CreateComponent<RigidBody>( enabled: false );
			__0x11286.Name = __0x11284;
			

			__0x11286.MotionType = RigidBody.MotionTypeEnum.Static;

			string __0x11287 = null;

			

			switch( collisionName )
			{
			case "Box":
				{
					var __0x11288 = __0x11286.CreateComponent<CollisionShape_Box>();
					var __0x11289 = __0x11285.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11288.TransformRelativeToParent = new Transform( __0x11289.GetCenter(), Quaternion.Identity );
					__0x11288.Dimensions = __0x11289.GetSize();
				}
				break;

			case "Sphere":
				{
					var __0x11290 = __0x11286.CreateComponent<CollisionShape_Sphere>();
					var __0x11291 = __0x11285.Result.SpaceBounds.CalculatedBoundingSphere;
					__0x11290.TransformRelativeToParent = new Transform( __0x11291.Center, Quaternion.Identity );
					__0x11290.Radius = __0x11291.Radius;
				}
				break;

			case "Capsule":
				{
					var __0x11292 = __0x11286.CreateComponent<CollisionShape_Capsule>();
					var __0x11293 = __0x11285.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11292.TransformRelativeToParent = new Transform( __0x11293.GetCenter(), Quaternion.Identity );
					__0x11292.Radius = Math.Max( __0x11293.GetSize().X, __0x11293.GetSize().Y ) / 2;
					__0x11292.Height = Math.Max( __0x11293.GetSize().Z - __0x11292.Radius * 2, 0 );
				}
				break;

			case "Cylinder":
				{
					var __0x11294 = __0x11286.CreateComponent<CollisionShape_Cylinder>();
					var __0x11295 = __0x11285.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11294.TransformRelativeToParent = new Transform( __0x11295.GetCenter(), Quaternion.Identity );
					__0x11294.Radius = Math.Max( __0x11295.GetSize().X, __0x11295.GetSize().Y ) / 2;
					__0x11294.Height = __0x11295.GetSize().Z;
				}
				break;

			case "Convex":
				{
					var __0x11296 = __0x11286.CreateComponent<CollisionShape_Mesh>();
					__0x11296.ShapeType = CollisionShape_Mesh.ShapeTypeEnum.Convex;
					__0x11296.Mesh = ReferenceUtility.MakeThisReference( __0x11296, __0x11285 );
				}
				break;

			case "Convex Decomposition":
				{
					var __0x11297 = new ConvexDecomposition.Settings();

					var __0x11298 = new SpecifyParametersForm( "Convex Decomposition", __0x11297 );
					__0x11298.CheckHandler = delegate ( ref string __0x11306 )
					{
						
						return true;
					};
					if( __0x11298.ShowDialog() != DialogResult.OK )
					{
						__0x11285.RemoveComponent( __0x11286, false );
						return;
					}

					var __0x11299 = ConvexDecomposition.Decompose( __0x11285.Result.ExtractedVerticesPositions, __0x11285.Result.ExtractedIndices, __0x11297 );

					if( __0x11299 == null )
					{
						__0x11285.RemoveComponent( __0x11286, false );
						Log.Warning( "Unable to decompose." );
						return;
					}

					foreach( var __0x11305 in __0x11299 )
					{
						var __0x11300 = __0x11286.CreateComponent<CollisionShape_Mesh>();
						__0x11300.Vertices = __0x11305.Vertices;
						__0x11300.Indices = __0x11305.Indices;
						__0x11300.ShapeType = CollisionShape_Mesh.ShapeTypeEnum.Convex;
					}
				}
				break;

			case "Mesh":
				{
					var __0x11301 = __0x11286.CreateComponent<CollisionShape_Mesh>();
					__0x11301.Mesh = ReferenceUtility.MakeThisReference( __0x11301, __0x11285 );
				}
				break;

			default:
				__0x11287 = "No implementation.";
				break;
			}

			if( !string.IsNullOrEmpty( __0x11287 ) )
			{
				__0x11285.RemoveComponent( __0x11286, false );
				Log.Warning( __0x11287 );
				return;
			}

			__0x11286.Enabled = true;

			var __0x11302 = new List<UndoSystem.Action>();
			__0x11302.Add( new UndoActionComponentCreateDelete( documentWindow.Document, new Component[] { __0x11286 }, true ) );

			
			if( !__0x11285.EditorDisplayCollision )
			{
				__0x11285.EditorDisplayCollision = true;

				var __0x11303 = (Metadata.Property)__0x11285.MetadataGetMemberBySignature( "property:EditorDisplayCollision" );
				var __0x11304 = new UndoActionPropertiesChange.Item( __0x11285, __0x11303, false, new object[ 0 ] );
				__0x11302.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11304 } ) );
			}

			documentWindow.Document.UndoSystem.CommitAction( new UndoMultiAction( __0x11302 ) );
			documentWindow.Document.Modified = true;
		}
	}
}





namespace NeoAxis.Editor
{
	class PhysicalBodyEditorExtensions : EditorExtensions
	{
		public override void OnRegister()
		{
			
			{
				var __0x11307 = new EditorAction();
				
				__0x11307.Name = "Add Constraint";
				
				

				
				__0x11307.QatSupport = true;
				
				__0x11307.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				PhysicalBody GetBody( object __0x11320 )
				{
					if( __0x11320 is PhysicalBody body )
						return body;

					var __0x11308 = __0x11320 as Component;
					if( __0x11308 != null )
					{
						var __0x11309 = __0x11308.GetComponent<PhysicalBody>();
						if( __0x11309 != null )
							return __0x11309;
					}

					return null;
				}

				__0x11307.GetState += delegate ( EditorAction.GetStateContext __0x11321 )
				{
					if( __0x11321.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11310 = __0x11321.ObjectsInFocus.Objects;
						if( __0x11310.Length == 2 )
						{
							var __0x11311 = GetBody( __0x11310[ 0 ] );
							var __0x11312 = GetBody( __0x11310[ 1 ] );

							if( __0x11311 != null && __0x11312 != null )
								__0x11321.Enabled = true;
							
							
						}
					}
				};

				__0x11307.Click += delegate ( EditorAction.ClickContext __0x11322 )
				{
					object[] __0x11313 = __0x11322.ObjectsInFocus.Objects;
					if( __0x11313.Length == 2 )
					{
						var __0x11314 = GetBody( __0x11313[ 0 ] );
						var __0x11315 = GetBody( __0x11313[ 1 ] );
						
						

						var __0x11316 = ComponentUtility.FindNearestCommonParent( new Component[] { __0x11314, __0x11315 } );
						if( __0x11316 != null )
						{
							var __0x11317 = new NewObjectWindow.CreationDataClass();

							__0x11317.initDocumentWindow = __0x11322.ObjectsInFocus.DocumentWindow;
							__0x11317.initParentObjects = new List<object>();
							__0x11317.initParentObjects.Add( __0x11316 );
							__0x11317.initLockType = MetadataManager.GetTypeOfNetType( typeof( Constraint ) );
							

							__0x11317.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x11323 )
							{
								var __0x11318 = (Constraint)__0x11317.createdComponentsOnTopLevel[ 0 ];

								__0x11318.BodyA = ReferenceUtility.MakeReference<PhysicalBody>(
									null, ReferenceUtility.CalculateThisReference( __0x11318, __0x11314 ) );
								__0x11318.BodyB = ReferenceUtility.MakeReference<PhysicalBody>(
									null, ReferenceUtility.CalculateThisReference( __0x11318, __0x11315 ) );

								var __0x11319 = ( __0x11314.Transform.Value.Position + __0x11315.Transform.Value.Position ) * 0.5;
								__0x11318.Transform = new Transform( __0x11319, Quaternion.Identity );
							};

							EditorAPI.OpenNewObjectWindow( __0x11317 );
						}
					}
				};

				EditorActions.Register( __0x11307 );
			}
		}
	}
}




#if !DEPLOY

namespace NeoAxis.Editor
{
	public class RenderToFileSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11324;

		

		class __0x11464
		{
			
			
			
			

			
			public string BaseColorTexture;
			public string MetallicTexture;
			public string RoughnessTexture;
			public string NormalTexture;
			public string DisplacementTexture;
			public string AmbientOcclusionTexture;
			public string EmissiveTexture;
			public string OpacityTexture;
			public string SubsurfaceColorTexture;

			public string GetTextureValueByName( string name )
			{
				switch( name )
				{
				case "BaseColor": return BaseColorTexture;
				case "Metallic": return MetallicTexture;
				case "Roughness": return RoughnessTexture;
				case "Normal": return NormalTexture;
				case "Displacement": return DisplacementTexture;
				case "AmbientOcclusion": return AmbientOcclusionTexture;
				case "Emissive": return EmissiveTexture;
				case "Opacity": return OpacityTexture;
				case "SubsurfaceColor": return SubsurfaceColorTexture;
				}
				return "";
			}

			public void SetTextureValueByName( string name, string value )
			{
				switch( name )
				{
				case "BaseColor": BaseColorTexture = value; break;
				case "Metallic": MetallicTexture = value; break;
				case "Roughness": RoughnessTexture = value; break;
				case "Normal": NormalTexture = value; break;
				case "Displacement": DisplacementTexture = value; break;
				case "AmbientOcclusion": AmbientOcclusionTexture = value; break;
				case "Emissive": EmissiveTexture = value; break;
				case "Opacity": OpacityTexture = value; break;
				case "SubsurfaceColor": SubsurfaceColorTexture = value; break;
				}
			}

			public int GetTextureCount()
			{
				int __0x11325 = 0;
				if( !string.IsNullOrEmpty( BaseColorTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( MetallicTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( RoughnessTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( NormalTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( DisplacementTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( AmbientOcclusionTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( EmissiveTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( OpacityTexture ) )
					__0x11325++;
				if( !string.IsNullOrEmpty( SubsurfaceColorTexture ) )
					__0x11325++;
				return __0x11325;
			}

			
			
			

			
			
			
			
			
			
			
			
			

			
			
		}

		

		enum MaterialChannel
		{
			Opacity,
			BaseColor,
			Metallic,
			Roughness,
			Normal,
			SubsurfaceColor,
		}

		

		protected override void OnInit()
		{
			__0x11324 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Render" ) );
			__0x11324.Click += __0x11435;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11324 } );
		}

		private void __0x11435( ProcedureUI.Button __0x11444 )
		{
			__0x11436();
		}

		public RenderToFile RenderToFile
		{
			get { return GetFirstObject<RenderToFile>(); }
		}

		void __0x11436()
		{
			var __0x11326 = RenderToFile;
			var __0x11327 = __0x11326.ParentRoot as Scene;

			
			var __0x11328 = __0x11326.Camera.Value;
			if( __0x11326.Mode.Value == RenderToFile.ModeEnum.Screenshot || __0x11326.Mode.Value == RenderToFile.ModeEnum.Material )
			{
				if( __0x11328 == null )
					__0x11328 = __0x11327.Mode.Value == Scene.ModeEnum._2D ? __0x11327.CameraEditor2D : __0x11327.CameraEditor;
				if( __0x11328 == null )
				{
					EditorMessageBox.ShowWarning( "Camera is not specified." );
					return;
				}
			}

			
			var __0x11329 = __0x11326.RenderingPipeline.Value;
			if( __0x11329 == null )
				__0x11329 = __0x11327.RenderingPipeline.Value;

			var __0x11330 = __0x11326.OutputFileName.Value.Trim();
			if( !Path.IsPathRooted( __0x11330 ) && !string.IsNullOrEmpty( __0x11330 ) )
				__0x11330 = VirtualPathUtility.GetRealPathByVirtual( __0x11330 );

			if( string.IsNullOrEmpty( __0x11330 ) )
			{
				switch( __0x11326.Mode.Value )
				{
				case RenderToFile.ModeEnum.Screenshot:
					if( !EditorUtility.ShowSaveFileDialog( "", "Output.png", "PNG files (*.png)|*.png", out __0x11330 ) )
						return;
					break;

				case RenderToFile.ModeEnum.Video:
					if( !EditorUtility.ShowSaveFileDialog( "", "Output.avi", "AVI files (*.avi)|*.avi", out __0x11330 ) )
						return;
					break;

				case RenderToFile.ModeEnum.Material:
					if( !EditorUtility.ShowSaveFileDialog( "", "Output.material", "Material files (*.material)|*.material", out __0x11330 ) )
						return;
					break;
				}
			}
			else
			{
				
				if( File.Exists( __0x11330 ) )
				{
					var __0x11331 = $"The file with name \'{__0x11330}\' is already exists. Overwrite?";
					if( EditorMessageBox.ShowQuestion( __0x11331, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
						return;
				}
			}

			var __0x11332 = ScreenNotifications.ShowSticky( "Processing..." );
			try
			{
				switch( __0x11326.Mode.Value )
				{
				case RenderToFile.ModeEnum.Screenshot:
					__0x11438( __0x11328, __0x11329, __0x11330 );
					break;

				case RenderToFile.ModeEnum.Video:
					__0x11443( __0x11328, __0x11329, __0x11330 );
					break;

				case RenderToFile.ModeEnum.Material:
					__0x11442( __0x11328, __0x11330 );
					break;
				}
			}
			finally
			{
				__0x11332.Close();
			}

		}

		private void __0x11437( Scene __0x11445, ref bool __0x11446 )
		{
			__0x11446 = RenderToFile.DisplayDevelopmentData;
		}

		void __0x11438( Camera __0x11447, RenderingPipeline __0x11448, string __0x11449 )
		{
			var __0x11333 = RenderToFile;
			var __0x11334 = __0x11333.ParentRoot as Scene;

			ImageComponent __0x11335 = null;
			ImageComponent __0x11336 = null;

			try
			{
				
				var __0x11337 = __0x11333.Resolution.Value;

				
				var __0x11338 = false;
				PixelFormat __0x11339 = __0x11338 ? PixelFormat.Float16RGBA : PixelFormat.A8R8G8B8;
				

				__0x11335 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
				__0x11335.CreateType = ImageComponent.TypeEnum._2D;
				__0x11335.CreateSize = __0x11337;
				__0x11335.CreateMipmaps = false;
				__0x11335.CreateFormat = __0x11339;
				__0x11335.CreateUsage = ImageComponent.Usages.RenderTarget;
				__0x11335.CreateFSAA = 0;
				__0x11335.Enabled = true;

				var __0x11340 = __0x11335.Result.GetRenderTarget( 0, 0 );
				var __0x11341 = __0x11340.AddViewport( true, true );
				__0x11341.AttachedScene = __0x11334;

				__0x11336 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
				__0x11336.CreateType = ImageComponent.TypeEnum._2D;
				__0x11336.CreateSize = __0x11337;
				__0x11336.CreateMipmaps = false;
				__0x11336.CreateFormat = __0x11339;
				__0x11336.CreateUsage = ImageComponent.Usages.ReadBack | ImageComponent.Usages.BlitDestination;
				__0x11336.CreateFSAA = 0;
				__0x11336.Enabled = true;

				
				

				

				
				

				
				

				
				
				
				
				
				
				
				
				
				

				try
				{
					__0x11334.GetDisplayDevelopmentDataInThisApplicationOverride += __0x11437;

					var __0x11342 = new Viewport.CameraSettingsClass( __0x11341, __0x11447, __0x11448 );

					

					__0x11341.Update( true, __0x11342 );

					
					__0x11341.RenderingContext.MultiRenderTarget_DestroyAll();
					__0x11341.RenderingContext.DynamicTexture_DestroyAll();
				}
				finally
				{
					__0x11334.GetDisplayDevelopmentDataInThisApplicationOverride -= __0x11437;
				}

				__0x11335.Result.GetNativeObject( true ).BlitTo( __0x11341.RenderingContext.CurrentViewNumber, __0x11336.Result.GetNativeObject( true ), 0, 0 );


				
				var __0x11343 = PixelFormatUtility.GetNumElemBytes( __0x11339 ) * __0x11337.X * __0x11337.Y;
				var __0x11344 = new byte[ __0x11343 ];
				unsafe
				{
					fixed( byte* __0x11345 = __0x11344 )
					{
						var __0x11346 = __0x11336.Result.GetNativeObject( true ).Read( (IntPtr)__0x11345, 0 );
						while( RenderingSystem.CallBgfxFrame() < __0x11346 ) { }
					}
				}

				var __0x11347 = new ImageUtility.Image2D( __0x11339, __0x11337, __0x11344 );

				
				for( int __0x11348 = 0; __0x11348 < __0x11347.Size.Y; __0x11348++ )
				{
					for( int __0x11349 = 0; __0x11349 < __0x11347.Size.X; __0x11349++ )
					{
						var __0x11350 = __0x11347.GetPixel( new Vector2I( __0x11349, __0x11348 ) );
						__0x11350.W = 1.0f;
						__0x11347.SetPixel( new Vector2I( __0x11349, __0x11348 ), __0x11350 );
					}
				}

				
				

				
				
				
				
				
				
				
				
				
				

				
				
				

				if( !Directory.Exists( Path.GetDirectoryName( __0x11449 ) ) )
					Directory.CreateDirectory( Path.GetDirectoryName( __0x11449 ) );

				if( !ImageUtility.Save( __0x11449, __0x11347.Data, __0x11347.Size, 1, __0x11347.Format, 1, 0, out var error ) )
					throw new Exception( error );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}
			finally
			{
				__0x11335?.Dispose();
				__0x11336?.Dispose();
			}

			ScreenNotifications.Show( "Rendering completed successfully." );
		}

		void __0x11439( Material __0x11450, __0x11464 __0x11451, out FlowGraph __0x11452 )
		{
			__0x11452 = __0x11450.CreateComponent<FlowGraph>();
			__0x11452.Name = "Shader graph";
			__0x11452.Specialization = ReferenceUtility.MakeReference(
				MetadataManager.GetTypeOfNetType( typeof( FlowGraphSpecialization_Shader ) ).Name + "|Instance" );

			{
				var __0x11351 = __0x11452.CreateComponent<FlowGraphNode>();
				__0x11351.Name = "Node " + "Material";
				__0x11351.Position = new Vector2I( 10, -7 );
				__0x11351.ControlledObject = ReferenceUtility.MakeThisReference( __0x11351, __0x11450 );
			}

			
			{
				const int __0x11352 = 9;
				Vector2I __0x11353 = new Vector2I( -20, -__0x11451.GetTextureCount() * __0x11352 / 2 );

				
				if( !string.IsNullOrEmpty( __0x11451.BaseColorTexture ) )
				{
					var __0x11354 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11354.Name = "Node Texture Sample " + "BaseColor";
					__0x11354.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11355 = __0x11354.CreateComponent<ShaderTextureSample>();
					__0x11355.Name = ComponentUtility.GetNewObjectUniqueName( __0x11355 );
					__0x11355.Texture = new Reference<ImageComponent>( null, __0x11451.BaseColorTexture );

					__0x11354.ControlledObject = ReferenceUtility.MakeThisReference( __0x11354, __0x11355 );

					__0x11450.BaseColor = ReferenceUtility.MakeThisReference( __0x11450, __0x11355, "RGBA" );
				}
				
				

				
				if( !string.IsNullOrEmpty( __0x11451.MetallicTexture ) )
				{
					var __0x11356 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11356.Name = "Node Texture Sample " + "Metallic";
					__0x11356.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11357 = __0x11356.CreateComponent<ShaderTextureSample>();
					__0x11357.Name = ComponentUtility.GetNewObjectUniqueName( __0x11357 );
					__0x11357.Texture = new Reference<ImageComponent>( null, __0x11451.MetallicTexture );

					__0x11356.ControlledObject = ReferenceUtility.MakeThisReference( __0x11356, __0x11357 );

					__0x11450.Metallic = ReferenceUtility.MakeThisReference( __0x11450, __0x11357, "R" );
				}

				
				if( !string.IsNullOrEmpty( __0x11451.RoughnessTexture ) )
				{
					var __0x11358 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11358.Name = "Node Texture Sample " + "Roughness";
					__0x11358.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11359 = __0x11358.CreateComponent<ShaderTextureSample>();
					__0x11359.Name = ComponentUtility.GetNewObjectUniqueName( __0x11359 );
					__0x11359.Texture = new Reference<ImageComponent>( null, __0x11451.RoughnessTexture );

					__0x11358.ControlledObject = ReferenceUtility.MakeThisReference( __0x11358, __0x11359 );

					__0x11450.Roughness = ReferenceUtility.MakeThisReference( __0x11450, __0x11359, "R" );
				}

				
				if( !string.IsNullOrEmpty( __0x11451.NormalTexture ) )
				{
					var __0x11360 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11360.Name = "Node Texture Sample " + "Normal";
					__0x11360.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11361 = __0x11360.CreateComponent<ShaderTextureSample>();
					__0x11361.Name = ComponentUtility.GetNewObjectUniqueName( __0x11361 );
					__0x11361.Texture = new Reference<ImageComponent>( null, __0x11451.NormalTexture );

					__0x11360.ControlledObject = ReferenceUtility.MakeThisReference( __0x11360, __0x11361 );

					__0x11450.Normal = ReferenceUtility.MakeThisReference( __0x11450, __0x11361, "RGBA" );
				}

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				if( !string.IsNullOrEmpty( __0x11451.OpacityTexture ) )
				{
					var __0x11362 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11362.Name = "Node Texture Sample " + "Opacity";
					__0x11362.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11363 = __0x11362.CreateComponent<ShaderTextureSample>();
					__0x11363.Name = ComponentUtility.GetNewObjectUniqueName( __0x11363 );
					__0x11363.Texture = new Reference<ImageComponent>( null, __0x11451.OpacityTexture );

					__0x11362.ControlledObject = ReferenceUtility.MakeThisReference( __0x11362, __0x11363 );

					__0x11450.Opacity = ReferenceUtility.MakeThisReference( __0x11450, __0x11363, "R" );

					__0x11450.BlendMode = Material.BlendModeEnum.Masked;
				}

				
				if( !string.IsNullOrEmpty( __0x11451.SubsurfaceColorTexture ) )
				{
					var __0x11364 = __0x11452.CreateComponent<FlowGraphNode>();
					__0x11364.Name = "Node Texture Sample " + "SubsurfaceColor";
					__0x11364.Position = __0x11353;
					__0x11353.Y += __0x11352;

					var __0x11365 = __0x11364.CreateComponent<ShaderTextureSample>();
					__0x11365.Name = ComponentUtility.GetNewObjectUniqueName( __0x11365 );
					__0x11365.Texture = new Reference<ImageComponent>( null, __0x11451.SubsurfaceColorTexture );

					__0x11364.ControlledObject = ReferenceUtility.MakeThisReference( __0x11364, __0x11365 );

					__0x11450.SubsurfaceColor = ReferenceUtility.MakeThisReference( __0x11450, __0x11365, "RGBA" );
				}
			}
		}

		

		struct __0x11465
		{
			public float distance;
			public Vector2I offset;
		}
		static Vector2I[] __0x11366;
		static Vector2I __0x11367;

		static Vector2I[] __0x11440( ImageUtility.Image2D __0x11453 )
		{
			if( __0x11366 == null || __0x11367 != __0x11453.Size )
			{
				var __0x11368 = new List<__0x11465>( __0x11453.Size.X * 5 );

				for( int __0x11369 = -__0x11453.Size.Y; __0x11369 <= __0x11453.Size.Y; __0x11369++ )
				{
					for( int __0x11370 = -__0x11453.Size.X; __0x11370 <= __0x11453.Size.X; __0x11370++ )
					{
						if( __0x11370 == 0 && __0x11369 == 0 )
							continue;

						var __0x11371 = new __0x11465();
						__0x11371.offset = new Vector2I( __0x11370, __0x11369 );
						__0x11371.distance = MathEx.Sqrt( __0x11370 * __0x11370 + __0x11369 * __0x11369 );
						__0x11368.Add( __0x11371 );
					}
				}

				
				__0x11367 = __0x11453.Size;

				CollectionUtility.MergeSort( __0x11368, delegate ( __0x11465 __0x11454, __0x11465 __0x11455 )
				{
					if( __0x11454.distance < __0x11455.distance )
						return -1;
					else if( __0x11454.distance > __0x11455.distance )
						return 1;
					return 0;
				}, true );

				__0x11366 = new Vector2I[ __0x11368.Count ];
				for( var __0x11372 = 0; __0x11372 < __0x11366.Length; __0x11372++ )
					__0x11366[ __0x11372 ] = __0x11368[ __0x11372 ].offset;
			}

			return __0x11366;
		}

		

		static void __0x11441( ref ImageUtility.Image2D __0x11456, Vector2I[,] __0x11457 )
		{
			for( int __0x11373 = 0; __0x11373 < __0x11456.Size.Y; __0x11373++ )
			{
				for( int __0x11374 = 0; __0x11374 < __0x11456.Size.X; __0x11374++ )
				{
					var __0x11375 = __0x11457[ __0x11374, __0x11373 ];
					var __0x11376 = __0x11456.GetPixelByte( new Vector2I( __0x11375.X, __0x11375.Y ) );

					__0x11456.SetPixel( new Vector2I( __0x11374, __0x11373 ), __0x11376 );


					

					
					
					
					
					
					
					
					

					
				}
			}
		}

		void __0x11442( Camera __0x11458, string __0x11459 )
		{
			var __0x11377 = RenderToFile;
			var __0x11378 = __0x11377.ParentRoot as Scene;

			var __0x11379 = new string[ 6 ];
			
			Vector2I[,] __0x11380 = null;

			
			for( int __0x11381 = 0; __0x11381 < 6; __0x11381++ )
			{
				var __0x11382 = (MaterialChannel)__0x11381;

				ImageComponent __0x11383 = null;
				ImageComponent __0x11384 = null;

				try
				{
					var __0x11385 = Path.GetFileNameWithoutExtension( __0x11459 ) + "_";

					string __0x11386 = "";
					switch( __0x11381 )
					{
					case 0: __0x11386 = __0x11385 + "Opacity.png"; break;
					case 1: __0x11386 = __0x11385 + "BaseColor.png"; break;
					case 2: __0x11386 = __0x11385 + "Metallic.png"; break;
					case 3: __0x11386 = __0x11385 + "Roughness.png"; break;
					case 4: __0x11386 = __0x11385 + "Normal.png"; break;
					case 5: __0x11386 = __0x11385 + "SubsurfaceColor.png"; break;
					}

					var __0x11387 = Path.Combine( Path.GetDirectoryName( __0x11459 ), __0x11386 );

					
					var __0x11388 = __0x11377.Resolution.Value;

					PixelFormat __0x11389 = PixelFormat.A8R8G8B8;

					__0x11383 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
					__0x11383.CreateType = ImageComponent.TypeEnum._2D;
					__0x11383.CreateSize = __0x11388;
					__0x11383.CreateMipmaps = false;
					__0x11383.CreateFormat = __0x11389;
					__0x11383.CreateUsage = ImageComponent.Usages.RenderTarget;
					__0x11383.CreateFSAA = 0;
					__0x11383.Enabled = true;

					var __0x11390 = __0x11383.Result.GetRenderTarget( 0, 0 );
					var __0x11391 = __0x11390.AddViewport( true, true );
					__0x11391.AttachedScene = __0x11378;

					__0x11384 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
					__0x11384.CreateType = ImageComponent.TypeEnum._2D;
					__0x11384.CreateSize = __0x11388;
					__0x11384.CreateMipmaps = false;
					__0x11384.CreateFormat = __0x11389;
					__0x11384.CreateUsage = ImageComponent.Usages.ReadBack | ImageComponent.Usages.BlitDestination;
					__0x11384.CreateFSAA = 0;
					__0x11384.Enabled = true;


					var __0x11392 = __0x11378.RenderingPipeline;

					var __0x11393 = ComponentUtility.CreateComponent<RenderingPipeline_Basic>( null, true, true );
					switch( __0x11381 )
					{
					case 0: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.Normal; break;
					case 1: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.BaseColor; break;
					case 2: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.Metallic; break;
					case 3: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.Roughness; break;
					case 4: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.Normal; break;
					case 5: __0x11393.DebugMode = RenderingPipeline_Basic.DebugModeEnum.SubsurfaceColor; break;
					}

					try
					{
						__0x11378.RenderingPipeline = __0x11393;
						__0x11378.GetDisplayDevelopmentDataInThisApplicationOverride += __0x11437;

						var __0x11394 = new Viewport.CameraSettingsClass( __0x11391, __0x11458 );

						__0x11391.Update( true, __0x11394 );

						
						__0x11391.RenderingContext.MultiRenderTarget_DestroyAll();
						__0x11391.RenderingContext.DynamicTexture_DestroyAll();
					}
					finally
					{
						__0x11378.RenderingPipeline = __0x11392;
						__0x11378.GetDisplayDevelopmentDataInThisApplicationOverride -= __0x11437;
					}

					__0x11383.Result.GetNativeObject( true ).BlitTo( __0x11391.RenderingContext.CurrentViewNumber, __0x11384.Result.GetNativeObject( true ), 0, 0 );

					
					var __0x11395 = PixelFormatUtility.GetNumElemBytes( __0x11389 ) * __0x11388.X * __0x11388.Y;
					var __0x11396 = new byte[ __0x11395 ];
					unsafe
					{
						fixed( byte* __0x11397 = __0x11396 )
						{
							var __0x11398 = __0x11384.Result.GetNativeObject( true ).Read( (IntPtr)__0x11397, 0 );
							while( RenderingSystem.CallBgfxFrame() < __0x11398 ) { }
						}
					}

					var __0x11399 = new ImageUtility.Image2D( __0x11389, __0x11388, __0x11396 );

					if( __0x11382 == MaterialChannel.Opacity )
					{
						
						for( int __0x11400 = 0; __0x11400 < __0x11399.Size.Y; __0x11400++ )
						{
							for( int __0x11401 = 0; __0x11401 < __0x11399.Size.X; __0x11401++ )
							{
								var __0x11402 = __0x11399.GetPixel( new Vector2I( __0x11401, __0x11400 ) );

								if( __0x11402.ToVector3F() != Vector3F.Zero )
									__0x11402 = Vector4F.One;
								else
									__0x11402 = Vector4F.Zero;

								__0x11399.SetPixel( new Vector2I( __0x11401, __0x11400 ), __0x11402 );
							}
						}

						
						if( __0x11377.FillTransparentPixelsByNearPixels )
						{
							var __0x11403 = new int[ __0x11399.Size.X, __0x11399.Size.Y ];
							for( int __0x11404 = 0; __0x11404 < __0x11399.Size.Y; __0x11404++ )
							{
								for( int __0x11405 = 0; __0x11405 < __0x11399.Size.X; __0x11405++ )
								{
									var __0x11406 = __0x11399.GetPixelByte( new Vector2I( __0x11405, __0x11404 ) );
									__0x11403[ __0x11405, __0x11404 ] = __0x11406.Red == 0 ? 1 : 0;
									
								}
							}

							var __0x11407 = __0x11440( __0x11399 );

							__0x11380 = new Vector2I[ __0x11399.Size.X, __0x11399.Size.Y ];
							for( int __0x11408 = 0; __0x11408 < __0x11399.Size.Y; __0x11408++ )
								for( int __0x11409 = 0; __0x11409 < __0x11399.Size.X; __0x11409++ )
									__0x11380[ __0x11409, __0x11408 ] = new Vector2I( __0x11409, __0x11408 );

							


							

							var __0x11410 = __0x11399.Size.X;
							var __0x11411 = __0x11399.Size.Y;

							Parallel.For( 0, __0x11399.Size.X * __0x11399.Size.Y, delegate ( int __0x11460 )
							{
								var __0x11412 = __0x11460 / __0x11410;
								var __0x11413 = __0x11460 % __0x11410;

								var __0x11414 = __0x11403[ __0x11413, __0x11412 ];
								if( __0x11414 != 0 )
								{
									for( int __0x11415 = 0; __0x11415 < __0x11407.Length; __0x11415++ )
									{
										ref var __0x11416 = ref __0x11407[ __0x11415 ];

										var __0x11417 = __0x11413 + __0x11416.X;
										var __0x11418 = __0x11412 + __0x11416.Y;
										if( __0x11417 >= 0 && __0x11417 < __0x11410 && __0x11418 >= 0 && __0x11418 < __0x11411 )
										{
											var __0x11419 = __0x11403[ __0x11417, __0x11418 ];
											if( __0x11419 == 0 )
											{
												__0x11380[ __0x11413, __0x11412 ] = new Vector2I( __0x11417, __0x11418 );
												break;
											}
										}
									}
								}
							} );

							
							
							
							
							
							
							
							
							
							

							
							
							
							
							
							
							
							
							
							
							
							
							
							

							
							

						}

					}

					if( __0x11382 == MaterialChannel.BaseColor || __0x11382 == MaterialChannel.Metallic || __0x11382 == MaterialChannel.Roughness || __0x11382 == MaterialChannel.Normal || __0x11382 == MaterialChannel.SubsurfaceColor )
					{
						
						for( int __0x11420 = 0; __0x11420 < __0x11399.Size.Y; __0x11420++ )
						{
							for( int __0x11421 = 0; __0x11421 < __0x11399.Size.X; __0x11421++ )
							{
								var __0x11422 = __0x11399.GetPixel( new Vector2I( __0x11421, __0x11420 ) );
								__0x11422.W = 1.0f;
								__0x11399.SetPixel( new Vector2I( __0x11421, __0x11420 ), __0x11422 );
							}
						}
					}

					
					var __0x11423 = false;
					if( __0x11382 == MaterialChannel.Metallic || __0x11382 == MaterialChannel.SubsurfaceColor )
					{
						var __0x11424 = true;

						for( int __0x11425 = 0; __0x11425 < __0x11399.Size.Y; __0x11425++ )
						{
							for( int __0x11426 = 0; __0x11426 < __0x11399.Size.X; __0x11426++ )
							{
								var __0x11427 = __0x11399.GetPixel( new Vector2I( __0x11426, __0x11425 ) );
								if( __0x11427 != new Vector4F( 0, 0, 0, 1 ) )
								{
									__0x11424 = false;
									break;
								}
							}
						}

						if( __0x11424 )
							__0x11423 = true;
					}

					if( !__0x11423 )
					{
						if( __0x11382 == MaterialChannel.BaseColor || __0x11382 == MaterialChannel.Metallic || __0x11382 == MaterialChannel.Roughness || __0x11382 == MaterialChannel.Normal || __0x11382 == MaterialChannel.SubsurfaceColor )
						{
							
							if( __0x11380 != null )
								__0x11441( ref __0x11399, __0x11380 );
						}

						if( !Directory.Exists( Path.GetDirectoryName( __0x11387 ) ) )
							Directory.CreateDirectory( Path.GetDirectoryName( __0x11387 ) );

						if( !ImageUtility.Save( __0x11387, __0x11399.Data, __0x11399.Size, 1, __0x11399.Format, 1, 0, out var error ) )
							throw new Exception( error );

						__0x11379[ __0x11381 ] = VirtualPathUtility.GetVirtualPathByReal( __0x11387 );
					}

				}
				catch( Exception e )
				{
					EditorMessageBox.ShowWarning( e.Message );
					return;
				}
				finally
				{
					__0x11383?.Dispose();
					__0x11384?.Dispose();
				}
			}

			
			try
			{
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				


				
				
				
				
				
				
				
				
				
				
				

				
				
				

				Material __0x11428 = null;
				var __0x11429 = __0x11377.Template.Value;
				if( __0x11429 != null )
					__0x11428 = (Material)__0x11429.Clone();
				if( __0x11428 == null )
					__0x11428 = ComponentUtility.CreateComponent<Material>( null, true, false );

				
				
				

				
				
				
				
				

				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				

				var __0x11430 = new __0x11464();
				__0x11430.OpacityTexture = __0x11379[ 0 ];
				__0x11430.BaseColorTexture = __0x11379[ 1 ];
				__0x11430.MetallicTexture = __0x11379[ 2 ];
				__0x11430.RoughnessTexture = __0x11379[ 3 ];
				__0x11430.NormalTexture = __0x11379[ 4 ];
				__0x11430.SubsurfaceColorTexture = __0x11379[ 5 ];

				__0x11439( __0x11428, __0x11430, out var graph );

				var __0x11431 = new Component[] { __0x11428, graph };
				__0x11428.EditorDocumentConfiguration = KryptonConfigGenerator.CreateEditorDocumentXmlConfiguration( __0x11431, graph );

				__0x11428.Enabled = true;


				if( !ComponentUtility.SaveComponentToFile( __0x11428, __0x11459, null, out var error ) )
					throw new Exception( error );

				__0x11428.Dispose();

			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			ScreenNotifications.Show( "Rendering completed successfully." );
		}

		void __0x11443( Camera __0x11461, RenderingPipeline __0x11462, string __0x11463 )
		{
			var __0x11432 = RenderToFile.ParentRoot;
			

			if( !RunSimulation.CheckTypeSupportedByPlayer( __0x11432.BaseType ) )
				return;
			if( !EditorAPI.SaveDocuments() )
				return;
			
			
			
			
			

			var __0x11433 = EditorAPI.GetDocumentByObject( __0x11432 );
			if( __0x11433 == null )
				return;

			var __0x11434 = "";
			switch( RenderToFile.Format.Value )
			{
			case RenderToFile.FormatEnum.NoCompression: __0x11434 = "DIB "; break;
			case RenderToFile.FormatEnum.LagarithLosslessLAGS: __0x11434 = "LAGS"; break;
			case RenderToFile.FormatEnum.Other: __0x11434 = RenderToFile.FormatFourCC.Value; break;
			}

			RunSimulation.RunRenderVideoToFile( __0x11433.RealFileName, __0x11463, RunSimulation.RunMethod.Player, RenderToFile.FramesPerSecond, RenderToFile.Length, __0x11461 != null ? __0x11461.GetPathFromRoot() : "", __0x11462 != null ? __0x11462.GetPathFromRoot() : "", RenderToFile.Resolution.Value, __0x11434 );
		}
	}
}

#endif




namespace NeoAxis.Editor
{
	internal class HCItemNewSceneTemplates : HCItemUserControl
	{
		ContentBrowser __0x11466;

		public HCItemNewSceneTemplates( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			var __0x11467 = base.CreateControlInsidePropertyItemControl();

			
			__0x11466 = new NeoAxis.Editor.ContentBrowser();
			__0x11466.CanSelectObjectSettings = false;
			__0x11466.Dock = System.Windows.Forms.DockStyle.Fill;
			__0x11466.Location = new System.Drawing.Point( 0, 0 );
			__0x11466.Margin = new System.Windows.Forms.Padding( 2 );
			__0x11466.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			__0x11466.Name = "contentBrowser1";
			__0x11466.Size = new System.Drawing.Size( 215, 247 );
			__0x11466.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x11466.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
			__0x11466.UseSelectedTreeNodeAsRootForList = false;
			__0x11466.Options.Breadcrumb = false;
			__0x11466.Options.TileImageSize = 80;
			__0x11466.ShowToolBar = false;
			__0x11466.ItemAfterSelect += __0x11472;
			__0x11467.Controls.Add( this.__0x11466 );

			
			
			Size __0x11468 = DpiHelper.Default.ScaleValue( new Size( 30, 40 ) );
			__0x11467.Height = ( 128 + __0x11468.Height + 4 ) * 2;

			
			try
			{
				var __0x11469 = new List<ContentBrowser.Item>();

				foreach( var __0x11471 in Scene.NewObjectSettingsScene.GetTemplates() )
				{
					__0x11466.AddImageKey( __0x11471.Name, __0x11471.Preview );

					var __0x11470 = new ContentBrowserItem_Virtual( __0x11466, null, __0x11471.ToString() );
					__0x11470.Tag = __0x11471;
					__0x11470.imageKey = __0x11471.Name;
					__0x11469.Add( __0x11470 );
				}

				if( __0x11469.Count != 0 )
				{
					__0x11466.SetData( __0x11469, false );
					__0x11466.SelectItems( new ContentBrowser.Item[] { __0x11469[ 0 ] } );
				}
			}
			catch( Exception exc )
			{
				Log.Warning( exc.Message );
				
			}

			return __0x11467;
		}

		private void __0x11472( ContentBrowser __0x11473, IList<ContentBrowser.Item> __0x11474, bool __0x11475, ref bool __0x11476 )
		{
			if( __0x11475 && __0x11474.Count != 0 )
				SetValue( __0x11474[ 0 ].Tag, true );
		}

		
		
		
		
		

		
		
	}
}





namespace NeoAxis.Editor
{
	public partial class SceneEditor : DocumentWindowWithViewport
	{
		[EngineConfig( "Scene Editor", "CreateObjectsMode" )]
		public static CreateObjectsModeEnum CreateObjectsMode = CreateObjectsModeEnum.Drop;
		[EngineConfig( "Scene Editor", "CreateObjectsBrushRadius" )]
		public static double CreateObjectsBrushRadius = 1;
		[EngineConfig( "Scene Editor", "CreateObjectsBrushStrength" )]
		public static double CreateObjectsBrushStrength = 0.5;
		
		[EngineConfig( "Scene Editor", "CreateObjectsBrushHardness" )]
		public static double CreateObjectsBrushHardness = 0.5;

		[EngineConfig( "Terrain Editor", "TerrainToolShape" )]
		public static TerrainEditingMode.TerrainEditorToolShape TerrainToolShape = TerrainEditingMode.TerrainEditorToolShape.Circle;
		[EngineConfig( "Terrain Editor", "TerrainToolRadius" )]
		public static double TerrainToolRadius = 3;
		[EngineConfig( "Terrain Editor", "TerrainToolStrength" )]
		public static double TerrainToolStrength = 0.5;
		[EngineConfig( "Terrain Editor", "TerrainToolHardness" )]
		public static double TerrainToolHardness = 0.5;


		
		bool __0x11477;
		bool __0x11478;
		Vector2 __0x11479;
		Vector2 __0x11480;

		
		TransformTool __0x11481;
		bool __0x11482;
		bool __0x11483;
		Vector2 __0x11484;
		internal TransformTool.ModeEnum transformToolModeRestore = TransformTool.ModeEnum.PositionRotation;

		
		List<(CreateObjectsDestinationModeEnum Mode, Component Obj, string Text)> __0x11485 = new List<(CreateObjectsDestinationModeEnum, Component, string)>();
		double __0x11486;
		(CreateObjectsDestinationModeEnum Mode, Component Obj) __0x11487;

		
		List<(PaintLayer Obj, string Text)> __0x11488 = new List<(PaintLayer, string)>();
		double __0x11489;
		PaintLayer __0x11490;

		
		bool __0x11491;
		bool __0x11492;
		bool __0x11493;
		Metadata.TypeInfo __0x11494;
		Component __0x11495;
		object __0x11496;
		Metadata.Property __0x11497;
		object[] __0x11498;
		IReference __0x11499;
		Component __0x11500;

		bool __0x11501;
		bool __0x11502;
		float __0x11503;
		GroupOfObjects __0x11504;
		List<int> __0x11505 = new List<int>();
		List<GroupOfObjects.Object> __0x11506 = new List<GroupOfObjects.Object>();
		List<Component> __0x11507 = new List<Component>();
		List<(Component obj, bool wasEnabled)> __0x11508 = new List<(Component obj, bool wasEnabled)>();

		bool __0x11509;

		EngineToolTip __0x11510 = new EngineToolTip();
		Component __0x11511;
		string __0x11512 = "";

		public static List<Type> CanvasWidgetsToCreate { get; } = new List<Type>();
		public List<CanvasWidget> CanvasWidgets { get; } = new List<CanvasWidget>();

		

		public enum CreateObjectsModeEnum
		{
			Drop,
			Click,
			Brush
		}

		

		enum CreateObjectsDestinationModeEnum
		{
			Auto,

			SeparateObjectsToRoot,
			SeparateObjectsToLayer,
			ToGroupOfObjects,
			
		}

		

		public abstract class WorkareaModeClassScene : WorkareaModeClass
		{
			protected WorkareaModeClassScene( SceneEditor documentWindow )
				: base( documentWindow )
			{
			}

			public new SceneEditor DocumentWindow
			{
				get { return (SceneEditor)base.DocumentWindow; }
			}

			protected virtual bool OnGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect ) { return false; }
			public delegate void GetObjectsToSelectByRectangleDelegate( WorkareaModeClass __0x12149, Rectangle __0x12150, ref bool __0x12151, ref List<object> __0x12152 );
			public event GetObjectsToSelectByRectangleDelegate GetObjectsToSelectByRectangle;
			internal bool PerformGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect )
			{
				var __0x11513 = OnGetObjectsToSelectByRectangle( rectangle, ref objectsToSelect );
				if( !__0x11513 )
					GetObjectsToSelectByRectangle?.Invoke( this, rectangle, ref __0x11513, ref objectsToSelect );
				return __0x11513;
			}

			protected virtual bool OnGetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context ) { return false; }
			public delegate void GetMouseOverObjectToSelectByClickDelegate( WorkareaModeClass __0x12153, GetMouseOverObjectToSelectByClickContext __0x12154 );
			public event GetMouseOverObjectToSelectByClickDelegate GetMouseOverObjectToSelectByClick;
			internal bool PerformGetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
			{
				var __0x11514 = OnGetMouseOverObjectToSelectByClick( context );
				if( !__0x11514 )
					GetMouseOverObjectToSelectByClick?.Invoke( this, context );
				return __0x11514;
			}

			protected virtual bool OnTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject ) { return false; }
			public delegate void TransformToolCreateObjectDelegate( WorkareaModeClass __0x12155, object __0x12156, ref bool __0x12157, ref TransformToolObject __0x12158 );
			public event TransformToolCreateObjectDelegate TransformToolCreateObject;
			internal bool PerformTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject )
			{
				var __0x11515 = OnTransformToolCreateObject( forObject, ref transformToolObject );
				if( !__0x11515 )
					TransformToolCreateObject?.Invoke( this, forObject, ref __0x11515, ref transformToolObject );
				return __0x11515;
			}

			protected virtual bool OnTransformToolModifyBegin() { return false; }
			public delegate void TransformToolModifyBeginDelegate( WorkareaModeClass __0x12159, ref bool __0x12160 );
			public event TransformToolModifyBeginDelegate TransformToolModifyBegin;
			internal bool PerformTransformToolModifyBegin()
			{
				var __0x11516 = OnTransformToolModifyBegin();
				if( !__0x11516 )
					TransformToolModifyBegin?.Invoke( this, ref __0x11516 );
				return __0x11516;
			}

			protected virtual bool OnTransformToolModifyCommit() { return false; }
			public delegate void TransformToolModifyCommitDelegate( WorkareaModeClass __0x12161, ref bool __0x12162 );
			public event TransformToolModifyCommitDelegate TransformToolModifyCommit;
			internal bool PerformTransformToolModifyCommit()
			{
				var __0x11517 = OnTransformToolModifyCommit();
				if( !__0x11517 )
					TransformToolModifyCommit?.Invoke( this, ref __0x11517 );
				return __0x11517;
			}

			protected virtual bool OnTransformToolModifyCancel() { return false; }
			public delegate void TransformToolModifyCancelDelegate( WorkareaModeClass __0x12163, ref bool __0x12164 );
			public event TransformToolModifyCancelDelegate TransformToolModifyCancel;
			internal bool PerformTransformToolModifyCancel()
			{
				var __0x11518 = OnTransformToolModifyCancel();
				if( !__0x11518 )
					TransformToolModifyCancel?.Invoke( this, ref __0x11518 );
				return __0x11518;
			}

			protected virtual bool OnTransformToolCloneAndSelectObjects() { return false; }
			public delegate void TransformToolCloneAndSelectObjectsDelegate( WorkareaModeClass __0x12165, ref bool __0x12166 );
			public event TransformToolCloneAndSelectObjectsDelegate TransformToolCloneAndSelectObjects;
			internal bool PerformTransformToolCloneAndSelectObjects()
			{
				var __0x11519 = OnTransformToolCloneAndSelectObjects();
				if( !__0x11519 )
					TransformToolCloneAndSelectObjects?.Invoke( this, ref __0x11519 );
				return __0x11519;
			}
		}

		

		public abstract class CanvasWidget
		{
			SceneEditor __0x11520;

			

			protected CanvasWidget( SceneEditor window )
			{
				this.__0x11520 = window;
			}

			public SceneEditor Window
			{
				get { return __0x11520; }
			}

			public abstract void OnUpdate( SceneEditor window, ref double screenPositionY );
		}

		

		public class GetMouseOverObjectToSelectByClickContext
		{
			public bool CheckOnlyObjectsWithEnabledSelectionByCursorFlag = true;

			public object ResultObject;
			public Vector3? ResultPosition;
			public Viewport.LastFrameScreenLabelItem ScreenLabelItem;
		}

		

		static SceneEditor()
		{
			EngineConfig.RegisterClassParameters( typeof( SceneEditor ) );
		}

		public SceneEditor()
		{
			__0x12148();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11521 = ObjectOfWindow as Scene;
			if( __0x11521 != null )
			{
				Scene = __0x11521;
				SceneNeedDispose = false;

				__0x11521.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;
			}
			else
				Log.Fatal( "scene == null" );

			__0x11481 = new TransformTool( ViewportControl );
			__0x11481.Mode = TransformTool.ModeEnum.PositionRotation;

			__0x11481.ModifyBegin += TransformToolModifyBegin;
			__0x11481.ModifyCommit += TransformToolModifyCommit;
			__0x11481.ModifyCancel += TransformToolModifyCancel;
			__0x11481.CloneAndSelectObjects += TransformToolCloneAndSelectObjects;

			ViewportControl.MouseEnter += __0x12130;
			ViewportControl.MouseLeave += __0x12132;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );

			Scene.RenderEvent += __0x12105;
		}

		protected override void OnDestroy()
		{
			if( Scene != null )
				Scene.RenderEvent -= __0x12105;

			if( __0x11481 != null )
			{
				__0x11481.ModifyBegin -= TransformToolModifyBegin;
				__0x11481.ModifyCommit -= TransformToolModifyCommit;
				__0x11481.ModifyCancel -= TransformToolModifyCancel;
				__0x11481.CloneAndSelectObjects -= TransformToolCloneAndSelectObjects;
			}

			__0x11510?.Dispose();

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			

			foreach( var __0x12043 in CanvasWidgetsToCreate )
			{
				try
				{
					var __0x11522 = (CanvasWidget)__0x12043.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this } );
					CanvasWidgets.Add( __0x11522 );
				}
				catch { }
			}
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;

			
			__0x11481.PerformKeyDown( e, ref handled );
			if( handled )
				return;

			
			if( e.Key == EKeys.Escape )
			{
				if( __0x11501 )
				{
					__0x12136( true );
					handled = true;
					return;
				}
			}

			
			if( ( e.Key == EKeys.Space || e.Key == EKeys.Escape ) )
			{
				if( ( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) ) || ( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) ) )
				{
					if( CreateObjectsMode == CreateObjectsModeEnum.Click )
						__0x12131();
					if( CreateObjectsMode == CreateObjectsModeEnum.Brush )
						__0x12134();
					EditorAPI.ResetSelectedObjectToCreate();
					handled = true;
					return;
				}

				
				
				
			}
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );

			__0x11481.PerformKeyUp( e, ref handled );
		}

		public bool StartObjectCreationMode( Metadata.TypeInfo type, Component obj )
		{
			var __0x11523 = type.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
			if( __0x11523.Length != 0 )
			{
				
				var __0x11524 = (ObjectCreationMode)__0x11523[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, obj } );
				ObjectCreationModeSet( __0x11524 );
				__0x11494 = null;
				__0x11495 = null;
				__0x11492 = false;
				return true;
			}

			return false;
		}

		public delegate void ViewportMouseDownAfterTransformToolDelegate( SceneEditor __0x12167, Viewport __0x12168, EMouseButtons __0x12169, ref bool __0x12170 );
		public static event ViewportMouseDownAfterTransformToolDelegate Viewport_MouseDown_AfterTransformTool;

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			
			if( viewport.UIContainer != null && viewport.UIContainer.PerformMouseDown( button ) )
			{
				handled = true;
				return;
			}


			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			
			__0x11481.PerformMouseDown( button, ref handled );
			if( handled )
				return;

			
			{
				bool __0x11525 = false;
				Viewport_MouseDown_AfterTransformTool?.Invoke( this, viewport, button, ref __0x11525 );
				if( __0x11525 )
				{
					handled = true;
					return;
				}
			}

			
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && button == EMouseButtons.Left && __0x11492 && __0x11495 != null )
			{
				
				
				
				
				
				
				{
					var __0x11526 = __0x11494.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
					if( __0x11526.Length != 0 )
					{
						
						var __0x11527 = (ObjectCreationMode)__0x11526[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, __0x11495 } );
						ObjectCreationModeSet( __0x11527 );
						__0x11494 = null;
						__0x11495 = null;
						__0x11492 = false;
						handled = true;
						return;
					}
				}

				
				if( __0x12125() )
					__0x12120();
				else
					__0x12122();
				__0x11492 = false;

				
				if( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick )
				{
					if( __0x12129() )
						__0x11492 = true;
				}

				handled = true;
				return;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x12135( viewport ) )
				{
					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Left && AllowSelectObjects )
			{
				__0x11477 = true;
				__0x11478 = false;
				__0x11479 = viewport.MousePosition;
				__0x11480 = __0x11479;

				handled = true;
				return;
			}

			
			handled = true;
		}

		public delegate void Viewport_MouseUp_AfterTransformToolDelegate( SceneEditor __0x12171, Viewport __0x12172, EMouseButtons __0x12173, ref bool __0x12174, ref bool __0x12175 );
		public static event Viewport_MouseUp_AfterTransformToolDelegate Viewport_MouseUp_AfterTransformTool;

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			
			base.Viewport_MouseUp( viewport, button, ref handled );
			
			if( handled )
				return;

			
			
			
			

			
			__0x11481.PerformMouseUp( button, ref handled );

			Viewport_MouseUp_AfterTransformTool?.Invoke( this, viewport, button, ref handled, ref __0x11509 );

			
			if( AllowSelectObjects && __0x11495 == null && !__0x11491 && !__0x11492 && !__0x11493 && !__0x11509 && !handled )
			{
				var __0x11528 = new ESet<object>( SelectedObjectsSet );

				
				if( button == EMouseButtons.Left )
				{
					
					bool __0x11529 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x11529 )
						__0x11528.Clear();

					if( __0x11477 && __0x11478 )
					{
						foreach( var __0x12044 in __0x12106() )
							__0x11528.AddWithCheckAlreadyContained( __0x12044 );
						handled = true;
					}

					
					
					
				}

				
				if( button == EMouseButtons.Left && !handled && !CameraRotating )
				{
					var __0x11530 = GetMouseOverObjectToSelectByClick();
					if( __0x11530 != null )
					{
						__0x11528.AddWithCheckAlreadyContained( __0x11530 );
						handled = true;
					}
				}

				
				SelectObjects( __0x11528 );
			}

			if( button == EMouseButtons.Left && __0x11477 )
			{
				__0x11477 = false;
				__0x11478 = false;
			}

			
			
			if( button == EMouseButtons.Left )
			{
				if( __0x12136( false ) )
					handled = true;
			}

			
			if( !handled && button == EMouseButtons.Right )
				__0x12111();

			if( button == EMouseButtons.Left )
				__0x11509 = false;
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;

			__0x11481.PerformMouseDoubleClick( button, ref handled );
			if( handled )
				return;

			
			
			if( button == EMouseButtons.Left && AllowSelectObjects && __0x11495 == null && !__0x11491 && !__0x11492 && !__0x11493 )
			{
				var __0x11531 = new ESet<object>( SelectedObjectsSet );

				var __0x11532 = GetMouseOverObjectToSelectByClick();
				if( __0x11532 != null && IsObjectSelected( __0x11532 ) )
				{
					var __0x11533 = SelectByDoubleClick( __0x11532 );
					if( __0x11533.Length != 0 )
					{
						if( !ModifierKeys.HasFlag( Keys.Shift ) )
						{
							__0x11531.Clear();
							__0x11531.Add( __0x11532 );
						}
						__0x11531.AddRangeWithCheckAlreadyContained( __0x11533 );

						
						SelectObjects( __0x11531 );

						handled = true;
						__0x11509 = true;
					}
				}
			}
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			__0x11483 = true;
			__0x11484 = mouse;

			
			if( __0x11477 && AllowSelectObjects )
			{
				Vector2 __0x11534 = ( viewport.MousePosition - __0x11479 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x11534.X ) >= 3 || Math.Abs( __0x11534.Y ) >= 3 )
					__0x11478 = true;

				__0x11480 = viewport.MousePosition;
			}

			
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && __0x11492 )
			{
				
				
				

				__0x12121();
				
				

				__0x12123( null );
				
				

			}
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );

			__0x12141();
			__0x12142();
			__0x12143();

			__0x12108();
			__0x12126();

			if( __0x11483 )
			{
				__0x11481.PerformMouseMove( __0x11484 );
				__0x11483 = false;
			}
			__0x11481.PerformTick( delta );

			__0x12138( viewport, delta );

			__0x12145();
		}

		public void GetMouseOverObjectInSpaceToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x11535 = ViewportControl.Viewport;
			var __0x11536 = __0x11535.MousePosition;

			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11536 ) )
				return;
			if( __0x11535.MouseRelativeMode )
				return;

			
			foreach( var __0x12045 in __0x11535.LastFrameScreenLabels.GetReverse() )
			{
				var __0x11537 = __0x12045.Object;
				var __0x11538 = __0x11537 as ObjectInSpace;

				if( __0x11538 != null && ( !context.CheckOnlyObjectsWithEnabledSelectionByCursorFlag || __0x11538.EnabledSelectionByCursor ) || __0x11538 == null || __0x12045.AlwaysVisible )
				{
					bool __0x11539 = false;

					switch( __0x12045.Shape )
					{
					case Viewport.LastFrameScreenLabelItem.ShapeEnum.Ellipse:
						__0x11539 = MathAlgorithms.CheckPointInsideEllipse( __0x12045.ScreenRectangle, __0x11536 );
						break;
					case Viewport.LastFrameScreenLabelItem.ShapeEnum.Rectangle:
						__0x11539 = __0x12045.ScreenRectangle.Contains( __0x11536 );
						break;
					}

					if( __0x11539 )
					{
						context.ResultObject = __0x11537;
						context.ScreenLabelItem = __0x12045;
						return;
					}

				}
			}

			
			ObjectInSpace.CheckSelectionByRayContext __0x11540 = new ObjectInSpace.CheckSelectionByRayContext();
			__0x11540.viewport = __0x11535;
			__0x11540.screenPosition = __0x11536;
			__0x11540.ray = __0x11535.CameraSettings.GetRayByScreenCoordinates( __0x11540.screenPosition );

			var __0x11541 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x11540.ray );
			Scene.GetObjectsInSpace( __0x11541 );
			var __0x11542 = __0x11541.Result;

			ObjectInSpace __0x11543 = null;
			double __0x11544 = 0;

			

			foreach( var __0x12046 in __0x11542 )
			{
				var __0x11545 = __0x12046.Object;
				

				if( !context.CheckOnlyObjectsWithEnabledSelectionByCursorFlag || __0x11545.EnabledSelectionByCursor )
				
				{
					
					
					{
					}

					
					__0x11540.thisObjectWasChecked = false;
					__0x11540.thisObjectResultRayScale = -10000000;

					__0x11545.CheckSelectionByRay( __0x11540 );

					if( __0x11540.thisObjectWasChecked && __0x11540.thisObjectResultRayScale >= 0 )
					{
						var __0x11546 = __0x11540.thisObjectResultRayScale;

						
						
						
						
						
						
						
						
						
						

						bool __0x11547;
						if( __0x11543 == null )
							__0x11547 = true;
						else
						{
							
							if( Math.Abs( __0x11544 - __0x11546 ) < 0.0001 )
							
							{
								var __0x11548 = __0x11543;
								var __0x11549 = __0x11545;
								bool __0x11550 = __0x11548.GetAllParents( false ).Contains( __0x11549 );
								__0x11547 = __0x11550;
							}
							else
								__0x11547 = __0x11546 < __0x11544;
						}

						if( __0x11547 )
						{
							__0x11543 = __0x11545;
							__0x11544 = __0x11546;
						}
					}
				}
			}

			context.ResultObject = __0x11543;
			context.ResultPosition = __0x11540.ray.GetPointOnRay( __0x11544 );
		}

		public virtual void GetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x11551 = ViewportControl.Viewport;
			var __0x11552 = __0x11551.MousePosition;

			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11552 ) )
				return;
			if( __0x11551.MouseRelativeMode )
				return;

			if( WorkareaMode != null && WorkareaMode.PerformGetMouseOverObjectToSelectByClick( context ) )
				return;
			GetMouseOverObjectInSpaceToSelectByClick( context );
		}

		public object GetMouseOverObjectToSelectByClick( out GetMouseOverObjectToSelectByClickContext context )
		{
			context = new GetMouseOverObjectToSelectByClickContext();
			GetMouseOverObjectToSelectByClick( context );
			return context.ResultObject;
		}

		public object GetMouseOverObjectToSelectByClick()
		{
			GetMouseOverObjectToSelectByClick( out var context );
			return context.ResultObject;
		}

		void __0x12104( Viewport __0x12176, ref double __0x12177 )
		{
			var __0x11553 = __0x12176.RenderingContext;
			var __0x11554 = __0x11553.ObjectInSpaceRenderingContext;

			var __0x11555 = ProjectSettings.Get;
			var __0x11556 = __0x11555.General.ScreenLabelMaxSize.Value;
			Vector2 __0x11557 = new Vector2( __0x11556, __0x11556 );
			Vector2 __0x11558 = __0x11557 / __0x12176.SizeInPixels.ToVector2();


			var __0x11559 = new List<Component>();

			{
				Camera __0x11560 = Scene.Mode.Value == Scene.ModeEnum._3D ? Scene.CameraEditor : Scene.CameraEditor2D;

				
				foreach( var __0x12047 in Scene.GetComponents( checkChildren: true, depthFirstSearch: true ) )
				{
					var __0x11561 = __0x12047.ScreenLabel.Value;
					if( __0x11561 != ScreenLabelEnum.NeverDisplay )
					{
						var __0x11562 = __0x12047.GetScreenLabelInfo();

						
						if( __0x11560 != null && __0x12047 == __0x11560 )
							__0x11562.DisplayInCorner = true;

						if( __0x11561 == ScreenLabelEnum.AlwaysDisplay )
							__0x11562.DisplayInCorner = true;

						if( __0x11562.DisplayInCorner )
							__0x11559.Add( __0x12047 );
					}
				}
			}

			

			for( int __0x11563 = __0x11559.Count - 1; __0x11563 >= 0; __0x11563-- )
			{
				var __0x11564 = __0x11559[ __0x11563 ];

				

				

				ColorValue __0x11565;
				if( __0x11554.selectedObjects.Contains( __0x11564 ) )
					__0x11565 = ProjectSettings.Get.General.SelectedColor;
				else if( __0x11554.canSelectObjects.Contains( __0x11564 ) )
					__0x11565 = ProjectSettings.Get.General.CanSelectColor;
				else
					__0x11565 = ProjectSettings.Get.General.ScreenLabelColor;

				var __0x11566 = new Viewport.LastFrameScreenLabelItem();
				__0x11566.Object = __0x11564;
				__0x11566.DistanceToCamera = -1;
				
				__0x11566.Color = __0x11565;
				if( !__0x11564.EnabledInHierarchy )
					__0x11566.Color.Alpha *= 0.5f;

				__0x11566.AlwaysVisible = true;
				__0x12176.LastFrameScreenLabels.AddLast( __0x11566 );
				__0x12176.LastFrameScreenLabelByObjectInSpace[ __0x11564 ] = __0x11566;

				
			}

			if( __0x11559.Count != 0 )
				__0x12177 = __0x11558.Y * 1.25;
		}

		private void __0x12105( Scene __0x12178, Viewport __0x12179 )
		{
			double __0x11567 = 0;

			
			if( Scene.GetDisplayDevelopmentDataInThisApplication() && Scene.DisplayLabels && __0x12179.AllowRenderScreenLabels && __0x12179.CanvasRenderer != null )
				__0x12104( __0x12179, ref __0x11567 );

			foreach( var __0x12048 in CanvasWidgets )
				__0x12048.OnUpdate( this, ref __0x11567 );
		}

		protected override void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref ObjectInSpace.RenderingContext context )
		{
			base.Viewport_UpdateGetObjectInSceneRenderingContext( viewport, ref context );

			

			context = new ObjectInSpace.RenderingContext( viewport );

			if( !__0x11491 && !__0x11492 && !__0x11493 && ObjectCreationMode == null )
			{
				
				if( DisplaySelectedObjects )
				{
					foreach( var __0x12049 in SelectedObjectsSet )
						context.selectedObjects.AddWithCheckAlreadyContained( __0x12049 );
				}

				
				if( AllowSelectObjects )
				{
					foreach( var __0x12050 in __0x12106() )
					{
						if( !context.selectedObjects.Contains( __0x12050 ) )
							context.canSelectObjects.AddWithCheckAlreadyContained( __0x12050 );
					}
				}

				
				

				
				{
					bool __0x11568 = false;
					if( __0x11478 )
						__0x11568 = true;
					if( __0x11481 != null && __0x11481.IsMouseOverAxisToActivation() )
						__0x11568 = true;
					if( CameraRotating )
						__0x11568 = true;
					if( __0x11491 || __0x11492 || __0x11493 )
						__0x11568 = true;
					if( !AllowSelectObjects )
						__0x11568 = true;

					

					if( !__0x11568 )
					{
						var __0x11569 = GetMouseOverObjectToSelectByClick();
						if( __0x11569 != null )
						{
							if( !context.selectedObjects.Contains( __0x11569 ) )
								context.canSelectObjects.AddWithCheckAlreadyContained( __0x11569 );
						}
					}
				}
			}
			else
			{
				

				if( __0x11500 != null )
					context.canSelectObjects.Add( __0x11500 );

				if( ObjectCreationMode != null )
					context.objectToCreate = ObjectCreationMode.CreatingObject;
				else
					context.objectToCreate = __0x11495;
			}

			
			if( __0x11491 && __0x11495 != null && __0x11495 is LensFlares )
			{
				var __0x11570 = GetMouseOverObjectToSelectByClick() as Component;

				if( __0x11570 != null && __0x11570 is Light )
					context.canSelectObjects.AddWithCheckAlreadyContained( __0x11570 );
			}

		}

		public delegate void Viewport_UpdateBeforeOutputEventDelegate( SceneEditor __0x12180, Viewport __0x12181 );
		public static event Viewport_UpdateBeforeOutputEventDelegate Viewport_UpdateBeforeOutputEvent;

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			var __0x11571 = viewport.CanvasRenderer;

			
			viewport.UIContainer.PerformRenderUI( __0x11571 );

			
			if( __0x11477 && __0x11478 && AllowSelectObjects )
			{
				Rectangle __0x11572 = new Rectangle( __0x11479 );
				__0x11572.Add( viewport.MousePosition );

				Vector2I __0x11573 = viewport.SizeInPixels;
				Vector2 __0x11574 = new Vector2( 1.0f / (float)__0x11573.X, 1.0f / (float)__0x11573.Y );

				__0x11571.AddRectangle( __0x11572 + __0x11574, new ColorValue( 0, 0, 0, .5f ) );
				__0x11571.AddRectangle( __0x11572, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			

			if( !__0x11478 )
				__0x11481.PerformRender();

			__0x12140( viewport );

			Viewport_UpdateBeforeOutputEvent?.Invoke( this, viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput2( viewport );

			if( !__0x11478 )
				__0x11481.PerformOnRenderUI();
		}

		public Rectangle SelectByRectangle_GetRectangle()
		{
			Rectangle __0x11575 = new Rectangle( __0x11479 );
			__0x11575.Add( __0x11480 );
			return __0x11575;
		}

		ESet<object> __0x12106()
		{
			var __0x11576 = new ESet<object>();
			if( __0x11478 )
			{
				foreach( var __0x12051 in GetObjectsToSelectByRectangle( SelectByRectangle_GetRectangle() ) )
					__0x11576.Add( __0x12051 );
			}
			return __0x11576;
		}

		public List<object> GetObjectsInSpaceToSelectByRectangle( Rectangle rectangle )
		{
			var __0x11577 = new ESet<Component>();

			
			foreach( var __0x12052 in ViewportControl.Viewport.LastFrameScreenLabels.GetReverse() )
			{
				var __0x11578 = __0x12052.Object;
				var __0x11579 = __0x12052.Object as ObjectInSpace;
				if( __0x11579 != null && __0x11579.EnabledSelectionByCursor || __0x11579 == null || __0x12052.AlwaysVisible )
				{
					if( rectangle.Contains( __0x12052.ScreenRectangle.GetCenter() ) )
						__0x11577.AddWithCheckAlreadyContained( __0x11578 );
				}
			}

			foreach( var __0x12053 in Scene.GetComponents( false, true, true ) )
			{
				var __0x11580 = __0x12053 as ObjectInSpace;
				if( __0x11580 != null && __0x11580.EnabledSelectionByCursor )
				{
					var __0x11581 = __0x11580.Transform.Value;
					var __0x11582 = __0x11581.Position;

					if( ViewportControl.Viewport.CameraSettings.ProjectToScreenCoordinates( __0x11582, out Vector2 screenPosition ) )
					{
						if( rectangle.Contains( screenPosition ) )
							__0x11577.AddWithCheckAlreadyContained( __0x11580 );
					}
				}
			}

			
			
			

			var __0x11583 = new List<object>();
			foreach( var __0x12054 in __0x11577 )
			{
				bool __0x11584 = false;
				foreach( var __0x12055 in __0x12054.GetAllParents( true ) )
				{
					if( !IsObjectSelected( __0x12055 ) )
					{
						var __0x11585 = __0x12055 as ObjectInSpace;
						if( __0x11585 != null && __0x11577.Contains( __0x11585 ) )
						{
							__0x11584 = true;
							break;
						}
					}
				}

				if( !__0x11584 )
					__0x11583.Add( __0x12054 );
			}

			return __0x11583;

			
			
			
		}

		protected virtual List<object> GetObjectsToSelectByRectangle( Rectangle rectangle )
		{
			var __0x11586 = new List<object>();
			if( WorkareaMode != null && WorkareaMode.PerformGetObjectsToSelectByRectangle( rectangle, ref __0x11586 ) )
				return __0x11586;
			return GetObjectsInSpaceToSelectByRectangle( rectangle );
		}

		TransformToolObject __0x12107( object __0x12182 )
		{
			foreach( var __0x12056 in __0x11481.Objects )
				if( ReferenceEquals( __0x12056.ControlledObject, __0x12182 ) )
					return __0x12056;
			return null;
		}

		void __0x12108()
		{
			var __0x11587 = new ESet<object>();
			foreach( var __0x12057 in __0x11481.Objects )
				__0x11587.AddWithCheckAlreadyContained( __0x12057.ControlledObject );

			
			foreach( var __0x12058 in __0x11587 )
			{
				bool __0x11588 = false;

				
				
				var __0x11589 = __0x12058 as ObjectInSpace;
				if( __0x11589 != null && ( __0x11589.Parent == null || __0x11589.Disposed ) )
					__0x11588 = true;

				
				if( !SelectedObjectsSet.Contains( __0x12058 ) || __0x11588 )
				{
					var __0x11590 = __0x12107( __0x12058 );
					if( __0x11590 != null )
						__0x11481.Objects.Remove( __0x11590 );
				}
			}

			
			foreach( var __0x12059 in SelectedObjectsSet )
			{
				var __0x11591 = __0x12107( __0x12059 );
				if( __0x11591 == null )
				{
					__0x11591 = TransformToolCreateObject( __0x12059 );
					if( __0x11591 != null )
						__0x11481.Objects.Add( __0x11591 );
				}
			}
		}

		protected virtual void TransformToolModifyBegin( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyBegin() )
				return;
		}

		protected virtual void TransformToolModifyCommit( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyCommit() )
				return;

			if( !__0x11482 )
			{
				

				var __0x11592 = new List<UndoActionPropertiesChange.Item>();

				foreach( var __0x12060 in __0x11481.Objects )
				{
					var __0x11593 = __0x12060 as TransformToolObjectObjectInSpace;
					if( __0x11593 != null )
					{
						var __0x11594 = __0x11593.ObjectToTransform;
						if( __0x11594 != null )
						{
							var __0x11595 = __0x11594.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
							if( __0x11595 != null )
							{
								var __0x11596 = new UndoActionPropertiesChange.Item( __0x11594, __0x11595, __0x11593.BeforeModifyTransform, null );
								__0x11592.Add( __0x11596 );
							}
						}
					}
				}

				
				if( __0x11592.Count != 0 )
				{
					var __0x11597 = new UndoActionPropertiesChange( __0x11592.ToArray() );
					Document.UndoSystem.CommitAction( __0x11597 );
					Document.Modified = true;
				}
			}
			else
			{
				var __0x11598 = new List<Component>();
				foreach( var __0x12061 in __0x11481.Objects )
				{
					var __0x11599 = __0x12061 as TransformToolObjectObjectInSpace;
					if( __0x11599 != null )
						__0x11598.Add( __0x11599.SelectedObject );
				}

				
				var __0x11600 = new UndoActionComponentCreateDelete( Document, __0x11598, true );
				Document.UndoSystem.CommitAction( __0x11600 );
				Document.Modified = true;

				
				SelectObjects( SelectedObjects, forceUpdate: true );
			}

			__0x11482 = false;
		}

		protected virtual void TransformToolModifyCancel( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyCancel() )
				return;

			if( __0x11482 )
			{
				ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();

				

				var __0x11601 = new List<Component>();
				foreach( var __0x12062 in __0x11481.Objects )
				{
					var __0x11602 = __0x12062 as TransformToolObjectObjectInSpace;
					if( __0x11602 != null )
						__0x11601.Add( __0x11602.SelectedObject );
				}

				
				SelectObjects( null );

				
				foreach( var __0x12063 in __0x11601 )
					__0x12063.RemoveFromParent( true );

				Scene.HierarchyController?.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}

			__0x11482 = false;
		}

		protected virtual void TransformToolCloneAndSelectObjects()
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolCloneAndSelectObjects() )
				return;

			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();

			var __0x11603 = new List<Component>();
			foreach( var __0x12064 in __0x11481.Objects )
			{
				var __0x11604 = __0x12064 as TransformToolObjectObjectInSpace;
				if( __0x11604 != null )
					__0x11603.Add( __0x11604.SelectedObject );
			}

			
			__0x11603 = ComponentUtility.GetComponentsWithoutChildren( __0x11603 );

			var __0x11605 = new List<Component>();
			foreach( var __0x12065 in __0x11603 )
			{
				var __0x11606 = EditorUtility.CloneComponent( __0x12065 );
				__0x11605.Add( __0x11606 );
				AddClonedSelectableChildrenToList( __0x11605, __0x11606 );
			}

			Scene.HierarchyController?.ProcessDelayedOperations();
			ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();

			
			SelectObjects( __0x11605.Cast<object>().ToArray(), updateSettingsWindowSelectObjects: false );

			
			EditorUtility.ShowScreenNotificationObjectsCloned( __0x11605.Count );

			__0x11482 = true;

			__0x12108();
			__0x11481.PerformUpdateInitialObjectsTransform();
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			switch( context.Action.Name )
			{

			case "Select":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.Mode == TransformTool.ModeEnum.None;
				break;

			case "Move & Rotate":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.Mode == TransformTool.ModeEnum.PositionRotation;
				break;

			case "Move":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.Mode == TransformTool.ModeEnum.Position;
				break;

			case "Rotate":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.Mode == TransformTool.ModeEnum.Rotation;
				break;

			case "Scale":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.Mode == TransformTool.ModeEnum.Scale;
				break;

			case "Transform Using Local Coordinates":
				context.Enabled = true;
				context.Checked = __0x11481 != null && __0x11481.CoordinateSystemMode == TransformTool.CoordinateSystemModeEnum.Local;
				break;

			

			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
			case "Snap Z":
				if( CanSnap( out _ ) )
					context.Enabled = true;
				break;

			case "Focus Camera On Selected Object":
				if( CanFocusCameraOnSelectedObject( out _ ) )
					context.Enabled = true;
				break;

			case "Create Objects By Drag & Drop":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Drop;
				break;

			case "Create Objects By Click":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Click;
				break;

			case "Create Objects By Brush":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Brush;
				break;

			case "Create Objects Brush Radius":
			case "Create Objects Brush Strength":
			case "Create Objects Brush Hardness":
				context.Enabled = CreateObjectsMode == CreateObjectsModeEnum.Brush;
				break;

			case "Create Objects Destination":
				{
					if( __0x11485.Count != 0 )
					{
						
						context.Enabled = true;

						
						var __0x11607 = new List<(string, Image)>();
						foreach( var __0x12066 in __0x11485 )
							__0x11607.Add( (__0x12066.Text, null) );
						context.Action.ListBox.Items = __0x11607;

						
						var __0x11608 = __0x11485.FindIndex( __0x12183 => __0x12183.Mode == __0x11487.Mode && __0x12183.Obj == __0x11487.Obj );
						if( __0x11608 == -1 )
							__0x11608 = 0;
						context.Action.ListBox.SelectIndex = __0x11608;
					}
				}
				break;

			case "Terrain Geometry Raise":
			case "Terrain Geometry Lower":
			case "Terrain Geometry Smooth":
			case "Terrain Geometry Flatten":
				context.Enabled = true;
				context.Checked = WorkareaModeName == context.Action.Name;
				break;

			case "Terrain Shape Circle":
				context.Enabled = true;
				context.Checked = TerrainToolShape == TerrainEditingMode.TerrainEditorToolShape.Circle;
				break;

			case "Terrain Shape Square":
				context.Enabled = true;
				context.Checked = TerrainToolShape == TerrainEditingMode.TerrainEditorToolShape.Square;
				break;

			case "Terrain Tool Radius":
			case "Terrain Tool Strength":
			case "Terrain Tool Hardness":
				context.Enabled = true;
				break;

			case "Terrain Paint Paint":
			case "Terrain Paint Clear":
			case "Terrain Paint Smooth":
			case "Terrain Paint Flatten":
				context.Enabled = true;
				context.Checked = WorkareaModeName == context.Action.Name;
				break;

			case "Terrain Paint Layers":
				{
					if( __0x11488.Count != 0 )
						context.Enabled = true;

					
					var __0x11609 = new List<(string, Image)>();
					foreach( var __0x12067 in __0x11488 )
						__0x11609.Add( (__0x12067.Text, PreviewImagesManager.GetImageForPaintLayer( __0x12067.Obj )) );
					context.Action.ListBox.Items = __0x11609;

					
					var __0x11610 = __0x11488.FindIndex( __0x12184 => __0x12184.Obj == __0x11490 );
					if( __0x11610 == -1 )
						__0x11610 = 0;
					context.Action.ListBox.SelectIndex = __0x11610;
				}
				break;

			case "Terrain Paint Add Layer":
				context.Enabled = true;
				break;
			}
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			switch( context.Action.Name )
			{
			case "Select":
				if( __0x11481 != null )
				{
					if( __0x11481.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11481.Mode = TransformTool.ModeEnum.None;
				}
				break;

			case "Move & Rotate":
				if( __0x11481 != null )
				{
					if( __0x11481.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11481.Mode = TransformTool.ModeEnum.PositionRotation;
				}
				break;

			case "Move":
				if( __0x11481 != null )
				{
					if( __0x11481.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11481.Mode = TransformTool.ModeEnum.Position;
				}
				break;

			case "Rotate":
				if( __0x11481 != null )
				{
					if( __0x11481.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11481.Mode = TransformTool.ModeEnum.Rotation;
				}
				break;

			case "Scale":
				if( __0x11481 != null )
				{
					if( __0x11481.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11481.Mode = TransformTool.ModeEnum.Scale;
				}
				break;

			case "Transform Using Local Coordinates":
				if( __0x11481 != null )
					__0x11481.CoordinateSystemMode = __0x11481.CoordinateSystemMode == TransformTool.CoordinateSystemModeEnum.Local ? TransformTool.CoordinateSystemModeEnum.World : TransformTool.CoordinateSystemModeEnum.Local;
				break;

			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
			case "Snap Z":
				Snap( context.Action );
				break;

			case "Focus Camera On Selected Object":
				if( CanFocusCameraOnSelectedObject( out var objects ) )
					FocusCameraOnSelectedObject( objects );
				break;

			case "Create Objects By Drag & Drop":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Drop );
				break;

			case "Create Objects By Click":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Click );
				break;

			case "Create Objects By Brush":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Brush );
				break;

			case "Create Objects Brush Radius":
				CreateObjectsBrushRadius = context.Action.Slider.Value;
				break;

			case "Create Objects Brush Strength":
				CreateObjectsBrushStrength = context.Action.Slider.Value;
				break;

			case "Create Objects Brush Hardness":
				CreateObjectsBrushHardness = context.Action.Slider.Value;
				break;

			case "Create Objects Destination":
				if( context.Action.ListBox.LastSelectedIndexChangedByUser )
				{
					var __0x11611 = context.Action.ListBox.SelectedIndex;
					if( __0x11611 >= 0 && __0x11611 < __0x11485.Count )
					{
						var __0x11612 = __0x11485[ __0x11611 ];
						__0x11487 = (__0x11612.Mode, __0x11612.Obj);
					}
					else
						__0x11487 = (CreateObjectsDestinationModeEnum.Auto, null);
				}
				break;

			case "Terrain Geometry Raise":
			case "Terrain Geometry Lower":
			case "Terrain Geometry Smooth":
			case "Terrain Geometry Flatten":
				if( WorkareaModeName != context.Action.Name )
				{
					
					ChangeCreateObjectsMode( CreateObjectsModeEnum.Drop );

					var __0x11613 = context.Action.Name.Substring( "Terrain".Length ).Replace( " ", "" );
					var __0x11614 = (TerrainEditingMode.TerrainEditorMode)Enum.Parse( typeof( TerrainEditingMode.TerrainEditorMode ), __0x11613 );

					WorkareaModeSet( context.Action.Name, new TerrainEditingMode( this, __0x11614 ) );
					
					
					

					if( __0x11481.Mode != TransformTool.ModeEnum.Undefined )
						transformToolModeRestore = __0x11481.Mode;
					__0x11481.Mode = TransformTool.ModeEnum.Undefined;
				}
				else
					ResetWorkareaMode();
				break;

			case "Terrain Shape Circle":
				TerrainToolShape = TerrainEditingMode.TerrainEditorToolShape.Circle;
				break;

			case "Terrain Shape Square":
				TerrainToolShape = TerrainEditingMode.TerrainEditorToolShape.Square;
				break;

			case "Terrain Tool Radius":
				TerrainToolRadius = context.Action.Slider.Value;
				break;

			case "Terrain Tool Strength":
				TerrainToolStrength = context.Action.Slider.Value;
				break;

			case "Terrain Tool Hardness":
				TerrainToolHardness = context.Action.Slider.Value;
				break;

			case "Terrain Paint Paint":
			case "Terrain Paint Clear":
			case "Terrain Paint Smooth":
			case "Terrain Paint Flatten":
				if( WorkareaModeName != context.Action.Name )
				{
					
					ChangeCreateObjectsMode( CreateObjectsModeEnum.Drop );

					var __0x11615 = context.Action.Name.Substring( "Terrain".Length ).Replace( " ", "" );
					var __0x11616 = (TerrainEditingMode.TerrainEditorMode)Enum.Parse( typeof( TerrainEditingMode.TerrainEditorMode ), __0x11615 );

					WorkareaModeSet( context.Action.Name, new TerrainEditingMode( this, __0x11616 ) );
					
					
					

					if( __0x11481.Mode != TransformTool.ModeEnum.Undefined )
						transformToolModeRestore = __0x11481.Mode;
					__0x11481.Mode = TransformTool.ModeEnum.Undefined;
				}
				else
					ResetWorkareaMode();
				break;

			case "Terrain Paint Layers":
				
				if( context.Action.ListBox.LastSelectedIndexChangedByUser )
				{
					var __0x11617 = context.Action.ListBox.SelectedIndex;
					if( __0x11617 >= 0 && __0x11617 < __0x11488.Count )
					{
						var __0x11618 = __0x11488[ __0x11617 ].Obj;
						SelectObjects( new object[] { __0x11618 } );
					}

					
					
					
					
					
				}
				break;

			case "Terrain Paint Add Layer":
				{
					var __0x11619 = EditorForm.Instance.WorkspaceController.SelectedDocumentWindow?.ObjectOfWindow as Scene;

					var __0x11620 = (Component)__0x11619?.GetComponent<Terrain>( true );

					
					
					if( __0x11620 != null )
					{
						var __0x11621 = new List<Component>();

						
						{
							var __0x11622 = __0x11620.CreateComponent<PaintLayer>( enabled: false );
							__0x11622.Name = EditorUtility.GetUniqueFriendlyName( __0x11622 );
							__0x11622.Enabled = true;

							__0x11621.Add( __0x11622 );
						}

						Focus();

						
						var __0x11623 = new UndoActionComponentCreateDelete( Document, __0x11621, true );
						Document.CommitUndoAction( __0x11623 );
						SelectObjects( __0x11621.ToArray() );
					}
				}
				break;
			}
		}

		public override void EditorActionClick2( EditorAction.ClickContext context )
		{
			base.EditorActionClick2( context );

			switch( context.Action.Name )
			{
			case "Terrain Paint Layers":
				
				{
					var __0x11624 = context.Action.ListBox.SelectedIndex;
					if( __0x11624 >= 0 && __0x11624 < __0x11488.Count )
					{
						var __0x11625 = __0x11488[ __0x11624 ].Obj;
						SelectObjects( new object[] { __0x11625 } );
						__0x12111();
					}
				}
				break;
			}
		}

		
		private void __0x12109( object __0x12185, KeyEventArgs __0x12186 )
		{
			
			
			
		}

		string __0x12110( string __0x12187 )
		{
			return EditorContextMenuWinForms.Translate( __0x12187 );
		}

		void __0x12111()
		{
			var __0x11626 = new List<KryptonContextMenuItemBase>();

			Component __0x11627 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x11627 = SelectedObjects[ 0 ] as Component;
			}

			
			if( __0x11481 != null )
			{
				EditorContextMenuWinForms.AddTransformToolToMenu( __0x11626, __0x11481 );
				__0x11626.Add( new KryptonContextMenuSeparator() );
			}

			Vector2 __0x11628 = new Vector2( .5, .5 );
			if( ViewportControl != null && ViewportControl.Viewport != null )
				__0x11628 = ViewportControl.Viewport.MousePosition;

			
			{
				var __0x11629 = new KryptonContextMenuItem( __0x12110( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x12188, EventArgs __0x12189 )
				 {
					 EditorAPI.OpenDocumentWindowForObject( Document, __0x11627 );
				 } );
				__0x11629.Enabled = __0x11627 != null && EditorAPI.IsDocumentObjectSupport( __0x11627 );
				__0x11626.Add( __0x11629 );
			}

			
			{
				var __0x11630 = new KryptonContextMenuItem( __0x12110( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12190, EventArgs __0x12191 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x11626.Add( __0x11630 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x11631 = new KryptonContextMenuItem( __0x12110( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12192, EventArgs __0x12193 )
				{
					var __0x11632 = __0x11627 ?? ObjectOfWindow;
					bool __0x11633 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x11632, __0x11633 );
				} );
				__0x11631.Enabled = __0x11627 != null || SelectedObjects.Length == 0;
				__0x11626.Add( __0x11631 );
			}

			__0x11626.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x11626, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x12194 )
				{
					TryNewObject( __0x11628, __0x12194 );
				} );

				
				

				
				
				
				
				
				
			}

			
			__0x11626.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x11634 = new KryptonContextMenuItem( __0x12110( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x12195, EventArgs __0x12196 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x11634.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x11634.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x11626.Add( __0x11634 );
			}

			
			{
				var __0x11635 = new KryptonContextMenuItem( __0x12110( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x12197, EventArgs __0x12198 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x11635.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x11635.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x11626.Add( __0x11635 );
			}

			
			{
				var __0x11636 = new KryptonContextMenuItem( __0x12110( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x12199, EventArgs __0x12200 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x11636.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x11636.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x11626.Add( __0x11636 );
			}

			
			{
				var __0x11637 = new KryptonContextMenuItem( __0x12110( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x12201, EventArgs __0x12202 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x11637.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x11637.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x11626.Add( __0x11637 );
			}

			
			{
				var __0x11638 = new KryptonContextMenuItem( __0x12110( "Export to File" ), null, delegate ( object __0x12203, EventArgs __0x12204 )
				{
					EditorUtility.ExportComponentToFile( __0x11627 );
				} );
				__0x11638.Enabled = __0x11627 != null;
				__0x11626.Add( __0x11638 );
			}

			
			__0x11626.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x11639 = new KryptonContextMenuItem( __0x12110( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x12205, EventArgs __0x12206 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x11639.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x11626.Add( __0x11639 );
			}

			
			{
				var __0x11640 = new KryptonContextMenuItem( __0x12110( "Rename" ), null, delegate ( object __0x12207, EventArgs __0x12208 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x11640.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x11640.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x11626.Add( __0x11640 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x11626 );

			EditorContextMenuWinForms.Show( __0x11626, this );
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x12068 in SelectedObjects )
			{
				var __0x11641 = __0x12068 as Component;
				if( __0x11641 != null )
					parentsForNewObjects.Add( __0x11641 );
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( Scene );
			return true;
		}

		public void TryNewObject( Vector2 mouse, Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out var parentsForNewObjects ) )
				return;

			
			

			

			var __0x11642 = new NewObjectWindow.CreationDataClass();
			__0x11642.initDocumentWindow = this;
			__0x11642.initParentObjects = new List<object>();
			__0x11642.initParentObjects.AddRange( parentsForNewObjects );

			
			__0x11642.beforeCreateObjectsFunction = delegate ( NewObjectWindow __0x12209, Metadata.TypeInfo __0x12210 )
			{
				if( __0x12209.creationData.initParentObjects.Count == 1 && __0x12209.creationData.initParentObjects[ 0 ] is Scene )
				{
					Component __0x11643 = __0x12146().destinationObject as Layer;
					if( __0x11643 == null )
						__0x11643 = Scene;

					
					if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12210 ) )
					{
						var __0x11644 = __0x11643.CreateComponent<MeshInSpace>( -1, false );

						
						__0x11644.Name = EditorUtility.GetUniqueFriendlyName( __0x11644, __0x12210.GetUserFriendlyNameForInstance() );
						
						
						
						
						

						__0x12209.creationData.createdObjects = new List<object>();
						__0x12209.creationData.createdObjects.Add( __0x11644 );
						__0x12209.creationData.createdComponentsOnTopLevel.Add( __0x11644 );

						var __0x11645 = __0x11644.CreateComponent<Mesh>();
						__0x12209.creationData.createdObjects.Add( __0x11645 );
						__0x11645.Name = "Mesh";

						var __0x11646 = __0x11645.CreateComponent( __0x12210 );
						__0x12209.creationData.createdObjects.Add( __0x11646 );
						__0x11646.Name = "Mesh Geometry";

						__0x11644.Mesh = ReferenceUtility.MakeThisReference( __0x11644, __0x11645 );

						return true;
					}

					
					if( MetadataManager.GetTypeOfNetType( typeof( CollisionShape ) ).IsAssignableFrom( __0x12210 ) )
					{
						var __0x11647 = __0x11643.CreateComponent<RigidBody>( -1, false );

						
						var __0x11648 = __0x11647.BaseType.GetUserFriendlyNameForInstance();
						if( __0x11647.Parent.GetComponent( __0x11648 ) == null )
							__0x11647.Name = __0x11648;
						else
							__0x11647.Name = __0x11647.Parent.Components.GetUniqueName( __0x11648, false, 2 );

						__0x12209.creationData.createdObjects = new List<object>();
						__0x12209.creationData.createdObjects.Add( __0x11647 );
						__0x12209.creationData.createdComponentsOnTopLevel.Add( __0x11647 );

						var __0x11649 = __0x11647.CreateComponent( __0x12210 );
						__0x12209.creationData.createdObjects.Add( __0x11649 );
						__0x11649.Name = "Collision Shape";

						return true;
					}

					
					if( MetadataManager.GetTypeOfNetType( typeof( RenderingEffect ) ).IsAssignableFrom( __0x12210 ) )
					{
						var __0x11650 = Scene.RenderingPipeline.Value;
						if( __0x11650 != null )
						{
							var __0x11651 = __0x11650.GetComponent( "Scene Effects" );
							if( __0x11651 != null )
							{
								var __0x11652 = EditorUtility.GetNewObjectInsertIndex( __0x11651, __0x12210 );
								var __0x11653 = __0x11651.CreateComponent( __0x12210, __0x11652, false );

								
								var __0x11654 = __0x11653.BaseType.GetUserFriendlyNameForInstance();
								if( __0x11651.GetComponent( __0x11654 ) == null )
									__0x11653.Name = __0x11654;
								else
									__0x11653.Name = __0x11651.Components.GetUniqueName( __0x11654, false, 2 );

								__0x12209.creationData.createdObjects = new List<object>();
								__0x12209.creationData.createdObjects.Add( __0x11653 );
								__0x12209.creationData.createdComponentsOnTopLevel.Add( __0x11653 );

								return true;
							}
						}
					}
				}

				return true;
			};

			
			__0x11642.additionActionAfterEnabled = delegate ( NewObjectWindow __0x12211 )
			
			{
				foreach( var __0x12069 in __0x11642.createdComponentsOnTopLevel )
				{
					if( __0x12069 is ObjectInSpace objectInSpace )
					{
						var __0x11655 = ObjectInSpaceUtility.CalculateObjectToTransform( objectInSpace );
						if( __0x11655 == null )
							__0x11655 = objectInSpace;

						
						if( __0x11655.Transform.Value.Position == Vector3.Zero )
						{
							CalculateCreateObjectPosition( objectInSpace, __0x11655, mouse );
							
						}
					}
				}
			};

			__0x11642.initLockType = lockType;
			__0x11642.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x11642 );
		}

		public override bool TryDeleteObjects()
		{
			if( !base.TryDeleteObjects() )
				return false;

			__0x12108();

			return true;
		}

		private void __0x12112( object __0x12212, DragEventArgs __0x12213 )
		{
			

			if(  ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByDrop ) )
			{
				__0x11491 = true;
				__0x12119( __0x12213 );
			}
		}

		private void __0x12113( object __0x12214, DragEventArgs __0x12215 )
		{
			__0x12215.Effect = DragDropEffects.None;

			if(  ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByDrop ) && __0x11491 )
			{
				ViewportControl?.PerformMouseMove();

				
				
				

				__0x12121();
				if( __0x11495 != null )
					__0x12215.Effect = DragDropEffects.Link;

				__0x12123( __0x12215 );
				if( __0x11497 != null )
					__0x12215.Effect = DragDropEffects.Link;

				ViewportControl.TryRender();
			}
		}

		private void __0x12114( object __0x12216, EventArgs __0x12217 )
		{
			if(  __0x11491 )
			{
				__0x12120();
				__0x12124();
				__0x11491 = false;

				
				ViewportControl.TryRender();
			}
		}

		private void __0x12115( object __0x12218, DragEventArgs __0x12219 )
		{
			if(  __0x11491 )
			{
				
				if( __0x11495 != null )
				{
					var __0x11656 = __0x11494.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
					if( __0x11656.Length != 0 )
					{
						
						var __0x11657 = (ObjectCreationMode)__0x11656[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, __0x11495 } );
						ObjectCreationModeSet( __0x11657 );
						__0x11494 = null;
						__0x11495 = null;
						__0x11491 = false;
						EditorAPI.SelectDockWindow( this );
						return;
					}
				}

				if( __0x12125() )
					__0x12120();
				else
					__0x12122();
				__0x11491 = false;
			}
		}

		public delegate void CreateObjectWhatTypeWillCreatedEventDelegate( Metadata.TypeInfo __0x12220, string __0x12221, ref Metadata.TypeInfo __0x12222 );
		public static event CreateObjectWhatTypeWillCreatedEventDelegate CreateObjectWhatTypeWillCreatedEvent;

		Metadata.TypeInfo __0x12116( Metadata.TypeInfo __0x12223, string __0x12224 )
		{
			
			{
				Metadata.TypeInfo __0x11658 = null;
				CreateObjectWhatTypeWillCreatedEvent?.Invoke( __0x12223, __0x12224, ref __0x11658 );
				if( __0x11658 != null )
					return __0x11658;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12223 ) )
				return MetadataManager.GetTypeOfNetType( typeof( MeshInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( __0x12223 ) )
				return MetadataManager.GetTypeOfNetType( typeof( MeshInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( ParticleSystem ) ).IsAssignableFrom( __0x12223 ) )
				return MetadataManager.GetTypeOfNetType( typeof( ParticleSystemInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( CollisionShape ) ).IsAssignableFrom( __0x12223 )  )
				return MetadataManager.GetTypeOfNetType( typeof( RigidBody ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( CollisionShape2D ) ).IsAssignableFrom( __0x12223 ) )
				return MetadataManager.GetTypeOfNetType( typeof( RigidBody2D ) );

			
			if( typeof( Import3D ).IsAssignableFrom( __0x12223.GetNetType() ) )
			{
				var __0x11659 = __0x12223 as Metadata.ComponentTypeInfo;
				if( __0x11659 != null && __0x11659.BasedOnObject != null )
				{
					

					var __0x11660 = __0x11659.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
					if( __0x11660 != null )
						return MetadataManager.GetTypeOfNetType( typeof( MeshInSpace ) );
					else
					{
						
						var __0x11661 = __0x11659.BasedOnObject.GetComponent( "Scene Objects" ) as ObjectInSpace;
						if( __0x11661 != null && __0x11661.GetProvidedType() != null )
							return __0x11661.GetProvidedType();
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( RenderingEffect ) ).IsAssignableFrom( __0x12223 ) )
			{
				var __0x11662 = Scene.RenderingPipeline.Value;
				if( __0x11662 != null )
				{
					var __0x11663 = __0x11662.GetComponent( "Scene Effects" );
					if( __0x11663 != null )
						return __0x12223;
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Sound ) ).IsAssignableFrom( __0x12223 ) )
				return MetadataManager.GetTypeOfNetType( typeof( SoundSource ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12223 ) )
				return __0x12223;

			return null;
		}

		public delegate void CreateObjectByCreationDataEventDelegate( Metadata.TypeInfo __0x12225, string __0x12226, object __0x12227, Component __0x12228, ref Component __0x12229 );
		public static event CreateObjectByCreationDataEventDelegate CreateObjectByCreationDataEvent;

		Component __0x12117( Metadata.TypeInfo __0x12230, string __0x12231, object __0x12232, string __0x12233 )
		{
			Component __0x11664 = __0x12146().destinationObject as Layer;
			if( __0x11664 == null )
				__0x11664 = Scene;

			

			Component __0x11665 = null;

			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			CreateObjectByCreationDataEvent?.Invoke( __0x12230, __0x12231, __0x12232, __0x11664, ref __0x11665 );

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11666 = __0x11664.CreateComponent<MeshInSpace>( -1, false );
				__0x11665 = __0x11666;
				__0x11665.Name = EditorUtility.GetUniqueFriendlyName( __0x11665, __0x12230.GetUserFriendlyNameForInstance() );

				var __0x11667 = __0x11666.CreateComponent<Mesh>();
				__0x11667.Name = "Mesh";
				var __0x11668 = __0x11667.CreateComponent( __0x12230 );
				__0x11668.Name = "Mesh Geometry";
				
				__0x11666.Mesh = new Reference<Mesh>( null, ReferenceUtility.CalculateThisReference( __0x11666, __0x11667 ) );
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11669 = __0x11664.CreateComponent<MeshInSpace>( -1, false );
				__0x11665 = __0x11669;

				
				__0x11669.Mesh = new Reference<Mesh>( null, __0x12231 );
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( ParticleSystem ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11670 = __0x11664.CreateComponent<ParticleSystemInSpace>( -1, false );
				__0x11665 = __0x11670;

				if( MetadataManager.GetTypeOfNetType( typeof( ParticleSystem ) ) == __0x12230 && string.IsNullOrEmpty( __0x12231 ) )
				{
					var __0x11671 = __0x11670.CreateComponent<ParticleSystem>();
					__0x11671.Name = "Particle System";
					__0x11671.NewObjectSetDefaultConfiguration();
					__0x11670.ParticleSystem = ReferenceUtility.MakeThisReference( __0x11670, __0x11671 );
				}
				else
					__0x11670.ParticleSystem = new Reference<ParticleSystem>( null, __0x12231 );
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( CollisionShape ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11672 = __0x11664.CreateComponent<RigidBody>( -1, false );
				__0x11665 = __0x11672;

				var __0x11673 = __0x11672.CreateComponent( __0x12230 );
				__0x11673.Name = "Collision Shape";
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( CollisionShape2D ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11674 = __0x11664.CreateComponent<RigidBody2D>( -1, false );
				__0x11665 = __0x11674;

				var __0x11675 = __0x11674.CreateComponent( __0x12230 );
				__0x11675.Name = "Collision Shape";
			}

			
			if( __0x11665 == null && typeof( Import3D ).IsAssignableFrom( __0x12230.GetNetType() ) )
			{
				var __0x11676 = __0x12230 as Metadata.ComponentTypeInfo;
				if( __0x11676 != null && __0x11676.BasedOnObject != null )
				{
					

					var __0x11677 = __0x11676.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
					if( __0x11677 != null )
					{
						
						var __0x11678 = __0x11664.CreateComponent<MeshInSpace>( -1, false );
						__0x11665 = __0x11678;
						__0x11665.Name = EditorUtility.GetUniqueFriendlyName( __0x11665, __0x12230.GetUserFriendlyNameForInstance() );
						__0x11678.Mesh = new Reference<Mesh>( null, ReferenceUtility.CalculateResourceReference( __0x11677 ) );
					}
					else
					{
						
						var __0x11679 = __0x11676.BasedOnObject.GetComponent( "Scene Objects" ) as ObjectInSpace;
						if( __0x11679 != null && __0x11679.GetProvidedType() != null )
						{
							var __0x11680 = __0x11664.CreateComponent( __0x11679.GetProvidedType(), -1, false );
							__0x11665 = __0x11680;
						}
					}

					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					
					
					
				}
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( RenderingEffect ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11681 = Scene.RenderingPipeline.Value;
				if( __0x11681 != null )
				{
					var __0x11682 = __0x11681.GetComponent( "Scene Effects" );
					if( __0x11682 != null )
					{
						var __0x11683 = EditorUtility.GetNewObjectInsertIndex( __0x11682, __0x12230 );
						var __0x11684 = __0x11682.CreateComponent( __0x12230, __0x11683, false );
						__0x11665 = __0x11684;
					}
				}
			}

			
			
			
			
			
			
			
			
			
			
			

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( Sound ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11685 = __0x11664.CreateComponent<SoundSource>( -1, false );
				__0x11665 = __0x11685;

				
				__0x11685.Sound = new Reference<Sound>( null, __0x12231 );
			}

			
			if( __0x11665 == null && MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12230 ) )
			{
				var __0x11686 = __0x11664.CreateComponent( __0x12230, -1, false );
				__0x11665 = __0x11686;
			}

			if( __0x11665 != null )
			{
				
				if( string.IsNullOrEmpty( __0x11665.Name ) )
				{
					if( !string.IsNullOrEmpty( __0x12233 ) && __0x11665.Parent != null )
					{
						if( __0x11665.Parent.GetComponent( __0x12233 ) == null )
							__0x11665.Name = __0x12233;
						else
							__0x11665.Name = __0x11665.Parent.Components.GetUniqueName( __0x12233, true, 2 );
					}
					else
						__0x11665.Name = ComponentUtility.GetNewObjectUniqueName( __0x11665 );
				}

				
				__0x11665.NewObjectSetDefaultConfiguration();

				
				__0x11665.Enabled = true;
			}

			return __0x11665;
		}

		bool __0x12118( Metadata.TypeInfo __0x12234, string __0x12235, ObjectInSpace __0x12236 )
		{
			
			if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12234 ) )
			{
				var __0x11687 = __0x12236 as MeshInSpace;
				if( __0x11687 != null )
				{
					var __0x11688 = __0x11687.GetComponent( "Mesh" ) as Mesh;
					if( __0x11688 != null )
					{
						var __0x11689 = __0x11688.GetComponent( __0x12234 );
						if( __0x11689 != null && __0x11689.Name == "Mesh Geometry" )
							return true;
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( __0x12234 ) )
			{
				var __0x11690 = __0x12236 as MeshInSpace;
				if( __0x11690 != null && __0x11690.Mesh.GetByReference == __0x12235 )
					return true;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( ParticleSystem ) ).IsAssignableFrom( __0x12234 ) )
			{
				var __0x11691 = __0x12236 as ParticleSystemInSpace;
				if( __0x11691 != null && __0x11691.ParticleSystem.GetByReference == __0x12235 )
					return true;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( CollisionShape ) ).IsAssignableFrom( __0x12234 )  )
			{
				var __0x11692 = __0x12236 as RigidBody;
				if( __0x11692 != null )
				{
					var __0x11693 = __0x11692.GetComponent( __0x12234 );
					if( __0x11693 != null && __0x11693.Name == "Collision Shape" )
						return true;
				}
			}

			

			
			if( typeof( Import3D ).IsAssignableFrom( __0x12234.GetNetType() ) )
			{
				var __0x11694 = __0x12236 as MeshInSpace;
				if( __0x11694 != null )
				{
					var __0x11695 = __0x12234 as Metadata.ComponentTypeInfo;
					if( __0x11695 != null && __0x11695.BasedOnObject != null )
					{
						var __0x11696 = __0x11695.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
						if( __0x11696 != null )
						{
							if( __0x11694.Mesh.GetByReference == ReferenceUtility.CalculateResourceReference( __0x11696 ) )
								return true;
						}
						else
						{
							

							
							
							
							
							
							
							
						}
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Sound ) ).IsAssignableFrom( __0x12234 ) )
			{
				var __0x11697 = __0x12236 as SoundSource;
				if( __0x11697 != null && __0x11697.Sound.GetByReference == __0x12235 )
					return true;
			}

			
			if( string.IsNullOrEmpty( __0x12235 ) && __0x12234.IsAssignableFrom( __0x12236.BaseType ) )
				return true;

			return false;
		}

		void __0x12119( DragEventArgs __0x12237 )
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetObjectToCreateByDropData( __0x12237 );
			if( objectType != null )
			{
				var __0x11698 = __0x12117( objectType, referenceToObject, anyData, objectName );
				if( __0x11698 != null )
				{
					__0x11494 = objectType;
					__0x11495 = __0x11698;
					__0x12121();
				}
			}
		}

		void __0x12120()
		{
			if( __0x11495 != null )
			{
				__0x11495.Dispose();
				__0x11494 = null;
				__0x11495 = null;
			}
		}

		public (bool found, Vector3 position, ObjectInSpace collidedWith) CalculateCreateObjectPositionUnderCursor( Viewport viewport, ObjectInSpace objectInSpace = null, Vector2? overrideMouse = null, Ray? overrideRay = null, bool allowSnap = true )
		{
			Vector2 __0x11699;
			if( overrideMouse.HasValue )
				__0x11699 = overrideMouse.Value;
			else
			{
				__0x11699 = viewport.MousePosition;
				if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11699 ) )
					__0x11699 = new Vector2( 0.5, 0.5 );
			}

			Ray __0x11700;
			if( overrideRay.HasValue )
				__0x11700 = overrideRay.Value;
			else
				__0x11700 = viewport.CameraSettings.GetRayByScreenCoordinates( __0x11699 );
			
			

			var __0x11701 = allowSnap && ModifierKeys.HasFlag( Keys.Control );

			return SceneUtility.CalculateCreateObjectPositionByRay( Scene, objectInSpace, __0x11700, __0x11701 );
		}

		public void CalculateCreateObjectPosition( ObjectInSpace objectInSpace, ObjectInSpace objectToTransform, Vector2? mouse = null )
		{
			var __0x11702 = CalculateCreateObjectPositionUnderCursor( Viewport, objectInSpace, mouse );
			objectToTransform.Transform = new Transform( __0x11702.position, objectToTransform.Transform.Value.Rotation, objectToTransform.Transform.Value.Scale );
		}

		void __0x12121()
		{
			if( __0x11495 != null && __0x11495 is ObjectInSpace objectInSpace )
			{
				var __0x11703 = ObjectInSpaceUtility.CalculateObjectToTransform( objectInSpace );
				if( __0x11703 == null )
					__0x11703 = objectInSpace;

				CalculateCreateObjectPosition( objectInSpace, __0x11703 );

				
				objectInSpace.NewObjectSetDefaultConfigurationUpdate();

				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
			}

			
			if( __0x11495 != null && __0x11495 is LensFlares )
			{
				var __0x11704 = GetMouseOverObjectToSelectByClick() as Component;

				Component __0x11705 = Scene;
				if( __0x11704 != null && __0x11704 is Light )
					__0x11705 = __0x11704;

				if( __0x11495.Parent != __0x11705 )
				{
					__0x11495.RemoveFromParent( false );
					__0x11705.AddComponent( __0x11495 );
				}
			}

			
			
			
			
			
			
			
			
		}

		void __0x12122()
		{
			if( __0x11495 != null )
			{
				var __0x11706 = __0x11495;

				
				var __0x11707 = new List<Component>();
				__0x11707.Add( __0x11495 );
				var __0x11708 = new UndoActionComponentCreateDelete( Document, __0x11707, true );
				Document.UndoSystem.CommitAction( __0x11708 );
				Document.Modified = true;

				__0x11494 = null;
				__0x11495 = null;

				
				if( CreateObjectsMode != CreateObjectsModeEnum.Click )
					
					EditorAPI.SelectComponentsInMainObjectsWindow( this, new Component[] { __0x11706 } );

				EditorAPI.SelectDockWindow( this );
			}
		}

		void __0x12123( DragEventArgs __0x12238 )
		{
			object __0x11709 = null;
			
			
			Metadata.Property __0x11710 = null;
			object[] __0x11711 = null;
			IReference __0x11712 = null;
			Component __0x11713 = null;

			ContentBrowser.Item __0x11714 = null;
			{
				if(  __0x12238 != null )
				{
					var __0x11715 = ContentBrowser.GetDroppingItemData( __0x12238.Data );
					if( __0x11715 != null )
						__0x11714 = __0x11715.Item;
				}
				if( CreateObjectsMode == CreateObjectsModeEnum.Click )
					__0x11714 = EditorAPI.CreateObjectGetSelectedContentBrowserItem();
			}

			
			
			if( __0x11714 != null )
			{
				

				
				var __0x11716 = GetMouseOverObjectToSelectByClick() as Component;
				

				if( __0x11716 != null )
				{
					Metadata.TypeInfo __0x11717 = null;
					string __0x11718 = "";
					char __0x11719 = '\\';

					
					var __0x11720 = __0x11714 as ContentBrowserItem_File;
					if( __0x11720 != null && !__0x11720.IsDirectory )
					{
						
						var __0x11721 = Path.GetExtension( __0x11720.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x11721 ) != null )
						{
							var __0x11722 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x11720.FullPath ) );

							var __0x11723 = __0x11722?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x11723 != null )
							{
								__0x11717 = __0x11723;
								__0x11718 = __0x11722.Name;
								__0x11719 = '|';
							}
						}
					}

					
					var __0x11724 = __0x11714 as ContentBrowserItem_Component;
					if( __0x11724 != null )
					{
						var __0x11725 = __0x11724.Component;

						if( Scene.ParentRoot == __0x11725.ParentRoot )
						{
							__0x11717 = MetadataManager.MetadataGetType( __0x11725 );
							if( __0x11717 != null )
							{
								ReferenceUtility.CalculateThisReference( __0x11716, __0x11725, "", out __0x11718, out __0x11719 );
								
							}
						}
						else
						{
							var __0x11726 = __0x11725.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x11726 != null )
							{
								__0x11717 = __0x11725.GetProvidedType();
								if( __0x11717 != null )
								{
									__0x11718 = __0x11717.Name;
									__0x11719 = '|';
								}
							}
						}

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					}

					
					var __0x11727 = __0x11714 as ContentBrowserItem_Member;
					if( __0x11727 != null )
					{
						var __0x11728 = __0x11727.Member;

						
						ContentBrowserUtility.CalculateReferenceValueForMemberItem( __0x11716, null, __0x11727, out __0x11718, out __0x11719 );

						if( __0x11728 is Metadata.Property )
						{
							
							var __0x11729 = (Metadata.Property)__0x11728;

							__0x11717 = __0x11729.TypeUnreferenced;
							
							
						}
						else if( __0x11728 is Metadata.Method )
						{
							
							var __0x11730 = (Metadata.Method)__0x11728;

							var __0x11731 = __0x11730.GetReturnParameters();
							if( __0x11730.Parameters.Length == 1 && __0x11731.Length == 1 )
							{
								__0x11717 = __0x11731[ 0 ].Type;
								
								
							}
						}
					}

					
					var __0x11732 = __0x11714 as StoresWindow.ContentBrowserItem_StoreItem;
					if( __0x11732 != null )
					{
						var (type, reference) = __0x11732.GetFileToDrop( CreateObjectsMode == CreateObjectsModeEnum.Drop );

						switch( type )
						{
						case PackageManager.PackageInfo.FileTypeToDrop.Material:
							__0x11717 = MetadataManager.GetTypeOfNetType( typeof( Material ) );
							__0x11718 = reference;
							__0x11719 = '|';
							break;
						}
					}


					if( __0x11717 != null )
					{
						
						if( MetadataManager.GetTypeOfNetType( typeof( Material ) ).IsAssignableFrom( __0x11717 ) )
						{
							
							var __0x11733 = __0x11716 as MeshInSpace;
							if( __0x11733 != null )
							{
								__0x11709 = __0x11733;
								__0x11710 = (Metadata.Property)__0x11733.MetadataGetMemberBySignature( "property:" + nameof( MeshInSpace.ReplaceMaterial ) );
								__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11718 );

								__0x11713 = null;
							}

							
							var __0x11734 = __0x11716 as Billboard;
							if( __0x11734 != null )
							{
								__0x11709 = __0x11734;
								__0x11710 = (Metadata.Property)__0x11734.MetadataGetMemberBySignature( "property:" + nameof( Billboard.Material ) );
								__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11718 );

								__0x11713 = null;
							}

							
							var __0x11735 = __0x11716 as Decal;
							if( __0x11735 != null )
							{
								__0x11709 = __0x11735;
								__0x11710 = (Metadata.Property)__0x11735.MetadataGetMemberBySignature( "property:" + nameof( Decal.Material ) );
								__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11718 );

								__0x11713 = null;
							}
						}

						
						if( typeof( Import3D ).IsAssignableFrom( __0x11717.GetNetType() ) )
						{
							
							bool __0x11736 = false;
							{
								var __0x11737 = __0x11717 as Metadata.ComponentTypeInfo;
								if( __0x11737 != null && __0x11737.BasedOnObject != null )
								{
									var __0x11738 = __0x11737.BasedOnObject.GetComponent( "Material" ) as Material;
									if( __0x11738 != null )
										__0x11736 = true;
								}

							}

							if( __0x11736 )
							{
								var __0x11739 = __0x11718 + __0x11719.ToString() + "$Material";

								
								var __0x11740 = __0x11716 as MeshInSpace;
								if( __0x11740 != null )
								{
									__0x11709 = __0x11740;
									__0x11710 = (Metadata.Property)__0x11740.MetadataGetMemberBySignature( "property:" + nameof( MeshInSpace.ReplaceMaterial ) );
									__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11739 );

									__0x11713 = null;
								}

								
								var __0x11741 = __0x11716 as Billboard;
								if( __0x11741 != null )
								{
									__0x11709 = __0x11741;
									__0x11710 = (Metadata.Property)__0x11741.MetadataGetMemberBySignature( "property:" + nameof( Billboard.Material ) );
									__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11739 );

									__0x11713 = null;
								}

								
								var __0x11742 = __0x11716 as Decal;
								if( __0x11742 != null )
								{
									__0x11709 = __0x11742;
									__0x11710 = (Metadata.Property)__0x11742.MetadataGetMemberBySignature( "property:" + nameof( Decal.Material ) );
									__0x11712 = ReferenceUtility.MakeReference( typeof( Material ), null, __0x11739 );

									__0x11713 = null;
								}
							}
						}
					}
				}
			}

			if( __0x12238 != null )
			{
				var __0x11743 = (DragDropSetReferenceData)__0x12238.Data.GetData( typeof( DragDropSetReferenceData ) );
				if( __0x11743 != null )
				{
					
					if( __0x11743.document == Document )
					{
						var __0x11744 = __0x11743.property.TypeUnreferenced;

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x11744 ) )
						
						{
							
							var __0x11745 = GetMouseOverObjectToSelectByClick() as Component;
							

							if( __0x11745 != null && __0x11744.IsAssignableFrom( MetadataManager.MetadataGetType( __0x11745 ) ) )
							{
								

								var __0x11746 = ReferenceUtility.CalculateThisReference( __0x11743.controlledComponents[ 0 ], __0x11745 );

								__0x11709 = __0x11743.propertyOwners[ 0 ];
								__0x11710 = __0x11743.property;
								__0x11711 = __0x11743.indexers;
								__0x11712 = ReferenceUtility.MakeReference( __0x11744.GetNetType(), null, __0x11746 );

								__0x11713 = __0x11745;
							}
						}

						
						
						

						
						
						
						
						

						
						
						

						
						
						
					}
				}
			}

			
			if( __0x11496 != __0x11709 ||
				__0x11497 != __0x11710 ||
				__0x11500 != __0x11713 )
			{
				__0x12124();

				if( __0x11709 != null )
				{
					try
					{
						__0x11496 = __0x11709;
						__0x11497 = __0x11710;
						__0x11498 = __0x11711;
						__0x11499 = (IReference)__0x11497.GetValue( __0x11496, __0x11498 );

						__0x11497.SetValue( __0x11496, __0x11712, __0x11711 );

						__0x11500 = __0x11713;

					}
					catch( Exception e )
					{
						__0x11496 = null;
						__0x11497 = null;
						__0x11498 = null;
						__0x11499 = null;
						__0x11500 = null;

						Log.Warning( e.Message );
					}
				}
			}
		}

		void __0x12124()
		{
			if( __0x11496 != null )
			{
				try
				{
					__0x11497.SetValue( __0x11496, __0x11499, __0x11498 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}

				__0x11496 = null;
				__0x11497 = null;
				__0x11498 = null;
				__0x11499 = null;
				__0x11500 = null;
			}
		}

		bool __0x12125()
		{
			if( __0x11496 != null )
			{
				try
				{
					var __0x11747 = new List<UndoActionPropertiesChange.Item>();

					var __0x11748 = __0x11496;
					var __0x11749 = __0x11499;

					var __0x11750 = __0x11497.GetValue( __0x11748, __0x11498 );
					if( !__0x11750.Equals( __0x11749 ) )
						__0x11747.Add( new UndoActionPropertiesChange.Item( __0x11748, __0x11497, __0x11749, __0x11498 ) );

					if( __0x11747.Count != 0 )
					{
						var __0x11751 = new UndoActionPropertiesChange( __0x11747.ToArray() );
						Document.UndoSystem.CommitAction( __0x11751 );
						Document.Modified = true;
					}
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}

				__0x11496 = null;
				__0x11497 = null;
				__0x11498 = null;
				__0x11499 = null;
				__0x11500 = null;

				EditorAPI.SelectDockWindow( this );

				return true;
			}

			return false;
		}

		void __0x12126()
		{
			__0x11481.Active = !__0x11491 && !__0x11492 && !__0x11493 && ObjectCreationMode == null;
		}

		public bool CanSnap( out List<ObjectInSpace> resultObjects )
		{
			resultObjects = new List<ObjectInSpace>();
			foreach( var __0x12070 in __0x11481.Objects )
			{
				var __0x11752 = __0x12070 as TransformToolObjectObjectInSpace;
				if( __0x11752 != null )
				{
					var __0x11753 = ObjectInSpaceUtility.CalculateObjectToTransform( __0x11752.SelectedObject );
					if( __0x11753 != null )
						resultObjects.Add( __0x11753 );
				}
			}
			return resultObjects.Count != 0;
		}

		public void Snap( EditorAction action )
		{
			if( !CanSnap( out var objects ) )
				return;

			var __0x11754 = (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( ObjectInSpace ) ).MetadataGetMemberBySignature( "property:Transform" );
			var __0x11755 = ProjectSettings.Get.SceneEditor.SceneEditorStepMovement.Value;

			var __0x11756 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x12071 in objects )
			{
				var __0x11757 = __0x12071.Transform;

				var __0x11758 = __0x12071.Transform.Value.Position;
				if( __0x11755 != 0 )
				{
					if( action.Name == "Snap All Axes" || action.Name == "Snap X" )
						__0x11758.X = ( (long)( __0x11758.X / __0x11755 + ( __0x11758.X > 0 ? 0.5 : -0.5 ) ) ) * __0x11755;
					if( action.Name == "Snap All Axes" || action.Name == "Snap Y" )
						__0x11758.Y = ( (long)( __0x11758.Y / __0x11755 + ( __0x11758.Y > 0 ? 0.5 : -0.5 ) ) ) * __0x11755;
					if( action.Name == "Snap All Axes" || action.Name == "Snap Z" )
						__0x11758.Z = ( (long)( __0x11758.Z / __0x11755 + ( __0x11758.Z > 0 ? 0.5 : -0.5 ) ) ) * __0x11755;
				}
				__0x12071.Transform = __0x12071.Transform.Value.UpdatePosition( __0x11758 );

				__0x11756.Add( new UndoActionPropertiesChange.Item( __0x12071, __0x11754, __0x11757, null ) );
			}

			if( __0x11756.Count != 0 )
			{
				var __0x11759 = new UndoActionPropertiesChange( __0x11756.ToArray() );
				Document.UndoSystem.CommitAction( __0x11759 );
				Document.Modified = true;
			}
		}

		static string __0x12127( string __0x12239 )
		{
			return EditorLocalization.Translate( "SceneDocumentWindow", __0x12239 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			
			if( Scene != null && Scene.GetDisplayDevelopmentDataInThisApplication() && Scene.DisplayTextInfo )
			{
				var __0x11760 = ViewportControl?.Viewport?.RenderingContext?.UpdateStatisticsPrevious;
				if( __0x11760 != null )
				{
					lines.Add( __0x12127( "FPS" ) + ": " + __0x11760.FPS.ToString( "F1" ) );
					lines.Add( __0x12127( "Triangles" ) + ": " + __0x11760.Triangles.ToString() );
					lines.Add( __0x12127( "Lines" ) + ": " + __0x11760.Lines.ToString() );
					lines.Add( __0x12127( "Draw calls" ) + ": " + __0x11760.DrawCalls.ToString() );
					lines.Add( __0x12127( "Render targets" ) + ": " + __0x11760.RenderTargets.ToString() );
					lines.Add( __0x12127( "Dynamic textures" ) + ": " + __0x11760.DynamicTextures.ToString() );
					lines.Add( __0x12127( "Compute write images" ) + ": " + __0x11760.ComputeWriteImages.ToString() );
					lines.Add( __0x12127( "Lights" ) + ": " + __0x11760.Lights.ToString() );
					lines.Add( __0x12127( "Reflection probes" ) + ": " + __0x11760.ReflectionProbes.ToString() );
					lines.Add( __0x12127( "Occlusion culling buffers" ) + ": " + __0x11760.OcclusionCullingBuffers.ToString() );
				}
			}
		}

		static Type __0x12128( Component __0x12240 )
		{
			var __0x11761 = __0x12240.GetType();
			if( __0x11761.GetCustomAttribute( typeof( WhenCreatingShowWarningIfItAlreadyExistsAttribute ), true ) != null )
			{
				var __0x11762 = new Stack<Type>();
				{
					var __0x11763 = __0x11761;
					while( __0x11763 != null )
					{
						__0x11762.Push( __0x11763 );
						__0x11763 = __0x11763.BaseType;
					}
				}

				while( __0x11762.Count != 0 )
				{
					var __0x11764 = __0x11762.Pop();
					if( __0x11764.GetCustomAttribute( typeof( WhenCreatingShowWarningIfItAlreadyExistsAttribute ), true ) != null )
						return __0x11764;
				}
			}

			return null;
		}

		protected override void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.GetTextInfoCenterBottomCorner( lines );

			if( __0x11492 )
				lines.Add( __0x12127( "Creating objects by mouse clicking." ) );
			if( __0x11493 )
			{
				
				lines.Add( __0x12127( "Creating objects by brush." ) );
			}

			
			if( __0x11491 && __0x11495 != null )
			{
				try
				{
					var __0x11765 = __0x12128( __0x11495 );
					if( __0x11765 != null && Scene.GetComponents( __0x11765, checkChildren: true ).Length > 1 )
					{
						var __0x11766 = TypeUtility.GetUserFriendlyNameForInstanceOfType( __0x11765 );

						if( lines.Count != 0 )
							lines.Add( "" );
						lines.Add( $"Another {__0x11766} component already exists." );
					}
				}
				catch { }
			}

			__0x12144( lines );

			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x11767 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x11767 != null )
			{
				var __0x11768 = new List<Component>();
				foreach( var __0x12072 in __0x11767.objects )
				{
					var __0x11769 = __0x12072 as Component;
					if( __0x11769 != null )
						__0x11768.Add( __0x11769 );
				}

				

				var __0x11770 = new List<Component>();
				Vector3 __0x11771 = Vector3.Zero;

				for( int __0x11772 = 0; __0x11772 < __0x11768.Count; __0x11772++ )
				{
					var __0x11773 = __0x11768[ __0x11772 ];

					var __0x11774 = __0x11773.Clone();
					if( destinationParent.GetComponent( __0x11773.Name ) == null )
						__0x11774.Name = __0x11773.Name;
					else
						__0x11774.Name = destinationParent.Components.GetUniqueName( __0x11773.Name, true, 2 );
					destinationParent.AddComponent( __0x11774 );

					
					if( destinationParent == Scene )
					{
						var __0x11775 = __0x11774 as ObjectInSpace;
						if( __0x11775 != null )
						{
							var __0x11776 = ObjectInSpaceUtility.CalculateObjectToTransform( __0x11775 );
							if( __0x11776 == null )
								__0x11776 = __0x11775;

							if( __0x11772 == 0 )
							{
								CalculateCreateObjectPosition( __0x11775, __0x11776 );
								__0x11771 = __0x11776.Transform.Value.Position - ( (ObjectInSpace)__0x11773 ).Transform.Value.Position;
							}
							else
							{
								var __0x11777 = __0x11775.Transform.Value;
								__0x11776.Transform = new Transform( __0x11777.Position + __0x11771, __0x11777.Rotation, __0x11777.Scale );
							}
						}
					}

					__0x11770.Add( __0x11774 );
				}

				if( __0x11767.cut )
				{
					
					if( __0x11767.documentWindow.Document != Document )
					{
						
						{
							var __0x11778 = new UndoActionComponentCreateDelete( __0x11767.documentWindow.Document, __0x11768, false );
							__0x11767.documentWindow.Document.UndoSystem.CommitAction( __0x11778 );
							__0x11767.documentWindow.Document.Modified = true;
						}
						{
							var __0x11779 = new UndoActionComponentCreateDelete( Document, __0x11770, true );
							Document.UndoSystem.CommitAction( __0x11779 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x11780 = new UndoMultiAction();
						__0x11780.AddAction( new UndoActionComponentCreateDelete( Document, __0x11768, false ) );
						__0x11780.AddAction( new UndoActionComponentCreateDelete( Document, __0x11770, true ) );
						Document.UndoSystem.CommitAction( __0x11780 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x11781 = new UndoActionComponentCreateDelete( Document, __0x11770, true );
					Document.UndoSystem.CommitAction( __0x11781 );
					Document.Modified = true;
				}
			}

			return true;
		}

		public bool CanFocusCameraOnSelectedObject( out object[] objects )
		{
			if( !AllowCameraControl )
			{
				objects = null;
				return false;
			}

			var __0x11782 = new List<object>();

#if !DEPLOY
			foreach( var __0x12073 in SelectedObjects )
			{
				if( __0x12073 is ObjectInSpace || __0x12073 is BuilderWorkareaMode.Vertex || __0x12073 is BuilderWorkareaMode.Edge || __0x12073 is BuilderWorkareaMode.Face )
					__0x11782.Add( __0x12073 );
			}
#endif

			objects = __0x11782.ToArray();
			
			return objects.Length != 0;
		}

		public void FocusCameraOnSelectedObject( object[] objects )
		{
#if !DEPLOY
			Bounds __0x11783 = NeoAxis.Bounds.Cleared;
			foreach( var __0x12074 in objects )
			{
				if( __0x12074 is Light light )
				{
					var __0x11784 = new Bounds( light.Transform.Value.Position );
					__0x11784.Expand( 0.1 );
					__0x11783.Add( __0x11784 );
				}
				else if( __0x12074 is ObjectInSpace objectInSpace )
					__0x11783.Add( objectInSpace.SpaceBounds.CalculatedBoundingBox );
				else if( __0x12074 is BuilderWorkareaMode.Vertex vertex )
				{
					var __0x11785 = new Bounds( vertex.Position );
					__0x11785.Expand( 0.1 );
					__0x11783.Add( __0x11785 );
				}
				else if( __0x12074 is BuilderWorkareaMode.Edge edge )
				{
					var __0x11786 = new Bounds( edge.Position );
					__0x11786.Expand( 0.5 );
					__0x11783.Add( __0x11786 );
				}
				else if( __0x12074 is BuilderWorkareaMode.Face face )
				{
					var __0x11787 = new Bounds( face.Position );
					__0x11787.Expand( 0.5 );
					__0x11783.Add( __0x11787 );
				}
			}

			Camera __0x11788 = Scene.Mode.Value == Scene.ModeEnum._3D ? Scene.CameraEditor : Scene.CameraEditor2D;
			if( !__0x11783.IsCleared() && __0x11788 != null )
			{
				var __0x11789 = new Rectangle( .4f, .3f, .6f, .7f );

				var __0x11790 = __0x11783.GetCenter();
				var __0x11791 = __0x11783.ToPoints();

				if( Scene.Mode.Value == Scene.ModeEnum._3D )
				{
					double __0x11792 = 1000;
					while( __0x11792 > 0.3 )
					{
						__0x11788.SetPosition( __0x11790 - __0x11788.TransformV.Rotation.GetForward() * __0x11792 );

						var __0x11793 = ViewportControl.Viewport;

						
						bool __0x11794 = false;
						Scene_ViewportUpdateGetCameraSettings( Scene, __0x11793, ref __0x11794 );

						foreach( var __0x12075 in __0x11791 )
						{
							__0x11793.CameraSettings.ProjectToScreenCoordinates( __0x12075, out var screenPos );
							if( !__0x11789.Contains( screenPos ) )
								goto end;
						}

						__0x11792 /= 1.03f;
					}
					end:;
				}
				else
				{
					__0x11788.SetPosition( new Vector3( __0x11790.ToVector2(), __0x11788.TransformV.Position.Z ) );
				}
			}
#endif
		}

		[Browsable( false )]
		public TransformTool TransformTool
		{
			get { return __0x11481; }
		}

		virtual protected TransformToolObject TransformToolCreateObject( object forObject )
		{
			TransformToolObject __0x11795 = null;

			var __0x11796 = false;
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolCreateObject( forObject, ref __0x11795 ) )
				__0x11796 = true;

			if( !__0x11796 )
			{
				
				if( __0x11795 == null )
				{
					

					var __0x11797 = forObject as ObjectInSpace;
					if( __0x11797 != null )
						return new TransformToolObjectObjectInSpace( __0x11797 );
				}
			}

			return __0x11795;
		}

		[Browsable( false )]
		public new WorkareaModeClassScene WorkareaMode
		{
			get { return (WorkareaModeClassScene)base.WorkareaMode; }
		}

		public void ResetWorkareaMode()
		{
			WorkareaModeSet( "" );
			__0x11481.Mode = transformToolModeRestore;
		}

		public void ChangeCreateObjectsMode( CreateObjectsModeEnum mode )
		{
			
			if( WorkareaMode as TerrainEditingMode != null )
				ResetWorkareaMode();

			if( CreateObjectsMode == mode )
				return;

			CreateObjectsMode = mode;

			
		}

		bool __0x12129()
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetSelectedObjectToCreate();
			if( objectType != null )
			{
				var __0x11798 = __0x12116( objectType, referenceToObject );
				if( __0x11798 != null && MetadataManager.GetTypeOfNetType( typeof( ObjectInSpace ) ).IsAssignableFrom( __0x11798 ) )
				{
					var __0x11799 = __0x12117( objectType, referenceToObject, anyData, objectName );
					if( __0x11799 != null )
					{
						__0x11494 = objectType;
						__0x11495 = __0x11799;
						__0x12121();
						return true;
					}
				}
			}

			return false;
		}

		private void __0x12130( object __0x12241, EventArgs __0x12242 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && ObjectCreationMode == null )
			{
				if( __0x12129() )
					__0x11492 = true;
			}
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) && ObjectCreationMode == null )
			{
				if( __0x12133() )
					__0x11493 = true;
			}
		}

		void __0x12131()
		{
			__0x12120();
			__0x12124();
			__0x11492 = false;
		}

		private void __0x12132( object __0x12243, EventArgs __0x12244 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Click )
				__0x12131();
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush )
				__0x12134();
		}

		public override void WorkareaModeSet( string name, WorkareaModeClass instance = null )
		{
			base.WorkareaModeSet( name, instance );

			__0x12131();
			__0x12134();

			if( new Rectangle( 0, 0, 1, 1 ).Contains( Viewport.MousePosition ) )
			{
				if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && ObjectCreationMode == null )
				{
					if( __0x12129() )
						__0x11492 = true;
				}
				if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) && ObjectCreationMode == null )
				{
					if( __0x12133() )
						__0x11493 = true;
				}
			}
		}

		public override void ObjectCreationModeSet( ObjectCreationMode mode )
		{
			if( mode == null )
			{
				
				if( new Rectangle( 0, 0, 1, 1 ).Contains( Viewport.MousePosition ) )
				{
					if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) )
					{
						if( __0x12129() )
							__0x11492 = true;
					}
					if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) )
					{
						if( __0x12133() )
							__0x11493 = true;
					}
				}
			}

			base.ObjectCreationModeSet( mode );
		}

		bool __0x12133()
		{

			

			(var createObjectsMode, var destinationMode, var destinationObject) = __0x12146();


			
			var __0x11800 = __0x12146().destinationObject as GroupOfObjects;

			if( __0x11800 != null )
			{
				

				(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
				if( objectType != null )
				{
					
					{
						Mesh __0x11801 = null;
						Metadata.TypeInfo __0x11802 = null;
						{
							var __0x11803 = objectType as Metadata.ComponentTypeInfo;
							if( __0x11803 != null && __0x11803.BasedOnObject != null )
							{
								
								__0x11801 = __0x11803.BasedOnObject as Mesh;

								
								if( __0x11803.BasedOnObject is Import3D )
									__0x11801 = __0x11803.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
							}

							
							if( __0x11801 == null && MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( objectType ) )
							{
								var __0x11804 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
								if( __0x11804 != null )
									__0x11801 = __0x11804.BasedOnObject as Mesh;
							}

							
							if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
								__0x11802 = objectType;
						}

						if( __0x11801 != null || __0x11802 != null )
							return true;
					}

					
					{
						Surface __0x11805 = null;
						{
							var __0x11806 = objectType as Metadata.ComponentTypeInfo;
							if( __0x11806 != null && __0x11806.BasedOnObject != null )
								__0x11805 = __0x11806.BasedOnObject as Surface;
						}

						if( __0x11805 != null )
							return true;
					}
				}
			}
			else
			{
				

				(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
				if( objectType != null )
				{
					if( MetadataManager.GetTypeOfNetType( typeof( Surface ) ).IsAssignableFrom( objectType ) )
						return true;

					var __0x11807 = __0x12116( objectType, referenceToObject );
					if( __0x11807 != null && MetadataManager.GetTypeOfNetType( typeof( ObjectInSpace ) ).IsAssignableFrom( __0x11807 ) )
						return true;
				}
			}

			return false;
		}

		void __0x12134()
		{
			__0x12136( false );
			__0x11493 = false;
		}

		bool __0x12135( Viewport __0x12245 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && !__0x12245.MouseRelativeMode && __0x11493 )
			{
				
				
				if( __0x12139( out _, out _, out _ ) )
				{
					__0x11501 = true;
					__0x11502 = ( ModifierKeys & Keys.Shift ) != 0;

					

					
					return true;
				}

				
				
			}

			return false;
		}

		bool __0x12136( bool __0x12246 )
		{
			

			if( __0x11501 )
			{
				if( __0x12246 )
				{
					

					if( __0x11505.Count != 0 )
						__0x11504.ObjectsRemove( __0x11505.ToArray() );

					if( __0x11506.Count != 0 )
						__0x11504.ObjectsAdd( __0x11506.ToArray() );

					foreach( var __0x12076 in __0x11507 )
						__0x12076.Dispose();

					foreach( var __0x12077 in __0x11508 )
						if( __0x12077.wasEnabled )
							__0x12077.obj.Enabled = true;
				}
				else
				{
					

					var __0x11808 = new UndoMultiAction();

					if( __0x11505.Count != 0 )
					{
						__0x11808.AddAction( new GroupOfObjectsUndo.UndoActionCreateDelete( __0x11504, __0x11505.ToArray(), true, false ) );
					}

					if( __0x11506.Count != 0 )
					{
						__0x11808.AddAction( new GroupOfObjectsUndo.UndoActionCreateDelete( __0x11504, __0x11506.ToArray(), false, false ) );
					}

					if( __0x11507.Count != 0 )
						__0x11808.AddAction( new UndoActionComponentCreateDelete( Document, __0x11507, true ) );

					if( __0x11508.Count != 0 )
					{
						var __0x11809 = new List<Component>( __0x11508.Count );
						foreach( var __0x12078 in __0x11508 )
						{
							if( __0x12078.wasEnabled )
								__0x12078.obj.Enabled = true;
							__0x11809.Add( __0x12078.obj );
						}
						__0x11808.AddAction( new UndoActionComponentCreateDelete( Document, __0x11809, false ) );
					}

					if( __0x11808.Actions.Count != 0 )
						Document.CommitUndoAction( __0x11808 );
				}

				__0x11501 = false;
				__0x11502 = false;
				__0x11504 = null;
				__0x11505.Clear();
				__0x11506.Clear();
				__0x11507.Clear();
				__0x11508.Clear();
				return true;
			}

			return false;
		}

		void __0x12137( Viewport __0x12247 )
		{
			

			(var createObjectsMode, var destinationMode, var destinationObject) = __0x12146();

			
			
			

			
			
			
			
			
			

			

			
			
			
			

			
			
			

			
			
			
			

			


			
			
			

			
			
			
			
			
			
			

			
			
			
			
			

			
			

			

			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			

			
			

			


			

			{

				var __0x11810 = __0x12146().destinationObject as GroupOfObjects;
				var __0x11811 = CreateObjectsBrushRadius;
				var __0x11812 = CreateObjectsBrushStrength;
				var __0x11813 = CreateObjectsBrushHardness;
				var __0x11814 = new FastRandom();

				double GetHardnessFactor( double __0x12248 )
				{
					if( __0x12248 == 0 || __0x12248 <= __0x11813 * __0x11811 )
						return 1;
					else
					{
						double __0x11815;
						if( __0x11811 - __0x11811 * __0x11813 != 0 )
							__0x11815 = ( __0x12248 - __0x11811 * __0x11813 ) / ( __0x11811 - __0x11811 * __0x11813 );
						else
							__0x11815 = 0;
						return (float)Math.Cos( Math.PI / 2 * __0x11815 );
					}
				}

				if( __0x12139( out var toolPosition, out var toolDirection, out var affectsComponents ) )
				
				{
					if( __0x11810 != null )
					{
						

						
						var __0x11816 = __0x11810.GetBaseObjects();


						
						
						
						
						
						
						
						
						
						
						



						if( !__0x11502 )
						{
							

							(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
							if( objectType != null )
							{
								
								{
									Mesh __0x11817 = null;
									ReferenceNoValue __0x11818 = new ReferenceNoValue();
									Metadata.TypeInfo __0x11819 = null;
									{
										var __0x11820 = objectType as Metadata.ComponentTypeInfo;
										if( __0x11820 != null && __0x11820.BasedOnObject != null )
										{
											

											
											__0x11817 = __0x11820.BasedOnObject as Mesh;
											if( __0x11817 != null )
												__0x11818 = ReferenceUtility.MakeResourceReference( __0x11817 );

											
											if( __0x11820.BasedOnObject is Import3D )
											{
												__0x11817 = __0x11820.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
												if( __0x11817 != null )
													__0x11818 = ReferenceUtility.MakeResourceReference( __0x11817 );
											}
										}

										
										if( __0x11817 == null && MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( objectType ) )
										{
											var __0x11821 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
											if( __0x11821 != null )
											{
												__0x11817 = __0x11821.BasedOnObject as Mesh;
												if( __0x11817 != null )
													__0x11818 = new ReferenceNoValue( referenceToObject );
											}
										}

										
										if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
										{
											__0x11819 = objectType;
											__0x11818 = new ReferenceNoValue( "this:$Mesh" );
										}
									}

									if( __0x11817 != null || __0x11819 != null )
									{
										double __0x11822 = 1;
										if( __0x11817 != null )
											__0x11822 = __0x11817.Result.SpaceBounds.CalculatedBoundingSphere.Radius;

										
										int __0x11823;
										{
											var __0x11824 = Math.PI * __0x11811 * __0x11811;

											double __0x11825 = __0x11822 / 2;
											double __0x11826 = Math.PI * __0x11825 * __0x11825;
											if( __0x11826 < 0.1 )
												__0x11826 = 0.1;

											double __0x11827 = __0x11824 / __0x11826;
											__0x11827 /= 20;

											__0x11823 = (int)( __0x11812 * (double)__0x11827 );
											__0x11823 = Math.Max( __0x11823, 1 );
										}

										var __0x11828 = new List<GroupOfObjects.Object>( __0x11823 );

										
										GroupOfObjectsElement_Mesh __0x11829 = null;
										{
											var __0x11830 = __0x11810.GetComponents<GroupOfObjectsElement_Mesh>();

											if( __0x11817 != null )
												__0x11829 = __0x11830.FirstOrDefault( __0x12249 => __0x12249.Mesh.Value == __0x11817 && __0x12249.Enabled );

											if( __0x11819 != null )
											{
												foreach( var __0x12079 in __0x11830 )
												{
													if( __0x12079.Enabled )
													{
														var __0x11831 = __0x12079.GetComponent( "Mesh" ) as Mesh;
														if( __0x11831 != null )
														{
															var __0x11832 = __0x11831.GetComponent( "Mesh Geometry" );
															if( __0x11832 != null && __0x11819.IsAssignableFrom( __0x11832.BaseType ) )
															{
																__0x11829 = __0x12079;
																break;
															}
														}
													}
												}
											}
										}

										
										if( __0x11829 == null )
										{
											var __0x11833 = __0x11810.GetFreeElementIndex();
											var __0x11834 = __0x11810.CreateComponent<GroupOfObjectsElement_Mesh>( enabled: false );

											
											string __0x11835 = "";
											{
												string __0x11836 = "";
												if( __0x11817 != null )
													__0x11836 = ComponentUtility.GetOwnedFileNameOfComponent( __0x11817 );
												if( !string.IsNullOrEmpty( __0x11836 ) )
													__0x11835 = "Mesh " + Path.GetFileNameWithoutExtension( __0x11836 );
												if( string.IsNullOrEmpty( __0x11835 ) )
													__0x11835 = "Mesh";
											}
											if( __0x11834.Parent.GetComponent( __0x11835 ) == null )
												__0x11834.Name = __0x11835;
											else
												__0x11834.Name = __0x11834.Parent.Components.GetUniqueName( __0x11835, false, 2 );

											__0x11834.Index = __0x11833;
											__0x11834.Mesh = __0x11818;
											
											
											__0x11810.ElementTypesCacheNeedUpdate();

											if( __0x11819 != null )
											{
												var __0x11837 = __0x11834.CreateComponent<Mesh>();
												__0x11837.Name = "Mesh";
												var __0x11838 = __0x11837.CreateComponent( __0x11819 );
												__0x11838.Name = "Mesh Geometry";
											}

											__0x11834.Enabled = true;

											__0x11829 = __0x11834;
											
											__0x11507.Add( __0x11829 );
										}

										
										PointContainer3D __0x11839;
										{
											var __0x11840 = new Bounds( toolPosition );
											__0x11840.Expand( __0x11811 + __0x11822 );
											__0x11839 = new PointContainer3D( __0x11840, 100 );

											var __0x11841 = new GroupOfObjects.GetObjectsItem( GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, true, __0x11840 );
											__0x11810.GetObjects( __0x11841 );
											foreach( var __0x12080 in __0x11841.Result )
											{
												ref var __0x11842 = ref __0x11810.ObjectGetData( __0x12080.Object );
												if( __0x11842.Element == __0x11829.Index )
													__0x11839.Add( ref __0x11842.Position );
											}
										}

										for( int __0x11843 = 0; __0x11843 < __0x11823; __0x11843++ )
										{
											Vector3? __0x11844 = null;

											int __0x11845 = 0;
											while( __0x11845 < 10 )
											{
												var __0x11846 = new Vector2( __0x11814.Next( __0x11811 * 2 ) - __0x11811, __0x11814.Next( __0x11811 * 2 ) - __0x11811 );

												
												var __0x11847 = __0x11846.Length();
												if( __0x11847 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11847 ) )
												{
													var __0x11848 = toolPosition.ToVector2() + __0x11846;

													var __0x11849 = SceneUtility.CalculateObjectPositionZ( Scene, __0x11810, toolPosition.Z, __0x11848, __0x11816 );
													if( __0x11849.found )
													{
														var __0x11850 = new Vector3( __0x11848, __0x11849.positionZ );
														
														{
															var __0x11851 = __0x11829.Mesh.Value;
															if( __0x11851 != null )
																__0x11850.Z += -__0x11851.Result.SpaceBounds.CalculatedBoundingBox.Minimum.Z;
														}

														
														if( !__0x11839.Contains( new Sphere( __0x11850, __0x11822 ) ) )
														{
															
															__0x11844 = __0x11850;
															break;
														}
													}
												}

												__0x11845++;
											}

											if( __0x11844 != null )
											{
												var __0x11852 = new GroupOfObjects.Object();
												__0x11852.Element = (ushort)__0x11829.Index.Value;
												__0x11852.Flags = GroupOfObjects.Object.FlagsEnum.Enabled | GroupOfObjects.Object.FlagsEnum.Visible;
												__0x11852.Position = __0x11844.Value;
												__0x11852.Rotation = QuaternionF.Identity;
												__0x11852.Scale = Vector3F.One;
												__0x11852.Color = ColorValue.One;
												__0x11828.Add( __0x11852 );

												
												__0x11839.Add( ref __0x11852.Position );
											}
										}

										__0x11504 = __0x11810;

										var __0x11853 = __0x11810.ObjectsAdd( __0x11828.ToArray() );
										__0x11505.AddRange( __0x11853 );
									}
								}

								
								{
									Surface __0x11854 = null;
									{
										var __0x11855 = objectType as Metadata.ComponentTypeInfo;
										if( __0x11855 != null && __0x11855.BasedOnObject != null )
											__0x11854 = __0x11855.BasedOnObject as Surface;
									}

									if( __0x11854 != null )
									{
										double __0x11856;
										double __0x11857;
										{
											var __0x11858 = __0x11854.GetComponents<SurfaceGroupOfElements>();
											if( __0x11858.Length != 0 )
											{
												__0x11856 = 0;
												__0x11857 = 0;
												foreach( var __0x12081 in __0x11858 )
												{
													if( __0x12081.OccupiedAreaRadius > __0x11856 )
														__0x11856 = __0x12081.OccupiedAreaRadius;
													__0x11857 += __0x12081.OccupiedAreaRadius;
												}
												__0x11857 /= __0x11858.Length;
											}
											else
											{
												__0x11856 = 1;
												__0x11857 = 1;
											}
										}

										
										int __0x11859;
										{
											var __0x11860 = Math.PI * __0x11811 * __0x11811;

											double __0x11861 = __0x11857;
											double __0x11862 = Math.PI * __0x11861 * __0x11861;
											if( __0x11862 < 0.1 )
												__0x11862 = 0.1;

											double __0x11863 = __0x11860 / __0x11862;
											__0x11863 /= 20;

											__0x11859 = (int)( __0x11812 * (double)__0x11863 );
											__0x11859 = Math.Max( __0x11859, 1 );
										}

										var __0x11864 = new List<GroupOfObjects.Object>( __0x11859 );

										
										var __0x11865 = __0x11810.GetComponents<GroupOfObjectsElement_Surface>().FirstOrDefault( __0x12250 => __0x12250.Surface.Value == __0x11854 );

										
										if( __0x11865 == null )
										{
											var __0x11866 = __0x11810.GetFreeElementIndex();

											var __0x11867 = __0x11810.CreateComponent<GroupOfObjectsElement_Surface>();

											
											string __0x11868 = "";
											{
												var __0x11869 = ComponentUtility.GetOwnedFileNameOfComponent( __0x11854 );
												if( !string.IsNullOrEmpty( __0x11869 ) )
													__0x11868 = "Surface " + Path.GetFileNameWithoutExtension( __0x11869 );
												if( string.IsNullOrEmpty( __0x11868 ) )
													__0x11868 = "Surface";
											}
											if( __0x11867.Parent.GetComponent( __0x11868 ) == null )
												__0x11867.Name = __0x11868;
											else
												__0x11867.Name = __0x11867.Parent.Components.GetUniqueName( __0x11868, false, 2 );

											__0x11867.Index = __0x11866;
											
											__0x11867.Surface = ReferenceUtility.MakeResourceReference( __0x11854 );
											__0x11810.ElementTypesCacheNeedUpdate();

											__0x11865 = __0x11867;

											
											__0x11507.Add( __0x11865 );
										}

										var __0x11870 = new Bounds( toolPosition );
										__0x11870.Expand( __0x11811 + __0x11856 * 4.01 );

										var __0x11871 = new OctreeContainer.InitSettings();
										__0x11871.InitialOctreeBounds = __0x11870;
										__0x11871.OctreeBoundsRebuildExpand = Vector3.Zero;
										__0x11871.MinNodeSize = __0x11870.GetSize() / 40;
										var __0x11872 = new OctreeContainer( __0x11871 );

										var __0x11873 = new List<Sphere>( 256 );

										{
											var __0x11874 = new GroupOfObjects.GetObjectsItem( GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, true, __0x11870 );
											__0x11810.GetObjects( __0x11874 );
											foreach( var __0x12082 in __0x11874.Result )
											{
												ref var __0x11875 = ref __0x11810.ObjectGetData( __0x12082.Object );
												if( __0x11875.Element == __0x11865.Index )
												{
													var __0x11876 = __0x11854.GetGroup( __0x11875.VariationGroup );
													if( __0x11876 != null )
													{
														__0x11873.Add( new Sphere( __0x11875.Position, __0x11876.OccupiedAreaRadius ) );

														var __0x11877 = new Bounds( __0x11875.Position );
														__0x11877.Expand( __0x11876.OccupiedAreaRadius * 4 );
														__0x11872.AddObject( __0x11877, 1 );
													}
												}
											}
										}

										for( int __0x11878 = 0; __0x11878 < __0x11859; __0x11878++ )
										{
											__0x11854.GetRandomVariation( new Surface.GetRandomVariationOptions(), __0x11814, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
											var __0x11879 = __0x11854.GetGroup( groupIndex );

											Vector3? __0x11880 = null;

											for( var __0x11881 = 0; __0x11881 < 3; __0x11881++ )
											{
												var __0x11882 = 1.0;
												switch( __0x11881 )
												{
												case 0: __0x11882 = 4; break;
												case 1: __0x11882 = 2; break;
												case 2: __0x11882 = 1; break;
												}

												int __0x11883 = 0;
												while( __0x11883 < 10 )
												{
													var __0x11884 = new Vector2( __0x11814.Next( __0x11811 * 2 ) - __0x11811, __0x11814.Next( __0x11811 * 2 ) - __0x11811 );

													
													var __0x11885 = __0x11884.Length();
													if( __0x11885 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11885 ) )
													{
														var __0x11886 = toolPosition.ToVector2() + __0x11884;

														var __0x11887 = SceneUtility.CalculateObjectPositionZ( Scene, __0x11810, toolPosition.Z, __0x11886, __0x11816 );
														if( __0x11887.found )
														{
															var __0x11888 = new Vector3( __0x11886, __0x11887.positionZ );

															var __0x11889 = new Sphere( __0x11888, __0x11879.OccupiedAreaRadius );
															__0x11889.ToBounds( out var objBounds );

															var __0x11890 = false;

															foreach( var __0x12083 in __0x11872.GetObjects( objBounds, 0xFFFFFFFF, OctreeContainer.ModeEnum.All ) )
															{
																var __0x11891 = __0x11873[ __0x12083 ];
																__0x11891.Radius *= 0.25;
																__0x11891.Radius *= __0x11882;

																if( ( __0x11888 - __0x11891.Center ).LengthSquared() < ( __0x11891.Radius + __0x11889.Radius ) * ( __0x11891.Radius + __0x11889.Radius ) )
																{
																	__0x11890 = true;
																	break;
																}
															}

															if( !__0x11890 )
															{
																
																__0x11880 = __0x11888;
																goto end;
															}
														}
													}

													__0x11883++;
												}
											}

											end:;

											if( __0x11880 != null )
											{
												
												var __0x11892 = new GroupOfObjects.Object();
												__0x11892.Element = (ushort)__0x11865.Index.Value;
												__0x11892.VariationGroup = groupIndex;
												__0x11892.VariationElement = elementIndex;
												__0x11892.Flags = GroupOfObjects.Object.FlagsEnum.Enabled | GroupOfObjects.Object.FlagsEnum.Visible;
												__0x11892.Position = __0x11880.Value + new Vector3( 0, 0, positionZ );
												__0x11892.Rotation = rotation;
												__0x11892.Scale = scale;
												__0x11892.Color = ColorValue.One;
												__0x11864.Add( __0x11892 );

												

												__0x11873.Add( new Sphere( __0x11880.Value, __0x11879.OccupiedAreaRadius ) );

												var __0x11893 = new Bounds( __0x11880.Value );
												__0x11893.Expand( __0x11879.OccupiedAreaRadius * 4 );
												__0x11872.AddObject( __0x11893, 1 );
											}
										}

										__0x11872.Dispose();

										__0x11504 = __0x11810;

										var __0x11894 = __0x11810.ObjectsAdd( __0x11864.ToArray() );
										__0x11505.AddRange( __0x11894 );
									}
								}

							}

						}
						else
						{
							

							(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
							if( objectType != null )
							{
								int __0x11895 = -1;
								{
									
									{
										Mesh __0x11896 = null;
										Metadata.TypeInfo __0x11897 = null;
										{
											var __0x11898 = objectType as Metadata.ComponentTypeInfo;
											if( __0x11898 != null && __0x11898.BasedOnObject != null )
											{
												
												__0x11896 = __0x11898.BasedOnObject as Mesh;

												
												if( __0x11898.BasedOnObject is Import3D )
													__0x11896 = __0x11898.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
											}

											
											if( __0x11896 == null && MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( objectType ) )
											{
												var __0x11899 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
												if( __0x11899 != null )
													__0x11896 = __0x11899.BasedOnObject as Mesh;
											}

											
											if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
												__0x11897 = objectType;
										}

										var __0x11900 = __0x11810.GetComponents<GroupOfObjectsElement_Mesh>();

										if( __0x11896 != null )
										{
											var __0x11901 = __0x11900.FirstOrDefault( __0x12251 => __0x12251.Mesh.Value == __0x11896 && __0x12251.Enabled );
											if( __0x11901 != null )
												__0x11895 = __0x11901.Index;
										}

										if( __0x11897 != null )
										{
											foreach( var __0x12084 in __0x11900 )
											{
												if( __0x12084.Enabled )
												{
													var __0x11902 = __0x12084.GetComponent( "Mesh" ) as Mesh;
													if( __0x11902 != null )
													{
														var __0x11903 = __0x11902.GetComponent( "Mesh Geometry" );
														if( __0x11903 != null && __0x11897.IsAssignableFrom( __0x11903.BaseType ) )
														{
															__0x11895 = __0x12084.Index;
															break;
														}
													}
												}
											}
										}
									}

									
									{
										Surface __0x11904 = null;
										{
											var __0x11905 = objectType as Metadata.ComponentTypeInfo;
											if( __0x11905 != null && __0x11905.BasedOnObject != null )
												__0x11904 = __0x11905.BasedOnObject as Surface;
										}

										if( __0x11904 != null )
										{
											var __0x11906 = __0x11810.GetComponents<GroupOfObjectsElement_Surface>().FirstOrDefault( __0x12252 => __0x12252.Surface.Value == __0x11904 );
											if( __0x11906 != null )
												__0x11895 = __0x11906.Index;
										}
									}
								}

								if( __0x11895 != -1 )
								{
									var __0x11907 = new Bounds( toolPosition );
									__0x11907.Expand( __0x11811 );

									var __0x11908 = new GroupOfObjects.GetObjectsItem( GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, false, __0x11907 );
									__0x11810.GetObjects( __0x11908 );

									var __0x11909 = new List<int>( __0x11908.Result.Length );

									foreach( var __0x12085 in __0x11908.Result )
									{
										ref var __0x11910 = ref __0x11810.ObjectGetData( __0x12085.Object );
										var __0x11911 = ( toolPosition.ToVector2() - __0x11910.Position.ToVector2() ).Length();

										if( __0x11910.Element == __0x11895 && __0x11911 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11911 ) && __0x11814.NextDouble() <= __0x11812 + 0.05 )
										{
											__0x11504 = __0x11810;

											__0x11909.Add( __0x12085.Object );
											__0x11506.Add( __0x11910 );
										}
									}

									if( __0x11909.Count != 0 )
										__0x11810.ObjectsRemove( __0x11909.ToArray() );
								}
							}
						}

					}
					else
					{
						

						if( !__0x11502 )
						{
							

							(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
							if( objectType != null )
							{
								Component __0x11912 = __0x12146().destinationObject as Layer;
								if( __0x11912 == null )
									__0x11912 = Scene;

								if( MetadataManager.GetTypeOfNetType( typeof( Surface ) ).IsAssignableFrom( objectType ) )
								{
									

									Surface __0x11913 = null;
									{
										var __0x11914 = objectType as Metadata.ComponentTypeInfo;
										if( __0x11914 != null && __0x11914.BasedOnObject != null )
											__0x11913 = __0x11914.BasedOnObject as Surface;
									}

									if( __0x11913?.Result != null )
									{
										var __0x11915 = new ESet<Mesh>();
										__0x11915.AddRangeWithCheckAlreadyContained( __0x11913.Result.GetAllMeshes() );

										double __0x11916;
										double __0x11917;
										{
											var __0x11918 = __0x11913.GetComponents<SurfaceGroupOfElements>();
											if( __0x11918.Length != 0 )
											{
												__0x11916 = 0;
												__0x11917 = 0;
												foreach( var __0x12086 in __0x11918 )
												{
													if( __0x12086.OccupiedAreaRadius > __0x11916 )
														__0x11916 = __0x12086.OccupiedAreaRadius;
													__0x11917 += __0x12086.OccupiedAreaRadius;
												}
												__0x11917 /= __0x11918.Length;
											}
											else
											{
												__0x11916 = 1;
												__0x11917 = 1;
											}
										}

										
										int __0x11919;
										{
											var __0x11920 = Math.PI * __0x11811 * __0x11811;

											double __0x11921 = __0x11917;
											double __0x11922 = Math.PI * __0x11921 * __0x11921;
											if( __0x11922 < 0.1 )
												__0x11922 = 0.1;

											double __0x11923 = __0x11920 / __0x11922;
											__0x11923 /= 20;

											__0x11919 = (int)( __0x11812 * (double)__0x11923 );
											__0x11919 = Math.Max( __0x11919, 1 );
										}

										for( int __0x11924 = 0; __0x11924 < __0x11919; __0x11924++ )
										{
											__0x11913.GetRandomVariation( new Surface.GetRandomVariationOptions(), __0x11814, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
											var __0x11925 = __0x11913.GetGroup( groupIndex );

											Vector3? __0x11926 = null;

											int __0x11927 = 0;
											while( __0x11927 < 10 )
											{
												var __0x11928 = new Vector2( __0x11814.Next( __0x11811 * 2 ) - __0x11811, __0x11814.Next( __0x11811 * 2 ) - __0x11811 );

												
												var __0x11929 = __0x11928.Length();
												if( __0x11929 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11929 ) )
												{
													var __0x11930 = toolPosition.ToVector2() + __0x11928;

													
													var __0x11931 = SceneUtility.CalculateObjectPositionZ( Scene, null, toolPosition.Z, __0x11930 );
													if( __0x11931.found )
													{
														var __0x11932 = new Vector3( __0x11930, __0x11931.positionZ );

														
														bool __0x11933 = true;
														{
															var __0x11934 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, new Sphere( __0x11932, __0x11925.OccupiedAreaRadius ) );
															Scene.GetObjectsInSpace( __0x11934 );
															foreach( var __0x12087 in __0x11934.Result )
															{
																var __0x11935 = __0x12087.Object;

																if( ( toolPosition.ToVector2() - __0x11935.TransformV.Position.ToVector2() ).Length() <= __0x11925.OccupiedAreaRadius * __0x11925.OccupiedAreaRadius )
																{
																	var __0x11936 = __0x11935 as MeshInSpace;
																	if( __0x11936 != null && __0x11936.Mesh.Value != null && __0x11915.Contains( __0x11936.Mesh ) )
																	{
																		__0x11933 = false;
																		break;
																	}
																}
															}
														}

														if( __0x11933 )
														{
															
															__0x11926 = __0x11932;
															break;
														}
													}
												}

												__0x11927++;
											}

											if( __0x11926 != null )
											{
												ObjectInSpace __0x11937 = null;
												{
													var __0x11938 = __0x11925.GetComponents();
													if( elementIndex < __0x11938.Length )
													{
														var __0x11939 = __0x11938[ elementIndex ];

														
														var __0x11940 = __0x11939 as SurfaceElement_Mesh;
														if( __0x11940 != null )
														{
															var __0x11941 = __0x11912.CreateComponent<MeshInSpace>( enabled: false );
															if( __0x11941 != null )
															{
																
																

																var __0x11942 = __0x11940.Mesh.Value;
																if( __0x11942 != null )
																	__0x11941.Mesh = new ReferenceNoValue( ReferenceUtility.CalculateResourceReference( __0x11942 ) );
																

																var __0x11943 = __0x11940.ReplaceMaterial.Value;
																if( __0x11943 != null )
																	__0x11941.ReplaceMaterial = new ReferenceNoValue( ReferenceUtility.CalculateResourceReference( __0x11943 ) );

																__0x11941.VisibilityDistanceFactor = __0x11940.VisibilityDistanceFactor;
																__0x11941.CastShadows = __0x11940.CastShadows;
																__0x11941.ReceiveDecals = __0x11940.ReceiveDecals;
																__0x11941.MotionBlurFactor = __0x11940.MotionBlurFactor;

																__0x11937 = __0x11941;
															}
														}

													}
												}

												if( __0x11937 != null )
												{
													
													var __0x11944 = ObjectInSpaceUtility.CalculateObjectToTransform( __0x11937 );
													if( __0x11944 == null )
														__0x11944 = __0x11937;
													__0x11944.Transform = new Transform( __0x11926.Value + new Vector3( 0, 0, positionZ ), rotation, scale );

													
													__0x11937.Name = ComponentUtility.GetNewObjectUniqueName( __0x11937 );
													
													__0x11937.NewObjectSetDefaultConfiguration();
													
													__0x11937.Enabled = true;

													__0x11507.Add( __0x11937 );
												}
											}
										}

									}
								}
								else
								{
									

									double __0x11945 = 1;
									{
										var __0x11946 = objectType as Metadata.ComponentTypeInfo;
										if( __0x11946 != null && __0x11946.BasedOnObject != null )
										{
											
											var __0x11947 = __0x11946.BasedOnObject as Mesh;
											if( __0x11947 != null )
												__0x11945 = __0x11947.Result.SpaceBounds.CalculatedBoundingSphere.Radius;

											
											if( __0x11946.BasedOnObject is Import3D )
											{
												__0x11947 = __0x11946.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
												if( __0x11947 != null )
													__0x11945 = __0x11947.Result.SpaceBounds.CalculatedBoundingSphere.Radius;
											}
										}

										
										if( MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( objectType ) )
										{
											var __0x11948 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
											if( __0x11948 != null )
											{
												var __0x11949 = __0x11948.BasedOnObject as Mesh;
												if( __0x11949 != null )
													__0x11945 = __0x11949.Result.SpaceBounds.CalculatedBoundingSphere.Radius;
											}
										}
									}

									
									int __0x11950;
									{
										var __0x11951 = Math.PI * __0x11811 * __0x11811;

										double __0x11952 = __0x11945 / 2;
										double __0x11953 = Math.PI * __0x11952 * __0x11952;
										if( __0x11953 < 0.1 )
											__0x11953 = 0.1;

										double __0x11954 = __0x11951 / __0x11953;
										__0x11954 /= 20;

										__0x11950 = (int)( __0x11812 * (double)__0x11954 );
										__0x11950 = Math.Max( __0x11950, 1 );
									}


									for( int __0x11955 = 0; __0x11955 < __0x11950; __0x11955++ )
									{
										Vector3? __0x11956 = null;

										int __0x11957 = 0;
										while( __0x11957 < 10 )
										{
											var __0x11958 = new Vector2( __0x11814.Next( __0x11811 * 2 ) - __0x11811, __0x11814.Next( __0x11811 * 2 ) - __0x11811 );

											
											var __0x11959 = __0x11958.Length();
											if( __0x11959 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11959 ) )
											{
												var __0x11960 = toolPosition.ToVector2() + __0x11958;

												var __0x11961 = SceneUtility.CalculateObjectPositionZ( Scene, null, toolPosition.Z, __0x11960 );
												if( __0x11961.found )
												{
													var __0x11962 = new Vector3( __0x11960, __0x11961.positionZ );

													
													bool __0x11963 = true;
													{
														var __0x11964 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, new Sphere( __0x11962, __0x11945 ) );
														Scene.GetObjectsInSpace( __0x11964 );
														foreach( var __0x12088 in __0x11964.Result )
														{
															var __0x11965 = __0x12088.Object;
															if( __0x12118( objectType, referenceToObject, __0x11965 ) && ( toolPosition.ToVector2() - __0x11965.TransformV.Position.ToVector2() ).Length() <= __0x11945 * __0x11945 )
															{
																__0x11963 = false;
																break;
															}
														}
													}

													if( __0x11963 )
													{
														
														__0x11956 = __0x11962;
														break;
													}
												}
											}

											__0x11957++;
										}

										if( __0x11956 != null )
										{
											var __0x11966 = __0x12117( objectType, referenceToObject, anyData, objectName );
											if( __0x11966 != null )
											{
												var __0x11967 = __0x11966 as ObjectInSpace;
												if( __0x11967 != null )
												{
													var __0x11968 = ObjectInSpaceUtility.CalculateObjectToTransform( __0x11967 );
													if( __0x11968 == null )
														__0x11968 = __0x11967;

													var __0x11969 = __0x11956.Value;
													
													__0x11969.Z += __0x11968.TransformV.Position.Z - __0x11968.SpaceBounds.CalculatedBoundingBox.Minimum.Z;

													__0x11968.Transform = new Transform( __0x11969, __0x11968.Transform.Value.Rotation, __0x11968.Transform.Value.Scale );
												}

												__0x11507.Add( __0x11966 );
											}
										}
									}
								}
							}
						}
						else
						{
							

							(var objectType, var referenceToObject, var anyData, var objectName) = __0x12147();
							if( objectType != null )
							{
								if( MetadataManager.GetTypeOfNetType( typeof( Surface ) ).IsAssignableFrom( objectType ) )
								{
									

									Surface __0x11970 = null;
									{
										var __0x11971 = objectType as Metadata.ComponentTypeInfo;
										if( __0x11971 != null && __0x11971.BasedOnObject != null )
											__0x11970 = __0x11971.BasedOnObject as Surface;
									}

									if( __0x11970?.Result != null )
									{
										var __0x11972 = new ESet<Mesh>();
										__0x11972.AddRangeWithCheckAlreadyContained( __0x11970.Result.GetAllMeshes() );

										var __0x11973 = new Bounds( toolPosition );
										__0x11973.Expand( __0x11811 );

										var __0x11974 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x11973 );
										Scene.GetObjectsInSpace( __0x11974 );

										var __0x11975 = new List<Component>( __0x11974.Result.Length );
										foreach( var __0x12089 in __0x11974.Result )
										{
											var __0x11976 = __0x12089.Object;
											var __0x11977 = ( toolPosition.ToVector2() - __0x11976.TransformV.Position.ToVector2() ).Length();

											if( __0x11977 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11977 ) && __0x11814.NextDouble() <= __0x11812 + 0.05 )
											{
												var __0x11978 = __0x11976 as MeshInSpace;
												if( __0x11978 != null && __0x11978.Mesh.Value != null && __0x11972.Contains( __0x11978.Mesh ) )
													__0x11975.Add( __0x11976 );
											}
										}

										foreach( var __0x12090 in __0x11975 )
										{
											__0x11508.Add( (__0x12090, __0x12090.Enabled) );
											__0x12090.Enabled = false;
										}

									}
								}
								else
								{
									

									var __0x11979 = __0x12116( objectType, referenceToObject );
									if( __0x11979 != null && MetadataManager.GetTypeOfNetType( typeof( ObjectInSpace ) ).IsAssignableFrom( __0x11979 ) )
									{
										var __0x11980 = new Bounds( toolPosition );
										__0x11980.Expand( __0x11811 );

										var __0x11981 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, __0x11979, true, __0x11980 );
										Scene.GetObjectsInSpace( __0x11981 );

										var __0x11982 = new List<Component>( __0x11981.Result.Length );
										foreach( var __0x12091 in __0x11981.Result )
										{
											var __0x11983 = __0x12091.Object;
											var __0x11984 = ( toolPosition.ToVector2() - __0x11983.TransformV.Position.ToVector2() ).Length();

											if( __0x12118( objectType, referenceToObject, __0x11983 ) && __0x11984 <= __0x11811 && __0x11814.NextDouble() <= GetHardnessFactor( __0x11984 ) && __0x11814.NextDouble() <= __0x11812 + 0.05 )
											{
												__0x11982.Add( __0x11983 );
											}
										}

										foreach( var __0x12092 in __0x11982 )
										{
											__0x11508.Add( (__0x12092, __0x12092.Enabled) );
											__0x12092.Enabled = false;
										}
									}
								}
							}
						}
					}
				}
			}
		}

		void __0x12138( Viewport __0x12253, float __0x12254 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && __0x11501 && !__0x12253.MouseRelativeMode )
			{
				
				__0x11503 -= __0x12254;
				while( __0x11503 < 0 )
				{
					__0x12137( __0x12253 );
					__0x11503 += .05f;
				}
			}
		}

		bool __0x12139( out Vector3 __0x12255, out Vector3 __0x12256, out Component[] __0x12257 )
		{
			(var createObjectsMode, var destinationMode, var destinationObject) = __0x12146();

			if( createObjectsMode == CreateObjectsModeEnum.Brush )
			{

				

				var __0x11985 = new GetMouseOverObjectToSelectByClickContext();
				__0x11985.CheckOnlyObjectsWithEnabledSelectionByCursorFlag = false;
				GetMouseOverObjectToSelectByClick( __0x11985 );

				if( __0x11985.ResultObject != null && __0x11985.ResultPosition.HasValue )
				{
					var __0x11986 = __0x11985.ResultObject as MeshInSpace;
					Terrain __0x11987 = null;
					if( __0x11986 != null )
					{
						__0x11987 = Terrain.GetTerrainByMeshInSpace( __0x11986 );
						if( __0x11987 != null )
							__0x11986 = null;
					}
					if( __0x11985.CheckOnlyObjectsWithEnabledSelectionByCursorFlag && __0x11986 != null && !__0x11986.EnabledSelectionByCursor )
						__0x11986 = null;


					if( __0x11986 != null || __0x11987 != null )
					{
						__0x12255 = __0x11985.ResultPosition.Value;
						var __0x11988 = Viewport.CameraSettings.GetRayByScreenCoordinates( Viewport.MousePosition );
						__0x12256 = __0x11988.Direction;

						if( __0x11986 != null )
							__0x12257 = new Component[] { __0x11986 };
						else
							__0x12257 = new Component[] { __0x11987 };

						return true;
					}

				}
			}

			__0x12255 = Vector3.Zero;
			__0x12256 = Vector3.Zero;
			__0x12257 = null;
			return false;
		}

		
		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		

		
		
		
		
		


		

		
		
		
		
		
		
		


		
		
		
		
		
		
		
		
		
		
		

		
		
		

		void __0x12140( Viewport __0x12258 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && __0x11493 && !__0x12258.MouseRelativeMode )
			{
				bool __0x11989;
				if( __0x11501 )
					__0x11989 = __0x11502;
				else
					__0x11989 = ( ModifierKeys & Keys.Shift ) != 0;

				if( __0x12139( out var toolPosition, out var toolDirection, out var affectsComponents ) )
				{
					var __0x11990 = CreateObjectsBrushRadius;




					

					
					
					

					

					
					




					
					toolDirection = new Vector3( 0, 0, -1 );




					var __0x11991 = new Cylinder( toolPosition - toolDirection * __0x11990, toolPosition + toolDirection * __0x11990, __0x11990 );
					
					var __0x11992 = __0x11991.ToBounds();

					
					

					var __0x11993 = __0x12258.Simple3DRenderer;

					
					var __0x11994 = !__0x11989 ? new ColorValue( 1, 1, 0, 0.3 ) : new ColorValue( 1, 0, 0, 0.3 );
					__0x11993.SetColor( __0x11994 );

					
					var __0x11995 = new RenderingPipeline.RenderSceneData.CutVolumeItem( __0x11991, true, false, false, true );

					
					__0x11993.SetCutVolumes( new RenderingPipeline.RenderSceneData.CutVolumeItem[] { __0x11995 } );

					foreach( var __0x12093 in affectsComponents )
					{
						
						var __0x11996 = __0x12093 as MeshInSpace;
						if( __0x11996 != null )
						{
							var __0x11997 = __0x11996.MeshOutput;
							if( __0x11997 != null )
								__0x11993.AddMesh( __0x11997.Result, __0x11996.Transform.Value.ToMatrix4(), false, false );
						}

						
						var __0x11998 = __0x12093 as Terrain;
						if( __0x11998 != null )
						{
							__0x11998.GetGeometryFromTiles( delegate ( SpaceBounds __0x12259, Vector3[] __0x12260, int[] __0x12261 )
							{
								if( __0x12259.CalculatedBoundingBox.Intersects( ref __0x11992 ) )
									__0x11993.AddTriangles( __0x12260, __0x12261, Matrix4.Identity, false, false );
							} );
						}
					}

					__0x11993.ResetCutVolumes();




					
					
					
					
					
					

					
					
					

					
					
					
					
					

					
					
					

					
					
					
					
					

					
					

					
				}

				
				
				
				
				
				
				
				
				
				
				
				
				

				

				
				
				
				
				

				

				
				
				
				
				
				

				
				
				
				
				

				
				



				

				
				
				
				
				
				

				
				

				
				
				

				
				
				

				
				
				
			}
		}

		void __0x12141()
		{
			if( Time.Current > __0x11486 + 1.0 )
			{
				__0x11486 = Time.Current;

				__0x11485.Clear();

				if( CreateObjectsMode == CreateObjectsModeEnum.Drop || CreateObjectsMode == CreateObjectsModeEnum.Click )
				{
					

					__0x11485.Add( (CreateObjectsDestinationModeEnum.SeparateObjectsToRoot, null, EditorLocalization.Translate( "General", "to Root" )) );

					foreach( var __0x12094 in Scene.GetComponents<Layer>( checkChildren: true, onlyEnabledInHierarchy: true ) )
					{
						if( __0x12094.DisplayInEditor )
							__0x11485.Add( (CreateObjectsDestinationModeEnum.SeparateObjectsToLayer, __0x12094, "to " + __0x12094.Name) );
					}
				}
				else
				{
					

					
					__0x11485.Add( (CreateObjectsDestinationModeEnum.Auto, null, EditorLocalization.Translate( "General", "Auto" )) );

					
					
					

					
					foreach( var __0x12095 in Scene.GetComponents<GroupOfObjects>( checkChildren: true, onlyEnabledInHierarchy: true ) )
					{
						if( __0x12095.DisplayInEditor && __0x12095.EditorAllowUsePaintBrush )
							__0x11485.Add( (CreateObjectsDestinationModeEnum.ToGroupOfObjects, __0x12095, "to " + __0x12095.Name) );
					}

					
					__0x11485.Add( (CreateObjectsDestinationModeEnum.SeparateObjectsToRoot, null, EditorLocalization.Translate( "General", "Separate objects to Root" )) );
					foreach( var __0x12096 in Scene.GetComponents<Layer>( checkChildren: true, onlyEnabledInHierarchy: true ) )
					{
						if( __0x12096.DisplayInEditor )
							__0x11485.Add( (CreateObjectsDestinationModeEnum.SeparateObjectsToLayer, __0x12096, "Separate objects to " + __0x12096.Name) );
					}
				}
			}
		}

		void __0x12142()
		{
			if( Time.Current > __0x11489 + 1.0 )
			{
				__0x11489 = Time.Current;

				var __0x11999 = new ESet<PaintLayer>();
				{
					var __0x12000 = Scene.GetComponents<Terrain>( checkChildren: true );
					foreach( var __0x12097 in __0x12000 )
					{
						foreach( var __0x12098 in __0x12097.GetComponents<PaintLayer>() )
						{
							if( __0x12098.Enabled && __0x12098.MaskImage.Value == null )
								__0x11999.Add( __0x12098 );
						}
					}
				}

				__0x11488.Clear();
				

				foreach( var __0x12099 in __0x11999 )
				{
					var __0x12001 = "";

					Component __0x12002 = __0x12099.Material.Value;
					if( __0x12002 == null )
						__0x12002 = __0x12099.Surface.Value;

					if( __0x12002 != null )
					{
						if( __0x12002.Parent == null )
						{
							var __0x12003 = ComponentUtility.GetOwnedFileNameOfComponent( __0x12002 );
							if( !string.IsNullOrEmpty( __0x12003 ) )
								__0x12001 = Path.GetFileNameWithoutExtension( __0x12003 );
						}
						else
							__0x12001 = __0x12002.Name;
					}

					if( string.IsNullOrEmpty( __0x12001 ) )
						__0x12001 = __0x12099.ToString();

					__0x11488.Add( (__0x12099, __0x12001) );
				}
			}
		}

		void __0x12143()
		{
			var __0x12004 = EditorActions.GetByName( "Terrain Paint Layers" );
			if( __0x12004 != null && !__0x12004.CompletelyDisabled )
			{
				var __0x12005 = __0x12004.ListBox.SelectedIndex;
				if( __0x12005 >= 0 && __0x12005 < __0x11488.Count )
					__0x11490 = __0x11488[ __0x12005 ].Obj;
				else
					__0x11490 = null;
			}
		}

		public PaintLayer TerrainPaintLayersGetSelected()
		{
			if( __0x11490 != null )
			{
				if( __0x11490.Disposed || __0x11490.ParentRoot != Scene )
					__0x11490 = null;
			}
			return __0x11490;
		}

		protected virtual object[] SelectByDoubleClick( object overObject )
		{
			var __0x12006 = new ESet<object>();

			var __0x12007 = ProjectSettings.Get.SceneEditor.SceneEditorSelectByDoubleClickRadius.Value;

			var __0x12008 = overObject as ObjectInSpace;
			if( __0x12008 != null && __0x12007 > 0 )
			{
				var __0x12009 = new Sphere( __0x12008.TransformV.Position, __0x12007 );
				var __0x12010 = new Scene.GetObjectsInSpaceItem( Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x12009 );
				Scene.GetObjectsInSpace( __0x12010 );

				foreach( var __0x12100 in __0x12010.Result )
				{
					var __0x12011 = __0x12100.Object;
					if( __0x12011.VisibleInHierarchy && __0x12011.CanBeSelectedInHierarchy && ( __0x12011.TransformV.Position - __0x12008.TransformV.Position ).Length() <= __0x12007 )
					{
						if( __0x12011.BaseType == __0x12008.BaseType )
						{
							
							var __0x12012 = __0x12011 as MeshInSpace;
							var __0x12013 = __0x12008 as MeshInSpace;
							if( __0x12012 != null && __0x12013 != null )
							{
								if( __0x12012.Mesh.Value != __0x12013.Mesh.Value )
									continue;
							}

							__0x12006.AddWithCheckAlreadyContained( __0x12011 );
						}
					}
				}
			}

			return __0x12006.ToArray();
		}

		void __0x12144( List<string> __0x12262 )
		{
			Component __0x12014 = null;
			

			foreach( var __0x12101 in SelectedObjects )
			{
				var __0x12015 = __0x12101 as Terrain as Component;
				
				if( __0x12015 != null )
					__0x12014 = __0x12015;

				var __0x12016 = __0x12101 as PaintLayer;
				if( __0x12016 != null )
				{
					var __0x12017 = __0x12016.Parent as Terrain as Component;
					
					if( __0x12017 != null )
						__0x12014 = __0x12017;
				}
			}

			if( __0x12014 != null )
			{
				var __0x12018 = new List<(PaintLayer, int)>();

				foreach( var __0x12102 in __0x12014.GetComponents<PaintLayer>() )
				{
					if( __0x12102.Enabled && __0x12102.IsDataAvailable() )
					{
						var __0x12019 = __0x12102.Material.Value?.Result;
						if( __0x12019 == null )
							__0x12019 = ResourceUtility.MaterialNull.Result;

						int __0x12020;
						if( __0x12019.deferredShadingSupport )
							__0x12020 = 0;
						else if( __0x12019.Transparent )
							__0x12020 = 2;
						else
							__0x12020 = 1;

						__0x12018.Add( (__0x12102, __0x12020) );
					}
				}

				var __0x12021 = new List<(PaintLayer, int)>( __0x12018 );

				CollectionUtility.InsertionSort( __0x12021, delegate ( (PaintLayer, int) __0x12263, (PaintLayer, int) __0x12264 )
				{
					if( __0x12263.Item2 < __0x12264.Item2 )
						return -1;
					if( __0x12263.Item2 > __0x12264.Item2 )
						return 1;
					return 0;
				} );

				var __0x12022 = !__0x12018.SequenceEqual( __0x12021 );
				if( __0x12022 )
				{
					if( __0x12262.Count != 0 )
						__0x12262.Add( "" );
					__0x12262.Add( "The layers of this terrain are displayed in a different sequence than they are defined" );
					__0x12262.Add( "in the list because the materials of the layers drawn at different stages of rendering" );
					__0x12262.Add( "(deferred, opacity forward, transparent)." );
					
				}
			}
		}

		void __0x12145()
		{
			Component __0x12023 = null;
			string __0x12024 = "";

			var __0x12025 = GetMouseOverObjectToSelectByClick( out var context );
			if( __0x12025 != null && context.ScreenLabelItem != null )
			{
				__0x12023 = context.ResultObject as Component;
				if( __0x12023 != null )
					__0x12024 = !string.IsNullOrEmpty( __0x12023.Name ) ? __0x12023.Name : __0x12023.ToString();
			}

			if( __0x11511 != __0x12023 || __0x11512 != __0x12024 )
			{
				__0x11511 = __0x12023;
				__0x11512 = __0x12024;

				__0x11510.Hide( ViewportControl );
				__0x11510.SetToolTip( ViewportControl, __0x11512 );
			}
		}

		(CreateObjectsModeEnum createObjectsMode, CreateObjectsDestinationModeEnum destinationMode, Component destinationObject) __0x12146()
		{
			
			if( __0x11487.Obj != null )
			{
				if( __0x11487.Obj.Disposed || __0x11487.Obj.ParentRoot != Scene )
				{
					if( CreateObjectsMode == CreateObjectsModeEnum.Drop || CreateObjectsMode == CreateObjectsModeEnum.Click )
						__0x11487 = (CreateObjectsDestinationModeEnum.SeparateObjectsToRoot, null);
					else
						__0x11487 = (CreateObjectsDestinationModeEnum.Auto, null);
				}
			}


			(CreateObjectsModeEnum createObjectsMode, CreateObjectsDestinationModeEnum destinationMode, Component destinationObject) __0x12026 = (CreateObjectsMode, __0x11487.Mode, __0x11487.Obj);

			
			if( __0x12026.createObjectsMode == CreateObjectsModeEnum.Drop || __0x12026.createObjectsMode == CreateObjectsModeEnum.Click )
			{
				if( __0x12026.destinationMode == CreateObjectsDestinationModeEnum.SeparateObjectsToRoot )
					__0x12026.destinationObject = Scene;
			}

			
			if( __0x12026.createObjectsMode == CreateObjectsModeEnum.Brush && __0x12026.destinationMode == CreateObjectsDestinationModeEnum.Auto )
			{
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				


				

				GroupOfObjects __0x12027 = null;
				{
					foreach( var __0x12103 in Scene.GetComponents( checkChildren: true, onlyEnabledInHierarchy: true ) )
					{
						if( __0x12103 is GroupOfObjects obj2 && obj2.EditorAllowUsePaintBrush && __0x12103.DisplayInEditor )
						{
							__0x12027 = obj2;
							break;
						}
					}
				}

				if( __0x12027 != null )
				{
					(var objectType, var referenceToObject, var anyData, string objectName) = __0x12147();
					if( objectType != null )
					{
						
						{
							Mesh __0x12028 = null;
							Metadata.TypeInfo __0x12029 = null;
							{
								var __0x12030 = objectType as Metadata.ComponentTypeInfo;
								if( __0x12030 != null && __0x12030.BasedOnObject != null )
								{
									
									__0x12028 = __0x12030.BasedOnObject as Mesh;

									
									if( __0x12030.BasedOnObject is Import3D )
										__0x12028 = __0x12030.BasedOnObject.GetComponent( "Mesh" ) as Mesh;
								}

								
								if( __0x12028 == null && MetadataManager.GetTypeOfNetType( typeof( Mesh ) ).IsAssignableFrom( objectType ) )
								{
									var __0x12031 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
									if( __0x12031 != null )
										__0x12028 = __0x12031.BasedOnObject as Mesh;
								}

								
								if( MetadataManager.GetTypeOfNetType( typeof( MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
									__0x12029 = objectType;
							}

							if( __0x12028 != null || __0x12029 != null )
								return (CreateObjectsModeEnum.Brush, CreateObjectsDestinationModeEnum.ToGroupOfObjects, __0x12027);
						}

						
						{
							Surface __0x12032 = null;
							{
								var __0x12033 = objectType as Metadata.ComponentTypeInfo;
								if( __0x12033 != null && __0x12033.BasedOnObject != null )
									__0x12032 = __0x12033.BasedOnObject as Surface;
							}

							if( __0x12032 != null )
								return (CreateObjectsModeEnum.Brush, CreateObjectsDestinationModeEnum.ToGroupOfObjects, __0x12027);
						}
					}
				}

				return (CreateObjectsModeEnum.Brush, CreateObjectsDestinationModeEnum.SeparateObjectsToRoot, Scene);
			}

			return __0x12026;
		}

		(Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) __0x12147()
		{
			(Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) __0x12034 = EditorAPI.GetSelectedObjectToCreate();

			Component __0x12035 = null;
			if( SelectedObjects.Length == 1 )
				__0x12035 = SelectedObjects[ 0 ] as Component;

			
			if( __0x12035 != null )
			{
				
				{
					var __0x12036 = __0x12035 as GroupOfObjectsElement_Mesh;
					if( __0x12036 != null )
					{
						var __0x12037 = __0x12036.Mesh.Value;
						if( __0x12037 != null )
						{
							var __0x12038 = __0x12037.GetProvidedType();
							if( __0x12038 != null )
								__0x12034 = (__0x12038, __0x12036.Mesh.GetByReference, null, "");
						}
					}
				}

				
				{
					var __0x12039 = __0x12035 as GroupOfObjectsElement_Surface;
					if( __0x12039 != null )
					{
						var __0x12040 = __0x12039.Surface.Value;
						if( __0x12040 != null )
						{
							var __0x12041 = __0x12040.GetProvidedType();
							if( __0x12041 != null )
								__0x12034 = (__0x12041, __0x12039.Surface.GetByReference, null, "");
						}
					}
				}
			}

			return __0x12034;
		}

	}
}

namespace NeoAxis.Editor
{
	partial class SceneEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x12042 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x12148()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Scene_DocumentWindow";
			this.Size = new System.Drawing.Size(785, 518);
			this.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x12115);
			this.DragEnter += new System.Windows.Forms.DragEventHandler(this.__0x12112);
			this.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x12113);
			this.DragLeave += new System.EventHandler(this.__0x12114);
			this.ResumeLayout(false);

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public class SimulatePhysicsWorkareaMode : SceneEditor.WorkareaModeClassScene
	{
		ESet<IPhysicalObject> __0x12265 = new ESet<IPhysicalObject>();
		ESet<IPhysicalObject> __0x12266 = new ESet<IPhysicalObject>();

		List<(RigidBody, Reference<RigidBody.MotionTypeEnum>)> __0x12267 = new List<(RigidBody, Reference<RigidBody.MotionTypeEnum>)>();
		List<(RigidBody2D, Reference<RigidBody2D.MotionTypeEnum>)> __0x12268 = new List<(RigidBody2D, Reference<RigidBody2D.MotionTypeEnum>)>();

		Dictionary<RigidBody, Reference<Transform>> __0x12269 = new Dictionary<RigidBody, Reference<Transform>>();
		Dictionary<RigidBody2D, Reference<Transform>> __0x12270 = new Dictionary<RigidBody2D, Reference<Transform>>();

		Dictionary<SoftBody, Reference<Transform>> __0x12271 = new Dictionary<SoftBody, Reference<Transform>>();

		Dictionary<Constraint, Reference<Transform>> __0x12272 = new Dictionary<Constraint, Reference<Transform>>();
		Dictionary<Constraint2D, Reference<Transform>> __0x12273 = new Dictionary<Constraint2D, Reference<Transform>>();

		List<(RigidBody, Reference<Vector3>)> __0x12274 = new List<(RigidBody, Reference<Vector3>)>();
		List<(RigidBody, Reference<Vector3>)> __0x12275 = new List<(RigidBody, Reference<Vector3>)>();
		List<(RigidBody2D, Reference<Vector2>)> __0x12276 = new List<(RigidBody2D, Reference<Vector2>)>();
		List<(RigidBody2D, Reference<double>)> __0x12277 = new List<(RigidBody2D, Reference<double>)>();

		double __0x12278;

		bool __0x12279;

		

		public SimulatePhysicsWorkareaMode( SceneEditor documentWindow )
			: base( documentWindow )
		{
			__0x12330();
		}

		protected override void OnDestroy()
		{
			if( __0x12279 )
				__0x12332();
			else
				__0x12333();

			base.OnDestroy();
		}

		Scene Scene
		{
			get { return DocumentWindow.Scene; }
		}

		void __0x12330()
		{
			DocumentWindow.Document.AllowUndoRedo = false;

			
			foreach( var __0x12309 in Scene.GetComponents<IPhysicalObject>( checkChildren: true ) )
				__0x12265.AddWithCheckAlreadyContained( __0x12309 );

			
			foreach( var __0x12310 in DocumentWindow.SelectedObjects )
			{
				var __0x12280 = __0x12310 as IPhysicalObject;
				if( __0x12280 != null && ( (Component)__0x12280 ).EnabledInHierarchy )
					__0x12266.AddWithCheckAlreadyContained( __0x12280 );

				var __0x12281 = __0x12310 as ObjectInSpace;
				if( __0x12281 != null && __0x12281.EnabledInHierarchy )
				{
					foreach( var __0x12311 in __0x12281.GetComponents<IPhysicalObject>( checkChildren: true ) )
						if( ( (Component)__0x12311 ).EnabledInHierarchy )
							__0x12266.AddWithCheckAlreadyContained( __0x12311 );
				}
			}

			
			foreach( var __0x12312 in __0x12265 )
			{
				{
					var __0x12282 = __0x12312 as Constraint;
					if( __0x12282 != null )
					{
						var __0x12283 = __0x12282.BodyA.Value;
						if( __0x12283 != null && __0x12266.Contains( __0x12283 ) )
							__0x12266.AddWithCheckAlreadyContained( __0x12312 );
						var __0x12284 = __0x12282.BodyB.Value;
						if( __0x12284 != null && __0x12266.Contains( __0x12284 ) )
							__0x12266.AddWithCheckAlreadyContained( __0x12312 );
					}
				}

				{
					var __0x12285 = __0x12312 as Constraint2D;
					if( __0x12285 != null )
					{
						var __0x12286 = __0x12285.BodyA.Value;
						if( __0x12286 != null && __0x12266.Contains( __0x12286 ) )
							__0x12266.AddWithCheckAlreadyContained( __0x12312 );
						var __0x12287 = __0x12285.BodyB.Value;
						if( __0x12287 != null && __0x12266.Contains( __0x12287 ) )
							__0x12266.AddWithCheckAlreadyContained( __0x12312 );
					}
				}
			}

			
			foreach( var __0x12313 in __0x12265 )
			{
				if( !__0x12266.Contains( __0x12313 ) )
				{
					{
						var __0x12288 = __0x12313 as RigidBody;
						if( __0x12288 != null )
						{
							if( __0x12288.MotionType.Value == RigidBody.MotionTypeEnum.Dynamic )
							{
								__0x12267.Add( (__0x12288, __0x12288.MotionType) );
								__0x12274.Add( (__0x12288, __0x12288.LinearVelocity) );
								__0x12275.Add( (__0x12288, __0x12288.AngularVelocity) );

								__0x12288.MotionType = RigidBody.MotionTypeEnum.Static;
							}
						}
					}

					{
						var __0x12289 = __0x12313 as RigidBody2D;
						if( __0x12289 != null )
						{
							if( __0x12289.MotionType.Value == RigidBody2D.MotionTypeEnum.Dynamic )
							{
								__0x12268.Add( (__0x12289, __0x12289.MotionType) );
								__0x12276.Add( (__0x12289, __0x12289.LinearVelocity) );
								__0x12277.Add( (__0x12289, __0x12289.AngularVelocity) );

								__0x12289.MotionType = RigidBody2D.MotionTypeEnum.Static;
							}
						}
					}
				}
			}

			
			
			foreach( var __0x12314 in __0x12265 )
			{
				{
					var __0x12290 = __0x12314 as SoftBody;
					if( __0x12290 != null )
						__0x12271[ __0x12290 ] = __0x12290.Transform;
				}
			}

			
			foreach( var __0x12315 in __0x12266 )
			{
				{
					var __0x12291 = __0x12315 as RigidBody;
					if( __0x12291 != null )
					{
						__0x12269[ __0x12291 ] = __0x12291.Transform;
						__0x12274.Add( (__0x12291, __0x12291.LinearVelocity) );
						__0x12275.Add( (__0x12291, __0x12291.AngularVelocity) );
					}
				}

				{
					var __0x12292 = __0x12315 as RigidBody2D;
					if( __0x12292 != null )
					{
						__0x12270[ __0x12292 ] = __0x12292.Transform;
						__0x12276.Add( (__0x12292, __0x12292.LinearVelocity) );
						__0x12277.Add( (__0x12292, __0x12292.AngularVelocity) );
					}
				}

				{
					var __0x12293 = __0x12315 as Constraint;
					if( __0x12293 != null )
						__0x12272[ __0x12293 ] = __0x12293.Transform;
				}

				{
					var __0x12294 = __0x12315 as Constraint2D;
					if( __0x12294 != null )
						__0x12273[ __0x12294 ] = __0x12294.Transform;
				}
			}

			
			foreach( var __0x12316 in __0x12266 )
			{
				var __0x12295 = __0x12316 as RigidBody;
				if( __0x12295 != null )
					__0x12295.Activate();

				var __0x12296 = __0x12316 as RigidBody2D;
				if( __0x12296 != null )
					__0x12296.Active = true;
			}
		}

		void __0x12331()
		{
			
			foreach( var __0x12317 in __0x12267 )
				__0x12317.Item1.MotionType = __0x12317.Item2;
			foreach( var __0x12318 in __0x12268 )
				__0x12318.Item1.MotionType = __0x12318.Item2;
			foreach( var __0x12319 in __0x12274 )
				__0x12319.Item1.LinearVelocity = __0x12319.Item2;
			foreach( var __0x12320 in __0x12275 )
				__0x12320.Item1.AngularVelocity = __0x12320.Item2;
			foreach( var __0x12321 in __0x12276 )
				__0x12321.Item1.LinearVelocity = __0x12321.Item2;
			foreach( var __0x12322 in __0x12277 )
				__0x12322.Item1.AngularVelocity = __0x12322.Item2;

			
			foreach( var __0x12323 in __0x12271 )
			{
				__0x12323.Key.Enabled = false;
				__0x12323.Key.Transform = __0x12323.Value;
				__0x12323.Key.Enabled = true;
			}

			
			foreach( var __0x12324 in __0x12265 )
			{
				var __0x12297 = __0x12324 as RigidBody;
				if( __0x12297 != null )
					__0x12297.Activate();

				var __0x12298 = __0x12324 as RigidBody2D;
				if( __0x12298 != null )
					__0x12298.Active = true;
			}

			DocumentWindow.Document.AllowUndoRedo = true;
		}

		void __0x12332()
		{
			__0x12331();

			
			foreach( var __0x12325 in __0x12269 )
				__0x12325.Key.Transform = __0x12325.Value;
			foreach( var __0x12326 in __0x12270 )
				__0x12326.Key.Transform = __0x12326.Value;
			foreach( var __0x12327 in __0x12272 )
			{
				__0x12327.Key.Enabled = false;
				__0x12327.Key.Transform = __0x12327.Value;
				__0x12327.Key.Enabled = true;
			}
			foreach( var __0x12328 in __0x12273 )
			{
				__0x12328.Key.Enabled = false;
				__0x12328.Key.Transform = __0x12328.Value;
				__0x12328.Key.Enabled = true;
			}
		}

		void __0x12333()
		{
			__0x12331();

			
			{
				var __0x12299 = new List<UndoActionPropertiesChange.Item>();

				foreach( var __0x12329 in __0x12266 )
				{
					{
						var __0x12300 = __0x12329 as RigidBody;
						if( __0x12300 != null )
						{
							if( __0x12269.TryGetValue( __0x12300, out var oldValue ) )
							{
								var __0x12301 = __0x12300.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
								if( __0x12301 != null )
									__0x12299.Add( new UndoActionPropertiesChange.Item( __0x12329, __0x12301, oldValue, null ) );
							}
						}
					}

					{
						var __0x12302 = __0x12329 as RigidBody2D;
						if( __0x12302 != null )
						{
							if( __0x12270.TryGetValue( __0x12302, out var oldValue ) )
							{
								var __0x12303 = __0x12302.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
								if( __0x12303 != null )
									__0x12299.Add( new UndoActionPropertiesChange.Item( __0x12329, __0x12303, oldValue, null ) );
							}
						}
					}

					{
						var __0x12304 = __0x12329 as Constraint;
						if( __0x12304 != null )
						{
							if( __0x12272.TryGetValue( __0x12304, out var oldValue ) )
							{
								var __0x12305 = __0x12304.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
								if( __0x12305 != null )
									__0x12299.Add( new UndoActionPropertiesChange.Item( __0x12329, __0x12305, oldValue, null ) );
							}
						}
					}

					{
						var __0x12306 = __0x12329 as Constraint2D;
						if( __0x12306 != null )
						{
							if( __0x12273.TryGetValue( __0x12306, out var oldValue ) )
							{
								var __0x12307 = __0x12306.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
								if( __0x12307 != null )
									__0x12299.Add( new UndoActionPropertiesChange.Item( __0x12329, __0x12307, oldValue, null ) );
							}
						}
					}
				}

				if( __0x12299.Count != 0 )
				{
					var __0x12308 = new UndoActionPropertiesChange( __0x12299.ToArray() );
					DocumentWindow.Document.CommitUndoAction( __0x12308 );
				}
			}
		}

		protected override bool OnKeyDown( Viewport viewport, KeyEvent e )
		{
			if( e.Key == EKeys.Return || e.Key == EKeys.Space )
			{
				DocumentWindow.ResetWorkareaMode();
				return true;
			}

			if( e.Key == EKeys.Escape )
			{
				__0x12279 = true;
				DocumentWindow.ResetWorkareaMode();
				return true;
			}

			return base.OnKeyDown( viewport, e );
		}

		
		string __0x12334( string __0x12335 )
		{
			return __0x12335;
			
		}

		protected override void OnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.OnGetTextInfoCenterBottomCorner( lines );

			lines.Add( __0x12334( "Physics simulation mode" ) );
			lines.Add( "" );
			lines.Add( __0x12334( "Press Space or Return to apply changes, press Escape to cancel." ) );
		}

		protected override void OnTick( Viewport viewport, double delta )
		{
			base.OnTick( viewport, delta );

			
			__0x12278 += delta;
			while( __0x12278 > ProjectSettings.Get.General.SimulationStepsPerSecondInv )
			{
				__0x12278 -= ProjectSettings.Get.General.SimulationStepsPerSecondInv;
				DocumentWindow.Scene.PhysicsSimulate( true, __0x12266 );
				DocumentWindow.Scene.Physics2DSimulate( true, __0x12266 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Object implemetation of <see cref="TransformTool"/> for object in space.
	/// </summary>
	public class TransformToolObjectObjectInSpace : TransformToolObject
	{
		ObjectInSpace __0x12336;
		

		
		Reference<Transform> __0x12337;

		

		public TransformToolObjectObjectInSpace( ObjectInSpace selectedObject )
			: base( selectedObject )
		{
			this.__0x12336 = selectedObject;
			
		}

		public ObjectInSpace SelectedObject
		{
			get { return __0x12336; }
		}

		public ObjectInSpace ObjectToTransform
		{
			get
			{
				return ObjectInSpaceUtility.CalculateObjectToTransform( __0x12336 );
				
			}
		}

		public Reference<Transform> BeforeModifyTransform
		{
			get { return __0x12337; }
		}

		public override bool IsAllowMove()
		{
			return ObjectToTransform != null;
			
			
			
		}

		public override bool IsAllowRotate()
		{
			return ObjectToTransform != null;
			
			
			
		}

		public override bool IsAllowScale()
		{
			return ObjectToTransform != null;

			
			

			
			
			
			

			
		}

		ObjectInSpace __0x12343()
		{
			var __0x12338 = ObjectToTransform;
			return __0x12338 != null ? __0x12338 : __0x12336;
		}

		public override Vector3 Position
		{
			get { return __0x12343().Transform.Value.Position; }
			set
			{
				if( IsAllowMove() )
				{
					var __0x12339 = ObjectToTransform;
					if( __0x12339 != null )
						__0x12339.Transform = __0x12339.Transform.Value.UpdatePosition( value );
				}

				
				
				
			}
		}

		public override Quaternion Rotation
		{
			get { return __0x12343().Transform.Value.Rotation; }
			set
			{
				if( IsAllowRotate() )
				{
					var __0x12340 = ObjectToTransform;
					if( __0x12340 != null )
						__0x12340.Transform = __0x12340.Transform.Value.UpdateRotation( value );
				}

				
				
				
			}
		}

		public override Vector3 Scale
		{
			get { return __0x12343().Transform.Value.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					var __0x12341 = ObjectToTransform;
					if( __0x12341 != null )
						__0x12341.Transform = __0x12341.Transform.Value.UpdateScale( value );
				}

				
				
				
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();

			var __0x12342 = ObjectToTransform;
			if( __0x12342 != null )
				__0x12337 = __0x12342.Transform;

			
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();

			
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();

			
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class SoundPreview : PreviewControl
	{
		SoundData __0x12344;
		SoundVirtualChannel __0x12345;

		

		public SoundPreview()
		{
			__0x12361();
		}

		private void __0x12354( object __0x12362, EventArgs __0x12363 )
		{
			__0x12353.Start();
		}

		private void __0x12355( object __0x12364, EventArgs __0x12365 )
		{
			__0x12357( false );
		}

		private void __0x12356( object __0x12366, EventArgs __0x12367 )
		{
			__0x12357( true );
		}

		void __0x12357( bool __0x12368 )
		{
			if( __0x12345 != null && !__0x12345.Stopped )
				__0x12359();
			else
				__0x12358( __0x12368 );
		}

		void __0x12358( bool __0x12369 )
		{
			var __0x12346 = ObjectOfPreview as Sound;

			if( __0x12346 != null && __0x12346.Result != null )
			{
				long __0x12347 = 0;
				string __0x12348 = __0x12346.LoadFile.Value.ResourceName;
				if( !string.IsNullOrEmpty( __0x12348 ) )
				{
					try
					{
						__0x12347 = VirtualFile.GetLength( __0x12348 );
						
						
					}
					catch { }
				}

				if( __0x12347 != 0 )
				{
					SoundModes __0x12349 = 0;
					if( Path.GetExtension( __0x12348 ).ToLower() == ".ogg" && __0x12347 > 400000 )
						__0x12349 |= SoundModes.Stream;
					if( __0x12369 )
						__0x12349 |= SoundModes.Loop;

					__0x12344 = __0x12346.Result.LoadSoundByMode( __0x12349 );
					if( __0x12344 != null )
						__0x12345 = SoundWorld.SoundPlay( null, __0x12344, EngineApp.DefaultSoundChannelGroup, .5f );
				}
			}
		}

		void __0x12359()
		{
			if( __0x12345 != null )
			{
				__0x12345.Stop();
				__0x12345 = null;
			}
		}

		private void __0x12360( object __0x12370, EventArgs __0x12371 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( __0x12345 != null && __0x12345.Stopped )
				__0x12345 = null;

			__0x12351.Text = __0x12345 == null ? "Play" : "Stop";
			__0x12352.Text = __0x12345 == null ? "Loop Play" : "Stop";
			
			
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SoundPreview
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x12350 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x12350 != null))
            {
                __0x12350.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x12361()
        {
			this.__0x12350 = new System.ComponentModel.Container();
			this.__0x12351 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x12352 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x12353 = new System.Windows.Forms.Timer(this.__0x12350);
			this.SuspendLayout();
			
			
			
			this.__0x12351.Location = new System.Drawing.Point(12, 12);
			this.__0x12351.Name = "buttonPlay";
			this.__0x12351.Size = new System.Drawing.Size(117, 32);
			this.__0x12351.TabIndex = 1;
			this.__0x12351.Values.Text = "Play";
			this.__0x12351.Click += new System.EventHandler(this.__0x12355);
			
			
			
			this.__0x12352.Location = new System.Drawing.Point(12, 50);
			this.__0x12352.Name = "buttonLoopPlay";
			this.__0x12352.Size = new System.Drawing.Size(117, 32);
			this.__0x12352.TabIndex = 2;
			this.__0x12352.Values.Text = "Loop Play";
			this.__0x12352.Click += new System.EventHandler(this.__0x12356);
			
			
			
			this.__0x12353.Tick += new System.EventHandler(this.__0x12360);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x12352);
			this.Controls.Add(this.__0x12351);
			this.Name = "Sound_PreviewControl";
			this.Size = new System.Drawing.Size(216, 113);
			this.Load += new System.EventHandler(this.__0x12354);
			this.ResumeLayout(false);

        }

		#endregion
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x12351;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonButton __0x12352;
		private System.Windows.Forms.Timer __0x12353;
	}
}





namespace NeoAxis.Editor
{
	public partial class StoreItemPreview : PreviewControl
	{
		bool __0x12372;

		

		

		public StoreItemPreview()
		{
			__0x12395();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			

			

			
			
			
			
			
			
			
			
			
			
			

			

			__0x12390.Start();
		}

		
		
		
		
		
		
		

		
		

		StoresWindow.ContentBrowserItem_StoreItem __0x12391()
		{
			return ObjectOfPreview as StoresWindow.ContentBrowserItem_StoreItem;
		}

		Image __0x12392()
		{
			var __0x12373 = __0x12391();
			var __0x12374 = __0x12373.storesWindow.GetPackage( __0x12373.packageId, false );

			if( __0x12374 != null && !string.IsNullOrEmpty( __0x12374.Thumbnail ) )
				return StoreManager.ImageManager.GetSourceImage( __0x12374.Thumbnail, EngineApp.GetSystemTime() );

			return null;
		}

		
		
		
		
		
		
		
		
		
		
		

		

		
		

		

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		

		

		

		
		
		

		
		
		
		
		
		
		

		static string __0x12393( string __0x12396 )
		{
			return EditorLocalization.Translate( "StoreItemPreviewControl", __0x12396 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			var __0x12375 = __0x12392();
			if( __0x12375 != null )
			{
				var __0x12376 = new Vector2I( ClientSize.Width, ClientSize.Height );
				var __0x12377 = new Vector2I( __0x12375.Size.Width, __0x12375.Size.Height );

				double __0x12378 = 1;

				double __0x12379 = Math.Min(
					(double)__0x12376.X / (double)__0x12377.X,
					(double)__0x12376.Y / (double)__0x12377.Y );
				Vector2 __0x12380 = __0x12377.ToVector2() * __0x12379 * __0x12378;
				Vector2 __0x12381 = __0x12376.ToVector2() / 2;
				var __0x12382 = ( new Rectangle( __0x12381 - __0x12380 / 2, __0x12381 + __0x12380 / 2 ) ).ToRectangleI();
				

				

				

				
				
				

				
				

				e.Graphics.DrawImage( __0x12375, new System.Drawing.Rectangle( __0x12382.Left, __0x12382.Top, __0x12382.Size.X, __0x12382.Size.Y ), new System.Drawing.Rectangle( 0, 0, __0x12377.X, __0x12377.Y ), GraphicsUnit.Pixel );

				var __0x12383 = __0x12391();

				var __0x12384 = __0x12383.storesWindow.GetPackage( __0x12383.packageId, false );
				if( __0x12384 != null )
				{
					var __0x12385 = "";

					if( __0x12384.Triangles != 0 )
					{
						__0x12385 += "Triangles " + PackageManager.PackageInfo.GetTrianglesVerticesAsString( __0x12384.Triangles );
						__0x12385 += ", Vertices " + PackageManager.PackageInfo.GetTrianglesVerticesAsString( __0x12384.Vertices );
					}

					
					
					
					
					
					

					var __0x12386 = (int)( 2.0 * EditorAPI.DPIScale );
					var __0x12387 = (int)( 1.0 * EditorAPI.DPIScale );

					e.Graphics.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;

					var __0x12388 = new System.Drawing.Rectangle( __0x12386, __0x12386, __0x12376.X - __0x12386 * 2, __0x12376.Y - __0x12386 * 2 );

					

					e.Graphics.DrawString( __0x12385, DefaultFont, Brushes.Black, new System.Drawing.Rectangle( __0x12388.Left + __0x12387, __0x12388.Top + __0x12387, __0x12388.Width, __0x12388.Height ), StringFormat.GenericDefault );
					e.Graphics.DrawString( __0x12385, DefaultFont, Brushes.White, __0x12388, StringFormat.GenericDefault );

					

					
					

					__0x12372 = true;
				}
			}
		}

		private void __0x12394( object __0x12397, EventArgs __0x12398 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( !__0x12372 && __0x12392() != null )
				Invalidate();
		}

	}
}

namespace NeoAxis.Editor
{
    partial class StoreItemPreview
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x12389 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x12389 != null))
            {
                __0x12389.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x12395()
        {
			this.__0x12389 = new System.ComponentModel.Container();
			this.__0x12390 = new System.Windows.Forms.Timer( this.__0x12389 );
			this.SuspendLayout();
			
			
			
			this.__0x12390.Interval = 50;
			this.__0x12390.Tick += new System.EventHandler( this.__0x12394 );
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "StoreItem_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion

		private System.Windows.Forms.Timer __0x12390;
	}
}





namespace NeoAxis.Editor
{
	public partial class SurfaceEditor : CanvasBasedEditor
	{
		double __0x12399;
		bool __0x12400 = true;

		

		public Surface Surface
		{
			get { return (Surface)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			
			if( Surface != null )
			{
				var __0x12401 = CreateScene( false );
				__0x12419( __0x12401 );
				__0x12401.Enabled = true;
			}

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnTick( float delta )
		{
			base.OnTick( delta );

			
			if( Time.Current > __0x12399 + 1.0 )
			{
				if( Surface != null && Scene != null )
					__0x12419( Scene );
			}
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			
			
			
			
			

			
			if( ProjectSettings.Get.General.ShowCenteringBorders )
			{
				double __0x12402 = 0.8;

				var __0x12403 = __0x12402 * 0.5 * Viewport.CanvasRenderer.AspectRatioInv;
				var __0x12404 = __0x12402 * 0.5;

				var __0x12405 = new Rectangle( new Vector2( 0.5, 0.5 ) );
				__0x12405.Expand( new Vector2( __0x12403, __0x12404 ) );
				Viewport.CanvasRenderer.AddRectangle( __0x12405, new ColorValue( 1, 1, 1, 0.05 ) );
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x12400 && Scene.CameraEditor.Value != null )
			{
				__0x12418( 0.5 );
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );

				__0x12400 = false;
			}

			if( Surface != null && Scene.CameraEditor.Value != null )
				Surface.EditorCameraTransform = Scene.CameraEditor.Value.Transform;
		}

		void __0x12418( double __0x12420 = 1 )
		{
			var __0x12406 = Scene.CameraEditor.Value;
			var __0x12407 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			var __0x12408 = __0x12407.GetCenter();

			double __0x12409 = Math.Max( Math.Max( __0x12407.GetSize().X, __0x12407.GetSize().Y ), __0x12407.GetSize().Z );
			double __0x12410 = __0x12409 * 2 * __0x12420;
			if( __0x12410 < 2 )
				__0x12410 = 2;

			double __0x12411 = 1;
			SphericalDirection __0x12412 = new SphericalDirection( -3.83, -.47 );

			var __0x12413 = __0x12408 - __0x12412.GetVector() * __0x12410 * __0x12411;
			var __0x12414 = __0x12408;

			Vector3 __0x12415 = __0x12413;
			Vector3 __0x12416 = __0x12414;
			Degree __0x12417 = 65;

			
			
			__0x12406.FieldOfView = __0x12417;
			__0x12406.NearClipPlane = Math.Max( __0x12410 / 10000, 0.01 );
			__0x12406.FarClipPlane = Math.Max( 1000, __0x12410 * 2 );

			if( Surface != null && Surface.EditorCameraTransform != null )
				__0x12406.Transform = Surface.EditorCameraTransform;
			else
				__0x12406.Transform = new Transform( __0x12415, Quaternion.LookAt( ( __0x12416 - __0x12415 ).GetNormalize(), Vector3.ZAxis ) );

			__0x12406.FixedUp = Vector3.ZAxis;
		}

		void __0x12419( Scene __0x12421 )
		{
			SurfaceEditorUtility.CreatePreviewObjects( __0x12421, Surface );
			__0x12399 = Time.Current;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class SurfaceEditorUtility
	{
		public static void CreatePreviewObjects( Scene scene, Surface surface )
		{
			DestroyPreviewObjects( scene );

			var __0x12422 = Vector3.Zero;

			double __0x12423;
			double __0x12424;
			{
				var __0x12425 = surface.GetComponents<SurfaceGroupOfElements>();
				if( __0x12425.Length != 0 )
				{
					__0x12423 = 0;
					__0x12424 = 0;
					foreach( var __0x12470 in __0x12425 )
					{
						if( __0x12470.OccupiedAreaRadius > __0x12423 )
							__0x12423 = __0x12470.OccupiedAreaRadius;
						__0x12424 += __0x12470.OccupiedAreaRadius;
					}
					__0x12424 /= __0x12425.Length;
				}
				else
				{
					__0x12423 = 1;
					__0x12424 = 1;
				}
			}

			var __0x12426 = __0x12423 * 10;
			var __0x12427 = 1.0;
			var __0x12428 = 0;
			var __0x12429 = new FastRandom( 0 );

			double GetHardnessFactor( double __0x12473 )
			{
				if( __0x12473 == 0 || __0x12473 <= __0x12428 * __0x12426 )
					return 1;
				else
				{
					double __0x12430;
					if( __0x12426 - __0x12426 * __0x12428 != 0 )
						__0x12430 = ( __0x12473 - __0x12426 * __0x12428 ) / ( __0x12426 - __0x12426 * __0x12428 );
					else
						__0x12430 = 0;
					return (float)Math.Cos( Math.PI / 2 * __0x12430 );
				}
			}

			
			int __0x12431;
			{
				var __0x12432 = Math.PI * __0x12426 * __0x12426;

				double __0x12433 = __0x12424;
				double __0x12434 = Math.PI * __0x12433 * __0x12433;
				if( __0x12434 < 0.1 )
					__0x12434 = 0.1;

				double __0x12435 = __0x12432 / __0x12434;
				

				__0x12431 = (int)( __0x12427 * (double)__0x12435 );
				__0x12431 = Math.Max( __0x12431, 1 );

				__0x12431 *= 4;
				
			}

			

			var __0x12436 = new Bounds( __0x12422 );
			__0x12436.Expand( __0x12426 + __0x12423 * 4.01 );

			var __0x12437 = new OctreeContainer.InitSettings();
			__0x12437.InitialOctreeBounds = __0x12436;
			__0x12437.OctreeBoundsRebuildExpand = Vector3.Zero;
			__0x12437.MinNodeSize = __0x12436.GetSize() / 40;
			var __0x12438 = new OctreeContainer( __0x12437 );

			var __0x12439 = new List<Sphere>( 256 );


			for( int __0x12440 = 0; __0x12440 < __0x12431; __0x12440++ )
			{
				surface.GetRandomVariation( new Surface.GetRandomVariationOptions(), __0x12429, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
				var __0x12441 = surface.GetGroup( groupIndex );

				Vector3? __0x12442 = null;

				for( var __0x12443 = 0; __0x12443 < 3; __0x12443++ )
				{
					var __0x12444 = 1.0;
					switch( __0x12443 )
					{
					case 0: __0x12444 = 4; break;
					case 1: __0x12444 = 2; break;
					case 2: __0x12444 = 1; break;
					}

					int __0x12445 = 0;
					while( __0x12445 < 10 )
					{
						var __0x12446 = new Vector2( __0x12429.Next( __0x12426 * 2 ) - __0x12426, __0x12429.Next( __0x12426 * 2 ) - __0x12426 );

						
						var __0x12447 = __0x12446.Length();
						if( __0x12447 <= __0x12426 && __0x12429.NextDouble() <= GetHardnessFactor( __0x12447 ) )
						{
							var __0x12448 = __0x12422.ToVector2() + __0x12446;

							
							
							

							var __0x12449 = new Vector3( __0x12448, 0 );

							var __0x12450 = new Sphere( __0x12449, __0x12441.OccupiedAreaRadius );
							__0x12450.ToBounds( out var objBounds );

							var __0x12451 = false;

							foreach( var __0x12471 in __0x12438.GetObjects( objBounds, 0xFFFFFFFF, OctreeContainer.ModeEnum.All ) )
							{
								var __0x12452 = __0x12439[ __0x12471 ];
								__0x12452.Radius *= 0.25;
								__0x12452.Radius *= __0x12444;

								if( ( __0x12449 - __0x12452.Center ).LengthSquared() < ( __0x12452.Radius + __0x12450.Radius ) * ( __0x12452.Radius + __0x12450.Radius ) )
								{
									__0x12451 = true;
									break;
								}
							}

							if( !__0x12451 )
							{
								
								__0x12442 = __0x12449;
								goto end;
							}
						}

						__0x12445++;
					}
				}

				end:;

				if( __0x12442 != null )
				{
					

					var __0x12453 = __0x12442.Value + new Vector3( 0, 0, positionZ );
					var __0x12454 = rotation;
					var __0x12455 = scale;

					var __0x12456 = __0x12441.GetElement( elementIndex );

					var __0x12457 = __0x12456 as SurfaceElement_Mesh;
					if( __0x12457 != null )
					{
						var __0x12458 = scene.CreateComponent<MeshInSpace>( enabled: false );
						__0x12458.Transform = new Transform( __0x12453, __0x12454, __0x12455 );

						
						__0x12458.Mesh = __0x12457.Mesh;
						if( __0x12458.Mesh.Value == null )
							__0x12458.Mesh = ResourceUtility.MeshInvalid;

						
						if( __0x12457.ReplaceMaterial.ReferenceSpecified )
							__0x12458.ReplaceMaterial = __0x12457.ReplaceMaterial;

						__0x12458.Enabled = true;
					}

					

					__0x12439.Add( new Sphere( __0x12442.Value, __0x12441.OccupiedAreaRadius ) );

					var __0x12459 = new Bounds( __0x12442.Value );
					__0x12459.Expand( __0x12441.OccupiedAreaRadius * 4 );
					__0x12438.AddObject( __0x12459, 1 );
				}
			}

			__0x12438.Dispose();

			
			if( !string.IsNullOrEmpty( surface.Material.GetByReference ) )
			{
				var __0x12460 = scene.CreateComponent<MeshInSpace>( enabled: false );

				var __0x12461 = __0x12460.CreateComponent<Mesh>();
				__0x12461.Name = "Name";

				var __0x12462 = __0x12461.CreateComponent<MeshGeometry>();
				__0x12462.Name = "Mesh Geometry";

				var __0x12463 = (float)( __0x12426 + __0x12423 );

				SimpleMeshGenerator.GenerateCylinder( 2, __0x12463, 0.01f, 128, true, true, true, out Vector3F[] positions, out Vector3F[] normals, out Vector4F[] tangents, out Vector2F[] texCoords, out var indices, out _ );

				var __0x12464 = StandardVertex.MakeStructure( StandardVertex.Components.All, true, out int vertexSize );

				var __0x12465 = surface.MaterialUV0.Value.ToVector2F();
				var __0x12466 = surface.MaterialUV1.Value.ToVector2F();

				var __0x12467 = new StandardVertex[ positions.Length ];
				for( int __0x12468 = 0; __0x12468 < __0x12467.Length; __0x12468++ )
				{
					ref var __0x12469 = ref __0x12467[ __0x12468 ];

					__0x12469.Position = positions[ __0x12468 ];
					__0x12469.Normal = normals[ __0x12468 ];
					__0x12469.Tangent = tangents[ __0x12468 ];
					__0x12469.Color = ColorValue.One;
					__0x12469.TexCoord0 = texCoords[ __0x12468 ] * __0x12465 * __0x12463;
					__0x12469.TexCoord1 = texCoords[ __0x12468 ] * __0x12466 * __0x12463;
				}

				__0x12462.VertexStructure = __0x12464;
				__0x12462.Vertices = CollectionUtility.ToByteArray( __0x12467 );
				__0x12462.Indices = indices;

				
				
				
				
				

				
				__0x12462.Material = surface.Material;

				__0x12460.Mesh = ReferenceUtility.MakeRootReference( __0x12461 );

				__0x12460.Enabled = true;
			}
		}

		public static void DestroyPreviewObjects( Scene scene )
		{
			foreach( var __0x12472 in scene.GetComponents<MeshInSpace>() )
				__0x12472.Dispose();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class SurfacePreview : CanvasBasedPreview
	{
		double __0x12474;

		

		public Surface Surface
		{
			get { return ObjectOfPreview as Surface; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			
			if( Surface != null )
			{
				var __0x12475 = CreateScene( false );
				__0x12477( __0x12475 );
				__0x12475.Enabled = true;
			}

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), 0.5 );

			if( Surface != null && Surface.EditorCameraTransform != null )
			{
				var __0x12476 = Surface.EditorCameraTransform;
				CameraInitialDistance = ( __0x12476.Position - CameraLookTo ).Length() * 1.3;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x12476.Position );
			}

			
			
			
			
		}

		protected override void OnTick( float delta )
		{
			base.OnTick( delta );

			
			if( Time.Current > __0x12474 + 1.0 ) 
			{
				if( Surface != null && Scene != null )
					__0x12477( Scene );
			}
		}

		
		
		

		
		
		
		
		
		
		

		void __0x12477( Scene __0x12478 )
		{
			SurfaceEditorUtility.CreatePreviewObjects( __0x12478, Surface );
			__0x12474 = Time.Current;
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class SurfacePreviewImage : PreviewImageGenerator
	{
		public SurfacePreviewImage()
		{
		}

		protected override void OnUpdate()
		{
			var __0x12479 = ObjectOfPreview as Surface;

			if( __0x12479 != null )
			{
				var __0x12480 = CreateScene( false );
				SurfaceEditorUtility.CreatePreviewObjects( __0x12480, __0x12479 );
				__0x12480.Enabled = true;
			}

			var __0x12481 = 1.6;

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), __0x12481 );

			if( __0x12479 != null && __0x12479.EditorCameraTransform != null )
			{
				var __0x12482 = __0x12479.EditorCameraTransform;
				CameraDistance = ( __0x12482.Position - CameraLookTo ).Length() * __0x12481;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x12482.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class TerrainEditingMode : SceneEditor.WorkareaModeClassScene
	{
		TerrainEditorMode __0x12483;
		object __0x12484;
		Scene __0x12485;

		bool __0x12486;
		Vector3 __0x12487;
		float __0x12488;

		ESet<Terrain> __0x12489 = new ESet<Terrain>();

		public class NeedFullUpdateRectangleItem
		{
			public Terrain Terrain;
			public RectangleI Rectangle;
			
			
		}
		List<NeedFullUpdateRectangleItem> __0x12490 = new List<NeedFullUpdateRectangleItem>();

		
		List<TerrainGeometryChangeUndoAction> __0x12491 = new List<TerrainGeometryChangeUndoAction>();
		List<UndoActionPropertiesChange> __0x12492 = new List<UndoActionPropertiesChange>();
		List<TerrainPaintChangeUndoAction> __0x12493 = new List<TerrainPaintChangeUndoAction>();
		List<UndoActionComponentCreateDelete> __0x12494 = new List<UndoActionComponentCreateDelete>();

		const float __0x12495 = 0.2f;

		

		public enum TerrainEditorMode
		{
			GeometryRaise,
			GeometryLower,
			GeometrySmooth,
			GeometryFlatten,

			PaintPaint,
			PaintClear,
			PaintSmooth,
			PaintFlatten,

			Extension,
		}

		

		public enum TerrainEditorToolShape
		{
			Circle,
			Square,
		}

		

		public TerrainEditingMode( SceneEditor documentWindow, TerrainEditorMode mode, object modeExtensionData = null )
			: base( documentWindow )
		{
			this.__0x12483 = mode;
			this.__0x12484 = modeExtensionData;

			__0x12485 = documentWindow.Scene;
		}

		public TerrainEditorMode Mode { get { return __0x12483; } }
		public object ModeExtensionData { get { return __0x12484; } }
		public Scene Scene { get { return __0x12485; } }
		public bool ToolModify { get { return __0x12486; } }
		public Vector3 ToolModifyStartPosition { get { return __0x12487; } }
		public float ToolModifyStartMaskValue { get { return __0x12488; } }
		public List<NeedFullUpdateRectangleItem> NeedUpdateRectangleItems { get { return __0x12490; } }
		public List<TerrainGeometryChangeUndoAction> GeometryChangeUndoActions { get { return __0x12491; } }
		public List<UndoActionPropertiesChange> PaintSetPropertyUndoActions { get { return __0x12492; } }
		public List<TerrainPaintChangeUndoAction> PaintChangeUndoActions { get { return __0x12493; } }
		public List<UndoActionComponentCreateDelete> PaintLayerCreateUndoActions { get { return __0x12494; } }

		protected override void OnDestroy()
		{
			if( __0x12486 )
				StopToolModify( false );
		}

		protected override bool OnKeyDown( Viewport viewport, KeyEvent e )
		{
			if( __0x12486 && e.Key == EKeys.Escape )
			{
				StopToolModify( true );
				return true;
			}

			
			if( ( e.Key == EKeys.Space || e.Key == EKeys.Escape ) && !__0x12486 )
			{
				DocumentWindow.ResetWorkareaMode();
				return true;
			}

			
			if( __0x12486 )
				return true;

			return false;
		}

		protected override bool OnMouseDown( Viewport viewport, EMouseButtons button )
		{
			if( button == EMouseButtons.Left )
			{
				if( GetToolPosition( viewport, out var terrain, out __0x12487 ) )
				{
					var __0x12496 = DocumentWindow.TerrainPaintLayersGetSelected();

					if( IsCurrentPaintTool() && __0x12496 != null )
					{
						if( __0x12496.Mask.Value != null && __0x12496.Mask.Value.Length != 0 )
						{
							if( __0x12496.Mask.Value.Length != terrain.GetPaintMaskSizeInteger() * terrain.GetPaintMaskSizeInteger() )
							{
								EditorMessageBox.ShowWarning( EditorLocalization.Translate( "Terrain", "Unable to paint to selected layer because Mask size of the layer and MaskSize of the terrain are not equal." ) );
								return true;
							}
						}
					}

					if( __0x12483 == TerrainEditorMode.PaintFlatten )
					{
						if( __0x12496 != null )
						{
							Vector2I __0x12497 = terrain.GetMaskIndexByPosition( __0x12487.ToVector2() );
							__0x12488 = __0x12496.GetMaskValue( __0x12497 );
						}
					}

					__0x12486 = true;
					return true;
				}
			}

			return false;
		}

		protected override bool OnMouseUp( Viewport viewport, EMouseButtons button )
		{
			if( button == EMouseButtons.Left )
			{
				if( __0x12486 )
				{
					StopToolModify( false );
					return true;
				}
			}

			return false;
		}

		protected override void OnTick( Viewport viewport, double delta )
		{
			if( __0x12486 && !viewport.IsMouseButtonPressed( EMouseButtons.Left ) )
				StopToolModify( false );

			if( __0x12486 )
			{
				if( __0x12597() )
					ToolPutTickGeometry( viewport, delta );
				else if( IsCurrentPaintTool() )
					ToolPutTickPaint( viewport, delta );
			}
		}

		protected override void OnUpdateBeforeOutput( Viewport viewport )
		{
			RenderTool( viewport );
		}

		protected virtual bool GetToolPosition( Viewport viewport, out Terrain terrain, out Vector3 center )
		{
			if( !viewport.MouseRelativeMode )
			{
				var __0x12498 = viewport.CameraSettings.GetRayByScreenCoordinates( viewport.MousePosition );

				if( Terrain.GetTerrainByRay( __0x12485, __0x12498, out terrain, out center ) )
					return true;
			}

			terrain = null;
			center = Vector3.Zero;
			return false;
		}

		protected virtual void RenderToolCircle( Viewport viewport, Terrain terrain, Vector2 center )
		{
			var __0x12499 = SceneEditor.TerrainToolRadius;

			const double __0x12500 = Math.PI / 32;
			Vector3 __0x12501 = Vector3.Zero;
			for( double __0x12502 = 0; __0x12502 <= Math.PI * 2 + __0x12500 / 2; __0x12502 += __0x12500 )
			{
				var __0x12503 = new Vector3(
					center.X + Math.Cos( __0x12502 ) * __0x12499,
					center.Y + Math.Sin( __0x12502 ) * __0x12499, 0 );
				__0x12503.Z = terrain.GetHeight( __0x12503.ToVector2(), false );

				if( __0x12502 != 0 )
					viewport.Simple3DRenderer.AddLine( __0x12501 + new Vector3( 0, 0, __0x12495 ), __0x12503 + new Vector3( 0, 0, __0x12495 ) );

				__0x12501 = __0x12503;
			}
		}

		protected virtual void RenderToolLine( Viewport viewport, Terrain terrain, Vector2 start, Vector2 end, int stepCount )
		{
			Vector2 __0x12504 = end - start;
			Vector2 __0x12505 = __0x12504;
			var __0x12506 = __0x12505.Normalize();

			Vector3 __0x12507 = Vector3.Zero;
			for( int __0x12508 = 0; __0x12508 <= stepCount; __0x12508++ )
			{
				Vector3 __0x12509 = new Vector3(
					start.X + __0x12505.X * ( (float)__0x12508 / stepCount * __0x12506 ),
					start.Y + __0x12505.Y * ( (float)__0x12508 / stepCount * __0x12506 ), 0 );
				__0x12509.Z = terrain.GetHeight( __0x12509.ToVector2(), false );
				
				
				
				
				
				
				
				
				
				

				if( __0x12508 != 0 )
				{
					if( __0x12507.Z != double.MinValue && __0x12509.Z != double.MinValue )
						viewport.Simple3DRenderer.AddLine( __0x12507 + new Vector3( 0, 0, __0x12495 ), __0x12509 + new Vector3( 0, 0, __0x12495 ) );
				}

				__0x12507 = __0x12509;
			}
		}

		protected virtual void RenderToolSquare( Viewport viewport, Terrain terrain, Vector2 center )
		{
			var __0x12510 = SceneEditor.TerrainToolRadius;
			int __0x12511 = (int)( __0x12510 * 2 );
			RenderToolLine( viewport, terrain, center + new Vector2( -__0x12510, -__0x12510 ), center + new Vector2( -__0x12510, __0x12510 ), __0x12511 );
			RenderToolLine( viewport, terrain, center + new Vector2( -__0x12510, __0x12510 ), center + new Vector2( __0x12510, __0x12510 ), __0x12511 );
			RenderToolLine( viewport, terrain, center + new Vector2( __0x12510, __0x12510 ), center + new Vector2( __0x12510, -__0x12510 ), __0x12511 );
			RenderToolLine( viewport, terrain, center + new Vector2( __0x12510, -__0x12510 ), center + new Vector2( -__0x12510, -__0x12510 ), __0x12511 );
		}

		(ReferenceNoValue reference, bool isSurface) __0x12596()
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetSelectedObjectToCreate();
			if( objectType != null )
			{
				var __0x12512 = objectType as Metadata.ComponentTypeInfo;
				if( __0x12512 != null && __0x12512.BasedOnObject != null )
				{
					

					
					var __0x12513 = __0x12512.BasedOnObject as Material;
					if( __0x12513 != null )
						return (ReferenceUtility.MakeResourceReference( __0x12513 ), false);

					
					if( __0x12512.BasedOnObject is Import3D )
					{
						__0x12513 = __0x12512.BasedOnObject.GetComponent( "Material" ) as Material;
						if( __0x12513 != null )
							return (ReferenceUtility.MakeResourceReference( __0x12513 ), false);
					}

					
					var __0x12514 = __0x12512.BasedOnObject as Surface;
					if( __0x12514 != null )
						return (ReferenceUtility.MakeResourceReference( __0x12514 ), true);
				}
			}

			return (new ReferenceNoValue(), false);
		}

		protected virtual void RenderTool( Viewport viewport )
		{
			if( GetToolPosition( viewport, out var terrain, out var center ) )
			{
				var __0x12515 = DocumentWindow.TerrainPaintLayersGetSelected();
				var __0x12516 = __0x12596();

				if( __0x12597() || IsCurrentPaintTool() && ( __0x12515 != null ^ __0x12516.reference.ReferenceSpecified ) )
				{
					var __0x12517 = false;
					if( Mode == TerrainEditorMode.PaintPaint )
						__0x12517 = ( Control.ModifierKeys & Keys.Shift ) != 0;
					if( Mode == TerrainEditorMode.PaintClear )
						__0x12517 = ( Control.ModifierKeys & Keys.Shift ) == 0;

					
					var __0x12518 = !__0x12517 ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );

					
					viewport.Simple3DRenderer.SetColor( __0x12518, __0x12518 * new ColorValue( 1, 1, 1, 0.5 ) );

					if( SceneEditor.TerrainToolShape == TerrainEditorToolShape.Circle )
						RenderToolCircle( viewport, terrain, center.ToVector2() );
					else
						RenderToolSquare( viewport, terrain, center.ToVector2() );
				}
			}
		}

		public static Vector2I GetClampedCellIndex( Terrain terrain, Vector2I index )
		{
			terrain.ClampCellIndex( ref index );
			return index;
		}

		
		
		
		
		

		bool __0x12597()
		{
			return __0x12483 <= TerrainEditorMode.GeometryFlatten;
		}

		public bool IsCurrentPaintTool()
		{
			return __0x12483 >= TerrainEditorMode.PaintPaint && __0x12483 <= TerrainEditorMode.PaintFlatten;
		}

		
		
		
		
		
		
		
		
		

		void __0x12598( Terrain __0x12599, RectangleI __0x12600 )
		{
			foreach( var __0x12582 in __0x12490 )
			{
				if( __0x12582.Terrain == __0x12599 )
				{
					__0x12582.Rectangle.Add( __0x12600 );
					return;
				}
			}

			{
				var __0x12519 = new NeedFullUpdateRectangleItem();
				__0x12519.Terrain = __0x12599;
				__0x12519.Rectangle = __0x12600;
				__0x12490.Add( __0x12519 );
			}
		}

		protected virtual void ToolPutTickGeometry( Viewport viewport, double delta )
		{
			if( !GetToolPosition( viewport, out var selectedTerrain, out var position ) )
				return;

			var __0x12520 = (float)SceneEditor.TerrainToolRadius;
			var __0x12521 = (float)SceneEditor.TerrainToolHardness;
			var __0x12522 = SceneEditor.TerrainToolShape;

			float __0x12523 = (float)( delta * SceneEditor.TerrainToolStrength * __0x12520 * 0.5 );

			Vector2 __0x12524 = position.ToVector2() - new Vector2( __0x12520, __0x12520 );
			Vector2 __0x12525 = position.ToVector2() + new Vector2( __0x12520, __0x12520 );

			List<Terrain> __0x12526;
			
			
			
			
			
			
			
			__0x12526 = new List<Terrain>();
			__0x12526.Add( selectedTerrain );
			

			foreach( var __0x12583 in __0x12526 )
			{
				var __0x12527 = __0x12491.Find( __0x12601 => __0x12601.Terrain == __0x12583 );

				Vector2I __0x12528 = __0x12583.GetCellIndexByPosition( __0x12524 );
				Vector2I __0x12529 = __0x12583.GetCellIndexByPosition( __0x12525 ) + new Vector2I( 1, 1 );
				__0x12583.ClampCellIndex( ref __0x12528 );
				__0x12583.ClampCellIndex( ref __0x12529 );

				for( int __0x12530 = __0x12528.Y; __0x12530 <= __0x12529.Y; __0x12530++ )
				{
					for( int __0x12531 = __0x12528.X; __0x12531 <= __0x12529.X; __0x12531++ )
					{
						Vector2 __0x12532 = __0x12583.GetPositionXY( new Vector2I( __0x12531, __0x12530 ) );

						float __0x12533;
						{
							double __0x12534;
							if( __0x12522 == TerrainEditorToolShape.Circle )
								__0x12534 = ( __0x12532 - position.ToVector2() ).Length();
							else
								__0x12534 = Math.Max( Math.Abs( __0x12532.X - position.X ), Math.Abs( __0x12532.Y - position.Y ) );

							if( __0x12534 >= __0x12520 )
								__0x12533 = 0;
							else if( __0x12534 == 0 )
								__0x12533 = 1;
							else if( __0x12534 <= __0x12521 * __0x12520 )
								__0x12533 = 1;
							else
							{
								double __0x12535;
								if( __0x12520 - __0x12520 * __0x12521 != 0 )
									__0x12535 = ( __0x12534 - __0x12520 * __0x12521 ) / ( __0x12520 - __0x12520 * __0x12521 );
								else
									__0x12535 = 0;
								__0x12533 = (float)Math.Cos( Math.PI / 2 * __0x12535 );
							}
						}

						if( __0x12533 != 0 )
						{
							float __0x12536 = __0x12583.GetHeightWithoutPosition( new Vector2I( __0x12531, __0x12530 ), false );

							float __0x12537 = __0x12536;

							
							bool __0x12538 = false;
							
							
							
							
							
							
							
							
							
							
							

							
							
							
							
							
							
							
							
							
							
							

							
							
							
							

							if( !__0x12538 )
							{
								switch( __0x12483 )
								{
								case TerrainEditorMode.GeometryRaise:
								case TerrainEditorMode.GeometryLower:
									{
										bool __0x12539 = __0x12483 == TerrainEditorMode.GeometryRaise;
										if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
											__0x12539 = !__0x12539;

										if( __0x12539 )
											__0x12537 = __0x12536 + __0x12523 * __0x12533;
										else
											__0x12537 = __0x12536 - __0x12523 * __0x12533;
									}
									break;

								case TerrainEditorMode.GeometrySmooth:
									{
										float __0x12540 = 0;
										{
											{
												bool __0x12541 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12541 )
													__0x12540 += __0x12583.GetHeightWithoutPosition( GetClampedCellIndex( __0x12583, new Vector2I( __0x12531 - 1, __0x12530 ) ), false );
											}

											{
												bool __0x12542 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12542 )
													__0x12540 += __0x12583.GetHeightWithoutPosition( GetClampedCellIndex( __0x12583, new Vector2I( __0x12531 + 1, __0x12530 ) ), false );
											}

											{
												bool __0x12543 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12543 )
													__0x12540 += __0x12583.GetHeightWithoutPosition( GetClampedCellIndex( __0x12583, new Vector2I( __0x12531, __0x12530 - 1 ) ), false );
											}

											{
												bool __0x12544 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12544 )
													__0x12540 += __0x12583.GetHeightWithoutPosition( GetClampedCellIndex( __0x12583, new Vector2I( __0x12531, __0x12530 + 1 ) ), false );
											}


											
											
											
											
											__0x12540 /= 4;
										}

										if( __0x12536 < __0x12540 )
										{
											__0x12537 = __0x12536 + __0x12523 * __0x12533;
											if( __0x12537 > __0x12540 )
												__0x12537 = __0x12540;
										}
										else if( __0x12536 > __0x12540 )
										{
											__0x12537 = __0x12536 - __0x12523 * __0x12533;
											if( __0x12537 < __0x12540 )
												__0x12537 = __0x12540;
										}
									}
									break;

								case TerrainEditorMode.GeometryFlatten:
									{
										var __0x12545 = __0x12487.Z - __0x12583.Position.Value.Z;

										if( __0x12536 < __0x12545 )
										{
											__0x12537 = __0x12536 + __0x12523 * __0x12533;
											if( __0x12537 > __0x12545 )
												__0x12537 = (float)__0x12545;
										}
										else if( __0x12536 > __0x12545 )
										{
											__0x12537 = __0x12536 - __0x12523 * __0x12533;
											if( __0x12537 < __0x12545 )
												__0x12537 = (float)__0x12545;
										}
									}
									break;

								}
							}

							if( __0x12536 != __0x12537 )
							{
								
								if( __0x12527 == null )
								{
									__0x12527 = new TerrainGeometryChangeUndoAction( __0x12583 );
									__0x12491.Add( __0x12527 );
								}
								__0x12527.SaveValue( new Vector2I( __0x12531, __0x12530 ), __0x12536 );

								
								__0x12583.SetHeightWithoutPosition( new Vector2I( __0x12531, __0x12530 ), __0x12537 );
							}
						}
					}
				}

				__0x12583.AllowFullUpdateGeometryCollisionCurrentLayers = false;
				__0x12489.AddWithCheckAlreadyContained( __0x12583 );

				var __0x12546 = new RectangleI( __0x12528, __0x12529 );
				__0x12583.SetNeedUpdateTilesByCellIndices( __0x12546, Terrain.NeedUpdateEnum.Geometry | Terrain.NeedUpdateEnum.Collision );

				

				__0x12598( __0x12583, __0x12546 );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}
		}

		protected virtual void ToolPutTickPaint( Viewport viewport, double delta )
		{
			if( !GetToolPosition( viewport, out var selectedTerrain, out var position ) )
				return;

			var __0x12547 = DocumentWindow.TerrainPaintLayersGetSelected();
			var __0x12548 = __0x12596();

			if( !( __0x12547 != null ^ __0x12548.reference.ReferenceSpecified ) )
				return;

			
			if( __0x12547 == null )
			{
				

				var __0x12549 = selectedTerrain.GetComponents<PaintLayer>();
				foreach( var __0x12584 in __0x12549 )
				{
					if( __0x12548.isSurface )
					{
						if( __0x12584.Surface.ReferenceSpecified && __0x12584.Surface.GetByReference == __0x12548.reference.GetByReference )
						{
							__0x12547 = __0x12584;
							break;
						}
					}
					else
					{
						if( __0x12584.Material.ReferenceSpecified && __0x12584.Material.GetByReference == __0x12548.reference.GetByReference )
						{
							__0x12547 = __0x12584;
							break;
						}
					}
				}

				if( __0x12547 == null )
				{
					__0x12547 = selectedTerrain.CreateComponent<PaintLayer>( enabled: false );
					__0x12547.Name = EditorUtility.GetUniqueFriendlyName( __0x12547 );
					if( __0x12548.isSurface )
						__0x12547.Surface = __0x12548.reference;
					else
						__0x12547.Material = __0x12548.reference;
					__0x12547.Enabled = true;

					var __0x12550 = new UndoActionComponentCreateDelete( DocumentWindow.Document, new Component[] { __0x12547 }, true );
					__0x12494.Add( __0x12550 );
				}
			}

			var __0x12551 = (float)SceneEditor.TerrainToolRadius;
			var __0x12552 = (float)SceneEditor.TerrainToolHardness;
			var __0x12553 = SceneEditor.TerrainToolShape;

			float __0x12554 = (float)( delta * SceneEditor.TerrainToolStrength * __0x12551 * 0.5 * 2.0 );

			Vector2 __0x12555 = position.ToVector2() - new Vector2( __0x12551, __0x12551 );
			Vector2 __0x12556 = position.ToVector2() + new Vector2( __0x12551, __0x12551 );

			List<Terrain> __0x12557;
			
			
			
			
			
			
			
			__0x12557 = new List<Terrain>();
			__0x12557.Add( selectedTerrain );
			

			foreach( var __0x12585 in __0x12557 )
			{
				UndoActionPropertiesChange __0x12558 = __0x12492.Find( __0x12602 => __0x12602.Items[ 0 ].Obj == __0x12547 );
				var __0x12559 = __0x12493.Find( __0x12603 => __0x12603.Terrain == __0x12585 );

				Vector2I __0x12560 = __0x12585.GetMaskIndexByPosition( __0x12555 );
				Vector2I __0x12561 = __0x12585.GetMaskIndexByPosition( __0x12556 ) + new Vector2I( 1, 1 );
				__0x12585.ClampMaskIndex( ref __0x12560 );
				__0x12585.ClampMaskIndex( ref __0x12561 );

				for( int __0x12562 = __0x12560.Y; __0x12562 <= __0x12561.Y; __0x12562++ )
				{
					for( int __0x12563 = __0x12560.X; __0x12563 <= __0x12561.X; __0x12563++ )
					{
						Vector2 __0x12564 = __0x12585.GetPositionXYByMaskIndex( new Vector2I( __0x12563, __0x12562 ) );

						float __0x12565;
						{
							double __0x12566;
							if( __0x12553 == TerrainEditorToolShape.Circle )
								__0x12566 = ( __0x12564 - position.ToVector2() ).Length();
							else
								__0x12566 = Math.Max( Math.Abs( __0x12564.X - position.X ), Math.Abs( __0x12564.Y - position.Y ) );

							if( __0x12566 >= __0x12551 )
								__0x12565 = 0;
							else if( __0x12566 == 0 )
								__0x12565 = 1;
							else if( __0x12566 <= __0x12552 * __0x12551 )
								__0x12565 = 1;
							else
							{
								double __0x12567;
								if( __0x12551 - __0x12551 * __0x12552 != 0 )
									__0x12567 = ( __0x12566 - __0x12551 * __0x12552 ) / ( __0x12551 - __0x12551 * __0x12552 );
								else
									__0x12567 = 0;
								__0x12565 = (float)Math.Cos( Math.PI / 2 * __0x12567 );
							}
						}

						if( __0x12565 != 0 )
						{
							float __0x12568 = __0x12547.GetMaskValue( new Vector2I( __0x12563, __0x12562 ) );

							float __0x12569 = __0x12568;

							
							bool __0x12570 = false;
							
							
							
							
							
							
							
							
							
							
							

							
							
							
							
							
							
							
							
							
							
							

							
							
							
							

							if( !__0x12570 )
							{
								switch( __0x12483 )
								{
								case TerrainEditorMode.PaintPaint:
								case TerrainEditorMode.PaintClear:
									{
										bool __0x12571 = __0x12483 == TerrainEditorMode.PaintPaint;
										if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
											__0x12571 = !__0x12571;

										if( __0x12571 )
											__0x12569 = __0x12568 + __0x12554 * __0x12565;
										else
											__0x12569 = __0x12568 - __0x12554 * __0x12565;
									}
									break;

								case TerrainEditorMode.PaintSmooth:
									{
										float __0x12572 = 0;
										{
											__0x12572 += __0x12547.GetMaskValue( new Vector2I( __0x12563 - 1, __0x12562 ) );
											__0x12572 += __0x12547.GetMaskValue( new Vector2I( __0x12563 + 1, __0x12562 ) );
											__0x12572 += __0x12547.GetMaskValue( new Vector2I( __0x12563, __0x12562 - 1 ) );
											__0x12572 += __0x12547.GetMaskValue( new Vector2I( __0x12563, __0x12562 + 1 ) );
											
											
											
											
											__0x12572 /= 4;
										}

										if( __0x12568 < __0x12572 )
										{
											__0x12569 = __0x12568 + __0x12554 * __0x12565;
											if( __0x12569 > __0x12572 )
												__0x12569 = __0x12572;
										}
										else if( __0x12568 > __0x12572 )
										{
											__0x12569 = __0x12568 - __0x12554 * __0x12565;
											if( __0x12569 < __0x12572 )
												__0x12569 = __0x12572;
										}
									}
									break;

								case TerrainEditorMode.PaintFlatten:
									{
										float __0x12573 = __0x12488;

										if( __0x12568 < __0x12573 )
										{
											__0x12569 = __0x12568 + __0x12554 * __0x12565;
											if( __0x12569 > __0x12573 )
												__0x12569 = __0x12573;
										}
										else if( __0x12568 > __0x12573 )
										{
											__0x12569 = __0x12568 - __0x12554 * __0x12565;
											if( __0x12569 < __0x12573 )
												__0x12569 = __0x12573;
										}
									}
									break;

								}
							}

							MathEx.Clamp( ref __0x12569, 0, 1 );

							if( __0x12568 != __0x12569 )
							{
								
								if( __0x12547.Mask.Value == null || __0x12547.Mask.Value.Length == 0 || __0x12558 != null )
								{
									if( __0x12558 == null )
									{
										var __0x12574 = __0x12547.Mask;

										__0x12547.Mask = new byte[ __0x12585.GetPaintMaskSizeInteger() * __0x12585.GetPaintMaskSizeInteger() ];

										var __0x12575 = (Metadata.Property)__0x12547.MetadataGetMemberBySignature( "property:" + nameof( PaintLayer.Mask ) );
										var __0x12576 = new UndoActionPropertiesChange.Item( __0x12547, __0x12575, __0x12574 );
										__0x12558 = new UndoActionPropertiesChange( __0x12576 );
										__0x12492.Add( __0x12558 );
									}
								}
								else
								{
									if( __0x12559 == null )
									{
										__0x12559 = new TerrainPaintChangeUndoAction( __0x12585 );
										__0x12493.Add( __0x12559 );
									}
									__0x12559.SaveValue( __0x12547, new Vector2I( __0x12563, __0x12562 ), __0x12568 );
								}

								
								__0x12547.SetMaskValue( new Vector2I( __0x12563, __0x12562 ), __0x12569 );
							}
						}
					}
				}

				__0x12585.AllowFullUpdateGeometryCollisionCurrentLayers = false;
				__0x12489.AddWithCheckAlreadyContained( __0x12585 );

				var __0x12577 = new RectangleI( __0x12560, __0x12561 );
				__0x12585.SetNeedUpdateTilesByMaskIndices( __0x12577, Terrain.NeedUpdateEnum.Layers );
				

				__0x12598( __0x12585, __0x12577 );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				

				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}
		}

		protected virtual void StopToolModify( bool cancel )
		{
			foreach( var __0x12586 in __0x12489 )
				__0x12586.AllowFullUpdateGeometryCollisionCurrentLayers = true;
			__0x12489.Clear();

			foreach( var __0x12587 in __0x12490 )
				__0x12587.Terrain.SetNeedUpdateTilesByCellIndices( __0x12587.Rectangle, Terrain.NeedUpdateEnum.Geometry | Terrain.NeedUpdateEnum.Collision );
			__0x12490.Clear();

			
			
			
			
			
			

			

			

			
			
			
			
			
			
			
			

			
			
			

			
			
			
			

			
			

			
			
			
			
			
			

			

			
			if( __0x12491.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12588 in __0x12491 )
						__0x12588.RestoreOldValues();
				}
				else
				{
					var __0x12578 = new UndoMultiAction();
					foreach( var __0x12589 in __0x12491 )
						__0x12578.AddAction( __0x12589 );
					DocumentWindow.Document.CommitUndoAction( __0x12578 );
				}
				__0x12491.Clear();
			}

			if( __0x12492.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12590 in __0x12492 )
						__0x12590.PerformUndo();
				}
				else
				{
					var __0x12579 = new UndoMultiAction();
					foreach( var __0x12591 in __0x12492 )
						__0x12579.AddAction( __0x12591 );
					DocumentWindow.Document.CommitUndoAction( __0x12579 );
				}
				__0x12492.Clear();
			}

			if( __0x12493.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12592 in __0x12493 )
						__0x12592.PerformUndo();
				}
				else
				{
					var __0x12580 = new UndoMultiAction();
					foreach( var __0x12593 in __0x12493 )
						__0x12580.AddAction( __0x12593 );
					DocumentWindow.Document.CommitUndoAction( __0x12580 );
				}
				__0x12493.Clear();
			}

			if( __0x12494.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12594 in __0x12494 )
						__0x12594.DoUndo();
				}
				else
				{
					var __0x12581 = new UndoMultiAction();
					foreach( var __0x12595 in __0x12494 )
						__0x12581.AddAction( __0x12595 );
					DocumentWindow.Document.CommitUndoAction( __0x12581 );
				}

				__0x12494.Clear();
			}

			__0x12486 = false;
		}
	}
}





namespace NeoAxis.Editor
{
	class TerrainEditorExtensions : EditorExtensions
	{
		public override void OnRegister()
		{
			__0x12625();
			__0x12626();
		}

		static void __0x12625()
		{
			
			{
				var __0x12604 = new EditorAction();
				__0x12604.Name = "Terrain Geometry Raise";
				__0x12604.Description = "The mode of increasing the height of the terrain. Holding down the Shift key will decrease the height.";
				
				__0x12604.ImageBig = Properties.Resources.TerrainRaise_32;
				__0x12604.QatSupport = true;
				__0x12604.RibbonText = ("Raise", "");
				EditorActions.Register( __0x12604 );
			}

			
			{
				var __0x12605 = new EditorAction();
				__0x12605.Name = "Terrain Geometry Lower";
				__0x12605.Description = "The mode of decreasing the height of the terrain. Holding down the Shift key will increase the height.";
				
				__0x12605.ImageBig = Properties.Resources.TerrainLower_32;
				__0x12605.QatSupport = true;
				__0x12605.RibbonText = ("Lower", "");
				EditorActions.Register( __0x12605 );
			}

			
			{
				var __0x12606 = new EditorAction();
				__0x12606.Name = "Terrain Geometry Smooth";
				__0x12606.Description = "The mode of smoothing the height of the terrain.";
				
				__0x12606.ImageBig = Properties.Resources.TerrainSmooth_32;
				__0x12606.QatSupport = true;
				__0x12606.RibbonText = ("Smooth", "");
				EditorActions.Register( __0x12606 );
			}

			
			{
				var __0x12607 = new EditorAction();
				__0x12607.Name = "Terrain Geometry Flatten";
				__0x12607.Description = "The mode of flattening the height of the terrain.";
				
				__0x12607.ImageBig = Properties.Resources.TerrainFlatten_32;
				__0x12607.QatSupport = true;
				__0x12607.RibbonText = ("Flatten", "");
				EditorActions.Register( __0x12607 );
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x12608 = new EditorAction();
				__0x12608.Name = "Terrain Shape Circle";
				__0x12608.Description = "The circle shape mode of the editing tool.";
				__0x12608.ImageSmall = Properties.Resources.Circle_16;
				__0x12608.ImageBig = Properties.Resources.Circle_32;
				__0x12608.QatSupport = true;
				__0x12608.RibbonText = ("Circle", "");
				EditorActions.Register( __0x12608 );
			}

			
			{
				var __0x12609 = new EditorAction();
				__0x12609.Name = "Terrain Shape Square";
				__0x12609.Description = "The square shape mode of the editing tool.";
				__0x12609.ImageSmall = Properties.Resources.Square_16;
				__0x12609.ImageBig = Properties.Resources.Square_32;
				__0x12609.QatSupport = true;
				__0x12609.RibbonText = ("Square", "");
				EditorActions.Register( __0x12609 );
			}

			
			{
				var __0x12610 = new EditorAction();
				__0x12610.Name = "Terrain Tool Radius";
				__0x12610.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x12610.Slider.Minimum = 0;
				__0x12610.Slider.Maximum = 100;
				__0x12610.Slider.ExponentialPower = 3;
				__0x12610.Slider.Value = SceneEditor.TerrainToolRadius;
				__0x12610.Description = "Tool size.";
				__0x12610.RibbonText = ("Radius", "");
				EditorActions.Register( __0x12610 );
			}

			
			{
				var __0x12611 = new EditorAction();
				__0x12611.Name = "Terrain Tool Strength";
				__0x12611.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x12611.Slider.Value = SceneEditor.TerrainToolStrength;
				__0x12611.Description = "The strength of impact of the editing tool.";
				__0x12611.RibbonText = ("Strength", "");
				EditorActions.Register( __0x12611 );
			}

			
			{
				var __0x12612 = new EditorAction();
				__0x12612.Name = "Terrain Tool Hardness";
				__0x12612.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x12612.Slider.Value = SceneEditor.TerrainToolHardness;
				__0x12612.Description = "The hardness of the editing tool. Determines the strength of impact depending on the distance to the center of the tool.";
				__0x12612.RibbonText = ("Hardness", "");
				EditorActions.Register( __0x12612 );
			}

			
			{
				var __0x12613 = new EditorAction();
				__0x12613.Name = "Terrain Paint Paint";
				__0x12613.Description = "The mode of paint a layer. Holding down the Shift key will erasing a layer.";
				__0x12613.ImageSmall = Properties.Resources.Paint_16;
				__0x12613.ImageBig = Properties.Resources.Paint_32;
				__0x12613.QatSupport = true;
				__0x12613.RibbonText = ("Paint", "");
				EditorActions.Register( __0x12613 );
			}

			
			{
				var __0x12614 = new EditorAction();
				__0x12614.Name = "Terrain Paint Clear";
				__0x12614.Description = "The mode of erasing a layer. Holding down the Shift key will paint a layer.";
				__0x12614.ImageSmall = Properties.Resources.Eraser_16;
				__0x12614.ImageBig = Properties.Resources.Eraser_32;
				__0x12614.QatSupport = true;
				__0x12614.RibbonText = ("Clear", "");
				EditorActions.Register( __0x12614 );
			}

			
			{
				var __0x12615 = new EditorAction();
				__0x12615.Name = "Terrain Paint Smooth";
				__0x12615.Description = "The mode of smoothing a layer.";
				__0x12615.ImageSmall = Properties.Resources.PaintSmooth_16;
				__0x12615.ImageBig = Properties.Resources.PaintSmooth_32;
				__0x12615.QatSupport = true;
				__0x12615.RibbonText = ("Smooth", "");
				EditorActions.Register( __0x12615 );
			}

			
			{
				var __0x12616 = new EditorAction();
				__0x12616.Name = "Terrain Paint Flatten";
				__0x12616.Description = "The mode of flattening a layer.";
				__0x12616.ImageSmall = Properties.Resources.PaintFlatten_16;
				__0x12616.ImageBig = Properties.Resources.PaintFlatten_32;
				__0x12616.QatSupport = true;
				__0x12616.RibbonText = ("Flatten", "");
				EditorActions.Register( __0x12616 );
			}

			
			{
				var __0x12617 = new EditorAction();
				__0x12617.Name = "Terrain Paint Layers";
				__0x12617.ActionType = EditorAction.ActionTypeEnum.ListBox;
				__0x12617.ListBox.Length = 400;
				__0x12617.ListBox.Mode = EditorAction.ListBoxSettings.ModeEnum.Tiles;
				__0x12617.Description = "The list of layers to paint.";
				__0x12617.RibbonText = ("Layers", "");
				EditorActions.Register( __0x12617 );
			}

			
			{
				var __0x12618 = new EditorAction();
				__0x12618.Name = "Terrain Paint Add Layer";
				__0x12618.ImageSmall = NeoAxis.Properties.Resources.Layers_16;
				__0x12618.ImageBig = NeoAxis.Properties.Resources.Layers_32;
				__0x12618.QatSupport = true;
				__0x12618.Description = "Add Paint Layer\nAdds a paint layer to the terrain.";
				__0x12618.RibbonText = ("Add", "Layer");
				EditorActions.Register( __0x12618 );
			}

		}

		static void __0x12626()
		{
			bool VisibleCondition()
			{
				var __0x12619 = EditorForm.Instance.WorkspaceController.SelectedDocumentWindow?.ObjectOfWindow as Scene;
				return __0x12619 != null && __0x12619.GetComponent<Terrain>( true ) != null;
			}

			var __0x12620 = new EditorRibbonDefaultConfiguration.Tab( "Terrain Editor", "TerrainEditor", null, VisibleCondition );
			EditorRibbonDefaultConfiguration.Tabs.Add( __0x12620 );

			
			{
				var __0x12621 = new EditorRibbonDefaultConfiguration.Group( "Geometry" );
				__0x12620.Groups.Add( __0x12621 );
				__0x12621.AddAction( "Terrain Geometry Raise" );
				__0x12621.AddAction( "Terrain Geometry Lower" );
				__0x12621.AddAction( "Terrain Geometry Smooth" );
				__0x12621.AddAction( "Terrain Geometry Flatten" );
			}

			
			
			
			
			
			
			

			
			{
				var __0x12622 = new EditorRibbonDefaultConfiguration.Group( "Shape" );
				__0x12620.Groups.Add( __0x12622 );
				__0x12622.AddAction( "Terrain Shape Circle" );
				__0x12622.AddAction( "Terrain Shape Square" );
			}

			
			{
				var __0x12623 = new EditorRibbonDefaultConfiguration.Group( "Tool Settings" );
				__0x12620.Groups.Add( __0x12623 );
				__0x12623.AddAction( "Terrain Tool Radius" );
				__0x12623.AddAction( "Terrain Tool Strength" );
				__0x12623.AddAction( "Terrain Tool Hardness" );
			}

			
			{
				var __0x12624 = new EditorRibbonDefaultConfiguration.Group( "Paint" );
				__0x12620.Groups.Add( __0x12624 );
				__0x12624.AddAction( "Terrain Paint Paint" );
				__0x12624.AddAction( "Terrain Paint Clear" );
				__0x12624.AddAction( "Terrain Paint Smooth" );
				__0x12624.AddAction( "Terrain Paint Flatten" );
				__0x12624.AddAction( "Terrain Paint Layers" );
				__0x12624.AddAction( "Terrain Paint Add Layer" );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	public class TerrainSettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x12627;
		ProcedureUI.Button __0x12628;
		ProcedureUI.Button __0x12629;
		ProcedureUI.Button __0x12630;

		

		protected override void OnInit()
		{
			__0x12627 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Update" ), ProcedureUI.Button.SizeEnum.Long );
			__0x12627.Click += __0x12650;

			__0x12628 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Resize Masks" ), ProcedureUI.Button.SizeEnum.Long );
			__0x12628.Click += __0x12651;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x12627, __0x12628 } );

			__0x12629 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Import Heightmap" ), ProcedureUI.Button.SizeEnum.Long );
			__0x12629.Click += __0x12652;

			__0x12630 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Export Heightmap" ), ProcedureUI.Button.SizeEnum.Long );
			__0x12630.Click += __0x12653;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x12629, __0x12630 } );
		}

		Terrain __0x12648()
		{
			var __0x12631 = GetObjects<Terrain>();
			if( __0x12631.Length == 1 )
				return __0x12631[ 0 ];
			return null;
		}

		List<PaintLayer> __0x12649( Terrain __0x12654 )
		{
			var __0x12632 = new List<PaintLayer>();
			foreach( var __0x12646 in __0x12654.GetComponents<PaintLayer>() )
			{
				if( __0x12646.Enabled && __0x12646.Mask.Value != null && __0x12646.Mask.Value.Length != 0 )
				{
					if( __0x12646.Mask.Value.Length != __0x12654.GetPaintMaskSizeInteger() * __0x12654.GetPaintMaskSizeInteger() )
						__0x12632.Add( __0x12646 );
				}
			}
			return __0x12632;
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x12633 = __0x12648();
			__0x12627.Enabled = __0x12633 != null;
			__0x12628.Enabled = __0x12633 != null && __0x12649( __0x12633 ).Count != 0;
			__0x12629.Enabled = __0x12633 != null;
			__0x12630.Enabled = __0x12633 != null;
		}

		private void __0x12650( ProcedureUI.Button __0x12655 )
		{
			var __0x12634 = __0x12648();
			if( __0x12634 == null )
				return;

			__0x12634.UpdateRenderingAndCollisionData( true );
		}

		private void __0x12651( ProcedureUI.Button __0x12656 )
		{
			var __0x12635 = __0x12648();
			if( __0x12635 == null )
				return;

			var __0x12636 = __0x12649( __0x12635 );
			if( __0x12636.Count == 0 )
				return;

			var __0x12637 = string.Format( EditorLocalization.Translate( "Terrain", "Resize masks of selected layers to {0}x{0}?" ), __0x12635.GetPaintMaskSizeInteger() );
			if( EditorMessageBox.ShowQuestion( __0x12637, EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
			{
				var __0x12638 = new UndoMultiAction();

				foreach( var __0x12647 in __0x12636 )
				{
					var __0x12639 = __0x12647.Mask;

					__0x12647.Mask = PaintLayer.ResizeMask( __0x12647.Mask, __0x12635.GetPaintMaskSizeInteger() );

					var __0x12640 = (Metadata.Property)__0x12647.MetadataGetMemberBySignature( "property:" + nameof( PaintLayer.Mask ) );
					var __0x12641 = new UndoActionPropertiesChange.Item( __0x12647, __0x12640, __0x12639 );
					__0x12638.AddAction( new UndoActionPropertiesChange( __0x12641 ) );
				}

				if( __0x12638.Actions.Count != 0 )
					Provider.DocumentWindow.Document.CommitUndoAction( __0x12638 );
			}
		}

		private void __0x12652( ProcedureUI.Button __0x12657 )
		{
			var __0x12642 = __0x12648();
			if( __0x12642 == null )
				return;

			if( !EditorUtility.ShowOpenFileDialog( false, "", new[] { ("EXR files (*.exr)", "*.exr") }, out string fileName ) )
				return;

			if( !Terrain.LoadHeightmapBuffer( fileName, __0x12642.GetHeightmapSizeAsInteger(), out var heightmapBuffer, out var error ) )
			{
				EditorMessageBox.ShowWarning( error );
				return;
			}

			var __0x12643 = (Metadata.Property)__0x12642.MetadataGetMemberBySignature( "property:" + nameof( Terrain.HeightmapBuffer ) );
			var __0x12644 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x12642, __0x12643, __0x12642.HeightmapBuffer ) );

			__0x12642.HeightmapBuffer = heightmapBuffer;

			Provider.DocumentWindow.Document.CommitUndoAction( __0x12644 );
		}

		private void __0x12653( ProcedureUI.Button __0x12658 )
		{
			var __0x12645 = __0x12648();
			if( __0x12645 == null )
				return;

			if( !EditorUtility.ShowSaveFileDialog( "", "Heightmap.exr", "EXR files (*.exr)|*.exr", out var fileName ) )
				return;

			if( !__0x12645.SaveHeightmapBuffer( fileName, out var error ) )
				EditorMessageBox.ShowWarning( error );
			else
				ScreenNotifications.Show( EditorLocalization.Translate( "Terrain", "The image was created successfully." ) );
		}
	}
}





namespace NeoAxis.Editor
{
	public class TerrainGeometryChangeUndoAction : UndoSystem.Action
	{
		Terrain __0x12659;

		BitArray __0x12660 = new BitArray( 4097 * 4097 );
		Dictionary<int, float> __0x12661 = new Dictionary<int, float>( 512 );

		

		public TerrainGeometryChangeUndoAction( Terrain terrain )
		{
			this.__0x12659 = terrain;
		}

		public Terrain Terrain
		{
			get { return __0x12659; }
		}

		internal protected override void DoUndo()
		{
			var __0x12662 = RectangleI.Cleared;

			var __0x12663 = new Dictionary<int, float>( __0x12661.Count );
			foreach( var __0x12677 in __0x12661 )
			{
				var __0x12664 = __0x12681( __0x12677.Key );

				float __0x12665 = __0x12659.GetHeightWithoutPosition( __0x12664, false );
				__0x12663.Add( __0x12677.Key, __0x12665 );

				__0x12659.SetHeightWithoutPosition( __0x12664, __0x12677.Value );

				__0x12662.Add( __0x12664 );
			}

			__0x12661 = __0x12663;

			__0x12659.SetNeedUpdateTilesByCellIndices( __0x12662, Terrain.NeedUpdateEnum.Geometry | Terrain.NeedUpdateEnum.Collision );
		}

		internal protected override void DoRedo()
		{
			DoUndo();
		}

		internal protected override void Destroy()
		{
		}

		int __0x12680( Vector2I __0x12683 )
		{
			return __0x12683.X * 4097 + __0x12683.Y;
		}

		Vector2I __0x12681( int __0x12684 )
		{
			return new Vector2I( __0x12684 / 4097, __0x12684 % 4097 );
		}

		public void SaveValue( Vector2I cellIndex, float heightCoef )
		{
			int __0x12666 = __0x12680( cellIndex );
			if( !__0x12660[ __0x12666 ] )
			{
				__0x12660[ __0x12666 ] = true;
				__0x12661.Add( __0x12666, heightCoef );
			}
		}

		public void RestoreOldValues()
		{
			DoUndo();
		}
	}

	

	public class TerrainPaintChangeUndoAction : UndoSystem.Action
	{
		Terrain __0x12667;
		List<__0x12686> __0x12668 = new List<__0x12686>();

		

		class __0x12686
		{
			public PaintLayer layer;

			
			
			public Dictionary<Vector2I, float> values = new Dictionary<Vector2I, float>( 512 );
		}

		

		public TerrainPaintChangeUndoAction( Terrain terrain )
		{
			this.__0x12667 = terrain;
		}

		public Terrain Terrain
		{
			get { return __0x12667; }
		}

		internal protected override void DoUndo()
		{
			var __0x12669 = RectangleI.Cleared;

			var __0x12670 = new List<__0x12686>();

			foreach( var __0x12678 in __0x12668 )
			{
				var __0x12671 = new Dictionary<Vector2I, float>( __0x12678.values.Count );
				foreach( var __0x12679 in __0x12678.values )
				{
					float __0x12672 = __0x12678.layer.GetMaskValue( __0x12679.Key );
					__0x12671.Add( __0x12679.Key, __0x12672 );

					__0x12678.layer.SetMaskValue( __0x12679.Key, __0x12679.Value );

					__0x12669.Add( __0x12679.Key );
				}

				var __0x12673 = new __0x12686();
				__0x12673.layer = __0x12678.layer;
				__0x12673.values = __0x12671;
				__0x12670.Add( __0x12673 );
			}

			__0x12668 = __0x12670;

			__0x12667.SetNeedUpdateTilesByMaskIndices( __0x12669, Terrain.NeedUpdateEnum.Layers );
		}

		internal protected override void DoRedo()
		{
			DoUndo();
		}

		internal protected override void Destroy()
		{
		}

		__0x12686 __0x12682( PaintLayer __0x12685 )
		{
			for( int __0x12674 = 0; __0x12674 < __0x12668.Count; __0x12674++ )
				if( __0x12668[ __0x12674 ].layer == __0x12685 )
					return __0x12668[ __0x12674 ];

			{
				var __0x12675 = new __0x12686();
				__0x12675.layer = __0x12685;
				__0x12668.Add( __0x12675 );
				return __0x12675;
			}
		}

		public void SaveValue( PaintLayer layer, Vector2I maskIndex, float paintValue )
		{
			var __0x12676 = __0x12682( layer );

			if( !__0x12676.values.ContainsKey( maskIndex ) )
				__0x12676.values.Add( maskIndex, paintValue );
		}

		public void PerformUndo()
		{
			DoUndo();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class UIControlEditor : DocumentWindowWithViewport
	{
		
		

		
		
		
		FontComponent __0x12687;
		
		
		
		

		static float[] __0x12688 = new float[] { .1f, .2f, .35f, .5f, .6f, .7f, .8f, .9f, 1, 1.1f, 1.2f, 1.3f, 1.5f, 1.75f, 2.0f, 2.5f, 3.0f };

		
		float __0x12689;

		
		bool __0x12690;
		bool __0x12691;
		Vector2 __0x12692;
		Vector2I __0x12693;
		Vector2 __0x12694;

		
		bool __0x12695;
		bool __0x12696;
		Vector2 __0x12697;
		
		Vector2 __0x12698;
		

		
		bool __0x12699;
		bool __0x12700;
		bool __0x12701;
		Vector2I __0x12702;
		Vector2 __0x12703;
		
		UIControl __0x12704;
		
		ESet<UIControl> __0x12705;
		Dictionary<UIControl, __0x13034> __0x12706;
		MoveModeEnum __0x12707;

		
		bool __0x12708;
		Component __0x12709;
		
		DragDropSetReferenceData __0x12710;
		bool __0x12711;
		string[] __0x12712;

		ImageComponent __0x12713;
		UIControl __0x12714;

		bool __0x12715;

		

		class __0x13034
		{
			public Reference<UIMeasureValueVector2> size;
			public Reference<EHorizontalAlignment> horizontalAlignment;
			public Reference<EVerticalAlignment> verticalAlignment;
			public Reference<UIMeasureValueRectangle> margin;
		}

		

		[Flags]
		enum MoveModeEnum
		{
			Move = 1,
			ResizeLeft = 2,
			ResizeTop = 4,
			ResizeRight = 8,
			ResizeBottom = 16,
		}

		

		public UIControlEditor()
		{
			__0x12980();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x12975();

			

			
			
		}

		[Browsable( false )]
		public UIControl Control
		{
			get { return ObjectOfWindow as UIControl; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x12965;

			
			
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x12965;

			base.OnDestroy();
		}

		
		
		
		
		

		private void __0x12941( object __0x12981, FormClosingEventArgs __0x12982 )
		{
		}

		private void __0x12942( object __0x12983, EventArgs __0x12984 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			
			

			
			
			
			
			
		}

		
		
		
		

		
		
		

		public float GetZoom()
		{
			if( Control.EditorZoomIndex >= 0 && Control.EditorZoomIndex < __0x12688.Length )
				return __0x12688[ Control.EditorZoomIndex ];
			return 1;
		}

		double __0x12943()
		{
			return (double)__0x12689 / (double)ViewportControl.Viewport.SizeInPixels.X;
		}

		double __0x12944()
		{
			return (double)__0x12689 / (double)ViewportControl.Viewport.SizeInPixels.Y;
		}

		double __0x12945()
		{
			return Control.EditorScrollPosition.X - ConvertScreenToUnitX( 0.5, false );
		}

		double __0x12946()
		{
			return Control.EditorScrollPosition.Y - ConvertScreenToUnitY( 0.5, false );
		}

		public double ConvertUnitToScreenX( double posX )
		{
			double __0x12716 = ( posX - __0x12945() ) * __0x12943();
			__0x12716 *= GetZoom();
			return __0x12716;
		}

		public double ConvertUnitToScreenY( double posY )
		{
			double __0x12717 = ( posY - __0x12946() ) * __0x12944();
			__0x12717 *= GetZoom();
			return __0x12717;
		}

		public Vector2 ConvertUnitToScreen( Vector2 vector )
		{
			return new Vector2(
				ConvertUnitToScreenX( vector.X ),
				ConvertUnitToScreenY( vector.Y ) );
		}

		public Rectangle ConvertUnitToScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertUnitToScreenX( rect.Left ),
				ConvertUnitToScreenY( rect.Top ),
				ConvertUnitToScreenX( rect.Right ),
				ConvertUnitToScreenY( rect.Bottom ) );
		}

		public double ConvertScreenToUnitX( double screenX, bool applyScrollPosition )
		{
			double __0x12718 = screenX / __0x12943() / GetZoom();
			if( applyScrollPosition )
				__0x12718 += __0x12945();
			return __0x12718;
		}

		public double ConvertScreenToUnitY( double screenY, bool applyScrollPosition )
		{
			double __0x12719 = screenY / __0x12944() / GetZoom();
			if( applyScrollPosition )
				__0x12719 += __0x12946();
			return __0x12719;
		}

		public Vector2 ConvertScreenToUnit( Vector2 screen, bool applyScrollPosition )
		{
			return new Vector2(
				ConvertScreenToUnitX( screen.X, applyScrollPosition ),
				ConvertScreenToUnitY( screen.Y, applyScrollPosition ) );
		}

		public RectangleI GetVisibleCells()
		{
			Vector2I __0x12720 = ConvertScreenToUnit( Vector2.Zero, true ).ToVector2I() - new Vector2I( 1, 1 );
			Vector2I __0x12721 = ConvertScreenToUnit( Vector2.One, true ).ToVector2I() + new Vector2I( 1, 1 );
			return new RectangleI( __0x12720, __0x12721 );
		}

		public Rectangle SelectByRectangle_GetRectangleInScreen()
		{
			Rectangle __0x12722 = new Rectangle( __0x12697 );
			__0x12722.Add( __0x12698 );
			return __0x12722;
		}

		
		
		
		
		
		

		void __0x12947( CanvasRenderer __0x12985 )
		{
			if( __0x12687 == null )
				__0x12687 = ResourceManager.LoadResource<FontComponent>( @"Base\Fonts\FlowGraphEditor.ttf" );
		}

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		private void __0x12948( object __0x12986, KeyEventArgs __0x12987 )
		{
			
			
			
		}

		void __0x12949()
		{
			var __0x12723 = new List<KryptonContextMenuItemBase>();

			
			
			Component __0x12724 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x12724 = SelectedObjects[ 0 ] as Component;
			}

			
			{
				

				var __0x12725 = new KryptonContextMenuItem( __0x12951( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x12988, EventArgs __0x12989 )
				{
					
					EditorAPI.OpenDocumentWindowForObject( Document, __0x12724 );
				} );
				__0x12725.Enabled = __0x12724 != null && EditorAPI.IsDocumentObjectSupport( __0x12724 );
				__0x12723.Add( __0x12725 );
			}

			
			{
				var __0x12726 = new KryptonContextMenuItem( __0x12951( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12990, EventArgs __0x12991 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x12723.Add( __0x12726 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x12727 = new KryptonContextMenuItem( __0x12951( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12992, EventArgs __0x12993 )
				{
					var __0x12728 = __0x12724 ?? ObjectOfWindow;
					bool __0x12729 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x12728, __0x12729 );
				} );
				__0x12727.Enabled = __0x12724 != null || SelectedObjects.Length == 0;
				__0x12723.Add( __0x12727 );
			}

			__0x12723.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x12723, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x12994 )
				{
					TryNewObject( __0x12994 );
				} );

				
				
				
				
				
				
			}

			
			__0x12723.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x12730 = new KryptonContextMenuItem( __0x12951( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x12995, EventArgs __0x12996 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x12730.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x12730.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x12723.Add( __0x12730 );
			}

			
			{
				var __0x12731 = new KryptonContextMenuItem( __0x12951( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x12997, EventArgs __0x12998 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x12731.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x12731.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x12723.Add( __0x12731 );
			}

			
			{
				var __0x12732 = new KryptonContextMenuItem( __0x12951( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x12999, EventArgs __0x13000 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x12732.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x12732.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x12723.Add( __0x12732 );
			}

			
			{
				var __0x12733 = new KryptonContextMenuItem( __0x12951( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x13001, EventArgs __0x13002 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x12733.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x12733.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x12723.Add( __0x12733 );
			}

			
			{
				var __0x12734 = new KryptonContextMenuItem( __0x12951( "Export to File" ), null, delegate ( object __0x13003, EventArgs __0x13004 )
				{
					EditorUtility.ExportComponentToFile( __0x12724 );
				} );
				__0x12734.Enabled = __0x12724 != null;
				__0x12723.Add( __0x12734 );
			}

			
			__0x12723.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x12735 = new KryptonContextMenuItem( __0x12951( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x13005, EventArgs __0x13006 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x12735.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x12723.Add( __0x12735 );
			}

			
			{
				var __0x12736 = new KryptonContextMenuItem( __0x12951( "Rename" ), null, delegate ( object __0x13007, EventArgs __0x13008 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x12736.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x12736.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x12723.Add( __0x12736 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x12723 );

			EditorContextMenuWinForms.Show( __0x12723, this );
		}

		(UIControl, MoveModeEnum) __0x12950( bool __0x13009 )
		{
			var __0x12737 = ViewportControl.Viewport;
			Vector2 __0x12738 = __0x12737.MousePosition;

			var __0x12739 = new Vector2( EditorAPI.DPI / 96.0 * 4.0, EditorAPI.DPI / 96.0 * 4.0 ) / __0x12737.SizeInPixels.ToVector2();

			foreach( var __0x12924 in __0x12978( false ).GetReverse() )
			{
				bool __0x12740 = false;
				if( __0x13009 && !__0x12952( __0x12924 ) )
					__0x12740 = true;
				if( __0x12709 != null && ( __0x12924 == __0x12709 || __0x12924.GetAllParents( false ).Contains( __0x12709 ) ) )
					__0x12740 = true;
				if( !__0x12924.EnabledInHierarchy )
					__0x12740 = true;
				if( !__0x12924.VisibleInHierarchy )
					__0x12740 = true;

				if( !__0x12740 )
				{
					var __0x12741 = __0x12977( __0x12924 );
					__0x12741.Expand( __0x12739 / 2 );
					if( __0x12741.Contains( __0x12738 ) )
					{
						MoveModeEnum __0x12742 = 0;

						if( __0x12738.X < __0x12741.Left + __0x12739.X )
							__0x12742 |= MoveModeEnum.ResizeLeft;
						else if( __0x12738.X > __0x12741.Right - __0x12739.X )
							__0x12742 |= MoveModeEnum.ResizeRight;

						if( __0x12738.Y < __0x12741.Top + __0x12739.Y )
							__0x12742 |= MoveModeEnum.ResizeTop;
						else if( __0x12738.Y > __0x12741.Bottom - __0x12739.Y )
							__0x12742 |= MoveModeEnum.ResizeBottom;

						if( __0x12742 == 0 )
							__0x12742 = MoveModeEnum.Move;

						return (__0x12924, __0x12742);
					}
				}
			}

			return (null, MoveModeEnum.Move);
		}

		string __0x12951( string __0x13010 )
		{
			return EditorContextMenuWinForms.Translate( __0x13010 );
		}

		

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x12960();

			base.ViewportControl_ViewportDestroyed( sender );
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			if( button == EMouseButtons.Left )
			{
				var __0x12743 = __0x12950( true );
				var __0x12744 = __0x12743.Item1;
				var __0x12745 = __0x12743.Item2;

				if( __0x12744 != null )
				{
					

					Vector2 __0x12746 = viewport.MousePosition;
					Vector2I __0x12747 = ( __0x12746 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

					__0x12699 = true;
					__0x12700 = false;
					__0x12701 = false;
					__0x12704 = __0x12744;
					__0x12702 = __0x12747;
					__0x12703 = __0x12746;
					

					__0x12705 = new ESet<UIControl>();
					__0x12705.Add( __0x12744 );

					foreach( var __0x12925 in SelectedObjectsSet )
					{
						var __0x12748 = __0x12925 as UIControl;
						if( __0x12748 != null )
							__0x12705.AddWithCheckAlreadyContained( __0x12748 );
					}

					__0x12706 = new Dictionary<UIControl, __0x13034>();
					foreach( var __0x12926 in __0x12705 )
					{
						var __0x12749 = new __0x13034();
						__0x12749.size = __0x12926.Size;
						__0x12749.horizontalAlignment = __0x12926.HorizontalAlignment;
						__0x12749.verticalAlignment = __0x12926.VerticalAlignment;
						__0x12749.margin = __0x12926.Margin;

						
						
						

						__0x12706.Add( __0x12926, __0x12749 );
					}

					__0x12707 = __0x12745;

					handled = true;
					return;
				}
				else
				{
					
					__0x12695 = true;
					__0x12696 = false;
					__0x12697 = viewport.MousePosition;
					
					__0x12698 = __0x12697;
					

					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				Vector2 __0x12750 = viewport.MousePosition;
				Vector2I __0x12751 = ( __0x12750 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

				__0x12690 = true;
				__0x12691 = false;
				__0x12692 = Control.EditorScrollPosition;
				__0x12693 = __0x12751;
				__0x12694 = __0x12750;

				handled = true;
				return;
			}
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( viewport, button, ref handled );

			
			
			
			
			

			var __0x12752 = __0x12950( true ).Item1;

			var __0x12753 = new ESet<object>( SelectedObjectsSet );

			
			
			if( button == EMouseButtons.Left )
			{
				
				bool __0x12754 = true;

				
				if( __0x12700 )
					__0x12754 = false;
				if( __0x12754 )
				{
					bool __0x12755 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x12755 )
						__0x12753.Clear();

					
					if( __0x12752 != null )
					{
						if( !__0x12753.Contains( __0x12752 ) )
							__0x12753.Add( __0x12752 );
						else
							__0x12753.Remove( __0x12752 );
					}
				}

				
				if( __0x12700 )
				{
					

					

					if( !__0x12701 )
					{
						

						var __0x12756 = new List<UndoActionPropertiesChange.Item>();

						foreach( var __0x12927 in __0x12705 )
						{
							var __0x12757 = __0x12706[ __0x12927 ];

							{
								var __0x12758 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x12927.GetType() ).MetadataGetMemberBySignature( "property:Size" );
								__0x12756.Add( new UndoActionPropertiesChange.Item( __0x12927, __0x12758, __0x12757.size, null ) );
							}
							{
								var __0x12759 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x12927.GetType() ).MetadataGetMemberBySignature( "property:HorizontalAlignment" );
								__0x12756.Add( new UndoActionPropertiesChange.Item( __0x12927, __0x12759, __0x12757.horizontalAlignment, null ) );
							}
							{
								var __0x12760 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x12927.GetType() ).MetadataGetMemberBySignature( "property:VerticalAlignment" );
								__0x12756.Add( new UndoActionPropertiesChange.Item( __0x12927, __0x12760, __0x12757.verticalAlignment, null ) );
							}
							{
								var __0x12761 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x12927.GetType() ).MetadataGetMemberBySignature( "property:Margin" );
								__0x12756.Add( new UndoActionPropertiesChange.Item( __0x12927, __0x12761, __0x12757.margin, null ) );
							}
						}

						if( __0x12756.Count != 0 )
						{
							var __0x12762 = new UndoActionPropertiesChange( __0x12756.ToArray() );
							Document.UndoSystem.CommitAction( __0x12762 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x12763 = new UndoActionComponentCreateDelete( Document, __0x12705.ToArray(), true );
						Document.UndoSystem.CommitAction( __0x12763 );
						Document.Modified = true;

						
						SelectObjects( SelectedObjects, forceUpdate: true );
					}
				}
				__0x12699 = false;
				__0x12700 = false;
				__0x12701 = false;
				__0x12704 = null;
				__0x12705 = null;
				__0x12706 = null;
				__0x12702 = Vector2I.Zero;
				__0x12703 = Vector2.Zero;
				
				__0x12707 = MoveModeEnum.Move;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x12695 )
				{
					if( __0x12696 )
					{
						bool __0x12764 = ( Form.ModifierKeys & Keys.Shift ) != 0;
						if( !__0x12764 )
							__0x12753.Clear();

						if( __0x12696 )
						{
							foreach( var __0x12928 in __0x12954() )
								__0x12753.AddWithCheckAlreadyContained( __0x12928 );
						}

						if( __0x12696 )
							handled = true;
					}

					__0x12695 = false;
					__0x12696 = false;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				if( __0x12691 )
					handled = true;

				__0x12690 = false;
				__0x12691 = false;
			}

			
			SelectObjects( __0x12753 );

			
			if( !handled && button == EMouseButtons.Right )
				__0x12949();
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			

			if( __0x12699 && !__0x12700 )
			{
				Vector2I __0x12765 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x12766 = __0x12702 - __0x12765;
				if( Math.Abs( __0x12766.X ) > 2 || Math.Abs( __0x12766.Y ) > 2 )
				{
					__0x12700 = true;

					
					if( ( ModifierKeys & Keys.Shift ) != 0 )
					{
						var __0x12767 = __0x12704;
						var __0x12768 = __0x12705;
						var __0x12769 = __0x12706;

						__0x12704 = null;
						__0x12705 = new ESet<UIControl>();
						__0x12706 = new Dictionary<UIControl, __0x13034>();

						

						foreach( var __0x12929 in __0x12768 )
						{
							var __0x12770 = (UIControl)EditorUtility.CloneComponent( __0x12929 );

							if( __0x12767 == __0x12929 )
								__0x12704 = __0x12770;
							__0x12705.Add( __0x12770 );
							__0x12706[ __0x12770 ] = __0x12769[ __0x12929 ];
						}

						__0x12701 = true;

						SelectObjects( __0x12705.ToArray(), updateSettingsWindowSelectObjects: false );

						
						EditorUtility.ShowScreenNotificationObjectsCloned( __0x12705.Count );
					}
				}
			}
			if( __0x12700 )
			{
				Vector2 __0x12771 = ConvertMainScreenToPreviewScreen( viewport.MousePosition - __0x12703, true );

				foreach( var __0x12930 in __0x12705 )
				{
					var __0x12772 = __0x12706[ __0x12930 ];
					var __0x12773 = __0x12772.margin.Value;
					var __0x12774 = __0x12772.size.Value;

					var __0x12775 = __0x12976( __0x12930 );
					if( __0x12775 == null )
						__0x12775 = __0x12930;

					Vector2 __0x12776 = Vector2.Zero;
					if( __0x12773.Measure == UIMeasure.Parent )
					{
						if( __0x12775.ParentControl != null )
							__0x12776 = __0x12771 * __0x12775.ParentControl.GetScreenSize();
					}
					else
						__0x12776 = __0x12775.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12771 ), __0x12773.Measure );

					
					Vector2 __0x12777 = Vector2.Zero;
					if( __0x12774.Measure == UIMeasure.Parent )
					{
						if( __0x12775.ParentControl != null )
							__0x12777 = __0x12771 * __0x12775.ParentControl.GetScreenSize();
					}
					else
						__0x12777 = __0x12775.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12771 ), __0x12774.Measure );

					Rectangle __0x12778 = __0x12773.Value;
					Vector2 __0x12779 = __0x12774.Value;
					var __0x12780 = false;
					var __0x12781 = false;
					var __0x12782 = false;
					var __0x12783 = false;
					var __0x12784 = false;
					var __0x12785 = false;

					switch( __0x12930.HorizontalAlignment.Value )
					{
					case EHorizontalAlignment.Left:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12780 = true;
								__0x12779.X -= __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12779.X += __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12780 = true;
							}
						}
						break;

					case EHorizontalAlignment.Center:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12780 = true;
								__0x12779.X -= __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12778.Right -= __0x12776.X;
								__0x12781 = true;
								__0x12779.X += __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12778.Right -= __0x12776.X;
								__0x12780 = true;
								__0x12781 = true;
							}
						}
						break;

					case EHorizontalAlignment.Right:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12779.X -= __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12778.Right -= __0x12776.X;
								__0x12781 = true;
								__0x12779.X += __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Right -= __0x12776.X;
								__0x12781 = true;
							}
						}
						break;

					case EHorizontalAlignment.Stretch:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12780 = true;
								__0x12779.X -= __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12778.Right -= __0x12776.X;
								__0x12781 = true;
								__0x12779.X += __0x12777.X;
								__0x12784 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Left += __0x12776.X;
								__0x12778.Right -= __0x12776.X;
								__0x12780 = true;
								__0x12781 = true;
							}
						}
						break;
					}

					switch( __0x12930.VerticalAlignment.Value )
					{
					case EVerticalAlignment.Top:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12782 = true;
								__0x12779.Y -= __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12779.Y += __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12782 = true;
							}
						}
						break;

					case EVerticalAlignment.Center:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12782 = true;
								__0x12779.Y -= __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12778.Bottom -= __0x12776.Y;
								__0x12783 = true;
								__0x12779.Y += __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12778.Bottom -= __0x12776.Y;
								__0x12782 = true;
								__0x12783 = true;
							}
						}
						break;

					case EVerticalAlignment.Bottom:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12779.Y -= __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12778.Bottom -= __0x12776.Y;
								__0x12783 = true;
								__0x12779.Y += __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Bottom -= __0x12776.Y;
								__0x12783 = true;
							}
						}
						break;

					case EVerticalAlignment.Stretch:
						{
							if( __0x12707.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12782 = true;
								__0x12779.Y -= __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12778.Bottom -= __0x12776.Y;
								__0x12783 = true;
								__0x12779.Y += __0x12777.Y;
								__0x12785 = true;
							}
							else if( __0x12707.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12778.Top += __0x12776.Y;
								__0x12778.Bottom -= __0x12776.Y;
								__0x12782 = true;
								__0x12783 = true;
							}
						}
						break;
					}

					
					if( ModifierKeys.HasFlag( Keys.Control ) )
					{
						double __0x12786 = ProjectSettings.Get.UIEditor.GetUIEditorStepMovement( __0x12773.Measure );
						if( __0x12786 != 0 )
						{
							var __0x12787 = __0x12778;
							Vector2 __0x12788 = new Vector2( __0x12786, __0x12786 );
							__0x12787 += __0x12788 / 2;
							__0x12787 /= __0x12788;
							__0x12787 = new RectangleI( (int)__0x12787.Left, (int)__0x12787.Top, (int)__0x12787.Right, (int)__0x12787.Bottom ).ToRectangle();
							__0x12787 *= __0x12788;

							if( __0x12780 )
								__0x12778.Left = __0x12787.Left;
							if( __0x12782 )
								__0x12778.Top = __0x12787.Top;
							if( __0x12781 )
								__0x12778.Right = __0x12787.Right;
							if( __0x12783 )
								__0x12778.Bottom = __0x12787.Bottom;
						}

						double __0x12789 = ProjectSettings.Get.UIEditor.GetUIEditorStepMovement( __0x12774.Measure );
						if( __0x12789 != 0 )
						{
							var __0x12790 = __0x12779;
							Vector2 __0x12791 = new Vector2( __0x12789, __0x12789 );
							__0x12790 += __0x12791 / 2;
							__0x12790 /= __0x12791;
							__0x12790 = new Vector2I( (int)__0x12790.X, (int)__0x12790.Y ).ToVector2();
							__0x12790 *= __0x12791;

							if( __0x12784 )
								__0x12779.X = __0x12790.X;
							if( __0x12785 )
								__0x12779.Y = __0x12790.Y;
						}
					}

					if( __0x12780 || __0x12782 || __0x12781 || __0x12783 )
						__0x12930.Margin = new UIMeasureValueRectangle( __0x12773.Measure, __0x12778 );
					if( __0x12784 || __0x12785 )
						__0x12930.Size = new UIMeasureValueVector2( __0x12774.Measure, __0x12779 );

					__0x12715 = true;
				}
			}

			
			if( __0x12690 )
			{
				Vector2I __0x12792 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x12793 = __0x12693 - __0x12792;
				if( Math.Abs( __0x12793.X ) > 2 || Math.Abs( __0x12793.Y ) > 2 )
					__0x12691 = true;
			}
			if( __0x12691 )
			{
				Vector2 __0x12794 = mouse - __0x12694;
				Control.EditorScrollPosition = __0x12692 - ConvertScreenToUnit( __0x12794, false );
			}

			
			if( __0x12695 )
			{
				Vector2 __0x12795 = ( viewport.MousePosition - __0x12697 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x12795.X ) >= 3 || Math.Abs( __0x12795.Y ) >= 3 )
					__0x12696 = true;

				__0x12698 = viewport.MousePosition;
				
			}
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( viewport, delta, ref handled );
			if( handled )
				return;

			

			Vector2 __0x12796 = viewport.MousePosition;
			Vector2 __0x12797 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

			
			bool __0x12798 = false;

			if( delta > 0 )
			{
				int __0x12799 = delta / 120;
				if( __0x12799 == 0 )
					__0x12799 = 1;

				for( int __0x12800 = 0; __0x12800 < __0x12799; __0x12800++ )
				{
					if( Control.EditorZoomIndex < __0x12688.Length - 1 )
					{
						Control.EditorZoomIndex++;
						__0x12798 = true;
					}
				}
			}
			else if( delta < 0 )
			{
				int __0x12801 = -delta / 120;
				if( __0x12801 == 0 )
					__0x12801 = 1;

				for( int __0x12802 = 0; __0x12802 < __0x12801; __0x12802++ )
				{
					if( Control.EditorZoomIndex > 0 )
					{
						Control.EditorZoomIndex--;
						__0x12798 = true;
					}
				}
			}

			if( __0x12798 )
			{
				Vector2 __0x12803 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

				Vector2 __0x12804 = __0x12797 * ( __0x12796 - new Vector2( 0.5, 0.5 ) );
				Vector2 __0x12805 = __0x12803 * ( __0x12796 - new Vector2( 0.5, 0.5 ) );

				Vector2 __0x12806 = Control.EditorScrollPosition;
				__0x12806 += __0x12804;
				__0x12806 -= __0x12805;
				Control.EditorScrollPosition = __0x12806;

				AddScreenMessage( string.Format( "Zoom {0}", GetZoom() ) );
			}

			handled = true;
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );

			__0x12963( delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			base.Viewport_UpdateBegin( viewport );
		}

		bool __0x12952( UIControl __0x13011 )
		{
			if( __0x13011.VisibleInHierarchy && __0x13011.CanBeSelectedInHierarchy && __0x13011.TypeSettingsIsPublic() )
				return true;

			return false;
		}

		List<UIControl> __0x12953( Rectangle __0x13012 )
		{
			var __0x12807 = new List<UIControl>();
			foreach( var __0x12931 in __0x12978( false ) )
			{
				if( __0x12952( __0x12931 ) )
				{
					var __0x12808 = __0x12977( __0x12931 );
					if( __0x12808.Intersects( __0x13012 ) )
						__0x12807.Add( __0x12931 );
				}
			}

			

			var __0x12809 = new List<UIControl>( __0x12807.Count );

			var __0x12810 = new ESet<Component>( __0x12807.Count );
			foreach( var __0x12932 in __0x12807 )
				__0x12810.AddRangeWithCheckAlreadyContained( __0x12932.GetAllParents( false ) );

			foreach( var __0x12933 in __0x12807 )
				if( !__0x12810.Contains( __0x12933 ) )
					__0x12809.Add( __0x12933 );

			return __0x12809;
		}

		ESet<UIControl> __0x12954()
		{
			var __0x12811 = new ESet<UIControl>();
			if( __0x12696 )
			{
				foreach( var __0x12934 in __0x12953( SelectByRectangle_GetRectangleInScreen() ) )
					__0x12811.Add( __0x12934 );
			}
			return __0x12811;
		}

		bool __0x12955()
		{
			if( __0x12700 )
				return false;
			return true;
		}

		protected virtual void RenderBackground()
		{
			var __0x12812 = this;

			var __0x12813 = __0x12812.ViewportControl.Viewport;
			var __0x12814 = __0x12813.CanvasRenderer;

			RectangleI __0x12815 = __0x12812.GetVisibleCells();

			
			__0x12814.AddQuad( new Rectangle( 0, 0, 1, 1 ), new ColorValue( .17f, .17f, .17f ) );

			
			if( __0x12812.GetZoom() > .5f && ProjectSettings.Get.UIEditor.UIEditorDisplayGrid )
			{
				var __0x12816 = new List<CanvasRenderer.LineItem>( 256 );

				{
					ColorValue __0x12817 = new ColorValue( .2f, .2f, .2f );
					for( int __0x12818 = __0x12815.Left; __0x12818 <= __0x12815.Right; __0x12818++ )
					{
						if( __0x12818 % 10 != 0 )
						{
							var __0x12819 = (float)__0x12812.ConvertUnitToScreenX( __0x12818 );
							__0x12816.Add( new CanvasRenderer.LineItem( new Vector2F( __0x12819, 0 ), new Vector2F( __0x12819, 1 ), __0x12817 ) );
						}
					}
					for( int __0x12820 = __0x12815.Top; __0x12820 <= __0x12815.Bottom; __0x12820++ )
					{
						if( __0x12820 % 10 != 0 )
						{
							var __0x12821 = (float)__0x12812.ConvertUnitToScreenY( __0x12820 );
							__0x12816.Add( new CanvasRenderer.LineItem( new Vector2F( 0, __0x12821 ), new Vector2F( 1, __0x12821 ), __0x12817 ) );
						}
					}
				}

				{
					ColorValue __0x12822 = new ColorValue( .1f, .1f, .1f );
					for( int __0x12823 = __0x12815.Left; __0x12823 <= __0x12815.Right; __0x12823++ )
					{
						if( __0x12823 % 10 == 0 )
						{
							var __0x12824 = (float)__0x12812.ConvertUnitToScreenX( __0x12823 );
							__0x12816.Add( new CanvasRenderer.LineItem( new Vector2F( __0x12824, 0 ), new Vector2F( __0x12824, 1 ), __0x12822 ) );
						}
					}
					for( int __0x12825 = __0x12815.Top; __0x12825 <= __0x12815.Bottom; __0x12825++ )
					{
						if( __0x12825 % 10 == 0 )
						{
							var __0x12826 = (float)__0x12812.ConvertUnitToScreenY( __0x12825 );
							__0x12816.Add( new CanvasRenderer.LineItem( new Vector2F( 0, __0x12826 ), new Vector2F( 1, __0x12826 ), __0x12822 ) );
						}
					}
				}

				__0x12813.CanvasRenderer.AddLines( __0x12816 );
			}
		}

		ColorValue __0x12956( RenderSelectionState __0x13013 )
		{
			switch( __0x13013 )
			{
			case RenderSelectionState.CanSelect: return new ColorValue( 1, 1, 0 );
			case RenderSelectionState.Selected: return new ColorValue( 0, 1, 0 );
			}
			return new ColorValue( 1, 1, 1 );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			

			var __0x12827 = viewport.CanvasRenderer;

			var __0x12828 = __0x12950( true );
			var __0x12829 = __0x12828.Item1;
			var __0x12830 = __0x12828.Item2;

			__0x12947( __0x12827 );

			RenderBackground();
			__0x12957();

			
			{
				
				if( __0x12713 != null && __0x12713.CreateSize.Value != __0x12958() )
					__0x12960();
				if( __0x12713 == null )
					__0x12959();

				if( __0x12715 )
					__0x12961();

				
				if( __0x12713 != null )
				{
					Rectangle __0x12831 = GetViewportRectangleInScreenCoords();
					__0x12827.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
					__0x12827.AddQuad( __0x12831, new Rectangle( 0, 0, 1, 1 ), __0x12713, ColorValue.One, true );
					__0x12827.PopTextureFilteringMode();
				}
			}

			
			if( __0x12708 && __0x12709 != null && __0x12709 is UIControl )
			{
				var __0x12832 = __0x12950( false ).Item1;
				if( __0x12832 == null )
					__0x12832 = Control;

				if( __0x12832 != null )
				{
					var __0x12833 = __0x12977( __0x12832 );
					var __0x12834 = ProjectSettings.Get.General.CanSelectColor;
					__0x12827.AddRectangle( __0x12833, __0x12834 );
				}
			}

			
			{
				

				var __0x12835 = __0x12954();

				foreach( var __0x12935 in __0x12978( true ) )
				{
					
					var __0x12836 = RenderSelectionState.None;

					if( __0x12708 )
					{
						if( __0x12935 == __0x12709 )
							__0x12836 = RenderSelectionState.CanSelect;
					}
					else
					{
						if( __0x12955() )
						{
							if( __0x12829 == __0x12935 )
							{
								__0x12836 = RenderSelectionState.CanSelect;

								ViewportControl.OneFrameChangeCursor = __0x12979( __0x12830 );
							}

							if( __0x12835.Contains( __0x12935 ) )
								__0x12836 = RenderSelectionState.CanSelect;
						}
						
						

						if( IsObjectSelected( __0x12935 ) )
							__0x12836 = RenderSelectionState.Selected;
					}

					if( __0x12836 != RenderSelectionState.None )
					{
						var __0x12837 = __0x12956( __0x12836 );
						

						var __0x12838 = __0x12977( __0x12935 );

						
						
						

						ColorValue __0x12839;
						if( __0x12836 == RenderSelectionState.Selected )
							__0x12839 = ProjectSettings.Get.General.SelectedColor;
						else
							__0x12839 = ProjectSettings.Get.General.CanSelectColor;

						var __0x12840 = __0x12839;
						__0x12840.Alpha *= .5f;

						
						__0x12827.AddQuad( __0x12838, __0x12840 * __0x12837 );
						__0x12827.AddRectangle( __0x12838, __0x12839 * __0x12837 );
					}
				}
			}

			
			if( __0x12695 && __0x12696 )
			{
				Rectangle __0x12841 = new Rectangle( __0x12697 );
				
				__0x12841.Add( viewport.MousePosition );

				Vector2I __0x12842 = viewport.SizeInPixels;
				Vector2 __0x12843 = new Vector2( 1.0f / (float)__0x12842.X, 1.0f / (float)__0x12842.Y );

				__0x12827.AddRectangle( __0x12841 + __0x12843, new ColorValue( 0, 0, 0, .5f ) );
				__0x12827.AddRectangle( __0x12841, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			

			if( __0x12699 )
				ViewportControl.OneFrameChangeCursor = __0x12979( __0x12707 );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			base.Viewport_UpdateEnd( viewport );
		}

		[Browsable( false )]
		public FontComponent ControlFont
		{
			get { return __0x12687; }
		}

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			

			switch( context.Action.Name )
			{
			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
				if( CanSnap( out _ ) )
					context.Enabled = true;
				break;
			}
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			switch( context.Action.Name )
			{
			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
				Snap( context.Action );
				break;
			}
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x12936 in SelectedObjects )
			{
				var __0x12844 = __0x12936 as Component;
				if( __0x12844 != null )
					parentsForNewObjects.Add( __0x12844 );
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( Control );
			return true;
		}

		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out List<Component> parentsForNewObjects ) )
				return;

			bool __0x12845 = false;
			Vector2 __0x12846 = Vector2.Zero;
			if( parentsForNewObjects.Count == 1 )
			{
				var __0x12847 = parentsForNewObjects[ 0 ] as UIControl;
				if( __0x12847 != null )
				{
					__0x12845 = true;

					var __0x12848 = ConvertMainScreenToPreviewScreen( ViewportControl.Viewport.MousePosition );

					var __0x12849 = __0x12976( __0x12847 );
					if( __0x12849 == null )
						__0x12849 = __0x12847;

					var __0x12850 = __0x12848 - __0x12849.GetScreenPosition();
					__0x12846 = __0x12849.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12850 ), UIMeasure.Units );
				}
			}

			var __0x12851 = new NewObjectWindow.CreationDataClass();
			__0x12851.initDocumentWindow = this;
			__0x12851.initParentObjects = new List<object>();
			__0x12851.initParentObjects.AddRange( parentsForNewObjects );

			
			
			
			
			

			
			
			
			

			
			

			
			
			
			

			

			
			
			

			
			
			
			

			
			

			
			__0x12851.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x13014 )
			{
				if( __0x12845 )
				{
					foreach( var __0x12937 in __0x12851.createdComponentsOnTopLevel )
					{
						var __0x12852 = __0x12937 as UIControl;
						if( __0x12852 != null )
							__0x12852.Margin = new UIMeasureValueRectangle( UIMeasure.Units, __0x12846.X, __0x12846.Y, 0, 0 );
					}
				}
			};

			__0x12851.initLockType = lockType;
			__0x12851.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x12851 );
		}

		public Rectangle GetViewportRectangleInUnits()
		{
			var __0x12853 = ProjectSettings.Get.UIEditor.UIEditorAspectRatio.Value;

			var __0x12854 = 0.9 / __0x12943();
			var __0x12855 = 0.9 / __0x12944();

			Vector2 __0x12856;
			if( __0x12854 < __0x12855 * __0x12853 )
				__0x12856 = new Vector2( __0x12854, __0x12854 / __0x12853 );
			else
				__0x12856 = new Vector2( __0x12855 * __0x12853, __0x12855 );

			return new Rectangle( -__0x12856 / 2, __0x12856 / 2 );
		}

		public Rectangle GetViewportRectangleInScreenCoords()
		{
			return ConvertUnitToScreen( GetViewportRectangleInUnits() );
		}

		void __0x12957()
		{
			var __0x12857 = ViewportControl.Viewport;
			var __0x12858 = __0x12857.CanvasRenderer;

			Rectangle __0x12859 = GetViewportRectangleInScreenCoords();

			
			var __0x12860 = new ColorValue( 0.5, 0.5, 0.5, 0.5 );
			

			__0x12858.AddLine( new Vector2( 0, __0x12859.Top ), new Vector2( 1, __0x12859.Top ), __0x12860 );
			__0x12858.AddLine( new Vector2( 0, __0x12859.Bottom ), new Vector2( 1, __0x12859.Bottom ), __0x12860 );
			__0x12858.AddLine( new Vector2( __0x12859.Left, 0 ), new Vector2( __0x12859.Left, 1 ), __0x12860 );
			__0x12858.AddLine( new Vector2( __0x12859.Right, 0 ), new Vector2( __0x12859.Right, 1 ), __0x12860 );
			
		}

		Vector2I __0x12958()
		{
			var __0x12861 = ( ViewportControl.Viewport.SizeInPixels.ToVector2() * GetViewportRectangleInScreenCoords().Size ).ToVector2I();
			if( __0x12861.X < 1 )
				__0x12861.X = 1;
			if( __0x12861.Y < 1 )
				__0x12861.Y = 1;
			return __0x12861;
		}

		

		
		
		

		

		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		public double ConvertPreviewScreenToMainScreenX( double screenX )
		{
			var __0x12862 = GetViewportRectangleInScreenCoords();
			return __0x12862.Left + screenX * __0x12862.Size.X;
		}

		public double ConvertPreviewScreenToMainScreenY( double screenY )
		{
			var __0x12863 = GetViewportRectangleInScreenCoords();
			return __0x12863.Top + screenY * __0x12863.Size.Y;
		}

		public Vector2 ConvertPreviewScreenToMainScreen( Vector2 screen )
		{
			return new Vector2(
				ConvertPreviewScreenToMainScreenX( screen.X ),
				ConvertPreviewScreenToMainScreenY( screen.Y ) );
		}

		public Rectangle ConvertPreviewScreenToMainScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertPreviewScreenToMainScreenX( rect.Left ),
				ConvertPreviewScreenToMainScreenY( rect.Top ),
				ConvertPreviewScreenToMainScreenX( rect.Right ),
				ConvertPreviewScreenToMainScreenY( rect.Bottom ) );
		}

		public double ConvertMainScreenToPreviewScreenX( double screenX, bool offset = false )
		{
			var __0x12864 = GetViewportRectangleInScreenCoords();
			var __0x12865 = screenX;
			if( !offset )
				__0x12865 -= __0x12864.Left;
			if( __0x12864.Size.X != 0 )
				__0x12865 /= __0x12864.Size.X;
			return __0x12865;
		}

		public double ConvertMainScreenToPreviewScreenY( double screenY, bool offset = false )
		{
			var __0x12866 = GetViewportRectangleInScreenCoords();
			var __0x12867 = screenY;
			if( !offset )
				__0x12867 -= __0x12866.Top;
			if( __0x12866.Size.Y != 0 )
				__0x12867 /= __0x12866.Size.Y;
			return __0x12867;
		}

		public Vector2 ConvertMainScreenToPreviewScreen( Vector2 screen, bool offset = false )
		{
			return new Vector2(
				ConvertMainScreenToPreviewScreenX( screen.X, offset ),
				ConvertMainScreenToPreviewScreenY( screen.Y, offset ) );
		}

		public Rectangle ConvertMainScreenToPreviewScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertMainScreenToPreviewScreenX( rect.Left ),
				ConvertMainScreenToPreviewScreenY( rect.Top ),
				ConvertMainScreenToPreviewScreenX( rect.Right ),
				ConvertMainScreenToPreviewScreenY( rect.Bottom ) );
		}

		

		void __0x12959()
		{
			__0x12960();

			var __0x12868 = ComponentUtility.CreateComponent<ImageComponent>( null, true, false );
			__0x12868.CreateType = ImageComponent.TypeEnum._2D;
			__0x12868.CreateSize = __0x12958();
			__0x12868.CreateMipmaps = false;
			__0x12868.CreateFormat = PixelFormat.A8R8G8B8;
			__0x12868.CreateUsage = ImageComponent.Usages.RenderTarget;
			__0x12868.CreateFSAA = 0;
			__0x12868.Enabled = true;

			
			
			
			
			
			
			

			var __0x12869 = __0x12868.Result.GetRenderTarget();
			var __0x12870 = __0x12869.AddViewport( true, true );
			__0x12870.RenderingPipelineCreate();
			__0x12870.RenderingPipelineCreated.UseRenderTargets = false;
			__0x12870.RenderingPipelineCreated.BackgroundColorOverride = new ColorValue( 0, 0, 0, 0 );

			__0x12713 = __0x12868;

			__0x12870.UpdateBeforeOutput += __0x12964;

			__0x12961();
		}

		void __0x12960()
		{
			if( __0x12713 != null )
			{
				__0x12962();

				__0x12713.Dispose();
				__0x12713 = null;
			}
		}

		void __0x12961()
		{
			__0x12962();

			if( __0x12713 != null )
			{
				var __0x12871 = __0x12713.Result.GetRenderTarget().Viewports[ 0 ];

				__0x12714 = (UIControl)Control.Clone();
				__0x12871.UIContainer.AddComponent( __0x12714 );

				__0x12715 = false;

				
				
				__0x12963( 0.0001f );
				
			}
		}

		void __0x12962()
		{
			__0x12714?.Dispose();
			__0x12714 = null;
		}

		void __0x12963( float __0x13015 )
		{
			
			if( __0x12713 != null && ViewportControl.IsAllowRender() && !__0x12715 )
			{
				var __0x12872 = __0x12713.Result.GetRenderTarget().Viewports[ 0 ];
				__0x12872.PerformTick( __0x13015 );
				__0x12872.Update( true );
			}
		}

		private void __0x12964( Viewport __0x13016 )
		{
			
			__0x13016.UIContainer.PerformRenderUI( __0x13016.CanvasRenderer );
		}

		private void __0x12965( object __0x13017, EventArgs __0x13018 )
		{
			__0x12715 = true;
		}

		private void __0x12966( object __0x13019, DragEventArgs __0x13020 )
		{
			__0x12708 = true;

			__0x12970( __0x13020 );

			
			
			
			
		}

		private void __0x12967( object __0x13021, DragEventArgs __0x13022 )
		{
			__0x13022.Effect = DragDropEffects.None;

			
			ViewportControl?.PerformMouseMove();

			__0x12973();
			if( __0x12709 != null )
				__0x13022.Effect = DragDropEffects.Link;

			DragDropSetReferenceData __0x12873 = (DragDropSetReferenceData)__0x13022.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x12873 != null )
				__0x12710 = __0x12873;
			if( __0x12710 != null && __0x12711 )
				__0x13022.Effect = DragDropEffects.Link;

			
			ViewportControl.TryRender();
		}

		private void __0x12968( object __0x13023, EventArgs __0x13024 )
		{
			__0x12971();

			__0x12708 = false;
			__0x12710 = null;

			
			ViewportControl.TryRender();
		}

		private void __0x12969( object __0x13025, DragEventArgs __0x13026 )
		{
			__0x12974();

			if( __0x12710 != null )
			{
				if( __0x12711 )
				{
					__0x12710.SetProperty( __0x12712 );
					__0x12711 = false;
				}
				__0x12710 = null;
			}

			__0x12708 = false;
		}

		void __0x12970( DragEventArgs __0x13027 )
		{
			Metadata.TypeInfo __0x12874 = null;
			
			
			
			{
				var __0x12875 = ContentBrowser.GetDroppingItemData( __0x13027.Data );
				if( __0x12875 != null )
				{
					var __0x12876 = __0x12875.Item;
					

					
					var __0x12877 = __0x12876 as ContentBrowserItem_File;
					if( __0x12877 != null && !__0x12877.IsDirectory )
					{
						
						var __0x12878 = Path.GetExtension( __0x12877.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x12878 ) != null )
						{
							var __0x12879 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x12877.FullPath ) );

							var __0x12880 = __0x12879?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x12880 != null )
								__0x12874 = __0x12880;
						}
					}

					
					var __0x12881 = __0x12876 as ContentBrowserItem_Type;
					if( __0x12881 != null )
					{
						var __0x12882 = __0x12881.Type;

						

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12882 ) && !__0x12882.Abstract )
							__0x12874 = __0x12882;
					}

					
					
					
					
					

					

					
					
					

					

					
					
					

					
					
					
					
					

					
					
					
					
					

					
					var __0x12883 = __0x12876 as ContentBrowserItem_Component;
					if( __0x12883 != null )
					{
						var __0x12884 = __0x12883.Component;

						if( Control.ParentRoot == __0x12884.ParentRoot )
						{
							
							
						}
						else
						{
							var __0x12885 = __0x12884.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x12885 != null )
							{
								
								__0x12874 = __0x12884.GetProvidedType();
							}
						}
					}
				}
			}

			if( __0x12874 != null && ( MetadataManager.GetTypeOfNetType( typeof( UIControl ) ).IsAssignableFrom( __0x12874 ) || MetadataManager.GetTypeOfNetType( typeof( ImageComponent ) ).IsAssignableFrom( __0x12874 ) ) || MetadataManager.GetTypeOfNetType( typeof( Scene ) ).IsAssignableFrom( __0x12874 ) )
			
			{
				
				

				

				

				UIControl __0x12886;

				if( MetadataManager.GetTypeOfNetType( typeof( ImageComponent ) ).IsAssignableFrom( __0x12874 ) )
				{
					var __0x12887 = Control.CreateComponent<UIImage>();
					__0x12887.SourceImage = ReferenceUtility.MakeReference( __0x12874.Name );
					__0x12886 = __0x12887;
				}
				else if( MetadataManager.GetTypeOfNetType( typeof( Scene ) ).IsAssignableFrom( __0x12874 ) )
				{
					var __0x12888 = Control.CreateComponent<UIRenderTarget>();
					__0x12888.Scene = ReferenceUtility.MakeReference( __0x12874.Name );
					__0x12886 = __0x12888;
				}
				else
					__0x12886 = (UIControl)Control.CreateComponent( __0x12874 );

				

				

				
				

				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				

				
				

				
				
				

				
				

				
				

				
				if( __0x12886.Size.Value == new UIMeasureValueVector2( UIMeasure.Parent, 1, 1 ) )
					__0x12886.Size = new UIMeasureValueVector2( UIMeasure.Units, 400, 400 );

				
				__0x12886.Name = ComponentUtility.GetNewObjectUniqueName( __0x12886 );

				__0x12886.NewObjectSetDefaultConfiguration();

				
				__0x12886.Enabled = true;
				__0x12709 = __0x12886;

				__0x12973();

				
			}
		}

		void __0x12971()
		{
			if( __0x12709 != null )
			{
				__0x12709.RemoveFromParent( true );
				__0x12709.Dispose();
				__0x12709 = null;

				__0x12715 = true;
			}
		}

		void __0x12972( UIControl __0x13028, bool __0x13029 )
		{
			var __0x12889 = ViewportControl.Viewport;
			Vector2 __0x12890 = __0x12889.MousePosition;
			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x12890 ) )
				__0x12890 = new Vector2( 0.5, 0.5 );

			var __0x12891 = __0x12976( __0x13028 );
			if( __0x12891 == null )
				__0x12891 = __0x13028;

			var __0x12892 = ConvertMainScreenToPreviewScreen( __0x12890 );
			if( __0x13029 )
				__0x12892 -= __0x12891.GetScreenSize() / 2;

			
			Vector2 __0x12893 = Vector2.Zero;
			UIControl __0x12894 = __0x12891.Parent as UIControl;
			if( __0x12894 != null )
				__0x12893 = __0x12894.GetScreenPosition();
			__0x12892 -= __0x12893;

			var __0x12895 = __0x12891.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12892 ), UIMeasure.Units );

			
			if( ModifierKeys.HasFlag( Keys.Control ) )
			{
				var __0x12896 = ProjectSettings.Get.UIEditor.GetUIEditorStepMovement( UIMeasure.Units );
				if( __0x12896 != 0 )
				{
					Vector2 __0x12897 = new Vector2( __0x12896, __0x12896 );
					__0x12895 += __0x12897 / 2;
					__0x12895 /= __0x12897;
					__0x12895 = new Vector2I( (int)__0x12895.X, (int)__0x12895.Y ).ToVector2();
					__0x12895 *= __0x12897;
				}
			}

			__0x13028.Margin = new UIMeasureValueRectangle( UIMeasure.Units, __0x12895.X, __0x12895.Y, 0, 0 );

			


			
			
			

			
			
			

			__0x12715 = true;
		}

		void __0x12973()
		{
			if( __0x12709 != null && __0x12709 is UIControl control )
			{
				
				{
					var __0x12898 = __0x12950( false ).Item1;
					if( __0x12898 == null )
						__0x12898 = Control;

					if( __0x12898 != null && control.Parent != __0x12898 )
					{
						control.RemoveFromParent( false );
						__0x12898.AddComponent( control );
					}
				}

				
				__0x12972( control, true );
			}
		}

		void __0x12974()
		{
			if( __0x12709 != null )
			{
				var __0x12899 = __0x12709;

				
				var __0x12900 = new List<Component>();
				__0x12900.Add( __0x12709 );
				var __0x12901 = new UndoActionComponentCreateDelete( Document, __0x12900, true );
				Document.UndoSystem.CommitAction( __0x12901 );
				Document.Modified = true;

				__0x12709 = null;

				
				EditorAPI.SelectComponentsInMainObjectsWindow( this, new Component[] { __0x12899 } );

				EditorAPI.SelectDockWindow( this );
			}
		}

		void __0x12975()
		{
			__0x12689 = 14;

			float __0x12902 = EditorAPI.DPI;
			if( __0x12902 > 96 )
			{
				__0x12689 *= __0x12902 / 96;
				__0x12689 = (int)__0x12689;
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x12903 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x12903 != null )
			{
				var __0x12904 = new List<Component>();
				foreach( var __0x12938 in __0x12903.objects )
				{
					var __0x12905 = __0x12938 as Component;
					if( __0x12905 != null )
						__0x12904.Add( __0x12905 );
				}

				

				var __0x12906 = new List<Component>();
				
				

				for( int __0x12907 = 0; __0x12907 < __0x12904.Count; __0x12907++ )
				{
					var __0x12908 = __0x12904[ __0x12907 ];

					var __0x12909 = __0x12908.Clone();
					if( destinationParent.GetComponent( __0x12908.Name ) == null )
						__0x12909.Name = __0x12908.Name;
					else
						__0x12909.Name = destinationParent.Components.GetUniqueName( __0x12908.Name, true, 2 );
					destinationParent.AddComponent( __0x12909 );

					
					
					{
						var __0x12910 = __0x12909 as UIControl;
						if( __0x12910 != null )
						{
							if( __0x12907 == 0 )
							{
								__0x12972( __0x12910, false );

								
								
							}
							else
							{
								
								
							}
						}
					}

					__0x12906.Add( __0x12909 );
				}

				if( __0x12903.cut )
				{
					
					if( __0x12903.documentWindow.Document != Document )
					{
						
						{
							var __0x12911 = new UndoActionComponentCreateDelete( __0x12903.documentWindow.Document, __0x12904, false );
							__0x12903.documentWindow.Document.UndoSystem.CommitAction( __0x12911 );
							__0x12903.documentWindow.Document.Modified = true;
						}
						{
							var __0x12912 = new UndoActionComponentCreateDelete( Document, __0x12906, true );
							Document.UndoSystem.CommitAction( __0x12912 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x12913 = new UndoMultiAction();
						__0x12913.AddAction( new UndoActionComponentCreateDelete( Document, __0x12904, false ) );
						__0x12913.AddAction( new UndoActionComponentCreateDelete( Document, __0x12906, true ) );
						Document.UndoSystem.CommitAction( __0x12913 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x12914 = new UndoActionComponentCreateDelete( Document, __0x12906, true );
					Document.UndoSystem.CommitAction( __0x12914 );
					Document.Modified = true;
				}
			}

			return true;
		}

		UIControl __0x12976( UIControl __0x13030 )
		{
			if( __0x12714 != null )
			{
				if( __0x13030 == Control )
					return __0x12714;
				else
					return __0x12714.GetComponentByPath( __0x13030.GetPathFromRoot() ) as UIControl;
			}
			return null;
		}

		Rectangle __0x12977( UIControl __0x13031 )
		{
			var __0x12915 = __0x12976( __0x13031 );
			if( __0x12915 != null )
				return ConvertPreviewScreenToMainScreen( __0x12915.GetScreenRectangle() );
			return new Rectangle( 0, 0, 1, 1 );
		}

		List<UIControl> __0x12978( bool __0x13032 )
		{
			var __0x12916 = new List<UIControl>( 256 );
			if( __0x13032 )
				__0x12916.Add( Control );
			__0x12916.AddRange( Control.GetComponents<UIControl>( false, true ) );
			return __0x12916;
		}

		public bool CanSnap( out List<UIControl> resultObjects )
		{
			resultObjects = new List<UIControl>();
			foreach( var __0x12939 in SelectedObjects.OfType<UIControl>() )
				resultObjects.Add( __0x12939 );
			return resultObjects.Count != 0;
		}

		public void Snap( EditorAction action )
		{
			if( !CanSnap( out var objects ) )
				return;

			var __0x12917 = (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( UIControl ) ).MetadataGetMemberBySignature( "property:Margin" );

			var __0x12918 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x12940 in objects )
			{
				var __0x12919 = __0x12940.Margin;

				var __0x12920 = __0x12940.Margin.Value;

				var __0x12921 = ProjectSettings.Get.UIEditor.GetUIEditorStepMovement( __0x12920.Measure );
				if( __0x12921 != 0 )
				{
					if( action.Name == "Snap All Axes" || action.Name == "Snap X" )
					{
						__0x12920.Left = ( (long)( __0x12920.Left / __0x12921 + ( __0x12920.Left > 0 ? 0.5 : -0.5 ) ) ) * __0x12921;
						__0x12920.Right = ( (long)( __0x12920.Right / __0x12921 + ( __0x12920.Right > 0 ? 0.5 : -0.5 ) ) ) * __0x12921;
					}
					if( action.Name == "Snap All Axes" || action.Name == "Snap Y" )
					{
						__0x12920.Top = ( (long)( __0x12920.Top / __0x12921 + ( __0x12920.Top > 0 ? 0.5 : -0.5 ) ) ) * __0x12921;
						__0x12920.Bottom = ( (long)( __0x12920.Bottom / __0x12921 + ( __0x12920.Bottom > 0 ? 0.5 : -0.5 ) ) ) * __0x12921;
					}
				}
				__0x12940.Margin = new UIMeasureValueRectangle( __0x12920.Measure, __0x12920.Value );

				__0x12918.Add( new UndoActionPropertiesChange.Item( __0x12940, __0x12917, __0x12919, null ) );
			}

			if( __0x12918.Count != 0 )
			{
				var __0x12922 = new UndoActionPropertiesChange( __0x12918.ToArray() );
				Document.UndoSystem.CommitAction( __0x12922 );
				Document.Modified = true;
			}
		}

		Cursor __0x12979( MoveModeEnum __0x13033 )
		{
			switch( __0x13033 )
			{
			case MoveModeEnum.ResizeLeft | MoveModeEnum.ResizeTop:
			case MoveModeEnum.ResizeRight | MoveModeEnum.ResizeBottom:
				return KryptonCursors.SizeNWSE;

			case MoveModeEnum.ResizeLeft | MoveModeEnum.ResizeBottom:
			case MoveModeEnum.ResizeRight | MoveModeEnum.ResizeTop:
				return KryptonCursors.SizeNESW;

			case MoveModeEnum.ResizeLeft:
			case MoveModeEnum.ResizeRight:
				return KryptonCursors.SizeWE;

			case MoveModeEnum.ResizeTop:
			case MoveModeEnum.ResizeBottom:
				return KryptonCursors.SizeNS;

			case MoveModeEnum.Move:
				return KryptonCursors.SizeAll;
			}

			return Cursors.Default;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class UIControlEditor
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x12923 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x12980()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "UIControl_DocumentWindow";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.DragDrop += new System.Windows.Forms.DragEventHandler( this.__0x12969 );
			this.DragEnter += new System.Windows.Forms.DragEventHandler( this.__0x12966 );
			this.DragOver += new System.Windows.Forms.DragEventHandler( this.__0x12967 );
			this.DragLeave += new System.EventHandler( this.__0x12968 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class EnumDropDownControl : HCDropDownControl
	{
		HCItemEnumDropDown __0x13035;
		HCItemProperty __0x13036;
		bool __0x13037;
		object __0x13038;
		bool __0x13039;
		Type __0x13040;
		Type __0x13041;
		int __0x13042;

		

		class __0x13154
		{
			public bool SetByCode;
			public object Value;

			public __0x13154( object value )
			{
				Value = value;
			}

			public string DisplayName
			{
				get { return EnumUtility.GetValueDisplayName( Value ); }
			}

			public string Description
			{
				get { return EnumUtility.GetValueDescription( Value ); }
			}
		}

		

		public int DropDownHeight
		{
			get { return __0x13042; }
			set { __0x13042 = value; }
		}

		
		public EnumDropDownControl()
		{
			__0x13135();
		}

		public EnumDropDownControl( HCItemEnumDropDown itemProperty )
		{
			__0x13042 = (int)( (float)200 * EditorAPI.DPIScale );

			__0x13135();

			var __0x13043 = (EngineListView.DefaultListMode)__0x13118.Mode;
			__0x13043.DisplayImages = false;

			this.__0x13035 = itemProperty;

			__0x13040 = ReferenceUtility.GetUnreferencedType( itemProperty.Property.Type.GetNetType() );
			if( __0x13040.IsEnum )
			{
				__0x13041 = Enum.GetUnderlyingType( __0x13040 );
				__0x13039 = __0x13040.IsDefined( typeof( FlagsAttribute ), false );
			}

			__0x13038 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			__0x13036 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13036.SaveValuesToRestore();

			var __0x13044 = new List<EngineListView.Item>();

			__0x13118.CheckBoxes = __0x13039;

			foreach( var __0x13119 in Enum.GetValues( __0x13040 ) )
			{
				var __0x13045 = new __0x13154( __0x13119 );

				var __0x13046 = __0x13045.DisplayName;
				var __0x13047 = __0x13045.Description;
				itemProperty.Owner.PerformOverridePropertyEnumItem( itemProperty, ref __0x13046, ref __0x13047 );

				var __0x13048 = new EngineListView.Item( __0x13118 );
				__0x13048.Text = __0x13046;
				__0x13048.Tag = __0x13045;
				if( !string.IsNullOrEmpty( __0x13047 ) )
				{
					__0x13048.Description = __0x13047;
					__0x13048.ShowTooltip = true;
				}
				__0x13044.Add( __0x13048 );
			}

			__0x13118.SetItems( __0x13044 );

			__0x13130();

			int __0x13049 = __0x13118.Items.Count;
			var __0x13050 = __0x13049 * ( Font.Height + DpiHelper.Default.ScaleValue( 4 ) ) + 3;
			var __0x13051 = ( (IHCProperty)itemProperty.CreatedControl ).EditorControl.Width;
			Size = new Size( (int)Math.Max( __0x13051, EditorAPI.DPIScale * 150 ), Math.Min( __0x13042, __0x13050 ) );
		}

		void __0x13123()
		{
			
			if( !Visible )
				return;

			
			if( __0x13039 )
			{
				foreach( var __0x13120 in __0x13118.CheckedItems )
				{
					__0x13118.SelectedItem = __0x13120;
					__0x13118.CurrentItem = __0x13120;
					__0x13118.EnsureVisible( __0x13120 );
					break;
				}
			}
			else
			{
				foreach( var __0x13121 in __0x13118.Items )
				{
					__0x13154 __0x13052 = __0x13121.Tag as __0x13154;
					if( __0x13052.Value.Equals( __0x13038 ) )
					{
						__0x13118.SelectedItem = __0x13121;
						__0x13118.CurrentItem = __0x13121;
						__0x13118.EnsureVisible( __0x13121 );
						break;
					}
				}
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13053 = keyData & Keys.KeyCode;

			if( __0x13053 == Keys.Return )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13053 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		public override void OnHolderOpened()
		{
			base.OnHolderOpened();

			__0x13118.Focus();
			__0x13123();
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			if( __0x13037 )
				__0x13036.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13037 )
				__0x13036.RestoreSavedOldValues();
		}

		void __0x13124()
		{
			if( __0x13035 != null && __0x13035.CanEditValue() )
				__0x13035.SetValue( __0x13038, false );
			__0x13037 = true;
		}

		private void __0x13125( EngineListView __0x13136, EngineListView.Item __0x13137 )
		{
			var __0x13054 = __0x13137.Tag as __0x13154;

			if( __0x13054.SetByCode )
			{
				__0x13054.SetByCode = false;
				return;
			}

			if( __0x13137.Checked )
			{
				if( __0x13134( __0x13041, __0x13054.Value ) ) 
					__0x13038 = Enum.ToObject( __0x13038.GetType(), 0 );
				else
					__0x13133( __0x13041, ref __0x13038, __0x13054.Value );
			}
			else
			{
				object __0x13055 = __0x13038;
				__0x13132( __0x13041, ref __0x13038, __0x13054.Value );

				if( __0x13126() )
					__0x13038 = __0x13055;
			}

			__0x13130();
			__0x13124();
		}

		bool __0x13126()
		{
			if( __0x13134( __0x13041, __0x13038 ) )
			{
				if( !Enum.IsDefined( __0x13040, __0x13038 ) )
					return true;
			}
			return false;
		}

		private void __0x13127( EngineListView __0x13138 )
		{
			if( __0x13039 )
				return;

			if( __0x13118.SelectedItems.Count == 0 )
				return;

			var __0x13056 = __0x13138.SelectedItems[ 0 ].Tag as __0x13154;
			if( !__0x13056.Value.Equals( __0x13038 ) )
			{
				__0x13038 = __0x13056.Value;
				__0x13124();
			}
		}

		private void __0x13128( object __0x13139, MouseEventArgs __0x13140 )
		{
			ParentHolder.Close( true );
		}

		private void __0x13129( object __0x13141, MouseEventArgs __0x13142 )
		{
			if( !__0x13039 )
				ParentHolder.Close( true );
		}

		void __0x13130()
		{
			if( !__0x13039 )
				return;

			foreach( var __0x13122 in __0x13118.Items )
			{
				var __0x13057 = __0x13122.Tag as __0x13154;
				var __0x13058 = __0x13131( Enum.GetUnderlyingType( __0x13040 ), __0x13038, __0x13057.Value );
				if( __0x13122.Checked != __0x13058 )
				{
					__0x13057.SetByCode = true;
					__0x13122.Checked = __0x13058;
				}
			}
		}

		bool __0x13131( Type __0x13143, object __0x13144, object __0x13145 )
		{
			
			bool __0x13059 = __0x13134( __0x13143, __0x13144 );
			bool __0x13060 = __0x13134( __0x13143, __0x13145 );

			if( __0x13059 && __0x13060 )
			{
				return true;
			}
			else if( __0x13059 && !__0x13060 )
			{
				return false;
			}
			else if( !__0x13059 && __0x13060 )
			{
				return false;
			}

			

			if( __0x13143 == typeof( Int16 ) )
			{
				Int16 __0x13061 = Convert.ToInt16( __0x13144 );
				Int16 __0x13062 = Convert.ToInt16( __0x13145 );
				return ( ( __0x13061 & __0x13062 ) == __0x13062 );
			}
			else if( __0x13143 == typeof( UInt16 ) )
			{
				UInt16 __0x13063 = Convert.ToUInt16( __0x13144 );
				UInt16 __0x13064 = Convert.ToUInt16( __0x13145 );
				return ( ( __0x13063 & __0x13064 ) == __0x13064 );
			}
			else if( __0x13143 == typeof( Int32 ) )
			{
				Int32 __0x13065 = Convert.ToInt32( __0x13144 );
				Int32 __0x13066 = Convert.ToInt32( __0x13145 );
				return ( ( __0x13065 & __0x13066 ) == __0x13066 );
			}
			else if( __0x13143 == typeof( UInt32 ) )
			{
				UInt32 __0x13067 = Convert.ToUInt32( __0x13144 );
				UInt32 __0x13068 = Convert.ToUInt32( __0x13145 );
				return ( ( __0x13067 & __0x13068 ) == __0x13068 );
			}
			else if( __0x13143 == typeof( Int64 ) )
			{
				Int64 __0x13069 = Convert.ToInt64( __0x13144 );
				Int64 __0x13070 = Convert.ToInt64( __0x13145 );
				return ( ( __0x13069 & __0x13070 ) == __0x13070 );
			}
			else if( __0x13143 == typeof( UInt64 ) )
			{
				UInt64 __0x13071 = Convert.ToUInt64( __0x13144 );
				UInt64 __0x13072 = Convert.ToUInt64( __0x13145 );
				return ( ( __0x13071 & __0x13072 ) == __0x13072 );
			}
			else if( __0x13143 == typeof( SByte ) )
			{
				SByte __0x13073 = Convert.ToSByte( __0x13144 );
				SByte __0x13074 = Convert.ToSByte( __0x13145 );
				return ( ( __0x13073 & __0x13074 ) == __0x13074 );
			}
			else if( __0x13143 == typeof( Byte ) )
			{
				Byte __0x13075 = Convert.ToByte( __0x13144 );
				Byte __0x13076 = Convert.ToByte( __0x13145 );
				return ( ( __0x13075 & __0x13076 ) == __0x13076 );
			}
			return false;
		}

		void __0x13132( Type __0x13146, ref object __0x13147, object __0x13148 )
		{
			if( __0x13146 == typeof( Int16 ) )
			{
				Int32 __0x13077 = Convert.ToInt32( __0x13147 );
				Int32 __0x13078 = Convert.ToInt32( __0x13148 );
				__0x13077 &= ~( __0x13078 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13077 );
			}
			else if( __0x13146 == typeof( UInt16 ) )
			{
				UInt32 __0x13079 = Convert.ToUInt32( __0x13147 );
				UInt32 __0x13080 = Convert.ToUInt32( __0x13148 );
				__0x13079 &= ~( __0x13080 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13079 );
			}
			else if( __0x13146 == typeof( Int32 ) )
			{
				Int32 __0x13081 = Convert.ToInt32( __0x13147 );
				Int32 __0x13082 = Convert.ToInt32( __0x13148 );
				__0x13081 &= ~( __0x13082 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13081 );
			}
			else if( __0x13146 == typeof( UInt32 ) )
			{
				UInt32 __0x13083 = Convert.ToUInt32( __0x13147 );
				UInt32 __0x13084 = Convert.ToUInt32( __0x13148 );
				__0x13083 &= ~( __0x13084 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13083 );
			}
			else if( __0x13146 == typeof( Int64 ) )
			{
				Int64 __0x13085 = Convert.ToInt64( __0x13147 );
				Int64 __0x13086 = Convert.ToInt64( __0x13148 );
				__0x13085 &= ~( __0x13086 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13085 );
			}
			else if( __0x13146 == typeof( UInt64 ) )
			{
				UInt64 __0x13087 = Convert.ToUInt64( __0x13147 );
				UInt64 __0x13088 = Convert.ToUInt64( __0x13148 );
				__0x13087 &= ~( __0x13088 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13087 );
			}
			else if( __0x13146 == typeof( SByte ) )
			{
				Int32 __0x13089 = Convert.ToInt32( __0x13147 );
				Int32 __0x13090 = Convert.ToInt32( __0x13148 );
				__0x13089 &= ~( __0x13090 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13089 );
			}
			else if( __0x13146 == typeof( Byte ) )
			{
				Int32 __0x13091 = Convert.ToInt32( __0x13147 );
				Int32 __0x13092 = Convert.ToInt32( __0x13148 );
				__0x13091 &= ~( __0x13092 );
				__0x13147 = Enum.ToObject( __0x13147.GetType(), __0x13091 );
			}
		}

		void __0x13133( Type __0x13149, ref object __0x13150, object __0x13151 )
		{
			if( __0x13149 == typeof( Int16 ) )
			{
				Int32 __0x13093 = Convert.ToInt32( __0x13150 );
				Int32 __0x13094 = Convert.ToInt32( __0x13151 );
				__0x13093 |= __0x13094;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13093 );
			}
			else if( __0x13149 == typeof( UInt16 ) )
			{
				UInt32 __0x13095 = Convert.ToUInt32( __0x13150 );
				UInt32 __0x13096 = Convert.ToUInt32( __0x13151 );
				__0x13095 |= __0x13096;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13095 );
			}
			else if( __0x13149 == typeof( Int32 ) )
			{
				Int32 __0x13097 = Convert.ToInt32( __0x13150 );
				Int32 __0x13098 = Convert.ToInt32( __0x13151 );
				__0x13097 |= __0x13098;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13097 );
			}
			else if( __0x13149 == typeof( UInt32 ) )
			{
				UInt32 __0x13099 = Convert.ToUInt32( __0x13150 );
				UInt32 __0x13100 = Convert.ToUInt32( __0x13151 );
				__0x13099 |= __0x13100;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13099 );
			}
			else if( __0x13149 == typeof( Int64 ) )
			{
				Int64 __0x13101 = Convert.ToInt64( __0x13150 );
				Int64 __0x13102 = Convert.ToInt64( __0x13151 );
				__0x13101 |= __0x13102;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13101 );
			}
			else if( __0x13149 == typeof( UInt64 ) )
			{
				UInt64 __0x13103 = Convert.ToUInt64( __0x13150 );
				UInt64 __0x13104 = Convert.ToUInt64( __0x13151 );
				__0x13103 |= __0x13104;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13103 );
			}
			else if( __0x13149 == typeof( SByte ) )
			{
				Int32 __0x13105 = Convert.ToInt32( __0x13150 );
				Int32 __0x13106 = Convert.ToInt32( __0x13151 );
				__0x13105 |= __0x13106;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13105 );
			}
			else if( __0x13149 == typeof( Byte ) )
			{
				Int32 __0x13107 = Convert.ToInt32( __0x13150 );
				Int32 __0x13108 = Convert.ToInt32( __0x13151 );
				__0x13107 |= __0x13108;
				__0x13150 = Enum.ToObject( __0x13150.GetType(), __0x13107 );
			}
		}

		bool __0x13134( Type __0x13152, object __0x13153 )
		{
			if( __0x13152 == typeof( Int16 ) )
			{
				Int16 __0x13109 = Convert.ToInt16( __0x13153 );
				return ( __0x13109 == 0 );
			}
			else if( __0x13152 == typeof( UInt16 ) )
			{
				UInt16 __0x13110 = Convert.ToUInt16( __0x13153 );
				return ( __0x13110 == 0 );
			}
			else if( __0x13152 == typeof( Int32 ) )
			{
				Int32 __0x13111 = Convert.ToInt32( __0x13153 );
				return ( __0x13111 == 0 );
			}
			else if( __0x13152 == typeof( UInt32 ) )
			{
				UInt32 __0x13112 = Convert.ToUInt32( __0x13153 );
				return ( __0x13112 == 0 );
			}
			else if( __0x13152 == typeof( Int64 ) )
			{
				Int64 __0x13113 = Convert.ToInt64( __0x13153 );
				return ( __0x13113 == 0 );
			}
			else if( __0x13152 == typeof( UInt64 ) )
			{
				UInt64 __0x13114 = Convert.ToUInt64( __0x13153 );
				return ( __0x13114 == 0 );
			}
			else if( __0x13152 == typeof( SByte ) )
			{
				SByte __0x13115 = Convert.ToSByte( __0x13153 );
				return ( __0x13115 == 0 );
			}
			else if( __0x13152 == typeof( Byte ) )
			{
				Byte __0x13116 = Convert.ToByte( __0x13153 );
				return ( __0x13116 == 0 );
			}
			return false;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class EnumDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13117 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13117 != null ) )
			{
				__0x13117.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13135()
		{
			this.__0x13118 = new NeoAxis.Editor.EngineListView();
			this.SuspendLayout();
			
			
			
			this.__0x13118.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13118.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x13118.Location = new System.Drawing.Point(0, 0);
			this.__0x13118.Name = "listViewEnum";
			this.__0x13118.Size = new System.Drawing.Size(299, 150);
			this.__0x13118.TabIndex = 0;
			this.__0x13118.ItemCheckedChanged += new NeoAxis.Editor.EngineListView.ItemCheckedChangedDelegate( this.__0x13125);
			this.__0x13118.SelectedItemsChanged += new NeoAxis.Editor.EngineListView.SelectedItemsChangedDelegate( this.__0x13127 );
			this.__0x13118.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x13129);
			this.__0x13118.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.__0x13128);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13118);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "EnumDropDownControl";
			this.Size = new System.Drawing.Size(299, 150);
			this.ResumeLayout(false);

		}

		#endregion
		private NeoAxis.Editor.EngineListView __0x13118;
	}
}





namespace NeoAxis.Editor
{
	public partial class MultilineTextDropDownControl : HCDropDownControl
	{
		HCItemProperty __0x13155;
		HCItemProperty __0x13156;
		string __0x13157;
		bool __0x13158;

		KryptonButton __0x13159;
		KryptonButton __0x13160;

		

		public MultilineTextDropDownControl()
		{
			__0x13167();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public MultilineTextDropDownControl( HCItemProperty itemProperty )
		{
			__0x13167();

			Resizable = true;
			UseFormDropDownHolder = true;
			
			ResizeRedraw = true;
			
			

			AddOkCancelButtons( out __0x13159, out __0x13160 );

			this.__0x13155 = itemProperty;

			object __0x13161 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			var __0x13162 = __0x13161 as string;
			if( __0x13162 != null )
				__0x13165.Text = __0x13162;
			__0x13157 = __0x13165.Text;

			__0x13156 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13156.SaveValuesToRestore();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			__0x13166();

			if( __0x13158 )
				__0x13156.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13158 )
				__0x13156.RestoreSavedOldValues();
		}

		void __0x13166()
		{
			if( __0x13155 != null && __0x13155.CanEditValue() )
			{
				if( __0x13165.Text != __0x13157 )
				{
					__0x13155.SetValue( __0x13165.Text, false );
					__0x13158 = true;
				}
			}
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			base.OnSizeChanged( e );

			if( __0x13165 != null && __0x13159 != null )
			{
				__0x13165.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 5 ) * 2, __0x13159.Location.Y - DpiHelper.Default.ScaleValue( 4 ) * 2 );
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13163 = keyData & Keys.KeyCode;

			if( __0x13163 == Keys.Return && !ModifierKeys.HasFlag( Keys.Shift ) )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13163 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MultilineTextDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13164 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13164 != null ) )
			{
				__0x13164.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13167()
		{
			this.__0x13165 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			
			
			
			this.__0x13165.Location = new System.Drawing.Point(5, 4);
			this.__0x13165.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.__0x13165.Name = "engineTextBox";
			this.__0x13165.Size = new System.Drawing.Size(615, 206);
			this.__0x13165.TabIndex = 2;
			this.__0x13165.AutoSize = false;
			this.__0x13165.Multiline = true;
			this.__0x13165.AcceptsReturn = true;
			this.__0x13165.AcceptsTab = true;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.Controls.Add(this.__0x13165);
			this.Margin = new System.Windows.Forms.Padding(5, 5, 5, 5);
			this.Name = "MultilineTextDropDownControl";
			this.Size = new System.Drawing.Size(624, 260);
			this.ResumeLayout(false);

		}

		#endregion
		private EngineTextBox __0x13165;
	}
}





namespace NeoAxis.Editor
{
	public partial class RangeDropDownControl : HCDropDownControl
	{
		HCItemProperty __0x13168;
		HCItemProperty __0x13169;
		bool __0x13170;
		Range __0x13171;
		bool __0x13172;
		RangeAttribute __0x13173;

		private static class __0x13201
		{
			public static Range ObjectToRange( object value )
			{
				
				switch( value )
				{
				case Range v:
					return v;
				case RangeF v:
					return v;
				case RangeI v:
					return new Range( v.Minimum, v.Maximum );
				case Vector2 v:
					return new Range( v.X, v.Y );
				case Vector2I v:
					return new Range( v.X, v.Y );
				case Vector2F v:
					return new Range( v.X, v.Y );
				default:
					throw new ArgumentException( "Type not supported.", nameof( value ) );
				}
			}

			public static object ConvertRange( Range range, Type type )
			{
				if( type == typeof( Range ) )
					return range;
				else if( type == typeof( RangeF ) )
					return range.ToRangeF();
				else if( type == typeof( RangeI ) )
					return range.ToRangeI();
				else if( type == typeof( Vector2 ) )
					return range.ToVector2();
				else if( type == typeof( Vector2F ) )
					return range.ToVector2().ToVector2F();
				else if( type == typeof( Vector2I ) )
					return range.ToVector2().ToVector2I();
				else
					throw new ArgumentException( "Type not supported.", nameof( type ) );
			}
		}

		public RangeDropDownControl()
		{
			__0x13193();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( __0x13179.Height < __0x13179.PreferredSize.Height )
				__0x13179.Height = __0x13179.PreferredSize.Height;
			if( __0x13180.Height < __0x13180.PreferredSize.Height )
				__0x13180.Height = __0x13180.PreferredSize.Height;
		}

		public RangeDropDownControl( HCItemProperty itemProperty )
		{
			__0x13193();

			AddOkCancelButtons( out _, out _ );

			this.__0x13168 = itemProperty;

			__0x13173 = (RangeAttribute)itemProperty.Property.GetCustomAttributes( typeof( RangeAttribute ) ).FirstOrDefault();
			if( __0x13173 == null )
				__0x13173 = new RangeAttribute( 0, 100 ); 

			__0x13187();

			__0x13183.ValueChanged += new System.EventHandler( __0x13190 );
			__0x13184.ValueChanged += new System.EventHandler( __0x13190 );

			object __0x13174 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			__0x13171 = __0x13201.ObjectToRange( __0x13174 );

			__0x13169 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13169.SaveValuesToRestore();

			__0x13188();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			
			
			
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			if( __0x13170 )
				__0x13169.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13170 )
				__0x13169.RestoreSavedOldValues();
		}

		private void __0x13185()
		{
			if( __0x13168 != null && __0x13168.CanEditValue() )
			{
				var __0x13175 = ReferenceUtility.GetUnreferencedType( __0x13168.Property.Type ).GetNetType();
				
				__0x13168.SetValue( __0x13201.ConvertRange( __0x13171, __0x13175 ), false );
			}
			__0x13170 = true;
		}

		private bool __0x13186()
		{
			var __0x13176 = ReferenceUtility.GetUnreferencedType( __0x13168.Property.Type ).GetNetType();
			
			return __0x13176 == typeof( RangeI ) || __0x13176 == typeof( Vector2I );
		}

		private void __0x13187()
		{
			if( __0x13173 != null )
			{
				__0x13173.GetTrackBarMinMax( __0x13186(), out int min, out int max );

				__0x13183.Minimum = min;
				__0x13183.Maximum = max;
				__0x13183.LargeChange = Math.Max( ( __0x13183.Maximum - __0x13183.Minimum ) / 10, 1 );
				__0x13183.SmallChange = Math.Max( ( __0x13183.Maximum - __0x13183.Minimum ) / 100, 1 );

				__0x13184.Minimum = min;
				__0x13184.Maximum = max;
				__0x13184.LargeChange = Math.Max( ( __0x13183.Maximum - __0x13183.Minimum ) / 10, 1 );
				__0x13184.SmallChange = Math.Max( ( __0x13183.Maximum - __0x13183.Minimum ) / 100, 1 );
			}
		}

		private void __0x13188()
		{
			__0x13172 = true;

			
			__0x13181.Text = ( (float)__0x13171.Minimum ).ToString();
			__0x13182.Text = ( (float)__0x13171.Maximum ).ToString();

			__0x13183.Value = __0x13173.GetTrackBarValue( __0x13186(), __0x13171.Minimum );
			__0x13184.Value = __0x13173.GetTrackBarValue( __0x13186(), __0x13171.Maximum );

			__0x13172 = false;
		}

		private void __0x13189( object __0x13194, EventArgs __0x13195 )
		{
			if( __0x13172 )
				return;

			if( !__0x13191( (EngineTextBox)__0x13194 ) )
				return;

			try
			{
				__0x13172 = true;

				__0x13171.Minimum = double.Parse( __0x13181.Text );
				__0x13171.Maximum = double.Parse( __0x13182.Text );

				__0x13183.Value = __0x13173.GetTrackBarValue( __0x13186(), __0x13171.Minimum );
				__0x13184.Value = __0x13173.GetTrackBarValue( __0x13186(), __0x13171.Maximum );

				__0x13185();
			}
			finally
			{
				__0x13172 = false;
			}
		}

		private void __0x13190( object __0x13196, EventArgs __0x13197 )
		{
			if( __0x13172 )
				return;
			try
			{
				__0x13172 = true;

				__0x13171.Minimum = __0x13173.GetValueFromTrackBar( __0x13186(), __0x13183.Value );
				__0x13171.Maximum = __0x13173.GetValueFromTrackBar( __0x13186(), __0x13184.Value );

				__0x13181.Text = __0x13171.Minimum.ToString();
				__0x13182.Text = __0x13171.Maximum.ToString();

				__0x13191( __0x13181 );
				__0x13191( __0x13182 );

				__0x13185();
			}
			finally
			{
				__0x13172 = false;
			}
		}

		private bool __0x13191( EngineTextBox __0x13198 )
		{
			try
			{
				

				double.Parse( __0x13198.Text );
				__0x13198.SetError( "" );
				return true;
			}
			catch( FormatException exc )
			{
				__0x13198.SetError( exc.Message );
				return false;
			}
		}

		private void __0x13192( object __0x13199, EventArgs __0x13200 )
		{
			__0x13191( (EngineTextBox)__0x13199 );
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13177 = keyData & Keys.KeyCode;

			if( __0x13177 == Keys.Return )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13177 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class RangeDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13178 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13178 != null ) )
			{
				__0x13178.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13193()
		{
			this.__0x13179 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x13180 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x13181 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13182 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13183 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x13184 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.SuspendLayout();
			
			
			
			this.__0x13179.AutoSize = false;
			this.__0x13179.Location = new System.Drawing.Point(4, 13);
			this.__0x13179.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13179.Name = "minLabel";
			this.__0x13179.Size = new System.Drawing.Size(91, 25);
			this.__0x13179.TabIndex = 0;
			this.__0x13179.Values.Text = "Minimum:";
			
			
			
			this.__0x13180.AutoSize = false;
			this.__0x13180.Location = new System.Drawing.Point(4, 41);
			this.__0x13180.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13180.Name = "maxLabel";
			this.__0x13180.Size = new System.Drawing.Size(91, 31);
			this.__0x13180.TabIndex = 1;
			this.__0x13180.Values.Text = "Maximum:";
			
			
			
			this.__0x13181.Location = new System.Drawing.Point(81, 15);
			this.__0x13181.LikeLabel = false;
			this.__0x13181.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13181.Name = "minTextBox";
			this.__0x13181.Size = new System.Drawing.Size(119, 21);
			this.__0x13181.TabIndex = 2;
			this.__0x13181.TextChanged += new System.EventHandler(this.__0x13189);
			this.__0x13181.Validated += new System.EventHandler(this.__0x13192);
			
			
			
			this.__0x13182.Location = new System.Drawing.Point(81, 47);
			this.__0x13182.LikeLabel = false;
			this.__0x13182.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13182.Name = "maxTextBox";
			this.__0x13182.Size = new System.Drawing.Size(119, 21);
			this.__0x13182.TabIndex = 3;
			this.__0x13182.TextChanged += new System.EventHandler(this.__0x13189);
			this.__0x13182.Validated += new System.EventHandler(this.__0x13192);
			
			
			
			this.__0x13183.DrawBackground = true;
			this.__0x13183.Location = new System.Drawing.Point(208, 12);
			this.__0x13183.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13183.Name = "minTrackBar";
			this.__0x13183.Size = new System.Drawing.Size(151, 26);
			this.__0x13183.TabIndex = 4;
			this.__0x13183.TickStyle = System.Windows.Forms.TickStyle.None;
			
			
			
			this.__0x13184.DrawBackground = true;
			this.__0x13184.Location = new System.Drawing.Point(208, 44);
			this.__0x13184.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13184.Name = "maxTrackBar";
			this.__0x13184.Size = new System.Drawing.Size(151, 26);
			this.__0x13184.TabIndex = 5;
			this.__0x13184.TickStyle = System.Windows.Forms.TickStyle.None;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.Controls.Add(this.__0x13184);
			this.Controls.Add(this.__0x13183);
			this.Controls.Add(this.__0x13182);
			this.Controls.Add(this.__0x13181);
			this.Controls.Add(this.__0x13180);
			this.Controls.Add(this.__0x13179);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "RangeDropDownControl";
			this.Size = new System.Drawing.Size(374, 87);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x13179;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonLabel __0x13180;
		private EngineTextBox __0x13181;
		private EngineTextBox __0x13182;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13183;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13184;
	}
}





namespace NeoAxis.Editor
{
	internal struct GripBounds
	{
		private const int __0x13202 = 6;
		private const int __0x13203 = __0x13202 << 1;

		public GripBounds( System.Drawing.Rectangle clientRectangle )
		{
			this.__0x13204 = clientRectangle;
		}

		private System.Drawing.Rectangle __0x13204;
		public System.Drawing.Rectangle ClientRectangle
		{
			get { return __0x13204; }
			
		}

		public System.Drawing.Rectangle Bottom
		{
			get
			{
				System.Drawing.Rectangle __0x13205 = ClientRectangle;
				__0x13205.Y = __0x13205.Bottom - __0x13202 + 1;
				__0x13205.Height = __0x13202;
				return __0x13205;
			}
		}

		public System.Drawing.Rectangle BottomRight
		{
			get
			{
				System.Drawing.Rectangle __0x13206 = ClientRectangle;
				__0x13206.Y = __0x13206.Bottom - __0x13203 + 1;
				__0x13206.Height = __0x13203;
				__0x13206.X = __0x13206.Width - __0x13203 + 1;
				__0x13206.Width = __0x13203;
				return __0x13206;
			}
		}

		public System.Drawing.Rectangle Top
		{
			get
			{
				System.Drawing.Rectangle __0x13207 = ClientRectangle;
				__0x13207.Height = __0x13202;
				return __0x13207;
			}
		}

		public System.Drawing.Rectangle TopRight
		{
			get
			{
				System.Drawing.Rectangle __0x13208 = ClientRectangle;
				__0x13208.Height = __0x13203;
				__0x13208.X = __0x13208.Width - __0x13203 + 1;
				__0x13208.Width = __0x13203;
				return __0x13208;
			}
		}

		public System.Drawing.Rectangle Left
		{
			get
			{
				System.Drawing.Rectangle __0x13209 = ClientRectangle;
				__0x13209.Width = __0x13202;
				return __0x13209;
			}
		}

		public System.Drawing.Rectangle BottomLeft
		{
			get
			{
				System.Drawing.Rectangle __0x13210 = ClientRectangle;
				__0x13210.Width = __0x13203;
				__0x13210.Y = __0x13210.Height - __0x13203 + 1;
				__0x13210.Height = __0x13203;
				return __0x13210;
			}
		}

		public System.Drawing.Rectangle Right
		{
			get
			{
				System.Drawing.Rectangle __0x13211 = ClientRectangle;
				__0x13211.X = __0x13211.Right - __0x13202 + 1;
				__0x13211.Width = __0x13202;
				return __0x13211;
			}
		}

		public System.Drawing.Rectangle TopLeft
		{
			get
			{
				System.Drawing.Rectangle __0x13212 = ClientRectangle;
				__0x13212.Width = __0x13203;
				__0x13212.Height = __0x13203;
				return __0x13212;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	class HCDropDownHolderImpl
	{
		Control __0x13213;
		HCDropDownControl __0x13214; 

		bool __0x13215;
		bool __0x13216 = true;
		
		bool __0x13217;

		public bool Resizable { get; set; }
		
		
		public bool CommitOnClosing { get; set; }
		public bool FocusOnOpen { get; set; } = true;

		public bool NonInteractive
		{
			get { return __0x13217; }
			set
			{
				if( value != __0x13217 )
				{
					__0x13217 = value;
					
				}
			}
		}

		public HCDropDownHolderImpl( Control holder, HCDropDownControl control )
		{
			this.__0x13213 = holder;

			holder.AutoSize = false;
			holder.Margin = Padding.Empty;
			holder.Padding = new Padding( 1 ); 

			__0x13214 = control ?? throw new ArgumentNullException( "control" );
			__0x13214.ParentHolder = (IDropDownHolder)holder;

			if( holder is HCFormDropDownHolder )
				__0x13214.Location = new Point( 1, 1 );
			else
				__0x13214.Location = Point.Empty;

			
			

			Resizable = __0x13214.Resizable;
		}

		internal void Initialize()
		{
			
			
			
			
			__0x13213.Size = __0x13214.Size + __0x13213.Padding.Size;
			
		}

		internal void OnSizeChanged()
		{
			if( __0x13214 != null )
			{
				
				
				__0x13214.Size = __0x13213.Size - __0x13213.Padding.Size;
			}
		}

		internal void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			var __0x13218 = CalculateLocation( openerControl, area );
			__0x13213.Location = __0x13228( 
				openerControl.PointToScreen( __0x13218 ), ToolStripDropDownDirection.BelowLeft ).Location;
			__0x13213.Show();
		}

		internal Point CalculateLocation( Control openerControl, System.Drawing.Rectangle area )
		{
			__0x13215 = false;
			__0x13216 = true;

			Point __0x13219 = openerControl.PointToScreen( new Point( area.Width, area.Top + area.Height + 2 ) );
			
			System.Drawing.Rectangle __0x13220 = Screen.FromControl( openerControl ).WorkingArea;
			if( __0x13219.X - __0x13213.Size.Width < __0x13220.Left )
			{
				__0x13216 = false;
				__0x13219.X = __0x13220.Left;
			}
			if( __0x13219.Y + __0x13213.Size.Height > ( __0x13220.Top + __0x13220.Height ) )
			{
				__0x13215 = true;
				__0x13219.Y -= __0x13213.Size.Height + area.Height + 7;
				
			}
			__0x13219 = openerControl.PointToClient( __0x13219 );
			return __0x13219;
		}

		System.Drawing.Rectangle __0x13228( Point __0x13230, ToolStripDropDownDirection __0x13231 )
		{
			Point __0x13221 = Point.Empty;
			System.Drawing.Rectangle __0x13222 = new System.Drawing.Rectangle( Point.Empty, __0x13213.Size );
			
			switch( __0x13231 )
			{
				case ToolStripDropDownDirection.AboveLeft:
					__0x13221.X = -__0x13222.Width;
					__0x13221.Y = -__0x13222.Height;
					break;
				case ToolStripDropDownDirection.AboveRight:
					__0x13221.Y = -__0x13222.Height;
					break;
				case ToolStripDropDownDirection.BelowRight:
				case ToolStripDropDownDirection.Right:
					break;
				case ToolStripDropDownDirection.BelowLeft:
				case ToolStripDropDownDirection.Left:
					__0x13221.X = -__0x13222.Width;
					break;
			}
			__0x13222.Location = new Point( __0x13230.X + __0x13221.X, __0x13230.Y + __0x13221.Y );
			return __0x13222;
		}

		
		
		
		
		
		
		
		
		
		
		
		

		internal void Close( bool commitChanges )
		{
			CommitOnClosing = commitChanges;
		}

		internal void OnOpened()
		{
			__0x13214.OnHolderOpened();
			if( FocusOnOpen )
				__0x13214.Focus();
		}

		internal void OnClosed()
		{
			if( CommitOnClosing )
				__0x13214.OnCommitChanges();
			else
				__0x13214.OnCancelChanges();
		}

		internal bool ProcessCmdKey( Keys keyData )
		{
			if( keyData == Keys.Escape )
			{
				Close( false );
				return true;
			}
			else if( keyData == Keys.Enter )
			{
				Close( true );
				return true;
			}
			return false;
		}

		internal bool ProcessResizing( ref Message m, bool contentControl = true )
		{
			
			
			
			
			if( !Resizable && !NonInteractive )
			{
				return false;
			}
			if( m.Msg == Internal.ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
			{
				return __0x13229( ref m, contentControl );
			}
			
			
			
			
			return false;
		}

		
		
		
		
		
		
		
		
		
		

		bool __0x13229( ref Message __0x13232, bool __0x13233 )
		{
			if( NonInteractive )
			{
				__0x13232.Result = (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
				return true;
			}

			int __0x13223 = Cursor.Position.X; 
			int __0x13224 = Cursor.Position.Y; 
			Point __0x13225 = __0x13213.PointToClient( new Point( __0x13223, __0x13224 ) );

			GripBounds __0x13226 = new GripBounds( __0x13233 ? __0x13214.ClientRectangle : __0x13213.ClientRectangle );
			IntPtr __0x13227 = new IntPtr( Internal.ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT );

			if( __0x13215 )
			{
				if( __0x13216 && __0x13226.TopLeft.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTOPLEFT;
					return true;
				}
				if( !__0x13216 && __0x13226.TopRight.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTOPRIGHT;
					return true;
				}
				if( __0x13226.Top.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTOP;
					return true;
				}
			}
			else
			{
				if( __0x13216 && __0x13226.BottomLeft.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTBOTTOMLEFT;
					return true;
				}
				if( !__0x13216 && __0x13226.BottomRight.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTBOTTOMRIGHT;
					return true;
				}
				if( __0x13226.Bottom.Contains( __0x13225 ) )
				{
					__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTBOTTOM;
					return true;
				}
			}
			if( __0x13216 && __0x13226.Left.Contains( __0x13225 ) )
			{
				__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTLEFT;
				return true;
			}
			if( !__0x13216 && __0x13226.Right.Contains( __0x13225 ) )
			{
				__0x13232.Result = __0x13233 ? __0x13227 : (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTRIGHT;
				return true;
			}
			return false;
		}

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	public partial class HCFormDropDownHolder : EngineForm, IDropDownHolder
	{
		HCDropDownHolderImpl __0x13234;

		

		public bool Resizable
		{
			get { return __0x13234 != null ? __0x13234.Resizable : false; }
		}
		
		
		
		
		
		
		
		

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x13235 = base.CreateParams;
				__0x13235.ExStyle |= Internal.ComponentFactory.Krypton.Toolkit.PI.WS_EX_TOOLWINDOW;
				__0x13235.Style |= Internal.ComponentFactory.Krypton.Toolkit.PI.WS_POPUP | Internal.ComponentFactory.Krypton.Toolkit.PI.WS_BORDER;

				return __0x13235;
			}
		}

		public event System.EventHandler HolderClosed;

		public HCFormDropDownHolder( HCDropDownControl control )
		{
			

			MinimumSize = new Size( 1, 1 );
			MaximumSize = new Size( 10000, 10000 );

			
			ResizeRedraw = true;
			AutoSize = false;

			
			BackColor = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 240, 240, 240 );

			Closed += ( __0x13238, __0x13239 ) => HolderClosed( __0x13238, __0x13239 );

			FormBorderStyle = FormBorderStyle.None;
			StartPosition = FormStartPosition.Manual;

			Controls.Add( control );

			__0x13234 = new HCDropDownHolderImpl( this, control );
			__0x13234.Initialize();
		}

		public void Show( Control openerControl )
		{
			if( openerControl == null )
				throw new ArgumentNullException( nameof( openerControl ) );
			Show( openerControl, openerControl.ClientRectangle );
		}

		public void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			__0x13234.Show( openerControl, area );
		}

		public void Close( bool commitChanges )
		{
			__0x13234.Close( commitChanges );
			Close();
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			__0x13234?.OnSizeChanged();
			base.OnSizeChanged( e );
		}

		protected override void OnClosed( EventArgs e )
		{
			base.OnClosed( e );
			__0x13234?.OnClosed();
		}

		protected override void OnVisibleChanged( EventArgs e )
		{
			base.OnVisibleChanged( e );
			if( Visible )
				__0x13234?.OnOpened();
		}

		[DllImport( "user32.dll" )]
		internal static extern IntPtr GetActiveWindow();

		protected override void OnDeactivate( EventArgs e )
		{
			base.OnDeactivate( e );

			if( Disposing )
				return; 

			if( !EditorAPI.ClosingApplication )
			{
				try
				{
					
					
					
					
					Task.Delay( 10 ).ContinueWith( ( __0x13240 ) =>
					{
						var __0x13236 = GetActiveWindow();
						if( __0x13236 == IntPtr.Zero || __0x13236 == EditorForm.Instance.Handle )
							Close( true );
					}, TaskScheduler.FromCurrentSynchronizationContext() );
				}
				catch { }
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( __0x13234 != null )
				return __0x13234.ProcessCmdKey( keyData );
			else
				return false;
		}

		protected override void WndProc( ref Message m )
		{
			if( __0x13234 != null && __0x13234.ProcessResizing( ref m, false ) )
				return;
			base.WndProc( ref m );
		}

		public bool ProcessResizing( ref Message m )
		{
			if( __0x13234 != null )
				return __0x13234.ProcessResizing( ref m );
			else
				return false;
		}

		private void __0x13237()
		{
			this.SuspendLayout();
			
			
			
			this.ClientSize = new System.Drawing.Size( 282, 253 );
			this.Name = "HCFormDropDownHolder";
			this.ResumeLayout( false );

		}
	}
}





namespace NeoAxis.Editor
{
	[ToolboxItem( false ), DesignerCategory( "" )]
	public class HCToolStripDropDownHolder : ToolStripDropDown, IDropDownHolder
	{
		HCDropDownHolderImpl __0x13241;
		Control __0x13242; 

		DropShadowManager __0x13243;
		ShadowImageCacheManager __0x13244;

		

		class __0x13256 : ProfessionalColorTable
		{
			public __0x13256()
			{
				base.UseSystemColors = false;
			}

			public override Color MenuBorder
			{
				get
				{
					return EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 200, 200, 200 );
				}
			}
		}

		

		public bool Resizable
		{
			get { return __0x13241 != null ? __0x13241.Resizable : false; }
		}
		
		
		
		
		
		
		
		

		

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x13245 = base.CreateParams;
				__0x13245.ExStyle |= Internal.ComponentFactory.Krypton.Toolkit.PI.WS_EX_NOACTIVATE;
				
				
				return __0x13245;
			}
		}

		public event System.EventHandler HolderClosed;

		public HCToolStripDropDownHolder( HCDropDownControl control )
		{
			
			ResizeRedraw = true;
			AutoSize = false;

			RenderMode = ToolStripRenderMode.Professional; 
			Renderer = new ToolStripProfessionalRenderer( new __0x13256() );
			

			DropShadowEnabled = false;

			Closed += ( __0x13254, __0x13255 ) => HolderClosed( __0x13254, __0x13255 );

			__0x13241 = new HCDropDownHolderImpl( this, control );
			__0x13241.Initialize();

			var __0x13246 = new ToolStripControlHost( control )
			{
				Margin = Padding.Empty,
				Padding = Padding.Empty
			};

			Items.Add( __0x13246 );
		}

		protected override void OnHandleCreated( EventArgs e )
		{
			base.OnHandleCreated( e );

			KryptonWinFormsUtility.LockFormUpdate( this );

			__0x13250();
		}

		protected override void Dispose( bool disposing )
		{
			__0x13252();

			base.Dispose( disposing );
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			__0x13241?.OnSizeChanged();
			base.OnSizeChanged( e );
		}

		public void Show( Control openerControl )
		{
			if( openerControl == null )
				throw new ArgumentNullException( nameof( openerControl ) );
			Show( openerControl, openerControl.ClientRectangle );
		}

		public void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			this.__0x13242 = openerControl ?? throw new ArgumentNullException( "sourceControl" );
			var __0x13247 = __0x13241.CalculateLocation( openerControl, area );
			Show( openerControl, __0x13247, ToolStripDropDownDirection.BelowLeft );
		}

		public void Close( bool commitChanges )
		{
			__0x13241.Close( commitChanges );
			Close( ToolStripDropDownCloseReason.CloseCalled );
		}

		protected override void OnOpened( EventArgs e )
		{
			base.OnOpened( e );
			__0x13241?.OnOpened();

			KryptonWinFormsUtility.LockFormUpdate( null );
		}

		protected override void OnClosed( ToolStripDropDownClosedEventArgs e )
		{
			base.OnClosed( e );
			__0x13241?.OnClosed();
		}

		protected override void OnClosing( ToolStripDropDownClosingEventArgs e )
		{
			if( e.CloseReason == ToolStripDropDownCloseReason.AppFocusChange ||
				e.CloseReason == ToolStripDropDownCloseReason.AppClicked )
			{
				if( __0x13241 != null )
					__0x13241.CommitOnClosing = true;
			}

			if( e.CloseReason == ToolStripDropDownCloseReason.ItemClicked )
				e.Cancel = true;

			if( e.CloseReason == ToolStripDropDownCloseReason.AppClicked )
			{
				
				var __0x13248 = ( __0x13242 is IHCProperty ) ?
					( (IHCProperty)__0x13242 ).EditorControl : __0x13242;
				if( __0x13248.ClientRectangle.Contains( __0x13248.PointToClient( Cursor.Position ) ) )
					e.Cancel = true;
			}

			base.OnClosing( e );
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( __0x13241 != null )
				return __0x13241.ProcessCmdKey( keyData );
			else
				return false;
		}

		protected override void WndProc( ref Message m )
		{
			if( __0x13241 != null && __0x13241.ProcessResizing( ref m, false ) )
				return;
			try
			{
				base.WndProc( ref m );
			}
			catch { }
		}

		public bool ProcessResizing( ref Message m )
		{
			if( __0x13241 != null )
				return __0x13241.ProcessResizing( ref m );
			else
				return false;
		}

		void __0x13250()
		{
			if( DesignMode || !IsHandleCreated || IsDisposed )
				return;

			
			__0x13251();
			
			
		}

		void __0x13251()
		{
			if( __0x13244 == null )
				__0x13244 = new ShadowImageCacheManager();

			if( __0x13243 == null )
			{
				__0x13243 = new DropShadowManager( this );
				__0x13253();
			}
		}

		void __0x13252()
		{
			if( __0x13243 != null )
			{
				__0x13243.Dispose();
				__0x13243 = null;
			}

			if( __0x13244 != null )
			{
				__0x13244.Dispose();
				__0x13244 = null;
			}
		}

		void __0x13253()
		{
			if( __0x13243 != null )
			{
				var __0x13249 = KryptonDarkThemeUtility.DarkTheme ? Color.FromArgb( 30, 30, 30 ) : Color.FromArgb( 150, 150, 150 );
				__0x13243.ImageCache = __0x13244.GetCached( __0x13249 );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x13250();
		}

	}
}





namespace NeoAxis.Editor
{
	public interface IDropDownHolder
	{
		
		event System.EventHandler HolderClosed;
		bool Visible { get; set; }
		void Show( Control openerControl );
		void Close();
		void Close( bool commitChanges );

		
		bool ProcessResizing( ref Message m );
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridCheckBox : EUserControl, IHCCheckBox
	{
		public HCGridCheckBox()
		{
			__0x13258();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				checkBox1.Location = new Point( 1, DpiHelper.Default.ScaleValue( 5 ) );
				checkBox1.AutoSize = false;
				checkBox1.Size = new Size( 1, 1 );
			}
		}

		public KryptonCheckBox CheckBox1
		{
			get { return checkBox1; }
		}

		public bool CheckBox1SetText
		{
			get { return false; }
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				if( checkBox1.AutoSize != true )
					checkBox1.AutoSize = true;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridCheckBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13257 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13257 != null ) )
			{
				__0x13257.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13258()
		{
			this.checkBox1 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.SuspendLayout();
			
			
			
			this.checkBox1.Location = new System.Drawing.Point(1, 6);
			this.checkBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.checkBox1.Name = "checkBox1";
			this.checkBox1.Size = new System.Drawing.Size(58, 20);
			this.checkBox1.TabIndex = 0;
			this.checkBox1.Values.Text = "Text";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.checkBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridCheckBox";
			this.Size = new System.Drawing.Size(516, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public Internal.ComponentFactory.Krypton.Toolkit.KryptonCheckBox checkBox1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridCollection : EUserControl, IHCCollection
	{
		public HCGridCollection()
		{
			__0x13260();

			if( EditorAPI.DarkTheme )
				label2.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );

			buttonEdit.Location = new Point( buttonEdit.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		public EngineTextBox Label2
		{
			get { return label2; }
		}

		public KryptonButton ButtonEdit
		{
			get { return buttonEdit; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridCollection
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13259 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13259 != null ) )
			{
				__0x13259.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13260()
		{
			this.buttonEdit = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.label2 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.buttonEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonEdit.Location = new System.Drawing.Point(223, 2);
			this.buttonEdit.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonEdit.Name = "buttonEdit";
			this.buttonEdit.Size = new System.Drawing.Size(27, 22);
			this.buttonEdit.TabIndex = 1;
			this.buttonEdit.Values.Text = "...";
			this.buttonEdit.Visible = false;
			
			
			
			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label2.Location = new System.Drawing.Point(0, 3);
			this.label2.LikeLabel = true;
			this.label2.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.label2.Name = "label2";
			this.label2.ReadOnly = true;
			this.label2.Size = new System.Drawing.Size(271, 23);
			this.label2.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.label2.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.label2.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.label2.TabIndex = 0;
			this.label2.TabStop = false;
			this.label2.Text = "label2";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonEdit);
			this.Controls.Add(this.label2);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridCollection";
			this.Size = new System.Drawing.Size(275, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox label2;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton buttonEdit;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridColorValue : EUserControl, IHCColorValue
	{
		public HCGridColorValue()
		{
			__0x13262();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );

			previewButton.Location = new Point( previewButton.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			
			
			
			
			
			

			

			
			
			
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public HCColorPreviewButton PreviewButton
		{
			get { return previewButton; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridColorValue
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13261 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13261 != null ) )
			{
				__0x13261.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13262()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.previewButton = new NeoAxis.Editor.HCColorPreviewButton();
			this.SuspendLayout();
			
			
			
			this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox1.Location = new System.Drawing.Point(0, 3);
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(277, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.previewButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.previewButton.Location = new System.Drawing.Point(280, 3);
			this.previewButton.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.previewButton.Name = "previewButton";
			this.previewButton.Size = new System.Drawing.Size(27, 22);
			this.previewButton.TabIndex = 5;
			this.previewButton.Values.Text = "";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.previewButton);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridColorValue";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		public HCColorPreviewButton previewButton;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridColorValuePowered : EUserControl, IHCColorValuePowered
	{
		public HCGridColorValuePowered()
		{
			__0x13265();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );

			previewButton.Location = new Point( previewButton.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public HCColorPreviewButton PreviewButton
		{
			get { return previewButton; }
		}

		public KryptonTrackBar TrackBarPower
		{
			get { return __0x13264; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridColorValuePowered
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13263 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13263 != null ) )
			{
				__0x13263.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13265()
		{
			this.previewButton = new NeoAxis.Editor.HCColorPreviewButton();
			this.__0x13264 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			
			this.previewButton.Location = new System.Drawing.Point(68, 3);
			this.previewButton.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.previewButton.Name = "previewButton";
			this.previewButton.Size = new System.Drawing.Size(27, 22);
			this.previewButton.TabIndex = 1;
			this.previewButton.Values.Text = "";
			
			
			
			this.__0x13264.Anchor = ( (System.Windows.Forms.AnchorStyles)( ( ( System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left )
			 | System.Windows.Forms.AnchorStyles.Right ) ) );
			
			this.__0x13264.DrawBackground = true;
			this.__0x13264.Location = new System.Drawing.Point(98, 4);
			this.__0x13264.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x13264.Name = "trackBarPower";
			this.__0x13264.Size = new System.Drawing.Size(209, 20);
			this.__0x13264.TabIndex = 2;
			this.__0x13264.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x13264.TrackBarSize = Internal.ComponentFactory.Krypton.Toolkit.PaletteTrackBarSize.Small;
			
			
			
			
   
			this.textBox1.Location = new System.Drawing.Point( 0, 4 );
			
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size( 64, 22 );
			
			this.textBox1.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13264);
			this.Controls.Add(this.previewButton);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridColorValuePowered";
			this.Size = new System.Drawing.Size(308, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		public HCColorPreviewButton previewButton;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13264;
	}
}





namespace NeoAxis.Editor
{
	public interface IHCDropDownButton
	{
		KryptonDropButton Button { get; }
	}

	public partial class HCGridDropDownButton : EUserControl, IHCDropDownButton
	{
		public HCGridDropDownButton()
		{
			__0x13268();

			if( EditorAPI.DarkTheme )
				__0x13267.Images.Common = Properties.Resources.DropDownButton_Dark;
			else
				__0x13267.Images.Common = Properties.Resources.DropDownButton;

			__0x13267.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13267.AutoSize = false;
			__0x13267.Height = Math.Max( DpiHelper.Default.ScaleValue( 18 ), __0x13267.PreferredSize.Height );
		}

		public KryptonDropButton Button
		{
			get { return __0x13267; }
		}

		
		
		

		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridDropDownButton
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13266 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13266 != null ) )
			{
				__0x13266.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13268()
		{
			this.__0x13267 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonDropButton();
			this.SuspendLayout();
			
			
			
			
			
			
			
			
			this.__0x13267.ButtonStyle = Internal.ComponentFactory.Krypton.Toolkit.ButtonStyle.Custom3;
			this.__0x13267.Images.Common = global::NeoAxis.Properties.Resources.DropDownButton;
			this.__0x13267.Location = new System.Drawing.Point(0, 3);
			this.__0x13267.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13267.Name = "kryptonDropButton";
			this.__0x13267.Size = new System.Drawing.Size(285, 22);
			this.__0x13267.Splitter = false;
			this.__0x13267.TabIndex = 0;
			this.__0x13267.Values.Text = "kryptonDropButton1";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13267);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridDropDownButton";
			this.Size = new System.Drawing.Size(285, 28);
			this.ResumeLayout(false);

		}

		#endregion

		private Internal.ComponentFactory.Krypton.Toolkit.KryptonDropButton __0x13267;
	}
}





namespace NeoAxis.Editor
{
	public interface IHCEvent
	{
		Label LabelName { get; }
		KryptonButton ButtonAddEventHandler { get; }
		KryptonButton ButtonEditEventHandlers { get; }
		void LabelNameSetToolTip( string value );
		void SetToolTip( Control control, string caption );
	}

	public partial class HCGridEvent : EUserControl, IHCEvent
	{
		Control __0x13269;

		

		public HCGridEvent()
		{
			__0x13273();

			buttonEditEventHandlers.Values.Image = EditorResourcesCache.Edit;
			buttonAddEventHandler.Values.Image = EditorResourcesCache.New;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x13272.SetToolTip( buttonAddEventHandler, EditorLocalization.Translate( "SettingsWindow", "Add event handler." ) );
			__0x13272.SetToolTip( buttonEditEventHandlers, EditorLocalization.Translate( "SettingsWindow", "Edit event handlers." ) );
		}

		public Label LabelName
		{
			get { return __0x13271; }
		}

		public void LabelNameSetToolTip( string value )
		{
			if( __0x13272.GetToolTip( __0x13271 ) == string.Empty )
				__0x13272.SetToolTip( __0x13271, value );
		}

		public KryptonButton ButtonAddEventHandler
		{
			get { return buttonAddEventHandler; }
		}

		public KryptonButton ButtonEditEventHandlers
		{
			get { return buttonEditEventHandlers; }
		}

		public void SetToolTip( Control control, string caption )
		{
			if( __0x13272.GetToolTip( control ) != caption )
				__0x13272.SetToolTip( control, caption );
		}

		public KryptonButton ButtonType
		{
			get { return buttonEditEventHandlers; }
		}

		public Control EditorControl
		{
			get { return __0x13269; }
			set
			{
				if( __0x13269 != null )
					Controls.Remove( __0x13269 );
				__0x13269 = value;
				Controls.Add( __0x13269 );
			}
		}

		protected override void WndProc( ref Message m )
		{
			
			if( m.Msg == Internal.ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
				m.Result = (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
			else
				base.WndProc( ref m );
		}

		public override string ToString()
		{
			return nameof( HCGridEvent ) + ": " + __0x13271.Text;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridEvent
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13270 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13270 != null ) )
			{
				__0x13270.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13273()
		{
			this.__0x13270 = new System.ComponentModel.Container();
			this.__0x13271 = new NeoAxis.Editor.LabelExtended();
			this.__0x13272 = new NeoAxis.Editor.EngineToolTip(this.__0x13270);
			this.buttonEditEventHandlers = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.buttonAddEventHandler = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			this.__0x13271.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13271.AutoEllipsis = true;
			this.__0x13271.Location = new System.Drawing.Point(21, 3);
			this.__0x13271.Name = "labelName";
			this.__0x13271.Size = new System.Drawing.Size(175, 22);
			this.__0x13271.TabIndex = 0;
			this.__0x13271.Text = "{Name}";
			
			
			
			this.buttonEditEventHandlers.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonEditEventHandlers.Location = new System.Drawing.Point(203, 3);
			this.buttonEditEventHandlers.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonEditEventHandlers.Name = "buttonEditEventHandlers";
			this.buttonEditEventHandlers.Size = new System.Drawing.Size(26, 24);
			this.buttonEditEventHandlers.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonEditEventHandlers.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.buttonEditEventHandlers.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.buttonEditEventHandlers.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonEditEventHandlers.TabIndex = 1;
			this.__0x13272.SetToolTip(this.buttonEditEventHandlers, "Edit event handlers");
			this.buttonEditEventHandlers.Values.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.buttonEditEventHandlers.Values.Text = "";
			
			
			
			this.buttonAddEventHandler.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonAddEventHandler.Location = new System.Drawing.Point(232, 3);
			this.buttonAddEventHandler.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonAddEventHandler.Name = "buttonAddEventHandler";
			this.buttonAddEventHandler.Size = new System.Drawing.Size(26, 24);
			this.buttonAddEventHandler.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonAddEventHandler.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.buttonAddEventHandler.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.buttonAddEventHandler.StateNormal.Back.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonAddEventHandler.TabIndex = 2;
			this.__0x13272.SetToolTip(this.buttonAddEventHandler, "Add event handler");
			this.buttonAddEventHandler.Values.Image = global::NeoAxis.Properties.Resources.New_16;
			this.buttonAddEventHandler.Values.Text = "";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonEditEventHandlers);
			this.Controls.Add(this.buttonAddEventHandler);
			this.Controls.Add(this.__0x13271);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridEvent";
			this.Size = new System.Drawing.Size(266, 28);
			this.ResumeLayout(false);

		}

		#endregion
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton buttonAddEventHandler;
		private NeoAxis.Editor.LabelExtended __0x13271;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton buttonEditEventHandlers;
		private NeoAxis.Editor.EngineToolTip __0x13272;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridGroup : EUserControl, IHCGroup
	{
		public HCGridGroup()
		{
			__0x13275();

			if( EditorAPI.DarkTheme )
			{
				label1.ForeColor = Color.FromArgb( 160, 160, 160 );
				label1.BackColor = Color.FromArgb( 40, 40, 40 );
			}
		}

		public Label Label1
		{
			get { return label1; }
		}

		public override string ToString()
		{
			return nameof( HCGridGroup ) + ": " + label1.Text;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridGroup
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13274 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13274 != null ) )
			{
				__0x13274.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13275()
		{
			this.label1 = new NeoAxis.Editor.LabelExtended();
			this.SuspendLayout();
			
			
			
			this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label1.BackColor = System.Drawing.Color.DarkGray;
			this.label1.Location = new System.Drawing.Point(0, 2);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(616, 21);
			this.label1.TabIndex = 0;
			this.label1.Text = "label1";
			this.label1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.label1);
			this.Name = "HCGridGroup";
			this.Size = new System.Drawing.Size(616, 25);
			this.ResumeLayout(false);

		}

		#endregion

		public NeoAxis.Editor.LabelExtended label1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridLabel : EUserControl, IHCLabel
	{
		public HCGridLabel()
		{
			__0x13277();

			if( EditorAPI.DarkTheme )
				label2.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );
			else
				label2.StateCommon.Back.Color1 = Color.FromArgb( 240, 240, 240 );

			label2.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			label2.AutoSize = false;
			label2.Height = Math.Max( DpiHelper.Default.ScaleValue( 18 ), label2.PreferredSize.Height );
		}

		
		
		
		

		public EngineTextBox Label2
		{
			get { return label2; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridLabel
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13276 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13276 != null ) )
			{
				__0x13276.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13277()
		{
			this.label2 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label2.Location = new System.Drawing.Point(0, 3);
			this.label2.LikeLabel = true;
			this.label2.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.label2.Name = "label2";
			this.label2.ReadOnly = true;
			this.label2.Size = new System.Drawing.Size(451, 23);
			this.label2.StateCommon.Border.Draw = Internal.ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.label2.StateCommon.Border.DrawBorders = ((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | Internal.ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.label2.TabIndex = 2;
			this.label2.TabStop = false;
			this.label2.Text = "label2";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.label2);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridLabel";
			this.Size = new System.Drawing.Size(452, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox label2;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridProperty : EUserControl, IHCProperty
	{
		string __0x13278;
		int __0x13279;
		Control __0x13280;

		KryptonButton __0x13281;
		readonly Size __0x13282 = DpiHelper.Default.ScaleValue( new Size( 14, 14 ) );

		KryptonButton __0x13283;
		readonly Size __0x13284 = DpiHelper.Default.ScaleValue( new Size( 12, 12 ) );

		KryptonButton __0x13285;
		readonly Size __0x13286 = DpiHelper.Default.ScaleValue( new Size( 22, 18 ) );

		KryptonButton __0x13287;

		bool __0x13288;

		string __0x13289 = "";
		string __0x13290 = "";

		

		public HCGridProperty()
		{
			__0x13306();

			
			ResizeRedraw = true;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( __0x13303.Height < __0x13303.PreferredHeight )
				__0x13303.Height = __0x13303.PreferredHeight;

			__0x13303.Paint += __0x13305;

			
			
		}

		public Label LabelName
		{
			get { return __0x13303; }
		}

		public void LabelNameSetText( string value )
		{
			if( __0x13289 != value )
			{
				__0x13289 = value;
				if( __0x13289 == null )
					__0x13289 = "";

				var __0x13291 = __0x13289.IndexOf( " (" );
				if( __0x13291 != -1 )
				{
					__0x13303.Text = __0x13289.Substring( 0, __0x13291 );

					__0x13290 = __0x13289.Substring( __0x13291 + 1 );
					if( __0x13290.Length > 2 && __0x13290[ 0 ] == '(' && __0x13290[ __0x13290.Length - 1 ] == ')' )
						__0x13290 = __0x13290.Substring( 1, __0x13290.Length - 2 );
				}
				else
					__0x13303.Text = __0x13289;
			}
		}

		private void __0x13305( object __0x13307, PaintEventArgs __0x13308 )
		{
			if( !string.IsNullOrEmpty( __0x13290 ) )
			{
				var __0x13292 = (Label)__0x13307;

				var __0x13293 = TextRenderer.MeasureText( __0x13292.Text + " ", __0x13292.Font );
				var __0x13294 = TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl | TextFormatFlags.Left | TextFormatFlags.VerticalCenter | TextFormatFlags.EndEllipsis;

				var __0x13295 = ( new ColorValue( __0x13292.BackColor ).ToVector4F() * 0.7f + new ColorValue( __0x13292.ForeColor ).ToVector4F() * 0.3f );
				var __0x13296 = __0x13295.ToColorValue().ToColor();

				TextRenderer.DrawText( __0x13308.Graphics, __0x13290, __0x13292.Font, new System.Drawing.Rectangle( __0x13293.Width, 0, __0x13292.Size.Width - __0x13293.Width, __0x13292.Size.Height ), __0x13296, __0x13294 );
			}
		}

		public void LabelNameSetToolTip( string value )
		{
			if( __0x13304.GetToolTip( __0x13303 ) == string.Empty )
				__0x13304.SetToolTip( __0x13303, value );
		}

		public void ButtonExpandInit()
		{
			__0x13281 = new KryptonButton();

			__0x13281.Location = new Point( 2, DpiHelper.Default.ScaleValue( 5 ) );
			__0x13281.Size = __0x13282;
			if( !EditorAPI.DarkTheme )
				__0x13281.StateNormal.Back.Color1 = Color.WhiteSmoke;
			__0x13281.TabIndex = 0;
			if( EditorAPI.DarkTheme )
				__0x13281.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big_Dark" : "Plus_small3_Dark" );
			else
				__0x13281.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big" : "Plus_small3" );
			__0x13281.Values.Text = "";
			__0x13281.Visible = false;

			Controls.Add( __0x13281 );
		}

		public KryptonButton ButtonExpand
		{
			get { return __0x13281; }
		}

		public void ButtonDefaultValueInit()
		{
			__0x13283 = new KryptonButton();

			__0x13283.Location = new Point( 0, DpiHelper.Default.ScaleValue( 6 ) );
			__0x13283.Size = __0x13284;
			__0x13283.StateCommon.Border.Draw = InheritBool.False;
			__0x13283.StateCommon.Border.DrawBorders = PaletteDrawBorders.Top | PaletteDrawBorders.Bottom | PaletteDrawBorders.Left | PaletteDrawBorders.Right;
			__0x13283.StateDisabled.Back.Draw = InheritBool.False;
			__0x13283.StateNormal.Back.Draw = InheritBool.False;
			__0x13283.TabIndex = 2;
			__0x13304.SetToolTip( this.__0x13283, EditorLocalization.Translate( "SettingsWindow", "Reset to default." ) );
			__0x13283.Values.Text = "";

			Controls.Add( __0x13283 );
		}

		public KryptonButton ButtonDefaultValue
		{
			get { return __0x13283; }
		}

		public void ButtonReferenceInit()
		{
			__0x13285 = new KryptonButton();

			__0x13285.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13285.Size = __0x13286;
			if( !EditorAPI.DarkTheme )
				__0x13285.StateNormal.Back.Color1 = Color.WhiteSmoke;
			__0x13285.TabIndex = 3;
			__0x13285.Values.Text = "";
			__0x13285.Visible = false;

			Controls.Add( __0x13285 );
		}

		public KryptonButton ButtonReference
		{
			get { return __0x13285; }
		}

		public void ButtonReferenceSetToolTip( string value )
		{
			if( __0x13278 != value && __0x13285 != null )
			{
				__0x13278 = value;
				__0x13304.SetToolTip( __0x13285, value );
			}
		}

		public void SetToolTip( Control control, string caption )
		{
			if( __0x13304.GetToolTip( control ) != caption )
				__0x13304.SetToolTip( control, caption );
		}

		public void ButtonTypeInit()
		{
			__0x13287 = new KryptonButton();

			__0x13287.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13287.Size = DpiHelper.Default.ScaleValue( new Size( 22, 18 ) );
			__0x13287.TabIndex = 6;
			__0x13304.SetToolTip( __0x13287, EditorLocalization.Translate( "SettingsWindow", "Select a class type." ) );
			__0x13287.Values.Text = "...";
			__0x13287.Visible = false;

			Controls.Add( __0x13287 );
		}

		public KryptonButton ButtonType
		{
			get { return __0x13287; }
		}

		public Control EditorControl
		{
			get { return __0x13280; }
			set
			{
				if( __0x13280 != null )
					Controls.Remove( __0x13280 );
				__0x13280 = value;

				Controls.Add( __0x13280 );

				
				SplitterPosition = (int)( this.Width / 2.5f );
			}
		}

		public int SplitterPosition
		{
			get { return __0x13279; }
			set
			{
				if( __0x13279 == value )
					return;
				__0x13279 = value;
				UpdateLayout();
			}
		}

		protected override void WndProc( ref Message m )
		{
			
			if( m.Msg == Internal.ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
				m.Result = (IntPtr)Internal.ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
			else
				base.WndProc( ref m );
		}

		internal virtual void UpdateLayout()
		{
			if( __0x13303.Width != __0x13279 - __0x13282.Width - HierarchicalContainer.SpliterWidth - 5 )
				__0x13303.Width = __0x13279 - __0x13282.Width - HierarchicalContainer.SpliterWidth - 5;
			if( __0x13303.Visible != !ShowOnlyEditorControl )
				__0x13303.Visible = !ShowOnlyEditorControl;

			int __0x13297 = 1;

			if( __0x13283 != null )
			{
				if( __0x13283.Location != new Point( __0x13279 + __0x13297, __0x13283.Location.Y ) )
					__0x13283.Location = new Point( __0x13279 + __0x13297, __0x13283.Location.Y );
			}
			__0x13297 += __0x13284.Width + 1;

			if( __0x13285 != null )
			{
				if( __0x13285.Location != new Point( __0x13279 + __0x13297, __0x13285.Location.Y ) )
					__0x13285.Location = new Point( __0x13279 + __0x13297, __0x13285.Location.Y );
			}
			__0x13297 += __0x13286.Width + 3;

			if( __0x13287 != null && __0x13287.Visible )
			{
				if( __0x13287.Location != new Point( __0x13279 + __0x13297, __0x13287.Location.Y ) )
					__0x13287.Location = new Point( __0x13279 + __0x13297, __0x13287.Location.Y );
				__0x13297 += __0x13287.Width + 1;
			}

			if( ShowOnlyEditorControl )
			{
				if( __0x13280.Dock != DockStyle.Fill )
					__0x13280.Dock = DockStyle.Fill;
			}
			else
			{
				if( __0x13280.Location != new Point( __0x13279 + __0x13297, 0 ) )
					__0x13280.Location = new Point( __0x13279 + __0x13297, 0 );
				if( __0x13280.Width != Width - EditorControl.Location.X - 2 )
					__0x13280.Width = Width - EditorControl.Location.X - 2;
			}
		}

		
		
		
		
		
		
		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			

#if !DEPLOY
			if( HierarchicalContainer.DrawSplitter )
			{
				var __0x13298 = EditorAPI.DarkTheme ? Color.FromArgb( 65, 65, 65 ) : Color.FromArgb( 225, 225, 225 );

				var __0x13299 = Parent as HierarchicalContainer;
				
				if( __0x13299 == null && Parent != null )
					__0x13299 = Parent.Parent as HierarchicalContainer;

				if( !__0x13299.ParentFormResizing )
				{
					
					using( Pen __0x13300 = new Pen( __0x13298 ) )
					{
						__0x13300.Width = HierarchicalContainer.SpliterWidth;
						int __0x13301 = __0x13299.SplitterPosition - HierarchicalContainer.SpliterWidth / 2;
						e.Graphics.DrawLine( __0x13300, __0x13301, 0, __0x13301, this.Height );
					}
				}
			}
#endif
		}

		public override string ToString()
		{
			return nameof( HCGridProperty ) + ": " + __0x13303.Text;
		}

		[Browsable( false )]
		public bool ShowOnlyEditorControl
		{
			get { return __0x13288; }
			set { __0x13288 = value; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridProperty
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13302 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13302 != null ) )
			{
				__0x13302.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13306()
		{
			this.__0x13302 = new System.ComponentModel.Container();
			this.__0x13303 = new NeoAxis.Editor.LabelExtended();
			this.__0x13304 = new NeoAxis.Editor.EngineToolTip(this.__0x13302);
			this.SuspendLayout();
			
			
			
			this.__0x13303.AutoEllipsis = true;
			this.__0x13303.Location = new System.Drawing.Point(22, 6);
			this.__0x13303.Name = "labelName";
			this.__0x13303.Size = new System.Drawing.Size(55, 17);
			this.__0x13303.TabIndex = 1;
			this.__0x13303.Text = "{Name}";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13303);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridProperty";
			this.Size = new System.Drawing.Size(516, 28);
			this.ResumeLayout(false);

		}

		#endregion
		
		
		private NeoAxis.Editor.LabelExtended __0x13303;
		
		
		private NeoAxis.Editor.EngineToolTip __0x13304;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBox : EUserControl, IHCTextBox
	{
		public HCGridTextBox()
		{
			__0x13310();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );
		}

		
		
		
		

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}
	}
}


namespace NeoAxis.Editor
{
	partial class HCGridTextBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13309 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13309 != null ) )
			{
				__0x13309.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13310()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox1.Location = new System.Drawing.Point(0, 3);
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(307, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBox";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBoxNumeric : EUserControl, IHCTextBoxNumeric
	{
		public HCGridTextBoxNumeric()
		{
			__0x13313();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public KryptonTrackBar TrackBar
		{
			get { return __0x13312; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridTextBoxNumeric
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13311 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13311 != null ) )
			{
				__0x13311.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13313()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13312 = new Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.SuspendLayout();
			
			
			
			this.textBox1.Location = new System.Drawing.Point( 0, 4 );
			
			this.textBox1.LikeLabel = false;
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(64, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.__0x13312.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13312.DrawBackground = true;
			this.__0x13312.Location = new System.Drawing.Point(69, 4);
			this.__0x13312.Name = "trackBar";
			this.__0x13312.Size = new System.Drawing.Size(237, 20);
			this.__0x13312.TabIndex = 2;
			this.__0x13312.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x13312.TrackBarSize = Internal.ComponentFactory.Krypton.Toolkit.PaletteTrackBarSize.Small;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13312);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBoxNumeric";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		private Internal.ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13312;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBoxSelect : EUserControl, IHCTextBoxSelect
	{
		public HCGridTextBoxSelect()
		{
			__0x13316();

			if( textBox != null )
				textBox.LikeLabel = UseReadOnlyLabel;

			if( EditorAPI.DarkTheme )
				buttonSelect.Values.Image = Properties.Resources.DropDownButton_Dark;

			textBox.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox.AutoSize = false;
			textBox.Height = DpiHelper.Default.ScaleValue( 18 );

			buttonSelect.Location = new Point( buttonSelect.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		bool __0x13314 = false;
		public bool UseReadOnlyLabel
		{
			get { return __0x13314; }
			set
			{
				__0x13314 = value;
				if( textBox != null )
					textBox.LikeLabel = value;
			}
		}

		public EngineTextBox TextBox
		{
			get { return textBox; }
		}

		public KryptonButton ButtonSelect
		{
			get { return buttonSelect; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridTextBoxSelect
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13315 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13315 != null ) )
			{
				__0x13315.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13316()
		{
			this.buttonSelect = new Internal.ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.textBox = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.buttonSelect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonSelect.Location = new System.Drawing.Point(259, 3);
			this.buttonSelect.Name = "buttonSelect";
			this.buttonSelect.Size = new System.Drawing.Size(26, 22);
			this.buttonSelect.TabIndex = 1;
			this.buttonSelect.Values.Image = global::NeoAxis.Properties.Resources.DropDownButton;
			this.buttonSelect.Values.Text = "";
			
			
			
			this.textBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox.Location = new System.Drawing.Point(0, 3);
			this.textBox.LikeLabel = false;
			this.textBox.Name = "textBox";
			this.textBox.Size = new System.Drawing.Size(257, 21);
			this.textBox.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonSelect);
			this.Controls.Add(this.textBox);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBoxSelect";
			this.Size = new System.Drawing.Size(285, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox;
		public Internal.ComponentFactory.Krypton.Toolkit.KryptonButton buttonSelect;
	}
}


