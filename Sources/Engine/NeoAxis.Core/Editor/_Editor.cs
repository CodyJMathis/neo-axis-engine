// Copyright (C) 2021 NeoAxis Group Ltd. 8 Copthall, Roseau Valley, 00152 Commonwealth of Dominica.
using System;
using System.Drawing;
using System.Windows.Forms;
using ComponentFactory.Krypton.Ribbon;
using System.IO;
using System.Collections.Generic;
using System.ComponentModel;
using System.Threading.Tasks;
using System.Diagnostics;
using System.Reflection;
using System.IO.Compression;
using ComponentFactory.Krypton.Toolkit;
using ComponentFactory.Krypton.Navigator;
using System.Text;
using NeoAxis.Input;
using NeoAxis.Widget;
using System.Data;
using System.Linq;
using System.Runtime.InteropServices;
using Aga.Controls.Tree;
using System.Collections;
using System.Xml;
using ComponentFactory.Krypton.Workspace;
using ComponentFactory.Krypton.Docking;
using SharpBgfx;
using System.Threading;
using SharpBgfx.Common;
using Microsoft.Win32;
using NeoAxis.Properties;
using System.Drawing.Drawing2D;
using System.Windows.Forms.VisualStyles;
using System.Collections.Specialized;
using System.Globalization;
using System.Net;
using NeoAxis;
using System.Drawing.Imaging;
using System.Windows.Forms.Design;
using NeoAxis.Editor;
using System.Collections.ObjectModel;
using System.Drawing.Design;
using System.Drawing.Text;




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Backstage of the editor.
	/// </summary>
	public partial class BackstageMenu : BackstageAppMenu
	{
		static bool __0x1;

		bool __0x2;

		public static string needStartBuildProduct;
		public static bool needStartBuildProductAndRun;

		

		public class MyKryptonNavigator : KryptonNavigator
		{
			[Browsable( false )]
			public BackstageMenu owner;

			protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
			{
				if( keyData == Keys.Escape )
				{
					owner.Hide();
					return true;
				}

				return base.ProcessCmdKey( ref msg, keyData );
			}
		}

		

		public BackstageMenu()
		{
			__0x153();

			__0x68.Values.Image = Properties.Resources.BackstageButtonBack;

			__0x66.owner = this;
			__0x66.AllowPageReorder = false;
			__0x66.AllowTabFocus = false;

			__0x96.LinkClicked += __0x143;

			
			
			
			

			__0x66.Bar.ItemMinimumSize = DpiHelper.Default.ScaleValue( new Size( 160, 50 ) );
			__0x66.Bar.BarFirstItemInset = DpiHelper.Default.ScaleValue( 65 );

			__0x95.Text = EngineInfo.NameWithoutVersion;

			try
			{
				var __0x3 = Assembly.GetExecutingAssembly();
				var __0x4 = FileVersionInfo.GetVersionInfo( __0x3.Location );
				string __0x5 = __0x4.FileVersion;
				__0x97.Text = __0x5;
			}
			catch { }

			
		}

		[Browsable( false )]
		public KryptonPage DefaultPage;

		public void SelectDefaultPage()
		{
			if( !string.IsNullOrEmpty( needStartBuildProduct ) && kryptonPageBuild != null )
			{
				__0x66.SelectedPage = kryptonPageBuild;
			}
			else
			{
				if( DefaultPage != null )
					__0x66.SelectedPage = DefaultPage;
				else
					__0x66.SelectedPage = kryptonPageInfo;
			}
		}

		public string Translate( string text )
		{
			return EditorLocalization.Translate( "Backstage", text );
		}

		private void __0x120( object __0x154, EventArgs __0x155 )
		{
			if( DesignMode )
				return;
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( EditorAPI.DarkTheme )
			{
				__0x66.StateCommon.Panel.Color1 = Color.FromArgb( 10, 10, 10 );
				__0x66.StateSelected.Tab.Back.Color1 = Color.FromArgb( 60, 60, 60 );
				__0x66.StatePressed.Tab.Back.Color1 = Color.FromArgb( 60, 60, 60 );
				__0x66.StateTracking.Tab.Back.Color1 = Color.FromArgb( 50, 50, 50 );

				
				
				
				__0x68.StateCommon.Back.Color1 = Color.FromArgb( 10, 10, 10 );

				BackColor = Color.FromArgb( 10, 10, 10 );

				
				

				
				
				
				
				

				foreach( var __0x112 in __0x66.Pages )
				{
					
					__0x112.StateCommon.Page.Color1 = Color.FromArgb( 40, 40, 40 );

					

					EditorThemeUtility.ApplyDarkThemeToForm( __0x112 );
				}

				__0x98.StateCommon.ShortText.Color1 = Color.Red;
				__0x108.StateCommon.ShortText.Color1 = Color.Red;

				

				
				__0x96.LabelStyle = LabelStyle.Custom1;
				__0x96.StateCommon.ShortText.Color1 = Color.FromArgb( 0, 110, 190 );

				
				
				
			}

			
			{
				foreach( var __0x113 in __0x66.Pages )
					__0x113.Text = Translate( __0x113.Text );

				EditorLocalization.TranslateForm( "Backstage", kryptonPageInfo );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageNew );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageBuild );
				EditorLocalization.TranslateForm( "Backstage", kryptonPageLogin );
			}

			__0x146();
			if( DefaultPage == kryptonPageBuild )
				__0x134();

			__0x80.Start();
		}

		private void __0x121( object __0x156, EventArgs __0x157 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( Visible )
			{
				KryptonWinFormsUtility.LockFormUpdate( EditorForm.Instance );
				EditorForm.Instance.unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.2 );

				__0x125();
				__0x127();
				
				__0x28 = true;

				__0x2 = true;
			}

			__0x1 = Visible;
			
		}

		private void __0x122( object __0x158, ComponentFactory.Krypton.Navigator.KryptonPageEventArgs __0x159 )
		{
			
			
			
			
			
			

			if( __0x159.Item == kryptonPageBuild )
			{
				if( __0x28 )
					__0x134();
				return;
			}

			if( __0x159.Item == kryptonPageExit )
			{
				if( EditorMessageBox.ShowQuestion( Translate( "Exit the app?" ), EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
					EditorForm.Instance.Close();
				return;
			}
		}

		private void __0x123( object __0x160, EventArgs __0x161 )
		{
			Hide();
		}

		private void __0x124( object __0x162, EventArgs __0x163 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x126();
			__0x129();
			
			__0x136();
			__0x147();

			if( Visible && __0x2 )
			{
				__0x2 = false;

				__0x66.Focus();
				__0x66.Select();
				__0x84.Select( 0, 0 );

				
				if( !string.IsNullOrEmpty( needStartBuildProduct ) )
				{
					var __0x6 = needStartBuildProduct;
					var __0x7 = needStartBuildProductAndRun;

					needStartBuildProduct = null;
					needStartBuildProductAndRun = false;

					__0x134( __0x6 );
					__0x136();

					if( __0x137() )
						__0x139( __0x7 );
				}
			}
		}

		

		void __0x125()
		{
			
		}

		void __0x126()
		{
			__0x84.Text = ProjectSettings.Get != null ? ProjectSettings.Get.ProjectName.Value.Trim() : "";
			__0x81.Text = VirtualFileSystem.Directories.Project;
		}

		

		volatile bool __0x8;
		Task __0x9;
		volatile int __0x10;
		string __0x11;

		void __0x127()
		{
			{
				string __0x12 = "";
				for( int __0x13 = 1; ; __0x13++ )
				{
					__0x12 = Path.Combine( __0x144(), "New Project " + __0x13.ToString() );
					if( !Directory.Exists( __0x12 ) )
						break;
				}
				__0x72.Text = __0x12;
			}

			var __0x14 = new List<ContentBrowser.Item>();

			ContentBrowserItem_Virtual __0x15;

			__0x15 = new ContentBrowserItem_Virtual( __0x73, null, Translate( "Copy of this project" ) );
			__0x15.Tag = "Copy";
			var __0x16 = __0x15;
			__0x14.Add( __0x15 );

			__0x15 = new ContentBrowserItem_Virtual( __0x73, null, Translate( "Initial project (Use NeoAxis Launcher or initial source package to create default project)" ) );
			__0x15.ShowDisabled = true;
			__0x15.Tag = "DefaultProjectDisabled";
			__0x14.Add( __0x15 );

			__0x73.SetData( __0x14, false );

			__0x73.SelectItems( new ContentBrowser.Item[] { __0x16 } );
		}

		private void __0x128( object __0x164, EventArgs __0x165 )
		{
			var __0x17 = __0x72.Text;

			while( true )
			{
				if( !string.IsNullOrEmpty( __0x17 ) && !Directory.Exists( __0x17 ) )
				{
					try
					{
						__0x17 = Path.GetDirectoryName( __0x17 );
						continue;
					}
					catch { }
				}
				break;
			}

			if( EditorUtility.ShowOpenFileDialog( true, __0x17, null, out string fileName ) )
				__0x72.Text = fileName;
		}

		void __0x129()
		{
			__0x75.Enabled = __0x130();
			__0x72.Enabled = !__0x8;
			__0x77.Enabled = !__0x8;
			__0x73.Enabled = !__0x8;

			__0x78.Value = __0x10;
			__0x78.Visible = __0x8;
			__0x79.Visible = __0x8;
		}

		bool __0x130()
		{
			string __0x18 = __0x72.Text.Trim();
			if( string.IsNullOrEmpty( __0x18 ) )
				return false;
			if( !Path.IsPathRooted( __0x18 ) )
				return false;
			if( __0x73.SelectedItems.Length == 0 )
				return false;

			if( __0x73.SelectedItems[ 0 ].ShowDisabled )
				return false;
			
			
			

			if( __0x8 )
				return false;
			return true;
		}

		private void __0x131( object __0x166, EventArgs __0x167 )
		{
			string __0x19 = __0x72.Text.Trim();
			if( string.IsNullOrEmpty( __0x19 ) )
				return;

			try
			{
				while( Directory.Exists( __0x19 ) && !IOUtility.IsDirectoryEmpty( __0x19 ) )
				{
					var __0x20 = string.Format( Translate( "Destination folder \'{0}\' is not empty. Clear folder and continue?" ), __0x19 );
					var __0x21 = EditorMessageBox.ShowQuestion( __0x20, EMessageBoxButtons.OKCancel );
					if( __0x21 == EDialogResult.Cancel )
						return;

					IOUtility.ClearDirectory( __0x19 );
				}

				if( !Directory.Exists( __0x19 ) )
					Directory.CreateDirectory( __0x19 );

				__0x8 = true;
				__0x78.Visible = true;
				__0x79.Visible = true;
				__0x11 = __0x19;

				var __0x22 = __0x73.SelectedItems[ 0 ].Tag as string;
				__0x9 = new Task( __0x132, __0x22 );
				__0x9.Start();
			}
			catch( Exception ex )
			{
				EditorMessageBox.ShowWarning( ex.Message );
				return;
			}
		}

		void __0x132( object __0x168 )
		{
			var __0x23 = (string)__0x168;

			__0x10 = 0;

			try
			{
				string __0x24 = VirtualFileSystem.Directories.Project;

				FileInfo[] __0x25 = new DirectoryInfo( __0x24 ).GetFiles( "*.*", SearchOption.AllDirectories );

				long __0x26 = 0;
				foreach( var __0x114 in __0x25 )
					__0x26 += __0x114.Length;

				foreach( string __0x115 in Directory.GetDirectories( __0x24, "*", SearchOption.AllDirectories ) )
				{
					if( Directory.Exists( __0x115 ) )
						Directory.CreateDirectory( __0x115.Replace( __0x24, __0x11 ) );
				}

				long __0x27 = 0;
				foreach( var __0x116 in __0x25 )
				{
					if( File.Exists( __0x116.FullName ) )
						File.Copy( __0x116.FullName, __0x116.FullName.Replace( __0x24, __0x11 ), false );

					__0x27 += __0x116.Length;
					__0x10 = (int)( (double)__0x27 / (double)__0x26 * 100.0 );
					if( __0x10 > 100 )
						__0x10 = 100;

					if( !__0x8 )
						return;
				}

				__0x10 = 100;

				
				try
				{
					Win32Utility.ShellExecuteEx( null, __0x11 );
					
				}
				catch { }

				
				__0x8 = false;

				ScreenNotifications.Show( Translate( "The project was created successfully." ) );
			}
			catch( Exception ex )
			{
				EditorMessageBox.ShowWarning( ex.Message );
			}
		}

		private void __0x133( object __0x169, EventArgs __0x170 )
		{
			
			

			__0x8 = false;
		}

		

		bool __0x28;
		ProductBuildInstance __0x29;

		void __0x134( string __0x171 = "" )
		{
			__0x28 = false;

			
			string[] __0x30;
			try
			{
				__0x30 = VirtualDirectory.GetFiles( "", "*.product", SearchOption.AllDirectories );
			}
			catch
			{
				__0x30 = new string[ 0 ];
			}

			var __0x31 = new List<ContentBrowser.Item>();
			ContentBrowser.Item __0x32 = null;

			__0x108.Visible = false;

			foreach( var __0x117 in __0x30 )
			{
				string __0x33 = Path.GetFileName( __0x117 );

				var __0x34 = new ESet<string>();

				var __0x35 = ResourceManager.LoadResource<Component_Product>( __0x117 );
				if( __0x35 != null )
				{
					string __0x36 = __0x35.Platform.ToString();

					bool __0x37 = false;
					if( !__0x34.Contains( __0x36 ) )
					{
						var __0x38 = Properties.Resources.ResourceManager.GetObject( __0x36 + "_16", Properties.Resources.Culture ) as Image;
						var __0x39 = Properties.Resources.ResourceManager.GetObject( __0x36 + "_32", Properties.Resources.Culture ) as Image;
						if( __0x38 != null )
						{
							__0x92.AddImageKey( __0x36, __0x38, __0x39 );

							__0x34.Add( __0x36 );
							__0x37 = true;
						}
					}

					string __0x40 = __0x35.ProductName.Value;
					if( string.IsNullOrEmpty( __0x40 ) )
						__0x40 = "\'No name\'";

					var __0x41 = string.Format( "{0} - {1} - {2}", __0x40, __0x35.Platform, __0x117 );
					var __0x42 = new ContentBrowserItem_Virtual( __0x92, null, __0x41 );
					__0x42.Tag = __0x35;
					if( __0x37 )
						__0x42.imageKey = __0x36;

					if( !__0x150( __0x35.Platform ) )
					{
						__0x42.ShowDisabled = true;
						__0x108.Visible = true;
					}

					__0x31.Add( __0x42 );

					if( !string.IsNullOrEmpty( __0x171 ) && __0x171 == __0x117 )
						__0x32 = __0x42;
				}
			}

			CollectionUtility.MergeSort( __0x31, delegate ( ContentBrowser.Item __0x172, ContentBrowser.Item __0x173 )
			{
				var __0x43 = (Component_Product)__0x172.Tag;
				var __0x44 = (Component_Product)__0x173.Tag;

				var __0x45 = __0x43.SortOrderInEditor.Value;
				var __0x46 = __0x44.SortOrderInEditor.Value;

				if( __0x45 < __0x46 )
					return -1;
				if( __0x45 > __0x46 )
					return 1;

				return string.Compare( __0x43.Name, __0x44.Name );
			} );

			__0x92.SetData( __0x31, false );

			if( __0x32 != null )
				__0x92.SelectItems( new ContentBrowser.Item[] { __0x32 } );
			else if( __0x31.Count != 0 )
				__0x92.SelectItems( new ContentBrowser.Item[] { __0x31[ 0 ] } );
		}

		private void __0x135( object __0x174, EventArgs __0x175 )
		{
			if( EditorUtility.ShowOpenFileDialog( true, __0x91.Text, null, out string fileName ) )
				__0x91.Text = fileName;
		}

		void __0x136()
		{
			
			if( __0x29 != null && __0x29.State != ProductBuildInstance.StateEnum.Building )
			{
				var __0x47 = __0x29;
				__0x29 = null;

				if( __0x47.State == ProductBuildInstance.StateEnum.Error )
					EditorMessageBox.ShowWarning( __0x47.Error );
			}

			

			var __0x48 = __0x29 != null && __0x29.State == ProductBuildInstance.StateEnum.Building;

			__0x89.Enabled = __0x137();
			__0x93.Enabled = __0x89.Enabled && __0x138() != null && __0x138().SupportsBuildAndRun;
			__0x91.Enabled = !__0x48;
			__0x87.Enabled = !__0x48;
			__0x92.Enabled = !__0x48;
			if( __0x29 != null )
				__0x86.Value = (int)( __0x29.Progress * 100 );
			__0x86.Visible = __0x48;
			__0x85.Visible = __0x48;
		}

		bool __0x137()
		{
			var __0x49 = __0x138();
			if( __0x49 == null || !__0x150( __0x49.Platform ) )
				return false;
			string __0x50 = __0x91.Text.Trim();
			if( string.IsNullOrEmpty( __0x50 ) )
				return false;
			if( !Path.IsPathRooted( __0x50 ) )
				return false;
			if( __0x92.SelectedItems.Length == 0 )
				return false;
			if( __0x29 != null )
				return false;

			return true;
		}

		Component_Product __0x138()
		{
			if( __0x92.SelectedItems.Length != 0 )
				return (Component_Product)__0x92.SelectedItems[ 0 ].Tag;
			return null;
		}

		void __0x139( bool __0x176 )
		{
			string __0x51 = __0x91.Text.Trim();
			if( string.IsNullOrEmpty( __0x51 ) )
				return;

			
			if( Directory.Exists( __0x51 ) && !IOUtility.IsDirectoryEmpty( __0x51 ) )
			{
				var __0x52 = string.Format( Translate( "Destination folder \'{0}\' is not empty. Clear folder and continue?" ), __0x51 );
				if( EditorMessageBox.ShowQuestion( __0x52, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
					return;

				
				try
				{
					DirectoryInfo __0x53 = new DirectoryInfo( __0x51 );
					foreach( FileInfo __0x118 in __0x53.GetFiles() )
						__0x118.Delete();
					foreach( DirectoryInfo __0x119 in __0x53.GetDirectories() )
						__0x119.Delete( true );
				}
				catch( Exception e )
				{
					EditorMessageBox.ShowWarning( e.Message );
					return;
				}
			}

			
			try
			{
				if( !Directory.Exists( __0x51 ) )
					Directory.CreateDirectory( __0x51 );

				__0x29 = ProductBuildInstance.Start( __0x138(), __0x51, __0x176 );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			__0x136();
		}

		private void __0x140( object __0x177, EventArgs __0x178 )
		{
			__0x139( false );
		}

		private void __0x141( object __0x179, EventArgs __0x180 )
		{
			__0x139( true );
		}

		private void __0x142( object __0x181, EventArgs __0x182 )
		{
			if( __0x29 != null )
				__0x29.RequestCancel = true;
		}

		

		
		
		

		

		
		
		
		

		
		

		
		
		
		

		private void __0x143( object __0x183, EventArgs __0x184 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/" ) { UseShellExecute = true } );
		}

		string __0x144()
		{
			return Path.Combine( Environment.GetFolderPath( Environment.SpecialFolder.MyDocuments ), "NeoAxis" );
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x54 = base.CreateParams;
				__0x54.ExStyle |= 0x02000000;
				return __0x54;
			}
		}

		public static bool BackstageVisible
		{
			get { return __0x1; }
		}

		

		bool __0x145( string __0x185 )
		{
			try
			{
				var __0x55 = new System.Net.Mail.MailAddress( __0x185 );
				return __0x55.Address == __0x185;
			}
			catch
			{
				return false;
			}
		}

		void __0x146()
		{
			__0x98.Text = "";

			
			

			
		}

		bool __0x56 = true;

		void __0x147()
		{
			

			if( __0x56 )
			{
				if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
					__0x106.Text = email;

				__0x56 = false;
			}

			{
				string __0x57;
				string __0x58 = "";
				string __0x59 = "";
				if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
				{
					__0x57 = email;
					if( LoginUtility.GetRequestedFullLicenseInfo( out var license, out _, out __0x58, out var error2 ) )
					{
						if( !string.IsNullOrEmpty( license ) )
							__0x57 += " - " + license + " license";
						
						
						__0x59 = error2;
					}
					else
						__0x57 += " - Not registered";
				}
				else
					__0x57 = "Not registered";

				__0x100.Text = __0x57;
				__0x98.Text = __0x59;

				
				

				
				
				

				

				
				
				
				
				
				

				
				
				
				
				
				
				
			}

			{
				var __0x60 = __0x106.Text.Trim().ToLower();
				var __0x61 = __0x103.Text;
				__0x102.Enabled = !string.IsNullOrEmpty( __0x60 ) && !string.IsNullOrEmpty( __0x61 );
			}
		}

		private void __0x148( object __0x186, EventArgs __0x187 )
		{
			var __0x62 = __0x106.Text.Trim().ToLower();
			var __0x63 = __0x103.Text;

			if( string.IsNullOrEmpty( __0x62 ) || string.IsNullOrEmpty( __0x63 ) )
				return;

			if( !__0x145( __0x62 ) )
			{
				EditorMessageBox.ShowWarning( "Invalid email." );
				return;
			}

			LoginUtility.SetCurrentLicense( __0x106.Text, __0x103.Text );
		}

		private void __0x149( object __0x188, EventArgs __0x189 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/user" ) { UseShellExecute = true } );
			
		}

		bool __0x150( SystemSettings.Platform __0x190 )
		{
			var __0x64 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Platforms", __0x190.ToString() );
			return Directory.Exists( __0x64 );
		}

		private void __0x151( object __0x191, EventArgs __0x192 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/licensing#donate" ) { UseShellExecute = true } );
			
		}

		private void __0x152( object __0x193, EventArgs __0x194 )
		{
			Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/licensing" ) { UseShellExecute = true } );
		}

		
		
		
		

		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class BackstageMenu
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x65 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose(bool disposing)
		{
			if (disposing && (__0x65 != null))
			{
				__0x65.Dispose();
			}
			base.Dispose(disposing);
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x153()
		{
			this.__0x65 = new System.ComponentModel.Container();
			this.__0x68 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x80 = new System.Windows.Forms.Timer(this.__0x65);
			this.__0x66 = new NeoAxis.Editor.BackstageMenu.MyKryptonNavigator();
			this.kryptonPageInfo = new ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x81 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x82 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x83 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x84 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x70 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageNew = new ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x79 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x78 = new NeoAxis.Editor.EngineProgressBar();
			this.__0x77 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x76 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x75 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x71 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x72 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x73 = new NeoAxis.Editor.ContentBrowser();
			this.__0x69 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageBuild = new ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x109 = new ComponentFactory.Krypton.Toolkit.KryptonLinkLabel();
			this.__0x108 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x85 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x86 = new NeoAxis.Editor.EngineProgressBar();
			this.__0x87 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x88 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x93 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x89 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x90 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x91 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x92 = new NeoAxis.Editor.ContentBrowser();
			this.__0x74 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageLogin = new ComponentFactory.Krypton.Navigator.KryptonPage();
			
			
			
			
			
			
			
			
			this.__0x110 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x111 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x98 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x99 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x100 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x101 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x102 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x103 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x104 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x105 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x106 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x107 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageAbout = new ComponentFactory.Krypton.Navigator.KryptonPage();
			this.__0x97 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x96 = new ComponentFactory.Krypton.Toolkit.KryptonLinkLabel();
			this.__0x94 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x95 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonPageExit = new ComponentFactory.Krypton.Navigator.BackstagePage();
			this.__0x67 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x66)).BeginInit();
			this.__0x66.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageInfo)).BeginInit();
			this.kryptonPageInfo.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageNew)).BeginInit();
			this.kryptonPageNew.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageBuild)).BeginInit();
			this.kryptonPageBuild.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageLogin)).BeginInit();
			this.kryptonPageLogin.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageAbout)).BeginInit();
			this.kryptonPageAbout.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageExit)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x68.ButtonStyle = ComponentFactory.Krypton.Toolkit.ButtonStyle.Custom1;
			this.__0x68.Location = new System.Drawing.Point(40, 2);
			this.__0x68.Name = "kryptonButtonBack";
			this.__0x68.OverrideDefault.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x68.Size = new System.Drawing.Size(60, 60);
			this.__0x68.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x68.StateCommon.Back.ColorStyle = ComponentFactory.Krypton.Toolkit.PaletteColorStyle.Solid;
			this.__0x68.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x68.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x68.StateTracking.Content.Image.Effect = ComponentFactory.Krypton.Toolkit.PaletteImageEffect.Dark;
			this.__0x68.TabIndex = 1;
			
			this.__0x68.Values.Text = "";
			this.__0x68.Click += new System.EventHandler(this.__0x123);
			
			
			
			this.__0x80.Tick += new System.EventHandler(this.__0x124);
			
			
			
			this.__0x66.AllowPageReorder = false;
			this.__0x66.AllowTabFocus = false;
			this.__0x66.Bar.BarFirstItemInset = 65;
			this.__0x66.Bar.BarMinimumHeight = 160;
			this.__0x66.Bar.BarOrientation = ComponentFactory.Krypton.Toolkit.VisualOrientation.Left;
			this.__0x66.Bar.ItemMinimumSize = new System.Drawing.Size(160, 50);
			this.__0x66.Bar.ItemOrientation = ComponentFactory.Krypton.Toolkit.ButtonOrientation.FixedTop;
			this.__0x66.Bar.TabBorderStyle = ComponentFactory.Krypton.Toolkit.TabBorderStyle.SquareEqualSmall;
			this.__0x66.Bar.TabStyle = ComponentFactory.Krypton.Toolkit.TabStyle.LowProfile;
			this.__0x66.Button.ButtonDisplayLogic = ComponentFactory.Krypton.Navigator.ButtonDisplayLogic.None;
			this.__0x66.Button.CloseButtonAction = ComponentFactory.Krypton.Navigator.CloseButtonAction.None;
			this.__0x66.Button.CloseButtonDisplay = ComponentFactory.Krypton.Navigator.ButtonDisplay.Hide;
			this.__0x66.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x66.Location = new System.Drawing.Point(0, 0);
			this.__0x66.Name = "kryptonNavigator1";
			this.__0x66.Pages.AddRange(new ComponentFactory.Krypton.Navigator.KryptonPage[] {
            this.kryptonPageInfo,
            this.kryptonPageNew,
            this.kryptonPageBuild,
            this.kryptonPageLogin,
            this.kryptonPageAbout,
            this.kryptonPageExit});
			this.__0x66.SelectedIndex = 3;
			this.__0x66.Size = new System.Drawing.Size(1507, 791);
			this.__0x66.StateCommon.Panel.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.__0x66.StateCommon.Tab.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x66.StateCommon.Tab.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x66.StateCommon.Tab.Content.Padding = new System.Windows.Forms.Padding(20, -1, -1, -1);
			this.__0x66.StateCommon.Tab.Content.ShortText.Color1 = System.Drawing.Color.White;
			this.__0x66.StateCommon.Tab.Content.ShortText.TextH = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Near;
			this.__0x66.StatePressed.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(26)))), ((int)(((byte)(72)))), ((int)(((byte)(138)))));
			this.__0x66.StateSelected.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(62)))), ((int)(((byte)(107)))), ((int)(((byte)(174)))));
			this.__0x66.StateTracking.Tab.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(26)))), ((int)(((byte)(72)))), ((int)(((byte)(138)))));
			this.__0x66.TabIndex = 0;
			this.__0x66.TabClicked += new System.EventHandler<ComponentFactory.Krypton.Navigator.KryptonPageEventArgs>(this.__0x122);
			
			
			
			this.kryptonPageInfo.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageInfo.Controls.Add(this.__0x81);
			this.kryptonPageInfo.Controls.Add(this.__0x82);
			this.kryptonPageInfo.Controls.Add(this.__0x83);
			this.kryptonPageInfo.Controls.Add(this.__0x84);
			this.kryptonPageInfo.Controls.Add(this.__0x70);
			this.kryptonPageInfo.Flags = 65534;
			this.kryptonPageInfo.LastVisibleSet = true;
			this.kryptonPageInfo.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageInfo.Name = "kryptonPageInfo";
			this.kryptonPageInfo.Size = new System.Drawing.Size(1337, 823);
			this.kryptonPageInfo.StateCommon.BorderEdge.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Separator.Border.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Separator.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.kryptonPageInfo.StateCommon.Tab.Border.Color1 = System.Drawing.Color.Red;
			this.kryptonPageInfo.StateCommon.Tab.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.kryptonPageInfo.Text = "Info";
			this.kryptonPageInfo.ToolTipTitle = "Page ToolTip";
			this.kryptonPageInfo.UniqueName = "6F5BFFBBB1714484488850528E4A2EF5";
			
			
			
			this.__0x81.Location = new System.Drawing.Point(192, 160);
			this.__0x81.Name = "kryptonTextBoxInfoLocation";
			this.__0x81.ReadOnly = true;
			this.__0x81.Size = new System.Drawing.Size(602, 22);
			this.__0x81.TabIndex = 1;
			this.__0x81.WordWrap = false;
			
			
			
			this.__0x82.Location = new System.Drawing.Point(40, 162);
			this.__0x82.Name = "kryptonLabel8";
			this.__0x82.Size = new System.Drawing.Size(73, 20);
			this.__0x82.TabIndex = 7;
			this.__0x82.Values.Text = "Location:";
			
			
			
			this.__0x83.Location = new System.Drawing.Point(40, 127);
			this.__0x83.Name = "kryptonLabel7";
			this.__0x83.Size = new System.Drawing.Size(56, 20);
			this.__0x83.TabIndex = 6;
			this.__0x83.Values.Text = "Name:";
			
			
			
			this.__0x84.Location = new System.Drawing.Point(192, 127);
			this.__0x84.Name = "kryptonTextBoxInfoName";
			this.__0x84.ReadOnly = true;
			this.__0x84.Size = new System.Drawing.Size(602, 22);
			this.__0x84.TabIndex = 0;
			this.__0x84.WordWrap = false;
			
			
			
			this.__0x70.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x70.Location = new System.Drawing.Point(31, 64);
			this.__0x70.Name = "kryptonLabel3";
			this.__0x70.Size = new System.Drawing.Size(147, 34);
			this.__0x70.TabIndex = 3;
			this.__0x70.Values.Text = "Project info";
			
			
			
			this.kryptonPageNew.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageNew.Controls.Add(this.__0x79);
			this.kryptonPageNew.Controls.Add(this.__0x78);
			this.kryptonPageNew.Controls.Add(this.__0x77);
			this.kryptonPageNew.Controls.Add(this.__0x76);
			this.kryptonPageNew.Controls.Add(this.__0x75);
			this.kryptonPageNew.Controls.Add(this.__0x71);
			this.kryptonPageNew.Controls.Add(this.__0x72);
			this.kryptonPageNew.Controls.Add(this.__0x73);
			this.kryptonPageNew.Controls.Add(this.__0x69);
			this.kryptonPageNew.Flags = 65534;
			this.kryptonPageNew.LastVisibleSet = true;
			this.kryptonPageNew.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageNew.Name = "kryptonPageNew";
			this.kryptonPageNew.Size = new System.Drawing.Size(1345, 823);
			this.kryptonPageNew.Text = "New";
			this.kryptonPageNew.ToolTipTitle = "Page ToolTip";
			this.kryptonPageNew.UniqueName = "9A208880D6A24E29B3A6B24AA17F1383";
			
			
			
			this.__0x79.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x79.Location = new System.Drawing.Point(428, 488);
			this.__0x79.Name = "kryptonButtonNewCancel";
			this.__0x79.Size = new System.Drawing.Size(117, 32);
			this.__0x79.TabIndex = 10;
			this.__0x79.Values.Text = "Cancel";
			this.__0x79.Visible = false;
			this.__0x79.Click += new System.EventHandler(this.__0x133);
			
			
			
			this.__0x78.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x78.Location = new System.Drawing.Point(171, 488);
			this.__0x78.Name = "progressBarNew";
			this.__0x78.Size = new System.Drawing.Size(247, 32);
			this.__0x78.TabIndex = 9;
			this.__0x78.Visible = false;
			
			
			
			this.__0x77.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x77.Location = new System.Drawing.Point(1148, 149);
			this.__0x77.Name = "kryptonButtonNewBrowse";
			this.__0x77.Size = new System.Drawing.Size(117, 32);
			this.__0x77.TabIndex = 1;
			this.__0x77.Values.Text = "Browse...";
			this.__0x77.Click += new System.EventHandler(this.__0x128);
			
			
			
			this.__0x76.Location = new System.Drawing.Point(40, 194);
			this.__0x76.Name = "kryptonLabel6";
			this.__0x76.Size = new System.Drawing.Size(78, 20);
			this.__0x76.TabIndex = 8;
			this.__0x76.Values.Text = "Template:";
			
			
			
			this.__0x75.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x75.Location = new System.Drawing.Point(44, 488);
			this.__0x75.Name = "kryptonButtonNewCreate";
			this.__0x75.Size = new System.Drawing.Size(117, 32);
			this.__0x75.TabIndex = 3;
			this.__0x75.Values.Text = "Create";
			this.__0x75.Click += new System.EventHandler(this.__0x131);
			
			
			
			this.__0x71.Location = new System.Drawing.Point(41, 127);
			this.__0x71.Name = "kryptonLabel4";
			this.__0x71.Size = new System.Drawing.Size(73, 20);
			this.__0x71.TabIndex = 5;
			this.__0x71.Values.Text = "Location:";
			
			
			
			this.__0x72.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x72.Location = new System.Drawing.Point(45, 154);
			this.__0x72.Name = "kryptonTextBoxNewFolder";
			this.__0x72.Size = new System.Drawing.Size(1097, 23);
			this.__0x72.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x72.TabIndex = 0;
			this.__0x72.Text = "C:\\_Temp";
			this.__0x72.WordWrap = false;
			
			
			
			this.__0x73.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x73.CanSelectObjectSettings = false;
			this.__0x73.FilteringMode = null;
			this.__0x73.ListViewModeOverride = null;
			this.__0x73.Location = new System.Drawing.Point(44, 221);
			this.__0x73.Margin = new System.Windows.Forms.Padding(4);
			this.__0x73.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x73.Name = "objectsBrowserNew";
			this.__0x73.ReadOnlyHierarchy = false;
			this.__0x73.ShowToolBar = false;
			this.__0x73.Size = new System.Drawing.Size(1221, 251);
			this.__0x73.TabIndex = 2;
			this.__0x73.ThisIsSettingsWindow = false;
			
			
			
			this.__0x69.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x69.Location = new System.Drawing.Point(31, 64);
			this.__0x69.Name = "kryptonLabel2";
			this.__0x69.Size = new System.Drawing.Size(151, 34);
			this.__0x69.TabIndex = 2;
			this.__0x69.Values.Text = "New project";
			
			
			
			this.kryptonPageBuild.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageBuild.Controls.Add(this.__0x109);
			this.kryptonPageBuild.Controls.Add(this.__0x108);
			this.kryptonPageBuild.Controls.Add(this.__0x85);
			this.kryptonPageBuild.Controls.Add(this.__0x86);
			this.kryptonPageBuild.Controls.Add(this.__0x87);
			this.kryptonPageBuild.Controls.Add(this.__0x88);
			this.kryptonPageBuild.Controls.Add(this.__0x93);
			this.kryptonPageBuild.Controls.Add(this.__0x89);
			this.kryptonPageBuild.Controls.Add(this.__0x90);
			this.kryptonPageBuild.Controls.Add(this.__0x91);
			this.kryptonPageBuild.Controls.Add(this.__0x92);
			this.kryptonPageBuild.Controls.Add(this.__0x74);
			this.kryptonPageBuild.Flags = 65534;
			this.kryptonPageBuild.LastVisibleSet = true;
			this.kryptonPageBuild.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageBuild.Name = "kryptonPageBuild";
			this.kryptonPageBuild.Size = new System.Drawing.Size(1345, 789);
			this.kryptonPageBuild.Text = "Build";
			this.kryptonPageBuild.ToolTipTitle = "Page ToolTip";
			this.kryptonPageBuild.UniqueName = "3579A0DBAE6F4DD2C0B5DCB61AEC1F49";
			
			
			
			this.__0x109.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x109.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.Custom1;
			this.__0x109.Location = new System.Drawing.Point(54, 548);
			this.__0x109.Name = "kryptonLinkLabel2";
			this.__0x109.OverrideFocus.DrawFocus = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x109.Size = new System.Drawing.Size(419, 20);
			this.__0x109.StateCommon.LongText.Color1 = System.Drawing.Color.Red;
			this.__0x109.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x109.StateNormal.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x109.StateNormal.ShortText.Color2 = System.Drawing.Color.Red;
			this.__0x109.TabIndex = 30;
			this.__0x109.Values.Text = "Install \'Platform Tools\' from the Stores to unlock all platforms.";
			this.__0x109.Visible = false;
			
			
			
			this.__0x108.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x108.Location = new System.Drawing.Point(40, 508);
			this.__0x108.Name = "kryptonLabelInstallPlatformTools";
			this.__0x108.Size = new System.Drawing.Size(499, 24);
			this.__0x108.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x108.StateCommon.ShortText.Font = new System.Drawing.Font("Tahoma", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x108.TabIndex = 29;
			this.__0x108.Values.Text = "Install \'Platform Tools\' from the Stores to unlock all platforms.";
			
			
			
			this.__0x85.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x85.Location = new System.Drawing.Point(554, 454);
			this.__0x85.Name = "kryptonButtonBuildCancel";
			this.__0x85.Size = new System.Drawing.Size(117, 32);
			this.__0x85.TabIndex = 6;
			this.__0x85.Values.Text = "Cancel";
			this.__0x85.Visible = false;
			this.__0x85.Click += new System.EventHandler(this.__0x142);
			
			
			
			this.__0x86.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x86.Margin = new System.Windows.Forms.Padding( 3, 4, 3, 4 );
			this.__0x86.Location = new System.Drawing.Point(297, 454);
			this.__0x86.Name = "progressBarBuild";
			this.__0x86.Size = new System.Drawing.Size(247, 32);
			this.__0x86.TabIndex = 5;
			this.__0x86.Visible = false;
			
			
			
			this.__0x87.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x87.Location = new System.Drawing.Point(1148, 149);
			this.__0x87.Name = "kryptonButtonPackageBrowse";
			this.__0x87.Size = new System.Drawing.Size(117, 32);
			this.__0x87.TabIndex = 2;
			this.__0x87.Values.Text = "Browse...";
			this.__0x87.Click += new System.EventHandler(this.__0x135);
			
			
			
			this.__0x88.Location = new System.Drawing.Point(40, 194);
			this.__0x88.Name = "kryptonLabel9";
			this.__0x88.Size = new System.Drawing.Size(143, 20);
			this.__0x88.TabIndex = 16;
			this.__0x88.Values.Text = "Product settings file:";
			
			
			
			this.__0x93.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x93.Location = new System.Drawing.Point(170, 454);
			this.__0x93.Name = "kryptonButtonPackageCreateAndRun";
			this.__0x93.Size = new System.Drawing.Size(117, 32);
			this.__0x93.TabIndex = 4;
			this.__0x93.Values.Text = "Build and Run";
			this.__0x93.Click += new System.EventHandler(this.__0x141);
			
			
			
			this.__0x89.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x89.Location = new System.Drawing.Point(44, 454);
			this.__0x89.Name = "kryptonButtonPackageCreate";
			this.__0x89.Size = new System.Drawing.Size(117, 32);
			this.__0x89.TabIndex = 3;
			this.__0x89.Values.Text = "Build";
			this.__0x89.Click += new System.EventHandler(this.__0x140);
			
			
			
			this.__0x90.Location = new System.Drawing.Point(40, 127);
			this.__0x90.Name = "kryptonLabel10";
			this.__0x90.Size = new System.Drawing.Size(130, 20);
			this.__0x90.TabIndex = 15;
			this.__0x90.Values.Text = "Destination folder:";
			
			
			
			this.__0x91.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x91.Location = new System.Drawing.Point(45, 154);
			this.__0x91.Name = "kryptonTextBoxPackageDestinationFolder";
			this.__0x91.Size = new System.Drawing.Size(1097, 23);
			this.__0x91.TabIndex = 1;
			this.__0x91.Text = "C:\\_Temp";
			this.__0x91.WordWrap = false;
			
			
			
			this.__0x92.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x92.CanSelectObjectSettings = false;
			this.__0x92.FilteringMode = null;
			this.__0x92.ListViewModeOverride = null;
			this.__0x92.Location = new System.Drawing.Point(44, 221);
			this.__0x92.Margin = new System.Windows.Forms.Padding(4);
			this.__0x92.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x92.Name = "contentBrowserPackage";
			this.__0x92.ReadOnlyHierarchy = false;
			this.__0x92.ShowToolBar = false;
			this.__0x92.Size = new System.Drawing.Size(1221, 217);
			this.__0x92.TabIndex = 0;
			this.__0x92.ThisIsSettingsWindow = false;
			
			
			
			this.__0x74.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x74.Location = new System.Drawing.Point(31, 64);
			this.__0x74.Name = "kryptonLabel5";
			this.__0x74.Size = new System.Drawing.Size(169, 34);
			this.__0x74.TabIndex = 3;
			this.__0x74.Values.Text = "Build product";
			
			
			
			this.kryptonPageLogin.AutoHiddenSlideSize = new System.Drawing.Size(250, 250);
			
			
			
			
			
			
			
			
			this.kryptonPageLogin.Controls.Add( this.__0x110 );
			this.kryptonPageLogin.Controls.Add(this.__0x111);
			this.kryptonPageLogin.Controls.Add(this.__0x98);
			this.kryptonPageLogin.Controls.Add(this.__0x99);
			this.kryptonPageLogin.Controls.Add(this.__0x100);
			this.kryptonPageLogin.Controls.Add(this.__0x101);
			this.kryptonPageLogin.Controls.Add(this.__0x102);
			this.kryptonPageLogin.Controls.Add(this.__0x103);
			this.kryptonPageLogin.Controls.Add(this.__0x104);
			this.kryptonPageLogin.Controls.Add(this.__0x105);
			this.kryptonPageLogin.Controls.Add(this.__0x106);
			this.kryptonPageLogin.Controls.Add(this.__0x107);
			this.kryptonPageLogin.Flags = 65534;
			this.kryptonPageLogin.LastVisibleSet = true;
			this.kryptonPageLogin.MinimumSize = new System.Drawing.Size(62, 62);
			this.kryptonPageLogin.Name = "kryptonPageLogin";
			this.kryptonPageLogin.Size = new System.Drawing.Size(1345, 789);
			this.kryptonPageLogin.Text = "Login";
			this.kryptonPageLogin.ToolTipTitle = "Login";
			this.kryptonPageLogin.UniqueName = "2271C4BE75C64D08AC847F8523BAEDF0";
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
   
   
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			this.__0x110.Location = new System.Drawing.Point( 44, 393 );
			this.__0x110.Name = "kryptonButtonSubscribeToPro";
			this.__0x110.Size = new System.Drawing.Size( 117, 32 );
			this.__0x110.TabIndex = 32;
			this.__0x110.Values.Text = "Subscribe Pro";
			this.__0x110.Click += new System.EventHandler( this.__0x152 );

			
			
			
			this.__0x111.Location = new System.Drawing.Point(40, 337);
			this.__0x111.Name = "kryptonLabelSupportNeoAxis";
			this.__0x111.Size = new System.Drawing.Size(416, 27);
			this.__0x111.StateCommon.ShortText.Font = new System.Drawing.Font("Tahoma", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x111.TabIndex = 30;
			this.__0x111.Values.Text = "Get more features";
			
			
			
			this.__0x98.Location = new System.Drawing.Point(182, 223);
			this.__0x98.Name = "kryptonLabelLoginError";
			this.__0x98.Size = new System.Drawing.Size(47, 20);
			this.__0x98.StateCommon.ShortText.Color1 = System.Drawing.Color.Red;
			this.__0x98.TabIndex = 28;
			this.__0x98.Values.Text = "Error";
			
			
			
			this.__0x99.Location = new System.Drawing.Point(40, 127);
			this.__0x99.Name = "kryptonLabel15";
			this.__0x99.Size = new System.Drawing.Size(88, 20);
			this.__0x99.TabIndex = 27;
			this.__0x99.Values.Text = "Registered:";
			
			
			
			this.__0x100.Location = new System.Drawing.Point(179, 127);
			this.__0x100.Name = "kryptonLabelLicense";
			this.__0x100.Size = new System.Drawing.Size(109, 20);
			this.__0x100.TabIndex = 26;
			this.__0x100.Values.Text = "Not registered.";
			
			
			
			this.__0x101.Location = new System.Drawing.Point(170, 255);
			this.__0x101.Name = "kryptonButtonRegister";
			this.__0x101.Size = new System.Drawing.Size(117, 32);
			this.__0x101.TabIndex = 22;
			this.__0x101.Values.Text = "Register";
			this.__0x101.Click += new System.EventHandler(this.__0x149);
			
			
			
			this.__0x102.Location = new System.Drawing.Point(44, 255);
			this.__0x102.Name = "kryptonButtonLogin";
			this.__0x102.Size = new System.Drawing.Size(117, 32);
			this.__0x102.TabIndex = 21;
			this.__0x102.Values.Text = "Login";
			this.__0x102.Click += new System.EventHandler(this.__0x148);
			
			
			
			this.__0x103.Location = new System.Drawing.Point(182, 196);
			this.__0x103.Name = "kryptonTextBoxLoginPassword";
			this.__0x103.PasswordChar = '*';
			this.__0x103.Size = new System.Drawing.Size(591, 21);
			this.__0x103.TabIndex = 20;
			this.__0x103.WordWrap = false;
			
			
			
			this.__0x104.Location = new System.Drawing.Point(40, 197);
			this.__0x104.Name = "kryptonLabel17";
			this.__0x104.Size = new System.Drawing.Size(80, 20);
			this.__0x104.TabIndex = 25;
			this.__0x104.Values.Text = "Password:";
			
			
			
			this.__0x105.Location = new System.Drawing.Point(40, 163);
			this.__0x105.Name = "kryptonLabel18";
			this.__0x105.Size = new System.Drawing.Size(53, 20);
			this.__0x105.TabIndex = 24;
			this.__0x105.Values.Text = "Email:";
			
			
			
			this.__0x106.Location = new System.Drawing.Point(182, 163);
			this.__0x106.Name = "kryptonTextBoxLoginEmail";
			this.__0x106.Size = new System.Drawing.Size(591, 21);
			this.__0x106.TabIndex = 19;
			this.__0x106.WordWrap = false;
			
			
			
			this.__0x107.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x107.Location = new System.Drawing.Point(31, 64);
			this.__0x107.Name = "kryptonLabel19";
			this.__0x107.Size = new System.Drawing.Size(82, 34);
			this.__0x107.TabIndex = 23;
			this.__0x107.Values.Text = "Login";
			
			
			
			this.kryptonPageAbout.AutoHiddenSlideSize = new System.Drawing.Size(250, 250);
			this.kryptonPageAbout.Controls.Add(this.__0x97);
			this.kryptonPageAbout.Controls.Add(this.__0x96);
			this.kryptonPageAbout.Controls.Add(this.__0x94);
			this.kryptonPageAbout.Controls.Add(this.__0x95);
			this.kryptonPageAbout.Flags = 65534;
			this.kryptonPageAbout.LastVisibleSet = true;
			this.kryptonPageAbout.MinimumSize = new System.Drawing.Size(62, 62);
			this.kryptonPageAbout.Name = "kryptonPageAbout";
			this.kryptonPageAbout.Size = new System.Drawing.Size(1345, 823);
			this.kryptonPageAbout.Text = "About";
			this.kryptonPageAbout.TextTitle = "About";
			this.kryptonPageAbout.ToolTipTitle = "Page ToolTip";
			this.kryptonPageAbout.UniqueName = "01D9BC02E960446C719C418C20B28003";
			
			
			
			this.__0x97.Location = new System.Drawing.Point(40, 127);
			this.__0x97.Name = "kryptonLabelEngineVersion";
			this.__0x97.Size = new System.Drawing.Size(63, 20);
			this.__0x97.TabIndex = 5;
			this.__0x97.Values.Text = "X.X.X.X";
			
			
			
			this.__0x96.Location = new System.Drawing.Point(40, 248);
			this.__0x96.Name = "kryptonLinkLabel1";
			this.__0x96.OverrideFocus.DrawFocus = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x96.Size = new System.Drawing.Size(124, 20);
			this.__0x96.TabIndex = 1;
			this.__0x96.Values.Text = "www.neoaxis.com";
			
			
			
			this.__0x94.Location = new System.Drawing.Point(40, 164);
			this.__0x94.Name = "kryptonLabel13";
			this.__0x94.Size = new System.Drawing.Size(237, 71);
			this.__0x94.TabIndex = 0;
			this.__0x94.Values.Text = "Developer:\r\n   NeoAxis Group Ltd.\r\n   8 Copthall, Roseau Valley, 00152\r\n   Common" +
    "wealth of Dominica";
			
			
			
			this.__0x95.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x95.Location = new System.Drawing.Point(31, 64);
			this.__0x95.Name = "kryptonLabel12";
			this.__0x95.Size = new System.Drawing.Size(405, 34);
			this.__0x95.TabIndex = 4;
			this.__0x95.Values.Text = "NeoAxis Engine (www.neoaxis.com)";
			
			
			
			this.kryptonPageExit.AutoHiddenSlideSize = new System.Drawing.Size(200, 200);
			this.kryptonPageExit.ButtonClickOnDownDesigner = false;
			this.kryptonPageExit.Flags = 65534;
			this.kryptonPageExit.LastVisibleSet = true;
			this.kryptonPageExit.MinimumSize = new System.Drawing.Size(50, 50);
			this.kryptonPageExit.Name = "kryptonPageExit";
			this.kryptonPageExit.Size = new System.Drawing.Size(1330, 906);
			this.kryptonPageExit.Text = "Exit";
			this.kryptonPageExit.ToolTipTitle = "Page ToolTip";
			this.kryptonPageExit.UniqueName = "FBA74E601B3D420C8F81CD606B9DB6E0";
			
			
			
			this.__0x67.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.TitlePanel;
			this.__0x67.Location = new System.Drawing.Point(31, 64);
			this.__0x67.Name = "kryptonLabel1";
			this.__0x67.Size = new System.Drawing.Size(78, 34);
			this.__0x67.TabIndex = 1;
			this.__0x67.Values.Text = "Open";
			
			
			
			this.Controls.Add(this.__0x68);
			this.Controls.Add(this.__0x66);
			this.Name = "BackstageMenu";
			this.Size = new System.Drawing.Size(1507, 791);
			this.Load += new System.EventHandler(this.__0x120);
			this.VisibleChanged += new System.EventHandler(this.__0x121);
			((System.ComponentModel.ISupportInitialize)(this.__0x66)).EndInit();
			this.__0x66.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageInfo)).EndInit();
			this.kryptonPageInfo.ResumeLayout(false);
			this.kryptonPageInfo.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageNew)).EndInit();
			this.kryptonPageNew.ResumeLayout(false);
			this.kryptonPageNew.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageBuild)).EndInit();
			this.kryptonPageBuild.ResumeLayout(false);
			this.kryptonPageBuild.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageLogin)).EndInit();
			this.kryptonPageLogin.ResumeLayout(false);
			this.kryptonPageLogin.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageAbout)).EndInit();
			this.kryptonPageAbout.ResumeLayout(false);
			this.kryptonPageAbout.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonPageExit)).EndInit();
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Editor.BackstageMenu.MyKryptonNavigator __0x66;
		public ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageInfo;
		public ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageNew;
		public ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageExit;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x67;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x68;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x69;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x70;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x71;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x72;
		private ContentBrowser __0x73;
		public ComponentFactory.Krypton.Navigator.BackstagePage kryptonPageBuild;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x74;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x75;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x76;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x77;
		private NeoAxis.Editor.EngineProgressBar __0x78;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x79;
		private System.Windows.Forms.Timer __0x80;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x81;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x82;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x83;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x84;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x85;
		private NeoAxis.Editor.EngineProgressBar __0x86;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x87;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x88;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x89;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x90;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x91;
		private ContentBrowser __0x92;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x93;
		public ComponentFactory.Krypton.Navigator.KryptonPage kryptonPageAbout;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x94;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x95;
		private ComponentFactory.Krypton.Toolkit.KryptonLinkLabel __0x96;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x97;
		public ComponentFactory.Krypton.Navigator.KryptonPage kryptonPageLogin;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x98;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x99;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x100;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x101;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x102;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x103;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x104;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x105;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x106;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x107;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x108;
		private ComponentFactory.Krypton.Toolkit.KryptonLinkLabel __0x109;
		
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x110;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x111;
		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Implements creating NeoAxis Baking files.
	/// </summary>
	static class BakingFile
	{
		public static bool Create( IList<string> paths, bool compressArchive, string destinationFileName, out string error )
		{
			error = "";

			try
			{
				var __0x195 = Path.GetDirectoryName( destinationFileName );
				var __0x196 = compressArchive ? CompressionLevel.Optimal : CompressionLevel.NoCompression;

				using( var __0x197 = ZipFile.Open( destinationFileName, ZipArchiveMode.Create ) )
				{
					foreach( var __0x208 in paths )
					{
						if( Directory.Exists( __0x208 ) )
						{
							foreach( var __0x209 in Directory.GetFiles( __0x208, "*.*", SearchOption.AllDirectories ) )
							{
								
								var __0x198 = File.ReadAllBytes( __0x209 );

								
								for( int __0x199 = 0; __0x199 < __0x198.Length; __0x199++ )
									__0x198[ __0x199 ] = (byte)~__0x198[ __0x199 ];

								
								var __0x200 = __0x209.Substring( __0x195.Length + 1 );
								var __0x201 = __0x197.CreateEntry( __0x200, __0x196 );
								using( var __0x202 = __0x201.Open() )
									__0x202.Write( __0x198, 0, __0x198.Length );
							}
						}
						else if( File.Exists( __0x208 ) )
						{
							
							var __0x203 = File.ReadAllBytes( __0x208 );

							
							for( int __0x204 = 0; __0x204 < __0x203.Length; __0x204++ )
								__0x203[ __0x204 ] = (byte)~__0x203[ __0x204 ];

							
							var __0x205 = __0x208.Substring( __0x195.Length + 1 );
							var __0x206 = __0x197.CreateEntry( __0x205, __0x196 );
							using( var __0x207 = __0x206.Open() )
								__0x207.Write( __0x203, 0, __0x203.Length );
						}
					}
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return false;
			}

			return true;
		}
	}
}




namespace NeoAxis.Editor
{
	[Flags]
	
	
	public enum BorderSides
	{
		None = 0,
		Top = 1,
		Bottom = 2,
		Left = 4,
		Right = 8,
		All = Top | Bottom | Left | Right
	}

	
	
	
	

	/// <summary>
	/// Helper container control to draw separate borders.
	/// </summary>
	public class BordersContainer : ContainerControl
	{
		private BorderSides __0x210 = BorderSides.All;
		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides BorderSides
		{
			get
			{
				return __0x210;
			}
			set
			{
				if( __0x210 != value )
				{
					__0x210 = value;
					this.Invalidate();
				}
			}
		}

		Color __0x211;
		[Category( "Appearance" )]
		public Color BorderColor
		{
			get { return __0x211; }
			set { __0x211 = value; }
		}

		public BordersContainer()
		{
			IPalette __0x212 = KryptonManager.CurrentGlobalPalette;
			__0x211 = __0x212.GetBorderColor1( PaletteBorderStyle.ControlClient, PaletteState.Normal );
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			if( BorderSides == BorderSides.None )
				return;

			if( BorderSides == BorderSides.All )
			{
#if !ANDROID
				using( var __0x213 = new Pen( BorderColor ) )
					e.Graphics.DrawRectangle( __0x213, new System.Drawing.Rectangle( 0, 0, Width - 1, Height - 1 ) );
#endif 
			}
			else
			{
				ControlPaint.DrawBorder( e.Graphics, Bounds,
					BorderColor, 1, ( BorderSides & BorderSides.Left ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Top ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Right ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None,
					BorderColor, 1, ( BorderSides & BorderSides.Bottom ) != 0 ? ButtonBorderStyle.Solid : ButtonBorderStyle.None );
			}
		}

		protected override void OnControlAdded( ControlEventArgs e )
		{
			base.OnControlAdded( e );
			e.Control.Anchor = AnchorStyles.Bottom | AnchorStyles.Left | AnchorStyles.Top | AnchorStyles.Right;
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			base.OnSizeChanged( e );

			if( Controls.Count == 0 )
				return;

			var __0x214 = this.Bounds;

			if( ( BorderSides & BorderSides.Top ) != 0 )
				__0x214.Y++; __0x214.Height--;
			if( ( BorderSides & BorderSides.Bottom ) != 0 )
				__0x214.Height--;
			if( ( BorderSides & BorderSides.Left ) != 0 )
				__0x214.X++; __0x214.Width--;
			if( ( BorderSides & BorderSides.Right ) != 0 )
				__0x214.Width--;

			Controls[0].Bounds = __0x214;
		}
	}
}







namespace NeoAxis.Editor
{
	public class DocumentWindowWithViewport_CanvasBasedEditor : DocumentWindowWithViewport
	{
		CanvasBasedEditor __0x215;

		

		public DocumentWindowWithViewport_CanvasBasedEditor( CanvasBasedEditor editor )
		{
			this.__0x215 = editor;

			SelectedObjectsChanged += __0x216;
		}

		public CanvasBasedEditor Editor
		{
			get { return __0x215; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			__0x215.PerformOnCreate();
		}

		protected override void OnDestroy()
		{
			__0x215.PerformOnDestroy();
		}
		public void PerformBaseOnDestroy()
		{
			base.OnDestroy();
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x215.PerformKeyDown( e, ref handled );
		}
		public void PerformBaseViewportKeyDown( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			__0x215.PerformKeyPress( e, ref handled );
		}
		public void PerformBaseViewportKeyPress( KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x215.PerformKeyUp( e, ref handled );
		}
		public void PerformBaseViewportKeyUp( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( Viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x215.PerformMouseDown( button, ref handled );
		}
		public void PerformBaseViewportMouseDown( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x215.PerformMouseUp( button, ref handled );
		}
		public void PerformBaseViewportMouseUp( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x215.PerformMouseDoubleClick( button, ref handled );
		}
		public void PerformBaseViewportMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			__0x215.PerformMouseMove( mouse );
		}
		public void PerformBaseViewportMouseMove( Vector2 mouse )
		{
			base.Viewport_MouseMove( Viewport, mouse );
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			__0x215.PerformMouseRelativeModeChanged( ref handled );
		}
		public void PerformBaseViewportMouseRelativeModeChanged( ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( Viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			__0x215.PerformMouseWheel( delta, ref handled );
		}
		public void PerformBaseViewportMouseWheel( int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( Viewport, delta, ref handled );
		}

		protected override void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			__0x215.PerformJoystickEvent( e, ref handled );
		}
		public void PerformBaseViewportJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			base.Viewport_JoystickEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			__0x215.PerformSpecialInputDeviceEvent( e, ref handled );
		}
		public void PerformBaseViewportSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			base.Viewport_SpecialInputDeviceEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			__0x215.PerformTick( delta );
		}
		public void PerformBaseViewportTick( float delta )
		{
			base.Viewport_Tick( Viewport, delta );
		}

		protected override void OnTimer10MsTick()
		{
			__0x215.PerformOnTimer10MsTick();
		}
		public void PerformOnTimer10MsTick()
		{
			base.OnTimer10MsTick();
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x215.PerformViewportUpdateBegin();
		}
		public void PerformBaseViewportUpdateBegin()
		{
			base.Viewport_UpdateBegin( Viewport );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x215.PerformViewportUpdateEnd();
		}
		public void PerformBaseViewportUpdateEnd()
		{
			base.Viewport_UpdateEnd( Viewport );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			__0x215.PerformViewportCreated();
		}
		public void PerformBaseViewportCreated()
		{
			base.ViewportControl_ViewportCreated( ViewportControl );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x215.PerformViewportDestroyed();
		}
		public void PerformBaseViewportDestroyed()
		{
			base.ViewportControl_ViewportDestroyed( ViewportControl );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			__0x215.PerformViewportUpdateBeforeOutput();
		}
		public void PerformBaseViewportUpdateBeforeOutput()
		{
			base.Viewport_UpdateBeforeOutput( Viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x215.PerformViewportUpdateBeforeOutput2();
		}
		public void PerformBaseViewportUpdateBeforeOutput2()
		{
			base.Viewport_UpdateBeforeOutput2( Viewport );
		}

		protected override void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context )
		{
			__0x215.PerformViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}
		public void PerformBaseViewportUpdateGetObjectInSceneRenderingContext( ref Component_ObjectInSpace.RenderingContext context )
		{
			base.Viewport_UpdateGetObjectInSceneRenderingContext( Viewport, ref context );
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			__0x215.PerformSceneViewportUpdateGetCameraSettings( ref processed );
		}
		public void PerformBaseSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( Scene, Viewport, ref processed );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			__0x215.PerformOnGetTextInfoLeftTopCorner( lines );
		}
		public void PerformBaseGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );
		}

		protected override void GetTextInfoRightBottomCorner( List<string> lines )
		{
			__0x215.PerformOnGetTextInfoRightBottomCorner( lines );
		}
		public void PerformBaseGetTextInfoRightBottomCorner( List<string> lines )
		{
			base.GetTextInfoRightBottomCorner( lines );
		}

		protected override void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			__0x215.PerformOnGetTextInfoCenterBottomCorner( lines );
		}
		public void PerformBaseGetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.GetTextInfoCenterBottomCorner( lines );
		}

		private void __0x216( DocumentWindow __0x217, object[] __0x218 )
		{
			__0x215.PerformSelectedObjectsChanged( __0x218 );
		}
	}

	

	public abstract class CanvasBasedEditor
	{
		internal DocumentWindowWithViewport_CanvasBasedEditor owner;

		

		public CanvasBasedEditor()
		{
		}

		public DocumentWindowWithViewport Owner
		{
			get { return owner; }
		}

		

		public DocumentInstance Document
		{
			get { return Owner?.Document; }
		}

		public object ObjectOfEditor
		{
			get { return owner.ObjectOfWindow; }
		}

		public bool OpenAsSettings 
		{
			get { return owner.OpenAsSettings; }
		}

		public Dictionary<string, object> WindowTypeSpecificOptions
		{
			get { return owner.WindowTypeSpecificOptions; }
		}

		public bool IsDocumentSaved()
		{
			return owner.IsDocumentSaved();
		}

		public object[] SelectedObjects
		{
			get { return owner.SelectedObjects; }
		}

		public ESet<object> SelectedObjectsSet
		{
			get { return owner.SelectedObjectsSet; }
		}

		public bool IsWindowInWorkspace
		{
			get { return owner.IsWindowInWorkspace; }
			set { owner.IsWindowInWorkspace = value; }
		}

		protected virtual void OnCreate()
		{
		}
		internal void PerformOnCreate()
		{
			OnCreate();
		}

		protected virtual void OnDestroy()
		{
			owner.PerformBaseOnDestroy();
		}
		internal void PerformOnDestroy()
		{
			OnDestroy();
		}

		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		

		public bool SaveDocument()
		{
			return owner.SaveDocument();
		}

		public bool IsObjectSelected( object obj )
		{
			return owner.IsObjectSelected( obj );
		}

		public delegate void SelectedObjectsChangedDelegate( CanvasBasedEditor __0x219, object[] __0x220 );
		public event SelectedObjectsChangedDelegate SelectedObjectsChanged;
		internal void PerformSelectedObjectsChanged( object[] oldSelectedObjects )
		{
			SelectedObjectsChanged?.Invoke( this, oldSelectedObjects );
		}

		public void SelectObjects( ICollection<object> objects, bool updateForeachDocumentWindowContainers = true, bool updateSettingsWindowSelectObjects = true, bool forceUpdate = false )
		{
			owner.SelectObjects( objects, updateForeachDocumentWindowContainers, updateSettingsWindowSelectObjects, forceUpdate );
		}

		protected virtual void OnTimer10MsTick()
		{
			owner.PerformOnTimer10MsTick();
		}
		internal void PerformOnTimer10MsTick()
		{
			OnTimer10MsTick();
		}

		

		
		
		
		

		
		
		
		

		public void SettingsWindowSelectObjects()
		{
			owner.SettingsWindowSelectObjects();
		}

		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		

		
		
		
		
		
		
		

		
		

		
		

		
		
		

		
		

		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		
		

		
		
		

		
		
		

		
		
		
		
		
		

		
		

		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		
		
		
		

		
		

		
		
		

		
		
		

		
		

		
		
		
		
		

		

		
		
		

		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		

		public EngineViewportControl ViewportControl
		{
			get { return owner.ViewportControl; }
		}

		public Viewport Viewport
		{
			get { return owner.Viewport; }
		}

		protected virtual void OnKeyDown( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyDown( e, ref handled );
		}
		internal void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			OnKeyDown( e, ref handled );
		}

		protected virtual void OnKeyPress( KeyPressEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyPress( e, ref handled );
		}
		internal void PerformKeyPress( KeyPressEvent e, ref bool handled )
		{
			OnKeyPress( e, ref handled );
		}

		protected virtual void OnKeyUp( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyUp( e, ref handled );
		}
		internal void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			OnKeyUp( e, ref handled );
		}

		protected virtual void OnMouseDown( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDown( button, ref handled );
		}
		internal void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			OnMouseDown( button, ref handled );
		}

		protected virtual void OnMouseUp( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseUp( button, ref handled );
		}
		internal void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			OnMouseUp( button, ref handled );
		}

		protected virtual void OnMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDoubleClick( button, ref handled );
		}
		internal void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			OnMouseDoubleClick( button, ref handled );
		}

		protected virtual void OnMouseMove( Vector2 mouse )
		{
			owner.PerformBaseViewportMouseMove( mouse );
		}
		internal void PerformMouseMove( Vector2 mouse )
		{
			OnMouseMove( mouse );
		}

		protected virtual void OnMouseRelativeModeChanged( ref bool handled )
		{
			owner.PerformBaseViewportMouseRelativeModeChanged( ref handled );
		}
		internal void PerformMouseRelativeModeChanged( ref bool handled )
		{
			OnMouseRelativeModeChanged( ref handled );
		}

		protected virtual void OnMouseWheel( int delta, ref bool handled )
		{
			owner.PerformBaseViewportMouseWheel( delta, ref handled );
		}
		internal void PerformMouseWheel( int delta, ref bool handled )
		{
			OnMouseWheel( delta, ref handled );
		}

		protected virtual void OnJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportJoystickEvent( e, ref handled );
		}
		internal void PerformJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			OnJoystickEvent( e, ref handled );
		}

		protected virtual void OnSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportSpecialInputDeviceEvent( e, ref handled );
		}
		internal void PerformSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			OnSpecialInputDeviceEvent( e, ref handled );
		}

		protected virtual void OnTick( float delta )
		{
			owner.PerformBaseViewportTick( delta );
		}
		internal void PerformTick( float delta )
		{
			OnTick( delta );
		}

		protected virtual void OnViewportUpdateBegin()
		{
			owner.PerformBaseViewportUpdateBegin();
		}
		internal void PerformViewportUpdateBegin()
		{
			OnViewportUpdateBegin();
		}

		protected virtual void OnViewportUpdateEnd()
		{
			owner.PerformBaseViewportUpdateEnd();
		}
		internal void PerformViewportUpdateEnd()
		{
			OnViewportUpdateEnd();
		}

		protected virtual void OnViewportCreated()
		{
			owner.PerformBaseViewportCreated();
		}
		internal void PerformViewportCreated()
		{
			OnViewportCreated();
		}

		protected virtual void OnViewportDestroyed()
		{
			owner.PerformBaseViewportDestroyed();
		}
		internal void PerformViewportDestroyed()
		{
			OnViewportDestroyed();
		}

		protected virtual void OnViewportUpdateBeforeOutput()
		{
			owner.PerformBaseViewportUpdateBeforeOutput();
		}
		internal void PerformViewportUpdateBeforeOutput()
		{
			OnViewportUpdateBeforeOutput();
		}

		protected virtual void OnViewportUpdateBeforeOutput2()
		{
			owner.PerformBaseViewportUpdateBeforeOutput2();
		}
		internal void PerformViewportUpdateBeforeOutput2()
		{
			OnViewportUpdateBeforeOutput2();
		}

		protected virtual void OnViewportUpdateGetObjectInSceneRenderingContext( ref Component_ObjectInSpace.RenderingContext context )
		{
			owner.PerformBaseViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}
		internal void PerformViewportUpdateGetObjectInSceneRenderingContext( ref Component_ObjectInSpace.RenderingContext context )
		{
			OnViewportUpdateGetObjectInSceneRenderingContext( ref context );
		}

		protected virtual void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			owner.PerformBaseSceneViewportUpdateGetCameraSettings( ref processed );
		}
		internal void PerformSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			OnSceneViewportUpdateGetCameraSettings( ref processed );
		}

		protected virtual void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoLeftTopCorner( lines );
		}
		internal void PerformOnGetTextInfoLeftTopCorner( List<string> lines )
		{
			OnGetTextInfoLeftTopCorner( lines );
		}

		protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoRightBottomCorner( lines );
		}
		internal void PerformOnGetTextInfoRightBottomCorner( List<string> lines )
		{
			OnGetTextInfoRightBottomCorner( lines );
		}

		protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoCenterBottomCorner( lines );
		}
		internal void PerformOnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			OnGetTextInfoCenterBottomCorner( lines );
		}

		public void AddScreenMessage( string text, ColorValue color )
		{
			owner.AddScreenMessage( text, color );
		}

		public void AddScreenMessage( string text )
		{
			owner.AddScreenMessage( text );
		}

		
		
		
		
		
		

		

		
		
		
		

		public Component_Scene Scene
		{
			get { return owner.Scene; }
			set { owner.Scene = value; }
		}

		public bool SceneNeedDispose
		{
			get { return owner.SceneNeedDispose; }
			set { owner.SceneNeedDispose = value; }
		}

		public Component_Scene CreateScene( bool enable )
		{
			return owner.CreateScene( enable );
		}

		public void DestroyScene()
		{
			owner.DestroyScene();
		}

		public bool CameraRotating
		{
			get { return owner.CameraRotating; }
		}

		public double GetFontSize()
		{
			return owner.GetFontSize();
		}

		
		
		
		
		

		
		
		
		

		public void AddTextWithShadow( Component_Font font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( Component_Font font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( font, fontSize, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( Component_Font font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( font, fontSize, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public string WorkareaModeName
		{
			get { return owner.WorkareaModeName; }
		}

		

		
		
		
		

		
		
		

		
		
		

		public bool AllowCameraControl
		{
			get { return owner.AllowCameraControl; }
		}

		public bool AllowSelectObjects
		{
			get { return owner.AllowSelectObjects; }
		}

		public bool DisplaySelectedObjects
		{
			get { return owner.DisplaySelectedObjects; }
		}

		

		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		
		
		

		
		

	}
}





namespace NeoAxis.Editor
{
	public class PreviewControlWithViewport_CanvasBasedPreview : PreviewControlWithViewport
	{
		CanvasBasedPreview __0x221;

		

		public PreviewControlWithViewport_CanvasBasedPreview( CanvasBasedPreview preview )
		{
			this.__0x221 = preview;
		}

		public CanvasBasedPreview Preview
		{
			get { return __0x221; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			__0x221.PerformOnCreate();
		}

		protected override void OnDestroy()
		{
			__0x221.PerformOnDestroy();
		}
		public void PerformBaseOnDestroy()
		{
			base.OnDestroy();
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x221.PerformKeyDown( e, ref handled );
		}
		public void PerformBaseViewportKeyDown( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			__0x221.PerformKeyPress( e, ref handled );
		}
		public void PerformBaseViewportKeyPress( KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( Viewport, e, ref handled );
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			__0x221.PerformKeyUp( e, ref handled );
		}
		public void PerformBaseViewportKeyUp( KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( Viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x221.PerformMouseDown( button, ref handled );
		}
		public void PerformBaseViewportMouseDown( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x221.PerformMouseUp( button, ref handled );
		}
		public void PerformBaseViewportMouseUp( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			__0x221.PerformMouseDoubleClick( button, ref handled );
		}
		public void PerformBaseViewportMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( Viewport, button, ref handled );
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			__0x221.PerformMouseMove( mouse );
		}
		public void PerformBaseViewportMouseMove( Vector2 mouse )
		{
			base.Viewport_MouseMove( Viewport, mouse );
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			__0x221.PerformMouseRelativeModeChanged( ref handled );
		}
		public void PerformBaseViewportMouseRelativeModeChanged( ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( Viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			__0x221.PerformMouseWheel( delta, ref handled );
		}
		public void PerformBaseViewportMouseWheel( int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( Viewport, delta, ref handled );
		}

		protected override void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			__0x221.PerformJoystickEvent( e, ref handled );
		}
		public void PerformBaseViewportJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			base.Viewport_JoystickEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			__0x221.PerformSpecialInputDeviceEvent( e, ref handled );
		}
		public void PerformBaseViewportSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			base.Viewport_SpecialInputDeviceEvent( Viewport, e, ref handled );
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			__0x221.PerformTick( delta );
		}
		public void PerformBaseViewportTick( float delta )
		{
			base.Viewport_Tick( Viewport, delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x221.PerformViewportUpdateBegin();
		}
		public void PerformBaseViewportUpdateBegin()
		{
			base.Viewport_UpdateBegin( Viewport );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x221.PerformViewportUpdateEnd();
		}
		public void PerformBaseViewportUpdateEnd()
		{
			base.Viewport_UpdateEnd( Viewport );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			__0x221.PerformViewportCreated();
		}
		public void PerformBaseViewportCreated()
		{
			base.ViewportControl_ViewportCreated( ViewportControl );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x221.PerformViewportDestroyed();
		}
		public void PerformBaseViewportDestroyed()
		{
			base.ViewportControl_ViewportDestroyed( ViewportControl );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			__0x221.PerformViewportUpdateBeforeOutput();
		}
		public void PerformBaseViewportUpdateBeforeOutput()
		{
			base.Viewport_UpdateBeforeOutput( Viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x221.PerformViewportUpdateBeforeOutput2();
		}
		public void PerformBaseViewportUpdateBeforeOutput2()
		{
			base.Viewport_UpdateBeforeOutput2( Viewport );
		}

		
		
		
		
		
		
		
		

		protected override void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			__0x221.PerformSceneViewportUpdateGetCameraSettings( ref processed );
		}
		public void PerformBaseSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( Scene, Viewport, ref processed );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			__0x221.PerformOnGetTextInfoLeftTopCorner( lines );
		}
		public void PerformBaseGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );
		}
	}

	

	public abstract class CanvasBasedPreview
	{
		internal PreviewControlWithViewport_CanvasBasedPreview owner;

		

		public CanvasBasedPreview()
		{
		}

		public PreviewControlWithViewport Owner
		{
			get { return owner; }
		}

		

		public object ObjectOfPreview
		{
			get { return owner.ObjectOfPreview; }
		}

		
		
		
		
		

		protected virtual void OnCreate()
		{
		}
		internal void PerformOnCreate()
		{
			OnCreate();
		}

		protected virtual void OnDestroy()
		{
			owner.PerformBaseOnDestroy();
		}
		internal void PerformOnDestroy()
		{
			OnDestroy();
		}

		

		public EngineViewportControl ViewportControl
		{
			get { return owner.ViewportControl; }
		}

		public Viewport Viewport
		{
			get { return owner.Viewport; }
		}

		protected virtual void OnKeyDown( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyDown( e, ref handled );
		}
		internal void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			OnKeyDown( e, ref handled );
		}

		protected virtual void OnKeyPress( KeyPressEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyPress( e, ref handled );
		}
		internal void PerformKeyPress( KeyPressEvent e, ref bool handled )
		{
			OnKeyPress( e, ref handled );
		}

		protected virtual void OnKeyUp( KeyEvent e, ref bool handled )
		{
			owner.PerformBaseViewportKeyUp( e, ref handled );
		}
		internal void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			OnKeyUp( e, ref handled );
		}

		protected virtual void OnMouseDown( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDown( button, ref handled );
		}
		internal void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			OnMouseDown( button, ref handled );
		}

		protected virtual void OnMouseUp( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseUp( button, ref handled );
		}
		internal void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			OnMouseUp( button, ref handled );
		}

		protected virtual void OnMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			owner.PerformBaseViewportMouseDoubleClick( button, ref handled );
		}
		internal void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			OnMouseDoubleClick( button, ref handled );
		}

		protected virtual void OnMouseMove( Vector2 mouse )
		{
			owner.PerformBaseViewportMouseMove( mouse );
		}
		internal void PerformMouseMove( Vector2 mouse )
		{
			OnMouseMove( mouse );
		}

		protected virtual void OnMouseRelativeModeChanged( ref bool handled )
		{
			owner.PerformBaseViewportMouseRelativeModeChanged( ref handled );
		}
		internal void PerformMouseRelativeModeChanged( ref bool handled )
		{
			OnMouseRelativeModeChanged( ref handled );
		}

		protected virtual void OnMouseWheel( int delta, ref bool handled )
		{
			owner.PerformBaseViewportMouseWheel( delta, ref handled );
		}
		internal void PerformMouseWheel( int delta, ref bool handled )
		{
			OnMouseWheel( delta, ref handled );
		}

		protected virtual void OnJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportJoystickEvent( e, ref handled );
		}
		internal void PerformJoystickEvent( JoystickInputEvent e, ref bool handled )
		{
			OnJoystickEvent( e, ref handled );
		}

		protected virtual void OnSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			owner.PerformBaseViewportSpecialInputDeviceEvent( e, ref handled );
		}
		internal void PerformSpecialInputDeviceEvent( InputEvent e, ref bool handled )
		{
			OnSpecialInputDeviceEvent( e, ref handled );
		}

		protected virtual void OnTick( float delta )
		{
			owner.PerformBaseViewportTick( delta );
		}
		internal void PerformTick( float delta )
		{
			OnTick( delta );
		}

		protected virtual void OnViewportUpdateBegin()
		{
			owner.PerformBaseViewportUpdateBegin();
		}
		internal void PerformViewportUpdateBegin()
		{
			OnViewportUpdateBegin();
		}

		protected virtual void OnViewportUpdateEnd()
		{
			owner.PerformBaseViewportUpdateEnd();
		}
		internal void PerformViewportUpdateEnd()
		{
			OnViewportUpdateEnd();
		}

		protected virtual void OnViewportCreated()
		{
			owner.PerformBaseViewportCreated();
		}
		internal void PerformViewportCreated()
		{
			OnViewportCreated();
		}

		protected virtual void OnViewportDestroyed()
		{
			owner.PerformBaseViewportDestroyed();
		}
		internal void PerformViewportDestroyed()
		{
			OnViewportDestroyed();
		}

		protected virtual void OnViewportUpdateBeforeOutput()
		{
			owner.PerformBaseViewportUpdateBeforeOutput();
		}
		internal void PerformViewportUpdateBeforeOutput()
		{
			OnViewportUpdateBeforeOutput();
		}

		protected virtual void OnViewportUpdateBeforeOutput2()
		{
			owner.PerformBaseViewportUpdateBeforeOutput2();
		}
		internal void PerformViewportUpdateBeforeOutput2()
		{
			OnViewportUpdateBeforeOutput2();
		}

		
		
		
		
		
		
		
		

		protected virtual void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			owner.PerformBaseSceneViewportUpdateGetCameraSettings( ref processed );
		}
		internal void PerformSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			OnSceneViewportUpdateGetCameraSettings( ref processed );
		}

		protected virtual void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			owner.PerformBaseGetTextInfoLeftTopCorner( lines );
		}
		internal void PerformOnGetTextInfoLeftTopCorner( List<string> lines )
		{
			OnGetTextInfoLeftTopCorner( lines );
		}

		public Component_Scene Scene
		{
			get { return owner.Scene; }
			set { owner.Scene = value; }
		}

		public bool SceneNeedDispose
		{
			get { return owner.SceneNeedDispose; }
			set { owner.SceneNeedDispose = value; }
		}

		public Vector3 CameraLookTo
		{
			get { return owner.CameraLookTo; }
			set { owner.CameraLookTo = value; }
		}

		public double CameraInitialDistance
		{
			get { return owner.CameraInitialDistance; }
			set { owner.CameraInitialDistance = value; }
		}

		public bool CameraRotationMode
		{
			get { return owner.CameraRotationMode; }
			set { owner.CameraRotationMode = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return owner.CameraDirection; }
			set { owner.CameraDirection = value; }
		}

		public Component_Scene CreateScene( bool enable )
		{
			return owner.CreateScene( enable );
		}

		public void DestroyScene()
		{
			owner.DestroyScene();
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			owner.SetCameraByBounds( bounds, distanceScale, mode2D );
		}

		public double GetFontSize()
		{
			return owner.GetFontSize();
		}

		
		
		
		
		

		
		
		
		

		public void AddTextWithShadow( Component_Font font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextWithShadow( text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( Component_Font font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( font, fontSize, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			owner.AddTextLinesWithShadow( lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( Component_Font font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( font, fontSize, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return owner.AddTextWordWrapWithShadow( text, rectangle, horizontalAlign, verticalAlign, color );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class ComponentTypeSettingsForm : EngineForm
	{
		DocumentInstance __0x222;
		Component __0x223;
		__0x268 __0x224 = new __0x268();

		

		public enum ObjectTypeEnum
		{
			Component,
			Property
		}

		

		class __0x267 : Metadata.Property
		{
			public ObjectTypeEnum objectType;
			public Component component;
			
			string __0x225;
			object __0x226;

			

			public __0x267( ComponentTypeSettingsForm owner, ObjectTypeEnum objectType, Component component, string name, Metadata.TypeInfo type,  string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.objectType = objectType;
				this.component = component;
				
				this.__0x225 = category;
				this.__0x226 = value;
			}

			
			
			
			
			

			public string Category
			{
				get { return __0x225; }
				set { __0x225 = value; }
			}

			public object Value
			{
				get { return __0x226; }
				set { this.__0x226 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x227 = new List<object>();

				
				
				
				
				
				
				
				

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x225 ) )
						__0x227.Add( new CategoryAttribute( __0x225 ) );
				}

				return __0x227.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x226;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				this.__0x226 = value;
			}
		}

		

		class __0x268 : Metadata.IMetadataProvider
		{
			public List<__0x267> properties = new List<__0x267>();

			

			public Metadata.TypeInfo BaseType
			{
				get { return MetadataManager.GetTypeOfNetType( GetType() ); }
			}

			public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
			{
				foreach( var __0x243 in properties )
					yield return __0x243;
			}

			public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
			{
				foreach( var __0x244 in properties )
				{
					if( __0x244.Signature == signature )
						return __0x244;
				}
				return null;
			}
		}

		

		public ComponentTypeSettingsForm( DocumentInstance document, Component component )
		{
			

			this.__0x222 = document;
			this.__0x223 = component;

			__0x255();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x238.OverrideGroupDisplayName += __0x253;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = EditorLocalization.Translate( "TypeSettingsForm", Text );
			EditorLocalization.TranslateForm( "TypeSettingsForm", this );
		}

		private void __0x249( object __0x256, EventArgs __0x257 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x254();

			

			foreach( var __0x245 in __0x223.Components )
			{
				if( __0x245.DisplayInEditor && !__0x245.TypeOnly && !string.IsNullOrEmpty( __0x245.Name ) && __0x245.TypeSettingsIsPublic() )
				{
					

					
					
					
					

					
					

					bool __0x228 = !ComponentUtility.TypeSettingsPrivateObjectsContains( __0x223.TypeSettingsPrivateObjects, __0x245 );
					
					

					var __0x229 = new __0x267( this, ObjectTypeEnum.Component, __0x245, __0x245.Name, MetadataManager.GetTypeOfNetType( typeof( bool ) ), "Components", __0x228 );
					__0x229.DefaultValueSpecified = true;
					__0x229.DefaultValue = true;

					__0x224.properties.Add( __0x229 );

					
					
				}
			}

			foreach( var __0x246 in MetadataManager.MetadataGetMembers( __0x223 ) )
			{
				var __0x230 = __0x246 as Metadata.Property;

				

				if( __0x230 != null && EditorUtility.IsMemberVisible( __0x223, __0x230 ) )
				{
					bool __0x231 = !ComponentUtility.TypeSettingsPrivateObjectsContains( __0x223.TypeSettingsPrivateObjects, __0x230 );
					
					

					var __0x232 = new __0x267( this, ObjectTypeEnum.Property, null, __0x230.Name, MetadataManager.GetTypeOfNetType( typeof( bool ) ), "Properties", __0x231 );
					__0x232.DefaultValueSpecified = true;
					__0x232.DefaultValue = true;

					__0x224.properties.Add( __0x232 );
				}
			}

			__0x238.SetData( null, new object[] { __0x224 } );

			
		}

		private void __0x250( object __0x258, EventArgs __0x259 )
		{
			Close();

			
			string[] __0x233 = null;
			{
				var __0x234 = new List<string>();

				foreach( var __0x247 in __0x224.properties )
				{
					if( !(bool)__0x247.Value )
					{
						switch( __0x247.objectType )
						{
						case ObjectTypeEnum.Component:
							__0x234.Add( __0x247.component.GetPathFromParent() );
							
							break;

						case ObjectTypeEnum.Property:
							__0x234.Add( __0x247.Name );
							break;
						}
					}
				}

				if( __0x234.Count != 0 )
					__0x233 = __0x234.ToArray();
			}

			var __0x235 = __0x223.TypeSettingsPrivateObjects;

			
			__0x223.TypeSettingsPrivateObjects = __0x233;

			
			var __0x236 = new UndoActionPropertiesChange.Item( __0x223, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x235, null );
			__0x222.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x236 ) );
			__0x222.Modified = true;
		}

		private void __0x251( object __0x260, EventArgs __0x261 )
		{
			Close();
		}

		private void __0x252( object __0x262, EventArgs __0x263 )
		{
			foreach( var __0x248 in __0x224.properties )
				__0x248.Value = true;
		}

		private void __0x253( HierarchicalContainer __0x264, HCItemGroup __0x265, ref string __0x266 )
		{
			__0x266 = EditorLocalization.Translate( "TypeSettingsForm", __0x266 );
		}

		void __0x254()
		{
			__0x239.Location = new Point( ClientSize.Width - __0x239.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x239.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x240.Location = new Point( __0x239.Location.X - __0x240.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x239.Location.Y );
			__0x241.Location = new Point( __0x241.Location.X, __0x240.Location.Y );
			__0x238.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x238.Location.X, __0x240.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x238.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x254();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class ComponentTypeSettingsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x237 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x237 != null ) )
			{
				__0x237.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x255()
		{
			this.__0x239 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x240 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x241 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x242 = new NeoAxis.Editor.EngineLabel();
			this.__0x238 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			
			this.__0x239.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x239.Location = new System.Drawing.Point(334, 581);
			this.__0x239.Name = "kryptonButtonCancel";
			this.__0x239.Size = new System.Drawing.Size(117, 32);
			this.__0x239.TabIndex = 3;
			this.__0x239.Values.Text = "Cancel";
			this.__0x239.Click += new System.EventHandler(this.__0x251);
			
			
			
			
			this.__0x240.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x240.Location = new System.Drawing.Point(211, 581);
			this.__0x240.Name = "kryptonButtonOK";
			this.__0x240.Size = new System.Drawing.Size(117, 32);
			this.__0x240.TabIndex = 2;
			this.__0x240.Values.Text = "OK";
			this.__0x240.Click += new System.EventHandler(this.__0x250);
			
			
			
			
			this.__0x241.Location = new System.Drawing.Point(12, 581);
			this.__0x241.Name = "kryptonButtonReset";
			this.__0x241.Size = new System.Drawing.Size(117, 32);
			this.__0x241.TabIndex = 1;
			this.__0x241.Values.Text = "Reset";
			this.__0x241.Click += new System.EventHandler(this.__0x252);
			
			
			
			this.__0x242.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x242.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x242.Location = new System.Drawing.Point(12, 12);
			this.__0x242.Name = "labelEx1";
			this.__0x242.Size = new System.Drawing.Size(439, 23);
			this.__0x242.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x242.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x242.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x242.TabIndex = 4;
			this.__0x242.Text = "Make visible:";
			
			
			
			
			
			
			this.__0x238.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x238.Location = new System.Drawing.Point(12, 39);
			this.__0x238.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x238.Name = "hierarchicalContainer1";
			this.__0x238.Size = new System.Drawing.Size(439, 532);
			this.__0x238.SplitterPosition = 307;
			this.__0x238.SplitterRatio = 0.7F;
			this.__0x238.TabIndex = 0;
			
			
			
			this.AcceptButton = this.__0x240;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x239;
			this.ClientSize = new System.Drawing.Size(463, 625);
			this.Controls.Add(this.__0x242);
			this.Controls.Add(this.__0x241);
			this.Controls.Add(this.__0x240);
			this.Controls.Add(this.__0x239);
			this.Controls.Add(this.__0x238);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ComponentTypeSettingsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Type Settings";
			this.Load += new System.EventHandler(this.__0x249);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private HierarchicalContainer __0x238;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x239;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x240;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x241;
		private EngineLabel __0x242;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a rich control to work with hierarchical data in tree or list form.
	/// </summary>
	public partial class ContentBrowser : EUserControl
	{
		public static bool AllowAllTypes = true;

		static List<ContentBrowser> __0x269 = new List<ContentBrowser>();

		static List<ContentBrowserFilteringMode> __0x270 = new List<ContentBrowserFilteringMode>();

		
		bool __0x271;
		ModeEnum __0x272;
		DocumentWindow __0x273;
		object __0x274;
		
		SetReferenceModeDataClass __0x275;

		bool __0x276 = true;
		bool __0x277;

		bool __0x278;
		
		bool __0x279;

		
		

		ContentBrowserOptions __0x280;

		

		PanelModeEnum __0x281 = PanelModeEnum.TwoPanelsSplitHorizontally;
		ListModeEnum __0x282 = ListModeEnum.List;
		int __0x283 = 1;
		int __0x284 = 1;

		ESet<Item> __0x285 = new ESet<Item>();
		Dictionary<ItemTreeNode, Item> __0x286 = new Dictionary<ItemTreeNode, Item>();
		Dictionary<Item, ItemTreeNode> __0x287 = new Dictionary<Item, ItemTreeNode>();
		
		List<Item> __0x288 = new List<Item>();

		ContentBrowserItem_Favorites __0x289;
		ContentBrowserItem_File __0x290;

		internal SortByItems updatedDataSortBy;
		internal bool updatedDataSortByAscending;
		
		
		

		
		

		bool __0x291 = true;

		

		bool __0x292;

		
		ContentBrowserFilteringMode __0x293;

		TreeModel __0x294;

		ContentBrowserImageHelper __0x295 = new ContentBrowserImageHelper();

		bool __0x296;
		
		bool __0x297;

		string[] __0x298;
		bool __0x299;
		
		DateTime __0x300 = DateTime.Now;

		bool __0x301;

		string __0x302 = "~~~";
		string __0x303 = "~~~";

		bool __0x304;

		bool __0x305 = true;

		bool __0x306;

		double __0x307;

		EngineListView.ModeClass __0x308;

		KryptonBreadCrumb __0x309;

		internal bool needUpdateImages;

		

		public enum ModeEnum
		{
			Resources,
			Objects,
			SetReference,
		}

		

		public enum PanelModeEnum
		{
			Tree,
			List,
			TwoPanelsSplitHorizontally,
			TwoPanelsSplitVertically,
		}

		

		public enum ListModeEnum
		{
			Auto,
			List,
			Tiles,
			
		}

		

		public enum SortByItems
		{
			Name,
			Date,
			Type,
			Size,
		}

		

		
		
		
		
		
		

		

		public class SetReferenceModeDataClass
		{
			public Component[] selectedComponents;
			public object[] propertyOwners;
			
			public Metadata.Property property;
			public object[] propertyIndexes;
			public bool allowNull = true;

			public Metadata.TypeInfo demandedType;

			
			public bool newObjectWindow;
			public bool newObjectWindowFileCreation;
			

			
			public bool selectTypeWindow;
			public Metadata.TypeInfo selectTypeDemandedType;
			public bool selectTypeWindowCanSelectAbstractClass;

			
			
			

			

			public Metadata.TypeInfo DemandedType
			{
				get
				{
					if( demandedType != null )
						return demandedType;
					else
						return property.TypeUnreferenced;
				}
			}
		}

		

		public delegate void UpdateDataEventDelegate( ContentBrowser __0x1049, IList<Item> __0x1050 );
		public static event UpdateDataEventDelegate UpdateDataEvent;

		
		
		

		public delegate void ItemAfterSelectDelegate( ContentBrowser __0x1051, IList<Item> __0x1052, bool __0x1053, ref bool __0x1054 );
		public event ItemAfterSelectDelegate ItemAfterSelect;

		public delegate void ItemAfterChooseDelegate( ContentBrowser __0x1055, Item __0x1056, ref bool __0x1057 );
		public event ItemAfterChooseDelegate ItemAfterChoose;

		public delegate void OverrideItemTextDelegate( ContentBrowser __0x1058, Item __0x1059, ref string __0x1060 );
		public event OverrideItemTextDelegate OverrideItemText;

		public delegate void ShowContextMenuEventDelegate( ContentBrowser __0x1061, Item __0x1062, List<KryptonContextMenuItemBase> __0x1063 );
		public event ShowContextMenuEventDelegate ShowContextMenuEvent;

		public delegate void KeyDownOverrideDelegate( ContentBrowser __0x1064, object __0x1065, KeyEventArgs __0x1066, ref bool __0x1067 );
		public event KeyDownOverrideDelegate KeyDownOverride;

		

		public abstract class Item : IDisposable
		{
			ContentBrowser __0x310;

			Item __0x311;
			public string imageKey;
			public Image image;

			public bool chooseByDoubleClickAndReturnKey;

			public bool expandAtStartup;
			
			public bool expandAllAtStartup;

			public bool wasExpanded;
			public bool childNodesCreated;

			public bool ShowDisabled
			{
				get { return __0x313; }
				set
				{
					if( __0x313 == value )
						return;
					__0x313 = value;

					UpdateImage();

					var __0x312 = __0x310.GetListItemByItem( this );
					if( __0x312 != null )
					{
						__0x312.ShowDisabled = ShowDisabled;
						__0x310.__0x1017( __0x312 );
					}
				}
			}

			bool __0x313;
			

			

			public Item( ContentBrowser owner, Item parent )
			{
				this.__0x310 = owner;
				this.__0x311 = parent;
			}

			public ContentBrowser Owner
			{
				get { return __0x310; }
			}

			public Item Parent
			{
				get { return __0x311; }
			}

			public abstract string Text
			{
				get;
			}

			public override string ToString()
			{
				return Text;
			}

			public abstract IList<Item> GetChildren( bool onlyAlreadyCreated );

			public delegate void GetChildrenFilterEventDelegate( Item __0x1068, ref IList<Item> __0x1069 );
			public static event GetChildrenFilterEventDelegate GetChildrenFilterEvent;

			public IList<Item> GetChildrenFilter( bool onlyAlreadyCreated )
			{
				var __0x314 = GetChildren( onlyAlreadyCreated );
				GetChildrenFilterEvent?.Invoke( this, ref __0x314 );
				return __0x314;
			}

			
			public abstract void Dispose();

			

			public event Action<Item> TextChanged;
			public event Action<Item> TextColorChanged;
			public event Action<Item> ChildrenChanged;

			public void PerformTextChanged()
			{
				TextChanged?.Invoke( this );
			}

			public void PerformTextColorChanged()
			{
				TextColorChanged?.Invoke( this );
			}

			public virtual void PerformChildrenChanged()
			{
				ChildrenChanged?.Invoke( this );
			}

			public virtual object ContainedObject
			{
				get { return null; }
			}

			public void GetChildrenOnlyAlreadyCreatedRecursive( List<Item> result )
			{
				foreach( var __0x850 in GetChildrenFilter( true ) )
				{
					result.Add( __0x850 );
					__0x850.GetChildrenOnlyAlreadyCreatedRecursive( result );
				}
			}

			public object Tag { get; set; }

			
			public virtual void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
			{
				referenceValue = "";
				canSet = false;
			}

			public virtual string GetDescription() { return ""; }
			

			public virtual void LightweightUpdate() { }

			
			

			public virtual bool CanDoDragDrop() { return false; }

			public bool ShowDisabledInHierarchy
			{
				get
				{
					if( __0x313 )
						return true;
					return Parent != null && Parent.ShowDisabledInHierarchy;
				}
			}

			internal void UpdateImage()
			{
				if( __0x310.__0x287.TryGetValue( this, out var itemNode ) )
				{
					Image __0x315 = null;

					
					var __0x316 = this as ContentBrowserItem_File;
					if( __0x316 != null && !__0x316.IsDirectory )
						__0x315 = PreviewImagesManager.GetImageForResource( __0x316.FullPath, true );

					if( __0x315 == null )
						__0x315 = this.image;
					if( __0x315 == null )
						__0x315 = __0x310.__0x295.GetImageScaledForTreeView( imageKey, __0x313 );
					if( __0x315 == null )
						__0x315 = ContentBrowserImageHelperBasicImages.Helper.GetImageScaledForTreeView( imageKey, __0x313 );

					itemNode.Image = __0x315;
				}
			}

			public ICollection<Item> GetAllParents( bool makeOrderFromTopToBottom )
			{
				var __0x317 = new List<Item>();
				var __0x318 = Parent;
				while( __0x318 != null )
				{
					__0x317.Add( __0x318 );
					__0x318 = __0x318.Parent;
				}
				if( makeOrderFromTopToBottom )
					__0x317.Reverse();
				return __0x317;
			}
		}

		
		
		

		

		public class ItemTreeNode : Node
		{
			public Item item;
			string __0x319 = "";

			public ItemTreeNode( Item item )
			{
				this.item = item;
			}

			public override string ToString()
			{
				return item.ToString();
			}

			public void UpdateText()
			{
				var __0x320 = item.Text;
				item.Owner.OverrideItemText?.Invoke( item.Owner, item, ref __0x320 );

				if( __0x319 != __0x320 )
				{
					__0x319 = __0x320;
					Text = __0x319;
				}
			}
		}

		

		class __0x1337 : Node
		{
			public __0x1337()
			{
				Text = "DUMMY";
			}

			public override string ToString()
			{
				return "DUMMY";
			}
		}

		

		public class DragDropItemData
		{
			public Item Item;
		}

		

		public static List<ContentBrowser> AllInstances
		{
			get { return __0x269; }
		}

		public static List<ContentBrowserFilteringMode> FilteringModes
		{
			get { return __0x270; }
		}

		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides TreeViewBorderDraw
		{
			

			get { return __0x831.BorderSides; }
			set { __0x831.BorderSides = value; }
		}

		BorderSides __0x321 = BorderSides.All;
		[DefaultValue( BorderSides.All )]
		[Category( "Appearance" )]
		public BorderSides ListViewBorderDraw
		{
			get { return __0x321; }
			set
			{
				if( __0x321 == value )
					return;
				__0x321 = value;

				__0x837.Visible = ( value & BorderSides.Top ) != 0;
				__0x841.Visible = ( value & BorderSides.Bottom ) != 0;
				__0x840.Visible = ( value & BorderSides.Left ) != 0;
				__0x839.Visible = ( value & BorderSides.Right ) != 0;
			}
		}

		public ContentBrowser()
		{
			__0x1048();

			var __0x322 = __0x834.Items.OfType<ToolStripBreadCrumbHost>().First();
			__0x309 = __0x322.BreadCrumb;
			__0x309.SelectedItemChanged += __0x1020;

			__0x280 = new ContentBrowserOptions( this );

			__0x294 = new TreeModel();
			__0x806.Model = __0x294;

			SetPanelMode( PanelModeEnum.Tree, true );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x832.CanDrag = true;
			__0x832.BeforeStartDrag += __0x1044;
			
			
			
			
			

			__0x1030();

			__0x830.Image = EditorResourcesCache.Edit;
			__0x814.Image = EditorResourcesCache.Clone;
			__0x821.Image = EditorResourcesCache.Copy;
			__0x820.Image = EditorResourcesCache.Cut;
			__0x822.Image = EditorResourcesCache.Paste;
			__0x804.Image = EditorResourcesCache.Delete;
			__0x810.Image = EditorResourcesCache.Edit;
			__0x816.Image = EditorResourcesCache.MoveDown;
			__0x815.Image = EditorResourcesCache.MoveUp;
			__0x827.Image = EditorResourcesCache.NewFolder;
			__0x803.Image = EditorResourcesCache.New;
			__0x828.Image = EditorResourcesCache.New;
			__0x819.Image = EditorResourcesCache.Options;
			__0x813.Image = EditorResourcesCache.Rename;
			__0x811.Image = EditorResourcesCache.Settings;
			__0x823.Image = EditorResourcesCache.Type;
			__0x835.Image = EditorResourcesCache.MoveUp;
			__0x818.Image = EditorResourcesCache.Selection;
			__0x842.Image = EditorResourcesCache.Focus;

			foreach( var __0x851 in __0x800.Items )
			{
				var __0x323 = __0x851 as ToolStripButton;
				if( __0x323 != null )
					__0x323.Text = EditorLocalization.Translate( "ContentBrowser", __0x323.Text );

				var __0x324 = __0x851 as ToolStripDropDownButton;
				if( __0x324 != null )
					__0x324.Text = EditorLocalization.Translate( "ContentBrowser", __0x324.Text );
			}

			__0x800.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
			__0x834.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
			__0x808.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();

			if( EditorAPI.DarkTheme )
			{
				__0x922();

				
				
			}
		}

		public ModeEnum Mode
		{
			get { return __0x272; }
			set { __0x272 = value; }
		}

		public void Init( DocumentWindow documentWindow, object rootObject, 
			SetReferenceModeDataClass setReferenceModeData )
		{
			this.__0x271 = true;
			this.__0x273 = documentWindow;
			this.__0x274 = rootObject;
			
			this.__0x275 = setReferenceModeData;
		}

		[Browsable( false )]
		public bool Initialized
		{
			get { return __0x271; }
		}

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return __0x273; }
		}

		[Browsable( false )]
		public object RootObject
		{
			get { return __0x274; }
		}

		
		
		
		
		

		[Browsable( false )]
		public SetReferenceModeDataClass SetReferenceModeData
		{
			get { return __0x275; }
		}

		[DefaultValue( true )]
		public bool PreloadResourceOnSelection
		{
			get { return __0x276; }
			set { __0x276 = value; }
		}

		[DefaultValue( false )]
		public bool CanSelectObjectSettings
		{
			get { return __0x277; }
			set { __0x277 = value; }
		}

		[Browsable( false )]
		public bool ReadOnlyHierarchy
		{
			get { return __0x278; }
			set { __0x278 = value; }
		}

		[Browsable( false )]
		public bool ThisIsSettingsWindow
		{
			get { return __0x279; }
			set { __0x279 = value; }
		}

		private void __0x921( object __0x1070, EventArgs __0x1071 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x269.Add( this );

			
			{
				var __0x325 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x1072 )
				{
					int __0x326 = 20;
					if( __0x1072 is ToolStripDropDownButton )
						__0x326 = 28;
					__0x1072.Size = new Size( (int)( __0x326 * __0x325 ), (int)( 20 * __0x325 + 2 ) );
					
				}

				__0x800.Padding = new Padding( (int)__0x325 );
				__0x800.Size = new Size( 10, (int)( 21 * __0x325 + 2 ) );

				foreach( var __0x852 in __0x800.Items )
				{
					var __0x327 = __0x852 as ToolStripButton;
					if( __0x327 != null )
						UpdateSize( __0x327 );

					var __0x328 = __0x852 as ToolStripDropDownButton;
					if( __0x328 != null )
						UpdateSize( __0x328 );
				}


				__0x834.Padding = new Padding( (int)__0x325 );
				__0x834.Size = new Size( 10, (int)( 21 * __0x325 + 2 ) );

				
				

				UpdateSize( __0x835 );
			}

			
			if( Math.Abs( DpiHelper.Default.DpiScaleFactor - 1.0 ) < 0.001 )
				__0x806.RowHeight++;
			if( DpiHelper.Default.DpiScaleFactor > 1.499 )
				__0x806.RowHeight++;
			if( DpiHelper.Default.DpiScaleFactor > 1.999 )
				__0x806.RowHeight++;
			
			
			
			
			
			
			
			

			__0x846.Panel2MinSize = (int)( __0x846.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x846.SplitterDistance = 10000;
			__0x847.Panel2MinSize = (int)( __0x847.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x847.SplitterDistance = 10000;
			__0x848.Panel2MinSize = (int)( __0x848.Panel2MinSize * DpiHelper.Default.DpiScaleFactor );
			__0x848.SplitterDistance = 10000;

			
			

			
			__0x965();
			

			__0x1016( true );
			__0x1019();

			if( EditorAPI.DarkTheme )
			{
				__0x922();

				__0x831.BorderColor = Color.FromArgb( 80, 80, 80 );

				__0x309.StateCommon.BreadCrumb.Content.ShortText.Color1 = Color.FromArgb( 230, 230, 230 );

				

				__0x309.StateCommon.BreadCrumb.Back.Color1 = Color.FromArgb( 70, 70, 70 );
				

				__0x309.StateTracking.BreadCrumb.Back.Color1 = Color.FromArgb( 80, 80, 80 );
				

				__0x309.StatePressed.BreadCrumb.Back.Color1 = Color.FromArgb( 90, 90, 90 );

				

				
				

				
				
				
				
				
				
				
				
			}

			
			
			__0x823.Enabled = Mode == ModeEnum.Objects;
			__0x823.Visible = __0x823.Enabled;

			if( __0x281 != __0x280.PanelMode )
				SetPanelMode( __0x280.PanelMode, true );

			__0x1032();

			__0x807.Start();

			if( Initialized )
				UpdateData();

			
			ItemAfterSelect += __0x953;
			

			
			
			VirtualFileWatcher.Update += __0x947;
			Resource.Instance.AllInstances_StatusChanged += __0x949;
			Resource.Instance.AllInstances_DisposedEvent += __0x950;

			__0x818.Click += __0x1038;

			
			__0x849.SetToolTip( this.__0x832, "ToolTip" );

			__0x844.Scroll += __0x1039;
			__0x845.Scroll += __0x1040;

			
			__0x1042();

			__0x292 = true;
		}

		void __0x922()
		{
			
			__0x806.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x806.FullRowSelectActiveColor = Color.FromArgb( 70, 70, 70 );
			__0x806.FullRowSelectInactiveColor = Color.FromArgb( 60, 60, 60 );

			
			__0x832.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x832.ForeColor = Color.FromArgb( 230, 230, 230 );

			__0x847.StateCommon.Back.Color1 = Color.FromArgb( 40, 40, 40 );
			__0x848.StateCommon.Back.Color1 = Color.FromArgb( 47, 47, 47 );
			__0x848.Panel2.StateCommon.Color1 = Color.FromArgb( 47, 47, 47 );
		}

		protected override void OnDestroy()
		{
			if( !EditorAPI.ClosingApplication )
				__0x923();

			base.OnDestroy();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				

				VirtualFileWatcher.Update -= __0x947;
				Resource.Instance.AllInstances_StatusChanged -= __0x949;
				Resource.Instance.AllInstances_DisposedEvent -= __0x950;
			}

			__0x295?.Dispose();

			__0x269.Remove( this );
		}

		void __0x923()
		{
			Item[] __0x329 = __0x285.ToArray();

			__0x285 = new ESet<Item>();
			__0x286 = new Dictionary<ItemTreeNode, Item>();
			__0x287 = new Dictionary<Item, ItemTreeNode>();
			__0x288.Clear();

			__0x1035();
			__0x294.Nodes.Clear();
			__0x1036();

			
			__0x832.ClearItems();
			

			foreach( var __0x853 in __0x329 )
			{
				__0x853.TextChanged -= __0x924;
				__0x853.TextColorChanged -= __0x925;
				__0x853.ChildrenChanged -= Item_ChildrenChanged;

				__0x853.Dispose();
			}
		}

		public void SetPanelMode( PanelModeEnum mode, bool forceUpdate = false )
		{
			if( mode != __0x281 || forceUpdate )
			{
				__0x281 = mode;

				kryptonSplitContainer1.Panel1Collapsed = __0x281 == PanelModeEnum.List;
				kryptonSplitContainer1.Panel2Collapsed = __0x281 == PanelModeEnum.Tree;

				if( __0x281 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x281 == PanelModeEnum.TwoPanelsSplitVertically )
					kryptonSplitContainer1.Orientation = __0x281 == PanelModeEnum.TwoPanelsSplitHorizontally ? Orientation.Horizontal : Orientation.Vertical;

				if( __0x281 != PanelModeEnum.Tree )
					__0x1007();
				
				
			}
		}

		private void __0x924( Item __0x1073 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x330 = GetNodeByItem( __0x1073 );
			if( __0x330 != null )
				__0x330.UpdateText();

			var __0x331 = GetListItemByItem( __0x1073 );
			if( __0x331 != null )
				__0x331.Text = __0x1073.Text;
		}

		private void __0x925( Item __0x1074 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x332 = GetNodeByItem( __0x1074 );
			if( __0x332 != null )
				__0x332.NotifyModel();
		}

		public ItemTreeNode GetNodeByItem( Item item )
		{
			__0x287.TryGetValue( item, out ItemTreeNode node );
			return node;
		}

		public Item GetItemByNode( ItemTreeNode node )
		{
			if( node == null )
				return null;

			__0x286.TryGetValue( node, out Item item );
			return item;
		}

		void __0x926( Item __0x1075, __0x1338 __0x1076 )
		{
			if( __0x1075.Parent != null )
				__0x926( __0x1075.Parent, __0x1076 );

			if( !__0x1075.childNodesCreated )
			{
				__0x1075.childNodesCreated = true;

				var __0x333 = GetNodeByItem( __0x1075 );
				if( __0x333 == null )
					Log.Fatal( "ContentBrowser: AddChildrenNodes: itemNode == null." );

				
				if( __0x333.Nodes.Count == 1 && __0x333.Nodes[ 0 ] is __0x1337 )
				{
					__0x1035();
					__0x333.Nodes.Clear();
				}

				
				foreach( var __0x854 in __0x1075.GetChildrenFilter( false ) )
					__0x927( __0x1075, __0x854, -1, __0x1076 );
			}
		}


		void __0x927( Item __0x1077, Item __0x1078, int __0x1079, __0x1338 __0x1080 )
		{
			__0x1035();

			ItemTreeNode __0x334 = new ItemTreeNode( __0x1078 );
			__0x285.Add( __0x1078 );
			__0x286[ __0x334 ] = __0x1078;
			__0x287[ __0x1078 ] = __0x334;
			__0x334.UpdateText();

			__0x1078.UpdateImage();
			

			if( __0x1077 != null )
			{
				var __0x335 = GetNodeByItem( __0x1077 );
				if( __0x1079 != -1 )
					__0x335.Nodes.Insert( __0x1079, __0x334 );
				else
					__0x335.Nodes.Add( __0x334 );
			}
			else
			{
				if( __0x1079 != -1 )
					__0x288.Insert( __0x1079, __0x1078 );
				else
					__0x288.Add( __0x1078 );

				if( __0x1079 != -1 )
					__0x294.Nodes.Insert( __0x1079, __0x334 );
				else
					__0x294.Nodes.Add( __0x334 );
			}

			
			if( __0x1078.GetChildrenFilter( false ).Count != 0 )
				__0x334.Nodes.Add( new __0x1337() );
			
			

			
			if( __0x1080 != null )
			{
				if( __0x1078.expandAllAtStartup )
					__0x1080.nodesToExpandAllAtStartup.Add( __0x334 );
				else if( __0x1078.expandAtStartup )
					__0x1080.nodesToExpandAtStartup.Add( __0x334 );
			}
			else
			{
				if( __0x1078.expandAllAtStartup )
					__0x991( __0x334 ).ExpandAll();
				else if( __0x1078.expandAtStartup )
					__0x991( __0x334 ).Expand();
			}

			__0x1078.TextChanged += __0x924;
			__0x1078.TextColorChanged += __0x925;
			__0x1078.ChildrenChanged += Item_ChildrenChanged;

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		public void RemoveItem( Item item )
		{
			

			var __0x336 = GetNodeByItem( item );

			item.TextChanged -= __0x924;
			item.TextColorChanged -= __0x925;
			item.ChildrenChanged -= Item_ChildrenChanged;

			if( __0x336 != null )
			{
				foreach( var __0x855 in new List<Node>( __0x336.Nodes ) )
				{
					ItemTreeNode __0x337 = __0x855 as ItemTreeNode;
					if( __0x337 != null )
					{
						var __0x338 = GetItemByNode( __0x337 );
						if( __0x338 != null )
							RemoveItem( __0x338 );
					}
				}

				__0x1035();

				if( __0x336.Parent != null )
					__0x336.Parent.Nodes.Remove( __0x336 );
				else
					__0x294.Nodes.Remove( __0x336 );

				__0x286.Remove( __0x336 );
				__0x287.Remove( item );
			}

			__0x285.Remove( item );
			__0x288.Remove( item );
		}

		internal void Item_ChildrenChanged( Item item )
		{
			if( EditorAPI.ClosingApplication || !IsHandleCreated )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			var __0x339 = GetNodeByItem( item );
			if( __0x339 == null )
				return;

			if( ContentBrowserUtility.allContentBrowsers_SuspendChildrenChangedEvent )
			{
				ContentBrowserUtility.allContentBrowsers_SuspendChildrenChangedEvent_Items.AddWithCheckAlreadyContained( (this, item) );
				return;
			}

			var __0x340 = item.GetChildrenFilter( false );

			
			

			
			
			if( !item.childNodesCreated )
			
			{
				
				

				if( __0x340.Count != 0 )
				{
					
					if( __0x339.Nodes.Count == 0 )
					{
						__0x1035();
						__0x339.Nodes.Add( new __0x1337() );
					}
				}
				else
				{
					
					if( __0x339.Nodes.Count == 1 && __0x339.Nodes[ 0 ] is __0x1337 )
					{
						__0x1035();
						__0x339.Nodes.Clear();
					}
				}
			}
			else
			{
				
				

				
				
				try
				{
					var __0x341 = new ESet<Item>( __0x340 );

					var __0x342 = new List<Item>();
					foreach( ItemTreeNode __0x856 in __0x339.Nodes )
					{
						if( !__0x341.Contains( __0x856.item ) )
							__0x342.Add( __0x856.item );
					}

					if( __0x342.Count != 0 )
					{
						foreach( var __0x857 in __0x342.GetReverse() )
							RemoveItem( __0x857 );
					}
				}
				catch { }

				for( int __0x343 = 0; __0x343 < __0x340.Count; __0x343++ )
				{
					var __0x344 = __0x340[ __0x343 ];

					
					var __0x345 = GetNodeByItem( __0x344 );
					if( __0x345 == null || ( __0x343 >= __0x339.Nodes.Count || __0x345 != __0x339.Nodes[ __0x343 ] || __0x345.Parent != __0x339 ) )
					{
						if( __0x345 != null )
						{
							
							__0x1035();
							__0x345.Parent.Nodes.Remove( __0x345 );
							__0x339.Nodes.Insert( __0x343, __0x345 );
						}
						else
						{
							
							__0x927( item, __0x344, __0x343, null );
						}
					}
				}

				
				
				try
				{
					while( __0x339.Nodes.Count > __0x340.Count )
					{
						var __0x346 = (ItemTreeNode)__0x339.Nodes[ __0x339.Nodes.Count - 1 ];
						var __0x347 = GetItemByNode( __0x346 );
						if( __0x347 != null )
							RemoveItem( __0x347 );
					}
				}
				catch { }
			}
			
			
			
			
			
			

			
			if( __0x1031().Contains( item ) )
				__0x1007();
		}

		class __0x1338
		{
			public List<ItemTreeNode> nodesToExpandAtStartup = new List<ItemTreeNode>();
			public List<ItemTreeNode> nodesToExpandAllAtStartup = new List<ItemTreeNode>();
		}

		public void SetData( IList<Item> roots, bool showPlusMinus = true )
		{
			__0x297 = true;

			__0x923();

			__0x1035();

			if( __0x806.ShowPlusMinus != showPlusMinus )
				__0x806.ShowPlusMinus = showPlusMinus;

			
			var __0x348 = new __0x1338();
			__0x806.Model = null;

			foreach( var __0x858 in roots )
				__0x927( null, __0x858, -1, __0x348 );

			
			foreach( var __0x859 in roots )
			{
				__0x926( __0x859, __0x348 );

				

				List<Item> __0x349 = new List<Item>( 16384 );
				__0x859.GetChildrenOnlyAlreadyCreatedRecursive( __0x349 );
				foreach( var __0x860 in __0x349 )
				{
					var __0x350 = __0x860.Parent;
					if( __0x350 != null && ( __0x350 is ContentBrowserItem_Type || __0x350 is ContentBrowserItem_Virtual ) )
						__0x926( __0x350, __0x348 );
				}
			}

			
			__0x806.Model = __0x294;
			
			foreach( var __0x861 in __0x348.nodesToExpandAllAtStartup )
				__0x991( __0x861 ).ExpandAll();
			foreach( var __0x862 in __0x348.nodesToExpandAtStartup )
				__0x991( __0x862 ).Expand();

			__0x1036();

			
			__0x1042();

			UpdateBreadcrumb();
			__0x1007();

			__0x297 = false;
		}

		
		
		
		

		
		
		
		
		

		public void AddRootItem( Item item )
		{
			__0x927( null, item, -1, null );
		}

		
		
		
		
		
		

		void __0x928()
		{
			bool __0x351 = !__0x296 && !__0x297;

			

			UpdateBreadcrumb();
			__0x1007();

			bool __0x352 = false;
			ItemAfterSelect?.Invoke( this, __0x1031(), __0x351, ref __0x352 );

			__0x1016( false );
		}

		private void __0x929( object __0x1081, EventArgs __0x1082 )
		{
			if( __0x305 )
				__0x928();

			

			

			
			

			
			

			
		}

		private void __0x930( object __0x1083, MouseEventArgs __0x1084 )
		{
			
			
			
			
			
			
		}

		private void __0x931( object __0x1085, TreeNodeAdvMouseEventArgs __0x1086 )
		{
			if( __0x1086.Button == MouseButtons.Left )
			{
				ItemTreeNode __0x353 = __0x990( __0x806.SelectedNode );
				if( __0x353 != null )
				{
					if( __0x353.Nodes.Count == 0 || __0x353.item.chooseByDoubleClickAndReturnKey )
					{
						__0x934();

						__0x1086.Handled = true;
					}
				}
				
				
				
				
				
				
			}
		}

		bool __0x932( Keys __0x1087 )
		{
			if( __0x1087 >= Keys.D0 && __0x1087 <= Keys.D9 )
				return true;
			if( __0x1087 >= Keys.A && __0x1087 <= Keys.Z )
				return true;
			return false;
		}

		private void __0x933( object __0x1088, KeyEventArgs __0x1089 )
		{
			
			{
				bool __0x354 = false;
				KeyDownOverride?.Invoke( this, __0x1088, __0x1089, ref __0x354 );
				if( __0x354 )
					return;
			}

			if( __0x1089.KeyCode == Keys.Return )
			{
				ItemTreeNode __0x355 = __0x990( __0x806.SelectedNode );
				if( __0x355 != null )
				{
					__0x934();
					__0x1089.Handled = true;
					return;
				}
			}

			
			{
				var __0x356 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x356 != null )
				{
					foreach( var __0x863 in __0x356 )
					{
						Keys __0x357 = __0x1089.KeyCode | ModifierKeys;
						if( __0x863 == __0x357 )
						{
							__0x997();
							return;
						}
					}
				}

				
				
				
				
				
			}

			
			if( ModifierKeys != Keys.None || !__0x932( __0x1089.KeyCode ) )
			{
				if( EditorAPI.ProcessShortcuts( __0x1089.KeyCode, true ) )
				{
					__0x1089.Handled = true;
					return;
				}
			}
		}

		void __0x934()
		{
			ItemTreeNode __0x358 = __0x990( __0x806.SelectedNode );
			if( __0x358 != null )
			{
				bool __0x359 = false;
				__0x955( __0x358.item, ref __0x359 );
				
			}
		}

		private void __0x935( object __0x1090, EventArgs __0x1091 )
		{
			
		}

		private void __0x936( object __0x1092, MouseEventArgs __0x1093 )
		{
			if( __0x1093.Button == MouseButtons.Right )
			{
				
				var __0x360 = __0x806.GetNodeAt( __0x1093.Location );
				ItemTreeNode __0x361 = __0x990( __0x360 );
				if( __0x361 != null && !__0x806.SelectedNodes.Contains( __0x360 ) )
					__0x806.SelectedNode = __0x360;

				var __0x362 = GetItemByNode( __0x361 );
				__0x958( __0x362, __0x806, __0x1093.Location );
			}
		}

		private void __0x937( object __0x1094, MouseEventArgs __0x1095 )
		{
			if( __0x1095.Button == MouseButtons.Right )
			{
				var __0x363 = __0x990( __0x806.GetNodeAt( __0x1095.Location ) );
				if( __0x363 == null )
					__0x958( null, __0x806, __0x1095.Location );
			}
		}

		public Item[] GetAllItems()
		{
			Item[] __0x364 = new Item[ __0x287.Keys.Count ];
			__0x287.Keys.CopyTo( __0x364, 0 );
			return __0x364;
		}

		void __0x938( bool __0x1096, Item __0x1097, List<Item> __0x1098 )
		{
			__0x1098.Add( __0x1097 );
			foreach( var __0x864 in __0x1097.GetChildren( __0x1096 ) )
				__0x938( __0x1096, __0x864, __0x1098 );
		}

		public List<Item> GetAllItemsByItemHierarchy( bool onlyAlreadyCreatedChildren )
		{
			var __0x365 = new List<Item>();
			foreach( var __0x865 in __0x288 )
				__0x938( onlyAlreadyCreatedChildren, __0x865, __0x365 );
			return __0x365;
		}

		public void SelectItems( IList<Item> items, bool expandNodes = false, bool considerAsSelectedByUser = false )
		
		{
			if( items == null )
				items = new Item[ 0 ];

			if( !considerAsSelectedByUser )
				__0x296 = true;

			try
			{
				

				if( items.Count != 0 )
				{
					var __0x366 = new List<TreeNodeAdv>();
					foreach( var __0x866 in items )
					{
						__0x287.TryGetValue( __0x866, out var node );
						if( node != null )
						{
							var __0x367 = __0x991( node );
							if( __0x367 != null )
								__0x366.Add( __0x367 );
						}
					}

					if( __0x366.Count != 0 )
					{
						
						if( __0x366.Count > 1 )
						{
							__0x1035();
							__0x305 = false;
							try
							{
								__0x806.ClearSelection();
								foreach( var __0x867 in __0x366 )
									__0x867.IsSelected = true;
							}
							finally
							{
								__0x305 = true;
							}
							__0x928();
							
						}
						else if( __0x366.Count == 1 )
							__0x806.SelectedNode = __0x366[ 0 ];
						else
							__0x806.SelectedNode = null;

						
						
						if( expandNodes )
						{
							foreach( var __0x868 in __0x366 )
							{
								__0x868.Expand();

								
								var __0x368 = __0x868.Children;
								if( __0x368.Count != 0 )
								{
									var __0x369 = __0x368[ __0x368.Count - 1 ];
									__0x806.EnsureVisible( __0x369 );
								}
							}
						}

						
						if( __0x366.Count > 1 )
						{
							int __0x370 = __0x366[ 0 ].Row, __0x371 = 0;
							int __0x372 = __0x366[ 0 ].Row, __0x373 = 0;

							for( int __0x374 = 0; __0x374 <= __0x366.Count - 1; __0x374++ )
							{
								if( __0x366[ __0x374 ].Row > __0x370 )
								{
									__0x370 = __0x366[ __0x374 ].Row;
									__0x371 = __0x374;
								}
								if( __0x366[ __0x374 ].Row < __0x372 )
								{
									__0x372 = __0x366[ __0x374 ].Row;
									__0x373 = __0x374;
								}
							}

							__0x806.EnsureVisible( __0x366[ __0x371 ] );
							__0x806.EnsureVisible( __0x366[ __0x373 ] );
						}
						else if( __0x366.Count == 1 )
							__0x806.EnsureVisible( __0x366[ 0 ] );


						

					}
					else
						__0x806.SelectedNode = null;
				}
				else
					__0x806.SelectedNode = null;
			}
			finally
			{
				if( !considerAsSelectedByUser )
					__0x296 = false;
			}
		}

		public void SelectItemsList( IList<Item> items, bool considerAsSelectedByUser = false )
		{
			if( !considerAsSelectedByUser )
				__0x296 = true;

			try
			{
				if( items != null && items.Count != 0 )
				{
					var __0x375 = items[ 0 ].Parent;
					if( __0x375 != null )
						SelectItems( new[] { __0x375 } );
					else
						SelectItems( new Item[ 0 ] );

					var __0x376 = new List<EngineListView.Item>();
					foreach( var __0x869 in items )
					{
						var __0x377 = GetListItemByItem( __0x869 );
						if( __0x377 != null )
							__0x376.Add( __0x377 );
					}
					__0x832.SelectedItems = __0x376;

					foreach( var __0x870 in __0x376 )
						__0x832.EnsureVisible( __0x870 );
				}
				else
				{
					

					

					__0x832.SelectedItems = new List<EngineListView.Item>();

					
				}
			}
			finally
			{
				if( !considerAsSelectedByUser )
					__0x296 = false;
			}
		}

		[Browsable( false )]
		public Item[] SelectedItems
		{
			get
			{
				List<Item> __0x378 = new List<Item>();

				if( __0x832.SelectedItems.Count != 0 )
				{
					foreach( var __0x871 in __0x832.SelectedItems )
						__0x378.Add( (Item)__0x871.Tag );
				}
				else
					__0x378.AddRange( __0x1031() );

				return __0x378.ToArray();
			}
		}

		
		
		
		

		
		
		
		
		

		
		
		
		
		

		private void __0x939( object __0x1099, EventArgs __0x1100 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x1042();

			double __0x379 = 0.05;
			{
				var __0x380 = __0x964().Count;
				if( __0x380 > 2000 )
					__0x379 = 2.0;
				else if( __0x380 > 500 )
					__0x379 = 1.0;
				else if( __0x380 > 250 )
					__0x379 = 0.5;
				else if( __0x380 > 100 )
					__0x379 = 0.35;
				else
					__0x379 = 0.2;
			}
			if( EngineApp.GetSystemTime() - __0x307 < __0x379 )
				return;

			__0x965();

			if( __0x281 != __0x280.PanelMode )
				SetPanelMode( __0x280.PanelMode, true );
			__0x1016( false );
			__0x1019();

			
			
			
			
			
			
			

			
			if( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference )
			{
				if( updatedDataSortBy != __0x280.SortFilesBy || updatedDataSortByAscending != __0x280.SortFilesByAscending )
				{
					updatedDataSortBy = __0x280.SortFilesBy;
					updatedDataSortByAscending = __0x280.SortFilesByAscending;

					

					foreach( var __0x872 in GetAllItems() )
					{
						var __0x381 = __0x872 as ContentBrowserItem_File;
						if( __0x381 != null && __0x381.IsDirectory )
							__0x381.PerformChildrenChanged();
					}
				}
			}

			__0x1005();

			__0x1032();

			
			foreach( var __0x873 in GetAllItems() )
				__0x873.LightweightUpdate();

			
			bool __0x382 = __0x309.SelectedItem?.Parent != null;
			if( __0x835.Enabled != __0x382 )
				__0x835.Enabled = __0x382;

			__0x1036();

			
			
			

			
			if( !__0x832.Visible )
				__0x832.Visible = true;

			
			if( needUpdateImages )
			{
				needUpdateImages = false;
				foreach( var __0x874 in GetAllItems() )
					__0x874.UpdateImage();
				UpdateListImages();
			}

			__0x307 = EngineApp.GetSystemTime();
		}

		public void UpdateData()
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			updatedDataSortBy = __0x280.SortFilesBy;
			updatedDataSortByAscending = __0x280.SortFilesByAscending;

			if( EditorAPI.ClosingApplication )
				return;

			var __0x383 = new List<Item>();

			if( Mode == ModeEnum.Objects )
				__0x940( __0x383 );
			else if( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference )
				__0x945( __0x383 );
			else
				Log.Fatal( "impl" );

			
			UpdateDataEvent?.Invoke( this, __0x383 );

			SetData( __0x383 );
		}

		void __0x940( List<Item> __0x1101 )
		{
			

			

			
			
			
			
			
			

			
			

			var __0x384 = __0x274 as Component;
			if( __0x384 != null )
			{
				

				var __0x385 = new ContentBrowserItem_Component( this, null, __0x384 );

				__0x385.expandAtStartup = true;
				

				
				
				
				if( __0x279 )
					__0x385.expandAllAtStartup = true;

				__0x1101.Add( __0x385 );
			}
			
			
			
			
			
			
			else
			{
				
				
				
			}

			
		}

		bool __0x941( Type __0x1102 )
		{
			if( __0x1102.IsArray )
				return true;

			
			if( __0x1102.IsGenericType && !__0x1102.IsGenericTypeDefinition )
				return true;

			
			

			return false;
		}

		internal static string GetTypeImageKey( Metadata.TypeInfo type )
		{
			switch( type.Classification )
			{
			case Metadata.TypeClassification.Enumeration: return "Enum";
			case Metadata.TypeClassification.Delegate: return "Delegate";
			}
			return "Class";
		}

		void __0x942( ContentBrowserItem_Type __0x1103 )
		{
			Type __0x386 = __0x1103.type.GetNetType();

			var __0x387 = new List<Type>( __0x386.GetNestedTypes() );
			
			CollectionUtility.MergeSort( __0x387, delegate ( Type __0x1104, Type __0x1105 )
			{
				return string.Compare( __0x1104.Name, __0x1105.Name );
			} );

			
			foreach( var __0x875 in __0x387 )
			{
				if( !__0x941( __0x875 ) ||
					( Mode == ModeEnum.SetReference && __0x275.selectTypeWindow ) )
				{
					bool __0x388 = false;
					if( Mode == ModeEnum.SetReference && __0x875.IsEnum )
						__0x388 = true;

					if( !__0x388 && Mode == ModeEnum.SetReference && __0x275.newObjectWindow )
					{
						if( !ContentBrowserUtility.ContainsComponentClasses( __0x386 ) )
							__0x388 = true;
						
						
					}
					if( !__0x388 && Mode == ModeEnum.SetReference && __0x275.selectTypeWindow )
					{
						if( !ContentBrowserUtility.ContainsType( __0x275.selectTypeDemandedType.GetNetType(), __0x386 ) )
							__0x388 = true;
						
						
					}

					if( !__0x388 )
					{
						Metadata.TypeInfo __0x389 = MetadataManager.GetTypeOfNetType( __0x875 );
						if( __0x389 != null )
						{
							var __0x390 = MetadataManager.GetNetTypeName( __0x875, true, false );
							var __0x391 = new ContentBrowserItem_Type( this, __0x1103, __0x389, __0x390 );
							__0x391.imageKey = GetTypeImageKey( __0x389 );
							__0x1103.nestedTypeChildren.Add( __0x391 );

							__0x942( __0x391 );
						}
					}
				}
			}
		}

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		

		
		void __0x943( Item __0x1106 )
		{
			List<Item> __0x392 = new List<Item>( 16384 );
			__0x1106.GetChildrenOnlyAlreadyCreatedRecursive( __0x392 );

			
			foreach( var __0x876 in __0x392.GetReverse() )
			{
				
				bool __0x393;
				{
					var __0x394 = __0x876 as ContentBrowserItem_Type;
					if( __0x394 != null )
					{
						__0x393 = true;

						if( !FilteringMode.AddItem( __0x394 ) )
							__0x393 = false;

						
					}
					else
						__0x393 = false;
				}

				bool __0x395 = !__0x393 && __0x876.GetChildrenFilter( false ).Count == 0;
				
				if( __0x395 )
				{
					var __0x396 = __0x876.Parent;

					var __0x397 = __0x396 as ContentBrowserItem_Type;
					var __0x398 = __0x396 as ContentBrowserItem_Virtual;

					if( __0x397 != null )
						__0x397.DeleteNestedTypeChild( __0x876 );
					else if( __0x398 != null )
						__0x398.DeleteChild( __0x876 );
					else
					{
						
					}
				}
			}
		}

		void __0x944( Item __0x1107 )
		{
			

			List<Item> __0x399 = new List<Item>( 16384 );
			__0x1107.GetChildrenOnlyAlreadyCreatedRecursive( __0x399 );

			
			foreach( var __0x877 in __0x399.GetReverse() )
			{
				
				bool __0x400;
				{
					var __0x401 = __0x877 as ContentBrowserItem_Type;
					if( __0x401 != null )
					{
						__0x400 = false;

						var __0x402 = SetReferenceModeData.DemandedType;

						if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( __0x402 ) )
						{
							
							__0x400 = true;

							
							if( SetReferenceModeData.newObjectWindow )
							{
								var __0x403 = __0x401.type;
								if( !MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x403 ) || __0x403.Abstract )
									__0x400 = false;
							}
							if( SetReferenceModeData.selectTypeWindow )
							{
								var __0x404 = __0x401.type;
								if( !__0x275.selectTypeDemandedType.IsAssignableFrom( __0x404 ) || __0x404.Abstract && !__0x275.selectTypeWindowCanSelectAbstractClass )
									__0x400 = false;
								
								
							}
						}
						else
						{
							
							foreach( var __0x878 in __0x401.Type.MetadataGetMembers() )
							{
								if( ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x402, __0x878, true ) )
								{
									__0x400 = true;
									break;
								}
							}
						}
					}
					else
						__0x400 = false;
				}

				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				bool __0x405 = !__0x400 && __0x877.GetChildrenFilter( true ).Count == 0;
				if( __0x405 )
				{
					var __0x406 = __0x877.Parent;

					var __0x407 = __0x406 as ContentBrowserItem_Type;
					var __0x408 = __0x406 as ContentBrowserItem_Virtual;

					if( __0x407 != null )
						__0x407.DeleteNestedTypeChild( __0x877 );
					else if( __0x408 != null )
						__0x408.DeleteChild( __0x877 );
					else
					{
						
					}
				}
			}
		}

		void __0x945( List<Item> __0x1108 )
		{
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			if( Mode == ModeEnum.SetReference && __0x275.selectedComponents != null )
			{
				ESet<Component> __0x409 = new ESet<Component>();

				Component __0x410 = null;
				{
					foreach( var __0x879 in __0x275.selectedComponents )
					{
						var __0x411 = __0x879 as Component;
						if( __0x411 != null )
						{
							if( __0x410 == null )
								__0x410 = __0x411;
							else
							{
								if( __0x410 != __0x411 )
								{
									__0x410 = null;
									break;
								}
							}
						}
					}
				}

				if( __0x410 != null )
				{
					var __0x412 = new ContentBrowserItem_Component( this, null, __0x410 );
					__0x412.SpecialTextPrefix = "this: ";
					__0x412.ReferenceSelectionMode = ContentBrowserItem_Component.ReferenceSelectionModeEnum.This;
					__0x1108.Add( __0x412 );
				}
			}

			
			
			if( Mode == ModeEnum.SetReference && __0x275.selectedComponents != null )
			{
				Component __0x413 = null;
				{
					foreach( var __0x880 in __0x275.selectedComponents )
					{
						var __0x414 = __0x880 as Component;
						if( __0x414 != null )
						{
							if( __0x413 == null )
								__0x413 = __0x414.ParentRoot;
							else
							{
								if( __0x413 != __0x414.ParentRoot )
								{
									__0x413 = null;
									break;
								}
							}
						}
					}
				}

				if( __0x413 != null )
				{
					var __0x415 = new ContentBrowserItem_Component( this, null, __0x413 );
					__0x415.SpecialTextPrefix = "root: ";
					__0x415.ReferenceSelectionMode = ContentBrowserItem_Component.ReferenceSelectionModeEnum.Root;
					__0x1108.Add( __0x415 );
				}
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			

			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			if( ( Mode == ModeEnum.Resources && ( FilteringMode == null || FilteringMode.AddGroupsBaseTypesAddonsProject ) ) || ( Mode == ModeEnum.SetReference && MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( SetReferenceModeData.DemandedType ) && !__0x275.selectTypeWindow ) )
			{
				ResourcesWindowItems.PrepareItems();

				Dictionary<string, Item> __0x416 = new Dictionary<string, ContentBrowser.Item>();

				Item GetBrowserItemByPath( string __0x1109 )
				{
					__0x416.TryGetValue( __0x1109, out var item );
					return item;
				}

				

				foreach( var __0x881 in ResourcesWindowItems.Items )
				{
					
					if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x881 ) )
						continue;

					
					bool __0x417 = false;
					if( Mode == ModeEnum.SetReference )
					{
						if( __0x275.newObjectWindow && !__0x275.newObjectWindowFileCreation )
						{
							if( !typeof( Component ).IsAssignableFrom( __0x881.Type ) )
								__0x417 = true;
						}
					}
					if( __0x417 )
						continue;

					var __0x418 = __0x881.Path.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

					string __0x419 = "";
					for( int __0x420 = 0; __0x420 < __0x418.Length; __0x420++ )
					{
						__0x419 = Path.Combine( __0x419, __0x418[ __0x420 ] );

						
						ContentBrowserItem_Virtual __0x421 = null;
						if( __0x420 != 0 )
							__0x421 = GetBrowserItemByPath( Path.GetDirectoryName( __0x419 ) ) as ContentBrowserItem_Virtual;

						if( GetBrowserItemByPath( __0x419 ) == null )
						{
							

							Item __0x422 = null;

							
							bool __0x423 = __0x420 < __0x418.Length - 1;
							if( __0x423 )
							{
								var __0x424 = EditorLocalization.Translate( "ContentBrowser.Group", __0x418[ __0x420 ] );
								var __0x425 = new ContentBrowserItem_Virtual( this, __0x421, __0x424 );

								

								__0x422 = __0x425;
								__0x422.imageKey = "Folder";

								ResourcesWindowItems.GroupDescriptions.TryGetValue( __0x419, out var description );
								if( !string.IsNullOrEmpty( description ) )
									__0x425.Description = description;
							}
							else
							{
								var __0x426 = MetadataManager.GetTypeOfNetType( __0x881.Type );
								var __0x427 = new ContentBrowserItem_Type( this, __0x421, __0x426, __0x418[ __0x420 ] );
								__0x422 = __0x427;
								__0x427.imageKey = GetTypeImageKey( __0x426 );
								__0x427.memberCreationDisable = true;
								__0x427.ShowDisabled = __0x881.Disabled;
							}

							if( __0x421 != null )
								__0x421.children.Add( __0x422 );

							__0x416.Add( __0x419, __0x422 );
							if( __0x420 == 0 )
							{
								__0x1108.Add( __0x422 );
								
							}
						}
					}
				}

				
				{
					var __0x428 = GetBrowserItemByPath( "Base" );
					if( __0x428 != null )
						__0x428.expandAtStartup = true;
				}

				
				
				
				
				
				
				

				

				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				

				
				
				

				
				
				
				
				
				
				
				


			}

			
			
			if( EditorFavorites.AllowFavorites && ( ( Mode == ModeEnum.Resources && ( FilteringMode == null || FilteringMode.AddGroupsBaseTypesAddonsProject ) ) || ( Mode == ModeEnum.SetReference && MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( SetReferenceModeData.DemandedType ) && !__0x275.selectTypeWindow ) ) )
			{
				__0x289 = new ContentBrowserItem_Favorites( this, null, EditorLocalization.Translate( "ContentBrowser.Group", "Favorites" ) );
				__0x289.imageKey = "Folder";

				if( Mode == ModeEnum.SetReference )
					__0x944( (Item)__0x289 );

				
				if( Mode == ModeEnum.Resources && FilteringMode != null )
					__0x943( (Item)__0x289 );

				if( __0x289 != null )
					__0x1108.Add( __0x289 );
			}

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			if( AllowAllTypes && ( ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference ) && ( FilteringMode == null || FilteringMode.AddGroupAllTypes ) ) )
			{
				ContentBrowserItem_Virtual __0x429 = null;

				
				__0x429 = new ContentBrowserItem_Virtual( this, null, EditorLocalization.Translate( "ContentBrowser.Group", "All types" ) );
				
				__0x429.imageKey = "Folder";
				

				
				
				List<Metadata.NetTypeInfo> __0x430 = new List<Metadata.NetTypeInfo>( 16384 );
				ESet<string> __0x431 = new ESet<string>();

				foreach( var __0x882 in MetadataManager.NetTypes )
				{
					var __0x432 = __0x882.Type;

					if( !__0x432.IsNested && !__0x941( __0x432 ) )
					{
						bool __0x433 = false;
						if( Mode == ModeEnum.SetReference && __0x432.IsEnum )
							__0x433 = true;

						if( !__0x433 && Mode == ModeEnum.SetReference && __0x275.newObjectWindow )
						{
							if( !ContentBrowserUtility.ContainsComponentClasses( __0x432 ) )
								__0x433 = true;
							
							
						}
						if( !__0x433 && Mode == ModeEnum.SetReference && __0x275.selectTypeWindow )
						{
							if( !ContentBrowserUtility.ContainsType( __0x275.selectTypeDemandedType.GetNetType(), __0x432 ) )
								__0x433 = true;
							
							
						}

						if( !__0x433 )
						{
							__0x430.Add( __0x882 );

							
							if( !string.IsNullOrEmpty( __0x882.Namespace ) )
								__0x431.AddWithCheckAlreadyContained( __0x882.Namespace );
						}
					}
				}

				
				List<string> __0x434 = new List<string>( __0x431 );
				CollectionUtility.MergeSort( __0x434, delegate ( string __0x1110, string __0x1111 )
				{
					return string.Compare( __0x1110, __0x1111 );
				} );

				
				CollectionUtility.MergeSort( __0x430, delegate ( Metadata.NetTypeInfo __0x1112, Metadata.NetTypeInfo __0x1113 )
				{
					return string.Compare( __0x1112.ToString(), __0x1113.ToString() );
				} );

				foreach( string __0x883 in __0x434 )
				{
					
					var __0x435 = new ContentBrowserItem_Virtual( this, __0x429, __0x883 );
					__0x435.imageKey = "Namespace";
					__0x429.children.Add( __0x435 );

					foreach( var __0x884 in __0x430 )
					{
						var __0x436 = __0x884.Type;

						if( __0x884.Namespace == __0x883 )
						{
							
							var __0x437 = MetadataManager.GetNetTypeName( __0x436, true, false );
							var __0x438 = new ContentBrowserItem_Type( this, __0x435, __0x884, __0x437 );
							__0x438.imageKey = GetTypeImageKey( __0x884 );
							__0x435.children.Add( __0x438 );

							
							__0x942( __0x438 );
						}
					}
				}

				

				
				
				
				
				
				
				
				
				

				

				
				
				if( Mode == ModeEnum.SetReference )
					__0x944( (Item)__0x429 );

				
				if( Mode == ModeEnum.Resources && FilteringMode != null )
				{
					__0x943( (Item)__0x429 );

					
					
					var __0x439 = __0x429.GetChildrenFilter( true );
					if( __0x439.Count == 1 )
					{
						__0x429.expandAtStartup = true;
						if( __0x439[ 0 ].GetChildrenFilter( true ).Count <= 10 )
							__0x439[ 0 ].expandAtStartup = true;
					}
				}

				
				if( Mode == ModeEnum.SetReference && __0x275.selectTypeWindow )
				{
					var __0x440 = __0x429.GetChildrenFilter( true );
					if( __0x440.Count < 20 )
					{
						__0x429.expandAtStartup = true;
						if( __0x440.Count == 1 )
						{
							if( __0x440[ 0 ].GetChildrenFilter( true ).Count <= 10 )
								__0x440[ 0 ].expandAtStartup = true;
						}
					}
				}

				if( __0x429 != null )
					__0x1108.Add( __0x429 );
			}

			
			
			
			
			
			

			
			

			
			
			

			
			
			if( FilteringMode == null || FilteringMode.AddFiles )
			{
				__0x290 = new ContentBrowserItem_File( this, null, VirtualFileSystem.Directories.Assets, true );
				__0x290.SetText( EditorLocalization.Translate( "ContentBrowser.Group", "Assets" ) );
				__0x290.imageKey = "Folder";
				__0x290.expandAtStartup = true;
				if( Mode == ModeEnum.SetReference && __0x275.selectTypeWindow )
					__0x290.expandAtStartup = false;

				if( FilteringMode != null && FilteringMode.ExpandAllFileItemsAtStartup )
					__0x290.expandAllAtStartup = true;
			}
			if( __0x290 != null )
				__0x1108.Add( __0x290 );

			
			
			if(  Mode == ModeEnum.SetReference && SetReferenceModeData.allowNull )
			
			
			
			
			
			{
				var __0x441 = new ContentBrowserItem_Null( this, null, "Null" );
				if( __0x441 != null )
					__0x1108.Add( __0x441 );
			}

			
		}

		string __0x946( string __0x1114 )
		{
			return EditorLocalization.Translate( "ContentBrowser", __0x1114 );
		}

		public bool CanNewObject( out Item newParentItem )
		{
			if( ReadOnlyHierarchy )
			{
				newParentItem = null;
				return false;
			}

			Item __0x442 = null;
			if( SelectedItems.Length == 1 )
				__0x442 = SelectedItems[ 0 ];

			

			if( __0x442 != null && __0x442.ContainedObject != null )
			{
				
				var __0x443 = __0x442 as ContentBrowserItem_Component;
				if( __0x443 != null && __0x443.Component != null && !__0x443.Component.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x443.Component ) != null )
				{
					newParentItem = __0x442;
					return true;
				}

				
				
				
				
				
				
				

				
				
				
				
				
				
				
			}

			newParentItem = null;
			return false;
		}

		
		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			Item __0x444;
			if( !CanNewObject( out __0x444 ) )
				return;

			

			
			
			
			
			
			

			
			
			
			

			
			
			
			

			

			
			

			
			
			

			
			

			
			

			

			
			

			
			
			
			

			
			
			

			
			{
				
			}

			
			var __0x445 = __0x444.ContainedObject;

			var __0x446 = new NewObjectWindow.CreationDataClass();
			__0x446.initDocumentWindow = DocumentWindow;

			__0x446.initParentObjects = new List<object>();
			
			__0x446.initParentObjects.Add( __0x445 );

			__0x446.createdFromContentBrowser = this;

			__0x446.initLockType = lockType;
			__0x446.initSupportAutoCreateAndClose = lockType != null;

			
			
			

			EditorAPI.OpenNewObjectWindow( __0x446 );

			
			
		}

		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		

		
		private void __0x947( FileSystemEventArgs __0x1115 )
		{
			

			switch( __0x1115.ChangeType )
			{
			case WatcherChangeTypes.Created:
			case WatcherChangeTypes.Deleted:
				{
					var __0x447 = Path.GetDirectoryName( __0x1115.FullPath );
					string __0x448 = VirtualPathUtility.GetVirtualPathByReal( __0x447 );
					__0x948( __0x448 );
				}
				break;

			case WatcherChangeTypes.Renamed:
				{
					RenamedEventArgs __0x449 = (RenamedEventArgs)__0x1115;

					

					var __0x450 = Path.GetDirectoryName( __0x449.OldFullPath );
					string __0x451 = VirtualPathUtility.GetVirtualPathByReal( __0x450 );
					__0x948( __0x451 );

					var __0x452 = Path.GetDirectoryName( __0x1115.FullPath );
					string __0x453 = VirtualPathUtility.GetVirtualPathByReal( __0x452 );
					if( string.Compare( __0x451, __0x453, true ) != 0 )
						__0x948( __0x453 );
				}
				break;

			case WatcherChangeTypes.Changed:
				{
					

				}
				break;
			}
		}

		void __0x948( string __0x1116 )
		{
			
			if( __0x290 != null )
			{
				var __0x454 = __0x1116.Split( new char[] { '/', '\\' }, StringSplitOptions.RemoveEmptyEntries );

				string __0x455 = "";
				ContentBrowserItem_File __0x456 = __0x290;

				for( int __0x457 = 0; __0x457 < __0x454.Length; __0x457++ )
				{
					__0x455 = Path.Combine( __0x455, __0x454[ __0x457 ] );

					string __0x458 = VirtualPathUtility.GetRealPathByVirtual( __0x455 );
					string __0x459 = ContentBrowserItem_File.GetFileChildrenKey( __0x458 );

					if( !__0x456.FileChildren.TryGetValue( __0x459, out Item item ) )
					{
						__0x456 = null;
						break;
					}

					__0x456 = (ContentBrowserItem_File)item;
				}

				
				if( __0x456 != null )
				{
					Item __0x460 = __0x456;
					while( __0x460 != null )
					{
						__0x460.PerformChildrenChanged();
						__0x460 = __0x460.Parent;
					}
				}
			}

			
			if( __0x289 != null )
			{
				var __0x461 = VirtualPathUtility.GetRealPathByVirtual( __0x1116 );

				foreach( var __0x885 in __0x289.GetChildren( true ).ToArray() )
				{
					var __0x462 = __0x885 as ContentBrowserItem_File;
					if( __0x462 != null && __0x462.FullPath == __0x461 )
						__0x462.PerformChildrenChanged();
				}
			}
		}

		
		private void __0x949( Resource.Instance __0x1117 )
		{
			if( EngineApp.Closing )
				return;
			if( __0x1117.InstanceType != Resource.InstanceType.Resource )
				return;

			

			

			switch( __0x1117.Status )
			{
			case Resource.Instance.StatusEnum.CreationProcess:
				break;

			case Resource.Instance.StatusEnum.Error:
				break;

			case Resource.Instance.StatusEnum.Ready:
				{
					
					if( __0x1117.Owner.LoadFromFile )
					{
						var __0x463 = __0x1117.Owner.Name;
						__0x948( __0x463 );
					}
				}
				break;
			}
		}

		
		private void __0x950( Resource.Instance __0x1118 )
		{
			if( EngineApp.Closing )
				return;
			if( __0x1118.InstanceType != Resource.InstanceType.Resource )
				return;

			
			if( __0x1118.Owner.LoadFromFile )
			{
				var __0x464 = __0x1118.Owner.Name;
				__0x948( __0x464 );
			}
		}

		
		void __0x951( Item __0x1119 )
		{
			


			
			bool __0x465 = true;

			
			
			if( __0x1119 != null && __0x465 )
			{
				
				

				ContentBrowserItem_File __0x466 = __0x1119 as ContentBrowserItem_File;
				if( __0x466 != null && !__0x466.IsDirectory )
				{
					

					
					

					
					var __0x467 = Path.GetExtension( __0x466.FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x467 ) != null )
					{
						string __0x468 = VirtualPathUtility.GetVirtualPathByReal( __0x466.FullPath );
						if( string.IsNullOrEmpty( __0x468 ) )
						{
							
						}

						
						
						
						var __0x469 = ResourceManager.LoadResource( __0x468, true );
					}
				}
			}
		}

		
		
		


		
		

		
		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		void __0x952()
		{
			var __0x470 = new List<object>();

			
			

			foreach( var __0x886 in SelectedItems )
			{
				

				
				var __0x471 = __0x886 as ContentBrowserItem_File;
				if( __0x471 != null && !__0x471.IsDirectory )
				{
					

					

					
					

					
					var __0x472 = Path.GetExtension( __0x471.FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x472 ) != null )
					{
						string __0x473 = VirtualPathUtility.GetVirtualPathByReal( __0x471.FullPath );
						if( string.IsNullOrEmpty( __0x473 ) )
						{
							
						}

						
						var __0x474 = ResourceManager.LoadResource( __0x473, true );

						if( __0x474 != null && __0x474.ResultObject != null )
						{
							var __0x475 = __0x474.ResultComponent;
							if( __0x475 != null )
								__0x470.Add( __0x475 );
						}
					}
				}

				
				var __0x476 = __0x886 as ContentBrowserItem_Component;
				if( __0x476 != null && __0x476.Component != null )
					__0x470.Add( __0x476.Component );

				
				
				
				
				
				
				

				
				
				
				
				
			}

			
			
			

			SettingsWindow.Instance?.SelectObjects( __0x273, __0x470 );
		}

		private void __0x953( ContentBrowser __0x1120, IList<Item> __0x1121, bool __0x1122, ref bool __0x1123 )
		{
			if( EditorAPI.ClosingApplication )
				return;
			if( DocumentWindow?.Document != null && DocumentWindow.Document.Destroyed )
				return;

			

			
			

			
			
			
			
			
			

			

			var __0x477 = false;

			if( PreloadResourceOnSelection )
			{
				foreach( var __0x887 in __0x1121 )
				{
					ContentBrowserItem_File __0x478 = __0x887 as ContentBrowserItem_File;
					if( __0x478 != null && !__0x478.IsDirectory )
					{
						

						
						

						
						var __0x479 = Path.GetExtension( __0x478.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x479 ) != null )
						{
							string __0x480 = VirtualPathUtility.GetVirtualPathByReal( __0x478.FullPath );
							if( string.IsNullOrEmpty( __0x480 ) )
							{
								
							}

							
							
							
							var __0x481 = ResourceManager.LoadResource( __0x480, true );
							if( __0x481 == null )
								__0x477 = true;

							
							
							

							
							
							
							
							
							
							
							
						}
					}
					else
					{
						
						
						
						
						
						
						
						
						
						
						
					}
				}
			}

			
			
			
			
			
			
			
			

			if( CanSelectObjectSettings && __0x1122 && !__0x477 )
				__0x952();
			
		}

		
		void __0x954( ContentBrowserItem_File __0x1124, ref bool __0x1125 )
		{
			

			

			

			
			

			if( EditorAPI.IsDocumentFileSupport( __0x1124.FullPath ) )
			{
				

				

				EditorAPI.OpenFileAsDocument( __0x1124.FullPath, true, true );
				
				
				
				
				
				

				__0x1125 = true;
			}
			else
			{
				
			}
		}

		void __0x955( Item __0x1126, ref bool __0x1127 )
		{
			ItemAfterChoose?.Invoke( this, __0x1126, ref __0x1127 );
			if( __0x1127 )
				return;

			

			

			
			
			

			
			

			
			
			if( Mode == ModeEnum.Resources )
			{
				ContentBrowserItem_File __0x482 = __0x1126 as ContentBrowserItem_File;
				if( __0x482 != null && !__0x482.IsDirectory )
				{
					__0x954( __0x482, ref __0x1127 );
				}
			}

			

			
			
			
			
			
			
			

			
			
			
			

		}

		void __0x956()
		{
			
		}

		void __0x957( List<KryptonContextMenuItemBase> __0x1128 )
		{
			KryptonContextMenuItem __0x483;

			KryptonContextMenuItem __0x484 = new KryptonContextMenuItem( __0x946( "Sort by" ), null );
			List<KryptonContextMenuItemBase> __0x485 = new List<KryptonContextMenuItemBase>();

			
			__0x483 = new KryptonContextMenuItem( __0x946( "Name" ), null, delegate ( object __0x1129, EventArgs __0x1130 )
			{
				if( __0x280.SortFilesBy != SortByItems.Name )
				{
					__0x280.SortFilesBy = SortByItems.Name;
					__0x956();
				}
			} );
			__0x483.Checked = __0x280.SortFilesBy == SortByItems.Name;
			__0x485.Add( __0x483 );

			
			__0x483 = new KryptonContextMenuItem( __0x946( "Date" ), null, delegate ( object __0x1131, EventArgs __0x1132 )
			{
				if( __0x280.SortFilesBy != SortByItems.Date )
				{
					__0x280.SortFilesBy = SortByItems.Date;
					__0x956();
				}
			} );
			__0x483.Checked = __0x280.SortFilesBy == SortByItems.Date;
			__0x485.Add( __0x483 );

			
			__0x483 = new KryptonContextMenuItem( __0x946( "Type" ), null, delegate ( object __0x1133, EventArgs __0x1134 )
			{
				if( __0x280.SortFilesBy != SortByItems.Type )
				{
					__0x280.SortFilesBy = SortByItems.Type;
					__0x956();
				}
			} );
			__0x483.Checked = __0x280.SortFilesBy == SortByItems.Type;
			__0x485.Add( __0x483 );

			
			__0x483 = new KryptonContextMenuItem( __0x946( "Size" ), null, delegate ( object __0x1135, EventArgs __0x1136 )
			{
				if( __0x280.SortFilesBy != SortByItems.Size )
				{
					__0x280.SortFilesBy = SortByItems.Size;
					__0x956();
				}
			} );
			__0x483.Checked = __0x280.SortFilesBy == SortByItems.Size;
			__0x485.Add( __0x483 );

			
			__0x485.Add( new KryptonContextMenuSeparator() );

			
			__0x483 = new KryptonContextMenuItem( __0x946( "Ascending" ), null, delegate ( object __0x1137, EventArgs __0x1138 )
			{
				__0x280.SortFilesByAscending = !__0x280.SortFilesByAscending;
				__0x956();
			} );
			__0x483.Checked = __0x280.SortFilesByAscending;
			__0x485.Add( __0x483 );


			__0x484.Items.Add( new KryptonContextMenuItems( __0x485.ToArray() ) );
			__0x1128.Add( __0x484 );
		}

		void __0x958( Item __0x1139, Control __0x1140, Point __0x1141 )
		{
			
			if( ReadOnlyHierarchy )
				return;

			
			
			

			var __0x486 = new List<KryptonContextMenuItemBase>();

			
			if( __0x1139 != null )
			{
				var __0x487 = __0x1139 as ContentBrowserItem_Component;
				if( __0x487 != null )
				{
					var __0x488 = EditorAPI.GetDocumentByObject( __0x487.Component );

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					{
						
						

						

						


						
						
						{
							

							

							
							
							var __0x489 = new KryptonContextMenuItem( __0x946( "Editor" ), EditorResourcesCache.Edit,
								delegate ( object __0x1142, EventArgs __0x1143 )
								{
									EditorAPI.OpenDocumentWindowForObject( DocumentWindow != null ? DocumentWindow.Document : null, __0x487.Component );
								} );
							__0x489.Enabled = __0x487.Component != null &&
								EditorAPI.IsDocumentObjectSupport( __0x487.Component ) &&
								!__0x487.Component.EditorReadOnlyInHierarchy;
							__0x486.Add( __0x489 );
						}

						
						{
							var __0x490 = new KryptonContextMenuItem( __0x946( "Settings" ), EditorResourcesCache.Settings,
								delegate ( object __0x1144, EventArgs __0x1145 )
								{
									EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
								} );
							__0x486.Add( __0x490 );
						}

						
						if( EditorUtility.AllowSeparateSettings )
						{
							var __0x491 = new KryptonContextMenuItem( __0x946( "Separate Settings" ), EditorResourcesCache.Settings,
								delegate ( object __0x1146, EventArgs __0x1147 )
								{
									if( __0x487 != null )
									{
										bool __0x492 = !ModifierKeys.HasFlag( Keys.Shift );
										EditorAPI.ShowObjectSettingsWindow( DocumentWindow.Document, __0x487.Component, __0x492 );
									}
									else
									{
										
										Log.Warning( "impl" );
									}
								} );
							__0x491.Enabled = __0x487.Component != null && !__0x487.Component.EditorReadOnlyInHierarchy && __0x488 != null;

							var __0x493 = ComponentUtility.GetResourceInstanceByComponent( __0x487.Component );
							if( __0x493 != null && __0x493.InstanceType == Resource.InstanceType.Resource )
								__0x491.Enabled = false;

							
							__0x486.Add( __0x491 );
						}

						__0x486.Add( new KryptonContextMenuSeparator() );

						
						{
							EditorContextMenuWinForms.AddNewObjectItem( __0x486, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x1148 )
							{
								TryNewObject( __0x1148 );
							} );

							
							
							
							
							
							
							
							
							
						}

						
						__0x486.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x494 = new KryptonContextMenuItem( __0x946( "Cut" ), EditorResourcesCache.Cut,
								delegate ( object __0x1149, EventArgs __0x1150 )
								{
									Cut();
								} );
							__0x494.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
							__0x494.Enabled = CanCut();
							__0x486.Add( __0x494 );
						}

						
						{
							var __0x495 = new KryptonContextMenuItem( __0x946( "Copy" ), EditorResourcesCache.Copy,
								delegate ( object __0x1151, EventArgs __0x1152 )
								{
									Copy();
								} );
							__0x495.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
							__0x495.Enabled = CanCopy();
							__0x486.Add( __0x495 );
						}

						
						{
							var __0x496 = new KryptonContextMenuItem( __0x946( "Paste" ), EditorResourcesCache.Paste,
								delegate ( object __0x1153, EventArgs __0x1154 )
								{
									Paste();
								} );
							__0x496.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
							__0x496.Enabled = CanPaste( out _, out _, out _, out _ );
							__0x486.Add( __0x496 );
						}

						
						{
							var __0x497 = new KryptonContextMenuItem( __0x946( "Duplicate" ), EditorResourcesCache.Clone,
								delegate ( object __0x1155, EventArgs __0x1156 )
								{
									TryCloneObjects();
								} );
							__0x497.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
							__0x497.Enabled = CanCloneObjects( out _ );
							__0x486.Add( __0x497 );
						}

						
						{
							var __0x498 = new KryptonContextMenuItem( __0x946( "Export to File" ), null, delegate ( object __0x1157, EventArgs __0x1158 )
							{
								EditorUtility.ExportComponentToFile( __0x487.Component );
							} );
							__0x498.Enabled = true;
							__0x486.Add( __0x498 );
						}

						
						__0x486.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x499 = new KryptonContextMenuItem( __0x946( "Delete" ), EditorResourcesCache.Delete,
								delegate ( object __0x1159, EventArgs __0x1160 )
								{
									TryDeleteObjects();
								} );
							__0x499.Enabled = CanDeleteObjects( out _ );
							__0x486.Add( __0x499 );
						}

						
						{
							var __0x500 = new KryptonContextMenuItem( __0x946( "Rename" ), null,
								delegate ( object __0x1161, EventArgs __0x1162 )
								{
									__0x997();
								} );
							__0x500.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
							__0x500.Enabled = __0x996();
							__0x486.Add( __0x500 );
						}
					}

					
					

					
					

					
					
					
					
					

					
					
					
					
					
					

					
					
					

					
					
					

					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					

					

					
					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					

					
					
					
					
					

					
					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					



					
					

					
					
					
					
					
					
					
					
					
					
				}
			}

			
			if( __0x1139 != null )
			{
				

				ContentBrowserItem_File __0x501 = null;
				var __0x502 = __0x1139 as ContentBrowserItem_File;
				{
					if( __0x502 != null )
					{
						if( !__0x502.IsDirectory )
						{
							var __0x503 = __0x502.Parent as ContentBrowserItem_File;
							if( __0x503 != null && __0x503.IsDirectory )
								__0x501 = __0x503;
						}
						else
							__0x501 = __0x502;
					}
				}

				if( __0x502 != null )
				{

					
					
					if( __0x502 != null && !__0x502.IsDirectory )
					{
						var __0x504 = new KryptonContextMenuItem( __0x946( "Open" ), null, delegate ( object __0x1163, EventArgs __0x1164 )
						{
							
							bool __0x505 = false;
							__0x954( __0x502, ref __0x505 );
						} );

						
						

						__0x504.Enabled = EditorAPI.IsDocumentFileSupport( __0x502.FullPath );
						
						__0x486.Add( __0x504 );
					}

					
					if( __0x502 != null && !__0x502.IsDirectory )
					{
						
						KryptonContextMenuItem __0x506 = new KryptonContextMenuItem( __0x946( "Open with" ), null );
						
						__0x506.Enabled = __0x501 != null || __0x1139.Parent == null;

						List<KryptonContextMenuItemBase> __0x507 = new List<KryptonContextMenuItemBase>();

						

						
						
						{
							var __0x508 = new KryptonContextMenuItem( __0x946( "Text editor" ), null,
							   delegate ( object __0x1165, EventArgs __0x1166 )
							   {
								   EditorAPI.OpenFileAsDocument( __0x502.FullPath, true, true, specialMode: "TextEditor" );

								   

								   
								   

								   
								   
							   } );
							__0x507.Add( __0x508 );
						}

						
						
						{
							var __0x509 = new KryptonContextMenuItem( __0x946( "External app" ), null,
							delegate ( object __0x1167, EventArgs __0x1168 )
							{
								string __0x510 = __0x502.FullPath;
								try
								{
									Process.Start( "rundll32.exe", "shell32.dll, OpenAs_RunDLL " + __0x510 );
								}
								catch( Exception e )
								{
									EditorMessageBox.ShowWarning( e.Message );
								}
							} );
							__0x507.Add( __0x509 );
						}

						
						

						
						
						
						
						
						
						
						
						

						__0x506.Items.Add( new KryptonContextMenuItems( __0x507.ToArray() ) );
						__0x486.Add( __0x506 );
					}

					if( __0x502.IsDirectory )
					{
						
						if( __0x486.Count != 0 )
							__0x486.Add( new KryptonContextMenuSeparator() );

						
						{
							var __0x511 = new KryptonContextMenuItem( __0x946( "New Folder" ), EditorResourcesCache.NewFolder,
							   delegate ( object __0x1169, EventArgs __0x1170 )
							   {
								   __0x999();
							   } );
							__0x511.Enabled = __0x998( out _ );
							__0x486.Add( __0x511 );
						}

						
						{
							EditorContextMenuWinForms.AddNewResourceItem( __0x486, __0x1000( out _ ), delegate ( Metadata.TypeInfo __0x1171 )
							{
								__0x1001( __0x1171 );
							} );

							
							
							
							
							
							
							
						}

						
						{
							var __0x512 = new KryptonContextMenuItem( __0x946( "Import" ), EditorResourcesCache.Import,
							   delegate ( object __0x1172, EventArgs __0x1173 )
							   {
								   __0x1003();
							   } );
							__0x512.Enabled = __0x1002( out _ );
							__0x486.Add( __0x512 );
						}
					}

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					

					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					

					

					
					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					if( __0x502.IsDirectory )
					{
						
						if( __0x486.Count != 0 )
							__0x486.Add( new KryptonContextMenuSeparator() );

						var __0x513 = new KryptonContextMenuItem( __0x946( "Open Folder in Explorer" ), null, delegate ( object __0x1174, EventArgs __0x1175 )
						{
							
							string __0x514 = __0x501.FullPath;
							Win32Utility.ShellExecuteEx( null, __0x514 );
						} );
						__0x513.Enabled = __0x501 != null;
						__0x486.Add( __0x513 );
					}

					
					if( __0x486.Count != 0 )
						__0x486.Add( new KryptonContextMenuSeparator() );

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					

					
					
					
					
					

					
					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					

					
					{
						var __0x515 = new KryptonContextMenuItem( __0x946( "Cut" ), EditorResourcesCache.Cut,
							delegate ( object __0x1176, EventArgs __0x1177 )
							{
								Cut();
							} );
						__0x515.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
						__0x515.Enabled = CanCut();
						__0x486.Add( __0x515 );
					}

					
					{
						var __0x516 = new KryptonContextMenuItem( __0x946( "Copy" ), EditorResourcesCache.Copy,
							delegate ( object __0x1178, EventArgs __0x1179 )
							{
								Copy();
							} );
						__0x516.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
						__0x516.Enabled = CanCopy();
						__0x486.Add( __0x516 );
					}

					
					if( __0x502.IsDirectory || ( !__0x502.IsDirectory && CanPaste( out _, out _, out _, out _ ) ) )
					{
						var __0x517 = new KryptonContextMenuItem( __0x946( "Paste" ), EditorResourcesCache.Paste,
							delegate ( object __0x1180, EventArgs __0x1181 )
							{
								Paste();
							} );
						__0x517.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
						__0x517.Enabled = CanPaste( out _, out _, out _, out _ );
						__0x486.Add( __0x517 );
					}

					
					if( EditorFavorites.AllowFavorites && !__0x502.IsDirectory )
					{
						
						__0x486.Add( new KryptonContextMenuSeparator() );

						var __0x518 = VirtualPathUtility.GetVirtualPathByReal( __0x502.FullPath );

						if( __0x1139.Parent != __0x289 )
						{
							

							var __0x519 = new KryptonContextMenuItem( __0x946( "Add to Favorites" ), EditorResourcesCache.Add,
							   delegate ( object __0x1182, EventArgs __0x1183 )
							   {
								   __0x1046();

								   
								   ContentBrowser __0x520 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x520 != this )
									   __0x520.__0x289?.PerformChildrenChanged();
								   __0x289?.PerformChildrenChanged();
							   } );
							__0x519.Enabled = __0x1045( true );
							__0x486.Add( __0x519 );
						}
						else
						{
							

							var __0x521 = new KryptonContextMenuItem( __0x946( "Remove from Favorites" ), EditorResourcesCache.Delete,
							   delegate ( object __0x1184, EventArgs __0x1185 )
							   {
								   __0x1047();

								   
								   ContentBrowser __0x522 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x522 != this )
									   __0x522.__0x289?.PerformChildrenChanged();
								   __0x289?.PerformChildrenChanged();
							   } );
							__0x521.Enabled = __0x1045( false );
							__0x486.Add( __0x521 );
						}
					}

					
					__0x486.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x523 = new KryptonContextMenuItem( __0x946( "Delete" ), EditorResourcesCache.Delete,
							delegate ( object __0x1186, EventArgs __0x1187 )
							{
								TryDeleteObjects();
							} );
						__0x523.Enabled = CanDeleteObjects( out _ );
						__0x486.Add( __0x523 );
					}

					
					{
						var __0x524 = new KryptonContextMenuItem( __0x946( "Rename" ), null,
							delegate ( object __0x1188, EventArgs __0x1189 )
							{
								__0x997();
							} );
						__0x524.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
						__0x524.Enabled = __0x996();
						__0x486.Add( __0x524 );
					}

					
					__0x486.Add( new KryptonContextMenuSeparator() );

					
					if( __0x502 != null && __0x502.IsDirectory )
					{
						__0x957( __0x486 );

						
						__0x486.Add( new KryptonContextMenuSeparator() );
					}

					
					{
						var __0x525 = new KryptonContextMenuItem( __0x946( "Properties" ), null, delegate ( object __0x1190, EventArgs __0x1191 )
						{
							
							string __0x526 = __0x502.FullPath;
							
							Win32Utility.ShellExecuteEx( "properties", __0x526 );
						} );
						__0x525.Enabled = __0x502 != null;
						
						__0x486.Add( __0x525 );
					}
				}
			}

			
			if( __0x1139 != null )
			{
				var __0x527 = __0x1139 as ContentBrowserItem_Type;
				if( __0x527 != null )
				{
					
					{
						
						var __0x528 = new KryptonContextMenuItem( __0x946( "New Resource" ), EditorResourcesCache.New,
						   delegate ( object __0x1192, EventArgs __0x1193 )
						   {
							   var __0x529 = new NewObjectWindow.CreationDataClass();
							   __0x529.initFileCreationDirectory = VirtualDirectory.Exists( "New" ) ? "New" : "";
							   
							   __0x529.initLockType = __0x527.Type;
							   __0x529.createdFromContentBrowser = this;
							   EditorAPI.OpenNewObjectWindow( __0x529 );
						   } );
						__0x528.Enabled =
							MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x527.Type ) ||
							MetadataManager.GetTypeOfNetType( typeof( NewResourceType ) ).IsAssignableFrom( __0x527.Type );
						__0x486.Add( __0x528 );
					}

					
					if( EditorFavorites.AllowFavorites )
					{
						if( __0x1139.Parent != __0x289 )
						{
							

							var __0x530 = new KryptonContextMenuItem( __0x946( "Add to Favorites" ), EditorResourcesCache.Add,
							   delegate ( object __0x1194, EventArgs __0x1195 )
							   {
								   __0x1046();

								   
								   ContentBrowser __0x531 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x531 != this )
									   __0x531.__0x289?.PerformChildrenChanged();
								   __0x289?.PerformChildrenChanged();
							   } );
							__0x530.Enabled = __0x1045( true );
							__0x486.Add( __0x530 );
						}
						else
						{
							

							var __0x532 = new KryptonContextMenuItem( __0x946( "Remove from Favorites" ), EditorResourcesCache.Delete,
							   delegate ( object __0x1196, EventArgs __0x1197 )
							   {
								   __0x1047();

								   
								   ContentBrowser __0x533 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1;
								   if( __0x533 != this )
									   __0x533.__0x289?.PerformChildrenChanged();
								   __0x289?.PerformChildrenChanged();
							   } );
							__0x532.Enabled = __0x1045( false );
							__0x486.Add( __0x532 );
						}
					}

					
					{
						var __0x534 = __0x527.Type;
						var __0x535 = DocumentationLinksManager.GetFullLinkForType( __0x534.GetNetType() );

						var __0x536 = new KryptonContextMenuItem( __0x946( "Learn More" ), EditorResourcesCache.Help,
						   delegate ( object __0x1198, EventArgs __0x1199 )
						   {
							   if( !string.IsNullOrEmpty( __0x535 ) )
								   Process.Start( new ProcessStartInfo( __0x535 ) { UseShellExecute = true } );
						   } );
						__0x536.Enabled = !string.IsNullOrEmpty( __0x535 );
						__0x486.Add( __0x536 );
					}

				}
			}

			var __0x537 = EditorContextMenuWinForms.MenuTypeEnum.General;
			if( Mode == ModeEnum.Resources )
				__0x537 = EditorContextMenuWinForms.MenuTypeEnum.Resources;
			else if( DocumentWindow != null )
				__0x537 = EditorContextMenuWinForms.MenuTypeEnum.Document;

			EditorContextMenuWinForms.AddActionsToMenu( __0x537, __0x486 );

			ShowContextMenuEvent?.Invoke( this, __0x1139, __0x486 );

			EditorContextMenuWinForms.Show( __0x486, __0x1140, __0x1141 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		

		
		

		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		
		

		
		

		public bool CanDeleteObjects( out List<Item> resultItemsToDelete )
		{
			resultItemsToDelete = new List<Item>();

			if( ReadOnlyHierarchy )
				return false;

			
			
			
			{
				

				foreach( var __0x888 in SelectedItems )
				{
					if( __0x888.Parent != null )
					{
						var __0x538 = __0x888 as ContentBrowserItem_Component;
						if( __0x538 != null )
						{
							var __0x539 = __0x538.Component;
							if( __0x539 != null && __0x539.Parent != null && !__0x539.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x539 ) != null )
								resultItemsToDelete.Add( __0x538 );
						}

						
						
						
					}

					var __0x540 = __0x888 as ContentBrowserItem_File;
					if( __0x540 != null && __0x540.FullPath != VirtualFileSystem.Directories.Assets )
						resultItemsToDelete.Add( __0x540 );
				}
			}

			
			resultItemsToDelete = __0x959( resultItemsToDelete );

			if( resultItemsToDelete.Count == 0 )
				return false;

			return true;
		}

		
		

		public void TryDeleteObjects()
		{
			
			
			
			

			
			

			if( !CanDeleteObjects( out List<Item> itemsToDelete ) )
				return;

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			string __0x541;
			if( itemsToDelete.Count == 1 )
			{
				string __0x542 = __0x946( "Are you sure you want to delete \'{0}\'?" );

				var __0x543 = itemsToDelete[ 0 ];

				string __0x544;

				var __0x545 = __0x543 as ContentBrowserItem_File;
				if( __0x545 != null )
					__0x544 = __0x545.FullPath;
				else if( __0x543.ContainedObject != null )
					__0x544 = __0x543.ContainedObject.ToString();
				else
				{
					
					__0x544 = __0x543.ToString();
				}

				__0x541 = string.Format( __0x542, __0x544 );
			}
			else
			{
				string __0x546 = __0x946( "Are you sure you want to delete selected objects?" );
				__0x541 = string.Format( __0x546, itemsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x541, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			Item __0x547 = null;
			{
				Item __0x548 = null;
				int __0x549 = 0;
				foreach( var __0x889 in itemsToDelete )
				{
					if( __0x889.Parent != null )
					{
						int __0x550 = __0x889.Parent.GetChildrenFilter( true ).IndexOf( __0x889 );
						if( __0x548 == null || __0x550 < __0x549 )
						{
							__0x548 = __0x889;
							__0x549 = __0x550;
						}
					}
				}
				if( __0x548 != null )
				{
					if( __0x549 > 0 )
						__0x547 = __0x548.Parent.GetChildrenFilter( true )[ __0x549 - 1 ];
					else
						__0x547 = __0x548.Parent;
				}
			}

			var __0x551 = __0x274 as Component;
			if( __0x551 != null )
			{
				

				

				List<Component> __0x552 = new List<Component>();
				foreach( var __0x890 in itemsToDelete )
					__0x552.Add( (Component)__0x890.ContainedObject );

				
				if( DocumentWindow != null && DocumentWindow.Document != null )
				{
					var __0x553 = DocumentWindow.Document;
					var __0x554 = new UndoActionComponentCreateDelete( __0x553, __0x552, false );
					__0x553.UndoSystem.CommitAction( __0x554 );
					__0x553.Modified = true;
				}
				else
				{
					Log.Warning( "Can't be here." );
					
					
					
					
					
					
				}
			}
			
			
			

			

			
			
			
			
			
			
			

			
			
			
			

			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			else
			{
				foreach( var __0x891 in itemsToDelete )
				{
					var __0x555 = __0x891 as ContentBrowserItem_File;
					if( __0x555 != null )
					{
						try
						{
							if( Directory.Exists( __0x555.FullPath ) )
							{
								Directory.Delete( __0x555.FullPath, true );
							}
							else
							{
								if( File.Exists( __0x555.FullPath ) )
								{
									
									if( Path.GetExtension( __0x555.FullPath ).ToLower() == ".cs" )
										CSharpProjectFileUtility.UpdateProjectFile( null, new string[] { __0x555.FullPath }, out _ );

									File.Delete( __0x555.FullPath );
									
									
								}
							}
						}
						catch( Exception e )
						{
							Log.Error( e.Message );
						}
					}
					else
					{
						
					}
				}
			}

			
			if( __0x547 != null )
				SelectItems( new Item[] { __0x547 }, false, true );
		}

		static List<Item> __0x959( ICollection<Item> __0x1200 )
		{
			var __0x556 = new ESet<Item>( __0x1200.Count );
			__0x556.AddRangeWithCheckAlreadyContained( __0x1200 );

			var __0x557 = new List<Item>( __0x1200.Count );

			foreach( var __0x892 in __0x1200 )
			{
				var __0x558 = __0x892.GetAllParents( false );

				if( !__0x558.Any( __0x1201 => __0x556.Contains( __0x1201 ) ) )
					__0x557.Add( __0x892 );
			}

			return __0x557;
		}

		public bool CanCloneObjects( out List<Item> resultItemsToClone )
		{
			resultItemsToClone = new List<Item>();

			if( ReadOnlyHierarchy )
				return false;
			if( __0x273 == null || __0x273.Document == null )
				return false;

			foreach( var __0x893 in SelectedItems )
			{
				if( __0x893.Parent != null )
				{
					var __0x559 = __0x893 as ContentBrowserItem_Component;
					if( __0x559 != null )
					{
						var __0x560 = __0x559.Component;
						if( __0x560 != null && __0x560.Parent != null && !__0x560.EditorReadOnlyInHierarchy && EditorAPI.GetDocumentByObject( __0x560 ) != null )
							resultItemsToClone.Add( __0x559 );
					}

					

					
					
					
				}

				

				
				
				
			}

			
			resultItemsToClone = __0x959( resultItemsToClone );

			if( resultItemsToClone.Count == 0 )
				return false;

			return true;
		}

		public void TryCloneObjects()
		{
			
			

			if( !CanCloneObjects( out List<Item> itemsToClone ) )
				return;

			List<Component> __0x561 = new List<Component>();
			foreach( var __0x894 in itemsToClone )
			{
				var __0x562 = __0x894 as ContentBrowserItem_Component;
				if( __0x562 != null && __0x562.Component != null && __0x562.Component.Parent != null )
				{
					var __0x563 = __0x562.Component;
					var __0x564 = EditorUtility.CloneComponent( __0x563 );
					__0x561.Add( __0x564 );
				}

				
			}

			
			
			
			
			
			

			
			

			if( __0x561.Count == 0 )
				return;

			
			var __0x565 = new UndoActionComponentCreateDelete( __0x273.Document, __0x561, true );
			__0x273.Document.UndoSystem.CommitAction( __0x565 );
			__0x273.Document.Modified = true;
		}

		public int CalculateHeight()
		{
			return __0x800.Height + DpiHelper.Default.ScaleValue( __0x806.RowHeight ) * __0x806.ItemCount;
			
		}

		[Browsable( false )]
		public ESet<Item> Items
		{
			get { return __0x285; }
		}

		private void __0x960( object __0x1202, TreeViewAdvEventArgs __0x1203 )
		{
			var __0x566 = __0x990( __0x1203.Node );
			if( __0x566 == null )
				return;

			var __0x567 = GetItemByNode( __0x990( __0x1203.Node ) );

			
			
			
			
			

			
			if( __0x567 != null && !__0x567.wasExpanded )
			{
				__0x567.wasExpanded = true;

				__0x926( __0x567, null );

				
				
				
				
				
				
				
			}
		}

		private void __0x961( object __0x1204, TreeViewAdvEventArgs __0x1205 )
		{
			

			
			
			
			
			
		}

		private void __0x962( object __0x1206, EventArgs __0x1207 )
		{
			__0x963();
		}

		void __0x963()
		{
			var __0x568 = new ContentBrowserOptionsForm( this );
			

			if( EditorForm.Instance == null )
			{
				__0x568.ShowDialog();
			}
			else
			{
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x568.ShowDialog();
				} );
			}

			
			
			

			
			
			
			
			
			
			
			
			
			
			
		}

		
		[Browsable( false )]
		public ContentBrowserOptions Options
		{
			get { return __0x280; }
			set { __0x280 = value; }
		}

		
		List<Component> __0x964()
		{
			var __0x569 = new List<Component>();
			foreach( var __0x895 in SelectedItems )
			{
				var __0x570 = __0x895 as ContentBrowserItem_Component;
				if( __0x570 != null && __0x570.Component != null )
					__0x569.Add( __0x570.Component );
			}
			return __0x569;
		}

		void __0x965()
		{
			bool __0x571 = ShowToolBar && !ReadOnlyHierarchy;
			if( __0x800.Visible != __0x571 )
				__0x800.Visible = __0x571;

			

			

			__0x826.Visible = false;
			__0x818.Visible = ContentBrowserOptions.AllowFilteringModeButton && Options.FilteringModeButton && Mode == ModeEnum.Resources;

			__0x823.Visible = ContentBrowserOptions.AllowMembersButton && Options.MembersButton && Mode == ModeEnum.Objects;

			__0x829.Visible = Options.OpenButton && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x830.Visible = Options.OpenButton && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x830.Enabled = CanOpenFile( out _ );

			__0x817.Visible = Options.EditorButton || Options.SettingsButton;
			__0x810.Visible = Options.EditorButton;
			__0x811.Visible = Options.SettingsButton;

			__0x812.Visible = Options.ButtonsForEditing;

			__0x827.Visible = Options.ButtonsForEditing && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x828.Visible = Options.ButtonsForEditing && ( Mode == ModeEnum.Resources || Mode == ModeEnum.SetReference );
			__0x803.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x804.Visible = Options.ButtonsForEditing;
			__0x813.Visible = Options.ButtonsForEditing;
			
			
			__0x814.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x815.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			__0x816.Visible = Options.ButtonsForEditing && Mode == ModeEnum.Objects;
			
			__0x820.Visible = Options.ButtonsForEditing;
			__0x821.Visible = Options.ButtonsForEditing;
			__0x822.Visible = Options.ButtonsForEditing;

			__0x843.Visible = Options.SearchButton && Mode == ModeEnum.Objects;
			__0x842.Visible = Options.SearchButton && Mode == ModeEnum.Objects;

			__0x802.Visible = Options.SearchBar;
			__0x805.Visible = Options.SearchBar;


			

			var __0x572 = __0x964();
			__0x810.Enabled = __0x572.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null && EditorAPI.IsDocumentObjectSupport( __0x572[ 0 ] ) && !__0x572[ 0 ].EditorReadOnlyInHierarchy;
			__0x811.Enabled = __0x572.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null && !__0x572[ 0 ].EditorReadOnlyInHierarchy;

			__0x827.Enabled = __0x998( out _ );
			__0x828.Enabled = __0x1000( out _ );
			__0x803.Enabled = CanNewObject( out _ );
			__0x804.Enabled = CanDeleteObjects( out _ );
			__0x814.Enabled = CanCloneObjects( out _ );
			__0x815.Enabled = __0x979( out _ );
			__0x816.Enabled = __0x980( out _ );

			__0x820.Enabled = CanCut();
			__0x821.Enabled = CanCopy();
			__0x822.Enabled = CanPaste( out _, out _, out _, out _ );
			__0x813.Enabled = __0x996();

			
			
			
			
			
			
			
		}

		private void __0x966( object __0x1208, EventArgs __0x1209 )
		{
			var __0x573 = __0x964();
			if( __0x573.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null )
			{
				EditorAPI.OpenDocumentWindowForObject( DocumentWindow.Document, __0x573[ 0 ] );
			}
		}

		private void __0x967( object __0x1210, EventArgs __0x1211 )
		{
			var __0x574 = __0x964();
			if( __0x574.Count == 1 && DocumentWindow != null && DocumentWindow.Document != null )
			{
				bool __0x575 = !ModifierKeys.HasFlag( Keys.Shift );
				EditorAPI.ShowObjectSettingsWindow( DocumentWindow.Document, __0x574[ 0 ], __0x575 );
			}
		}

		private void __0x968( object __0x1212, EventArgs __0x1213 )
		{
			__0x999();
		}

		private void __0x969( object __0x1214, EventArgs __0x1215 )
		{
			__0x1001( null );
		}

		private void __0x970( object __0x1216, EventArgs __0x1217 )
		{
			TryNewObject( null );
		}

		private void __0x971( object __0x1218, EventArgs __0x1219 )
		{
			TryDeleteObjects();
		}

		private void __0x972( object __0x1220, EventArgs __0x1221 )
		{
			__0x997();
		}

		private void __0x973( object __0x1222, EventArgs __0x1223 )
		{
			TryCloneObjects();
		}

		private void __0x974( object __0x1224, EventArgs __0x1225 )
		{
			__0x981();
		}

		private void __0x975( object __0x1226, EventArgs __0x1227 )
		{
			__0x982();
		}

		private void __0x976( object __0x1228, EventArgs __0x1229 )
		{
			Cut();
		}

		private void __0x977( object __0x1230, EventArgs __0x1231 )
		{
			Copy();
		}

		private void __0x978( object __0x1232, EventArgs __0x1233 )
		{
			Paste();
		}

		
		
		
		bool __0x979( out Component __0x1234 )
		{
			var __0x576 = __0x964();
			if( __0x576.Count == 1 && SelectedItems[ 0 ].Parent != null && DocumentWindow != null && DocumentWindow.Document != null &&
				!__0x576[ 0 ].EditorReadOnlyInHierarchy )
			{
				var __0x577 = __0x576[ 0 ];

				var __0x578 = __0x577.Parent;
				if( __0x578 != null )
				{
					int __0x579 = __0x578.Components.IndexOf( __0x577 );
					if( __0x579 > 0 )
					{
						__0x1234 = __0x577;
						return true;
					}
				}
			}
			__0x1234 = null;
			return false;
		}

		bool __0x980( out Component __0x1235 )
		{
			var __0x580 = __0x964();
			if( __0x580.Count == 1 && SelectedItems[ 0 ].Parent != null && DocumentWindow != null && DocumentWindow.Document != null &&
				!__0x580[ 0 ].EditorReadOnlyInHierarchy )
			{
				var __0x581 = __0x580[ 0 ];

				var __0x582 = __0x581.Parent;
				if( __0x582 != null )
				{
					int __0x583 = __0x582.Components.IndexOf( __0x581 );
					if( __0x583 >= 0 && __0x583 < __0x582.Components.Count - 1 )
					{
						__0x1235 = __0x581;
						return true;
					}
				}
			}
			__0x1235 = null;
			return false;
		}

		void __0x981()
		{
			if( !__0x979( out Component component ) )
				return;

			
			

			var __0x584 = component.Parent;
			int __0x585 = __0x584.Components.IndexOf( component );
			int __0x586 = __0x585 - 1;

			__0x584.Components.MoveTo( component, __0x586 );

			var __0x587 = new UndoActionComponentMove( DocumentWindow.Document, component, __0x584, __0x585 );
			DocumentWindow.Document.UndoSystem.CommitAction( __0x587 );
			DocumentWindow.Document.Modified = true;

			
			{
				var __0x588 = FindItemByContainedObject( component );
				if( __0x588 != null )
					SelectItems( new Item[] { __0x588 } );
			}
		}

		void __0x982()
		{
			if( !__0x980( out Component component ) )
				return;

			var __0x589 = component.Parent;
			int __0x590 = __0x589.Components.IndexOf( component );
			int __0x591 = __0x590 + 1;
			__0x589.Components.MoveTo( component, __0x591 );

			var __0x592 = new UndoActionComponentMove( DocumentWindow.Document, component, __0x589, __0x590 );
			DocumentWindow.Document.UndoSystem.CommitAction( __0x592 );
			DocumentWindow.Document.Modified = true;

			
			{
				var __0x593 = FindItemByContainedObject( component );
				if( __0x593 != null )
					SelectItems( new Item[] { __0x593 } );
			}
		}

		public Item FindItemByContainedObject( object containedObject )
		{
			

			foreach( var __0x896 in GetAllItems() )
			{
				if( __0x896.ContainedObject == containedObject )
					return __0x896;
			}
			return null;
		}

		[DefaultValue( true )]
		public bool ShowToolBar
		{
			get { return __0x291; }
			set { __0x291 = value; }
		}

		
		
		
		
		
		
		
		
		
		

		internal static DragDropItemData GetDroppingItemData( IDataObject data )
		{
			if( data is EngineListView.DragData listViewData )
			{
				
				var __0x594 = listViewData.Items[ 0 ];
				var __0x595 = (Item)__0x594.Tag;
				return new DragDropItemData() { Item = __0x595 };
			}
			else
			{
				
				return (DragDropItemData)data.GetData( typeof( DragDropItemData ) );
			}
		}

		internal static DragDropSetReferenceData GetDroppingRefData( IDataObject data )
		{
			return (DragDropSetReferenceData)data.GetData( typeof( DragDropSetReferenceData ) );
		}

		
		
		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		

		
		private void __0x983( object __0x1236, DragEventArgs __0x1237 )
		{
			__0x1237.Effect = DragDropEffects.None;
			
			
			

			var __0x596 = __0x990( __0x806.GetNodeAt( __0x806.PointToClient( new Point( __0x1237.X, __0x1237.Y ) ) ) );
			var __0x597 = __0x990( __0x806.DropPosition.Node );

			Debug.Assert( __0x596 == __0x597 );

			var __0x598 = GetItemByNode( __0x596 );
			if( __0x598 == null )
				return;

			__0x951( __0x598 );

			var __0x599 = GetDroppingRefData( __0x1237.Data );
			if( __0x599 != null )
			{
				if( __0x986( __0x599, __0x597.item, __0x806.DropPosition.Position, true ) )
					__0x1237.Effect = DragDropEffects.Link;
			}
			else
			{
				var __0x600 = GetDroppingItemData( __0x1237.Data );
				var __0x601 = __0x987( __0x600, __0x598, __0x806.DropPosition.Position, true, out Component _ );
				if( __0x601 != DragDropEffects.None )
					__0x1237.Effect = __0x601;
			}

			
			

			
			__0x806.HighlightDropPosition = __0x1237.Effect != DragDropEffects.None;
		}

		
		private void __0x984( object __0x1238, DragEventArgs __0x1239 )
		{
			var __0x602 = __0x990( __0x806.DropPosition.Node );
			var __0x603 = GetItemByNode( __0x602 );

			var __0x604 = GetDroppingRefData( __0x1239.Data );
			if( __0x604 != null )
			{
				__0x986( __0x604, __0x603, __0x806.DropPosition.Position, false );
			}
			else
			{
				var __0x605 = GetDroppingItemData( __0x1239.Data );
				__0x987( __0x605, __0x603, __0x806.DropPosition.Position, false, out Component newObject );

				
				if( newObject != null )
				{
					var __0x606 = FindItemByContainedObject( newObject );
					if( __0x606 != null )
						SelectItems( new Item[] { __0x606 }, considerAsSelectedByUser: true );
					__0x806.Focus();
				}
			}
		}

		
		private void __0x985( object __0x1240, ItemDragEventArgs __0x1241 )
		{
			if( ReadOnlyHierarchy )
				return;

			
			ItemTreeNode __0x607 = null;
			{
				var __0x608 = __0x1241.Item as TreeNodeAdv[];
				if( __0x608 != null && __0x608.Length == 1 )
					__0x607 = __0x990( __0x608[ 0 ] );
			}

			
			if( __0x607 != null )
			{
				var __0x609 = __0x607.item;

				if( __0x609.CanDoDragDrop() )
				{
					__0x951( __0x609 );
					DoDragDrop( new DragDropItemData() { Item = __0x609 }, DragDropEffects.Link );
				}
			}
		}

		bool __0x986( DragDropSetReferenceData __0x1242, Item __0x1243, NodePosition __0x1244, bool __0x1245 )
		{
			if( __0x1242 != null && __0x1244 == NodePosition.Inside )
			{
				if( __0x1243 != null )
				{
					string[] __0x610 = new string[ __0x1242.controlledComponents.Length ];
					for( int __0x611 = 0; __0x611 < __0x1242.controlledComponents.Length; __0x611++ )
					{
						__0x1243.CalculateReferenceValue( __0x1242.controlledComponents[ __0x611 ], __0x1242.property.TypeUnreferenced, out string referenceValue, out bool canSet );
						__0x610[ __0x611 ] = referenceValue;
						if( !canSet )
						{
							__0x610 = null;
							break;
						}
					}

					if( __0x610 != null )
					{
						if( !__0x1245 )
						{
							__0x1242.SetProperty( __0x610 );

							
						}

						return true;
					}
				}
			}

			return false;
		}

		DragDropEffects __0x987( DragDropItemData __0x1246, Item __0x1247, NodePosition __0x1248, bool __0x1249, out Component __0x1250 )
		{
			__0x1250 = null;

			var __0x612 = __0x1246.Item;

			if( __0x612 == null || __0x1247 == null || __0x612 == __0x1247 )
				return DragDropEffects.None;

			
			
			
			{
				
				Metadata.TypeInfo __0x613 = null;
				Component __0x614 = null;
				{
					
					var __0x615 = __0x612 as ContentBrowserItem_Type;
					if( __0x615 != null )
					{
						var __0x616 = __0x615.Type;

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x616 ) && !__0x616.Abstract )
							__0x613 = __0x616;
					}

					
					var __0x617 = __0x612 as ContentBrowserItem_File;
					if( __0x617 != null && !__0x617.IsDirectory )
					{
						
						var __0x618 = Path.GetExtension( __0x617.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x618 ) != null )
						{
							var __0x619 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x617.FullPath ) );
							var __0x620 = __0x619?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x620 != null )
								__0x613 = __0x620;
						}
					}

					
					var __0x621 = __0x612 as ContentBrowserItem_Component;
					if( __0x621 != null && __0x621.Component != null )
					{
						var __0x622 = __0x621.Component;

						if( ComponentUtility.GetResourceInstanceByComponent( __0x622 )?.InstanceType == Resource.InstanceType.SeparateInstance )
							__0x614 = __0x622;
						else
							__0x613 = __0x622.GetProvidedType();
					}
				}

				if( __0x613 != null || __0x614 != null )
				{
					
					

					
					Component __0x623 = null;
					{
						if( __0x1247 != null )
						{
							var __0x624 = __0x1247 as ContentBrowserItem_Component;
							if( __0x624 != null )
								__0x623 = __0x624.Component;
						}
					}

					if( __0x623 != null && DocumentWindow?.Document != null )
					{
						if( __0x1248 == NodePosition.Inside )
						{
							

							if( __0x613 != null )
							{
								if( !__0x1249 )
								{
									
									__0x1250 = __0x623.CreateComponent( __0x613, -1, false );
									__0x1250.Name = ComponentUtility.GetNewObjectUniqueName( __0x1250 );
									__0x1250.NewObjectSetDefaultConfiguration();
									__0x1250.Enabled = true;

									
									var __0x625 = new List<Component>();
									__0x625.Add( __0x1250 );
									var __0x626 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x625, true );
									DocumentWindow.Document.UndoSystem.CommitAction( __0x626 );
									DocumentWindow.Document.Modified = true;
								}

								return DragDropEffects.Link;
							}

							if( __0x614 != null && !ComponentUtility.IsChildInHierarchy( __0x614, __0x623 ) )
							{
								bool __0x627 = ( ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control ) ) || __0x614.ParentRoot != __0x623.ParentRoot || __0x614.Parent == null;

								if( !__0x1249 )
								{
									string __0x628;
									if( __0x627 )
										__0x628 = __0x946( "Make copy of the object?" );
									else
										__0x628 = __0x946( "Move this object to the new place?" );
									
									
									
									

									if( EditorMessageBox.ShowQuestion( __0x628, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
									{
										if( __0x627 )
										{
											
											__0x1250 = __0x614.Clone();
											__0x1250.Name = ComponentUtility.GetNewObjectUniqueName( __0x1250 );
											__0x1250.NewObjectSetDefaultConfiguration();
											__0x623.AddComponent( __0x1250 );

											
											var __0x629 = new List<Component>();
											__0x629.Add( __0x1250 );
											var __0x630 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x629, true );
											DocumentWindow.Document.CommitUndoAction( __0x630 );
										}
										else
										{
											

											var __0x631 = __0x614.Parent;
											int __0x632 = __0x631.Components.IndexOf( __0x614 );

											__0x614.Parent.RemoveComponent( __0x614, false );
											__0x623.AddComponent( __0x614 );

											var __0x633 = new UndoActionComponentMove( DocumentWindow.Document, __0x614, __0x631, __0x632 );
											DocumentWindow.Document.CommitUndoAction( __0x633 );
										}
									}
								}

								return DragDropEffects.Link;
							}
						}
						else
						{
							

							var __0x634 = __0x623.Parent;
							if( __0x634 != null )
							{
								if( __0x613 != null )
								{
									if( !__0x1249 )
									{
										int __0x635 = -1;
										var __0x636 = __0x634.Components.IndexOf( __0x623 );
										if( __0x636 != -1 )
										{
											__0x635 = __0x636;
											if( __0x1248 == NodePosition.After )
												__0x635++;
										}

										
										__0x1250 = __0x623.Parent.CreateComponent( __0x613, __0x635, false );
										__0x1250.Name = ComponentUtility.GetNewObjectUniqueName( __0x1250 );
										__0x1250.NewObjectSetDefaultConfiguration();
										__0x1250.Enabled = true;

										
										var __0x637 = new List<Component>();
										__0x637.Add( __0x1250 );
										var __0x638 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x637, true );
										DocumentWindow.Document.UndoSystem.CommitAction( __0x638 );
										DocumentWindow.Document.Modified = true;
									}

									return DragDropEffects.Link;
								}

								if( __0x614 != null && !ComponentUtility.IsChildInHierarchy( __0x614, __0x623 ) )
								{
									bool __0x639 = ( ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control ) ) || __0x614.ParentRoot != __0x623.ParentRoot || __0x614.Parent == null;

									bool __0x640 = false;
									if( !__0x639 )
									{
										if( __0x614.Parent == __0x634 )
										{
											var __0x641 = __0x634.Components.IndexOf( __0x623 );
											var __0x642 = __0x634.Components.IndexOf( __0x614 );
											if( __0x641 == __0x642 )
												__0x640 = true;
											if( __0x1248 == NodePosition.Before && __0x641 - 1 == __0x642 )
												__0x640 = true;
											if( __0x1248 == NodePosition.After && __0x641 + 1 == __0x642 )
												__0x640 = true;
										}
									}

									if( !__0x640 )
									{
										if( !__0x1249 )
										{
											string __0x643;
											if( __0x639 )
												__0x643 = __0x946( "Make copy of the object?" );
											else
												__0x643 = __0x946( "Move this object to the new place?" );
											
											
											
											

											if( EditorMessageBox.ShowQuestion( __0x643, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
											{
												int __0x644 = -1;
												var __0x645 = __0x634.Components.IndexOf( __0x623 );
												if( __0x645 != -1 )
												{
													__0x644 = __0x645;
													if( __0x1248 == NodePosition.After )
														__0x644++;
												}

												if( __0x639 )
												{
													
													__0x1250 = __0x614.Clone();
													__0x1250.Name = ComponentUtility.GetNewObjectUniqueName( __0x1250 );
													__0x1250.NewObjectSetDefaultConfiguration();
													__0x623.Parent.AddComponent( __0x1250, __0x644 );

													
													var __0x646 = new List<Component>();
													__0x646.Add( __0x1250 );
													var __0x647 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x646, true );
													DocumentWindow.Document.CommitUndoAction( __0x647 );
												}
												else
												{
													

													var __0x648 = __0x614.Parent;
													int __0x649 = __0x648.Components.IndexOf( __0x614 );

													int __0x650 = __0x644;
													if( __0x623.Parent == __0x648 && __0x650 > __0x649 )
														__0x650--;

													__0x614.Parent.RemoveComponent( __0x614, false );
													__0x623.Parent.AddComponent( __0x614, __0x650 );

													var __0x651 = new UndoActionComponentMove( DocumentWindow.Document, __0x614, __0x648, __0x649 );
													DocumentWindow.Document.CommitUndoAction( __0x651 );
												}
											}
										}

										return DragDropEffects.Link;
									}
								}
							}
						}
					}
				}
			}

			
			if( __0x806.DropPosition.Position == NodePosition.Inside )
			{
				
				var __0x652 = __0x612 as ContentBrowserItem_File;
				if( __0x652 != null )
				{
					
					string __0x653 = null;
					{
						if( __0x1247 != null )
						{
							var __0x654 = __0x1247 as ContentBrowserItem_File;
							if( __0x654 != null && __0x654.IsDirectory )
								__0x653 = __0x654.FullPath;
						}
					}

					
					if( !string.IsNullOrEmpty( __0x653 ) && __0x652.FullPath != __0x653 )
					{
						bool __0x655 = ModifierKeys.HasFlag( Keys.Shift ) || ModifierKeys.HasFlag( Keys.Control );

						bool __0x656 = false;

						if( !__0x656 )
						{
							if( !__0x1249 )
							{
								string __0x657;
								if( __0x655 )
									__0x657 = __0x946( "Copy files?" );
								else
									__0x657 = __0x946( "Move files?" );

								if( EditorMessageBox.ShowQuestion( __0x657, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
								{
									
									__0x995( new string[] { __0x652.FullPath }, !__0x655, __0x653 );
								}
							}

							
							return DragDropEffects.Link;
							
							
							
							
							
						}
					}
				}
			}

			return DragDropEffects.None;
		}

		private void __0x988( object __0x1251, EventArgs __0x1252 )
		{
			

			__0x823.Checked = !__0x823.Checked;

			if( Initialized )
				UpdateData();
		}

		
		[Browsable( false )]
		public bool ShowMembers
		{
			get
			{
				
				if( Mode == ModeEnum.Objects )
					return __0x823.Checked;
				else
					return true;
			}
		}

		private void __0x989( object __0x1253, EventArgs __0x1254 )
		{
			

			if( CanSelectObjectSettings )
				__0x952();
		}

		[Browsable( false )]
		public ContentBrowserFilteringMode FilteringMode
		{
			get { return __0x293; }
			set
			{
				if( __0x293 == value )
					return;
				__0x293 = value;

				if( __0x292 )
				{
					
					UpdateData();
				}
			}
		}

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		ItemTreeNode __0x990( TreeNodeAdv __0x1255 )
		{
			if( __0x1255 != null )
				return __0x1255.Tag as ItemTreeNode;
			return null;
		}

		TreeNodeAdv __0x991( Node __0x1256 )
		{
			if( __0x1256 == null )
				Log.Fatal( "ContentBrowser: FindTreeViewNode: findNode == null." );

			

			foreach( var __0x897 in __0x806.AllNodes )
			{
				var __0x658 = __0x897.Tag as Node;
				if( __0x658 == __0x1256 )
					return __0x897;
			}

			Log.Fatal( "ContentBrowser: FindTreeViewNode: Internal error: Node is not found." );
			return null;
		}

		ICollection<TreeNodeAdv> __0x992( ICollection<Node> __0x1257 )
		{
			

			var __0x659 = new ESet<Node>( __0x1257 );
			var __0x660 = new List<TreeNodeAdv>();

			foreach( var __0x898 in __0x806.AllNodes )
			{
				var __0x661 = __0x898.Tag as Node;
				if( __0x661 != null && __0x659.Contains( __0x661 ) )
					__0x660.Add( __0x898 );
			}

			return __0x660;
		}

		void __0x993( bool __0x1258 )
		{
			var __0x662 = SelectedItems;

			
			if( __0x662.Length != 0 && __0x662.All( __0x1259 => __0x1259 is ContentBrowserItem_File ) )
			{
				List<string> __0x663 = new List<string>();
				foreach( var __0x899 in __0x662 )
				{
					var __0x664 = (ContentBrowserItem_File)__0x899;
					__0x663.Add( __0x664.FullPath );
				}

				
				IDataObject __0x665 = new DataObject( DataFormats.FileDrop, __0x663.ToArray() );
				MemoryStream __0x666 = new MemoryStream();
				__0x666.Write( new byte[] { (byte)( __0x1258 ? 2 : 5 ), 0, 0, 0 }, 0, 4 );
				__0x666.SetLength( 4 );
				__0x665.SetData( "Preferred DropEffect", __0x666 );
				Clipboard.SetDataObject( __0x665 );
				
				
				
			}

			
			if( __0x662.Length != 0 && __0x662.All( __0x1260 => __0x1260 is ContentBrowserItem_Component ) )
			{
				var __0x667 = new ObjectCutCopyPasteData( DocumentWindow, __0x1258, __0x964().ToArray() );
				ClipboardManager.CopyToClipboard( __0x667 );
			}
		}

		public bool CanCut()
		{
			
			var __0x668 = SelectedItems;
			if( __0x668.Length != 0 && __0x668.All( __0x1261 => __0x1261 is ContentBrowserItem_File ) )
				return true;

			
			if( __0x668.Length != 0 && __0x668.All( __0x1262 => __0x1262 is ContentBrowserItem_Component ) )
			{
				if( __0x964().All( __0x1263 => __0x1263.Parent != null && EditorAPI.GetDocumentByObject( __0x1263 ) != null ) )
					return true;
			}

			return false;
		}

		public void Cut()
		{
			if( CanCut() )
				__0x993( true );
		}

		public bool CanCopy()
		{
			
			var __0x669 = SelectedItems;
			if( __0x669.Length != 0 && __0x669.All( __0x1264 => __0x1264 is ContentBrowserItem_File ) )
				return true;

			
			if( __0x669.Length != 0 && __0x669.All( __0x1265 => __0x1265 is ContentBrowserItem_Component ) )
				return true;

			return false;
		}

		public void Copy()
		{
			if( CanCopy() )
				__0x993( false );
		}

		public bool CanPaste( out string[] filePaths, out bool cut, out string destinationFolder, out Component destinationParent )
		{
			filePaths = null;
			cut = false;
			destinationFolder = null;
			destinationParent = null;

			var __0x670 = SelectedItems;
			if( __0x670.Length == 1 )
			{
				
				var __0x671 = __0x670[ 0 ] as ContentBrowserItem_File;
				if( __0x671 != null )
				{
					if( !__0x671.IsDirectory )
						__0x671 = __0x671.Parent as ContentBrowserItem_File;
					if( __0x671 != null && __0x671.IsDirectory )
					{
						
						
#if BCL_CLIPBOARD
						IDataObject data = null;
						try
						{
							data = Clipboard.GetDataObject();
						}
						catch { }
						if( data != null )
						{
							MemoryStream stream = data.GetData( "Preferred DropEffect" ) as MemoryStream;
							if( stream != null )
							{
								int flag = stream.ReadByte();
								if( flag == 2 || flag == 5 )
								{
									filePaths = (string[])data.GetData( DataFormats.FileDrop );
									cut = flag == 2;
									destinationFolder = fileItem.FullPath;
									return true;
								}
							}
						}
#else
						var __0x672 = WindowsClipboard.GetFileDropPaths( EditorForm.Instance.Handle );
						if( __0x672.Count > 0 )
						{
							filePaths = __0x672.ToArray();
							cut = WindowsClipboard.IsCutPrefferdDropEffect( EditorForm.Instance.Handle );
							destinationFolder = __0x671.FullPath;
							return true;
						}
#endif
					}
				}

				
				var __0x673 = __0x670[ 0 ] as ContentBrowserItem_Component;
				if( __0x673 != null && !__0x278 && EditorAPI.GetDocumentByObject( __0x673.Component ) != null )
				{
					if( ClipboardManager.CheckAvailableInClipboard<ObjectCutCopyPasteData>() )
					{
						destinationParent = __0x673.Component;
						return true;
					}
				}
			}

			return false;
		}

		static void __0x994( string __0x1266, string __0x1267 )
		{
			string[] __0x674 = Directory.GetDirectories( __0x1266 );
			Directory.CreateDirectory( __0x1267 );
			foreach( string __0x900 in __0x674 )
				__0x994( __0x900, Path.Combine( __0x1267, Path.GetFileName( __0x900 ) ) );
			foreach( string __0x901 in Directory.GetFiles( __0x1266 ) )
				File.Copy( __0x901, Path.Combine( __0x1267, Path.GetFileName( __0x901 ) ) );
		}

		void __0x995( string[] __0x1268, bool __0x1269, string __0x1270 )
		{
			

			foreach( string __0x902 in __0x1268 )
			{
				try
				{
					string __0x675 = Path.Combine( __0x1270, Path.GetFileName( __0x902 ) );

					
					if( File.Exists( __0x902 ) )
					{
						if( string.Compare( __0x1270, Path.GetDirectoryName( __0x902 ), true ) == 0 )
						{
							for( int __0x676 = 1; ; __0x676++ )
							{
								string __0x677 = __0x1270 + Path.DirectorySeparatorChar;
								__0x677 += Path.GetFileNameWithoutExtension( __0x902 );
								if( __0x676 != 1 )
									__0x677 += __0x676.ToString();
								if( Path.GetExtension( __0x902 ) != null )
									__0x677 += Path.GetExtension( __0x902 );

								
								if( !File.Exists( __0x677 ) )
								{
									__0x675 = __0x677;
									break;
								}
							}
						}

						
						if( __0x1269 )
							File.Move( __0x902, __0x675 );
						else
							File.Copy( __0x902, __0x675 );

						continue;
					}

					
					if( Directory.Exists( __0x902 ) )
					{
						for( int __0x678 = 1; ; __0x678++ )
						{
							string __0x679 = Path.GetDirectoryName( __0x675 ) + Path.DirectorySeparatorChar;
							__0x679 += Path.GetFileName( __0x675 );
							if( __0x678 != 1 )
								__0x679 += __0x678.ToString();

							
							if( !Directory.Exists( __0x679 ) )
							{
								__0x675 = __0x679;
								break;
							}
						}

						
						__0x994( __0x902, __0x675 );
						if( __0x1269 )
							Directory.Delete( __0x902, true );

						continue;
					}
				}
				catch( Exception e )
				{
					Log.Error( e.Message );
					return;
				}
			}
		}

		public void Paste()
		{
			if( CanPaste( out string[] filePaths, out bool cut, out string destinationFolder, out Component destinationParent ) )
			{
				
				if( filePaths != null )
					__0x995( filePaths, cut, destinationFolder );

				
				if( destinationParent != null )
				{
					var __0x680 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
					if( __0x680 != null )
					{
						var __0x681 = new List<Component>();
						foreach( var __0x903 in __0x680.objects )
						{
							var __0x682 = __0x903 as Component;
							if( __0x682 != null )
								__0x681.Add( __0x682 );
						}

						

						var __0x683 = new List<Component>();

						foreach( var __0x904 in __0x681 )
						{
							var __0x684 = __0x904.Clone();
							destinationParent.AddComponent( __0x684 );

							__0x683.Add( __0x684 );
						}

						if( __0x680.cut )
						{
							
							if( __0x680.documentWindow.Document != DocumentWindow.Document )
							{
								
								{
									var __0x685 = new UndoActionComponentCreateDelete( __0x680.documentWindow.Document, __0x681, false );
									__0x680.documentWindow.Document.UndoSystem.CommitAction( __0x685 );
									__0x680.documentWindow.Document.Modified = true;
								}
								{
									var __0x686 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x683, true );
									DocumentWindow.Document.UndoSystem.CommitAction( __0x686 );
									DocumentWindow.Document.Modified = true;
								}
							}
							else
							{
								
								var __0x687 = new UndoMultiAction();
								__0x687.AddAction( new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x681, false ) );
								__0x687.AddAction( new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x683, true ) );
								DocumentWindow.Document.UndoSystem.CommitAction( __0x687 );
								DocumentWindow.Document.Modified = true;
							}
						}
						else
						{
							
							var __0x688 = new UndoActionComponentCreateDelete( DocumentWindow.Document, __0x683, true );
							DocumentWindow.Document.UndoSystem.CommitAction( __0x688 );
							DocumentWindow.Document.Modified = true;
						}

						
						if( __0x683.Count == 1 )
						{
							var __0x689 = FindItemByContainedObject( destinationParent );
							if( __0x689 != null )
							{
								
								SelectItems( new Item[] { __0x689 }, true );

								var __0x690 = FindItemByContainedObject( __0x683[ 0 ] );
								if( __0x690 != null )
									SelectItems( new Item[] { __0x690 }, false, true );
							}
						}
					}
				}
			}
		}

		bool __0x996()
		{
			var __0x691 = SelectedItems;
			if( __0x691.Length == 1 )
			{
				
				var __0x692 = __0x691[ 0 ] as ContentBrowserItem_File;
				if( __0x692 != null && __0x692.FullPath != VirtualFileSystem.Directories.Assets )
					return true;

				
				var __0x693 = __0x691[ 0 ] as ContentBrowserItem_Component;
				if( __0x693 != null && __0x273 != null && __0x273.Document != null && EditorAPI.GetDocumentByObject( __0x693.Component ) != null )
					return true;
			}

			return false;
		}

		void __0x997()
		{
			if( __0x996() )
			{
				

				var __0x694 = SelectedItems[ 0 ];

				
				var __0x695 = __0x694 as ContentBrowserItem_File;
				if( __0x695 != null )
				{
					var __0x696 = Path.GetDirectoryName( __0x695.FullPath );

					var __0x697 = new OKCancelTextBoxForm( __0x946( "Name" ) + ":", Path.GetFileName( __0x695.FullPath ), __0x946( "Rename" ),
						delegate ( string __0x1271, ref string __0x1272 )
						{
							if( string.IsNullOrEmpty( __0x1271 ) )
							{
								__0x1272 = __0x946( "The name is not specified." );
								return false;
							}

							if( __0x1271.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
							{
								__0x1272 = __0x946( "Invalid file path." );
								return false;
							}

							try
							{
								if( __0x1271.Contains( '\\' ) || __0x1271.Contains( '/' ) )
								{
									if( Path.GetFileName( __0x1271 ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
									{
										__0x1272 = __0x946( "Invalid file path." );
										return false;
									}
								}
							}
							catch { }

							var __0x698 = Path.Combine( __0x696, __0x1271 );

							if( __0x695.FullPath == __0x698 )
							{
								__0x1272 = __0x946( "Same name." );
								return false;
							}

							if( ( File.Exists( __0x698 ) || Directory.Exists( __0x698 ) ) && string.Compare( __0x695.FullPath, __0x698, true ) != 0 )
							{
								__0x1272 = __0x946( "A file or folder with same name already exists." );
								return false;
							}

							return true;
						},
						delegate ( string __0x1273, ref string __0x1274 )
						{
							var __0x699 = Path.Combine( __0x696, __0x1273 );

							try
							{
								if( string.Compare( __0x695.FullPath, __0x699, true ) == 0 )
								{
									
									if( __0x695.IsDirectory )
									{
										var __0x700 = __0x699 + "_";
										while( Directory.Exists( __0x700 ) )
											__0x700 += "_";
										Directory.Move( __0x695.FullPath, __0x700 );
										Directory.Move( __0x700, __0x699 );
									}
									else
									{
										var __0x701 = __0x699 + "_";
										while( File.Exists( __0x701 ) )
											__0x701 += "_";
										File.Move( __0x695.FullPath, __0x701 );
										File.Move( __0x701, __0x699 );
									}
								}
								else
								{
									
									if( __0x695.IsDirectory )
										Directory.Move( __0x695.FullPath, __0x699 );
									else
										File.Move( __0x695.FullPath, __0x699 );
								}
							}
							catch( Exception e )
							{
								__0x1274 = e.Message;
								return false;
							}

							return true;
						}
					);

					__0x697.ShowDialog();
				}

				
				var __0x702 = __0x694 as ContentBrowserItem_Component;
				if( __0x702 != null )
				{
					var __0x703 = __0x702.Component;
					EditorUtility.ShowRenameComponentDialog( __0x703 );
				}
			}
		}

		public string GetDirectoryPathOfSelectedFileOrParentDirectoryItem()
		{
			ContentBrowserItem_File __0x704 = null;

			

			var __0x705 = SelectedItems;
			if( __0x705.Length == 1 )
			{
				var __0x706 = __0x705[ 0 ];

				var __0x707 = __0x706 as ContentBrowserItem_File;
				if( __0x707 != null )
				{
					if( !__0x707.IsDirectory )
					{
						var __0x708 = __0x707.Parent as ContentBrowserItem_File;
						if( __0x708 != null && __0x708.IsDirectory )
							__0x704 = __0x708;
					}
					else
						__0x704 = __0x707;
				}
			}

			if( __0x704 != null && VirtualPathUtility.GetVirtualPathByReal( __0x704.FullPath, out string dummy ) )
				return __0x704.FullPath;
			return null;
		}

		bool __0x998( out string __0x1275 )
		{
			__0x1275 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1275 );
		}

		void __0x999()
		{
			if( __0x998( out string directoryPath ) )
			{
				var __0x709 = new OKCancelTextBoxForm( __0x946( "Name" ) + ":", __0x946( "New Folder" ), __0x946( "New Folder" ),
					delegate ( string __0x1276, ref string __0x1277 )
					{
						if( string.IsNullOrEmpty( __0x1276 ) )
						{
							__0x1277 = __0x946( "The name is not specified." );
							return false;
						}

						if( __0x1276.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
						{
							__0x1277 = __0x946( "Invalid file path." );
							return false;
						}

						try
						{
							if( __0x1276.Contains( '\\' ) || __0x1276.Contains( '/' ) )
							{
								if( Path.GetFileName( __0x1276 ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
								{
									__0x1277 = __0x946( "Invalid file path." );
									return false;
								}
							}
						}
						catch { }

						var __0x710 = Path.Combine( directoryPath, __0x1276 );
						if( File.Exists( __0x710 ) || Directory.Exists( __0x710 ) )
						{
							__0x1277 = __0x946( "A file or folder with same name already exists." );
							return false;
						}

						return true;
					},
					delegate ( string __0x1278, ref string __0x1279 )
					{
						var __0x711 = Path.Combine( directoryPath, __0x1278 );

						try
						{
							Directory.CreateDirectory( __0x711 );
						}
						catch( Exception e )
						{
							__0x1279 = e.Message;
							return false;
						}

						

						return true;
					}
				);

				__0x709.ShowDialog();
			}
		}

		bool __0x1000( out string __0x1280 )
		{
			__0x1280 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1280 );
		}

		void __0x1001( Metadata.TypeInfo __0x1281 )
		{
			if( __0x1000( out string directoryPath ) )
			{
				var __0x712 = new NewObjectWindow.CreationDataClass();
				__0x712.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( directoryPath );
				
				__0x712.createdFromContentBrowser = this;

				__0x712.initLockType = __0x1281;

				EditorAPI.OpenNewObjectWindow( __0x712 );
			}
		}

		bool __0x1002( out string __0x1282 )
		{
			__0x1282 = GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
			return !string.IsNullOrEmpty( __0x1282 );
		}

		void __0x1003()
		{
			if( __0x1002( out string directoryPath ) )
				EditorAPI.OpenImportWindow( VirtualPathUtility.GetVirtualPathByReal( directoryPath ) );
		}

		private void __0x1004( object __0x1283, Aga.Controls.Tree.NodeControls.DrawTextEventArgs __0x1284 )
		{
			var __0x713 = __0x990( __0x1284.Node );
			if( __0x713 != null )
			{
				var __0x714 = __0x713.item;
				if( __0x714 != null && __0x714.ShowDisabledInHierarchy )
					__0x1284.TextColor = Color.Gray;
			}
		}

		public void TreeViewHideVScroll()
		{
			
			__0x806.VScrollAlwaysHide = true;
		}

		public void NeedSelectFilesOrDirectories( string[] realPaths, bool expandNodes )
		{
			__0x298 = realPaths;
			__0x299 = expandNodes;
			__0x300 = DateTime.Now;
		}

		void __0x1005()
		{
			
			if( __0x298 != null )
			{
				if( ContentBrowserUtility.SelectFileItems( this, __0x298, __0x299 ) )
					__0x298 = null;

				
				
				
				
				
				
				
				
			}

			
			if( __0x298 != null )
			{
				var __0x715 = DateTime.Now - __0x300;
				if( __0x715.TotalSeconds > 3 )
					__0x298 = null;
			}
		}

		[Browsable( false )]
		public ContentBrowserItem_File DataItem
		{
			get { return __0x290; }
		}

		
		public bool CanOpenFile( out ContentBrowserItem_File fileItem )
		{
			if( SelectedItems.Length == 1 )
			{
				var __0x716 = SelectedItems[ 0 ] as ContentBrowserItem_File;
				if( __0x716 != null && !__0x716.IsDirectory )
				{
					fileItem = __0x716;
					return true;
				}
			}

			fileItem = null;
			return false;
		}

		private void __0x1006( object __0x1285, EventArgs __0x1286 )
		{
			if( !CanOpenFile( out var fileItem ) )
				return;

			bool __0x717 = false;
			__0x954( fileItem, ref __0x717 );
		}

		public object[] GetSelectedContainedObjects()
		{
			List<object> __0x718 = new List<object>();
			foreach( var __0x905 in SelectedItems )
			{
				var __0x719 = __0x905.ContainedObject;
				if( __0x719 != null )
					__0x718.Add( __0x719 );
			}
			return __0x718.ToArray();
		}

		

		void __0x1007()
		{
			if( __0x281 != PanelModeEnum.Tree )
			{
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				
				
				
				
				

				
				
				
				
				
				

				
				
				
				
				
				
				
				
				

				
				
				
				

				

				
				
				
				
				
				

				

				var __0x720 = new List<EngineListView.Item>();

				if( __0x806.SelectedNodes.Count <= 1 )
				{
					TreeNodeAdv __0x721;
					if( UseSelectedTreeNodeAsRootForList && __0x806.SelectedNode != null )
						__0x721 = __0x806.SelectedNode;
					else
						__0x721 = __0x1022();

					if( __0x721 == __0x1022() )
					{
						foreach( var __0x906 in __0x721.Children )
						{
							var __0x722 = GetItemByNode( __0x990( __0x906 ) );

							var __0x723 = new EngineListView.Item( __0x832 );
							__0x723.Tag = __0x722;
							__0x723.Text = __0x722.Text;
							__0x723.Description = __0x722.GetDescription();
							__0x723.ShowTooltip = !string.IsNullOrEmpty( __0x723.Description );

							__0x720.Add( __0x723 );
						}
					}
					else
					{
						if( __0x1031().Count == 1 )
						{
							var __0x724 = __0x1031()[ 0 ];

							foreach( var __0x907 in __0x724.GetChildrenFilter( true ) )
							{
								var __0x725 = new EngineListView.Item( __0x832 );
								__0x725.Tag = __0x907;
								__0x725.Text = __0x907.Text;
								__0x725.Description = __0x907.GetDescription();
								__0x725.ShowTooltip = !string.IsNullOrEmpty( __0x725.Description );

								__0x720.Add( __0x725 );
							}
						}
					}
				}

				
				{
					var __0x726 = new List<EngineListView.Item>();
					foreach( var __0x908 in __0x832.Items )
						__0x726.Add( __0x908 );

					bool __0x727 = false;
					if( __0x726.Count == __0x720.Count )
					{
						for( int __0x728 = 0; __0x728 < __0x726.Count; __0x728++ )
							if( __0x726[ __0x728 ].Tag != __0x720[ __0x728 ].Tag )
								__0x727 = true;
					}
					else
						__0x727 = true;

					if( !__0x727 )
						return;
				}

				
				__0x832.SelectedItem = null;

				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				


				
				
				

				

				
				
				__0x832.SetItems( __0x720 );
				

				foreach( var __0x909 in __0x832.Items )
				{
					var __0x729 = __0x1008( __0x909 );
					if( __0x729 != null )
						__0x909.ShowDisabled = __0x729.ShowDisabled;
				}

				UpdateListImages();

				
				
				
				if( !UseSelectedTreeNodeAsRootForList )
				{
					var __0x730 = __0x990( __0x806.SelectedNode );
					__0x832.SelectedItem = GetListItemByItem( __0x730?.item );
				}
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				
				
				

			}
		}

		Item __0x1008( EngineListView.Item __0x1287 )
		{
			if( __0x1287 != null )
				return __0x1287.Tag as Item;
			return null;
		}

		private void __0x1009( object __0x1288, MouseEventArgs __0x1289 )
		{
			if( __0x1289.Button == MouseButtons.Right )
			{
				var __0x731 = __0x1008( __0x832.GetItemAt( __0x1289.Location ) );
				if( __0x731 != null )
					__0x958( __0x731, __0x832, __0x1289.Location );

				
				
				
				

				
				
			}
		}

		private void __0x1010( object __0x1290, MouseEventArgs __0x1291 )
		{
			if( __0x1291.Button == MouseButtons.Right )
			{
				var __0x732 = __0x1008( __0x832.GetItemAt( __0x1291.Location ) );
				if( __0x732 == null )
				{
					if( SelectedItems.Length == 1 )
						__0x732 = SelectedItems[ 0 ];

					__0x958( __0x732, __0x832, __0x1291.Location );
				}
			}
		}

		public EngineListView.Item GetListItemByItem( Item item )
		{
			if( item == null )
				return null;
			foreach( var __0x910 in __0x832.Items )
				if( __0x910.Tag == item )
					return __0x910;
			return null;
		}

		private void __0x1011( EngineListView __0x1292 )
		{
			
			
			
			
			

			bool __0x733 = !__0x296 && !__0x297;

			var __0x734 = new List<Item>();
			if( __0x832.SelectedItems.Count != 0 )
			{
				foreach( var __0x911 in __0x832.SelectedItems )
					__0x734.Add( (Item)__0x911.Tag );
			}
			if( __0x734.Count == 0 )
				__0x734.AddRange( SelectedItems );

			bool __0x735 = false;
			ItemAfterSelect?.Invoke( this, __0x734, __0x733, ref __0x735 );
		}

		void __0x1012( Item __0x1293 )
		{
			try
			{
				
				

				
				var __0x736 = __0x1293.Parent;
				if( __0x736 != null )
				{
					SelectItems( new Item[] { __0x736 }, true, false );
				}
				else
				{
					
				}

				bool __0x737 = false;
				if( __0x1293.GetChildrenFilter( true ).Count == 0 || __0x1293.chooseByDoubleClickAndReturnKey )
				{
					
					var __0x738 = GetListItemByItem( __0x1293 );
					if( __0x738 != null )
						__0x832.SelectedItem = __0x738;

					__0x955( __0x1293, ref __0x737 );
					
				}

				if( !__0x737 )
				{
					if( __0x1293.GetChildrenFilter( true ).Count != 0 )
					{
						SelectItems( new Item[] { __0x1293 }, true, true );

						
						if( __0x832.Items.Count > 0 )
							__0x832.SelectedItem = __0x832.Items[ 0 ];
					}
				}
			}
			catch { }
		}

		private void __0x1013( object __0x1294, MouseEventArgs __0x1295 )
		{
			if( __0x1295.Button == MouseButtons.Left )
			{
				var __0x739 = __0x1008( __0x832.GetItemAt( __0x1295.Location ) );
				if( __0x739 != null )
					__0x1012( __0x739 );
			}
		}

		private void __0x1014( object __0x1296, KeyEventArgs __0x1297 )
		{
			
			{
				bool __0x740 = false;
				KeyDownOverride?.Invoke( this, __0x1296, __0x1297, ref __0x740 );
				if( __0x740 )
					return;
			}

			if( __0x1297.KeyCode == Keys.Return )
			{
				var __0x741 = __0x1008( __0x832.SelectedItem );
				if( __0x741 != null )
					__0x1012( __0x741 );
			}

			if( __0x1297.KeyCode == Keys.Back )
			{
				var __0x742 = __0x990( __0x806.SelectedNode );
				if( __0x742 != null )
				{
					Item[] __0x743;
					if( __0x742.item.Parent != null )
						__0x743 = new Item[] { __0x742.item.Parent };
					else
						__0x743 = new Item[ 0 ];

					SelectItems( __0x743, false, true );
					__0x832.SelectedItem = GetListItemByItem( __0x742.item );
				}
			}

			
			{
				var __0x744 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x744 != null )
				{
					foreach( var __0x912 in __0x744 )
					{
						Keys __0x745 = __0x1297.KeyCode | ModifierKeys;
						if( __0x912 == __0x745 )
						{
							__0x997();
							break;
						}
					}
				}

				
				
			}

			
			if( ModifierKeys != Keys.None || !__0x932( __0x1297.KeyCode ) )
			{
				if( EditorAPI.ProcessShortcuts( __0x1297.KeyCode, true ) )
				{
					__0x1297.Handled = true;
					return;
				}
			}
		}

		ListModeEnum __0x1015()
		{
			var __0x746 = __0x280.ListMode;

			if( __0x746 == ListModeEnum.Auto )
			{
				if( __0x1031().Any( __0x1298 => __0x1298 is ContentBrowserItem_File ) )
					__0x746 = ListModeEnum.Tiles;
				else
					__0x746 = ListModeEnum.List;
			}

			return __0x746;
		}

		void __0x1016( bool __0x1299 )
		{
			var __0x747 = __0x1015();

			int __0x748 = (int)( (float)( __0x747 == ListModeEnum.Tiles ? __0x280.TileImageSize : __0x280.ListImageSize ) * EditorAPI.DPIScale );
			var __0x749 = (int)( (float)__0x280.ListColumnWidth * EditorAPI.DPIScale );

			if( __0x282 != __0x747 || __0x283 != __0x748 || __0x284 != __0x749 || __0x1299 )
			{
				__0x282 = __0x747;
				__0x283 = __0x748;
				__0x284 = __0x749;

				if( __0x308 != null )
				{
					__0x832.Mode = __0x308;
					
					
					
					
					
					
					
					
				}
				else
				{
					switch( __0x282 )
					{
					case ListModeEnum.List:
						__0x832.Mode = new ContentBrowserListModeList( this );
						break;
					case ListModeEnum.Tiles:
						__0x832.Mode = new ContentBrowserListModeTiles( this );
						break;
					}
				}

				__0x832.Mode?.Init();

				UpdateListImages();
			}
		}

		void __0x1017( EngineListView.Item __0x1300 )
		{
			var __0x750 = (Item)__0x1300.Tag;

			Image __0x751 = null;

			
			var __0x752 = __0x750 as ContentBrowserItem_File;
			if( __0x752 != null && !__0x752.IsDirectory )
				__0x751 = PreviewImagesManager.GetImageForResource( __0x752.FullPath, false );

			if( __0x751 == null )
				__0x751 = __0x750.image;
			if( __0x751 == null )
				__0x751 = __0x295.GetImage( __0x750.imageKey, __0x283, __0x750.ShowDisabled );
			if( __0x751 == null )
				__0x751 = ContentBrowserImageHelperBasicImages.Helper.GetImage( __0x750.imageKey, __0x283, __0x750.ShowDisabled );

			__0x1300.Image = __0x751;
		}

		public void UpdateListImages()
		{
			foreach( var __0x913 in __0x832.Items )
				__0x1017( __0x913 );

			__0x832.UpdateScrollBars();
			__0x832.Invalidate();
		}

		private void __0x1018( object __0x1301, MouseEventArgs __0x1302 )
		{
			var __0x753 = "";

			var __0x754 = __0x990( __0x806.GetNodeAt( __0x806.PointToClient( MousePosition ) ) );
			if( __0x754 != null )
				__0x753 = __0x754.item.GetDescription();

			if( __0x302 != __0x753 )
			{
				__0x833.SetToolTip( __0x806, __0x753 );

				
				
				
				__0x833.Hide( __0x806 );

				__0x302 = __0x753;
			}
		}

		
		
		
		
		

		bool __0x755 = true;
		bool __0x756;

		void __0x1019()
		{
			
			
			

			if( __0x755 == __0x280.Breadcrumb )
				return;

			__0x755 = __0x280.Breadcrumb;

			OnBreadcrumbVisibilityChanged( __0x755 );
		}

		protected virtual void OnBreadcrumbVisibilityChanged( bool visible )
		{
			var __0x757 = kryptonSplitContainer1.Panel2;
			if( visible )
			{
				if( !__0x757.Controls.Contains( __0x834 ) )
				{
					__0x757.Controls.Add( __0x834 );
					__0x757.Controls.Add( __0x837 );
				}

				UpdateBreadcrumb();
			}
			else
			{
				if( __0x757.Controls.Contains( __0x834 ) )
				{
					__0x757.Controls.Remove( __0x834 );
					__0x757.Controls.Remove( __0x837 );
				}
			}
		}

		private void __0x1020( object __0x1303, EventArgs __0x1304 )
		{
			__0x1025( __0x309.SelectedItem );
		}

		private void __0x1021( object __0x1305, EventArgs __0x1306 )
		{
			if( __0x309.SelectedItem.Parent != null )
				__0x309.SelectedItem = __0x309.SelectedItem.Parent;
		}

		public void UpdateBreadcrumb()
		{
			if( __0x281 != PanelModeEnum.Tree )
			{
				
				__0x1023();

				__0x1027( __0x806.SelectedNode );
			}
		}

		
		bool UseFirstTreeNodeAsRoot
		{
			get { return __0x272 == ModeEnum.Objects; }
		}

		internal bool UseSelectedTreeNodeAsRootForList { get; set; } = true;

		TreeNodeAdv __0x1022()
		{
			if( UseFirstTreeNodeAsRoot && __0x806.Root.Children.Count != 0 )
				return __0x806.Root.Children.First();
			return __0x806.Root;
		}

		void __0x1023()
		{
			try
			{
				__0x756 = true;

				if( UseFirstTreeNodeAsRoot )
					__0x309.RootItem.ShortText = __0x1022().ToString();
				else
					__0x309.RootItem.ShortText = EditorLocalization.Translate( "General", "Root" );

				__0x309.RootItem.Items.Clear();
				__0x1024( __0x1022(), __0x309.RootItem );
			}
			finally
			{
				__0x756 = false;
			}
		}

		void __0x1024( TreeNodeAdv __0x1307, KryptonBreadCrumbItem __0x1308 )
		{
			foreach( var __0x914 in __0x1307.Children )
			{
				if( __0x1029( __0x914 ) )
				{
					var __0x758 = new KryptonBreadCrumbItem( __0x914.ToString() );
					__0x1308.Items.Add( __0x758 );
					__0x1024( __0x914, __0x758 );
				}
			}
		}

		void __0x1025( KryptonBreadCrumbItem __0x1309 )
		{
			if( __0x756 )
				return;

			try
			{
				__0x756 = true;
				var __0x759 = __0x1026( __0x1309 );
				__0x759?.Expand();
				__0x806.SelectedNode = __0x759;
			}
			finally
			{
				__0x756 = false;
			}
		}

		TreeNodeAdv __0x1026( KryptonBreadCrumbItem __0x1310 )
		{
			if( __0x1310 == null )
				return null;

			Stack<string> __0x760 = new Stack<string>();
			var __0x761 = __0x1310;
			while( __0x761.Parent != null )
			{
				__0x760.Push( __0x761.ShortText );
				__0x761 = __0x761.Parent;
			}

			TreeNodeAdv __0x762 = __0x1022();
			while( __0x760.Count > 0 )
			{
				var __0x763 = __0x760.Pop();
				__0x762 = __0x762.Children.First( __0x1311 => __0x1311.ToString() == __0x763 );
			}
			return __0x762;
		}

		void __0x1027( TreeNodeAdv __0x1312 )
		{
			if( __0x756 )
				return;

			try
			{
				__0x756 = true;
				__0x309.SelectedItem = __0x1028( __0x1312 );
			}
			finally
			{
				__0x756 = false;
			}
		}

		KryptonBreadCrumbItem __0x1028( TreeNodeAdv __0x1313 )
		{
			Stack<string> __0x764 = new Stack<string>();
			if( __0x1313 != null )
			{
				var __0x765 = __0x1022();
				while( __0x1313 != __0x765 )
				{
					if( __0x1029( __0x1313 ) )
						__0x764.Push( __0x1313.ToString() );
					__0x1313 = __0x1313.Parent;
				}
			}
			var __0x766 = __0x309.RootItem;
			while( __0x764.Count > 0 )
				__0x766 = __0x766.Items[ __0x764.Pop() ];
			return __0x766;
		}

		bool __0x1029( TreeNodeAdv __0x1314 )
		{
			

			if( __0x1314.Children.Count > 0 ) 
				return true;

			var __0x767 = __0x990( __0x1314 );
			if( __0x767 == null )
				return false;
			
			return __0x767.item is ContentBrowserItem_File file && file.IsDirectory;
		}

		[Browsable( false )]
		public List<Item> RootItems
		{
			get { return __0x288; }
		}

		[DefaultValue( false )]
		public bool MultiSelect
		{
			get { return __0x304; }
			set
			{
				if( __0x304 == value )
					return;
				__0x304 = value;
				__0x1030();
			}
		}

		void __0x1030()
		{
			if( __0x806 != null )
				__0x806.SelectionMode = __0x304 ? TreeSelectionMode.Multi : TreeSelectionMode.Single;
			if( __0x832 != null )
				__0x832.MultiSelect = __0x304;
		}

		List<Item> __0x1031()
		{
			var __0x768 = new List<Item>();

			
			
			foreach( var __0x915 in __0x806.SelectedNodes )
			{
				var __0x769 = __0x990( __0x915 )?.item;
				if( __0x769 != null )
					__0x768.Add( __0x769 );
			}
			

			return __0x768;
		}

		void __0x1032()
		{
			if( !__0x301 )
			{
				if( __0x281 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x281 == PanelModeEnum.TwoPanelsSplitVertically )
				{
					var __0x770 = kryptonSplitContainer1.Orientation == Orientation.Horizontal ? kryptonSplitContainer1.Height : kryptonSplitContainer1.Width;
					if( __0x770 != 0 )
					{
						double __0x771 = __0x280.SplitterPosition * __0x770;
						kryptonSplitContainer1.SplitterDistance = (int)__0x771;
					}
				}
			}
		}

		private void __0x1033( object __0x1315, SplitterCancelEventArgs __0x1316 )
		{
			__0x301 = true;
		}

		private void __0x1034( object __0x1317, SplitterEventArgs __0x1318 )
		{
			__0x301 = false;

			
			if( __0x281 == PanelModeEnum.TwoPanelsSplitHorizontally || __0x281 == PanelModeEnum.TwoPanelsSplitVertically )
			{
				var __0x772 = kryptonSplitContainer1.Orientation == Orientation.Horizontal ? kryptonSplitContainer1.Height : kryptonSplitContainer1.Width;
				if( __0x772 != 0 )
					__0x280.SplitterPosition = (double)kryptonSplitContainer1.SplitterDistance / __0x772;
			}
		}

		void __0x1035()
		{
			if( __0x306 )
				return;

			__0x806.BeginUpdate();
			__0x306 = true;
		}

		void __0x1036()
		{
			if( __0x306 )
			{
				__0x306 = false;
				__0x806.EndUpdate();
			}
		}

		public void RemoveTreeViewIconsColumn()
		{
			__0x806.NodeControls.RemoveAt( 0 );
			__0x806.NodeControls[ 0 ].LeftMargin = 0;
		}

		[Browsable( false )]
		public TreeViewAdv TreeView
		{
			get { return __0x806; }
		}

		private void __0x1037( object __0x1319, EventArgs __0x1320 )
		{
			var __0x773 = new ContentBrowserSearchForm();
			__0x773.Browser = this;

			EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
			{
				__0x773.ShowDialog();
			} );
		}

		[Browsable( false )]
		public EngineListView.ModeClass ListViewModeOverride
		{
			get { return __0x308; }
			set { __0x308 = value; }
		}

		
		
		
		
		
		

		public Item FindItemByTag( object tag )
		{
			foreach( var __0x916 in GetAllItems() )
				if( __0x916.Tag == tag )
					return __0x916;
			return null;
		}

		private void __0x1038( object __0x1321, EventArgs __0x1322 )
		{
			if( ReadOnlyHierarchy )
				return;

			var __0x774 = new List<KryptonContextMenuItemBase>();

			{
				var __0x775 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.FilteringMode", "All" ), null,
				   delegate ( object __0x1323, EventArgs __0x1324 )
				   {
					   FilteringMode = null;
				   } );
				__0x775.Checked = __0x293 == null;
				__0x774.Add( __0x775 );
			}

			foreach( var __0x917 in __0x270 )
			{
				var __0x776 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.FilteringMode", __0x917.Name ), null,
				   delegate ( object __0x1325, EventArgs __0x1326 )
				   {
					   FilteringMode = (ContentBrowserFilteringMode)( (KryptonContextMenuItem)__0x1325 ).Tag;
				   } );
				__0x776.Checked = __0x293 == __0x917;
				__0x776.Tag = __0x917;
				__0x774.Add( __0x776 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.None, __0x774 );

			ShowContextMenuEvent?.Invoke( this, null, __0x774 );

			EditorContextMenuWinForms.Show( __0x774, this, PointToClient( Cursor.Position ) );
		}

		public void SetEnabled( bool value )
		{
			if( Enabled == value )
				return;

			Enabled = value;
			__0x832.Enabled = value;
			TreeViewHideVScroll();

			
			if( !Enabled )
				__0x832.Visible = false;
		}

		private void __0x1039( object __0x1327, EngineScrollBarEventArgs __0x1328 )
		{
			__0x806.VScrollBar.Value = (int)__0x844.Value;
		}

		private void __0x1040( object __0x1329, EngineScrollBarEventArgs __0x1330 )
		{
			__0x806.HScrollBar.Value = (int)__0x845.Value;
		}

		void __0x1041()
		{
			if( __0x806.HScrollBar.Size != new Size( __0x806.HScrollBar.Size.Width, 0 ) )
				__0x806.HScrollBar.Size = new Size( __0x806.HScrollBar.Size.Width, 0 );
			if( __0x806.HScrollBar.TabStop )
				__0x806.HScrollBar.TabStop = false;

			if( __0x806.VScrollBar.Size != new Size( 0, __0x806.VScrollBar.Size.Height ) )
				__0x806.VScrollBar.Size = new Size( 0, __0x806.VScrollBar.Size.Height );
			if( __0x806.VScrollBar.TabStop )
				__0x806.VScrollBar.TabStop = false;

			bool __0x777 = __0x844.MouseUpDownStatus;
			if( !__0x777 )
			{
				var __0x778 = (int)( (double)__0x806.Height / (double)__0x806.RowHeightScaled ) - 1;
				__0x844.ItemSize = __0x806.RowHeightScaled;
				__0x844.Maximum = Math.Max( __0x806.VScrollBar.Maximum - __0x778, 0 );

				__0x844.SmallChange = __0x806.VScrollBar.SmallChange;
				__0x844.LargeChange = __0x806.VScrollBar.LargeChange;
				__0x844.Value = __0x806.VScrollBar.Value;
			}

			bool __0x779 = __0x845.MouseUpDownStatus;
			if( !__0x779 )
			{
				__0x845.Maximum = Math.Max( __0x806.HScrollBar.Maximum - __0x806.ClientSize.Width, 0 );
				__0x845.SmallChange = __0x806.HScrollBar.SmallChange;
				__0x845.LargeChange = __0x806.HScrollBar.LargeChange;
				__0x845.Value = __0x806.HScrollBar.Value;
			}

			__0x846.Panel2Collapsed = !__0x806.HScrollBar.Visible;
			__0x847.Panel2Collapsed = !__0x806.VScrollBar.Visible;
			__0x848.Panel2Collapsed = !__0x806.VScrollBar.Visible;
		}

		void __0x1042()
		{
			__0x1041();
		}

		private void __0x1043( object __0x1331, MouseEventArgs __0x1332 )
		{
			var __0x780 = "";

			var __0x781 = __0x832.PointToClient( MousePosition );
			var __0x782 = __0x832.GetItemAt( __0x781 );
			if( __0x782 != null && __0x782.ShowTooltip )
				__0x780 = __0x782.Description;

			if( __0x303 != __0x780 )
			{
				__0x849.SetToolTip( this.__0x832, __0x780 );

				
				
				
				__0x849.Hide( __0x832 );

				__0x303 = __0x780;
			}
		}

		public void AddImageKey( string key, Image imageSmall, Image imageBig )
		{
			if( imageSmall == null && imageBig == null )
				return;

			if( imageSmall == null )
			{
				AddImageKey( key, imageBig );
				return;
			}

			if( imageBig == null )
			{
				AddImageKey( key, imageSmall );
				return;
			}

			__0x295.AddImage( key, imageSmall, imageBig );
		}

		public void AddImageKey( string key, Image image )
		{
			__0x295.AddImage( key, null, image );
		}

		
		
		

		public EngineListView GetListView()
		{
			return __0x832;
		}

		private void __0x1044( EngineListView __0x1333, EngineListView.Item[] __0x1334, ref bool __0x1335 )
		{
			__0x1335 = __0x1334.Length == 1;
		}

		public List<Item> GetItemsByListView()
		{
			var __0x783 = new List<Item>();

			for( int __0x784 = 0; __0x784 < __0x832.Items.Count; __0x784++ )
			{
				
				
				var __0x785 = __0x832.Items[ __0x784 ];
				var __0x786 = __0x785.Tag as Item;
				if( __0x786 != null )
					__0x783.Add( __0x786 );
				
			}

			return __0x783;
		}

		
		public List<Item> GetVisibleItemsByListView()
		{
			var __0x787 = new List<Item>();

			for( int __0x788 = 0; __0x788 < __0x832.Items.Count; __0x788++ )
			{
				if( __0x832.GetItemRectangle( __0x788, out _ ) )
				{
					var __0x789 = __0x832.Items[ __0x788 ];
					var __0x790 = __0x789.Tag as Item;
					if( __0x790 != null )
						__0x787.Add( __0x790 );
				}
			}

			return __0x787;
		}

		bool __0x1045( bool __0x1336 )
		{
			foreach( var __0x918 in SelectedItems )
			{
				var __0x791 = __0x918 as ContentBrowserItem_Type;
				if( __0x791 != null && MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x791.Type ) )
				{
					
					

					var __0x792 = EditorFavorites.Contains( __0x791.Type.Name );
					if( __0x1336 && !__0x792 || !__0x1336 && __0x792 )
						return true;
				}

				var __0x793 = __0x918 as ContentBrowserItem_File;
				if( __0x793 != null )
				{
					var __0x794 = EditorFavorites.Contains( VirtualPathUtility.GetVirtualPathByReal( __0x793.FullPath ) );
					if( __0x1336 && !__0x794 || !__0x1336 && __0x794 )
						return true;
				}
			}

			return false;
		}

		void __0x1046()
		{
			foreach( var __0x919 in SelectedItems )
			{
				var __0x795 = __0x919 as ContentBrowserItem_Type;
				if( __0x795 != null )
					EditorFavorites.Add( __0x795.Type.Name );

				var __0x796 = __0x919 as ContentBrowserItem_File;
				if( __0x796 != null )
					EditorFavorites.Add( VirtualPathUtility.GetVirtualPathByReal( __0x796.FullPath ) );
			}
		}

		void __0x1047()
		{
			foreach( var __0x920 in SelectedItems )
			{
				var __0x797 = __0x920 as ContentBrowserItem_Type;
				if( __0x797 != null )
					EditorFavorites.Remove( __0x797.Type.Name );

				var __0x798 = __0x920 as ContentBrowserItem_File;
				if( __0x798 != null )
					EditorFavorites.Remove( VirtualPathUtility.GetVirtualPathByReal( __0x798.FullPath ) );
			}
		}

	}
}

namespace NeoAxis.Editor
{
    partial class ContentBrowser
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x799 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x799 != null))
            {
                __0x799.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x1048()
        {
			this.__0x799 = new System.ComponentModel.Container();
			this.__0x800 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x819 = new System.Windows.Forms.ToolStripButton();
			this.__0x823 = new System.Windows.Forms.ToolStripButton();
			this.__0x826 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x818 = new System.Windows.Forms.ToolStripButton();
			this.__0x829 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x830 = new System.Windows.Forms.ToolStripButton();
			this.__0x817 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x810 = new System.Windows.Forms.ToolStripButton();
			this.__0x811 = new System.Windows.Forms.ToolStripButton();
			this.__0x812 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x827 = new System.Windows.Forms.ToolStripButton();
			this.__0x828 = new System.Windows.Forms.ToolStripButton();
			this.__0x803 = new System.Windows.Forms.ToolStripButton();
			this.__0x804 = new System.Windows.Forms.ToolStripButton();
			this.__0x813 = new System.Windows.Forms.ToolStripButton();
			this.__0x814 = new System.Windows.Forms.ToolStripButton();
			this.__0x815 = new System.Windows.Forms.ToolStripButton();
			this.__0x816 = new System.Windows.Forms.ToolStripButton();
			this.__0x820 = new System.Windows.Forms.ToolStripButton();
			this.__0x821 = new System.Windows.Forms.ToolStripButton();
			this.__0x822 = new System.Windows.Forms.ToolStripButton();
			this.__0x843 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x842 = new System.Windows.Forms.ToolStripButton();
			this.__0x802 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x805 = new System.Windows.Forms.ToolStripTextBox();
			this.__0x801 = new System.Windows.Forms.ToolStripMenuItem();
			this.kryptonSplitContainer1 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x831 = new NeoAxis.Editor.BordersContainer();
			this.__0x846 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x847 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x806 = new Aga.Controls.Tree.TreeViewAdv();
			this.__0x824 = new Aga.Controls.Tree.NodeControls.NodeStateIcon();
			this.__0x825 = new Aga.Controls.Tree.NodeControls.NodeTextBox();
			this.__0x844 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x848 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x845 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x808 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x809 = new System.Windows.Forms.ToolStripTextBox();
			this.__0x832 = new NeoAxis.Editor.EngineListView();
			this.__0x838 = new ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x834 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x835 = new System.Windows.Forms.ToolStripButton();
			this.__0x836 = new NeoAxis.Editor.ToolStripBreadCrumbHost();
			this.__0x837 = new ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x840 = new ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x839 = new ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x841 = new ComponentFactory.Krypton.Toolkit.KryptonBorderEdge();
			this.__0x807 = new System.Windows.Forms.Timer(this.__0x799);
			this.__0x833 = new NeoAxis.Editor.EngineToolTip(this.__0x799);
			this.__0x849 = new NeoAxis.Editor.EngineToolTip(this.__0x799);
			this.__0x800.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			this.__0x831.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x846)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x846.Panel1)).BeginInit();
			this.__0x846.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x846.Panel2)).BeginInit();
			this.__0x846.Panel2.SuspendLayout();
			this.__0x846.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x847)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x847.Panel1)).BeginInit();
			this.__0x847.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x847.Panel2)).BeginInit();
			this.__0x847.Panel2.SuspendLayout();
			this.__0x847.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x848)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x848.Panel1)).BeginInit();
			this.__0x848.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x848.Panel2)).BeginInit();
			this.__0x848.SuspendLayout();
			this.__0x808.SuspendLayout();
			this.__0x834.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x800.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x800.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x800.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x819,
            this.__0x823,
            this.__0x826,
            this.__0x818,
            this.__0x829,
            this.__0x830,
            this.__0x817,
            this.__0x810,
            this.__0x811,
            this.__0x812,
            this.__0x827,
            this.__0x828,
            this.__0x803,
            this.__0x804,
            this.__0x813,
            this.__0x814,
            this.__0x815,
            this.__0x816,
            this.__0x820,
            this.__0x821,
            this.__0x822,
            this.__0x843,
            this.__0x842,
            this.__0x802,
            this.__0x805});
			this.__0x800.Location = new System.Drawing.Point(0, 0);
			this.__0x800.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x800.Name = "toolStripForTreeView";
			this.__0x800.ShowItemToolTips = false;
			this.__0x800.AutoSize = false;
			this.__0x800.Size = new System.Drawing.Size(511, 26);
			this.__0x800.TabIndex = 3;
			this.__0x800.Text = "toolStrip1";
			
			
			
			this.__0x819.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x819.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x819.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x819.Name = "toolStripButtonOptions";
			this.__0x819.AutoSize = false;
			this.__0x819.Size = new System.Drawing.Size(23, 22);
			this.__0x819.Text = "Options";
			this.__0x819.Click += new System.EventHandler(this.__0x962);
			
			
			
			this.__0x823.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x823.Image = global::NeoAxis.Properties.Resources.Members_16_2;
			this.__0x823.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x823.Name = "toolStripButtonShowMembers";
			this.__0x823.AutoSize = false;
			this.__0x823.Size = new System.Drawing.Size(23, 22);
			this.__0x823.Text = "Show Members";
			this.__0x823.Click += new System.EventHandler(this.__0x988);
			
			
			
			this.__0x826.Name = "toolStripSeparatorFilteringMode";
			this.__0x826.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x818.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x818.Image = global::NeoAxis.Properties.Resources.Selection_16_2;
			this.__0x818.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x818.Name = "toolStripDropDownButtonFilteringMode";
			this.__0x818.AutoSize = false;
			this.__0x818.Size = new System.Drawing.Size(30, 22);
			this.__0x818.Text = "Filtering Mode";
			
			
			
			this.__0x829.Name = "toolStripSeparatorOpen";
			this.__0x829.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x830.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x830.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.__0x830.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x830.Name = "toolStripButtonOpen";
			this.__0x830.AutoSize = false;
			this.__0x830.Size = new System.Drawing.Size(23, 22);
			this.__0x830.Text = "Open";
			this.__0x830.Click += new System.EventHandler(this.__0x1006);
			
			
			
			this.__0x817.Name = "toolStripSeparatorEditSettings";
			this.__0x817.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x810.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x810.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.__0x810.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x810.Name = "toolStripButtonEditor";
			this.__0x810.AutoSize = false;
			this.__0x810.Size = new System.Drawing.Size(23, 22);
			this.__0x810.Text = "Editor";
			this.__0x810.Click += new System.EventHandler(this.__0x966);
			
			
			
			this.__0x811.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x811.Image = global::NeoAxis.Properties.Resources.Maximize_16;
			this.__0x811.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x811.Name = "toolStripButtonSettings";
			this.__0x811.AutoSize = false;
			this.__0x811.Size = new System.Drawing.Size(23, 22);
			this.__0x811.Text = "Settings";
			this.__0x811.Click += new System.EventHandler(this.__0x967);
			
			
			
			this.__0x812.Name = "toolStripSeparatorButtonsForEditing";
			this.__0x812.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x827.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x827.Image = global::NeoAxis.Properties.Resources.NewFolder_16;
			this.__0x827.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x827.Name = "toolStripButtonNewFolder";
			this.__0x827.AutoSize = false;
			this.__0x827.Size = new System.Drawing.Size(23, 22);
			this.__0x827.Text = "New Folder";
			this.__0x827.Click += new System.EventHandler(this.__0x968);
			
			
			
			this.__0x828.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x828.Image = global::NeoAxis.Properties.Resources.New_16;
			this.__0x828.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x828.Name = "toolStripButtonNewResource";
			this.__0x828.AutoSize = false;
			this.__0x828.Size = new System.Drawing.Size(23, 22);
			this.__0x828.Text = "New Resource";
			this.__0x828.Click += new System.EventHandler(this.__0x969);
			
			
			
			this.__0x803.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x803.Image = global::NeoAxis.Properties.Resources.New_16;
			this.__0x803.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x803.Name = "toolStripButtonNewObject";
			this.__0x803.AutoSize = false;
			this.__0x803.Size = new System.Drawing.Size(23, 22);
			this.__0x803.Text = "New Object";
			this.__0x803.Click += new System.EventHandler(this.__0x970);
			
			
			
			this.__0x804.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x804.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x804.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x804.Name = "toolStripButtonDelete";
			this.__0x804.AutoSize = false;
			this.__0x804.Size = new System.Drawing.Size(23, 22);
			this.__0x804.Text = "Delete";
			this.__0x804.Click += new System.EventHandler(this.__0x971);
			
			
			
			this.__0x813.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x813.Enabled = false;
			this.__0x813.Image = global::NeoAxis.Properties.Resources.Rename_16x;
			this.__0x813.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x813.Name = "toolStripButtonRename";
			this.__0x813.AutoSize = false;
			this.__0x813.Size = new System.Drawing.Size(23, 22);
			this.__0x813.Text = "Rename";
			this.__0x813.Click += new System.EventHandler(this.__0x972);
			
			
			
			this.__0x814.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x814.Image = global::NeoAxis.Properties.Resources.Copy_16;
			this.__0x814.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x814.Name = "toolStripButtonClone";
			this.__0x814.AutoSize = false;
			this.__0x814.Size = new System.Drawing.Size(23, 22);
			this.__0x814.Text = "Duplicate";
			this.__0x814.Click += new System.EventHandler(this.__0x973);
			
			
			
			this.__0x815.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x815.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.__0x815.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x815.Name = "toolStripButtonMoveUp";
			this.__0x815.AutoSize = false;
			this.__0x815.Size = new System.Drawing.Size(23, 22);
			this.__0x815.Text = "Move Up";
			this.__0x815.Click += new System.EventHandler(this.__0x974);
			
			
			
			this.__0x816.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x816.Image = global::NeoAxis.Properties.Resources.MoveDown_16;
			this.__0x816.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x816.Name = "toolStripButtonMoveDown";
			this.__0x816.AutoSize = false;
			this.__0x816.Size = new System.Drawing.Size(23, 22);
			this.__0x816.Text = "Move Down";
			this.__0x816.Click += new System.EventHandler(this.__0x975);
			
			
			
			this.__0x820.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x820.Image = global::NeoAxis.Properties.Resources.Cut_16;
			this.__0x820.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x820.Name = "toolStripButtonCut";
			this.__0x820.AutoSize = false;
			this.__0x820.Size = new System.Drawing.Size(23, 22);
			this.__0x820.Text = "Cut";
			this.__0x820.Click += new System.EventHandler(this.__0x976);
			
			
			
			this.__0x821.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x821.Image = global::NeoAxis.Properties.Resources.Copy_16;
			this.__0x821.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x821.Name = "toolStripButtonCopy";
			this.__0x821.AutoSize = false;
			this.__0x821.Size = new System.Drawing.Size(23, 22);
			this.__0x821.Text = "Copy";
			this.__0x821.Click += new System.EventHandler(this.__0x977);
			
			
			
			this.__0x822.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x822.Image = global::NeoAxis.Properties.Resources.Paste_16;
			this.__0x822.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x822.Name = "toolStripButtonPaste";
			this.__0x822.AutoSize = false;
			this.__0x822.Size = new System.Drawing.Size(23, 22);
			this.__0x822.Text = "Paste";
			this.__0x822.Click += new System.EventHandler(this.__0x978);
			
			
			
			this.__0x843.Name = "toolStripSeparatorSearch";
			this.__0x843.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x842.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x842.Image = global::NeoAxis.Properties.Resources.Focus_16;
			this.__0x842.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x842.Name = "toolStripButtonSearch";
			this.__0x842.AutoSize = false;
			this.__0x842.Size = new System.Drawing.Size(23, 22);
			this.__0x842.Text = "Search";
			this.__0x842.Click += new System.EventHandler(this.__0x1037);
			
			
			
			this.__0x802.Name = "toolStripSeparatorSearchBar";
			this.__0x802.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x805.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x805.Enabled = false;
			this.__0x805.Name = "toolStripTextBoxSearch";
			this.__0x805.Size = new System.Drawing.Size(6, 25);
			this.__0x805.Text = "Search";
			
			
			
			this.__0x801.Name = "showFilesInTreeToolStripMenuItem";
			this.__0x801.Size = new System.Drawing.Size(197, 26);
			this.__0x801.Text = "Show files in tree";
			
			
			
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 25);
			this.kryptonSplitContainer1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			this.kryptonSplitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.__0x831);
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.__0x808);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add( this.__0x832 );
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x838);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x834);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x837);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x840);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x839);
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.__0x841);
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(511, 599);
			this.kryptonSplitContainer1.SplitterDistance = 214;
			this.kryptonSplitContainer1.SplitterPercent = 0.35726210350584309D;
			this.kryptonSplitContainer1.TabIndex = 0;
			this.kryptonSplitContainer1.SplitterMoved += new System.Windows.Forms.SplitterEventHandler(this.__0x1034);
			this.kryptonSplitContainer1.SplitterMoving += new System.Windows.Forms.SplitterCancelEventHandler(this.__0x1033);
			
			
			
			this.__0x831.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(213)))), ((int)(((byte)(213)))), ((int)(((byte)(213)))));
			this.__0x831.Controls.Add(this.__0x846);
			this.__0x831.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x831.Location = new System.Drawing.Point(0, 0);
			this.__0x831.Margin = new System.Windows.Forms.Padding(4);
			this.__0x831.Name = "treeBordersContainer";
			this.__0x831.Size = new System.Drawing.Size(511, 214);
			this.__0x831.TabIndex = 2;
			
			
			
			this.__0x846.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x846.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x846.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x846.IsSplitterFixed = true;
			this.__0x846.Location = new System.Drawing.Point(1, 1);
			this.__0x846.Name = "kryptonSplitContainerTree";
			this.__0x846.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.__0x846.Panel1.Controls.Add(this.__0x847);
			
			
			
			this.__0x846.Panel2.Controls.Add(this.__0x848);
			this.__0x846.Panel2MinSize = 16;
			this.__0x846.Size = new System.Drawing.Size(509, 212);
			this.__0x846.SplitterDistance = 193;
			this.__0x846.SplitterPercent = 0.910377358490566D;
			this.__0x846.SplitterWidth = 0;
			this.__0x846.TabIndex = 2;
			
			
			
			this.__0x847.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x847.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x847.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x847.IsSplitterFixed = true;
			this.__0x847.Location = new System.Drawing.Point(0, 0);
			this.__0x847.Name = "kryptonSplitContainerTreeSub1";
			
			
			
			this.__0x847.Panel1.Controls.Add(this.__0x806);
			
			
			
			this.__0x847.Panel2.Controls.Add(this.__0x844);
			this.__0x847.Panel2MinSize = 16;
			this.__0x847.Size = new System.Drawing.Size(509, 193);
			this.__0x847.SplitterDistance = 489;
			this.__0x847.SplitterPercent = 0.96070726915520632D;
			this.__0x847.SplitterWidth = 1;
			this.__0x847.TabIndex = 0;
			
			
			
			this.__0x806.AllowDrop = true;
			this.__0x806.BackColor = System.Drawing.SystemColors.Window;
			this.__0x806.ColumnHeaderHeight = 0;
			this.__0x806.DefaultToolTipProvider = null;
			this.__0x806.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x806.DragDropMarkColor = System.Drawing.Color.Black;
			this.__0x806.Font = new System.Drawing.Font("Tahoma", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x806.FullRowSelect = true;
			this.__0x806.FullRowSelectActiveColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(120)))), ((int)(((byte)(215)))));
			this.__0x806.FullRowSelectInactiveColor = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x806.HighlightDropPosition = false;
			this.__0x806.LineColor = System.Drawing.SystemColors.ControlDark;
			this.__0x806.Location = new System.Drawing.Point(0, 0);
			this.__0x806.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x806.Model = null;
			this.__0x806.Name = "treeView";
			this.__0x806.NodeControls.Add(this.__0x824);
			this.__0x806.NodeControls.Add(this.__0x825);
			this.__0x806.NodeFilter = null;
			this.__0x806.RowHeight = 17;
			this.__0x806.SelectedNode = null;
			this.__0x806.ShowLines = false;
			this.__0x806.Size = new System.Drawing.Size(489, 193);
			this.__0x806.TabIndex = 0;
			this.__0x806.VScrollAlwaysHide = false;
			this.__0x806.ItemDrag += new System.Windows.Forms.ItemDragEventHandler(this.__0x985);
			this.__0x806.NodeMouseDoubleClick += new System.EventHandler<Aga.Controls.Tree.TreeNodeAdvMouseEventArgs>(this.__0x931);
			this.__0x806.SelectionChanged += new System.EventHandler(this.__0x929);
			this.__0x806.Collapsing += new System.EventHandler<Aga.Controls.Tree.TreeViewAdvEventArgs>(this.__0x961);
			this.__0x806.Expanding += new System.EventHandler<Aga.Controls.Tree.TreeViewAdvEventArgs>(this.__0x960);
			this.__0x806.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x984);
			this.__0x806.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x983);
			this.__0x806.Enter += new System.EventHandler(this.__0x989);
			this.__0x806.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x933);
			this.__0x806.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x936);
			this.__0x806.MouseDown += new System.Windows.Forms.MouseEventHandler(this.__0x930);
			this.__0x806.MouseMove += new System.Windows.Forms.MouseEventHandler(this.__0x1018);
			this.__0x806.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x937);
			
			
			
			this.__0x824.DataPropertyName = "Image";
			this.__0x824.LeftMargin = 1;
			this.__0x824.ParentColumn = null;
			this.__0x824.ScaleMode = Aga.Controls.Tree.ImageScaleMode.AlwaysScale;
			
			
			
			this.__0x825.DataPropertyName = "Text";
			this.__0x825.Font = new System.Drawing.Font("Segoe UI", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x825.IncrementalSearchEnabled = true;
			this.__0x825.LeftMargin = 3;
			this.__0x825.ParentColumn = null;
			this.__0x825.DrawText += new System.EventHandler<Aga.Controls.Tree.NodeControls.DrawTextEventArgs>(this.__0x1004);
			
			
			
			this.__0x844.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x844.Location = new System.Drawing.Point(0, 0);
			this.__0x844.Name = "engineScrollBarTreeVertical";
			this.__0x844.Size = new System.Drawing.Size(19, 193);
			this.__0x844.TabIndex = 0;
			
			
			
			this.__0x848.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x848.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.__0x848.IsSplitterFixed = true;
			this.__0x848.Location = new System.Drawing.Point(0, 0);
			this.__0x848.Name = "kryptonSplitContainerTreeSub2";
			
			
			
			this.__0x848.Panel1.Controls.Add(this.__0x845);
			this.__0x848.Panel2MinSize = 16;
			this.__0x848.Size = new System.Drawing.Size(509, 19);
			this.__0x848.SplitterDistance = 489;
			this.__0x848.SplitterPercent = 0.96070726915520632D;
			this.__0x848.SplitterWidth = 1;
			this.__0x848.TabIndex = 0;
			
			
			
			this.__0x845.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x845.Location = new System.Drawing.Point(0, 0);
			this.__0x845.MinimumSize = new System.Drawing.Size(102, 0);
			this.__0x845.Name = "engineScrollBarTreeHorizontal";
			this.__0x845.Orientation = System.Windows.Forms.Orientation.Horizontal;
			this.__0x845.Size = new System.Drawing.Size(489, 19);
			this.__0x845.TabIndex = 1;
			
			
			
			this.__0x808.Font = new System.Drawing.Font("Segoe UI", 9F);
			this.__0x808.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x808.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x808.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x809});
			this.__0x808.Location = new System.Drawing.Point(0, 0);
			this.__0x808.Name = "toolStripSearch";
			this.__0x808.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
			this.__0x808.ShowItemToolTips = false;
			this.__0x808.Size = new System.Drawing.Size(511, 25);
			this.__0x808.TabIndex = 1;
			this.__0x808.Text = "toolStrip2";
			this.__0x808.Visible = false;
			
			
			
			this.__0x809.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x809.Name = "toolStripTextBoxSearch_notUsed";
			this.__0x809.Size = new System.Drawing.Size(200, 25);
			this.__0x809.Text = "Search";
			
			
			
			this.__0x832.Location = new System.Drawing.Point(-1, -1);
			this.__0x832.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x832.Margin = new System.Windows.Forms.Padding(4);
			this.__0x832.Name = "listView";
			this.__0x832.Size = new System.Drawing.Size(453, 288);
			this.__0x832.TabIndex = 2;
			this.__0x832.SelectedItemsChanged += new NeoAxis.Editor.EngineListView.SelectedItemsChangedDelegate(this.__0x1011);
			this.__0x832.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x1014);
			this.__0x832.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x1009);
			this.__0x832.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.__0x1013);
			this.__0x832.MouseMove += new System.Windows.Forms.MouseEventHandler(this.__0x1043);
			this.__0x832.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x1010);
			this.__0x832.Font = new System.Drawing.Font( "Tahoma", 7.8F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ( (byte)( 204 ) ) );
			
			
			
			this.__0x838.Dock = System.Windows.Forms.DockStyle.Top;
			this.__0x838.Location = new System.Drawing.Point(1, 31);
			this.__0x838.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x838.Name = "kryptonBorderEdgeT2";
			this.__0x838.Size = new System.Drawing.Size(509, 1);
			this.__0x838.Text = "kryptonBorderEdge2";
			
			
			
			this.__0x834.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x834.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x834.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x835,
            this.__0x836});
			this.__0x834.Location = new System.Drawing.Point(1, 1);
			this.__0x834.Name = "toolStripForListView";
			this.__0x834.ShowItemToolTips = false;
			this.__0x834.AutoSize = false;
			this.__0x834.Size = new System.Drawing.Size(509, 27);
			this.__0x834.Stretch = true;
			this.__0x834.TabIndex = 3;
			
			
			
			this.__0x835.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x835.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.__0x835.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x835.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.__0x835.Name = "toolStripButtonUp";
			this.__0x835.AutoSize = false;
			this.__0x835.Size = new System.Drawing.Size(23, 22);
			this.__0x835.Click += new System.EventHandler(this.__0x1021);
			
			
			
			this.__0x836.Font = new System.Drawing.Font("Microsoft Sans Serif", 4F, System.Drawing.FontStyle.Italic);
			this.__0x836.Margin = new System.Windows.Forms.Padding( 0, 0, 0, 0 );
			this.__0x836.Padding = new System.Windows.Forms.Padding( 0, 0, 0, 0 );
			this.__0x836.Name = "toolStripBreadCrumbHost";
			
			this.__0x836.Size = new System.Drawing.Size(133, 27);
			
			
			
			this.__0x837.Dock = System.Windows.Forms.DockStyle.Top;
			this.__0x837.Location = new System.Drawing.Point(1, 0);
			this.__0x837.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x837.Name = "kryptonBorderEdgeT";
			this.__0x837.Size = new System.Drawing.Size(509, 1);
			this.__0x837.Text = "kryptonBorderEdge1";
			
			
			
			this.__0x840.Dock = System.Windows.Forms.DockStyle.Left;
			this.__0x840.Location = new System.Drawing.Point(0, 0);
			this.__0x840.Margin = new System.Windows.Forms.Padding(4);
			this.__0x840.Name = "kryptonBorderEdgeL";
			this.__0x840.Orientation = System.Windows.Forms.Orientation.Vertical;
			this.__0x840.Size = new System.Drawing.Size(1, 379);
			this.__0x840.Text = "kryptonBorderEdge1";
			
			
			
			this.__0x839.Dock = System.Windows.Forms.DockStyle.Right;
			this.__0x839.Location = new System.Drawing.Point(510, 0);
			this.__0x839.Margin = new System.Windows.Forms.Padding(4);
			this.__0x839.Name = "kryptonBorderEdgeR";
			this.__0x839.Orientation = System.Windows.Forms.Orientation.Vertical;
			this.__0x839.Size = new System.Drawing.Size(1, 379);
			this.__0x839.Text = "kryptonBorderEdge3";
			
			
			
			this.__0x841.Dock = System.Windows.Forms.DockStyle.Bottom;
			this.__0x841.Location = new System.Drawing.Point(0, 379);
			this.__0x841.Margin = new System.Windows.Forms.Padding(4);
			this.__0x841.Name = "kryptonBorderEdgeB";
			this.__0x841.Size = new System.Drawing.Size(511, 1);
			this.__0x841.Text = "kryptonBorderEdge2";
			
			
			
			this.__0x807.Interval = 50;
			this.__0x807.Tick += new System.EventHandler(this.__0x939);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.kryptonSplitContainer1);
			this.Controls.Add(this.__0x800);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "ContentBrowser";
			this.Size = new System.Drawing.Size(511, 624);
			this.Load += new System.EventHandler(this.__0x921);
			this.Resize += new System.EventHandler(this.__0x935);
			this.__0x800.ResumeLayout(false);
			this.__0x800.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			this.__0x831.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x846.Panel1)).EndInit();
			this.__0x846.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x846.Panel2)).EndInit();
			this.__0x846.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x846)).EndInit();
			this.__0x846.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x847.Panel1)).EndInit();
			this.__0x847.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x847.Panel2)).EndInit();
			this.__0x847.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x847)).EndInit();
			this.__0x847.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x848.Panel1)).EndInit();
			this.__0x848.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x848.Panel2)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x848)).EndInit();
			this.__0x848.ResumeLayout(false);
			this.__0x808.ResumeLayout(false);
			this.__0x808.PerformLayout();
			this.__0x834.ResumeLayout(false);
			this.__0x834.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

        #endregion
        private NeoAxis.Editor.EngineToolStrip __0x800;
		private System.Windows.Forms.ToolStripMenuItem __0x801;
		private System.Windows.Forms.ToolStripSeparator __0x802;
		private System.Windows.Forms.ToolStripButton __0x803;
		private System.Windows.Forms.ToolStripButton __0x804;
		private System.Windows.Forms.ToolStripTextBox __0x805;
		private Aga.Controls.Tree.TreeViewAdv __0x806;
		private System.Windows.Forms.Timer __0x807;
		private NeoAxis.Editor.EngineToolStrip __0x808;
		private System.Windows.Forms.ToolStripTextBox __0x809;
		private System.Windows.Forms.ToolStripButton __0x810;
		private System.Windows.Forms.ToolStripButton __0x811;
		private System.Windows.Forms.ToolStripSeparator __0x812;
		private System.Windows.Forms.ToolStripButton __0x813;
		private System.Windows.Forms.ToolStripButton __0x814;
		private System.Windows.Forms.ToolStripButton __0x815;
		private System.Windows.Forms.ToolStripButton __0x816;
		private System.Windows.Forms.ToolStripSeparator __0x817;
		private System.Windows.Forms.ToolStripButton __0x818;
		private System.Windows.Forms.ToolStripButton __0x819;
		private System.Windows.Forms.ToolStripButton __0x820;
		private System.Windows.Forms.ToolStripButton __0x821;
		private System.Windows.Forms.ToolStripButton __0x822;
		private System.Windows.Forms.ToolStripButton __0x823;
		private Aga.Controls.Tree.NodeControls.NodeStateIcon __0x824;
		private Aga.Controls.Tree.NodeControls.NodeTextBox __0x825;
		private System.Windows.Forms.ToolStripSeparator __0x826;
		private System.Windows.Forms.ToolStripButton __0x827;
		private System.Windows.Forms.ToolStripButton __0x828;
		private System.Windows.Forms.ToolStripSeparator __0x829;
		private System.Windows.Forms.ToolStripButton __0x830;
		private BordersContainer __0x831;
		private NeoAxis.Editor.EngineListView __0x832;
		private NeoAxis.Editor.EngineToolTip __0x833;
		private NeoAxis.Editor.EngineToolStrip __0x834;
		private System.Windows.Forms.ToolStripButton __0x835;
		private ToolStripBreadCrumbHost __0x836;
		private ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x837;
		private ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x838;
		public ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
		private ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x839;
		private ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x840;
		private ComponentFactory.Krypton.Toolkit.KryptonBorderEdge __0x841;
		private System.Windows.Forms.ToolStripButton __0x842;
		private System.Windows.Forms.ToolStripSeparator __0x843;
		private EngineScrollBar __0x844;
		private EngineScrollBar __0x845;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x846;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x847;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x848;
		private NeoAxis.Editor.EngineToolTip __0x849;
	}
}





namespace NeoAxis.Editor
{
	public abstract class ContentBrowserFilteringMode
	{
		public abstract string Name
		{
			get;
		}

		public abstract bool AddGroupGeneral { get; }
		public abstract bool AddGroupsBaseTypesAddonsProject { get; }
		public abstract bool AddGroupsFavorites { get; }
		public abstract bool AddSolution { get; }
		public abstract bool AddGroupAllTypes { get; }
		public abstract bool AddFiles { get; }

		public virtual string[] FileSearchPatterns { get { return null; } }
		public virtual bool HideDirectoriesWithoutItems { get { return false; } }

		public virtual bool ExpandAllFileItemsAtStartup { get { return false; } }

		public virtual bool AddItem( ContentBrowser.Item item ) { return true; }
	}
}





namespace NeoAxis.Editor
{
	class ContentBrowserImageHelper
	{
		static Image __0x1339;
		static Image __0x1340;

		ImageCollection __0x1341 = new ImageCollection();
		ImageCollection __0x1342 = new ImageCollection();

		Dictionary<string, Image> __0x1343 = new Dictionary<string, Image>();
		Dictionary<string, Image> __0x1344 = new Dictionary<string, Image>();

		Dictionary<(string, int), Image> __0x1345 = new Dictionary<(string, int), Image>();

		

		static ContentBrowserImageHelper()
		{
			__0x1339 = Properties.Resources.Default_16;
			__0x1340 = Properties.Resources.Default_32;
		}

		public void Dispose()
		{
			
		}

		public void AddImage( string key, Image smallImage, Image largeImage )
		{
			if( !__0x1341.ContainsKey( key ) )
				__0x1341.Add( key, smallImage ?? __0x1339 );

			if( !__0x1342.ContainsKey( key ) )
				__0x1342.Add( key, largeImage ?? __0x1340 );
		}

		
		public Image GetImageScaledForTreeView( string key, bool disabled )
		{
			if( string.IsNullOrEmpty( key ) )
				key = "Default";

			
			if( !__0x1343.ContainsKey( key ) )
			{
				if( !__0x1341.ContainsKey( key ) )
					return null;

				var __0x1346 = EditorAPI.GetImageForDispalyScale( __0x1341[ key ], __0x1342[ key ] );
				__0x1343[ key ] = __0x1346;
			}

			var __0x1347 = __0x1343[ key ];

			if( disabled )
			{
				if( !__0x1344.TryGetValue( key, out var imageDisabled ) )
				{
					try
					{
						imageDisabled = ToolStripRenderer.CreateDisabledImage( __0x1347 );
					}
					catch { }

					if( imageDisabled != null )
						__0x1344[ key ] = imageDisabled;
				}

				__0x1347 = imageDisabled;
			}

			return __0x1347;
		}

		public Image GetImage( string key, int requestedSize, bool disabled )
		{
			if( string.IsNullOrEmpty( key ) )
				key = "Default";

			Image __0x1348 = null;
			if( requestedSize <= 16 )
				__0x1348 = __0x1341[ key ];
			if( __0x1348 == null )
				__0x1348 = __0x1342[ key ];
			if( __0x1348 == null )
				__0x1348 = __0x1341[ key ];

			if( disabled && __0x1348 != null )
			{
				var __0x1349 = (key, requestedSize);

				if( !__0x1345.TryGetValue( __0x1349, out var imageDisabled ) )
				{
					try
					{
						imageDisabled = ToolStripRenderer.CreateDisabledImage( __0x1348 );
					}
					catch { }

					if( imageDisabled != null )
						__0x1345[ __0x1349 ] = imageDisabled;
				}

				__0x1348 = imageDisabled;
			}

			return __0x1348;
		}
	}

	

	static class ContentBrowserImageHelperBasicImages
	{
		static ContentBrowserImageHelper __0x1350 = new ContentBrowserImageHelper();

		public static ContentBrowserImageHelper Helper
		{
			get { return __0x1350; }
		}

		static ContentBrowserImageHelperBasicImages()
		{
			Helper.AddImage( "Default", Properties.Resources.Default_16, Properties.Resources.Default_32 );
			Helper.AddImage( "Namespace", Properties.Resources.Namespace_16, null );
			Helper.AddImage( "Class", Properties.Resources.Class, Properties.Resources.Class_32 );
			Helper.AddImage( "Struct", Properties.Resources.Struct, null );
			Helper.AddImage( "Assembly", Properties.Resources.Assembly, null );

			
			
			
			Helper.AddImage( "Resource", Properties.Resources.Resource_16, Properties.Resources.Resource_32 );

			Helper.AddImage( "AssemblyList", Properties.Resources.AssemblyList, null );
			Helper.AddImage( "Folder", Properties.Resources.Folder_16, Properties.Resources.Folder_32 );
			Helper.AddImage( "Delegate", Properties.Resources.Delegate, null );
			Helper.AddImage( "Enum", Properties.Resources.Enum, null );
			Helper.AddImage( "Property", Properties.Resources.Property, null );
			Helper.AddImage( "GoUpper", Properties.Resources.GoUpper_16, null );
			Helper.AddImage( "Method", Properties.Resources.Method, null );
			Helper.AddImage( "Event", Properties.Resources.Event_16, null );
			Helper.AddImage( "StaticClass", Properties.Resources.StaticClass, null );
			Helper.AddImage( "StaticEvent", Properties.Resources.StaticEvent, null );
			Helper.AddImage( "StaticMethod", Properties.Resources.StaticMethod, null );
			Helper.AddImage( "StaticProperty", Properties.Resources.StaticProperty, null );
			Helper.AddImage( "Constructor", Properties.Resources.Constructor, null );
			Helper.AddImage( "Operator", Properties.Resources.Operator, null );

			Helper.AddImage( "CSharp", Properties.Resources.CSharp_16, Properties.Resources.CSharp_32 );
			Helper.AddImage( "UI", Properties.Resources.Window_16, Properties.Resources.Window_32 );
			Helper.AddImage( "Image", Properties.Resources.Image_16, Properties.Resources.Image_32 );
			Helper.AddImage( "Sound", Properties.Resources.Sound_16, Properties.Resources.Sound_32 );
			Helper.AddImage( "Mesh", Properties.Resources.Mesh_16, Properties.Resources.Mesh_32 );
			Helper.AddImage( "Material", Properties.Resources.Material_16, Properties.Resources.Material_32 );
			Helper.AddImage( "Scene", Properties.Resources.Scene_16, Properties.Resources.Scene_32 );
			Helper.AddImage( "Product", Properties.Resources.Package_16, Properties.Resources.Package_32 );
			Helper.AddImage( "Store Product", Properties.Resources.Package_16, Properties.Resources.Package_32 );

			Helper.AddImage( "Cog", Properties.Resources.Cog_16, Properties.Resources.Cog_32 );

			Helper.AddImage( "CSharpProject", Properties.Resources.CSharpProject_16, Properties.Resources.CSharpProject_32 );
			Helper.AddImage( "Attach", Properties.Resources.Attach_16, Properties.Resources.Attach_32 );
			Helper.AddImage( "New", Properties.Resources.New_16, Properties.Resources.New_32 );

			
		}

	}
}





namespace NeoAxis.Editor
{
	public class ContentBrowserItem_File : ContentBrowser.Item
	{
		string __0x1351;
		string __0x1352;
		bool __0x1353;

		EDictionary<string, ContentBrowser.Item> __0x1354 = new EDictionary<string, ContentBrowser.Item>();
		EDictionary<Component, ContentBrowser.Item> __0x1355 = new EDictionary<Component, ContentBrowser.Item>();
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1356 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		

		

		public ContentBrowserItem_File( ContentBrowser owner, ContentBrowser.Item parent, string fullPath, bool isDirectory )
			: base( owner, parent )
		{
			this.__0x1351 = fullPath;

			

			__0x1352 = Path.GetFileName( fullPath );
			if( string.IsNullOrEmpty( __0x1352 ) )
				__0x1352 = fullPath;
			this.__0x1353 = isDirectory;

			
			

			__0x1542( true );
		}

		public override void Dispose()
		{
			foreach( var __0x1486 in __0x1354.Values )
				__0x1486.Dispose();
			__0x1354.Clear();

			foreach( var __0x1487 in __0x1355.Values )
				__0x1487.Dispose();
			__0x1355.Clear();

			foreach( var __0x1488 in __0x1356.Values )
				__0x1488.Dispose();
			__0x1356.Clear();
		}

		public string FullPath
		{
			get { return __0x1351; }
		}

		public override string Text
		{
			get { return __0x1352; }
		}

		public void SetText( string text )
		{
			this.__0x1352 = text;
		}

		public bool IsDirectory
		{
			get { return __0x1353; }
		}

		public static string GetFileChildrenKey( string path )
		{
			
			return VirtualPathUtility.NormalizePath( path );
			
		}

		void __0x1538( out ESet<string> __0x1550 )
		{
			__0x1550 = new ESet<string>();

			__0x1550.Add( ".Directory.settings".ToLower() );

			

			string __0x1357 = Path.Combine( __0x1351, ".Directory.settings" );
			if( File.Exists( __0x1357 ) )
			{
				var __0x1358 = TextBlockUtility.LoadFromRealFile( __0x1357 );
				if( __0x1358 != null )
				{
					foreach( var __0x1489 in __0x1358.Children )
					{
						if( __0x1489.Name == "Item" )
						{
							string __0x1359 = __0x1489.Data;
							bool __0x1360 = bool.Parse( __0x1489.GetAttribute( "Hide", "False" ) );

							if( __0x1360 )
								__0x1550.Add( __0x1359.ToLower() );
						}
					}
				}
			}
		}

		

		public EDictionary<string, ContentBrowser.Item> FileChildren
		{
			get { return __0x1354; }
		}

		public EDictionary<Component, ContentBrowser.Item> ComponentChildren
		{
			get { return __0x1355; }
		}

		void __0x1539( List<(string, ContentBrowserItem_File)> __0x1551 )
		{
			CollectionUtility.MergeSort( __0x1551, delegate ( (string, ContentBrowserItem_File) __0x1552, (string, ContentBrowserItem_File) __0x1553 )
			{
				var __0x1361 = __0x1552.Item2;
				var __0x1362 = __0x1553.Item2;

				var __0x1363 = Path.GetFileName( __0x1361.FullPath );
				var __0x1364 = Path.GetFileName( __0x1362.FullPath );
				var __0x1365 = string.Compare( __0x1363, __0x1364 );
				if( !Owner.Options.SortFilesByAscending )
					__0x1365 *= -1;

				return __0x1365;
			} );
		}

		void __0x1540( List<(string, ContentBrowserItem_File)> __0x1554 )
		{
			CollectionUtility.MergeSort( __0x1554, delegate ( (string, ContentBrowserItem_File) __0x1555, (string, ContentBrowserItem_File) __0x1556 )
			{
				var __0x1366 = __0x1555.Item2;
				var __0x1367 = __0x1556.Item2;

				switch( Owner.Options.SortFilesBy )
				{
				case ContentBrowser.SortByItems.Date:
					{
						DateTime GetDate( ContentBrowserItem_File __0x1557 )
						{
							try
							{
								return File.GetLastWriteTime( __0x1557.__0x1351 );
							}
							catch
							{
								return new DateTime();
							}
						}

						var __0x1368 = GetDate( __0x1366 );
						var __0x1369 = GetDate( __0x1367 );
						int __0x1370 = 0;
						if( __0x1368 < __0x1369 )
							__0x1370 = -1;
						else if( __0x1368 > __0x1369 )
							__0x1370 = 1;
						if( !Owner.Options.SortFilesByAscending )
							__0x1370 *= -1;
						if( __0x1370 != 0 )
							return __0x1370;
					}
					break;

				case ContentBrowser.SortByItems.Type:
					{
						var __0x1371 = Path.GetExtension( __0x1366.FullPath );
						var __0x1372 = Path.GetExtension( __0x1367.FullPath );
						var __0x1373 = string.Compare( __0x1371, __0x1372 );
						if( !Owner.Options.SortFilesByAscending )
							__0x1373 *= -1;
						if( __0x1373 != 0 )
							return __0x1373;
					}
					break;

				case ContentBrowser.SortByItems.Size:
					{
						long GetSize( ContentBrowserItem_File __0x1558 )
						{
							try
							{
								return new FileInfo( __0x1558.__0x1351 ).Length;
							}
							catch
							{
								return 0;
							}
						}

						long __0x1374 = GetSize( __0x1366 );
						long __0x1375 = GetSize( __0x1367 );
						int __0x1376 = 0;
						if( __0x1374 < __0x1375 )
							__0x1376 = -1;
						else if( __0x1374 > __0x1375 )
							__0x1376 = 1;
						if( !Owner.Options.SortFilesByAscending )
							__0x1376 *= -1;
						if( __0x1376 != 0 )
							return __0x1376;
					}
					break;
				}

				
				{
					var __0x1377 = Path.GetFileName( __0x1366.FullPath );
					var __0x1378 = Path.GetFileName( __0x1367.FullPath );
					var __0x1379 = string.Compare( __0x1377, __0x1378 );
					if( !Owner.Options.SortFilesByAscending )
						__0x1379 *= -1;
					return __0x1379;
				}
			} );
		}

		void __0x1541()
		{
			
			if( __0x1353 )
			{
				
				__0x1538( out ESet<string> itemsToHide );

				
				var __0x1380 = new List<(string, ContentBrowserItem_File)>();
				var __0x1381 = new List<(string, ContentBrowserItem_File)>();

				
				{
					
					string[] __0x1382;
					try
					{
						__0x1382 = Directory.GetDirectories( __0x1351 );
					}
					catch
					{
						__0x1382 = new string[ 0 ];
					}

					foreach( var __0x1490 in __0x1382 )
					{
						string __0x1383 = Path.GetFileName( __0x1490 );
						if( !itemsToHide.Contains( __0x1383.ToLower() ) )
						{
							string __0x1384 = GetFileChildrenKey( __0x1490 );

							__0x1354.TryGetValue( __0x1384, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_File( Owner, this, __0x1490, true );
								item.imageKey = "Folder";
							}

							__0x1380.Add( (__0x1384, (ContentBrowserItem_File)item) );
						}
					}

					
					string[] __0x1385;
					try
					{
						var __0x1386 = Owner.FilteringMode?.FileSearchPatterns;
						if( __0x1386 != null )
						{
							var __0x1387 = new List<string>( 256 );
							foreach( var __0x1491 in __0x1386 )
								__0x1387.AddRange( Directory.GetFiles( __0x1351, __0x1491 ) );
							__0x1385 = __0x1387.ToArray();
						}
						else
							__0x1385 = Directory.GetFiles( __0x1351 );
					}
					catch
					{
						__0x1385 = new string[ 0 ];
					}

					foreach( var __0x1492 in __0x1385 )
					{
						string __0x1388 = Path.GetFileName( __0x1492 );
						if( !itemsToHide.Contains( __0x1388.ToLower() ) )
						{
							string __0x1389 = GetFileChildrenKey( __0x1492 );

							__0x1354.TryGetValue( __0x1389, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_File( Owner, this, __0x1492, false );
								item.imageKey = ResourceManager.GetResourceImageKey( __0x1492 );

								
								if( Owner.Mode == ContentBrowser.ModeEnum.Resources  )
									item.chooseByDoubleClickAndReturnKey = true;
							}

							__0x1381.Add( (__0x1389, (ContentBrowserItem_File)item) );
						}
					}
				}

				
				__0x1539( __0x1380 );
				__0x1540( __0x1381 );

				
				var __0x1390 = new EDictionary<string, ContentBrowser.Item>();
				foreach( var __0x1493 in __0x1380 )
					__0x1390[ __0x1493.Item1 ] = __0x1493.Item2;
				foreach( var __0x1494 in __0x1381 )
					__0x1390[ __0x1494.Item1 ] = __0x1494.Item2;

				
				{
					ESet<ContentBrowser.Item> __0x1391 = new ESet<ContentBrowser.Item>( __0x1390.Values );
					foreach( var __0x1495 in __0x1354.Values )
					{
						if( !__0x1391.Contains( __0x1495 ) )
							__0x1495.Dispose();
					}
				}

				
				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				

				__0x1354 = __0x1390;


				
				
				
				

				
				

				
				

				
				
				
				
				
				
				
				
				
			}
			else
			{
				

				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					bool __0x1392 = false;

					var __0x1393 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x1351 ) );
					if( __0x1393 != null && __0x1393.PrimaryInstance != null )
					{
						var __0x1394 = __0x1393.PrimaryInstance.ResultComponent;
						if( __0x1394 != null )
						{
							__0x1392 = true;

							
							{
								var __0x1395 = new EDictionary<Component, ContentBrowser.Item>();

								
								foreach( var __0x1496 in __0x1394.Components )
								{
									if( __0x1496.DisplayInEditor && __0x1496.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1496 ) )
									{
										

										
										
										
										
										
										

										
										
										__0x1355.TryGetValue( __0x1496, out ContentBrowser.Item item );

										if( item == null )
										{
											item = new ContentBrowserItem_Component( Owner, this, __0x1496 );
											item.imageKey = "Class";
										}

										__0x1395.Add( __0x1496, item );
										
									}
								}

								
								{
									ESet<ContentBrowser.Item> __0x1396 = new ESet<ContentBrowser.Item>( __0x1395.Values );
									foreach( var __0x1497 in __0x1355.Values )
									{
										if( !__0x1396.Contains( __0x1497 ) )
											__0x1497.Dispose();
									}
								}

								__0x1355 = __0x1395;
							}

							
							if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
								Owner.Mode == ContentBrowser.ModeEnum.SetReference )
							{
								
								var __0x1397 = new List<Metadata.Member>( 256 );
								{
									foreach( var __0x1498 in __0x1394.MetadataGetMembers() )
									{
										bool __0x1398;
										if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
										{
											if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
												__0x1398 = false;
											else
											{
												var __0x1399 = Owner.SetReferenceModeData.DemandedType;
												__0x1398 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1399, __0x1498, false );
											}

											
											
											
											
											
											
											
											
											
											
											
											
											
											
										}
										else
										{
											if( __0x1498.Owner == __0x1394 )
												__0x1398 = true;
											else
												__0x1398 = false;
											

											
											
											
											
											
											

											
											
											
											

											
											
											

											
											

											
											

										}

										if( __0x1398 )
											__0x1397.Add( __0x1498 );
									}

									
									ContentBrowserUtility.SortMemberItems( __0x1397 );
								}

								
								var __0x1400 = new EDictionary<Metadata.Member, ContentBrowser.Item>( 256 );
								foreach( var __0x1499 in __0x1397 )
								{
									__0x1356.TryGetValue( __0x1499, out ContentBrowser.Item item );
									if( item == null )
										item = new ContentBrowserItem_Member( Owner, this, __0x1499 );

									if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( item ) )
										__0x1400.Add( __0x1499, item );
									else
										item.Dispose();
								}

								
								{
									ESet<ContentBrowser.Item> __0x1401 = new ESet<ContentBrowser.Item>( __0x1400.Values );
									foreach( var __0x1500 in __0x1356.Values )
									{
										if( !__0x1401.Contains( __0x1500 ) )
											__0x1500.Dispose();
									}
								}

								__0x1356 = __0x1400;
							}
						}
					}

					if( !__0x1392 )
					{
						

						foreach( var __0x1501 in __0x1355.Values )
							__0x1501.Dispose();
						__0x1355 = new EDictionary<Component, ContentBrowser.Item>();

						foreach( var __0x1502 in __0x1356.Values )
							__0x1502.Dispose();
						__0x1356 = new EDictionary<Metadata.Member, ContentBrowser.Item>();
					}
				}
			}
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
				__0x1541();

			
			if( __0x1353 )
			{
				var __0x1402 = Owner.FilteringMode != null && Owner.FilteringMode.HideDirectoriesWithoutItems;
				if( __0x1402 )
				{
					List<ContentBrowser.Item> __0x1403 = new List<ContentBrowser.Item>( __0x1354.Values.Count );
					foreach( var __0x1503 in __0x1354.Values )
					{
						bool __0x1404 = false;

						var __0x1405 = __0x1503 as ContentBrowserItem_File;
						if( __0x1405 != null && __0x1405.IsDirectory && __0x1405.GetChildrenFilter( false ).Count == 0 )
							__0x1404 = true;

						if( !__0x1404 )
							__0x1403.Add( __0x1503 );
					}
					return __0x1403;
				}
				else
					return __0x1354.Values.ToArray();
			}
			else
			{
				List<ContentBrowser.Item> __0x1406 = new List<ContentBrowser.Item>( __0x1355.Values.Count + __0x1356.Count );
				foreach( var __0x1504 in __0x1355.Values )
					__0x1406.Add( __0x1504 );
				foreach( var __0x1505 in __0x1356.Values )
					__0x1406.Add( __0x1505 );
				return __0x1406;
			}
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = false;

			if( !IsDirectory )
			{
				

				referenceValue = VirtualPathUtility.GetVirtualPathByReal( FullPath );

				
				if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Resource ) ).IsAssignableFrom( expectedType ) )
				{
					canSet = true;
				}
				else
				{
					

					

					
					var __0x1407 = Path.GetExtension( FullPath );
					if( ResourceManager.GetTypeByFileExtension( __0x1407 ) != null )
					{
						var __0x1408 = ResourceManager.GetByName( referenceValue );
						if( __0x1408 != null && __0x1408.PrimaryInstance != null )
						{
							var __0x1409 = __0x1408.PrimaryInstance.ResultComponent;
							if( __0x1409 != null )
							{
								

								
								if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
								{
									canSet = true;
								}
								else
								{
									
									if( __0x1409 is Component_Import3D && expectedType == MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ) )
									{
										var __0x1410 = __0x1409.GetComponent( "Mesh" ) as Component_Mesh;
										if( __0x1410 != null )
										{
											canSet = true;
											referenceValue += "|$Mesh";
										}
									}

									
									if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, MetadataManager.MetadataGetType( __0x1409 ) ) )
										canSet = true;
								}
							}
						}
					}
				}
			}
			else
			{
				
				referenceValue = VirtualPathUtility.GetVirtualPathByReal( FullPath );
			}
		}

		public override object ContainedObject
		{
			get
			{
				var __0x1411 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x1351 ) );
				return __0x1411?.PrimaryInstance?.ResultComponent;
			}
		}

		void __0x1542( bool __0x1559 )
		{
			
			if( __0x1559 )
			{
				if( !__0x1353 )
				{
					var __0x1412 = Path.GetExtension( __0x1351 ).ToLower();

					if( __0x1412 == ".settings" )
					{
						try
						{
							if( File.Exists( __0x1351.Substring( 0, __0x1351.Length - ".settings".Length ) ) )
								ShowDisabled = true;
						}
						catch { }
					}
					else if( __0x1412 == ".meta" )
					{
						try
						{
							var __0x1413 = __0x1351.Substring( 0, __0x1351.Length - ".meta".Length );
							if( File.Exists( __0x1413 ) || Directory.Exists( __0x1413 ) )
								ShowDisabled = true;
						}
						catch { }
					}
					else if( __0x1412 == ".dds" )
					{
						if( __0x1351.Length > 11 )
						{
							var __0x1414 = __0x1351.Substring( __0x1351.Length - 11 );
							if( __0x1414 == "_GenEnv.dds" || __0x1414 == "_GenIrr.dds" )
							{
								var __0x1415 = __0x1351.Substring( 0, __0x1351.Length - 11 );
								try
								{
									if( File.Exists( __0x1415 ) )
										ShowDisabled = true;
								}
								catch { }
							}
						}
					}
					else if( __0x1412 == ".info" )
					{
						if( __0x1351.Length > 9 )
						{
							var __0x1416 = __0x1351.Substring( __0x1351.Length - 9 );
							if( __0x1416 == "_Gen.info" )
							{
								var __0x1417 = __0x1351.Substring( 0, __0x1351.Length - 9 );
								try
								{
									if( File.Exists( __0x1417 ) )
										ShowDisabled = true;
								}
								catch { }
							}
						}
					}
				}
			}

			
			if( !__0x1353 && Path.GetExtension( __0x1351 ).ToLower() == ".cs" )
			{
				var __0x1418 = false;
				if( !CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x1351 ) )
					__0x1418 = true;

				if( ShowDisabled != __0x1418 )
				{
					ShowDisabled = __0x1418;
					Owner?.Invalidate( true );
				}
			}
		}

		public override void LightweightUpdate()
		{
			base.LightweightUpdate();

			__0x1542( false );
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Virtual : ContentBrowser.Item
	{
		
		public string text;
		public List<ContentBrowser.Item> children = new List<ContentBrowser.Item>();

		public string Description { get; set; } = "";

		

		public ContentBrowserItem_Virtual( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.text = text;
		}

		public override void Dispose()
		{
			if( children != null )
			{
				foreach( var __0x1506 in children )
					__0x1506.Dispose();
			}
		}

		public void DeleteChildren()
		{
			foreach( var __0x1507 in children )
				__0x1507.Dispose();
			children.Clear();
		}

		public void DeleteChild( ContentBrowser.Item item )
		{
			item.Dispose();
			children.Remove( item );
		}

		public override string Text
		{
			get { return text; }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			return children;
		}

		public override string GetDescription()
		{
			return Description;
		}

		public void SetText( string value )
		{
			if( value != text )
			{
				text = value;
				PerformTextChanged();
			}
		}
	}

	

	public class ContentBrowserItem_Type : ContentBrowser.Item
	{
		public Metadata.TypeInfo type;
		public string text;
		public List<ContentBrowser.Item> nestedTypeChildren = new List<ContentBrowser.Item>();
		public List<ContentBrowserItem_Member> memberChildren = new List<ContentBrowserItem_Member>();

		
		public bool memberCreationDisable;

		

		public ContentBrowserItem_Type( ContentBrowser owner, ContentBrowser.Item parent, Metadata.TypeInfo type, string text )
			: base( owner, parent )
		{
			this.type = type;
			this.text = text;
		}

		public override void Dispose()
		{
			foreach( var __0x1508 in nestedTypeChildren )
				__0x1508.Dispose();
			nestedTypeChildren.Clear();
			foreach( var __0x1509 in memberChildren )
				__0x1509.Dispose();
			memberChildren.Clear();
		}

		public void DeleteNestedTypeChild( ContentBrowser.Item item )
		{
			item.Dispose();
			nestedTypeChildren.Remove( item );
		}

		public void DeleteMemberChild( ContentBrowserItem_Member item )
		{
			item.Dispose();
			memberChildren.Remove( item );
		}

		public Metadata.TypeInfo Type
		{
			get { return type; }
		}

		public override string Text
		{
			get { return text; }
		}

		void __0x1543()
		{
			
			var __0x1419 = new List<Metadata.Member>( 256 );
			{
				foreach( var __0x1510 in type.MetadataGetMembers() )
				{
					bool __0x1420;
					if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
					{
						if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
							__0x1420 = false;
						else
						{
							var __0x1421 = Owner.SetReferenceModeData.DemandedType;
							__0x1420 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1421, __0x1510, true );
						}
					}
					else
					{
						if( __0x1510.Owner == type )
							__0x1420 = true;
						else
							__0x1420 = false;
						
					}

					if( __0x1420 )
						__0x1419.Add( __0x1510 );
				}

				
				ContentBrowserUtility.SortMemberItems( __0x1419 );
			}

			
			memberChildren.Clear();
			foreach( var __0x1511 in __0x1419 )
			{
				var __0x1422 = new ContentBrowserItem_Member( Owner, this, __0x1511 );

				if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( __0x1422 ) )
					memberChildren.Add( __0x1422 );
				else
					__0x1422.Dispose();
			}
		}

		
		
		

		

		
		
		
		
		
		
		

		
		

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					if( !memberCreationDisable )
						__0x1543();
				}
			}

			
			List<ContentBrowser.Item> __0x1423 = new List<ContentBrowser.Item>( 1 + nestedTypeChildren.Count + memberChildren.Count );
			foreach( var __0x1512 in nestedTypeChildren )
				__0x1423.Add( __0x1512 );
			foreach( var __0x1513 in memberChildren )
				__0x1423.Add( __0x1513 );
			return __0x1423;
			
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = Type.Name;
			canSet = false;

			
			if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
				canSet = true;
		}

		public override string GetDescription()
		{
			var __0x1424 = XmlDocumentationFiles.GetTypeId( type );
			if( !string.IsNullOrEmpty( __0x1424 ) )
			{
				var __0x1425 = XmlDocumentationFiles.GetMemberSummary( __0x1424 );

				
				
				

				return __0x1425;
			}
			return "";
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Component : ContentBrowser.Item
	{
		Component __0x1426;
		EDictionary<Component, ContentBrowser.Item> __0x1427 = new EDictionary<Component, ContentBrowser.Item>();
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1428 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		string __0x1429 = "";
		ReferenceSelectionModeEnum __0x1430;
		ContentBrowserItem_Component __0x1431;

		

		public enum ReferenceSelectionModeEnum
		{
			None,
			Root,
			This,
		}

		

		public ContentBrowserItem_Component( ContentBrowser owner, ContentBrowser.Item parent, Component component )
			: base( owner, parent )
		{
			this.__0x1426 = component;

			component.NameChanged += __0x1546;
			component.EnabledInHierarchyChanged += __0x1547;
			component.ComponentsChanged += __0x1548;

			if( !component.EnabledInHierarchy )
				ShowDisabled = true;
		}

		public override void Dispose()
		{
			__0x1426.NameChanged -= __0x1546;
			__0x1426.EnabledInHierarchyChanged -= __0x1547;
			__0x1426.ComponentsChanged -= __0x1548;

			foreach( var __0x1514 in __0x1427.Values )
				__0x1514.Dispose();
			__0x1427.Clear();

			__0x1431?.Dispose();

			foreach( var __0x1515 in __0x1428.Values )
				__0x1515.Dispose();
			__0x1428.Clear();
		}

		public Component Component
		{
			get { return __0x1426; }
		}

		public override object ContainedObject
		{
			get { return __0x1426; }
		}

		public string SpecialTextPrefix
		{
			get { return __0x1429; }
			set { __0x1429 = value; }
		}

		public ReferenceSelectionModeEnum ReferenceSelectionMode
		{
			get { return __0x1430; }
			set { __0x1430 = value; }
		}

		public override string Text
		{
			get
			{
				
				

				var __0x1432 = __0x1426.Name;

				if( string.IsNullOrEmpty( SpecialTextPrefix ) )
				{
					if( __0x1432 == "" && __0x1426.Parent == null )
						__0x1432 = "\'" + EditorLocalization.Translate( "General", "Root" ) + "\'";
					if( __0x1432 == "" )
						__0x1432 = "\'" + EditorLocalization.Translate( "General", "No name" ) + "\'";
				}

				var __0x1433 = __0x1426.BaseType.ToString();
				
				{
					string __0x1434 = "NeoAxis.";
					if( __0x1433.Length > __0x1434.Length && __0x1433.Substring( 0, __0x1434.Length ) == __0x1434 )
						__0x1433 = __0x1433.Substring( __0x1434.Length );
				}
				
				
				
				
				
				

				if( Owner.ReadOnlyHierarchy )
				{
					
					return __0x1432;
				}
				else
				{
					string __0x1435 = "";
					if( !string.IsNullOrEmpty( SpecialTextPrefix ) )
						__0x1435 += SpecialTextPrefix;

					if( !string.IsNullOrEmpty( __0x1432 ) )
						__0x1435 += __0x1432 + " - ";
					__0x1435 += __0x1433;

					return __0x1435;
				}

				
			}
		}

		bool __0x1544()
		{
			if( Owner.ShowMembers )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.Resources  ||
					Owner.Mode == ContentBrowser.ModeEnum.SetReference ||
					Owner.Mode == ContentBrowser.ModeEnum.Objects )
				{
					return true;
				}
			}
			return false;
		}

		void __0x1545()
		{
			
			var __0x1436 = new List<Metadata.Member>( 256 );
			{
				foreach( var __0x1516 in __0x1426.MetadataGetMembers() )
				{
					bool __0x1437;
					if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
					{
						if( Owner.SetReferenceModeData.newObjectWindow || Owner.SetReferenceModeData.selectTypeWindow )
							__0x1437 = false;
						else
						{
							var __0x1438 = Owner.SetReferenceModeData.DemandedType;
							__0x1437 = ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( __0x1438, __0x1516, false );
						}
					}
					else
					{
						if( __0x1426.ParentRoot.hierarchyController != null &&
							__0x1426.ParentRoot.hierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
						{
							if( __0x1516.Owner == __0x1426 )
								__0x1437 = true;
							else
								__0x1437 = false;
						}
						else
							__0x1437 = true;

						

						
						
						
						
						
						

						
						
						
						

						
						
						

						
						

						
						

					}

					if( __0x1437 )
						__0x1436.Add( __0x1516 );
				}

				
				ContentBrowserUtility.SortMemberItems( __0x1436 );
			}

			
			var __0x1439 = new EDictionary<Metadata.Member, ContentBrowser.Item>( 256 );
			foreach( var __0x1517 in __0x1436 )
			{
				__0x1428.TryGetValue( __0x1517, out ContentBrowser.Item item );
				if( item == null )
					item = new ContentBrowserItem_Member( Owner, this, __0x1517 );

				if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( item ) )
					__0x1439.Add( __0x1517, item );
				else
					item.Dispose();
			}

			
			{
				ESet<ContentBrowser.Item> __0x1440 = new ESet<ContentBrowser.Item>( __0x1439.Values );
				foreach( var __0x1518 in __0x1428.Values )
				{
					if( !__0x1440.Contains( __0x1518 ) )
						__0x1518.Dispose();
				}
			}

			__0x1428 = __0x1439;
		}

		
		
		

		
		
		

		
		
		
		

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				{
					EDictionary<Component, ContentBrowser.Item> __0x1441 = new EDictionary<Component, ContentBrowser.Item>();

					
					foreach( var __0x1519 in __0x1426.Components )
					{
						if( __0x1519.DisplayInEditor && __0x1519.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1519 ) )
						{
							

							
							
							
							
							
							

							
							
							__0x1427.TryGetValue( __0x1519, out ContentBrowser.Item item );

							if( item == null )
							{
								item = new ContentBrowserItem_Component( Owner, this, __0x1519 );

								
								
								if( !string.IsNullOrEmpty( imageKey ) && imageKey != "GoUpper" )
									item.imageKey = imageKey;
							}

							__0x1441.Add( __0x1519, item );
							
						}
					}

					
					{
						ESet<ContentBrowser.Item> __0x1442 = new ESet<ContentBrowser.Item>( __0x1441.Values );
						foreach( var __0x1520 in __0x1427.Values )
						{
							if( !__0x1442.Contains( __0x1520 ) )
								__0x1520.Dispose();
						}
					}

					__0x1427 = __0x1441;
				}

				if( ReferenceSelectionMode == ReferenceSelectionModeEnum.This && __0x1426.Parent != null )
				{
					if( __0x1431 == null )
					{
						__0x1431 = new ContentBrowserItem_Component( Owner, this, __0x1426.Parent );
						__0x1431.imageKey = "GoUpper";

						
						__0x1431.SpecialTextPrefix = ".. ";
						__0x1431.ReferenceSelectionMode = ReferenceSelectionModeEnum.This;

						

						
						
						
					}
				}

				
				if( __0x1544() )
				{
					__0x1545();
				}
			}

			
			List<ContentBrowser.Item> __0x1443 = new List<ContentBrowser.Item>( __0x1427.Values.Count + 1 + __0x1428.Count );
			if( __0x1431 != null )
				__0x1443.Add( __0x1431 );
			foreach( var __0x1521 in __0x1427.Values )
				__0x1443.Add( __0x1521 );
			foreach( var __0x1522 in __0x1428.Values )
				__0x1443.Add( __0x1522 );
			return __0x1443;
		}

		private void __0x1546( Component __0x1560 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			PerformTextChanged();
		}

		private void __0x1547( Component __0x1561 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			ShowDisabled = !__0x1426.EnabledInHierarchy;
			PerformTextColorChanged();
		}

		private void __0x1548( Component __0x1562 )
		{
			if( EditorAPI.ClosingApplication )
				return;

			var __0x1444 = Owner?.DocumentWindow?.Document;
			if( __0x1444 != null && __0x1444.Destroyed )
				return;

			PerformChildrenChanged();
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = ContentBrowserUtility.CalculateReferenceValueForComponentItem( from, this );
			canSet = false;

			
			if( MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ).IsAssignableFrom( expectedType ) )
			{
				
				var __0x1445 = __0x1426.GetProvidedType();
				if( __0x1445 != null )
					canSet = true;
			}
			else
			{
				

				
				if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, MetadataManager.MetadataGetType( __0x1426 ) ) )
				{
					if( from != null && from.ParentRoot == __0x1426.ParentRoot )
					{
						
						canSet = true;
					}
					else
					{
						
						var __0x1446 = __0x1426.ParentRoot?.HierarchyController.CreatedByResource;
						if( __0x1446 != null )
						{
							
							var __0x1447 = __0x1426.GetProvidedType();
							if( __0x1447 != null )
								canSet = true;
						}
					}
				}
			}
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Member : ContentBrowser.Item
	{
		Metadata.Member __0x1448;
		
		
		EDictionary<Metadata.Member, ContentBrowser.Item> __0x1449 = new EDictionary<Metadata.Member, ContentBrowser.Item>();

		

		
		

		
		
		
		

		

		public ContentBrowserItem_Member( ContentBrowser owner, ContentBrowser.Item parent, Metadata.Member member )
			: base( owner, parent )
		{
			this.__0x1448 = member;

			if( member is Metadata.Property )
				imageKey = member.Static ? "StaticProperty" : "Property";
			else if( member is Metadata.Method )
			{
				var __0x1450 = (Metadata.Method)member;
				if( __0x1450.Constructor )
					imageKey = "Constructor";
				else if( __0x1450.Operator )
					imageKey = "Operator";
				else
					imageKey = member.Static ? "StaticMethod" : "Method";
			}
			else if( member is Metadata.Event )
				imageKey = member.Static ? "StaticEvent" : "Event";

			
		}

		public override void Dispose()
		{
			

			foreach( var __0x1523 in __0x1449.Values )
				__0x1523.Dispose();
			__0x1449.Clear();

			
		}

		
		
		
		
		

		public Metadata.Member Member
		{
			get { return __0x1448; }
		}

		public override string Text
		{
			get { return __0x1448.ToString(); }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				if( Owner.Mode == ContentBrowser.ModeEnum.SetReference )
				{
					

					

					
					

					var __0x1451 = __0x1448 as Metadata.Property;
					var __0x1452 = __0x1448 as Metadata.Method;
					if( __0x1451 != null || __0x1452 != null )
					{
						
						Metadata.TypeInfo __0x1453 = null;
						if( __0x1451 != null )
							__0x1453 = __0x1451.Type;
						else
						{
							var __0x1454 = __0x1452.GetReturnParameters();
							if( __0x1454.Length == 1 )
								__0x1453 = __0x1454[ 0 ].Type;
						}

						if( __0x1453 != null )
						{
							
							var __0x1455 = new List<Metadata.Member>( 256 );
							{
								
								
								if( __0x1451 != null && ReferenceUtility.IsReferenceType( __0x1451.Type.GetNetType() ) )
								{
									foreach( var __0x1524 in __0x1451.TypeUnreferenced.MetadataGetMembers() )
									{
										bool __0x1456 = false;
										if( !__0x1524.Static )
										{
											
											var __0x1457 = __0x1524 as Metadata.Property;
											if( __0x1457 != null && !__0x1457.HasIndexers )
												__0x1456 = true;
											var __0x1458 = __0x1524 as Metadata.Method;
											if( __0x1458 != null && __0x1458.Parameters.Length == 1 && __0x1458.GetReturnParameters().Length == 1 )
												__0x1456 = true;
										}

										if( __0x1456 )
											__0x1455.Add( __0x1524 );
									}
								}
								else
								{
									
									foreach( var __0x1525 in __0x1453.MetadataGetMembers() )
									{
										bool __0x1459 = false;
										if( !__0x1525.Static )
										{
											
											var __0x1460 = __0x1525 as Metadata.Property;
											if( __0x1460 != null && !__0x1460.HasIndexers )
												__0x1459 = true;
											var __0x1461 = __0x1525 as Metadata.Method;
											if( __0x1461 != null && __0x1461.Parameters.Length == 1 && __0x1461.GetReturnParameters().Length == 1 )
												__0x1459 = true;
										}

										if( __0x1459 )
											__0x1455.Add( __0x1525 );
									}
								}

								
								ContentBrowserUtility.SortMemberItems( __0x1455 );
							}

							
							var __0x1462 = new EDictionary<Metadata.Member, ContentBrowser.Item>();
							foreach( var __0x1526 in __0x1455 )
							{
								__0x1449.TryGetValue( __0x1526, out ContentBrowser.Item item );
								if( item == null )
									item = new ContentBrowserItem_Member( Owner, this, __0x1526 );
								__0x1462.Add( __0x1526, item );
							}

							
							{
								ESet<ContentBrowser.Item> __0x1463 = new ESet<ContentBrowser.Item>( __0x1462.Values );
								foreach( var __0x1527 in __0x1449.Values )
								{
									if( !__0x1463.Contains( __0x1527 ) )
										__0x1527.Dispose();
								}
							}

							__0x1449 = __0x1462;
						}
					}
					
				}
			}

			
			List<ContentBrowser.Item> __0x1464 = new List<ContentBrowser.Item>( __0x1449.Count );
			foreach( var __0x1528 in __0x1449.Values )
				__0x1464.Add( __0x1528 );
			return __0x1464;
		}

		public override void CalculateReferenceValue( Component from, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = ContentBrowserUtility.CalculateReferenceValueForMemberItem( from, expectedType, this );
			canSet = false;

			
			
			
			
			
			
			
			
			

			
			if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( expectedType ) )
			{
				if( ContentBrowserUtility.ContentBrowserSetReferenceModeCheckAllowAddMember( expectedType, __0x1448, false ) )
					canSet = true;
				
				
			}
			
			
			
			
			
			
			

			
			
			

			
			if( __0x1448 is Metadata.Property )
			{
				
				var __0x1465 = (Metadata.Property)__0x1448;

				if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, __0x1465.TypeUnreferenced ) )
					canSet = true;
			}
			else if( __0x1448 is Metadata.Method )
			{
				
				var __0x1466 = (Metadata.Method)__0x1448;

				var __0x1467 = __0x1466.GetReturnParameters();
				if( __0x1466.Parameters.Length == 1 && __0x1467.Length == 1 )
				{
					if( ReferenceUtility.CanMakeReferenceToObjectWithType( expectedType, __0x1467[ 0 ].Type ) )
						canSet = true;
				}
			}
		}

		public override string GetDescription()
		{
			var __0x1468 = XmlDocumentationFiles.GetMemberId( __0x1448 );
			if( !string.IsNullOrEmpty( __0x1468 ) )
			{
				var __0x1469 = XmlDocumentationFiles.GetMemberSummary( __0x1468 );

				
				
				

				return __0x1469;
			}
			return "";
		}

		public override bool CanDoDragDrop() { return true; }
	}

	

	public class ContentBrowserItem_Null : ContentBrowser.Item
	{
		
		public string text;

		

		public ContentBrowserItem_Null( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.text = text;
		}

		public override void Dispose()
		{
		}

		public override string Text
		{
			get { return text; }
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			return new ContentBrowser.Item[ 0 ];
		}

		public override void CalculateReferenceValue( Component propertyOwner, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = true;
		}
	}

	

	public class ContentBrowserItem_Favorites : ContentBrowser.Item
	{
		string __0x1470;
		EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type> __0x1471 = new EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type>();
		EDictionary<string, ContentBrowserItem_File> __0x1472 = new EDictionary<string, ContentBrowserItem_File>();

		

		public ContentBrowserItem_Favorites( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1470 = text;
		}

		public override void Dispose()
		{
			foreach( var __0x1529 in __0x1471.Values )
				__0x1529.Dispose();
			__0x1471.Clear();

			foreach( var __0x1530 in __0x1472.Values )
				__0x1530.Dispose();
			__0x1472.Clear();
		}

		public override string Text
		{
			get { return __0x1470; }
		}

		void __0x1549()
		{
			

			var __0x1473 = new List<Metadata.TypeInfo>( 32 );
			var __0x1474 = new List<string>( 32 );
			foreach( var __0x1531 in EditorFavorites.Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries ) )
			{
				var __0x1475 = MetadataManager.GetTypeOfNetType( __0x1531 );
				if( __0x1475 != null )
					__0x1473.Add( __0x1475 );
				else if( VirtualFile.Exists( __0x1531 ) )
					__0x1474.Add( __0x1531 );
			}

			CollectionUtility.MergeSort( __0x1473, delegate ( Metadata.TypeInfo __0x1563, Metadata.TypeInfo __0x1564 )
			{
				return string.Compare( __0x1563.Name, __0x1564.Name );
			} );

			CollectionUtility.MergeSort( __0x1474, delegate ( string __0x1565, string __0x1566 )
			{
				var __0x1476 = Path.GetFileName( __0x1565 );
				var __0x1477 = Path.GetFileName( __0x1566 );
				return string.Compare( __0x1476, __0x1477 );
			} );


			
			{
				
				var __0x1478 = new EDictionary<Metadata.TypeInfo, ContentBrowserItem_Type>( 256 );
				foreach( var __0x1532 in __0x1473 )
				{
					__0x1471.TryGetValue( __0x1532, out var typeItem );
					if( typeItem == null )
					{
						var __0x1479 = __0x1532.DisplayName;
						{
							var __0x1480 = ResourcesWindowItems.GetItemByType( __0x1532.GetNetType() );
							if( __0x1480 != null )
							{
								try
								{
									__0x1479 = Path.GetFileName( __0x1480.Path );
								}
								catch { }
							}
						}

						typeItem = new ContentBrowserItem_Type( Owner, this, __0x1532, __0x1479 );
						typeItem.imageKey = ContentBrowser.GetTypeImageKey( __0x1532 );
						typeItem.memberCreationDisable = true;
					}

					if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( typeItem ) )
						__0x1478.Add( __0x1532, typeItem );
					else
						typeItem.Dispose();
				}

				
				{
					var __0x1481 = new ESet<ContentBrowserItem_Type>( __0x1478.Values );
					foreach( var __0x1533 in __0x1471.Values )
					{
						if( !__0x1481.Contains( __0x1533 ) )
							__0x1533.Dispose();
					}
				}

				__0x1471 = __0x1478;
			}

			
			{
				
				var __0x1482 = new EDictionary<string, ContentBrowserItem_File>( 256 );
				foreach( var __0x1534 in __0x1474 )
				{
					__0x1472.TryGetValue( __0x1534, out var fileItem );
					if( fileItem == null )
					{
						var __0x1483 = VirtualPathUtility.GetRealPathByVirtual( __0x1534 );

						fileItem = new ContentBrowserItem_File( Owner, this, __0x1483, false );
						fileItem.imageKey = ResourceManager.GetResourceImageKey( __0x1483 );
					}

					if( Owner.FilteringMode == null || Owner.FilteringMode.AddItem( fileItem ) )
						__0x1482.Add( __0x1534, fileItem );
					else
						fileItem.Dispose();
				}

				
				{
					var __0x1484 = new ESet<ContentBrowserItem_File>( __0x1482.Values );
					foreach( var __0x1535 in __0x1472.Values )
					{
						if( !__0x1484.Contains( __0x1535 ) )
							__0x1535.Dispose();
					}
				}

				__0x1472 = __0x1482;
			}
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
				__0x1549();

			
			List<ContentBrowser.Item> __0x1485 = new List<ContentBrowser.Item>( __0x1471.Values.Count + __0x1472.Count );
			foreach( var __0x1536 in __0x1471.Values )
				__0x1485.Add( __0x1536 );
			foreach( var __0x1537 in __0x1472.Values )
				__0x1485.Add( __0x1537 );
			return __0x1485;
		}

		public override void CalculateReferenceValue( Component propertyOwner, Metadata.TypeInfo expectedType, out string referenceValue, out bool canSet )
		{
			referenceValue = "";
			canSet = true;
		}
	}

	

	
	
	
	

	

	
	
	
	

	
	
	
	
	

	

	

	
	
	
	

	

	

	

	
	

	
	
	

	

	
	

	
	
	
	
	
	
	

	
	

	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	
	

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	

	

	
	
	


	
	

	
	
	
	

	

	
	

	
	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	

	
	

	
	
	

	
	
	
	
	
	
	
	

	
	

	
	
	

	

	
	
	
	

	
	
	

	
	

	

	

	
	
	

	
	
	
	

	

	
	
	
	
	
	
	
	

	

	
	
	
	
	

	
	
	

	
	
	

	
	
	

	
	
	
	
	

	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	

	

	

	
	
	
	
	
	

	

	
	
	
	
	

	
	
	

	

	
	

	
	

	
	
	
	

	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	

	
	
	

	

	
	
	
	

	
	
	
	
	

	

	

	
	
	
	

	

	

	

	
	

	
	
	

	

	
	
	

	
	
	
	
	
	
	

	
	

	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	

	



	
	
	

	

	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	

	
	
	


	
	

	
	
	
	

	

	
	

	
	
	
	
	

	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	

	
	
	

	

	

	

	
	
	
	
	
	

	
	
	


	

	
	
	
	
	

	

	

	

	
	

	
	
	
	

	

	
	
	
	

	
	
	

	
	
	
	
	
	
	

	
	

	
	
	

	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	

	

	
	

	

	
	
	
	
	
	

	

	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	

	

	
	

	
	
	
	
	
	
	
	
	

	

	
	
	

	

	
	
	
	

	
	
	

	

	

	

	
	
	
	

	

	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	

	

	
	
	
	

	

	
	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	

	

	
	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	

}





namespace NeoAxis.Editor
{
	public class ContentBrowserItem_Solution : ContentBrowser.Item
	{
		List<ContentBrowser.Item> __0x1567 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_Solution( ContentBrowser owner, ContentBrowser.Item parent )
			: base( owner, parent )
		{
		}

		public override void Dispose()
		{
			if( __0x1567 != null )
			{
				foreach( var __0x1581 in __0x1567 )
					__0x1581.Dispose();
			}
		}

		public override string Text
		{
			get { return "Solution"; }
		}

		void __0x1587()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1567.Clear();

			
			
			
			
			
			
			
			
			


			
			

			
			
			
			
			
			
			
			
			
			
			
			
			


			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1587();
				
			}

			
			List<ContentBrowser.Item> __0x1568 = new List<ContentBrowser.Item>( __0x1567.Count );
			foreach( var __0x1582 in __0x1567 )
				__0x1568.Add( __0x1582 );
			return __0x1568;
		}

		
		
		
		
		
	}

	

	
	
	public class ContentBrowserItem_CSharpProject : ContentBrowser.Item
	{
		
		string __0x1569;
		List<ContentBrowser.Item> __0x1570 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_CSharpProject( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1569 = text;
		}

		public override void Dispose()
		{
			if( __0x1570 != null )
			{
				foreach( var __0x1583 in __0x1570 )
					__0x1583.Dispose();
			}
		}

		public override string Text
		{
			get { return __0x1569; }
		}

		void __0x1588()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1570.Clear();

			{
				var __0x1571 = new ContentBrowserItem_Virtual( Owner, this, "Properties" );
				__0x1571.imageKey = "Property";
				
				
				__0x1570.Add( __0x1571 );
				
				
			}

			{
				var __0x1572 = new ContentBrowserItem_CSharpProjectReferences( Owner, this, "References" );
				__0x1572.imageKey = "Attach";
				
				
				__0x1570.Add( __0x1572 );
				
				
			}

			{
				var __0x1573 = new ContentBrowserItem_Virtual( Owner, this, "File.cs" );
				__0x1573.imageKey = "CSharp";
				
				
				__0x1570.Add( __0x1573 );
				
				
			}

			{
				var __0x1574 = new ContentBrowserItem_Virtual( Owner, this, "File2.cs" );
				__0x1574.imageKey = "CSharp";
				
				
				__0x1570.Add( __0x1574 );
				
				
			}


			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1588();
				
			}

			
			List<ContentBrowser.Item> __0x1575 = new List<ContentBrowser.Item>( __0x1570.Count );
			foreach( var __0x1584 in __0x1570 )
				__0x1575.Add( __0x1584 );
			return __0x1575;
		}

		
		
		
		
		
	}

	

	public class ContentBrowserItem_CSharpProjectReferences : ContentBrowser.Item
	{
		
		string __0x1576;
		List<ContentBrowser.Item> __0x1577 = new List<ContentBrowser.Item>();

		

		public ContentBrowserItem_CSharpProjectReferences( ContentBrowser owner, ContentBrowser.Item parent, string text )
			: base( owner, parent )
		{
			this.__0x1576 = text;
		}

		public override void Dispose()
		{
			if( __0x1577 != null )
			{
				foreach( var __0x1585 in __0x1577 )
					__0x1585.Dispose();
			}
		}

		public override string Text
		{
			get { return __0x1576; }
		}

		void __0x1589()
		{
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			

			
			__0x1577.Clear();

			{
				var __0x1578 = new ContentBrowserItem_Virtual( Owner, this, "System" );
				
				__0x1578.imageKey = "Attach";
				__0x1577.Add( __0x1578 );
			}

			{
				var __0x1579 = new ContentBrowserItem_Virtual( Owner, this, "NeoAxis.Core" );
				
				__0x1579.imageKey = "Attach";
				__0x1577.Add( __0x1579 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			


			
			
			
			

			
			
			
			
			
		}

		public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
		{
			if( !onlyAlreadyCreated )
			{
				
				
				
				__0x1589();
				
			}

			
			List<ContentBrowser.Item> __0x1580 = new List<ContentBrowser.Item>( __0x1577.Count );
			foreach( var __0x1586 in __0x1577 )
				__0x1580.Add( __0x1586 );
			return __0x1580;
		}

		
		
		
		
		
	}

	

	
	
	
	
	

	

	
	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	

	
	
	

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	

	
	
	

	
	

	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	
	
	

}





namespace NeoAxis.Editor
{
	public class ContentBrowserListModeList : EngineListView.ModeClass
	{
		ContentBrowser __0x1590;
		int __0x1591;
		public int MarginLeft;
		public int MarginImageText;
		public int MarginRight;

		public ContentBrowserListModeList( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1590 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1591 = (int)( (float)__0x1590.Options.ListImageSize * EditorAPI.DPIScale );

			ItemSize = new Vector2I( (int)( (float)__0x1590.Options.ListColumnWidth * EditorAPI.DPIScale ), __0x1591 + (int)( EditorAPI.DPIScale * 10.0f ) );
			ClampItemWidthByListViewWidth = true;

			MarginLeft = (int)( EditorAPI.DPIScale * 4.0f );
			MarginImageText = (int)( EditorAPI.DPIScale * 2.0f );
			MarginRight = (int)( EditorAPI.DPIScale * 2.0f );
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1592 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1593 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1593, rect );


			int __0x1594 = MarginLeft;

			
			
			{
				var __0x1595 = __0x1592.Image;
				if( __0x1595 == null || __0x1595.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
				{
					if( __0x1591 >= 32 )
						__0x1595 = Properties.Resources.Default_32;
					else
						__0x1595 = Properties.Resources.Default_16;
				}

				e.Graphics.DrawImage( __0x1595, rect.Left + __0x1594, rect.Top + ( ItemSize.Y - __0x1591 ) / 2, __0x1591, __0x1591 );

				__0x1594 += __0x1591 + MarginImageText;
			}

			var __0x1596 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

			int __0x1597;
			{
				TextFormatFlags __0x1598 = __0x1596;

				var __0x1599 = TextRenderer.MeasureText( e.Graphics, __0x1592.Text, Owner.Font, new Size( int.MaxValue, int.MaxValue ), __0x1598 );
				__0x1597 = __0x1599.Height;
			}

			bool __0x1600 = __0x1597 * 2 + (int)( EditorAPI.DPIScale * 6.0f ) < rect.Height;

			if( __0x1600 )
			{
				
				if( !string.IsNullOrEmpty( __0x1592.Text ) )
				{
					var __0x1601 = __0x1596 | TextFormatFlags.Top | TextFormatFlags.Left;
					var __0x1602 = rect.Height / 2 - (int)( EditorAPI.DPIScale * 1.0f ) - __0x1597;

					var __0x1603 = new System.Drawing.Rectangle( rect.Left + __0x1594, rect.Top + __0x1602, rect.Width - __0x1594 - MarginRight, rect.Height - __0x1602 );
					TextRenderer.DrawText( e.Graphics, __0x1592.Text, Owner.Font, __0x1603, textColor, backColor, __0x1601 );
				}

				
				if( !string.IsNullOrEmpty( __0x1592.Description ) )
				{
					var __0x1604 = Color.Gray;
					var __0x1605 = __0x1596 | TextFormatFlags.Top | TextFormatFlags.Left;
					var __0x1606 = rect.Height / 2 + (int)( EditorAPI.DPIScale * 1.0f );

					var __0x1607 = new System.Drawing.Rectangle( rect.Left + __0x1594, rect.Top + __0x1606, rect.Width - __0x1594 - MarginRight, rect.Height - __0x1606 );
					TextRenderer.DrawText( e.Graphics, __0x1592.Description, Owner.Font, __0x1607, __0x1604, backColor, __0x1605 );
				}
			}
			else
			{
				
				if( !string.IsNullOrEmpty( __0x1592.Text ) )
				{
					var __0x1608 = __0x1596 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;

					var __0x1609 = new System.Drawing.Rectangle( rect.Left + __0x1594, rect.Top, rect.Width - __0x1594 - MarginRight, rect.Height );
					TextRenderer.DrawText( e.Graphics, __0x1592.Text, Owner.Font, __0x1609, textColor, backColor, __0x1608 );

					var __0x1610 = TextRenderer.MeasureText( e.Graphics, __0x1592.Text, Owner.Font, new Size( int.MaxValue, int.MaxValue ), __0x1608 );

					__0x1594 += __0x1610.Width + (int)( EditorAPI.DPIScale * 2.0f );
				}

				
				if( !string.IsNullOrEmpty( __0x1592.Description ) )
				{
					var __0x1611 = Color.Gray;

					var __0x1612 = __0x1596 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;

					var __0x1613 = new System.Drawing.Rectangle( rect.Left + __0x1594, rect.Top, rect.Width - __0x1594 - MarginRight, rect.Height );
					TextRenderer.DrawText( e.Graphics, __0x1592.Description, Owner.Font, __0x1613, __0x1611, backColor, __0x1612 );
				}
			}

		}
	}

	

	public class ContentBrowserListModeTiles : EngineListView.ModeClass
	{
		ContentBrowser __0x1614;
		int __0x1615;

		public ContentBrowserListModeTiles( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1614 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1615 = (int)( (float)__0x1614.Options.TileImageSize * EditorAPI.DPIScale );

			
			var __0x1616 = ( EditorAPI.DPIScale * new Vector2( 30, 40 ) ).ToVector2I();

			ItemSize = new Vector2I( __0x1615, __0x1615 ) + __0x1616;
			ClampItemWidthByListViewWidth = false;
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1617 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1618 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1618, rect );


			

			
			{
				var __0x1619 = __0x1617.Image;
				if( __0x1619 == null || __0x1619.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x1619 = Properties.Resources.Default_32;

				e.Graphics.DrawImage( __0x1619, ( rect.Left + rect.Right ) / 2 - __0x1615 / 2, rect.Top + (int)( EditorAPI.DPIScale * 5.0f ), __0x1615, __0x1615 );
			}

			
			if( !string.IsNullOrEmpty( __0x1617.Text ) )
			{
				var __0x1620 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

				
				var __0x1621 = __0x1620 | TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;
				
				__0x1621 |= TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl;

				var __0x1622 = (int)( EditorAPI.DPIScale * 5.0f ) + __0x1615 + (int)( EditorAPI.DPIScale * 5.0f );

				var __0x1623 = new System.Drawing.Rectangle(
					rect.Left + (int)( EditorAPI.DPIScale * 3.0f ),
					rect.Top + __0x1622,
					rect.Width - (int)( EditorAPI.DPIScale * 6.0f ),
					rect.Height - __0x1622 - 1 );

				TextRenderer.DrawText( e.Graphics, __0x1617.Text, Owner.Font, __0x1623, textColor, backColor, __0x1621 );
			}
		}
	}

	

	public class ContentBrowserListModeTilesRibbon : EngineListView.ModeClass
	{
		ContentBrowser __0x1624;
		int __0x1625;

		public ContentBrowserListModeTilesRibbon( ContentBrowser browser )
			: base( browser.GetListView() )
		{
			this.__0x1624 = browser;
			Init();
		}

		public override void Init()
		{
			__0x1625 = (int)( (float)__0x1624.Options.TileImageSize * EditorAPI.DPIScale );

			ItemSize = ( EditorAPI.DPIScale * new Vector2( 60, 41 ) ).ToVector2I();
			ClampItemWidthByListViewWidth = false;
		}

		public override void PaintItem( PaintEventArgs e, int itemIndex )
		{
			var __0x1626 = Owner.Items[ itemIndex ];
			if( !GetItemRectangle( itemIndex, out var rect ) )
				return;
			GetItemColors( itemIndex, out var backColor, out var textColor );

			
			using( Brush __0x1627 = new SolidBrush( backColor ) )
				e.Graphics.FillRectangle( __0x1627, rect );

			
			{
				var __0x1628 = __0x1626.Image;
				if( __0x1628 == null || __0x1628.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
					__0x1628 = Properties.Resources.Default_32;

				e.Graphics.DrawImage( __0x1628, ( rect.Left + rect.Right ) / 2 - __0x1625 / 2, rect.Top + (int)( EditorAPI.DPIScale * 2.0f ), __0x1625, __0x1625 );
			}

			
			if( !string.IsNullOrEmpty( __0x1626.Text ) )
			{
				var __0x1629 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

				
				var __0x1630 = __0x1629 | TextFormatFlags.Top | TextFormatFlags.HorizontalCenter;
				
				__0x1630 |= TextFormatFlags.WordBreak | TextFormatFlags.TextBoxControl;

				var __0x1631 = (int)( EditorAPI.DPIScale * 2.0f ) + __0x1625 + (int)( EditorAPI.DPIScale * 1.0f );

				var __0x1632 = new System.Drawing.Rectangle(
					rect.Left + (int)( EditorAPI.DPIScale * 2 ),
					rect.Top + __0x1631,
					rect.Width - (int)( EditorAPI.DPIScale * 4 ),
					rect.Height - __0x1631 - 1 );

				TextRenderer.DrawText( e.Graphics, __0x1626.Text, Owner.Font, __0x1632, textColor, backColor, __0x1630 );
			}
		}
	}

}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents options for <see cref="ContentBrowser"/>.
	/// </summary>
	public class ContentBrowserOptions : Metadata.IMetadataProvider
	{
		public static bool AllowFilteringModeButton = true;
		public static bool AllowMembersButton = true;

		public delegate void ConfigureDelegate( ContentBrowserOptions __0x1650 );
		public static event ConfigureDelegate Configure;

		

		ContentBrowser __0x1633;

		

		[Browsable( false )]
		public ContentBrowser.PanelModeEnum PanelMode { get; set; } = ContentBrowser.PanelModeEnum.Tree;

		[DefaultValue( ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_Resources { get { return PanelMode; } set { PanelMode = value; } }

		[DefaultValue( ContentBrowser.PanelModeEnum.Tree )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_Objects { get { return PanelMode; } set { PanelMode = value; } }

		[DefaultValue( ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally )]
		[DisplayName( "Panel Mode" )]
		public ContentBrowser.PanelModeEnum PanelMode_SetReference { get { return PanelMode; } set { PanelMode = value; } }

		
		
		

		[DefaultValue( true )]
		public bool FilteringModeButton { get; set; } = true;

		[DefaultValue( true )]
		public bool MembersButton { get; set; } = true;

		[DefaultValue( true )]
		public bool OpenButton { get; set; } = true;

		[DefaultValue( true )]
		public bool EditorButton { get; set; } = true;

		[DefaultValue( true )]
		public bool SettingsButton { get; set; } = true;

		[DefaultValue( true )]
		public bool ButtonsForEditing { get; set; } = true;

		[DefaultValue( true )]
		public bool SearchButton { get; set; } = true;

		
		
		
		[DefaultValue( false )]
		public bool SearchBar { get; } = false;
		
		

		[DefaultValue( ContentBrowser.SortByItems.Name )]
		public ContentBrowser.SortByItems SortFilesBy { get; set; } = ContentBrowser.SortByItems.Name;

		[DefaultValue( true )]
		public bool SortFilesByAscending { get; set; } = true;

		[DefaultValue( true )]
		public bool Breadcrumb { get; set; } = true;

		[DefaultValue( ContentBrowser.ListModeEnum.Auto )]
		public ContentBrowser.ListModeEnum ListMode { get; set; } = ContentBrowser.ListModeEnum.Auto;

		const int __0x1634 = 32;
		[DefaultValue( __0x1634 )]
		[Range( 10, 128 )]
		public int ListImageSize { get; set; } = __0x1634;

		const int __0x1635 = 1000;
		[DefaultValue( __0x1635 )]
		[Range( 50, 2000 )]
		public int ListColumnWidth { get; set; } = __0x1635;

		const int __0x1636 = 32;
		[DefaultValue( __0x1636 )]
		[Range( 10, 128 )]
		public int TileImageSize { get; set; } = __0x1636;

		[Range( 0, 1 )]
		[DefaultValue( 0.6 )]
		public double SplitterPosition { get; set; } = 0.6;

		List<PropertyImpl> __0x1637 = new List<PropertyImpl>();

		

		public class PropertyImpl : Metadata.Property
		{
			IList<Attribute> __0x1638;
			string __0x1639;
			object __0x1640;

			public delegate void ValueChangedDelegate( PropertyImpl __0x1651 );
			public event ValueChangedDelegate ValueChanged;

			

			public PropertyImpl( ContentBrowserOptions owner, string name, Metadata.TypeInfo type, IList<Attribute> attributes, string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.__0x1638 = attributes;
				this.__0x1639 = category;
				this.__0x1640 = value;
			}

			public IList<Attribute> Attributes
			{
				get { return __0x1638; }
				set { __0x1638 = value; }
			}

			public string Category
			{
				get { return __0x1639; }
				set { __0x1639 = value; }
			}

			public object Value
			{
				get { return __0x1640; }
				set { this.__0x1640 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x1641 = new List<object>();

				if( __0x1638 != null )
				{
					foreach( var __0x1646 in __0x1638 )
					{
						if( attributeType.IsAssignableFrom( __0x1646.GetType() ) )
							__0x1641.Add( __0x1646 );
					}
				}

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x1639 ) )
						__0x1641.Add( new CategoryAttribute( __0x1639 ) );
				}

				return __0x1641.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x1640;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				bool __0x1642 = !Equals( this.__0x1640, value );

				this.__0x1640 = value;

				if( __0x1642 )
					ValueChanged?.Invoke( this );
			}
		}

		

		public ContentBrowserOptions( ContentBrowser owner )
		{
			this.__0x1633 = owner;

			Configure?.Invoke( this );
		}

		[Browsable( false )]
		public bool DisplayPropertiesEditorSettingsButtons { get; set; } = true;

		[Browsable( false )]
		public bool DisplayPropertiesSortFilesBy { get; set; } = true;

		[Browsable( false )]
		public bool DisplayPropertiesOpenButton { get; set; } = true;

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		protected virtual void MetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
		{
			var __0x1643 = member as Metadata.Property;
			if( __0x1643 != null )
			{
				switch( __0x1643.Name )
				{
				case nameof( PanelMode_Resources ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.Resources )
						skip = true;
					break;
				case nameof( PanelMode_Objects ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.Objects )
						skip = true;
					break;
				case nameof( PanelMode_SetReference ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.SetReference )
						skip = true;
					break;

				case nameof( ListMode ):
				case nameof( TileImageSize ):
				case nameof( ListImageSize ):
				case nameof( ListColumnWidth ):
				case nameof( Breadcrumb ):
					if( PanelMode == ContentBrowser.PanelModeEnum.Tree )
						skip = true;
					break;

				case nameof( EditorButton ):
				case nameof( SettingsButton ):
					if( !DisplayPropertiesEditorSettingsButtons )
						skip = true;
					break;

				case nameof( FilteringModeButton ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.Resources || !AllowFilteringModeButton )
						skip = true;
					break;

				case nameof( MembersButton ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.Objects || !AllowMembersButton )
						skip = true;
					break;

				case nameof( SortFilesBy ):
				case nameof( SortFilesByAscending ):
					if( !DisplayPropertiesSortFilesBy )
						skip = true;
					break;

				case nameof( OpenButton ):
					if( !DisplayPropertiesOpenButton )
						skip = true;
					break;

				case nameof( SearchButton ):
					if( __0x1633.Mode != ContentBrowser.ModeEnum.Objects )
						skip = true;
					break;

				case nameof( SearchBar ):
					skip = true;
					break;

				case nameof( SplitterPosition ):
					if( PanelMode == ContentBrowser.PanelModeEnum.Tree || PanelMode == ContentBrowser.PanelModeEnum.List )
						skip = true;
					break;
				}
			}
		}

		public virtual IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			foreach( var __0x1647 in BaseType.MetadataGetMembers( context ) )
			{
				bool __0x1644 = false;
				if( context == null || context.filter )
					MetadataGetMembersFilter( context, __0x1647, ref __0x1644 );
				if( !__0x1644 )
					yield return __0x1647;
			}

			foreach( var __0x1648 in __0x1637 )
				yield return __0x1648;
		}

		public virtual Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			var __0x1645 = BaseType.MetadataGetMemberBySignature( signature, context );
			if( __0x1645 != null )
				return __0x1645;

			foreach( var __0x1649 in __0x1637 )
				if( __0x1649.Signature == signature )
					return __0x1649;

			return null;
		}

		public void AddProperty( PropertyImpl property )
		{
			__0x1637.Add( property );
		}

		public void Load( TextBlock block )
		{
			try
			{
				if( block.AttributeExists( nameof( PanelMode ) ) )
					PanelMode = (ContentBrowser.PanelModeEnum)Enum.Parse( typeof( ContentBrowser.PanelModeEnum ), block.GetAttribute( nameof( PanelMode ) ) );
				if( block.AttributeExists( nameof( ListMode ) ) )
					ListMode = (ContentBrowser.ListModeEnum)Enum.Parse( typeof( ContentBrowser.ListModeEnum ), block.GetAttribute( nameof( ListMode ) ) );
				if( block.AttributeExists( nameof( TileImageSize ) ) )
					TileImageSize = int.Parse( block.GetAttribute( nameof( TileImageSize ) ) );
				if( block.AttributeExists( nameof( ListImageSize ) ) )
					ListImageSize = int.Parse( block.GetAttribute( nameof( ListImageSize ) ) );
				if( block.AttributeExists( nameof( ListColumnWidth ) ) )
					ListColumnWidth = int.Parse( block.GetAttribute( nameof( ListColumnWidth ) ) );
				if( block.AttributeExists( nameof( Breadcrumb ) ) )
					Breadcrumb = bool.Parse( block.GetAttribute( nameof( Breadcrumb ) ) );
				if( block.AttributeExists( nameof( SortFilesBy ) ) )
					SortFilesBy = (ContentBrowser.SortByItems)Enum.Parse( typeof( ContentBrowser.SortByItems ), block.GetAttribute( nameof( SortFilesBy ) ) );
				if( block.AttributeExists( nameof( SortFilesByAscending ) ) )
					SortFilesByAscending = bool.Parse( block.GetAttribute( nameof( SortFilesByAscending ) ) );
				if( block.AttributeExists( nameof( FilteringModeButton ) ) )
					FilteringModeButton = bool.Parse( block.GetAttribute( nameof( FilteringModeButton ) ) );
				if( block.AttributeExists( nameof( MembersButton ) ) )
					MembersButton = bool.Parse( block.GetAttribute( nameof( MembersButton ) ) );
				if( block.AttributeExists( nameof( OpenButton ) ) )
					OpenButton = bool.Parse( block.GetAttribute( nameof( OpenButton ) ) );
				if( block.AttributeExists( nameof( EditorButton ) ) )
					EditorButton = bool.Parse( block.GetAttribute( nameof( EditorButton ) ) );
				if( block.AttributeExists( nameof( SettingsButton ) ) )
					SettingsButton = bool.Parse( block.GetAttribute( nameof( SettingsButton ) ) );
				if( block.AttributeExists( nameof( ButtonsForEditing ) ) )
					ButtonsForEditing = bool.Parse( block.GetAttribute( nameof( ButtonsForEditing ) ) );
				if( block.AttributeExists( nameof( SearchButton ) ) )
					SearchButton = bool.Parse( block.GetAttribute( nameof( SearchButton ) ) );
				
				
				

				if( block.AttributeExists( nameof( SplitterPosition ) ) )
					SplitterPosition = double.Parse( block.GetAttribute( nameof( SplitterPosition ) ) );
			}
			catch { }
		}

		public void Save( TextBlock block )
		{
			block.SetAttribute( nameof( PanelMode ), PanelMode.ToString() );
			if( ListMode != ContentBrowser.ListModeEnum.List )
				block.SetAttribute( nameof( ListMode ), ListMode.ToString() );
			if( TileImageSize != __0x1636 )
				block.SetAttribute( nameof( TileImageSize ), TileImageSize.ToString() );
			if( ListImageSize != __0x1634 )
				block.SetAttribute( nameof( ListImageSize ), ListImageSize.ToString() );
			if( ListColumnWidth != __0x1635 )
				block.SetAttribute( nameof( ListColumnWidth ), ListColumnWidth.ToString() );
			if( !Breadcrumb )
				block.SetAttribute( nameof( Breadcrumb ), Breadcrumb.ToString() );
			if( DisplayPropertiesSortFilesBy )
			{
				if( SortFilesBy != ContentBrowser.SortByItems.Name )
					block.SetAttribute( nameof( SortFilesBy ), SortFilesBy.ToString() );
				if( !SortFilesByAscending )
					block.SetAttribute( nameof( SortFilesByAscending ), SortFilesByAscending.ToString() );
			}
			if( __0x1633.Mode == ContentBrowser.ModeEnum.Resources )
			{
				if( !FilteringModeButton )
					block.SetAttribute( nameof( FilteringModeButton ), FilteringModeButton.ToString() );
			}
			if( __0x1633.Mode == ContentBrowser.ModeEnum.Objects )
			{
				if( !MembersButton )
					block.SetAttribute( nameof( MembersButton ), MembersButton.ToString() );
			}
			if( DisplayPropertiesOpenButton )
			{
				if( !OpenButton )
					block.SetAttribute( nameof( OpenButton ), OpenButton.ToString() );
			}
			if( DisplayPropertiesEditorSettingsButtons )
			{
				if( !EditorButton )
					block.SetAttribute( nameof( EditorButton ), EditorButton.ToString() );
				if( !SettingsButton )
					block.SetAttribute( nameof( SettingsButton ), SettingsButton.ToString() );
			}
			if( !ButtonsForEditing )
				block.SetAttribute( nameof( ButtonsForEditing ), ButtonsForEditing.ToString() );
			if( __0x1633.Mode == ContentBrowser.ModeEnum.Objects )
			{
				if( !SearchButton )
					block.SetAttribute( nameof( SearchButton ), SearchButton.ToString() );
			}

			
			if( !SearchBar )
				block.SetAttribute( nameof( SearchBar ), SearchBar.ToString() );

			block.SetAttribute( nameof( SplitterPosition ), SplitterPosition.ToString() );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class ContentBrowserOptionsForm : EngineForm
	{
		public ContentBrowserOptionsForm( ContentBrowser browser )
		{
			Browser = browser;

			__0x1661();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = EditorLocalization.Translate( "ContentBrowser", Text );
			EditorLocalization.TranslateForm( "ContentBrowser", this );

			__0x1654.OverridePropertyDisplayName += __0x1658;
			__0x1654.OverridePropertyEnumItem += __0x1659;

			if( EditorLocalization.WideLanguage )
				__0x1654.SplitterRatio = 0.5f;

			if( Browser != null )
			{
				object[] __0x1652 = new object[ 1 ];
				__0x1652[ 0 ] = Browser.Options;
				__0x1654.SetData( null, __0x1652 );

				
				__0x1654.UpdateItems();
			}
		}

		[Browsable( false )]
		public ContentBrowser Browser { get; set; }

		private void __0x1656( object __0x1662, EventArgs __0x1663 )
		{
			__0x1660();

			
			
			
			
			
			
		}

		private void __0x1657( object __0x1664, EventArgs __0x1665 )
		{
			Close();
		}

		private void __0x1658( HierarchicalContainer __0x1666, HCItemProperty __0x1667, ref string __0x1668 )
		{
			__0x1668 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1668 );
		}

		private void __0x1659( HierarchicalContainer __0x1669, HCItemEnumDropDown __0x1670, ref string __0x1671, ref string __0x1672 )
		{
			__0x1671 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1671 );
			__0x1672 = EditorLocalization.Translate( "ContentBrowser.Options", __0x1672 );
		}

		void __0x1660()
		{
			__0x1655.Location = new Point( ClientSize.Width - __0x1655.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x1655.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x1654.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x1654.Location.X, __0x1655.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x1654.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x1660();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class ContentBrowserOptionsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1653 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1653 != null ) )
			{
				__0x1653.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1661()
		{
			this.__0x1654 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x1655 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x1654.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x1654.DisplayGroups = false;
			this.__0x1654.Location = new System.Drawing.Point(0, 14);
			this.__0x1654.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1654.Name = "hierarchicalContainer1";
			this.__0x1654.Size = new System.Drawing.Size(550, 407);
			this.__0x1654.SplitterPosition = 220;
			this.__0x1654.SplitterRatio = 0.4F;
			this.__0x1654.TabIndex = 0;
			
			
			
			
			this.__0x1655.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x1655.Location = new System.Drawing.Point(433, 431);
			this.__0x1655.Name = "buttonClose";
			this.__0x1655.Size = new System.Drawing.Size(117, 32);
			this.__0x1655.TabIndex = 1;
			this.__0x1655.Values.Text = "Close";
			this.__0x1655.Click += new System.EventHandler(this.__0x1657);
			
			
			
			this.AcceptButton = this.__0x1655;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x1655;
			this.ClientSize = new System.Drawing.Size(562, 475);
			this.Controls.Add(this.__0x1655);
			this.Controls.Add(this.__0x1654);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ContentBrowserOptionsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Content Browser Options";
			this.Load += new System.EventHandler(this.__0x1656);
			this.ResumeLayout(false);

		}

		#endregion

		private HierarchicalContainer __0x1654;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x1655;
	}
}




namespace NeoAxis.Editor
{
	public partial class ContentBrowserSearchForm : EngineForm
	{
		public ContentBrowserSearchForm()
		{
			__0x1695();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			Text = EditorLocalization.Translate( "ContentBrowser.SearchForm", Text );
			EditorLocalization.TranslateForm( "ContentBrowser.SearchForm", this );
		}

		[Browsable( false )]
		public ContentBrowser Browser { get; set; }

		private void __0x1690( object __0x1696, EventArgs __0x1697 )
		{
			__0x1694();
		}

		private void __0x1691( object __0x1698, EventArgs __0x1699 )
		{
			Close();
		}

		static bool __0x1692( string __0x1700, string __0x1701 )
		{
			if( string.IsNullOrEmpty( __0x1701 ) )
				return true;
			if( __0x1701 == "*" || __0x1701 == "*.*" )
				return true;

			string __0x1673 = __0x1700.ToLower();
			string __0x1674 = __0x1701.ToLower();

			int __0x1675 = 0;
			int __0x1676 = 0;
			int __0x1677 = __0x1674.Length;
			while( __0x1675 != __0x1673.Length && __0x1676 != __0x1674.Length )
			{
				if( __0x1674[ __0x1676 ] == '*' )
				{
					__0x1677 = __0x1676;
					
					__0x1676++;
					if( __0x1676 == __0x1674.Length )
					{
						
						__0x1675 = __0x1673.Length;
					}
					else
					{
						
						while( __0x1675 != __0x1673.Length && __0x1673[ __0x1675 ] != __0x1674[ __0x1676 ] )
							__0x1675++;
					}
				}
				else
				{
					if( __0x1674[ __0x1676 ] != __0x1673[ __0x1675 ] )
					{
						if( __0x1677 != __0x1674.Length )
						{
							
							
							__0x1676 = __0x1677;
							__0x1677 = __0x1674.Length;
						}
						else
						{
							
							return false;
						}
					}
					else
					{
						__0x1676++;
						__0x1675++;
					}
				}
			}

			
			if( __0x1676 == __0x1674.Length && __0x1675 == __0x1673.Length )
				return true;
			else
				return false;
		}

		private void __0x1693( object __0x1702, EventArgs __0x1703 )
		{
			var __0x1678 = Browser.RootObject as Component;
			if( __0x1678 == null )
				return;

			string __0x1679 = __0x1687.Text.Trim();
			if( __0x1679.Length > 0 && __0x1679[ __0x1679.Length - 1 ] != '*' )
				__0x1679 += '*';

			var __0x1680 = new ESet<Component>();

			if( ModifierKeys.HasFlag( Keys.Shift ) )
			{
				foreach( var __0x1688 in Browser.SelectedItems.OfType<ContentBrowserItem_Component>() )
					__0x1680.Add( __0x1688.Component );
			}

			

			var __0x1681 = new List<Component>( 256 );
			__0x1681.Add( __0x1678 );
			__0x1681.AddRange( __0x1678.GetComponents( checkChildren: true ) );

			var __0x1682 = __0x1679;
			if( __0x1682.Length > 0 )
				__0x1682 = __0x1682.Substring( 0, __0x1682.Length - 1 );

			foreach( var __0x1689 in __0x1681 )
			{
				
				if( __0x1692( __0x1689.Name, __0x1679 ) || __0x1689.Name == __0x1682 )
				{
					
					
					

					
					
					
					
					
					
					

					__0x1680.AddWithCheckAlreadyContained( __0x1689 );
				}
			}

			ContentBrowserUtility.SelectComponentItems( Browser, __0x1680.ToArray() );
		}

		void __0x1694()
		{
			__0x1684.Location = new Point( ClientSize.Width - __0x1684.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x1684.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x1685.Location = new Point( __0x1684.Location.X - __0x1685.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x1684.Location.Y );
			__0x1687.Width = ClientSize.Width - __0x1687.Location.X - DpiHelper.Default.ScaleValue( 12 );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x1694();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class ContentBrowserSearchForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1683 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1683 != null ) )
			{
				__0x1683.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1695()
		{
			this.__0x1684 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x1685 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x1687 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x1686 = new NeoAxis.Editor.EngineLabel();
			this.SuspendLayout();
			
			
			
			
			this.__0x1684.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x1684.Location = new System.Drawing.Point(433, 431);
			this.__0x1684.Name = "buttonClose";
			this.__0x1684.Size = new System.Drawing.Size(117, 32);
			this.__0x1684.TabIndex = 2;
			this.__0x1684.Values.Text = "Close";
			this.__0x1684.Click += new System.EventHandler(this.__0x1691);
			
			
			
			
			this.__0x1685.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x1685.Location = new System.Drawing.Point(310, 431);
			this.__0x1685.Name = "kryptonButtonSearch";
			this.__0x1685.Size = new System.Drawing.Size(117, 32);
			this.__0x1685.TabIndex = 1;
			this.__0x1685.Values.Text = "Search";
			this.__0x1685.Click += new System.EventHandler(this.__0x1693);
			
			
			
			
   
			this.__0x1687.Location = new System.Drawing.Point(12, 37);
			this.__0x1687.Name = "kryptonTextBoxFilterByName";
			this.__0x1687.Size = new System.Drawing.Size(538, 23);
			this.__0x1687.TabIndex = 0;
			this.__0x1687.Text = "Light*";
			
			
			
			this.__0x1686.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x1686.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x1686.Location = new System.Drawing.Point(12, 12);
			this.__0x1686.Name = "labelEx1";
			this.__0x1686.Size = new System.Drawing.Size(538, 23);
			this.__0x1686.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.__0x1686.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x1686.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x1686.StateCommon.Border.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x1686.TabIndex = 7;
			this.__0x1686.Text = "Filter by name:";
			
			
			
			this.AcceptButton = this.__0x1685;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x1684;
			this.ClientSize = new System.Drawing.Size(562, 475);
			this.Controls.Add(this.__0x1687);
			this.Controls.Add(this.__0x1686);
			this.Controls.Add(this.__0x1685);
			this.Controls.Add(this.__0x1684);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ContentBrowserSearchForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Search";
			this.Load += new System.EventHandler(this.__0x1690);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x1684;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x1685;
		private EngineLabel __0x1686;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x1687;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="ContentBrowser"/>.
	/// </summary>
	static class ContentBrowserUtility
	{
		static __0x1766 __0x1704 = new __0x1766();

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		

		
		
		


		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		

		
		

		
		

		static ContentBrowserItem_Component.ReferenceSelectionModeEnum __0x1757( ContentBrowserItem_Component __0x1760 )
		{
			var __0x1705 = __0x1760;
			do
			{
				if( __0x1705.ReferenceSelectionMode != ContentBrowserItem_Component.ReferenceSelectionModeEnum.None )
					return __0x1705.ReferenceSelectionMode;
				__0x1705 = __0x1705.Parent as ContentBrowserItem_Component;
			} while( __0x1705 != null );

			return ContentBrowserItem_Component.ReferenceSelectionModeEnum.None;
		}

		public static void CalculateReferenceValueForComponentItem( Component from, ContentBrowserItem_Component item, out string referenceValue, out char addSeparator )
		{
			Component __0x1706 = item.Component;

			
			if( from == null || from.ParentRoot != __0x1706.ParentRoot )
			{
				
				
				
				ReferenceUtility.CalculateResourceReference( __0x1706, "", out referenceValue, out addSeparator );
				return;
			}

			
			{
				var __0x1707 = __0x1757( item );

				if( __0x1707 == ContentBrowserItem_Component.ReferenceSelectionModeEnum.This )
				{
					ReferenceUtility.CalculateThisReference( from, __0x1706, "", out referenceValue, out addSeparator );
					return;
				}
				else if( __0x1707 == ContentBrowserItem_Component.ReferenceSelectionModeEnum.Root )
				{
					ReferenceUtility.CalculateRootReference( __0x1706, "", out referenceValue, out addSeparator );
					return;
				}
			}

			
			{
				
				
				

				var __0x1708 = new List<ContentBrowserItem_Component>();
				ContentBrowser.Item __0x1709 = null;
				{
					ContentBrowser.Item __0x1710 = item;
					do
					{
						if( __0x1710 is ContentBrowserItem_Component )
						{
							if( __0x1710.Parent != null )
								__0x1708.Add( (ContentBrowserItem_Component)__0x1710 );
						}
						else if( __0x1710 is ContentBrowserItem_Type || __0x1710 is ContentBrowserItem_File )
						{
							__0x1709 = __0x1710;
							break;
						}
						else
							Log.Fatal( "ContentBrowserUtils: CalculateReferenceValueForComponentItem: Internal error." );

						__0x1710 = __0x1710.Parent;
					} while( __0x1710 != null );

					__0x1708.Reverse();
				}

				var __0x1711 = new StringBuilder();

				
				if( __0x1709 != null )
				{
					

					var __0x1712 = __0x1709 as ContentBrowserItem_File;
					if( __0x1712 != null )
						__0x1711.Append( VirtualPathUtility.GetVirtualPathByReal( __0x1712.FullPath ) );

					var __0x1713 = __0x1709 as ContentBrowserItem_Type;
					if( __0x1713 != null )
						__0x1711.Append( __0x1713.Type.Name );

					addSeparator = '|';
				}
				else
				{
					
					__0x1711.Append( "root:" );
					addSeparator = '\0';
				}

				
				foreach( var __0x1749 in __0x1708 )
				{
					if( addSeparator != '\0' )
						__0x1711.Append( addSeparator );
					__0x1711.Append( __0x1749.Component.GetPathFromParent() );
					addSeparator = '\\';
				}

				referenceValue = __0x1711.ToString();
			}
		}

		public static string CalculateReferenceValueForComponentItem( Component from, ContentBrowserItem_Component item )
		{
			CalculateReferenceValueForComponentItem( from, item, out string referenceValue, out char addSeparator );
			return referenceValue;

			

			
			
			

			
			
			
			
			

			
			
		}

		public static void CalculateReferenceValueForMemberItem( Component from, Metadata.TypeInfo expectedType, ContentBrowserItem_Member item, out string referenceValue, out char addSeparator )
		{
			var __0x1714 = new List<ContentBrowserItem_Member>();
			ContentBrowser.Item __0x1715 = null;
			{
				ContentBrowser.Item __0x1716 = item;
				do
				{
					if( __0x1716 is ContentBrowserItem_Member )
					{
						__0x1714.Add( (ContentBrowserItem_Member)__0x1716 );
					}
					else if( __0x1716 is ContentBrowserItem_Type || __0x1716 is ContentBrowserItem_File || __0x1716 is ContentBrowserItem_Component )
					{
						__0x1715 = __0x1716;
						break;
					}
					else
						Log.Fatal( "ContentBrowserUtils: CalculateReferenceValueForMemberItem: Internal error." );

					__0x1716 = __0x1716.Parent;
				} while( __0x1716 != null );

				__0x1714.Reverse();
			}

			var __0x1717 = new StringBuilder();
			

			if( __0x1715 is ContentBrowserItem_Component )
			{
				
				var __0x1718 = (ContentBrowserItem_Component)__0x1715;
				CalculateReferenceValueForComponentItem( from, __0x1718, out string referenceValue2, out addSeparator );
				__0x1717.Append( referenceValue2 );
			}
			else
			{
				

				var __0x1719 = __0x1715 as ContentBrowserItem_File;
				if( __0x1719 != null )
					__0x1717.Append( VirtualPathUtility.GetVirtualPathByReal( __0x1719.FullPath ) );

				var __0x1720 = __0x1715 as ContentBrowserItem_Type;
				if( __0x1720 != null )
					__0x1717.Append( __0x1720.Type.Name );

				addSeparator = '|';
			}

			
			foreach( var __0x1750 in __0x1714 )
			{
				if( addSeparator != '\0' )
					__0x1717.Append( addSeparator );

				var __0x1721 = __0x1750.Member;
				if( expectedType != null && MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( expectedType ) )
					__0x1717.Append( __0x1721.Signature );
				else
					__0x1717.Append( __0x1721.Name );

				addSeparator = '\\';
			}

			referenceValue = __0x1717.ToString();
			
		}

		public static string CalculateReferenceValueForMemberItem( Component from, Metadata.TypeInfo expectedType, ContentBrowserItem_Member item )
		{
			CalculateReferenceValueForMemberItem( from, expectedType, item, out string referenceValue, out _ );
			return referenceValue;
		}

		static int __0x1758( Metadata.Member __0x1761 )
		{
			

			if( __0x1761 is Metadata.Property )
				return 0;
			if( __0x1761 is Metadata.Method )
			{
				if( ( (Metadata.Method)__0x1761 ).Constructor )
					return 1;
				else
					return 2;
			}
			if( __0x1761 is Metadata.Event )
				return 3;

			return 100;
		}

		public static void SortMemberItems( List<Metadata.Member> members )
		{
			CollectionUtility.MergeSort( members, delegate ( Metadata.Member __0x1762, Metadata.Member __0x1763 )
			{
				int __0x1722 = __0x1758( __0x1762 );
				int __0x1723 = __0x1758( __0x1763 );
				if( __0x1722 < __0x1723 )
					return -1;
				if( __0x1722 > __0x1723 )
					return 1;

				if( __0x1762.Static && !__0x1763.Static )
					return -1;
				if( !__0x1762.Static && __0x1763.Static )
					return 1;

				return string.Compare( __0x1762.Name + "z", __0x1763.Name + "z" );
			} );
		}

		public static bool ContentBrowserSetReferenceModeCheckAllowAddMember( Metadata.TypeInfo propertyTypeUnreferenced, Metadata.Member member,
			bool staticForDefaultBehaviour )
		{
			var __0x1724 = propertyTypeUnreferenced;

			
			
			
			
			
			

			
			if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Member ) ).IsAssignableFrom( __0x1724 ) )
			{
				if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Method ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Method )
						return true;
				}
				else if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Property ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Property )
						return true;
				}
				else if( MetadataManager.GetTypeOfNetType( typeof( ReferenceValueType_Event ) ).IsAssignableFrom( __0x1724 ) )
				{
					if( member is Metadata.Event )
						return true;
				}
				else
					return true;
			}

			
			if( staticForDefaultBehaviour == member.Static )
			{
				if( member is Metadata.Property )
				{
					
					var __0x1725 = (Metadata.Property)member;
					if( !__0x1725.HasIndexers )
						return true;
				}
				else if( member is Metadata.Method )
				{
					
					var __0x1726 = (Metadata.Method)member;
					if( __0x1726.Parameters.Length == 1 && __0x1726.GetReturnParameters().Length == 1 )
						return true;
				}
			}

			return false;
		}

		class __0x1766
		{
			public Dictionary<Type, bool> classes = new Dictionary<Type, bool>();
		}

		public static bool ContainsComponentClasses( Type type )
		{
			lock( __0x1704 )
			{
				var __0x1727 = __0x1704;

				bool __0x1728;
				if( !__0x1727.classes.TryGetValue( type, out __0x1728 ) )
				{
					__0x1728 = typeof( Component ).IsAssignableFrom( type );
					if( !__0x1728 )
					{
						foreach( var __0x1751 in type.GetNestedTypes( BindingFlags.Public ) )
						{
							if( ContainsComponentClasses( __0x1751 ) )
							{
								__0x1728 = true;
								break;
							}
						}
					}

					__0x1727.classes[ type ] = __0x1728;
				}

				return __0x1728;
			}
		}

		public static bool ContainsType( Type seekingType, Type type )
		{
			

			var __0x1729 = seekingType.IsAssignableFrom( type );
			if( !__0x1729 )
			{
				foreach( var __0x1752 in type.GetNestedTypes( BindingFlags.Public ) )
				{
					if( ContainsType( seekingType, __0x1752 ) )
					{
						__0x1729 = true;
						break;
					}
				}
			}
			return __0x1729;
		}

		static ContentBrowserItem_File __0x1759( ContentBrowser __0x1764, string __0x1765 )
		{
			foreach( var __0x1753 in __0x1764.GetAllItems() )
			{
				var __0x1730 = __0x1753 as ContentBrowserItem_File;
				if( __0x1730 != null && string.Compare( __0x1730.FullPath, __0x1765, true ) == 0 )
				{
					
					if( __0x1730.Parent as ContentBrowserItem_Favorites == null )
						return __0x1730;
				}
			}
			return null;
		}

		public static ContentBrowserItem_File GetItemByRealFilePath_WithCreationNotCreatedItems( ContentBrowser browser, string realPath )
		{
			if( browser.DataItem == null )
				return null;
			if( !VirtualPathUtility.GetVirtualPathByReal( realPath, out var virtualPath ) )
				return null;
			if( string.IsNullOrEmpty( virtualPath ) )
				return browser.DataItem;

			

			browser.SelectItems( new ContentBrowser.Item[] { browser.DataItem }, true );

			var __0x1731 = virtualPath.Split( new char[] { '\\', '/' } );
			var __0x1732 = VirtualFileSystem.Directories.Assets;
			for( int __0x1733 = 0; __0x1733 < __0x1731.Length; __0x1733++ )
			{
				var __0x1734 = __0x1731[ __0x1733 ];
				bool __0x1735 = __0x1733 == __0x1731.Length - 1;

				__0x1732 = Path.Combine( __0x1732, __0x1734 );

				var __0x1736 = __0x1759( browser, __0x1732 );
				if( __0x1736 == null )
					return null;

				if( !__0x1735 )
					browser.SelectItems( new ContentBrowser.Item[] { __0x1736 }, true );
				else
					return __0x1736;
			}
			return null;
		}

		public static bool SelectFileItems( ContentBrowser browser, string[] realPaths, bool expandNodes )
		{
			var __0x1737 = new List<ContentBrowserItem_File>();
			foreach( var __0x1754 in realPaths )
			{
				var __0x1738 = GetItemByRealFilePath_WithCreationNotCreatedItems( browser, __0x1754 );
				if( __0x1738 == null )
					return false;
				__0x1737.Add( __0x1738 );
			}
			browser.SelectItems( __0x1737.ToArray(), expandNodes, true );
			return true;
		}

		public static ContentBrowserItem_Component GetItemByComponent_WithCreationNotCreatedItems( ContentBrowser browser, Component component )
		{
			var __0x1739 = new Stack<Component>();
			{
				var __0x1740 = component.Parent;
				while( __0x1740 != null )
				{
					__0x1739.Push( __0x1740 );

					var __0x1741 = browser.FindItemByContainedObject( __0x1740 ) as ContentBrowserItem_Component;
					if( __0x1741 != null )
						break;

					__0x1740 = __0x1740.Parent;
				}
			}

			
			while( __0x1739.Count != 0 )
			{
				var __0x1742 = __0x1739.Pop();
				var __0x1743 = browser.FindItemByContainedObject( __0x1742 ) as ContentBrowserItem_Component;
				if( __0x1743 != null )
					browser.SelectItems( new ContentBrowser.Item[] { __0x1743 }, true );
			}

			return browser.FindItemByContainedObject( component ) as ContentBrowserItem_Component;
		}

		public static void SelectComponentItems( ContentBrowser browser, Component[] components )
		{
			var __0x1744 = new List<ContentBrowserItem_Component>();
			foreach( var __0x1755 in components )
			{
				var __0x1745 = GetItemByComponent_WithCreationNotCreatedItems( browser, __0x1755 );
				if( __0x1745 != null )
					__0x1744.Add( __0x1745 );
			}
			if( __0x1744.Count != 0 )
				browser.SelectItems( __0x1744.ToArray(), false, true );
		}

		

		public static bool allContentBrowsers_SuspendChildrenChangedEvent;
		public static ESet<(ContentBrowser, ContentBrowser.Item)> allContentBrowsers_SuspendChildrenChangedEvent_Items = new ESet<(ContentBrowser, ContentBrowser.Item)>();

		public static void AllContentBrowsers_SuspendChildrenChangedEvent()
		{
			allContentBrowsers_SuspendChildrenChangedEvent = true;
		}

		public static void AllContentBrowsers_ResumeChildrenChangedEvent()
		{
			allContentBrowsers_SuspendChildrenChangedEvent = false;

			var __0x1746 = allContentBrowsers_SuspendChildrenChangedEvent_Items.ToArray();
			allContentBrowsers_SuspendChildrenChangedEvent_Items.Clear();
			foreach( var __0x1756 in __0x1746 )
			{
				var __0x1747 = __0x1756.Item1;
				var __0x1748 = __0x1756.Item2;

				__0x1747.Item_ChildrenChanged( __0x1748 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Debug Info Window.
	/// </summary>
	public partial class DebugInfoWindow : DockWindow
	{
		string __0x1767 = "";

		List<ContentBrowser.Item> __0x1768 = new List<ContentBrowser.Item>();

		
		

		
		
		

		

		public DebugInfoWindow()
		{
			__0x1789();

			__0x1781.RemoveTreeViewIconsColumn();

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x1783( object __0x1790, PreviewKeyDownEventArgs __0x1791 )
		{
			
			
			
		}

		
		
		
		

		private void __0x1784( object __0x1792, EventArgs __0x1793 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			
			__0x1785();

			__0x1780.Start();
		}

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		void __0x1785()
		{
			var __0x1769 = new List<ContentBrowser.Item>();

			ContentBrowserItem_Virtual __0x1770 = null;

			foreach( var __0x1782 in DebugInfoPage.AllPages )
			{
				var __0x1771 = new ContentBrowserItem_Virtual( __0x1779, null, EditorLocalization.Translate( "DebugInfoWindow", __0x1782.Title ) );
				__0x1771.Tag = __0x1782;
				__0x1769.Add( __0x1771 );

				if( __0x1770 == null )
					__0x1770 = __0x1771;
			}

			__0x1779.SetData( __0x1769, false );
			__0x1779.SelectItems( new ContentBrowser.Item[] { __0x1770 } );
		}

		private void __0x1786( ContentBrowser __0x1794, IList<ContentBrowser.Item> __0x1795, bool __0x1796, ref bool __0x1797 )
		{
			__0x1788();
		}

		private void __0x1787( object __0x1798, EventArgs __0x1799 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x1788();
		}

		void __0x1788()
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			var __0x1772 = new List<string>();
			if( __0x1779.SelectedItems.Length != 0 )
			{
				var __0x1773 = (DebugInfoPage)( (ContentBrowserItem_Virtual)__0x1779.SelectedItems[ 0 ] ).Tag;
				__0x1772 = __0x1773.Content;
			}

			if( __0x1768 == null || __0x1768.Count != __0x1772.Count )
			{
				__0x1768 = new List<ContentBrowser.Item>();
				for( int __0x1774 = 0; __0x1774 < __0x1772.Count; __0x1774++ )
				{
					var __0x1775 = new ContentBrowserItem_Virtual( __0x1781, null, __0x1772[ __0x1774 ] );
					__0x1768.Add( __0x1775 );
				}
				__0x1781.SetData( __0x1768, false );
			}
			else
			{
				for( int __0x1776 = 0; __0x1776 < __0x1772.Count; __0x1776++ )
					( (ContentBrowserItem_Virtual)__0x1768[ __0x1776 ] ).SetText( __0x1772[ __0x1776 ] );
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DebugInfoWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1777 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1777 != null ) )
			{
				__0x1777.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1789()
		{
			this.__0x1777 = new System.ComponentModel.Container();
			this.__0x1778 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x1779 = new NeoAxis.Editor.ContentBrowser();
			this.__0x1781 = new NeoAxis.Editor.ContentBrowser();
			this.__0x1780 = new System.Windows.Forms.Timer(this.__0x1777);
			((System.ComponentModel.ISupportInitialize)(this.__0x1778)).BeginInit();
			this.__0x1778.Panel1.SuspendLayout();
			this.__0x1778.Panel2.SuspendLayout();
			this.__0x1778.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x1778.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1778.Location = new System.Drawing.Point(0, 0);
			this.__0x1778.Name = "splitContainer1";
			
			
			
			this.__0x1778.Panel1.Controls.Add(this.__0x1779);
			
			
			
			this.__0x1778.Panel2.Controls.Add(this.__0x1781);
			this.__0x1778.Size = new System.Drawing.Size(625, 442);
			this.__0x1778.SplitterDistance = 168;
			this.__0x1778.SplitterPercent = 0.3;
			this.__0x1778.TabIndex = 0;
			
			
			
			this.__0x1779.CanSelectObjectSettings = false;
			this.__0x1779.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1779.FilteringMode = null;
			this.__0x1779.Location = new System.Drawing.Point(0, 0);
			this.__0x1779.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1779.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x1779.Name = "contentBrowserList";
			this.__0x1779.ReadOnlyHierarchy = false;
			this.__0x1779.ShowToolBar = false;
			this.__0x1779.Size = new System.Drawing.Size(168, 442);
			this.__0x1779.TabIndex = 0;
			this.__0x1779.ThisIsSettingsWindow = false;
			this.__0x1779.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x1786);
			
			
			
			this.__0x1781.CanSelectObjectSettings = false;
			this.__0x1781.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x1781.FilteringMode = null;
			this.__0x1781.Location = new System.Drawing.Point(0, 0);
			this.__0x1781.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x1781.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x1781.Name = "contentBrowserData";
			this.__0x1781.ReadOnlyHierarchy = false;
			this.__0x1781.ShowToolBar = false;
			this.__0x1781.Size = new System.Drawing.Size(453, 442);
			this.__0x1781.TabIndex = 1;
			this.__0x1781.ThisIsSettingsWindow = false;
			
			
			
			this.__0x1780.Interval = 500;
			this.__0x1780.Tick += new System.EventHandler(this.__0x1787);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x1778);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "DebugInfoWindow";
			this.Size = new System.Drawing.Size(625, 442);
			this.WindowTitle = "Debug Info";
			this.Load += new System.EventHandler(this.__0x1784);
			this.__0x1778.Panel1.ResumeLayout(false);
			this.__0x1778.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x1778)).EndInit();
			this.__0x1778.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x1778;
		private ContentBrowser __0x1779;
		private System.Windows.Forms.Timer __0x1780;
		private ContentBrowser __0x1781;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a docking window of the editor.
	/// </summary>
	public partial class DockWindow : EUserControl
	{
		string __0x1800 = "";
		Image __0x1801;

		[Browsable( false )]
		public EDialogResult? ShowDialogAndSaveDocumentAutoAnswer { get; set; }

		
		

		
		
		

		

		public DockWindow()
		{
			__0x1812();

			if( IsDesignerHosted )
				return;

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			
			
			
			
		}

		
		public virtual bool HideOnRemoving { get { return false; } }

		
		internal virtual bool IsSystemWindow { get { return  HideOnRemoving; } }

		public bool CloseByEscape { get; set; }

		protected override void OnDestroy()
		{
			

			if( __0x1808 != null )
			{
				__0x1808.Dispose();
				__0x1808 = null;
			}

			base.OnDestroy();
		}

		[Browsable( false )]
		internal KryptonPage KryptonPage
		{
			get { return Parent as KryptonPage; }
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			if( KryptonPage != null )
			{
				if( Parent != null )
					UpdateWindowTitle();

				KryptonPage.Text = __0x1800;
				KryptonPage.TextTitle = __0x1800;
				
				KryptonPage.VisibleChanged += ( __0x1813, __0x1814 ) => { Visible = ( (KryptonPage)__0x1813 ).LastVisibleSet; };
				KryptonPage.ParentChanged += __0x1811;
			}
		}

		public string WindowTitle
		{
			get { return __0x1800; }
			set
			{
				if( __0x1800 == value )
					return;
				__0x1800 = value;

				if( KryptonPage != null )
				{
					KryptonPage.Text = __0x1800;
					KryptonPage.TextTitle = __0x1800;
					
				}
			}
		}

		protected virtual string GetResultWindowTitle()
		{
			return WindowTitle;
		}

		public void UpdateWindowTitle()
		{
			WindowTitle = GetResultWindowTitle();
		}

		public virtual Image WindowImage
		{
			get { return __0x1801; }
			set
			{
				if( __0x1801 == value )
					return;
				__0x1801 = value;

				
			}
		}

		internal protected virtual void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
		}

		private void __0x1809( object __0x1815, EventArgs __0x1816 )
		{
			if( IsDesignerHosted )
				return;

			__0x1808?.Start();
		}

		private void __0x1810( object __0x1817, EventArgs __0x1818 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			UpdateWindowTitle();
		}

		internal void CalculateBigSizeForFloatingWindowDependingScreenSize( out Point position, out Size size )
		{
			

			var __0x1802 = SystemSettings.AllDisplays.FirstOrDefault( __0x1819 => __0x1819.Primary ) ?? SystemSettings.AllDisplays[ 0 ];
			var __0x1803 = new Vector2I( __0x1802.WorkingArea.Size.X, __0x1802.WorkingArea.Size.Y );
			

			double __0x1804 = 1.45;
			double __0x1805 = 0.8;

			
			if( this is SetReferenceWindow || this is SelectTypeWindow )
			{
				__0x1804 = 1;
				__0x1805 = .7;
			}
			
			
			
			
			

			size = new Size( (int)( (double)__0x1803.Y * __0x1804 * __0x1805 ), (int)( (double)__0x1803.Y * __0x1805 ) );
			var __0x1806 = ( __0x1803 - new Vector2I( size.Width, size.Height ) ) / 2;
			position = new Point( __0x1806.X, __0x1806.Y );

			
			
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		
		

		public override string ToString()
		{
			return this.GetType().Name + ": " + GetResultWindowTitle();
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( CloseByEscape && keyData == Keys.Escape )
			{
				Close();
				return true;
			}
			return base.ProcessCmdKey( ref msg, keyData );
		}

		public void Close()
		{
			EditorForm.Instance?.WorkspaceController.CloseDockWindow( this );
		}

		public virtual ObjectsInFocus GetObjectsInFocus()
		{
			return null;
		}

		
		
		

		
		
		

		protected virtual void OnKryptonPageParentChanged() { }

		private void __0x1811( object __0x1820, EventArgs __0x1821 )
		{
			OnKryptonPageParentChanged();
		}

		public virtual Vector2I DefaultAutoHiddenSlideSize
		{
			get { return ( new Vector2( 280, 200 ) * EditorAPI.DPIScale ).ToVector2I(); }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DockWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1807 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x1807 != null ) )
			{
				__0x1807.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1812()
		{
			this.__0x1807 = new System.ComponentModel.Container();
			this.__0x1808 = new System.Windows.Forms.Timer(this.__0x1807);
			this.SuspendLayout();
			
			
			
			this.__0x1808.Interval = 10;
			this.__0x1808.Tick += new System.EventHandler(this.__0x1810);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Name = "DockWindow";
			this.Load += new System.EventHandler(this.__0x1809);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x1808;
	}
}





namespace NeoAxis.Editor
{
	public class DockWindowEventArgs : EventArgs
	{
		public DockWindow DockWindow { get; set; }
		public DockWindowEventArgs(DockWindow dockWindow)
		{
			DockWindow = dockWindow;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class DocumentationLinksManager
	{
		static Dictionary<Type, string> __0x1822 = new Dictionary<Type, string>();

		

		public static void AddNameByType( Type type, string name )
		{
			__0x1822[ type ] = name;
		}

		public static string GetNameForType( Type type )
		{
			if( __0x1822.TryGetValue( type, out var name ) )
				return name;
			return "";
		}

		public static string GetFullLinkForType( Type type )
		{
			var __0x1823 = GetNameForType( type );
			if( !string.IsNullOrEmpty( __0x1823 ) )
			{
				var __0x1824 = __0x1823.Replace( ' ', '_' );
				return $"https://www.neoaxis.com/docs/html/{__0x1824}.htm";
			}
			return "";
		}
	}
}





namespace NeoAxis.Editor
{
	public class DocumentInstance
	{
		string __0x1825;
		Resource.Instance __0x1826;
		string __0x1827;
		bool __0x1828;
		UndoSystem __0x1829;
		bool __0x1830;

		List<double> __0x1831 = new List<double>();

		

		public DocumentInstance( string realFileName, Resource.Instance loadedResource, string specialMode )
		{
			this.__0x1825 = realFileName;
			this.__0x1826 = loadedResource;
			this.__0x1827 = specialMode;

			
			__0x1829 = new UndoSystem( 32 );
			__0x1829.ListOfActionsChanged += __0x1856;
		}

		public string RealFileName
		{
			get { return __0x1825; }
		}

		
		public string Name
		{
			get { return PathUtility.GetFileName( RealFileName ); }
		}

		
		
		
		
		

		public Resource.Instance LoadedResource
		{
			get { return __0x1826; }
		}

		public string SpecialMode
		{
			get { return __0x1827; }
		}

		
		public Component ResultComponent
		{
			get { return __0x1826?.ResultComponent; }
		}

		
		public object ResultObject
		{
			get { return __0x1826?.ResultObject; }
		}

		public bool IsEditorDocumentConfigurationExist
		{
			get { return ResultComponent?.EditorDocumentConfiguration != null; }
		}

		
		
		

		public bool Modified
		{
			get { return __0x1828; }
			set
			{
				__0x1828 = value;
				

				
				
				
			}
		}

		public UndoSystem UndoSystem
		{
			get { return __0x1829; }
		}

		public bool Destroyed
		{
			get { return __0x1830; }
		}

		public void Destroy()
		{
			if( __0x1830 )
				return;
			__0x1830 = true;

			if( __0x1829 != null )
				__0x1829.Dispose();

			EditorForm.instance?.Documents.Remove( this );

			__0x1826?.Dispose();
			__0x1826 = null;
		}

		
		
		

		
		
		
		
		
		
		
		
		
		

		public virtual bool CanSaveAs()
		{
			
			
			
			
			
			
			
			
			

			if( LoadedResource != null && LoadedResource.ResultComponent != null && LoadedResource.Owner.LoadFromFile )
			{
				if( !string.IsNullOrEmpty( LoadedResource.Owner.GetSaveAddFileExtension() ) )
					return false;
			}

			return true;
		}

		public delegate void SaveEventDelegate( DocumentInstance __0x1857, string __0x1858, ref bool __0x1859, ref bool __0x1860 );
		public event SaveEventDelegate SaveEvent;

		protected virtual bool OnSave( string saveAsFileName )
		{
			
			{
				bool __0x1832 = false;
				bool __0x1833 = false;
				SaveEvent?.Invoke( this, saveAsFileName, ref __0x1832, ref __0x1833 );
				if( __0x1832 )
					return __0x1833;
			}

			
			if( LoadedResource != null && LoadedResource.ResultComponent != null && LoadedResource.Owner.LoadFromFile )
			{
				string __0x1834;
				string __0x1835;
				if( !string.IsNullOrEmpty( saveAsFileName ) )
				{
					__0x1834 = saveAsFileName;
					__0x1835 = saveAsFileName;
				}
				else
				{
					__0x1834 = VirtualPathUtility.GetRealPathByVirtual( LoadedResource.Owner.Name );
					__0x1835 = __0x1834 + LoadedResource.Owner.GetSaveAddFileExtension();
					
					
				}

				

				var __0x1836 = (WorkspaceControllerForForm)EditorForm.instance.WorkspaceController;
				__0x1855( __0x1836 );

				string __0x1837;
				if( !ComponentUtility.SaveComponentToFile( LoadedResource.ResultComponent, __0x1835, null, out __0x1837 ) )
				{
					
					Log.Error( __0x1837 );
					return false;
				}

				PreviewImagesManager.AddResourceToProcess( __0x1834 );

				return true;
			}
			else
			{
				
				Log.Warning( "impl" );
			}

			return false;
		}

		
		public bool Save( string saveAsFileName = null, bool setModifiedFlag = true )
		{
			if( !OnSave( saveAsFileName ) )
				return false;

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The document was saved successfully." ) );

			if( setModifiedFlag )
				Modified = false;

			
			

			return true;
		}

		public virtual void EditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Save":
				if( !string.IsNullOrEmpty( RealFileName ) )
					context.Enabled = true;
				break;

			case "Save As":
				if( !string.IsNullOrEmpty( RealFileName ) )
					context.Enabled = CanSaveAs();
				break;

			case "Undo":
				context.Enabled = __0x1829 != null && __0x1829.GetTopUndoAction() != null;
				break;

			case "Redo":
				context.Enabled = __0x1829 != null && __0x1829.GetTopRedoAction() != null;
				break;

			case "Play":
				{
					var __0x1838 = LoadedResource?.ResultComponent;
					if( __0x1838 != null && RunSimulation.CheckTypeSupportedByPlayer( __0x1838.BaseType ) )
						context.Enabled = true;
				}
				break;

			case "Find Resource":
				context.Enabled = !string.IsNullOrEmpty( RealFileName );
				break;
			}
		}

		public virtual void EditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Save":
				Save( null );
				break;

			case "Save As":
				{
					if( !EditorUtility.ShowSaveFileDialog( Path.GetDirectoryName( RealFileName ), RealFileName, "All files (*.*)|*.*", out var saveAsFileName ) )
						return;

					if( string.Compare( RealFileName, saveAsFileName, true ) == 0 )
						Save();
					else
					{
						Save( saveAsFileName, false );
						EditorAPI.OpenFileAsDocument( saveAsFileName, true, true );
					}
				}
				break;

			case "Undo":
				if( __0x1829 != null )
				{
					if( __0x1829.DoUndo() )
						Modified = true;
				}
				break;

			case "Redo":
				if( __0x1829 != null )
				{
					if( __0x1829.DoRedo() )
						Modified = true;
				}
				break;

			case "Play":
				{
					var __0x1839 = LoadedResource?.ResultComponent;
					if( __0x1839 != null && RunSimulation.CheckTypeSupportedByPlayer( __0x1839.BaseType ) )
					{
						if( !EditorAPI.SaveDocuments() )
							return;
						
						
						
						
						

						
						var __0x1840 = VirtualPathUtility.GetRealPathByVirtual( LoadedResource.Owner.Name );
						RunSimulation.Run( __0x1840, RunSimulation.RunMethod.Player );
					}
				}
				break;

			case "Find Resource":
				if( !string.IsNullOrEmpty( RealFileName ) )
				{
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { RealFileName } );
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
				}
				break;
			}
		}

		private void __0x1855( WorkspaceControllerForForm __0x1861 )
		{
			var __0x1841 = this.ResultComponent;
			var __0x1842 = __0x1861.FindWorkspaceWindow( this );

			var __0x1843 = __0x1842?.WorkspaceController;

			bool __0x1844 = __0x1843 != null;
			bool __0x1845 = __0x1843 == null && __0x1841.EditorDocumentConfiguration != null;
			if( __0x1844 || __0x1845 )
			{
				__0x1841.EditorDocumentConfiguration = __0x1843?.SaveLayoutToString();
				
				
			}
		}

		public delegate void ShowTitleContextMenuDelegate( DocumentInstance __0x1862, IDocumentWindow __0x1863, KryptonContextMenuItems __0x1864 );
		public static event ShowTitleContextMenuDelegate ShowTitleContextMenu;

		internal protected virtual void OnShowTitleContextMenu( IDocumentWindow caller, KryptonContextMenuItems items )
		{
			ShowTitleContextMenu?.Invoke( this, caller, items );

			if( !string.IsNullOrEmpty( RealFileName ) )
			{
				
				
				

				
				{
					items.Items.Add( new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Find in Resources window" ), ( __0x1865, __0x1866 ) =>
					{
						EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { RealFileName } );
						EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
					} ) );
				}

				

				

				
				

				

				

				
				
				
				

				
				
				
				

				
				
				
				

				
				
				
			}
		}

		public void CommitUndoAction( UndoSystem.Action action, bool setModified = true )
		{
			UndoSystem?.CommitAction( action );
			if( setModified )
				Modified = true;
		}

		private void __0x1856( object __0x1867, EventArgs __0x1868 )
		{
			if( !Destroyed )
			{
				
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() + 3.1 );
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() + 0.5 );
				EditorUpdateWhenDocumentModified_NeedUpdate( EngineApp.GetSystemTime() );
			}
		}

		
		
		
		
		

		public void EditorUpdateWhenDocumentModified_NeedUpdate( double updateTime )
		{
			
			again:;
			for( int __0x1846 = 0; __0x1846 < __0x1831.Count; __0x1846++ )
			{
				var __0x1847 = __0x1831[ __0x1846 ];
				if( __0x1847 < updateTime )
				{
					__0x1831.RemoveAt( __0x1846 );
					goto again;
				}
			}

			
			__0x1831.Add( updateTime );
		}

		public void EditorUpdateWhenDocumentModified_Tick()
		{
			bool __0x1848 = false;

			var __0x1849 = EngineApp.GetSystemTime();

			again:;
			for( int __0x1850 = 0; __0x1850 < __0x1831.Count; __0x1850++ )
			{
				var __0x1851 = __0x1831[ __0x1850 ];
				if( __0x1849 >= __0x1851 )
				{
					__0x1831.RemoveAt( __0x1850 );
					__0x1848 = true;
					goto again;
				}
			}

			
			if( __0x1848 )
			{
				if( __0x1826 != null && __0x1826.ResultComponent != null )
				{
					var __0x1852 = __0x1826.ResultComponent;

					var __0x1853 = __0x1852 as IComponent_EditorUpdateWhenDocumentModified;
					if( __0x1853 != null )
						__0x1853.EditorUpdateWhenDocumentModified();
					foreach( var __0x1854 in __0x1852.GetComponents<IComponent_EditorUpdateWhenDocumentModified>( checkChildren: true ) )
						__0x1854.EditorUpdateWhenDocumentModified();
				}
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a docking window of the document.
	/// </summary>
	public partial class DocumentWindow : DockWindow, IDocumentWindow
	{
		DocumentInstance __0x1869;
		object __0x1870;
		bool __0x1871;
		Dictionary<string, object> __0x1872 = new Dictionary<string, object>();

		bool __0x1873;

		object[] __0x1874 = new object[ 0 ];
		ESet<object> __0x1875 = new ESet<object>();

		

		[Browsable( false )]
		public DocumentInstance Document
		{
			get { return __0x1869; }
		}

		[Browsable( false )]
		public object ObjectOfWindow
		{
			get { return __0x1870; }
		}

		[Browsable( false )]
		public bool OpenAsSettings 
		{
			get { return __0x1871; }
		}

		[Browsable( false )]
		public Dictionary<string, object> WindowTypeSpecificOptions
		{
			get { return __0x1872; }
		}

		public bool IsDocumentSaved()
		{
			return __0x1869 == null || !__0x1869.Modified;
		}

		[Browsable( false )]
		public object[] SelectedObjects
		{
			get { return __0x1874; }
		}

		[Browsable( false )]
		public ESet<object> SelectedObjectsSet
		{
			get { return __0x1875; }
		}

		/// <summary>
		/// Main/root window in workspace.
		/// Only document window can be main. not SettingsWindow.
		/// </summary>
		[Browsable( false )]
		internal bool IsMainWindowInWorkspace
		{
			get
			{
				if( __0x1871 )
					return false;

				if( ObjectOfWindow != null )
					return ObjectOfWindow == __0x1869.ResultObject;
				else
					return true; 
			}
		}

		[Browsable( false )]
		public bool IsWindowInWorkspace
		{
			get { return __0x1873; }
			set
			{
				if( __0x1873 == value )
					return;
				__0x1873 = value;

				UpdateWindowTitle();
			}
		}

		public DocumentWindow()
		{
			__0x1947();
		}

		public virtual void InitDocumentWindow( DocumentInstance document, object objectOfWindow, bool openAsSettings, Dictionary<string, object> windowTypeSpecificOptions )
		{
			this.__0x1869 = document;
			this.__0x1870 = objectOfWindow;
			this.__0x1871 = openAsSettings;
			if( windowTypeSpecificOptions != null )
				this.__0x1872 = windowTypeSpecificOptions;
		}

		protected override string GetResultWindowTitle()
		{
			if( __0x1869 != null )
			{
				var __0x1876 = "";

				if( IsMainWindowInWorkspace && !string.IsNullOrEmpty( __0x1869.RealFileName ) )
					__0x1876 = Path.GetFileName( __0x1869.RealFileName );
				else if( ObjectOfWindow != null )
					__0x1876 = ObjectOfWindow.ToString();

				if( !string.IsNullOrEmpty( __0x1876 ) )
				{
					if( IsWindowInWorkspace )
					{
						if( ObjectOfWindowIsDeleted )
							__0x1876 += " (Deleted)";
						else if( IsMainWindowInWorkspace )
							__0x1876 = "'Root object'";
					}
					else
					{
						if( __0x1869 != null && __0x1869.Modified )
							__0x1876 += "*";
					}

					return __0x1876;
				}
			}

			return base.GetResultWindowTitle();
		}

		private void __0x1938( object __0x1948, EventArgs __0x1949 )
		{
			if( IsDesignerHosted )
				return;

			__0x1930.Start();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();

			if( IsDesignerHosted )
				return;

			
			if( IsMainWindowInWorkspace )
				__0x1869.Destroy();
		}

		internal protected override void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
			Document.OnShowTitleContextMenu( this, items );
		}

		public bool SaveDocument()
		{
			return __0x1869.Save();
		}

		public bool IsObjectSelected( object obj )
		{
			return SelectedObjectsSet.Contains( obj );
		}

		static bool __0x1939( ICollection<object> __0x1950, ICollection<object> __0x1951 )
		{
			if( __0x1950.Count != __0x1951.Count )
				return false;

			var __0x1877 = __0x1950.GetEnumerator();
			var __0x1878 = __0x1951.GetEnumerator();
			while( __0x1877.MoveNext() )
			{
				__0x1878.MoveNext();
				if( !ReferenceEquals( __0x1877.Current, __0x1878.Current ) )
					return false;
			}
			return true;
		}

		public delegate void SelectedObjectsChangedDelegate( DocumentWindow __0x1952, object[] __0x1953 );
		public event SelectedObjectsChangedDelegate SelectedObjectsChanged;

		public void SelectObjects( ICollection<object> objects, bool updateForeachDocumentWindowContainers = true, bool updateSettingsWindowSelectObjects = true, bool forceUpdate = false )
		{
			if( objects == null )
				objects = new object[ 0 ];

			if( !__0x1939( objects, SelectedObjects ) || forceUpdate )
			{
				var __0x1879 = SelectedObjects;

				__0x1874 = new object[ objects.Count ];
				objects.CopyTo( __0x1874, 0 );
				__0x1875 = new ESet<object>( __0x1874 );
				

				
				if( updateForeachDocumentWindowContainers )
				{
					var __0x1880 = new List<ForeachDocumentWindowContainer>();

					foreach( var __0x1931 in EditorForm.Instance.WorkspaceController.GetDockWindows() )
					{
						var __0x1881 = __0x1931 as ForeachDocumentWindowContainer;
						if( __0x1881 != null )
							__0x1880.Add( __0x1881 );
					}

					foreach( var __0x1932 in __0x1880 )
						__0x1932.OnDocumentWindowSelectedObjectsChangedByUser( this );
				}

				
				if( updateSettingsWindowSelectObjects )
					SettingsWindowSelectObjects();

				SelectedObjectsChanged?.Invoke( this, __0x1879 );
			}
		}

		protected virtual void OnTimer10MsTick()
		{
		}

		private void __0x1940( object __0x1954, EventArgs __0x1955 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			{
				var __0x1882 = ObjectOfWindow as Component;
				if( __0x1882 != null && __0x1882.HierarchyController != null )
					__0x1882.HierarchyController.ProcessDelayedOperations();
			}

			OnTimer10MsTick();
		}

		protected virtual bool CanUpdateSettingsWindowsSelectedObjects()
		{
			return true;
		}

		protected virtual object OnGetSelectObjectWhenNoSelectedObjects()
		{
			return ObjectOfWindow;
		}

		public void SettingsWindowSelectObjects()
		{
			if( CanUpdateSettingsWindowsSelectedObjects() )
			{
				var __0x1883 = SelectedObjects;

				if( __0x1883.Length == 0 )
				{
					var __0x1884 = OnGetSelectObjectWhenNoSelectedObjects();
					if( __0x1884 != null )
						__0x1883 = new object[] { __0x1884 };
				}

				if( __0x1883.Length == 0 && ObjectOfWindow != null )
					__0x1883 = new object[] { ObjectOfWindow };

				SettingsWindow.Instance?.SelectObjects( this, __0x1883 );
			}
		}

		public virtual void EditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Cut":
				if( CanCut() )
					context.Enabled = true;
				break;

			case "Copy":
				if( CanCopy() )
					context.Enabled = true;
				break;

			case "Paste":
				if( CanPaste( out _ ) )
					context.Enabled = true;
				break;

			case "Duplicate":
				if( CanCloneObjects( out _ ) )
					context.Enabled = true;
				break;

			case "Delete":
				if( CanDeleteObjects( out _ ) )
					context.Enabled = true;
				break;

			case "Rename":
				if( CanRename( out _ ) )
					context.Enabled = true;
				break;
			}
		}

		public virtual void EditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Cut":
				Cut();
				break;

			case "Copy":
				Copy();
				break;

			case "Paste":
				Paste();
				break;

			case "Duplicate":
				TryCloneObjects();
				break;

			case "Delete":
				TryDeleteObjects();
				break;

			case "Rename":
				TryRename();
				break;
			}
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			if( SelectedObjects.Length != 0 )
				return new ObjectsInFocus( this, SelectedObjects );
			return base.GetObjectsInFocus();
		}

		[Browsable( false )]
		public virtual bool ObjectOfWindowIsDeleted
		{
			get
			{
				var __0x1885 = ObjectOfWindow as Component;
				if( __0x1885 != null && __0x1869 != null && ObjectOfWindow != __0x1869.ResultComponent &&
					__0x1869.ResultComponent != null && !__0x1885.GetAllParents( false ).Contains( __0x1869.ResultComponent ) )
				{
					return true;
				}

				return false;
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( keyData == ( Keys.Control | Keys.F4 ) )
			{
				
				if( IsMainWindowInWorkspace )
				{
					var __0x1886 = EditorForm.Instance.WorkspaceController.FindWorkspaceWindow( this );
					if( __0x1886 != null )
					{
						__0x1886.Close();
						return true;
					}
				}

				Close();
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		private void __0x1941( object __0x1956, KeyEventArgs __0x1957 )
		{
			if( GetType() == typeof( DocumentWindow ) && EditorAPI.ProcessShortcuts( __0x1957.KeyCode, true ) )
			{
				__0x1957.Handled = true;
				return;
			}
		}

		string __0x1942( string __0x1958 )
		{
			return EditorContextMenuWinForms.Translate( __0x1958 );
		}

		void __0x1943()
		{
			var __0x1887 = new List<KryptonContextMenuItemBase>();

			Component __0x1888 = ObjectOfWindow as Component;

			
			{
				var __0x1889 = new KryptonContextMenuItem( __0x1942( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x1959, EventArgs __0x1960 )
				{
					EditorAPI.OpenDocumentWindowForObject( Document, __0x1888 );
				} );
				__0x1889.Enabled = __0x1888 != null && EditorAPI.IsDocumentObjectSupport( __0x1888 );
				__0x1887.Add( __0x1889 );
			}

			
			{
				var __0x1890 = new KryptonContextMenuItem( __0x1942( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x1961, EventArgs __0x1962 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x1887.Add( __0x1890 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x1891 = new KryptonContextMenuItem( __0x1942( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x1963, EventArgs __0x1964 )
				{
					var __0x1892 = __0x1888 ?? ObjectOfWindow;
					bool __0x1893 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x1892, __0x1893 );
				} );
				__0x1891.Enabled = __0x1888 != null || SelectedObjects.Length == 0;
				__0x1887.Add( __0x1891 );
			}

			__0x1887.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x1887, __0x1944( out _ ), delegate ( Metadata.TypeInfo __0x1965 )
				{
					__0x1945( __0x1965 );
				} );
			}

			
			__0x1887.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x1894 = new KryptonContextMenuItem( __0x1942( "Cut" ), EditorResourcesCache.Cut,
					delegate ( object __0x1966, EventArgs __0x1967 )
					{
						
					} );
				__0x1894.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x1894.Enabled = false;
				__0x1887.Add( __0x1894 );
			}

			
			{
				var __0x1895 = new KryptonContextMenuItem( __0x1942( "Copy" ), EditorResourcesCache.Copy,
					delegate ( object __0x1968, EventArgs __0x1969 )
					{
						Copy();
					} );
				__0x1895.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x1895.Enabled = CanCopy();
				__0x1887.Add( __0x1895 );
			}

			
			{
				var __0x1896 = new KryptonContextMenuItem( __0x1942( "Paste" ), EditorResourcesCache.Paste,
					delegate ( object __0x1970, EventArgs __0x1971 )
					{
						Paste();
					} );
				__0x1896.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x1896.Enabled = CanPaste( out _ );
				__0x1887.Add( __0x1896 );
			}

			
			{
				var __0x1897 = new KryptonContextMenuItem( __0x1942( "Duplicate" ), EditorResourcesCache.Clone,
					delegate ( object __0x1972, EventArgs __0x1973 )
					{
						
					} );
				__0x1897.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x1897.Enabled = false;
				__0x1887.Add( __0x1897 );
			}

			
			__0x1887.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x1898 = new KryptonContextMenuItem( __0x1942( "Delete" ), EditorResourcesCache.Delete,
					delegate ( object __0x1974, EventArgs __0x1975 )
					{
						
					} );
				__0x1898.Enabled = false;
				__0x1887.Add( __0x1898 );
			}

			
			{
				var __0x1899 = new KryptonContextMenuItem( __0x1942( "Rename" ), null, delegate ( object __0x1976, EventArgs __0x1977 )
				{
					EditorUtility.ShowRenameComponentDialog( __0x1888 );
				} );
				__0x1899.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				
				__0x1899.Enabled = __0x1888 != null;
				__0x1887.Add( __0x1899 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x1887 );

			EditorContextMenuWinForms.Show( __0x1887, this );
		}

		bool __0x1944( out List<Component> __0x1978 )
		{
			__0x1978 = new List<Component>();

			var __0x1900 = ObjectOfWindow as Component;
			if( __0x1900 != null )
				__0x1978.Add( __0x1900 );

			return true;
		}

		void __0x1945( Metadata.TypeInfo __0x1979 )
		{
			if( !__0x1944( out List<Component> parentsForNewObjects ) )
				return;

			var __0x1901 = new NewObjectWindow.CreationDataClass();
			__0x1901.initDocumentWindow = this;
			__0x1901.initParentObjects = new List<object>();
			__0x1901.initParentObjects.AddRange( parentsForNewObjects );

			
			

			__0x1901.initLockType = __0x1979;
			__0x1901.initSupportAutoCreateAndClose = __0x1979 != null;

			

			

			EditorAPI.OpenNewObjectWindow( __0x1901 );
		}

		private void __0x1946( object __0x1980, MouseEventArgs __0x1981 )
		{
			
			if( GetType() == typeof( DocumentWindow ) && __0x1981.Button == MouseButtons.Right )
				__0x1943();
		}

		public virtual bool CanCut()
		{
			if( SelectedObjects.Length != 0 )
				return SelectedObjects.All( __0x1982 => __0x1982 is Component && ( (Component)__0x1982 ).Parent != null );
			return false;
		}

		public virtual bool CutCopy( bool cut )
		{
			if( !CanCut() )
				return false;
			var __0x1902 = new ObjectCutCopyPasteData( this, cut, (object[])SelectedObjects.Clone() );
			ClipboardManager.CopyToClipboard( __0x1902 );
			return true;
		}

		public bool Cut()
		{
			return CutCopy( true );
		}

		public virtual bool CanCopy()
		{
			if( SelectedObjects.Length != 0 )
				return SelectedObjects.All( __0x1983 => __0x1983 is Component );
			return false;
		}

		public bool Copy()
		{
			return CutCopy( false );
		}

		
		
		
		

		
		
		
		
		
		
		
		

		public virtual bool CanPaste( out Component destinationParent )
		{
			if( ClipboardManager.CheckAvailableInClipboard<ObjectCutCopyPasteData>() )
			{
				if( SelectedObjects.Length == 0 )
				{
					var __0x1903 = ObjectOfWindow as Component;
					if( __0x1903 != null )
					{
						destinationParent = __0x1903;
						return true;
					}
				}
				else if( SelectedObjects.Length == 1 )
				{
					var __0x1904 = SelectedObjects[ 0 ] as Component;
					if( __0x1904 != null )
					{
						destinationParent = __0x1904;
						return true;
					}
				}
			}

			destinationParent = null;
			return false;
		}

		
		
		
		
		
		
		
		

		
		
		

		public virtual bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x1905 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x1905 != null )
			{
				var __0x1906 = new List<Component>();
				foreach( var __0x1933 in __0x1905.objects )
				{
					var __0x1907 = __0x1933 as Component;
					if( __0x1907 != null )
						__0x1906.Add( __0x1907 );
				}

				

				var __0x1908 = new List<Component>();
				Vector3 __0x1909 = Vector3.Zero;

				for( int __0x1910 = 0; __0x1910 < __0x1906.Count; __0x1910++ )
				{
					var __0x1911 = __0x1906[ __0x1910 ];

					var __0x1912 = __0x1911.Clone();
					if( destinationParent.GetComponent( __0x1911.Name ) == null )
						__0x1912.Name = __0x1911.Name;
					else
						__0x1912.Name = destinationParent.Components.GetUniqueName( __0x1911.Name, true, 2 );
					destinationParent.AddComponent( __0x1912 );

					__0x1908.Add( __0x1912 );
				}

				if( __0x1905.cut )
				{
					
					if( __0x1905.documentWindow.Document != Document )
					{
						
						{
							var __0x1913 = new UndoActionComponentCreateDelete( __0x1905.documentWindow.Document, __0x1906, false );
							__0x1905.documentWindow.Document.UndoSystem.CommitAction( __0x1913 );
							__0x1905.documentWindow.Document.Modified = true;
						}
						{
							var __0x1914 = new UndoActionComponentCreateDelete( Document, __0x1908, true );
							Document.UndoSystem.CommitAction( __0x1914 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x1915 = new UndoMultiAction();
						__0x1915.AddAction( new UndoActionComponentCreateDelete( Document, __0x1906, false ) );
						__0x1915.AddAction( new UndoActionComponentCreateDelete( Document, __0x1908, true ) );
						Document.UndoSystem.CommitAction( __0x1915 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x1916 = new UndoActionComponentCreateDelete( Document, __0x1908, true );
					Document.UndoSystem.CommitAction( __0x1916 );
					Document.Modified = true;
				}
			}

			return true;
		}

		public virtual bool CanCloneObjects( out List<Component> resultObjectsToClone )
		{
			resultObjectsToClone = new List<Component>( SelectedObjects.Length );

			foreach( var __0x1934 in SelectedObjects )
			{
				var __0x1917 = __0x1934 as Component;
				if( __0x1917 != null && __0x1917.Parent != null )
					resultObjectsToClone.Add( __0x1917 );
			}

			
			resultObjectsToClone = ComponentUtility.GetComponentsWithoutChildren( resultObjectsToClone );

			if( resultObjectsToClone.Count == 0 )
				return false;

			return true;
		}

		public static void AddClonedSelectableChildrenToList( List<Component> list, Component component )
		{
			foreach( var __0x1935 in component.GetComponents() )
			{
				if( __0x1935.DisplayInEditor && __0x1935.TypeSettingsIsPublic() && EditorUtility.PerformComponentDisplayInEditorFilter( __0x1935 ) )
				{
					
					if( __0x1935 is Component_CurveInSpacePoint )
					{
						list.Add( __0x1935 );

						AddClonedSelectableChildrenToList( list, __0x1935 );
					}
				}
			}
		}

		public virtual void TryCloneObjects()
		{
			if( !CanCloneObjects( out var objectsToClone ) )
				return;

			var __0x1918 = new List<Component>();
			foreach( var __0x1936 in objectsToClone )
			{
				var __0x1919 = EditorUtility.CloneComponent( __0x1936 );
				__0x1918.Add( __0x1919 );
				AddClonedSelectableChildrenToList( __0x1918, __0x1919 );
			}

			
			{
				var __0x1920 = new List<object>();
				
				__0x1920.AddRange( __0x1918 );

				SelectObjects( __0x1920 );
			}

			if( __0x1918.Count == 0 )
				return;

			
			var __0x1921 = new UndoActionComponentCreateDelete( Document, __0x1918, true );
			Document.UndoSystem.CommitAction( __0x1921 );
			Document.Modified = true;

			
			EditorUtility.ShowScreenNotificationObjectsCloned( __0x1918.Count );
		}

		public virtual bool CanDeleteObjects( out List<object> resultObjectsToDelete )
		{
			var __0x1922 = new List<Component>();

			foreach( var __0x1937 in SelectedObjects )
			{
				var __0x1923 = __0x1937 as Component;
				if( __0x1923 != null && __0x1923.Parent != null )
					__0x1922.Add( __0x1923 );
			}

			
			resultObjectsToDelete = ComponentUtility.GetComponentsWithoutChildren( __0x1922 ).Cast<object>().ToList();

			if( resultObjectsToDelete.Count == 0 )
				return false;

			return true;
		}

		public virtual bool TryDeleteObjects()
		{
			if( !CanDeleteObjects( out var objectsToDelete ) )
				return false;

			string __0x1924;
			if( objectsToDelete.Count == 1 )
			{
				string __0x1925 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete \'{0}\'?" );
				var __0x1926 = objectsToDelete[ 0 ].ToString();
				__0x1924 = string.Format( __0x1925, __0x1926 );
			}
			else
			{
				string __0x1927 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete selected objects?" );
				__0x1924 = string.Format( __0x1927, objectsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x1924, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return false;

			
			
			SelectObjects( null );

			
			var __0x1928 = new UndoActionComponentCreateDelete( Document, objectsToDelete.Cast<Component>().ToArray(), false );
			Document.UndoSystem.CommitAction( __0x1928 );
			Document.Modified = true;

			return true;
		}

		public virtual bool CanRename( out Component component )
		{
			component = null;

			
			if( SelectedObjects.Length == 1 )
				component = SelectedObjects[ 0 ] as Component;

			return component != null;
		}

		public virtual void TryRename()
		{
			if( CanRename( out var component ) )
				EditorUtility.ShowRenameComponentDialog( component );
		}
	}
}
namespace NeoAxis.Editor
{
	partial class DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x1929 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x1947()
		{
			this.__0x1929 = new System.ComponentModel.Container();
			this.__0x1930 = new System.Windows.Forms.Timer(this.__0x1929);
			this.SuspendLayout();
			
			
			
			this.__0x1930.Interval = 10;
			this.__0x1930.Tick += new System.EventHandler(this.__0x1940);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "DocumentWindow";
			this.Load += new System.EventHandler(this.__0x1938);
			this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x1941);
			this.MouseUp += new System.Windows.Forms.MouseEventHandler(this.__0x1946);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x1930;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a document window with a viewport.
	/// </summary>
	public partial class DocumentWindowWithViewport : DocumentWindow
	{
		
		Component_Scene __0x1984;
		bool __0x1985;

		
		
		

		
		bool __0x1986;
		Vector2 __0x1987;
		bool __0x1988;

		
		class __0x2165
		{
			public string text;
			public ColorValue color;
			public double timeRemaining;
		}
		List<__0x2165> __0x1989 = new List<__0x2165>();

		bool __0x1990;

		
		

		
		
		
		

		float __0x1991 = 1;

		string __0x1992 = "";
		WorkareaModeClass __0x1993;

		ObjectCreationMode __0x1994;

		

		public abstract class WorkareaModeClass
		{
			DocumentWindowWithViewport __0x1995;

			

			protected WorkareaModeClass( DocumentWindowWithViewport documentWindow )
			{
				this.__0x1995 = documentWindow;
			}

			public DocumentWindowWithViewport DocumentWindow
			{
				get { return __0x1995; }
			}

			public virtual bool AllowControlCamera
			{
				get { return true; }
			}

			public virtual bool AllowSelectObjects
			{
				get { return false; }
			}

			public virtual bool DisplaySelectedObjects
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByDrop
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByClick
			{
				get { return AllowSelectObjects; }
			}

			public virtual bool AllowCreateObjectsByBrush
			{
				get { return AllowSelectObjects; }
			}

			protected virtual void OnDestroy() { }
			public delegate void DestroyDelegate( WorkareaModeClass __0x2109 );
			public event DestroyDelegate Destroy;
			internal void PerformDestroy()
			{
				OnDestroy();
				Destroy?.Invoke( this );
			}

			protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines ) { }
			public delegate void GetTextInfoRightBottomCornerDelegate( WorkareaModeClass __0x2110, List<string> __0x2111 );
			public event GetTextInfoRightBottomCornerDelegate GetTextInfoRightBottomCorner;
			internal void PerformGetTextInfoRightBottomCorner( List<string> lines )
			{
				OnGetTextInfoRightBottomCorner( lines );
				GetTextInfoRightBottomCorner?.Invoke( this, lines );
			}

			protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines ) { }
			public delegate void GetTextInfoCenterBottomCornerDelegate( WorkareaModeClass __0x2112, List<string> __0x2113 );
			public event GetTextInfoCenterBottomCornerDelegate GetTextInfoCenterBottomCorner;
			internal void PerformGetTextInfoCenterBottomCorner( List<string> lines )
			{
				OnGetTextInfoCenterBottomCorner( lines );
				GetTextInfoCenterBottomCorner?.Invoke( this, lines );
			}

			protected virtual bool OnKeyDown( Viewport viewport, KeyEvent e ) { return false; }
			public delegate void KeyDownUpDelegate( WorkareaModeClass __0x2114, Viewport __0x2115, KeyEvent __0x2116, ref bool __0x2117 );
			public event KeyDownUpDelegate KeyDown;
			internal bool PerformKeyDown( Viewport viewport, KeyEvent e )
			{
				var __0x1996 = OnKeyDown( viewport, e );
				if( !__0x1996 )
					KeyDown?.Invoke( this, viewport, e, ref __0x1996 );
				return __0x1996;
			}

			protected virtual bool OnKeyPress( Viewport viewport, KeyPressEvent e ) { return false; }
			public delegate void KeyPressDelegate( WorkareaModeClass __0x2118, Viewport __0x2119, KeyPressEvent __0x2120, ref bool __0x2121 );
			public event KeyPressDelegate KeyPress;
			internal bool PerformKeyPress( Viewport viewport, KeyPressEvent e )
			{
				var __0x1997 = OnKeyPress( viewport, e );
				if( !__0x1997 )
					KeyPress?.Invoke( this, viewport, e, ref __0x1997 );
				return __0x1997;
			}

			protected virtual bool OnKeyUp( Viewport viewport, KeyEvent e ) { return false; }
			public event KeyDownUpDelegate KeyUp;
			internal bool PerformKeyUp( Viewport viewport, KeyEvent e )
			{
				var __0x1998 = OnKeyUp( viewport, e );
				if( !__0x1998 )
					KeyUp?.Invoke( this, viewport, e, ref __0x1998 );
				return __0x1998;
			}

			protected virtual bool OnMouseDown( Viewport viewport, EMouseButtons button ) { return false; }
			public delegate void MouseClickDelegate( WorkareaModeClass __0x2122, Viewport __0x2123, EMouseButtons __0x2124, ref bool __0x2125 );
			public event MouseClickDelegate MouseDown;
			internal bool PerformMouseDown( Viewport viewport, EMouseButtons button )
			{
				var __0x1999 = OnMouseDown( viewport, button );
				if( !__0x1999 )
					MouseDown?.Invoke( this, viewport, button, ref __0x1999 );
				return __0x1999;
			}

			protected virtual bool OnMouseUp( Viewport viewport, EMouseButtons button ) { return false; }
			public event MouseClickDelegate MouseUp;
			internal bool PerformMouseUp( Viewport viewport, EMouseButtons button )
			{
				var __0x2000 = OnMouseUp( viewport, button );
				if( !__0x2000 )
					MouseUp?.Invoke( this, viewport, button, ref __0x2000 );
				return __0x2000;
			}

			protected virtual bool OnMouseDoubleClick( Viewport viewport, EMouseButtons button ) { return false; }
			public event MouseClickDelegate MouseDoubleClick;
			internal bool PerformMouseDoubleClick( Viewport viewport, EMouseButtons button )
			{
				var __0x2001 = OnMouseDoubleClick( viewport, button );
				if( !__0x2001 )
					MouseDoubleClick?.Invoke( this, viewport, button, ref __0x2001 );
				return __0x2001;
			}

			protected virtual void OnMouseMove( Viewport viewport, Vector2 mouse ) { }
			public delegate void MouseMoveDelegate( WorkareaModeClass __0x2126, Viewport __0x2127, Vector2 __0x2128 );
			public event MouseMoveDelegate MouseMove;
			internal void PerformMouseMove( Viewport viewport, Vector2 mouse )
			{
				OnMouseMove( viewport, mouse );
				MouseMove?.Invoke( this, viewport, mouse );
			}

			protected virtual bool OnMouseRelativeModeChanged( Viewport viewport ) { return false; }
			public delegate void MouseRelativeModeChangedDelegate( WorkareaModeClass __0x2129, Viewport __0x2130, ref bool __0x2131 );
			public event MouseRelativeModeChangedDelegate MouseRelativeModeChanged;
			internal bool PerformMouseRelativeModeChanged( Viewport viewport )
			{
				var __0x2002 = OnMouseRelativeModeChanged( viewport );
				if( !__0x2002 )
					MouseRelativeModeChanged?.Invoke( this, viewport, ref __0x2002 );
				return __0x2002;
			}

			protected virtual bool OnMouseWheel( Viewport viewport, int delta ) { return false; }
			public delegate void MouseWheelDelegate( WorkareaModeClass __0x2132, Viewport __0x2133, int __0x2134, ref bool __0x2135 );
			public event MouseWheelDelegate MouseWheel;
			internal bool PerformMouseWheel( Viewport viewport, int delta )
			{
				var __0x2003 = OnMouseWheel( viewport, delta );
				if( !__0x2003 )
					MouseWheel?.Invoke( this, viewport, delta, ref __0x2003 );
				return __0x2003;
			}

			protected virtual bool OnJoystickEvent( Viewport viewport, JoystickInputEvent e ) { return false; }
			public delegate void JoystickEventDelegate( WorkareaModeClass __0x2136, Viewport __0x2137, JoystickInputEvent __0x2138, ref bool __0x2139 );
			public event JoystickEventDelegate JoystickEvent;
			internal bool PerformJoystickEvent( Viewport viewport, JoystickInputEvent e )
			{
				var __0x2004 = OnJoystickEvent( viewport, e );
				if( !__0x2004 )
					JoystickEvent?.Invoke( this, viewport, e, ref __0x2004 );
				return __0x2004;
			}

			protected virtual bool OnSpecialInputDeviceEvent( Viewport viewport, InputEvent e ) { return false; }
			public delegate void SpecialInputDeviceEventDelegate( WorkareaModeClass __0x2140, Viewport __0x2141, InputEvent __0x2142, ref bool __0x2143 );
			public event SpecialInputDeviceEventDelegate SpecialInputDeviceEvent;
			internal bool PerformSpecialInputDeviceEvent( Viewport viewport, InputEvent e )
			{
				var __0x2005 = OnSpecialInputDeviceEvent( viewport, e );
				if( !__0x2005 )
					SpecialInputDeviceEvent?.Invoke( this, viewport, e, ref __0x2005 );
				return __0x2005;
			}

			protected virtual void OnTick( Viewport viewport, double delta ) { }
			public delegate void TickDelegate( WorkareaModeClass __0x2144, Viewport __0x2145, double __0x2146 );
			public event TickDelegate Tick;
			internal void PerformTick( Viewport viewport, double delta )
			{
				OnTick( viewport, delta );
				Tick?.Invoke( this, viewport, delta );
			}

			protected virtual void OnUpdateBegin( Viewport viewport ) { }
			public delegate void UpdateBeginDelegate( WorkareaModeClass __0x2147, Viewport __0x2148 );
			public event UpdateBeginDelegate UpdateBegin;
			internal void PerformUpdateBegin( Viewport viewport )
			{
				OnUpdateBegin( viewport );
				UpdateBegin?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context ) { }
			public delegate void UpdateGetObjectInSceneRenderingContextDelegate( WorkareaModeClass __0x2149, Viewport __0x2150, ref Component_ObjectInSpace.RenderingContext __0x2151 );
			public event UpdateGetObjectInSceneRenderingContextDelegate UpdateGetObjectInSceneRenderingContext;
			internal void PerformUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context )
			{
				OnUpdateGetObjectInSceneRenderingContext( viewport, ref context );
				UpdateGetObjectInSceneRenderingContext?.Invoke( this, viewport, ref context );
			}

			protected virtual void OnUpdateBeforeOutput( Viewport viewport ) { }
			public delegate void UpdateBeforeOutputDelegate( WorkareaModeClass __0x2152, Viewport __0x2153 );
			public event UpdateBeforeOutputDelegate UpdateBeforeOutput;
			internal void PerformUpdateBeforeOutput( Viewport viewport )
			{
				OnUpdateBeforeOutput( viewport );
				UpdateBeforeOutput?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateBeforeOutput2( Viewport viewport ) { }
			public delegate void UpdateBeforeOutput2Delegate( WorkareaModeClass __0x2154, Viewport __0x2155 );
			public event UpdateBeforeOutput2Delegate UpdateBeforeOutput2;
			internal void PerformUpdateBeforeOutput2( Viewport viewport )
			{
				OnUpdateBeforeOutput2( viewport );
				UpdateBeforeOutput2?.Invoke( this, viewport );
			}

			protected virtual void OnUpdateEnd( Viewport viewport ) { }
			public delegate void UpdateEndDelegate( WorkareaModeClass __0x2156, Viewport __0x2157 );
			public event UpdateEndDelegate UpdateEnd;
			internal void PerformUpdateEnd( Viewport viewport )
			{
				OnUpdateEnd( viewport );
				UpdateEnd?.Invoke( this, viewport );
			}

			protected virtual void OnViewportUpdateGetCameraSettings( ref Component_Camera camera ) { }
			public delegate void ViewportUpdateGetCameraSettingsDelegate( WorkareaModeClass __0x2158, ref Component_Camera __0x2159 );
			public event ViewportUpdateGetCameraSettingsDelegate ViewportUpdateGetCameraSettings;
			internal void PerformViewportUpdateGetCameraSettings( ref Component_Camera camera )
			{
				OnViewportUpdateGetCameraSettings( ref camera );
				ViewportUpdateGetCameraSettings?.Invoke( this, ref camera );
			}

			
			protected virtual void OnEditorActionGetState( EditorAction.GetStateContext context ) { }
			public delegate void EditorActionGetStateDelegate( WorkareaModeClass __0x2160, EditorAction.GetStateContext __0x2161 );
			public event EditorActionGetStateDelegate EditorActionGetState;
			internal void PerformEditorActionGetState( EditorAction.GetStateContext context )
			{
				OnEditorActionGetState( context );
				EditorActionGetState?.Invoke( this, context );
			}

			
			protected virtual void OnEditorActionClick( EditorAction.ClickContext context ) { }
			public delegate void EditorActionClickDelegate( WorkareaModeClass __0x2162, EditorAction.ClickContext __0x2163 );
			public event EditorActionClickDelegate EditorActionClick;
			internal void PerformEditorActionClick( EditorAction.ClickContext context )
			{
				OnEditorActionClick( context );
				EditorActionClick?.Invoke( this, context );
			}
		}

		

		public DocumentWindowWithViewport()
		{
			__0x2108();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			__0x2101.ViewportCreated += ViewportControl_ViewportCreated;
			__0x2101.ViewportDestroyed += ViewportControl_ViewportDestroyed;

			__0x1991 = EditorAPI.DPI > 96 ? 2 : 1;
		}

		[Browsable( false )]
		public EngineViewportControl ViewportControl
		{
			get { return __0x2101; }
		}

		[Browsable( false )]
		public Viewport Viewport
		{
			get { return ViewportControl?.Viewport; }
		}

		protected virtual void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			Viewport __0x2006 = sender.Viewport;

			__0x2006.KeyDown += Viewport_KeyDown;
			__0x2006.KeyPress += Viewport_KeyPress;
			__0x2006.KeyUp += Viewport_KeyUp;
			__0x2006.MouseDown += Viewport_MouseDown;
			__0x2006.MouseUp += Viewport_MouseUp;
			__0x2006.MouseDoubleClick += Viewport_MouseDoubleClick;
			__0x2006.MouseMove += Viewport_MouseMove;
			__0x2006.MouseRelativeModeChanged += Viewport_MouseRelativeModeChanged;
			__0x2006.MouseWheel += Viewport_MouseWheel;
			__0x2006.JoystickEvent += Viewport_JoystickEvent;
			__0x2006.SpecialInputDeviceEvent += Viewport_SpecialInputDeviceEvent;
			__0x2006.Tick += Viewport_Tick;
			__0x2006.UpdateBegin += Viewport_UpdateBegin;
			__0x2006.UpdateGetObjectInSceneRenderingContext += Viewport_UpdateGetObjectInSceneRenderingContext;
			__0x2006.UpdateBeforeOutput += Viewport_UpdateBeforeOutput;
			__0x2006.UpdateBeforeOutput += Viewport_UpdateBeforeOutput2;
			__0x2006.UpdateEnd += Viewport_UpdateEnd;

			
			ViewportControl.Viewport.AttachedScene = __0x1984;
		}

		protected virtual void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformKeyDown( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformKeyDown( viewport, e ) )
			{
				handled = true;
				return;
			}

			if( EditorAPI.ProcessShortcuts( (Keys)e.Key, true ) )
			{
				handled = true;
				return;
			}

			
			

			
		}

		protected virtual void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformKeyPress( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformKeyPress( viewport, e ) )
			{
				handled = true;
				return;
			}

			
			
			
			

		}

		protected virtual void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformKeyUp( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformKeyUp( viewport, e ) )
			{
				handled = true;
				return;
			}

			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			

			


		}

		protected virtual void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			

			

			
			
			

			
			
			
			
			
			

			

			if( __0x1984 != null && AllowCameraControl )
			{
				
				if( button == EMouseButtons.Right || button == EMouseButtons.Middle )
				
				{
					__0x1986 = true;
					__0x1987 = viewport.MousePosition;

					
					
					
				}
			}

			if( __0x1994 != null && __0x1994.PerformMouseDown( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformMouseDown( viewport, button ) )
			{
				handled = true;
				return;
			}

			
		}

		protected virtual void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			

			
			
			

			if( __0x1984 != null && AllowCameraControl )
			{
				
				if( button == EMouseButtons.Right || button == EMouseButtons.Middle )
				
				{
					__0x1986 = false;

					if( __0x1988 )
					{
						viewport.MouseRelativeMode = false;
						__0x1988 = false;

						handled = true;
					}
				}
			}

			if( __0x1994 != null && __0x1994.PerformMouseUp( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformMouseUp( viewport, button ) )
			{
				handled = true;
				return;
			}

			
			
			
			
			
			

			

		}

		protected virtual void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformMouseDoubleClick( viewport, button ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformMouseDoubleClick( viewport, button ) )
			{
				handled = true;
				return;
			}

			

			

			
			
			

			
			
			
			
			
			

			

		}

		protected virtual void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			
			
			
			
			
			


			

			

			

			
			

			
			if( __0x1984 != null && __0x1986 && AllowCameraControl )
			{
				
				if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) || viewport.IsMouseButtonPressed( EMouseButtons.Middle ) )
				
				
				
				{
					Vector2 __0x2007 = ( mouse - __0x1987 ) * viewport.SizeInPixels.ToVector2();
					if( Math.Abs( __0x2007.X ) >= 3 || Math.Abs( __0x2007.Y ) >= 3 )
					{
						__0x1986 = false;

						__0x1988 = true;
						viewport.MouseRelativeMode = true;

						
						
					}
				}
			}

			
			if( __0x1984 != null && viewport.MouseRelativeMode && AllowCameraControl )
			{
				Component_Camera __0x2008 = __0x1984.Mode.Value == Component_Scene.ModeEnum._3D ? __0x1984.CameraEditor : __0x1984.CameraEditor2D;
				if( __0x2008 != null && __0x1988 )
				{
					if( __0x1984.Mode.Value == Component_Scene.ModeEnum._3D )
					{
						double __0x2009 = .001;

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && __0x1990 )
						{
							double __0x2010 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.CameraMouseMovementSensitivityFast : ProjectSettings.Get.CameraMouseMovementSensitivityNormal;
							double __0x2011 = ( mouse.X + mouse.Y ) * __0x2010 * __0x2009 * 5.0;

							Transform __0x2012 = __0x2008.Transform;
							__0x2008.Transform = __0x2012.UpdatePosition( __0x2012.Position + __0x2012.Rotation.GetForward() * __0x2011 );
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Left ) && __0x1990 )
						{
							
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && !__0x1990 )
						{
							Transform __0x2013 = __0x2008.Transform;
							SphericalDirection __0x2014 = SphericalDirection.FromVector( __0x2013.Rotation.GetForward() );

							__0x2014.Horizontal -= mouse.X * ProjectSettings.Get.CameraMouseRotationSensitivityHorizontal.Value * __0x2009;
							__0x2014.Vertical -= mouse.Y * ProjectSettings.Get.CameraMouseRotationSensitivityVertical.Value * __0x2009;
							
							
							
							
							
							
							
							
							
							
							
							

							__0x2014.Horizontal = MathEx.RadianNormalize360( __0x2014.Horizontal );

							const double __0x2015 = Math.PI / 2 - .01;
							if( __0x2014.Vertical > __0x2015 ) __0x2014.Vertical = __0x2015;
							if( __0x2014.Vertical < -__0x2015 ) __0x2014.Vertical = -__0x2015;

							__0x2008.Transform = __0x2013.UpdateRotation( Quaternion.LookAt( __0x2014.GetVector(), __0x2008.FixedUp ) );
						}

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Middle ) )
						{
							double __0x2016 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.CameraMouseTrackMovementSensitivityFast : ProjectSettings.Get.CameraMouseTrackMovementSensitivityNormal;

							double __0x2017 = mouse.X * __0x2016 * __0x2009;
							double __0x2018 = -mouse.Y * __0x2016 * __0x2009;

							Transform __0x2019 = __0x2008.Transform;
							Vector3 __0x2020 = __0x2019.Rotation.GetForward();

							Vector3 __0x2021 = __0x2008.FixedUp;
							Vector3 __0x2022 = Vector3.Cross( __0x2020, __0x2021 );

							__0x2008.Transform = __0x2019.UpdatePosition( __0x2019.Position + __0x2022 * __0x2017 + __0x2021 * __0x2018 );
						}

						
						
						
					}
					else
					{
						
						
						
						
						

						
						
						

						
						if( viewport.IsMouseButtonPressed( EMouseButtons.Right ) && !__0x1990 )
						{
							Transform __0x2023 = __0x2008.Transform;

							var __0x2024 = __0x2023.Position;

							double __0x2025 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.CameraMouseMovementSensitivityFast : ProjectSettings.Get.CameraMouseMovementSensitivityNormal;

							__0x2024.X += mouse.X * __0x2025 * 0.005;
							__0x2024.Y -= mouse.Y * __0x2025 * 0.005;

							__0x2008.Transform = __0x2023.UpdatePosition( __0x2024 );
						}

						
						
						
						

						
						

						
						

						
						

						
						

					}
				}
			}

			__0x1993?.PerformMouseMove( viewport, mouse );
			__0x1994?.PerformMouseMove( viewport, mouse );
		}

		protected virtual void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformMouseRelativeModeChanged( viewport ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformMouseRelativeModeChanged( viewport ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			if( __0x1984 != null && AllowCameraControl )
			{
				Component_Camera __0x2026 = __0x1984.Mode.Value == Component_Scene.ModeEnum._3D ? __0x1984.CameraEditor : __0x1984.CameraEditor2D;
				if( __0x2026 != null )
				{
					double __0x2027 = ( ( Form.ModifierKeys & Keys.Shift ) != 0 ) ? ProjectSettings.Get.CameraMouseWheelMovementSensitivityFast : ProjectSettings.Get.CameraMouseWheelMovementSensitivityNormal;

					if( __0x1984.Mode.Value == Component_Scene.ModeEnum._3D )
					{
						Transform __0x2028 = __0x2026.Transform;
						__0x2026.Transform = __0x2028.UpdatePosition( __0x2028.Position + __0x2028.Rotation.GetForward() * (double)delta * .003 * __0x2027 );
					}
					else
					{
						double __0x2029 = __0x2026.Height;
						__0x2029 -= (double)delta * __0x2027 * 0.01;
						if( __0x2029 < 0.01 )
							__0x2029 = 0.01;
						__0x2026.Height = __0x2029;
					}
				}
			}

			if( __0x1994 != null && __0x1994.PerformMouseWheel( viewport, delta ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformMouseWheel( viewport, delta ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformJoystickEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformJoystickEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
		}

		protected virtual void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
			if( __0x1994 != null && __0x1994.PerformSpecialInputDeviceEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
			if( __0x1993 != null && __0x1993.PerformSpecialInputDeviceEvent( viewport, e ) )
			{
				handled = true;
				return;
			}
		}

		bool __0x2103( EKeys __0x2164 )
		{
			if( __0x2101 != null )
			{
				var __0x2030 = __0x2101.viewport;
				if( __0x2030 != null && __0x2030.IsKeyPressed( __0x2164 ) )
				{
					if( __0x2030.GetKeyDownTime( __0x2164 ) > __0x2030.GetKeyDownTime( EKeys.Control ) )
						if( __0x2030.GetKeyDownTime( __0x2164 ) < __0x2030.GetKeyUpTime( EKeys.Control ) )
							return false;
					return true;
				}
			}
			return false;
		}

		protected virtual void Viewport_Tick( Viewport viewport, float delta )
		{
			if( __0x2101 != null )
				__0x2101.AutomaticUpdateFPS = (float)ProjectSettings.Get.MaxFramesPerSecondDocument;

			

			
			
			{
				var __0x2031 = ObjectOfWindow as Component;
				if( __0x2031 != null && __0x2031.HierarchyController != null )
					__0x2031.HierarchyController.ProcessDelayedOperations();
			}
			
			

			__0x1990 = ( System.Windows.Forms.Control.ModifierKeys & Keys.Control ) != 0;
			

			
			

			
			

			
			if( __0x1984 != null && ( System.Windows.Forms.Control.ModifierKeys & Keys.Alt ) == 0 && AllowCameraControl )
			{
				Component_Camera __0x2032 = __0x1984.Mode.Value == Component_Scene.ModeEnum._3D ? __0x1984.CameraEditor : __0x1984.CameraEditor2D;
				if( __0x2032 != null )
				{
					Transform __0x2033 = __0x2032.Transform.Value;
					Vector3 __0x2034 = __0x2033.Position;
					SphericalDirection __0x2035 = SphericalDirection.FromVector( __0x2033.Rotation.GetForward() );
					if( __0x1984.Mode.Value == Component_Scene.ModeEnum._2D && Math.Abs( __0x2032.FixedUp.Value.Z ) < 0.001 )
						__0x2035 = SphericalDirection.FromVector( new Vector3( 0, 0, -1 ) );

					Vector3 __0x2036 = __0x2034;
					SphericalDirection __0x2037 = __0x2035;
					double __0x2038 = __0x2032.Height;
					double __0x2039 = __0x2038;


					double __0x2040;
					double __0x2041;
					if( ( System.Windows.Forms.Control.ModifierKeys & Keys.Shift ) != 0 || viewport.IsKeyLocked( EKeys.CapsLock ) )
					{
						__0x2040 = ProjectSettings.Get.CameraKeyboardMovementSpeedFast;
						__0x2041 = ProjectSettings.Get.CameraKeyboardRotationSpeedFast.Value.InRadians();
					}
					else
					{
						__0x2040 = ProjectSettings.Get.CameraKeyboardMovementSpeedNormal;
						__0x2041 = ProjectSettings.Get.CameraKeyboardRotationSpeedNormal.Value.InRadians();
					}
					var __0x2042 = __0x2040 * delta;
					var __0x2043 = __0x2041 * delta;
					
					var __0x2044 = __0x2042 * 4;

					if( ( Form.ModifierKeys & Keys.Control ) != 0 )
					{
						
						if( viewport.IsKeyPressed( EKeys.Up ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
							__0x2037.Vertical += __0x2043;
						if( viewport.IsKeyPressed( EKeys.Down ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
							__0x2037.Vertical -= __0x2043;
						if( viewport.IsKeyPressed( EKeys.Left ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
							__0x2037.Horizontal += __0x2043;
						if( viewport.IsKeyPressed( EKeys.Right ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
							__0x2037.Horizontal -= __0x2043;

						__0x2037.Horizontal = MathEx.RadianNormalize360( __0x2037.Horizontal );
						double __0x2045 = Math.PI / 2 - .01;
						if( __0x2037.Vertical > __0x2045 ) __0x2037.Vertical = __0x2045;
						if( __0x2037.Vertical < -__0x2045 ) __0x2037.Vertical = -__0x2045;
					}
					else
					{
						
						if( __0x1984.Mode.Value == Component_Scene.ModeEnum._3D )
						{
							
							
							if( __0x2103( EKeys.W ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
								__0x2036 += __0x2037.GetVector() * __0x2042;
							if( __0x2103( EKeys.S ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
								__0x2036 -= __0x2037.GetVector() * __0x2042;
							if( __0x2103( EKeys.A ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.D ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.E ) || viewport.IsKeyPressed( EKeys.NumPad9 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical + Math.PI / 2 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.Q ) || viewport.IsKeyPressed( EKeys.NumPad3 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical - Math.PI / 2 ).GetVector() * __0x2042;
							

							if( viewport.IsKeyPressed( EKeys.Up ) )
								__0x2036 += __0x2037.GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Down ) )
								__0x2036 -= __0x2037.GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Left ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Right ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.PageUp ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical + Math.PI / 2 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.PageDown ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical - Math.PI / 2 ).GetVector() * __0x2042;

							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
							
						}
						else
						{
							
							
							if( __0x2103( EKeys.W ) || viewport.IsKeyPressed( EKeys.NumPad8 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.S ) || viewport.IsKeyPressed( EKeys.NumPad2 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.A ) || viewport.IsKeyPressed( EKeys.NumPad4 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical - Math.PI / 2 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.D ) || viewport.IsKeyPressed( EKeys.NumPad6 ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical + Math.PI / 2 ).GetVector() * __0x2042;
							if( __0x2103( EKeys.E ) || viewport.IsKeyPressed( EKeys.NumPad9 ) )
								__0x2039 += __0x2044;
							if( __0x2103( EKeys.Q ) || viewport.IsKeyPressed( EKeys.NumPad3 ) )
								__0x2039 -= __0x2044;
							

							if( viewport.IsKeyPressed( EKeys.Up ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal + Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Down ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal - Math.PI / 2, 0 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Left ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical - Math.PI / 2 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.Right ) )
								__0x2036 += new SphericalDirection( __0x2037.Horizontal, __0x2037.Vertical + Math.PI / 2 ).GetVector() * __0x2042;
							if( viewport.IsKeyPressed( EKeys.PageUp ) )
								__0x2039 -= __0x2044;
							if( viewport.IsKeyPressed( EKeys.PageDown ) )
								__0x2039 += __0x2044;
						}
					}

					if( __0x1984.Mode.Value == Component_Scene.ModeEnum._2D )
					{
						__0x2036.Z = __0x1984.CameraEditor2DPositionZ;
						if( __0x2039 < 0.01 )
							__0x2039 = 0.01;
					}

					if( __0x2036 != __0x2034 || __0x2037 != __0x2035 )
					{
						var __0x2046 = __0x2033.UpdatePosition( __0x2036 );
						if( __0x2037 != __0x2035 )
						{
							var __0x2047 = __0x2037.GetVector();
							if( __0x1984.Mode.Value == Component_Scene.ModeEnum._2D && Math.Abs( __0x2032.FixedUp.Value.Z ) < 0.001 )
								__0x2047 = new Vector3( 0, 0, -1 );
							__0x2046 = __0x2046.UpdateRotation( Quaternion.LookAt( __0x2047, __0x2032.FixedUp ) );
						}
						__0x2032.Transform = __0x2046;
					}
					if( __0x2039 != __0x2038 )
						__0x2032.Height = __0x2039;
				}
			}

			
			{
				for( int __0x2048 = 0; __0x2048 < __0x1989.Count; __0x2048++ )
				{
					__0x1989[ __0x2048 ].timeRemaining -= delta;
					if( __0x1989[ __0x2048 ].timeRemaining <= 0 )
					{
						__0x1989.RemoveAt( __0x2048 );
						__0x2048--;
					}
				}
			}

			__0x1993?.PerformTick( viewport, delta );
			__0x1994?.PerformTick( viewport, delta );

			
			
			
			
			
			
		}

		protected virtual void Viewport_UpdateBegin( Viewport viewport )
		{
			__0x1993?.PerformUpdateBegin( viewport );
			__0x1994?.PerformUpdateBegin( viewport );
		}

		void __0x2104()
		{
			

			var __0x2049 = new List<string>();
			GetTextInfoLeftTopCorner( __0x2049 );
			var __0x2050 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x2049, new Rectangle( __0x2050.X, __0x2050.Y, 1, 1 ), EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 1, 1, 1 ) );
		}

		void __0x2105()
		{
			var __0x2051 = new List<string>();
			GetTextInfoRightBottomCorner( __0x2051 );
			var __0x2052 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x2051, new Rectangle( 0, 0, 1.0 - __0x2052.X, 1.0 - __0x2052.Y ), EHorizontalAlignment.Right, EVerticalAlignment.Bottom, new ColorValue( 1, 1, 1 ) );

			
			
			
			
			
		}

		void __0x2106()
		{
			var __0x2053 = GetFontSize() * 1.3;

			var __0x2054 = new List<string>();
			GetTextInfoCenterBottomCorner( __0x2054 );
			AddTextLinesWithShadow( null, __0x2053, __0x2054, new Rectangle( 0, 0.7, 1.0, 1.0 ), EHorizontalAlignment.Center, EVerticalAlignment.Center, new ColorValue( 1, 1, 1 ) );

			
			
			
			
			
		}

		void __0x2107()
		{
			
			var __0x2055 = ViewportControl.Viewport.CanvasRenderer;
			var __0x2056 = __0x2055.DefaultFont;
			if( __0x2056 == null )
				return;

			var __0x2057 = GetFontSize();
			var __0x2058 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.8, GetFontSize() * 0.6 );

			double __0x2059 = 1.0 - __0x2058.Y;
			for( int __0x2060 = __0x1989.Count - 1; __0x2060 >= 0; __0x2060-- )
			{
				__0x2165 __0x2061 = __0x1989[ __0x2060 ];

				Rectangle __0x2062 = new Rectangle( __0x2058.X, -1, 1.0 - __0x2058.X, __0x2059 );
				
				ColorValue __0x2063 = __0x2061.color * new ColorValue( 1, 1, 1, __0x2061.timeRemaining );
				
				
				if( __0x2063.Alpha > 1 )
					__0x2063.Alpha = 1;
				int __0x2064 = AddTextWordWrapWithShadow( __0x2056, __0x2057, __0x2061.text, __0x2062, EHorizontalAlignment.Left, EVerticalAlignment.Bottom, __0x2063 );

				__0x2059 -= (float)__0x2057 * (float)__0x2064;
				if( __0x2059 < 0 )
					break;
			}
		}

		protected virtual void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context )
		{
			__0x1993?.PerformUpdateGetObjectInSceneRenderingContext( viewport, ref context );
			__0x1994?.PerformUpdateGetObjectInSceneRenderingContext( viewport, ref context );
		}

		protected virtual void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			

			


			
			
			
			

			

			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			

			
			

			
			
			

			__0x1993?.PerformUpdateBeforeOutput( viewport );
			__0x1994?.PerformUpdateBeforeOutput( viewport );
		}

		protected virtual void GetTextInfoLeftTopCorner( List<string> lines )
		{
		}

		protected virtual void GetTextInfoRightBottomCorner( List<string> lines )
		{
			__0x1993?.PerformGetTextInfoRightBottomCorner( lines );
			__0x1994?.PerformGetTextInfoRightBottomCorner( lines );
		}

		protected virtual void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			__0x1993?.PerformGetTextInfoCenterBottomCorner( lines );
			__0x1994?.PerformGetTextInfoCenterBottomCorner( lines );

			foreach( var __0x2102 in SelectedObjects )
			{
				var __0x2065 = __0x2102 as Component;
				__0x2065?.PerformEditorGetTextInfoCenterBottomCorner( lines );
			}
		}

		
		protected virtual void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x1993?.PerformUpdateBeforeOutput2( viewport );
			__0x1994?.PerformUpdateBeforeOutput2( viewport );

			__0x2104();
			__0x2105();
			__0x2106();

			__0x2107();

			
			
			
			
			
			
			
			
			
			
			
			
		}

		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		protected virtual void Viewport_UpdateEnd( Viewport viewport )
		{
			__0x1993?.PerformUpdateEnd( viewport );
			__0x1994?.PerformUpdateEnd( viewport );
		}

		protected virtual void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
		}

		protected override void OnDestroy()
		{
			DestroyScene();

			base.OnDestroy();
		}

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		

		

		public void AddScreenMessage( string text, ColorValue color )
		{
			__0x2165 __0x2066 = new __0x2165();
			__0x2066.text = text;
			__0x2066.color = color;
			__0x2066.timeRemaining = 5;
			__0x1989.Add( __0x2066 );

			
			while( __0x1989.Count > 100 )
				__0x1989.RemoveAt( 0 );
		}

		public void AddScreenMessage( string text )
		{
			AddScreenMessage( text, new ColorValue( 1, 1, 1 ) );
		}

		
		
		
		
		
		
		

		

		
		
		
		

		[Browsable( false )]
		public Component_Scene Scene
		{
			get { return __0x1984; }
			set { __0x1984 = value; }
		}

		[Browsable( false )]
		public bool SceneNeedDispose
		{
			get { return __0x1985; }
			set { __0x1985 = value; }
		}

		public Component_Scene CreateScene( bool enable )
		{
			DestroyScene();

			__0x1984 = ComponentUtility.CreateComponent<Component_Scene>( null, true, enable );
			__0x1985 = true;

			
			__0x1984.OctreeEnabled = false;

			
			{
				var __0x2067 = (Component_RenderingPipeline)__0x1984.CreateComponent( RenderingSystem.RenderingPipelineDefault, -1, false );
				__0x1984.RenderingPipeline = __0x2067;

				
				__0x2067.DeferredShading = AutoTrueFalse.False;
				__0x2067.LODRange = new RangeI( 0, 0 );

				double __0x2068 = 1;
				double __0x2069 = 1;

				if( EditorAPI.DarkTheme )
					__0x1984.BackgroundColor = new ColorValue( 40.0 / 255 * __0x2068, 40.0 / 255 * __0x2068, 40.0 / 255 * __0x2068 );
				else
					__0x1984.BackgroundColor = new ColorValue( 22.0 / 255 * __0x2068, 44.0 / 255 * __0x2068, 66.0 / 255 * __0x2068 );
				__0x1984.BackgroundColorAffectLighting = 1;
				__0x1984.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );

				var __0x2070 = __0x2067.CreateComponent<Component>();
				__0x2070.Name = "Background Effects";

				var __0x2071 = __0x2070.CreateComponent<Component_RenderingEffect_Vignetting>();
				if( EditorAPI.DarkTheme )
					__0x2071.Color = new ColorValue( 45.0 / 255 * __0x2069, 45.0 / 255 * __0x2069, 45.0 / 255 * __0x2069 );
				else
					__0x2071.Color = new ColorValue( 24.0 / 255 * __0x2069, 48.0 / 255 * __0x2069, 72.0 / 255 * __0x2069 );
				__0x2071.Radius = 2;

				var __0x2072 = __0x2070.CreateComponent<Component_RenderingEffect_Noise>();
				__0x2072.Multiply = new Range( 0.9, 1.1 );

				var __0x2073 = __0x2067.CreateComponent<Component>();
				__0x2073.Name = "Scene Effects";

				
				var __0x2074 = MetadataManager.GetType( "NeoAxis.Component_RenderingEffect_ToLDR" );
				var __0x2075 = MetadataManager.GetType( "NeoAxis.Component_RenderingEffect_Antialiasing" );
				if( __0x2074 != null && __0x2075 != null )
				{
					__0x2073.CreateComponent( __0x2074 );
					__0x2073.CreateComponent( __0x2075 );
				}

				__0x2067.Enabled = true;
			}

			
			{
				var __0x2076 = __0x1984.CreateComponent<Component_Light>();
				__0x2076.Type = Component_Light.TypeEnum.Ambient;
				__0x2076.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x2077 = __0x1984.CreateComponent<Component_Light>();
				__0x2077.Type = Component_Light.TypeEnum.Directional;
				__0x2077.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x2077.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewDirectionalLightBrightness" );
				
				__0x2077.Shadows = false;
				
				
			}

			
			__0x1984.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( ViewportControl != null && ViewportControl.Viewport != null )
				ViewportControl.Viewport.AttachedScene = __0x1984;

			return __0x1984;
		}

		public void DestroyScene()
		{
			if( __0x1984 != null )
			{
				if( ViewportControl != null && ViewportControl.Viewport != null )
					ViewportControl.Viewport.AttachedScene = null;

				if( __0x1985 )
					__0x1984.Dispose();
				__0x1984 = null;
				__0x1985 = false;
			}
		}

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			Component_Camera __0x2078;

			if( scene.Mode.Value == Component_Scene.ModeEnum._3D )
			{
				
				__0x2078 = scene.CameraEditor;
				if( __0x2078 == null )
				{
					string __0x2079 = "Camera Editor";

					__0x2078 = scene.GetComponent( __0x2079 ) as Component_Camera;
					if( __0x2078 == null )
					{
						__0x2078 = scene.CreateComponent<Component_Camera>();
						__0x2078.Name = __0x2079;
						__0x2078.Visible = false;
						__0x2078.CanBeSelected = false;
					}
					scene.CameraEditor = new Reference<Component_Camera>( null, ReferenceUtility.CalculateThisReference( scene, __0x2078 ) );
				}
			}
			else
			{
				
				__0x2078 = scene.CameraEditor2D;
				if( __0x2078 == null )
				{
					string __0x2080 = "Camera Editor 2D";

					__0x2078 = scene.GetComponent( __0x2080 ) as Component_Camera;
					if( __0x2078 == null )
					{
						__0x2078 = scene.CreateComponent<Component_Camera>();
						__0x2078.Name = __0x2080;
						__0x2078.Visible = false;
						__0x2078.Transform = new Transform( new Vector3( 2.64918580053222, 3.02745193504869, 10 ), new Quaternion( -0.502493739596367, 0.497493760429674, 0.497493760429674, 0.502493739596367 ), Vector3.One );
						__0x2078.Projection = ProjectionType.Orthographic;
						__0x2078.Height = 16.8586419336498;
						__0x2078.FixedUp = Vector3.YAxis;
						__0x2078.FarClipPlane = 100;
						__0x2078.CanBeSelected = false;
					}
					scene.CameraEditor2D = new Reference<Component_Camera>( null, ReferenceUtility.CalculateThisReference( scene, __0x2078 ) );
				}
			}

			__0x1993?.PerformViewportUpdateGetCameraSettings( ref __0x2078 );
			__0x1994?.PerformViewportUpdateGetCameraSettings( ref __0x2078 );

			

			
			
			
			

			

			
			
			
			
			
			
			
			
			

			viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x2078, scene.FrustumCullingTest );

			
			

			
			processed = true;
		}

		[Browsable( false )]
		public bool CameraRotating
		{
			get { return __0x1988; }
		}

		public double GetFontSize()
		{
			double __0x2081 = 14.0 * DpiHelper.Default.DpiScaleFactor;
			__0x2081 = (int)__0x2081;

			var __0x2082 = ViewportControl.Viewport.CanvasRenderer;

			int __0x2083 = __0x2082.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x2084 = (float)__0x2081 / (float)__0x2083;
			float __0x2085 = __0x2084;

			return __0x2085;
		}

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		public void AddTextWithShadow( Component_Font font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x2086 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2086.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x2086.DefaultFontSize;

			Vector2 __0x2087 = __0x1991 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			__0x2086.AddText( font, fontSize, text, position + __0x2087, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
			__0x2086.AddText( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextWithShadow( null, -1, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( Component_Font font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			if( lines.Count == 0 )
				return;

			var __0x2088 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2088.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x2088.DefaultFontSize;

			Vector2 __0x2089 = __0x1991 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			float __0x2090 = (float)lines.Count * (float)fontSize;

			double __0x2091 = 0;
			switch( verticalAlign )
			{
			case EVerticalAlignment.Top:
				__0x2091 = rectangle.Top;
				break;
			case EVerticalAlignment.Center:
				__0x2091 = rectangle.Top + ( rectangle.Size.Y - __0x2090 ) / 2;
				break;
			case EVerticalAlignment.Bottom:
				__0x2091 = rectangle.Bottom - __0x2090;
				break;
			}

			for( int __0x2092 = 0; __0x2092 < lines.Count; __0x2092++ )
			{
				string __0x2093 = lines[ __0x2092 ];

				double __0x2094 = 0;
				switch( horizontalAlign )
				{
				case EHorizontalAlignment.Left:
					__0x2094 = rectangle.Left;
					break;
				case EHorizontalAlignment.Center:
					__0x2094 = rectangle.Left + ( rectangle.Size.X - font.GetTextLength( fontSize, __0x2088, __0x2093 ) ) / 2;
					break;
				case EHorizontalAlignment.Right:
					__0x2094 = rectangle.Right - font.GetTextLength( fontSize, __0x2088, __0x2093 );
					break;
				}

				Vector2 __0x2095 = new Vector2( __0x2094, __0x2091 );

				__0x2088.AddText( font, fontSize, __0x2093, __0x2095 + __0x2089, EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
				__0x2088.AddText( font, fontSize, __0x2093, __0x2095, EHorizontalAlignment.Left, EVerticalAlignment.Top, color );
				__0x2091 += fontSize;
			}
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextLinesWithShadow( null, -1, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( Component_Font font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x2096 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x2096.DefaultFont;
			if( font == null || font.Disposed )
				return 0;
			
			
			if( fontSize < 0 )
				fontSize = __0x2096.DefaultFontSize;

			var __0x2097 = font.GetWordWrapLines( fontSize, __0x2096, text, rectangle.Size.X );

			string[] __0x2098 = new string[ __0x2097.Length ];
			for( int __0x2099 = 0; __0x2099 < __0x2098.Length; __0x2099++ )
				__0x2098[ __0x2099 ] = __0x2097[ __0x2099 ].Text;

			AddTextLinesWithShadow( font, fontSize, __0x2098, rectangle, horizontalAlign, verticalAlign, color );

			return __0x2098.Length;
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return AddTextWordWrapWithShadow( null, -1, text, rectangle, horizontalAlign, verticalAlign, color );
		}

		[Browsable( false )]
		public string WorkareaModeName
		{
			get { return __0x1992; }
		}

		[Browsable( false )]
		public WorkareaModeClass WorkareaMode
		{
			get { return __0x1993; }
		}

		public virtual void WorkareaModeSet( string name, WorkareaModeClass instance = null )
		{
			__0x1993?.PerformDestroy();

			__0x1992 = name;
			__0x1993 = instance;
		}

		[Browsable( false )]
		public bool AllowCameraControl
		{
			get
			{
				if( __0x1993 != null && !__0x1993.AllowControlCamera )
					return false;
				return true;
			}
		}

		[Browsable( false )]
		public bool AllowSelectObjects
		{
			get
			{
				if( __0x1993 != null && !__0x1993.AllowSelectObjects )
					return false;
				return true;
			}
		}

		[Browsable( false )]
		public bool DisplaySelectedObjects
		{
			get
			{
				if( __0x1993 != null && !__0x1993.DisplaySelectedObjects )
					return false;
				return true;
			}
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			__0x1994?.PerformEditorActionGetState( context );
			__0x1993?.PerformEditorActionGetState( context );
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			__0x1994?.PerformEditorActionClick( context );
			__0x1993?.PerformEditorActionClick( context );
		}

		[Browsable( false )]
		public ObjectCreationMode ObjectCreationMode
		{
			get { return __0x1994; }
		}

		public virtual void ObjectCreationModeSet( ObjectCreationMode mode )
		{
			__0x1994?.PerformDestroy();

			__0x1994 = mode;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class DocumentWindowWithViewport
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x2100 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x2108()
		{
			this.__0x2101 = new NeoAxis.Widget.EngineViewportControl();
			this.SuspendLayout();
			
			
			
			this.__0x2101.AllowCreateRenderWindow = true;
			this.__0x2101.AutomaticUpdateFPS = 200F;
			this.__0x2101.BackColor = System.Drawing.Color.Transparent;
			this.__0x2101.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2101.Location = new System.Drawing.Point(0, 0);
			this.__0x2101.Margin = new System.Windows.Forms.Padding(0);
			this.__0x2101.Name = "viewportControl";
			this.__0x2101.OneFrameChangeCursor = null;
			this.__0x2101.Size = new System.Drawing.Size(354, 171);
			this.__0x2101.TabIndex = 0;
			
			
			
			this.AllowDrop = true;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x2101);
			this.Name = "DocumentWindowWithViewport";
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Widget.EngineViewportControl __0x2101;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Representation of an editor action.
	/// </summary>
	public class EditorAction
	{
		public string Name;
		public CommonTypeEnum CommonType = CommonTypeEnum.Document;
		public string Description;

		
		
		public Image ImageSmall;
		public Image ImageBig;
		public Image ImageSmall_Dark;
		public Image ImageBig_Dark;

		Image __0x2166;
		Image __0x2167;

		public Keys[] ShortcutKeys;

		
		public bool QatSupport;
		public bool QatAddByDefault;

		
		public (string, string) RibbonText;

		
		public enum ActionTypeEnum
		{
			Button,
			DropDown,
			Slider,
			
			ListBox,
		}
		public ActionTypeEnum ActionType = ActionTypeEnum.Button;
		public KryptonContextMenu DropDownContextMenu;

		public SliderSettings Slider = new SliderSettings();
		
		public ListBoxSettings ListBox = new ListBoxSettings();

		public EditorContextMenuWinForms.MenuTypeEnum ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.None;
		

		public string ContextMenuText;

		public object UserData;

		public bool CompletelyDisabled;

		

		public enum CommonTypeEnum
		{
			General,
			/// <summary>
			/// When this option is enabled, the action can be enabled even when the document window is not selected (another dock window is selecteD). The last selected document window will be used.
			/// </summary>
			Document,
		}

		

		public enum HolderEnum
		{
			RibbonQAT,
			ContextMenu,
			ShortcutKey,
		}

		

		public class SliderSettings
		{
			
			
			
			
			
			
			public double Minimum;
			public double Maximum = 1;
			public double ExponentialPower;
										   
										   

			public double Value;

			
			
			
			
			
			
			
			
			
			
			
			
		}

		

		
		
		
		
		
		

		

		public class ListBoxSettings
		{
			public int Length = 137;

			public enum ModeEnum
			{
				List,
				Tiles,
			}
			public ModeEnum Mode = ModeEnum.List;

			public List<(string, Image)> Items = new List<(string, Image)>();
			public int SelectedIndex;

			public int? SelectIndex;

			public bool LastSelectedIndexChangedByUser;
		}

		

		public class GetStateContext
		{
			HolderEnum __0x2168;
			ObjectsInFocus __0x2169;
			EditorAction __0x2170;

			

			internal GetStateContext( HolderEnum holder, ObjectsInFocus objectsInFocus, EditorAction action )
			{
				this.__0x2168 = holder;
				this.__0x2169 = objectsInFocus;
				this.__0x2170 = action;
			}

			public HolderEnum Holder
			{
				get { return __0x2168; }
			}

			public ObjectsInFocus ObjectsInFocus
			{
				get { return __0x2169; }
			}

			public EditorAction Action
			{
				get { return __0x2170; }
			}

			public bool Enabled { get; set; }
			public bool Checked { get; set; }
		}

		

		public class ClickContext
		{
			HolderEnum __0x2171;
			ObjectsInFocus __0x2172;
			EditorAction __0x2173;

			

			internal ClickContext( HolderEnum holder, ObjectsInFocus objectsInFocus, EditorAction action )
			{
				this.__0x2171 = holder;
				this.__0x2172 = objectsInFocus;
				this.__0x2173 = action;
			}

			public HolderEnum Holder
			{
				get { return __0x2171; }
			}

			public ObjectsInFocus ObjectsInFocus
			{
				get { return __0x2172; }
			}

			public EditorAction Action
			{
				get { return __0x2173; }
			}
		}

		

		public delegate void GetStateDelegate( GetStateContext __0x2202 );
		public event GetStateDelegate GetState;
		public void PerformGetState( GetStateContext context )
		{
			GetState?.Invoke( context );
		}

		
		public delegate void ClickDelegate( ClickContext __0x2203 );
		public event ClickDelegate Click;
		public void PerformClick( ClickContext context )
		{
			Click?.Invoke( context );
		}

		public string ToolTip
		{
			get
			{
				string __0x2174 = "";

				if( !string.IsNullOrEmpty( Description ) )
					__0x2174 = EditorLocalization.Translate( "EditorAction.Description", Description );
				else
				{
					__0x2174 = Name;
					
				}

				var __0x2175 = EditorActions.ConvertShortcutKeysToString( ShortcutKeys );
				if( __0x2175 != "" )
					__0x2174 += " (" + __0x2175 + ")";

				return __0x2174;
			}
		}

		public string GetContextMenuText()
		{
			if( !string.IsNullOrEmpty( ContextMenuText ) )
				return EditorLocalization.Translate( "EditorAction.Name", ContextMenuText );
			return Name;
		}

		internal static Bitmap ResizeImage( Image image, int width, int height )
		{
			Bitmap __0x2176 = new Bitmap( width, height );
			using( Graphics __0x2177 = Graphics.FromImage( __0x2176 ) )
			{
				__0x2177.InterpolationMode = System.Drawing.Drawing2D.InterpolationMode.High;
				__0x2177.DrawImage( image, 0, 0, width, height );
			}
			return __0x2176;
		}

		void __0x2201()
		{
			if( __0x2166 == null && __0x2167 == null )
			{
				var __0x2178 = ( EditorAPI.DarkTheme && ImageBig_Dark != null ) ? ImageBig_Dark : ImageBig;
				var __0x2179 = ( EditorAPI.DarkTheme && ImageSmall_Dark != null ) ? ImageSmall_Dark : ImageSmall;

				if( __0x2179 == null && __0x2178 != null )
					__0x2179 = ResizeImage( __0x2178, 16, 16 );

				__0x2167 = __0x2178;
				__0x2166 = __0x2179;
			}
		}

		public Image GetImageBig()
		{
			__0x2201();
			return __0x2167;
		}

		public Image GetImageSmall()
		{
			__0x2201();
			return __0x2166;
			
			
			
		}
	}

	

	public class EditorAction_NewResource : EditorAction
	{
		Metadata.TypeInfo __0x2180;

		

		public EditorAction_NewResource( Metadata.TypeInfo type )
		{
			this.__0x2180 = type;

			ImageSmall = Properties.Resources.New_16;
			ImageBig = Properties.Resources.New_32;
			QatSupport = true;

			GetState += delegate ( EditorAction.GetStateContext __0x2204 )
			{
				__0x2204.Enabled = true;
			};
			Click += delegate ( EditorAction.ClickContext __0x2205 )
			{
				var __0x2181 = new NewObjectWindow.CreationDataClass();

				var __0x2182 = EditorAPI.FindWindow<ResourcesWindow>();
				string __0x2183 = __0x2182.ContentBrowser1.GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
				if( !string.IsNullOrEmpty( __0x2183 ) )
					__0x2181.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( __0x2183 );

				__0x2181.initLockType = type;

				EditorAPI.OpenNewObjectWindow( __0x2181 );
			};
		}

		public EditorAction_NewResource( Type type )
			: this( MetadataManager.GetTypeOfNetType( type ) )
		{
		}

		public Metadata.TypeInfo Type
		{
			get { return __0x2180; }
		}
	}

	

	
	
	
	

	

	
	
	

	
	
	

	
	
	
	
	
	
	

	

	
	
	
	

	

	
	
	

	
	
	
	

	
	
	
	
	

	
	
	
	

	
	
	
	
	

	

	public class EditorActionDockWindow : EditorAction
	{
		public Type windowClass;
	}

	

	public static class EditorActions
	{
		static Dictionary<string, EditorAction> __0x2184 = new Dictionary<string, EditorAction>();

		

		static EditorActions()
		{
			EditorStandardActions.Register();
		}

		public static ICollection<EditorAction> Actions
		{
			get { return __0x2184.Values; }
		}

		public static EditorAction GetByName( string name )
		{
			__0x2184.TryGetValue( name, out EditorAction action );
			return action;
		}

		
		

		public static void Register( EditorAction action )
		{
			
			if( action.RibbonText.Item1 == null )
			{
				var __0x2185 = action.Name;

				if( __0x2185.Contains( " " ) )
				{
					int __0x2186 = __0x2185.IndexOf( ' ' );
					action.RibbonText = (__0x2185.Substring( 0, __0x2186 ), __0x2185.Substring( __0x2186 + 1 ));
				}
				else
					action.RibbonText = (__0x2185, "");
			}

			
			
			
			

			__0x2184.Add( action.Name, action );
		}

		public static void CompleteDisable( string name )
		{
			var __0x2187 = GetByName( name );
			if( __0x2187 != null )
				__0x2187.CompletelyDisabled = true;
		}

		
		
		
		
		
		
		
		

		public static void RegisterDockWindowAction( string name, (string, string) ribbonText, Type windowClass )
		{
			var __0x2188 = new EditorActionDockWindow();
			__0x2188.Name = name;
			__0x2188.Description = "Shows or hides the " + name + ".";
			__0x2188.ImageSmall = Properties.Resources.Window_16;
			__0x2188.ImageBig = Properties.Resources.Window_32;
			__0x2188.QatSupport = true;
			__0x2188.RibbonText = ribbonText;
			__0x2188.windowClass = windowClass;
			__0x2188.GetState += delegate ( EditorAction.GetStateContext __0x2206 )
			{
				var __0x2189 = (EditorActionDockWindow)__0x2206.Action;
				var __0x2190 = EditorForm.Instance.WorkspaceController.FindWindow( __0x2189.windowClass );
				if( __0x2190 != null )
				{
					__0x2206.Enabled = true;
					var __0x2191 = EditorForm.Instance.WorkspaceController.DockingManager;
					__0x2206.Checked = __0x2190 != null && __0x2190.Visible && __0x2191.ContainsPage( __0x2190.KryptonPage );
				}
			};
			__0x2188.Click += delegate ( EditorAction.ClickContext __0x2207 )
			{
				var __0x2192 = (EditorActionDockWindow)__0x2207.Action;
				var __0x2193 = EditorForm.Instance.WorkspaceController.FindWindow( __0x2192.windowClass );
				if( __0x2193 != null )
				{
					EditorForm.Instance.WorkspaceController.SetDockWindowVisibility( __0x2193, !__0x2193.Visible );

					var __0x2194 = EditorForm.Instance.WorkspaceController.DockingManager;
					if( !__0x2194.ContainsPage( __0x2193.KryptonPage ) )
						EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2193, true, false );
				}
			};
			Register( __0x2188 );
		}

		internal static string ConvertShortcutKeysToString( Keys[] shortcutKeys, bool onlyFirst = false )
		{
			if( shortcutKeys != null && shortcutKeys.Length != 0 )
			{
				string __0x2195 = "";

				for( int __0x2196 = 0; __0x2196 < shortcutKeys.Length; __0x2196++ )
				{
					if( onlyFirst && __0x2196 != 0 )
						break;

					var __0x2197 = shortcutKeys[ __0x2196 ];
					if( __0x2196 != 0 )
						__0x2195 += "; ";

					var __0x2198 = __0x2197.ToString();

					if( __0x2198.Contains( ", Control" ) )
						__0x2198 = "Ctrl+" + __0x2198.Replace( ", Control", "" );
					if( __0x2198.Contains( ", Shift" ) )
						__0x2198 = "Shift+" + __0x2198.Replace( ", Shift", "" );
					if( __0x2198.Contains( ", Alt" ) )
						__0x2198 = "Alt+" + __0x2198.Replace( ", Alt", "" );
					__0x2198 = __0x2198.Replace( ", ", "+" );

					__0x2195 += __0x2198;
				}

				return __0x2195;
			}
			else
				return "";
		}

		public static string GetFirstShortcutKeyString( string actionName )
		{
			var __0x2199 = ProjectSettings.Get.ShortcutSettings.GetActionItem( actionName );
			if( __0x2199 != null )
			{
				var __0x2200 = __0x2199.ToArray();
				if( __0x2200 != null )
					return ConvertShortcutKeysToString( __0x2200, true );
			}
			return null;

			
			
			
			
		}
	}
}





namespace NeoAxis.Editor
{
	
	/// <summary>
	/// Provides an interface to work with the editor.
	/// </summary>
	public static class EditorAPI
	{
		static bool __0x2208;
		static bool __0x2209;
		static bool __0x2210;

		

		
		static EditorForm EditorForm
		{
			get { return EditorForm.Instance; }
		}

		public static bool IsEditor
		{
			get { return EngineApp.ApplicationType == EngineApp.ApplicationTypeEnum.Editor; }
		}

		public static DockWindow FindWindow( Type windowClass )
		{
			return EditorForm?.WorkspaceController.FindWindow( windowClass );
		}

		public static T FindWindow<T>() where T : DockWindow
		{
			return (T)FindWindow( typeof( T ) );
		}

		public static void ShowDockWindow( Type windowClass )
		{
			EditorForm?.WorkspaceController.ShowDockWindow( windowClass );
		}

		public static void ShowDockWindow<T>() where T : DockWindow
		{
			ShowDockWindow( typeof( T ) );
		}

		
		public static void SelectFilesOrDirectoriesInMainResourcesWindow( string[] realPaths, bool expandNodes = false )
		{
			var __0x2211 = FindWindow<ResourcesWindow>();
			if( __0x2211 != null )
			{
				__0x2211.ContentBrowser1?.NeedSelectFilesOrDirectories( realPaths, expandNodes );
				SelectDockWindow( __0x2211 );
			}
		}

		
		public static void SelectComponentsInMainObjectsWindow( DocumentWindow documentWindow, Component[] components )
		
		{
			if( documentWindow == null || components.Length == 0 )
				return;

			var __0x2212 = FindWindow<ObjectsWindow>();
			if( __0x2212 != null && __0x2212.Visible )
			{
				var __0x2213 = __0x2212.GetPanel( documentWindow );
				if( __0x2213 != null )
				{
					var __0x2214 = __0x2213.control as ContentBrowser;
					if( __0x2214 != null )
						ContentBrowserUtility.SelectComponentItems( __0x2214, components );
				}
			}
		}

		public static void GetRestartApplication( out bool needRestart, out bool resetWindowsSettings )
		{
			needRestart = __0x2208;
			resetWindowsSettings = __0x2209;
		}

		public static void SetRestartApplication( bool needRestart, bool resetWindowsSettings = false )
		{
			__0x2208 = needRestart;
			__0x2209 = resetWindowsSettings;
		}

		public static void BeginCloseApplication()
		{
			if( EditorForm != null )
				EditorForm.needClose = true;
		}

		public static void BeginRestartApplication( bool resetWindowsSettings = false )
		{
			SetRestartApplication( true, resetWindowsSettings );
			BeginCloseApplication();
		}

		public static List<DocumentInstance> Documents
		{
			get { return EditorForm.Instance.Documents; }
		}

		public static DocumentInstance GetDocumentByObject( object obj )
		{
			if( obj == null )
				Log.Fatal( "EditorAPI: GetDocumentByObject: obj == null." );

			foreach( var __0x2336 in Documents )
			{
				if( __0x2336.ResultObject == obj )
					return __0x2336;
			}

			
			{
				var __0x2215 = obj as Component;
				if( __0x2215 != null )
				{
					var __0x2216 = __0x2215.ParentRoot;
					foreach( var __0x2337 in Documents )
					{
						if( __0x2337.ResultObject == __0x2216 )
							return __0x2337;
					}
				}
			}

			return null;
		}

		public static void CloseAllDocumentWindowsOnSecondLevel( DocumentInstance document )
		{
			var __0x2217 = new List<DocumentWindow>();

			foreach( var __0x2338 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2218 = __0x2338 as DocumentWindow;
				if( __0x2218 != null && __0x2218.Document == document && __0x2218.IsWindowInWorkspace && __0x2218.ObjectOfWindow != document.ResultObject )
					__0x2217.Add( __0x2218 );
			}

			foreach( var __0x2339 in __0x2217 )
				__0x2339.Close();
		}

		public static void CloseAllDocumentWindowsOnSecondLevelWithDeletedObjects( DocumentInstance document )
		{
			var __0x2219 = new List<DocumentWindow>();

			foreach( var __0x2340 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2220 = __0x2340 as DocumentWindow;
				if( __0x2220 != null && __0x2220.Document == document && __0x2220.IsWindowInWorkspace && __0x2220.ObjectOfWindow != document.ResultObject && __0x2220.ObjectOfWindowIsDeleted )
					__0x2219.Add( __0x2220 );
			}

			foreach( var __0x2341 in __0x2219 )
				__0x2341.Close();
		}

		public static List<DocumentWindow> FindDocumentWindowsWithObject( object obj )
		{
			var __0x2221 = new List<DocumentWindow>();

			foreach( var __0x2342 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2222 = __0x2342 as DocumentWindow;
				if( __0x2222 != null && __0x2222.ObjectOfWindow == obj )
					__0x2221.Add( __0x2222 );
			}

			return __0x2221;
		}

		
		
		
		

		

		
		
		
		
		
		

		
		

		
		
		
		
		

		public static void SelectDockWindow( DockWindow window )
		{
			EditorForm.Instance.WorkspaceController.SelectDockWindow( window );
		}

		
		public static DocumentWindow SelectedDocumentWindow
		{
			get { return EditorForm.Instance.WorkspaceController.SelectedDocumentWindow; }
		}

		static DocumentWindow __0x2223;
		public static event Action SelectedDocumentWindowChanged;

		internal static void SelectedDocumentWindowChangedUpdate()
		{
			var __0x2224 = SelectedDocumentWindow;
			if( __0x2223 != __0x2224 )
			{
				__0x2223 = __0x2224;
				SelectedDocumentWindowChanged?.Invoke();
			}
		}

		public static DocumentInstance SelectedDocument
		{
			get
			{
				var __0x2225 = SelectedDocumentWindow;
				if( __0x2225 != null )
					return __0x2225.Document;
				return null;
			}
		}

		public static bool ExistsModifiedDocuments()
		{
			foreach( var __0x2343 in Documents )
			{
				if( __0x2343.Modified )
					return true;
			}
			return false;
		}

		public static bool SaveDocuments(  )
		{
			foreach( var __0x2344 in Documents )
			{
				
				

				if( __0x2344.Modified )
				{
					if( !__0x2344.Save() )
					{
						
						return false;
					}
				}
			}
			return true;
		}

		public static DocumentInstance GetDocumentByRealFileName( string realFileName, string specialMode )
		{
			realFileName = VirtualPathUtility.NormalizePath( realFileName );
			if( specialMode == null )
				specialMode = "";

			foreach( var __0x2345 in Documents )
			{
				if( !string.IsNullOrEmpty( __0x2345.RealFileName ) )
				{
					if( string.Compare( VirtualPathUtility.NormalizePath( __0x2345.RealFileName ), realFileName, true ) == 0 && __0x2345.SpecialMode == specialMode )
						return __0x2345;
				}
			}

			return null;
		}

		public static DocumentInstance GetDocumentByResource( Resource.Instance ins )
		{
			foreach( var __0x2346 in Documents )
			{
				if( __0x2346.LoadedResource == ins )
					return __0x2346;
			}
			return null;
		}

		public delegate void EditorActionGetStateEventDelegate( EditorAction.GetStateContext __0x2354 );
		public static event EditorActionGetStateEventDelegate EditorActionGetStateEvent;

		public delegate void EditorActionClickEventDelegate( EditorAction.ClickContext __0x2355 );
		public static event EditorActionClickEventDelegate EditorActionClickEvent;

		public static EditorAction.GetStateContext EditorActionGetState( EditorAction.HolderEnum holder, EditorAction action )
		{
			var __0x2226 = GetObjectsInFocus( action.CommonType == EditorAction.CommonTypeEnum.Document );
			var __0x2227 = new EditorAction.GetStateContext( holder, __0x2226, action );

			
			action.PerformGetState( __0x2227 );
			
			__0x2226.DocumentWindow?.Document?.EditorActionGetState( __0x2227 );
			
			__0x2226.DocumentWindow?.EditorActionGetState( __0x2227 );
			
			EditorActionGetStateEvent?.Invoke( __0x2227 );

			if( !EditorUtility.PerformEditorActionVisibleFilter( action ) )
				__0x2227.Enabled = false;

			

			return __0x2227;
		}

		public static EditorAction.GetStateContext EditorActionGetState( EditorAction.HolderEnum holder, string actionName )
		{
			var __0x2228 = EditorActions.GetByName( actionName );
			if( __0x2228 == null || __0x2228.CompletelyDisabled )
				return null;
			return EditorActionGetState( holder, __0x2228 );
		}

		public static void EditorActionClick( EditorAction.HolderEnum holder, EditorAction action )
		{
			var __0x2229 = EditorActionGetState( holder, action );
			if( __0x2229.Enabled )
			{
				var __0x2230 = __0x2229.ObjectsInFocus;
				

				var __0x2231 = new EditorAction.ClickContext( holder, __0x2230, action );

				
				action.PerformClick( __0x2231 );
				
				__0x2230.DocumentWindow?.Document?.EditorActionClick( __0x2231 );
				
				__0x2230.DocumentWindow?.EditorActionClick( __0x2231 );
				
				EditorActionClickEvent?.Invoke( __0x2231 );
			}
		}

		public static void EditorActionClick( EditorAction.HolderEnum holder, string actionName )
		{
			var __0x2232 = EditorActions.GetByName( actionName );
			if( __0x2232 == null || __0x2232.CompletelyDisabled )
				return;
			EditorActionClick( holder, __0x2232 );
		}

		public static void ShowProjectSettings()
		{
			OpenFileAsDocument( VirtualPathUtility.GetRealPathByVirtual( ProjectSettings.FileName ), true, true, true, "ProjectSettingsUserMode" );
		}

		public static event Action ClosingApplicationChanged;

		
		public static bool ClosingApplication
		{
			get { return __0x2210; }
			set
			{
				if( __0x2210 == value )
					return;
				__0x2210 = value;

				ClosingApplicationChanged?.Invoke();
			}
		}

		public static float DPI
		{
			get { return DpiHelper.Default.Dpi; }
		}

		public static float DPIScale
		{
			get { return DpiHelper.Default.DpiScaleFactor; }
		}

		
		
		
		

		
		
		
		

		public static ObjectsInFocus GetObjectsInFocus( bool useOnlySelectedDocumentWindow )
		{
			return EditorForm.Instance.GetObjectsInFocus( useOnlySelectedDocumentWindow );
		}

		static Dictionary<string, Type> __0x2233;
		public static Dictionary<string, Type> DocumentWindowClassByFileExtension
		{
			get
			{
				if( __0x2233 == null )
					__0x2233 = EditorAssemblyInterface.Instance.DocumentWindowClassByFileExtension;
				return __0x2233;
			}
		}

		public static void OpenNewObjectWindow( NewObjectWindow.CreationDataClass initData )
		{
			var __0x2234 = new NewObjectWindow();
			__0x2234.creationData = initData;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2234, true, true );
		}

		public static void OpenImportWindow( string initialDestinationFolder )
		{
			var __0x2235 = new ImportWindow();
			__0x2235.InitialDestinationFolder = initialDestinationFolder;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2235, true, true );
		}

		public static void OpenSelectTypeWindow( SelectTypeWindow.CreationDataClass initData )
		{
			var __0x2236 = new SelectTypeWindow();
			__0x2236.creationData = initData;
			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2236, true, true );
		}

		public static void OpenSetReferenceWindow( DocumentWindow documentWindow, Component[] selectedComponents, object[] propertyOwners, Metadata.Property property, object[] propertyIndexes )
		
		{
			

			var __0x2237 = new SetReferenceWindow();
			__0x2237.documentWindow = documentWindow;

			var __0x2238 = new ContentBrowser.SetReferenceModeDataClass();
			__0x2238.selectedComponents = selectedComponents;
			__0x2238.propertyOwners = propertyOwners;
			__0x2238.property = property;
			__0x2238.propertyIndexes = propertyIndexes;
			__0x2237.setReferenceModeData = __0x2238;

			

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2237, true, true );
		}

		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		public static DocumentWindow ShowObjectSettingsWindow( DocumentInstance document, object obj, bool canUseAlreadyOpened )
		{
			

			
			if( canUseAlreadyOpened )
			{
				var __0x2239 = EditorForm.Instance.WorkspaceController.FindWindowRecursive( document, obj, typeof( ObjectSettingsWindow ) );
				if( __0x2239 != null )
				{
					EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2239 );
					return __0x2239;
				}
			}

			var __0x2240 = new ObjectSettingsWindow();
			__0x2240.InitDocumentWindow( document, obj, true, null );

			

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2240, true, true );

			return __0x2240;
		}

		static internal DocumentInstance CreateDocument( string realFileName, string specialMode = "" )
		{
			if( specialMode == "TextEditor" )
			{
				var __0x2241 = new DocumentInstance( realFileName, null, specialMode );
				Documents.Add( __0x2241 );
				return __0x2241;
			}

			string __0x2242 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
			if( !string.IsNullOrEmpty( __0x2242 ) && IsDocumentFileSupport( __0x2242 ) )
			{
				Resource.Instance __0x2243 = null;

				var __0x2244 = Path.GetExtension( __0x2242 ).ToLower();
				if( __0x2244 != "" && __0x2244[ 0 ] == '.' )
					__0x2244 = __0x2244.Substring( 1 );
				if( ResourceManager.GetTypeByFileExtension( __0x2244 ) != null )
				{
					
					{
						var __0x2245 = ResourceManager.GetByName( __0x2242 );
						if( __0x2245 != null && __0x2245.FileWasDeleted )
							__0x2245.Dispose();
					}

					
					

					__0x2243 = ResourceManager.LoadSeparateInstance( __0x2242, true, true, null );
					

					if( __0x2243 == null )
						return null;
				}

				var __0x2246 = new DocumentInstance( realFileName, __0x2243, specialMode );
				Documents.Add( __0x2246 );

				return __0x2246;
			}

			return null;
		}

		
		public static DockWindow OpenFileAsDocument( string realFileName, bool canUseAlreadyOpened, bool select, bool floatingWindow = false, string specialMode = "" )
		{
			if( string.IsNullOrEmpty( specialMode ) && !IsDocumentFileSupport( realFileName ) )
				return null;

			realFileName = VirtualPathUtility.NormalizePath( realFileName );

			

			
			if( canUseAlreadyOpened )
			{
				var __0x2247 = GetDocumentByRealFileName( realFileName, specialMode );
				if( __0x2247 != null )
				{
					var __0x2248 = (DockWindow)EditorForm.Instance.WorkspaceController.FindWindow( __0x2247 );
					if( __0x2248 != null )
					{
						EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2248 );
						return __0x2248;
					}
				}
			}

			string __0x2249 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
			if( !string.IsNullOrEmpty( __0x2249 ) )
			{
				
				

				var __0x2250 = CreateDocument( realFileName, specialMode );
				if( __0x2250 == null )
				{
					
					return null;
				}

				var __0x2251 = CreateWindow( __0x2250 );
				EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2251, floatingWindow, select  );

				return __0x2251;
			}
			else
			{
				
				Log.Error( "Can't load resource outside Assets folder." );
				return null;
			}
		}

		public static DocumentWindow OpenDocumentWindowForObject( DocumentInstance document, object obj )
		{
			if( !IsDocumentObjectSupport( obj ) )
				return null;

			
			{
				var __0x2252 = GetDocumentByObject( obj );
				if( __0x2252 == null || __0x2252 != document )
				{
					var __0x2253 = obj as Component;
					if( __0x2253 != null )
					{
						var __0x2254 = ComponentUtility.GetOwnedFileNameOfComponent( __0x2253 );
						if( !string.IsNullOrEmpty( __0x2254 ) )
						{
							var __0x2255 = VirtualPathUtility.GetRealPathByVirtual( __0x2254 );

							if( IsDocumentFileSupport( __0x2255 ) )
							{
								var __0x2256 = OpenFileAsDocument( __0x2255, true, true ) as DocumentWindow;
								if( __0x2256 != null )
								{
									var __0x2257 = __0x2256.Document;
									var __0x2258 = __0x2257.ResultComponent.Components[ __0x2253.GetPathFromRoot() ];
									if( __0x2258 != null )
									{
										return OpenDocumentWindowForObject( __0x2257, __0x2258 );
									}
								}

								return null;
							}
						}
					}

					return null;
				}
			}

			
			var __0x2259 = !EditorForm.ModifierKeys.HasFlag( Keys.Shift );
			if( __0x2259 )
			{
				var __0x2260 = EditorForm.Instance.WorkspaceController.FindWindowRecursive( document, obj );
				if( __0x2260 != null )
				{
					EditorForm.Instance.WorkspaceController.SelectDockWindow( __0x2260 );
					return __0x2260;
				}
			}

			
			var __0x2261 = __0x2352( document, obj, false );

			
			bool __0x2262 = false;
			bool __0x2263 = true;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2261, __0x2262, __0x2263 );

			return __0x2261;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="text"></param>
		/// <param name="title"></param>
		/// <param name="select"></param>
		/// <param name="readOnly"></param>
		/// <param name="highlightingScheme">This is the prefix for file path. Specify \'CSharp\'. 'Base\Tools\Highlighting\{CSharp}Dark.xshd'</param>
		/// <returns></returns>
		public static DocumentInstance OpenTextAsDocument( string text, string title, bool select, bool readOnly = false, string highlightingScheme = "", int selectLine = 0 )
		{
			

			var __0x2264 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2264 );

			var __0x2265 = EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.TextEditorDocumentWindow" );
			var __0x2266 = (DocumentWindow)Activator.CreateInstance( __0x2265 );
			

			var __0x2267 = new Dictionary<string, object>();
			__0x2267[ "ReadOnly" ] = readOnly;
			__0x2267[ "HighlightingScheme" ] = highlightingScheme;
			__0x2267[ "SelectLine" ] = selectLine;
			

			__0x2266.InitDocumentWindow( __0x2264, null, false, __0x2267 );
			__0x2266.PropertySet( "Data", text );
			__0x2266.WindowTitle = title;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2266, false, select );

			return __0x2264;
		}

		
		internal static DockWindow CreateWindow( DocumentInstance document )
		{
			DockWindow __0x2268 = null;

			if( document.IsEditorDocumentConfigurationExist )
			{
				try
				{
					__0x2268 = new WorkspaceWindow( EditorForm.Instance );
					( (WorkspaceWindow)__0x2268 ).InitFromConfig( document );
					
				}
				catch( Exception exc ) 
				{
					
					Log.Info( $"Warning: Layout for '{document.Name}' doesnt restored." );
					Log.Info( exc.Message );

					if( __0x2268 != null )
						__0x2268.Dispose();

					
					__0x2268 = __0x2352( document, document.ResultObject, false );
				}
			}
			else
			{
				
				__0x2268 = __0x2352( document, document.ResultObject, false );
			}

			return __0x2268;
		}

		static internal DocumentWindow CreateWindowImpl( DocumentInstance document, string objectPath, bool openAsSettings )
		{
			object __0x2269 = null;
			if( string.IsNullOrEmpty( objectPath ) )
			{
				__0x2269 = document.ResultComponent; 
			}
			else
			{
				__0x2269 = document.ResultComponent.Components.GetByPath( objectPath );
				if( __0x2269 == null )
					throw new Exception( $"Object with path '{objectPath}' for window '{document.Name}' not found." );
			}

			return __0x2352( document, __0x2269, openAsSettings );
		}

		static DocumentWindow __0x2352( DocumentInstance __0x2356, object __0x2357, bool __0x2358 )
		{
			Type __0x2270;
			if( __0x2358 )
				__0x2270 = typeof( ObjectSettingsWindow );
			else if( __0x2356.SpecialMode == "TextEditor" )
				__0x2270 = EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.TextEditorDocumentWindow" );
			else
				__0x2270 = GetDocumentWindowClass( __0x2357 ) ?? __0x2353( __0x2356.RealFileName ) ?? typeof( DocumentWindow );

			DocumentWindow __0x2271;
			if( typeof( CanvasBasedEditor ).IsAssignableFrom( __0x2270 ) )
			{
				var __0x2272 = (CanvasBasedEditor)Activator.CreateInstance( __0x2270 );
				var __0x2273 = new DocumentWindowWithViewport_CanvasBasedEditor( __0x2272 );
				__0x2272.owner = __0x2273;
				__0x2271 = __0x2273;
			}
			else
				__0x2271 = (DocumentWindow)Activator.CreateInstance( __0x2270 );

			__0x2271.InitDocumentWindow( __0x2356, __0x2357, __0x2358, null );
			return __0x2271;
		}

		static internal bool IsDocumentFileSupport( string documentFileName )
		{
			var __0x2274 = Path.GetExtension( documentFileName ).ToLower();
			if( __0x2274 != "" && __0x2274[ 0 ] == '.' )
				__0x2274 = __0x2274.Substring( 1 );

			if( ResourceManager.GetTypeByFileExtension( __0x2274 ) != null )
				return true;

			return DocumentWindowClassByFileExtension.ContainsKey( __0x2274 );
		}

		
		public static bool IsDocumentObjectSupport( object obj )
		{
			

			Type __0x2275 = GetDocumentWindowClass( obj );
			return __0x2275 != null && __0x2275 != typeof( DocumentWindow );
		}

		internal static Type GetDocumentWindowClass( object obj )
		{
			if( obj != null )
			{
				var __0x2276 = (EditorDocumentWindowAttribute[])obj.GetType().GetCustomAttributes( typeof( EditorDocumentWindowAttribute ), true );
				if( __0x2276.Length != 0 )
				{
					var __0x2277 = __0x2276[ 0 ];

					Type __0x2278;

					if( !string.IsNullOrEmpty( __0x2277.DocumentClassName ) )
					{
						var __0x2279 = EditorUtility.GetTypeByName( __0x2277.DocumentClassName );
						if( __0x2279 == null )
							Log.Warning( $"PreviewWindow: GetDocumentWindowClass: Class with name \"{__0x2277.DocumentClassName}\" is not found." );
						__0x2278 = __0x2279;
					}
					else
						__0x2278 = __0x2277.DocumentClass;

					if( __0x2278 != null && __0x2277.OnlyWhenRootComponent && obj is Component c && c.Parent != null )
						__0x2278 = null;

					if( __0x2278 != null )
						return __0x2278;
				}
			}
			return null;
		}

		static Type __0x2353( string __0x2359 )
		{
			var __0x2280 = Path.GetExtension( __0x2359 ).ToLower();
			if( __0x2280 != "" && __0x2280[ 0 ] == '.' )
				__0x2280 = __0x2280.Substring( 1 );

			Type __0x2281 = null;
			if( !string.IsNullOrEmpty( __0x2280 ) )
				DocumentWindowClassByFileExtension.TryGetValue( __0x2280, out __0x2281 );

			return __0x2281;
		}

		public static List<DocumentWindow> GetAllDocumentWindowsOfDocument( DocumentInstance document )
		{
			var __0x2282 = new List<DocumentWindow>();

			foreach( var __0x2347 in EditorForm.Instance.WorkspaceController.GetDockWindowsRecursive() )
			{
				var __0x2283 = __0x2347 as DocumentWindow;
				if( __0x2283 != null && __0x2283.Document == document )
					__0x2282.Add( __0x2283 );
			}

			return __0x2282;
		}

		public static DocumentInstance OpenStore( bool openBasicContent = false )
		{
			
			var __0x2284 = FindWindow<StoreDocumentWindow>();
			if( __0x2284 != null )
			{
				SelectDockWindow( __0x2284 );
				if( openBasicContent )
					__0x2284.LoadURL( StoreDocumentWindow.homeURLBasicContent );
				return __0x2284.Document;
			}

			var __0x2285 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2285 );

			var __0x2286 = new StoreDocumentWindow();
			__0x2286.InitDocumentWindow( __0x2285, null, false, null );
			if( openBasicContent )
				__0x2286.StartURL = StoreDocumentWindow.homeURLBasicContent;

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2286, false, true );

			return __0x2285;
		}

		public static void OpenOrCloseStore()
		{
			var __0x2287 = FindWindow<StoreDocumentWindow>();
			if( __0x2287 != null )
				__0x2287.Close();
			else
				OpenStore();
		}

		public static DocumentInstance OpenStartPage()
		{
			
			var __0x2288 = FindWindow<StartPageWindow>();
			if( __0x2288 != null )
			{
				SelectDockWindow( __0x2288 );
				return __0x2288.Document;
			}

			var __0x2289 = new DocumentInstance( "", null, "" );
			Documents.Add( __0x2289 );

			var __0x2290 = new StartPageWindow();
			__0x2290.InitDocumentWindow( __0x2289, null, false, null );

			EditorForm.Instance.WorkspaceController.AddDockWindow( __0x2290, false, true );

			return __0x2289;
		}

		public static void OpenOrCloseStartPage()
		{
			var __0x2291 = FindWindow<StartPageWindow>();
			if( __0x2291 != null )
				__0x2291.Close();
			else
				OpenStartPage();
		}

		public static void OpenStoresWindow()
		{
			var __0x2292 = FindWindow<StoresWindow>();
			if( __0x2292 != null )
				SelectDockWindow( __0x2292 );
		}

		public static void OpenPackages( string selectPackage, bool install )
		{
			var __0x2293 = FindWindow<StoresWindow>();
			if( __0x2293 != null )
			{
				SelectDockWindow( __0x2293 );
				if( !string.IsNullOrEmpty( selectPackage ) )
					__0x2293.NeedSelectPackage( selectPackage, install );
			}
		}

		public static Keys[] GetActionShortcuts( string name )
		{
			var __0x2294 = ProjectSettings.Get.ShortcutSettings.GetActionItem( name );
			if( __0x2294 != null )
				return __0x2294.ToArray();
			return null;
		}

		public static bool ProcessShortcuts( Keys keyCode, bool allowKeysWithoutModifiers )
		{
			Keys __0x2295 = keyCode | Control.ModifierKeys;

			var __0x2296 = new Dictionary<Keys, Component_ProjectSettings.ShortcutSettingsClass.ActionItem>( 64 );
			foreach( var __0x2348 in ProjectSettings.Get.ShortcutSettings.Actions )
			{
				if( __0x2348.Shortcut1 != Keys.None )
					__0x2296[ __0x2348.Shortcut1 ] = __0x2348;
				if( __0x2348.Shortcut2 != Keys.None )
					__0x2296[ __0x2348.Shortcut2 ] = __0x2348;
			}

			__0x2296.TryGetValue( __0x2295, out var actionItem );

			if( actionItem != null )
			{
				var __0x2297 = EditorActions.GetByName( actionItem.Name );
				if( __0x2297 != null && !__0x2297.CompletelyDisabled )
				{
					foreach( var __0x2349 in actionItem.ToArray() )
					{
						if( __0x2349 != Keys.None && __0x2349 == __0x2295 )
						{
							if( allowKeysWithoutModifiers || ( __0x2349 & ( Keys.Control | Keys.Shift | Keys.Alt ) ) != 0 )
							{
								var __0x2298 = EditorActionGetState( EditorAction.HolderEnum.ShortcutKey, __0x2297 );
								if( __0x2298.Enabled )
								{
									EditorActionClick( EditorAction.HolderEnum.ShortcutKey, __0x2297.Name );
									return true;
								}
							}
						}
					}
				}
			}

			return false;
		}

		public static Image GetImageForDispalyScale( Image image16px, Image image32px )
		{
			
			
			
			
			return RenderStandard.GetImageForDispalyScale( image16px, image32px );
		}

		public static Image GetImageForDispalyScale( string name )
		{
			var __0x2299 = (Bitmap)Properties.Resources.ResourceManager.GetObject( name + "_16", Properties.Resources.Culture );
			var __0x2300 = (Bitmap)Properties.Resources.ResourceManager.GetObject( name + "_32", Properties.Resources.Culture );

			return RenderStandard.GetImageForDispalyScale( __0x2299, __0x2300 );
		}

		public delegate void GetObjectToCreateByContentBrowserItemEventDelegate( ContentBrowser.Item __0x2360, ref Metadata.TypeInfo __0x2361, ref string __0x2362, ref object __0x2363 );
		public static event GetObjectToCreateByContentBrowserItemEventDelegate GetObjectToCreateByContentBrowserItemEvent;

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetObjectToCreateByContentBrowserItem( ContentBrowser.Item item )
		{
			Metadata.TypeInfo __0x2301 = null;
			string __0x2302 = "";
			object __0x2303 = null;
			var __0x2304 = "";
			
			

			

			
			var __0x2305 = item as ContentBrowserItem_Type;
			if( __0x2305 != null )
			{
				var __0x2306 = __0x2305.Type;

				

				if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x2306 ) && !__0x2306.Abstract )
				{
					__0x2301 = __0x2306;
					
				}
			}

			
			
			
			
			

			
			
			
			

			
			var __0x2307 = item as ContentBrowserItem_File;
			if( __0x2307 != null && !__0x2307.IsDirectory )
			{
				
				var __0x2308 = Path.GetExtension( __0x2307.FullPath );
				if( ResourceManager.GetTypeByFileExtension( __0x2308 ) != null )
				{
					var __0x2309 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x2307.FullPath ) );
					var __0x2310 = __0x2309?.PrimaryInstance?.ResultComponent?.GetProvidedType();
					if( __0x2310 != null )
					{
						__0x2301 = __0x2310;
						__0x2302 = __0x2309.Name;
					}
				}
			}

			
			var __0x2311 = item as ContentBrowserItem_Component;
			if( __0x2311 != null )
			{
				var __0x2312 = __0x2311.Component;

				if( __0x2312.ParentRoot.HierarchyController != null &&
					__0x2312.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
				{
					__0x2301 = __0x2312.GetProvidedType();
					if( __0x2301 != null )
						__0x2302 = __0x2301.Name;
				}
				
				
				
				
				

				
				
				
				
			}

			
			var __0x2313 = item as StoresWindow.ContentBrowserItem_StoreItem;
			if( __0x2313 != null )
			{
				var __0x2314 = Component_Scene_DocumentWindow.CreateObjectsMode == Component_Scene_DocumentWindow.CreateObjectsModeEnum.Drop;
				var (type, file) = __0x2313.GetFileToDrop( __0x2314 );

				switch( type )
				{
				case PackageManager.PackageInfo.FileTypeToDrop.Mesh:
					__0x2301 = MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) );
					__0x2302 = file;
					__0x2304 = __0x2313.Text;
					break;

				case PackageManager.PackageInfo.FileTypeToDrop.Environment:
					{
						var __0x2315 = ResourceManager.LoadResource<Component>( file, out _ );
						if( __0x2315 != null )
							__0x2301 = __0x2315.GetProvidedType();
					}
					break;
				}
			}

			GetObjectToCreateByContentBrowserItemEvent?.Invoke( item, ref __0x2301, ref __0x2302, ref __0x2303 );

			return (__0x2301, __0x2302, __0x2303, __0x2304);
		}

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetObjectToCreateByDropData( DragEventArgs e )
		{
			var __0x2316 = ContentBrowser.GetDroppingItemData( e.Data );
			if( __0x2316 != null )
			{
				var __0x2317 = __0x2316.Item;

				var __0x2318 = __0x2317;
				if( __0x2318 != null )
					return GetObjectToCreateByContentBrowserItem( __0x2318 );
			}

			return (null, "", null, "");
		}

		public static ContentBrowser.Item CreateObjectGetSelectedContentBrowserItem()
		{
			var __0x2319 = new List<DockWindow>();
			{
				var __0x2320 = FindWindow<StoresWindow>().ContentBrowser1;
				if( WinFormsUtility.IsControlVisibleInHierarchy( __0x2320 ) && WinFormsUtility.IsPhysicalVisibleCheckBy5Points( __0x2320 ) )
				{
					__0x2319.Add( FindWindow<StoresWindow>() );
					__0x2319.Add( FindWindow<ResourcesWindow>() );
				}
				else
				{
					__0x2319.Add( FindWindow<ResourcesWindow>() );
					__0x2319.Add( FindWindow<StoresWindow>() );
				}
			}

			foreach( var __0x2350 in __0x2319 )
			{
				var __0x2321 = __0x2350.GetObjectsInFocus().Objects;
				if( __0x2321.Length == 1 )
				{
					object __0x2322 = __0x2321[ 0 ];

					var __0x2323 = __0x2322 as ContentBrowser.Item;
					if( __0x2323 != null )
						return __0x2323;
				}
			}

			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			

			return null;
		}

		public static (Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) GetSelectedObjectToCreate()
		{
			var __0x2324 = new List<DockWindow>();
			{
				var __0x2325 = FindWindow<StoresWindow>().ContentBrowser1;
				if( WinFormsUtility.IsControlVisibleInHierarchy( __0x2325 ) && WinFormsUtility.IsPhysicalVisibleCheckBy5Points( __0x2325 ) )
				{
					__0x2324.Add( FindWindow<StoresWindow>() );
					__0x2324.Add( FindWindow<ResourcesWindow>() );
				}
				else
				{
					__0x2324.Add( FindWindow<ResourcesWindow>() );
					__0x2324.Add( FindWindow<StoresWindow>() );
				}
			}

			foreach( var __0x2351 in __0x2324 )
			{
				var __0x2326 = __0x2351.GetObjectsInFocus().Objects;
				if( __0x2326.Length == 1 )
				{
					object __0x2327 = __0x2326[ 0 ];

					var __0x2328 = __0x2327 as ContentBrowser.Item;
					if( __0x2328 != null )
					{
						var __0x2329 = GetObjectToCreateByContentBrowserItem( __0x2328 );
						if( __0x2329.objectType != null )
							return __0x2329;
					}
				}
			}

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			return (null, "", null, "");
		}

		public static void ResetSelectedObjectToCreate()
		{
			
			{
				var __0x2330 = FindWindow<ResourcesWindow>();
				__0x2330.ContentBrowser1.SelectItems( null, false, true );
			}

			
			{
				var __0x2331 = FindWindow<StoresWindow>();
				__0x2331.ContentBrowser1.SelectItemsList( null, true );
			}
		}

		public static bool DarkTheme
		{
			get { return EditorForm.Instance != null && EditorForm.Instance.DarkTheme; }
		}

		public static void ShowTips()
		{
			var __0x2332 = EditorForm.Instance.WorkspaceController;
			var __0x2333 = __0x2332.FindWindow<TipsWindow>();
			if( __0x2333 != null )
				__0x2332.SelectDockWindow( __0x2333 );
			else
			{
				var __0x2334 = new DocumentInstance( "", null, "" );
				Documents.Add( __0x2334 );

				var __0x2335 = new TipsWindow();
				__0x2335.InitDocumentWindow( __0x2334, null, false, null );

				__0x2332.AddDockWindow( __0x2335, true, true );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents main application class of the editor.
	/// </summary>
	public static class EditorApp
	{
		[DllImport( "user32.dll" )]
		internal static extern bool SetProcessDPIAware();

		
		public static void Main()
		{
			if( Debugger.IsAttached )
			{
				__0x2366();
			}
			else
			{
				try
				{
					__0x2366();
				}
				catch( Exception e )
				{
					Log.FatalAsException( e.ToString() );
				}
			}
		}

		static void __0x2366()
		{
#if !DEPLOY
			if( EditorCommandLineTools.Process() )
				return;
#endif

			if( Environment.OSVersion.Version.Major >= 6 )
			{
				try
				{
					
					
					
					
					
					
					

					SetProcessDPIAware();
				}
				catch { }
			}

			EngineApp.ApplicationType = EngineApp.ApplicationTypeEnum.Editor;

			Log.Handlers.WarningHandler += delegate ( string __0x2367, ref bool __0x2368, ref bool __0x2369 )
			{
				SplashForm.Instance?.Hide();
			};
			Log.Handlers.ErrorHandler += delegate ( string __0x2370, ref bool __0x2371, ref bool __0x2372 )
			{
				SplashForm.Instance?.Hide();
			};
			Log.Handlers.FatalHandler += delegate ( string __0x2373, string __0x2374, ref bool __0x2375 )
			{
				SplashForm.Instance?.Hide();
			};

			
			ProjectUtility.GetDefaultProjectPaths( out string projectDirectory, out string userSettingsDirectory );

			if( !VirtualFileSystem.Init( "user:Logs/Editor.log", true, projectDirectory, userSettingsDirectory ) )
				return;

			
			EngineApp.InitSettings.ConfigVirtualFileName = "user:Configs/Editor.config";

			
			
			
			

			
			
			
			
			
			
			

			EngineApp.Init();
			
			

			
			
			

			
			
			
			
			
			

			

			
			
			
			
			
			
			

			
			
			
			
			
			

			
			Application.SetCompatibleTextRenderingDefault( false );

			EditorForm __0x2364 = new EditorForm();
			__0x2364.Show();
			while( __0x2364.Created )
			{
				

				Application.DoEvents();

				if( EditorForm.Instance == null || EngineApp.Instance == null || EngineApp.Closing )
					break;

				EditorForm.Instance.RenderViewports( out bool existActiveViewports );
				if( !existActiveViewports && EngineApp.Instance != null )
					EngineApp.MessageLoopWaitMessage();

				
				
				

				
				
				
				
			}
			

			EngineApp.Shutdown();
			Log.DumpToFile( "Program END\r\n" );
			VirtualFileSystem.Shutdown();

			EditorAPI.GetRestartApplication( out var needRestart, out _ );
			if( needRestart )
			{
				string __0x2365 = Process.GetCurrentProcess().MainModule.FileName;
				Process.Start( new ProcessStartInfo( __0x2365 ) { UseShellExecute = true } );
				
			}
			else
			{
				
				
				Application.Exit();
			}

			
			
			
			
			
			
			

			
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			

			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			
			

			
			

			

			

			

			
			
			
			
			

			
			

			
			
			

			
			
			
			
			
			

		}
	}
}





namespace NeoAxis.Editor
{
	static class EditorAssembly
	{
		public static void Init()
		{
			var __0x2376 = AssemblyUtility.LoadAssemblyByRealFileName( "NeoAxis.Core.Editor.dll", false, false );

			var __0x2377 = __0x2376.GetType( "NeoAxis.Editor.EditorAssemblyInterfaceImpl" );
			if( __0x2377 == null )
				Log.Fatal( "EditorAssembly: Init: Type \"NeoAxis.Editor.EditorAssemblyInterfaceImpl\" is not exists." );

			var __0x2378 = __0x2377.GetMethod( "Init", BindingFlags.Public | BindingFlags.Static );
			if( __0x2378 == null )
				Log.Fatal( "EditorAssembly: Init: \"Init\" method of \"NeoAxis.Editor.EditorAssemblyInterfaceImpl\" type is not exists." );

			__0x2378.Invoke( null, new object[ 0 ] );
		}
	}

	

	internal abstract class EditorAssemblyInterface
	{
		static EditorAssemblyInterface __0x2379;
		public static EditorAssemblyInterface Instance { get { return __0x2379; } }
		protected EditorAssemblyInterface() { __0x2379 = this; }

		

		public abstract void SetDarkTheme();

		public abstract IScriptPrinter ScriptPrinterNew();

		public abstract Dictionary<string, Type> DocumentWindowClassByFileExtension { get; }

		public abstract void UpdateProjectFileForCSharpEditor( ICollection<string> addFiles, ICollection<string> removeFiles );

		public abstract void InitializeWPFApplicationAndScriptEditor();

		public abstract Type GetTypeByName( string typeName );

		public interface ITextEditorControl
		{
			string EditorText { get; set; }
			bool EditorReadOnly { get; set; }
			bool EditorWordWrap { get; set; }
			bool Border { get; set; }

			int SelectionStart { get; set; }
			int SelectionLength { get; set; }
			void Select( int start, int length );

			void ScrollToHome();
			void ScrollToEnd();
		}

		public abstract ITextEditorControl CreateTextEditorControl();

		

		public interface IScriptPrinter
		{
			Component_Image PrintToTexture( string code, Vector2I size );
		}
	}
}





#if !DEPLOY
namespace NeoAxis.Editor
{
	static class EditorCommandLineTools
	{
		public static bool Process()
		{
			if( SystemSettings.CommandLineParameters.ContainsKey( "-prepareProductAssetsAndroid" ) )
			{
				__0x2488.Process();
				return true;
			}

			if( SystemSettings.CommandLineParameters.ContainsKey( "-platformProjectPatch" ) )
			{
				PlatformProjectPatch.Process();
				return true;
			}

			return false;
		}

		

		static class __0x2488
		{
			static string __0x2380;
			static string __0x2381;
			
			static string __0x2382;
			static bool __0x2383;
			static bool __0x2384;
			static bool __0x2385;

			static readonly DateTime __0x2386 = new DateTime( 2001, 1, 1, 1, 1, 1 );

			

			static void __0x2475( string __0x2478 )
			{
				Directory.CreateDirectory( __0x2478 );

				
				
				
			}

			static void __0x2476( string __0x2479, string __0x2480, bool __0x2481 )
			{
				File.Copy( __0x2479, __0x2480, __0x2481 );

				
				
				
			}

			public static void CopyFolder( string sourceFolder, string destFolder, Range progressRange, IEnumerable<string> excludePaths = null )
			{
				if( !Directory.Exists( sourceFolder ) )
					return;

				__0x2475( destFolder );

				IEnumerable<FileInfo> __0x2387 = new DirectoryInfo( sourceFolder ).GetFiles( "*.*", SearchOption.AllDirectories ).ToList();
				IEnumerable<string> __0x2388 = Directory.GetDirectories( sourceFolder, "*", SearchOption.AllDirectories ).ToList();

				
				if( excludePaths != null )
				{
					__0x2387 = __0x2387.Where( __0x2482 => excludePaths.All( __0x2483 => !__0x2482.FullName.Contains( __0x2483 ) ) );
					__0x2388 = __0x2388.Where( __0x2484 => excludePaths.All( __0x2485 => !__0x2484.Contains( __0x2485 ) ) );
				}

				long __0x2389 = 0;
				foreach( var __0x2458 in __0x2387 )
					__0x2389 += __0x2458.Length;

				foreach( string __0x2459 in __0x2388 )
				{
					if( Directory.Exists( __0x2459 ) )
						__0x2475( __0x2459.Replace( sourceFolder, destFolder ) );
				}

				long __0x2390 = 0;
				foreach( var __0x2460 in __0x2387 )
				{
					if( File.Exists( __0x2460.FullName ) )
					{
						var __0x2391 = __0x2460.FullName.Replace( sourceFolder, destFolder );
						__0x2476( __0x2460.FullName, __0x2391, true );
					}

					
					
					
					
					

					__0x2390 += __0x2460.Length;
					
				}
			}

			static void __0x2477( string __0x2486, string __0x2487 )
			{
				
				{
					string __0x2392 = __0x2381;
					string __0x2393 = Path.Combine( __0x2382, "Assets" );

					var __0x2394 = new List<string>();
					{
						__0x2394.Add( Path.Combine( __0x2392, @"Base\Tools" ) );
						__0x2394.Add( Path.Combine( __0x2392, @"Base\Learning" ) );

						var __0x2395 = __0x2487.Trim();
						if( !string.IsNullOrEmpty( __0x2395 ) )
						{
							foreach( var __0x2461 in __0x2395.Split( new char[] { ';', '\r', '\n' } ) )
							{
								var __0x2396 = __0x2461.Trim( ' ', '\t' );
								if( !string.IsNullOrEmpty( __0x2396 ) )
									__0x2394.Add( Path.Combine( __0x2392, __0x2396 ) );
							}
						}
					}

					bool __0x2397 = false;

					var __0x2398 = __0x2486.Trim();
					if( !string.IsNullOrEmpty( __0x2398 ) )
					{
						foreach( var __0x2462 in __0x2398.Split( new char[] { ';', '\r', '\n' } ) )
						{
							var __0x2399 = __0x2462.Trim( ' ', '\t' );
							if( !string.IsNullOrEmpty( __0x2399 ) )
							{
								var __0x2400 = Path.Combine( __0x2381, __0x2399 );
								var __0x2401 = Path.Combine( __0x2382, "Assets", __0x2399 );
								var __0x2402 = new Range( 0.0, 0.0 );

								CopyFolder( __0x2400, __0x2401, __0x2402, __0x2394 );

								
								
							}
						}

						__0x2397 = true;
					}

					if( !__0x2397 )
						CopyFolder( __0x2381, __0x2393, new Range( 0.0, 0.3 ), __0x2394 );
				}

				
				{
					string __0x2403 = Path.Combine( __0x2380, "Caches" );
					string __0x2404 = Path.Combine( __0x2382, "Caches" );

					var __0x2405 = new List<string>();
					if( !__0x2384 )
						__0x2405.Add( @"Caches\ShaderCache" );
					if( !__0x2385 )
						__0x2405.Add( @"Caches\Files" );

					CopyFolder( __0x2403, __0x2404, new Range( 0.3, 0.4 ), __0x2405 );
				}

				
				{
					string __0x2406 = Path.Combine( __0x2380, "Binaries" );
					string __0x2407 = Path.Combine( __0x2382, "Binaries" );

					if( !Directory.Exists( __0x2407 ) )
						__0x2475( __0x2407 );

					__0x2476( Path.Combine( __0x2406, "NeoAxis.DefaultSettings.config" ), Path.Combine( __0x2407, "NeoAxis.DefaultSettings.config" ), true );
				}

				
				
				
				

				
				

				

				
				
				

				
				
				
				
				
				
				
				
				

				
				{
					var __0x2408 = Path.Combine( __0x2382, "Project.zip" );
					var __0x2409 = __0x2383 ? CompressionLevel.Optimal : CompressionLevel.NoCompression;

					if( File.Exists( __0x2408 ) )
						File.Delete( __0x2408 );

					var __0x2410 = new List<string>();
					__0x2410.Add( Path.Combine( __0x2382, "Assets" ) );
					__0x2410.Add( Path.Combine( __0x2382, @"Binaries\NeoAxis.DefaultSettings.config" ) );
					__0x2410.Add( Path.Combine( __0x2382, "Caches" ) );

					using( var __0x2411 = ZipFile.Open( __0x2408, ZipArchiveMode.Create ) )
					{
						foreach( var __0x2463 in __0x2410 )
						{
							if( Directory.Exists( __0x2463 ) )
							{
								foreach( var __0x2464 in Directory.GetFiles( __0x2463, "*.*", SearchOption.AllDirectories ) )
								{
									
									var __0x2412 = File.ReadAllBytes( __0x2464 );

									
									var __0x2413 = __0x2464.Substring( __0x2382.Length + 1 );
									var __0x2414 = __0x2411.CreateEntry( __0x2413, __0x2409 );
									__0x2414.LastWriteTime = new DateTimeOffset( __0x2386 );
									using( var __0x2415 = __0x2414.Open() )
										__0x2415.Write( __0x2412, 0, __0x2412.Length );
								}
							}
							else if( File.Exists( __0x2463 ) )
							{
								
								var __0x2416 = File.ReadAllBytes( __0x2463 );

								
								var __0x2417 = __0x2463.Substring( __0x2382.Length + 1 );
								var __0x2418 = __0x2411.CreateEntry( __0x2417, __0x2409 );
								__0x2418.LastWriteTime = new DateTimeOffset( __0x2386 );
								using( var __0x2419 = __0x2418.Open() )
									__0x2419.Write( __0x2416, 0, __0x2416.Length );
							}
						}
					}

					
					{
						string __0x2420 = "";

						using( var __0x2421 = File.Open( __0x2408, FileMode.Open ) )
						{
							using( var __0x2422 = System.Security.Cryptography.SHA1.Create() )
							{
								var __0x2423 = __0x2422.ComputeHash( __0x2421 );

								var __0x2424 = new StringBuilder( __0x2423.Length * 2 );
								foreach( byte __0x2465 in __0x2423 )
									__0x2424.Append( __0x2465.ToString( "X2" ) );

								__0x2420 = __0x2424.ToString();
							}
						}

						var __0x2425 = __0x2408 + ".hash";
						File.WriteAllText( __0x2425, __0x2420 );
					}
				}

				
				
				{
					var __0x2426 = Path.Combine( __0x2382, "Assets" );
					if( Directory.Exists( __0x2426 ) )
						Directory.Delete( __0x2426, true );

					__0x2426 = Path.Combine( __0x2382, "Caches" );
					if( Directory.Exists( __0x2426 ) )
						Directory.Delete( __0x2426, true );

					__0x2426 = Path.Combine( __0x2382, "Binaries" );
					if( Directory.Exists( __0x2426 ) )
						Directory.Delete( __0x2426, true );

					
					
					

					
					
					
				}

			}

			public static void Process()
			{
				Console.WriteLine( "NeoAxis.Editor.exe: PrepareProductAssetsAndroid: Preparing Project.zip..." );


				if( !SystemSettings.CommandLineParameters.TryGetValue( "-prepareProductAssetsAndroid", out var productFileName ) )
					return;

				
				
				
				
				

				if( !SystemSettings.CommandLineParameters.TryGetValue( "-destinationFolder", out var destinationFolder ) )
				{
					Log.Warning( "PrepareProductAssetsAndroid: -destinationFolder is not specified." );
					return;
				}


				__0x2380 = Path.GetFullPath( Path.Combine( Path.GetDirectoryName( Assembly.GetExecutingAssembly().Location ), ".." ) );
				__0x2381 = Path.Combine( __0x2380, "Assets" );
				var __0x2427 = Path.Combine( __0x2381, productFileName );
				__0x2382 = destinationFolder;


				var __0x2428 = TextBlockUtility.LoadFromRealFile( __0x2427, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					Log.Warning( $"Unable to load \'{__0x2427 }\'. " + error );
					return;
				}

				

				try
				{
					var __0x2429 = Path.Combine( __0x2382, "Project.zip" );
					if( File.Exists( __0x2429 ) )
						File.Delete( __0x2429 );

					__0x2429 = Path.Combine( __0x2382, "Project.zip.hash" );
					if( File.Exists( __0x2429 ) )
						File.Delete( __0x2429 );

					__0x2429 = Path.Combine( __0x2382, "Assets" );
					if( Directory.Exists( __0x2429 ) )
						Directory.Delete( __0x2429, true );

					__0x2429 = Path.Combine( __0x2382, "Binaries" );
					if( Directory.Exists( __0x2429 ) )
						Directory.Delete( __0x2429, true );

					__0x2429 = Path.Combine( __0x2382, "Caches" );
					if( Directory.Exists( __0x2429 ) )
						Directory.Delete( __0x2429, true );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return;
				}

				

				var __0x2430 = __0x2428.Children[ 0 ];

				var __0x2431 = __0x2430.GetAttribute( "SelectedAssets" );
				var __0x2432 = __0x2430.GetAttribute( "ExcludedAssets" );

				if( !bool.TryParse( __0x2430.GetAttribute( "CompressData", "True" ), out __0x2383 ) )
					__0x2383 = true;
				if( !bool.TryParse( __0x2430.GetAttribute( "FileCache", "True" ), out __0x2385 ) )
					__0x2385 = true;
				if( !bool.TryParse( __0x2430.GetAttribute( "ShaderCache", "True" ), out __0x2384 ) )
					__0x2384 = true;

				

				try
				{
					__0x2477( __0x2431, __0x2432 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return;
				}

				
			}
		}

		

		public static class PlatformProjectPatch
		{
			public static bool Process( string destFile, string baseProjectFileName, out string error, out bool changed )
			{
				if( !Path.IsPathRooted( destFile ) )
					destFile = Path.Combine( Directory.GetCurrentDirectory(), destFile );
				if( !Path.IsPathRooted( baseProjectFileName ) )
					baseProjectFileName = Path.Combine( Directory.GetCurrentDirectory(), baseProjectFileName );

				string __0x2433 = Path.GetDirectoryName( destFile );

				error = "";
				changed = false;

				if( !File.Exists( destFile ) )
				{
					error = "Target project file not exists. File: " + destFile;
					return false;
				}

				if( !File.Exists( baseProjectFileName ) )
				{
					error = "Base project file not exists. File: " + baseProjectFileName;
					return false;
				}

				var __0x2434 = new Dictionary<string, int>();
				{
					var __0x2435 = new XmlDocument();
					__0x2435.Load( baseProjectFileName );

					var __0x2436 = new XmlNamespaceManager( __0x2435.NameTable );
					__0x2436.AddNamespace( "df", __0x2435.DocumentElement.NamespaceURI );

					
					{
						var __0x2437 = true;
						foreach( XmlNode __0x2466 in __0x2435.GetElementsByTagName( "EnableDefaultCompileItems" ) )
						{
							if( !string.IsNullOrEmpty( __0x2466.InnerText ) )
							{
								__0x2437 = bool.Parse( __0x2466.InnerText );
								break;
							}
						}

						if( __0x2437 )
						{
							foreach( var __0x2467 in Directory.GetFiles( __0x2433, "*.cs", SearchOption.AllDirectories ) )
							{
								var __0x2438 = __0x2467.Replace( __0x2433 + "\\", "" );
								__0x2434[ __0x2438 ] = 1;
							}
						}
					}

					
					{
						var __0x2439 = __0x2435.SelectNodes( "//df:Compile", __0x2436 );
						foreach( XmlNode __0x2468 in __0x2439 )
						{
							var __0x2440 = __0x2468.Attributes[ "Include" ];
							if( __0x2440 != null )
							{
								var __0x2441 = __0x2440.Value;
								__0x2434[ __0x2441 ] = 1;
							}
						}
					}

					
					{
						var __0x2442 = __0x2435.SelectNodes( "//df:Compile", __0x2436 );
						foreach( XmlNode __0x2469 in __0x2442 )
						{
							var __0x2443 = __0x2469.Attributes[ "Remove" ];
							if( __0x2443 != null )
							{
								var __0x2444 = __0x2443.Value;

								if( __0x2444.Length >= 2 && __0x2444[ __0x2444.Length - 2 ] == '*' && __0x2444[ __0x2444.Length - 1 ] == '*' )
								{
									var __0x2445 = __0x2444.Substring( 0, __0x2444.Length - 2 );

									again:;
									foreach( var __0x2470 in __0x2434.Keys )
									{
										if( __0x2470.Length >= __0x2445.Length && __0x2470.Substring( 0, __0x2445.Length ) == __0x2445 )
										{
											__0x2434.Remove( __0x2470 );
											goto again;
										}
									}
								}
								else
									__0x2434.Remove( __0x2444 );
							}
						}
					}

				}

				var __0x2446 = new XmlDocument();
				__0x2446.Load( destFile );

				var __0x2447 = new XmlNamespaceManager( __0x2446.NameTable );
				__0x2447.AddNamespace( "df", __0x2446.DocumentElement.NamespaceURI );

				

				XmlNode __0x2448 = null;
				{
					var __0x2449 = __0x2446.SelectNodes( "//df:Compile", __0x2447 );
					
					foreach( XmlNode __0x2471 in __0x2449 )
					{
						__0x2448 = __0x2471.ParentNode;
						break;
					}
				}

				
				{
					var __0x2450 = new List<XmlNode>();

					var __0x2451 = __0x2446.SelectNodes( "//df:Compile", __0x2447 );
					
					foreach( XmlNode __0x2472 in __0x2451 )
					{
						var __0x2452 = __0x2472.Attributes[ "Include" ];
						if( __0x2452 != null )
						{
							var __0x2453 = __0x2452.Value;
							__0x2450.Add( __0x2472 );
						}
					}

					foreach( var __0x2473 in __0x2450.GetReverse() )
						__0x2473.ParentNode.RemoveChild( __0x2473 );
				}

				

				foreach( var __0x2474 in __0x2434.Keys )
				{
					var __0x2454 = __0x2446.CreateNode( XmlNodeType.Element, "Compile", null );
					var __0x2455 = __0x2446.CreateAttribute( "Include" );
					__0x2455.Value = __0x2474;
					__0x2454.Attributes.Append( __0x2455 );
					__0x2448.AppendChild( __0x2454 );
				}

				

				var __0x2456 = File.ReadAllText( destFile, Encoding.UTF8 );

				

				__0x2446.Save( destFile );

				var __0x2457 = File.ReadAllText( destFile );
				
				__0x2457 = __0x2457.Replace( " xmlns=\"\"", "" );

				File.WriteAllText( destFile, __0x2457 );

				changed = __0x2456 != __0x2457;

				return true;
			}

			public static void Process()
			{
				Console.WriteLine( "NeoAxis.Editor.exe: PlatformProjectPatch." );
				Console.WriteLine();

				if( !SystemSettings.CommandLineParameters.TryGetValue( "-platformProjectPatch", out var destFile ) )
					return;
				if( !SystemSettings.CommandLineParameters.TryGetValue( "-baseProject", out var baseProjectFileName ) )
				{
					Log.Warning( "PlatformProjectPatch: -baseProject is not specified." );
					return;
				}

				if( !Process( destFile, baseProjectFileName, out var error, out var changed ) )
				{
					Log.Warning( error );
					return;
				}

				if( changed )
					Console.WriteLine( "Done. The file was changed." );
				else
					Console.WriteLine( "Done. No changes." );
			}
		}
	}
}

#endif




namespace NeoAxis.Editor
{
	

	public class EditorDocumentWindowAttribute : Attribute
	{
		Type __0x2489;
		string __0x2490;
		bool __0x2491;

		public EditorDocumentWindowAttribute( Type documentClass, bool onlyWhenRootComponent = false )
		{
			this.__0x2489 = documentClass;
			this.__0x2491 = onlyWhenRootComponent;
		}

		public EditorDocumentWindowAttribute( string documentClassName, bool onlyWhenRootComponent = false )
		{
			this.__0x2490 = documentClassName;
			this.__0x2491 = onlyWhenRootComponent;
		}

		public Type DocumentClass
		{
			get { return __0x2489; }
		}

		public string DocumentClassName
		{
			get { return __0x2490; }
		}

		public bool OnlyWhenRootComponent
		{
			get { return __0x2491; }
		}
	}

	

	[AttributeUsage( AttributeTargets.Class, AllowMultiple = true )]
	public class EditorSettingsCellAttribute : Attribute
	{
		Type __0x2492;
		bool __0x2493;

		public EditorSettingsCellAttribute( Type settingsCellClass, bool multiselectionSupport = false )
		{
			this.__0x2492 = settingsCellClass;
			this.__0x2493 = multiselectionSupport;
		}

		public Type SettingsCellClass
		{
			get { return __0x2492; }
		}

		public bool MultiselectionSupport
		{
			get { return __0x2493; }
		}
	}

	

	public class EditorPreviewControlAttribute : Attribute
	{
		Type __0x2494;
		string __0x2495;

		public EditorPreviewControlAttribute( Type previewClass )
		{
			this.__0x2494 = previewClass;
		}

		public EditorPreviewControlAttribute( string previewClassName )
		{
			this.__0x2495 = previewClassName;
		}

		public Type PreviewClass
		{
			get { return __0x2494; }
		}

		public string PreviewClassName
		{
			get { return __0x2495; }
		}
	}

	

	public class EditorPreviewImageAttribute : Attribute
	{
		Type __0x2496;
		string __0x2497;

		public EditorPreviewImageAttribute( Type previewClass )
		{
			this.__0x2496 = previewClass;
		}

		public EditorPreviewImageAttribute( string previewClassName )
		{
			this.__0x2497 = previewClassName;
		}

		public Type PreviewClass
		{
			get { return __0x2496; }
		}

		public string PreviewClassName
		{
			get { return __0x2497; }
		}
	}

	

	public class EditorNewObjectSettingsAttribute : Attribute
	{
		Type __0x2498;

		public EditorNewObjectSettingsAttribute( Type settingsClass )
		{
			this.__0x2498 = settingsClass;
		}

		public Type SettingsClass
		{
			get { return __0x2498; }
		}
	}

	

	public class EditorNewObjectCellAttribute : Attribute
	{
		Type __0x2499;

		public EditorNewObjectCellAttribute( Type cellClass )
		{
			this.__0x2499 = cellClass;
		}

		public Type CellClass
		{
			get { return __0x2499; }
		}
	}

	

	
	public enum EditorRenderSelectionState
	{
		None,
		CanSelect,
		Selected,
	}

	

	/// <summary>
	/// Provides data to implement drag and drop functionaly for references.
	/// </summary>
	public class DragDropSetReferenceData
	{
		public DocumentInstance document;
		public Component[] controlledComponents;
		public object[] propertyOwners;
		
		public Metadata.Property property;
		public object[] indexers;

		public void SetProperty( string[] referenceValues )
		{
			EditorUtility.SetPropertyReference( document, propertyOwners, property, indexers, referenceValues );
		}

		
		
		
		
		
		
		
		
	}

	

	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	

	

	/// <summary>
	/// Auxiliary class to work with clipboard of the system.
	/// </summary>
	public abstract class EditorExtensions
	{
		public abstract void Register();
	}

	

	/// <summary>
	/// Represents a collection of focuced objects in the document window.
	/// </summary>
	public class ObjectsInFocus
	{
		
		public DocumentWindow DocumentWindow;
		public object[] Objects;

		public ObjectsInFocus(  DocumentWindow documentWindow, object[] objects )
		{
			
			this.DocumentWindow = documentWindow;
			this.Objects = objects;
		}
	}

	

	[AttributeUsage( AttributeTargets.Class, AllowMultiple = true )]
	public class AddToResourcesWindowAttribute : Attribute
	{
		string __0x2500;
		double __0x2501;
		bool __0x2502;

		public AddToResourcesWindowAttribute( string path, double sortOrder = 0, bool disabled = false )
		{
			this.__0x2500 = path;
			this.__0x2501 = sortOrder;
			this.__0x2502 = disabled;
		}

		public string Path
		{
			get { return __0x2500; }
		}

		public double SortOrder
		{
			get { return __0x2501; }
		}

		public bool Disabled
		{
			get { return __0x2502; }
		}

		
		

		
		
		
		
		

		
		
		
		

		
		
		
		
	}

	

	/// <summary>
	/// Data for storing in clipboard of the system to implement cut/copy/paste functionality.
	/// </summary>
	public class ObjectCutCopyPasteData
	{
		public DocumentWindow documentWindow;
		
		public bool cut;
		public object[] objects;

		public ObjectCutCopyPasteData( DocumentWindow documentWindow, bool cut, object[] objects )
		{
			this.documentWindow = documentWindow;
			this.cut = cut;
			this.objects = objects;
		}
	}

	

	/// <summary>
	/// Auxiliary class to work with clipboard of the system.
	/// </summary>
	public static class ClipboardManager
	{
		static object __0x2503;

		public static void CopyToClipboard<T>( T objectToCopy ) where T : class
		{
			var __0x2504 = DataFormats.GetFormat( typeof( T ).FullName );

			__0x2503 = objectToCopy;

			var __0x2505 = new DataObject();
			__0x2505.SetData( __0x2504.Name, false, "NeoAxis.ClipboardManager" );
			Clipboard.SetDataObject( __0x2505, false );
		}

		public static bool CheckAvailableInClipboard<T>() where T : class
		{
			if( __0x2503 != null && __0x2503 is T )
			{
				var __0x2506 = Clipboard.GetDataObject();
				var __0x2507 = DataFormats.GetFormat( typeof( T ).FullName );

				if( __0x2506.GetDataPresent( __0x2507.Name ) )
					return true;
			}
			return false;
		}

		public static T GetFromClipboard<T>() where T : class
		{
			if( __0x2503 != null && __0x2503 is T )
			{
				var __0x2508 = Clipboard.GetDataObject();
				var __0x2509 = DataFormats.GetFormat( typeof( T ).FullName );

				if( __0x2508.GetDataPresent( __0x2509.Name ) && __0x2508.GetData( __0x2509.Name ) as string == "NeoAxis.ClipboardManager" )
				{
					var __0x2510 = __0x2503;
					__0x2503 = null;
					return (T)__0x2510;
				}
			}
			return null;
		}

		public static void Clear()
		{
			Clipboard.Clear();
		}
	}

	

	/// <summary>
	/// An interface provides the ability to inform the change document to objects.
	/// </summary>
	public interface IComponent_EditorUpdateWhenDocumentModified
	{
		void EditorUpdateWhenDocumentModified();
	}

	

	/// <summary>
	/// An attribute to mark dependent property from another. Used when working with the list of properties in the Settings Window.
	/// </summary>
	public class UndoDependentPropertyAttribute : Attribute
	{
		string __0x2511;

		public UndoDependentPropertyAttribute( string propertyName )
		{
			this.__0x2511 = propertyName;
		}

		public string PropertyName
		{
			get { return __0x2511; }
		}
	}

	

	/// <summary>
	/// An attribute to mark components to show warning when component creating if another component with same type already exists.
	/// </summary>
	public class WhenCreatingShowWarningIfItAlreadyExistsAttribute : Attribute
	{
		public WhenCreatingShowWarningIfItAlreadyExistsAttribute()
		{
		}
	}

	

	public class RestoreDockWindowAfterEditorReloadAttribute : Attribute
	{
		public RestoreDockWindowAfterEditorReloadAttribute()
		{
		}
	}

	

	public enum StoreProductLicense
	{
		None,
		MIT,
		[DisplayNameEnum( "CC Attribution" )]
		CCAttribution,
		[DisplayNameEnum( "CC Attribution BY-SA" )]
		CCAttributionBYSA,
		[DisplayNameEnum( "CC Attribution BY-ND" )]
		CCAttributionBYND,
		[DisplayNameEnum( "CC Attribution BY-NC" )]
		CCAttributionBYNC,
		[DisplayNameEnum( "CC Attribution BY-NC-SA" )]
		CCAttributionBYNCSA,
		[DisplayNameEnum( "CC Attribution BY-NC-ND" )]
		CCAttributionBYNCND,
		[DisplayNameEnum( "Free To Use With NeoAxis" )]
		FreeToUseWithNeoAxis,
		PaidPerSeat,
		
	}

	

	public enum TerrainEditorMode
	{
		GeometryRaise,
		GeometryLower,
		GeometrySmooth,
		GeometryFlatten,
		PaintPaint,
		PaintClear,
		PaintSmooth,
		PaintFlatten,
		
		

		Extension,
	}

	

	public enum TerrainEditorToolShape
	{
		Circle,
		Square,
	}
}





namespace NeoAxis.Editor
{
	public static class EditorContextMenu
	{
		

		public abstract class ItemBase
		{
			internal abstract KryptonContextMenuItemBase RealItem { get; }
		}

		

		public class Item : ItemBase
		{
			KryptonContextMenuItem __0x2512;

			
			
			
			

			public Item( string text, EventHandler clickHandler )
			{
				__0x2512 = new KryptonContextMenuItem( text, clickHandler );
			}

			public string Text
			{
				get { return __0x2512.Text; }
				set { __0x2512.Text = value; }
			}

			public bool Enabled
			{
				get { return __0x2512.Enabled; }
				set { __0x2512.Enabled = value; }
			}

			public string ShortcutKeyDisplayString
			{
				get { return __0x2512.ShortcutKeyDisplayString; }
				set { __0x2512.ShortcutKeyDisplayString = value; }
			}

			internal override KryptonContextMenuItemBase RealItem
			{
				get { return __0x2512; }
			}
		}

		

		public class Separator : ItemBase
		{
			internal KryptonContextMenuSeparator item;

			public Separator()
			{
				item = new KryptonContextMenuSeparator();
			}

			internal override KryptonContextMenuItemBase RealItem
			{
				get { return item; }
			}
		}

		

		public static void Show( ICollection<ItemBase> items, Vector2I screenPosition )
		{
			if( items.Count == 0 )
				return;

			var __0x2513 = new List<KryptonContextMenuItemBase>();
			foreach( var __0x2516 in items )
				__0x2513.Add( __0x2516.RealItem );

			var __0x2514 = new KryptonContextMenu();
			__0x2514.Items.Add( new KryptonContextMenuItems( __0x2513.ToArray() ) );
			__0x2514.Show( EditorForm.Instance, new Point( screenPosition.X, screenPosition.Y ) );
		}

		public static void Show( ICollection<ItemBase> items )
		{
			var __0x2515 = Cursor.Position;
			Show( items, new Vector2I( __0x2515.X, __0x2515.Y ) );
		}






		
		
		

		

		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		

		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		

		
		
		

		
		

		
		
		
		

		

		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		

		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		

		
		
		
		

		
		
		

		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	

	
	

	public static class EditorContextMenuWinForms
	{
		
		public delegate void ShowEventDelegate( KryptonContextMenu __0x2578, Control __0x2579, Point? __0x2580 );
		public static event ShowEventDelegate ShowEvent;

		

		public enum MenuTypeEnum
		{
			None,
			General,
			Resources,
			Document,
		}

		

		public static KryptonContextMenu Create()
		{
			var __0x2517 = new KryptonContextMenu();
			return __0x2517;
		}

		public static void Show( KryptonContextMenu menu, Control locationControl, Point locationPoint )
		{
			ShowEvent?.Invoke( menu, locationControl, locationPoint );

			
			

			
			menu.Show( locationControl, locationControl.PointToScreen( locationPoint ) );
		}

		public static void Show( KryptonContextMenu menu, Control locationControl )
		{
			ShowEvent?.Invoke( menu, locationControl, null );

			menu.Show( locationControl, Cursor.Position );
			
		}

		public static void Show( ICollection<KryptonContextMenuItemBase> items, Control locationControl, Point locationPoint )
		{
			if( items.Count == 0 )
				return;

			var __0x2518 = Create();

			var __0x2519 = new KryptonContextMenuItemBase[ items.Count ];
			items.CopyTo( __0x2519, 0 );
			__0x2518.Items.Add( new KryptonContextMenuItems( __0x2519 ) );

			Show( __0x2518, locationControl, locationPoint );
		}

		public static void Show( ICollection<KryptonContextMenuItemBase> items, Control locationControl )
		{
			if( items.Count == 0 )
				return;

			var __0x2520 = Create();

			var __0x2521 = new KryptonContextMenuItemBase[ items.Count ];
			items.CopyTo( __0x2521, 0 );
			__0x2520.Items.Add( new KryptonContextMenuItems( __0x2521 ) );

			Show( __0x2520, locationControl );
		}

		public static string Translate( string text )
		{
			return EditorLocalization.Translate( "ContextMenu", text );
		}

		public static void AddTransformToolToMenu( ICollection<KryptonContextMenuItemBase> items, TransformTool transformTool )
		
		{
			KryptonContextMenuItem __0x2522;
			string __0x2523;

			
			__0x2523 = Translate( "Select" );
			__0x2522 = new KryptonContextMenuItem( __0x2523, null, delegate ( object __0x2581, EventArgs __0x2582 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Select" );
			} );
			__0x2522.Checked = transformTool.Mode == TransformTool.ModeEnum.None;
			
			__0x2522.Image = EditorResourcesCache.Select;
			__0x2522.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Select" );
			items.Add( __0x2522 );

			
			__0x2523 = Translate( "Move && Rotate" );
			__0x2522 = new KryptonContextMenuItem( __0x2523, null, delegate ( object __0x2583, EventArgs __0x2584 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Move & Rotate" );
			} );
			__0x2522.Checked = transformTool.Mode == TransformTool.ModeEnum.PositionRotation;
			
			__0x2522.Image = EditorResourcesCache.MoveRotate;
			__0x2522.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Move & Rotate" );
			items.Add( __0x2522 );

			
			__0x2523 = Translate( "Move" );
			__0x2522 = new KryptonContextMenuItem( __0x2523, null, delegate ( object __0x2585, EventArgs __0x2586 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Move" );
			} );
			__0x2522.Checked = transformTool.Mode == TransformTool.ModeEnum.Position;
			
			__0x2522.Image = EditorResourcesCache.Move;
			__0x2522.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Move" );
			items.Add( __0x2522 );

			
			__0x2523 = Translate( "Rotate" );
			__0x2522 = new KryptonContextMenuItem( __0x2523, null, delegate ( object __0x2587, EventArgs __0x2588 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rotate" );
			} );
			__0x2522.Checked = transformTool.Mode == TransformTool.ModeEnum.Rotation;
			
			__0x2522.Image = EditorResourcesCache.Rotate;
			__0x2522.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rotate" );
			items.Add( __0x2522 );

			
			__0x2523 = Translate( "Scale" );
			__0x2522 = new KryptonContextMenuItem( __0x2523, null, delegate ( object __0x2589, EventArgs __0x2590 )
			{
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Scale" );
			} );
			__0x2522.Checked = transformTool.Mode == TransformTool.ModeEnum.Scale;
			
			__0x2522.Image = EditorResourcesCache.Scale;
			__0x2522.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Scale" );
			items.Add( __0x2522 );
		}

		public static void AddActionsToMenu( MenuTypeEnum menuType, ICollection<KryptonContextMenuItemBase> items )
		{
			bool __0x2524 = true;

			foreach( var __0x2572 in EditorActions.Actions )
			{
				if( !__0x2572.CompletelyDisabled && __0x2572.ContextMenuSupport != MenuTypeEnum.None && __0x2572.ContextMenuSupport == menuType )
				{
					var __0x2525 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, __0x2572 );
					
					

					if( __0x2525.Enabled )
					{
						if( __0x2524 )
						{
							if( items.Count != 0 )
								items.Add( new KryptonContextMenuSeparator() );

							__0x2524 = false;
						}

						var __0x2526 = EditorAPI.GetImageForDispalyScale( __0x2572.GetImageSmall(), __0x2572.GetImageBig() );
						var __0x2527 = new KryptonContextMenuItem( Translate( __0x2572.GetContextMenuText() ), __0x2526, delegate ( object __0x2591, EventArgs __0x2592 )
						{
							

							
							var __0x2528 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, __0x2572 );
							
							if( __0x2528.Enabled )
								EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, __0x2572.Name );

							
						} );

						if( __0x2572.ActionType == EditorAction.ActionTypeEnum.DropDown )
						{
							var __0x2529 = new CancelEventArgs();
							__0x2572.DropDownContextMenu.PerformOpening( __0x2529 );
							
							
							

							foreach( var __0x2573 in __0x2572.DropDownContextMenu.Items )
								__0x2527.Items.Add( __0x2573 );
						}

						
						
						__0x2527.Tag = __0x2572;
						__0x2527.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( __0x2572.Name );
						items.Add( __0x2527 );
					}
				}
			}
		}

		public delegate void TryNewObjectDelegate( Metadata.TypeInfo __0x2593 );

		
		public static void AddNewObjectItem( IList<KryptonContextMenuItemBase> items, bool enabled, TryNewObjectDelegate select )
		{
			
			{
				var __0x2530 = new KryptonContextMenuItem( Translate( "New Object" ), EditorResourcesCache.New, null );
				__0x2530.Enabled = enabled;

				var __0x2531 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x2532 = new KryptonContextMenuItem( Translate( "Select..." ), null,
						delegate ( object __0x2594, EventArgs __0x2595 )
						{
							select( null );
							
						} );
					__0x2531.Add( __0x2532 );
				}

				
				__0x2531.Add( new KryptonContextMenuSeparator() );

				
				{
					ResourcesWindowItems.PrepareItems();

					var __0x2533 = new Dictionary<string, KryptonContextMenuItem>();

					KryptonContextMenuItem GetBrowserItemByPath( string __0x2596 )
					{
						__0x2533.TryGetValue( __0x2596, out var item );
						return item;
					}

					foreach( var __0x2574 in ResourcesWindowItems.Items )
					{
						
						if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x2574 ) )
							continue;

						
						if( !typeof( Component ).IsAssignableFrom( __0x2574.Type ) )
							continue;

						
						var __0x2534 = __0x2574.Path;
						{
							var __0x2535 = "Base\\";
							if( __0x2534.Length > __0x2535.Length && __0x2534.Substring( 0, __0x2535.Length ) == __0x2535 )
								__0x2534 = __0x2534.Substring( __0x2535.Length );
						}

						var __0x2536 = __0x2534.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

						string __0x2537 = "";
						for( int __0x2538 = 0; __0x2538 < __0x2536.Length; __0x2538++ )
						{
							__0x2537 = Path.Combine( __0x2537, __0x2536[ __0x2538 ] );

							
							KryptonContextMenuItem __0x2539 = null;
							if( __0x2538 != 0 )
								__0x2539 = GetBrowserItemByPath( Path.GetDirectoryName( __0x2537 ) );

							if( GetBrowserItemByPath( __0x2537 ) == null )
							{
								

								KryptonContextMenuItem __0x2540 = null;

								
								bool __0x2541 = __0x2538 < __0x2536.Length - 1;
								if( __0x2541 )
								{
									var __0x2542 = EditorLocalization.Translate( "ContentBrowser.Group", __0x2536[ __0x2538 ] );
									__0x2540 = new KryptonContextMenuItem( __0x2542, null, null );

									
									
									
								}
								else
								{
									var __0x2543 = MetadataManager.GetTypeOfNetType( __0x2574.Type );
									__0x2540 = new KryptonContextMenuItem( __0x2536[ __0x2538 ], EditorResourcesCache.Type,
										delegate ( object __0x2597, EventArgs __0x2598 )
										{
											var __0x2544 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2597 ).Tag;
											select( __0x2544 );
											
										} );
									__0x2540.Tag = __0x2543;

									

									__0x2540.Enabled = !__0x2574.Disabled;
								}

								if( __0x2539 != null )
								{
									if( __0x2539.Items.Count == 0 )
										__0x2539.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
									var __0x2545 = (KryptonContextMenuItems)__0x2539.Items[ 0 ];
									__0x2545.Items.Add( __0x2540 );
									
								}

								__0x2533.Add( __0x2537, __0x2540 );
								if( __0x2538 == 0 )
									__0x2531.Add( __0x2540 );
							}
						}
					}

				}

				
				if( EditorFavorites.AllowFavorites )
				{
					var __0x2546 = new KryptonContextMenuItem( EditorLocalization.Translate( "ContentBrowser.Group", "Favorites" ), null, null );

					var __0x2547 = new List<Metadata.TypeInfo>( 32 );
					var __0x2548 = new List<string>( 32 );
					foreach( var __0x2575 in EditorFavorites.Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries ) )
					{
						var __0x2549 = MetadataManager.GetTypeOfNetType( __0x2575 );
						if( __0x2549 != null )
							__0x2547.Add( __0x2549 );
						else if( VirtualFile.Exists( __0x2575 ) )
							__0x2548.Add( __0x2575 );
					}

					CollectionUtility.MergeSort( __0x2547, delegate ( Metadata.TypeInfo __0x2599, Metadata.TypeInfo __0x2600 )
					{
						return string.Compare( __0x2599.Name, __0x2600.Name );
					} );

					CollectionUtility.MergeSort( __0x2548, delegate ( string __0x2601, string __0x2602 )
					{
						var __0x2550 = Path.GetFileName( __0x2601 );
						var __0x2551 = Path.GetFileName( __0x2602 );
						return string.Compare( __0x2550, __0x2551 );
					} );

					foreach( var __0x2576 in __0x2547 )
					{
						var __0x2552 = __0x2576.DisplayName;
						{
							var __0x2553 = ResourcesWindowItems.GetItemByType( __0x2576.GetNetType() );
							if( __0x2553 != null )
							{
								try
								{
									__0x2552 = Path.GetFileName( __0x2553.Path );
								}
								catch { }
							}
						}

						var __0x2554 = new KryptonContextMenuItem( __0x2552, EditorResourcesCache.Type,
							delegate ( object __0x2603, EventArgs __0x2604 )
							{
								var __0x2555 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2603 ).Tag;
								select( __0x2555 );
							} );
						__0x2554.Tag = __0x2576;

						if( __0x2546.Items.Count == 0 )
							__0x2546.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
						var __0x2556 = (KryptonContextMenuItems)__0x2546.Items[ 0 ];
						__0x2556.Items.Add( __0x2554 );
					}

					
					
					
					
					
					
					
					
					
					
					

					

					
					
					
					
					

					
					
					
					
					
					

					
					
					
					


					
					
					
					
					
					
					

					
					
					
					
					

					__0x2531.Add( __0x2546 );
				}

				__0x2530.Items.Add( new KryptonContextMenuItems( __0x2531.ToArray() ) );
				items.Add( __0x2530 );

				
				
				
				
				
				
			}
		}

		public static void AddNewResourceItem( IList<KryptonContextMenuItemBase> items, bool enabled, TryNewObjectDelegate select )
		{
			
			{
				var __0x2557 = new KryptonContextMenuItem( Translate( "New Resource" ), EditorResourcesCache.New, null );
				__0x2557.Enabled = enabled;

				var __0x2558 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x2559 = new KryptonContextMenuItem( Translate( "Select..." ), null,
						delegate ( object __0x2605, EventArgs __0x2606 )
						{
							select( null );
						} );
					__0x2558.Add( __0x2559 );
				}

				
				__0x2558.Add( new KryptonContextMenuSeparator() );

				
				{
					ResourcesWindowItems.PrepareItems();

					var __0x2560 = new Dictionary<string, KryptonContextMenuItem>();

					KryptonContextMenuItem GetBrowserItemByPath( string __0x2607 )
					{
						__0x2560.TryGetValue( __0x2607, out var item );
						return item;
					}

					foreach( var __0x2577 in ResourcesWindowItems.Items )
					{
						
						if( !EditorUtility.PerformResourcesWindowItemVisibleFilter( __0x2577 ) )
							continue;

						
						
						

						
						var __0x2561 = __0x2577.Path;
						{
							var __0x2562 = "Base\\";
							if( __0x2561.Length > __0x2562.Length && __0x2561.Substring( 0, __0x2562.Length ) == __0x2562 )
								__0x2561 = __0x2561.Substring( __0x2562.Length );
						}

						var __0x2563 = __0x2561.Split( new char[] { '\\' }, StringSplitOptions.RemoveEmptyEntries );

						string __0x2564 = "";
						for( int __0x2565 = 0; __0x2565 < __0x2563.Length; __0x2565++ )
						{
							__0x2564 = Path.Combine( __0x2564, __0x2563[ __0x2565 ] );

							
							KryptonContextMenuItem __0x2566 = null;
							if( __0x2565 != 0 )
								__0x2566 = GetBrowserItemByPath( Path.GetDirectoryName( __0x2564 ) );

							if( GetBrowserItemByPath( __0x2564 ) == null )
							{
								

								KryptonContextMenuItem __0x2567 = null;

								
								bool __0x2568 = __0x2565 < __0x2563.Length - 1;
								if( __0x2568 )
								{
									__0x2567 = new KryptonContextMenuItem( __0x2563[ __0x2565 ], null, null );

									
									
									
								}
								else
								{
									var __0x2569 = MetadataManager.GetTypeOfNetType( __0x2577.Type );
									__0x2567 = new KryptonContextMenuItem( __0x2563[ __0x2565 ], EditorResourcesCache.Type,
										delegate ( object __0x2608, EventArgs __0x2609 )
										{
											var __0x2570 = (Metadata.TypeInfo)( (KryptonContextMenuItem)__0x2608 ).Tag;
											select( __0x2570 );
											
										} );
									__0x2567.Tag = __0x2569;

									

									__0x2567.Enabled = !__0x2577.Disabled;
								}

								if( __0x2566 != null )
								{
									if( __0x2566.Items.Count == 0 )
										__0x2566.Items.Add( new KryptonContextMenuItems( new KryptonContextMenuItemBase[ 0 ] ) );
									var __0x2571 = (KryptonContextMenuItems)__0x2566.Items[ 0 ];
									__0x2571.Items.Add( __0x2567 );
									
								}

								__0x2560.Add( __0x2564, __0x2567 );
								if( __0x2565 == 0 )
									__0x2558.Add( __0x2567 );
							}
						}
					}
				}

				__0x2557.Items.Add( new KryptonContextMenuItems( __0x2558.ToArray() ) );
				items.Add( __0x2557 );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	public static class EditorFavorites
	{
		public static bool AllowFavorites = true;

		[EngineConfig( "Editor", "Favorites" )]
		public static string Favorites = "";

		

		internal static void Init()
		{
			EngineConfig.RegisterClassParameters( typeof( EditorFavorites ) );
		}

		public static void Add( string name )
		{
			if( !string.IsNullOrEmpty( name ) && !Contains( name ) )
			{
				if( !string.IsNullOrEmpty( Favorites ) )
					Favorites += "|";
				Favorites += name;
			}
		}

		public static void Remove( string name )
		{
			var __0x2610 = Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );

			Favorites = "";
			foreach( var __0x2612 in __0x2610 )
			{
				if( __0x2612 != name )
				{
					if( !string.IsNullOrEmpty( Favorites ) )
						Favorites += "|";
					Favorites += __0x2612;
				}
			}
		}

		public static bool Contains( string name )
		{
			var __0x2611 = Favorites.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );

			foreach( var __0x2613 in __0x2611 )
			{
				if( __0x2613 == name )
					return true;
			}
			return false;
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the main editor form.
	/// </summary>
	public partial class EditorForm : KryptonForm
	{
		const string __0x2614 = @"user:Configs\EditorDocking.config";
		const string __0x2615 = @"Base\Tools\EditorDockingDefault.config";

		public static EditorForm instance;

		List<DocumentInstance> __0x2616 = new List<DocumentInstance>();

		bool __0x2617;
		

		bool __0x2618;
		bool __0x2619 = true;
		bool __0x2620 = true;

		

		WorkspaceControllerForForm __0x2621;

		static bool __0x2622;

		

		public string ribbonLastSelectedTabTypeByUser = "";
		public bool ribbonLastSelectedTabTypeByUser_DisableUpdate = true;

		ObjectsInFocus __0x2623;

		public bool needClose;

		Control __0x2624;

		double __0x2625;

		public DateTime? unlockFormUpdateInTimer;

		public int skipPaintCounter = 2;

		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		

		public EditorForm()
		{
			instance = this;

			
			var __0x2626 = ProjectSettings.ReadParameterFromFile( "CustomWindowsStyle" );
			if( !string.IsNullOrEmpty( __0x2626 ) )
			{
				try
				{
					KryptonToolkitSettings.AllowFormChrome = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x2626 );
				}
				catch { }
			}
			AllowFormChrome = KryptonToolkitSettings.AllowFormChrome;

			
			
			
			
			
			

			__0x2822();
			Icon = Properties.Resources.EditorLogo;

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			
			

			__0x2621 = new WorkspaceControllerForForm( __0x2757, this );

			

			EditorAssemblyInterface.Instance.InitializeWPFApplicationAndScriptEditor();
			
			

			
			

			
			EditorSettingsSerialization.Init();
			EditorFavorites.Init();
		}

		
		
		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		

		public static EditorForm Instance
		{
			get { return instance; }
		}

		public static event Action RegisterAdditionalDockWindows;

		private void __0x2789( object __0x2823, EventArgs __0x2824 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			kryptonRibbon.Visible = false;

			
			__0x2624 = new Control();
			__0x2624.BackColor = Color.FromArgb( 40, 40, 40 );
			__0x2624.Dock = DockStyle.Fill;
			Controls.Add( __0x2624 );
			__0x2624.BringToFront();
			Application.DoEvents();

			
			
			
			
			
			
			
			
			
			
			
			
			

			kryptonRibbon.RibbonTabs.Clear();

			StoreManager.Init();

			{
				EngineApp.InitSettings.UseApplicationWindowHandle = Handle;

				if( !EngineApp.Create() )
				{
					Log.Fatal( "EngineApp.Create() failed." );
					Close();
					return;
				}

				

				

				
				
				
				
				
				
				
				

				

				
				

				
				
				
				
				

				
				
				

				
				
				
				
				
				

			}

			EngineApp.DefaultSoundChannelGroup.Volume = 0;

			__0x2801();
			PreviewImagesManager.Init();

			
			if( ProjectSettings.Get.Theme.Value == Component_ProjectSettings.ThemeEnum.Dark )
				__0x2756.GlobalPaletteMode = PaletteModeManager.NeoAxisBlack;
			else
				__0x2756.GlobalPaletteMode = PaletteModeManager.NeoAxisBlue;

			KryptonDarkThemeUtility.DarkTheme = EditorAPI.DarkTheme;
			if( EditorAPI.DarkTheme )
				EditorAssemblyInterface.Instance.SetDarkTheme();
			Aga.Controls.Tree.NodeControls.BaseTextControl.DarkTheme = EditorAPI.DarkTheme;

			BackColor = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 240, 240, 240 );

			
			kryptonRibbon.RibbonAppButton.AppButtonText = EditorLocalization.Translate( "AppButton", kryptonRibbon.RibbonAppButton.AppButtonText );
			if( DarkTheme )
			{
				kryptonRibbon.RibbonAppButton.AppButtonBaseColorDark = Color.FromArgb( 40, 40, 40 );
				kryptonRibbon.RibbonAppButton.AppButtonBaseColorLight = Color.FromArgb( 54, 54, 54 );
			}

			

			
			
			
			__0x2621.AddToDockspaceStack( new DockWindow[] { new ObjectsWindow(), new SettingsWindow() }, DockingEdge.Right );
			

			__0x2621.AddToDockspaceStack( new DockWindow[] { new ResourcesWindow(), new SolutionExplorer(), new PreviewWindow(), new StoresWindow() }, DockingEdge.Left );
			


			__0x2621.AddToDockspace( new DockWindow[] { new MessageLogWindow(), new OutputWindow(), new DebugInfoWindow() }, DockingEdge.Bottom );

			RegisterAdditionalDockWindows?.Invoke();

			Log.Info( "Use Log.Info(), Log.Warning() methods to write to the window. These methods can be used in the Player. Press '~' to open console of the Player." );
			OutputWindow.Print( "Use OutputWindow.Print() method to write to the window. Unlike Message Log window, this window is not a list. Here you can add text in arbitrary format.\n" );

			
			{
				string __0x2627 = VirtualPathUtility.GetRealPathByVirtual( __0x2614 );
				
				if( !File.Exists( __0x2627 ) )
					__0x2627 = VirtualPathUtility.GetRealPathByVirtual( __0x2615 );

				if( File.Exists( __0x2627 ) )
				{
					

					
					
					__0x2621.LoadLayoutFromFile( __0x2627 );

					
					
					foreach( var __0x2760 in __0x2621.DockingManager.Pages )
					{
						if( __0x2760.needHideAfterLoading )
						{
							__0x2760.needHideAfterLoading = false;

							var __0x2628 = __0x2760.GetDockWindow();
							if( __0x2628 != null )
								__0x2621.SetDockWindowVisibility( __0x2628, false );
						}
					}

					
					
					
					
					
					
					
				}
			}

			__0x2808();
			__0x2814();

			__0x2792();

			
			EditorSettingsSerialization.InitAfterFormLoad();

			XmlDocumentationFiles.PreloadBaseAssemblies();

			EditorAPI.SelectedDocumentWindowChanged += __0x2798;

			__0x2799();

			LoginUtility.RequestFullLicenseInfo();

			kryptonRibbon.BeforeMinimizedModeChanged += __0x2804;
			kryptonRibbon.MinimizedModeChanged += __0x2805;

			KryptonWinFormsUtility.editorFormStartTemporaryLockUpdateAction = delegate ()
			{
				if( IsHandleCreated && !EditorAPI.ClosingApplication )
				{
					KryptonWinFormsUtility.LockFormUpdate( this );
					unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.1 );
				}
			};

			__0x2618 = true;
		}

		private void __0x2790( object __0x2825, FormClosingEventArgs __0x2826 )
		{
			if( __0x2791( __0x2621.GetDockWindows() ) )
			{
				__0x2826.Cancel = true;
				return;
			}

			
			if( __0x2617 )
			
			{
				string __0x2629 = VirtualPathUtility.GetRealPathByVirtual( __0x2614 );
				EditorAPI.GetRestartApplication( out _, out var resetWindowsSettings );
				if( resetWindowsSettings )
				{
					if( File.Exists( __0x2629 ) )
						File.Delete( __0x2629 );
				}
				else
				{
					if( !Directory.Exists( Path.GetDirectoryName( __0x2629 ) ) )
						Directory.CreateDirectory( Path.GetDirectoryName( __0x2629 ) );

					__0x2621.SaveLayoutToFile( __0x2629 );

					
					
					
					
					
					
					
					
				}

				
				__0x2621.SaveAdditionalConfig();
			}

			EditorAPI.ClosingApplication = true;

			EditorLocalization.Shutdown();

			StoreManager.Shutdown();

			
			{
				
				foreach( var __0x2761 in Documents.ToArray() )
					__0x2761.Destroy();
			}

			
			foreach( var __0x2762 in EngineViewportControl.AllInstances.ToArray() )
				__0x2762.Dispose();

			PreviewImagesManager.Shutdown();

			EditorUtility.PurgeCachedImages();

			if( !__0x2617 )
				EngineApp.NeedSaveConfig = false;
			EngineApp.Shutdown();
		}

		
		
		
		bool __0x2791( IEnumerable<DockWindow> __0x2827 )
		{
			var __0x2630 = new List<DocumentInstance>();

			foreach( var __0x2763 in __0x2827 )
			{
				if( __0x2763 is IDocumentWindow docWnd && !docWnd.IsDocumentSaved() )
					__0x2630.Add( docWnd.Document );
			}

			if( __0x2630.Count == 0 )
				return false;

			var __0x2631 = EditorLocalization.Translate( "General", "Save changes to the following files?" ) + "\n";
			foreach( var __0x2764 in __0x2630 )
				__0x2631 += "\n" + __0x2764.Name;

			switch( EditorMessageBox.ShowQuestion( __0x2631, EMessageBoxButtons.YesNoCancel ) )
			{
			case EDialogResult.Cancel:
				return true;
			case EDialogResult.Yes:
				
				__0x2630.ForEach( __0x2828 => __0x2828.Save() );
				return false;
			case EDialogResult.No:
				return false;
			}

			return false;
		}

		
		internal bool ShowDialogAndSaveDocument( DockWindow window )
		{
			var __0x2632 = window as DocumentWindow;
			if( __0x2632 == null )
				return false;

			
			if( __0x2632.IsMainWindowInWorkspace && !__0x2632.IsDocumentSaved() )
			{
				EDialogResult __0x2633;
				if( window.ShowDialogAndSaveDocumentAutoAnswer.HasValue )
					__0x2633 = window.ShowDialogAndSaveDocumentAutoAnswer.Value;
				else
				{
					var __0x2634 = EditorLocalization.Translate( "General", "Save changes to the following files?" ) + "\n";
					__0x2634 += "\n" + __0x2632.Document.Name;
					__0x2633 = EditorMessageBox.ShowQuestion( __0x2634, EMessageBoxButtons.YesNoCancel );
				}

				switch( __0x2633 )
				{
				case EDialogResult.Cancel:

					
					EditorAPI.SetRestartApplication( false );

					return true;
				case EDialogResult.Yes:
					
					__0x2632.SaveDocument();
					return false;
				case EDialogResult.No:
					return false;
				}
			}

			return false;
		}

		public static string ReplaceCaption { get; set; } = "";

		void __0x2792()
		{
			if( !string.IsNullOrEmpty( ReplaceCaption ) )
			{
				Text = ReplaceCaption;
				return;
			}

			string __0x2635 = "";
			var __0x2636 = ProjectSettings.Get;
			if( __0x2636 != null )
				__0x2635 = __0x2636.ProjectName.Value.Trim();

			var __0x2637 = "";
			if( EngineInfo.ExtendedEdition )
				__0x2637 += " " + EditorLocalization.Translate( "General", "Extended" );

			if( __0x2635 != "" )
				Text = __0x2635 + " - " + EngineInfo.NameWithVersion + __0x2637;
			else
				Text = EngineInfo.NameWithVersion + __0x2637;
		}

		private void __0x2793( object __0x2829, EventArgs __0x2830 )
		{
			Close();
		}

		private void __0x2794( object __0x2831, EventArgs __0x2832 )
		{
			if( !ribbonLastSelectedTabTypeByUser_DisableUpdate && __0x2618 )
			{
				var __0x2638 = kryptonRibbon.SelectedTab?.Tag as EditorRibbonDefaultConfiguration.Tab;
				ribbonLastSelectedTabTypeByUser = __0x2638 != null ? __0x2638.Type : "";
			}
		}

		private void __0x2795( object __0x2833, EventArgs __0x2834 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !__0x2618 )
				return;

			

			

			
			
			
			
			
			

			

			
			
			if( EngineApp.Instance != null )
				EngineApp.DoTick();

			if( EngineApp.GetSystemTime() - __0x2625 > 0.2 && !__0x2619 )
			{
				__0x2809();
				__0x2821();
				__0x2792();

				__0x2625 = EngineApp.GetSystemTime();
			}

			
			EditorSettingsSerialization.Dump();

			ScreenNotifications.Update();

			if( !needClose )
				EditorAPI.SelectedDocumentWindowChangedUpdate();

			if( !needClose )
			{
				foreach( var __0x2765 in EditorAPI.Documents )
					__0x2765.EditorUpdateWhenDocumentModified_Tick();
			}

			
			

			
			

			if( !needClose )
				__0x2797();

			
			if( !needClose )
				KryptonAutoHiddenSlidePanel.Animate = ProjectSettings.Get.AnimateWindowsAutoHiding;

			
			

			__0x2803();

			if( needClose )
			{
				needClose = false;
				Close();
			}

			
			if( __0x2619 && !needClose )
			{
				var __0x2639 = EditorSettingsSerialization.OpenFileAtStartup;
				EditorSettingsSerialization.OpenFileAtStartup = "";

				if( File.Exists( __0x2639 ) )
				{
					
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x2639 } );

					
					EditorAPI.OpenFileAsDocument( __0x2639, true, true );
				}
			}

			if( __0x2619 )
			{
				__0x2619 = false;

				if( SplashForm.Instance != null )
					SplashForm.Instance.AllowClose = true;

				
				kryptonRibbon.Visible = true;

				if( __0x2624 != null )
					Controls.Remove( __0x2624 );
				

				Invalidate( true );

				if( EditorSettingsSerialization.ShowTipsAsStartup )
					EditorAPI.ShowTips();
			}

			if( unlockFormUpdateInTimer.HasValue && ( DateTime.Now - unlockFormUpdateInTimer.Value ).TotalSeconds > 0 )
			{
				KryptonWinFormsUtility.LockFormUpdate( null );
				unlockFormUpdateInTimer = null;
			}

			if( !needClose )
				EngineToolTipManager.Update();

			__0x2617 = true;
		}

		[Browsable( false )]
		internal List<DocumentInstance> Documents
		{
			get { return __0x2616; }
		}

		
		
		

		
		
		
		

		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		private void __0x2796( object __0x2835, CancelEventArgs __0x2836 )
		{
			backstageMenu1.SelectDefaultPage();
			backstageMenu1.Refresh();
		}

		public void OpenBackstage()
		{
			kryptonRibbon.ClickAppButton();
		}

		public void RenderViewports( out bool existActiveViewports )
		{
			existActiveViewports = false;

			

			

			if( Visible && WindowState != FormWindowState.Minimized )
			{
				
				List<EngineViewportControl> __0x2640 = new List<EngineViewportControl>();
				List<EngineViewportControl> __0x2641 = new List<EngineViewportControl>();

				foreach( var __0x2766 in EngineViewportControl.AllInstances )
				{
					if( __0x2766.IsAllowRender() )
					{
						if( __0x2766.AutomaticUpdateFPS != 0 )
							__0x2640.Add( __0x2766 );
					}
					else
						__0x2641.Add( __0x2766 );
				}

				bool __0x2642 = false;

				
				foreach( var __0x2767 in __0x2641 )
				{
					var __0x2643 = __0x2767.Viewport?.RenderingContext;
					if( __0x2643 != null )
					{
						if( __0x2643.DynamicTexturesAreExists() )
						{
							__0x2643.MultiRenderTarget_DestroyAll();
							__0x2643.DynamicTexture_DestroyAll();

							__0x2642 = true;
						}
					}
				}

				if( __0x2642 )
				{
					RenderingSystem.CallBgfxFrame();
					RenderingSystem.CallBgfxFrame();
				}

				
				if( EngineApp.Instance != null && EngineApp.Created )
				{
					PreviewImagesManager.Update();
					if( PreviewImagesManager.ExistsWorkingProcessors() )
						existActiveViewports = true;
				}

				
				if( __0x2640.Count != 0 )
				{
					existActiveViewports = true;

					foreach( var __0x2768 in __0x2640 )
						__0x2768.TryRender();
				}
			}

			
			
			

			
			
			
			
			
			

			
			
			

			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			


		}

		
		
		
		
		
		
		

		
		
		

		

		
		

		
		
		
		

		
		
		
		
		
		
		

		
		

		[Browsable( false )]
		public WorkspaceControllerForForm WorkspaceController
		{
			get { return __0x2621; }
		}

		internal ObjectsInFocus GetObjectsInFocus( bool useOnlySelectedDocumentWindow = false )
		{
			ObjectsInFocus __0x2644 = null;

			
			var __0x2645 = __0x2621.GetSelectedDockWindow();

			bool __0x2646 = false;
			if( __0x2645 != null && __0x2645 is PreviewWindow )
				__0x2646 = true;

			if( !__0x2646 )
			{
				
				if( useOnlySelectedDocumentWindow && __0x2645 as DocumentWindow == null )
					__0x2645 = null;

				
				if( __0x2645 != null )
					__0x2644 = __0x2645.GetObjectsInFocus();

				
				if( __0x2644 == null && EditorAPI.SelectedDocumentWindow != null )
				{
					
					__0x2644 = new ObjectsInFocus( EditorAPI.SelectedDocumentWindow, EditorAPI.SelectedDocumentWindow.SelectedObjects );
					
				}

				
				if( __0x2644 != null )
					__0x2623 = __0x2644;
				else
				{
					if( __0x2623 != null )
						if( __0x2623.DocumentWindow != null && !__0x2623.DocumentWindow.IsHandleCreated )
							__0x2623 = null;
				}
			}

			if( __0x2623 != null )
				return __0x2623;
			else
				return new ObjectsInFocus( null, new object[ 0 ] );
		}

		void __0x2797()
		{
			
			{
				var __0x2647 = EditorAPI.SelectedDocumentWindow as DocumentWindowWithViewport;
				var __0x2648 = __0x2647?.ViewportControl?.Viewport;

				var __0x2649 = __0x2648?.AttachedScene;
				if( __0x2649 != null && __0x2649.EnabledInHierarchy )
				{
					var __0x2650 = __0x2648.CameraSettings;
					SoundWorld.SetListener( __0x2649, __0x2650.Position, Vector3.Zero, __0x2650.Rotation );
				}
				else
					SoundWorld.SetListenerReset();
			}

			
			EngineApp.DefaultSoundChannelGroup.Volume = ProjectSettings.Get.SoundVolume;
		}

		private void __0x2798()
		{
			var __0x2651 = EditorAPI.SelectedDocumentWindow;
			if( __0x2651 != null )
				__0x2651.SettingsWindowSelectObjects();
		}

		void __0x2799()
		{
#if !DEPLOY
			string __0x2652 = "";
			try
			{
				using( var __0x2653 = Registry.CurrentUser.OpenSubKey( "Software\\NeoAxis" ) )
				{
					if( __0x2653 != null )
					{
						var __0x2654 = __0x2653.GetValue( "RecentProjects" );
						if( __0x2654 != null )
							__0x2652 = __0x2654.ToString();
					}
				}
			}
			catch { }

			string __0x2655 = VirtualFileSystem.Directories.Project;

			var __0x2656 = __0x2652.Split( new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries );
			var __0x2657 = new List<string>( __0x2656.Where( __0x2837 => __0x2837 != __0x2655 ) );
			__0x2657.Insert( 0, __0x2655 );

			string __0x2658 = "";
			foreach( var __0x2769 in __0x2657 )
			{
				if( __0x2658 != "" )
					__0x2658 += "|";
				__0x2658 += __0x2769;
			}

			try
			{
				using( var __0x2659 = Registry.CurrentUser.CreateSubKey( "Software\\NeoAxis" ) )
				{
					if( __0x2659 != null )
						__0x2659.SetValue( "RecentProjects", __0x2658 );
				}
			}
			catch { }
#endif
		}

		private void __0x2800( object __0x2838, EventArgs __0x2839 )
		{
			if( __0x2620 )
			{
				if( !needClose )
					EditorAPI.SelectedDocumentWindowChangedUpdate();
			}

			__0x2620 = false;
		}

		[Browsable( false )]
		internal bool DarkTheme
		{
			get { return __0x2756.GlobalPaletteMode == PaletteModeManager.NeoAxisBlack; }
		}

		void __0x2801()
		{
			var __0x2660 = ProjectSettings.Get.Language.Value.ToString();
			if( !string.IsNullOrEmpty( __0x2660 ) && __0x2660 != "English" && __0x2660 != "New" )
				EditorLocalization.Init( __0x2660, true );

			var __0x2661 = kryptonRibbon.RibbonStrings;
			__0x2661.CustomizeQuickAccessToolbar = EditorLocalization.Translate( "General", __0x2661.CustomizeQuickAccessToolbar );
			__0x2661.ShowBelowRibbon = EditorLocalization.Translate( "General", __0x2661.ShowBelowRibbon );
			__0x2661.ShowAboveRibbon = EditorLocalization.Translate( "General", __0x2661.ShowAboveRibbon );
			__0x2661.Minimize = EditorLocalization.Translate( "General", __0x2661.Minimize );

			var __0x2662 = __0x2759.ContextMenus;
			__0x2662.TextClose = EditorLocalization.Translate( "Docking", __0x2662.TextClose );
			__0x2662.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x2662.TextCloseAllButThis );
			__0x2662.TextMovePrevious = EditorLocalization.Translate( "Docking", __0x2662.TextMovePrevious );
			__0x2662.TextMoveNext = EditorLocalization.Translate( "Docking", __0x2662.TextMoveNext );
			__0x2662.TextSplitHorizontal = EditorLocalization.Translate( "Docking", __0x2662.TextSplitHorizontal );
			__0x2662.TextSplitVertical = EditorLocalization.Translate( "Docking", __0x2662.TextSplitVertical );
			__0x2662.TextRebalance = EditorLocalization.Translate( "Docking", __0x2662.TextRebalance );
			__0x2662.TextMaximize = EditorLocalization.Translate( "Docking", __0x2662.TextMaximize );
			__0x2662.TextRestore = EditorLocalization.Translate( "Docking", __0x2662.TextRestore );

			var __0x2663 = __0x2621.DockingManager.Strings;
			__0x2663.TextTabbedDocument = EditorLocalization.Translate( "Docking", __0x2663.TextTabbedDocument );
			__0x2663.TextAutoHide = EditorLocalization.Translate( "Docking", __0x2663.TextAutoHide );
			__0x2663.TextClose = EditorLocalization.Translate( "Docking", __0x2663.TextClose );
			__0x2663.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x2663.TextCloseAllButThis );
			__0x2663.TextDock = EditorLocalization.Translate( "Docking", __0x2663.TextDock );
			__0x2663.TextFloat = EditorLocalization.Translate( "Docking", __0x2663.TextFloat );
			__0x2663.TextHide = EditorLocalization.Translate( "Docking", __0x2663.TextHide );
			__0x2663.TextWindowLocation = EditorLocalization.Translate( "Docking", __0x2663.TextWindowLocation );
		}

		bool __0x2802( DocumentInstance __0x2840 )
		{
			foreach( var __0x2770 in EditorAPI.GetAllDocumentWindowsOfDocument( __0x2840 ) )
			{
				bool __0x2664 = false;

				Control __0x2665 = __0x2770;
				while( __0x2665 != null )
				{
					if( __0x2665 is KryptonFloatingWindow )
					{
						__0x2664 = true;
						break;
					}

					__0x2665 = __0x2665.Parent;
				}

				if( !__0x2664 )
					return true;
			}

			return false;
		}

		void __0x2803()
		{
			try
			{
				foreach( var __0x2771 in Application.OpenForms )
				{
					if( __0x2771 is KryptonFloatingWindow floatingWindow )
					{
						bool __0x2666 = true;

						var __0x2667 = floatingWindow.FloatspaceControl;
						if( __0x2667 != null )
						{
							var __0x2668 = __0x2667.AllPages().Where( __0x2841 => __0x2841.LastVisibleSet ).ToArray();

							if( __0x2668.Length == 1 )
							{
								foreach( var __0x2772 in __0x2668 )
								{
									var __0x2669 = __0x2772.GetDockWindow();

									var __0x2670 = __0x2669 as DocumentWindow;
									if( __0x2670 != null )
									{
										var __0x2671 = __0x2670.Document;
										if( __0x2671 != null && !string.IsNullOrEmpty( __0x2671.RealFileName ) && __0x2802( __0x2671 ) )
										{
											if( EditorAPI.SelectedDocument != null && EditorAPI.SelectedDocument != __0x2671 )
												__0x2666 = false;
										}
									}
								}
							}
							else if( __0x2668.Length == 0 )
								__0x2666 = false;
						}

						if( BackstageMenu.BackstageVisible )
							__0x2666 = false;
						if( WindowState == FormWindowState.Minimized )
							__0x2666 = false;

						if( floatingWindow.Visible != __0x2666 )
							floatingWindow.Visible = __0x2666;
					}
				}
			}
			catch { }
		}

		private void __0x2804( object __0x2842, EventArgs __0x2843 )
		{
			KryptonWinFormsUtility.LockFormUpdate( this );
		}

		private void __0x2805( object __0x2844, EventArgs __0x2845 )
		{
			unlockFormUpdateInTimer = DateTime.Now + TimeSpan.FromSeconds( 0.1 );
			__0x2687 = true;
		}

		protected override void WndProc( ref Message m )
		{
			var __0x2672 = false;

			if( !IsDisposed && !Disposing )
			{
				switch( m.Msg )
				{
				case ComponentFactory.Krypton.Toolkit.PI.WM_ERASEBKGND:
				case ComponentFactory.Krypton.Toolkit.PI.WM_PAINT:
					if( skipPaintCounter > 0 )
					{
						using( var __0x2673 = new SolidBrush( Color.FromArgb( 40, 40, 40 ) ) )
						using( var __0x2674 = CreateGraphics() )
							__0x2674.FillRectangle( __0x2673, new System.Drawing.Rectangle( 0, 0, Width, Height ) );

						__0x2672 = true;

						if( m.Msg == ComponentFactory.Krypton.Toolkit.PI.WM_PAINT && skipPaintCounter > 0 )
							skipPaintCounter--;
					}
					break;
				}
			}

			if( !__0x2672 )
				base.WndProc( ref m );
		}





		
		

		Component_ProjectSettings.RibbonAndToolbarActionsClass __0x2675;

		

		void __0x2806( EditorAction __0x2846 )
		{
			var __0x2676 = new KryptonRibbonQATButton();
			
			__0x2676.Enabled = false;

			__0x2676.Image = EditorAPI.GetImageForDispalyScale( __0x2846.GetImageSmall(), __0x2846.GetImageBig() );

			
			

			__0x2676.Tag = __0x2846;
			
			
			__0x2676.Text = __0x2846.Name;

			
			var __0x2677 = EditorLocalization.Translate( "EditorAction.Name", __0x2846.Name );
			if( __0x2846.Description != "" )
				__0x2677 += "\n" + EditorLocalization.Translate( "EditorAction.Description", __0x2846.Description );
			var __0x2678 = EditorActions.ConvertShortcutKeysToString( __0x2846.ShortcutKeys );
			if( __0x2678 != "" )
				__0x2677 += " (" + __0x2678 + ")";
			__0x2676.ToolTipBody = __0x2677;

			if( __0x2846.ActionType == EditorAction.ActionTypeEnum.DropDown )
			{
				__0x2676.IsDropDownButton = true;
				__0x2676.KryptonContextMenu = __0x2846.DropDownContextMenu;
			}

			kryptonRibbon.QATButtons.Add( __0x2676 );

			__0x2676.Click += __0x2807;
		}

		void __0x2807( object __0x2847, EventArgs __0x2848 )
		{
			var __0x2679 = (KryptonRibbonQATButton)__0x2847;

			var __0x2680 = __0x2679.Tag as EditorAction;
			if( __0x2680 != null )
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2680.Name );
		}

		void __0x2808()
		{
			__0x2622 = true;

			__0x2809();
		}

		void __0x2809()
		{
			if( __0x2622 )
			{
				bool __0x2681 = false;
				IgnoreRepaint = true;

				try
				{
					__0x2810( ref __0x2681 );
					__0x2811( ref __0x2681 );
				}
				finally
				{
					IgnoreRepaint = false;
					if( __0x2681 )
						PerformNeedPaint( true );
				}
			}
		}

		void __0x2810( ref bool __0x2849 )
		{
			var __0x2682 = ProjectSettings.Get.RibbonAndToolbarActions;
			if( __0x2675 == null || !__0x2682.Equals( __0x2675 ) )
			{
				__0x2675 = __0x2682.Clone();

				kryptonRibbon.QATButtons.Clear();

				foreach( var __0x2773 in __0x2682.ToolbarActions )
				{
					var __0x2683 = EditorActions.GetByName( __0x2773.Name );

					if( __0x2683 != null && !__0x2683.CompletelyDisabled && __0x2683.QatSupport && __0x2773.Enabled && EditorUtility.PerformEditorActionVisibleFilter( __0x2683 ) )
						__0x2806( __0x2683 );
				}

				__0x2849 = true;
			}
		}

		void __0x2811( ref bool __0x2850 )
		{
			foreach( KryptonRibbonQATButton __0x2774 in kryptonRibbon.QATButtons )
			{
				if( __0x2774.Visible )
				{
					var __0x2684 = __0x2774.Tag as EditorAction;
					if( __0x2684 != null )
					{
						var __0x2685 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2684 );
						if( __0x2774.Enabled != __0x2685.Enabled )
						{
							__0x2774.Enabled = __0x2685.Enabled;
							__0x2850 = true;
						}
						if( __0x2774.Checked != __0x2685.Checked )
						{
							__0x2774.Checked = __0x2685.Checked;
							__0x2850 = true;
						}
					}
				}
			}
		}




		
		

		Component_ProjectSettings.RibbonAndToolbarActionsClass __0x2686;
		bool __0x2687;

		ESet<string> __0x2688 = new ESet<string>( new string[] { "P" } );

		

		string __0x2689 = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

		string __0x2812( string __0x2851 )
		{
			foreach( var __0x2775 in __0x2851 + __0x2689 )
			{
				var __0x2690 = __0x2775.ToString().ToUpper();
				if( __0x2690 != " " && !__0x2688.Contains( __0x2690 ) )
				{
					__0x2688.AddWithCheckAlreadyContained( __0x2690 );
					return __0x2690;
				}
			}
			return "";
		}

		void __0x2813( EditorRibbonDefaultConfiguration.Group __0x2852, KryptonContextMenuCollection __0x2853 )
		{
			var __0x2691 = new List<KryptonContextMenuItemBase>();

			foreach( var __0x2776 in __0x2852.Children )
			{
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				

				
				

				
				var __0x2692 = __0x2776 as EditorAction;
				if( __0x2692 == null )
				{
					var __0x2693 = __0x2776 as string;
					if( __0x2693 != null )
						__0x2692 = EditorActions.GetByName( __0x2693 );
				}
				if( __0x2692 != null )
				{
					if( !__0x2692.CompletelyDisabled )
					{
						EventHandler __0x2694 = delegate ( object __0x2854, EventArgs __0x2855 )
						{
							var __0x2695 = (KryptonContextMenuItem)__0x2854;

							var __0x2696 = __0x2695.Tag as EditorAction;
							if( __0x2696 != null )
								EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2696.Name );
						};

						var __0x2697 = new KryptonContextMenuItem( __0x2692.GetContextMenuText(), null, __0x2694 );
						
						__0x2697.Tag = __0x2692;
						__0x2691.Add( __0x2697 );
					}
				}
				
				else if( __0x2776 == null )
					__0x2691.Add( new KryptonContextMenuSeparator() );
			}

			if( __0x2691.Count != 0 )
				__0x2853.Add( new KryptonContextMenuItems( __0x2691.ToArray() ) );
		}

		void __0x2814()
		{
			kryptonRibbon.RibbonStrings.AppButtonKeyTip = "P";

			__0x2821();
		}

		private void __0x2815( object __0x2856, EventArgs __0x2857 )
		{
			var __0x2698 = (KryptonRibbonGroupButton)__0x2856;

			var __0x2699 = __0x2698.Tag as EditorAction;
			if( __0x2699 != null )
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2699.Name );
		}

		private void __0x2816( object __0x2858, EventArgs __0x2859 )
		{
			var __0x2700 = (KryptonRibbonGroupSliderControl)__0x2858;

			var __0x2701 = __0x2700.Tag as EditorAction;
			if( __0x2701 != null )
			{
				__0x2701.Slider.Value = __0x2700.GetValue();
				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2701.Name );
			}
		}

		
		
		

		
		
		
		
		
		
		

		private void __0x2817( ContentBrowser __0x2860, IList<ContentBrowser.Item> __0x2861, bool __0x2862, ref bool __0x2863 )
		{
			var __0x2702 = __0x2860.Tag as EditorAction;
			if( __0x2702 != null )
			{
				if( __0x2860.SelectedItems.Length != 0 )
					__0x2702.ListBox.SelectedIndex = (int)__0x2860.SelectedItems[ 0 ].Tag;
				else
					__0x2702.ListBox.SelectedIndex = -1;

				__0x2702.ListBox.LastSelectedIndexChangedByUser = __0x2862;

				EditorAPI.EditorActionClick( EditorAction.HolderEnum.RibbonQAT, __0x2702.Name );
			}
		}

		void __0x2818()
		{
			var __0x2703 = ProjectSettings.Get.RibbonAndToolbarActions;
			if( __0x2686 == null || !__0x2703.Equals( __0x2686 ) || __0x2687 )
			{
				__0x2686 = __0x2703.Clone();
				__0x2687 = false;

				ribbonLastSelectedTabTypeByUser_DisableUpdate = true;

				kryptonRibbon.RibbonTabs.Clear();

				foreach( var __0x2777 in ProjectSettings.Get.RibbonAndToolbarActions.RibbonTabs )
				{
					if( !__0x2777.Enabled )
						continue;

					
					EditorRibbonDefaultConfiguration.Tab __0x2704 = null;
					if( __0x2777.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Basic )
						__0x2704 = EditorRibbonDefaultConfiguration.GetTab( __0x2777.Name );

					var __0x2705 = new KryptonRibbonTab();
					__0x2705.Tag = __0x2704;

					if( __0x2777.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Basic )
						__0x2705.Text = EditorLocalization.Translate( "Ribbon.Tab", __0x2777.Name );
					else
						__0x2705.Text = __0x2777.Name;

					__0x2705.KeyTip = __0x2812( __0x2777.Name );

					kryptonRibbon.RibbonTabs.Add( __0x2705 );

					var __0x2706 = new ESet<string>();

					string GetKeyTip( string __0x2864 )
					{
						foreach( var __0x2778 in __0x2864 + __0x2689 )
						{
							var __0x2707 = __0x2778.ToString().ToUpper();
							if( __0x2707 != " " && !__0x2706.Contains( __0x2707 ) )
							{
								__0x2706.AddWithCheckAlreadyContained( __0x2707 );
								return __0x2707;
							}
						}
						return "";
					}

					foreach( var __0x2779 in __0x2777.Groups )
					{
						if( !__0x2779.Enabled )
							continue;

						var __0x2708 = new KryptonRibbonGroup();

						if( __0x2779.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem.TypeEnum.Basic )
							__0x2708.TextLine1 = EditorLocalization.Translate( "Ribbon.Group", __0x2779.Name );
						else
							__0x2708.TextLine1 = __0x2779.Name;

						__0x2708.DialogBoxLauncher = false;
															  

						foreach( var __0x2780 in __0x2779.Actions )
						{
							if( !__0x2780.Enabled )
								continue;

							
							if( __0x2780.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.SubGroupOfActions )
							{
								EditorRibbonDefaultConfiguration.Group __0x2709 = null;
								if( __0x2704 != null )
								{
									var __0x2710 = __0x2704.Groups.Find( __0x2865 => __0x2865.Name == __0x2779.Name );
									if( __0x2710 != null )
									{
										foreach( var __0x2781 in __0x2710.Children )
										{
											var __0x2711 = __0x2781 as EditorRibbonDefaultConfiguration.Group;
											if( __0x2711 != null && __0x2711.Name == __0x2780.Name )
											{
												__0x2709 = __0x2711;
												break;
											}
										}
									}
								}

								if( __0x2709 != null && !__0x2709.AreAllChildrenCompletelyDisabled() )
								{
									var __0x2712 = new KryptonRibbonGroupTriple();
									__0x2708.Items.Add( __0x2712 );

									var __0x2713 = new KryptonRibbonGroupButton();
									__0x2713.Tag = "SubGroup";
									

									var __0x2714 = __0x2709.DropDownGroupText.Item1;
									if( __0x2709.DropDownGroupText.Item2 != "" )
										__0x2714 += "\n" + __0x2709.DropDownGroupText.Item2;

									var __0x2715 = EditorLocalization.Translate( "Ribbon.Action", __0x2714 );
									var __0x2716 = __0x2715.Split( new char[] { '\n' } );

									__0x2713.TextLine1 = __0x2716[ 0 ];
									if( __0x2716.Length > 1 )
										__0x2713.TextLine2 = __0x2716[ 1 ];

									
									

									if( __0x2709.DropDownGroupImageSmall != null )
										__0x2713.ImageSmall = __0x2709.DropDownGroupImageSmall;
									else if( __0x2709.DropDownGroupImageLarge != null )
										__0x2713.ImageSmall = EditorAction.ResizeImage( __0x2709.DropDownGroupImageLarge, 16, 16 );
									__0x2713.ImageLarge = __0x2709.DropDownGroupImageLarge;

									

									if( !string.IsNullOrEmpty( __0x2709.DropDownGroupDescription ) )
										__0x2713.ToolTipBody = EditorLocalization.Translate( "EditorAction.Description", __0x2709.DropDownGroupDescription );
									else
										__0x2713.ToolTipBody = __0x2709.Name;

									__0x2713.ButtonType = GroupButtonType.DropDown;
									__0x2713.ShowArrow = __0x2709.ShowArrow;

									__0x2713.KryptonContextMenu = new KryptonContextMenu();
									__0x2813( __0x2709, __0x2713.KryptonContextMenu.Items );

									__0x2712.Items.Add( __0x2713 );
								}
							}

							
							if( __0x2780.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.Action )
							{
								var __0x2717 = EditorActions.GetByName( __0x2780.Name );

								if( __0x2717 != null && !__0x2717.CompletelyDisabled )
								{
									if( __0x2717.ActionType == EditorAction.ActionTypeEnum.Button || __0x2717.ActionType == EditorAction.ActionTypeEnum.DropDown )
									{
										

										var __0x2718 = new KryptonRibbonGroupTriple();
										__0x2708.Items.Add( __0x2718 );

										var __0x2719 = new KryptonRibbonGroupButton();

										
										

										__0x2719.Tag = __0x2717;

										var __0x2720 = __0x2717.RibbonText.Item1;
										if( __0x2717.RibbonText.Item2 != "" )
											__0x2720 += "\n" + __0x2717.RibbonText.Item2;

										var __0x2721 = EditorLocalization.Translate( "Ribbon.Action", __0x2720 );
										var __0x2722 = __0x2721.Split( new char[] { '\n' } );

										__0x2719.TextLine1 = __0x2722[ 0 ];
										if( __0x2722.Length > 1 )
											__0x2719.TextLine2 = __0x2722[ 1 ];

										
										

										__0x2719.ImageSmall = __0x2717.GetImageSmall();
										__0x2719.ImageLarge = __0x2717.GetImageBig();
										__0x2719.ToolTipBody = __0x2717.ToolTip;
										__0x2719.KeyTip = GetKeyTip( __0x2717.Name );

										
										
										
										
										

										if( __0x2717.ActionType == EditorAction.ActionTypeEnum.DropDown )
										{
											__0x2719.ButtonType = GroupButtonType.DropDown;
											__0x2719.KryptonContextMenu = __0x2717.DropDownContextMenu;
										}

										__0x2719.Click += __0x2815;

										__0x2718.Items.Add( __0x2719 );
									}
									else if( __0x2717.ActionType == EditorAction.ActionTypeEnum.Slider )
									{
										

										var __0x2723 = new KryptonRibbonGroupTriple();
										__0x2708.Items.Add( __0x2723 );

										var __0x2724 = new KryptonRibbonGroupSlider();
										__0x2724.Tag = __0x2717;
										__0x2724.ToolTipBody = __0x2717.ToolTip;

										__0x2724.Control.Size = new System.Drawing.Size( (int)( (float)__0x2724.Control.Size.Width * EditorAPI.DPIScale ), __0x2724.Control.Size.Height );
										__0x2724.Control.kryptonSplitContainer2.Size = new System.Drawing.Size( (int)( (float)__0x2724.Control.kryptonSplitContainer2.Size.Width * EditorAPI.DPIScale ), __0x2724.Control.Size.Height );
										__0x2724.Control.kryptonSplitContainer2.Panel1MinSize = (int)( (float)__0x2724.Control.kryptonSplitContainer2.Panel1MinSize * EditorAPI.DPIScale );
										__0x2724.Control.kryptonSplitContainer1.Panel2MinSize = (int)( (float)__0x2724.Control.kryptonSplitContainer1.Panel2MinSize * EditorAPI.DPIScale );
										__0x2724.Control.kryptonSplitContainer1.SplitterDistance = 10000;

										__0x2724.Control.kryptonLabel1.Text = EditorLocalization.Translate( "Ribbon.Action", __0x2717.RibbonText.Item1 );
										__0x2724.Control.Init( __0x2717.Slider.Minimum, __0x2717.Slider.Maximum, __0x2717.Slider.ExponentialPower );
										__0x2724.Control.SetValue( __0x2717.Slider.Value );

										__0x2724.Control.Tag = __0x2717;
										__0x2724.Control.ValueChanged += __0x2816;

										__0x2723.Items.Add( __0x2724 );
									}
									
									
									

									
									

									
									

									
									
									

									
									

									
									

									

									
									
									else if( __0x2717.ActionType == EditorAction.ActionTypeEnum.ListBox )
									{
										

										var __0x2725 = new KryptonRibbonGroupTriple();
										__0x2708.Items.Add( __0x2725 );

										var __0x2726 = new KryptonRibbonGroupListBox();
										__0x2726.Tag = __0x2717;
										__0x2726.ToolTipBody = __0x2717.ToolTip;

										__0x2726.Control.Size = new System.Drawing.Size( (int)( (float)__0x2717.ListBox.Length * EditorAPI.DPIScale ), __0x2726.Control.Size.Height );
										__0x2726.Control.kryptonSplitContainer1.Size = new System.Drawing.Size( (int)( (float)__0x2717.ListBox.Length * EditorAPI.DPIScale ), __0x2726.Control.Size.Height );
										__0x2726.Control.kryptonSplitContainer1.Panel2MinSize = (int)( (float)__0x2726.Control.kryptonSplitContainer1.Panel2MinSize * EditorAPI.DPIScale );
										__0x2726.Control.kryptonSplitContainer1.SplitterDistance = 10000;
										
										

										__0x2726.Control.kryptonLabel1.Text = EditorLocalization.Translate( "Ribbon.Action", __0x2717.RibbonText.Item1 );

										var __0x2727 = __0x2726.Control.contentBrowser1;

										if( __0x2717.ListBox.Mode == EditorAction.ListBoxSettings.ModeEnum.Tiles )
										{
											__0x2727.ListViewModeOverride = new ContentBrowserListModeTilesRibbon( __0x2727 );
											__0x2727.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
											__0x2727.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
											__0x2727.UseSelectedTreeNodeAsRootForList = false;
											__0x2727.Options.Breadcrumb = false;
											__0x2727.ListViewBorderDraw = BorderSides.Left | BorderSides.Right | BorderSides.Bottom;
											__0x2727.Options.TileImageSize = 22;
										}
										else
										{
											__0x2727.RemoveTreeViewIconsColumn();
											__0x2727.TreeView.RowHeight -= 2;
										}

										__0x2727.Tag = __0x2717;

										
										__0x2726.SetItems( __0x2717.ListBox.Items );

										__0x2727.ItemAfterSelect += __0x2817;

										if( __0x2727.Items.Count != 0 )
											__0x2727.SelectItems( new ContentBrowser.Item[] { __0x2727.Items.ToArray()[ 0 ] } );

										

										__0x2725.Items.Add( __0x2726 );
									}

								}
							}
						}

						if( __0x2708.Items.Count != 0 )
							__0x2705.Groups.Add( __0x2708 );
					}

					
					var __0x2728 = "";
					if( __0x2704 != null )
						__0x2728 = __0x2704.Type;
					if( ribbonLastSelectedTabTypeByUser != "" && __0x2728 == ribbonLastSelectedTabTypeByUser )
						kryptonRibbon.SelectedTab = __0x2705;
				}

				ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
			}
		}

		void __0x2819( KryptonContextMenuCollection __0x2866, out bool __0x2867 )
		{
			__0x2867 = false;

			foreach( var __0x2782 in __0x2866 )
			{
				var __0x2729 = __0x2782 as KryptonContextMenuItems;
				if( __0x2729 != null )
				{
					foreach( var __0x2783 in __0x2729.Items )
					{
						var __0x2730 = __0x2783 as KryptonContextMenuItem;
						if( __0x2730 != null )
						{
							var __0x2731 = __0x2730.Tag as EditorAction;
							if( __0x2731 != null )
							{
								var __0x2732 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2731 );

								__0x2730.Enabled = __0x2732.Enabled;
								if( __0x2730.Checked != __0x2732.Checked )
									__0x2730.Checked = __0x2732.Checked;

								if( __0x2730.Enabled )
									__0x2867 = true;

								if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2731 ) )
									__0x2730.Visible = false;
							}
						}
					}
				}
			}
		}

		void __0x2820()
		{
			
			{
				Metadata.TypeInfo __0x2733 = null;
				{
					var __0x2734 = __0x2621.SelectedDocumentWindow?.ObjectOfWindow;
					if( __0x2734 != null )
						__0x2733 = MetadataManager.MetadataGetType( __0x2734 );
				}
				foreach( var __0x2784 in kryptonRibbon.RibbonTabs )
				{
					var __0x2735 = __0x2784.Tag as EditorRibbonDefaultConfiguration.Tab;
					if( __0x2735 != null )
					{
						bool __0x2736 = true;
						if( __0x2735.VisibleOnlyForType != null && __0x2736 )
							__0x2736 = __0x2733 != null && __0x2735.VisibleOnlyForType.IsAssignableFrom( __0x2733 );
						if( __0x2735.VisibleCondition != null && __0x2736 )
							__0x2736 = __0x2735.VisibleCondition();
						if( __0x2736 && !EditorUtility.PerformRibbonTabVisibleFilter( __0x2735 ) )
							__0x2736 = false;

						if( __0x2784.Visible != __0x2736 )
						{
							ribbonLastSelectedTabTypeByUser_DisableUpdate = true;
							__0x2784.Visible = __0x2736;
							ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
						}

						if( __0x2784.Visible && ribbonLastSelectedTabTypeByUser != "" && ribbonLastSelectedTabTypeByUser == __0x2735.Type )
						{
							ribbonLastSelectedTabTypeByUser_DisableUpdate = true;
							kryptonRibbon.SelectedTab = __0x2784;
							ribbonLastSelectedTabTypeByUser_DisableUpdate = false;
						}
					}
				}
			}

			
			foreach( var __0x2785 in kryptonRibbon.RibbonTabs )
			{
				foreach( var __0x2786 in __0x2785.Groups )
				{
					foreach( var __0x2787 in __0x2786.Items )
					{
						var __0x2737 = __0x2787 as KryptonRibbonGroupTriple;
						if( __0x2737 != null )
						{
							foreach( var __0x2788 in __0x2737.Items )
							{
								
								var __0x2738 = __0x2788 as KryptonRibbonGroupButton;
								if( __0x2738 != null )
								{
									
									if( __0x2738.Tag as string == "SubGroup" && __0x2738.KryptonContextMenu != null )
									{
										__0x2819( __0x2738.KryptonContextMenu.Items, out var existsEnabled );

										
										__0x2738.Enabled = existsEnabled;
									}

									
									var __0x2739 = __0x2738.Tag as EditorAction;
									if( __0x2739 != null )
									{
										var __0x2740 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2739 );

										__0x2738.Enabled = __0x2740.Enabled;

										
										
										if( __0x2740.Checked && __0x2739.ActionType == EditorAction.ActionTypeEnum.Button )
											__0x2738.ButtonType = GroupButtonType.Check;

										__0x2738.Checked = __0x2740.Checked;

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2739 ) )
											__0x2738.Visible = false;
									}
								}

								
								var __0x2741 = __0x2788 as KryptonRibbonGroupSlider;
								if( __0x2741 != null )
								{
									var __0x2742 = __0x2741.Tag as EditorAction;
									if( __0x2742 != null )
									{
										var __0x2743 = __0x2742.Slider.Value;

										var __0x2744 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2742 );

										__0x2741.Enabled = __0x2744.Enabled;
										if( __0x2743 != __0x2742.Slider.Value )
										{
											__0x2741.Control.SetValue( __0x2742.Slider.Value );
											
										}

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2742 ) )
											__0x2741.Visible = false;
									}
								}

								
								
								
								
								
								
								
								
								

								

								

								
								
								

								
								
								

								
								
								
								
								
								
								
								
								

								
								var __0x2745 = __0x2788 as KryptonRibbonGroupListBox;
								if( __0x2745 != null )
								{
									var __0x2746 = __0x2745.Tag as EditorAction;
									if( __0x2746 != null )
									{
										var __0x2747 = __0x2746.ListBox.Items;
										var __0x2748 = __0x2746.ListBox.SelectedIndex;

										var __0x2749 = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.RibbonQAT, __0x2746 );

										
										__0x2745.Enabled = __0x2749.Enabled;

										var __0x2750 = __0x2745.Control.contentBrowser1;

										
										if( !__0x2746.ListBox.Items.SequenceEqual( __0x2747 ) )
											__0x2745.SetItems( __0x2746.ListBox.Items );

										
										if( __0x2746.ListBox.SelectIndex != null )
										{
											int __0x2751 = __0x2746.ListBox.SelectIndex.Value;

											var __0x2752 = __0x2750.Items.FirstOrDefault( __0x2868 => (int)__0x2868.Tag == __0x2751 );
											if( __0x2752 != null )
											{
												var __0x2753 = new ContentBrowser.Item[] { __0x2752 };
												if( !__0x2753.SequenceEqual( __0x2750.SelectedItems ) )
													__0x2750.SelectItems( __0x2753 );
											}
											else
											{
												if( __0x2750.SelectedItems.Length != 0 )
													__0x2750.SelectItems( null );
											}

											__0x2746.ListBox.SelectIndex = null;
										}

										if( !EditorUtility.PerformEditorActionVisibleFilter( __0x2746 ) )
											__0x2745.Visible = false;

										
										
										
										
										
										
										

										
										
										
										
										
										
										
										
										

										
										
										
										
										

										
										

									}
								}

							}
						}

					}
				}
			}
		}

		void __0x2821()
		{
			__0x2818();
			__0x2820();
		}


	}
}
namespace NeoAxis.Editor
{
    partial class EditorForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x2754 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x2754 != null))
            {
                __0x2754.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x2822()
        {
			this.__0x2754 = new System.ComponentModel.Container();
			this.__0x2756 = new ComponentFactory.Krypton.Toolkit.KryptonManager(this.__0x2754);
			this.__0x2757 = new ComponentFactory.Krypton.Toolkit.KryptonPanel();
			this.__0x2759 = new NeoAxis.Editor.LowProfileDockableWorkspace();
			this.__0x2758 = new System.Windows.Forms.Timer(this.__0x2754);
			this.backstageMenu1 = new NeoAxis.Editor.BackstageMenu();
			this.kryptonRibbon = new ComponentFactory.Krypton.Ribbon.KryptonRibbon();
			this.__0x2755 = new ComponentFactory.Krypton.Toolkit.ButtonSpecAny();
			((System.ComponentModel.ISupportInitialize)(this.__0x2757)).BeginInit();
			this.__0x2757.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x2759)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonRibbon)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x2757.Controls.Add(this.__0x2759);
			this.__0x2757.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2757.Location = new System.Drawing.Point(0, 136);
			this.__0x2757.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x2757.Name = "kryptonPanel";
			this.__0x2757.Padding = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x2757.Size = new System.Drawing.Size(1059, 783);
			this.__0x2757.TabIndex = 2;
			
			
			
			this.__0x2759.AutoHiddenHost = false;
			this.__0x2759.CompactFlags = ((ComponentFactory.Krypton.Workspace.CompactFlags)(((ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptyCells | ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptySequences) 
            | ComponentFactory.Krypton.Workspace.CompactFlags.PromoteLeafs)));
			this.__0x2759.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x2759.Location = new System.Drawing.Point(5, 4);
			this.__0x2759.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x2759.Name = "kryptonDockableWorkspace";
			
			
			
			this.__0x2759.Root.UniqueName = "EditorFormKryptonDockableWorkspace";
			this.__0x2759.Root.WorkspaceControl = this.__0x2759;
			this.__0x2759.ShowMaximizeButton = false;
			this.__0x2759.Size = new System.Drawing.Size(1049, 775);
			this.__0x2759.TabIndex = 0;
			this.__0x2759.TabStop = true;
			
			
			
			this.__0x2758.Enabled = true;
			this.__0x2758.Interval = 10;
			this.__0x2758.Tick += new System.EventHandler(this.__0x2795);
			
			
			
			this.backstageMenu1.Location = new System.Drawing.Point(141, 114);
			this.backstageMenu1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.backstageMenu1.Name = "backstageMenu1";
			this.backstageMenu1.Ribbon = this.kryptonRibbon;
			this.backstageMenu1.Size = new System.Drawing.Size(1061, 959);
			this.backstageMenu1.TabIndex = 1;
			this.backstageMenu1.Visible = false;
			
			
			
			this.kryptonRibbon.AllowFormIntegrate = false;
			this.kryptonRibbon.ApplicationButtonDropDownMenu = this.backstageMenu1;
			this.kryptonRibbon.ButtonSpecs.AddRange(new ComponentFactory.Krypton.Toolkit.ButtonSpecAny[] {
            this.__0x2755});
			this.kryptonRibbon.HideRibbonSize = new System.Drawing.Size(375, 312);
			this.kryptonRibbon.InDesignHelperMode = true;
			this.kryptonRibbon.Name = "kryptonRibbon";
			this.kryptonRibbon.QATUserChange = false;
			
			this.kryptonRibbon.RibbonAppButton.AppButtonMinRecentSize = new System.Drawing.Size(300, 250);
			this.kryptonRibbon.RibbonAppButton.AppButtonText = "Project";
			this.kryptonRibbon.RibbonStrings.RecentDocuments = "Create New Outlook Item";
			this.kryptonRibbon.SelectedTab = null;
			this.kryptonRibbon.Size = new System.Drawing.Size(1059, 136);
			this.kryptonRibbon.TabIndex = 0;
			this.kryptonRibbon.SelectedTabChanged += new System.EventHandler(this.__0x2794);
			this.kryptonRibbon.AppButtonMenuOpening += new System.ComponentModel.CancelEventHandler(this.__0x2796);
			
			
			
			this.__0x2755.Image = global::NeoAxis.Properties.Resources.Help_16;
			this.__0x2755.UniqueName = "E0D28D217A1E48CEE0D28D217A1E48CE";
			this.__0x2755.Visible = false;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.ClientSize = new System.Drawing.Size(1059, 919);
			this.Controls.Add(this.backstageMenu1);
			this.Controls.Add(this.__0x2757);
			this.Controls.Add(this.kryptonRibbon);
			
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "EditorForm";
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.StateCommon.Header.Content.LongText.TextH = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.StateCommon.Header.Content.Padding = new System.Windows.Forms.Padding(8, -1, -1, -1);
			this.StateCommon.Header.Content.ShortText.TextH = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.Text = "NeoAxis Engine";
			this.WindowState = System.Windows.Forms.FormWindowState.Maximized;
			this.Activated += new System.EventHandler(this.__0x2800);
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x2790);
			this.Load += new System.EventHandler(this.__0x2789);
			((System.ComponentModel.ISupportInitialize)(this.__0x2757)).EndInit();
			this.__0x2757.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x2759)).EndInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonRibbon)).EndInit();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

        #endregion
        private ComponentFactory.Krypton.Toolkit.ButtonSpecAny __0x2755;
		private ComponentFactory.Krypton.Toolkit.KryptonManager __0x2756;
		private ComponentFactory.Krypton.Toolkit.KryptonPanel __0x2757;
        private System.Windows.Forms.Timer __0x2758;
		public ComponentFactory.Krypton.Ribbon.KryptonRibbon kryptonRibbon;
		private LowProfileDockableWorkspace __0x2759;
		public BackstageMenu backstageMenu1;
	}
}






namespace NeoAxis.Editor
{
	public static class EditorImportResource
	{
		public static void Import( string[] fileNames, string destRealFolder )
		{
			try
			{
				if( !Directory.Exists( destRealFolder ) )
					Directory.CreateDirectory( destRealFolder );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			
			
			
			
			
			
			
			
			
			
			
			

			

			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			List<string> __0x2869 = new List<string>();

			foreach( var __0x2872 in fileNames )
			{
				var __0x2870 = VirtualPathUtility.GetVirtualPathByReal( __0x2872 );
				if( !string.IsNullOrEmpty( __0x2870 ) )
				{
					
					__0x2869.Add( __0x2872 );
				}
				else
				{
					

					string __0x2871;
					try
					{
						__0x2871 = Path.Combine( destRealFolder, Path.GetFileName( __0x2872 ) );

						if( Directory.Exists( __0x2872 ) )
							IOUtility.CopyDirectory( __0x2872, __0x2871 );
						else
							File.Copy( __0x2872, __0x2871 );
					}
					catch( Exception e )
					{
						EditorMessageBox.ShowWarning( e.Message );
						
						return;
					}

					__0x2869.Add( __0x2871 );
				}
			}

			
			EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( __0x2869.ToArray() );
			EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorLocalization
	{
		static bool __0x2873;
		static string __0x2874;
		static bool __0x2875;
		static Dictionary<string, string> __0x2876 = new Dictionary<string, string>();
		static ESet<string> __0x2877 = new ESet<string>();
		static bool __0x2878;

		

		internal static void Init( string language, bool writeNotFound )
		{
			if( !string.IsNullOrEmpty( language ) && language != "English" )
			{
				EditorLocalization.__0x2874 = language;
				EditorLocalization.__0x2875 = writeNotFound;

				
				if( ParseFile( language, out var d, out _, out __0x2878 ) )
				{
					foreach( var __0x2908 in d )
						__0x2876[ __0x2908.Key ] = __0x2908.Value;
				}

				__0x2873 = true;
			}
		}

		internal static void Shutdown()
		{
			if( __0x2873 && __0x2875 )
			{
				var __0x2879 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Localization", __0x2874 );
				var __0x2880 = __0x2879 + "_NotFound.txt";

				EDictionary<string, string> __0x2881 = null;
				Encoding __0x2882 = null;
				if( File.Exists( __0x2880 ) )
					ParseFile( __0x2874 + "_NotFound", out __0x2881, out __0x2882, out _ );

				if( __0x2881 == null )
					__0x2881 = new EDictionary<string, string>();

				foreach( var __0x2909 in __0x2877 )
				{
					if( !__0x2881.ContainsKey( __0x2909 ) )
						__0x2881[ __0x2909 ] = "";
				}

				try
				{
					if( File.Exists( __0x2880 ) )
						File.Delete( __0x2880 );

					var __0x2883 = new List<string>();
					foreach( var __0x2910 in __0x2881 )
						__0x2883.Add( __0x2910.Key + "|" + __0x2910.Value );

					__0x2883.Sort();

					if( __0x2882 != null )
						File.WriteAllLines( __0x2880, __0x2883, __0x2882 );
					else
						File.WriteAllLines( __0x2880, __0x2883 );
				}
				catch( Exception e )
				{
					Log.Warning( "EditorLocalization: Shutdown: " + e.Message );
				}
			}
		}

		public static bool Initialized
		{
			get { return __0x2873; }
		}

		public static string Language
		{
			get { return __0x2874; }
		}

		public static bool WriteNotFound
		{
			get { return __0x2875; }
		}

		public static string Translate( string group, string text )
		{
			if( Initialized && text != null )
			{
				var __0x2884 = text.Trim();
				if( __0x2884 != "" )
				{
					var __0x2885 = group + "|" + __0x2884.Replace( "\n", "\\n" );

					if( __0x2876.TryGetValue( __0x2885, out var value ) )
						return value.Replace( "\\n", "\n" );

					if( __0x2875 )
						__0x2877.AddWithCheckAlreadyContained( __0x2885 );
				}
			}

			return text;
		}

		public static bool ParseFile( string fileName, out EDictionary<string, string> resultData, out Encoding encoding, out bool wide )
		{
			resultData = null;
			encoding = null;
			wide = false;

			var __0x2886 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Localization", fileName );
			var __0x2887 = __0x2886 + ".info";
			var __0x2888 = __0x2886 + ".txt";

			if( File.Exists( __0x2888 ) )
			{
				try
				{
					string __0x2889 = null;
					int? __0x2890 = null;

					if( File.Exists( __0x2887 ) )
					{
						var __0x2891 = TextBlockUtility.LoadFromRealFile( __0x2887 );
						if( __0x2891 != null )
						{
							
							{
								var __0x2892 = __0x2891.GetAttribute( "Encoding" );
								if( int.TryParse( __0x2892, out var codepage ) )
									__0x2890 = codepage;
								else
									__0x2889 = __0x2892;
							}

							
							{
								var __0x2893 = __0x2891.GetAttribute( "WideLanguage" );
								if( !string.IsNullOrEmpty( __0x2893 ) )
									wide = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x2893 );
							}
						}
					}

#if !DEPLOY
					if( __0x2890.HasValue )
						encoding = CodePagesEncodingProvider.Instance.GetEncoding( __0x2890.Value );
					else if( !string.IsNullOrEmpty( __0x2889 ) )
						encoding = CodePagesEncodingProvider.Instance.GetEncoding( __0x2889 );
#endif
					
					
					
					

					string[] __0x2894 = null;
					if( encoding != null )
						__0x2894 = File.ReadAllLines( __0x2888, encoding );
					else
						__0x2894 = File.ReadAllLines( __0x2888 );

					resultData = new EDictionary<string, string>();

					foreach( var __0x2911 in __0x2894 )
					{
						if( !string.IsNullOrEmpty( __0x2911 ) )
						{
							var __0x2895 = __0x2911.Split( new char[] { '|' } );
							if( __0x2895.Length != 3 )
								throw new Exception( string.Format( "Invalid format for line \'{0}\'.", __0x2911 ) );
							resultData[ __0x2895[ 0 ] + "|" + __0x2895[ 1 ] ] = __0x2895[ 2 ];
						}
					}

					return true;
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}
			}

			return false;
		}

		public static void TranslateForm( string group, Control control )
		{
			if( Initialized )
			{
				foreach( var __0x2912 in control.Controls )
				{
					
					{
						var __0x2896 = __0x2912 as KryptonLabel;
						if( __0x2896 != null && !string.IsNullOrEmpty( __0x2896.Text ) )
						{
							var __0x2897 = __0x2896.Text;

							if( __0x2897[ __0x2897.Length - 1 ] == ':' )
							{
								var __0x2898 = __0x2897.Substring( 0, __0x2897.Length - 1 );
								__0x2896.Text = Translate( group, __0x2898 ) + ":";
							}
							else
								__0x2896.Text = Translate( group, __0x2897 );
						}
					}

					
					{
						var __0x2899 = __0x2912 as Label;
						if( __0x2899 != null && !string.IsNullOrEmpty( __0x2899.Text ) )
						{
							var __0x2900 = __0x2899.Text;

							if( __0x2900.Length > 0 && __0x2900[ __0x2900.Length - 1 ] == ':' )
							{
								var __0x2901 = __0x2900.Substring( 0, __0x2900.Length - 1 );
								__0x2899.Text = Translate( group, __0x2901 ) + ":";
							}
							else
								__0x2899.Text = Translate( group, __0x2900 );
						}
					}

					
					{
						var __0x2902 = __0x2912 as EngineLabel;
						if( __0x2902 != null && !string.IsNullOrEmpty( __0x2902.Text ) )
						{
							var __0x2903 = __0x2902.Text;

							if( __0x2903.Length > 0 && __0x2903[ __0x2903.Length - 1 ] == ':' )
							{
								var __0x2904 = __0x2903.Substring( 0, __0x2903.Length - 1 );
								__0x2902.Text = Translate( group, __0x2904 ) + ":";
							}
							else
								__0x2902.Text = Translate( group, __0x2903 );
						}
					}

					
					{
						var __0x2905 = __0x2912 as KryptonButton;
						if( __0x2905 != null && !string.IsNullOrEmpty( __0x2905.Text ) )
							__0x2905.Text = Translate( group, __0x2905.Text );
					}

					
					{
						var __0x2906 = __0x2912 as KryptonCheckBox;
						if( __0x2906 != null && !string.IsNullOrEmpty( __0x2906.Text ) )
							__0x2906.Text = Translate( group, __0x2906.Text );
					}
				}
			}
		}

		public static string TranslateLabel( string group, string text )
		{
			if( Initialized && text != null )
			{
				if( text.Length > 0 && text[ text.Length - 1 ] == ':' )
				{
					var __0x2907 = text.Substring( 0, text.Length - 1 );
					return Translate( group, __0x2907 ) + ":";
				}
				else
					return Translate( group, text );
			}
			return text;
		}

		public static bool WideLanguage
		{
			get { return Initialized && __0x2878; }
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Message box of the editor.
	/// </summary>
	public class EditorMessageBox
	{
		public static EDialogResult ShowQuestion( string text, EMessageBoxButtons buttons )
		{
			return (EDialogResult)KryptonMessageBox.Show( text, EngineInfo.OriginalName, (MessageBoxButtons)buttons, MessageBoxIcon.Question );
		}

		public static void ShowWarning( string text )
		{
			KryptonMessageBox.Show( text, EngineInfo.OriginalName, MessageBoxButtons.OK, MessageBoxIcon.Warning );
		}

		public static void ShowInfo( string text )
		{
			KryptonMessageBox.Show( text, EngineInfo.OriginalName, MessageBoxButtons.OK, MessageBoxIcon.Information );
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorResourcesCache
	{
		static Dictionary<string, Image> __0x2913 = new Dictionary<string, Image>();

		

		

		public static readonly Image New = RenderStandard.GetImageForDispalyScale( Resources.New_16, Resources.New_32 );
		public static readonly Image Edit = RenderStandard.GetImageForDispalyScale( Resources.Edit_16, Resources.Edit_32 );
		public static readonly Image Settings = RenderStandard.GetImageForDispalyScale( Resources.Maximize_16, Resources.Maximize_32 );
		public static readonly Image Cut = RenderStandard.GetImageForDispalyScale( Resources.Cut_16, Resources.Cut_32 );
		public static readonly Image Copy = RenderStandard.GetImageForDispalyScale( Resources.Copy_16, Resources.Copy_32 );
		public static readonly Image Paste = RenderStandard.GetImageForDispalyScale( Resources.Paste_16, Resources.Paste_32 );
		public static readonly Image Clone = RenderStandard.GetImageForDispalyScale( Resources.Copy_16, Resources.Copy_32 );
		public static readonly Image Delete = RenderStandard.GetImageForDispalyScale( Resources.Delete_16, Resources.Delete_32 );
		public static readonly Image Add = RenderStandard.GetImageForDispalyScale( Resources.Add_16, Resources.Add_32 );

		
		public static readonly Image Move = RenderStandard.GetImageForDispalyScale( Resources.Move_16, Resources.Move_32 );
		public static readonly Image Rotate = RenderStandard.GetImageForDispalyScale( Resources.Rotate_16, Resources.Rotate_32 );
		public static readonly Image MoveRotate = RenderStandard.GetImageForDispalyScale( Resources.MoveRotate_16, Resources.MoveRotate_32 );
		public static readonly Image Scale = RenderStandard.GetImageForDispalyScale( Resources.Scale_16, Resources.Scale_32 );
		public static readonly Image Select = RenderStandard.GetImageForDispalyScale( Resources.Select_16, Resources.Select_32 );

		public static readonly Image MoveDown = RenderStandard.GetImageForDispalyScale( Resources.MoveDown_16, Resources.MoveDown_32 );
		public static readonly Image MoveUp = RenderStandard.GetImageForDispalyScale( Resources.MoveUp_16, Resources.MoveUp_32 );
		public static readonly Image NewFolder = RenderStandard.GetImageForDispalyScale( Resources.NewFolder_16, Resources.NewFolder_32 );
		public static readonly Image SelectFolder = RenderStandard.GetImageForDispalyScale( Resources.SelectFolder_16, Resources.SelectFolder_32 );
		public static readonly Image Options = RenderStandard.GetImageForDispalyScale( Resources.Options_16, Resources.Options_32 );
		public static readonly Image Rename = RenderStandard.GetImageForDispalyScale( Resources.Rename_16x, Resources.Rename_32x );
		public static readonly Image Selection = RenderStandard.GetImageForDispalyScale( Resources.Selection_16, Resources.Selection_32 );
		public static readonly Image Import = RenderStandard.GetImageForDispalyScale( Resources.Import_16, Resources.Import_32 );
		public static readonly Image Events = RenderStandard.GetImageForDispalyScale( Resources.Event_16, Resources.Event_32 );
		public static readonly Image Properties = RenderStandard.GetImageForDispalyScale( Resources.Properties_16, Resources.Properties_32 );
		public static readonly Image Refresh = RenderStandard.GetImageForDispalyScale( Resources.Refresh_16, Resources.Refresh_32 );
		public static readonly Image Download = RenderStandard.GetImageForDispalyScale( Resources.Download_16, Resources.Download_32 );

		public static readonly Image Info = RenderStandard.GetImageForDispalyScale( Resources.Info_16, Resources.Info_32 );
		public static readonly Image Warning = RenderStandard.GetImageForDispalyScale( Resources.Warning_16, Resources.Warning_32 );
		public static readonly Image Error = RenderStandard.GetImageForDispalyScale( Resources.Error_16, Resources.Error_32 );

		public static readonly Image Type = RenderStandard.GetImageForDispalyScale( Resources.Class, Resources.Class_32 );
		public static readonly Image Focus = RenderStandard.GetImageForDispalyScale( Resources.Focus_16, Resources.Focus_32 );
		public static readonly Image Help = RenderStandard.GetImageForDispalyScale( Resources.Help_16, Resources.Help_32 );
		public static readonly Image Save = RenderStandard.GetImageForDispalyScale( Resources.Save_16, Resources.Save_32 );
		public static readonly Image Money = RenderStandard.GetImageForDispalyScale( Resources.Money_16, Resources.Money_32 );
		public static readonly Image Filter = RenderStandard.GetImageForDispalyScale( Resources.Filter_16, Resources.Filter_32 );
		public static readonly Image Resource = RenderStandard.GetImageForDispalyScale( Resources.Resource_16, Resources.Resource_32 );

		

		public static Image GetImage( string name )
		{
			if( !__0x2913.TryGetValue( name, out var image ) )
			{
				image = Resources.ResourceManager.GetObject( name, Resources.Culture ) as Image;
				__0x2913.Add( name, image );
			}
			return image;
		}

		
		
		
		
		
		

		
		
		

		
		
	}
}





namespace NeoAxis.Editor
{
	public static class EditorRibbonDefaultConfiguration
	{
		public static List<Tab> Tabs = new List<Tab>();

		

		
		
		

		
		
		

		
		
		
		
		
		
		

		

		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		

		

		public class Group
		{
			public string Name;
			public (string, string) DropDownGroupText;
			public Image DropDownGroupImageSmall;
			public Image DropDownGroupImageLarge;
			public string DropDownGroupDescription = "";
			
			public List<object> Children = new List<object>();
			public bool ShowArrow;
			
			

			public Group()
			{
			}

			public Group( string name )
			{
				this.Name = name;
			}

			public bool AddAction( string actionName )
			{
				var __0x2914 = EditorActions.GetByName( actionName );
				if( __0x2914 == null )
				{
					
					Children.Add( actionName );
					return true;
					
					
				}
				Children.Add( __0x2914 );
				return true;
			}

			public void AddSeparator()
			{
				Children.Add( null );
			}

			public bool AreAllChildrenCompletelyDisabled()
			{
				foreach( var __0x2959 in Children )
				{
					var __0x2915 = __0x2959 as Group;
					if( __0x2915 != null && !__0x2915.AreAllChildrenCompletelyDisabled() )
						return false;

					var __0x2916 = __0x2959 as EditorAction;
					if( __0x2916 != null && !__0x2916.CompletelyDisabled )
						return false;

					var __0x2917 = __0x2959 as string;
					if( __0x2917 != null )
					{
						var __0x2918 = EditorActions.GetByName( __0x2917 );
						if( __0x2918 != null && !__0x2918.CompletelyDisabled )
							return false;
					}
				}

				return true;
			}
		}

		

		public class Tab
		{
			public string Name;
			public string Type;

			public Metadata.TypeInfo VisibleOnlyForType;

			public delegate bool VisibleConditionDelegate();
			public VisibleConditionDelegate VisibleCondition;

			public List<Group> Groups = new List<Group>();

			public Tab()
			{
			}

			public Tab( string name, string type, Metadata.TypeInfo visibleOnlyForType = null, VisibleConditionDelegate visibleCondition = null )
			{
				Name = name;
				Type = type;
				VisibleOnlyForType = visibleOnlyForType;
				VisibleCondition = visibleCondition;
			}
		}

		

#if !DEPLOY

		static EditorRibbonDefaultConfiguration()
		{
			EditorStandardActions.Register();

			
			{
				
				var __0x2919 = new Tab( "Home", "Home" );
				
				Tabs.Add( __0x2919 );

				
				{
					var __0x2920 = new Group( "Resource" );
					
					__0x2919.Groups.Add( __0x2920 );

					__0x2920.AddAction( "New Resource" );
					__0x2920.AddAction( "Import Resource" );
				}

				
				{
					var __0x2921 = new Group( "Save" );
					__0x2919.Groups.Add( __0x2921 );

					__0x2921.AddAction( "Save" );
					__0x2921.AddAction( "Save As" );
					__0x2921.AddAction( "Save All" );
				}

				
				
				
				

				
				

				
				{
					var __0x2922 = new Group( "Editing" );
					__0x2919.Groups.Add( __0x2922 );

					__0x2922.AddAction( "Undo" );
					__0x2922.AddAction( "Redo" );
					
					
					
					__0x2922.AddAction( "Duplicate" );
					__0x2922.AddAction( "Delete" );
				}

				
				{
					var __0x2923 = new Group( "Transform" );
					__0x2919.Groups.Add( __0x2923 );

					__0x2923.AddAction( "Select" );
					__0x2923.AddAction( "Move & Rotate" );
					__0x2923.AddAction( "Move" );
					__0x2923.AddAction( "Rotate" );
					__0x2923.AddAction( "Scale" );
					
					
					__0x2923.AddAction( "Transform Using Local Coordinates" );
				}

				
				{
					var __0x2924 = new Group( "Play" );
					__0x2919.Groups.Add( __0x2924 );

					__0x2924.AddAction( "Play" );
					__0x2924.AddAction( "Run Player" );
					
					
				}

				
				{
					var __0x2925 = new Group( "Project" );
					__0x2919.Groups.Add( __0x2925 );

					__0x2925.AddAction( "Project Settings" );
				}

				
				{
					var __0x2926 = new Group( "Additions" );
					__0x2919.Groups.Add( __0x2926 );

					__0x2926.AddAction( "Stores" );
					__0x2926.AddAction( "Store" );
				}

				
				{
					var __0x2927 = new Group( "Docs" );
					__0x2919.Groups.Add( __0x2927 );

					__0x2927.AddAction( "Manual" );
					__0x2927.AddAction( "Tips" );
				}
			}

			
			{
				var __0x2928 = new Tab( "Scripting", "Scripting" );
				Tabs.Add( __0x2928 );

				
				{
					var __0x2929 = new Group( "Solution" );
					__0x2928.Groups.Add( __0x2929 );

					__0x2929.AddAction( "Build Project's Solution" );
					
					
				}

				
				{
					var __0x2930 = new Group( "C# Project" );
					
					__0x2928.Groups.Add( __0x2930 );

					__0x2930.AddAction( "C# File" );
					__0x2930.AddAction( "Add C# files to Project.csproj" );
					__0x2930.AddAction( "Remove C# files from Project.csproj" );
					
					
				}

				
				{
					var __0x2931 = new Group( "Components" );
					__0x2928.Groups.Add( __0x2931 );

					__0x2931.AddAction( "C# Script" );
					__0x2931.AddAction( "Flow Graph" );
				}

				
				{
					var __0x2932 = new Group( "C# Editing" );
					__0x2928.Groups.Add( __0x2932 );

					__0x2932.AddAction( "Comment Selection" );
					__0x2932.AddAction( "Uncomment Selection" );
					__0x2932.AddAction( "Rename" );
					__0x2932.AddAction( "Format Document" );
					__0x2932.AddAction( "Add Property Code" );
				}

				
				
				
				

				
				
				

				
				
				
				
				
				

				
				{
					var __0x2933 = new Group( "External" );
					
					__0x2928.Groups.Add( __0x2933 );

					
					__0x2933.AddAction( "Open Sources Solution in External IDE" );
				}
			}

			
			{
				var __0x2934 = new Tab( "Windows", "Windows" );
				Tabs.Add( __0x2934 );

				
				{
					var __0x2935 = new Group( "Windows" );
					__0x2934.Groups.Add( __0x2935 );

					__0x2935.AddAction( "Resources Window" );
					__0x2935.AddAction( "Stores Window" );
					
					__0x2935.AddAction( "Objects Window" );
					
					__0x2935.AddAction( "Settings Window" );
					
					__0x2935.AddAction( "Preview Window" );
					__0x2935.AddAction( "Message Log Window" );
					__0x2935.AddAction( "Output Window" );
					__0x2935.AddAction( "Debug Info Window" );

					__0x2935.AddAction( "Start Page" );
					__0x2935.AddAction( "Store" );
					
					__0x2935.AddAction( "Tips" );
				}

				
				{
					var __0x2936 = new Group( "Settings" );
					__0x2934.Groups.Add( __0x2936 );

					
					

					__0x2936.AddAction( "Reset Windows Settings" );
				}

				
				{
					var __0x2937 = new Group( "Document" );
					__0x2934.Groups.Add( __0x2937 );

					
					
					
					
					
					__0x2937.AddAction( "Find Resource" );
				}
			}

			
			{
				var __0x2938 = new Tab( "Tools", "Tools" );
				Tabs.Add( __0x2938 );

				
				
				
				

				
				

				
				{
					var __0x2939 = new Group( "Packing" );
					__0x2938.Groups.Add( __0x2939 );

					__0x2939.AddAction( "Create NeoAxis Baking File" );
				}
			}

			
			{
				var __0x2940 = new Tab( "Scene Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( Component_Scene ) ) );
				Tabs.Add( __0x2940 );

				
				
				
				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				{
					var __0x2941 = new Group( "Display" );
					__0x2940.Groups.Add( __0x2941 );

					{
						var __0x2942 = new Group( "Display Development Data" );
						__0x2941.Children.Add( __0x2942 );
						__0x2942.DropDownGroupText = ("Development",  "Data");
						__0x2942.DropDownGroupImageLarge = Properties.Resources.ArrangeUp_32;
						__0x2942.DropDownGroupDescription = "Specifies the display settings of the development data.";
						

						__0x2942.AddAction( "Scene Display Development Data In Editor" );
						__0x2942.AddAction( "Scene Display Development Data In Simulation" );
						__0x2942.AddSeparator();
						__0x2942.AddAction( "Scene Display Text Info" );
						__0x2942.AddAction( "Scene Display Labels" );
						__0x2942.AddAction( "Scene Display Lights" );
						__0x2942.AddAction( "Scene Display Decals" );
						__0x2942.AddAction( "Scene Display Reflection Probes" );
						__0x2942.AddAction( "Scene Display Cameras" );

						__0x2942.AddAction( "Scene Display Physical Objects" );
						
						
						
						__0x2942.AddAction( "Scene Display Areas" );
						__0x2942.AddAction( "Scene Display Volumes" );
						__0x2942.AddAction( "Scene Display Sensors" );
						__0x2942.AddAction( "Scene Display Sound Sources" );
						__0x2942.AddAction( "Scene Display Object In Space Bounds" );
						__0x2942.AddAction( "Scene Display Scene Octree" );
						__0x2942.AddAction( "Scene Frustum Culling Test" );
						

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					}

					{
						var __0x2943 = new Group( "Debug Mode" );
						__0x2941.Children.Add( __0x2943 );
						__0x2943.DropDownGroupText = ("Debug", "Mode");
						__0x2943.DropDownGroupImageLarge = Properties.Resources.RenderingDebugMode_32;
						__0x2943.DropDownGroupDescription = "Changes the debug mode of the rendering pipeline.";
						

						foreach( var __0x2960 in (Component_RenderingPipeline_Basic.DebugModeEnum[])Enum.GetValues( typeof( Component_RenderingPipeline_Basic.DebugModeEnum ) ) )
						{
							var __0x2944 = TypeUtility.DisplayNameAddSpaces( __0x2960.ToString() );
							__0x2943.AddAction( "Rendering Debug Mode " + __0x2944 );
						}
					}
				}

				
				{
					var __0x2945 = new Group( "Snap" );
					__0x2940.Groups.Add( __0x2945 );
					__0x2945.AddAction( "Snap All Axes" );
					__0x2945.AddAction( "Snap X" );
					__0x2945.AddAction( "Snap Y" );
					__0x2945.AddAction( "Snap Z" );
				}

				
				{
					var __0x2946 = new Group( "Physics" );
					__0x2940.Groups.Add( __0x2946 );
					__0x2946.AddAction( "Add Collision" );
					__0x2946.AddAction( "Delete Collision" );
				}

				
				{
					var __0x2947 = new Group( "Attachment" );
					__0x2940.Groups.Add( __0x2947 );
					__0x2947.AddAction( "Attach Second to First" );
					__0x2947.AddAction( "Detach from Another Object" );
				}

				
				{
					var __0x2948 = new Group( "Find" );
					__0x2940.Groups.Add( __0x2948 );
					__0x2948.AddAction( "Focus Camera On Selected Object" );
				}

				
				{
					var __0x2949 = new Group( "Create Objects" );
					__0x2940.Groups.Add( __0x2949 );
					__0x2949.AddAction( "Create Objects By Drag & Drop" );
					__0x2949.AddAction( "Create Objects By Click" );
					__0x2949.AddAction( "Create Objects By Brush" );
					__0x2949.AddAction( "Create Objects Destination" );
					__0x2949.AddAction( "Create Objects Brush Radius" );
					__0x2949.AddAction( "Create Objects Brush Strength" );
					__0x2949.AddAction( "Create Objects Brush Hardness" );
				}

			}

			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x2950 = new Tab( "Mesh Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ) );
				Tabs.Add( __0x2950 );

				
				{
					var __0x2951 = new Group( "Display" );
					__0x2950.Groups.Add( __0x2951 );

					__0x2951.AddAction( "Mesh Display Pivot" );
					__0x2951.AddAction( "Mesh Display Bounds" );
					__0x2951.AddAction( "Mesh Display Triangles" );
					__0x2951.AddAction( "Mesh Display Vertices" );
					__0x2951.AddAction( "Mesh Display Vertex Color" );
					__0x2951.AddAction( "Mesh Display Normals" );
					__0x2951.AddAction( "Mesh Display Tangents" );
					__0x2951.AddAction( "Mesh Display Binormals" );
					
					__0x2951.AddAction( "Mesh Display UV" );
					__0x2951.AddAction( "Mesh Display LOD" );
					
					__0x2951.AddAction( "Mesh Display Skeleton" );
					__0x2951.AddAction( "Mesh Play Animation" );
					__0x2951.AddAction( "Mesh Display Collision" );
				}

				
				{
					var __0x2952 = new Group( "Collision" );
					__0x2950.Groups.Add( __0x2952 );

					__0x2952.AddAction( "Mesh Add Collision" );
					__0x2952.AddAction( "Mesh Delete Collision" );
				}

				
				{
					var __0x2953 = new Group( "Structure" );
					__0x2950.Groups.Add( __0x2953 );

					__0x2953.AddAction( "Mesh Add Structure" );
					__0x2953.AddAction( "Mesh Delete Structure" );
				}

				
				{
					var __0x2954 = new Group( "Modify" );
					__0x2950.Groups.Add( __0x2954 );

					var __0x2955 = new Group( "Mesh Add Modifier" );
					__0x2954.Children.Add( __0x2955 );
					__0x2955.DropDownGroupText = ("Add", "Modifier");
					__0x2955.DropDownGroupImageLarge = Properties.Resources.Modify_32;
					__0x2955.DropDownGroupDescription = "Adds a new mesh modifier.";

					foreach( var __0x2961 in EditorStandardActions.GetAllMeshModifiers() )
					{
						var __0x2956 = __0x2961.GetUserFriendlyNameForInstance();
						__0x2955.AddAction( "Mesh Add Modifier " + __0x2956 );
					}

					__0x2954.AddAction( "Mesh Add Paint Layer" );
				}
			}

			
			{
				var __0x2957 = new Tab( "UI Editor", "ComponentTypeSpecific", MetadataManager.GetTypeOfNetType( typeof( UIControl ) ) );
				Tabs.Add( __0x2957 );

				
				{
					var __0x2958 = new Group( "Snap" );
					__0x2957.Groups.Add( __0x2958 );
					__0x2958.AddAction( "Snap All Axes" );
					__0x2958.AddAction( "Snap X" );
					__0x2958.AddAction( "Snap Y" );
				}
			}
		}

#endif

		public static Tab GetTab( string name )
		{
			foreach( var __0x2962 in Tabs )
				if( __0x2962.Name == name )
					return __0x2962;
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	static class EditorSettingsSerialization
	{
		[EngineConfig( "Editor", "QATLocation" )]
		static QATLocation __0x2963 = QATLocation.Above;
		[EngineConfig( "Editor", "RibbonMinimizedMode" )]
		static bool __0x2964;
		[EngineConfig( "Editor", "RibbonLastSelectedTabTypeByUser" )]
		static string __0x2965 = "";
		[EngineConfig( "Editor", "ShowTipsAsStartup" )]
		public static bool ShowTipsAsStartup = true;

		[EngineConfig( "Editor", "OpenFileAtStartup" )]
		public static string OpenFileAtStartup = "";

		

		public static void Init()
		{
			EngineConfig.RegisterClassParameters( typeof( EditorSettingsSerialization ) );
			
			

			EditorForm.Instance.kryptonRibbon.QATLocation = __0x2963;
			EditorForm.Instance.kryptonRibbon.MinimizedMode = __0x2964;
			EditorForm.Instance.ribbonLastSelectedTabTypeByUser = __0x2965;
		}

		public static void InitAfterFormLoad()
		{
		}

		public static void Dump()
		{
			if( !EditorForm.Instance.backstageMenu1.Visible )
				__0x2963 = EditorForm.Instance.kryptonRibbon.QATLocation;
			__0x2964 = EditorForm.Instance.kryptonRibbon.MinimizedMode;
			__0x2965 = EditorForm.Instance.ribbonLastSelectedTabTypeByUser;
		}

		
		
		

		
		
		
	}
}





namespace NeoAxis.Editor
{
	public static class EditorStandardActions
	{
		static bool __0x2966;

		

		internal static void Register()
		{
			if( __0x2966 )
				return;
			__0x2966 = true;

#if !DEPLOY
			__0x3501();
			__0x3502();
			__0x3503();
			
			__0x3504();
			__0x3506();
			__0x3507();
			__0x3508();
			__0x3509();
#endif
		}

		

#if !DEPLOY

		static void __0x3501()
		{
			
			{
				var __0x2967 = new EditorAction();
				__0x2967.Name = "Restart";
				__0x2967.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2967.Description = "Restarts the editor.";
				__0x2967.ImageSmall = Properties.Resources.Refresh_16;
				__0x2967.ImageBig = Properties.Resources.Refresh_32;
				__0x2967.QatSupport = true;
				__0x2967.QatAddByDefault = true;
				__0x2967.RibbonText = ("Restart", "App");
				__0x2967.GetState += delegate ( EditorAction.GetStateContext __0x3512 )
				{
					__0x3512.Enabled = true;
					
				};
				__0x2967.Click += delegate ( EditorAction.ClickContext __0x3513 )
				{
					EditorAPI.BeginRestartApplication();
				};
				EditorActions.Register( __0x2967 );
			}

			
			{
				var __0x2968 = new EditorAction();
				__0x2968.Name = "New Resource";
				__0x2968.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2968.Description = "Creates a new resource in the project.";
				__0x2968.ImageSmall = Properties.Resources.New_16;
				__0x2968.ImageBig = Properties.Resources.New_32;
				__0x2968.QatSupport = true;
				__0x2968.QatAddByDefault = true;
				__0x2968.RibbonText = ("New", "");
				__0x2968.GetState += delegate ( EditorAction.GetStateContext __0x3514 )
				{
					__0x3514.Enabled = true;
				};
				__0x2968.Click += delegate ( EditorAction.ClickContext __0x3515 )
				{
					var __0x2969 = new NewObjectWindow.CreationDataClass();

					var __0x2970 = EditorAPI.FindWindow<ResourcesWindow>();
					string __0x2971 = __0x2970.ContentBrowser1.GetDirectoryPathOfSelectedFileOrParentDirectoryItem();
					if( !string.IsNullOrEmpty( __0x2971 ) )
						__0x2969.initFileCreationDirectory = VirtualPathUtility.GetVirtualPathByReal( __0x2971 );

					
					
					EditorAPI.OpenNewObjectWindow( __0x2969 );
				};
				EditorActions.Register( __0x2968 );
			}

			
			{
				var __0x2972 = new EditorAction();
				__0x2972.Name = "Import Resource";
				__0x2972.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2972.Description = "Imports resources to the project.";
				__0x2972.ImageSmall = Properties.Resources.Import_16;
				__0x2972.ImageBig = Properties.Resources.Import_32;
				__0x2972.QatSupport = true;
				__0x2972.QatAddByDefault = true;
				__0x2972.RibbonText = ("Import", "");
				__0x2972.GetState += delegate ( EditorAction.GetStateContext __0x3516 )
				{
					__0x3516.Enabled = true;
				};
				__0x2972.Click += delegate ( EditorAction.ClickContext __0x3517 )
				{
					string __0x2973 = "";

					var __0x2974 = EditorAPI.FindWindow<ResourcesWindow>().ContentBrowser1.SelectedItems;
					if( __0x2974.Length == 1 && __0x2974[ 0 ] is ContentBrowserItem_File fileItem )
					{
						if( fileItem.IsDirectory )
							__0x2973 = VirtualPathUtility.GetVirtualPathByReal( fileItem.FullPath );
					}

					EditorAPI.OpenImportWindow( __0x2973 );
				};
				EditorActions.Register( __0x2972 );
			}

			
			{
				var __0x2975 = new EditorAction();
				__0x2975.Name = "Save";
				__0x2975.Description = "Saves the current document.";
				__0x2975.ImageSmall = Properties.Resources.Save_16;
				__0x2975.ImageBig = Properties.Resources.Save_32;
				__0x2975.ShortcutKeys = new Keys[] { Keys.Control | Keys.S };
				__0x2975.QatSupport = true;
				__0x2975.QatAddByDefault = true;
				EditorActions.Register( __0x2975 );
			}

			
			{
				var __0x2976 = new EditorAction();
				__0x2976.Name = "Save As";
				__0x2976.Description = "Saves the current document in a different location, or with a different file name.";
				__0x2976.ImageSmall = Properties.Resources.Save_16;
				__0x2976.ImageBig = Properties.Resources.Save_32;
				__0x2976.QatSupport = true;
				__0x2976.QatAddByDefault = true;
				EditorActions.Register( __0x2976 );
			}

			
			{
				var __0x2977 = new EditorAction();
				__0x2977.Name = "Save All";
				__0x2977.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2977.Description = "Saves all modified documents.";
				__0x2977.ImageSmall = Properties.Resources.SaveAll_16;
				__0x2977.ImageBig = Properties.Resources.SaveAll_32;
				__0x2977.QatSupport = true;
				__0x2977.QatAddByDefault = true;
				__0x2977.GetState += delegate ( EditorAction.GetStateContext __0x3518 )
				{
					if( EditorAPI.ExistsModifiedDocuments() )
						__0x3518.Enabled = true;
				};
				__0x2977.Click += delegate ( EditorAction.ClickContext __0x3519 )
				{
					EditorAPI.SaveDocuments();
				};
				EditorActions.Register( __0x2977 );
			}

			
			{
				var __0x2978 = new EditorAction();
				__0x2978.Name = "Undo";
				__0x2978.Description = "Undoes the last action.";
				__0x2978.ImageSmall = Properties.Resources.Undo_16;
				__0x2978.ImageBig = Properties.Resources.Undo_32;
				__0x2978.ShortcutKeys = new Keys[] { Keys.Control | Keys.Z };
				__0x2978.QatSupport = true;
				__0x2978.QatAddByDefault = true;
				EditorActions.Register( __0x2978 );
			}

			
			{
				var __0x2979 = new EditorAction();
				__0x2979.Name = "Redo";
				__0x2979.Description = "Redos the last action.";
				__0x2979.ImageSmall = Properties.Resources.Redo_16;
				__0x2979.ImageBig = Properties.Resources.Redo_32;
				__0x2979.ShortcutKeys = new Keys[] { Keys.Control | Keys.Y };
				__0x2979.QatSupport = true;
				__0x2979.QatAddByDefault = true;
				EditorActions.Register( __0x2979 );
			}

			
			{
				var __0x2980 = new EditorAction();
				__0x2980.Name = "Cut";
				__0x2980.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x2980.ImageSmall = Properties.Resources.Cut_16;
				__0x2980.ImageBig = Properties.Resources.Cut_32;
				__0x2980.ShortcutKeys = new Keys[] { Keys.Control | Keys.X };
				__0x2980.QatSupport = true;
				__0x2980.QatAddByDefault = false;

				
				__0x2980.GetState += delegate ( EditorAction.GetStateContext __0x3520 )
				{
					var __0x2981 = __0x3520.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2981.Length != 0 && __0x2981[ 0 ].Owner.CanCut() )
						__0x3520.Enabled = true;
				};
				__0x2980.Click += delegate ( EditorAction.ClickContext __0x3521 )
				{
					var __0x2982 = __0x3521.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2982.Length != 0 )
						__0x2982[ 0 ].Owner.Cut();
				};

				EditorActions.Register( __0x2980 );
			}

			
			{
				var __0x2983 = new EditorAction();
				__0x2983.Name = "Copy";
				__0x2983.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x2983.ImageSmall = Properties.Resources.Copy_16;
				__0x2983.ImageBig = Properties.Resources.Copy_32;
				__0x2983.ShortcutKeys = new Keys[] { Keys.Control | Keys.C, Keys.Control | Keys.Insert };
				__0x2983.QatSupport = true;
				__0x2983.QatAddByDefault = false;

				__0x2983.GetState += delegate ( EditorAction.GetStateContext __0x3522 )
				{
					var __0x2984 = __0x3522.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2984.Length != 0 && __0x2984[ 0 ].Owner.CanCopy() )
						__0x3522.Enabled = true;
				};
				__0x2983.Click += delegate ( EditorAction.ClickContext __0x3523 )
				{
					var __0x2985 = __0x3523.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2985.Length != 0 )
						__0x2985[ 0 ].Owner.Copy();
				};

				EditorActions.Register( __0x2983 );
			}

			
			{
				var __0x2986 = new EditorAction();
				__0x2986.Name = "Paste";
				__0x2986.CommonType = EditorAction.CommonTypeEnum.General;
				
				__0x2986.ImageSmall = Properties.Resources.Paste_16;
				__0x2986.ImageBig = Properties.Resources.Paste_32;
				__0x2986.ShortcutKeys = new Keys[] { Keys.Control | Keys.V, Keys.Shift | Keys.Insert };
				__0x2986.QatSupport = true;
				__0x2986.QatAddByDefault = false;

				__0x2986.GetState += delegate ( EditorAction.GetStateContext __0x3524 )
				{
					var __0x2987 = __0x3524.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2987.Length != 0 && __0x2987[ 0 ].Owner.CanPaste( out _, out _, out _, out _ ) )
						__0x3524.Enabled = true;
				};
				__0x2986.Click += delegate ( EditorAction.ClickContext __0x3525 )
				{
					var __0x2988 = __0x3525.ObjectsInFocus.Objects.OfType<ContentBrowser.Item>().ToArray();
					if( __0x2988.Length != 0 )
						__0x2988[ 0 ].Owner.Paste();
				};

				EditorActions.Register( __0x2986 );
			}

			
			{
				var __0x2989 = new EditorAction();
				__0x2989.Name = "Duplicate";
				__0x2989.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2989.Description = "Duplicates selected objects.";
				
				__0x2989.ImageSmall = Properties.Resources.Copy_16;
				__0x2989.ImageBig = Properties.Resources.Copy_32;
				__0x2989.ShortcutKeys = new Keys[] { Keys.Control | Keys.D };
				__0x2989.QatSupport = true;
				__0x2989.QatAddByDefault = true;
				__0x2989.RibbonText = ("Copy", "");
				EditorActions.Register( __0x2989 );
			}

			
			{
				var __0x2990 = new EditorAction();
				__0x2990.Name = "Delete";
				__0x2990.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2990.Description = "Deletes selected objects.";
				__0x2990.ImageSmall = Properties.Resources.Delete_16;
				__0x2990.ImageBig = Properties.Resources.Delete_32;
				__0x2990.ShortcutKeys = new Keys[] { Keys.Delete };
				__0x2990.QatSupport = true;
				__0x2990.QatAddByDefault = true;

				__0x2990.GetState += delegate ( EditorAction.GetStateContext __0x3526 )
				{
					var __0x2991 = __0x3526.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().ToArray();
					if( __0x2991.Length != 0 )
					{
						

						if( __0x2991[ 0 ].Owner.CanDeleteObjects( out _ ) )
							__0x3526.Enabled = true;
					}
				};
				__0x2990.Click += delegate ( EditorAction.ClickContext __0x3527 )
				{
					var __0x2992 = __0x3527.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().ToArray();
					if( __0x2992.Length != 0 )
					{
						

						__0x2992[ 0 ].Owner.TryDeleteObjects();
					}
				};

				EditorActions.Register( __0x2990 );
			}

			
			{
				var __0x2993 = new EditorAction();
				__0x2993.Name = "Rename";
				__0x2993.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2993.Description = "Renames the selected object.";
				__0x2993.ImageSmall = Properties.Resources.Rename_16;
				__0x2993.ImageBig = Properties.Resources.Rename_32;
				__0x2993.ShortcutKeys = new Keys[] { Keys.F2 };
				__0x2993.QatSupport = true;
				__0x2993.RibbonText = ("Rename", "");
				EditorActions.Register( __0x2993 );
			}

			
			{
				var __0x2994 = new EditorAction();
				__0x2994.Name = "Select";
				__0x2994.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2994.Description = "Selection mode of the transform tool.";
				__0x2994.ImageSmall = Properties.Resources.Select_16;
				__0x2994.ImageBig = Properties.Resources.Select_32;
				__0x2994.ShortcutKeys = new Keys[] { Keys.R };
				__0x2994.QatSupport = true;
				__0x2994.QatAddByDefault = true;
				EditorActions.Register( __0x2994 );
			}

			
			{
				var __0x2995 = new EditorAction();
				__0x2995.Name = "Move & Rotate";
				__0x2995.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2995.Description = "Movement & rotation mode of the transform tool.";
				__0x2995.ImageSmall = Properties.Resources.MoveRotate_16;
				__0x2995.ImageBig = Properties.Resources.MoveRotate_32;
				__0x2995.ImageBig_Dark = Properties.Resources.MoveRotate_32_Dark;
				__0x2995.RibbonText = ("Move", "Rotate");
				__0x2995.ShortcutKeys = new Keys[] { Keys.T };
				__0x2995.QatSupport = true;
				__0x2995.QatAddByDefault = true;
				EditorActions.Register( __0x2995 );
			}

			
			{
				var __0x2996 = new EditorAction();
				__0x2996.Name = "Move";
				__0x2996.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2996.Description = "Movement mode of the transform tool.";
				__0x2996.ImageSmall = Properties.Resources.Move_16;
				__0x2996.ImageBig = Properties.Resources.Move_32;
				__0x2996.ImageBig_Dark = Properties.Resources.Move_32_Dark;
				__0x2996.ShortcutKeys = new Keys[] { Keys.Y };
				__0x2996.QatSupport = true;
				__0x2996.QatAddByDefault = true;
				EditorActions.Register( __0x2996 );
			}

			
			{
				var __0x2997 = new EditorAction();
				__0x2997.Name = "Rotate";
				__0x2997.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2997.Description = "Rotation mode of the transform tool.";
				__0x2997.ImageSmall = Properties.Resources.Rotate_16;
				__0x2997.ImageBig = Properties.Resources.Rotate_32;
				__0x2997.ShortcutKeys = new Keys[] { Keys.U };
				__0x2997.QatSupport = true;
				__0x2997.QatAddByDefault = true;
				EditorActions.Register( __0x2997 );
			}

			
			{
				var __0x2998 = new EditorAction();
				__0x2998.Name = "Scale";
				__0x2998.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2998.Description = "Scaling mode of the transform tool.";
				__0x2998.ImageSmall = Properties.Resources.Scale_16;
				__0x2998.ImageBig = Properties.Resources.Scale_32;
				__0x2998.ImageBig_Dark = Properties.Resources.Scale_32_Dark;
				__0x2998.ShortcutKeys = new Keys[] { Keys.I };
				__0x2998.QatSupport = true;
				__0x2998.QatAddByDefault = true;
				EditorActions.Register( __0x2998 );
			}

			
			{
				var __0x2999 = new EditorAction();
				__0x2999.Name = "Move, Rotate, Scale";
				__0x2999.CommonType = EditorAction.CommonTypeEnum.General;
				__0x2999.Description = "Select 'move rotate and scale' tool.";
				__0x2999.ImageSmall = Properties.Resources.Default_16;
				__0x2999.ImageBig = Properties.Resources.Default_32;
				
				
				__0x2999.QatSupport = true;
				
				__0x2999.RibbonText = ("Move", "Rotate");
				EditorActions.Register( __0x2999 );
			}

			
			{
				var __0x3000 = new EditorAction();
				__0x3000.Name = "Transform Using Local Coordinates";
				__0x3000.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3000.Description = "Enables the use of local transform coordinates.";
				__0x3000.ImageSmall = Properties.Resources.TransformUsingLocalCoordinates_16;
				__0x3000.ImageBig = Properties.Resources.TransformUsingLocalCoordinates_32;
				__0x3000.ImageBig_Dark = Properties.Resources.TransformUsingLocalCoordinates_32_Dark;
				__0x3000.QatSupport = true;
				__0x3000.QatAddByDefault = true;
				__0x3000.RibbonText = ("Local", "");
				
				EditorActions.Register( __0x3000 );
			}

			
			{
				var __0x3001 = new EditorAction();
				__0x3001.Name = "Play";
				__0x3001.Description = "Saves and runs the document in the player application.";
				__0x3001.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3001.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3001.ShortcutKeys = new Keys[] { Keys.F5 };
				__0x3001.QatSupport = true;
				__0x3001.QatAddByDefault = true;
				EditorActions.Register( __0x3001 );
			}

			
			{
				var __0x3002 = new EditorAction();
				__0x3002.Name = "Run Player";
				__0x3002.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3002.Description = "Runs the application of the project.";
				__0x3002.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3002.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3002.ShortcutKeys = new Keys[] { Keys.F6 };
				__0x3002.QatSupport = true;
				__0x3002.QatAddByDefault = true;
				__0x3002.GetState += delegate ( EditorAction.GetStateContext __0x3528 )
				{
					__0x3528.Enabled = true;
				};
				__0x3002.Click += delegate ( EditorAction.ClickContext __0x3529 )
				{
					EditorAPI.SaveDocuments();
					RunSimulation.Run( "", RunSimulation.RunMethod.Player );
				};
				EditorActions.Register( __0x3002 );
			}

			
			{
				var __0x3003 = new EditorAction();
				__0x3003.Name = "Run Device";
				__0x3003.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3003.Description = "Runs the project on specific device. (The feature is not implemented)";
				__0x3003.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3003.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3003.ShortcutKeys = new Keys[] { Keys.F7 };
				__0x3003.QatSupport = true;
				__0x3003.QatAddByDefault = true;
				__0x3003.GetState += delegate ( EditorAction.GetStateContext __0x3530 )
				{
				};
				__0x3003.Click += delegate ( EditorAction.ClickContext __0x3531 )
				{
				};
				EditorActions.Register( __0x3003 );
			}

			
			{
				var __0x3004 = new EditorAction();
				__0x3004.Name = "Run Device 2";
				__0x3004.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3004.Description = "Runs the project on specific device. (The feature is not implemented)";
				__0x3004.ImageSmall = Properties.Resources.PlayGreen_16;
				__0x3004.ImageBig = Properties.Resources.PlayGreen_32;
				__0x3004.ShortcutKeys = new Keys[] { Keys.F8 };
				__0x3004.QatSupport = true;
				
				__0x3004.GetState += delegate ( EditorAction.GetStateContext __0x3532 )
				{
				};
				__0x3004.Click += delegate ( EditorAction.ClickContext __0x3533 )
				{
				};
				EditorActions.Register( __0x3004 );
			}

			
			{
				var __0x3005 = new EditorAction();
				__0x3005.Name = "Project Settings";
				__0x3005.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3005.Description = "Opens the settings of the project.";
				__0x3005.ImageSmall = Properties.Resources.Options_16;
				__0x3005.ImageBig = Properties.Resources.Options_32;
				__0x3005.ImageBig_Dark = Properties.Resources.Options_32_Dark;
				__0x3005.QatSupport = true;
				__0x3005.QatAddByDefault = true;
				__0x3005.RibbonText = ("Settings", "");
				__0x3005.GetState += delegate ( EditorAction.GetStateContext __0x3534 )
				{
					__0x3534.Enabled = true;
				};
				__0x3005.Click += delegate ( EditorAction.ClickContext __0x3535 )
				{
					EditorAPI.ShowProjectSettings();
				};
				EditorActions.Register( __0x3005 );
			}

			
			{
				var __0x3006 = new EditorAction();
				__0x3006.Name = "Manual";
				__0x3006.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3006.Description = "Opens the online documentation.";
				__0x3006.ImageSmall = Properties.Resources.Help_16;
				__0x3006.ImageBig = Properties.Resources.Help_32;
				__0x3006.QatSupport = true;
				__0x3006.RibbonText = ("Manual", "");
				__0x3006.GetState += delegate ( EditorAction.GetStateContext __0x3536 )
				{
					__0x3536.Enabled = true;
				};
				__0x3006.Click += delegate ( EditorAction.ClickContext __0x3537 )
				{
					Process.Start( new ProcessStartInfo( "https://www.neoaxis.com/docs/html/Manual_Root.htm" ) { UseShellExecute = true } );
				};
				EditorActions.Register( __0x3006 );
			}

			
			{
				var __0x3007 = new EditorAction();
				__0x3007.Name = "Tips";
				__0x3007.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3007.Description = "Opens the Tips window.";
				
				__0x3007.ImageSmall = Properties.Resources.Grow_16;
				__0x3007.ImageBig = Properties.Resources.Grow_32;
				__0x3007.QatSupport = true;
				__0x3007.RibbonText = ("Tips", "");
				__0x3007.GetState += delegate ( EditorAction.GetStateContext __0x3538 )
				{
					__0x3538.Enabled = true;
					__0x3538.Checked = EditorAPI.FindWindow<TipsWindow>() != null;
				};
				__0x3007.Click += delegate ( EditorAction.ClickContext __0x3539 )
				{
					EditorAPI.ShowTips();
				};
				EditorActions.Register( __0x3007 );
			}

			
			{
				var __0x3008 = new EditorAction();
				__0x3008.Name = "Stores";
				__0x3008.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3008.Description = "Opens the stores window.";
				__0x3008.ImageSmall = Properties.Resources.Download_16;
				__0x3008.ImageBig = Properties.Resources.Download_32;
				__0x3008.QatSupport = true;
				__0x3008.RibbonText = ("Stores", "");
				__0x3008.GetState += delegate ( EditorAction.GetStateContext __0x3540 )
				{
					__0x3540.Enabled = true;
					
				};
				__0x3008.Click += delegate ( EditorAction.ClickContext __0x3541 )
				{
					EditorAPI.OpenStoresWindow();
				};
				EditorActions.Register( __0x3008 );
			}

			
			{
				var __0x3009 = new EditorAction();
				__0x3009.Name = "Store";
				__0x3009.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3009.Description = "Opens the NeoAxis Asset Store.";
				__0x3009.ImageSmall = Properties.Resources.Stores_16;
				__0x3009.ImageBig = Properties.Resources.Stores_32;
				__0x3009.QatSupport = true;
				__0x3009.RibbonText = ("Store", "");
				__0x3009.GetState += delegate ( EditorAction.GetStateContext __0x3542 )
				{
					__0x3542.Enabled = true;
					__0x3542.Checked = EditorAPI.FindWindow<StoreDocumentWindow>() != null;
				};
				__0x3009.Click += delegate ( EditorAction.ClickContext __0x3543 )
				{
					EditorAPI.OpenOrCloseStore();
				};
				EditorActions.Register( __0x3009 );
			}
		}

		

		static void __0x3502()
		{
			
			EditorActions.RegisterDockWindowAction( "Resources Window", ("Resources", ""), typeof( ResourcesWindow ) );

			
			EditorActions.RegisterDockWindowAction( "Stores Window", ("Stores", ""), typeof( StoresWindow ) );

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			EditorActions.RegisterDockWindowAction( "Objects Window", ("Objects", ""), typeof( ObjectsWindow ) );

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			EditorActions.RegisterDockWindowAction( "Settings Window", ("Settings", ""), typeof( SettingsWindow ) );
			
			EditorActions.RegisterDockWindowAction( "Preview Window", ("Preview", ""), typeof( PreviewWindow ) );
			EditorActions.RegisterDockWindowAction( "Message Log Window", ("Message", "Log"), typeof( MessageLogWindow ) );
			EditorActions.RegisterDockWindowAction( "Output Window", ("Output", ""), typeof( OutputWindow ) );
			EditorActions.RegisterDockWindowAction( "Debug Info Window", ("Debug", "Info"), typeof( DebugInfoWindow ) );

			

			
			{
				var __0x3010 = new EditorAction();
				__0x3010.Name = "Start Page";
				__0x3010.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3010.Description = "Opens the start page.";
				__0x3010.ImageSmall = Properties.Resources.Window_16;
				__0x3010.ImageBig = Properties.Resources.Window_32;
				__0x3010.QatSupport = true;
				__0x3010.RibbonText = ("Start", "Page");
				__0x3010.GetState += delegate ( EditorAction.GetStateContext __0x3544 )
				{
					__0x3544.Enabled = true;
					__0x3544.Checked = EditorAPI.FindWindow<StartPageWindow>() != null;
				};
				__0x3010.Click += delegate ( EditorAction.ClickContext __0x3545 )
				{
					EditorAPI.OpenOrCloseStartPage();
				};
				EditorActions.Register( __0x3010 );
			}

			
			{
				var __0x3011 = new EditorAction();
				__0x3011.Name = "Reset Windows Settings";
				__0x3011.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3011.ImageSmall = Properties.Resources.Refresh_16;
				__0x3011.ImageBig = Properties.Resources.Refresh_32;
				__0x3011.QatSupport = true;
				__0x3011.RibbonText = ("Reset", "Settings");
				__0x3011.Description = "Resets windows settings.";
				__0x3011.GetState += delegate ( EditorAction.GetStateContext __0x3546 )
				{
					__0x3546.Enabled = true;
				};
				__0x3011.Click += delegate ( EditorAction.ClickContext __0x3547 )
				{
					if( EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "General", "Reset windows settings and restart the editor?" ), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
						EditorAPI.BeginRestartApplication( true );
				};
				EditorActions.Register( __0x3011 );
			}

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3012 = new EditorAction();
				__0x3012.Name = "Find Resource";
				__0x3012.ImageSmall = Properties.Resources.Focus_16;
				__0x3012.ImageBig = Properties.Resources.Focus_32;
				__0x3012.QatSupport = true;
				__0x3012.RibbonText = ("Find", "Resource");
				__0x3012.Description = "Finds a selected resource in the Resources Window.";
				__0x3012.GetState += delegate ( EditorAction.GetStateContext __0x3548 )
				{
				};
				__0x3012.Click += delegate ( EditorAction.ClickContext __0x3549 )
				{
				};
				EditorActions.Register( __0x3012 );
			}
		}

		

		static void __0x3503()
		{
			
			{
				var __0x3013 = new EditorAction();
				__0x3013.Name = "Scene Display Development Data In Editor";
				__0x3013.ImageSmall = Properties.Resources.Default_16;
				__0x3013.ImageBig = Properties.Resources.Default_32;
				__0x3013.QatSupport = true;
				__0x3013.RibbonText = ("Development", "Data");
				__0x3013.ContextMenuText = "Display In Editor";
				__0x3013.GetState += delegate ( EditorAction.GetStateContext __0x3550 )
				{
					

					var __0x3014 = __0x3550.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3014 != null )
					{
						__0x3550.Enabled = true;
						__0x3550.Checked = __0x3014.DisplayDevelopmentDataInEditor;
					}
				};
				__0x3013.Click += delegate ( EditorAction.ClickContext __0x3551 )
				{
					var __0x3015 = __0x3551.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3016 = __0x3551.ObjectsInFocus.DocumentWindow.Document;

					var __0x3017 = __0x3015.DisplayDevelopmentDataInEditor;

					__0x3015.DisplayDevelopmentDataInEditor = !__0x3015.DisplayDevelopmentDataInEditor;

					var __0x3018 = (Metadata.Property)__0x3015.MetadataGetMemberBySignature( "property:DisplayDevelopmentDataInEditor" );
					var __0x3019 = new UndoActionPropertiesChange.Item( __0x3015, __0x3018, __0x3017, new object[ 0 ] );
					var __0x3020 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3019 } );
					__0x3016.UndoSystem.CommitAction( __0x3020 );
					__0x3016.Modified = true;
				};
				EditorActions.Register( __0x3013 );
			}

			
			{
				var __0x3021 = new EditorAction();
				__0x3021.Name = "Scene Display Development Data In Simulation";
				__0x3021.ImageSmall = Properties.Resources.Default_16;
				__0x3021.ImageBig = Properties.Resources.Default_32;
				__0x3021.QatSupport = true;
				__0x3021.RibbonText = ("Development", "Data");
				__0x3021.ContextMenuText = "Display In Simulation";
				__0x3021.GetState += delegate ( EditorAction.GetStateContext __0x3552 )
				{
					

					var __0x3022 = __0x3552.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3022 != null )
					{
						__0x3552.Enabled = true;
						__0x3552.Checked = __0x3022.DisplayDevelopmentDataInSimulation;
					}
				};
				__0x3021.Click += delegate ( EditorAction.ClickContext __0x3553 )
				{
					var __0x3023 = __0x3553.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3024 = __0x3553.ObjectsInFocus.DocumentWindow.Document;

					var __0x3025 = __0x3023.DisplayDevelopmentDataInSimulation;

					__0x3023.DisplayDevelopmentDataInSimulation = !__0x3023.DisplayDevelopmentDataInSimulation;

					var __0x3026 = (Metadata.Property)__0x3023.MetadataGetMemberBySignature( "property:DisplayDevelopmentDataInSimulation" );
					var __0x3027 = new UndoActionPropertiesChange.Item( __0x3023, __0x3026, __0x3025, new object[ 0 ] );
					var __0x3028 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3027 } );
					__0x3024.UndoSystem.CommitAction( __0x3028 );
					__0x3024.Modified = true;
				};
				EditorActions.Register( __0x3021 );
			}

			
			{
				var __0x3029 = new EditorAction();
				__0x3029.Name = "Scene Display Text Info";
				__0x3029.ImageSmall = Properties.Resources.Default_16;
				__0x3029.ImageBig = Properties.Resources.Default_32;
				__0x3029.QatSupport = true;
				__0x3029.RibbonText = ("Text", "Info");
				__0x3029.ContextMenuText = __0x3029.Name.Replace( "Scene Display ", "" );
				__0x3029.GetState += delegate ( EditorAction.GetStateContext __0x3554 )
				{
					var __0x3030 = __0x3554.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3030 != null )
					{
						__0x3554.Enabled = __0x3030.DisplayDevelopmentDataInEditor || __0x3030.DisplayDevelopmentDataInSimulation;
						__0x3554.Checked = __0x3554.Enabled && __0x3030.DisplayTextInfo;
					}
				};
				__0x3029.Click += delegate ( EditorAction.ClickContext __0x3555 )
				{
					var __0x3031 = __0x3555.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3032 = __0x3555.ObjectsInFocus.DocumentWindow.Document;

					var __0x3033 = __0x3031.DisplayTextInfo;

					__0x3031.DisplayTextInfo = !__0x3031.DisplayTextInfo;

					var __0x3034 = (Metadata.Property)__0x3031.MetadataGetMemberBySignature( "property:DisplayTextInfo" );
					var __0x3035 = new UndoActionPropertiesChange.Item( __0x3031, __0x3034, __0x3033, new object[ 0 ] );
					var __0x3036 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3035 } );
					__0x3032.UndoSystem.CommitAction( __0x3036 );
					__0x3032.Modified = true;
				};
				EditorActions.Register( __0x3029 );
			}

			
			{
				var __0x3037 = new EditorAction();
				__0x3037.Name = "Scene Display Labels";
				__0x3037.ImageSmall = Properties.Resources.Default_16;
				__0x3037.ImageBig = Properties.Resources.Default_32;
				__0x3037.QatSupport = true;
				__0x3037.RibbonText = ("Labels", "");
				__0x3037.ContextMenuText = __0x3037.Name.Replace( "Scene Display ", "" );
				__0x3037.GetState += delegate ( EditorAction.GetStateContext __0x3556 )
				{
					var __0x3038 = __0x3556.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3038 != null )
					{
						__0x3556.Enabled = __0x3038.DisplayDevelopmentDataInEditor || __0x3038.DisplayDevelopmentDataInSimulation;
						__0x3556.Checked = __0x3556.Enabled && __0x3038.DisplayLabels;
					}
				};
				__0x3037.Click += delegate ( EditorAction.ClickContext __0x3557 )
				{
					var __0x3039 = __0x3557.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3040 = __0x3557.ObjectsInFocus.DocumentWindow.Document;

					var __0x3041 = __0x3039.DisplayLabels;

					__0x3039.DisplayLabels = !__0x3039.DisplayLabels;

					var __0x3042 = (Metadata.Property)__0x3039.MetadataGetMemberBySignature( "property:DisplayLabels" );
					var __0x3043 = new UndoActionPropertiesChange.Item( __0x3039, __0x3042, __0x3041, new object[ 0 ] );
					var __0x3044 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3043 } );
					__0x3040.UndoSystem.CommitAction( __0x3044 );
					__0x3040.Modified = true;
				};
				EditorActions.Register( __0x3037 );
			}

			
			{
				var __0x3045 = new EditorAction();
				__0x3045.Name = "Scene Display Lights";
				__0x3045.ImageSmall = Properties.Resources.Default_16;
				__0x3045.ImageBig = Properties.Resources.Default_32;
				__0x3045.QatSupport = true;
				__0x3045.RibbonText = ("Lights", "");
				__0x3045.ContextMenuText = __0x3045.Name.Replace( "Scene Display ", "" );
				__0x3045.GetState += delegate ( EditorAction.GetStateContext __0x3558 )
				{
					var __0x3046 = __0x3558.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3046 != null )
					{
						__0x3558.Enabled = __0x3046.DisplayDevelopmentDataInEditor || __0x3046.DisplayDevelopmentDataInSimulation;
						__0x3558.Checked = __0x3558.Enabled && __0x3046.DisplayLights;
					}
				};
				__0x3045.Click += delegate ( EditorAction.ClickContext __0x3559 )
				{
					var __0x3047 = __0x3559.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3048 = __0x3559.ObjectsInFocus.DocumentWindow.Document;

					var __0x3049 = __0x3047.DisplayLights;

					__0x3047.DisplayLights = !__0x3047.DisplayLights;

					var __0x3050 = (Metadata.Property)__0x3047.MetadataGetMemberBySignature( "property:DisplayLights" );
					var __0x3051 = new UndoActionPropertiesChange.Item( __0x3047, __0x3050, __0x3049, new object[ 0 ] );
					var __0x3052 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3051 } );
					__0x3048.UndoSystem.CommitAction( __0x3052 );
					__0x3048.Modified = true;
				};
				EditorActions.Register( __0x3045 );
			}

			
			{
				var __0x3053 = new EditorAction();
				__0x3053.Name = "Scene Display Decals";
				__0x3053.ImageSmall = Properties.Resources.Default_16;
				__0x3053.ImageBig = Properties.Resources.Default_32;
				__0x3053.QatSupport = true;
				__0x3053.RibbonText = ("Decals", "");
				__0x3053.ContextMenuText = __0x3053.Name.Replace( "Scene Display ", "" );
				__0x3053.GetState += delegate ( EditorAction.GetStateContext __0x3560 )
				{
					var __0x3054 = __0x3560.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3054 != null )
					{
						__0x3560.Enabled = __0x3054.DisplayDevelopmentDataInEditor || __0x3054.DisplayDevelopmentDataInSimulation;
						__0x3560.Checked = __0x3560.Enabled && __0x3054.DisplayDecals;
					}
				};
				__0x3053.Click += delegate ( EditorAction.ClickContext __0x3561 )
				{
					var __0x3055 = __0x3561.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3056 = __0x3561.ObjectsInFocus.DocumentWindow.Document;

					var __0x3057 = __0x3055.DisplayDecals;

					__0x3055.DisplayDecals = !__0x3055.DisplayDecals;

					var __0x3058 = (Metadata.Property)__0x3055.MetadataGetMemberBySignature( "property:DisplayDecals" );
					var __0x3059 = new UndoActionPropertiesChange.Item( __0x3055, __0x3058, __0x3057, new object[ 0 ] );
					var __0x3060 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3059 } );
					__0x3056.UndoSystem.CommitAction( __0x3060 );
					__0x3056.Modified = true;
				};
				EditorActions.Register( __0x3053 );
			}

			
			{
				var __0x3061 = new EditorAction();
				__0x3061.Name = "Scene Display Reflection Probes";
				__0x3061.ImageSmall = Properties.Resources.Default_16;
				__0x3061.ImageBig = Properties.Resources.Default_32;
				__0x3061.QatSupport = true;
				__0x3061.RibbonText = ("Reflection", "Probes");
				__0x3061.ContextMenuText = __0x3061.Name.Replace( "Scene Display ", "" );
				__0x3061.GetState += delegate ( EditorAction.GetStateContext __0x3562 )
				{
					var __0x3062 = __0x3562.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3062 != null )
					{
						__0x3562.Enabled = __0x3062.DisplayDevelopmentDataInEditor || __0x3062.DisplayDevelopmentDataInSimulation;
						__0x3562.Checked = __0x3562.Enabled && __0x3062.DisplayReflectionProbes;
					}
				};
				__0x3061.Click += delegate ( EditorAction.ClickContext __0x3563 )
				{
					var __0x3063 = __0x3563.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3064 = __0x3563.ObjectsInFocus.DocumentWindow.Document;

					var __0x3065 = __0x3063.DisplayReflectionProbes;

					__0x3063.DisplayReflectionProbes = !__0x3063.DisplayReflectionProbes;

					var __0x3066 = (Metadata.Property)__0x3063.MetadataGetMemberBySignature( "property:DisplayReflectionProbes" );
					var __0x3067 = new UndoActionPropertiesChange.Item( __0x3063, __0x3066, __0x3065, new object[ 0 ] );
					var __0x3068 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3067 } );
					__0x3064.UndoSystem.CommitAction( __0x3068 );
					__0x3064.Modified = true;
				};
				EditorActions.Register( __0x3061 );
			}

			
			{
				var __0x3069 = new EditorAction();
				__0x3069.Name = "Scene Display Cameras";
				__0x3069.ImageSmall = Properties.Resources.Default_16;
				__0x3069.ImageBig = Properties.Resources.Default_32;
				__0x3069.QatSupport = true;
				__0x3069.RibbonText = ("Cameras", "");
				__0x3069.ContextMenuText = __0x3069.Name.Replace( "Scene Display ", "" );
				__0x3069.GetState += delegate ( EditorAction.GetStateContext __0x3564 )
				{
					var __0x3070 = __0x3564.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3070 != null )
					{
						__0x3564.Enabled = __0x3070.DisplayDevelopmentDataInEditor || __0x3070.DisplayDevelopmentDataInSimulation;
						__0x3564.Checked = __0x3564.Enabled && __0x3070.DisplayCameras;
					}
				};
				__0x3069.Click += delegate ( EditorAction.ClickContext __0x3565 )
				{
					var __0x3071 = __0x3565.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3072 = __0x3565.ObjectsInFocus.DocumentWindow.Document;

					var __0x3073 = __0x3071.DisplayCameras;

					__0x3071.DisplayCameras = !__0x3071.DisplayCameras;

					var __0x3074 = (Metadata.Property)__0x3071.MetadataGetMemberBySignature( "property:DisplayCameras" );
					var __0x3075 = new UndoActionPropertiesChange.Item( __0x3071, __0x3074, __0x3073, new object[ 0 ] );
					var __0x3076 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3075 } );
					__0x3072.UndoSystem.CommitAction( __0x3076 );
					__0x3072.Modified = true;
				};
				EditorActions.Register( __0x3069 );
			}

			
			{
				var __0x3077 = new EditorAction();
				__0x3077.Name = "Scene Display Physical Objects";
				__0x3077.ImageSmall = Properties.Resources.Default_16;
				__0x3077.ImageBig = Properties.Resources.Default_32;
				__0x3077.QatSupport = true;
				__0x3077.RibbonText = ("Physical", "Objects");
				__0x3077.ContextMenuText = __0x3077.Name.Replace( "Scene Display ", "" );
				__0x3077.GetState += delegate ( EditorAction.GetStateContext __0x3566 )
				{
					var __0x3078 = __0x3566.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3078 != null )
					{
						__0x3566.Enabled = __0x3078.DisplayDevelopmentDataInEditor || __0x3078.DisplayDevelopmentDataInSimulation;
						__0x3566.Checked = __0x3566.Enabled && __0x3078.DisplayPhysicalObjects;
					}
				};
				__0x3077.Click += delegate ( EditorAction.ClickContext __0x3567 )
				{
					var __0x3079 = __0x3567.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3080 = __0x3567.ObjectsInFocus.DocumentWindow.Document;

					var __0x3081 = __0x3079.DisplayPhysicalObjects;

					__0x3079.DisplayPhysicalObjects = !__0x3079.DisplayPhysicalObjects;

					var __0x3082 = (Metadata.Property)__0x3079.MetadataGetMemberBySignature( "property:DisplayPhysicalObjects" );
					var __0x3083 = new UndoActionPropertiesChange.Item( __0x3079, __0x3082, __0x3081, new object[ 0 ] );
					var __0x3084 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3083 } );
					__0x3080.UndoSystem.CommitAction( __0x3084 );
					__0x3080.Modified = true;
				};
				EditorActions.Register( __0x3077 );
			}

			
			{
				var __0x3085 = new EditorAction();
				__0x3085.Name = "Scene Display Areas";
				__0x3085.ImageSmall = Properties.Resources.Default_16;
				__0x3085.ImageBig = Properties.Resources.Default_32;
				__0x3085.QatSupport = true;
				__0x3085.RibbonText = ("Areas", "");
				__0x3085.ContextMenuText = __0x3085.Name.Replace( "Scene Display ", "" );
				__0x3085.GetState += delegate ( EditorAction.GetStateContext __0x3568 )
				{
					var __0x3086 = __0x3568.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3086 != null )
					{
						__0x3568.Enabled = __0x3086.DisplayDevelopmentDataInEditor || __0x3086.DisplayDevelopmentDataInSimulation;
						__0x3568.Checked = __0x3568.Enabled && __0x3086.DisplayAreas;
					}
				};
				__0x3085.Click += delegate ( EditorAction.ClickContext __0x3569 )
				{
					var __0x3087 = __0x3569.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3088 = __0x3569.ObjectsInFocus.DocumentWindow.Document;

					var __0x3089 = __0x3087.DisplayAreas;

					__0x3087.DisplayAreas = !__0x3087.DisplayAreas;

					var __0x3090 = (Metadata.Property)__0x3087.MetadataGetMemberBySignature( "property:DisplayAreas" );
					var __0x3091 = new UndoActionPropertiesChange.Item( __0x3087, __0x3090, __0x3089, new object[ 0 ] );
					var __0x3092 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3091 } );
					__0x3088.UndoSystem.CommitAction( __0x3092 );
					__0x3088.Modified = true;
				};
				EditorActions.Register( __0x3085 );
			}

			
			{
				var __0x3093 = new EditorAction();
				__0x3093.Name = "Scene Display Volumes";
				__0x3093.ImageSmall = Properties.Resources.Default_16;
				__0x3093.ImageBig = Properties.Resources.Default_32;
				__0x3093.QatSupport = true;
				__0x3093.RibbonText = ("Volumes", "");
				__0x3093.ContextMenuText = __0x3093.Name.Replace( "Scene Display ", "" );
				__0x3093.GetState += delegate ( EditorAction.GetStateContext __0x3570 )
				{
					var __0x3094 = __0x3570.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3094 != null )
					{
						__0x3570.Enabled = __0x3094.DisplayDevelopmentDataInEditor || __0x3094.DisplayDevelopmentDataInSimulation;
						__0x3570.Checked = __0x3570.Enabled && __0x3094.DisplayVolumes;
					}
				};
				__0x3093.Click += delegate ( EditorAction.ClickContext __0x3571 )
				{
					var __0x3095 = __0x3571.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3096 = __0x3571.ObjectsInFocus.DocumentWindow.Document;

					var __0x3097 = __0x3095.DisplayVolumes;

					__0x3095.DisplayVolumes = !__0x3095.DisplayVolumes;

					var __0x3098 = (Metadata.Property)__0x3095.MetadataGetMemberBySignature( "property:DisplayVolumes" );
					var __0x3099 = new UndoActionPropertiesChange.Item( __0x3095, __0x3098, __0x3097, new object[ 0 ] );
					var __0x3100 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3099 } );
					__0x3096.UndoSystem.CommitAction( __0x3100 );
					__0x3096.Modified = true;
				};
				EditorActions.Register( __0x3093 );
			}

			
			{
				var __0x3101 = new EditorAction();
				__0x3101.Name = "Scene Display Sensors";
				__0x3101.ImageSmall = Properties.Resources.Default_16;
				__0x3101.ImageBig = Properties.Resources.Default_32;
				__0x3101.QatSupport = true;
				__0x3101.RibbonText = ("Sensors", "");
				__0x3101.ContextMenuText = __0x3101.Name.Replace( "Scene Display ", "" );
				__0x3101.GetState += delegate ( EditorAction.GetStateContext __0x3572 )
				{
					var __0x3102 = __0x3572.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3102 != null )
					{
						__0x3572.Enabled = __0x3102.DisplayDevelopmentDataInEditor || __0x3102.DisplayDevelopmentDataInSimulation;
						__0x3572.Checked = __0x3572.Enabled && __0x3102.DisplaySensors;
					}
				};
				__0x3101.Click += delegate ( EditorAction.ClickContext __0x3573 )
				{
					var __0x3103 = __0x3573.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3104 = __0x3573.ObjectsInFocus.DocumentWindow.Document;

					var __0x3105 = __0x3103.DisplaySensors;

					__0x3103.DisplaySensors = !__0x3103.DisplaySensors;

					var __0x3106 = (Metadata.Property)__0x3103.MetadataGetMemberBySignature( "property:DisplaySensors" );
					var __0x3107 = new UndoActionPropertiesChange.Item( __0x3103, __0x3106, __0x3105, new object[ 0 ] );
					var __0x3108 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3107 } );
					__0x3104.UndoSystem.CommitAction( __0x3108 );
					__0x3104.Modified = true;
				};
				EditorActions.Register( __0x3101 );
			}

			
			{
				var __0x3109 = new EditorAction();
				__0x3109.Name = "Scene Display Sound Sources";
				__0x3109.ImageSmall = Properties.Resources.Default_16;
				__0x3109.ImageBig = Properties.Resources.Default_32;
				__0x3109.QatSupport = true;
				__0x3109.RibbonText = ("Sound", "Sources");
				__0x3109.ContextMenuText = __0x3109.Name.Replace( "Scene Display ", "" );
				__0x3109.GetState += delegate ( EditorAction.GetStateContext __0x3574 )
				{
					var __0x3110 = __0x3574.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3110 != null )
					{
						__0x3574.Enabled = __0x3110.DisplayDevelopmentDataInEditor || __0x3110.DisplayDevelopmentDataInSimulation;
						__0x3574.Checked = __0x3574.Enabled && __0x3110.DisplaySoundSources;
					}
				};
				__0x3109.Click += delegate ( EditorAction.ClickContext __0x3575 )
				{
					var __0x3111 = __0x3575.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3112 = __0x3575.ObjectsInFocus.DocumentWindow.Document;

					var __0x3113 = __0x3111.DisplaySoundSources;

					__0x3111.DisplaySoundSources = !__0x3111.DisplaySoundSources;

					var __0x3114 = (Metadata.Property)__0x3111.MetadataGetMemberBySignature( "property:DisplaySoundSources" );
					var __0x3115 = new UndoActionPropertiesChange.Item( __0x3111, __0x3114, __0x3113, new object[ 0 ] );
					var __0x3116 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3115 } );
					__0x3112.UndoSystem.CommitAction( __0x3116 );
					__0x3112.Modified = true;
				};
				EditorActions.Register( __0x3109 );
			}

			
			{
				var __0x3117 = new EditorAction();
				__0x3117.Name = "Scene Display Object In Space Bounds";
				__0x3117.ImageSmall = Properties.Resources.Default_16;
				__0x3117.ImageBig = Properties.Resources.Default_32;
				__0x3117.QatSupport = true;
				__0x3117.RibbonText = ("Object", "Bounds");
				__0x3117.ContextMenuText = __0x3117.Name.Replace( "Scene Display ", "" );
				__0x3117.GetState += delegate ( EditorAction.GetStateContext __0x3576 )
				{
					var __0x3118 = __0x3576.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3118 != null )
					{
						__0x3576.Enabled = __0x3118.DisplayDevelopmentDataInEditor || __0x3118.DisplayDevelopmentDataInSimulation;
						__0x3576.Checked = __0x3576.Enabled && __0x3118.DisplayObjectInSpaceBounds;
					}
				};
				__0x3117.Click += delegate ( EditorAction.ClickContext __0x3577 )
				{
					var __0x3119 = __0x3577.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3120 = __0x3577.ObjectsInFocus.DocumentWindow.Document;

					var __0x3121 = __0x3119.DisplayObjectInSpaceBounds;

					__0x3119.DisplayObjectInSpaceBounds = !__0x3119.DisplayObjectInSpaceBounds;

					var __0x3122 = (Metadata.Property)__0x3119.MetadataGetMemberBySignature( "property:DisplayObjectInSpaceBounds" );
					var __0x3123 = new UndoActionPropertiesChange.Item( __0x3119, __0x3122, __0x3121, new object[ 0 ] );
					var __0x3124 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3123 } );
					__0x3120.UndoSystem.CommitAction( __0x3124 );
					__0x3120.Modified = true;
				};
				EditorActions.Register( __0x3117 );
			}

			
			{
				var __0x3125 = new EditorAction();
				__0x3125.Name = "Scene Display Scene Octree";
				__0x3125.ImageSmall = Properties.Resources.Default_16;
				__0x3125.ImageBig = Properties.Resources.Default_32;
				__0x3125.QatSupport = true;
				__0x3125.RibbonText = ("Scene", "Octree");
				__0x3125.ContextMenuText = __0x3125.Name.Replace( "Scene Display ", "" );
				__0x3125.GetState += delegate ( EditorAction.GetStateContext __0x3578 )
				{
					var __0x3126 = __0x3578.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3126 != null )
					{
						__0x3578.Enabled = __0x3126.DisplayDevelopmentDataInEditor || __0x3126.DisplayDevelopmentDataInSimulation;
						__0x3578.Checked = __0x3578.Enabled && __0x3126.DisplaySceneOctree;
					}
				};
				__0x3125.Click += delegate ( EditorAction.ClickContext __0x3579 )
				{
					var __0x3127 = __0x3579.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3128 = __0x3579.ObjectsInFocus.DocumentWindow.Document;

					var __0x3129 = __0x3127.DisplaySceneOctree;

					__0x3127.DisplaySceneOctree = !__0x3127.DisplaySceneOctree;

					var __0x3130 = (Metadata.Property)__0x3127.MetadataGetMemberBySignature( "property:DisplaySceneOctree" );
					var __0x3131 = new UndoActionPropertiesChange.Item( __0x3127, __0x3130, __0x3129, new object[ 0 ] );
					var __0x3132 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3131 } );
					__0x3128.UndoSystem.CommitAction( __0x3132 );
					__0x3128.Modified = true;
				};
				EditorActions.Register( __0x3125 );
			}

			
			{
				var __0x3133 = new EditorAction();
				__0x3133.Name = "Scene Frustum Culling Test";
				__0x3133.ImageSmall = Properties.Resources.Default_16;
				__0x3133.ImageBig = Properties.Resources.Default_32;
				__0x3133.QatSupport = true;
				__0x3133.RibbonText = ("Frustum", "Test");
				__0x3133.ContextMenuText = __0x3133.Name.Replace( "Scene ", "" );
				__0x3133.GetState += delegate ( EditorAction.GetStateContext __0x3580 )
				{
					var __0x3134 = __0x3580.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					if( __0x3134 != null )
					{
						__0x3580.Enabled = __0x3134.DisplayDevelopmentDataInEditor || __0x3134.DisplayDevelopmentDataInSimulation;
						__0x3580.Checked = __0x3580.Enabled && __0x3134.FrustumCullingTest;
					}
				};
				__0x3133.Click += delegate ( EditorAction.ClickContext __0x3581 )
				{
					var __0x3135 = __0x3581.ObjectsInFocus.DocumentWindow.Document.ResultComponent as Component_Scene;
					var __0x3136 = __0x3581.ObjectsInFocus.DocumentWindow.Document;

					var __0x3137 = __0x3135.FrustumCullingTest;

					__0x3135.FrustumCullingTest = !__0x3135.FrustumCullingTest;

					var __0x3138 = (Metadata.Property)__0x3135.MetadataGetMemberBySignature( "property:FrustumCullingTest" );
					var __0x3139 = new UndoActionPropertiesChange.Item( __0x3135, __0x3138, __0x3137, new object[ 0 ] );
					var __0x3140 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3139 } );
					__0x3136.UndoSystem.CommitAction( __0x3140 );
					__0x3136.Modified = true;
				};
				EditorActions.Register( __0x3133 );
			}

			
			
			
			
			
			
			
			
			
			
			

			

			
			
			
			
			
			
			
			
			
			

			
			

			

			

			
			
			
			
			
			
			
			


			
			foreach( var __0x3471 in (Component_RenderingPipeline_Basic.DebugModeEnum[])Enum.GetValues( typeof( Component_RenderingPipeline_Basic.DebugModeEnum ) ) )
			{
				var __0x3141 = TypeUtility.DisplayNameAddSpaces( __0x3471.ToString() );

				var __0x3142 = new EditorAction();
				__0x3142.Name = "Rendering Debug Mode " + __0x3141;
				__0x3142.ImageSmall = Properties.Resources.Default_16;
				__0x3142.ImageBig = Properties.Resources.Default_32;
				__0x3142.QatSupport = true;
				__0x3142.RibbonText = (__0x3141, "");
				__0x3142.ContextMenuText = __0x3141;
				__0x3142.UserData = __0x3471;
				__0x3142.GetState += delegate ( EditorAction.GetStateContext __0x3582 )
				{
					var __0x3143 = __0x3582.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					var __0x3144 = __0x3143?.RenderingPipeline.Value as Component_RenderingPipeline_Basic;

					if( __0x3144 != null )
					{
						var __0x3145 = (Component_RenderingPipeline_Basic.DebugModeEnum)__0x3582.Action.UserData;

						__0x3582.Enabled = true;

						if( __0x3144.DebugMode.Value == __0x3145 )
							__0x3582.Checked = true;
					}
				};
				__0x3142.Click += delegate ( EditorAction.ClickContext __0x3583 )
				{
					var __0x3146 = __0x3583.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component_Scene;
					var __0x3147 = __0x3146?.RenderingPipeline.Value as Component_RenderingPipeline_Basic;

					if( __0x3147 != null )
					{
						var __0x3148 = __0x3583.ObjectsInFocus.DocumentWindow.Document;

						var __0x3149 = __0x3147.DebugMode;

						var __0x3150 = (Component_RenderingPipeline_Basic.DebugModeEnum)__0x3583.Action.UserData;
						__0x3147.DebugMode = __0x3150;

						var __0x3151 = (Metadata.Property)__0x3147.MetadataGetMemberBySignature( "property:DebugMode" );
						var __0x3152 = new UndoActionPropertiesChange.Item( __0x3147, __0x3151, __0x3149, new object[ 0 ] );
						var __0x3153 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3152 } );
						__0x3148.UndoSystem.CommitAction( __0x3153 );
						__0x3148.Modified = true;
					}
				};
				EditorActions.Register( __0x3142 );
			}

			
			{
				var __0x3154 = new EditorAction();
				__0x3154.Name = "Snap All Axes";
				__0x3154.Description = "Aligns the position of the selected objects by all axes.";
				__0x3154.ImageSmall = Properties.Resources.MoveSnap_16;
				__0x3154.ImageBig = Properties.Resources.MoveSnap_32;
				__0x3154.QatSupport = true;
				__0x3154.RibbonText = ("Snap", "All");
				EditorActions.Register( __0x3154 );
			}

			
			{
				var __0x3155 = new EditorAction();
				__0x3155.Name = "Snap X";
				__0x3155.Description = "Aligns the position of the selected objects by X axis.";
				__0x3155.ImageSmall = Properties.Resources.MoveSnapX_16;
				__0x3155.ImageBig = Properties.Resources.MoveSnapX_32;
				__0x3155.QatSupport = true;
				__0x3155.RibbonText = ("Snap X", "");
				EditorActions.Register( __0x3155 );
			}

			
			{
				var __0x3156 = new EditorAction();
				__0x3156.Name = "Snap Y";
				__0x3156.Description = "Aligns the position of the selected objects by Y axis.";
				__0x3156.ImageSmall = Properties.Resources.MoveSnapY_16;
				__0x3156.ImageBig = Properties.Resources.MoveSnapY_32;
				__0x3156.QatSupport = true;
				__0x3156.RibbonText = ("Snap Y", "");
				EditorActions.Register( __0x3156 );
			}

			
			{
				var __0x3157 = new EditorAction();
				__0x3157.Name = "Snap Z";
				__0x3157.Description = "Aligns the position of the selected objects by Z axis.";
				__0x3157.ImageSmall = Properties.Resources.MoveSnapZ_16;
				__0x3157.ImageBig = Properties.Resources.MoveSnapZ_32;
				__0x3157.QatSupport = true;
				__0x3157.RibbonText = ("Snap Z", "");
				EditorActions.Register( __0x3157 );
			}

			
			{
				var __0x3158 = new EditorAction();
				__0x3158.Name = "Focus Camera On Selected Object";
				__0x3158.Description = "Focuses the camera on the selected object.";
				__0x3158.ImageSmall = Properties.Resources.Focus_16;
				__0x3158.ImageBig = Properties.Resources.Focus_32;
				__0x3158.QatSupport = true;
				__0x3158.RibbonText = ("Focus", "Camera");
				__0x3158.ShortcutKeys = new Keys[] { Keys.F };
				EditorActions.Register( __0x3158 );
			}

			
			{
				var __0x3159 = new EditorAction();
				__0x3159.Name = "Create Objects By Drag & Drop";
				__0x3159.Description = "The mode of creation objects by Drag & Drop.";
				
				__0x3159.ImageBig = Properties.Resources.CreationObjectsDrop_32;
				__0x3159.QatSupport = true;
				__0x3159.RibbonText = ("Drop", "");
				
				
				EditorActions.Register( __0x3159 );
			}

			
			{
				var __0x3160 = new EditorAction();
				__0x3160.Name = "Create Objects By Click";
				__0x3160.Description = "The mode of creation objects by mouse click.";
				
				__0x3160.ImageBig = Properties.Resources.CreationObjectsClick_32;
				__0x3160.QatSupport = true;
				__0x3160.RibbonText = ("Click", "");
				
				
				EditorActions.Register( __0x3160 );
			}

			
			{
				var __0x3161 = new EditorAction();
				__0x3161.Name = "Create Objects By Brush";
				__0x3161.Description = "The mode of creation objects by brush.";
				
				__0x3161.ImageBig = Properties.Resources.CreationObjectsBrush_32;
				__0x3161.QatSupport = true;
				__0x3161.RibbonText = ("Brush", "");
				
				
				EditorActions.Register( __0x3161 );
			}

			
			{
				var __0x3162 = new EditorAction();
				__0x3162.Name = "Create Objects Brush Radius";
				__0x3162.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3162.Slider.Minimum = 0;
				__0x3162.Slider.Maximum = 100;
				__0x3162.Slider.ExponentialPower = 3;
				__0x3162.Slider.Value = Component_Scene_DocumentWindow.CreateObjectsBrushRadius;
				
				
				__0x3162.RibbonText = ("Radius", "");
				EditorActions.Register( __0x3162 );
			}

			
			{
				var __0x3163 = new EditorAction();
				__0x3163.Name = "Create Objects Brush Strength";
				__0x3163.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3163.Slider.Value = Component_Scene_DocumentWindow.CreateObjectsBrushStrength;
				
				
				__0x3163.RibbonText = ("Strength", "");
				EditorActions.Register( __0x3163 );
			}

			
			{
				var __0x3164 = new EditorAction();
				__0x3164.Name = "Create Objects Brush Hardness";
				__0x3164.ActionType = EditorAction.ActionTypeEnum.Slider;
				__0x3164.Slider.Value = Component_Scene_DocumentWindow.CreateObjectsBrushHardness;
				
				
				__0x3164.RibbonText = ("Hardness", "");
				EditorActions.Register( __0x3164 );
			}

			
			{
				var __0x3165 = new EditorAction();
				__0x3165.Name = "Create Objects Destination";
				__0x3165.ActionType = EditorAction.ActionTypeEnum.ListBox;
				
				
				
				__0x3165.RibbonText = ("Destination", "");
				EditorActions.Register( __0x3165 );
			}








			
			
			{
				var __0x3166 = new EditorAction();
				__0x3166.Name = "New Object";
				__0x3166.Description = "Add new object to the selected object.";
				__0x3166.ImageSmall = Properties.Resources.New_16;
				__0x3166.ImageBig = Properties.Resources.New_32;
				__0x3166.QatSupport = true;
				
				__0x3166.RibbonText = ("New", "Object");
				__0x3166.GetState += delegate ( EditorAction.GetStateContext __0x3584 )
				{
					var __0x3167 = __0x3584.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component;
					if( __0x3167 != null )
					{
						var __0x3168 = new List<Component>();
						if( __0x3584.ObjectsInFocus.DocumentWindow.SelectedObjects.Length != 0 )
							__0x3168.AddRange( __0x3584.ObjectsInFocus.DocumentWindow.SelectedObjects.OfType<Component>() );
						else
							__0x3168.Add( __0x3167 );

						if( __0x3168.Count != 0 )
							__0x3584.Enabled = true;
					}
				};
				__0x3166.Click += delegate ( EditorAction.ClickContext __0x3585 )
				{
					var __0x3169 = __0x3585.ObjectsInFocus.DocumentWindow?.Document?.ResultComponent as Component;
					if( __0x3169 != null )
					{
						var __0x3170 = new List<Component>();
						if( __0x3585.ObjectsInFocus.DocumentWindow.SelectedObjects.Length != 0 )
							__0x3170.AddRange( __0x3585.ObjectsInFocus.DocumentWindow.SelectedObjects.OfType<Component>() );
						else
							__0x3170.Add( __0x3169 );

						if( __0x3170.Count != 0 )
						{
							var __0x3171 = new NewObjectWindow.CreationDataClass();
							__0x3171.initDocumentWindow = __0x3585.ObjectsInFocus.DocumentWindow;
							__0x3171.initParentObjects = new List<object>();
							__0x3171.initParentObjects.AddRange( __0x3170 );

							EditorAPI.OpenNewObjectWindow( __0x3171 );
						}
					}
				};
				EditorActions.Register( __0x3166 );
			}


			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			

			
			
			
			
			
			
			
		}

		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		

		

		static void __0x3504()
		{
			
			{
				var __0x3172 = new EditorAction();
				__0x3172.Name = "Mesh Display Pivot";
				__0x3172.Description = "Whether to display the pivot.";
				
				__0x3172.ImageBig = Properties.Resources.MeshPivot_32;
				__0x3172.QatSupport = true;
				__0x3172.RibbonText = ("Pivot", "");
				__0x3172.GetState += delegate ( EditorAction.GetStateContext __0x3586 )
				{
					var __0x3173 = __0x3586.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3173 != null )
					{
						__0x3586.Enabled = true;
						__0x3586.Checked = __0x3173.EditorDisplayPivot;
					}
				};
				__0x3172.Click += delegate ( EditorAction.ClickContext __0x3587 )
				{
					var __0x3174 = __0x3587.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3175 = __0x3587.ObjectsInFocus.DocumentWindow.Document;

					var __0x3176 = __0x3174.EditorDisplayPivot;

					__0x3174.EditorDisplayPivot = !__0x3174.EditorDisplayPivot;

					var __0x3177 = (Metadata.Property)__0x3174.MetadataGetMemberBySignature( "property:EditorDisplayPivot" );
					var __0x3178 = new UndoActionPropertiesChange.Item( __0x3174, __0x3177, __0x3176, new object[ 0 ] );
					var __0x3179 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3178 } );
					__0x3175.UndoSystem.CommitAction( __0x3179 );
					__0x3175.Modified = true;
				};
				EditorActions.Register( __0x3172 );
			}

			
			{
				var __0x3180 = new EditorAction();
				__0x3180.Name = "Mesh Display Bounds";
				__0x3180.Description = "Whether to display the bounding box.";
				
				__0x3180.ImageBig = Properties.Resources.MeshBounds_32;
				__0x3180.QatSupport = true;
				__0x3180.RibbonText = ("Bounds", "");
				__0x3180.GetState += delegate ( EditorAction.GetStateContext __0x3588 )
				{
					var __0x3181 = __0x3588.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3181 != null )
					{
						__0x3588.Enabled = true;
						__0x3588.Checked = __0x3181.EditorDisplayBounds;
					}
				};
				__0x3180.Click += delegate ( EditorAction.ClickContext __0x3589 )
				{
					var __0x3182 = __0x3589.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3183 = __0x3589.ObjectsInFocus.DocumentWindow.Document;

					var __0x3184 = __0x3182.EditorDisplayBounds;

					__0x3182.EditorDisplayBounds = !__0x3182.EditorDisplayBounds;

					var __0x3185 = (Metadata.Property)__0x3182.MetadataGetMemberBySignature( "property:EditorDisplayBounds" );
					var __0x3186 = new UndoActionPropertiesChange.Item( __0x3182, __0x3185, __0x3184, new object[ 0 ] );
					var __0x3187 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3186 } );
					__0x3183.UndoSystem.CommitAction( __0x3187 );
					__0x3183.Modified = true;
				};
				EditorActions.Register( __0x3180 );
			}

			
			{
				var __0x3188 = new EditorAction();
				__0x3188.Name = "Mesh Display Triangles";
				__0x3188.Description = "Whether to display the triangles.";
				
				__0x3188.ImageBig = Properties.Resources.MeshTriangles_32;
				__0x3188.QatSupport = true;
				__0x3188.RibbonText = ("Triangles", "");
				__0x3188.GetState += delegate ( EditorAction.GetStateContext __0x3590 )
				{
					var __0x3189 = __0x3590.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3189 != null )
					{
						__0x3590.Enabled = true;
						__0x3590.Checked = __0x3189.EditorDisplayTriangles;
					}
				};
				__0x3188.Click += delegate ( EditorAction.ClickContext __0x3591 )
				{
					var __0x3190 = __0x3591.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3191 = __0x3591.ObjectsInFocus.DocumentWindow.Document;

					var __0x3192 = __0x3190.EditorDisplayTriangles;

					__0x3190.EditorDisplayTriangles = !__0x3190.EditorDisplayTriangles;

					var __0x3193 = (Metadata.Property)__0x3190.MetadataGetMemberBySignature( "property:EditorDisplayTriangles" );
					var __0x3194 = new UndoActionPropertiesChange.Item( __0x3190, __0x3193, __0x3192, new object[ 0 ] );
					var __0x3195 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3194 } );
					__0x3191.UndoSystem.CommitAction( __0x3195 );
					__0x3191.Modified = true;
				};
				EditorActions.Register( __0x3188 );
			}

			
			{
				var __0x3196 = new EditorAction();
				__0x3196.Name = "Mesh Display Vertices";
				__0x3196.Description = "Whether to display the vertices.";
				
				__0x3196.ImageBig = Properties.Resources.MeshVertices_32;
				__0x3196.QatSupport = true;
				__0x3196.RibbonText = ("Vertices", "");
				__0x3196.GetState += delegate ( EditorAction.GetStateContext __0x3592 )
				{
					var __0x3197 = __0x3592.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3197 != null )
					{
						__0x3592.Enabled = true;
						__0x3592.Checked = __0x3197.EditorDisplayVertices;
					}
				};
				__0x3196.Click += delegate ( EditorAction.ClickContext __0x3593 )
				{
					var __0x3198 = __0x3593.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3199 = __0x3593.ObjectsInFocus.DocumentWindow.Document;

					var __0x3200 = __0x3198.EditorDisplayVertices;

					__0x3198.EditorDisplayVertices = !__0x3198.EditorDisplayVertices;

					var __0x3201 = (Metadata.Property)__0x3198.MetadataGetMemberBySignature( "property:EditorDisplayVertices" );
					var __0x3202 = new UndoActionPropertiesChange.Item( __0x3198, __0x3201, __0x3200, new object[ 0 ] );
					var __0x3203 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3202 } );
					__0x3199.UndoSystem.CommitAction( __0x3203 );
					__0x3199.Modified = true;
				};
				EditorActions.Register( __0x3196 );
			}

			
			{
				var __0x3204 = new EditorAction();
				__0x3204.Name = "Mesh Display Normals";
				__0x3204.Description = "Whether to display the normals.";
				
				__0x3204.ImageBig = Properties.Resources.MeshNormals_32;
				__0x3204.QatSupport = true;
				__0x3204.RibbonText = ("Normals", "");
				__0x3204.GetState += delegate ( EditorAction.GetStateContext __0x3594 )
				{
					var __0x3205 = __0x3594.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3205 != null && __0x3205.Result != null && ( __0x3205.Result.ExtractedVerticesComponents & StandardVertex.Components.Normal ) != 0 )
					{
						__0x3594.Enabled = true;
						__0x3594.Checked = __0x3205.EditorDisplayNormals;
					}
				};
				__0x3204.Click += delegate ( EditorAction.ClickContext __0x3595 )
				{
					var __0x3206 = __0x3595.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3207 = __0x3595.ObjectsInFocus.DocumentWindow.Document;

					var __0x3208 = __0x3206.EditorDisplayNormals;

					__0x3206.EditorDisplayNormals = !__0x3206.EditorDisplayNormals;

					var __0x3209 = (Metadata.Property)__0x3206.MetadataGetMemberBySignature( "property:EditorDisplayNormals" );
					var __0x3210 = new UndoActionPropertiesChange.Item( __0x3206, __0x3209, __0x3208, new object[ 0 ] );
					var __0x3211 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3210 } );
					__0x3207.UndoSystem.CommitAction( __0x3211 );
					__0x3207.Modified = true;
				};
				EditorActions.Register( __0x3204 );
			}

			
			{
				var __0x3212 = new EditorAction();
				__0x3212.Name = "Mesh Display Tangents";
				__0x3212.Description = "Whether to display the tangent vectors.";
				
				__0x3212.ImageBig = Properties.Resources.MeshTangents_32;
				__0x3212.QatSupport = true;
				__0x3212.RibbonText = ("Tangents", "");
				__0x3212.GetState += delegate ( EditorAction.GetStateContext __0x3596 )
				{
					var __0x3213 = __0x3596.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3213 != null && __0x3213.Result != null && ( __0x3213.Result.ExtractedVerticesComponents & StandardVertex.Components.Tangent ) != 0 )
					{
						__0x3596.Enabled = true;
						__0x3596.Checked = __0x3213.EditorDisplayTangents;
					}
				};
				__0x3212.Click += delegate ( EditorAction.ClickContext __0x3597 )
				{
					var __0x3214 = __0x3597.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3215 = __0x3597.ObjectsInFocus.DocumentWindow.Document;

					var __0x3216 = __0x3214.EditorDisplayTangents;

					__0x3214.EditorDisplayTangents = !__0x3214.EditorDisplayTangents;

					var __0x3217 = (Metadata.Property)__0x3214.MetadataGetMemberBySignature( "property:EditorDisplayTangents" );
					var __0x3218 = new UndoActionPropertiesChange.Item( __0x3214, __0x3217, __0x3216, new object[ 0 ] );
					var __0x3219 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3218 } );
					__0x3215.UndoSystem.CommitAction( __0x3219 );
					__0x3215.Modified = true;
				};
				EditorActions.Register( __0x3212 );
			}

			
			{
				var __0x3220 = new EditorAction();
				__0x3220.Name = "Mesh Display Binormals";
				__0x3220.Description = "Whether to display the binormal vectors.";
				
				__0x3220.ImageBig = Properties.Resources.MeshBinormals_32;
				__0x3220.QatSupport = true;
				__0x3220.RibbonText = ("Binormals", "");
				__0x3220.GetState += delegate ( EditorAction.GetStateContext __0x3598 )
				{
					var __0x3221 = __0x3598.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3221 != null && __0x3221.Result != null && ( __0x3221.Result.ExtractedVerticesComponents & StandardVertex.Components.Normal ) != 0 && ( __0x3221.Result.ExtractedVerticesComponents & StandardVertex.Components.Tangent ) != 0 )
					{
						__0x3598.Enabled = true;
						__0x3598.Checked = __0x3221.EditorDisplayBinormals;
					}
				};
				__0x3220.Click += delegate ( EditorAction.ClickContext __0x3599 )
				{
					var __0x3222 = __0x3599.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3223 = __0x3599.ObjectsInFocus.DocumentWindow.Document;

					var __0x3224 = __0x3222.EditorDisplayBinormals;

					__0x3222.EditorDisplayBinormals = !__0x3222.EditorDisplayBinormals;

					var __0x3225 = (Metadata.Property)__0x3222.MetadataGetMemberBySignature( "property:EditorDisplayBinormals" );
					var __0x3226 = new UndoActionPropertiesChange.Item( __0x3222, __0x3225, __0x3224, new object[ 0 ] );
					var __0x3227 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3226 } );
					__0x3223.UndoSystem.CommitAction( __0x3227 );
					__0x3223.Modified = true;
				};
				EditorActions.Register( __0x3220 );
			}

			
			{
				var __0x3228 = new EditorAction();
				__0x3228.Name = "Mesh Display Vertex Color";
				__0x3228.Description = "Whether to display the vertex color.";
				
				__0x3228.ImageBig = Properties.Resources.MeshVertexColor_32;
				__0x3228.QatSupport = true;
				__0x3228.RibbonText = ("Vertex", "Color");
				__0x3228.GetState += delegate ( EditorAction.GetStateContext __0x3600 )
				{
					var __0x3229 = __0x3600.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3229 != null && __0x3229.Result != null && ( __0x3229.Result.ExtractedVerticesComponents & StandardVertex.Components.Color ) != 0 )
					{
						__0x3600.Enabled = true;
						__0x3600.Checked = __0x3229.EditorDisplayVertexColor;
					}
				};
				__0x3228.Click += delegate ( EditorAction.ClickContext __0x3601 )
				{
					var __0x3230 = __0x3601.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3231 = __0x3601.ObjectsInFocus.DocumentWindow.Document;

					var __0x3232 = __0x3230.EditorDisplayVertexColor;

					__0x3230.EditorDisplayVertexColor = !__0x3230.EditorDisplayVertexColor;

					var __0x3233 = (Metadata.Property)__0x3230.MetadataGetMemberBySignature( "property:EditorDisplayVertexColor" );
					var __0x3234 = new UndoActionPropertiesChange.Item( __0x3230, __0x3233, __0x3232, new object[ 0 ] );
					var __0x3235 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3234 } );
					__0x3231.UndoSystem.CommitAction( __0x3235 );
					__0x3231.Modified = true;
				};
				EditorActions.Register( __0x3228 );
			}

			
			{
				var __0x3236 = new EditorAction();
				__0x3236.Name = "Mesh Display UV";
				__0x3236.Description = "Specifies a texture coordinates channel to display.";
				
				__0x3236.ImageBig = Properties.Resources.MeshUV_32;
				__0x3236.QatSupport = true;
				__0x3236.RibbonText = ("UV", "");
				__0x3236.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3236.DropDownContextMenu = new KryptonContextMenu();

				var __0x3237 = new List<KryptonContextMenuItemBase>();

				EventHandler __0x3238 = delegate ( object __0x3602, EventArgs __0x3603 )
				{
					var __0x3239 = (KryptonContextMenuItem)__0x3602;

					var __0x3240 = EditorAPI.SelectedDocumentWindow;
					var __0x3241 = __0x3240?.ObjectOfWindow as Component_Mesh;
					if( __0x3241 != null )
					{
						var __0x3242 = (int)__0x3239.Tag;
						var __0x3243 = __0x3241.EditorDisplayUV;
						if( __0x3242 != __0x3243 )
						{
							__0x3241.EditorDisplayUV = __0x3242;

							var __0x3244 = (Metadata.Property)__0x3241.MetadataGetMemberBySignature( "property:EditorDisplayUV" );
							var __0x3245 = new UndoActionPropertiesChange.Item( __0x3241, __0x3244, __0x3243, new object[ 0 ] );
							var __0x3246 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3245 } );
							__0x3240.Document.UndoSystem.CommitAction( __0x3246 );
							__0x3240.Document.Modified = true;
						}
					}
				};

				
				{
					var __0x3247 = new KryptonContextMenuItem( "None", null, __0x3238 );
					__0x3247.Tag = -1;
					__0x3237.Add( __0x3247 );
				}

				__0x3237.Add( new KryptonContextMenuSeparator() );

				
				for( int __0x3248 = 0; __0x3248 < 4; __0x3248++ )
				{
					var __0x3249 = new KryptonContextMenuItem( "UV Channel " + __0x3248.ToString(), null, __0x3238 );
					__0x3249.Tag = __0x3248;
					__0x3237.Add( __0x3249 );
				}

				__0x3236.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3237.ToArray() ) );

				__0x3236.GetState += delegate ( EditorAction.GetStateContext __0x3604 )
				{
					var __0x3250 = __0x3604.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3250 != null && __0x3250.Result != null )
					{
						var __0x3251 = __0x3250.Result.ExtractedVerticesComponents;
						if( ( __0x3251 & StandardVertex.Components.TexCoord0 ) != 0 || ( __0x3251 & StandardVertex.Components.TexCoord1 ) != 0 ||
							( __0x3251 & StandardVertex.Components.TexCoord2 ) != 0 || ( __0x3251 & StandardVertex.Components.TexCoord3 ) != 0 )
						{
							__0x3604.Enabled = true;

							var __0x3252 = ( (KryptonContextMenuItems)__0x3604.Action.DropDownContextMenu.Items[ 0 ] ).Items;
							foreach( var __0x3472 in __0x3252 )
							{
								if( __0x3472.Tag != null )
								{
									var __0x3253 = (KryptonContextMenuItem)__0x3472;

									int __0x3254 = (int)__0x3472.Tag;
									switch( __0x3254 )
									{
									case 0: __0x3253.Visible = ( StandardVertex.Components.TexCoord0 & __0x3251 ) != 0; break;
									case 1: __0x3253.Visible = ( StandardVertex.Components.TexCoord1 & __0x3251 ) != 0; break;
									case 2: __0x3253.Visible = ( StandardVertex.Components.TexCoord2 & __0x3251 ) != 0; break;
									case 3: __0x3253.Visible = ( StandardVertex.Components.TexCoord3 & __0x3251 ) != 0; break;
									}
									__0x3253.Checked = __0x3250.EditorDisplayUV == __0x3254;
								}
							}

							
							__0x3604.Checked = __0x3250.EditorDisplayUV != -1;
						}
					}
				};

				EditorActions.Register( __0x3236 );
			}

			
			{
				var __0x3255 = new EditorAction();
				__0x3255.Name = "Mesh Display LOD";
				__0x3255.Description = "Specifies a level of detail to display.";
				
				__0x3255.ImageBig = Properties.Resources.LOD_32;
				__0x3255.QatSupport = true;
				__0x3255.RibbonText = ("LOD", "");
				__0x3255.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3255.DropDownContextMenu = new KryptonContextMenu();

				var __0x3256 = new List<KryptonContextMenuItemBase>();

				EventHandler __0x3257 = delegate ( object __0x3605, EventArgs __0x3606 )
				{
					var __0x3258 = (KryptonContextMenuItem)__0x3605;

					var __0x3259 = EditorAPI.SelectedDocumentWindow;
					var __0x3260 = __0x3259?.ObjectOfWindow as Component_Mesh;
					if( __0x3260 != null )
					{
						var __0x3261 = (int)__0x3258.Tag;
						var __0x3262 = __0x3260.EditorDisplayLOD;
						if( __0x3261 != __0x3262 )
						{
							__0x3260.EditorDisplayLOD = __0x3261;

							var __0x3263 = (Metadata.Property)__0x3260.MetadataGetMemberBySignature( "property:EditorDisplayLOD" );
							var __0x3264 = new UndoActionPropertiesChange.Item( __0x3260, __0x3263, __0x3262, new object[ 0 ] );
							var __0x3265 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3264 } );
							__0x3259.Document.UndoSystem.CommitAction( __0x3265 );
							__0x3259.Document.Modified = true;
						}
					}
				};

				int __0x3266 = 40;
				for( int __0x3267 = 0; __0x3267 < __0x3266; __0x3267++ )
				{
					var __0x3268 = new KryptonContextMenuItem( $"LOD {__0x3267}", null, __0x3257 );
					__0x3268.Tag = __0x3267;
					__0x3256.Add( __0x3268 );
				}

				__0x3255.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3256.ToArray() ) );

				__0x3255.GetState += delegate ( EditorAction.GetStateContext __0x3607 )
				{
					var __0x3269 = __0x3607.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					var __0x3270 = __0x3269?.Result?.MeshData?.LODs;
					if( __0x3270 != null )
					{
						__0x3607.Enabled = true;

						int __0x3271 = __0x3270.Length + 1;

						var __0x3272 = ( (KryptonContextMenuItems)__0x3607.Action.DropDownContextMenu.Items[ 0 ] ).Items;
						foreach( var __0x3473 in __0x3272 )
						{
							int __0x3273 = (int)__0x3473.Tag;
							__0x3473.Visible = __0x3273 < __0x3271;

							var __0x3274 = (KryptonContextMenuItem)__0x3473;
							__0x3274.Checked = __0x3273 == __0x3269.EditorDisplayLOD;
						}

						__0x3607.Checked = __0x3269.EditorDisplayLOD != 0;
					}
				};

				EditorActions.Register( __0x3255 );
			}

			
			{
				const string __0x3275 = "Collision Definition";

				var __0x3276 = new EditorAction();
				__0x3276.Name = "Mesh Display Collision";
				__0x3276.Description = "Whether to display the collision.";
				
				__0x3276.ImageBig = Properties.Resources.MeshCollision_32;
				__0x3276.QatSupport = true;
				__0x3276.RibbonText = ("Collision", "");
				__0x3276.GetState += delegate ( EditorAction.GetStateContext __0x3608 )
				{
					var __0x3277 = __0x3608.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3277 != null && __0x3277.GetComponent( __0x3275 ) as Component_RigidBody != null )
					{
						__0x3608.Enabled = true;
						__0x3608.Checked = __0x3277.EditorDisplayCollision;
					}
				};
				__0x3276.Click += delegate ( EditorAction.ClickContext __0x3609 )
				{
					var __0x3278 = __0x3609.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3279 = __0x3609.ObjectsInFocus.DocumentWindow.Document;

					var __0x3280 = __0x3278.EditorDisplayCollision;

					__0x3278.EditorDisplayCollision = !__0x3278.EditorDisplayCollision;

					var __0x3281 = (Metadata.Property)__0x3278.MetadataGetMemberBySignature( "property:EditorDisplayCollision" );
					var __0x3282 = new UndoActionPropertiesChange.Item( __0x3278, __0x3281, __0x3280, new object[ 0 ] );
					var __0x3283 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3282 } );
					__0x3279.UndoSystem.CommitAction( __0x3283 );
					__0x3279.Modified = true;
				};
				EditorActions.Register( __0x3276 );
			}

			
			{
				var __0x3284 = new EditorAction();
				__0x3284.Name = "Mesh Display Skeleton";
				__0x3284.Description = "Whether to display the skeleton.";
				
				__0x3284.ImageBig = Properties.Resources.MeshSkeleton_32;
				__0x3284.QatSupport = true;
				__0x3284.RibbonText = ("Skeleton", "");
				__0x3284.GetState += delegate ( EditorAction.GetStateContext __0x3610 )
				{
					var __0x3285 = __0x3610.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3285 != null && __0x3285.Result != null && __0x3285.GetComponent<Component_Skeleton>() != null )
					{
						__0x3610.Enabled = true;
						__0x3610.Checked = __0x3285.EditorDisplaySkeleton;
					}
				};
				__0x3284.Click += delegate ( EditorAction.ClickContext __0x3611 )
				{
					var __0x3286 = __0x3611.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
					var __0x3287 = __0x3611.ObjectsInFocus.DocumentWindow.Document;

					var __0x3288 = __0x3286.EditorDisplaySkeleton;

					__0x3286.EditorDisplaySkeleton = !__0x3286.EditorDisplaySkeleton;

					var __0x3289 = (Metadata.Property)__0x3286.MetadataGetMemberBySignature( "property:EditorDisplaySkeleton" );
					var __0x3290 = new UndoActionPropertiesChange.Item( __0x3286, __0x3289, __0x3288, new object[ 0 ] );
					var __0x3291 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3290 } );
					__0x3287.UndoSystem.CommitAction( __0x3291 );
					__0x3287.Modified = true;
				};
				EditorActions.Register( __0x3284 );
			}

			
			{
				var __0x3292 = new EditorAction();
				__0x3292.Name = "Mesh Play Animation";
				__0x3292.Description = "Specifies the animation to play.";
				
				__0x3292.ImageBig = Properties.Resources.MeshAnimation_32;
				__0x3292.QatSupport = true;
				__0x3292.RibbonText = ("Animation", "");
				__0x3292.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3292.DropDownContextMenu = new KryptonContextMenu();

				
				{
					var __0x3293 = new List<KryptonContextMenuItemBase>();
					__0x3293.Add( new KryptonContextMenuSeparator() );
					__0x3292.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3293.ToArray() ) );
				}

				__0x3292.DropDownContextMenu.Opening += delegate ( object __0x3612, CancelEventArgs __0x3613 )
				{
					var __0x3294 = (KryptonContextMenu)__0x3612;

					__0x3294.Items.Clear();

					var __0x3295 = ((DocumentInstance, Component_Mesh))__0x3294.Tag;
					var __0x3296 = __0x3295.Item1;
					var __0x3297 = __0x3295.Item2;
					var __0x3298 = __0x3297.GetComponents<Component_Animation>( checkChildren: true );

					var __0x3299 = new List<KryptonContextMenuItemBase>();

					void Handler( object __0x3614, EventArgs __0x3615 )
					{
						var __0x3300 = (KryptonContextMenuItem)__0x3614;

						var __0x3301 = (string)__0x3300.Tag;
						var __0x3302 = __0x3297.EditorPlayAnimation;
						if( __0x3301 != __0x3302 )
						{
							__0x3297.EditorPlayAnimation = __0x3301;

							var __0x3303 = (Metadata.Property)__0x3297.MetadataGetMemberBySignature( "property:EditorPlayAnimation" );
							var __0x3304 = new UndoActionPropertiesChange.Item( __0x3297, __0x3303, __0x3302, new object[ 0 ] );
							var __0x3305 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x3304 } );
							__0x3296.UndoSystem.CommitAction( __0x3305 );
							__0x3296.Modified = true;
						}
					}

					
					{
						var __0x3306 = new KryptonContextMenuItem( "None", null, Handler );
						__0x3306.Tag = "";
						__0x3306.Checked = string.IsNullOrEmpty( __0x3297.EditorPlayAnimation );
						__0x3299.Add( __0x3306 );
					}

					__0x3299.Add( new KryptonContextMenuSeparator() );

					
					foreach( var __0x3474 in __0x3298 )
					{
						var __0x3307 = new KryptonContextMenuItem( string.IsNullOrEmpty( __0x3474.Name ) ? "'No name'" : __0x3474.Name, null, Handler );
						__0x3307.Tag = __0x3474.GetPathFromRoot();
						__0x3307.Checked = __0x3297.EditorPlayAnimation == __0x3474.GetPathFromRoot();
						__0x3299.Add( __0x3307 );
					}

					__0x3294.Items.Add( new KryptonContextMenuItems( __0x3299.ToArray() ) );
				};

				__0x3292.GetState += delegate ( EditorAction.GetStateContext __0x3616 )
				{
					var __0x3308 = __0x3616.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3308 != null && __0x3308.Result != null )
					{
						var __0x3309 = __0x3308.GetComponents<Component_Animation>( checkChildren: true );
						var __0x3310 = __0x3309.Length != 0;

						__0x3616.Enabled = __0x3310;
						__0x3616.Checked = __0x3309.Any( __0x3617 => __0x3617.GetPathFromRoot() == __0x3308.EditorPlayAnimation );

						__0x3292.DropDownContextMenu.Tag = (__0x3616.ObjectsInFocus.DocumentWindow.Document, __0x3308);
					}
				};

				EditorActions.Register( __0x3292 );
			}

			
			{
				const string __0x3311 = "Collision Definition";

				var __0x3312 = new EditorAction();
				__0x3312.Name = "Mesh Add Collision";
				__0x3312.ImageSmall = Properties.Resources.Add_16;
				__0x3312.ImageBig = Properties.Resources.MeshCollision_32;
				__0x3312.QatSupport = true;
				__0x3312.RibbonText = ("Add", "Collision");
				__0x3312.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3312.Description = "Precalculates the collision of the mesh.";

				
				

				__0x3312.GetState += delegate ( EditorAction.GetStateContext __0x3618 )
				{
					var __0x3313 = __0x3618.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3313 != null )
						__0x3618.Enabled = __0x3313.GetComponent( __0x3311 ) as Component_RigidBody == null;
				};

				
				{
					__0x3312.DropDownContextMenu = new KryptonContextMenu();

					var __0x3314 = new List<KryptonContextMenuItemBase>();

					EventHandler __0x3315 = delegate ( object __0x3619, EventArgs __0x3620 )
					{
						var __0x3316 = (KryptonContextMenuItem)__0x3619;

						var __0x3317 = EditorAPI.SelectedDocumentWindow;
						EditorPhysicsUtility.AddCollision( __0x3317, (string)__0x3316.Tag );
					};

					var __0x3318 = new string[] { "Box", "Sphere", "Capsule", "Cylinder", "Convex", "Convex Decomposition", "Mesh" };
					foreach( var __0x3475 in __0x3318 )
					{
						var __0x3319 = new KryptonContextMenuItem( __0x3475, null, __0x3315 );
						__0x3319.Tag = __0x3475;
						__0x3314.Add( __0x3319 );
					}

					__0x3312.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3314.ToArray() ) );
				}

				EditorActions.Register( __0x3312 );
			}

			
			{
				const string __0x3320 = "Collision Definition";

				var __0x3321 = new EditorAction();
				__0x3321.Name = "Mesh Delete Collision";
				__0x3321.ImageSmall = Properties.Resources.Delete_16;
				__0x3321.ImageBig = Properties.Resources.Delete_32;
				__0x3321.QatSupport = true;
				__0x3321.RibbonText = ("Delete", "Collision");
				__0x3321.Description = "Deletes the collision body of the mesh.";

				
				

				__0x3321.GetState += delegate ( EditorAction.GetStateContext __0x3621 )
				{
					var __0x3322 = __0x3621.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3322 != null )
						__0x3621.Enabled = __0x3322.GetComponent( __0x3320 ) as Component_RigidBody != null;
				};
				__0x3321.Click += delegate ( EditorAction.ClickContext __0x3622 )
				{
					var __0x3323 = string.Format( EditorLocalization.Translate( "General", "Delete \'{0}\'?" ), __0x3320 );
					if( EditorMessageBox.ShowQuestion( __0x3323, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						var __0x3324 = __0x3622.ObjectsInFocus.DocumentWindow.ObjectOfWindow as Component_Mesh;
						var __0x3325 = __0x3324.GetComponent( __0x3320 ) as Component_RigidBody;
						if( __0x3325 != null )
						{
							var __0x3326 = __0x3622.ObjectsInFocus.DocumentWindow.Document;
							var __0x3327 = new UndoActionComponentCreateDelete( __0x3326, new Component[] { __0x3325 }, false );
							__0x3326.UndoSystem.CommitAction( __0x3327 );
							__0x3326.Modified = true;
						}
					}
				};
				EditorActions.Register( __0x3321 );
			}

			
			{
				var __0x3328 = new EditorAction();
				__0x3328.Name = "Mesh Add Structure";
				__0x3328.ImageSmall = Properties.Resources.Add_16;
				__0x3328.ImageBig = Properties.Resources.MeshStructure_32;
				__0x3328.QatSupport = true;
				__0x3328.RibbonText = ("Add", "Structure");
				__0x3328.Description = "Generates the structure of the mesh.";

				__0x3328.GetState += delegate ( EditorAction.GetStateContext __0x3623 )
				{
					var __0x3329 = __0x3623.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3329 != null )
						__0x3623.Enabled = __0x3329.Structure == null;
					
				};
				__0x3328.Click += delegate ( EditorAction.ClickContext __0x3624 )
				{
					var __0x3330 = __0x3624.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3330 != null )
					{
						var __0x3331 = __0x3624.ObjectsInFocus.DocumentWindow.Document;

						var __0x3332 = (Metadata.Property)__0x3330.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
						var __0x3333 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x3330, __0x3332, __0x3330.Structure ) );

						__0x3330.RebuildStructure();

						__0x3331.CommitUndoAction( __0x3333 );
					}
				};
				EditorActions.Register( __0x3328 );
			}

			
			{
				var __0x3334 = new EditorAction();
				__0x3334.Name = "Mesh Delete Structure";
				__0x3334.ImageSmall = Properties.Resources.Delete_16;
				__0x3334.ImageBig = Properties.Resources.Delete_32;
				__0x3334.QatSupport = true;
				__0x3334.RibbonText = ("Delete", "Structure");
				__0x3334.Description = "Deletes the structure of the mesh.";

				__0x3334.GetState += delegate ( EditorAction.GetStateContext __0x3625 )
				{
					var __0x3335 = __0x3625.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3335 != null )
						__0x3625.Enabled = __0x3335.Structure != null;
				};
				__0x3334.Click += delegate ( EditorAction.ClickContext __0x3626 )
				{
					if( EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "General", "Delete structure?" ), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						var __0x3336 = __0x3626.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
						if( __0x3336 != null )
						{
							var __0x3337 = __0x3626.ObjectsInFocus.DocumentWindow.Document;

							var __0x3338 = (Metadata.Property)__0x3336.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
							var __0x3339 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x3336, __0x3338, __0x3336.Structure ) );

							__0x3336.Structure = null;

							__0x3337.CommitUndoAction( __0x3339 );
						}
					}
				};
				EditorActions.Register( __0x3334 );
			}

			foreach( var __0x3476 in GetAllMeshModifiers() )
				__0x3511( __0x3476 );

			
			{
				var __0x3340 = new EditorAction();
				__0x3340.Name = "Mesh Add Paint Layer";
				__0x3340.ImageSmall = Properties.Resources.Layers_16;
				__0x3340.ImageBig = Properties.Resources.Layers_32;
				__0x3340.QatSupport = true;
				__0x3340.RibbonText = ("Add", "Layer");
				__0x3340.Description = "Adds a masked paint layer.";
				__0x3340.GetState += delegate ( EditorAction.GetStateContext __0x3627 )
				{
					var __0x3341 = __0x3627.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3341 != null )
						__0x3627.Enabled = true;
				};
				__0x3340.Click += delegate ( EditorAction.ClickContext __0x3628 )
				{
					var __0x3342 = __0x3628.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
					if( __0x3342 != null )
					{
						var __0x3343 = __0x3628.ObjectsInFocus.DocumentWindow;

						var __0x3344 = __0x3342.CreateComponent<Component_PaintLayer>( enabled: false );
						__0x3344.Name = __0x3510( __0x3344 );
						__0x3344.Enabled = true;

						__0x3343.Focus();

						
						var __0x3345 = new Component[] { __0x3344 };
						var __0x3346 = __0x3343.Document;
						var __0x3347 = new UndoActionComponentCreateDelete( __0x3346, __0x3345, true );
						__0x3346.CommitUndoAction( __0x3347 );
						__0x3343.SelectObjects( __0x3345.ToArray() );
					}
				};
				EditorActions.Register( __0x3340 );
			}

			AssemblyUtility.RegisterAssemblyEvent += __0x3505;
		}

		private static void __0x3505( Assembly __0x3629 )
		{
			
			foreach( var __0x3477 in __0x3629.GetTypes() )
			{
				try
				{
					if( typeof( Component_MeshModifier ).IsAssignableFrom( __0x3477 ) && !__0x3477.IsAbstract )
					{
						var __0x3348 = MetadataManager.GetTypeOfNetType( __0x3477 );
						__0x3511( __0x3348 );
					}
				}
				catch { }
			}
		}

		

		static void __0x3506()
		{
			
			{
				var __0x3349 = new EditorAction();
				__0x3349.Name = "Add C# files to Project.csproj";
				__0x3349.Description = "Adds C# files to the Project.csproj.";
				__0x3349.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3349.ImageSmall = Properties.Resources.Add_16;
				__0x3349.ImageBig = Properties.Resources.Add_32;
				__0x3349.QatSupport = true;
				__0x3349.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;
				__0x3349.RibbonText = ("Add", "");

				__0x3349.GetState += delegate ( EditorAction.GetStateContext __0x3630 )
				{
					if( __0x3630.ObjectsInFocus.DocumentWindow == null && __0x3630.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3350 = __0x3630.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3478 in __0x3350 )
						{
							if( __0x3478.IsDirectory )
							{
								bool __0x3351 = false;

								if( __0x3630.Holder == EditorAction.HolderEnum.ContextMenu )
								{
									var __0x3352 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
									var __0x3353 = Directory.GetFiles( __0x3478.FullPath, "*.cs", SearchOption.AllDirectories );
									var __0x3354 = __0x3353.Any( __0x3631 => !__0x3352.Contains( __0x3631 ) );
									if( !__0x3354 )
										__0x3351 = true;
								}

								if( !__0x3351 )
								{
									__0x3630.Enabled = true;
									break;
								}
							}

							if( !__0x3478.IsDirectory && Path.GetExtension( __0x3478.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3355 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3478.FullPath );
								if( !__0x3355 )
								{
									__0x3630.Enabled = true;
									break;
								}
							}
						}
					}
				};

				__0x3349.Click += delegate ( EditorAction.ClickContext __0x3632 )
				{
					if( __0x3632.ObjectsInFocus.DocumentWindow == null && __0x3632.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3356 = new ESet<string>();

						var __0x3357 = __0x3632.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3479 in __0x3357 )
						{
							if( __0x3479.IsDirectory )
							{
								var __0x3358 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
								var __0x3359 = Directory.GetFiles( __0x3479.FullPath, "*.cs", SearchOption.AllDirectories );
								foreach( var __0x3480 in __0x3359 )
								{
									if( !__0x3358.Contains( __0x3480 ) )
										__0x3356.AddWithCheckAlreadyContained( __0x3480 );
								}
							}

							if( !__0x3479.IsDirectory && Path.GetExtension( __0x3479.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3360 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3479.FullPath );
								if( !__0x3360 )
									__0x3356.Add( __0x3479.FullPath );
							}
						}

						if( __0x3356.Count != 0 )
						{
							if( CSharpProjectFileUtility.UpdateProjectFile( __0x3356, null, out var error ) )
							{
								if( __0x3356.Count > 1 )
									Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
								else
									Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
							}
							else
								Log.Warning( error );
						}
					}
				};

				EditorActions.Register( __0x3349 );
			}

			
			{
				var __0x3361 = new EditorAction();
				__0x3361.Name = "Remove C# files from Project.csproj";
				__0x3361.Description = "Removes C# files from the Project.csproj.";
				__0x3361.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3361.ImageSmall = Properties.Resources.Delete_16;
				__0x3361.ImageBig = Properties.Resources.Delete_32;
				__0x3361.QatSupport = true;
				__0x3361.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;
				__0x3361.RibbonText = ("Remove", "");

				__0x3361.GetState += delegate ( EditorAction.GetStateContext __0x3633 )
				{
					if( __0x3633.ObjectsInFocus.DocumentWindow == null && __0x3633.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3362 = __0x3633.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3481 in __0x3362 )
						{
							if( __0x3481.IsDirectory )
							{
								bool __0x3363 = false;

								if( __0x3633.Holder == EditorAction.HolderEnum.ContextMenu )
								{
									var __0x3364 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
									var __0x3365 = Directory.GetFiles( __0x3481.FullPath, "*.cs", SearchOption.AllDirectories );
									var __0x3366 = __0x3365.Any( __0x3634 => __0x3364.Contains( __0x3634 ) );
									if( !__0x3366 )
										__0x3363 = true;
								}

								if( !__0x3363 )
								{
									__0x3633.Enabled = true;
									break;
								}
							}

							if( !__0x3481.IsDirectory && Path.GetExtension( __0x3481.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3367 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3481.FullPath );
								if( __0x3367 )
								{
									__0x3633.Enabled = true;
									break;
								}
							}
						}
					}
				};

				__0x3361.Click += delegate ( EditorAction.ClickContext __0x3635 )
				{
					if( __0x3635.ObjectsInFocus.DocumentWindow == null && __0x3635.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3368 = new ESet<string>();

						var __0x3369 = __0x3635.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3482 in __0x3369 )
						{
							if( __0x3482.IsDirectory )
							{
								var __0x3370 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
								var __0x3371 = Directory.GetFiles( __0x3482.FullPath, "*.cs", SearchOption.AllDirectories );
								foreach( var __0x3483 in __0x3371 )
								{
									if( __0x3370.Contains( __0x3483 ) )
										__0x3368.AddWithCheckAlreadyContained( __0x3483 );
								}
							}

							if( !__0x3482.IsDirectory && Path.GetExtension( __0x3482.FullPath ).ToLower() == ".cs" )
							{
								bool __0x3372 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true ).Contains( __0x3482.FullPath );
								if( __0x3372 )
									__0x3368.Add( __0x3482.FullPath );
							}
						}

						if( __0x3368.Count != 0 )
						{
							if( CSharpProjectFileUtility.UpdateProjectFile( null, __0x3368, out var error ) )
							{
								if( __0x3368.Count > 1 )
									Log.Info( EditorLocalization.Translate( "General", "Items have been removed from the Project.csproj." ) );
								else
									Log.Info( EditorLocalization.Translate( "General", "The item has been removed from the Project.csproj." ) );
							}
							else
								Log.Warning( error );
						}
					}
				};

				EditorActions.Register( __0x3361 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			

			
			{
				var __0x3373 = new EditorAction();
				__0x3373.Name = "Build Project's Solution";
				__0x3373.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3373.ImageSmall = Properties.Resources.Build_16;
				__0x3373.ImageSmall_Dark = Properties.Resources.Build_16_Dark;
				__0x3373.ImageBig = Properties.Resources.Build_32;
				__0x3373.ImageBig_Dark = Properties.Resources.Build_32_Dark;
				__0x3373.QatSupport = true;
				
				__0x3373.RibbonText = ("Build", "Solution");
				__0x3373.Description = "Builds the project's solution.";
				__0x3373.GetState += delegate ( EditorAction.GetStateContext __0x3636 )
				{
					__0x3636.Enabled = true;
				};
				__0x3373.Click += delegate ( EditorAction.ClickContext __0x3637 )
				{
					EditorAPI.SaveDocuments();
					
					

#if !DEPLOY
					CSharpProjectFileUtility.CheckToRemoveNotExistsFilesFromProject();

					var __0x3374 = Control.ModifierKeys.HasFlag( Keys.Control );

					if( __0x3374 || CSharpProjectFileUtility.CompilationIsRequired() )
					{
						if( CSharpProjectFileUtility.Compile( __0x3374, outputDirOverride: CSharpProjectFileUtility.GetProjectTempDir() ) )
						{
							var __0x3375 = EditorLocalization.Translate( "General", "Project.sln was built successfully.\r\n\r\nTo apply changes need restart the editor. Restart?" );
							if( EditorMessageBox.ShowQuestion( __0x3375, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
							{
								EditorAPI.BeginRestartApplication();
							}
						}
						
						
						
					}
					else
					{
						EditorMessageBox.ShowInfo( EditorLocalization.Translate( "General", "Project.sln compilation skipped because output file is up-to-date.\r\n\r\nYou can rebuild the solution. To do this, hold the Control key while clicking the \'Build Solution\'." ) );
					}
#endif
				};
				EditorActions.Register( __0x3373 );
			}

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3376 = new EditorAction();
				__0x3376.Name = "Open Sources Solution in External IDE";
				__0x3376.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3376.ImageSmall = Properties.Resources.External_16;
				__0x3376.ImageBig = Properties.Resources.External_32;
				__0x3376.QatSupport = true;
				__0x3376.RibbonText = ("Sources", "Solution");
				__0x3376.Description = "Opens Sources solution in an external IDE.";
				__0x3376.GetState += delegate ( EditorAction.GetStateContext __0x3638 )
				{
					__0x3638.Enabled = true;
				};
				__0x3376.Click += delegate ( EditorAction.ClickContext __0x3639 )
				{
					string __0x3377 = Path.GetDirectoryName( VirtualFileSystem.Directories.Project );
					Win32Utility.ShellExecuteEx( null, __0x3377 );

					
				};
				EditorActions.Register( __0x3376 );
			}

			
			{
				var __0x3378 = new EditorAction_NewResource( typeof( NewResourceType_CSharpClass ) );
				__0x3378.Name = "C# File";
				__0x3378.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3378.Description = "Creates a new C# file in the project.";
				__0x3378.RibbonText = ("C# File", "");
				
				__0x3378.ImageSmall = Properties.Resources.NewCSharp_16;
				__0x3378.ImageBig = Properties.Resources.NewCSharp_32;
				EditorActions.Register( __0x3378 );
			}

			
			{
				var __0x3379 = new EditorAction_NewResource( typeof( Component_CSharpScript ) );
				__0x3379.Name = "C# Script";
				__0x3379.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3379.Description = "Creates a new C# script file.";
				__0x3379.RibbonText = ("C#", "Script");
				
				__0x3379.ImageSmall = Properties.Resources.NewCSharp_16;
				__0x3379.ImageBig = Properties.Resources.NewCSharp_32;
				EditorActions.Register( __0x3379 );
			}

			
			{
				var __0x3380 = new EditorAction_NewResource( typeof( Component_FlowGraph ) );
				__0x3380.Name = "Flow Graph";
				__0x3380.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3380.Description = "Creates a new flow graph file.";
				__0x3380.RibbonText = ("Flow", "Graph");
				EditorActions.Register( __0x3380 );
			}

			
			{
				var __0x3381 = new EditorAction();
				__0x3381.Name = "Comment Selection";
				__0x3381.Description = "Comments the selected text.";
				__0x3381.ImageSmall = Properties.Resources.Comment_16;
				__0x3381.ImageBig = Properties.Resources.Comment_32;
				__0x3381.ShortcutKeys = new Keys[] { Keys.Control | Keys.K };
				__0x3381.QatSupport = true;
				__0x3381.RibbonText = ("Comment", "");
				EditorActions.Register( __0x3381 );
			}

			
			{
				var __0x3382 = new EditorAction();
				__0x3382.Name = "Uncomment Selection";
				__0x3382.Description = "Uncomments the selected text.";
				__0x3382.ImageSmall = Properties.Resources.Uncomment_16;
				__0x3382.ImageBig = Properties.Resources.Uncomment_32;
				__0x3382.ShortcutKeys = new Keys[] { Keys.Control | Keys.U };
				__0x3382.QatSupport = true;
				__0x3382.RibbonText = ("Uncomment", "");
				EditorActions.Register( __0x3382 );
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3383 = new EditorAction();
				__0x3383.Name = "Format Document";
				__0x3383.Description = "Does auto formatting of selected text.";
				__0x3383.ImageSmall = Properties.Resources.FormatDocument_16;
				__0x3383.ImageBig = Properties.Resources.FormatDocument_32;
				__0x3383.ShortcutKeys = new Keys[] { Keys.Control | Keys.R };
				__0x3383.QatSupport = true;
				__0x3383.RibbonText = ("Format", "");
				EditorActions.Register( __0x3383 );
			}

			
			{
				var __0x3384 = new EditorAction();
				__0x3384.Name = "Go To Definition";
				
				
				
				__0x3384.ShortcutKeys = new Keys[] { Keys.Alt | Keys.Z, Keys.F12 };
				__0x3384.QatSupport = true;
				__0x3384.RibbonText = ("Definition", "");
				EditorActions.Register( __0x3384 );
			}

			
			{
				var __0x3385 = new EditorAction();
				__0x3385.Name = "Add Property Code";
				__0x3385.Description = "Adds property code for a component class.";
				__0x3385.ImageSmall = Properties.Resources.New_16;
				__0x3385.ImageBig = Properties.Resources.New_32;
				
				__0x3385.QatSupport = true;
				__0x3385.RibbonText = ("Add", "Property");
				EditorActions.Register( __0x3385 );
			}

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			

		}

		

		class __0x3669
		{
			public string name;
			public bool isState;
			public ICollection<string> fileNames;

			public __0x3669( string name, bool isState )
			{
				this.name = name;
				this.isState = isState;
			}
		}

		

		class __0x3670
		{
			public int size;
			public bool isDelete;
			public ICollection<string> fileNames;

			public __0x3670( int size, bool isDelete )
			{
				this.size = size;
				this.isDelete = isDelete;
			}
		}

		static void __0x3507()
		{
			
			{
				var __0x3386 = new EditorAction();
				__0x3386.Name = "Image Compression";
				__0x3386.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3386.ImageSmall = Properties.Resources.Compress_16;
				__0x3386.ImageBig = Properties.Resources.Compress_32;
				__0x3386.QatSupport = true;
				__0x3386.RibbonText = ("Image", "Compression");
				__0x3386.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3386.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;

				EventHandler __0x3387 = delegate ( object __0x3640, EventArgs __0x3641 )
				{
					var __0x3388 = (KryptonContextMenuItem)__0x3640;
					var __0x3389 = (__0x3669)__0x3388.Tag;

					if( __0x3389.isState )
					{
						var __0x3390 = __0x3389.name;
						if( __0x3390 == "Auto" )
							__0x3390 = "";

						foreach( var __0x3484 in __0x3389.fileNames )
						{
							
							if( !Component_Image_Settings.SetParameter( __0x3484, "Compression", __0x3390, out var error ) )
							{
								Log.Error( error );
								return;
							}

							
							if( !Component_Image.DeleteCompressedFile( __0x3484, out error ) )
							{
								Log.Error( error );
								return;
							}

							
							var __0x3391 = ResourceManager.GetByName( __0x3484 );
							var __0x3392 = __0x3391?.PrimaryInstance?.ResultComponent as Component_Image;
							if( __0x3392 != null )
								__0x3392.ShouldRecompile = true;
						}
					}
					else if( __0x3389.name == "Update" )
					{
						foreach( var __0x3485 in __0x3389.fileNames )
						{
							
							if( !Component_Image.DeleteCompressedFile( __0x3485, out var error ) )
							{
								Log.Error( error );
								return;
							}

							
							var __0x3393 = ResourceManager.GetByName( __0x3485 );
							var __0x3394 = __0x3393?.PrimaryInstance?.ResultComponent as Component_Image;
							if( __0x3394 != null )
								__0x3394.ShouldRecompile = true;
						}
					}

				};

				{
					var __0x3395 = new List<KryptonContextMenuItemBase>();

					
					var __0x3396 = new List<string>();
					__0x3396.Add( "Auto" );
					__0x3396.Add( "NoCompression" );
					__0x3396.Add( "DXT1" );
					__0x3396.Add( "DXT5" );
					__0x3396.Add( "NormalMap" );
					foreach( var __0x3486 in __0x3396 )
					{
						var __0x3397 = new KryptonContextMenuItem( EditorLocalization.Translate( "ImageCompression", TypeUtility.DisplayNameAddSpaces( __0x3486 ) ), null, __0x3387 );
						__0x3397.Tag = new __0x3669( __0x3486, true );
						__0x3395.Add( __0x3397 );
					}

					__0x3395.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x3398 = new KryptonContextMenuItem( EditorLocalization.Translate( "ImageCompression", "Update" ), null, __0x3387 );
						__0x3398.Tag = new __0x3669( "Update", false );
						__0x3395.Add( __0x3398 );
					}

					__0x3386.DropDownContextMenu = new KryptonContextMenu();
					__0x3386.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3395.ToArray() ) );
				}

				__0x3386.GetState += delegate ( EditorAction.GetStateContext __0x3642 )
				{
					if( __0x3642.ObjectsInFocus.DocumentWindow == null && __0x3642.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3399 = new List<string>();

						var __0x3400 = __0x3642.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3487 in __0x3400 )
						{
							if( !__0x3487.IsDirectory )
							{
								var __0x3401 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x3487.FullPath ) );
								if( __0x3401?.Name == "Image" )
								{
									var __0x3402 = VirtualPathUtility.GetVirtualPathByReal( __0x3487.FullPath );
									if( !string.IsNullOrEmpty( __0x3402 ) )
										__0x3399.Add( __0x3402 );
								}
							}
						}

						if( __0x3399.Count != 0 )
						{
							__0x3642.Enabled = true;

							string[] __0x3403 = new string[ __0x3399.Count ];
							for( int __0x3404 = 0; __0x3404 < __0x3403.Length; __0x3404++ )
							{
								var __0x3405 = Component_Image_Settings.GetParameter( __0x3399[ __0x3404 ], "Compression", out var error );
								if( string.IsNullOrEmpty( __0x3405 ) )
									__0x3405 = "Auto";
								__0x3403[ __0x3404 ] = __0x3405;
							}

							var __0x3406 = (KryptonContextMenuItems)__0x3386.DropDownContextMenu.Items[ 0 ];
							foreach( var __0x3488 in __0x3406.Items )
							{
								var __0x3407 = __0x3488 as KryptonContextMenuItem;
								if( __0x3407 != null )
								{
									var __0x3408 = (__0x3669)__0x3407.Tag;
									__0x3408.fileNames = __0x3399;

									__0x3407.Checked = __0x3403.Any( __0x3643 => __0x3643 == __0x3408.name );
								}
							}
						}
					}
				};

				EditorActions.Register( __0x3386 );
			}

			
			{
				var __0x3409 = new EditorAction();
				__0x3409.Name = "Process Environment Cubemap";
				__0x3409.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3409.ImageSmall = Properties.Resources.Default_16;
				__0x3409.ImageBig = Properties.Resources.Default_32;
				__0x3409.QatSupport = true;
				__0x3409.RibbonText = ("Process", "Env Cubemap");
				__0x3409.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x3409.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;

				EventHandler __0x3410 = delegate ( object __0x3644, EventArgs __0x3645 )
				{
					var __0x3411 = (KryptonContextMenuItem)__0x3644;
					var __0x3412 = (__0x3670)__0x3411.Tag;

					if( !__0x3412.isDelete )
					{
						foreach( var __0x3489 in __0x3412.fileNames )
						{
							if( !CubemapProcessing.GetOrGenerate( __0x3489, true, __0x3412.size, out _, out _, out var error ) )
							{
								Log.Error( error );
								break;
							}
						}
					}
					else
					{
						var __0x3413 = new List<string>();
						foreach( var __0x3490 in __0x3412.fileNames )
						{
							var __0x3414 = new string[] { "_Gen.info", "_GenEnv.dds", "_GenIrr.dds" };
							foreach( var __0x3491 in __0x3414 )
							{
								var __0x3415 = VirtualPathUtility.GetRealPathByVirtual( __0x3490 + __0x3491 );
								if( File.Exists( __0x3415 ) )
									__0x3413.Add( __0x3415 );
							}
						}

						var __0x3416 = EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Are you sure you want to delete these files?" );
						if( EditorMessageBox.ShowQuestion( __0x3416, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
						{
							try
							{
								foreach( var __0x3492 in __0x3413 )
									File.Delete( __0x3492 );
							}
							catch( Exception e )
							{
								Log.Error( e.Message );
							}
						}
					}
				};

				{
					var __0x3417 = new List<KryptonContextMenuItemBase>();

					var __0x3418 = new List<int>();
					__0x3418.Add( 0 );
					__0x3418.Add( 64 );
					__0x3418.Add( 128 );
					__0x3418.Add( 256 );
					__0x3418.Add( 512 );
					__0x3418.Add( 1024 );
					__0x3418.Add( 2048 );
					__0x3418.Add( 4096 );
					__0x3418.Add( 8192 );
					foreach( var __0x3493 in __0x3418 )
					{
						var __0x3419 = __0x3493.ToString();
						if( __0x3493 == 0 )
							__0x3419 = EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Auto Size" );

						var __0x3420 = new KryptonContextMenuItem( __0x3419, null, __0x3410 );
						__0x3420.Tag = new __0x3670( __0x3493, false );
						__0x3417.Add( __0x3420 );
					}

					__0x3417.Add( new KryptonContextMenuSeparator() );

					
					{
						var __0x3421 = new KryptonContextMenuItem( EditorLocalization.Translate( "ProcessEnvironmentCubemap", "Delete" ), null, __0x3410 );
						__0x3421.Tag = new __0x3670( 0, true );
						__0x3417.Add( __0x3421 );
					}

					__0x3409.DropDownContextMenu = new KryptonContextMenu();
					__0x3409.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x3417.ToArray() ) );
				}

				__0x3409.GetState += delegate ( EditorAction.GetStateContext __0x3646 )
				{
					if( __0x3646.ObjectsInFocus.DocumentWindow == null && __0x3646.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3422 = new List<string>();

						var __0x3423 = __0x3646.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x3494 in __0x3423 )
						{
							if( !__0x3494.IsDirectory )
							{
								var __0x3424 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x3494.FullPath ) );
								if( __0x3424?.Name == "Image" )
								{
									var __0x3425 = VirtualPathUtility.GetVirtualPathByReal( __0x3494.FullPath );
									if( !string.IsNullOrEmpty( __0x3425 ) )
										__0x3422.Add( __0x3425 );
								}
							}
						}

						if( __0x3422.Count != 0 )
						{
							__0x3646.Enabled = true;

							var __0x3426 = (KryptonContextMenuItems)__0x3409.DropDownContextMenu.Items[ 0 ];
							foreach( var __0x3495 in __0x3426.Items )
							{
								var __0x3427 = __0x3495 as KryptonContextMenuItem;
								if( __0x3427 != null )
								{
									var __0x3428 = (__0x3670)__0x3427.Tag;
									__0x3428.fileNames = __0x3422;

									if( __0x3428.isDelete )
									{
										bool __0x3429 = false;
										foreach( var __0x3496 in __0x3422 )
										{
											var __0x3430 = new string[] { "_Gen.info", "_GenEnv.dds", "_GenIrr.dds" };
											foreach( var __0x3497 in __0x3430 )
											{
												var __0x3431 = __0x3496 + __0x3497;
												if( VirtualFile.Exists( __0x3431 ) )
												{
													__0x3429 = true;
													break;
												}
											}
										}
										__0x3427.Enabled = __0x3429;
									}
								}
							}
						}
					}
				};

				EditorActions.Register( __0x3409 );
			}
		}

		

		static void __0x3508()
		{
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			

			
			
			
			
			

			
			
			

			
			
			
			

			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x3432 = new EditorAction();
				__0x3432.Name = "Create NeoAxis Baking File";
				__0x3432.CommonType = EditorAction.CommonTypeEnum.General;
				__0x3432.ImageSmall = Properties.Resources.Package_16;
				__0x3432.ImageBig = Properties.Resources.Package_32;
				__0x3432.QatSupport = true;
				
				__0x3432.RibbonText = ("NeoAxis", "Baking");
				__0x3432.Description = "Creates a NeoAxis Baking file from selected folders and files.";

				__0x3432.GetState += delegate ( EditorAction.GetStateContext __0x3647 )
				{
					if( __0x3647.ObjectsInFocus.DocumentWindow == null && __0x3647.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3433 = __0x3647.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().Select( __0x3648 => __0x3648.FullPath ).ToArray();
						if( __0x3433.Length != 0 )
						{
							
							try
							{
								string __0x3434 = "";

								bool __0x3435 = true;
								foreach( var __0x3498 in __0x3433 )
								{
									if( __0x3435 )
										__0x3434 = Path.GetDirectoryName( __0x3498 );
									else
									{
										var __0x3436 = Path.GetDirectoryName( __0x3498 );
										if( __0x3434 != __0x3436 )
											return;
									}

									__0x3435 = false;
								}
							}
							catch
							{
								return;
							}

							__0x3647.Enabled = true;
						}
					}
				};

				__0x3432.Click += delegate ( EditorAction.ClickContext __0x3649 )
				{
					if( __0x3649.ObjectsInFocus.DocumentWindow == null && __0x3649.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x3437 = __0x3649.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>().Select( __0x3650 => __0x3650.FullPath ).ToArray();
						if( __0x3437.Length != 0 )
						{
							string __0x3438;
							{
								if( __0x3437.Length > 1 )
								{
									string __0x3439 = "";
									foreach( var __0x3499 in __0x3437 )
									{
										__0x3439 = Path.GetDirectoryName( __0x3499 );
										break;
									}
									__0x3438 = Path.Combine( __0x3439, Path.GetFileName( __0x3439 ) + ".neoaxisbaking" );
								}
								else
								{
									var __0x3440 = __0x3437[ 0 ];
									var __0x3441 = Path.GetDirectoryName( __0x3440 );
									__0x3438 = Path.Combine( __0x3441, Path.GetFileName( __0x3440 ) + ".neoaxisbaking" );
								}
							}

							var __0x3442 = new OKCancelTextBoxForm( EditorLocalization.Translate( "Baking", "File name" ) + ":", __0x3438, EditorLocalization.Translate( "Baking", "NeoAxis Baking" ),
								delegate ( string __0x3651, ref string __0x3652 )
							{
								if( string.IsNullOrEmpty( __0x3651 ) )
								{
									__0x3652 = EditorLocalization.Translate( "Baking", "Please specify destination file name." );
									return false;
								}

								
								if( File.Exists( __0x3651 ) || Directory.Exists( __0x3651 ) )
								{
									__0x3652 = EditorLocalization.Translate( "Baking", "A file or folder with the same name already exists." );
									return false;
								}

								return true;
							}, delegate ( string __0x3653, ref string __0x3654 )
							{
								var __0x3443 = EditorMessageBox.ShowQuestion( EditorLocalization.Translate( "Baking", "Compress archive?" ), EMessageBoxButtons.YesNoCancel );
								if( __0x3443 == EDialogResult.Cancel )
									return false;

								bool __0x3444 = __0x3443 == EDialogResult.Yes;

								var __0x3445 = BakingFile.Create( __0x3437, __0x3444, __0x3653, out __0x3654 );
								if( __0x3445 )
									ScreenNotifications.Show( EditorLocalization.Translate( "Baking", "The file was built successfully." ) );
								return __0x3445;
							} );

							__0x3442.ShowDialog();
						}
					}
				};

				EditorActions.Register( __0x3432 );
			}

		}

		

		static void __0x3509()
		{
			
			{
				var __0x3446 = new EditorAction();
				__0x3446.Name = "Load Settings From Camera";
				
				
				__0x3446.Description = "Copy camera settings of the current viewport from selected camera.";
				
				
				__0x3446.QatSupport = true;
				__0x3446.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x3446.GetState += delegate ( EditorAction.GetStateContext __0x3655 )
				{
					if( __0x3655.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow != null )
					{
						if( __0x3655.ObjectsInFocus.Objects.Count( __0x3656 => __0x3656 is Component_Camera ) == 1 )
							__0x3655.Enabled = true;
					}
				};
				__0x3446.Click += delegate ( EditorAction.ClickContext __0x3657 )
				{
					var __0x3447 = ( __0x3657.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow ).Scene;
					var __0x3448 = (Component_Camera)__0x3657.ObjectsInFocus.Objects.First( __0x3658 => __0x3658 is Component_Camera );

					var __0x3449 = __0x3447.Mode.Value == Component_Scene.ModeEnum._3D ? __0x3447.CameraEditor.Value : __0x3447.CameraEditor2D.Value;
					if( __0x3449 != null )
					{
						__0x3449.Transform = __0x3448.Transform;
						__0x3449.Projection = __0x3448.Projection;
						__0x3449.FieldOfView = __0x3448.FieldOfView;
						__0x3449.Height = __0x3448.Height;
						__0x3449.AspectRatio = __0x3448.AspectRatio;
						__0x3449.FixedUp = __0x3448.FixedUp;
						__0x3449.NearClipPlane = __0x3448.NearClipPlane;
						__0x3449.FarClipPlane = __0x3448.FarClipPlane;
					}
				};
				EditorActions.Register( __0x3446 );
			}

			
			{
				var __0x3450 = new EditorAction();
				__0x3450.Name = "Save Settings To Camera";
				
				
				__0x3450.Description = "Copy camera settings of the current viewport to selected camera.";
				
				
				__0x3450.QatSupport = true;
				__0x3450.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x3450.GetState += delegate ( EditorAction.GetStateContext __0x3659 )
				{
					if( __0x3659.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow != null )
					{
						if( __0x3659.ObjectsInFocus.Objects.Count( __0x3660 => __0x3660 is Component_Camera ) == 1 )
							__0x3659.Enabled = true;
					}
				};
				__0x3450.Click += delegate ( EditorAction.ClickContext __0x3661 )
				{
					var __0x3451 = ( __0x3661.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow ).Scene;
					var __0x3452 = (Component_Camera)__0x3661.ObjectsInFocus.Objects.First( __0x3662 => __0x3662 is Component_Camera );

					var __0x3453 = __0x3451.Mode.Value == Component_Scene.ModeEnum._3D ? __0x3451.CameraEditor.Value : __0x3451.CameraEditor2D.Value;
					if( __0x3453 != null )
					{
						var __0x3454 = new List<UndoActionPropertiesChange.Item>();

						var __0x3455 = new Metadata.GetMembersContext( false );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:Transform", __0x3455 ), __0x3452.Transform ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:Projection", __0x3455 ), __0x3452.Projection ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:FieldOfView", __0x3455 ), __0x3452.FieldOfView ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:Height", __0x3455 ), __0x3452.Height ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:AspectRatio", __0x3455 ), __0x3452.AspectRatio ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:FixedUp", __0x3455 ), __0x3452.FixedUp ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:NearClipPlane", __0x3455 ), __0x3452.NearClipPlane ) );
						__0x3454.Add( new UndoActionPropertiesChange.Item( __0x3452, (Metadata.Property)__0x3452.MetadataGetMemberBySignature( "property:FarClipPlane", __0x3455 ), __0x3452.FarClipPlane ) );

						__0x3452.Transform = __0x3453.Transform;
						__0x3452.Projection = __0x3453.Projection;
						__0x3452.FieldOfView = __0x3453.FieldOfView;
						__0x3452.Height = __0x3453.Height;
						__0x3452.AspectRatio = __0x3453.AspectRatio;
						__0x3452.FixedUp = __0x3453.FixedUp;
						__0x3452.NearClipPlane = __0x3453.NearClipPlane;
						__0x3452.FarClipPlane = __0x3453.FarClipPlane;

						var __0x3456 = __0x3661.ObjectsInFocus.DocumentWindow.Document;
						__0x3456.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x3454 ) );
						__0x3456.Modified = true;
					}

				};
				EditorActions.Register( __0x3450 );
			}
		}

		internal static List<Metadata.TypeInfo> GetAllMeshModifiers()
		{
			var __0x3457 = new List<Metadata.TypeInfo>();

			foreach( var __0x3500 in MetadataManager.NetTypes )
			{
				if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshModifier ) ).IsAssignableFrom( __0x3500 ) && !__0x3500.Abstract )
					__0x3457.Add( __0x3500 );
			}

			CollectionUtility.InsertionSort( __0x3457, delegate ( Metadata.TypeInfo __0x3663, Metadata.TypeInfo __0x3664 )
			{
				if( __0x3663 == MetadataManager.GetTypeOfNetType( typeof( Component_MeshModifier ) ) )
					return -1;
				if( __0x3664 == MetadataManager.GetTypeOfNetType( typeof( Component_MeshModifier ) ) )
					return 1;

				var __0x3458 = __0x3663.GetUserFriendlyNameForInstance();
				var __0x3459 = __0x3664.GetUserFriendlyNameForInstance();
				return string.Compare( __0x3458, __0x3459 );
			} );

			return __0x3457;
		}

		static string __0x3510( Component __0x3665 )
		{
			var __0x3460 = __0x3665.BaseType.GetUserFriendlyNameForInstance();
			if( __0x3665.Parent.GetComponent( __0x3460 ) == null )
				return __0x3460;
			return __0x3665.Parent.Components.GetUniqueName( __0x3460, false, 2 );
		}

		static void __0x3511( Metadata.TypeInfo __0x3666 )
		{
			var __0x3461 = __0x3666.GetUserFriendlyNameForInstance();

			var __0x3462 = new EditorAction();
			__0x3462.Name = "Mesh Add Modifier " + __0x3461;
			__0x3462.Description = "Adds a new mesh modifier.";
			__0x3462.ImageSmall = Properties.Resources.Modify_16;
			__0x3462.ImageBig = Properties.Resources.Modify_32;
			__0x3462.QatSupport = true;
			__0x3462.RibbonText = (__0x3461, "");
			__0x3462.ContextMenuText = __0x3461;
			__0x3462.UserData = __0x3666;
			__0x3462.GetState += delegate ( EditorAction.GetStateContext __0x3667 )
			{
				var __0x3463 = __0x3667.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
				if( __0x3463 != null )
					__0x3667.Enabled = true;
			};
			__0x3462.Click += delegate ( EditorAction.ClickContext __0x3668 )
			{
				var __0x3464 = __0x3668.ObjectsInFocus.DocumentWindow?.ObjectOfWindow as Component_Mesh;
				if( __0x3464 != null )
				{
					var __0x3465 = __0x3668.ObjectsInFocus.DocumentWindow;
					var __0x3466 = (Metadata.TypeInfo)__0x3462.UserData;

					var __0x3467 = __0x3464.CreateComponent( __0x3466, enabled: false );
					__0x3467.Name = __0x3510( __0x3467 );
					__0x3467.Enabled = true;

					__0x3465.Focus();

					
					var __0x3468 = new Component[] { __0x3467 };
					var __0x3469 = __0x3668.ObjectsInFocus.DocumentWindow.Document;
					var __0x3470 = new UndoActionComponentCreateDelete( __0x3469, __0x3468, true );
					__0x3469.CommitUndoAction( __0x3470 );
					__0x3465.SelectObjects( __0x3468.ToArray() );
				}
			};
			EditorActions.Register( __0x3462 );
		}

#endif

	}
}





namespace NeoAxis.Editor
{
	public static class EditorThemeUtility
	{
		static __0x3701 __0x3671;

		

		class __0x3701 : ToolStripRenderer
		{
			protected override void OnRenderItemBackground( ToolStripItemRenderEventArgs e )
			{
				
				
				

				base.OnRenderItemBackground( e );
			}

			protected override void OnRenderButtonBackground( ToolStripItemRenderEventArgs e )
			{
				base.OnRenderButtonBackground( e );

				var __0x3672 = e.Item as ToolStripButton;

				bool __0x3673 = false;
				Color __0x3674 = Color.Black;

				if( __0x3672.Selected )
				{
					__0x3673 = true;
					__0x3674 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				if( __0x3672.Checked )
				{
					__0x3673 = true;
					__0x3674 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				if( __0x3672.Pressed )
				{
					__0x3673 = true;
					__0x3674 = EditorAPI.DarkTheme ? Color.FromArgb( 110, 110, 110 ) : Color.FromArgb( 174, 174, 174 );
				}

				if( __0x3673 )
				{
#if !DEPLOY
					using( var __0x3675 = new SolidBrush( __0x3674 ) )
					{
						var __0x3676 = new System.Drawing.Rectangle( Point.Empty, __0x3672.Size );
						e.Graphics.FillRectangle( __0x3675, __0x3676.X, __0x3676.Y, __0x3676.Width - 1, __0x3676.Height - 1 );
					}
#endif
				}
			}

			protected override void OnRenderDropDownButtonBackground( ToolStripItemRenderEventArgs e )
			{
				base.OnRenderDropDownButtonBackground( e );

				var __0x3677 = e.Item as ToolStripDropDownButton;

				bool __0x3678 = false;
				Color __0x3679 = Color.Black;

				if( __0x3677.Selected )
				{
					__0x3678 = true;
					__0x3679 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 197, 197, 197 );
				}

				
				
				
				
				

				if( __0x3677.Pressed )
				{
					__0x3678 = true;
					__0x3679 = EditorAPI.DarkTheme ? Color.FromArgb( 110, 110, 110 ) : Color.FromArgb( 174, 174, 174 );
				}

				if( __0x3678 )
				{
#if !DEPLOY
					using( var __0x3680 = new SolidBrush( __0x3679 ) )
					{
						var __0x3681 = new System.Drawing.Rectangle( Point.Empty, __0x3677.Size );
						e.Graphics.FillRectangle( __0x3680, __0x3681.X, __0x3681.Y, __0x3681.Width - 1, __0x3681.Height - 1 );
					}
#endif
				}
			}

			protected override void OnRenderArrow( ToolStripArrowRenderEventArgs e )
			{
				e.ArrowColor = EditorAPI.DarkTheme ? Color.FromArgb( 140, 140, 140 ) : Color.FromArgb( 59, 59, 59 );

				base.OnRenderArrow( e );
			}

			protected override void OnRenderItemImage( ToolStripItemImageRenderEventArgs e )
			{
				System.Drawing.Rectangle __0x3682 = e.ImageRectangle;
				Image __0x3683 = e.Image;

				if( __0x3682 != System.Drawing.Rectangle.Empty && __0x3683 != null )
				{
					bool __0x3684 = false;
					if( !e.Item.Enabled )
					{
						__0x3683 = CreateDisabledImage( __0x3683 );
						__0x3684 = true;
					}

#if !DEPLOY
					if( e.Item.ImageScaling == ToolStripItemImageScaling.None )
						e.Graphics.DrawImage( __0x3683, __0x3682, new System.Drawing.Rectangle( Point.Empty, __0x3682.Size ), GraphicsUnit.Pixel );
					else
						e.Graphics.DrawImage( __0x3683, __0x3682 );
#endif

					if( __0x3684 )
						__0x3683.Dispose();
				}
			}

			void __0x3693( Graphics __0x3695, ToolStripItem __0x3696, System.Drawing.Rectangle __0x3697, bool __0x3698 )
			{
#if !DEPLOY
				var __0x3685 = EditorAPI.DarkTheme ? Color.FromArgb( 30, 30, 30 ) : Color.FromArgb( 210, 210, 210 );

				using( Pen __0x3686 = new Pen( __0x3685 ) )
				{
					var __0x3687 = __0x3697;
					__0x3687.Y += 2;
					__0x3687.Height = Math.Max( 0, __0x3687.Height - 4 );

					int __0x3688 = __0x3687.Width / 2;
					__0x3695.DrawLine( __0x3686, __0x3688, __0x3687.Top, __0x3688, __0x3687.Bottom - 1 );
				}
#endif
			}

			protected override void OnRenderSeparator( ToolStripSeparatorRenderEventArgs e )
			{
				__0x3693( e.Graphics, e.Item, new System.Drawing.Rectangle( Point.Empty, e.Item.Size ), e.Vertical );
			}

			protected override void OnRenderItemText( ToolStripItemTextRenderEventArgs e )
			{
				
				

				base.OnRenderItemText( e );
			}
		}

		

		public static void ApplyDarkThemeToForm( Control control )
		{
			if( EditorAPI.DarkTheme )
			{
				control.BackColor = Color.FromArgb( 54, 54, 54 );

				foreach( var __0x3692 in control.Controls )
				{
					
					{
						var __0x3689 = __0x3692 as KryptonLabel;
						if( __0x3689 != null )
						{
							__0x3689.StateCommon.ShortText.Color1 = Color.FromArgb( 230, 230, 230 );
							__0x3689.StateDisabled.ShortText.Color1 = Color.FromArgb( 90, 90, 90 );
						}
					}

					
					{
						var __0x3690 = __0x3692 as Label;
						if( __0x3690 != null )
							__0x3690.ForeColor = Color.FromArgb( 230, 230, 230 );
					}

					
					{
						var __0x3691 = __0x3692 as EngineLabel;
						if( __0x3691 != null )
						{
							__0x3691.ForeColor = Color.FromArgb( 230, 230, 230 );
							__0x3691.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );
						}
					}

					
					
					
					
					
					



				}
			}
		}

		
		
		
		
		

		static void __0x3694( object __0x3699, DrawToolTipEventArgs __0x3700 )
		{
			__0x3700.DrawBackground();
			__0x3700.DrawBorder();
			__0x3700.DrawText( TextFormatFlags.HidePrefix | TextFormatFlags.Left | TextFormatFlags.VerticalCenter );
		}

		public static void ApplyDarkThemeToToolTip( ToolTip control )
		{
			if( EditorAPI.DarkTheme && !control.OwnerDraw )
			{
				control.OwnerDraw = true;
				control.BackColor = Color.FromArgb( 10, 10, 10 );
				
				
				control.ForeColor = Color.FromArgb( 230, 230, 230 );
				control.Draw += __0x3694;
			}
		}

		public static ToolStripRenderer GetToolbarToolStripRenderer()
		{
			if( __0x3671 == null )
				__0x3671 = new __0x3701();
			return __0x3671;
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorUtility
	{
		public static bool AllowConfigureComponentTypeSettings = true;
		public static bool AllowSeparateSettings = true;

		

		internal static Metadata.GetMembersContext getMemberContextNoFilter = new Metadata.GetMembersContext( false );

		public static Component CloneComponent( Component source )
		{
			var __0x3702 = source.Clone();

			__0x3702.Name = source.Parent.Components.GetUniqueName( source.Name, true, 2 );

			int __0x3703 = source.Parent.Components.IndexOf( source );
			if( __0x3703 != -1 )
				__0x3703++;
			source.Parent.AddComponent( __0x3702, __0x3703 );

			return __0x3702;
		}

		
		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		



		
		
		
		

		

		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		

		
		

		
		

		
		
		

		
		
		
		
		

		public static void SetPropertyReference( DocumentInstance document, object[] objects, Metadata.Property property, object[] indexers, string[] referenceValues )
		{
			var __0x3704 = property.Type.GetNetType();
			var __0x3705 = ReferenceUtility.GetUnderlyingType( __0x3704 );

			var __0x3706 = new List<UndoActionPropertiesChange.Item>();

			

			for( int __0x3707 = 0; __0x3707 < objects.Length; __0x3707++ )
			{
				var __0x3708 = objects[ __0x3707 ];

				var __0x3709 = ReferenceUtility.MakeReference( __0x3705, null, referenceValues[ __0x3707 ] );
				var __0x3710 = (IReference)property.GetValue( __0x3708, indexers );

				
				
				

				if( !__0x3709.Equals( __0x3710 ) )
				{
					property.SetValue( __0x3708, __0x3709, indexers );
					__0x3706.Add( new UndoActionPropertiesChange.Item( __0x3708, property, __0x3710, indexers ) );
				}
			}

			
			if( __0x3706.Count != 0 )
			{
				var __0x3711 = new UndoActionPropertiesChange( __0x3706.ToArray() );
				document.UndoSystem.CommitAction( __0x3711 );
				document.Modified = true;
			}
		}

		
		
		
		

		

		

		

		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		internal static void RegisterEditorExtensions( Assembly assembly )
		{
			Type[] __0x3712 = null;
			try
			{
				__0x3712 = assembly.GetTypes();
			}
			catch
			{
				return;
			}

			foreach( var __0x3754 in __0x3712 )
			{
				if( typeof( EditorExtensions ).IsAssignableFrom( __0x3754 ) && !__0x3754.IsAbstract )
				{
					var __0x3713 = __0x3754.GetConstructor( new Type[ 0 ] );
					var __0x3714 = (EditorExtensions)__0x3713.Invoke( new object[ 0 ] );
					__0x3714.Register();
				}
			}
		}

		
		public static DocumentInstance GetDocumentByComponent( Component component )
		{
			var __0x3715 = component.ParentRoot;
			foreach( var __0x3755 in EditorForm.Instance.Documents )
			{
				if( __0x3755.ResultComponent == __0x3715 )
					return __0x3755;
			}
			return null;
		}

		public static void ShowRenameComponentDialog( Component component )
		{
#if !DEPLOY
			var __0x3716 = GetDocumentByComponent( component );

			var __0x3717 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), component.Name, EditorLocalization.Translate( "General", "Rename" ),
				delegate ( string __0x3765, ref string __0x3766 )
				{
					if( !ComponentUtility.IsValidComponentName( __0x3765, out string error2 ) )
					{
						__0x3766 = error2;
						return false;
					}
					return true;
				},
				delegate ( string __0x3767, ref string __0x3768 )
				{
					if( __0x3767 != component.Name )
					{
						var __0x3718 = component.Name;

						
						component.Name = __0x3767;

						
						var __0x3719 = new List<UndoActionPropertiesChange.Item>();
						var __0x3720 = (Metadata.Property)MetadataManager.GetTypeOfNetType(
							typeof( Component ) ).MetadataGetMemberBySignature( "property:Name" );
						__0x3719.Add( new UndoActionPropertiesChange.Item( component, __0x3720, __0x3718, new object[ 0 ] ) );

						var __0x3721 = new UndoActionPropertiesChange( __0x3719.ToArray() );
						__0x3716.UndoSystem.CommitAction( __0x3721 );
						__0x3716.Modified = true;
					}
					return true;
				}
			);

			__0x3717.ShowDialog();
#endif
		}

		static bool __0x3763( Metadata.TypeInfo __0x3769, out double __0x3770 )
		{
			var __0x3722 = __0x3769.GetCustomAttributes( typeof( Component_RenderingEffect.DefaultOrderOfEffectAttribute ), true );
			if( __0x3722.Length != 0 )
			{
				__0x3770 = ( (Component_RenderingEffect.DefaultOrderOfEffectAttribute)__0x3722[ 0 ] ).Value;
				return true;
			}
			__0x3770 = -1;
			return false;
		}

		
		
		public static int GetNewObjectInsertIndex( Component parent, Metadata.TypeInfo objectType )
		{
			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_RenderingEffect ) ).IsAssignableFrom( objectType ) )
			{
				if( __0x3763( objectType, out var value ) )
				{
					int __0x3723 = 0;
					foreach( var __0x3756 in parent.Components )
					{
						if( MetadataManager.GetTypeOfNetType( typeof( Component_RenderingEffect ) ).IsAssignableFrom( __0x3756.BaseType ) )
						{
							if( __0x3763( __0x3756.BaseType, out var childValue ) )
							{
								if( value < childValue )
									return __0x3723;
							}
						}
						__0x3723++;
					}
				}
			}

			return -1;
		}

		public delegate void IsMemberVisibleOverrideDelegate( object __0x3771, Metadata.Member __0x3772, ref bool __0x3773 );
		public static event IsMemberVisibleOverrideDelegate IsMemberVisibleOverride;

		public static bool IsMemberVisible( object obj, Metadata.Member member )
		{
			bool __0x3724 = true;

			if( member is Metadata.Property property )
				__0x3724 = property.Browsable && !property.HasIndexers && !property.Static ;
			else if( member is Metadata.Event evnt )
				__0x3724 = !evnt.Static;
			else
				Log.Fatal( "internal error." );

			IsMemberVisibleOverride?.Invoke( obj, member, ref __0x3724 );

			return __0x3724;
		}

		public static Type GetTypeByName( string typeName )
		{
			var __0x3725 = typeName;
			
			{
				var __0x3726 = __0x3725.IndexOf( "," );
				if( __0x3726 != -1 )
					__0x3725 = __0x3725.Substring( 0, __0x3726 );
			}

			
			var __0x3727 = EditorAssemblyInterface.Instance.GetTypeByName( __0x3725 );
			if( __0x3727 != null )
				return __0x3727;

			
			var __0x3728 = MetadataManager.GetType( __0x3725 );
			if( __0x3728 != null )
				return __0x3728.GetNetType();

			
			var __0x3729 = Assembly.GetExecutingAssembly().GetType( __0x3725 );
			if( __0x3729 != null )
				return __0x3729;

			return null;
		}

		public static void ShowScreenNotificationObjectsCloned( int amount )
		{
			string __0x3730;
			if( amount == 1 )
				__0x3730 = "The object was duplicated.";
			else
				__0x3730 = "Objects were duplicated.";
			__0x3730 = EditorLocalization.Translate( "General", __0x3730 );

			ScreenNotifications.Show( __0x3730 );
		}

		public static string GetUniqueFriendlyName( Component component, string namePrefix = "" )
		{
			string __0x3731;
			if( !string.IsNullOrEmpty( namePrefix ) )
				__0x3731 = namePrefix;
			else
				__0x3731 = component.BaseType.GetUserFriendlyNameForInstance();

			if( component.Parent.GetComponent( __0x3731 ) == null )
				return __0x3731;
			return component.Parent.Components.GetUniqueName( __0x3731, false, 2 );
		}

		

		public delegate void ComponentDisplayInEditorFilterDelegate( Component __0x3774, ref bool __0x3775 );
		public static event ComponentDisplayInEditorFilterDelegate ComponentDisplayInEditorFilter;

		public static bool PerformComponentDisplayInEditorFilter( Component obj )
		{
			var __0x3732 = true;
			ComponentDisplayInEditorFilter?.Invoke( obj, ref __0x3732 );
			return __0x3732;
		}

		

		public delegate void RibbonTabVisibleFilterDelegate( EditorRibbonDefaultConfiguration.Tab __0x3776, ref bool __0x3777 );
		public static event RibbonTabVisibleFilterDelegate RibbonTabVisibleFilter;

		public static bool PerformRibbonTabVisibleFilter( EditorRibbonDefaultConfiguration.Tab tab )
		{
			var __0x3733 = true;
			RibbonTabVisibleFilter?.Invoke( tab, ref __0x3733 );
			return __0x3733;
		}

		

		public delegate void EditorActionVisibleFilterDelegate( EditorAction __0x3778, ref bool __0x3779 );
		public static event EditorActionVisibleFilterDelegate EditorActionVisibleFilter;

		public static bool PerformEditorActionVisibleFilter( EditorAction action )
		{
			var __0x3734 = true;
			EditorActionVisibleFilter?.Invoke( action, ref __0x3734 );
			return __0x3734;
		}

		

		public delegate void ResourcesWindowItemVisibleFilterDelegate( ResourcesWindowItems.Item __0x3780, ref bool __0x3781 );
		public static event ResourcesWindowItemVisibleFilterDelegate ResourcesWindowItemVisibleFilter;

		public static bool PerformResourcesWindowItemVisibleFilter( ResourcesWindowItems.Item item )
		{
			var __0x3735 = true;
			ResourcesWindowItemVisibleFilter?.Invoke( item, ref __0x3735 );
			return __0x3735;
		}

		

		static string __0x3764( string __0x3782 )
		{
			char[] __0x3736 = Path.GetInvalidFileNameChars();
			string __0x3737 = __0x3782.Trim();
			StringBuilder __0x3738 = new StringBuilder();
			foreach( char __0x3757 in __0x3737 )
			{
				char __0x3739 = __0x3757;
				if( Array.IndexOf<char>( __0x3736, __0x3739 ) != -1 )
					__0x3739 = '_';
				__0x3738.Append( __0x3739 );
			}
			return __0x3738.ToString();
		}

		public static bool ShowOpenFileDialog( bool isFolderPicker, string initialDirectory, IEnumerable<(string rawDisplayName, string extensionList)> filters, out string[] fileNames )
		{
#if !DEPLOY
			var __0x3740 = new Microsoft.WindowsAPICodePack.Dialogs.CommonOpenFileDialog();
			__0x3740.IsFolderPicker = isFolderPicker;
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3740.InitialDirectory = initialDirectory;
			__0x3740.Multiselect = true;
			if( filters != null )
			{
				foreach( var __0x3758 in filters )
					__0x3740.Filters.Add( new Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilter( __0x3758.rawDisplayName, __0x3758.extensionList ) );
			}

			if( __0x3740.ShowDialog() == Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogResult.Ok && __0x3740.FileNames.ToArray().Length != 0 )
			{
				fileNames = __0x3740.FileNames.ToArray();
				return true;
			}
			else
			{
				fileNames = null;
				return false;
			}
#else
			fileNames = null;
			return false;
#endif
		}

		public static bool ShowOpenFileDialog( bool isFolderPicker, string initialDirectory, IEnumerable<(string rawDisplayName, string extensionList)> filters, out string fileName )
		{
#if !DEPLOY
			var __0x3741 = new Microsoft.WindowsAPICodePack.Dialogs.CommonOpenFileDialog();
			__0x3741.IsFolderPicker = isFolderPicker;
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3741.InitialDirectory = initialDirectory;
			__0x3741.Multiselect = false;
			if( filters != null )
			{
				foreach( var __0x3759 in filters )
					__0x3741.Filters.Add( new Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogFilter( __0x3759.rawDisplayName, __0x3759.extensionList ) );
			}

			if( __0x3741.ShowDialog() == Microsoft.WindowsAPICodePack.Dialogs.CommonFileDialogResult.Ok )
			{
				fileName = __0x3741.FileName;
				return true;
			}
			else
			{
				fileName = null;
				return false;
			}
#else
			fileName = "";
			return false;
#endif
		}

		public static bool ShowSaveFileDialog( string initialDirectory, string initialFileName, string filter, out string resultFileName )
		{
#if !DEPLOY
			var __0x3742 = new System.Windows.Forms.SaveFileDialog();
			if( !string.IsNullOrEmpty( initialDirectory ) )
				__0x3742.InitialDirectory = initialDirectory;
			if( !string.IsNullOrEmpty( initialFileName ) )
				__0x3742.FileName = initialFileName;
			if( !string.IsNullOrEmpty( filter ) )
				__0x3742.Filter = filter;
			__0x3742.RestoreDirectory = true;

			if( __0x3742.ShowDialog() == DialogResult.OK )
			{
				resultFileName = __0x3742.FileName;
				return true;
			}
			else
			{
				resultFileName = "";
				return false;
			}
#else
			resultFileName = "";
			return false;
#endif
		}

		public static void ExportComponentToFile( Component component )
		{
#if !DEPLOY
			var __0x3743 = "";
			{
				var __0x3744 = ComponentUtility.GetOwnedFileNameOfComponent( component );
				if( !string.IsNullOrEmpty( __0x3744 ) )
					__0x3743 = Path.GetDirectoryName( VirtualPathUtility.GetRealPathByVirtual( __0x3744 ) );
			}

			var __0x3745 = component.Name;
			if( string.IsNullOrEmpty( __0x3745 ) )
				__0x3745 = "Component";

			var __0x3746 = "component";
			{
				var __0x3747 = component.GetType().GetCustomAttributes<ResourceFileExtensionAttribute>().ToArray();
				if( __0x3747.Length != 0 )
					__0x3746 = __0x3747[ 0 ].Extension;
			}

			var __0x3748 = __0x3764( __0x3745 + "." + __0x3746 );
			if( !ShowSaveFileDialog( __0x3743, __0x3748, "All files (*.*)|*.*", out var saveAsFileName ) )
				return;

			if( !ComponentUtility.SaveComponentToFile( component, saveAsFileName, null, out var error ) )
				EditorMessageBox.ShowWarning( error );
#endif
		}

		public static void PurgeCachedImages()
		{
			try
			{
				var __0x3749 = new List<string>();
				{
					var __0x3750 = Path.Combine( VirtualFileSystem.Directories.Project, "Caches\\Files" );
					if( Directory.Exists( __0x3750 ) )
					{
						
						foreach( var __0x3760 in Directory.GetFiles( __0x3750, "*.dds", SearchOption.AllDirectories ) )
						{
							var __0x3751 = __0x3760.Substring( __0x3750.Length + 1 );
							__0x3751 = __0x3751.Substring( 0, __0x3751.Length - 4 );

							if( !VirtualFile.Exists( __0x3751 ) )
								__0x3749.Add( __0x3760 );
						}

						
						foreach( var __0x3761 in Directory.GetFiles( __0x3750, "*.preview.png", SearchOption.AllDirectories ) )
						{
							var __0x3752 = __0x3761.Substring( __0x3750.Length + 1 );
							__0x3752 = __0x3752.Substring( 0, __0x3752.Length - 12 );

							if( !VirtualFile.Exists( __0x3752 ) )
								__0x3749.Add( __0x3761 );
						}
					}
				}

				foreach( var __0x3762 in __0x3749 )
				{
					File.Delete( __0x3762 );

					var __0x3753 = __0x3762 + ".info";
					if( File.Exists( __0x3753 ) )
						File.Delete( __0x3753 );
				}
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Base class for forms in the editor.
	/// </summary>
	public partial class EngineForm : KryptonForm, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		public EngineForm()
		{
			__0x3785();
		}

		
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x3783 = base.CreateParams;
				__0x3783.ExStyle |= 0x02000000;
				return __0x3783;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class EngineForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x3784 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x3784 != null ) )
			{
				__0x3784.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x3785()
		{
			this.__0x3784 = new System.ComponentModel.Container();
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Text = "EngineForm";
		}

		#endregion
	}
}



namespace NeoAxis.Editor
{
	/// <summary>
	/// Advanced Label with text selection and context menu copy abilities.
	/// </summary>
	[ToolboxItem( true )]
	
	[DefaultProperty( "Text" )]
	[DefaultBindingProperty( "Text" )]
	[Description( "EngineLabel" )]
	
	[ComVisible( true )]
	public class EngineLabel : KryptonTextBox
	{
		PaletteContentInheritRedirect __0x3786;
		LabelStyle __0x3787;

		

		public EngineLabel()
		{
			__0x3787 = LabelStyle.NormalControl;
			__0x3786 = new PaletteContentInheritRedirect( Redirector, PaletteContentStyle.LabelNormalControl );

			ReadOnly = true;
			TabStop = false;
			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				StateCommon.Back.Color1 = GetResolvedPalette().GetBackColor1( PaletteBackStyle.PanelClient, PaletteState.Normal );
				StateCommon.Border.Draw = InheritBool.False;
			}
		}

		[Category( "Visuals" )]
		[Description( "Label style." )]
		public LabelStyle LabelStyle
		{
			get { return __0x3787; }
			set
			{
				if( __0x3787 != value )
				{
					__0x3787 = value;
					SetLabelStyle( __0x3787 );
					PerformNeedPaint( true );
				}
			}
		}

		[Browsable( true )]
		[EditorBrowsable( EditorBrowsableState.Always )]
		public override bool AutoSize
		{
			get { return base.AutoSize; }
			set { base.AutoSize = value; }
		}

		[Category( "Behavior" )]
		[Description( "Controls whether the text in the edit control can be changed or not." )]
		[RefreshProperties( RefreshProperties.Repaint )]
		[DefaultValue( true )]
		public new bool ReadOnly
		{
			get { return base.ReadOnly; }
			set { base.ReadOnly = value; }
		}

		[DefaultValue( false )]
		public new bool TabStop
		{
			get { return base.TabStop; }
			set { base.TabStop = value; }
		}

		protected virtual void SetLabelStyle( LabelStyle style )
		{
			if( !IsDisposed && !Disposing )
			{
				
				__0x3786.Style = CommonHelper.ContentStyleFromLabelStyle( style );
				StateCommon.Content.Font = __0x3786.GetContentShortTextFont( PaletteState.Normal );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class EngineListView : EUserControl
	{
		List<Item> __0x3788 = new List<Item>();
		
		bool __0x3789;
		bool __0x3790;

		List<Item> __0x3791 = new List<Item>();
		ESet<Item> __0x3792 = new ESet<Item>();

		ModeClass __0x3793;

		int __0x3794;

		EngineScrollBar __0x3795;
		EngineScrollBar __0x3796;

		

		

		System.Drawing.Rectangle? __0x3797;

		bool __0x3798;
		bool __0x3799;
		Point __0x3800;
		Item[] __0x3801;

		

		public delegate void SelectedItemsChangedDelegate( EngineListView __0x3896 );
		public event SelectedItemsChangedDelegate SelectedItemsChanged;

		public delegate void BeforeStartDragDelegate( EngineListView __0x3897, Item[] __0x3898, ref bool __0x3899 );
		public event BeforeStartDragDelegate BeforeStartDrag;

		public delegate void ItemCheckedChangedDelegate( EngineListView __0x3900, Item __0x3901 );
		public event ItemCheckedChangedDelegate ItemCheckedChanged;

		

		public class Item
		{
			EngineListView __0x3802;

			public Item( EngineListView owner )
			{
				this.__0x3802 = owner;
			}

			public EngineListView Owner
			{
				get { return __0x3802; }
			}

			public string Text
			{
				get { return __0x3803; }
				set
				{
					if( __0x3803 == value )
						return;
					__0x3803 = value;
					__0x3802?.Invalidate();
				}
			}
			string __0x3803 = "";

			public object Tag;

			public Image Image
			{
				get { return __0x3804; }
				set
				{
					if( __0x3804 == value )
						return;
					__0x3804 = value;
					__0x3802?.Invalidate();
				}
			}
			Image __0x3804;

			public string Description { get; set; } = "";

			public bool ShowTooltip { get; set; }

			public bool ShowDisabled
			{
				get { return __0x3805; }
				set
				{
					if( __0x3805 == value )
						return;
					__0x3805 = value;
					__0x3802?.Invalidate();
				}
			}
			bool __0x3805;

			public bool Checked
			{
				get { return __0x3806; }
				set
				{
					if( __0x3806 == value )
						return;
					__0x3806 = value;
					__0x3802?.ItemCheckedChanged?.Invoke( Owner, this );
					__0x3802?.Invalidate();
				}
			}
			bool __0x3806;

			public override string ToString()
			{
				return Text;
			}
		}

		

		public abstract class ModeClass
		{
			EngineListView __0x3807;

			public ModeClass( EngineListView owner )
			{
				this.__0x3807 = owner;
			}

			public EngineListView Owner
			{
				get { return __0x3807; }
			}

			public Vector2I ItemSize;
			public bool ClampItemWidthByListViewWidth;

			public abstract void Init();

			public abstract void PaintItem( PaintEventArgs e, int itemIndex );

			public bool GetItemRectangle( int itemIndex, out System.Drawing.Rectangle rect )
			{
				rect = Owner.GetItemRectangle_NoScrolling( itemIndex );
				if( Owner.ScrollBarHorizontal.Visible )
					rect.X -= Owner.ScrollBarHorizontal.Value;
				if( Owner.ScrollBarVertical.Visible )
					rect.Y -= Owner.ScrollBarVertical.Value;

				
				if( rect.Right < 0 || rect.Bottom < 0 )
					return false;
				var __0x3808 = Owner.GetClientRectangle();
				if( rect.Top > __0x3808.Bottom || rect.Left > __0x3808.Right )
					return false;

				return true;
			}

			public void GetItemColors( int itemIndex, out Color backColor, out Color textColor )
			{
				var __0x3809 = Owner.Items[ itemIndex ];

				if( Owner.IsItemSelected( __0x3809 ) )
				{
					if( Owner.Focused && Owner.CurrentItemIndex == itemIndex && Owner.Enabled )
					{
						backColor = EditorAPI.DarkTheme ? Color.FromArgb( 70, 70, 70 ) : Color.FromArgb( 0, 120, 215 );
						textColor = EditorAPI.DarkTheme ? Color.FromArgb( 255, 255, 255 ) : Color.FromArgb( 255, 255, 255 );
					}
					else
					{
						backColor = EditorAPI.DarkTheme ? Color.FromArgb( 60, 60, 60 ) : Color.FromArgb( 240, 240, 240 );
						textColor = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 0, 0, 0 );
					}
				}
				else
				{
					backColor = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 255, 255, 255 );
					textColor = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 0, 0, 0 );
				}

				if( __0x3809.ShowDisabled || !Owner.Enabled )
					textColor = Color.Gray;
			}

			public virtual bool IsOverImage( Point position ) { return false; }
		}

		

		public class DefaultListMode : ModeClass
		{
			public bool DisplayImages;
			public Vector2I ImageSize;
			public int MarginLeft;
			public int MarginImageText;
			public int MarginRight;

			

			public DefaultListMode( EngineListView owner, int imageSize )
				: base( owner )
			{
				ItemSize = new Vector2I( 10000, (int)( 17.0f * EditorAPI.DPIScale ) );
				ClampItemWidthByListViewWidth = true;

				DisplayImages = true;

				var __0x3810 = (int)( (float)imageSize * EditorAPI.DPIScale );
				

				
				ImageSize = new Vector2I( __0x3810, __0x3810 );

				MarginLeft = (int)( EditorAPI.DPIScale * 4.0f );
				MarginImageText = (int)( EditorAPI.DPIScale * 2.0f );
				MarginRight = (int)( EditorAPI.DPIScale * 2.0f );
			}

			public override void Init()
			{
			}

			public override void PaintItem( PaintEventArgs e, int itemIndex )
			{
				var __0x3811 = Owner.Items[ itemIndex ];
				if( !GetItemRectangle( itemIndex, out var rect ) )
					return;
				GetItemColors( itemIndex, out var backColor, out var textColor );

				
				using( Brush __0x3812 = new SolidBrush( backColor ) )
					e.Graphics.FillRectangle( __0x3812, rect );


				int __0x3813 = MarginLeft;

				
				if( DisplayImages || Owner.CheckBoxes )
				{
					var __0x3814 = __0x3811.Image;

					if( Owner.CheckBoxes && __0x3814 == null )
					{
						if( __0x3811.Checked )
						{
							var __0x3815 = EditorAPI.DarkTheme ? Color.FromArgb( 230, 230, 230 ) : Color.FromArgb( 50, 50, 50 );
							using( var __0x3816 = new SolidBrush( __0x3815 ) )
							{
								var __0x3817 = new Vector2[]
								{
									new Vector2( 290.04, 33.286 ),
									new Vector2( 118.861, 204.427 ),
									new Vector2( 52.32, 137.907 ),
									new Vector2( 0, 190.226 ),
									new Vector2( 118.861, 309.071 ),
									new Vector2( 342.357, 85.606 ),
								};
								var __0x3818 = new Vector2[ __0x3817.Length ];
								for( int __0x3819 = 0; __0x3819 < __0x3818.Length; __0x3819++ )
									__0x3818[ __0x3819 ] = __0x3817[ __0x3819 ] / new Vector2( 342.357, 342.357 );


								float __0x3820 = rect.Left + __0x3813;
								float __0x3821 = rect.Top + ( ItemSize.Y - ImageSize.Y ) / 2;

								__0x3820 += (float)ImageSize.X * 0.1f;
								__0x3821 += (float)ImageSize.X * 0.1f;

								var __0x3822 = new PointF[ __0x3817.Length ];
								for( int __0x3823 = 0; __0x3823 < __0x3822.Length; __0x3823++ )
								{
									var __0x3824 = __0x3818[ __0x3823 ];
									__0x3822[ __0x3823 ] = new PointF( __0x3820 + (float)__0x3824.X * ImageSize.X * 0.8f, __0x3821 + (float)__0x3824.Y * ImageSize.Y * 0.8f );
								}

								e.Graphics.FillPolygon( __0x3816, __0x3822 );
							}
						}
					}
					else
					{
						if( __0x3814 == null || __0x3814.PixelFormat == System.Drawing.Imaging.PixelFormat.DontCare )
						{
							if( ImageSize.Y >= 32 )
								__0x3814 = Properties.Resources.Default_32;
							else
								__0x3814 = Properties.Resources.Default_16;
						}

						e.Graphics.DrawImage( __0x3814, rect.Left + __0x3813, rect.Top + ( ItemSize.Y - ImageSize.Y ) / 2, ImageSize.X, ImageSize.Y );
					}

					__0x3813 += ImageSize.X + MarginImageText;
				}

				
				if( !string.IsNullOrEmpty( __0x3811.Text ) )
				{
					var __0x3825 = TextFormatFlags.NoPrefix | TextFormatFlags.EndEllipsis | TextFormatFlags.PreserveGraphicsTranslateTransform;

					var __0x3826 = __0x3825 | TextFormatFlags.VerticalCenter | TextFormatFlags.Left;
					
					

					var __0x3827 = new System.Drawing.Rectangle( rect.Left + __0x3813, rect.Top, rect.Width - __0x3813 - MarginRight, rect.Height );

					TextRenderer.DrawText( e.Graphics, __0x3811.Text, Owner.Font, __0x3827, textColor, backColor, __0x3826 );
				}
			}

			public override bool IsOverImage( Point position )
			{
				if( DisplayImages || Owner.CheckBoxes )
				{
					if( position.X >= MarginLeft && position.X <= MarginLeft + ImageSize.X )
						return true;
				}
				return false;
			}
		}

		

		public class DragData : DataObject
		{
			public EngineListView ListView;
			public Item[] Items;
		}

		

		public EngineListView()
		{
			
			SetStyle( ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint, true );

			
			SetStyle( ControlStyles.ResizeRedraw, true );

			
			DoubleBuffered = true;

			SetStyle( ControlStyles.Selectable, true );
			TabStop = true;

			__0x3793 = new DefaultListMode( this, 16 );

			__0x3795 = new EngineScrollBar();
			__0x3795.TabIndex = 1;
			__0x3795.Scroll += __0x3894;
			__0x3795.TabStop = false;
			Controls.Add( __0x3795 );

			__0x3796 = new EngineScrollBar();
			__0x3796.TabIndex = 2;
			__0x3796.Orientation = Orientation.Horizontal;
			__0x3796.Scroll += __0x3895;
			__0x3796.TabStop = false;
			Controls.Add( __0x3796 );

			
			
			
			
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			UpdateScrollBars();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();

			
			
		}

		public System.Drawing.Rectangle GetClientRectangle()
		{
			if( __0x3797.HasValue )
				return __0x3797.Value;

			var __0x3828 = new System.Drawing.Rectangle( 0, 0, Width, Height );

			if( __0x3795 != null && __0x3795.Visible )
				__0x3828.Width -= __0x3795.Width + 2;
			if( __0x3796 != null && __0x3796.Visible )
				__0x3828.Height -= __0x3796.Height + 2;

			return __0x3828;
		}

		protected override void OnPaint( PaintEventArgs e )
		{
#if !DEPLOY

			__0x3797 = null;
			__0x3797 = GetClientRectangle();

			e.Graphics.InterpolationMode = InterpolationMode.High;

			
			{
				var __0x3829 = GetClientRectangle();

				var __0x3830 = EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 255, 255, 255 );
				using( var __0x3831 = new SolidBrush( __0x3830 ) )
					e.Graphics.FillRectangle( __0x3831, __0x3829 );
			}

			
			for( int __0x3832 = 0; __0x3832 < __0x3788.Count; __0x3832++ )
			{
				var __0x3833 = __0x3788[ __0x3832 ];
				__0x3793.PaintItem( e, __0x3832 );
			}


			

			if( __0x3795 != null && __0x3795.Visible )
			{
				var __0x3834 = new System.Drawing.Rectangle( __0x3795.Location.X - 1, 0, Width - ( __0x3795.Location.X - 1 ), Height );

				var __0x3835 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				using( var __0x3836 = new SolidBrush( __0x3835 ) )
					e.Graphics.FillRectangle( __0x3836, __0x3834 );
			}

			if( __0x3796 != null && __0x3796.Visible )
			{
				var __0x3837 = new System.Drawing.Rectangle( 0, __0x3796.Location.Y - 1, Width, Height - ( __0x3796.Location.Y - 1 ) );

				var __0x3838 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				using( var __0x3839 = new SolidBrush( __0x3838 ) )
					e.Graphics.FillRectangle( __0x3839, __0x3837 );
			}

			__0x3797 = null;

#endif
		}

		[Browsable( false )]
		public IReadOnlyList<Item> Items
		{
			get { return __0x3788; }
		}

		[Browsable( false )]
		public bool SetItemsScrollBarPositionReset = true;

		public void SetItems( ICollection<Item> items )
		{
			this.__0x3788 = new List<Item>( items );

			
			

			if( __0x3795 != null )
			{
				if( SetItemsScrollBarPositionReset )
				{
					__0x3795.Value = 0;
					__0x3796.Value = 0;
				}

				UpdateScrollBars();
			}

			Invalidate();
		}

		public void ClearItems()
		{
			SetItems( new List<Item>() );
		}

		[Browsable( false )]
		public IReadOnlyList<Item> SelectedItems
		{
			get { return __0x3791; }
			set
			{
				if( __0x3791.SequenceEqual( value ) )
					return;

				if( value != null )
					__0x3791 = new List<Item>( value );
				else
					__0x3791 = new List<Item>();

				__0x3792 = new ESet<Item>();
				foreach( var __0x3889 in __0x3791 )
					__0x3792.AddWithCheckAlreadyContained( __0x3889 );

				SelectedItemsChanged?.Invoke( this );

				Invalidate();
			}
		}

		[Browsable( false )]
		public Item SelectedItem
		{
			get
			{
				if( SelectedItems.Count == 1 )
					return SelectedItems[ 0 ];
				return null;
			}
			set
			{
				if( SelectedItem == value )
					return;

				var __0x3840 = new List<Item>();
				if( value != null )
					__0x3840.Add( value );
				SelectedItems = __0x3840;
			}
		}

		public bool MultiSelect
		{
			get { return __0x3789; }
			set
			{
				if( __0x3789 == value )
					return;
				__0x3789 = value;
			}
		}

		[Browsable( false )]
		public ModeClass Mode
		{
			get { return __0x3793; }
			set
			{
				if( __0x3793 == value )
					return;
				__0x3793 = value;

				UpdateScrollBars();
				Invalidate();
			}
		}

		[Browsable( false )]
		public int CurrentItemIndex
		{
			get { return __0x3794; }
			set
			{
				if( __0x3794 == value )
					return;
				__0x3794 = value;

				
				if( !MultiSelect )
				{
					if( __0x3794 >= 0 && __0x3794 < Items.Count )
						SelectedItem = Items[ __0x3794 ];
					else
						SelectedItem = null;
				}

				Invalidate();
			}
		}

		[Browsable( false )]
		public Item CurrentItem
		{
			get
			{
				if( __0x3794 >= 0 && __0x3794 < Items.Count )
					return __0x3788[ __0x3794 ];
				return null;
			}
			set
			{
				if( value != null )
					CurrentItemIndex = GetItemIndex( value );
				else
					CurrentItemIndex = -1;
			}
		}

		public bool CheckBoxes
		{
			get { return __0x3790; }
			set
			{
				if( __0x3790 == value )
					return;
				__0x3790 = value;
			}
		}

		[Browsable( false )]
		public Item[] CheckedItems
		{
			get { return Items.Where( __0x3902 => __0x3902.Checked ).ToArray(); }
		}

		public int GetItemIndexAt( Point position, out bool overImage )
		{
			var __0x3841 = position;
			if( __0x3796 != null && __0x3796.Visible )
				__0x3841.X += __0x3796.Value;
			if( __0x3795 != null && __0x3795.Visible )
				__0x3841.Y += __0x3795.Value;

			

			for( int __0x3842 = 0; __0x3842 < Items.Count; __0x3842++ )
			{
				var __0x3843 = GetItemRectangle_NoScrolling( __0x3842 );
				if( __0x3843.Contains( __0x3841 ) )
				{
					overImage = __0x3793.IsOverImage( __0x3841 );
					return __0x3842;
				}
			}

			overImage = false;
			return -1;
		}

		public int GetItemIndexAt( Point position )
		{
			return GetItemIndexAt( position, out _ );
		}

		public Item GetItemAt( Point position )
		{
			var __0x3844 = GetItemIndexAt( position );
			return __0x3844 != -1 ? Items[ __0x3844 ] : null;
		}

		public bool IsItemSelected( Item item )
		{
			return __0x3792.Contains( item );
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			if( !Focused )
				Focus();

			base.OnMouseDown( e );

			if( e.Button == MouseButtons.Left || e.Button == MouseButtons.Right )
			{
				var __0x3845 = GetItemIndexAt( e.Location, out var overImage );
				var __0x3846 = __0x3845 != -1 ? Items[ __0x3845 ] : null;

				var __0x3847 = new ESet<Item>( SelectedItems.ToArray() );
				if( ( ModifierKeys & Keys.Control ) == 0 && ( ModifierKeys & Keys.Shift ) == 0 )
					__0x3847.Clear();

				if( ( ModifierKeys & Keys.Shift ) != 0 )
				{
					if( CurrentItemIndex != -1 && __0x3845 != -1 )
					{
						var __0x3848 = Math.Min( CurrentItemIndex, __0x3845 );
						var __0x3849 = Math.Max( CurrentItemIndex, __0x3845 );
						for( int __0x3850 = __0x3848; __0x3850 <= __0x3849; __0x3850++ )
							__0x3847.AddWithCheckAlreadyContained( Items[ __0x3850 ] );
					}
				}

				if( __0x3846 != null )
					__0x3847.AddWithCheckAlreadyContained( __0x3846 );

				SelectedItems = __0x3847.ToArray();
				CurrentItemIndex = __0x3845;
				__0x3891();

				if( CheckBoxes && __0x3846 != null && overImage )
					__0x3846.Checked = !__0x3846.Checked;
			}

			
			if( e.Button == MouseButtons.Left && CanDrag )
			{
				var __0x3851 = Cursor.Position;
				var __0x3852 = SelectedItems.ToArray();

				if( __0x3852.Length != 0 )
				{
					var __0x3853 = GetItemAt( PointToClient( __0x3851 ) );
					if( __0x3853 != null && __0x3852.Contains( __0x3853 ) )
					{
						__0x3799 = true;
						__0x3800 = __0x3851;
						__0x3801 = __0x3852;
					}
				}
			}
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			__0x3890();
		}

		void __0x3890()
		{
			__0x3799 = false;
			__0x3800 = new Point( 0, 0 );
			__0x3801 = null;
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			if( __0x3799 )
			{
				var __0x3854 = MouseButtons;
				if( ( __0x3854 & MouseButtons.Left ) != 0 )
				{
					var __0x3855 = 4;
					var __0x3856 = Cursor.Position;

					if( Math.Abs( __0x3800.X - __0x3856.X ) > __0x3855 || Math.Abs( __0x3800.Y - __0x3856.Y ) > __0x3855 )
					{
						var __0x3857 = true;
						BeforeStartDrag?.Invoke( this, __0x3801, ref __0x3857 );

						if( __0x3857 )
						{
							var __0x3858 = new DragData();
							__0x3858.ListView = this;
							__0x3858.Items = __0x3801;
							DoDragDrop( __0x3858, DragDropEffects.Link );

							__0x3890();
						}
					}
				}
			}
		}

		protected override void OnMouseWheel( MouseEventArgs e )
		{
			base.OnMouseWheel( e );

			if( __0x3795 != null && __0x3795.Visible )
			{
				int __0x3859 = e.Delta / 120;
				var __0x3860 = __0x3795.Value - 80 * __0x3859;
				MathEx.Clamp( ref __0x3860, 0, __0x3795.Maximum );

				if( __0x3795.Value != __0x3860 )
				{
					__0x3795.Value = __0x3860;
					Invalidate();
				}
			}
		}

		void __0x3891()
		{
			if( CurrentItemIndex != -1 && Items.Count != 0 )
				EnsureVisible( Items[ CurrentItemIndex ] );
		}

		void __0x3892( int __0x3903 )
		{
			Item __0x3861;
			if( __0x3903 >= 0 && __0x3903 < Items.Count )
				__0x3861 = Items[ __0x3903 ];
			else
				__0x3861 = null;

			var __0x3862 = new ESet<Item>( SelectedItems.ToArray() );
			if( ( ModifierKeys & Keys.Control ) == 0 && ( ModifierKeys & Keys.Shift ) == 0 )
				__0x3862.Clear();

			if( ( ModifierKeys & Keys.Shift ) != 0 )
			{
				if( CurrentItemIndex != -1 && __0x3903 != -1 )
				{
					var __0x3863 = Math.Min( CurrentItemIndex, __0x3903 );
					var __0x3864 = Math.Max( CurrentItemIndex, __0x3903 );
					for( int __0x3865 = __0x3863; __0x3865 <= __0x3864; __0x3865++ )
						__0x3862.AddWithCheckAlreadyContained( Items[ __0x3865 ] );
				}
			}

			if( __0x3861 != null )
				__0x3862.AddWithCheckAlreadyContained( __0x3861 );

			SelectedItems = __0x3862.ToArray();
			CurrentItemIndex = __0x3903;
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( Items.Count != 0 )
			{
				var __0x3866 = keyData & Keys.KeyCode;

				if( __0x3866 == Keys.Up )
				{
					if( CurrentItemIndex != 0 )
						__0x3892( Math.Max( CurrentItemIndex - GetItemCountPerRow(), 0 ) );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.Down )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3892( Math.Min( CurrentItemIndex + GetItemCountPerRow(), Items.Count - 1 ) );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.Home )
				{
					if( CurrentItemIndex != 0 )
						__0x3892( 0 );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.End )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3892( Items.Count - 1 );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.PageUp && Mode.ItemSize.Y != 0 )
				{
					var __0x3867 = CurrentItemIndex;
					__0x3867 -= Math.Max( GetClientRectangle().Height / Mode.ItemSize.Y * GetItemCountPerRow(), 1 );
					if( __0x3867 < 0 )
						__0x3867 = 0;
					__0x3892( __0x3867 );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.PageDown )
				{
					var __0x3868 = CurrentItemIndex;
					__0x3868 += Math.Max( GetClientRectangle().Height / Mode.ItemSize.Y * GetItemCountPerRow(), 1 );
					if( __0x3868 > Items.Count - 1 )
						__0x3868 = Items.Count - 1;
					__0x3892( __0x3868 );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.Left )
				{
					if( CurrentItemIndex != 0 )
						__0x3892( Math.Max( CurrentItemIndex - 1, 0 ) );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.Right )
				{
					if( CurrentItemIndex != Items.Count - 1 )
						__0x3892( CurrentItemIndex + 1 );
					__0x3891();
					return true;
				}
				else if( __0x3866 == Keys.Space )
				{
					if( CheckBoxes && Enabled )
					{
						var __0x3869 = CurrentItem;
						if( __0x3869 != null )
							__0x3869.Checked = !__0x3869.Checked;
						return true;
					}
				}
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		protected override void OnGotFocus( EventArgs e )
		{
			base.OnGotFocus( e );

			Invalidate();
		}

		protected override void OnLostFocus( EventArgs e )
		{
			base.OnLostFocus( e );

			Invalidate();
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			UpdateScrollBars();
		}

		void __0x3893()
		{
			var __0x3870 = (int)( EditorAPI.DPIScale * 16.0f );

			if( __0x3795.Visible && !__0x3796.Visible )
				__0x3795.SetBounds( Width - __0x3870 - 1, 0, __0x3870, Height );
			else if( !__0x3795.Visible && __0x3796.Visible )
				__0x3796.SetBounds( 0, Height - __0x3870 - 1, Width, __0x3870 );
			else
			{
				__0x3795.SetBounds( Width - __0x3870 - 1, 0, __0x3870, Height - __0x3870 );
				__0x3796.SetBounds( 0, Height - __0x3870 - 1, Width - __0x3870, __0x3870 );
			}
		}

		public void UpdateScrollBars()
		{
			if( __0x3795 == null )
				return;

			

			bool __0x3871 = __0x3795.MouseUpDownStatus;
			if( !__0x3871 )
			{
				__0x3795.Maximum = Math.Max( GetSizeOfAllItems().Y - Height, 0 );
				__0x3795.SmallChange = 30;
				__0x3795.LargeChange = Height;

				if( __0x3795.Value > __0x3795.Maximum )
					__0x3795.Value = __0x3795.Maximum;

				

				
				

				

				
				
				

				
				
				
			}

			
			bool __0x3872 = __0x3796.MouseUpDownStatus;
			if( !__0x3872 )
			{
				

				
				
				
				
			}

			

			
			__0x3796.Visible = false;

			

			__0x3893();
			__0x3795.Visible = GetSizeOfAllItems().Y > GetClientRectangle().Height && Items.Count != 0;

			__0x3893();
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x3873 = base.CreateParams;
				__0x3873.ExStyle |= 0x02000000;
				return __0x3873;
			}
		}

		public Vector2I GetSizeOfAllItems()
		{
			
			var __0x3874 = GetClientRectangle().Width;

			if( Items.Count == 0 || __0x3874 == 0 )
				return new Vector2I( 0, 0 );

			
			if( Mode.ClampItemWidthByListViewWidth && Mode.ItemSize.X >= __0x3874 )
				return new Vector2I( __0x3874, Mode.ItemSize.Y * Items.Count );

			int __0x3875 = Math.Max( __0x3874 / Mode.ItemSize.X, 1 );
			if( __0x3875 == 1 )
				return new Vector2I( Mode.ItemSize.X, Mode.ItemSize.Y * Items.Count );

			var __0x3876 = Items.Count / __0x3875;
			if( __0x3876 * __0x3875 != Items.Count )
				__0x3876++;
			return new Vector2I( Mode.ItemSize.X * __0x3875, Mode.ItemSize.Y * __0x3876 );
		}

		public System.Drawing.Rectangle GetItemRectangle_NoScrolling( int itemIndex )
		{
			
			var __0x3877 = GetClientRectangle().Width;

			if( Items.Count == 0 || __0x3877 == 0 )
				return new System.Drawing.Rectangle( 0, 0, 0, 0 );

			
			if( Mode.ClampItemWidthByListViewWidth && Mode.ItemSize.X >= __0x3877 )
				return new System.Drawing.Rectangle( 0, Mode.ItemSize.Y * itemIndex, __0x3877, Mode.ItemSize.Y );

			int __0x3878 = Math.Max( __0x3877 / Mode.ItemSize.X, 1 );
			var __0x3879 = itemIndex / __0x3878;
			var __0x3880 = itemIndex % __0x3878;
			return new System.Drawing.Rectangle( Mode.ItemSize.X * __0x3880, Mode.ItemSize.Y * __0x3879, Mode.ItemSize.X, Mode.ItemSize.Y );
		}

		public bool GetItemRectangle( int itemIndex, out System.Drawing.Rectangle rect )
		{
			return __0x3793.GetItemRectangle( itemIndex, out rect );
		}

		public int GetItemCountPerRow()
		{
			
			var __0x3881 = GetClientRectangle().Width;

			int __0x3882;
			if( Mode.ItemSize.X != 0 )
				__0x3882 = Math.Max( __0x3881 / Mode.ItemSize.X, 1 );
			else
				__0x3882 = 1;
			return __0x3882;
		}

		private void __0x3894( object __0x3904, EngineScrollBarEventArgs __0x3905 )
		{
			
			

			Invalidate();
		}

		private void __0x3895( object __0x3906, EngineScrollBarEventArgs __0x3907 )
		{
			
			

			Invalidate();
		}

		
		
		
		
		
		

		
		
		
		
		
		

		[Browsable( false )]
		public EngineScrollBar ScrollBarVertical
		{
			get { return __0x3795; }
		}

		[Browsable( false )]
		public EngineScrollBar ScrollBarHorizontal
		{
			get { return __0x3796; }
		}

		public int GetItemIndex( Item item )
		{
			

			for( int __0x3883 = 0; __0x3883 < Items.Count; __0x3883++ )
				if( Items[ __0x3883 ] == item )
					return __0x3883;
			return -1;
		}

		public void EnsureVisible( Item item )
		{
			

			var __0x3884 = GetItemIndex( item );
			if( __0x3884 == -1 )
				return;

			if( __0x3795 != null && __0x3795.Visible )
			{
				var __0x3885 = GetItemRectangle_NoScrolling( __0x3884 );

				var __0x3886 = __0x3795.Value;
				var __0x3887 = __0x3886 + GetClientRectangle().Height;

				var __0x3888 = __0x3795.Value;

				if( __0x3886 > __0x3885.Top )
					__0x3888 = __0x3885.Top;
				else if( __0x3887 < __0x3885.Bottom )
					__0x3888 = __0x3885.Bottom - GetClientRectangle().Height;

				MathEx.Clamp( ref __0x3888, 0, __0x3795.Maximum );

				if( __0x3795.Value != __0x3888 )
				{
					__0x3795.Value = __0x3888;
					Invalidate();
				}
			}
		}

		public bool CanDrag
		{
			get { return __0x3798; }
			set { __0x3798 = value; }
		}



		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		

		
		
		


		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		

		

		

		
		
		
		


		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		

		
		
		
		
		

		

		
		
		
		
		

		
		
		
		
		
		

		

		


	}
}





namespace NeoAxis.Editor
{
	public class EngineProgressBar : Control
	{
		public EngineProgressBar()
		{
			
			SetStyle( ControlStyles.OptimizedDoubleBuffer | ControlStyles.AllPaintingInWmPaint | ControlStyles.UserPaint, true );

			
			SetStyle( ControlStyles.ResizeRedraw, true );

			
			DoubleBuffered = true;
		}

		[DefaultValue( 0 )]
		public int Value
		{
			get { return __0x3908; }
			set
			{
				if( __0x3908 == value )
					return;
				__0x3908 = value;
				Invalidate();
			}
		}
		int __0x3908;

		[DefaultValue( 100 )]
		public int Maximum
		{
			get { return __0x3909; }
			set { __0x3909 = value; }
		}
		int __0x3909 = 100;

		protected override void OnPaint( PaintEventArgs e )
		{
#if !DEPLOY

			var __0x3910 = new System.Drawing.Rectangle( 0, 0, Width, Height );

			using( var __0x3911 = new SolidBrush( EditorAPI.DarkTheme ? Color.FromArgb( 40, 40, 40 ) : Color.FromArgb( 230, 230, 230 ) ) )
				e.Graphics.FillRectangle( __0x3911, __0x3910 );

			var __0x3912 = new System.Drawing.Rectangle( 0, 0, __0x3910.Width - 1, __0x3910.Height - 1 );
			using( var __0x3913 = new Pen( EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 188, 188, 188 ) ) )
				e.Graphics.DrawRectangle( __0x3913, __0x3912 );

			var __0x3914 = new System.Drawing.Rectangle( 2, 2, (int)( __0x3910.Width * ( (double)Value / Maximum ) ) - 4, __0x3910.Height - 4 );
			using( var __0x3915 = new SolidBrush( EditorAPI.DarkTheme ? Color.FromArgb( 0, 150, 0 ) : Color.FromArgb( 0, 190, 0 ) ) )
				e.Graphics.FillRectangle( __0x3915, __0x3914 );

#endif
		}
	}



	
	
	
	
	
	

	
	
	

	

	

	

	
	
	

	

	
	

	
	

	
	

	
	
	
	
	

	
	
	
}






























namespace NeoAxis.Editor
{
	[RefreshProperties( RefreshProperties.All )]
	public class EngineScrollBar : UserControl
	{
		#region Private fields

		internal bool MouseUpDownStatus;
		
		internal EngineScrollBarMouseLocation MouseScrollBarArea = EngineScrollBarMouseLocation.OutsideScrollBar;
		Point __0x3916;
		int __0x3917 = 0;

		int __0x3918 = -1;
		int __0x3919 = -1;

		int __0x3920 = -1;

		int __0x3921 = 0;
		int __0x3922 = 100;
		int __0x3923 = 0;

		int __0x3924 = 1;

		bool __0x3925;

		
		
		System.Windows.Forms.Timer __0x3926;

		
		

		Orientation __0x3927 = Orientation.Vertical;
		

		
		MouseEventArgs __0x3928 = null;

		#endregion

		#region Public Events

		/// <summary>
		/// Fires every time mouse is clicked over track area.
		/// </summary>
		[Description( "Fires every time mouse is clicked over track area." )]
		public new event EventHandler<EngineScrollBarMouseEventArgs> MouseClick = null;

		/// <summary>
		/// Fires every time mouse moves over track area.
		/// </summary>
		[Description( "Fires every time mouse moves over track area." )]
		public new event EventHandler<EngineScrollBarMouseEventArgs> MouseMove = null;

		/// <summary>
		/// Occurs each time scrollbar orientation has changed.
		/// </summary>
		[Description( "Occurs each time scrollbar orientation has changed." )]
		public event EventHandler OrientationChanged = null;

		/// <summary>
		/// Occurs every time scrollbar orientation is about to change.
		/// </summary>
		[Description( "Occurs every time scrollbar orientation is about to change." )]
		public event EventHandler<CancelEventArgs> OrientationChanging = null;

		/// <summary>
		/// 
		/// </summary>
		public new event EventHandler<EngineScrollBarEventArgs> Scroll = null;

		
		
		
		
		
		

		/// <summary>
		/// Fired every time <c>Value</c> of the ScrollBar changes.
		/// </summary>
		[Description( "Occurs every time scrollbar value changes." )]
		public event EventHandler ValueChanged = null;

		#endregion

		#region Constructor and related

		/// <summary>
		/// Constructor. Initialize properties.
		/// </summary>
		public EngineScrollBar()
		{
			__0x3993();

			SetStyle( ControlStyles.ResizeRedraw, true );
			SetStyle( ControlStyles.AllPaintingInWmPaint, true );
			SetStyle( ControlStyles.DoubleBuffer, true );

			
			
			
			
			
			
			
			

			__0x3926.Tick += new EventHandler( __0x3992 );

			
			
			

			

			MouseClick += __0x4022;
			MouseUp += __0x4023;
		}

		/// <summary>
		/// Generates repeat events when mouse is pressed and hold.
		/// </summary>
		/// <param name="__0x4025"></param>
		/// <param name="__0x4026"></param>
		void __0x3992( object __0x4025, EventArgs __0x4026 )
		{
			base.OnMouseDown( __0x3928 );

			__0x3994( __0x3928 );

			if( __0x3926.Enabled )
				__0x3926.Interval = RepeatRate;
			else
				__0x3926.Interval = InitialDelay;

			
			if( MouseScrollBarArea != EngineScrollBarMouseLocation.Thumb )
				__0x3926.Enabled = true;
			else
				__0x3926.Enabled = false;
		}

		IContainer __0x3929;
		void __0x3993()
		{
			this.__0x3929 = new System.ComponentModel.Container();
			
			this.__0x3926 = new System.Windows.Forms.Timer( this.__0x3929 );
			this.SuspendLayout();
			
			
			
			this.Name = "EngineScrollBar";
			this.ResumeLayout( false );
		}

		/// <summary>
		/// Dispose overridden method. When called from the host <c>disposing</c> parameter is <b>true</b>.
		/// When called from the finalize parameter is <b>false</b>.
		/// </summary>
		/// <param name="disposing"></param>
		protected override void Dispose( bool disposing )
		{
			if( !__0x3925 )
			{
				if( disposing )
				{
					if( __0x3929 != null )
					{
						__0x3929.Dispose();
					}
				}
				
				

				
				

				__0x3925 = true;

				base.Dispose();

			}
		}

		
		
		
		
		
		
		
		
		

		#endregion

		#region Public Properties

		
		/// <summary>
		/// BackColor doesn't have any meaning for the ScrollBar.
		/// </summary> 
		[Browsable( false ),
		EditorBrowsable( EditorBrowsableState.Never )]
		public new Color BackColor { get; set; }

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		/// <summary>
		/// Delay in milliseconds to start autorepeat behavior when mouse is pressed down and hold.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 400 ), Category( "Enhanced" )]
		[Description( "Delay in milliseconds to start autorepeat behavior when mouse is pressed down and hold." )]
		public int InitialDelay { set; get; } = 400;

		/// <summary>
		/// Large scrollbar change.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 10 ), Category( "Enhanced" )]
		[Description( "Large scrollbar change." )]
		public int LargeChange { set; get; } = 10;

		/// <summary>
		/// "Maximum scrollbar value.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 100 ), Category( "Enhanced" )]
		[Description( "Maximum scrollbar value." )]
		public int Maximum
		{
			get { return __0x3922; }
			set
			{
				if( __0x3922 == value )
					return;

				if( value < Minimum )
					throw new ArgumentException( "Minimum has to be less or equal Maximum", "Minimum" );

				
				decimal __0x3930 = value - Minimum;

				__0x3922 = value;
				Invalidate();
			}
		}

		/// <summary>
		/// Minimum scrollbar value.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 0 ), Category( "Enhanced" )]
		[Description( "Minimum scrollbar value." )]
		public int Minimum
		{
			get { return __0x3921; }
			set
			{
				if( __0x3921 == value )
					return;

				if( Maximum < value )
					throw new ArgumentException( "Minimum has to be less or equal Maximum", "Minimum" );

				
				decimal __0x3931 = Maximum - value;

				__0x3921 = value;
				Invalidate();
			}
		}

		/// <summary>
		/// ScrollBar orientation.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( Orientation.Vertical ), Category( "Enhanced" )]
		[Description( "ScrollBar orientation." )]
		public Orientation Orientation
		{
			set
			{
				if( OrientationChanging != null )
				{
					CancelEventArgs __0x3932 = new CancelEventArgs( false );
					OrientationChanging( this, __0x3932 );
					if( __0x3932.Cancel )
						return;
				}
				if( __0x3927 != value )
				{
					__0x3927 = value;

					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					

					if( OrientationChanged != null )
					{
						OrientationChanged( this, EventArgs.Empty );
					}
				}

			}
			get
			{
				return __0x3927;
			}
		}

		
		
		
		
		
		
		
		

		/// <summary>
		/// Delay in milliseconds between autorepeat MouseDown events when mouse is pressed down and hold.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 62 ), Category( "Enhanced" )]
		[Description( "Delay in milliseconds between autorepeat MouseDown events when mouse is pressed down and hold." )]
		public int RepeatRate { set; get; } = 62;

		
		
		
		
		
		

		/// <summary>
		/// Small scrollbar change.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 1 ), Category( "Enhanced" )]
		[Description( "Small change." )]
		public int SmallChange { set; get; } = 1;

		/// <summary>
		/// Scrollbar value. Determines current thumb position.
		/// </summary>
		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 0 ), Category( "Enhanced" )]
		[Description( "Value" )]
		public int Value
		{
			get { return __0x3923; }
			set
			{
				if( __0x3923 == value )
					return;

				if( value < Minimum )
					__0x3923 = Minimum;
				else if( value > Maximum )
					__0x3923 = Maximum;
				else
					__0x3923 = value;

				__0x3995();
				Invalidate();
			}
		}

		[EditorBrowsable( EditorBrowsableState.Always ), Browsable( true ), DefaultValue( 1 ), Category( "Enhanced" )]
		[Description( "Value" )]
		public int ItemSize
		{
			get { return __0x3924; }
			set { __0x3924 = value; }
		}

		#endregion

		#region Overridden events

		/// <summary>
		/// What should happen here:
		/// 1. Save information that mouse is down
		/// 2. Call timer event handler (it will repeat periodically MouseDown events as long as mouse is down)
		/// </summary>
		/// <param name="e">Standard <c>MouseEventArgs</c>.</param>
		protected override void OnMouseDown( MouseEventArgs e )
		{
			
			__0x3928 = e;
			MouseUpDownStatus = true;

			
			__0x3926.Enabled = false;

			
			__0x3992( null, EventArgs.Empty );
		}

		/// <summary>
		/// This methods called from repeater timer event handler
		/// </summary>
		/// <param name="__0x4027"></param>
		void __0x3994( MouseEventArgs __0x4027 )
		{
			
			
			if( Orientation == Orientation.Vertical )
				MouseScrollBarArea = __0x4012( __0x4027.Y, out __0x3917 );
			else
				MouseScrollBarArea = __0x4012( __0x4027.X, out __0x3917 );

			
			__0x3916 = __0x4027.Location;

			
			var __0x3933 = Value;
			ScrollEventType __0x3934;
			
			
			
			
			
			
			
			
			
			
			
			{
				switch( MouseScrollBarArea )
				{
				case EngineScrollBarMouseLocation.BottomOrRightArrow:
				case EngineScrollBarMouseLocation.BottomOrRightTrack:
					if( MouseScrollBarArea == EngineScrollBarMouseLocation.BottomOrRightArrow )
					{
						__0x3933 += SmallChange;
						__0x3934 = ScrollEventType.SmallIncrement;
					}
					else    
					{
						__0x3933 += LargeChange;
						__0x3934 = ScrollEventType.LargeIncrement;
					}
					if( __0x3933 >= Maximum )
					{
						__0x3933 = Maximum;
						__0x3934 = ScrollEventType.Last;
					}
					__0x3998( __0x3933, Value, __0x3934 );
					break;
				case EngineScrollBarMouseLocation.Thumb:
					__0x3998( Value, Value, ScrollEventType.ThumbTrack );
					break;
				case EngineScrollBarMouseLocation.TopOrLeftArrow:
				case EngineScrollBarMouseLocation.TopOrLeftTrack:
					if( MouseScrollBarArea == EngineScrollBarMouseLocation.TopOrLeftArrow )
					{
						__0x3933 -= SmallChange;
						__0x3934 = ScrollEventType.SmallDecrement;
					}
					else
					{
						__0x3933 -= LargeChange;
						__0x3934 = ScrollEventType.LargeIncrement;
					}
					if( __0x3933 <= Minimum )
					{
						__0x3933 = Minimum;
						__0x3934 = ScrollEventType.First;
					}
					__0x3998( __0x3933, Value, __0x3934 );
					break;
				}
				Value = __0x3933;
			}

			
			Invalidate();

		}

		/// <summary>
		/// Captures mouse wheel actions and translates them to small decrement events.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseWheel( MouseEventArgs e )
		{
			int __0x3935 = e.Delta / 120;

			
			var __0x3936 = Value - SmallChange * __0x3935;

			if( __0x3936 < Value )
				__0x3998( __0x3936, Value, ScrollEventType.SmallDecrement );
			else
				__0x3998( __0x3936, Value, ScrollEventType.SmallIncrement );

			Value = __0x3936;
			__0x3998( Value, Value, ScrollEventType.EndScroll );

			base.OnMouseWheel( e );
		}

		/// <summary>
		/// MouseClick override. Calls MouseClick event handled with enhanced arguments. 
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseClick( MouseEventArgs e )
		{
			base.OnMouseClick( e );
			
			__0x3996( e, Value );
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseMove( MouseEventArgs e )
		{

			base.OnMouseMove( e );

			
			if( ( MouseUpDownStatus == true ) && ( MouseScrollBarArea == EngineScrollBarMouseLocation.Thumb ) )
			{
				

				
				int __0x3937;
				if( Orientation == Orientation.Vertical )
					__0x3937 = __0x4011( e.Y - __0x3917 );
				else
					__0x3937 = __0x4011( e.X - __0x3917 );

				if( __0x3937 < Minimum ) __0x3937 = Minimum;
				if( __0x3937 > Maximum ) __0x3937 = Maximum;

				
				__0x3998( __0x3937, Value, ScrollEventType.ThumbTrack );

				
				Value = __0x3937;  

				
				this.Invalidate();
			}
			else
			{
				
				

				
				EngineScrollBarMouseLocation __0x3938 = MouseScrollBarArea;

				int __0x3939;
				EngineScrollBarMouseLocation __0x3940;

				int __0x3941;
				if( Orientation == Orientation.Vertical )
				{
					__0x3940 = __0x4012( e.Y, out __0x3939 );
					__0x3941 = e.Y - __0x4024();
					switch( __0x3940 )
					{
					case EngineScrollBarMouseLocation.TopOrLeftArrow:
						__0x3941 = 0;
						break;
					case EngineScrollBarMouseLocation.BottomOrRightArrow:
						__0x3941 = ClientSize.Height - 2 * __0x4024();
						break;

					}
				}
				else
				{
					__0x3940 = __0x4012( e.X, out __0x3939 );

					__0x3941 = e.X - __0x4024();
					switch( __0x3940 )
					{
					case EngineScrollBarMouseLocation.TopOrLeftArrow:
						__0x3941 = 0;
						break;
					case EngineScrollBarMouseLocation.BottomOrRightArrow:
						__0x3941 = ClientSize.Width - 2 * __0x4024();
						break;

					}
				}
				__0x3919 = ( Maximum - Minimum ) * ( __0x3941 / TrackLength ) + Minimum;
				MouseScrollBarArea = __0x3940;

				if( ( __0x3941 < 0 ) || ( __0x3941 > TrackLength ) )
				{
					
				}
				else
				{
					
					

					if( __0x3918 != __0x3919 )
					{
						__0x3918 = __0x3919;
						
						
						
						
						
						
						
						
						
						
						

						
						
					}

					

					
					__0x3997( e, __0x3919 );


					
					if( __0x3938 != MouseScrollBarArea )
						this.Invalidate();
				}
			}
		}

		/// <summary>
		/// Forces repaint of ScrollBar when mouse moves outside of ScrollBar area.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseLeave( EventArgs e )
		{
			MouseUpDownStatus = false;
			MouseScrollBarArea = EngineScrollBarMouseLocation.OutsideScrollBar;
			__0x3926.Enabled = false;

			base.OnMouseLeave( e );
			this.Invalidate();
		}

		/// <summary>
		/// Fires <c>Scroll</c> events and refreshes ScrollBar display.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			__0x3926.Enabled = false;
			MouseUpDownStatus = false;

			switch( MouseScrollBarArea )
			{
			case EngineScrollBarMouseLocation.BottomOrRightArrow:
			case EngineScrollBarMouseLocation.TopOrLeftArrow:
			case EngineScrollBarMouseLocation.BottomOrRightTrack:
			case EngineScrollBarMouseLocation.TopOrLeftTrack:
				__0x3998( Value, Value, ScrollEventType.EndScroll );
				break;
			case EngineScrollBarMouseLocation.Thumb:
				__0x3998( Value, Value, ScrollEventType.ThumbPosition );
				__0x3998( Value, Value, ScrollEventType.EndScroll );
				break;
			}
			Invalidate();
		}

		#endregion

		#region Private helpers/wrappers of public events

		void __0x3995()
		{
			if( ( ValueChanged != null ) && ( this.Value != __0x3920 ) )
			{
				__0x3920 = this.Value;
				ValueChanged( this, new EventArgs() );
			}
		}

		void __0x3996( MouseEventArgs __0x4028, int __0x4029 )
		{
			if( MouseClick != null )
			{
				
				EngineScrollBarMouseEventArgs __0x3942 = new EngineScrollBarMouseEventArgs( __0x3919, __0x4028, MouseScrollBarArea );
				MouseClick( this, __0x3942 );
			}

		}

		void __0x3997( MouseEventArgs __0x4030, int __0x4031 )
		{
			if( MouseMove != null )
			{
				
				EngineScrollBarMouseEventArgs __0x3943 = new EngineScrollBarMouseEventArgs( __0x4031, __0x4030, MouseScrollBarArea );
				MouseMove( this, __0x3943 );
			}
		}

		void __0x3998( int __0x4032, int __0x4033, ScrollEventType __0x4034 )
		{
			if( Scroll != null )
			{
				ScrollOrientation __0x3944;
				if( Orientation == Orientation.Horizontal )
					__0x3944 = ScrollOrientation.HorizontalScroll;
				else
					__0x3944 = ScrollOrientation.VerticalScroll;

				
				__0x4032 = Math.Max( Math.Min( Maximum, __0x4032 ), Minimum );

				EngineScrollBarEventArgs __0x3945 = new EngineScrollBarEventArgs( __0x4033, __0x4032, __0x4034, __0x3944 );

				Scroll( this, __0x3945 );
			}
		}

		#endregion

		#region OnPaint override and DrawBookmark methods

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		


		
		
		
		
		

		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		int __0x3999()
		{
			return __0x4024();
			
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		Point __0x4000( Vector2I __0x4035 )
		{
			return new Point( __0x4035.X, __0x4035.Y );
		}

		void __0x4001( Graphics __0x4036, System.Drawing.Rectangle __0x4037, ScrollBarArrowButtonState __0x4038 )
		{
#if !DEPLOY

			Color __0x3946 = Color.Red;
			Color __0x3947 = Color.Red;
			switch( __0x4038 )
			{
			case ScrollBarArrowButtonState.UpNormal:
			case ScrollBarArrowButtonState.LeftNormal:
			case ScrollBarArrowButtonState.DownNormal:
			case ScrollBarArrowButtonState.RightNormal:
				__0x3946 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				__0x3947 = EditorAPI.DarkTheme ? Color.FromArgb( 130, 130, 130 ) : Color.FromArgb( 96, 96, 96 );
				
				break;
			case ScrollBarArrowButtonState.UpHot:
			case ScrollBarArrowButtonState.LeftHot:
			case ScrollBarArrowButtonState.DownHot:
			case ScrollBarArrowButtonState.RightHot:
				__0x3946 = EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 218, 218, 218 );
				__0x3947 = EditorAPI.DarkTheme ? Color.FromArgb( 150, 150, 150 ) : Color.FromArgb( 0, 0, 0 );
				
				break;
			case ScrollBarArrowButtonState.UpPressed:
			case ScrollBarArrowButtonState.LeftPressed:
			case ScrollBarArrowButtonState.DownPressed:
			case ScrollBarArrowButtonState.RightPressed:
				__0x3946 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 96, 96, 96 );
				__0x3947 = EditorAPI.DarkTheme ? Color.FromArgb( 170, 170, 170 ) : Color.FromArgb( 255, 255, 255 );
				
				break;
			case ScrollBarArrowButtonState.UpDisabled:
			case ScrollBarArrowButtonState.LeftDisabled:
			case ScrollBarArrowButtonState.DownDisabled:
			case ScrollBarArrowButtonState.RightDisabled:
				__0x3946 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				__0x3947 = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 200, 200, 200 );
				break;
			}

			using( var __0x3948 = new SolidBrush( __0x3946 ) )
			{
				__0x4036.FillRectangle( __0x3948, __0x4037 );
			}

			using( var __0x3949 = new SolidBrush( __0x3947 ) )
			{
				RectangleI __0x3950 = new RectangleI( __0x4037.Left, __0x4037.Top, __0x4037.Right, __0x4037.Bottom );

				var __0x3951 = __0x3950.Size;
				
				var __0x3952 = ( __0x3951.MinComponent() / 2 + 1 ) / 2 * 2;
				var __0x3953 = __0x3950.GetCenter();

				var __0x3954 = new RectangleI( __0x3953.X - __0x3952 / 2, __0x3953.Y - __0x3952 / 2, __0x3953.X + __0x3952 / 2, __0x3953.Y + __0x3952 / 2 );

				Point[] __0x3955 = null;
				Point[] __0x3956 = null;

				if( __0x4038.ToString().Contains( "Up" ) || __0x4038.ToString().Contains( "Down" ) )
				{
					var __0x3957 = __0x3954.GetCenter().X - __0x3954.Left;
					var __0x3958 = (int)( (double)__0x3957 / 1.5 );

					if( __0x4038.ToString().Contains( "Up" ) )
					{
						var __0x3959 = new Vector2I( __0x3953.X, __0x3953.Y - __0x3957 - __0x3958 / 2 + 1 );

						__0x3955 = new Point[ 4 ];
						__0x3955[ 0 ] = __0x4000( __0x3959 + new Vector2I( -__0x3957, __0x3957 ) + new Vector2I( 1, 0 ) );
						__0x3955[ 1 ] = __0x4000( __0x3959 + new Vector2I( 1, 0 ) );
						__0x3955[ 2 ] = __0x4000( __0x3959 + new Vector2I( 0, __0x3958 ) + new Vector2I( 1, 0 ) );
						__0x3955[ 3 ] = __0x4000( __0x3959 + new Vector2I( -__0x3957, __0x3957 ) + new Vector2I( 0, __0x3958 ) + new Vector2I( 1, 0 ) );

						__0x3956 = new Point[ 4 ];
						__0x3956[ 0 ] = __0x4000( __0x3959 + new Vector2I( +__0x3957, __0x3957 ) );
						__0x3956[ 1 ] = __0x4000( __0x3959 + new Vector2I( +__0x3957, __0x3957 ) + new Vector2I( 0, __0x3958 ) );
						__0x3956[ 2 ] = __0x4000( __0x3959 + new Vector2I( 0, __0x3958 ) );
						__0x3956[ 3 ] = __0x4000( __0x3959 );

						
						
						
						
						
						
					}
					else
					{
						var __0x3960 = new Vector2I( __0x3953.X, __0x3953.Y + __0x3957 + __0x3958 / 2 - 1 );

						__0x3955 = new Point[ 4 ];
						__0x3955[ 0 ] = __0x4000( __0x3960 + new Vector2I( -__0x3957, -__0x3957 ) + new Vector2I( 1, 0 ) );
						__0x3955[ 1 ] = __0x4000( __0x3960 + new Vector2I( 1, 0 ) );
						__0x3955[ 2 ] = __0x4000( __0x3960 - new Vector2I( 0, __0x3958 ) + new Vector2I( 1, 0 ) );
						__0x3955[ 3 ] = __0x4000( __0x3960 + new Vector2I( -__0x3957, -__0x3957 ) - new Vector2I( 0, __0x3958 ) + new Vector2I( 1, 0 ) );

						__0x3956 = new Point[ 4 ];
						__0x3956[ 0 ] = __0x4000( __0x3960 + new Vector2I( __0x3957, -__0x3957 ) - new Vector2I( 0, __0x3958 ) );
						__0x3956[ 1 ] = __0x4000( __0x3960 + new Vector2I( __0x3957, -__0x3957 ) );
						__0x3956[ 2 ] = __0x4000( __0x3960 );
						__0x3956[ 3 ] = __0x4000( __0x3960 - new Vector2I( 0, __0x3958 ) );

						
						
						
						
						
						
						
					}
				}

				if( __0x4038.ToString().Contains( "Left" ) || __0x4038.ToString().Contains( "Right" ) )
				{
					var __0x3961 = __0x3954.GetCenter().Y - __0x3954.Top;
					var __0x3962 = (int)( (double)__0x3961 / 1.5 );

					if( __0x4038.ToString().Contains( "Left" ) )
					{
						var __0x3963 = new Vector2I( __0x3953.X - __0x3961 - __0x3962 / 2 + 1, __0x3953.Y );

						__0x3955 = new Point[ 4 ];
						__0x3955[ 0 ] = __0x4000( __0x3963 + new Vector2I( __0x3961, -__0x3961 ) + new Vector2I( 0, 1 ) );
						__0x3955[ 1 ] = __0x4000( __0x3963 + new Vector2I( 0, 1 ) );
						__0x3955[ 2 ] = __0x4000( __0x3963 + new Vector2I( __0x3962, 0 ) + new Vector2I( 0, 1 ) );
						__0x3955[ 3 ] = __0x4000( __0x3963 + new Vector2I( __0x3961, -__0x3961 ) + new Vector2I( __0x3962, 0 ) + new Vector2I( 0, 1 ) );

						__0x3956 = new Point[ 4 ];
						__0x3956[ 0 ] = __0x4000( __0x3963 + new Vector2I( __0x3961, __0x3961 ) + new Vector2I( 1, 0 ) );
						__0x3956[ 1 ] = __0x4000( __0x3963 + new Vector2I( __0x3961, __0x3961 ) + new Vector2I( __0x3962, 0 ) + new Vector2I( 1, 0 ) );
						__0x3956[ 2 ] = __0x4000( __0x3963 + new Vector2I( __0x3962, 0 ) + new Vector2I( 1, 0 ) );
						__0x3956[ 3 ] = __0x4000( __0x3963 + new Vector2I( 1, 0 ) );
					}
					else
					{
						var __0x3964 = new Vector2I( __0x3953.X + __0x3961 + __0x3962 / 2 - 1, __0x3953.Y );

						__0x3955 = new Point[ 4 ];
						__0x3955[ 0 ] = __0x4000( __0x3964 + new Vector2I( -__0x3961, -__0x3961 ) + new Vector2I( 0, 1 ) );
						__0x3955[ 1 ] = __0x4000( __0x3964 + new Vector2I( 0, 1 ) );
						__0x3955[ 2 ] = __0x4000( __0x3964 - new Vector2I( __0x3962, 0 ) + new Vector2I( 0, 1 ) );
						__0x3955[ 3 ] = __0x4000( __0x3964 + new Vector2I( -__0x3961, -__0x3961 ) - new Vector2I( __0x3962, 0 ) + new Vector2I( 0, 1 ) );

						__0x3956 = new Point[ 4 ];
						__0x3956[ 0 ] = __0x4000( __0x3964 + new Vector2I( -__0x3961, __0x3961 ) - new Vector2I( __0x3962, 0 ) + new Vector2I( -1, 0 ) );
						__0x3956[ 1 ] = __0x4000( __0x3964 + new Vector2I( -__0x3961, __0x3961 ) + new Vector2I( -1, 0 ) );
						__0x3956[ 2 ] = __0x4000( __0x3964 + new Vector2I( -1, 0 ) );
						__0x3956[ 3 ] = __0x4000( __0x3964 - new Vector2I( __0x3962, 0 ) + new Vector2I( -1, 0 ) );
					}
				}

				if( __0x3955 != null )
					__0x4036.FillPolygon( __0x3949, __0x3955 );
				if( __0x3956 != null )
					__0x4036.FillPolygon( __0x3949, __0x3956 );
			}

			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			

			
			
			
			
			


			

#endif
		}

		void __0x4002( Graphics __0x4039, System.Drawing.Rectangle __0x4040, ScrollBarState __0x4041 )
		{
			Color __0x3965 = Color.Red;
			switch( __0x4041 )
			{
			case ScrollBarState.Normal:
				__0x3965 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Hot:
				__0x3965 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Pressed:
				__0x3965 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			case ScrollBarState.Disabled:
				__0x3965 = EditorAPI.DarkTheme ? Color.FromArgb( 47, 47, 47 ) : Color.FromArgb( 240, 240, 240 );
				break;
			}

#if !DEPLOY
			using( var __0x3966 = new SolidBrush( __0x3965 ) )
			{
				__0x4039.FillRectangle( __0x3966, __0x4040 );
			}
#endif
		}

		void __0x4003( Graphics __0x4042, System.Drawing.Rectangle __0x4043, ScrollBarState __0x4044 )
		{
			__0x4002( __0x4042, __0x4043, __0x4044 );
			
		}

		void __0x4004( Graphics __0x4045, System.Drawing.Rectangle __0x4046, ScrollBarState __0x4047 )
		{
			__0x4002( __0x4045, __0x4046, __0x4047 );
			
		}

		void __0x4005( Graphics __0x4048, System.Drawing.Rectangle __0x4049, ScrollBarState __0x4050 )
		{
			__0x4002( __0x4048, __0x4049, __0x4050 );
			
		}

		void __0x4006( Graphics __0x4051, System.Drawing.Rectangle __0x4052, ScrollBarState __0x4053 )
		{
			__0x4002( __0x4051, __0x4052, __0x4053 );
			
		}

		void __0x4007( Graphics __0x4054, int __0x4055, int __0x4056 )
		{
			ScrollBarState __0x3967 = __0x4008( EngineScrollBarMouseLocation.Thumb );

			System.Drawing.Rectangle __0x3968;
			if( Orientation == Orientation.Vertical )
				__0x3968 = new System.Drawing.Rectangle( 0, __0x4056, ClientSize.Width, __0x4055 );
			else
				__0x3968 = new System.Drawing.Rectangle( __0x4056, 0, __0x4055, ClientSize.Height );

			Color __0x3969 = Color.Red;
			switch( __0x3967 )
			{
			case ScrollBarState.Normal:
				__0x3969 = EditorAPI.DarkTheme ? Color.FromArgb( 60, 60, 60 ) : Color.FromArgb( 205, 205, 205 );
				break;
			case ScrollBarState.Hot:
				__0x3969 = EditorAPI.DarkTheme ? Color.FromArgb( 70, 70, 70 ) : Color.FromArgb( 166, 166, 166 );
				break;
			case ScrollBarState.Pressed:
				__0x3969 = EditorAPI.DarkTheme ? Color.FromArgb( 80, 80, 80 ) : Color.FromArgb( 96, 96, 96 );
				break;
			case ScrollBarState.Disabled:
				__0x3969 = EditorAPI.DarkTheme ? Color.FromArgb( 54, 54, 54 ) : Color.FromArgb( 220, 220, 220 );
				break;
			}

#if !DEPLOY
			using( var __0x3970 = new SolidBrush( __0x3969 ) )
			{
				__0x4054.FillRectangle( __0x3970, __0x3968 );
			}
#endif

			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			
		}

		/// <summary>
		/// Overridden OnPaint. Draws all EnhancedScrollBar elements and draws all associated bookmarks.
		/// </summary>
		/// <param name="e"></param>
		protected override void OnPaint( PaintEventArgs e )
		{
			
			System.Drawing.Rectangle __0x3971;
			ScrollBarState __0x3972 = __0x4008( EngineScrollBarMouseLocation.TopOrLeftArrow );
			if( Orientation == Orientation.Vertical )
			{
				__0x3971 = new System.Drawing.Rectangle( 0, 0, ClientSize.Width, __0x3999() );
				switch( __0x3972 )
				{
				case ScrollBarState.Disabled:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.UpDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.UpPressed ); break;
				case ScrollBarState.Normal:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.UpNormal ); break;
				case ScrollBarState.Hot:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.UpHot ); break;
				}
			}
			else
			{
				__0x3971 = new System.Drawing.Rectangle( 0, 0, __0x3999(), ClientSize.Height );
				switch( __0x3972 )
				{
				case ScrollBarState.Disabled:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.LeftDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.LeftPressed ); break;
				case ScrollBarState.Normal:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.LeftNormal ); break;
				case ScrollBarState.Hot:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.LeftHot ); break;
				}
			}

			
			int __0x3973 = __0x4010( Value );
			__0x3972 = __0x4008( EngineScrollBarMouseLocation.TopOrLeftTrack );
			if( Orientation == Orientation.Vertical )
			{
				__0x3971 = new System.Drawing.Rectangle( 0, __0x3999(), ClientSize.Width, __0x3973 - __0x3999() );
				
				__0x4003( e.Graphics, __0x3971, __0x3972 );
			}
			else
			{
				__0x3971 = new System.Drawing.Rectangle( __0x3999(), 0, __0x3973 - __0x3999(), ClientSize.Height );
				
				__0x4004( e.Graphics, __0x3971, __0x3972 );
			}

			
			int __0x3974 = ThumbLength;
			__0x4007( e.Graphics, __0x3974, __0x3973 );

			
			__0x3972 = __0x4008( EngineScrollBarMouseLocation.BottomOrRightTrack );
			if( Orientation == Orientation.Vertical )
			{
				__0x3971 = new System.Drawing.Rectangle( 0, __0x3973 + __0x3974, ClientSize.Width, TrackLength + __0x3999() - ( __0x3973 + __0x3974 ) );
				__0x4005( e.Graphics, __0x3971, __0x3972 );
			}
			else
			{
				__0x3971 = new System.Drawing.Rectangle( __0x3973 + __0x3974, 0, TrackLength + __0x3999() - ( __0x3973 + __0x3974 ), ClientSize.Height );
				__0x4006( e.Graphics, __0x3971, __0x3972 );
			}

			
			__0x3972 = __0x4008( EngineScrollBarMouseLocation.BottomOrRightArrow );
			if( Orientation == Orientation.Vertical )
			{
				__0x3971 = new System.Drawing.Rectangle( 0, ClientSize.Height - __0x3999(), ClientSize.Width, __0x3999() );
				switch( __0x3972 )
				{
				case ScrollBarState.Disabled:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.DownDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.DownPressed ); break;
				case ScrollBarState.Normal:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.DownNormal ); break;
				case ScrollBarState.Hot:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.DownHot ); break;
				}
			}
			else
			{
				__0x3971 = new System.Drawing.Rectangle( ClientSize.Width - __0x3999(), 0, __0x3999(), ClientSize.Height );
				switch( __0x3972 )
				{
				case ScrollBarState.Disabled:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.RightDisabled ); break;
				case ScrollBarState.Pressed:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.RightPressed ); break;
				case ScrollBarState.Normal:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.RightNormal ); break;
				case ScrollBarState.Hot:
					__0x4001( e.Graphics, __0x3971, ScrollBarArrowButtonState.RightHot ); break;
				}
			}

			
			

			
			

		}

		
		
		
		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		ScrollBarState __0x4008( EngineScrollBarMouseLocation __0x4057 )
		{
			if( this.Enabled )
			{
				if( MouseScrollBarArea == __0x4057 )
					return MouseUpDownStatus == true ? ScrollBarState.Pressed : ScrollBarState.Hot;
				else
					return ScrollBarState.Normal;
			}
			else
				return ScrollBarState.Disabled;

		}

#endregion

#region helper methods

		void __0x4009( int __0x4058 )
		{
			__0x3998( Value, Value, ScrollEventType.ThumbTrack );
			__0x3998( Value, __0x4058, ScrollEventType.ThumbTrack );
			Value = __0x4058;
			__0x3998( Value, Value, ScrollEventType.ThumbPosition );
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		[Browsable( false )]
		
		int TrackLength
		{
			get
			{
				if( Orientation == Orientation.Vertical )
					return this.ClientSize.Height - 2 * __0x4024();
				else
					return this.ClientSize.Width - 2 * __0x4024();
			}
		}

		int ThumbLength
		{
			get
			{
				if( Minimum == Maximum ) return TrackLength;

				var __0x3975 = ItemSize * ( Maximum - Minimum + 1 ) + ( Orientation == Orientation.Vertical ? Height : Width );
				if( __0x3975 <= TrackLength || __0x3975 == 0 )
					return TrackLength;

				var __0x3976 = (double)TrackLength / (double)__0x3975;
				int __0x3977 = (int)( __0x3976 * TrackLength );

				

				
				

				if( Orientation == Orientation.Vertical )
				{
					if( __0x3977 < __0x4024() )
						__0x3977 = __0x4024();
				}
				else
				{
					if( __0x3977 < __0x4024() )
						__0x3977 = __0x4024();
				}
				return __0x3977;
			}
		}

		int __0x4010( int __0x4059 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( Maximum == Minimum ) return __0x4024();

				decimal __0x3978 = (decimal)( ClientSize.Height - 2 * __0x4024() - ThumbLength ) / ( Maximum - Minimum );
				return (int)( ( __0x4059 - Minimum ) * __0x3978 ) + __0x4024();
			}
			else
			{
				if( Maximum == Minimum ) return __0x4024();

				decimal __0x3979 = (decimal)( ClientSize.Width - 2 * __0x4024() - ThumbLength ) / ( Maximum - Minimum );
				return (int)( ( __0x4059 - Minimum ) * __0x3979 ) + __0x4024();
			}
		}

		int __0x4011( int __0x4060 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( ClientSize.Height - 2 * __0x4024() - ThumbLength == 0 )
					return 0;
				else
				{
					decimal __0x3980 = (decimal)( ( __0x4060 - __0x4024() ) ) / ( ClientSize.Height - 2 * __0x4024() - ThumbLength );
					return (int)( ( Maximum - Minimum ) * __0x3980 + Minimum );
				}
			}
			else
			{
				if( ClientSize.Width - 2 * __0x4024() - ThumbLength == 0 )
					return 0;
				else
				{
					decimal __0x3981 = (decimal)( ( __0x4060 - __0x4024() ) ) / ( ClientSize.Width - 2 * __0x4024() - ThumbLength );
					return (int)( ( Maximum - Minimum ) * __0x3981 + Minimum );
				}
			}
		}

		EngineScrollBarMouseLocation __0x4012( int __0x4061, out int __0x4062 )
		{
			if( Orientation == Orientation.Vertical )
			{
				if( __0x4061 <= __0x4024() )
				{
					__0x4062 = __0x4061;
					return EngineScrollBarMouseLocation.TopOrLeftArrow;
				}
				else if( __0x4061 > ClientSize.Height - __0x4024() )
				{
					__0x4062 = __0x4061 - ClientSize.Height + __0x4024();
					return EngineScrollBarMouseLocation.BottomOrRightArrow;
				}
				else
				{
					int __0x3982 = __0x4010( Value );
					if( __0x4061 < __0x3982 )
					{
						__0x4062 = __0x4061 - __0x4024();
						return EngineScrollBarMouseLocation.TopOrLeftTrack;
					}
					else if( __0x4061 < __0x3982 + ThumbLength )
					{
						__0x4062 = __0x4061 - __0x3982;
						return EngineScrollBarMouseLocation.Thumb;
					}
					else
					{
						__0x4062 = __0x4061 - __0x3982 - ThumbLength;
						return EngineScrollBarMouseLocation.BottomOrRightTrack;
					}
				}
			}
			else
			{
				if( __0x4061 <= __0x4024() )
				{
					__0x4062 = __0x4061;
					return EngineScrollBarMouseLocation.TopOrLeftArrow;
				}
				else if( __0x4061 > ClientSize.Width - __0x4024() )
				{
					__0x4062 = __0x4061 - ClientSize.Width + __0x4024();
					return EngineScrollBarMouseLocation.BottomOrRightArrow;
				}
				else
				{
					int __0x3983 = __0x4010( Value );
					if( __0x4061 < __0x3983 )
					{
						__0x4062 = __0x4061 - __0x4024();
						return EngineScrollBarMouseLocation.TopOrLeftTrack;
					}
					else if( __0x4061 < __0x3983 + ThumbLength )
					{
						__0x4062 = __0x4061 - __0x3983;
						return EngineScrollBarMouseLocation.Thumb;
					}
					else
					{
						__0x4062 = __0x4061 - __0x3983 - ThumbLength;
						return EngineScrollBarMouseLocation.BottomOrRightTrack;
					}
				}
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

#endregion

#region Context menu event handlers

		void __0x4013( object __0x4063, EventArgs __0x4064 )
		{
			__0x3998( Minimum, Value, ScrollEventType.First );
			Value = Minimum;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4014( object __0x4065, EventArgs __0x4066 )
		{
			__0x3998( Maximum, Value, ScrollEventType.Last );
			Value = Maximum;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4015( object __0x4067, EventArgs __0x4068 )
		{
			__0x4009( __0x3919 );
		}

		void __0x4016( object __0x4069, EventArgs __0x4070 )
		{
			__0x3998( Value - LargeChange, Value, ScrollEventType.LargeDecrement );
			Value -= LargeChange;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4017( object __0x4071, EventArgs __0x4072 )
		{
			__0x3998( Value + LargeChange, Value, ScrollEventType.LargeIncrement );
			Value += LargeChange;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4018( object __0x4073, EventArgs __0x4074 )
		{
			__0x3998( Value - SmallChange, Value, ScrollEventType.SmallDecrement );
			Value -= SmallChange;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

		void __0x4019( object __0x4075, EventArgs __0x4076 )
		{
			__0x3998( Value + SmallChange, Value, ScrollEventType.SmallIncrement );
			Value += SmallChange;
			__0x3998( Value, Value, ScrollEventType.EndScroll );
		}

#endregion

		
		
		
		
		
		
		
		
		

		string __0x4020( string __0x4077 )
		{
			return EditorContextMenuWinForms.Translate( __0x4077 );
		}

		void __0x4021( Point __0x4078 )
		{
			var __0x3984 = new List<KryptonContextMenuItemBase>();

			{
				var __0x3985 = new KryptonContextMenuItem( __0x4020( "Scroll Here" ), null, delegate ( object __0x4079, EventArgs __0x4080 )
				{
					__0x4009( __0x3919 );
				} );
				__0x3984.Add( __0x3985 );
			}

			
			__0x3984.Add( new KryptonContextMenuSeparator() );

			{
				var __0x3986 = new KryptonContextMenuItem( __0x4020( "Top" ), null, delegate ( object __0x4081, EventArgs __0x4082 )
				{
					__0x3998( Minimum, Value, ScrollEventType.First );
					Value = Minimum;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3986 );
			}

			{
				var __0x3987 = new KryptonContextMenuItem( __0x4020( "Bottom" ), null, delegate ( object __0x4083, EventArgs __0x4084 )
				{
					__0x3998( Maximum, Value, ScrollEventType.Last );
					Value = Maximum;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3987 );
			}

			
			__0x3984.Add( new KryptonContextMenuSeparator() );

			{
				var __0x3988 = new KryptonContextMenuItem( __0x4020( "Page Up" ), null, delegate ( object __0x4085, EventArgs __0x4086 )
				{
					__0x3998( Value - LargeChange, Value, ScrollEventType.LargeDecrement );
					Value -= LargeChange;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3988 );
			}

			{
				var __0x3989 = new KryptonContextMenuItem( __0x4020( "Page Down" ), null, delegate ( object __0x4087, EventArgs __0x4088 )
				{
					__0x3998( Value + LargeChange, Value, ScrollEventType.LargeIncrement );
					Value += LargeChange;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3989 );
			}

			
			__0x3984.Add( new KryptonContextMenuSeparator() );

			{
				var __0x3990 = new KryptonContextMenuItem( __0x4020( "Scroll Up" ), null, delegate ( object __0x4089, EventArgs __0x4090 )
				{
					__0x3998( Value - SmallChange, Value, ScrollEventType.SmallDecrement );
					Value -= SmallChange;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3990 );
			}

			{
				var __0x3991 = new KryptonContextMenuItem( __0x4020( "Scroll Down" ), null, delegate ( object __0x4091, EventArgs __0x4092 )
				{
					__0x3998( Value + SmallChange, Value, ScrollEventType.SmallIncrement );
					Value += SmallChange;
					__0x3998( Value, Value, ScrollEventType.EndScroll );
				} );
				__0x3984.Add( __0x3991 );
			}

			

			EditorContextMenuWinForms.Show( __0x3984, this );
		}

		private void __0x4022( object __0x4093, MouseEventArgs __0x4094 )
		{
			
			
		}

		private void __0x4023( object __0x4095, MouseEventArgs __0x4096 )
		{
			if( __0x4096.Button == MouseButtons.Right )
				__0x4021( __0x4096.Location );
		}

		int __0x4024()
		{
			return Orientation == Orientation.Vertical ? Width : Height;
		}

	}

#region Enhanced event argument definitions

	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	

	
	
	
	

	
	
	
	
	

	/// <summary>
	/// Arguments for EnhancedScrollEvent.
	/// </summary>
	public class EngineScrollBarEventArgs : EventArgs
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		public EngineScrollBarEventArgs()
		{
			this.NewValue = 0;
			this.OldValue = 0;
			this.Type = ScrollEventType.EndScroll;
			this.ScrollOrientation = ScrollOrientation.VerticalScroll;

		}

		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="OldValue">Previous EnhancedScrollBar value.</param>
		/// <param name="NewValue">New EnhancedScrollBar value.</param>
		/// <param name="Type">Type of the scroll event.</param>
		/// <param name="ScrollOrientation">EnhancedScrollBar orientation.</param>
		public EngineScrollBarEventArgs( int OldValue, int NewValue, ScrollEventType Type, ScrollOrientation ScrollOrientation )
		{
			this.NewValue = NewValue;
			this.OldValue = OldValue;
			this.ScrollOrientation = ScrollOrientation;
			this.Type = Type;
		}

		/// <summary>
		/// Previous EnhancedScrollBar value.
		/// </summary>
		public int OldValue { set; get; }

		/// <summary>
		/// New EnhancedScrollBar value.
		/// </summary>
		public int NewValue { set; get; }

		/// <summary>
		/// EnhancedScrollBar orientation.
		/// </summary>
		public ScrollOrientation ScrollOrientation { set; get; }

		/// <summary>
		/// Type of the scroll event.
		/// </summary>
		public ScrollEventType Type { set; get; }
	}

	/// <summary>
	/// Arguments for mouse related events.
	/// </summary>
	public class EngineScrollBarMouseEventArgs : MouseEventArgs
	{
		/// <summary>
		/// Constructor.
		/// </summary>
		/// <param name="Value">ScrollBar <c>Value when event occurred.</c></param>
		/// <param name="MouseArgs">Original <c>MouseArgs</c>.</param>
		
		/// <param name="ScrollBarSection">Section of the EnhancedScrollBar where mouse pointer is located.</param>
		public EngineScrollBarMouseEventArgs( int Value, MouseEventArgs MouseArgs, EngineScrollBarMouseLocation ScrollBarSection ) : base( MouseArgs.Button, MouseArgs.Clicks, MouseArgs.X, MouseArgs.Y, MouseArgs.Delta )
		{

			this.Value = Value;
			
			this.ScrollBarSection = ScrollBarSection;

		}

		/// <summary>
		/// ScrollBar <c>Value</c> when event occurred.
		/// </summary>
		public int Value { set; get; }

		
		
		
		

		/// <summary>
		/// Section of the EnhancedScrollBar where mouse pointer is located.
		/// </summary>
		public EngineScrollBarMouseLocation ScrollBarSection { set; get; }
	}

#endregion

#region Public Enumerators

	/// <summary>
	/// Area of ScrollBar definitions. Used to describe relation of mouse pointer location
	/// to the distinct part of ScrollBar.
	/// </summary>
	public enum EngineScrollBarMouseLocation
	{
		/// <summary>
		/// Located outside of the ScrollBar.
		/// </summary>
		OutsideScrollBar,

		/// <summary>
		/// Located over top (for vertical ScrollBar) or 
		/// over left hand side arrow (for horizontal ScrollBar).
		/// </summary>
		TopOrLeftArrow,

		/// <summary>
		/// Located over top (for vertical Scrollbar) or
		/// over left hand side track (for horizontal ScrollBar).
		/// Track is the area between arrow and thumb images.
		/// </summary>
		TopOrLeftTrack,

		/// <summary>
		/// Located over ScrollBar thumb. Thumb is movable portion of the ScrollBar.
		/// </summary>
		Thumb,

		/// <summary>
		/// Located over bottom (for vertical Scrollbar) or
		/// over right hand side track (for horizontal ScrollBar).
		/// Track is the area between arrow and thumb images.
		/// </summary>
		BottomOrRightTrack,

		/// <summary>
		/// Located over bottom (for vertical ScrollBar) or 
		/// over right hand side arrow (for horizontal ScrollBar).
		/// </summary>
		BottomOrRightArrow
	}

#endregion

	

	
	
	
	
	
	
	
	

	
	
	
	
	

	

}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Advanced KryptonTextBox for Grid. It may look like a label.
	/// </summary>
	[ToolboxItem( true )]
	
	[DefaultProperty( "Text" )]
	[DefaultBindingProperty( "Text" )]
	[Description( "EngineTextBox" )]
	
	[ComVisible( true )]
	public class EngineTextBox : KryptonTextBox
	{
		bool __0x4097;
		string __0x4098 = string.Empty;
		Color? __0x4099;

		[Browsable( true )]
		[EditorBrowsable( EditorBrowsableState.Always )]
		public override bool AutoSize
		{
			get { return base.AutoSize; }
			set { base.AutoSize = value; }
		}

		[DefaultValue( false )]
		public bool LikeLabel
		{
			get { return __0x4097; }
			set
			{
				if( __0x4097 == value )
					return;
				__0x4097 = value;

				ReadOnly = value;
				
				StateCommon.Back.Color1 = GetResolvedPalette().GetBackColor1( __0x4097 ? PaletteBackStyle.PanelClient : PaletteBackStyle.InputControlStandalone, PaletteState.Normal );
				StateCommon.Border.Draw = __0x4097 ? InheritBool.False : InheritBool.True;
				TabStop = !__0x4097;
			}
		}

		public void SetError( string message )
		{
			if( __0x4098 == message )
				return;

			__0x4098 = message;

			if( __0x4099 == null )
				__0x4099 = StateCommon.Border.Color1;

			if( !string.IsNullOrEmpty( __0x4098 ) )
				StateCommon.Border.Color1 = Color.Red;
			else
				StateCommon.Border.Color1 = __0x4099.Value;

			
		}
	}
}




namespace NeoAxis.Editor
{
	public class EngineToolStrip : ToolStrip
	{
		ToolStripItem __0x4100 = null;
		Point __0x4101;
		System.Windows.Forms.Timer __0x4102;
		EngineToolTip __0x4103;
		string __0x4104;
		

		

		public EngineToolStrip()
			: base()
		{
			ShowItemToolTips = false;
			__0x4102 = new System.Windows.Forms.Timer();
			__0x4102.Enabled = false;
			__0x4102.Interval = SystemInformation.MouseHoverTime;
			__0x4102.Tick += new EventHandler( __0x4107 );
			__0x4103 = new EngineToolTip();
		}

		protected override void OnMouseMove( MouseEventArgs mea )
		{
			base.OnMouseMove( mea );
			ToolStripItem __0x4105 = this.GetItemAt( mea.Location );
			if( __0x4100 != __0x4105 ||
				( Math.Abs( __0x4101.X - mea.X ) > SystemInformation.MouseHoverSize.Width || ( Math.Abs( __0x4101.Y - mea.Y ) > SystemInformation.MouseHoverSize.Height ) ) )
			{
				__0x4100 = __0x4105;
				__0x4101 = mea.Location;
				if( __0x4103 != null )
					__0x4103.Hide( this );
				__0x4102.Stop();
				__0x4102.Start();
			}
		}

		protected override void OnMouseClick( MouseEventArgs e )
		{
			base.OnMouseClick( e );
			ToolStripItem __0x4106 = this.GetItemAt( e.Location );
			if( __0x4106 != null && __0x4103 != null )
				__0x4103.Hide( this );
		}

		protected override void OnMouseLeave( EventArgs e )
		{
			base.OnMouseLeave( e );
			__0x4102.Stop();
			if( __0x4103 != null )
				__0x4103.Hide( this );
			__0x4101 = new Point( -50, -50 );
			__0x4100 = null;
		}

		void __0x4107( object __0x4108, EventArgs __0x4109 )
		{
			__0x4102.Stop();
			try
			{
				
				
				
				
				

				if( __0x4100 == null )
				{
					if( __0x4104 != null && __0x4104.Length > 0 )
						__0x4103.SetToolTip( this, __0x4104 );
				}
				else if( ( !( __0x4100 is ToolStripDropDownButton ) && !( __0x4100 is ToolStripSplitButton ) ) ||
					( ( __0x4100 is ToolStripDropDownButton ) && !( (ToolStripDropDownButton)__0x4100 ).DropDown.Visible ) ||
					( ( ( __0x4100 is ToolStripSplitButton ) && !( (ToolStripSplitButton)__0x4100 ).DropDown.Visible ) ) )
				{
					if( __0x4100.ToolTipText != null && __0x4100.ToolTipText.Length > 0 && __0x4103 != null )
						__0x4103.SetToolTip( this, __0x4100.ToolTipText );
				}
			}
			catch { }
		}

		protected override void Dispose( bool disposing )
		{
			base.Dispose( disposing );
			if( disposing )
			{
				__0x4102.Dispose();
				__0x4103.Dispose();
			}
		}
	}
}





namespace NeoAxis.Editor
{
	static class ExtensionMethods
	{
		public static DockWindow GetDockWindow( this KryptonPage page )
		{
			
			if( page.Controls.Count == 0 )
				return null;
			return (DockWindow)page.Controls[ 0 ];
		}

		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	
	
	
	/// <summary>
	/// Represents a container of controls which create only for specific document.
	/// </summary>
	public partial class ForeachDocumentWindowContainer : DockWindow
	{
		/// <summary>
		/// Provides a panel data of <see cref="ForeachDocumentWindowContainer"/>.
		/// </summary>
		public class PanelData
		{
			public DocumentWindow documentWindow;
			public EUserControl control;
		}
		List<PanelData> __0x4110 = new List<PanelData>();
		EDictionary<DocumentWindow, PanelData> __0x4111 = new EDictionary<DocumentWindow, PanelData>();

		PanelData __0x4112;

		

		public ForeachDocumentWindowContainer()
		{
			__0x4130();
		}

		public PanelData GetPanel( DocumentWindow documentWindow )
		{
			if( documentWindow != null )
			{
				PanelData __0x4113;
				if( __0x4111.TryGetValue( documentWindow, out __0x4113 ) )
					return __0x4113;
			}
			return null;
		}

		private void __0x4125( object __0x4131, EventArgs __0x4132 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x4129();
		}

		protected virtual void OnSelectedPanelChanged( PanelData oldSelectedPanel ) { }

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x4112; }
			set
			{
				if( __0x4112 == value )
					return;

				var __0x4114 = __0x4112;
				__0x4112 = value;

				if( __0x4112 != null )
				{
					__0x4112.control.Enabled = true;
					__0x4112.control.Visible = true;
					
				}

				if( __0x4114 != null )
				{
					__0x4114.control.Visible = false;
					__0x4114.control.Enabled = false;
				}

				
				
				
				
				

				
				

				
				
				
				
				
				

				OnSelectedPanelChanged( __0x4114 );
			}
		}

		protected override void OnDestroy()
		{
			while( __0x4110.Count != 0 )
				__0x4127( __0x4110[ __0x4110.Count - 1 ] );

			base.OnDestroy();
		}

		protected virtual void OnCreatePanelControl( PanelData panel ) { }

		PanelData __0x4126( DocumentWindow __0x4133, bool __0x4134 )
		{
			PanelData __0x4115 = new PanelData();
			__0x4115.documentWindow = __0x4133;

			__0x4110.Add( __0x4115 );
			__0x4111.Add( __0x4115.documentWindow, __0x4115 );

			
			OnCreatePanelControl( __0x4115 );

			if( !__0x4134 && __0x4115.control != null )
			{
				__0x4115.control.Visible = false;
				__0x4115.control.Enabled = false;
			}

			return __0x4115;
		}

		void __0x4127( PanelData __0x4135 )
		{
			
			if( SelectedPanel == __0x4135 )
				SelectedPanel = null;

			var __0x4116 = __0x4135.control;
			__0x4116.Parent.Controls.Remove( __0x4116 );
			__0x4116.Dispose();

			__0x4110.Remove( __0x4135 );
			__0x4111.Remove( __0x4135.documentWindow );
		}

		private void __0x4128( object __0x4136, EventArgs __0x4137 )
		{
			
			if( !WinFormsUtility.IsDesignerHosted( this ) )
				__0x4123.Enabled = true;
		}

		public virtual void OnDocumentWindowSelectedObjectsChangedByUser( DocumentWindow documentWindow )
		{
			
			__0x4129();
		}

		void __0x4129()
		{
			var __0x4117 = EditorForm.Instance.WorkspaceController as WorkspaceControllerForForm;
			var __0x4118 = __0x4117.GetDockWindowsRecursive();
			var __0x4119 = __0x4117.SelectedDocumentWindow;

			
			if( __0x4119 != null )
			{
				if( __0x4119.OpenAsSettings )
					return;
				if( __0x4119.Document != null && __0x4119.Document.SpecialMode == "ProjectSettingsUserMode" )
					return;
			}

			
			foreach( PanelData __0x4124 in __0x4110.ToArray() )
			{
				if( !__0x4118.Contains( __0x4124.documentWindow ) )
					__0x4127( __0x4124 );
			}

			
			if( __0x4119 != null && GetPanel( __0x4119 ) == null )
				__0x4126( __0x4119, true );

			
			{
				bool __0x4120 = true;

				if( __0x4119 != null )
				{
					PanelData __0x4121 = GetPanel( __0x4119 );
					if( __0x4121 != null )
					{
						SelectedPanel = __0x4121;
						__0x4120 = false;
					}
				}

				if( __0x4120 )
					SelectedPanel = null;
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ForeachDocumentWindowContainer
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4122 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4122 != null))
            {
                __0x4122.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4130()
        {
			this.__0x4122 = new System.ComponentModel.Container();
			this.__0x4123 = new System.Windows.Forms.Timer(this.__0x4122);
			this.SuspendLayout();
			
			
			
			this.__0x4123.Interval = 10;
			this.__0x4123.Tick += new System.EventHandler(this.__0x4125);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ForeachDocumentContainer";
			this.Size = new System.Drawing.Size(621, 352);
			this.Load += new System.EventHandler(this.__0x4128);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x4123;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Provides read-only access to <see cref="DocumentWindow"/>.
	/// </summary>
	public interface IDocumentWindow 
	{
		DocumentInstance Document { get; }
		bool IsDocumentSaved();
	}
}




namespace NeoAxis.Editor
{
	class ImageCollection : CollectionBase, IList, ICollection, IEnumerable
	{
		class __0x4167
		{
			public Image Image { get; set; }
			public string Key { get; set; }

			public __0x4167( Image image, string key )
			{
				Image = image;
				Key = key;
			}
		}

		public bool Empty => base.Count == 0;

		public bool IsReadOnly => false;

		public Image this[ int __0x4156 ]
		{
			get
			{
				if( __0x4156 < 0 || __0x4156 > base.Count - 1 )
					throw new ArgumentOutOfRangeException( "index" );
				return ( (__0x4167)base.InnerList[ __0x4156 ] ).Image;
				
			}
			set
			{
				if( __0x4156 < 0 || __0x4156 > base.Count - 1 )
					throw new ArgumentOutOfRangeException( "index" );
				if( value == null )
					throw new ArgumentNullException( "value" );
				( (__0x4167)base.InnerList[ __0x4156 ] ).Image = value;
			}
		}

		public Image this[ string __0x4157 ]
		{
			get
			{
				__0x4167 __0x4138 = null;
				foreach( __0x4167 __0x4151 in InnerList )
				{
					if( __0x4151.Key == __0x4157 )
					{
						__0x4138 = __0x4151;
						break;
					}
				}
				Image __0x4139 = null;
				if( __0x4138 != null )
				{
					__0x4139 = __0x4138.Image;
					
				}
				return __0x4139;
			}
			set
			{
				__0x4167 __0x4140 = null;
				foreach( __0x4167 __0x4152 in InnerList )
				{
					if( __0x4152.Key == __0x4157 )
					{
						__0x4140 = __0x4152;
						break;
					}
				}
				if( __0x4140 != null )
					__0x4140.Image = value;
				else
					this.Add( __0x4157, value );
			}
		}

		public StringCollection Keys
		{
			get
			{
				StringCollection __0x4141 = new StringCollection();
				for( int __0x4142 = 0; __0x4142 < base.Count; __0x4142++ )
				{
					string __0x4143 = ( (__0x4167)base.InnerList[ __0x4142 ] ).Key;
					if( __0x4143 != null )
						__0x4141.Add( __0x4143 );
				}
				return __0x4141;
			}
		}

		object IList.this[ int __0x4158 ]
		{
			get { return this[ __0x4158 ]; }
			set
			{
				if( !( value is Image ) )
					throw new ArgumentException( "value" );
				this[ __0x4158 ] = (Image)value;
			}
		}

		public void Add( Icon value )
		{
			if( value == null )
				throw new ArgumentNullException( "value" );
			base.InnerList.Add( new __0x4167( value.ToBitmap(), null ) );
		}

		public void Add( Image value )
		{
			if( value == null )
				throw new ArgumentNullException( "value" );
			base.InnerList.Add( new __0x4167( value, null ) );
		}

		public bool Contains( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			foreach( __0x4167 __0x4153 in base.InnerList )
			{
				if( __0x4153.Image == image )
					return true;
			}
			return false;
		}

		public int IndexOf( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			for( int __0x4144 = 0; __0x4144 < base.InnerList.Count; __0x4144++ )
			{
				if( ( (__0x4167)base.InnerList[ __0x4144 ] ).Image == image )
					return __0x4144;
			}
			return -1;
		}

		public void Remove( Image image )
		{
			if( image == null )
				throw new ArgumentNullException( "image" );
			int __0x4145 = 0;
			while( true )
			{
				if( __0x4145 >= base.InnerList.Count )
					return;
				if( ( (__0x4167)base.InnerList[ __0x4145 ] ).Image == image )
					break;
				__0x4145++;
			}
			base.InnerList.RemoveAt( __0x4145 );
		}

		public void Add( string key, Icon icon )
		{
			base.InnerList.Add( new __0x4167( icon.ToBitmap(), key ) );
		}

		public void Add( string key, Image image )
		{
			base.InnerList.Add( new __0x4167( image, key ) );
		}

		public void AddRange( Image[] images )
		{
			if( images == null )
				throw new ArgumentNullException( "images" );
			foreach( Image __0x4154 in images )
				Add( __0x4154 );
		}

		public bool ContainsKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			foreach( __0x4167 __0x4155 in base.InnerList )
			{
				if( __0x4155.Key == key )
					return true;
			}
			return false;
		}

		public new IEnumerator GetEnumerator()
		{
			Image[] __0x4146 = new Image[ base.Count ];
			for( int __0x4147 = 0; __0x4147 < __0x4146.Length; __0x4147++ )
				__0x4146[ __0x4147 ] = this[ __0x4147 ];
			return __0x4146.GetEnumerator();
		}

		public int IndexOfKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			for( int __0x4148 = 0; __0x4148 < base.InnerList.Count; __0x4148++ )
			{
				if( ( (__0x4167)base.InnerList[ __0x4148 ] ).Key == key )
					return __0x4148;
			}
			return -1;
		}

		public void RemoveByKey( string key )
		{
			if( key == null )
				throw new ArgumentNullException( "image" );
			int __0x4149 = 0;
			while( true )
			{
				if( __0x4149 >= base.InnerList.Count )
					return;
				if( ( (__0x4167)base.InnerList[ __0x4149 ] ).Key == key )
					break;
				__0x4149++;
			}
			base.InnerList.RemoveAt( __0x4149 );
		}

		public void SetKeyName( int index, string name )
		{
			if( name == null )
				throw new ArgumentNullException( "name" );

			( (__0x4167)base.InnerList[ index ] ).Key = name;
		}

		void ICollection.CopyTo( Array __0x4159, int __0x4160 )
		{
			for( int __0x4150 = 0; __0x4150 < base.Count; __0x4150++ )
				__0x4159.SetValue( this[ __0x4150 ], __0x4160++ );
		}

		int IList.Add( object __0x4161 )
		{
			if( !( __0x4161 is Image ) )
				throw new ArgumentException( "value" );
			Add( (Image)__0x4161 );
			return base.Count - 1;
		}

		bool IList.Contains( object __0x4162 )
		{
			if( __0x4162 is Image )
				return Contains( (Image)__0x4162 );
			return false;
		}

		int IList.IndexOf( object __0x4163 )
		{
			if( __0x4163 is Image )
				return IndexOf( (Image)__0x4163 );
			return -1;
		}

		void IList.Insert( int __0x4164, object __0x4165 )
		{
			if( !( __0x4165 is Image ) )
				throw new ArgumentException( "value" );
			base.InnerList.Insert( __0x4164, new __0x4167( (Image)__0x4165, null ) );
		}

		void IList.Remove( object __0x4166 )
		{
			if( __0x4166 is Image )
				Remove( (Image)__0x4166 );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Import Window.
	/// </summary>
	public partial class ImportWindow : DockWindow
	{
		[Browsable( false )]
		public string InitialDestinationFolder = "";

		

		public ImportWindow()
		{
			__0x4202();

			
			__0x4185.Width = __0x4185.Parent.Width - DpiHelper.Default.ScaleValue( 8 );

			__0x4179.Values.Image = EditorResourcesCache.SelectFolder;

			CloseByEscape = true;

			WindowTitle = EditorLocalization.Translate( "ImportWindow", WindowTitle );
			EditorLocalization.TranslateForm( "ImportWindow", __0x4183 );

			EditorThemeUtility.ApplyDarkThemeToForm( __0x4183 );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x4185 );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4187.Location = new Point( __0x4186.Location.X + __0x4186.Width + DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
			

			__0x4187.Text = InitialDestinationFolder;

			__0x4190();

			__0x4182.Start();

			__0x4194();
		}

		void __0x4190()
		{
			__0x4176.Init( null, null, null );

			var __0x4168 = new List<ContentBrowser.Item>();
			foreach( var __0x4188 in DriveInfo.GetDrives() )
			{
				var __0x4169 = new ContentBrowserItem_File( __0x4176, null, __0x4188.Name, true );
				__0x4169.imageKey = "Folder";
				__0x4168.Add( __0x4169 );
			}
			__0x4176.SetData( __0x4168 );
		}

		private void __0x4191( ContentBrowser __0x4203, ContentBrowser.Item __0x4204, ref bool __0x4205 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4205 = true;
			if( __0x4193( out _ ) )
				__0x4195( null, null );
		}

		string __0x4192( string __0x4206 )
		{
			return EditorLocalization.Translate( "ImportWindow", __0x4206 );
		}

		bool __0x4193( out string __0x4207 )
		{
			__0x4207 = "";

			if( __0x4176.SelectedItems.Length == 0 )
			{
				__0x4207 = __0x4192( "No selected items." );
				return false;
			}

			return true;
		}

		void __0x4194()
		{
			
			__0x4185.Width = __0x4185.Parent.Width - DpiHelper.Default.ScaleValue( 8 );
			__0x4185.Height = DpiHelper.Default.ScaleValue( 25 );

			__0x4179.Location = new Point( __0x4185.Width - __0x4179.Width, __0x4179.Location.Y );

			__0x4187.Width = __0x4179.Location.X - DpiHelper.Default.ScaleValue( 4 ) - __0x4186.Bounds.Right;

			__0x4181.Location = new Point( __0x4185.Location.X, __0x4185.Bounds.Bottom + DpiHelper.Default.ScaleValue( 10 ) );
			__0x4181.Size = new Size(
				__0x4175.Bounds.Right - __0x4181.Location.X,
				__0x4175.Bounds.Top - DpiHelper.Default.ScaleValue( 10 ) - __0x4181.Location.Y );

			__0x4174.Enabled = __0x4193( out string reason );
			
			__0x4184.Text = reason;
		}

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		

		private void __0x4195( object __0x4208, EventArgs __0x4209 )
		{
			if( !__0x4200() )
				return;
			Close();
		}

		
		
		
		

		
		

		private void __0x4196( object __0x4210, EventArgs __0x4211 )
		{
			Close();
		}

		private void __0x4197( object __0x4212, EventArgs __0x4213 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x4194();
		}

		private void __0x4198( object __0x4214, EventArgs __0x4215 )
		{
		}

		private void __0x4199( object __0x4216, EventArgs __0x4217 )
		{
			again:;

			string __0x4170 = VirtualPathUtility.GetRealPathByVirtual( __0x4187.Text );

			if( EditorUtility.ShowOpenFileDialog( true, __0x4170, null, out string fileName ) )
			{
				__0x4170 = fileName;

				if( !VirtualPathUtility.GetVirtualPathByReal( __0x4170, out var virtualPath ) )
				{
					EditorMessageBox.ShowWarning( __0x4192( "Destination folder must be inside Assets folder." ) );
					goto again;
				}

				__0x4187.Text = virtualPath;
			}
		}

		
		
		
		

		bool __0x4200()
		{
			string __0x4171 = VirtualPathUtility.GetRealPathByVirtual( __0x4187.Text );

			List<string> __0x4172 = new List<string>();
			foreach( var __0x4189 in __0x4176.SelectedItems )
			{
				if( __0x4189 is ContentBrowserItem_File fileItem )
					__0x4172.Add( fileItem.FullPath );
			}

			if( __0x4172.Count != 0 )
				EditorImportResource.Import( __0x4172.ToArray(), __0x4171 );

			return true;
		}

		private void __0x4201( object __0x4218, EventArgs __0x4219 )
		{

		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4194();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ImportWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4173 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x4173 != null ) )
            {
                __0x4173.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4202()
        {
			this.__0x4173 = new System.ComponentModel.Container();
			this.__0x4174 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4175 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4177 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4176 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4185 = new System.Windows.Forms.Panel();
			this.__0x4186 = new System.Windows.Forms.Label();
			this.__0x4187 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4179 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4184 = new System.Windows.Forms.Label();
			this.__0x4180 = new System.Windows.Forms.Label();
			this.__0x4183 = new NeoAxis.EUserControl();
			this.__0x4181 = new System.Windows.Forms.TableLayoutPanel();
			this.__0x4178 = new System.Windows.Forms.Label();
			this.__0x4182 = new System.Windows.Forms.Timer(this.__0x4173);
			((System.ComponentModel.ISupportInitialize)(this.__0x4177)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4177.Panel1)).BeginInit();
			this.__0x4177.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4177.Panel2)).BeginInit();
			this.__0x4177.Panel2.SuspendLayout();
			this.__0x4177.SuspendLayout();
			this.__0x4185.SuspendLayout();
			this.__0x4183.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4174.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4174.Location = new System.Drawing.Point(375, 655);
			this.__0x4174.Name = "buttonImport";
			this.__0x4174.Size = new System.Drawing.Size(147, 32);
			this.__0x4174.TabIndex = 0;
			this.__0x4174.Values.Text = "Import";
			this.__0x4174.Click += new System.EventHandler(this.__0x4195);
			
			
			
			this.__0x4175.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4175.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4175.Location = new System.Drawing.Point(528, 655);
			this.__0x4175.Name = "buttonClose";
			this.__0x4175.Size = new System.Drawing.Size(147, 32);
			this.__0x4175.TabIndex = 1;
			this.__0x4175.Values.Text = "Close";
			this.__0x4175.Click += new System.EventHandler(this.__0x4196);
			
			
			
			this.__0x4177.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4177.Location = new System.Drawing.Point(12, 12);
			this.__0x4177.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4177.Panel1.Controls.Add(this.__0x4176);
			
			
			
			this.__0x4177.Panel2.Controls.Add(this.__0x4185);
			this.__0x4177.Panel2.Controls.Add(this.__0x4184);
			this.__0x4177.Panel2.Controls.Add(this.__0x4180);
			this.__0x4177.Panel2.Controls.Add(this.__0x4183);
			this.__0x4177.Size = new System.Drawing.Size(1030, 690);
			this.__0x4177.SplitterDistance = 350;
			this.__0x4177.SplitterPercent = 0.33980582524271846D;
			this.__0x4177.TabIndex = 3;
			
			
			
			this.__0x4176.CanSelectObjectSettings = false;
			this.__0x4176.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4176.FilteringMode = null;
			this.__0x4176.Location = new System.Drawing.Point(0, 0);
			this.__0x4176.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4176.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x4176.MultiSelect = true;
			this.__0x4176.Name = "contentBrowser1";
			this.__0x4176.ReadOnlyHierarchy = false;
			this.__0x4176.Size = new System.Drawing.Size(350, 690);
			this.__0x4176.TabIndex = 2;
			this.__0x4176.ThisIsSettingsWindow = false;
			this.__0x4176.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4191);
			
			
			
			
   
			this.__0x4185.Controls.Add(this.__0x4186);
			this.__0x4185.Controls.Add(this.__0x4187);
			this.__0x4185.Controls.Add(this.__0x4179);
			this.__0x4185.Location = new System.Drawing.Point(11, 22);
			this.__0x4185.Name = "panelName";
			this.__0x4185.Size = new System.Drawing.Size(664, 26);
			this.__0x4185.TabIndex = 10;
			
			
			
			this.__0x4186.AutoSize = true;
			this.__0x4186.Location = new System.Drawing.Point(4, 5);
			this.__0x4186.Name = "labelName";
			this.__0x4186.Size = new System.Drawing.Size(54, 17);
			this.__0x4186.TabIndex = 6;
			this.__0x4186.Text = "Assets\\";
			this.__0x4186.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			
			
			
			
   
			this.__0x4187.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x4187.Location = new System.Drawing.Point(63, 2);
			this.__0x4187.Name = "textBoxDestinationFolder";
			this.__0x4187.Size = new System.Drawing.Size(566, 21);
			this.__0x4187.TabIndex = 3;
			
			
			
			
			this.__0x4179.Location = new System.Drawing.Point(634, 0);
			this.__0x4179.Name = "buttonDestinationFolderBrowse";
			this.__0x4179.Size = new System.Drawing.Size(30, 26);
			this.__0x4179.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4179.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4179.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4179.TabIndex = 5;
			this.__0x4179.Values.Image = global::NeoAxis.Properties.Resources.SelectFolder_16;
			this.__0x4179.Values.Text = "";
			this.__0x4179.Click += new System.EventHandler(this.__0x4199);
			
			
			
			this.__0x4184.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4184.ForeColor = System.Drawing.Color.Red;
			this.__0x4184.Location = new System.Drawing.Point(222, 635);
			this.__0x4184.Name = "labelError";
			this.__0x4184.Size = new System.Drawing.Size(453, 17);
			this.__0x4184.TabIndex = 3;
			this.__0x4184.Text = "Error";
			this.__0x4184.Visible = false;
			
			
			
			this.__0x4180.AutoSize = true;
			this.__0x4180.Location = new System.Drawing.Point(26, 112);
			this.__0x4180.Name = "labelCreationPath";
			this.__0x4180.Size = new System.Drawing.Size(199, 17);
			this.__0x4180.TabIndex = 7;
			this.__0x4180.Text = "Creation path: CC\\FF\\BB.mesh";
			this.__0x4180.Visible = false;
			
			
			
			this.__0x4183.Controls.Add(this.__0x4181);
			this.__0x4183.Controls.Add(this.__0x4178);
			this.__0x4183.Controls.Add(this.__0x4174);
			this.__0x4183.Controls.Add(this.__0x4175);
			this.__0x4183.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4183.Location = new System.Drawing.Point(0, 0);
			this.__0x4183.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4183.Name = "eUserControl1";
			this.__0x4183.Size = new System.Drawing.Size(675, 690);
			this.__0x4183.TabIndex = 2;
			this.__0x4183.Load += new System.EventHandler(this.__0x4201);
			
			
			
			
   
   
			this.__0x4181.ColumnCount = 1;
			this.__0x4181.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4181.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4181.Location = new System.Drawing.Point(13, 132);
			this.__0x4181.Name = "tableLayoutPanel1";
			this.__0x4181.RowCount = 1;
			this.__0x4181.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4181.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4181.Size = new System.Drawing.Size(662, 500);
			this.__0x4181.TabIndex = 9;
			this.__0x4181.Visible = false;
			
			
			
			this.__0x4178.AutoSize = true;
			this.__0x4178.Location = new System.Drawing.Point(10, 0);
			this.__0x4178.Name = "label1";
			this.__0x4178.Size = new System.Drawing.Size(123, 17);
			this.__0x4178.TabIndex = 4;
			this.__0x4178.Text = "Destination folder:";
			
			
			
			this.__0x4182.Interval = 50;
			this.__0x4182.Tick += new System.EventHandler(this.__0x4197);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x4177);
			this.Name = "ImportWindow";
			this.Size = new System.Drawing.Size(1054, 714);
			this.WindowTitle = "Import";
			((System.ComponentModel.ISupportInitialize)(this.__0x4177.Panel1)).EndInit();
			this.__0x4177.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4177.Panel2)).EndInit();
			this.__0x4177.Panel2.ResumeLayout(false);
			this.__0x4177.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4177)).EndInit();
			this.__0x4177.ResumeLayout(false);
			this.__0x4185.ResumeLayout(false);
			this.__0x4185.PerformLayout();
			this.__0x4183.ResumeLayout(false);
			this.__0x4183.PerformLayout();
			this.ResumeLayout(false);

        }

        #endregion

        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4174;
        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4175;
		private ContentBrowser __0x4176;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4177;
		private System.Windows.Forms.Label __0x4178;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4179;
		private System.Windows.Forms.Label __0x4180;
		private System.Windows.Forms.TableLayoutPanel __0x4181;
		private System.Windows.Forms.Timer __0x4182;
		private EUserControl __0x4183;
		private System.Windows.Forms.Label __0x4184;
		private System.Windows.Forms.Panel __0x4185;
		private System.Windows.Forms.Label __0x4186;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4187;
	}
}



namespace NeoAxis.Editor
{
	
	
	
	
	

	
	
	
	
	
	
	

	/// <summary>
	/// Helper class, to create initial DocumentWindow workspace configuration, and save to XML config.
	/// 
	/// only for wokspaces child windows.
	/// </summary>
	public static class KryptonConfigGenerator
	{
		public static string CreateEditorDocumentXmlConfiguration( IEnumerable<Component> components, Component selected = null )
		{
			var __0x4220 = new List<WorkspaceControllerForWindow.WindowConfig>();
			int __0x4221 = -1;

			foreach( var __0x4228 in components )
			{
				__0x4220.Add( WorkspaceControllerForWindow.WindowConfig.FromComponent( __0x4228 ) );

				if( selected == __0x4228 )
					__0x4221 = __0x4220.Count - 1;
			}
			return CreateEditorDocumentXmlConfiguration( __0x4220, __0x4221 );
		}

		internal static string CreateEditorDocumentXmlConfiguration( List<WorkspaceControllerForWindow.WindowConfig> config, int selectedIndex = -1 )
		{
			var __0x4222 = new KryptonDockingManager();
			__0x4222.PageSaving += __0x4230;

			var __0x4223 = new KryptonDockingWorkspace( "DockingWorkspace" );
			__0x4222.Add( __0x4223 );

			var __0x4224 = new List<KryptonPage>();
			foreach( var __0x4229 in config )
				__0x4224.Add( new KryptonPage() { Tag = __0x4229 } );

			var __0x4225 = __0x4222.AddToWorkspace( "DockingWorkspace", __0x4224.ToArray() );
			if( selectedIndex != -1 )
				__0x4225.SelectPage( __0x4224[ selectedIndex ].UniqueName );

			using( var __0x4226 = new MemoryStream() )
			{
				__0x4222.SaveConfigToStream( __0x4226, System.Text.Encoding.Unicode, Formatting.None );
				__0x4222.Dispose();

				return System.Text.Encoding.Unicode.GetString( __0x4226.ToArray() );
			}
		}

		private static void __0x4230( object __0x4231, DockPageSavingEventArgs __0x4232 )
		{
			var __0x4227 = __0x4232.Page.Tag as WorkspaceControllerForWindow.WindowConfig;
			__0x4227.Save( __0x4232.XmlWriter );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupListBox : KryptonRibbonGroupCustomControl
	{
		KryptonRibbonGroupListBoxControl __0x4233;

		
		Dictionary<Image, string> __0x4234 = new Dictionary<Image, string>();
		

		

		public KryptonRibbonGroupListBox()
		{
			__0x4244();

			__0x4233 = new KryptonRibbonGroupListBoxControl();
			CustomControl = __0x4233;
		}

		[Browsable( false )]
		public KryptonRibbonGroupListBoxControl Control
		{
			get { return __0x4233; }
		}

		public void SetItems( IList<(string, Image)> dataItems )
		{
			var __0x4235 = Control.contentBrowser1;

			
			int __0x4236;
			if( __0x4235.SelectedItems.Length != 0 )
				__0x4236 = (int)__0x4235.SelectedItems[ 0 ].Tag;
			else
				__0x4236 = -1;

			var __0x4237 = new List<ContentBrowser.Item>();

			var __0x4238 = false;

			for( int __0x4239 = 0; __0x4239 < dataItems.Count; __0x4239++ )
			{
				var __0x4240 = dataItems[ __0x4239 ];

				var __0x4241 = new ContentBrowserItem_Virtual( __0x4235, null, __0x4240.Item1 );
				__0x4241.Tag = __0x4239;

				var __0x4242 = __0x4240.Item2;
				if( __0x4242 != null )
				{
					if( !__0x4234.TryGetValue( __0x4242, out var imageKey ) )
					{
						

						imageKey = "_Image_" + __0x4234.Count.ToString();

						__0x4235.AddImageKey( imageKey, __0x4242 );

						__0x4234.Add( __0x4242, imageKey );

						__0x4238 = true;
					}

					__0x4241.imageKey = imageKey;
				}

				__0x4237.Add( __0x4241 );
			}

			if( __0x4238 )
				__0x4235.UpdateListImages();

			
			__0x4235.SetData( __0x4237, false );

			
			if( __0x4236 >= 0 && __0x4236 < __0x4235.Items.Count )
				__0x4235.SelectItems( new ContentBrowser.Item[] { __0x4237[ __0x4236 ] } );
			else if( __0x4235.Items.Count != 0 )
				__0x4235.SelectItems( new ContentBrowser.Item[] { __0x4237[ 0 ] } );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupListBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4243 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4243 != null ) )
			{
				__0x4243.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4244()
		{
			__0x4243 = new System.ComponentModel.Container();
		}

		#endregion
	}
}




namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupListBoxControl : EUserControl
	{
		public KryptonRibbonGroupListBoxControl()
		{
			__0x4247();

			if( kryptonLabel1.Height < kryptonLabel1.PreferredSize.Height )
				kryptonLabel1.Height = kryptonLabel1.PreferredSize.Height;
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x4245 = base.CreateParams;
				__0x4245.ExStyle |= 0x02000000;
				return __0x4245;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupListBoxControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4246 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4246 != null ) )
			{
				__0x4246.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4247()
		{
			this.kryptonLabel1 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonSplitContainer1 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowser1 = new NeoAxis.Editor.ContentBrowser();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.kryptonLabel1.AutoSize = false;
			this.kryptonLabel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonLabel1.Location = new System.Drawing.Point(0, 0);
			this.kryptonLabel1.Name = "kryptonLabel1";
			this.kryptonLabel1.Size = new System.Drawing.Size(169, 18);
			this.kryptonLabel1.StateCommon.Padding = new System.Windows.Forms.Padding(0);
			this.kryptonLabel1.StateCommon.ShortText.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.kryptonLabel1.StateCommon.ShortText.TextH = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.kryptonLabel1.StateCommon.ShortText.TextV = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Far;
			this.kryptonLabel1.TabIndex = 0;
			this.kryptonLabel1.Values.Text = "kryptonLabel1";
			
			
			
			this.kryptonSplitContainer1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.kryptonSplitContainer1.IsSplitterFixed = true;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer1.Margin = new System.Windows.Forms.Padding(0);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			this.kryptonSplitContainer1.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.contentBrowser1);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.kryptonLabel1);
			this.kryptonSplitContainer1.Panel2MinSize = 18;
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(169, 89);
			this.kryptonSplitContainer1.SplitterDistance = 70;
			this.kryptonSplitContainer1.SplitterPercent = 0.7865168539325843D;
			this.kryptonSplitContainer1.SplitterWidth = 1;
			this.kryptonSplitContainer1.TabIndex = 3;
			
			
			
			this.contentBrowser1.CanSelectObjectSettings = false;
			this.contentBrowser1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowser1.FilteringMode = null;
			this.contentBrowser1.ListViewModeOverride = null;
			this.contentBrowser1.Location = new System.Drawing.Point(0, 0);
			this.contentBrowser1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.contentBrowser1.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowser1.Name = "contentBrowser1";
			this.contentBrowser1.ReadOnlyHierarchy = false;
			this.contentBrowser1.ShowToolBar = false;
			this.contentBrowser1.Size = new System.Drawing.Size(169, 70);
			this.contentBrowser1.TabIndex = 2;
			this.contentBrowser1.ThisIsSettingsWindow = false;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.kryptonSplitContainer1);
			this.Name = "KryptonRibbonGroupListBoxControl";
			this.Size = new System.Drawing.Size(172, 92);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion
		public ComponentFactory.Krypton.Toolkit.KryptonLabel kryptonLabel1;
		public ContentBrowser contentBrowser1;
		public ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupSlider : KryptonRibbonGroupCustomControl
	{
		KryptonRibbonGroupSliderControl __0x4248;

		public KryptonRibbonGroupSlider()
		{
			__0x4250();

			__0x4248 = new KryptonRibbonGroupSliderControl();
			CustomControl = __0x4248;
		}

		[Browsable( false )]
		public KryptonRibbonGroupSliderControl Control
		{
			get { return __0x4248; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupSlider
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4249 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4249 != null ) )
			{
				__0x4249.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4250()
		{
			__0x4249 = new System.ComponentModel.Container();
		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class KryptonRibbonGroupSliderControl : UserControl
	{
		double __0x4251;
		double __0x4252;
		double __0x4253;
		double __0x4254;

		public event EventHandler ValueChanged;

		bool __0x4255;

		

		public KryptonRibbonGroupSliderControl()
		{
			__0x4267();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( kryptonLabel1.Height < kryptonLabel1.PreferredSize.Height )
				kryptonLabel1.Height = kryptonLabel1.PreferredSize.Height;
		}

		public void Init( double minimum, double maximum, double exponentialPower )
		{
			this.__0x4251 = minimum;
			this.__0x4252 = maximum;
			this.__0x4253 = exponentialPower;
		}

		public double GetValue()
		{
			return __0x4254;
		}

		public void SetValue( double value )
		{
			this.__0x4254 = value;

			__0x4255 = true;
			__0x4262();
			__0x4263();
			__0x4255 = false;
		}

		void __0x4262()
		{
			double __0x4256 = ( __0x4254 - __0x4251 ) / ( __0x4252 - __0x4251 );
			if( __0x4253 != 0 )
				__0x4256 = Math.Pow( __0x4256, 1.0 / __0x4253 );
			kryptonTrackBar1.Value = MathEx.Clamp( (int)( __0x4256 * 1000 ), 0, 1000 );
		}

		void __0x4263()
		{
			var __0x4257 = __0x4254.ToString( "G29" );
			
			
			if( __0x4257.IndexOf( "-" ) == -1 && __0x4257.IndexOf( "." ) != -1 && __0x4257.IndexOf( "." ) <= 3 && __0x4257.Length > 4 )
			{
				__0x4257 = __0x4257.Substring( 0, 4 );
				if( __0x4257[ __0x4257.Length - 1 ] == '.' )
					__0x4257 = __0x4257.Substring( 0, __0x4257.Length - 1 );
			}
			kryptonTextBox1.Text = __0x4257;
			
		}

		private void __0x4264( object __0x4268, EventArgs __0x4269 )
		{
			if( __0x4255 )
				return;

			double __0x4258 = (double)kryptonTrackBar1.Value / 1000;
			if( __0x4253 != 0 )
				__0x4258 = Math.Pow( __0x4258, __0x4253 );
			__0x4258 = __0x4251 + __0x4258 * ( __0x4252 - __0x4251 );
			var __0x4259 = MathEx.Clamp( __0x4258, __0x4251, __0x4252 );

			if( __0x4259 != __0x4254 )
			{
				__0x4254 = __0x4259;

				__0x4255 = true;
				__0x4263();
				__0x4255 = false;

				ValueChanged?.Invoke( this, EventArgs.Empty );
			}
		}

		private void __0x4265( object __0x4270, EventArgs __0x4271 )
		{
			if( __0x4255 )
				return;

			if( double.TryParse( kryptonTextBox1.Text, out var newValue ) )
			{
				if( newValue != __0x4254 )
				{
					__0x4254 = newValue;

					__0x4255 = true;
					__0x4262();
					__0x4255 = false;

					ValueChanged?.Invoke( this, EventArgs.Empty );
				}
			}
		}

		private void __0x4266( object __0x4272, PaintEventArgs __0x4273 )
		{

		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x4260 = base.CreateParams;
				__0x4260.ExStyle |= 0x02000000;
				return __0x4260;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class KryptonRibbonGroupSliderControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4261 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4261 != null ) )
			{
				__0x4261.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4267()
		{
			this.kryptonLabel1 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.kryptonTrackBar1 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.kryptonTextBox1 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.kryptonSplitContainer1 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.kryptonSplitContainer2 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).BeginInit();
			this.kryptonSplitContainer1.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).BeginInit();
			this.kryptonSplitContainer1.Panel2.SuspendLayout();
			this.kryptonSplitContainer1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel1)).BeginInit();
			this.kryptonSplitContainer2.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel2)).BeginInit();
			this.kryptonSplitContainer2.Panel2.SuspendLayout();
			this.kryptonSplitContainer2.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.kryptonLabel1.AutoSize = false;
			this.kryptonLabel1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonLabel1.Location = new System.Drawing.Point(0, 0);
			this.kryptonLabel1.Name = "kryptonLabel1";
			this.kryptonLabel1.Size = new System.Drawing.Size(110, 62);
			this.kryptonLabel1.StateCommon.ShortText.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.kryptonLabel1.StateCommon.ShortText.TextH = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Center;
			this.kryptonLabel1.StateCommon.ShortText.TextV = ComponentFactory.Krypton.Toolkit.PaletteRelativeAlign.Near;
			this.kryptonLabel1.TabIndex = 0;
			this.kryptonLabel1.Values.Text = "kryptonLabel1";
			this.kryptonLabel1.Paint += new System.Windows.Forms.PaintEventHandler(this.__0x4266);
			
			
			
			this.kryptonTrackBar1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonTrackBar1.DrawBackground = true;
			this.kryptonTrackBar1.LargeChange = 100;
			this.kryptonTrackBar1.Location = new System.Drawing.Point(0, 0);
			this.kryptonTrackBar1.Maximum = 1000;
			this.kryptonTrackBar1.Name = "kryptonTrackBar1";
			this.kryptonTrackBar1.Size = new System.Drawing.Size(75, 25);
			this.kryptonTrackBar1.SmallChange = 10;
			this.kryptonTrackBar1.TabIndex = 1;
			this.kryptonTrackBar1.TickStyle = System.Windows.Forms.TickStyle.None;
			this.kryptonTrackBar1.ValueChanged += new System.EventHandler(this.__0x4264);
			
			
			
			this.kryptonTextBox1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonTextBox1.Location = new System.Drawing.Point(0, 0);
			this.kryptonTextBox1.Name = "kryptonTextBox1";
			this.kryptonTextBox1.Size = new System.Drawing.Size(30, 23);
			this.kryptonTextBox1.TabIndex = 2;
			this.kryptonTextBox1.Text = "1.0";
			this.kryptonTextBox1.TextChanged += new System.EventHandler(this.__0x4265);
			
			
			
			this.kryptonSplitContainer1.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer1.Dock = System.Windows.Forms.DockStyle.Fill;
			this.kryptonSplitContainer1.FixedPanel = System.Windows.Forms.FixedPanel.Panel2;
			this.kryptonSplitContainer1.IsSplitterFixed = true;
			this.kryptonSplitContainer1.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer1.Name = "kryptonSplitContainer1";
			
			
			
			this.kryptonSplitContainer1.Panel1.Controls.Add(this.kryptonTrackBar1);
			
			
			
			this.kryptonSplitContainer1.Panel2.Controls.Add(this.kryptonTextBox1);
			this.kryptonSplitContainer1.Panel2MinSize = 28;
			this.kryptonSplitContainer1.Size = new System.Drawing.Size(110, 25);
			this.kryptonSplitContainer1.SplitterDistance = 75;
			this.kryptonSplitContainer1.SplitterPercent = 0.68181818181818177D;
			this.kryptonSplitContainer1.TabIndex = 3;
			
			
			
			this.kryptonSplitContainer2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonSplitContainer2.Cursor = System.Windows.Forms.Cursors.Default;
			this.kryptonSplitContainer2.IsSplitterFixed = true;
			this.kryptonSplitContainer2.Location = new System.Drawing.Point(0, 0);
			this.kryptonSplitContainer2.Name = "kryptonSplitContainer2";
			this.kryptonSplitContainer2.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.kryptonSplitContainer2.Panel1.Controls.Add(this.kryptonSplitContainer1);
			this.kryptonSplitContainer2.Panel1MinSize = 22;
			
			
			
			this.kryptonSplitContainer2.Panel2.Controls.Add(this.kryptonLabel1);
			this.kryptonSplitContainer2.Panel2MinSize = 10;
			this.kryptonSplitContainer2.Size = new System.Drawing.Size(110, 92);
			this.kryptonSplitContainer2.SplitterDistance = 25;
			this.kryptonSplitContainer2.SplitterPercent = 0.27173913043478259D;
			this.kryptonSplitContainer2.TabIndex = 4;
			
			
			
			this.Controls.Add(this.kryptonSplitContainer2);
			this.Name = "KryptonRibbonGroupSliderControl";
			this.Size = new System.Drawing.Size(110, 92);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel1)).EndInit();
			this.kryptonSplitContainer1.Panel1.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1.Panel2)).EndInit();
			this.kryptonSplitContainer1.Panel2.ResumeLayout(false);
			this.kryptonSplitContainer1.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer1)).EndInit();
			this.kryptonSplitContainer1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel1)).EndInit();
			this.kryptonSplitContainer2.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2.Panel2)).EndInit();
			this.kryptonSplitContainer2.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.kryptonSplitContainer2)).EndInit();
			this.kryptonSplitContainer2.ResumeLayout(false);
			this.ResumeLayout(false);

		}

		#endregion
		public ComponentFactory.Krypton.Toolkit.KryptonLabel kryptonLabel1;
		public ComponentFactory.Krypton.Toolkit.KryptonTrackBar kryptonTrackBar1;
		public ComponentFactory.Krypton.Toolkit.KryptonTextBox kryptonTextBox1;
		public ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer2;
		public ComponentFactory.Krypton.Toolkit.KryptonSplitContainer kryptonSplitContainer1;
	}
}





namespace System.Windows.Forms

{
	public class LabelExtended : Label
	{
		public LabelExtended()
		{

			
			try
			{
				var __0x4274 = typeof( Label ).GetField( "controlToolTip", BindingFlags.NonPublic | BindingFlags.Instance );
				__0x4274?.SetValue( this, true );
			}
			catch { }

		}
	}
}





namespace NeoAxis.Editor
{
	public static class LoginUtility
	{
		const string __0x4275 = @"SOFTWARE\NeoAxis";

		static volatile string __0x4276 = "";
		static volatile ESet<string> __0x4277 = new ESet<string>();
		static volatile string __0x4278 = "";
		static volatile string __0x4279 = "";
		

		static string __0x4280;

		static string __0x4281;

		

		public static bool GetCurrentLicense( out string email, out string hash )
		{
#if !DEPLOY
			try
			{
				
				var __0x4282 = Registry.CurrentUser.OpenSubKey( __0x4275 );

				
				if( __0x4282 != null )
				{
					email = ( __0x4282.GetValue( "LoginEmail" ) ?? "" ).ToString();
					var __0x4283 = __0x4282.GetValue( "LoginHash" );
					if( __0x4283 != null )
						hash = EncryptDecrypt( __0x4283.ToString() );
					else
						hash = "";
					
					__0x4282.Close();
					return true;
				}
			}
			catch { }
#endif

			email = "";
			hash = "";
			return false;
		}

		internal static string EncryptDecrypt( string input )
		{
			char[] __0x4284 = { 'K', 'C', 'Q' }; 
			char[] __0x4285 = new char[ input.Length ];

			for( int __0x4286 = 0; __0x4286 < input.Length; __0x4286++ )
				__0x4285[ __0x4286 ] = (char)( input[ __0x4286 ] ^ __0x4284[ __0x4286 % __0x4284.Length ] );

			return new string( __0x4285 );
		}

		public static void SetCurrentLicense( string email, string hash )
		{
#if !DEPLOY
			try
			{
				var __0x4287 = Registry.CurrentUser.CreateSubKey( __0x4275 );

				__0x4287.SetValue( "LoginEmail", email );
				__0x4287.SetValue( "LoginHash", EncryptDecrypt( hash ) );
				__0x4287.Close();
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			RequestFullLicenseInfo();
#endif
		}

		static void __0x4307( object __0x4308 )
		{
			try
			{
				var __0x4288 = (Dictionary<string, string>)__0x4308;
				var __0x4289 = __0x4288[ "Email" ];
				var __0x4290 = __0x4288[ "Hash" ];

				var __0x4291 = Convert.ToBase64String( Encoding.UTF8.GetBytes( __0x4289 ) ).Replace( "=", "" );
				var __0x4292 = Convert.ToBase64String( Encoding.UTF8.GetBytes( __0x4290 ) ).Replace( "=", "" );

				string __0x4293 = $"email={__0x4291}&hash={__0x4292}";
				byte[] __0x4294 = Encoding.UTF8.GetBytes( __0x4293 );

				{
					WebRequest __0x4295 = WebRequest.Create( @"https://www.neoaxis.com/api/get_license/" );
					
					__0x4295.Method = "POST";
					__0x4295.ContentType = "application/x-www-form-urlencoded";
					__0x4295.ContentLength = __0x4294.Length;
					Stream __0x4296 = __0x4295.GetRequestStream();
					__0x4296.Write( __0x4294, 0, __0x4294.Length );
					__0x4296.Close();

					string __0x4297;
					using( var __0x4298 = (HttpWebResponse)__0x4295.GetResponse() )
					using( var __0x4299 = __0x4298.GetResponseStream() )
					using( var __0x4300 = new StreamReader( __0x4299 ) )
						__0x4297 = __0x4300.ReadToEnd();

					__0x4279 = "";
					if( !string.IsNullOrEmpty( __0x4297 ) )
						__0x4276 = __0x4297;
					
					
					
					
					
					
					
					
					else
					{
						__0x4276 = "";
						__0x4279 = "Invalid username or password.";
					}
				}

				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				
				
				

				
				
				
				
				
				
				
				
				

				
				
				
				
				

				
				

				
				


				__0x4280 = null;
			}
			catch 
			{
				
			}
		}

		public static void RequestFullLicenseInfo()
		{
			__0x4276 = "";
			__0x4277.Clear();
			__0x4278 = "";

			if( !GetCurrentLicense( out var email, out var hash ) )
				return;

			var __0x4301 = new Dictionary<string, string>();
			__0x4301[ "Email" ] = email;
			__0x4301[ "Hash" ] = hash;

			var __0x4302 = new Thread( __0x4307 );
			__0x4302.Start( __0x4301 );
		}

		public static bool GetRequestedFullLicenseInfo( out string license, out ESet<string> purchasedProducts, out string tokenTransactions, out string error )
		{
			if( !string.IsNullOrEmpty( __0x4276 ) || !string.IsNullOrEmpty( __0x4279 ) )
			{
				license = __0x4276;
				purchasedProducts = __0x4277;
				tokenTransactions = __0x4278;
				error = __0x4279;
				
				return true;
			}
			else
			{
				license = "";
				purchasedProducts = new ESet<string>();
				tokenTransactions = "";
				error = "";
				
				return false;
			}
		}

		
		
		

		

		
		
		
		

		
		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		

		
		
		

		public static string GetMachineId()
		{
#if !DEPLOY
			if( string.IsNullOrEmpty( __0x4281 ) )
			{
				try
				{
					var __0x4303 = new System.Management.ManagementClass( "win32_processor" );
					foreach( System.Management.ManagementObject __0x4306 in __0x4303.GetInstances() )
					{
						var __0x4304 = __0x4306.Properties[ "processorID" ].Value.ToString();
						__0x4281 = __0x4304;
						break;
					}
				}
				catch { }
			}
#endif

			return __0x4281;
		}

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		

		
		
		

		
		
		
		
		

		
		

		
		
		

		
		
		
		
		

		

		
		
		
		
		

		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		public static string GetLicenseCached()
		{
			if( __0x4280 == null )
			{
				__0x4280 = "";
				if( GetCurrentLicense( out _, out _ ) )
				{
					if( GetRequestedFullLicenseInfo( out var license, out _, out _, out _ ) )
						__0x4280 = license;
				}
			}

			var __0x4305 = __0x4280;
			if( __0x4305 == null )
				__0x4305 = "";
			return __0x4305;
		}

	}
}





namespace NeoAxis.Editor
{
	
	public class LowProfileDockableWorkspace : KryptonDockableWorkspace
	{
		protected readonly TabStyle CellBarTabStyle = TabStyle.LowProfile;
		protected readonly TabBorderStyle CellBarTabBorderStyle = TabBorderStyle.SquareEqualMedium;

		protected override void NewCellInitialize( KryptonWorkspaceCell cell )
		{
			base.NewCellInitialize( cell );

			cell.Bar.TabStyle = CellBarTabStyle;
			cell.Bar.TabBorderStyle = CellBarTabBorderStyle;

			
			cell.Button.CloseButtonDisplay = ButtonDisplay.Hide;
			cell.Button.ButtonDisplayLogic = ButtonDisplayLogic.Context;

			
			cell.Header.HeaderVisibleSecondary = false;
		}

		protected override void OnActiveCellChanged( ActiveCellChangedEventArgs e )
		{
			base.OnActiveCellChanged( e );

			
			KryptonWorkspaceCell __0x4309 = FirstCell();
			while( __0x4309 != null )
			{
				if( e.NewCell != __0x4309 )
				{
					__0x4309.Bar.TabStyle = CellBarTabStyle;
					__0x4309.Bar.TabBorderStyle = CellBarTabBorderStyle;
				}
				__0x4309 = NextCell( __0x4309 );
			}

			
			if( e.NewCell != null )
			{
				e.NewCell.Bar.TabStyle = CellBarTabStyle;
				e.NewCell.Bar.TabBorderStyle = CellBarTabBorderStyle;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class MessageLogOptions : Metadata.IMetadataProvider
	{
		[DefaultValue( Orientation.Vertical )]
		public Orientation SplitterOrientation { get; set; } = Orientation.Vertical;

		

		public MessageLogOptions()
		{
		}

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			foreach( var __0x4310 in BaseType.MetadataGetMembers( context ) )
			{
				
				
				
				
					yield return __0x4310;
			}
		}

		public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			return BaseType.MetadataGetMemberBySignature( signature, context );
		}

		public void Load( TextBlock block )
		{
			try
			{
				if( block.AttributeExists( nameof( SplitterOrientation ) ) )
					SplitterOrientation = (Orientation)Enum.Parse( typeof( Orientation ), block.GetAttribute( nameof( SplitterOrientation ) ) );
			}
			catch { }
		}

		public void Save( TextBlock block )
		{
			block.SetAttribute( nameof( SplitterOrientation ), SplitterOrientation.ToString() );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class MessageLogOptionsForm : EngineForm
	{
		public MessageLogOptionsForm()
		{
			__0x4321();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			Text = __0x4319( Text );

			__0x4313.OverridePropertyDisplayName += __0x4317;
			__0x4313.OverridePropertyEnumItem += __0x4318;

			if( EditorLocalization.WideLanguage )
				__0x4313.SplitterRatio = 0.5f;
		}

		[Browsable( false )]
		public MessageLogOptions Options { get; set; }

		private void __0x4315( object __0x4322, EventArgs __0x4323 )
		{
			object[] __0x4311 = new object[ 1 ];
			__0x4311[ 0 ] = Options;
			__0x4313.SetData( null, __0x4311 );

			__0x4320();
		}

		private void __0x4316( object __0x4324, EventArgs __0x4325 )
		{
			Close();
		}

		private void __0x4317( HierarchicalContainer __0x4326, HCItemProperty __0x4327, ref string __0x4328 )
		{
			__0x4328 = __0x4319( __0x4328 );
		}

		private void __0x4318( HierarchicalContainer __0x4329, HCItemEnumDropDown __0x4330, ref string __0x4331, ref string __0x4332 )
		{
			__0x4331 = __0x4319( __0x4331 );
			__0x4332 = __0x4319( __0x4332 );
		}

		string __0x4319( string __0x4333 )
		{
			return EditorLocalization.Translate( "MessageLogOptionsForm", __0x4333 );
		}

		void __0x4320()
		{
			__0x4314.Location = new Point( ClientSize.Width - __0x4314.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x4314.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x4313.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x4313.Location.X, __0x4314.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x4313.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4320();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MessageLogOptionsForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4312 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4312 != null ) )
			{
				__0x4312.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4321()
		{
			this.__0x4313 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x4314 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x4313.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x4313.DisplayGroups = false;
			this.__0x4313.Location = new System.Drawing.Point(0, 14);
			this.__0x4313.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4313.Name = "hierarchicalContainer1";
			this.__0x4313.Size = new System.Drawing.Size(550, 334);
			this.__0x4313.SplitterPosition = 220;
			this.__0x4313.SplitterRatio = 0.4F;
			this.__0x4313.TabIndex = 0;
			
			
			
			
			this.__0x4314.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4314.Location = new System.Drawing.Point(433, 358);
			this.__0x4314.Name = "buttonClose";
			this.__0x4314.Size = new System.Drawing.Size(117, 32);
			this.__0x4314.TabIndex = 5;
			this.__0x4314.Values.Text = "Close";
			this.__0x4314.Click += new System.EventHandler(this.__0x4316);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x4314;
			this.AcceptButton = this.__0x4314;
			this.ClientSize = new System.Drawing.Size(562, 402);
			this.Controls.Add(this.__0x4314);
			this.Controls.Add(this.__0x4313);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "MessageLogOptionsForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Message Log Options";
			this.Load += new System.EventHandler(this.__0x4315);
			this.ResumeLayout(false);

		}

		#endregion

		private HierarchicalContainer __0x4313;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4314;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Message Log Window.
	/// </summary>
	public partial class MessageLogWindow : DockWindow
	{
		const int __0x4334 = 1000;

		const string __0x4335 = "Message Log";
		LogType __0x4336 = LogType.Info;
		int __0x4337;

		MessageLogOptions __0x4338 = new MessageLogOptions();
		int __0x4339 = -1;

		
		
		

		
		public delegate void ProcessCmdKeyEventDelegate( MessageLogWindow __0x4380, ref Message __0x4381, Keys __0x4382, ref bool __0x4383 );
		public event ProcessCmdKeyEventDelegate ProcessCmdKeyEvent;

		EditorAssemblyInterface.ITextEditorControl __0x4340;

		

		class __0x4411 : ContentBrowserItem_Virtual
		{
			public LogType type;

			public __0x4411( ContentBrowser owner, ContentBrowser.Item parent, string text )
				: base( owner, parent, text )
			{
			}
		}

		

		public enum LogType
		{
			
			Info,
			Warning,
			Error
		}

		public MessageLogWindow()
		{
			__0x4379();

			
			{
				__0x4340 = EditorAssemblyInterface.Instance.CreateTextEditorControl();
				var __0x4341 = (Control)this.__0x4340;

				this.__0x4359.Panel2.Controls.Add( __0x4341 );
				__0x4341.Dock = System.Windows.Forms.DockStyle.Fill;
				__0x4341.Location = new System.Drawing.Point( 0, 0 );
				__0x4341.Name = "kryptonRichTextBox1";
				this.__0x4340.EditorReadOnly = true;
				__0x4341.Size = new System.Drawing.Size( 363, 165 );
				
				
				__0x4341.TabIndex = 2;
				this.__0x4340.EditorText = "";
				this.__0x4340.EditorWordWrap = true;

				__0x4340.Border = true;
			}

			__0x4356.Image = EditorResourcesCache.Delete;
			__0x4357.Image = EditorResourcesCache.Options;

			Log.Handlers.InfoHandler += __0x4365;
			
			Log.Handlers.WarningHandler += __0x4366;
			Log.Handlers.ErrorHandler += __0x4367;

			
			__0x4360.SetData( new ContentBrowser.Item[ 0 ], false );
			__0x4360.AddImageKey( "Info", Properties.Resources.Info_16, Properties.Resources.Info_32 );
			__0x4360.AddImageKey( "Warning", Properties.Resources.Warning_16, Properties.Resources.Warning_32 );
			__0x4360.AddImageKey( "Error", Properties.Resources.Error_16, Properties.Resources.Error_32 );

			__0x4374();
			EngineConfig.SaveEvent += __0x4375;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			__0x4357.Text = EditorLocalization.Translate( "MessageLogWindow", __0x4357.Text );
			__0x4356.Text = EditorLocalization.Translate( "MessageLogWindow", __0x4356.Text );

			__0x4355.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		public override bool HideOnRemoving { get { return true; } }

		public void Clear()
		{
			__0x4340.EditorText = "";
		}

		private void __0x4363( object __0x4384, PreviewKeyDownEventArgs __0x4385 )
		{
			
			
			
		}

		void __0x4364()
		{
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( ProcessCmdKeyEvent != null )
			{
				bool __0x4342 = false;
				ProcessCmdKeyEvent( this, ref msg, keyData, ref __0x4342 );
				if( __0x4342 )
					return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		
		
		
		
		
		

		private void __0x4365( string __0x4386, ref bool __0x4387 )
		{
			if( IsDisposed )
				return;

			Print( __0x4386, LogType.Info );
		}

		private void __0x4366( string __0x4388, ref bool __0x4389, ref bool __0x4390 )
		{
			if( IsDisposed )
				return;

			Print( __0x4388, LogType.Warning );
			__0x4389 = true;
			
			
		}

		private void __0x4367( string __0x4391, ref bool __0x4392, ref bool __0x4393 )
		{
			if( IsDisposed )
				return;

			Print( __0x4391, LogType.Error );
			__0x4392 = true;
			
			

			
			{
				var __0x4343 = __0x4391;
				var __0x4344 = __0x4391.IndexOfAny( new char[] { '\r', '\n' } );
				if( __0x4344 != -1 )
					__0x4343 = __0x4343.Substring( 0, __0x4344 );
				ScreenNotifications.Show( __0x4343, true );
			}
		}

		public delegate void PrintFilterDelegate( string __0x4394, LogType __0x4395, ref bool __0x4396 );
		public static event PrintFilterDelegate PrintFilter;

		public void Print( string text, LogType type )
		{
			bool __0x4345 = false;
			PrintFilter?.Invoke( text, type, ref __0x4345 );
			if( __0x4345 )
				return;

			
			while( __0x4360.RootItems.Count >= __0x4334 )
				__0x4360.RemoveItem( __0x4360.RootItems[ 0 ] );

			var __0x4346 = text.Replace( "\r\n", " " ).Replace( "\r", " " ).Replace( "\n", "" ).Trim();
			var __0x4347 = new __0x4411( __0x4360, null, __0x4346 );
			__0x4347.type = type;
			__0x4347.Tag = text;
			__0x4347.imageKey = type.ToString();
			__0x4360.AddRootItem( __0x4347 );
			__0x4360.SelectItems( new ContentBrowser.Item[] { __0x4347 } );

			
			{
				__0x4336 = LogType.Info;
				__0x4337 = 0;
				foreach( __0x4411 __0x4362 in __0x4360.RootItems )
				{
					if( __0x4362.type > __0x4336 )
						__0x4336 = type;
					if( __0x4362.type != LogType.Info )
						__0x4337++;
				}
			}

			__0x4372();

			if( type == LogType.Error )
			{
				
				EditorAPI.ShowDockWindow<MessageLogWindow>();

				
				
			}
		}

		private void __0x4368( object __0x4397, EventArgs __0x4398 )
		{
			__0x4336 = LogType.Info;
			__0x4337 = 0;
			__0x4360.SetData( new ContentBrowser.Item[ 0 ], false );
			__0x4370();
			__0x4372();
		}

		private void __0x4369( ContentBrowser __0x4399, IList<ContentBrowser.Item> __0x4400, bool __0x4401, ref bool __0x4402 )
		{
			__0x4370();
		}

		void __0x4370()
		{
			if( __0x4360.SelectedItems.Length == 1 )
				__0x4340.EditorText = (string)__0x4360.SelectedItems[ 0 ].Tag;
			else
				__0x4340.EditorText = "";

			__0x4340.Select( 0, 0 );
			
		}

		Image __0x4371( LogType __0x4403 )
		{
			if( __0x4403 == LogType.Warning )
				return EditorResourcesCache.Warning;
			else if( __0x4403 == LogType.Error )
				return EditorResourcesCache.Error;
			else
				return null;
		}

		void __0x4372()
		{
			if( __0x4336 == LogType.Info )
				KryptonPage.ImageSmall = null;
			else
				KryptonPage.ImageSmall = __0x4371( __0x4336 );

			if( __0x4337 > 0 )
				KryptonPage.Text = EditorLocalization.Translate( "Windows", __0x4335 ) + $" ({__0x4337})";
			else
				KryptonPage.Text = EditorLocalization.Translate( "Windows", __0x4335 );

			
			EditorForm.Instance.WorkspaceController.RepaintAutoHiddenWindow( this );
		}

		void __0x4373( TextBlock __0x4404 )
		{
			__0x4338.Save( __0x4404 );

			__0x4404.SetAttribute( "SplitterDistance", __0x4359.SplitterDistance.ToString() );
		}

		void __0x4374()
		{
			var __0x4348 = EngineConfig.TextBlock.FindChild( nameof( MessageLogWindow ) );
			if( __0x4348 != null )
			{
				__0x4338.Load( __0x4348 );

				if( __0x4348.AttributeExists( "SplitterDistance" ) )
					__0x4339 = int.Parse( __0x4348.GetAttribute( "SplitterDistance" ) );
			}
		}

		void __0x4375()
		{
			var __0x4349 = EngineConfig.TextBlock;

			var __0x4350 = __0x4349.FindChild( nameof( MessageLogWindow ) );
			if( __0x4350 != null )
				__0x4349.DeleteChild( __0x4350 );

			var __0x4351 = __0x4349.AddChild( nameof( MessageLogWindow ) );

			__0x4338.Save( __0x4351 );
			__0x4351.SetAttribute( "SplitterDistance", __0x4359.SplitterDistance.ToString() );
		}

		private void __0x4376( object __0x4405, EventArgs __0x4406 )
		{
			__0x4355.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x4355.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x4357.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x4356.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x4364();

			var __0x4352 = (Control)__0x4340;
			__0x4352.Select();
			

			__0x4361.Start();
		}

		private void __0x4377( object __0x4407, EventArgs __0x4408 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			if( __0x4359.Orientation != __0x4338.SplitterOrientation )
				__0x4359.Orientation = __0x4338.SplitterOrientation;

			
			if( __0x4339 != -1 )
			{
				__0x4359.SplitterDistance = __0x4339;
				__0x4339 = -1;
			}
		}

		private void __0x4378( object __0x4409, EventArgs __0x4410 )
		{
			var __0x4353 = new MessageLogOptionsForm();
			__0x4353.Options = __0x4338;
			EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
			 {
				 __0x4353.ShowDialog();
			 } );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MessageLogWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4354 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4354 != null ) )
			{
				__0x4354.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4379()
		{
			this.__0x4354 = new System.ComponentModel.Container();
			this.__0x4355 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x4357 = new System.Windows.Forms.ToolStripButton();
			this.__0x4358 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x4356 = new System.Windows.Forms.ToolStripButton();
			this.__0x4359 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4360 = new NeoAxis.Editor.ContentBrowser();
			
			this.__0x4361 = new System.Windows.Forms.Timer(this.__0x4354);
			this.__0x4355.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4359)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4359.Panel1)).BeginInit();
			this.__0x4359.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4359.Panel2)).BeginInit();
			this.__0x4359.Panel2.SuspendLayout();
			this.__0x4359.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4355.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x4355.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x4355.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x4357,
            this.__0x4358,
            this.__0x4356});
			this.__0x4355.Location = new System.Drawing.Point(0, 0);
			this.__0x4355.Name = "toolStrip1";
			this.__0x4355.AutoSize = false;
			this.__0x4355.Size = new System.Drawing.Size(713, 25);
			this.__0x4355.TabIndex = 1;
			this.__0x4355.Text = "toolStrip1";
			
			
			
			this.__0x4357.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4357.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x4357.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4357.Name = "toolStripButtonOptions";
			this.__0x4357.AutoSize = false;
			this.__0x4357.Size = new System.Drawing.Size(23, 22);
			this.__0x4357.Text = "Options";
			this.__0x4357.Click += new System.EventHandler(this.__0x4378);
			
			
			
			this.__0x4358.Name = "toolStripSeparatorFilteringMode";
			this.__0x4358.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x4356.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4356.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x4356.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4356.Name = "toolStripButtonClear";
			this.__0x4356.AutoSize = false;
			this.__0x4356.Size = new System.Drawing.Size(23, 22);
			this.__0x4356.Text = "Clear";
			this.__0x4356.Click += new System.EventHandler(this.__0x4368);
			
			
			
			this.__0x4359.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4359.Location = new System.Drawing.Point(0, 25);
			this.__0x4359.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4359.Panel1.Controls.Add(this.__0x4360);
			
			
			
			
			this.__0x4359.Size = new System.Drawing.Size(713, 165);
			this.__0x4359.SplitterDistance = 345;
			this.__0x4359.SplitterPercent = 0.4838709677419355D;
			this.__0x4359.TabIndex = 2;
			
			
			
			this.__0x4360.CanSelectObjectSettings = false;
			this.__0x4360.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4360.FilteringMode = null;
			this.__0x4360.ListViewModeOverride = null;
			this.__0x4360.Location = new System.Drawing.Point(0, 0);
			this.__0x4360.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4360.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Objects;
			this.__0x4360.Name = "contentBrowser1";
			this.__0x4360.ReadOnlyHierarchy = false;
			this.__0x4360.ShowToolBar = false;
			this.__0x4360.Size = new System.Drawing.Size(345, 165);
			this.__0x4360.TabIndex = 2;
			this.__0x4360.ThisIsSettingsWindow = false;
			this.__0x4360.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4369);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.__0x4361.Interval = 50;
			this.__0x4361.Tick += new System.EventHandler(this.__0x4377);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x4359);
			this.Controls.Add(this.__0x4355);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "MessageLogWindow";
			this.Size = new System.Drawing.Size(713, 190);
			this.WindowTitle = "Message Log";
			this.Load += new System.EventHandler(this.__0x4376);
			this.__0x4355.ResumeLayout(false);
			this.__0x4355.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4359.Panel1)).EndInit();
			this.__0x4359.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4359.Panel2)).EndInit();
			this.__0x4359.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4359)).EndInit();
			this.__0x4359.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private NeoAxis.Editor.EngineToolStrip __0x4355;
		private System.Windows.Forms.ToolStripButton __0x4356;
		private System.Windows.Forms.ToolStripButton __0x4357;
		private System.Windows.Forms.ToolStripSeparator __0x4358;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4359;
		
		private ContentBrowser __0x4360;
		private System.Windows.Forms.Timer __0x4361;
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectCell : EUserControl
	{
		
		float __0x4412;

		

		public NewObjectCell()
		{
			__0x4414();
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		public virtual float CellsSortingPriority
		{
			get { return __0x4412; }
			set { __0x4412 = value; }
		}

		public virtual bool ReadyToCreate( out string reason )
		{
			reason = "";
			return true;
		}

		public class ObjectCreationContext
		{
			public object newObject;
			public string fileCreationRealFileName;
			public bool disableFileCreation;
		}
		public virtual bool ObjectCreation( ObjectCreationContext context )
		
		{
			return true;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class NewObjectCell
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4413 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4413 != null ) )
			{
				__0x4413.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4414()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewObjectCell";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public class NewObjectSettings : Metadata.IMetadataProvider
	{
		NewObjectWindow __0x4415;
		

		
		
		
		
		

		public virtual bool Init( NewObjectWindow window )
		{
			this.__0x4415 = window;
			
			return true;
		}

		[Browsable( false )]
		public NewObjectWindow Window
		{
			get { return __0x4415; }
		}

		public void GetCreateCSharpClassInfo( out string realFileName, out string className, out string csharpClassNameWithoutNamespace )
		{
			realFileName = Path.ChangeExtension( Window.GetFileCreationRealFileName(), "cs" );
			className = "Project." + Path.GetFileNameWithoutExtension( Window.GetFileCreationRealFileName() );
			csharpClassNameWithoutNamespace = Path.GetFileNameWithoutExtension( Window.GetFileCreationRealFileName() );
		}

		string __0x4428( string __0x4429 )
		{
			return EditorLocalization.Translate( "NewObjectWindow", __0x4429 );
		}

		public virtual bool ReadyToCreate( out string reason )
		{
			
			if( Window.IsFileCreation() && CreateCSharpClass )
			{
				GetCreateCSharpClassInfo( out var realFileName, out _, out _ );
				if( File.Exists( realFileName ) )
				{
					reason = string.Format( __0x4428( "A file with the name \'{0}\' already exists." ), Path.GetFileName( realFileName ) );
					return false;
				}
			}

			reason = "";
			return true;
		}

		public virtual bool Creation( NewObjectCell.ObjectCreationContext context )
		{
			if( Window.IsFileCreation() && CreateCSharpClass )
			{
				context.disableFileCreation = true;

				GetCreateCSharpClassInfo( out var csharpRealFileName, out var csharpClassName, out var csharpClassNameWithoutNamespace );

				try
				{
					
					{
						string __0x4416 = csharpClassName;
						
						var __0x4417 = ".component " + __0x4416 + "\r\n{\r\n}";

						File.WriteAllText( context.fileCreationRealFileName, __0x4417 );
					}

					
					
					{
						string __0x4418 = @"using System;

namespace Project
{
	public class {Name} : {Base}
	{
	}
}";

						__0x4418 = __0x4418.Replace( "{Name}", csharpClassNameWithoutNamespace );
						__0x4418 = __0x4418.Replace( "{Base}", Window.SelectedType.Name );

						File.WriteAllText( csharpRealFileName, __0x4418 );
					}
				}
				catch( Exception e )
				{
					EditorMessageBox.ShowWarning( e.Message );
					
					return false;
				}

				
				{
					
					{
						var __0x4419 = new List<string>();

						var __0x4420 = Path.Combine( "Assets", VirtualPathUtility.GetVirtualPathByReal( csharpRealFileName ) );
						__0x4419.Add( __0x4420 );

						if( CSharpProjectFileUtility.UpdateProjectFile( __0x4419, null, out var error ) )
						{
							if( __0x4419.Count > 1 )
								Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
							else
								Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
						}
						else
						{
							EditorMessageBox.ShowWarning( error );
							
							return false;
						}
					}

					Window.DisableUnableToCreateReason = true;

					
					var __0x4421 = EditorLocalization.Translate( "General", "To apply changes need restart the editor. Restart?\r\n\r\nThe editor must be restarted to compile and enable a new created C# class." );
					if( EditorMessageBox.ShowQuestion( __0x4421, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
						EditorAPI.BeginRestartApplication();

					Window.DisableUnableToCreateReason = false;
				}
			}

			return true;
		}
		
		

		/// <summary>
		/// A base C# class will be created for the resource.
		/// </summary>
		[DefaultValue( false )]
		[Category( "Options" )]
		[DisplayName( "Create C# class" )]
		public bool CreateCSharpClass { get; set; }

		[Browsable( false )]
		public Metadata.TypeInfo BaseType
		{
			get { return MetadataManager.GetTypeOfNetType( GetType() ); }
		}

		protected virtual void OnMetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
		{
			var __0x4422 = member as Metadata.Property;
			if( __0x4422 != null )
			{
				switch( __0x4422.Name )
				{
				case nameof( CreateCSharpClass ):
					var __0x4423 = Window.SelectedType;
					if( !Window.IsFileCreation() || __0x4423 == null || !typeof( Component ).IsAssignableFrom( __0x4423.GetNetType() ) || typeof( Component_CSharpScript ).IsAssignableFrom( __0x4423.GetNetType() ) )
						skip = true;
					break;
				}
			}
		}

		public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
		{
			var __0x4424 = new List<Metadata.Member>( BaseType.MetadataGetMembers( context ) );

			
			{
				var __0x4425 = BaseType.MetadataGetMemberBySignature( "property:" + nameof( CreateCSharpClass ) );
				if( __0x4425 != null )
				{
					if( __0x4424.Remove( __0x4425 ) )
						__0x4424.Add( __0x4425 );
				}
			}

			foreach( var __0x4427 in __0x4424 )
			
			{
				bool __0x4426 = false;
				if( context == null || context.filter )
					OnMetadataGetMembersFilter( context, __0x4427, ref __0x4426 );
				if( !__0x4426 )
					yield return __0x4427;
			}
		}

		public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
		{
			return BaseType.MetadataGetMemberBySignature( signature, context );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectSettingsCell : NewObjectCell
	{
		NewObjectSettings __0x4430;

		public NewObjectSettingsCell()
		{
			__0x4436();
		}

		public bool Init( Type settingsClass, NewObjectWindow window )
		{
			__0x4430 = (NewObjectSettings)settingsClass.InvokeMember( "",
				BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance,
				null, null, null );

			if( !__0x4430.Init( window ) )
				return false;

			__0x4432.OverrideGroupDisplayName += __0x4433;
			__0x4432.OverridePropertyDisplayName += __0x4434;
			__0x4432.OverrideMemberDescription += __0x4435;

			__0x4432.SetData( null, new object[] { __0x4430 } );

			return true;
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			if( !__0x4430.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			if( !__0x4430.Creation( context ) )
				return false;

			return true;
		}

		private void __0x4433( HierarchicalContainer __0x4437, HCItemGroup __0x4438, ref string __0x4439 )
		{
			__0x4439 = EditorLocalization.Translate( "Object.Group", __0x4439 );
		}

		private void __0x4434( HierarchicalContainer __0x4440, HCItemProperty __0x4441, ref string __0x4442 )
		{
			__0x4442 = EditorLocalization.Translate( "Object.Property", __0x4442 );
		}

		private void __0x4435( HierarchicalContainer __0x4443, HCItemMember __0x4444, ref string __0x4445 )
		{
			__0x4445 = EditorLocalization.Translate( "Object.Description", __0x4445 );
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewObjectSettingsCell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4431 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4431 != null))
            {
                __0x4431.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4436()
        {
			this.__0x4432 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			this.__0x4432.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x4432.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4432.Location = new System.Drawing.Point(0, 0);
			this.__0x4432.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4432.Name = "hierarchicalContainer1";
			this.__0x4432.Size = new System.Drawing.Size(492, 163);
			this.__0x4432.SplitterPosition = 197;
			this.__0x4432.SplitterRatio = 0.4F;
			this.__0x4432.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4432);
			this.Name = "NewObjectSettingsCell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion

		private HierarchicalContainer __0x4432;
	}
}





namespace NeoAxis.Editor
{
	public partial class NewObjectWindow : DockWindow
	{
		static ContentBrowserOptions __0x4446;

		
		public CreationDataClass creationData;

		Metadata.TypeInfo __0x4447;

		bool __0x4448 = true;

		

		public class CreationDataClass
		{
			public string initFileCreationDirectory = "";
			public DocumentWindow initDocumentWindow;
			public List<object> initParentObjects;
			public Metadata.TypeInfo initLockType;
			
			public bool initSupportAutoCreateAndClose;
			
			

			
			public ContentBrowser createdFromContentBrowser;

			

			
			
			

			public delegate bool BeforeCreateObjectsDelegate( NewObjectWindow __0x4546, Metadata.TypeInfo __0x4547 );
			public BeforeCreateObjectsDelegate beforeCreateObjectsFunction;

			public delegate void AdditionActionDelegate( NewObjectWindow __0x4548 );
			public AdditionActionDelegate additionActionBeforeEnabled;
			public AdditionActionDelegate additionActionAfterEnabled;



			
			public List<object> createdObjects;
			public List<object> createdObjectsToApplySettings = new List<object>();
			public List<Component> createdComponentsOnTopLevel = new List<Component>();

			public void ClearCreatedObjects()
			{
				createdObjects = null;
				createdObjectsToApplySettings = new List<object>();
				createdComponentsOnTopLevel = new List<Component>();
			}

			
			
			
			
		}

		

		static NewObjectWindow()
		{
			EngineConfig.SaveEvent += __0x4544;
		}

		public NewObjectWindow()
		{
			__0x4545();

			
			__0x4513.Width = __0x4513.Parent.Width - DpiHelper.Default.ScaleValue( 9 );

			
			if( __0x4446 != null )
				__0x4502.Options = __0x4446;
			else
			{
				if( !__0x4543() )
				{
					
					
					
					__0x4502.Options.PanelMode = ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally;
					__0x4502.Options.SplitterPosition = 3.0 / 5.0;
				}

				__0x4446 = __0x4502.Options;
			}

			CloseByEscape = true;

			WindowTitle = EditorLocalization.Translate( "NewObjectWindow", WindowTitle );
			EditorLocalization.TranslateForm( "NewObjectWindow", __0x4510 );

			EditorThemeUtility.ApplyDarkThemeToForm( __0x4510 );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x4513 );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4512.Visible = IsFileCreation();

			if( IsFileCreation() )
				__0x4505.Text = Path.Combine( creationData.initFileCreationDirectory, "File.ext" );
			else
				__0x4505.Text = "Object";
			

			if( creationData.initLockType != null )
				__0x4502.SetEnabled( false );

			__0x4522();

			if( creationData.initLockType != null )
				__0x4542();

			

			__0x4531();

			__0x4509.Start();
		}

		void __0x4522()
		{
			var __0x4449 = new ContentBrowser.SetReferenceModeDataClass();
			__0x4449.demandedType = MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) );
			
			
			
			
			
			__0x4449.allowNull = false;

			
			__0x4449.newObjectWindow = true;
			__0x4449.newObjectWindowFileCreation = IsFileCreation();

			__0x4502.Init( creationData.initDocumentWindow, null, __0x4449 );
			__0x4502.UpdateData();
			
			
			
			
			
		}

		[Browsable( false )]
		public CreationDataClass CreationData
		{
			get { return creationData; }
		}

		[Browsable( false )]
		public Metadata.TypeInfo SelectedType
		{
			get { return __0x4447; }
		}

		void __0x4523()
		{
			Metadata.TypeInfo __0x4450 = null;

			ContentBrowser.Item __0x4451 = null;
			if( __0x4502.SelectedItems.Length != 0 )
				__0x4451 = __0x4502.SelectedItems[ 0 ];

			if( __0x4451 != null )
			{
				__0x4451.CalculateReferenceValue( null, MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ),
					out string referenceValue, out bool canSet );

				if( !string.IsNullOrEmpty( referenceValue ) && canSet )
				{
					__0x4450 = (Metadata.TypeInfo)MetadataManager.GetValueByReference(
						__0x4502.SetReferenceModeData.demandedType.GetNetType(), null, referenceValue );
				}

				
				if( __0x4450 != null )
				{
					if( !MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x4450 ) &&
						!MetadataManager.GetTypeOfNetType( typeof( NewResourceType ) ).IsAssignableFrom( __0x4450 ) )
						__0x4450 = null;
				}
			}

			
			if( __0x4447 != __0x4450 )
			{
				__0x4447 = __0x4450;
				__0x4531();
			}
		}

		private void __0x4524( ContentBrowser __0x4549, IList<ContentBrowser.Item> __0x4550, bool __0x4551, ref bool __0x4552 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x4523();
		}

		private void __0x4525( ContentBrowser __0x4553, ContentBrowser.Item __0x4554, ref bool __0x4555 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x4530( out string dummy ) )
				return;
			__0x4537( null, null );
		}

		string __0x4526()
		{
			
			var __0x4452 = __0x4447.GetNetType().GetCustomAttributes( typeof( NewObjectDefaultNameAttribute ), true );
			if( __0x4452.Length != 0 )
				return ( (NewObjectDefaultNameAttribute)__0x4452[ 0 ] ).Name;

			if( IsFileCreation() )
			{
				return "File.ext";
				
			}
			else
			{
				

				return __0x4447.GetUserFriendlyNameForInstance( true );
			}
		}

		string __0x4527( Metadata.TypeInfo __0x4556 )
		{
			

			var __0x4453 = __0x4556.GetNetType().GetCustomAttributes( typeof( ResourceFileExtensionAttribute ), true );
			if( __0x4453.Length != 0 )
			{
				var __0x4454 = (ResourceFileExtensionAttribute)__0x4453[ 0 ];
				return __0x4454.Extension;
			}

			
			return "UNKNOWN";
		}

		public bool IsFileCreation()
		{
			return creationData.initParentObjects == null;
		}

		void __0x4528()
		{
			if( __0x4447 != null )
			{
				var __0x4455 = __0x4526();

				if( IsFileCreation() )
				{
					var __0x4456 = "";
					try
					{
						__0x4456 = Path.GetDirectoryName( __0x4505.Text );
					}
					catch { }
					var __0x4457 = Path.Combine( __0x4456, __0x4455 );
					string __0x4458 = "." + __0x4527( __0x4447 );
					__0x4457 = Path.ChangeExtension( __0x4457, __0x4458 );

					
					

					
					

					
					if( VirtualFile.Exists( __0x4457 ) )
					{
						for( int __0x4459 = 2; ; __0x4459++ )
						{
							var __0x4460 = Path.ChangeExtension( __0x4457, null ) + __0x4459.ToString() + Path.GetExtension( __0x4457 );
							if( !VirtualFile.Exists( __0x4460 ) )
							{
								__0x4457 = __0x4460;
								break;
							}
						}
					}

					__0x4505.Text = __0x4457;
				}
				else
				{
					

					

					

					
					

					
					
					
					

					var __0x4461 = __0x4455;

					
					Component __0x4462 = null;
					if( creationData.initParentObjects.Count != 0 )
						__0x4462 = creationData.initParentObjects[ 0 ] as Component;

					
					if( __0x4462 != null && __0x4462.GetComponent( __0x4461 ) != null )
					{
						for( int __0x4463 = 2; ; __0x4463++ )
						{
							string __0x4464 = __0x4461 + " " + __0x4463.ToString();
							if( __0x4462.GetComponent( __0x4464 ) == null )
							{
								__0x4461 = __0x4464;
								break;
							}
						}
					}

					__0x4505.Text = __0x4461;
				}

				__0x4505.Enabled = true;
			}
			else
				__0x4505.Enabled = false;

			__0x4532();
		}

		string __0x4529( string __0x4557 )
		{
			return EditorLocalization.Translate( "NewObjectWindow", __0x4557 );
		}

		bool __0x4530( out string __0x4558 )
		{
			__0x4558 = "";

			if( __0x4447 == null )
				return false;

			if( IsFileCreation() )
			{
				if( string.IsNullOrEmpty( __0x4505.Text ) )
				{
					__0x4558 = __0x4529( "The file name is not specified." );
					return false;
				}

				if( __0x4505.Text.IndexOfAny( Path.GetInvalidPathChars() ) != -1 )
				{
					__0x4558 = __0x4529( "Invalid file name." );
					return false;
				}

				try
				{
					if( __0x4505.Text.Contains( '\\' ) || __0x4505.Text.Contains( '/' ) )
					{
						if( Path.GetFileName( __0x4505.Text ).IndexOfAny( Path.GetInvalidFileNameChars() ) != -1 )
						{
							__0x4558 = __0x4529( "Invalid file name." );
							return false;
						}
					}
				}
				catch { }

				var __0x4465 = VirtualPathUtility.GetRealPathByVirtual( __0x4505.Text );
				if( File.Exists( __0x4465 ) )
				{
					__0x4558 = string.Format( __0x4529( "A file with the name \'{0}\' already exists." ), Path.GetFileName( __0x4465 ) );
					return false;
				}
			}

			foreach( var __0x4514 in __0x4508.Controls )
			{
				NewObjectCell __0x4466 = __0x4514 as NewObjectCell;
				if( __0x4466 != null )
				{
					if( !__0x4466.ReadyToCreate( out __0x4558 ) )
						return false;
				}
			}

			return true;
		}

		void __0x4531()
		{
			__0x4528();
			__0x4534();

			__0x4533();
		}

		void __0x4532()
		{
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		void __0x4533()
		{
			
			__0x4513.Width = __0x4513.Parent.Width - DpiHelper.Default.ScaleValue( 8 );
			__0x4513.Height = DpiHelper.Default.ScaleValue( 25 );

			if( !__0x4512.Visible )
			{
				__0x4505.Location = new Point( DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
				__0x4505.Width = __0x4513.Width - DpiHelper.Default.ScaleValue( 6 );
			}
			else
			{
				__0x4505.Location = new Point( __0x4512.Location.X + __0x4512.Width + DpiHelper.Default.ScaleValue( 2 ), DpiHelper.Default.ScaleValue( 2 ) );
				__0x4505.Width = __0x4513.Width - __0x4512.Width - DpiHelper.Default.ScaleValue( 9 );
			}

			__0x4508.Location = new Point( __0x4513.Location.X, __0x4513.Bounds.Bottom + DpiHelper.Default.ScaleValue( 10 ) );
			__0x4508.Size = new Size(
				__0x4501.Bounds.Right - __0x4508.Location.X,
				__0x4501.Bounds.Top - DpiHelper.Default.ScaleValue( 10 ) - __0x4508.Location.Y );

			__0x4500.Enabled = __0x4530( out string reason );
			__0x4506.Enabled = __0x4500.Enabled;

			if( DisableUnableToCreateReason )
				__0x4511.Text = "";
			else
				__0x4511.Text = reason;
		}

		public Control AddCell( Type cellClass )
		{
			
			
			
			
			
			
			
			

			Control __0x4467 = (Control)cellClass.GetConstructor( new Type[ 0 ] ).Invoke( new object[ 0 ] );
			__0x4467.Anchor = AnchorStyles.Left | AnchorStyles.Right;
			__0x4508.Controls.Add( __0x4467 );

			return __0x4467;
		}

		void __0x4534()
		{
			

			__0x4508.Controls.Clear();

			if( SelectedType != null )
			{
				
				{
					

					var __0x4468 = SelectedType.GetNetType().GetCustomAttributes( typeof( EditorNewObjectSettingsAttribute ), true );
					if( __0x4468.Length != 0 || IsFileCreation() )
					{
						Type __0x4469 = null;
						if( __0x4468.Length != 0 )
							__0x4469 = ( (EditorNewObjectSettingsAttribute)__0x4468[ 0 ] ).SettingsClass;
						else
							__0x4469 = typeof( NewObjectSettings );

						var __0x4470 = (NewObjectSettingsCell)AddCell( typeof( NewObjectSettingsCell ) );
						if( !__0x4470.Init( __0x4469, this ) )
							__0x4508.Controls.Remove( __0x4470 );
					}

					
					
					
					
					
					
					
					
				}

				
				{
					var __0x4471 = SelectedType.GetNetType().GetCustomAttributes( typeof( EditorNewObjectCellAttribute ), true );
					foreach( EditorNewObjectCellAttribute __0x4515 in __0x4471 )
						AddCell( __0x4515.CellClass );
				}

				
				
				if( __0x4508.Controls.Count == 1 )
				{
					__0x4508.Controls[ 0 ].Size = new Size( 30, 15 );
					__0x4508.Controls[ 0 ].Dock = DockStyle.Fill;
				}
			}
		}

		
		
		
		
		
		

		private void __0x4535( object __0x4559, EventArgs __0x4560 )
		{
			__0x4532();
		}

		
		private void __0x4536( object __0x4561, EventArgs __0x4562 )
		{
			if( !__0x4539() )
				return;
		}

		private void __0x4537( object __0x4563, EventArgs __0x4564 )
		{
			if( !__0x4539() )
				return;

			Close();
		}

		private void __0x4538( object __0x4565, EventArgs __0x4566 )
		{
			Close();
		}

		
		
		
		
		

		public string GetFileCreationRealFileName()
		{
			return IsFileCreation() ? VirtualPathUtility.GetRealPathByVirtual( __0x4505.Text ) : "";
		}

		public bool ApplyCreationSettingsToObject( object createdObject, ref bool disableFileCreation )
		{
			var __0x4472 = createdObject as Component;
			var __0x4473 = GetFileCreationRealFileName();

			if( !IsFileCreation() && __0x4472 != null )
			{
				
				__0x4472.Name = __0x4505.Text;
			}

			__0x4472?.NewObjectSetDefaultConfiguration( true );

			foreach( var __0x4516 in __0x4508.Controls )
			{
				NewObjectCell __0x4474 = __0x4516 as NewObjectCell;
				if( __0x4474 != null )
				{
					var __0x4475 = new NewObjectCell.ObjectCreationContext();
					__0x4475.newObject = createdObject;
					__0x4475.fileCreationRealFileName = __0x4473;
					__0x4475.disableFileCreation = disableFileCreation;

					if( !__0x4474.ObjectCreation( __0x4475 ) )
					
					{
						

						return false;
					}

					disableFileCreation = __0x4475.disableFileCreation;
				}
			}

			return true;
		}

		bool __0x4539()
		{
			creationData.ClearCreatedObjects();

			

			
			

			
			
			{
				creationData.beforeCreateObjectsFunction?.Invoke( this, SelectedType );

				
				if( creationData.createdObjects == null )
				{
					creationData.createdObjects = new List<object>();

					if( creationData.initParentObjects != null )
					{
						foreach( var __0x4517 in creationData.initParentObjects )
						{
							var __0x4476 = __0x4517 as Component;

							object __0x4477;
							if( __0x4476 != null )
							{
								var __0x4478 = EditorUtility.GetNewObjectInsertIndex( __0x4476, SelectedType );
								__0x4477 = __0x4476.CreateComponent( SelectedType, __0x4478, false );
							}
							else
								__0x4477 = SelectedType.InvokeInstance( null );

							creationData.createdObjects.Add( __0x4477 );
							creationData.createdObjectsToApplySettings.Add( __0x4477 );
							var __0x4479 = __0x4477 as Component;
							if( __0x4479 != null )
								creationData.createdComponentsOnTopLevel.Add( __0x4479 );
						}
					}
					else
					{
						var __0x4480 = SelectedType.InvokeInstance( null );

						creationData.createdObjects.Add( __0x4480 );
						creationData.createdObjectsToApplySettings.Add( __0x4480 );
						var __0x4481 = __0x4480 as Component;
						if( __0x4481 != null )
							creationData.createdComponentsOnTopLevel.Add( __0x4481 );
					}
				}
			}

			
			
			if( creationData.createdObjects.Count == 0 )
			{
				
				return false;
			}

			string __0x4482 = "";
			if( IsFileCreation() )
				__0x4482 = VirtualPathUtility.GetRealPathByVirtual( __0x4505.Text );

			
			if( IsFileCreation() )
			{
				var __0x4483 = Path.GetDirectoryName( __0x4482 );
				if( !Directory.Exists( __0x4483 ) )
				{
					try
					{
						Directory.CreateDirectory( __0x4483 );
					}
					catch( Exception e )
					{
						Log.Warning( e.Message );
						return false;
					}
				}
			}

			
			bool __0x4484 = false;
			foreach( var __0x4518 in creationData.createdObjectsToApplySettings )
			{
				if( !ApplyCreationSettingsToObject( __0x4518, ref __0x4484 ) )
					return false;
			}

			
			creationData.additionActionBeforeEnabled?.Invoke( this );

			
			foreach( var __0x4519 in creationData.createdComponentsOnTopLevel )
				__0x4519.Enabled = true;

			creationData.additionActionAfterEnabled?.Invoke( this );
			
			

			
			if( IsFileCreation() )
			{
				
				

				if( creationData.createdComponentsOnTopLevel.Count == 1 && !__0x4484 )
				{
					var __0x4485 = creationData.createdComponentsOnTopLevel[ 0 ];
					if( !ComponentUtility.SaveComponentToFile( __0x4485, __0x4482, null, out string error ) )
					{
						if( !string.IsNullOrEmpty( error ) )
						{
							
							Log.Warning( error );
							return false;
						}
					}
				}

				
				foreach( var __0x4520 in creationData.createdObjects )
				{
					var __0x4486 = __0x4520 as IDisposable;
					if( __0x4486 != null )
						__0x4486.Dispose();
				}
			}

			
			if( !IsFileCreation() )
			{
				
				
				var __0x4487 = creationData.initDocumentWindow.Document;
				if( __0x4487 != null )
				{
					

					var __0x4488 = new UndoActionComponentCreateDelete( __0x4487, creationData.createdComponentsOnTopLevel, true );

					
					
					
					
					
					
					
					
					
					__0x4487.UndoSystem.CommitAction( __0x4488 );

					__0x4487.Modified = true;
				}
				else
				{
					
					Log.Warning( "impl" );
				}
			}

			
			if( IsFileCreation() )
			{
				

				EditorAPI.GetRestartApplication( out var needRestart, out _ );
				if( needRestart )
				{
					EditorSettingsSerialization.OpenFileAtStartup = __0x4482;
				}
				else
				{
					
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x4482 } );

					
					EditorAPI.OpenFileAsDocument( __0x4482, true, true );
				}
			}
			else
			{
				
				if( creationData.createdFromContentBrowser != null )
				{
					var __0x4489 = creationData.createdFromContentBrowser;
					if( __0x4489.IsHandleCreated && !__0x4489.IsDisposed )
						ContentBrowserUtility.SelectComponentItems( __0x4489, creationData.createdComponentsOnTopLevel.ToArray() );
				}
				else
					EditorAPI.SelectComponentsInMainObjectsWindow( creationData.initDocumentWindow, creationData.createdComponentsOnTopLevel.ToArray() );

				
				if( creationData.createdComponentsOnTopLevel.Count == 1 )
				{
					var __0x4490 = creationData.createdComponentsOnTopLevel[ 0 ];

					if( !__0x4490.EditorReadOnlyInHierarchy )
					{
						
						if( __0x4490 is Component_FlowGraph || __0x4490 is Component_CSharpScript )
							EditorAPI.OpenDocumentWindowForObject( creationData.initDocumentWindow.Document, __0x4490 );
					}
					
					
				}
			}

			
			creationData.ClearCreatedObjects();

			return true;
		}

		private void __0x4540( object __0x4567, EventArgs __0x4568 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x4523();

			__0x4533();

			
			
			if( __0x4448 && creationData.initSupportAutoCreateAndClose )
			{
				if( __0x4508.Controls.Count == 0 )
				{
					if( __0x4530( out _ ) )
						__0x4537( null, null );
				}
			}

			__0x4448 = false;
		}

		ContentBrowser.Item __0x4541( Metadata.TypeInfo __0x4569 )
		{
			

			

			foreach( var __0x4521 in __0x4502.Items )
			{
				var __0x4491 = __0x4521 as ContentBrowserItem_Type;
				if( __0x4491 != null )
				{
					if( __0x4491.type == __0x4569 )
						return __0x4521;
				}
			}
			return null;
		}

		void __0x4542()
		{
			var __0x4492 = __0x4541( creationData.initLockType );

			


			
			
			

			
			
			
			

			

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			

			
			
			
			

			
			
			

			if( __0x4492 != null )
				__0x4502.SelectItems( new ContentBrowser.Item[] { __0x4492 }, true );
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x4502.DocumentWindow, __0x4502.GetSelectedContainedObjects() );
		}

		bool __0x4543()
		{
			var __0x4493 = EngineConfig.TextBlock.FindChild( "NewObjectWindow" );
			if( __0x4493 != null )
			{
				var __0x4494 = __0x4493.FindChild( "ContentBrowser" );
				if( __0x4494 != null )
				{
					__0x4502.Options.Load( __0x4494 );
					return true;
				}
			}

			return false;
		}

		static void __0x4544()
		{
			if( __0x4446 != null )
			{
				var __0x4495 = EngineConfig.TextBlock;

				var __0x4496 = __0x4495.FindChild( "NewObjectWindow" );
				if( __0x4496 != null )
					__0x4495.DeleteChild( __0x4496 );

				var __0x4497 = __0x4495.AddChild( "NewObjectWindow" );
				var __0x4498 = __0x4497.AddChild( "ContentBrowser" );
				__0x4446.Save( __0x4498 );
				
			}
		}

		[Browsable( false )]
		public bool DisableUnableToCreateReason { get; set; }

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4533();
		}

	}
}

namespace NeoAxis.Editor
{
    partial class NewObjectWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4499 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x4499 != null ) )
            {
                __0x4499.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4545()
        {
			this.__0x4499 = new System.ComponentModel.Container();
			this.__0x4500 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4501 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4503 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4502 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4513 = new System.Windows.Forms.Panel();
			this.__0x4512 = new System.Windows.Forms.Label();
			this.__0x4505 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4507 = new System.Windows.Forms.Label();
			this.__0x4511 = new System.Windows.Forms.Label();
			this.__0x4510 = new NeoAxis.EUserControl();
			this.__0x4508 = new System.Windows.Forms.TableLayoutPanel();
			this.__0x4504 = new System.Windows.Forms.Label();
			this.__0x4506 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4509 = new System.Windows.Forms.Timer(this.__0x4499);
			((System.ComponentModel.ISupportInitialize)(this.__0x4503)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4503.Panel1)).BeginInit();
			this.__0x4503.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4503.Panel2)).BeginInit();
			this.__0x4503.Panel2.SuspendLayout();
			this.__0x4503.SuspendLayout();
			this.__0x4513.SuspendLayout();
			this.__0x4510.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4500.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4500.Location = new System.Drawing.Point(222, 655);
			this.__0x4500.Name = "buttonCreate";
			this.__0x4500.Size = new System.Drawing.Size(147, 32);
			this.__0x4500.TabIndex = 0;
			this.__0x4500.Values.Text = "Create";
			this.__0x4500.Click += new System.EventHandler(this.__0x4536);
			
			
			
			this.__0x4501.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4501.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4501.Location = new System.Drawing.Point(528, 655);
			this.__0x4501.Name = "buttonClose";
			this.__0x4501.Size = new System.Drawing.Size(147, 32);
			this.__0x4501.TabIndex = 1;
			this.__0x4501.Values.Text = "Close";
			this.__0x4501.Click += new System.EventHandler(this.__0x4538);
			
			
			
			this.__0x4503.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4503.Location = new System.Drawing.Point(12, 12);
			this.__0x4503.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4503.Panel1.Controls.Add(this.__0x4502);
			
			
			
			this.__0x4503.Panel2.Controls.Add(this.__0x4513);
			this.__0x4503.Panel2.Controls.Add(this.__0x4507);
			this.__0x4503.Panel2.Controls.Add(this.__0x4511);
			this.__0x4503.Panel2.Controls.Add(this.__0x4510);
			this.__0x4503.Size = new System.Drawing.Size(1030, 690);
			this.__0x4503.SplitterDistance = 350;
			this.__0x4503.SplitterPercent = 0.33980582524271846D;
			this.__0x4503.TabIndex = 3;
			
			
			
			this.__0x4502.CanSelectObjectSettings = false;
			this.__0x4502.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4502.FilteringMode = null;
			this.__0x4502.ListViewModeOverride = null;
			this.__0x4502.Location = new System.Drawing.Point(0, 0);
			this.__0x4502.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4502.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x4502.Name = "contentBrowser1";
			this.__0x4502.ReadOnlyHierarchy = false;
			this.__0x4502.Size = new System.Drawing.Size(350, 690);
			this.__0x4502.TabIndex = 2;
			this.__0x4502.ThisIsSettingsWindow = false;
			this.__0x4502.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4524);
			this.__0x4502.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4525);
			
			
			
			
   
			this.__0x4513.Controls.Add(this.__0x4512);
			this.__0x4513.Controls.Add(this.__0x4505);
			this.__0x4513.Location = new System.Drawing.Point(13, 20);
			this.__0x4513.Name = "panelName";
			this.__0x4513.Size = new System.Drawing.Size(664, 26);
			this.__0x4513.TabIndex = 7;
			
			
			
			this.__0x4512.AutoSize = true;
			this.__0x4512.Location = new System.Drawing.Point(4, 5);
			this.__0x4512.Name = "labelName";
			this.__0x4512.Size = new System.Drawing.Size(54, 17);
			this.__0x4512.TabIndex = 6;
			this.__0x4512.Text = "Assets\\";
			this.__0x4512.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			
			
			
			
			
			this.__0x4505.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x4505.Location = new System.Drawing.Point(63, 2);
			this.__0x4505.Name = "textBoxName";
			this.__0x4505.Size = new System.Drawing.Size(596, 21);
			this.__0x4505.TabIndex = 3;
			this.__0x4505.TextChanged += new System.EventHandler(this.__0x4535);
			
			
			
			this.__0x4507.AutoSize = true;
			this.__0x4507.Location = new System.Drawing.Point(447, 46);
			this.__0x4507.Name = "labelCreationPath";
			this.__0x4507.Size = new System.Drawing.Size(199, 17);
			this.__0x4507.TabIndex = 7;
			this.__0x4507.Text = "Creation path: CC\\FF\\BB.mesh";
			this.__0x4507.Visible = false;
			
			
			
			this.__0x4511.AutoSize = true;
			this.__0x4511.ForeColor = System.Drawing.Color.Red;
			this.__0x4511.Location = new System.Drawing.Point(10, 48);
			this.__0x4511.Name = "labelError";
			this.__0x4511.Size = new System.Drawing.Size(40, 17);
			this.__0x4511.TabIndex = 3;
			this.__0x4511.Text = "Error";
			
			
			
			this.__0x4510.Controls.Add(this.__0x4508);
			this.__0x4510.Controls.Add(this.__0x4504);
			this.__0x4510.Controls.Add(this.__0x4500);
			this.__0x4510.Controls.Add(this.__0x4506);
			this.__0x4510.Controls.Add(this.__0x4501);
			this.__0x4510.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4510.Location = new System.Drawing.Point(0, 0);
			this.__0x4510.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4510.Name = "eUserControl1";
			this.__0x4510.Size = new System.Drawing.Size(675, 690);
			this.__0x4510.TabIndex = 2;
			
			
			
			
   
   
			this.__0x4508.ColumnCount = 1;
			this.__0x4508.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4508.ColumnStyles.Add(new System.Windows.Forms.ColumnStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4508.Location = new System.Drawing.Point(13, 67);
			this.__0x4508.Name = "tableLayoutPanel1";
			this.__0x4508.RowCount = 1;
			this.__0x4508.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4508.RowStyles.Add(new System.Windows.Forms.RowStyle(System.Windows.Forms.SizeType.Percent, 50F));
			this.__0x4508.Size = new System.Drawing.Size(662, 573);
			this.__0x4508.TabIndex = 9;
			
			
			
			this.__0x4504.AutoSize = true;
			this.__0x4504.Location = new System.Drawing.Point(10, 0);
			this.__0x4504.Name = "label1";
			this.__0x4504.Size = new System.Drawing.Size(49, 17);
			this.__0x4504.TabIndex = 4;
			this.__0x4504.Text = "Name:";
			
			
			
			this.__0x4506.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4506.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4506.Location = new System.Drawing.Point(375, 655);
			this.__0x4506.Name = "buttonCreateAndClose";
			this.__0x4506.Size = new System.Drawing.Size(147, 32);
			this.__0x4506.TabIndex = 8;
			this.__0x4506.Values.Text = "Create and Close";
			this.__0x4506.Click += new System.EventHandler(this.__0x4537);
			
			
			
			this.__0x4509.Interval = 50;
			this.__0x4509.Tick += new System.EventHandler(this.__0x4540);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x4503);
			this.Name = "NewObjectWindow";
			this.Size = new System.Drawing.Size(1054, 714);
			this.WindowTitle = "New Object";
			((System.ComponentModel.ISupportInitialize)(this.__0x4503.Panel1)).EndInit();
			this.__0x4503.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4503.Panel2)).EndInit();
			this.__0x4503.Panel2.ResumeLayout(false);
			this.__0x4503.Panel2.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4503)).EndInit();
			this.__0x4503.ResumeLayout(false);
			this.__0x4513.ResumeLayout(false);
			this.__0x4513.PerformLayout();
			this.__0x4510.ResumeLayout(false);
			this.__0x4510.PerformLayout();
			this.ResumeLayout(false);

        }

        #endregion

        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4500;
        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4501;
		private ContentBrowser __0x4502;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4503;
		private System.Windows.Forms.Label __0x4504;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4505;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4506;
		private System.Windows.Forms.Label __0x4507;
		private System.Windows.Forms.TableLayoutPanel __0x4508;
		private System.Windows.Forms.Timer __0x4509;
		private EUserControl __0x4510;
		private System.Windows.Forms.Label __0x4511;
		private System.Windows.Forms.Label __0x4512;
		private System.Windows.Forms.Panel __0x4513;
	}
}




namespace NeoAxis.Editor
{
	public class ObjectCreationModeAttribute : Attribute
	{
		Type __0x4570;

		public ObjectCreationModeAttribute( Type creationModeClass )
		{
			this.__0x4570 = creationModeClass;
		}

		public Type CreationModeClass
		{
			get { return __0x4570; }
		}
	}

	

	public abstract class ObjectCreationMode
	{
		DocumentWindowWithViewport __0x4571;
		Component __0x4572;

		

		protected ObjectCreationMode( DocumentWindowWithViewport documentWindow, Component creatingObject )
		{
			this.__0x4571 = documentWindow;
			this.__0x4572 = creatingObject;
		}

		public DocumentWindowWithViewport DocumentWindow
		{
			get { return __0x4571; }
		}

		public Component CreatingObject
		{
			get { return __0x4572; }
			set { __0x4572 = value; }
		}

		protected virtual void OnDestroy() { }
		public delegate void DestroyDelegate( ObjectCreationMode __0x4585 );
		public event DestroyDelegate Destroy;
		internal void PerformDestroy()
		{
			OnDestroy();
			Destroy?.Invoke( this );
		}

		protected virtual void OnGetTextInfoRightBottomCorner( List<string> lines ) { }
		public delegate void GetTextInfoRightBottomCornerDelegate( ObjectCreationMode __0x4586, List<string> __0x4587 );
		public event GetTextInfoRightBottomCornerDelegate GetTextInfoRightBottomCorner;
		internal void PerformGetTextInfoRightBottomCorner( List<string> lines )
		{
			OnGetTextInfoRightBottomCorner( lines );
			GetTextInfoRightBottomCorner?.Invoke( this, lines );
		}

		protected virtual void OnGetTextInfoCenterBottomCorner( List<string> lines ) { }
		public delegate void GetTextInfoCenterBottomCornerDelegate( ObjectCreationMode __0x4588, List<string> __0x4589 );
		public event GetTextInfoCenterBottomCornerDelegate GetTextInfoCenterBottomCorner;
		internal void PerformGetTextInfoCenterBottomCorner( List<string> lines )
		{
			OnGetTextInfoCenterBottomCorner( lines );
			GetTextInfoCenterBottomCorner?.Invoke( this, lines );
		}

		protected virtual bool OnKeyDown( Viewport viewport, KeyEvent e ) { return false; }
		public delegate void KeyDownUpDelegate( ObjectCreationMode __0x4590, Viewport __0x4591, KeyEvent __0x4592, ref bool __0x4593 );
		public event KeyDownUpDelegate KeyDown;
		internal bool PerformKeyDown( Viewport viewport, KeyEvent e )
		{
			var __0x4573 = OnKeyDown( viewport, e );
			if( !__0x4573 )
				KeyDown?.Invoke( this, viewport, e, ref __0x4573 );
			return __0x4573;
		}

		protected virtual bool OnKeyPress( Viewport viewport, KeyPressEvent e ) { return false; }
		public delegate void KeyPressDelegate( ObjectCreationMode __0x4594, Viewport __0x4595, KeyPressEvent __0x4596, ref bool __0x4597 );
		public event KeyPressDelegate KeyPress;
		internal bool PerformKeyPress( Viewport viewport, KeyPressEvent e )
		{
			var __0x4574 = OnKeyPress( viewport, e );
			if( !__0x4574 )
				KeyPress?.Invoke( this, viewport, e, ref __0x4574 );
			return __0x4574;
		}

		protected virtual bool OnKeyUp( Viewport viewport, KeyEvent e ) { return false; }
		public event KeyDownUpDelegate KeyUp;
		internal bool PerformKeyUp( Viewport viewport, KeyEvent e )
		{
			var __0x4575 = OnKeyUp( viewport, e );
			if( !__0x4575 )
				KeyUp?.Invoke( this, viewport, e, ref __0x4575 );
			return __0x4575;
		}

		protected virtual bool OnMouseDown( Viewport viewport, EMouseButtons button ) { return false; }
		public delegate void MouseClickDelegate( ObjectCreationMode __0x4598, Viewport __0x4599, EMouseButtons __0x4600, ref bool __0x4601 );
		public event MouseClickDelegate MouseDown;
		internal bool PerformMouseDown( Viewport viewport, EMouseButtons button )
		{
			var __0x4576 = OnMouseDown( viewport, button );
			if( !__0x4576 )
				MouseDown?.Invoke( this, viewport, button, ref __0x4576 );
			return __0x4576;
		}

		protected virtual bool OnMouseUp( Viewport viewport, EMouseButtons button ) { return false; }
		public event MouseClickDelegate MouseUp;
		internal bool PerformMouseUp( Viewport viewport, EMouseButtons button )
		{
			var __0x4577 = OnMouseUp( viewport, button );
			if( !__0x4577 )
				MouseUp?.Invoke( this, viewport, button, ref __0x4577 );
			return __0x4577;
		}

		protected virtual bool OnMouseDoubleClick( Viewport viewport, EMouseButtons button ) { return false; }
		public event MouseClickDelegate MouseDoubleClick;
		internal bool PerformMouseDoubleClick( Viewport viewport, EMouseButtons button )
		{
			var __0x4578 = OnMouseDoubleClick( viewport, button );
			if( !__0x4578 )
				MouseDoubleClick?.Invoke( this, viewport, button, ref __0x4578 );
			return __0x4578;
		}

		protected virtual void OnMouseMove( Viewport viewport, Vector2 mouse ) { }
		public delegate void MouseMoveDelegate( ObjectCreationMode __0x4602, Viewport __0x4603, Vector2 __0x4604 );
		public event MouseMoveDelegate MouseMove;
		internal void PerformMouseMove( Viewport viewport, Vector2 mouse )
		{
			OnMouseMove( viewport, mouse );
			MouseMove?.Invoke( this, viewport, mouse );
		}

		protected virtual bool OnMouseRelativeModeChanged( Viewport viewport ) { return false; }
		public delegate void MouseRelativeModeChangedDelegate( ObjectCreationMode __0x4605, Viewport __0x4606, ref bool __0x4607 );
		public event MouseRelativeModeChangedDelegate MouseRelativeModeChanged;
		internal bool PerformMouseRelativeModeChanged( Viewport viewport )
		{
			var __0x4579 = OnMouseRelativeModeChanged( viewport );
			if( !__0x4579 )
				MouseRelativeModeChanged?.Invoke( this, viewport, ref __0x4579 );
			return __0x4579;
		}

		protected virtual bool OnMouseWheel( Viewport viewport, int delta ) { return false; }
		public delegate void MouseWheelDelegate( ObjectCreationMode __0x4608, Viewport __0x4609, int __0x4610, ref bool __0x4611 );
		public event MouseWheelDelegate MouseWheel;
		internal bool PerformMouseWheel( Viewport viewport, int delta )
		{
			var __0x4580 = OnMouseWheel( viewport, delta );
			if( !__0x4580 )
				MouseWheel?.Invoke( this, viewport, delta, ref __0x4580 );
			return __0x4580;
		}

		protected virtual bool OnJoystickEvent( Viewport viewport, JoystickInputEvent e ) { return false; }
		public delegate void JoystickEventDelegate( ObjectCreationMode __0x4612, Viewport __0x4613, JoystickInputEvent __0x4614, ref bool __0x4615 );
		public event JoystickEventDelegate JoystickEvent;
		internal bool PerformJoystickEvent( Viewport viewport, JoystickInputEvent e )
		{
			var __0x4581 = OnJoystickEvent( viewport, e );
			if( !__0x4581 )
				JoystickEvent?.Invoke( this, viewport, e, ref __0x4581 );
			return __0x4581;
		}

		protected virtual bool OnSpecialInputDeviceEvent( Viewport viewport, InputEvent e ) { return false; }
		public delegate void SpecialInputDeviceEventDelegate( ObjectCreationMode __0x4616, Viewport __0x4617, InputEvent __0x4618, ref bool __0x4619 );
		public event SpecialInputDeviceEventDelegate SpecialInputDeviceEvent;
		internal bool PerformSpecialInputDeviceEvent( Viewport viewport, InputEvent e )
		{
			var __0x4582 = OnSpecialInputDeviceEvent( viewport, e );
			if( !__0x4582 )
				SpecialInputDeviceEvent?.Invoke( this, viewport, e, ref __0x4582 );
			return __0x4582;
		}

		protected virtual void OnTick( Viewport viewport, double delta ) { }
		public delegate void TickDelegate( ObjectCreationMode __0x4620, Viewport __0x4621, double __0x4622 );
		public event TickDelegate Tick;
		internal void PerformTick( Viewport viewport, double delta )
		{
			OnTick( viewport, delta );
			Tick?.Invoke( this, viewport, delta );
		}

		protected virtual void OnUpdateBegin( Viewport viewport ) { }
		public delegate void UpdateBeginDelegate( ObjectCreationMode __0x4623, Viewport __0x4624 );
		public event UpdateBeginDelegate UpdateBegin;
		internal void PerformUpdateBegin( Viewport viewport )
		{
			OnUpdateBegin( viewport );
			UpdateBegin?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context ) { }
		public delegate void UpdateGetObjectInSceneRenderingContextDelegate( ObjectCreationMode __0x4625, Viewport __0x4626, ref Component_ObjectInSpace.RenderingContext __0x4627 );
		public event UpdateGetObjectInSceneRenderingContextDelegate UpdateGetObjectInSceneRenderingContext;
		internal void PerformUpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context )
		{
			OnUpdateGetObjectInSceneRenderingContext( viewport, ref context );
			UpdateGetObjectInSceneRenderingContext?.Invoke( this, viewport, ref context );
		}

		protected virtual void OnUpdateBeforeOutput( Viewport viewport ) { }
		public delegate void UpdateBeforeOutputDelegate( ObjectCreationMode __0x4628, Viewport __0x4629 );
		public event UpdateBeforeOutputDelegate UpdateBeforeOutput;
		internal void PerformUpdateBeforeOutput( Viewport viewport )
		{
			OnUpdateBeforeOutput( viewport );
			UpdateBeforeOutput?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateBeforeOutput2( Viewport viewport ) { }
		public delegate void UpdateBeforeOutput2Delegate( ObjectCreationMode __0x4630, Viewport __0x4631 );
		public event UpdateBeforeOutput2Delegate UpdateBeforeOutput2;
		internal void PerformUpdateBeforeOutput2( Viewport viewport )
		{
			OnUpdateBeforeOutput2( viewport );
			UpdateBeforeOutput2?.Invoke( this, viewport );
		}

		protected virtual void OnUpdateEnd( Viewport viewport ) { }
		public delegate void UpdateEndDelegate( ObjectCreationMode __0x4632, Viewport __0x4633 );
		public event UpdateEndDelegate UpdateEnd;
		internal void PerformUpdateEnd( Viewport viewport )
		{
			OnUpdateEnd( viewport );
			UpdateEnd?.Invoke( this, viewport );
		}

		protected virtual void OnViewportUpdateGetCameraSettings( ref Component_Camera camera ) { }
		public delegate void ViewportUpdateGetCameraSettingsDelegate( ObjectCreationMode __0x4634, ref Component_Camera __0x4635 );
		public event ViewportUpdateGetCameraSettingsDelegate ViewportUpdateGetCameraSettings;
		internal void PerformViewportUpdateGetCameraSettings( ref Component_Camera camera )
		{
			OnViewportUpdateGetCameraSettings( ref camera );
			ViewportUpdateGetCameraSettings?.Invoke( this, ref camera );
		}

		
		protected virtual void OnEditorActionGetState( EditorAction.GetStateContext context ) { }
		public delegate void EditorActionGetStateDelegate( ObjectCreationMode __0x4636, EditorAction.GetStateContext __0x4637 );
		public event EditorActionGetStateDelegate EditorActionGetState;
		internal void PerformEditorActionGetState( EditorAction.GetStateContext context )
		{
			OnEditorActionGetState( context );
			EditorActionGetState?.Invoke( this, context );
		}

		
		protected virtual void OnEditorActionClick( EditorAction.ClickContext context ) { }
		public delegate void EditorActionClickDelegate( ObjectCreationMode __0x4638, EditorAction.ClickContext __0x4639 );
		public event EditorActionClickDelegate EditorActionClick;
		internal void PerformEditorActionClick( EditorAction.ClickContext context )
		{
			OnEditorActionClick( context );
			EditorActionClick?.Invoke( this, context );
		}

		public virtual void Finish( bool cancel )
		{
			if( !cancel )
			{
				
				var __0x4583 = DocumentWindow.Document;
				var __0x4584 = new UndoActionComponentCreateDelete( __0x4583, new Component[] { CreatingObject }, true );
				__0x4583.UndoSystem.CommitAction( __0x4584 );
				__0x4583.Modified = true;
			}
			else
			{
				CreatingObject?.Dispose();
				__0x4571.SelectObjects( null );
			}

			DocumentWindow.ObjectCreationModeSet( null );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectSettingsHeader : EUserControl
	{
		

		

		public ObjectSettingsHeader()
		{
			__0x4642();
		}

		[Browsable( false )]
		public ObjectSettingsWindow ObjectSettingsWindow
		{
			get
			{
				var __0x4640 = Parent as ObjectSettingsWindow;
				if( __0x4640 != null )
					return __0x4640;
				else
					return null;

				
				
				
				
				
			}
		}

		
		
		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class ObjectSettingsHeader
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4641 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4641 != null ) )
			{
				__0x4641.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4642()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectSettingsExtension";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class ObjectSettingsHeader_ObjectInfo : ObjectSettingsHeader
	{
		bool? __0x4643;

		

		public ObjectSettingsHeader_ObjectInfo()
		{
			__0x4673();

			__0x4663.Values.Image = EditorResourcesCache.Type;

			if( IsDesignerHosted )
				return;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x4664.SetToolTip( __0x4663, EditorLocalization.Translate( "SettingsWindow", "Type Settings" ) );
			__0x4664.SetToolTip( __0x4662, EditorLocalization.Translate( "SettingsWindow", "Reset Type Settings to default." ) );

			if( __0x4659.Height < __0x4659.PreferredSize.Height )
				__0x4659.Height = __0x4659.PreferredSize.Height;
			if( __0x4660.Height < __0x4660.PreferredSize.Height )
				__0x4660.Height = __0x4660.PreferredSize.Height;
		}

		private void __0x4665( object __0x4674, EventArgs __0x4675 )
		{

		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;
			if( ObjectSettingsWindow == null )
				return;
			if( ObjectSettingsWindow.ObjectOfWindow == null )
				return;

			__0x4661.Start();

			__0x4666();
			__0x4668();
			__0x4669();
		}

		void __0x4666()
		{
			var __0x4644 = ObjectSettingsWindow.ObjectOfWindow;


			string __0x4645;

			
			
			
			

			var __0x4646 = __0x4644 as Component;
			if( __0x4646 != null )
			{
				if( !string.IsNullOrEmpty( __0x4646.Name ) )
					__0x4645 = string.Format( "{0} - {1}", __0x4646.Name, __0x4646.BaseType.ToString() );
				else
					__0x4645 = __0x4646.BaseType.ToString();
			}
			else
				__0x4645 = __0x4644.ToString();
			
			
			
			
			
			

			if( __0x4659.Text != __0x4645 )
				__0x4659.Text = __0x4645;





			
			

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			






			

			

			
			
			

			

			
			
			

			
			
			

			
			

			
			
			
			
			

			
			
			
			
			
			


			
			

			
			

			
			


			
			
			





			
			
			
			
			

			
			
			
			
			
			
			
		}

		Component __0x4667()
		{
			if( ObjectSettingsWindow?.Document != null )
				return ObjectSettingsWindow.ObjectOfWindow as Component;
			else
				return null;
		}

		void __0x4668()
		{
			__0x4663.Location = new Point( ClientRectangle.Right - __0x4663.Width, 0 );
			__0x4662.Location = new Point( __0x4663.Location.X - __0x4662.Width - 2, 5 );

			__0x4659.Width = __0x4662.Location.X - 2 - __0x4659.Location.X;
			__0x4660.Width = __0x4659.Width;
		}

		void __0x4669()
		{
			var __0x4647 = __0x4667();

			bool __0x4648 = __0x4647 != null && __0x4647.TypeSettingsPrivateObjects != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4662.Enabled != __0x4648 )
				__0x4662.Enabled = __0x4648;
			if( __0x4662.Visible != __0x4648 )
				__0x4662.Visible = __0x4648;
			if( __0x4643 != __0x4648 )
			{
				__0x4643 = __0x4648;

				if( EditorAPI.DarkTheme )
					__0x4662.Values.Image = __0x4648 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
				else
					__0x4662.Values.Image = __0x4648 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
			}

			var __0x4649 = __0x4647 != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4663.Enabled != __0x4649 )
				__0x4663.Enabled = __0x4649;

			bool __0x4650 = ObjectSettingsWindow?.Document?.SpecialMode == "ProjectSettingsUserMode";
			var __0x4651 = !__0x4650 && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x4663.Visible != __0x4651 )
				__0x4663.Visible = __0x4651;
		}

		private void __0x4670( object __0x4676, EventArgs __0x4677 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x4666();
			__0x4669();
		}

		private void __0x4671( object __0x4678, EventArgs __0x4679 )
		{
			var __0x4652 = __0x4667();
			if( __0x4652 != null )
			{
				var __0x4653 = new ComponentTypeSettingsForm( ObjectSettingsWindow.Document, __0x4652 );
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x4653.ShowDialog();
				} );
			}
		}

		private void __0x4672( object __0x4680, EventArgs __0x4681 )
		{
			var __0x4654 = __0x4667();
			if( __0x4654 != null )
			{
				var __0x4655 = EditorLocalization.Translate( "SettingsWindow", "Reset to default?" );
				if( EditorMessageBox.ShowQuestion( __0x4655, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
				{
					var __0x4656 = __0x4654.TypeSettingsPrivateObjects;

					__0x4654.TypeSettingsPrivateObjects = null;

					var __0x4657 = new UndoActionPropertiesChange.Item( __0x4654, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x4656, null );
					ObjectSettingsWindow.Document.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x4657 ) );
					ObjectSettingsWindow.Document.Modified = true;
				}
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( Created )
				__0x4668();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ObjectSettingsHeader_ObjectInfo
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4658 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4658 != null))
            {
                __0x4658.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4673()
        {
			this.__0x4658 = new System.ComponentModel.Container();
			this.__0x4659 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x4660 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x4661 = new System.Windows.Forms.Timer(this.__0x4658);
			this.__0x4662 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4663 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4664 = new NeoAxis.Editor.EngineToolTip(this.__0x4658);
			this.SuspendLayout();
			
			
			
			
   
			this.__0x4659.AutoSize = false;
			this.__0x4659.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.BoldControl;
			this.__0x4659.Location = new System.Drawing.Point(2, 2);
			this.__0x4659.Name = "kryptonLabel1";
			this.__0x4659.Size = new System.Drawing.Size(422, 25);
			this.__0x4659.TabIndex = 7;
			this.__0x4659.Values.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
   
			this.__0x4660.AutoSize = false;
			this.__0x4660.Location = new System.Drawing.Point(112, 22);
			this.__0x4660.Name = "kryptonLabel2";
			this.__0x4660.Size = new System.Drawing.Size(480, 25);
			this.__0x4660.TabIndex = 8;
			this.__0x4660.Values.Text = "{Object} {Object} {Object} {Object}";
			this.__0x4660.Visible = false;
			
			
			
			this.__0x4661.Interval = 50;
			this.__0x4661.Tick += new System.EventHandler(this.__0x4670);
			
			
			
			
			this.__0x4662.Location = new System.Drawing.Point(432, 5);
			this.__0x4662.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x4662.Name = "buttonTypeSettingsDefaultValue";
			this.__0x4662.Size = new System.Drawing.Size(15, 15);
			this.__0x4662.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4662.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4662.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4662.TabIndex = 10;
			this.__0x4662.Values.Text = "";
			this.__0x4662.Click += new System.EventHandler(this.__0x4672);
			
			
			
			
			
			this.__0x4663.Location = new System.Drawing.Point(450, 0);
			this.__0x4663.Name = "buttonTypeSettings";
			this.__0x4663.Size = new System.Drawing.Size(30, 28);
			this.__0x4663.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4663.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x4663.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x4663.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x4663.TabIndex = 9;
			this.__0x4663.Values.Image = global::NeoAxis.Properties.Resources.Class;
			this.__0x4663.Values.Text = "";
			this.__0x4663.Click += new System.EventHandler(this.__0x4671);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4662);
			this.Controls.Add(this.__0x4663);
			this.Controls.Add(this.__0x4659);
			this.Controls.Add(this.__0x4660);
			this.Name = "ObjectSettingsHeader_ObjectInfo";
			this.Size = new System.Drawing.Size(480, 28);
			this.ResumeLayout(false);

        }

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x4659;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x4660;
		private System.Windows.Forms.Timer __0x4661;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4662;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4663;
		private NeoAxis.Editor.EngineToolTip __0x4664;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Object Settings Window.
	/// </summary>
	public partial class ObjectSettingsWindow : DocumentWindow
	{
		static string __0x4682 = "General";

		const int __0x4683 = 10;

		
		

		List<PanelData> __0x4684 = new List<PanelData>();

		PanelData __0x4685;

		bool __0x4686;

		bool __0x4687;
		object[] __0x4688;

		

		public class PanelData : PanelDataWithTableLayout
		{
		}

		

		public ObjectSettingsWindow()
		{
			__0x4725();

			__0x4702.Options.FilteringModeButton = false;
			__0x4702.Options.DisplayPropertiesSortFilesBy = false;
			__0x4702.Options.DisplayPropertiesOpenButton = false;

			if( EditorAPI.DarkTheme )
			{
				__0x4706.StateNormal.Back.Color1 = Color.FromArgb( 54, 54, 54 );

				
				
				
			}

			EditorLocalization.TranslateForm( "ObjectSettingsWindow", this );
		}

		public override void InitDocumentWindow( DocumentInstance document, object objectOfWindow, bool openAsSettings, Dictionary<string, object> windowTypeSpecificOptions )
		{
			base.InitDocumentWindow( document, objectOfWindow, openAsSettings, windowTypeSpecificOptions );

			if( __0x4702 != null )
				__0x4702.Init( this, objectOfWindow, null );

			
			
			if( document.SpecialMode == "ProjectSettingsUserMode" )
				ReadOnlyHierarchy = true;

			if( document.SpecialMode == "ProjectSettingsUserMode" )
			{
				__0x4705.Values.Text = EditorLocalization.Translate( "General", "Cancel" );
			}
			else
			{
				__0x4707.Enabled = false;
				__0x4707.Visible = false;
				__0x4708.Enabled = false;
				__0x4708.Visible = false;
			}

			if( document.SpecialMode == "ProjectSettingsUserMode" )
			{
				__0x4702.OverrideItemText += __0x4712;
			}
		}

		private void __0x4712( ContentBrowser __0x4726, ContentBrowser.Item __0x4727, ref string __0x4728 )
		{
			__0x4728 = EditorLocalization.Translate( "ProjectSettings.Page", __0x4728 );
		}

		[Browsable( false )]
		public bool ReadOnlyHierarchy
		{
			get { return __0x4686; }
			set
			{
				__0x4686 = value;
				if( __0x4702 != null )
					__0x4702.ReadOnlyHierarchy = value;
			}
		}

		private void __0x4713( object __0x4729, EventArgs __0x4730 )
		{
			

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			var __0x4689 = __0x4702.GetAllItems();
			if( __0x4689.Length != 0 )
			{
				ContentBrowser.Item __0x4690 = null;
				if( Document != null && Document.SpecialMode == "ProjectSettingsUserMode" && __0x4682 != "" )
					__0x4690 = __0x4689.FirstOrDefault( __0x4731 => __0x4731.Text == __0x4682 );
				if( __0x4690 == null )
					__0x4690 = __0x4689[ 0 ];

				__0x4702.SelectItems( new ContentBrowser.Item[] { __0x4690 } );
			}

			__0x4701.Start();

			__0x4714();
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		void __0x4714()
		{
			__0x4703.Width = ClientRectangle.Width - 18;
		}

		private void __0x4715( object __0x4732, EventArgs __0x4733 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( KryptonPage == null || KryptonPage.Parent == null )
				return;
			
			

			
			if( __0x4687 )
			{
				object[] __0x4691 = __0x4688;

				__0x4687 = false;
				__0x4688 = null;

				RemoveCachedPanels();

				if( __0x4691 != null )
					SelectObjects( __0x4691 );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4714();
		}

		
		
		
		
		

		
		
		
		
		

		private void __0x4716( ContentBrowser __0x4734, IList<ContentBrowser.Item> __0x4735, bool __0x4736, ref bool __0x4737 )
		{
			
			

			var __0x4692 = new List<object>();

			foreach( var __0x4709 in __0x4735 )
			{
				if( __0x4709 is ContentBrowserItem_Component )
				{
					if( __0x4709.ContainedObject != null )
						__0x4692.Add( __0x4709.ContainedObject );
				}
			}

			if( __0x4692.Count == 0 )
				__0x4692.Add( ObjectOfWindow );

			SelectObjects( __0x4692 );

			if( Document != null && Document.SpecialMode == "ProjectSettingsUserMode" )
			{
				if( __0x4735.Count == 1 )
					__0x4682 = __0x4735[ 0 ].Text;
				
				
			}
		}

		private void __0x4717( ContentBrowser __0x4738, ContentBrowser.Item __0x4739, ref bool __0x4740 )
		{
		}

		bool __0x4718( object[] __0x4741, object[] __0x4742 )
		{
			if( __0x4741.Length != __0x4742.Length )
				return false;
			for( int __0x4693 = 0; __0x4693 < __0x4741.Length; __0x4693++ )
			{
				if( __0x4741[ __0x4693 ] != __0x4742[ __0x4693 ] )
					return false;
			}
			return true;
		}

		PanelData __0x4719( object[] __0x4743 )
		{
			foreach( var __0x4710 in __0x4684 )
			{
				if( __0x4718( __0x4710.selectedObjects, __0x4743 ) )
					return __0x4710;
			}
			return null;
		}

		PanelData __0x4720( object[] __0x4744, bool __0x4745 )
		{
			PanelData __0x4694 = new PanelData();
			__0x4684.Add( __0x4694 );
			__0x4694.selectedObjects = __0x4744;
			__0x4694.CreateAndAddPanel( __0x4704 );

			
			if( !__0x4745 && __0x4694.layoutPanel != null )
			{
				__0x4694.layoutPanel.Visible = false;
				__0x4694.layoutPanel.Enabled = false;
			}

			SettingsProvider.Create( this, __0x4694.selectedObjects, __0x4694.layoutPanel, null, true );

			
			
			
			
			
			
			
			
			
			

			

			
			

			
			

			

			

			
			
			
			
			

			
			
			
			

			

			
			

			
			
			
			
			
			

			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			

			
			

			
			
			
			
			
			
			

			return __0x4694;
		}

		void __0x4721( PanelData __0x4746 )
		{
			if( SelectedPanel == __0x4746 )
				SelectedPanel = null;

			var __0x4695 = __0x4746.layoutPanel;
			__0x4695.Parent.Controls.Remove( __0x4695 );
			__0x4695.Dispose();

			__0x4684.Remove( __0x4746 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x4684.Count != 0 )
				__0x4721( __0x4684[ __0x4684.Count - 1 ] );
		}

		public void SelectObjects( IList<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			object[] __0x4696 = new object[ objects.Count ];
			objects.CopyTo( __0x4696, 0 );

			PanelData __0x4697 = __0x4719( __0x4696 );

			
			if( __0x4697 != null )
			{
				
				__0x4684.Remove( __0x4697 );
				__0x4684.Add( __0x4697 );
			}

			
			if( __0x4697 == null )
			{
				
				while( __0x4684.Count >= __0x4683 )
					__0x4721( __0x4684[ 0 ] );

				__0x4697 = __0x4720( __0x4696, true );
			}

			SelectedPanel = __0x4697;

			
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x4685; }
			set
			{
				if( __0x4685 == value )
					return;

				var __0x4698 = __0x4685;
				__0x4685 = value;

				if( __0x4685 != null )
				{
					__0x4685.layoutPanel.Enabled = true;
					__0x4685.layoutPanel.Visible = true;
					
				}

				if( __0x4698 != null )
				{
					__0x4698.layoutPanel.Visible = false;
					__0x4698.layoutPanel.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				
			}
		}

		private void __0x4722( object __0x4747, EventArgs __0x4748 )
		{
			if( Document.SpecialMode == "ProjectSettingsUserMode" )
				ShowDialogAndSaveDocumentAutoAnswer = EDialogResult.No;
			Close();
		}

		private void __0x4723( object __0x4749, EventArgs __0x4750 )
		{
			if( Document.SpecialMode == "ProjectSettingsUserMode" )
				ShowDialogAndSaveDocumentAutoAnswer = EDialogResult.Yes;
			Close();
		}

		private void __0x4724( object __0x4751, EventArgs __0x4752 )
		{
			Document.Save();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x4702.DocumentWindow, __0x4702.GetSelectedContainedObjects() );
		}

		protected override bool CanUpdateSettingsWindowsSelectedObjects()
		{
			return false;
		}

		
		
		
		
		
		
		
		
		
		

		protected override void OnKryptonPageParentChanged()
		{
			base.OnKryptonPageParentChanged();

			
			if( KryptonPage != null && KryptonPage.Parent == null )
			{
				if( SelectedPanel != null )
				{
					__0x4687 = true;
					__0x4688 = SelectedPanel.selectedObjects;
					
					

					RemoveCachedPanels();
				}
			}
		}
	}

	public class PanelDataWithTableLayout
	{
		

		public object[] selectedObjects;
		public TableLayoutPanel layoutPanel;

		

		public TableLayoutPanel CreateAndAddPanel( Control owner )
		{
			TableLayoutPanel __0x4699 = new TableLayoutPanel();
			__0x4699.ColumnStyles.Add( new ColumnStyle( SizeType.Percent, 50f ) );
			__0x4699.Tag = this;
			__0x4699.SetBounds( 0, 0, owner.Width, owner.Height );
			__0x4699.Dock = DockStyle.Fill;

			owner.Controls.Add( __0x4699 );

			this.layoutPanel = __0x4699;

			return __0x4699;
		}

		public T GetControl<T>() where T : Control
		{
			if( layoutPanel != null )
			{
				foreach( Control __0x4711 in layoutPanel.Controls )
					if( typeof( T ).IsAssignableFrom( __0x4711.GetType() ) )
						return (T)__0x4711;
			}
			return null;
		}
	}
}
namespace NeoAxis.Editor
{
    partial class ObjectSettingsWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4700 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4700 != null))
            {
                __0x4700.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4725()
        {
			this.__0x4700 = new System.ComponentModel.Container();
			this.__0x4701 = new System.Windows.Forms.Timer(this.__0x4700);
			this.__0x4702 = new NeoAxis.Editor.ContentBrowser();
			this.__0x4704 = new System.Windows.Forms.Panel();
			this.__0x4703 = new NeoAxis.Editor.ObjectSettingsHeader_ObjectInfo();
			this.__0x4705 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4706 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x4707 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4708 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			( (System.ComponentModel.ISupportInitialize)(this.__0x4706)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x4706.Panel1)).BeginInit();
			this.__0x4706.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x4706.Panel2)).BeginInit();
			this.__0x4706.Panel2.SuspendLayout();
			this.__0x4706.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4701.Interval = 10;
			this.__0x4701.Tick += new System.EventHandler(this.__0x4715);
			
			
			
			this.__0x4702.CanSelectObjectSettings = false;
			this.__0x4702.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4702.FilteringMode = null;
			this.__0x4702.ListViewModeOverride = null;
			this.__0x4702.Location = new System.Drawing.Point(0, 0);
			this.__0x4702.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4702.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Objects;
			this.__0x4702.MultiSelect = true;
			this.__0x4702.Name = "objectsBrowser1";
			this.__0x4702.ReadOnlyHierarchy = false;
			this.__0x4702.Size = new System.Drawing.Size(292, 545);
			this.__0x4702.TabIndex = 0;
			this.__0x4702.ThisIsSettingsWindow = false;
			this.__0x4702.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x4716);
			this.__0x4702.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x4717);
			
			
			
			this.__0x4704.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4704.Location = new System.Drawing.Point(0, 0);
			this.__0x4704.Name = "panelSettings";
			this.__0x4704.Size = new System.Drawing.Size(569, 545);
			this.__0x4704.Padding = new System.Windows.Forms.Padding( 8, 0, 0, 0 );
			this.__0x4704.TabIndex = 0;
			
			
			
			
   
			this.__0x4703.Location = new System.Drawing.Point(9, 5);
			this.__0x4703.Margin = new System.Windows.Forms.Padding(0);
			this.__0x4703.Name = "objectSettingsHeader_ObjectInfo1";
			this.__0x4703.Size = new System.Drawing.Size(880, 26);
			this.__0x4703.TabIndex = 0;
			
			
			
			this.__0x4705.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4705.Location = new System.Drawing.Point(770, 589);
			this.__0x4705.Name = "kryptonButtonClose";
			this.__0x4705.Size = new System.Drawing.Size(117, 32);
			this.__0x4705.TabIndex = 3;
			this.__0x4705.Values.Text = "Close";
			this.__0x4705.Click += new System.EventHandler(this.__0x4722);
			
			
			
			this.__0x4706.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4706.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x4706.Location = new System.Drawing.Point(12, 33);
			this.__0x4706.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x4706.Panel1.Controls.Add(this.__0x4702);
			this.__0x4706.Panel1.StateCommon.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4706.Panel1.StateCommon.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			
			
			
			this.__0x4706.Panel2.Controls.Add(this.__0x4704);
			this.__0x4706.Panel2.StateCommon.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4706.Panel2.StateCommon.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x4706.Size = new System.Drawing.Size(876, 545);
			this.__0x4706.SplitterDistance = 292;
			this.__0x4706.SplitterPercent = 0.33333333333333331D;
			this.__0x4706.SplitterWidth = 8;
			this.__0x4706.StateNormal.Back.Color1 = System.Drawing.SystemColors.Control;
			this.__0x4706.StateNormal.Back.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x4706.TabIndex = 2;
			
			
			
			this.__0x4707.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x4707.Location = new System.Drawing.Point( 644, 589);
			this.__0x4707.Name = "kryptonButtonOK";
			this.__0x4707.Size = new System.Drawing.Size(117, 32);
			this.__0x4707.TabIndex = 2;
			this.__0x4707.Values.Text = "OK";
			this.__0x4707.Click += new System.EventHandler(this.__0x4723);
			
			
			
			this.__0x4708.Anchor = ( (System.Windows.Forms.AnchorStyles)( ( System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right ) ) );
			this.__0x4708.Location = new System.Drawing.Point( 518, 589 );
			this.__0x4708.Name = "kryptonButtonApply";
			this.__0x4708.Size = new System.Drawing.Size( 117, 32 );
			this.__0x4708.TabIndex = 1;
			this.__0x4708.Values.Text = "Apply";
			this.__0x4708.Click += new System.EventHandler( this.__0x4724 );
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x4707);
			this.Controls.Add( this.__0x4708 );
			this.Controls.Add(this.__0x4706);
			this.Controls.Add(this.__0x4703);
			this.Controls.Add(this.__0x4705);
			this.Name = "ObjectSettingsWindow";
			this.Size = new System.Drawing.Size(900, 632);
			this.WindowTitle = "Object Settings";
			this.Load += new System.EventHandler(this.__0x4713);
			((System.ComponentModel.ISupportInitialize)(this.__0x4706.Panel1)).EndInit();
			this.__0x4706.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4706.Panel2)).EndInit();
			this.__0x4706.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x4706)).EndInit();
			this.__0x4706.ResumeLayout(false);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x4701;
		private ContentBrowser __0x4702;
		private ObjectSettingsHeader_ObjectInfo __0x4703;
		private System.Windows.Forms.Panel __0x4704;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4705;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x4706;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4707;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4708;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Objects Window.
	/// </summary>
	public partial class ObjectsWindow : ForeachDocumentWindowContainer
	{
		ContentBrowserOptions __0x4753;

		

		public ObjectsWindow()
		{
			__0x4785();

			
			EngineConfig.SaveEvent += __0x4784;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		protected override void OnCreatePanelControl( PanelData panel )
		{
			base.OnCreatePanelControl( panel );

			var __0x4754 = panel.documentWindow.Document?.ResultComponent;
			
			
			

			if( __0x4754 != null )
			{
				var __0x4755 = new ContentBrowser();

				if( __0x4753 != null )
					__0x4755.Options = __0x4753;
				else
				{
					__0x4783( __0x4755 );
					__0x4753 = __0x4755.Options;
				}

				__0x4755.Mode = ContentBrowser.ModeEnum.Objects;
				__0x4755.CanSelectObjectSettings = true;
				__0x4755.Options.FilteringModeButton = false;
				__0x4755.Options.DisplayPropertiesSortFilesBy = false;
				__0x4755.Options.DisplayPropertiesOpenButton = false;
				__0x4755.TreeViewBorderDraw = BorderSides.Top;
				__0x4755.ListViewBorderDraw = BorderSides.Top;
				__0x4755.MultiSelect = true;
				
				
				

				__0x4755.Init( panel.documentWindow, __0x4754,  null );
				panel.control = __0x4755;
				panel.control.Dock = DockStyle.Fill;
				Controls.Add( panel.control );
				__0x4755.ItemAfterSelect += __0x4781;

				__0x4782( panel.documentWindow );
			}
			else
			{
				panel.control = new EUserControl();
				panel.control.Dock = DockStyle.Fill;
				Controls.Add( panel.control );
			}
		}

		private void __0x4781( ContentBrowser __0x4786, IList<ContentBrowser.Item> __0x4787, bool __0x4788, ref bool __0x4789 )
		{
			if( __0x4788 )
			{
				var __0x4756 = new List<object>();

				foreach( var __0x4777 in __0x4787 )
				{
					var __0x4757 = __0x4777.Owner.DocumentWindow;
					if( __0x4757 != null )
					{
						var __0x4758 = GetPanel( __0x4757 );
						if( __0x4758 != null )
						{
							var __0x4759 = __0x4777 as ContentBrowserItem_Component;
							if( __0x4759 != null )
								__0x4756.Add( __0x4759.Component );
						}
					}
				}

				__0x4786.DocumentWindow?.SelectObjects( __0x4756, false );
			}
		}

		public override void OnDocumentWindowSelectedObjectsChangedByUser( DocumentWindow documentWindow )
		{
			base.OnDocumentWindowSelectedObjectsChangedByUser( documentWindow );

			__0x4782( documentWindow );
		}

		void __0x4782( DocumentWindow __0x4790 )
		{
			var __0x4760 = GetPanel( __0x4790 );
			if( __0x4760 != null )
			{
				var __0x4761 = __0x4760.control as ContentBrowser;
				if( __0x4761 != null )
				{
					var __0x4762 = new List<ContentBrowser.Item>();

					if( __0x4790.SelectedObjects.Length != 0 )
					{
						
						{
							var __0x4763 = new ESet<Component>();
							foreach( var __0x4778 in __0x4790.SelectedObjects )
							{
								var __0x4764 = __0x4778 as Component;
								if( __0x4764 != null )
									__0x4763.AddRangeWithCheckAlreadyContained( __0x4764.GetAllParents( false ) );
							}
							foreach( var __0x4779 in __0x4763 )
							{
								var __0x4765 = __0x4761.FindItemByContainedObject( __0x4779 );
								if( __0x4765 != null )
									__0x4761.SelectItems( new ContentBrowser.Item[] { __0x4765 }, true, false );
							}
						}

						
						foreach( var __0x4780 in __0x4761.GetAllItems() )
						{
							var __0x4766 = __0x4780 as ContentBrowserItem_Component;
							if( __0x4766 != null && __0x4790.SelectedObjectsSet.Contains( __0x4766.Component ) )
								__0x4762.Add( __0x4780 );
						}
					}

					__0x4761.SelectItems( __0x4762.ToArray(), __0x4762.Count == 1 );
					
				}
			}
		}

		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		

		
		
		

		
		

		
		
		
		
		

		
		
		
		

		
		

		
		
		
		

		

		

		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		
		

		

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x4767 = SelectedPanel;
			if( __0x4767 != null )
			{
				var __0x4768 = __0x4767.control as ContentBrowser;
				if( __0x4768 != null )
					return new ObjectsInFocus( __0x4768.DocumentWindow, __0x4768.GetSelectedContainedObjects() );
			}
			return null;
		}

		void __0x4783( ContentBrowser __0x4791 )
		{
			var __0x4769 = EngineConfig.TextBlock.FindChild( "ObjectsWindow" );
			if( __0x4769 != null )
			{
				var __0x4770 = __0x4769.FindChild( "ContentBrowser" );
				if( __0x4770 != null )
				{
					__0x4791.Options.Load( __0x4770 );
					
				}
			}
		}

		void __0x4784()
		{
			var __0x4771 = SelectedPanel?.control as ContentBrowser;
			if( __0x4771 != null )
			{
				var __0x4772 = EngineConfig.TextBlock;

				var __0x4773 = __0x4772.FindChild( "ObjectsWindow" );
				if( __0x4773 != null )
					__0x4772.DeleteChild( __0x4773 );

				var __0x4774 = __0x4772.AddChild( "ObjectsWindow" );
				var __0x4775 = __0x4774.AddChild( "ContentBrowser" );
				__0x4771.Options.Save( __0x4775 );
				
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class ObjectsWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x4776 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x4776 != null))
            {
                __0x4776.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x4785()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectsWindow";
			this.WindowTitle = "Objects";
			this.ResumeLayout(false);

        }

        #endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class OKCancelTextBoxForm : EngineForm
	{
		public delegate bool CheckDelegate( string __0x4808, ref string __0x4809 );
		CheckDelegate __0x4792;

		public delegate bool OKDelegate( string __0x4810, ref string __0x4811 );
		OKDelegate __0x4793;

		bool __0x4794;

		

		public OKCancelTextBoxForm( string labelText, string textBoxText, string caption, CheckDelegate checkHandler, OKDelegate okHandler )
		{
			this.__0x4792 = checkHandler;
			this.__0x4793 = okHandler;

			__0x4807();

			this.__0x4800.Text = labelText;
			__0x4801.Text = textBoxText;

			if( string.IsNullOrEmpty( caption ) )
				Text = EngineInfo.NameWithVersion;
			else
				Text = caption;

			__0x4802.Text = "";

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x4798.Text = EditorLocalization.Translate( "General", __0x4798.Text );
			__0x4799.Text = EditorLocalization.Translate( "General", __0x4799.Text );
		}

		private void __0x4803( object __0x4812, EventArgs __0x4813 )
		{
			__0x4794 = true;

			__0x4806();

			
		}

		public string TextBoxText
		{
			get { return __0x4801.Text; }
		}

		private void __0x4804( object __0x4814, EventArgs __0x4815 )
		{
			if( !__0x4794 )
				return;

			string __0x4795 = "";
			if( __0x4792 != null && !__0x4792( TextBoxText, ref __0x4795 ) )
			{
				__0x4802.Text = __0x4795;
				__0x4798.Enabled = false;
			}
			else
			{
				__0x4802.Text = "";
				__0x4798.Enabled = true;
			}
		}

		private void __0x4805( object __0x4816, FormClosingEventArgs __0x4817 )
		{
			if( DialogResult == DialogResult.OK )
			{
				string __0x4796 = "";
				if( __0x4793 != null && !__0x4793( TextBoxText, ref __0x4796 ) )
				{
					__0x4801.Focus();
					__0x4817.Cancel = true;
					__0x4802.Text = __0x4796;
					return;
				}
			}
		}

		void __0x4806()
		{
			__0x4799.Location = new Point( ClientSize.Width - __0x4799.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x4799.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x4798.Location = new Point( __0x4799.Location.X - __0x4798.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x4799.Location.Y );
			__0x4801.Width = ClientSize.Width - __0x4801.Location.X - DpiHelper.Default.ScaleValue( 12 );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x4806();
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class OKCancelTextBoxForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4797 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4797 != null ) )
			{
				__0x4797.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4807()
		{
			this.__0x4798 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4799 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x4800 = new System.Windows.Forms.Label();
			this.__0x4801 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x4802 = new System.Windows.Forms.Label();
			this.SuspendLayout();
			
			
			
			
			this.__0x4798.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x4798.Location = new System.Drawing.Point(197, 87);
			this.__0x4798.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4798.Name = "buttonOK";
			this.__0x4798.Size = new System.Drawing.Size(117, 32);
			this.__0x4798.TabIndex = 1;
			this.__0x4798.Values.Text = "OK";
			
			
			
			
			this.__0x4799.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x4799.Location = new System.Drawing.Point(323, 87);
			this.__0x4799.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4799.Name = "buttonCancel";
			this.__0x4799.Size = new System.Drawing.Size(117, 32);
			this.__0x4799.TabIndex = 2;
			this.__0x4799.Values.Text = "Cancel";
			
			
			
			this.__0x4800.AutoSize = true;
			this.__0x4800.Location = new System.Drawing.Point(16, 11);
			this.__0x4800.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x4800.Name = "labelText";
			this.__0x4800.Size = new System.Drawing.Size(69, 17);
			this.__0x4800.TabIndex = 2;
			this.__0x4800.Text = "labelText:";
			
			
			
			
   
			this.__0x4801.Location = new System.Drawing.Point(20, 31);
			this.__0x4801.Margin = new System.Windows.Forms.Padding(4);
			this.__0x4801.Name = "textBoxName";
			this.__0x4801.Size = new System.Drawing.Size(419, 22);
			this.__0x4801.TabIndex = 0;
			this.__0x4801.TextChanged += new System.EventHandler(this.__0x4804);
			
			
			
			this.__0x4802.AutoSize = true;
			this.__0x4802.ForeColor = System.Drawing.Color.Red;
			this.__0x4802.Location = new System.Drawing.Point(16, 57);
			this.__0x4802.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x4802.Name = "labelError";
			this.__0x4802.Size = new System.Drawing.Size(66, 17);
			this.__0x4802.TabIndex = 3;
			this.__0x4802.Text = "Error text";
			
			
			
			this.AcceptButton = this.__0x4798;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x4799;
			this.ClientSize = new System.Drawing.Size(456, 134);
			this.Controls.Add(this.__0x4802);
			this.Controls.Add(this.__0x4801);
			this.Controls.Add(this.__0x4800);
			this.Controls.Add(this.__0x4799);
			this.Controls.Add(this.__0x4798);
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "OKCancelTextBoxForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Form";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x4805);
			this.Load += new System.EventHandler(this.__0x4803);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4798;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x4799;
		private System.Windows.Forms.Label __0x4800;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x4801;
		private System.Windows.Forms.Label __0x4802;
	}
}




namespace NeoAxis.Editor
{
	public partial class OutputWindow : DockWindow
	{
		
		
		

		
		public delegate void ProcessCmdKeyEventDelegate( OutputWindow __0x4838, ref Message __0x4839, Keys __0x4840, ref bool __0x4841 );
		public event ProcessCmdKeyEventDelegate ProcessCmdKeyEvent;

		EditorAssemblyInterface.ITextEditorControl __0x4818;

		

		public OutputWindow()
		{
			__0x4837();

			{
				__0x4818 = EditorAssemblyInterface.Instance.CreateTextEditorControl();
				var __0x4819 = (Control)this.__0x4818;

				this.Controls.Add( __0x4819 );
				
				
				
				__0x4819.Name = "kryptonRichTextBox1";
				this.__0x4818.EditorReadOnly = true;
				
				
				
				__0x4819.TabIndex = 2;
				this.__0x4818.EditorText = "";
				this.__0x4818.EditorWordWrap = true;

				__0x4818.Border = true;

				__0x4836();
			}

			__0x4828.Image = EditorResourcesCache.Options;
			__0x4827.Image = EditorResourcesCache.Delete;

			
			
			
			

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			__0x4828.Text = EditorLocalization.Translate( "OutputWindow", __0x4828.Text );
			__0x4827.Text = EditorLocalization.Translate( "OutputWindow", __0x4827.Text );

			__0x4826.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x4830( object __0x4842, PreviewKeyDownEventArgs __0x4843 )
		{
			
			
			
		}

		private void __0x4831( object __0x4844, EventArgs __0x4845 )
		{
			__0x4826.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x4826.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x4828.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x4827.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x4832();

			__0x4836();

			var __0x4820 = (Control)__0x4818;
			__0x4820.Select();
			
		}

		void __0x4832()
		{
			
			
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( ProcessCmdKeyEvent != null )
			{
				bool __0x4821 = false;
				ProcessCmdKeyEvent( this, ref msg, keyData, ref __0x4821 );
				if( __0x4821 )
					return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		void __0x4833( string __0x4846 )
		{
			__0x4818.EditorText += __0x4846;

			__0x4818.Select( __0x4818.EditorText.Length, 0 );
			__0x4818.ScrollToEnd();
			
		}

		public static void Print( string text )
		{
			var __0x4822 = EditorAPI.FindWindow<OutputWindow>();
			__0x4822?.__0x4833( text );
		}

		void __0x4834()
		{
			__0x4818.EditorText = "";

			__0x4818.Select( 0, 0 );
			__0x4818.ScrollToHome();
			
		}

		public static void Clear()
		{
			var __0x4823 = EditorAPI.FindWindow<OutputWindow>();
			__0x4823?.__0x4834();
		}

		private void __0x4835( object __0x4847, EventArgs __0x4848 )
		{
			__0x4834();
		}

		void __0x4836()
		{
			var __0x4824 = (Control)__0x4818;
			__0x4824?.SetBounds( 0, __0x4826.Height, ClientSize.Width, ClientSize.Height - __0x4826.Height );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x4836();
		}

	}
}

namespace NeoAxis.Editor
{
	partial class OutputWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4825 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x4825 != null ) )
			{
				__0x4825.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4837()
		{
			this.__0x4825 = new System.ComponentModel.Container();
			this.__0x4826 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x4828 = new System.Windows.Forms.ToolStripButton();
			this.__0x4829 = new System.Windows.Forms.ToolStripSeparator();
			this.__0x4827 = new System.Windows.Forms.ToolStripButton();
			
			this.__0x4826.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x4826.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x4826.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x4826.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x4828,
            this.__0x4829,
            this.__0x4827});
			this.__0x4826.Location = new System.Drawing.Point(0, 0);
			this.__0x4826.Name = "toolStrip1";
			this.__0x4826.AutoSize = false;
			this.__0x4826.Size = new System.Drawing.Size(713, 25);
			this.__0x4826.TabIndex = 1;
			this.__0x4826.Text = "toolStrip1";
			
			
			
			this.__0x4828.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4828.Enabled = false;
			this.__0x4828.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x4828.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4828.Name = "toolStripButtonOptions";
			this.__0x4828.AutoSize = false;
			this.__0x4828.Size = new System.Drawing.Size(23, 22);
			this.__0x4828.Text = "Options";
			
			
			
			this.__0x4829.Name = "toolStripSeparatorFilteringMode";
			this.__0x4829.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.__0x4827.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x4827.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.__0x4827.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x4827.Name = "toolStripButtonClear";
			this.__0x4827.AutoSize = false;
			this.__0x4827.Size = new System.Drawing.Size(23, 22);
			this.__0x4827.Text = "Clear";
			this.__0x4827.Click += new System.EventHandler(this.__0x4835);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			
			this.Controls.Add(this.__0x4826);
			this.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.471698F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "OutputWindow";
			this.Size = new System.Drawing.Size(713, 190);
			this.WindowTitle = "Output";
			this.Load += new System.EventHandler( this.__0x4831 );
			this.__0x4826.ResumeLayout(false);
			this.__0x4826.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		private NeoAxis.Editor.EngineToolStrip __0x4826;
		private System.Windows.Forms.ToolStripButton __0x4827;
		private System.Windows.Forms.ToolStripButton __0x4828;
		private System.Windows.Forms.ToolStripSeparator __0x4829;
		
	}
}





namespace NeoAxis.Editor
{
	

	public partial class PreviewControl : EUserControl
	{
		PreviewWindow.PanelData __0x4849;

		public PreviewControl()
		{
			__0x4851();
		}

		[Browsable( false )]
		public PreviewWindow.PanelData Panel
		{
			get { return __0x4849; }
			set { __0x4849 = value; }
		}

		[Browsable( false )]
		public object ObjectOfPreview
		{
			get
			{
				return __0x4849.objects[ 0 ];
				
			}
		}
	}
}
namespace NeoAxis.Editor
{
	partial class PreviewControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4850 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4851()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "PreviewControl";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	

	public partial class PreviewControlWithViewport : PreviewControl
	{
		
		Component_Scene __0x4852;
		bool __0x4853;

		
		Bounds __0x4854 = new Bounds( -1, -1, -1, 1, 1, 1 );
		Vector3 __0x4855;
		bool __0x4856;
		double __0x4857 = .01;
		double __0x4858 = 1;
		
		bool __0x4859;
		bool __0x4860;
		SphericalDirection __0x4861 = new SphericalDirection( -3.83, -.47 );

		
		

		float __0x4862 = 1;

		

		public PreviewControlWithViewport()
		{
			__0x4914();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			__0x4912.ViewportCreated += ViewportControl_ViewportCreated;
			__0x4912.ViewportDestroyed += ViewportControl_ViewportDestroyed;

			__0x4862 = EditorAPI.DPI > 96 ? 2 : 1;
		}

		[Browsable( false )]
		public EngineViewportControl ViewportControl
		{
			get { return __0x4912; }
		}

		[Browsable( false )]
		public Viewport Viewport
		{
			get { return ViewportControl?.Viewport; }
		}

		protected virtual void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			Viewport __0x4863 = sender.Viewport;

			__0x4863.KeyDown += Viewport_KeyDown;
			__0x4863.KeyPress += Viewport_KeyPress;
			__0x4863.KeyUp += Viewport_KeyUp;
			__0x4863.MouseDown += Viewport_MouseDown;
			__0x4863.MouseUp += Viewport_MouseUp;
			__0x4863.MouseDoubleClick += Viewport_MouseDoubleClick;
			__0x4863.MouseMove += Viewport_MouseMove;
			__0x4863.MouseRelativeModeChanged += Viewport_MouseRelativeModeChanged;
			__0x4863.MouseWheel += Viewport_MouseWheel;
			__0x4863.JoystickEvent += Viewport_JoystickEvent;
			__0x4863.SpecialInputDeviceEvent += Viewport_SpecialInputDeviceEvent;
			__0x4863.Tick += Viewport_Tick;
			__0x4863.UpdateBegin += Viewport_UpdateBegin;
			__0x4863.UpdateBeforeOutput += Viewport_UpdateBeforeOutput;
			__0x4863.UpdateBeforeOutput += Viewport_UpdateBeforeOutput2;
			__0x4863.UpdateEnd += Viewport_UpdateEnd;

			
			ViewportControl.Viewport.AttachedScene = __0x4852;

			
			__0x4863.AllowRenderScreenLabels = false;
		}

		protected virtual void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( button == EMouseButtons.Right )
			{
				__0x4859 = true;
				viewport.MouseRelativeMode = true;
			}
			if( button == EMouseButtons.Left )
			{
				__0x4860 = true;
				viewport.MouseRelativeMode = true;
			}
		}

		protected virtual void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			if( button == EMouseButtons.Right )
			{
				__0x4859 = false;
				if( !__0x4859 && !__0x4860 )
					viewport.MouseRelativeMode = false;
			}
			if( button == EMouseButtons.Left )
			{
				__0x4860 = false;
				if( !__0x4859 && !__0x4860 )
					viewport.MouseRelativeMode = false;
			}
		}

		protected virtual void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			if( ViewportControl.Viewport.MouseRelativeMode )
			{
				

				double __0x4864 = .001;

				
				if( __0x4859 )
				{
					__0x4861.Horizontal -= mouse.X * __0x4864;
					__0x4861.Vertical -= mouse.Y * __0x4864;
					double __0x4865 = Math.PI / 2 - .01;
					if( __0x4861.Vertical > __0x4865 )
						__0x4861.Vertical = __0x4865;
					if( __0x4861.Vertical < -__0x4865 )
						__0x4861.Vertical = -__0x4865;

					
				}

				
				if( __0x4860 ) 
				{
					double __0x4866 = .3f;

					__0x4858 += mouse.Y * __0x4866 * __0x4864;
					if( __0x4858 < .01f )
						__0x4858 = .01f;

					
					
					
				}
			}
		}

		protected virtual void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
		}

		protected virtual void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			

			double __0x4867 = .001;

			__0x4858 -= (double)delta * __0x4867;
			if( __0x4858 < .01 )
				__0x4858 = .01;
		}

		protected virtual void Viewport_JoystickEvent( Viewport viewport, JoystickInputEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_SpecialInputDeviceEvent( Viewport viewport, InputEvent e, ref bool handled )
		{
		}

		protected virtual void Viewport_Tick( Viewport sender, float delta )
		{
			if( __0x4912 != null )
				__0x4912.AutomaticUpdateFPS = (float)ProjectSettings.Get.MaxFramesPerSecondPreview;
		}

		protected virtual void Viewport_UpdateBegin( Viewport viewport )
		{
		}

		protected virtual void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
		}

		protected virtual void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			__0x4913();
		}

		protected virtual void Viewport_UpdateEnd( Viewport viewport )
		{
		}

		protected virtual void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
		}

		protected override void OnDestroy()
		{
			DestroyScene();

			base.OnDestroy();
		}

		[Browsable( false )]
		public Component_Scene Scene
		{
			get { return __0x4852; }
			set { __0x4852 = value; }
		}

		[Browsable( false )]
		public bool SceneNeedDispose
		{
			get { return __0x4853; }
			set { __0x4853 = value; }
		}

		[Browsable( false )]
		public Vector3 CameraLookTo
		{
			get { return __0x4855; }
			set { __0x4855 = value; }
		}

		[Browsable( false )]
		public double CameraInitialDistance
		{
			get { return __0x4857; }
			set { __0x4857 = value; }
		}

		[Browsable( false )]
		public bool CameraRotationMode
		{
			get { return __0x4859; }
			set { __0x4859 = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return __0x4861; }
			set { __0x4861 = value; }
		}

		public Component_Scene CreateScene( bool enable )
		{
			DestroyScene();

			

			__0x4852 = ComponentUtility.CreateComponent<Component_Scene>( null, true, enable );
			__0x4853 = true;

			
			__0x4852.OctreeEnabled = false;

			
			{
				var __0x4868 = (Component_RenderingPipeline)__0x4852.CreateComponent( RenderingSystem.RenderingPipelineDefault, -1, false );
				__0x4852.RenderingPipeline = __0x4868;

				
				__0x4868.DeferredShading = AutoTrueFalse.False;
				__0x4868.LODRange = new RangeI( 0, 0 );

				double __0x4869 = 1.3;
				double __0x4870 = 0.4;

				if( EditorAPI.DarkTheme )
					__0x4852.BackgroundColor = new ColorValue( 40.0 / 255 * __0x4869, 40.0 / 255 * __0x4869, 40.0 / 255 * __0x4869 );
				else
					__0x4852.BackgroundColor = new ColorValue( 22.0 / 255 * __0x4869, 44.0 / 255 * __0x4869, 66.0 / 255 * __0x4869 );
				__0x4852.BackgroundColorAffectLighting = 1;
				
				__0x4852.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );

				var __0x4871 = __0x4868.CreateComponent<Component>();
				__0x4871.Name = "Background Effects";

				var __0x4872 = __0x4871.CreateComponent<Component_RenderingEffect_Vignetting>();
				if( EditorAPI.DarkTheme )
					__0x4872.Color = new ColorValue( 45.0 / 255 * __0x4870, 45.0 / 255 * __0x4870, 45.0 / 255 * __0x4870 );
				else
					__0x4872.Color = new ColorValue( 24.0 / 255 * __0x4870, 48.0 / 255 * __0x4870, 72.0 / 255 * __0x4870 );
				__0x4872.Radius = 2;

				var __0x4873 = __0x4871.CreateComponent<Component_RenderingEffect_Noise>();
				__0x4873.Multiply = new Range( 0.9, 1.1 );

				var __0x4874 = __0x4868.CreateComponent<Component>();
				__0x4874.Name = "Scene Effects";

				
				var __0x4875 = MetadataManager.GetType( "NeoAxis.Component_RenderingEffect_ToLDR" );
				var __0x4876 = MetadataManager.GetType( "NeoAxis.Component_RenderingEffect_Antialiasing" );
				if( __0x4875 != null && __0x4876 != null )
				{
					__0x4874.CreateComponent( __0x4875 );
					__0x4874.CreateComponent( __0x4876 );
				}

				__0x4868.Enabled = true;
			}

			
			{
				var __0x4877 = __0x4852.CreateComponent<Component_Light>();
				__0x4877.Type = Component_Light.TypeEnum.Ambient;
				__0x4877.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x4878 = __0x4852.CreateComponent<Component_Light>();
				__0x4878.Type = Component_Light.TypeEnum.Directional;
				__0x4878.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x4878.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewDirectionalLightBrightness" );
				
				__0x4878.Shadows = false;
				
				
			}

			
			__0x4852.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( ViewportControl != null && ViewportControl.Viewport != null )
				ViewportControl.Viewport.AttachedScene = __0x4852;

			return __0x4852;
		}

		public void DestroyScene()
		{
			if( __0x4852 != null )
			{
				if( ViewportControl != null && ViewportControl.Viewport != null )
					ViewportControl.Viewport.AttachedScene = null;

				if( __0x4853 )
					__0x4852.Dispose();
				__0x4852 = null;
				__0x4853 = false;
			}
		}

		
		
		
		
		
		
		
		
		

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			if( !__0x4856 )
			{
				var __0x4879 = __0x4855 - __0x4861.GetVector() * __0x4857 * __0x4858;
				var __0x4880 = __0x4855;

				Vector3 __0x4881 = __0x4879;
				Vector3 __0x4882 = __0x4880;
				Degree __0x4883 = 65;

				
				Component_Camera __0x4884 = new Component_Camera();
				__0x4884.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4884.FieldOfView = __0x4883;
				__0x4884.NearClipPlane = Math.Max( __0x4857 / 10000, 0.01 );
				__0x4884.FarClipPlane = Math.Max( 1000, __0x4857 * 2 );

				__0x4884.Transform = new Transform( __0x4881, Quaternion.LookAt( ( __0x4882 - __0x4881 ).GetNormalize(), Vector3.ZAxis ) );
				
				

				__0x4884.FixedUp = Vector3.ZAxis;
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4884 );

				
				
				
				
			}
			else
			{
				var __0x4885 = __0x4855 + new Vector3( 0, 0, scene.CameraEditor2DPositionZ );
				var __0x4886 = __0x4855;

				Component_Camera __0x4887 = new Component_Camera();
				__0x4887.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4887.NearClipPlane = 0.01;
				__0x4887.FarClipPlane = 1000;
				__0x4887.Transform = new Transform( __0x4885, Quaternion.LookAt( ( __0x4886 - __0x4885 ).GetNormalize(), Vector3.YAxis ) );
				__0x4887.Projection = ProjectionType.Orthographic;
				__0x4887.FixedUp = Vector3.YAxis;
				
				__0x4887.Height = __0x4854.GetSize().Y * 1.4;

				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4887 );
			}

			processed = true;
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			__0x4854 = bounds;
			__0x4855 = bounds.GetCenter();
			__0x4856 = mode2D;

			double __0x4888 = Math.Max( Math.Max( bounds.GetSize().X, bounds.GetSize().Y ), bounds.GetSize().Z );
			double __0x4889 = __0x4888 * 2 * distanceScale;
			if( __0x4889 < 2 )
				__0x4889 = 2;

			

			__0x4857 = __0x4889;

			
		}

		
		
		
		

		protected virtual void GetTextInfoLeftTopCorner( List<string> lines )
		{
		}

		void __0x4913()
		{
			

			var __0x4890 = new List<string>();
			GetTextInfoLeftTopCorner( __0x4890 );
			var __0x4891 = new Vector2( GetFontSize() * Viewport.CanvasRenderer.AspectRatioInv * 0.5, GetFontSize() * 0.3 );
			AddTextLinesWithShadow( null, GetFontSize(), __0x4890, new Rectangle( __0x4891.X, __0x4891.Y, 1, 1 ), EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 1, 1, 1, 0.7 ) );
		}

		public double GetFontSize()
		{
			double __0x4892 = 12.0 * DpiHelper.Default.DpiScaleFactor;
			__0x4892 = (int)__0x4892;

			var __0x4893 = ViewportControl.Viewport.CanvasRenderer;

			int __0x4894 = __0x4893.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x4895 = (float)__0x4892 / (float)__0x4894;
			float __0x4896 = __0x4895;

			return __0x4896;
		}

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		public void AddTextWithShadow( Component_Font font, double fontSize, string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x4897 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x4897.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x4897.DefaultFontSize;

			Vector2 __0x4898 = __0x4862 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			__0x4897.AddText( font, fontSize, text, position + __0x4898, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
			__0x4897.AddText( font, fontSize, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextWithShadow( string text, Vector2 position, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextWithShadow( null, -1, text, position, horizontalAlign, verticalAlign, color );
		}

		public void AddTextLinesWithShadow( Component_Font font, double fontSize, IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			if( lines.Count == 0 )
				return;

			var __0x4899 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x4899.DefaultFont;
			if( font == null || font.Disposed )
				return;
			
			
			if( fontSize < 0 )
				fontSize = __0x4899.DefaultFontSize;

			Vector2 __0x4900 = __0x4862 / ViewportControl.Viewport.SizeInPixels.ToVector2();
			float __0x4901 = (float)lines.Count * (float)fontSize;

			double __0x4902 = 0;
			switch( verticalAlign )
			{
			case EVerticalAlignment.Top:
				__0x4902 = rectangle.Top;
				break;
			case EVerticalAlignment.Center:
				__0x4902 = rectangle.Top + ( rectangle.Size.Y - __0x4901 ) / 2;
				break;
			case EVerticalAlignment.Bottom:
				__0x4902 = rectangle.Bottom - __0x4901;
				break;
			}

			for( int __0x4903 = 0; __0x4903 < lines.Count; __0x4903++ )
			{
				string __0x4904 = lines[ __0x4903 ];

				double __0x4905 = 0;
				switch( horizontalAlign )
				{
				case EHorizontalAlignment.Left:
					__0x4905 = rectangle.Left;
					break;
				case EHorizontalAlignment.Center:
					__0x4905 = rectangle.Left + ( rectangle.Size.X - font.GetTextLength( fontSize, __0x4899, __0x4904 ) ) / 2;
					break;
				case EHorizontalAlignment.Right:
					__0x4905 = rectangle.Right - font.GetTextLength( fontSize, __0x4899, __0x4904 );
					break;
				}

				Vector2 __0x4906 = new Vector2( __0x4905, __0x4902 );

				__0x4899.AddText( font, fontSize, __0x4904, __0x4906 + __0x4900, EHorizontalAlignment.Left, EVerticalAlignment.Top, new ColorValue( 0, 0, 0, color.Alpha / 2 ) );
				__0x4899.AddText( font, fontSize, __0x4904, __0x4906, EHorizontalAlignment.Left, EVerticalAlignment.Top, color );
				__0x4902 += fontSize;
			}
		}

		public void AddTextLinesWithShadow( IList<string> lines, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			AddTextLinesWithShadow( null, -1, lines, rectangle, horizontalAlign, verticalAlign, color );
		}

		public int AddTextWordWrapWithShadow( Component_Font font, double fontSize, string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			var __0x4907 = ViewportControl.Viewport.CanvasRenderer;

			if( font == null || font.Disposed )
				font = __0x4907.DefaultFont;
			if( font == null || font.Disposed )
				return 0;
			
			
			if( fontSize < 0 )
				fontSize = __0x4907.DefaultFontSize;

			var __0x4908 = font.GetWordWrapLines( fontSize, __0x4907, text, rectangle.Size.X );

			string[] __0x4909 = new string[ __0x4908.Length ];
			for( int __0x4910 = 0; __0x4910 < __0x4909.Length; __0x4910++ )
				__0x4909[ __0x4910 ] = __0x4908[ __0x4910 ].Text;

			AddTextLinesWithShadow( font, fontSize, __0x4909, rectangle, horizontalAlign, verticalAlign, color );

			return __0x4909.Length;
		}

		public int AddTextWordWrapWithShadow( string text, Rectangle rectangle, EHorizontalAlignment horizontalAlign, EVerticalAlignment verticalAlign, ColorValue color )
		{
			return AddTextWordWrapWithShadow( null, -1, text, rectangle, horizontalAlign, verticalAlign, color );
		}

	}
}
namespace NeoAxis.Editor
{
	partial class PreviewControlWithViewport
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x4911 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x4914()
		{
			this.__0x4911 = new System.ComponentModel.Container();
			this.__0x4912 = new NeoAxis.Widget.EngineViewportControl();
			this.SuspendLayout();
			
			
			
			this.__0x4912.AllowCreateRenderWindow = true;
			this.__0x4912.AutomaticUpdateFPS = 60F;
			this.__0x4912.BackColor = System.Drawing.Color.Transparent;
			this.__0x4912.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x4912.Location = new System.Drawing.Point(0, 0);
			this.__0x4912.Margin = new System.Windows.Forms.Padding(0);
			this.__0x4912.Name = "viewportControl";
			this.__0x4912.Size = new System.Drawing.Size(785, 518);
			this.__0x4912.TabIndex = 0;

			this.Controls.Add( this.__0x4912 );

			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "DocumentItem";
			this.ResumeLayout(false);

		}

		#endregion

		private NeoAxis.Widget.EngineViewportControl __0x4912;
	}
}





namespace NeoAxis.Editor
{
	public abstract class PreviewImageGenerator
	{
		
		Viewport __0x4915;
		object __0x4916;

		
		Component_Scene __0x4917;
		bool __0x4918;

		
		Bounds __0x4919 = new Bounds( -1, -1, -1, 1, 1, 1 );
		Vector3 __0x4920;
		bool __0x4921;
		double __0x4922 = .01;
		SphericalDirection __0x4923 = new SphericalDirection( -3.83, -.47 );

		
		

		

		

		public PreviewImageGenerator()
		{
			

			
			

			
		}

		internal void Init( Viewport viewport, object objectOfPreview )
		{
			this.__0x4915 = viewport;
			this.__0x4916 = objectOfPreview;
		}

		public virtual bool ClampImage
		{
			get { return true; }
		}

		public Viewport Viewport
		{
			get { return __0x4915; }
		}

		public object ObjectOfPreview
		{
			get { return __0x4916; }
		}

		protected virtual void Update()
		{
		}
		public void PerformUpdate()
		{
			Update();
		}

		
		
		
		

		
		
		
		

		
		
		

		
		
		

		
		
		

		
		

		public Component_Scene Scene
		{
			get { return __0x4917; }
			set { __0x4917 = value; }
		}

		public bool SceneNeedDispose
		{
			get { return __0x4918; }
			set { __0x4918 = value; }
		}

		public Component_Scene CreateScene( bool enable )
		{
			DetachAndOrDestroyScene();

			__0x4917 = ComponentUtility.CreateComponent<Component_Scene>( null, true, enable );
			__0x4918 = true;

			
			__0x4917.OctreeEnabled = false;

			
			{
				var __0x4924 = (Component_RenderingPipeline)__0x4917.CreateComponent( RenderingSystem.RenderingPipelineDefault, -1, false );
				__0x4917.RenderingPipeline = __0x4924;

				
				__0x4924.DeferredShading = AutoTrueFalse.False;
				__0x4924.LODRange = new RangeI( 0, 0 );
				

				__0x4917.BackgroundColor = new ColorValue( 0, 0, 0, 0 );
				__0x4917.BackgroundColorAffectLighting = 1;
				
				
				
				
				__0x4917.BackgroundColorEnvironmentOverride = new ColorValue( 0.8, 0.8, 0.8 );
				

				
				

				
				
				
				
				
				

				
				

				
				

				
				
				
				
				
				
				
				

				__0x4924.Enabled = true;
			}

			
			{
				var __0x4925 = __0x4917.CreateComponent<Component_Light>();
				__0x4925.Type = Component_Light.TypeEnum.Ambient;
				__0x4925.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewAmbientLightBrightness" );
				
			}

			
			{
				var __0x4926 = __0x4917.CreateComponent<Component_Light>();
				__0x4926.Type = Component_Light.TypeEnum.Directional;
				__0x4926.Transform = new Transform( new Vector3( 0, 0, 0 ), Quaternion.FromDirectionZAxisUp( new Vector3( 0, 0, -1 ) ), Vector3.One );
				__0x4926.Brightness = ReferenceUtility.MakeReference( "Base\\ProjectSettings.component|PreviewDirectionalLightBrightness" );
				
				__0x4926.Shadows = false;
				
				
			}

			
			__0x4917.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;

			
			if( Viewport != null )
				Viewport.AttachedScene = __0x4917;

			return __0x4917;
		}

		public void DetachAndOrDestroyScene()
		{
			if( __0x4917 != null )
			{
				if( Viewport != null )
					Viewport.AttachedScene = null;

				if( __0x4918 )
					__0x4917.Dispose();
				__0x4917 = null;
				__0x4918 = false;
			}
		}

		protected virtual void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			if( !__0x4921 )
			{
				var __0x4927 = __0x4920 - __0x4923.GetVector() * __0x4922;
				var __0x4928 = __0x4920;

				Vector3 __0x4929 = __0x4927;
				Vector3 __0x4930 = __0x4928;
				Degree __0x4931 = 40;

				
				Component_Camera __0x4932 = new Component_Camera();
				__0x4932.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4932.FieldOfView = __0x4931;
				__0x4932.NearClipPlane = Math.Max( __0x4922 / 10000, 0.01 );
				__0x4932.FarClipPlane = Math.Max( 1000, __0x4922 * 5 );

				__0x4932.Transform = new Transform( __0x4929, Quaternion.LookAt( ( __0x4930 - __0x4929 ).GetNormalize(), Vector3.ZAxis ) );
				
				

				__0x4932.FixedUp = Vector3.ZAxis;
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4932 );

				
				
				
				
			}
			else
			{
				var __0x4933 = __0x4920 + new Vector3( 0, 0, scene.CameraEditor2DPositionZ );
				var __0x4934 = __0x4920;

				Component_Camera __0x4935 = new Component_Camera();
				__0x4935.AspectRatio = (double)viewport.SizeInPixels.X / (double)viewport.SizeInPixels.Y;
				__0x4935.NearClipPlane = 0.01;
				__0x4935.FarClipPlane = 1000;
				__0x4935.Transform = new Transform( __0x4933, Quaternion.LookAt( ( __0x4934 - __0x4933 ).GetNormalize(), Vector3.YAxis ) );
				__0x4935.Projection = ProjectionType.Orthographic;
				__0x4935.FixedUp = Vector3.YAxis;
				
				__0x4935.Height = __0x4919.GetSize().Y * 1.4;

				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, __0x4935 );
			}

			processed = true;
		}

		public void SetCameraByBounds( Bounds bounds, double distanceScale = 1, bool mode2D = false )
		{
			__0x4919 = bounds;
			__0x4920 = bounds.GetCenter();
			__0x4921 = mode2D;

			double __0x4936 = Math.Max( Math.Max( bounds.GetSize().X, bounds.GetSize().Y ), bounds.GetSize().Z );
			double __0x4937 = __0x4936 * distanceScale;

			

			__0x4922 = __0x4937;

			
		}

		public Vector3 CameraLookTo
		{
			get { return __0x4920; }
			set { __0x4920 = value; }
		}

		public double CameraDistance
		{
			get { return __0x4922; }
			set { __0x4922 = value; }
		}

		public SphericalDirection CameraDirection
		{
			get { return __0x4923; }
			set { __0x4923 = value; }
		}

		
		
		

		
		
		

		
		
		
		
		

		
		
		
		

		

		
		
		

		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		
		
		

		

		
		
		

		

		
		

		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	public static class PreviewImagesManager
	{
		
		const int __0x4938 = 1024;
		const int __0x4939 = 13;
		const int __0x4940 = 128;

		const int __0x4941 = 10;
		const int __0x4942 = 100;

		const PixelFormat __0x4943 = PixelFormat.A8R8G8B8;

		

		static ESet<ResourceManager.ResourceType> __0x4944 = new ESet<ResourceManager.ResourceType>();

		static Queue<__0x5041> __0x4945 = new Queue<__0x5041>();
		static List<__0x5042> __0x4946 = new List<__0x5042>();

		
		static Dictionary<string, __0x5043> __0x4947 = new Dictionary<string, __0x5043>();

		public static bool EnableVirtualFileWatcherUpdate { get; set; } = true;

		

		class __0x5041
		{
			public string virtualFileName;
		}

		

		class __0x5042
		{
			Component_Image __0x4948;
			Viewport __0x4949;
			Component_Image __0x4950;
			IntPtr __0x4951;

			__0x5041 __0x4952;
			PreviewImageGenerator __0x4953;
			int __0x4954;

			

			public bool Init()
			{
				try
				{
					__0x4948 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
					__0x4948.CreateType = Component_Image.TypeEnum._2D;
					__0x4948.CreateSize = new Vector2I( __0x4938, __0x4938 );
					__0x4948.CreateMipmaps = false;
					__0x4948.CreateFormat = __0x4943;
					__0x4948.CreateUsage = Component_Image.Usages.RenderTarget;
					__0x4948.CreateFSAA = 0;
					__0x4948.Enabled = true;

					var __0x4955 = __0x4948.Result.GetRenderTarget( 0, 0 );

					__0x4949 = __0x4955.AddViewport( false, true );
					__0x4949.AllowRenderScreenLabels = false;

					__0x4949.UpdateBegin += __0x5014;

					__0x4950 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
					__0x4950.CreateType = Component_Image.TypeEnum._2D;
					__0x4950.CreateSize = __0x4948.CreateSize;
					__0x4950.CreateMipmaps = false;
					__0x4950.CreateFormat = __0x4948.CreateFormat;
					__0x4950.CreateUsage = Component_Image.Usages.ReadBack | Component_Image.Usages.BlitDestination;
					__0x4950.CreateFSAA = 0;
					__0x4950.Enabled = true;
					
					__0x4950.Result.PrepareNativeObject();

					var __0x4956 = PixelFormatUtility.GetNumElemBytes( __0x4943 ) * __0x4938 * __0x4938;
					__0x4951 = NativeUtility.Alloc( NativeUtility.MemoryAllocationType.Utility, __0x4956 );

				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return false;
				}

				return true;
			}

			public bool Working
			{
				get { return __0x4952 != null; }
			}

			static Type __0x5012( object __0x5023 )
			{
				var __0x4957 = (EditorPreviewImageAttribute[])__0x5023.GetType().GetCustomAttributes( typeof( EditorPreviewImageAttribute ), true );
				if( __0x4957.Length != 0 )
				{
					var __0x4958 = __0x4957[ 0 ];
					if( !string.IsNullOrEmpty( __0x4958.PreviewClassName ) )
					{
						var __0x4959 = EditorUtility.GetTypeByName( __0x4958.PreviewClassName );
						if( __0x4959 == null )
							Log.Warning( $"PreviewImagesManager: GetPreviewClass: Class with name \"{__0x4958.PreviewClassName}\" is not found." );
						return __0x4959;
					}
					else
						return __0x4958.PreviewClass;
				}

				return null;
			}

			static void __0x5013( string __0x5024, out object __0x5025, out PreviewImageGenerator __0x5026 )
			{
				__0x5026 = null;
				__0x5025 = null;

				var __0x4960 = ResourceManager.LoadResource( __0x5024, true );
				if( __0x4960 != null )
				{
					__0x5025 = __0x4960.ResultComponent;
					if( __0x5025 != null )
					{
						var __0x4961 = __0x5012( __0x5025 );
						if( __0x4961 != null )
							__0x5026 = (PreviewImageGenerator)Activator.CreateInstance( __0x4961 );
					}
				}
			}

			private void __0x5014( Viewport __0x5027 )
			{
				__0x4953?.PerformUpdate();
			}

			public void StartTask( __0x5041 imageToProcess )
			{
				__0x4952 = imageToProcess;

				try
				{
					__0x5013( imageToProcess.virtualFileName, out var objectOfPreview, out __0x4953 );

					if( __0x4953 != null )
					{
						__0x4953.Init( __0x4949, objectOfPreview );

						__0x4949.Update( true );

						
						__0x4949.RenderingContext.MultiRenderTarget_DestroyAll();
						__0x4949.RenderingContext.DynamicTexture_DestroyAll();

						__0x4948.Result.GetRealObject( true ).BlitTo( __0x4949.RenderingContext.CurrentViewNumber, __0x4950.Result.GetRealObject( true ), 0, 0 );

						__0x4954 = __0x4950.Result.GetRealObject( true ).Read( __0x4951, 0 );
					}
					else
						ClearTask();
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}
			}

			static RectangleI __0x5015( ImageUtility.Image2D __0x5028 )
			{
				int __0x4962 = 0;
				for( ; __0x4962 < __0x5028.Size.X; __0x4962++ )
				{
					for( int __0x4963 = 0; __0x4963 < __0x5028.Size.Y; __0x4963++ )
					{
						if( __0x5028.GetPixel( new Vector2I( __0x4962, __0x4963 ) ).W >= 0.004 )
							goto endMinX;
					}
				}
				endMinX:;

				int __0x4964 = 0;
				for( ; __0x4964 < __0x5028.Size.Y; __0x4964++ )
				{
					for( int __0x4965 = 0; __0x4965 < __0x5028.Size.X; __0x4965++ )
					{
						if( __0x5028.GetPixel( new Vector2I( __0x4965, __0x4964 ) ).W >= 0.004 )
							goto endMinY;
					}
				}
				endMinY:;

				int __0x4966 = __0x5028.Size.X - 1;
				for( ; __0x4966 >= 0; __0x4966-- )
				{
					for( int __0x4967 = 0; __0x4967 < __0x5028.Size.Y; __0x4967++ )
					{
						if( __0x5028.GetPixel( new Vector2I( __0x4966, __0x4967 ) ).W >= 0.004 )
							goto endMaxX;
					}
				}
				endMaxX:;

				int __0x4968 = __0x5028.Size.Y - 1;
				for( ; __0x4968 >= 0; __0x4968-- )
				{
					for( int __0x4969 = 0; __0x4969 < __0x5028.Size.X; __0x4969++ )
					{
						if( __0x5028.GetPixel( new Vector2I( __0x4969, __0x4968 ) ).W >= 0.004 )
							goto endMaxY;
					}
				}
				endMaxY:;

				
				if( __0x4966 < __0x4962 )
					__0x4966 = __0x4962;
				if( __0x4968 < __0x4964 )
					__0x4968 = __0x4964;

				var __0x4970 = new RectangleI( __0x4962, __0x4964, __0x4966 + 2, __0x4968 + 2 );

				
				if( __0x4970.Size.X < __0x4970.Size.Y )
					__0x4970.Expand( new Vector2I( ( __0x4970.Size.Y - __0x4970.Size.X ) / 2, 0 ) );
				else if( __0x4970.Size.Y < __0x4970.Size.X )
					__0x4970.Expand( new Vector2I( 0, ( __0x4970.Size.X - __0x4970.Size.Y ) / 2 ) );

				return __0x4970;
			}

			public void Update()
			{
				if( Working )
				{
					try
					{
						if( RenderingSystem.LastFrameNumber >= __0x4954 )
						{
							

							var __0x4971 = new ImageUtility.Image2D( __0x4943, new Vector2I( __0x4938, __0x4938 ), __0x4951 );

							
							RectangleI __0x4972;
							if( __0x4953.ClampImage )
							{
								__0x4972 = __0x5015( __0x4971 );

								
								__0x4972.Expand( __0x4939 );

								
								
								
								
								
								
								
								
								
								
							}
							else
								__0x4972 = new RectangleI( 0, 0, __0x4938, __0x4938 );

							var __0x4973 = __0x4972.Size;

							
							var __0x4974 = new ImageUtility.Image2D( __0x4943, __0x4973 );
							__0x4974.Blit( Vector2I.Zero, __0x4971, __0x4972.LeftTop );

							
							Bitmap __0x4975;
							unsafe
							{
								fixed( byte* __0x4976 = __0x4974.Data )
								{
									__0x4975 = new Bitmap( __0x4973.X, __0x4973.Y, __0x4973.X * PixelFormatUtility.GetNumElemBytes( __0x4943 ), System.Drawing.Imaging.PixelFormat.Format32bppArgb, (IntPtr)__0x4976 );
								}
							}
							

							
							var __0x4977 = __0x5017( __0x4975, __0x4940, __0x4940 );

							
							var __0x4978 = __0x5021( __0x4952.virtualFileName );
							try
							{
								if( !Directory.Exists( Path.GetDirectoryName( __0x4978 ) ) )
									Directory.CreateDirectory( Path.GetDirectoryName( __0x4978 ) );

								__0x4977.Save( __0x4978, ImageFormat.Png );
							}
							catch( Exception e )
							{
								Log.Warning( $"PreviewImagesManager: Processor: Update: Unable to save bitmap to \'{__0x4978}\'. " + e.Message );
							}
							finally
							{
								__0x4975.Dispose();
								__0x4977.Dispose();
							}

							
							ClearTask();

							
							foreach( var __0x5008 in ContentBrowser.AllInstances )
								__0x5008.needUpdateImages = true;
						}

					}
					catch( Exception e )
					{
						Log.Warning( e.Message );
					}
				}
			}

			public void ClearTask()
			{
				if( __0x4949 != null )
					__0x4949.AttachedScene = null;

				__0x4953?.DetachAndOrDestroyScene();

				__0x4952 = null;
				__0x4953 = null;
				__0x4954 = -1;
			}

			public void Dispose()
			{
				ClearTask();

				if( __0x4951 != IntPtr.Zero )
				{
					NativeUtility.Free( __0x4951 );
					__0x4951 = IntPtr.Zero;
				}

				__0x4948?.Dispose();
				__0x4948 = null;
				__0x4949 = null;
				__0x4950?.Dispose();
				__0x4950 = null;
			}
		}

		

		class __0x5043
		{
			public Image originalImage;
			public Image smallImageForTreeView;
			public bool needReload;

			
			
			
			
			
			
		}

		

		internal static void Init()
		{
			var __0x4979 = new string[] { "Material", "Image", "Mesh", "Import 3D", "Skybox", "Object In Space", "Surface" };
			
			
			
			

			foreach( var __0x5009 in __0x4979 )
			{
				var __0x4980 = ResourceManager.GetTypeByName( __0x5009 );
				if( __0x4980 != null )
					RegisterResourceType( __0x4980 );
			}

			VirtualFileWatcher.Update += __0x5022;
		}

		internal static void Shutdown()
		{
			VirtualFileWatcher.Update -= __0x5022;

			try
			{
				foreach( var __0x5010 in __0x4946 )
					__0x5010.Dispose();
				__0x4946.Clear();
			}
			catch { }
		}

		public static void RegisterResourceType( ResourceManager.ResourceType resourceType )
		{
			__0x4944.AddWithCheckAlreadyContained( resourceType );
		}

		public static void RegisterResourceType( string resourceTypeName )
		{
			var __0x4981 = ResourceManager.GetTypeByName( resourceTypeName );
			if( __0x4981 != null )
				RegisterResourceType( __0x4981 );
		}

		public static bool IsResourceTypeSupported( ResourceManager.ResourceType resourceType )
		{
			return __0x4944.Contains( resourceType );
		}

		static __0x5043 __0x5016( string __0x5029 )
		{
			if( __0x4947.TryGetValue( __0x5029, out var item ) )
				return item;
			return null;
		}

		static Bitmap __0x5017( Image __0x5030, int __0x5031, int __0x5032 )
		{
			Bitmap __0x4982 = new Bitmap( __0x5031, __0x5032 );
			using( Graphics __0x4983 = Graphics.FromImage( __0x4982 ) )
			{
				__0x4983.InterpolationMode = InterpolationMode.HighQualityBicubic;
				__0x4983.DrawImage( __0x5030, 0, 0, __0x5031, __0x5032 );
			}
			return __0x4982;
		}

		static __0x5043 __0x5018( string __0x5033, out bool __0x5034 )
		{
			__0x5034 = false;

			var __0x4984 = __0x5016( __0x5033 );
			if( __0x4984 == null || __0x4984.needReload )
			{
				var __0x4985 = __0x5021( __0x5033 );
				if( File.Exists( __0x4985 ) )
				{
					
					
					

					

					__0x4984 = new __0x5043();

					
					var __0x4986 = File.ReadAllBytes( __0x4985 );
					var __0x4987 = new MemoryStream( __0x4986 );
					__0x4984.originalImage = Image.FromStream( __0x4987 );

					
					int __0x4988;
					if( EditorAPI.DPIScale >= 2.0 )
						__0x4988 = 32;
					else if( EditorAPI.DPIScale >= 1.75 )
						__0x4988 = 28;
					else if( EditorAPI.DPIScale >= 1.5 )
						__0x4988 = 24;
					else
						__0x4988 = 16;
					__0x4984.smallImageForTreeView = __0x5017( __0x4984.originalImage, __0x4988, __0x4988 );

					
					
					
					

					__0x4947[ __0x5033 ] = __0x4984;
				}
				else
					__0x5034 = true;
			}

			return __0x4984;
		}

		public static Image GetImageForResource( string realFileName, bool forTreeView )
		{
			try
			{
				var __0x4989 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( realFileName ) );
				if( __0x4989 != null && IsResourceTypeSupported( __0x4989 ) )
				{
					var __0x4990 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
					if( !string.IsNullOrEmpty( __0x4990 ) )
					{
						var __0x4991 = __0x5018( __0x4990, out var cacheNotExists );
						if( __0x4991 != null )
							return forTreeView ? __0x4991.smallImageForTreeView : __0x4991.originalImage;

						if( cacheNotExists )
							AddResourceToProcess( realFileName );
					}
				}

				return null;
			}
			catch( Exception e )
			{
				Log.Warning( "PreviewImagesManager: GetImageForResource: " + e.Message );
				return null;
			}
		}

		static __0x5041 __0x5019( string __0x5035 )
		{
			return __0x4945.FirstOrDefault( __0x5036 => __0x5036.virtualFileName == __0x5035 );
		}

		public static void AddResourceToProcess( string realFileName )
		{
			try
			{
				var __0x4992 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( realFileName ) );
				if( __0x4992 != null && IsResourceTypeSupported( __0x4992 ) )
				{
					var __0x4993 = VirtualPathUtility.GetVirtualPathByReal( realFileName );
					if( !string.IsNullOrEmpty( __0x4993 ) )
					{

						
						var __0x4994 = __0x5016( __0x4993 );
						if( __0x4994 != null )
							__0x4994.needReload = true;

						
						if( __0x5019( __0x4993 ) == null )
						{
							
							if( __0x4945.Count < __0x4942 )
							{
								
								var __0x4995 = new __0x5041();
								__0x4995.virtualFileName = __0x4993;
								__0x4945.Enqueue( __0x4995 );
							}
						}

					}
				}
			}
			catch( Exception e )
			{
				Log.Warning( "PreviewImagesManager: NeedRefreshResource: " + e.Message );
			}
		}

		static __0x5042 __0x5020()
		{
			
			{
				var __0x4996 = __0x4946.FirstOrDefault( __0x5037 => !__0x5037.Working );
				if( __0x4996 != null )
					return __0x4996;
			}

			
			if( __0x4946.Count < __0x4941 )
			{
				var __0x4997 = new __0x5042();
				if( !__0x4997.Init() )
				{
					__0x4997.Dispose();
					return null;
				}
				__0x4946.Add( __0x4997 );
				return __0x4997;
			}

			return null;
		}

		public static bool ExistsWorkingProcessors()
		{
			return __0x4946.Exists( __0x5038 => __0x5038.Working );
		}

		public static void Update()
		{
			
			again:
			if( __0x4945.Count != 0 )
			{
				var __0x4998 = __0x5020();
				if( __0x4998 != null )
				{
					var __0x4999 = __0x4945.Dequeue();
					__0x4998.StartTask( __0x4999 );
					goto again;
				}
			}

			
			foreach( var __0x5011 in __0x4946 )
				__0x5011.Update();
		}

		static string __0x5021( string __0x5039 )
		{
			return PathUtility.Combine( VirtualFileSystem.Directories.Project, @"Caches\Files", __0x5039 ) + ".preview.png";
		}


		
		static Image __0x5000;
		

		
		public static Image GetImageForPaintLayer( Component_PaintLayer layer )
		{
			if( layer != null )
			{
				Component __0x5001 = layer.Material.Value;
				if( __0x5001 == null )
					__0x5001 = layer.Surface.Value;

				if( __0x5001 != null )
				{
					if( __0x5001.Parent == null )
					{
						var __0x5002 = ComponentUtility.GetOwnedFileNameOfComponent( __0x5001 );
						if( !string.IsNullOrEmpty( __0x5002 ) )
						{
							var __0x5003 = VirtualPathUtility.GetRealPathByVirtual( __0x5002 );
							return GetImageForResource( __0x5003, false );
						}
					}
				}
			}

			

			if( __0x5000 == null )
				__0x5000 = Properties.Resources.Default_32;
			return __0x5000;

			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

		}

		public static void NeedRegenerateFile( string virtualFileName )
		{
			var __0x5004 = __0x5016( virtualFileName );
			if( __0x5004 != null )
			{
				

				var __0x5005 = VirtualPathUtility.GetRealPathByVirtual( virtualFileName );
				AddResourceToProcess( __0x5005 );
			}
			else
			{
				

				var __0x5006 = __0x5021( virtualFileName );
				try
				{
					if( File.Exists( __0x5006 ) )
						File.Delete( __0x5006 );
				}
				catch { }
			}
		}

		private static void __0x5022( FileSystemEventArgs __0x5040 )
		{
			if( EnableVirtualFileWatcherUpdate )
			{
				
				var __0x5007 = VirtualPathUtility.GetVirtualPathByReal( __0x5040.FullPath );
				if( !string.IsNullOrEmpty( __0x5007 ) )
					NeedRegenerateFile( __0x5007 );
			}
		}

	}
}





namespace NeoAxis.Editor
{
	

	/// <summary>
	/// Represents the Preview Window.
	/// </summary>
	public partial class PreviewWindow : DockWindow
	{
		

		
		const int __0x5044 = 10;

		
		static PreviewWindow __0x5045;

		public class PanelData
		{
			

			public object[] objects;
			
			public PreviewControl control;
		}
		List<PanelData> __0x5046 = new List<PanelData>();

		PanelData __0x5047;

		double __0x5048;

		

		public PreviewWindow()
		{
			if( __0x5045 != null )
				Log.Fatal( "PreviewWindow: Constructor: instance != null." );
			__0x5045 = this;

			__0x5084();

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		public static PreviewWindow Instance
		{
			get { return __0x5045; }
		}

		static bool __0x5076( object[] __0x5085, object[] __0x5086 )
		{
			if( __0x5085.Length != __0x5086.Length )
				return false;
			for( int __0x5049 = 0; __0x5049 < __0x5085.Length; __0x5049++ )
				if( !ReferenceEquals( __0x5085[ __0x5049 ], __0x5086[ __0x5049 ] ) )
					return false;
			return true;
		}

		PanelData __0x5077( object[] __0x5087 )
		{
			foreach( var __0x5074 in __0x5046 )
			{
				if( __0x5076( __0x5074.objects, __0x5087 ) )
					return __0x5074;
			}
			return null;

			
			
			
			
			
			
		}

		
		
		
		
		
		
		
		
		

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		Type __0x5078( object __0x5088 )
		{
			

			
			
			
			
			
			

			var __0x5050 = (EditorPreviewControlAttribute[])__0x5088.GetType().GetCustomAttributes( typeof( EditorPreviewControlAttribute ), true );
			if( __0x5050.Length != 0 )
			{
				var __0x5051 = __0x5050[ 0 ];
				if( !string.IsNullOrEmpty( __0x5051.PreviewClassName ) )
				{
					var __0x5052 = EditorUtility.GetTypeByName( __0x5051.PreviewClassName );
					if( __0x5052 == null )
						Log.Warning( $"PreviewWindow: GetPreviewClass: Class with name \"{__0x5051.PreviewClassName}\" is not found." );
					return __0x5052;
				}
				else
					return __0x5051.PreviewClass;
			}

			return null;
		}

		PanelData __0x5079( object[] __0x5089, bool __0x5090 )
		
		{
			PanelData __0x5053 = new PanelData();
			__0x5046.Add( __0x5053 );
			__0x5053.objects = __0x5089;
			

			PreviewControl __0x5054 = null;
			{
				if( __0x5089.Length == 1 )
				
				{
					var __0x5055 = __0x5089[ 0 ];
					

					

					var __0x5056 = __0x5078( __0x5055 );
					if( __0x5056 != null )
					{
						if( typeof( CanvasBasedPreview ).IsAssignableFrom( __0x5056 ) )
						{
							var __0x5057 = (CanvasBasedPreview)Activator.CreateInstance( __0x5056 );
							var __0x5058 = new PreviewControlWithViewport_CanvasBasedPreview( __0x5057 );
							__0x5057.owner = __0x5058;
							__0x5054 = __0x5058;
						}
						else
						{
							__0x5054 = (PreviewControl)__0x5056.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
						}
					}

					

					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
				}

				
				if( __0x5054 == null )
					__0x5054 = new PreviewControl();
			}

			__0x5054.Panel = __0x5053;

			__0x5053.control = __0x5054;
			__0x5054.Dock = DockStyle.Fill;
			Controls.Add( __0x5053.control );

			
			if( !__0x5090 && __0x5053.control != null )
			{
				__0x5053.control.Visible = false;
				__0x5053.control.Enabled = false;
			}

			return __0x5053;
		}

		void __0x5080( PanelData __0x5091 )
		{
			if( SelectedPanel == __0x5091 )
				SelectedPanel = null;

			var __0x5059 = __0x5091.control;
			__0x5059.Parent.Controls.Remove( __0x5059 );
			__0x5059.Dispose();

			__0x5046.Remove( __0x5091 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5046.Count != 0 )
				__0x5080( __0x5046[ __0x5046.Count - 1 ] );
		}

		public void SelectObjects( object[] objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			
			if( objects.Length != 0 )
			{
				
				PanelData __0x5060 = __0x5077( objects );

				bool __0x5061 = __0x5060 != null && SelectedPanel == __0x5060;
				if( !__0x5061 )
				{
					if( __0x5060 != null )
					{
						
						__0x5046.Remove( __0x5060 );
						__0x5046.Add( __0x5060 );
					}

					
					if( __0x5060 == null )
					{
						
						while( __0x5046.Count >= __0x5044 )
							__0x5080( __0x5046[ 0 ] );

						__0x5060 = __0x5079( objects, true );
						
					}

					SelectedPanel = __0x5060;
				}
			}
			else
				SelectedPanel = null;
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5047; }
			set
			{
				if( __0x5047 == value )
					return;

				var __0x5062 = __0x5047;
				__0x5047 = value;

				if( __0x5047 != null )
				{
					__0x5047.control.Enabled = true;
					__0x5047.control.Visible = true;
					
				}

				if( __0x5062 != null )
				{
					__0x5062.control.Visible = false;
					__0x5062.control.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				

				
			}
		}

		object __0x5081( object __0x5092 )
		{
			var __0x5063 = __0x5092;

			again:;
			if( __0x5063 != null && __0x5078( __0x5063 ) == null )
			{
				var __0x5064 = __0x5063 as Component;
				if( __0x5064 != null )
					__0x5063 = __0x5064.Parent;
				else
					__0x5063 = null;

				goto again;
			}

			return __0x5063;
		}

		void __0x5082()
		{
			var __0x5065 = new List<object>();
			foreach( var __0x5075 in EditorForm.Instance.GetObjectsInFocus().Objects )
			{
				object __0x5066 = null;

				var __0x5067 = __0x5075 as ContentBrowser.Item;
				if( __0x5067 != null )
				{
					if( __0x5067.ContainedObject != null )
						__0x5066 = __0x5067.ContainedObject;
				}
				else
					__0x5066 = __0x5075;

				__0x5066 = __0x5081( __0x5066 );

				if( __0x5066 != null )
					__0x5065.Add( __0x5066 );
			}

			if( __0x5065.Count == 0 )
			{
				var __0x5068 = EditorAPI.SelectedDocumentWindow;
				if( __0x5068 != null )
				{
					var __0x5069 = __0x5081( __0x5068.ObjectOfWindow );
					if( __0x5069 != null )
						__0x5065.Add( __0x5069 );
				}
			}

			while( __0x5065.Count > 1 )
				__0x5065.RemoveAt( __0x5065.Count - 1 );

			SelectObjects( __0x5065.ToArray() );


			

			

			
			
			
			
			
			
			
			
			
			
			

			
		}


		private void __0x5083( object __0x5093, EventArgs __0x5094 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			double __0x5070 = 0.05;
			{
				var __0x5071 = EditorForm.Instance.GetObjectsInFocus().Objects.Length;
				if( __0x5071 > 2000 )
					__0x5070 = 2.0;
				else if( __0x5071 > 500 )
					__0x5070 = 1.0;
				else if( __0x5071 > 250 )
					__0x5070 = 0.5;
				else if( __0x5071 > 100 )
					__0x5070 = 0.1;
				else
					__0x5070 = 0.05;
			}
			if( EngineApp.GetSystemTime() - __0x5048 < __0x5070 )
				return;

			__0x5082();

			__0x5048 = EngineApp.GetSystemTime();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return null;
		}

		public override Vector2I DefaultAutoHiddenSlideSize
		{
			get { return ( new Vector2( 280, 200 ) * EditorAPI.DPIScale ).ToVector2I(); }
		}
	}
}

namespace NeoAxis.Editor
{
    partial class PreviewWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5072 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5072 != null))
            {
                __0x5072.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5084()
        {
			this.__0x5072 = new System.ComponentModel.Container();
			this.__0x5073 = new System.Windows.Forms.Timer(this.__0x5072);
			this.SuspendLayout();
			
			
			
			this.__0x5073.Enabled = true;
			this.__0x5073.Interval = 5;
			this.__0x5073.Tick += new System.EventHandler(this.__0x5083);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "PreviewWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Preview";
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x5073;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Resources Window.
	/// </summary>
	public partial class ResourcesWindow : DockWindow
	{
		public ResourcesWindow()
		{
			__0x5105();

			

			
			
			__0x5102.Init( null, null, null );
			__0x5102.Options.PanelMode = ContentBrowser.PanelModeEnum.TwoPanelsSplitHorizontally;
			__0x5102.Options.SplitterPosition = 3.0 / 5.0;
			__0x5102.Options.EditorButton = false;
			__0x5102.Options.SettingsButton = false;
			__0x5102.Options.DisplayPropertiesEditorSettingsButtons = false;

			
			

			__0x5103();
			EngineConfig.SaveEvent += __0x5104;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x5102; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( null, __0x5102.SelectedItems );
			
		}

		void __0x5103()
		{
			var __0x5095 = EngineConfig.TextBlock.FindChild( nameof( ResourcesWindow ) );
			if( __0x5095 != null )
			{
				var __0x5096 = __0x5095.FindChild( "ContentBrowser" );
				if( __0x5096 != null )
				{
					ContentBrowser1.Options.Load( __0x5096 );
					
				}
			}
		}

		void __0x5104()
		{
			var __0x5097 = EngineConfig.TextBlock;

			var __0x5098 = __0x5097.FindChild( nameof( ResourcesWindow ) );
			if( __0x5098 != null )
				__0x5097.DeleteChild( __0x5098 );

			var __0x5099 = __0x5097.AddChild( nameof( ResourcesWindow ) );
			var __0x5100 = __0x5099.AddChild( "ContentBrowser" );
			ContentBrowser1.Options.Save( __0x5100 );
			
		}
	}
}


namespace NeoAxis.Editor
{
	partial class ResourcesWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5101 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5101 != null ) )
			{
				__0x5101.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5105()
		{
			this.__0x5102 = new NeoAxis.Editor.ContentBrowser();
			this.SuspendLayout();
			
			
			
			this.__0x5102.CanSelectObjectSettings = false;
			this.__0x5102.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x5102.FilteringMode = null;
			this.__0x5102.Location = new System.Drawing.Point(0, 0);
			this.__0x5102.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x5102.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5102.MultiSelect = true;
			this.__0x5102.Name = "resourcesBrowser1";
			this.__0x5102.ReadOnlyHierarchy = false;
			this.__0x5102.Size = new System.Drawing.Size(416, 596);
			this.__0x5102.TabIndex = 0;
			this.__0x5102.ThisIsSettingsWindow = false;
			this.__0x5102.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x5102.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Controls.Add(this.__0x5102);
			this.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.Name = "ResourcesWindow";
			this.Size = new System.Drawing.Size(416, 596);
			this.WindowTitle = "Resources";
			this.ResumeLayout(false);

		}

		#endregion

		private ContentBrowser __0x5102;
	}
}





namespace NeoAxis.Editor
{
	public static class ResourcesWindowItems
	{
		static List<Item> __0x5106 = new List<Item>();
		static List<Item> __0x5107 = new List<Item>();
		static Dictionary<Type, Item> __0x5108 = new Dictionary<Type, Item>();
		static bool __0x5109;
		static Dictionary<string, string> __0x5110 = new Dictionary<string, string>();

		

		public class Item
		{
			public string Path;
			public Type Type;
			public double SortOrder;
			public bool Disabled;

			public Item( string path, Type type, double sortOrder = 0, bool disabled = false )
			{
				this.Path = path;
				this.Type = type;
				this.SortOrder = sortOrder;
				this.Disabled = disabled;
			}

			public override string ToString()
			{
				return Path;
			}
		}

		

		public static IReadOnlyList<Item> Items
		{
			get { return __0x5107; }
		}

		public static Dictionary<string, string> GroupDescriptions
		{
			get { return __0x5110; }
		}

		public static event Action FixItems;

		public static void PrepareItems()
		{
			if( __0x5109 )
				return;

			__0x5142();
			

			
			CollectionUtility.MergeSort( __0x5106, delegate ( Item __0x5143, Item __0x5144 )
			{
				if( __0x5143.SortOrder < __0x5144.SortOrder )
					return -1;
				if( __0x5143.SortOrder > __0x5144.SortOrder )
					return 1;

				string __0x5111 = __0x5143.Path + " ";
				string __0x5112 = __0x5144.Path + " ";
				return string.Compare( __0x5111, __0x5112 );
			} );
			__0x5107.AddRange( __0x5106 );

			FixItems?.Invoke();

			__0x5109 = true;
		}

		static void __0x5142()
		{
			
			{
				var __0x5113 = @"Base\Common";
				
				
				AddItem( new Item( __0x5113 + @"\Component", typeof( Component ) ) );
				AddItem( new Item( __0x5113 + @"\Text File", typeof( NewResourceType_TextFile ) ) );

				
				
				
			}

			
			{
				
				{
					var __0x5114 = @"Base\Scripting";
					AddItem( new Item( __0x5114 + @"\C# File", typeof( NewResourceType_CSharpClass ) ) );
					AddItem( new Item( __0x5114 + @"\C# Script", typeof( Component_CSharpScript ) ) );
					AddItem( new Item( __0x5114 + @"\Flow Graph", typeof( Component_FlowGraph ) ) );
					

					
				}

				
				{
					var __0x5115 = @"Base\Scripting\Metadata";
					AddItem( new Item( __0x5115 + @"\Property", typeof( Component_Property ) ) );
					AddItem( new Item( __0x5115 + @"\Method", typeof( Component_Method ) ) );
					
					AddItem( new Item( __0x5115 + @"\Member Parameter", typeof( Component_MemberParameter ) ) );
					
				}

				
				{
					var __0x5116 = @"Base\Scripting\Flow scripting";
					AddItem( new Item( __0x5116 + @"\Invoke Member", typeof( Component_InvokeMember ) ) );
					AddItem( new Item( __0x5116 + @"\Event Handler", typeof( Component_EventHandler ) ) );
					AddItem( new Item( __0x5116 + @"\Declare Variable", typeof( Component_DeclareVariable ) ) );
					AddItem( new Item( __0x5116 + @"\Set Variable", typeof( Component_SetVariable ) ) );
					AddItem( new Item( __0x5116 + @"\If", typeof( Component_If ) ) );
					AddItem( new Item( __0x5116 + @"\Switch", typeof( Component_Switch ) ) );
					AddItem( new Item( __0x5116 + @"\While", typeof( Component_While ) ) );
					AddItem( new Item( __0x5116 + @"\Do While", typeof( Component_DoWhile ) ) );
					AddItem( new Item( __0x5116 + @"\Do Number", typeof( Component_DoNumber ) ) );
					AddItem( new Item( __0x5116 + @"\For Each", typeof( Component_ForEach ) ) );
					AddItem( new Item( __0x5116 + @"\For", typeof( Component_For ) ) );
					AddItem( new Item( __0x5116 + @"\Sequence", typeof( Component_Sequence ) ) );
					AddItem( new Item( __0x5116 + @"\Flow Start", typeof( Component_FlowStart ) ) );
					AddItem( new Item( __0x5116 + @"\Convert To", typeof( Component_ConvertTo ) ) );
					AddItem( new Item( __0x5116 + @"\Sleep", typeof( Component_Sleep ) ) );
				}

				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				
				
				

				
				
				

				
				
				
				
				
				

			}

			
			{
				{
					var __0x5117 = @"Base\UI";
					AddItem( new Item( __0x5117 + @"\Control", typeof( UIControl ) ) );
					AddItem( new Item( __0x5117 + @"\Window", typeof( UIWindow ) ) );
					AddItem( new Item( __0x5117 + @"\Text", typeof( UIText ) ) );
					AddItem( new Item( __0x5117 + @"\Image", typeof( UIImage ) ) );
					AddItem( new Item( __0x5117 + @"\Button", typeof( UIButton ) ) );
					AddItem( new Item( __0x5117 + @"\Check", typeof( UICheck ) ) );
					AddItem( new Item( __0x5117 + @"\Edit", typeof( UIEdit ) ) );
					AddItem( new Item( __0x5117 + @"\Slider", typeof( UISlider ) ) );
					AddItem( new Item( __0x5117 + @"\Progress", typeof( UIProgress ) ) );
					AddItem( new Item( __0x5117 + @"\Scroll", typeof( UIScroll ) ) );
					AddItem( new Item( __0x5117 + @"\Combo", typeof( UICombo ) ) );
					AddItem( new Item( __0x5117 + @"\List", typeof( UIList ) ) );
					

					if( MetadataManager.GetType( "NeoAxis.UIVideo" ) != null )
						AddItem( new Item( __0x5117 + @"\Video", MetadataManager.GetType( "NeoAxis.UIVideo" ).GetNetType() ) );
					

					AddItem( new Item( __0x5117 + @"\Web Browser", typeof( UIWebBrowser ) ) );

					if( MetadataManager.GetType( "NeoAxis.UIRenderTarget" ) != null )
						AddItem( new Item( __0x5117 + @"\Render Target", MetadataManager.GetType( "NeoAxis.UIRenderTarget" ).GetNetType() ) );
					

					
				}

				
				{
					var __0x5118 = @"Base\UI\Containers";
					AddItem( new Item( __0x5118 + @"\Tab Control", typeof( UITabControl ) ) );
					
					AddItem( new Item( __0x5118 + @"\Grid", typeof( UIGrid ) ) );
					AddItem( new Item( __0x5118 + @"\Toolbar", typeof( UIToolbar ) ) );
				}

				
				{
					var __0x5119 = @"Base\UI\More";
					AddItem( new Item( __0x5119 + @"\Style", typeof( UIStyle ) ) );
					AddItem( new Item( __0x5119 + @"\Tooltip", typeof( UITooltip ) ) );
				}
			}

			
			{
				var __0x5120 = @"Base\Scene common";
				AddItem( new Item( __0x5120 + @"\Scene", typeof( Component_Scene ) ) );
				AddItem( new Item( __0x5120 + @"\Material", typeof( Component_Material ) ) );
				AddItem( new Item( __0x5120 + @"\Surface", typeof( Component_Surface ) ) );
				AddItem( new Item( __0x5120 + @"\Image", typeof( Component_Image ) ) );
				AddItem( new Item( __0x5120 + @"\Mesh", typeof( Component_Mesh ) ) );
				AddItem( new Item( __0x5120 + @"\Mesh In Space Animation Controller", typeof( Component_MeshInSpaceAnimationController ) ) );
				AddItem( new Item( __0x5120 + @"\Paint Layer", typeof( Component_PaintLayer ) ) );
				AddItem( new Item( __0x5120 + @"\Rendering Pipeline Default", typeof( Component_RenderingPipeline_Default ) ) );
			}

			
			{
				var __0x5121 = @"Base\Scene objects";

				AddItem( new Item( __0x5121 + @"\Object In Space", typeof( Component_ObjectInSpace ) ) );
				AddItem( new Item( __0x5121 + @"\Group Of Objects", typeof( Component_GroupOfObjects ) ) );
				AddItem( new Item( __0x5121 + @"\Layer", typeof( Component_Layer ) ) );
				AddItem( new Item( __0x5121 + @"\Skybox", typeof( Component_Skybox ) ) );
				AddItem( new Item( __0x5121 + @"\Fog", typeof( Component_Fog ) ) );

				if( MetadataManager.GetType( "NeoAxis.Component_Terrain" ) != null )
					AddItem( new Item( __0x5121 + @"\Terrain", MetadataManager.GetType( "NeoAxis.Component_Terrain" ).GetNetType() ) );
				

				
				
				
				AddItem( new Item( __0x5121 + @"\Light", typeof( Component_Light ) ) );
				AddItem( new Item( __0x5121 + @"\Lens Flares", typeof( Component_LensFlares ) ) );
				AddItem( new Item( __0x5121 + @"\Camera", typeof( Component_Camera ) ) );
				AddItem( new Item( __0x5121 + @"\Billboard", typeof( Component_Billboard ) ) );
				AddItem( new Item( __0x5121 + @"\Decal", typeof( Component_Decal ) ) );
				AddItem( new Item( __0x5121 + @"\Reflection Probe", typeof( Component_ReflectionProbe ) ) );
				AddItem( new Item( __0x5121 + @"\Sound Source", typeof( Component_SoundSource ) ) );

				if( MetadataManager.GetType( "NeoAxis.Component_RenderTargetInSpace" ) != null )
					AddItem( new Item( __0x5121 + @"\Render Target In Space", MetadataManager.GetType( "NeoAxis.Component_RenderTargetInSpace" ).GetNetType() ) );

				AddItem( new Item( __0x5121 + @"\Additional\Text 2D", typeof( Component_Text2D ) ) );
				AddItem( new Item( __0x5121 + @"\Additional\Curve In Space", typeof( Component_CurveInSpace ) ) );
			}

			
			{
				var __0x5122 = @"Base\Primitives";

				AddItem( new Item( __0x5122 + @"\Arch", typeof( Component_MeshGeometry_Arch ) ) );
				AddItem( new Item( __0x5122 + @"\Box", typeof( Component_MeshGeometry_Box ) ) );
				AddItem( new Item( __0x5122 + @"\Capsule", typeof( Component_MeshGeometry_Capsule ) ) );
				AddItem( new Item( __0x5122 + @"\Cone", typeof( Component_MeshGeometry_Cone ) ) );
				AddItem( new Item( __0x5122 + @"\Cylinder", typeof( Component_MeshGeometry_Cylinder ) ) );
				AddItem( new Item( __0x5122 + @"\Door", typeof( Component_MeshGeometry_Door ) ) );
				AddItem( new Item( __0x5122 + @"\Pipe", typeof( Component_MeshGeometry_Pipe ) ) );
				AddItem( new Item( __0x5122 + @"\Plane", typeof( Component_MeshGeometry_Plane ) ) );
				AddItem( new Item( __0x5122 + @"\Prism", typeof( Component_MeshGeometry_Prism ) ) );
				AddItem( new Item( __0x5122 + @"\Sphere", typeof( Component_MeshGeometry_Sphere ) ) );
				AddItem( new Item( __0x5122 + @"\Stairs", typeof( Component_MeshGeometry_Stairs ) ) );
				AddItem( new Item( __0x5122 + @"\Torus", typeof( Component_MeshGeometry_Torus ) ) );
				AddItem( new Item( __0x5122 + @"\Polygon Based Polyhedron", typeof( Component_MeshGeometry_PolygonBasedPolyhedron ) ) );
			}

			
			{
				var __0x5123 = @"Base\Physics";

				AddItem( new Item( __0x5123 + @"\Rigid Body", typeof( Component_RigidBody ) ) );

				AddItem( new Item( __0x5123 + @"\Box Shape", typeof( Component_CollisionShape_Box ) ) );
				AddItem( new Item( __0x5123 + @"\Sphere Shape", typeof( Component_CollisionShape_Sphere ) ) );
				AddItem( new Item( __0x5123 + @"\Cylinder Shape", typeof( Component_CollisionShape_Cylinder ) ) );
				AddItem( new Item( __0x5123 + @"\Cone Shape", typeof( Component_CollisionShape_Cone ) ) );
				AddItem( new Item( __0x5123 + @"\Capsule Shape", typeof( Component_CollisionShape_Capsule ) ) );
				AddItem( new Item( __0x5123 + @"\Mesh Shape", typeof( Component_CollisionShape_Mesh ) ) );
				AddItem( new Item( __0x5123 + @"\Physical Material", typeof( Component_PhysicalMaterial ) ) );
				
				AddItem( new Item( __0x5123 + @"\Constraint", typeof( Component_Constraint ) ) );
				
				
				
			}

			
			{
				var __0x5124 = @"Base\Particles";
				AddItem( new Item( __0x5124 + @"\Particle System", typeof( Component_ParticleSystem ) ) );
				AddItem( new Item( __0x5124 + @"\Particle Emitter", typeof( Component_ParticleEmitter ) ) );

				var __0x5125 = @"Base\Particles\Shapes";
				AddItem( new Item( __0x5125 + @"\Box Shape", typeof( Component_ParticleEmitterShape_Box ) ) );
				AddItem( new Item( __0x5125 + @"\Point Shape", typeof( Component_ParticleEmitterShape_Point ) ) );
				AddItem( new Item( __0x5125 + @"\Sphere Shape", typeof( Component_ParticleEmitterShape_Sphere ) ) );
				AddItem( new Item( __0x5125 + @"\Cylinder Shape", typeof( Component_ParticleEmitterShape_Cylinder ) ) );
				AddItem( new Item( __0x5125 + @"\Custom Shape", typeof( Component_ParticleEmitterShape ) ) );

				var __0x5126 = @"Base\Particles\Modules";
				AddItem( new Item( __0x5126 + @"\Size Multiplier By Time", typeof( Component_ParticleSizeMultiplierByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Color Multiplier By Time", typeof( Component_ParticleColorMultiplierByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Linear Acceleration By Time", typeof( Component_ParticleLinearAccelerationByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Linear Velocity By Time", typeof( Component_ParticleLinearVelocityByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Linear Speed Multiplier By Time", typeof( Component_ParticleLinearSpeedMultiplierByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Angular Acceleration By Time", typeof( Component_ParticleAngularAccelerationByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Angular Velocity By Time", typeof( Component_ParticleAngularVelocityByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Angular Speed Multiplier By Time", typeof( Component_ParticleAngularSpeedMultiplierByTime ) ) );
				AddItem( new Item( __0x5126 + @"\Custom Module", typeof( Component_ParticleModuleCustom ) ) );
			}

			
			{
				{
					var __0x5127 = @"Base\Screen effects";

					var __0x5128 = new List<(string, string)>();
					__0x5128.Add( ("Chromatic Aberration", "Component_RenderingEffect_ChromaticAberration") );
					__0x5128.Add( ("Color Grading", "Component_RenderingEffect_ColorGrading") );
					__0x5128.Add( ("Depth Of Field", "Component_RenderingEffect_DepthOfField") );
					__0x5128.Add( ("Edge Detection", "Component_RenderingEffect_EdgeDetection") );
					__0x5128.Add( ("Gaussian Blur", "Component_RenderingEffect_GaussianBlur") );
					__0x5128.Add( ("Grayscale", "Component_RenderingEffect_Grayscale") );
					__0x5128.Add( ("Light Shafts", "Component_RenderingEffect_LightShafts") );
					__0x5128.Add( ("Noise", "Component_RenderingEffect_Noise") );
					__0x5128.Add( ("Outline", "Component_RenderingEffect_Outline") );
					__0x5128.Add( ("Pixelate", "Component_RenderingEffect_Pixelate") );
					__0x5128.Add( ("Posterize", "Component_RenderingEffect_Posterize") );
					__0x5128.Add( ("Radial Blur", "Component_RenderingEffect_RadialBlur") );
					__0x5128.Add( ("Screen Space Reflection", "Component_RenderingEffect_ScreenSpaceReflection") );
					__0x5128.Add( ("Vignetting", "Component_RenderingEffect_Vignetting") );

					foreach( var __0x5137 in __0x5128 )
					{
						var __0x5129 = MetadataManager.GetType( "NeoAxis." + __0x5137.Item2 );
						if( __0x5129 != null )
							AddItem( new Item( __0x5127 + "\\" + __0x5137.Item1, __0x5129.GetNetType() ) );
					}
				}

				{
					var __0x5130 = @"Base\Screen effects\Added by default";

					var __0x5131 = new List<(string, string)>();
					__0x5131.Add( ("Ambient Occlusion", "Component_RenderingEffect_AmbientOcclusion") );
					__0x5131.Add( ("Antialiasing", "Component_RenderingEffect_Antialiasing") );
					__0x5131.Add( ("Bloom", "Component_RenderingEffect_Bloom") );
					__0x5131.Add( ("Lens Effects", "Component_RenderingEffect_LensEffects") );
					__0x5131.Add( ("Motion Blur", "Component_RenderingEffect_MotionBlur") );
					__0x5131.Add( ("Sharpen", "Component_RenderingEffect_Sharpen") );
					__0x5131.Add( ("To LDR", "Component_RenderingEffect_ToLDR") );
					__0x5131.Add( ("Tone Mapping", "Component_RenderingEffect_ToneMapping") );

					foreach( var __0x5138 in __0x5131 )
					{
						var __0x5132 = MetadataManager.GetType( "NeoAxis." + __0x5138.Item2 );
						if( __0x5132 != null )
							AddItem( new Item( __0x5130 + "\\" + __0x5138.Item1, __0x5132.GetNetType() ) );
					}
				}

				{
					var __0x5133 = @"Base\Screen effects\Special";

					var __0x5134 = new List<(string, string)>();
					__0x5134.Add( ("Show Render Target", "Component_RenderingEffect_ShowRenderTarget") );

					foreach( var __0x5139 in __0x5134 )
					{
						var __0x5135 = MetadataManager.GetType( "NeoAxis." + __0x5139.Item2 );
						if( __0x5135 != null )
							AddItem( new Item( __0x5133 + "\\" + __0x5139.Item1, __0x5135.GetNetType() ) );
					}
				}

			}
		}

		
		
		
		
		
		
		


		
		

		internal static void RegisterAssembly( Assembly assembly )
		{
			var __0x5136 = new List<Item>();

			foreach( var __0x5140 in assembly.GetExportedTypes() )
			{
				foreach( var __0x5141 in __0x5140.GetCustomAttributes<AddToResourcesWindowAttribute>() )
					__0x5136.Add( new Item( __0x5141.Path, __0x5140, __0x5141.SortOrder, __0x5141.Disabled ) );
			}

			__0x5106.AddRange( __0x5136 );
		}

		public static Item GetItemByPath( string path )
		{
			return Items.FirstOrDefault( __0x5145 => __0x5145.Path == path );
		}

		public static void AddItem( Item item )
		{
			__0x5107.Add( item );
			__0x5108[ item.Type ] = item;
		}

		public static Item GetItemByType( Type type )
		{
			__0x5108.TryGetValue( type, out var item );
			return item;
		}
	}
}





namespace NeoAxis.Editor
{
	

	public static class RunSimulation
	{
		static List<Metadata.TypeInfo> __0x5146 = new List<Metadata.TypeInfo>();
		

		

		public enum RunMethod
		{
			DocumentWindowEditorProcess,
			
			

			Player,

			
			
		}

		

		static RunSimulation()
		{
			__0x5146.Add( MetadataManager.GetTypeOfNetType( typeof( Component_Scene ) ) );
			__0x5146.Add( MetadataManager.GetTypeOfNetType( typeof( UIControl ) ) );
			
			
		}

		public static List<Metadata.TypeInfo> SupportedTypesByPlayer
		{
			get { return __0x5146; }
		}

		public static bool CheckTypeSupportedByPlayer( Metadata.TypeInfo type )
		{
			foreach( var __0x5150 in __0x5146 )
				if( __0x5150.IsAssignableFrom( type ) )
					return true;
			return false;
		}

		public static void Run( string realFileName, RunMethod runMethod )
		{
			string __0x5147 = Path.Combine( VirtualFileSystem.Directories.Binaries, "NeoAxis.Player.exe" );

			string __0x5148 = "";

			if( ProjectSettings.Get.RunSimulationInFullscreen.Value )
				__0x5148 += "-fullscreen 1";
			else
				__0x5148 += "-windowed 1";

			if( !string.IsNullOrEmpty( realFileName ) )
				__0x5148 += string.Format( " -play \"{0}\"", realFileName );

			var __0x5149 = Process.Start( __0x5147, __0x5148 );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a window for selection type.
	/// </summary>
	public partial class SelectTypeWindow : DockWindow
	{
		public CreationDataClass creationData;

		Metadata.TypeInfo __0x5151;
		bool __0x5152;

		

		public class CreationDataClass
		{
			public DocumentWindow initDocumentWindow;
			public Metadata.TypeInfo initDemandedType;
			public bool initCanSelectNull;
			public bool initCanSelectAbstractClass;

			public delegate void WasSelectedDelegate( SelectTypeWindow __0x5178, Metadata.TypeInfo __0x5179, ref bool __0x5180 );
			public WasSelectedDelegate WasSelected;
		}

		

		public SelectTypeWindow()
		{
			__0x5177();

			WindowTitle = EditorLocalization.Translate( "SelectTypeWindow", WindowTitle );
			EditorLocalization.TranslateForm( "SelectTypeWindow", this );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5165();
			__0x5170();
			__0x5163.Start();
		}

		void __0x5165()
		{
			var __0x5153 = new ContentBrowser.SetReferenceModeDataClass();
			__0x5153.demandedType = MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) );

			
			
			
			
			

			

			__0x5153.allowNull = creationData.initCanSelectNull;
			__0x5153.selectTypeWindow = true;
			__0x5153.selectTypeDemandedType = creationData.initDemandedType;
			__0x5153.selectTypeWindowCanSelectAbstractClass = creationData.initCanSelectAbstractClass;

			__0x5162.Init( creationData.initDocumentWindow, null, __0x5153 );
			__0x5162.UpdateData();
		}

		[Browsable( false )]
		public CreationDataClass CreationData
		{
			get { return creationData; }
		}

		[Browsable( false )]
		public Metadata.TypeInfo SelectedType
		{
			get { return __0x5151; }
		}

		[Browsable( false )]
		public bool SelectedTypeCanSelect
		{
			get { return __0x5152; }
		}

		void __0x5166()
		{
			Metadata.TypeInfo __0x5154 = null;
			bool __0x5155 = false;

			ContentBrowser.Item __0x5156 = null;
			if( __0x5162.SelectedItems.Length != 0 )
				__0x5156 = __0x5162.SelectedItems[ 0 ];

			if( __0x5156 != null )
			{
				__0x5156.CalculateReferenceValue( null, MetadataManager.GetTypeOfNetType( typeof( Metadata.TypeInfo ) ),
					out string referenceValue, out bool canSet );

				if( canSet )
				{
					if( !string.IsNullOrEmpty( referenceValue ) )
					{
						__0x5154 = (Metadata.TypeInfo)MetadataManager.GetValueByReference(
							__0x5162.SetReferenceModeData.demandedType.GetNetType(), null, referenceValue );
						__0x5155 = true;
					}
					else
						__0x5155 = true;
				}

				
				if( __0x5154 != null && !creationData.initDemandedType.IsAssignableFrom( __0x5154 ) )
				{
					__0x5154 = null;
					__0x5155 = false;
				}
			}

			
			if( __0x5151 != __0x5154 || __0x5152 != __0x5155 )
			{
				__0x5151 = __0x5154;
				__0x5152 = __0x5155;
				__0x5170();
			}
		}

		private void __0x5167( ContentBrowser __0x5181, IList<ContentBrowser.Item> __0x5182, bool __0x5183, ref bool __0x5184 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5166();
		}

		private void __0x5168( ContentBrowser __0x5185, ContentBrowser.Item __0x5186, ref bool __0x5187 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5169() )
				return;
			__0x5172( null, null );
		}

		bool __0x5169()
		{
			

			if( !creationData.initCanSelectNull && __0x5151 == null )
				return false;

			return __0x5152;
		}

		void __0x5170()
		{
			__0x5171();
		}

		void __0x5171()
		{
			__0x5160.Enabled = __0x5169();
		}

		private void __0x5172( object __0x5188, EventArgs __0x5189 )
		{
			if( !__0x5174() )
				return;

			Close();
		}

		private void __0x5173( object __0x5190, EventArgs __0x5191 )
		{
			Close();
		}

		bool __0x5174()
		{
			bool __0x5157 = false;
			creationData.WasSelected?.Invoke( this, __0x5151, ref __0x5157 );
			if( __0x5157 )
				return false;
			return true;
		}

		private void __0x5175( object __0x5192, EventArgs __0x5193 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			__0x5166();

			__0x5171();
		}

		ContentBrowser.Item __0x5176( Metadata.TypeInfo __0x5194 )
		{
			

			

			foreach( var __0x5164 in __0x5162.Items )
			{
				var __0x5158 = __0x5164 as ContentBrowserItem_Type;
				if( __0x5158 != null )
				{
					if( __0x5158.type == __0x5194 )
						return __0x5164;
				}
			}
			return null;
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x5162.DocumentWindow, __0x5162.GetSelectedContainedObjects() );
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SelectTypeWindow
	{
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5159 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose( bool disposing )
        {
            if( disposing && ( __0x5159 != null ) )
            {
                __0x5159.Dispose();
            }
            base.Dispose( disposing );
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5177()
        {
			this.__0x5159 = new System.ComponentModel.Container();
			this.__0x5160 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5161 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5162 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5163 = new System.Windows.Forms.Timer(this.__0x5159);
			this.SuspendLayout();
			
			
			
			this.__0x5160.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5160.Location = new System.Drawing.Point(236, 529);
			this.__0x5160.Name = "buttonSelect";
			this.__0x5160.Size = new System.Drawing.Size(147, 32);
			this.__0x5160.TabIndex = 1;
			this.__0x5160.Values.Text = "Select";
			this.__0x5160.Click += new System.EventHandler(this.__0x5172);
			
			
			
			this.__0x5161.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5161.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5161.Location = new System.Drawing.Point(389, 529);
			this.__0x5161.Name = "buttonCancel";
			this.__0x5161.Size = new System.Drawing.Size(147, 32);
			this.__0x5161.TabIndex = 2;
			this.__0x5161.Values.Text = "Cancel";
			this.__0x5161.Click += new System.EventHandler(this.__0x5173);
			
			
			
			this.__0x5162.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5162.CanSelectObjectSettings = false;
			this.__0x5162.FilteringMode = null;
			this.__0x5162.Location = new System.Drawing.Point(12, 4);
			this.__0x5162.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5162.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x5162.Name = "contentBrowser1";
			this.__0x5162.ReadOnlyHierarchy = false;
			this.__0x5162.Size = new System.Drawing.Size(523, 514);
			this.__0x5162.TabIndex = 0;
			this.__0x5162.ThisIsSettingsWindow = false;
			this.__0x5162.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x5167);
			this.__0x5162.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x5168);
			
			
			
			this.__0x5163.Interval = 50;
			this.__0x5163.Tick += new System.EventHandler(this.__0x5175);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x5161);
			this.Controls.Add(this.__0x5160);
			this.Controls.Add(this.__0x5162);
			this.Name = "SelectTypeWindow";
			this.Size = new System.Drawing.Size(549, 573);
			this.WindowTitle = "Select Type";
			this.ResumeLayout(false);

        }

        #endregion

        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5160;
        private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5161;
		private ContentBrowser __0x5162;
		private System.Windows.Forms.Timer __0x5163;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a window for selection reference value.
	/// </summary>
	public partial class SetReferenceWindow : DockWindow
	{
		public DocumentWindow documentWindow;
		public ContentBrowser.SetReferenceModeDataClass setReferenceModeData;

		bool __0x5195;

		bool __0x5196 = true;

		bool __0x5197;
		
		string __0x5198;
		bool __0x5199;

		Color? __0x5200;

		

		public SetReferenceWindow()
		{
			__0x5269();

			WindowTitle = EditorLocalization.Translate( "SetReferenceWindow", WindowTitle );
			EditorLocalization.TranslateForm( "SetReferenceWindow", this );
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				__0x5195 = true;
				__0x5253( out var selected );
				__0x5195 = false;

				if( selected )
				{
					__0x5261();
				}
				else
				{
					if( __0x5252( out var reference ) )
					{
						__0x5244.Text = reference;

						__0x5268( true );
						__0x5244.Select();
					}
				}

				if( !__0x5197 )
					__0x5255();
				__0x5260();

				__0x5242.Start();
			}
		}

		/// <summary>
		/// Getting from only created items. Not all _Member items can be created (expanded).
		/// </summary>
		/// <param name="__0x5270"></param>
		/// <returns></returns>
		ContentBrowser.Item __0x5250( string __0x5270 )
		{
			

			

			
			if( string.IsNullOrEmpty( __0x5270 ) )
			{
				foreach( var __0x5246 in __0x5240.Items )
				{
					if( __0x5246 is ContentBrowserItem_Null )
						return __0x5246;
				}
				return null;
			}

			foreach( var __0x5247 in __0x5240.Items )
			{
				__0x5247.CalculateReferenceValue( setReferenceModeData.selectedComponents[ 0 ], setReferenceModeData.property.TypeUnreferenced,
					out string itemReferenceValue, out bool itemCanSet );

				if( ReferenceUtility.EqualsReferences( itemReferenceValue, __0x5270 ) )
					return __0x5247;
			}

			return null;
		}

		bool __0x5251( string __0x5271, bool __0x5272 )
		{
			

			var __0x5201 = __0x5250( __0x5271 );
			if( __0x5201 == null && !string.IsNullOrEmpty( __0x5271 ) )
			{
				

				
				List<string> __0x5202 = new List<string>();
				{
					string __0x5203 = __0x5271;

					again:;

					int __0x5204 = __0x5203.LastIndexOfAny( new char[] { '\\', '/', '|' } );
					if( __0x5204 != -1 )
					{
						var __0x5205 = __0x5203.Substring( 0, __0x5204 );
						if( !string.IsNullOrEmpty( __0x5205 ) )
						{
							__0x5203 = __0x5205;
							__0x5202.Add( __0x5203 );
							goto again;
						}
					}
				}

				
				foreach( var __0x5248 in __0x5202.GetReverse() )
				{
					var __0x5206 = __0x5250( __0x5248 );
					if( __0x5206 != null )
					{
						__0x5240.SelectItems( new ContentBrowser.Item[] { __0x5206 }, true );

						
						
					}
				}

				
				__0x5201 = __0x5250( __0x5271 );
			}

			if( __0x5201 != null )
				__0x5240.SelectItems( new ContentBrowser.Item[] { __0x5201 }, __0x5272 );

			return __0x5201 != null;
		}

		bool __0x5252( out string __0x5273 )
		{
			if( setReferenceModeData.propertyOwners.Length != 0 )
			{
				
				var __0x5207 = setReferenceModeData.propertyOwners[ 0 ];

				try
				{
					var __0x5208 = setReferenceModeData.property.GetValue( __0x5207, setReferenceModeData.propertyIndexes );
					if( __0x5208 != null )
					{
						var __0x5209 = __0x5208 as IReference;
						if( __0x5209 != null )
						{
							__0x5273 = __0x5209.GetByReference;
							if( __0x5273 == null )
								__0x5273 = "";

							return true;
						}
					}
				}
				catch { }
			}

			__0x5273 = "";
			return false;
		}

		void __0x5253( out bool __0x5274 )
		{
			__0x5274 = false;

			__0x5240.Init( documentWindow, null, setReferenceModeData );
			__0x5240.UpdateData();

			if( __0x5252( out var reference ) )
			{
				
				
				
				if( ReferenceUtility.ConvertRelativePathToResource( reference, setReferenceModeData.selectedComponents[ 0 ], out var reference2 ) )
				{
					reference = reference2;
					__0x5245.Checked = true;
				}

				bool __0x5210 = false;

				
				if( string.IsNullOrEmpty( reference ) )
				{
					if( setReferenceModeData.propertyOwners.Length != 0 )
					{
						
						var __0x5211 = setReferenceModeData.propertyOwners[ 0 ];

						var __0x5212 = __0x5211 as Component;
						if( __0x5212 != null )
						{
							var __0x5213 = ComponentUtility.GetOwnedFileNameOfComponent( __0x5212 );
							if( !string.IsNullOrEmpty( __0x5213 ) )
							{
								try
								{
									reference = Path.GetDirectoryName( __0x5213 );
									__0x5210 = true;
								}
								catch { }
							}
						}
					}
				}

				try
				{
					__0x5274 = __0x5251( reference, __0x5210 );
				}
				catch { }
			}

			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
		}

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return documentWindow; }
		}

		[Browsable( false )]
		public ContentBrowser.SetReferenceModeDataClass SetReferenceModeData
		{
			get { return setReferenceModeData; }
		}

		[Browsable( false )]
		public string SelectedReference
		{
			get { return __0x5198; }
		}

		[Browsable( false )]
		public bool SelectedReferenceCanSet
		{
			get { return __0x5199; }
		}

		static int __0x5254( IList<string> __0x5275 )
		{
			var __0x5214 = __0x5275.Min( __0x5276 => __0x5276.Length );
			int __0x5215;
			for( __0x5215 = 0; __0x5215 < __0x5214; __0x5215++ )
			{
				if( __0x5275.Select( __0x5277 => __0x5277[ __0x5215 ] ).Distinct().Count() > 1 )
					break;
			}
			return __0x5215;
			
		}

		void __0x5255()
		{
			

			
			ContentBrowser.Item __0x5216 = null;
			if( __0x5240.SelectedItems.Length != 0 )
				__0x5216 = __0x5240.SelectedItems[ 0 ];

			string __0x5217 = null;
			bool __0x5218 = false;

			if( __0x5216 != null )
			{
				

				__0x5216.CalculateReferenceValue( setReferenceModeData.selectedComponents[ 0 ], setReferenceModeData.property.TypeUnreferenced, out __0x5217, out __0x5218 );

				
				if( __0x5245.Checked && !string.IsNullOrEmpty( __0x5217 ) )
				{
					if( !__0x5217.Contains( ':' ) )
					{
						var __0x5219 = ComponentUtility.GetOwnedFileNameOfComponent( setReferenceModeData.selectedComponents[ 0 ] );
						var __0x5220 = "";
						if( !string.IsNullOrEmpty( __0x5219 ) )
							__0x5220 = Path.GetDirectoryName( __0x5219 );

						int __0x5221 = __0x5254( new string[] { __0x5220, __0x5217 } );

						var __0x5222 = "";

						
						{
							var __0x5223 = __0x5220.Substring( __0x5221 ).Split( new char[] { '\\', '/' }, StringSplitOptions.RemoveEmptyEntries ).Length;
							for( int __0x5224 = 0; __0x5224 < __0x5223; __0x5224++ )
								__0x5222 = Path.Combine( __0x5222, ".." );
						}

						
						{
							var __0x5225 = __0x5217.Substring( __0x5221 );
							if( __0x5225.Length != 0 && ( __0x5225[ 0 ] == '\\' || __0x5225[ 0 ] == '/' ) )
								__0x5225 = __0x5225.Substring( 1 );

							
							if( __0x5222.Length != 0 && __0x5222[ __0x5222.Length - 1 ] != '\\' && __0x5222[ __0x5222.Length - 1 ] != '/' )
								__0x5222 += "\\";
							__0x5222 += __0x5225;
							
						}

						__0x5217 = "relative:" + __0x5222;
					}
				}
			}

			
			__0x5198 = __0x5217;
			__0x5199 = __0x5218;
			__0x5260();
			__0x5261();
			__0x5268( false );
			
			
			
			
			
			
			
		}

		private void __0x5256( ContentBrowser __0x5278, IList<ContentBrowser.Item> __0x5279, bool __0x5280, ref bool __0x5281 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5195 )
			{
				__0x5197 = false;
				__0x5255();
			}
		}

		private void __0x5257( ContentBrowser __0x5282, ContentBrowser.Item __0x5283, ref bool __0x5284 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( !__0x5259() )
				return;
			__0x5263( null, null );
		}

		string __0x5258( Metadata.TypeInfo __0x5285 )
		{
			

			var __0x5226 = __0x5285.GetNetType().GetCustomAttributes( typeof( ResourceFileExtensionAttribute ), true );
			if( __0x5226.Length != 0 )
			{
				var __0x5227 = (ResourceFileExtensionAttribute)__0x5226[ 0 ];
				return __0x5227.Extension;
			}

			
			return "UNKNOWN";
		}

		bool __0x5259()
		{
			

			if( SelectedReference == null )
				return false;
			if( !SelectedReferenceCanSet )
				return false;

			return true;
		}

		void __0x5260()
		{
			__0x5238.Enabled = __0x5259();
			__0x5241.Enabled = __0x5238.Enabled;
		}

		void __0x5261()
		{
			__0x5196 = false;
			__0x5244.Text = SelectedReference;
			__0x5196 = true;

			
			
			
			
		}

		private void __0x5262( object __0x5286, EventArgs __0x5287 )
		{
			if( !__0x5265() )
				return;
		}

		private void __0x5263( object __0x5288, EventArgs __0x5289 )
		{
			if( !__0x5265() )
				return;

			Close();
		}

		private void __0x5264( object __0x5290, EventArgs __0x5291 )
		{
			Close();
		}

		bool __0x5265()
		{
			
			

			string __0x5228 = SelectedReference;

			var __0x5229 = setReferenceModeData.property.Type.GetNetType();
			var __0x5230 = ReferenceUtility.GetUnderlyingType( __0x5229 );

			List<UndoActionPropertiesChange.Item> __0x5231 = null;
			if( documentWindow != null )
				__0x5231 = new List<UndoActionPropertiesChange.Item>();


			

			foreach( var __0x5249 in setReferenceModeData.propertyOwners )
			{
				
				
				var __0x5232 = setReferenceModeData.property.GetValue( __0x5249, setReferenceModeData.propertyIndexes );

				object __0x5233 = null;
				if( __0x5228 == "" )
				{
					

					var __0x5234 = ReferenceUtility.GetUnreferencedValue( __0x5232 );
					
					if( __0x5234 as Component != null )
						__0x5234 = null;

					__0x5233 = ReferenceUtility.MakeReference( __0x5230, __0x5234, "" );
				}
				else
					__0x5233 = ReferenceUtility.MakeReference( __0x5230, null, __0x5228 );

				setReferenceModeData.property.SetValue( __0x5249, __0x5233, setReferenceModeData.propertyIndexes );

				if( __0x5231 != null )
				{
					var __0x5235 = new UndoActionPropertiesChange.Item( __0x5249, setReferenceModeData.property, __0x5232, setReferenceModeData.propertyIndexes );
					__0x5231.Add( __0x5235 );
				}
			}

			
			if( __0x5231 != null && __0x5231.Count != 0 )
			{
				var __0x5236 = new UndoActionPropertiesChange( __0x5231.ToArray() );
				documentWindow.Document.UndoSystem.CommitAction( __0x5236 );
				documentWindow.Document.Modified = true;
			}

			return true;
		}

		private void __0x5266( object __0x5292, EventArgs __0x5293 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			
			if( !__0x5197 )
				__0x5255();
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( __0x5240.DocumentWindow, __0x5240.GetSelectedContainedObjects() );
		}

		private void __0x5267( object __0x5294, EventArgs __0x5295 )
		{
			if( __0x5196 )
			{
				__0x5197 = true;
				__0x5198 = __0x5244.Text;
				__0x5199 = true;
				__0x5260();
			}
		}

		void __0x5268( bool __0x5296 )
		{
			if( __0x5200 == null )
				__0x5200 = __0x5244.StateCommon.Border.Color1;

			if( __0x5296 )
				__0x5244.StateCommon.Border.Color1 = Color.Red; 
			else
				__0x5244.StateCommon.Border.Color1 = __0x5200.Value;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SetReferenceWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5237 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5237 != null ) )
			{
				__0x5237.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5269()
		{
			this.__0x5237 = new System.ComponentModel.Container();
			this.__0x5238 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5239 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5240 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5241 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5242 = new System.Windows.Forms.Timer(this.__0x5237);
			this.__0x5243 = new NeoAxis.Editor.EngineLabel();
			this.__0x5244 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x5245 = new ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.SuspendLayout();
			
			
			
			this.__0x5238.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5238.Location = new System.Drawing.Point(218, 527);
			this.__0x5238.Name = "buttonSet";
			this.__0x5238.Size = new System.Drawing.Size(147, 32);
			this.__0x5238.TabIndex = 3;
			this.__0x5238.Values.Text = "Set";
			this.__0x5238.Click += new System.EventHandler(this.__0x5262);
			
			
			
			this.__0x5239.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5239.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5239.Location = new System.Drawing.Point(524, 527);
			this.__0x5239.Name = "buttonClose";
			this.__0x5239.Size = new System.Drawing.Size(147, 32);
			this.__0x5239.TabIndex = 5;
			this.__0x5239.Values.Text = "Close";
			this.__0x5239.Click += new System.EventHandler(this.__0x5264);
			
			
			
			this.__0x5240.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5240.CanSelectObjectSettings = false;
			this.__0x5240.FilteringMode = null;
			this.__0x5240.Location = new System.Drawing.Point(12, 12);
			this.__0x5240.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5240.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.SetReference;
			this.__0x5240.Name = "contentBrowser1";
			this.__0x5240.ReadOnlyHierarchy = false;
			this.__0x5240.Size = new System.Drawing.Size(658, 452);
			this.__0x5240.TabIndex = 0;
			this.__0x5240.ThisIsSettingsWindow = false;
			this.__0x5240.ItemAfterSelect += new NeoAxis.Editor.ContentBrowser.ItemAfterSelectDelegate(this.__0x5256);
			this.__0x5240.ItemAfterChoose += new NeoAxis.Editor.ContentBrowser.ItemAfterChooseDelegate(this.__0x5257);
			
			
			
			this.__0x5241.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5241.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x5241.Location = new System.Drawing.Point(371, 527);
			this.__0x5241.Name = "buttonSetAndClose";
			this.__0x5241.Size = new System.Drawing.Size(147, 32);
			this.__0x5241.TabIndex = 4;
			this.__0x5241.Values.Text = "Set and Close";
			this.__0x5241.Click += new System.EventHandler(this.__0x5263);
			
			
			
			this.__0x5242.Interval = 50;
			this.__0x5242.Tick += new System.EventHandler(this.__0x5266);
			
			
			
			this.__0x5243.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5243.Enabled = false;
			this.__0x5243.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x5243.Location = new System.Drawing.Point(31, 480);
			this.__0x5243.Name = "labelSelectedReference";
			this.__0x5243.Size = new System.Drawing.Size(651, 23);
			this.__0x5243.TabIndex = 4;
			this.__0x5243.Text = "(Selected reference)";
			this.__0x5243.Visible = false;
			
			
			
			this.__0x5244.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5244.Location = new System.Drawing.Point(12, 497);
			this.__0x5244.Name = "kryptonTextBox1";
			this.__0x5244.Size = new System.Drawing.Size(659, 21);
			this.__0x5244.TabIndex = 2;
			this.__0x5244.TextChanged += new System.EventHandler(this.__0x5267);
			
			
			
			this.__0x5245.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5245.Location = new System.Drawing.Point(12, 471);
			this.__0x5245.Name = "kryptonCheckBoxCanMakeRelativeFilePath";
			this.__0x5245.Size = new System.Drawing.Size(198, 20);
			this.__0x5245.TabIndex = 1;
			this.__0x5245.Values.Text = "Can make relative file path";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CloseByEscape = true;
			this.Controls.Add(this.__0x5245);
			this.Controls.Add(this.__0x5244);
			this.Controls.Add(this.__0x5243);
			this.Controls.Add(this.__0x5240);
			this.Controls.Add(this.__0x5241);
			this.Controls.Add(this.__0x5239);
			this.Controls.Add(this.__0x5238);
			this.Name = "SetReferenceWindow";
			this.Size = new System.Drawing.Size(685, 572);
			this.WindowTitle = "Set Reference";
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5238;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5239;
		private ContentBrowser __0x5240;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5241;
		private System.Windows.Forms.Timer __0x5242;
		private NeoAxis.Editor.EngineLabel __0x5243;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x5244;
		private ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5245;
	}
}




namespace NeoAxis.Editor
{
	public partial class SettingsCell : EUserControl
	{
		float __0x5297;
		SizeType __0x5298 = SizeType.Percent;

		

		public SettingsCell()
		{
			__0x5303();
		}

		internal virtual void PerformInit()
		{
		}

		[Browsable( false )]
		public SettingsProvider Provider
		{
			get
			{
				var __0x5299 = Parent as TableLayoutPanel;
				if( __0x5299 != null )
					return __0x5299.Tag as SettingsProvider;
				else
					return null;
			}
		}

		public virtual float CellsSortingPriority
		{
			get { return __0x5297; }
			set { __0x5297 = value; }
		}

		public SizeType SizeType
		{
			get { return __0x5298; }
			set { __0x5298 = value; }
		}

		public T[] GetObjects<T>() where T : class
		{
			return Provider.SelectedObjects.OfType<T>().ToArray();
		}

		public T GetFirstObject<T>() where T : class
		{
			foreach( var __0x5302 in Provider.SelectedObjects )
			{
				var __0x5300 = __0x5302 as T;
				if( __0x5300 != null )
					return __0x5300;
			}
			return null;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SettingsCell
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5301 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5301 != null ) )
			{
				__0x5301.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5303()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsCell";
			this.Size = new System.Drawing.Size(381, 128);
			this.ResumeLayout(false);

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	partial class SettingsCellProcedureUI_Container : SettingsCell
	{
		internal SettingsCellProcedureUI procedureUI;
		WinFormsProcedureUI.WinFormsForm __0x5304;

		

		public SettingsCellProcedureUI_Container()
		{
			__0x5311();

			SizeType = SizeType.AutoSize;
		}

		[Browsable( false )]
		public ProcedureUI.Form ProcedureForm
		{
			get { return __0x5304; }
		}

		internal override void PerformInit()
		{
			base.PerformInit();

			__0x5304 = new WinFormsProcedureUI.WinFormsForm( this );
			procedureUI.PerformInit();

			Height = __0x5304.positionY + 6;
		}

		private void __0x5309( object __0x5312, EventArgs __0x5313 )
		{
			__0x5307.Start();
			procedureUI.PerformUpdate();
		}

		private void __0x5310( object __0x5314, EventArgs __0x5315 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			procedureUI.PerformUpdate();
		}
	}

	

	public abstract class SettingsCellProcedureUI
	{
		internal SettingsCellProcedureUI_Container container;

		

		public SettingsCell Container
		{
			get { return container; }
		}

		public SettingsProvider Provider
		{
			get { return container.Provider; }
		}

		public virtual float CellsSortingPriority
		{
			get { return container.CellsSortingPriority; }
			set { container.CellsSortingPriority = value; }
		}

		public SizeType SizeType
		{
			get { return container.SizeType; }
			set { container.SizeType = value; }
		}

		public T[] GetObjects<T>() where T : class
		{
			return Provider.SelectedObjects.OfType<T>().ToArray();
		}

		public T GetFirstObject<T>() where T : class
		{
			foreach( var __0x5308 in Provider.SelectedObjects )
			{
				var __0x5305 = __0x5308 as T;
				if( __0x5305 != null )
					return __0x5305;
			}
			return null;
		}

		

		protected virtual void OnInit() { }
		internal void PerformInit()
		{
			OnInit();
		}

		protected virtual void OnUpdate() { }
		internal void PerformUpdate()
		{
			OnUpdate();
		}

		[Browsable( false )]
		public ProcedureUI.Form ProcedureForm
		{
			get { return container.ProcedureForm; }
		}
	}

}

namespace NeoAxis.Editor
{
	partial class SettingsCellProcedureUI_Container
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5306 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5306 != null ) )
			{
				__0x5306.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5311()
		{
			this.__0x5306 = new System.ComponentModel.Container();
			this.__0x5307 = new System.Windows.Forms.Timer(this.__0x5306);
			this.SuspendLayout();
			
			
			
			this.__0x5307.Interval = 50;
			this.__0x5307.Tick += new System.EventHandler(this.__0x5310);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsCellProcedureUI_Container";
			this.Load += new System.EventHandler(this.__0x5309);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x5307;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsCell_Properties : SettingsCell
	{
		public static bool AllowConfigureEvents = true;

		

		bool __0x5316;

		bool __0x5317;
		bool __0x5318;

		

		public SettingsCell_Properties()
		{
			__0x5336();

			__0x5325.Image = EditorResourcesCache.Events;
			__0x5324.Image = EditorResourcesCache.Properties;

			__0x5324.Text = EditorLocalization.Translate( "SettingsWindow", __0x5324.Text );
			__0x5325.Text = EditorLocalization.Translate( "SettingsWindow", __0x5325.Text );

			__0x5323.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();
		}

		private void __0x5327( object __0x5337, EventArgs __0x5338 )
		{
			__0x5326.Start();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5323.Padding = new Padding( (int)EditorAPI.DPIScale );
			__0x5323.Size = new Size( 10, (int)( 21 * EditorAPI.DPIScale + 2 ) );
			__0x5324.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );
			__0x5325.Size = new Size( (int)( 20 * EditorAPI.DPIScale ), (int)( 20 * EditorAPI.DPIScale + 2 ) );

			__0x5321.OverrideGroupDisplayName += __0x5332;
			__0x5321.OverridePropertyDisplayName += __0x5333;
			__0x5321.OverrideMemberDescription += __0x5334;
			__0x5322.OverrideGroupDisplayName += __0x5332;
			__0x5322.OverridePropertyDisplayName += __0x5333;
			__0x5322.OverrideMemberDescription += __0x5334;

			if( !AllowConfigureEvents )
			{
				__0x5323.Visible = false;
				__0x5325.Enabled = false;
				__0x5324.Enabled = false;
			}

			__0x5335();
		}

		protected override void OnDestroy()
		{
			base.OnDestroy();
		}

		public void UpdateData()
		{
			if( Provider.SelectedObjects != null && Provider.SelectedObjects.Length != 0 )
			{
				var __0x5319 = true;
				if( Provider?.DocumentWindow?.Document != null && Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5319 = false;

				__0x5323.Visible = __0x5319 && AllowConfigureEvents;

				__0x5335();

				if( !__0x5316 )
				{
					__0x5321.SetData( Provider.DocumentWindow, Provider.SelectedObjects );
					__0x5316 = true;
				}
			}
			else
			{
				__0x5323.Visible = false;
				__0x5321.SetData( null, null, false );
				__0x5322.SetData( null, null, false );
			}

			__0x5330();
		}

		private void __0x5328( object __0x5339, EventArgs __0x5340 )
		{
			__0x5317 = false;

			__0x5321.Visible = true;
			__0x5322.Visible = false;

			__0x5330();
		}

		private void __0x5329( object __0x5341, EventArgs __0x5342 )
		{
			__0x5317 = true;

			__0x5322.Visible = true;

			if( !__0x5318 )
			{
				__0x5322.SetData( Provider.DocumentWindow, Provider.SelectedObjects );
				__0x5318 = true;
			}

			__0x5321.Visible = false;

			__0x5330();
		}

		void __0x5330()
		{
			__0x5324.Checked = !__0x5317;
			__0x5325.Checked = __0x5317;
		}

		private void __0x5331( object __0x5343, EventArgs __0x5344 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5330();
		}

		private void __0x5332( HierarchicalContainer __0x5345, HCItemGroup __0x5346, ref string __0x5347 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5347 = EditorLocalization.Translate( "ProjectSettings.Group", __0x5347 );
				else
					__0x5347 = EditorLocalization.Translate( "Object.Group", __0x5347 );
			}
			catch { }
		}

		private void __0x5333( HierarchicalContainer __0x5348, HCItemProperty __0x5349, ref string __0x5350 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5350 = EditorLocalization.Translate( "ProjectSettings.Property", __0x5350 );
				else
					__0x5350 = EditorLocalization.Translate( "Object.Property", __0x5350 );
			}
			catch { }
		}

		private void __0x5334( HierarchicalContainer __0x5351, HCItemMember __0x5352, ref string __0x5353 )
		{
			try
			{
				if( Provider.DocumentWindow.Document.SpecialMode == "ProjectSettingsUserMode" )
					__0x5353 = EditorLocalization.Translate( "ProjectSettings.Description", __0x5353 );
				else
					__0x5353 = EditorLocalization.Translate( "Object.Description", __0x5353 );
			}
			catch { }
		}

		void __0x5335()
		{
			if( AllowConfigureEvents )
			{
				__0x5321.SetBounds( 0, __0x5323.Bounds.Bottom, Size.Width, Size.Height - __0x5323.Bounds.Bottom );
				__0x5322.SetBounds( 0, __0x5323.Bounds.Bottom, Size.Width, Size.Height - __0x5323.Bounds.Bottom );
			}
			else
			{
				__0x5321.SetBounds( 0, __0x5323.Bounds.Top, Size.Width, Size.Height - __0x5323.Bounds.Top );
				__0x5322.SetBounds( 0, __0x5323.Bounds.Top, Size.Width, Size.Height - __0x5323.Bounds.Top );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x5335();
		}

		protected override void OnParentFormResizeBegin( EventArgs e )
		{
			base.OnParentFormResizeBegin( e );

			if( !__0x5317 && __0x5321.RootItems.Count > 20 )
				__0x5321.Visible = false;
			if( __0x5317 && __0x5322.RootItems.Count > 20 )
				__0x5322.Visible = false;
		}

		protected override void OnParentFormResizeEnd( EventArgs e )
		{
			base.OnParentFormResizeEnd( e );

			if( !__0x5317 )
				__0x5321.Visible = true;
			if( __0x5317 )
				__0x5322.Visible = true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsCell_Properties
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5320 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5320 != null))
            {
                __0x5320.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5336()
        {
			this.__0x5320 = new System.ComponentModel.Container();
			this.__0x5321 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x5322 = new NeoAxis.Editor.HierarchicalContainer();
			this.__0x5323 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x5324 = new System.Windows.Forms.ToolStripButton();
			this.__0x5325 = new System.Windows.Forms.ToolStripButton();
			this.__0x5326 = new System.Windows.Forms.Timer(this.__0x5320);
			this.__0x5323.SuspendLayout();
			this.SuspendLayout();
			
			
			
			
   
   
			this.__0x5321.ReverseGroups = false;
			this.__0x5321.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.__0x5321.Location = new System.Drawing.Point(0, 31);
			this.__0x5321.Margin = new System.Windows.Forms.Padding(3, 1, 3, 1);
			this.__0x5321.Name = "hierarchicalContainer1";
			this.__0x5321.Size = new System.Drawing.Size(149, 102);
			this.__0x5321.SplitterPosition = 67;
			this.__0x5321.SplitterRatio = 0.4464286F;
			this.__0x5321.TabIndex = 0;
			
			
			
			
			
			
			this.__0x5322.Visible = false;
			this.__0x5322.ReverseGroups = true;
			this.__0x5322.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Events;
			this.__0x5322.Location = new System.Drawing.Point( 0, 31 );
			this.__0x5322.Margin = new System.Windows.Forms.Padding( 3, 1, 3, 1 );
			this.__0x5322.Name = "hierarchicalContainer1";
			this.__0x5322.Size = new System.Drawing.Size( 149, 102 );
			this.__0x5322.SplitterPosition = 67;
			this.__0x5322.SplitterRatio = 0.4464286F;
			this.__0x5322.TabIndex = 0;
			
			
			
			this.__0x5323.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x5323.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x5323.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.__0x5324,
            this.__0x5325});
			this.__0x5323.Location = new System.Drawing.Point(0, 0);
			this.__0x5323.Name = "toolStrip1";
			this.__0x5323.ShowItemToolTips = false;
			this.__0x5323.AutoSize = false;
			this.__0x5323.Size = new System.Drawing.Size(149, 25);
			this.__0x5323.TabIndex = 1;
			this.__0x5323.Text = "toolStrip1";
			
			
			
			this.__0x5324.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x5324.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x5324.ImageTransparentColor = System.Drawing.Color.Magenta;
			this.__0x5324.Name = "toolStripButtonProperties";
			this.__0x5324.AutoSize = false;
			this.__0x5324.Size = new System.Drawing.Size(23, 22);
			this.__0x5324.Text = "Properties";
			this.__0x5324.Click += new System.EventHandler(this.__0x5328);
			
			
			
			this.__0x5325.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x5325.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x5325.ImageTransparentColor = System.Drawing.Color.Transparent;
			this.__0x5325.Name = "toolStripButtonEvents";
			this.__0x5325.AutoSize = false;
			this.__0x5325.Size = new System.Drawing.Size(23, 22);
			this.__0x5325.Text = "Events";
			this.__0x5325.Click += new System.EventHandler(this.__0x5329);
			
			
			
			this.__0x5326.Interval = 50;
			this.__0x5326.Tick += new System.EventHandler(this.__0x5331);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CellsSortingPriority = -98F;
			this.Controls.Add(this.__0x5323);
			this.Controls.Add(this.__0x5321);
			this.Controls.Add(this.__0x5322);
			this.Margin = new System.Windows.Forms.Padding(0);
			this.Name = "SettingsCell_Properties";
			this.Size = new System.Drawing.Size(149, 135);
			this.Load += new System.EventHandler(this.__0x5327);
			this.__0x5323.ResumeLayout(false);
			this.__0x5323.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion

		private HierarchicalContainer __0x5321;
		private HierarchicalContainer __0x5322;
		private NeoAxis.Editor.EngineToolStrip __0x5323;
		private System.Windows.Forms.ToolStripButton __0x5324;
		private System.Windows.Forms.ToolStripButton __0x5325;
		private System.Windows.Forms.Timer __0x5326;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader : EUserControl
	{
		

		

		public SettingsHeader()
		{
			__0x5356();
		}

		[Browsable( false )]
		public SettingsWindow.PanelData SettingsPanel
		{
			get
			{
				return __0x5355<SettingsWindow.PanelData>( this );
			}
		}

		private T __0x5355<T>( Control __0x5357 ) where T : class
		{
			if( __0x5357.Parent == null )
				return null;

			if( __0x5357.Parent.Tag is T parentTag )
				return parentTag;
			else
				return __0x5355<T>( __0x5357.Parent );
		}

		
		
		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class SettingsHeader
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5354 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5354 != null ) )
			{
				__0x5354.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5356()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "ObjectSettingsExtension";
			this.Size = new System.Drawing.Size( 381, 128 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader_Components : SettingsHeader
	{
		
		
		

		
		ContentBrowser __0x5358;

		

		public SettingsHeader_Components()
		{
			__0x5370();
		}

		
		
		
		
		

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			Component __0x5359 = null;
			
			if( SettingsPanel.selectedObjects.Length == 1 )
				__0x5359 = SettingsPanel.selectedObjects[ 0 ] as Component;

			__0x5358 = new ContentBrowser();
			__0x5358.TreeViewBorderDraw = BorderSides.All;
			__0x5358.Mode = ContentBrowser.ModeEnum.Objects;
			__0x5358.Options.FilteringModeButton = false;
			
			
			__0x5358.Options.DisplayPropertiesSortFilesBy = false;
			__0x5358.Options.DisplayPropertiesOpenButton = false;
			__0x5358.ThisIsSettingsWindow = true;
			__0x5358.MultiSelect = true;
			__0x5358.ItemAfterSelect += __0x5368;
			__0x5358.ItemAfterChoose += __0x5369;

			__0x5358.Init( SettingsPanel.documentWindow, __0x5359, null );
			
			__0x5358.Dock = DockStyle.Fill;
			Controls.Add( __0x5358 );
		}

		private void __0x5368( ContentBrowser __0x5371, IList<ContentBrowser.Item> __0x5372, bool __0x5373, ref bool __0x5374 )
		{
			
			

			var __0x5360 = new List<object>();

			foreach( var __0x5366 in __0x5372 )
			{
				var __0x5361 = __0x5366 as ContentBrowserItem_Component;
				if( __0x5361 != null && __0x5361.Component != null )
					__0x5360.Add( __0x5361.Component );
			}

			if( __0x5360.Count == 0 )
			{
				
			}

			SettingsPanel.GetControl<SettingsLevel2Window>().SelectObjects( SettingsPanel.documentWindow, __0x5360 );
		}

		private void __0x5369( ContentBrowser __0x5375, ContentBrowser.Item __0x5376, ref bool __0x5377 )
		{
		}

		
		public void SelectObjects( Component[] objs )
		{
			

			ESet<Component> __0x5362 = new ESet<Component>( objs );

			List<ContentBrowser.Item> __0x5363 = new List<ContentBrowser.Item>();

			foreach( var __0x5367 in __0x5358.GetAllItems() )
			{
				ContentBrowserItem_Component __0x5364 = __0x5367 as ContentBrowserItem_Component;
				if( __0x5364 != null )
				{
					if( __0x5362.Contains( __0x5364.Component ) )
						__0x5363.Add( __0x5367 );
				}
			}

			__0x5358.SelectItems( __0x5363.ToArray() );
		}

		public int CalculateHeight()
		{
			return __0x5358 != null ? __0x5358.CalculateHeight() : -1;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsHeader_Components
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5365 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5365 != null))
            {
                __0x5365.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5370()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsHeader_Components";
			this.Size = new System.Drawing.Size(142, 197);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsHeader_ObjectInfo : SettingsHeader
	{
		bool? __0x5378;

		

		public SettingsHeader_ObjectInfo()
		{
			__0x5409();

			__0x5395.Values.Image = EditorResourcesCache.Type;

			__0x5399.SetToolTip( __0x5395, EditorLocalization.Translate( "SettingsWindow", "Type Settings" ) );
			__0x5399.SetToolTip( __0x5400, EditorLocalization.Translate( "SettingsWindow", "Reset Type Settings to default." ) );
		}

		private void __0x5401( object __0x5410, EventArgs __0x5411 )
		{

		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x5402();
			__0x5404();
			__0x5405();

			__0x5396.Start();
		}

		void __0x5402()
		{
			string __0x5379;
			string __0x5380;

			var __0x5381 = SettingsPanel.selectedObjects;
			if( __0x5381.Length == 1 )
			{
				var __0x5382 = __0x5381[ 0 ];

				var __0x5383 = __0x5382 as Component;
				if( __0x5383 != null )
				{
					if( !string.IsNullOrEmpty( __0x5383.Name ) )
					{
						__0x5379 = __0x5383.Name;
						__0x5380 = __0x5383.BaseType.ToString();
					}
					else
					{
						__0x5379 = __0x5383.BaseType.ToString();
						__0x5380 = __0x5379;
					}
				}
				else
				{
					__0x5379 = __0x5382.ToString();
					__0x5380 = "";
				}
			}
			else
			{
				__0x5379 = string.Format( EditorLocalization.Translate( "SettingsWindow", "{0} objects" ), __0x5381.Length );
				__0x5380 = "";
			}

			if( __0x5397.Text != __0x5379 )
				__0x5397.Text = __0x5379;
			if( __0x5398.Text != __0x5380 )
				__0x5398.Text = __0x5380;





			

			
			
			
			

			
			
			

			

			
			
			

			
			
			

			
			

			
			
			
			
			

			
			
			
			
			
			

			
			

			
			

			
			


			
			
			
			
			
			
			
			
			


			
			
			
			
			

			
			
			
			
			
			
			
		}

		Component __0x5403()
		{
			

			if( SettingsPanel.documentWindow?.Document != null && SettingsPanel.selectedObjects.Length == 1 )
				return SettingsPanel.selectedObjects[ 0 ] as Component;
			else
				return null;
		}

		void __0x5404()
		{
			__0x5395.Location = new Point( ClientRectangle.Right - __0x5395.Width, 0 );
			__0x5400.Location = new Point( __0x5395.Location.X - __0x5400.Width - 2, 5 );

			__0x5397.Width = __0x5400.Location.X - 2 - __0x5397.Location.X;
			__0x5398.Width = __0x5397.Width;
		}

		void __0x5405()
		{
			var __0x5384 = __0x5403();

			bool __0x5385 = __0x5384 != null && __0x5384.TypeSettingsPrivateObjects != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5400.Enabled != __0x5385 )
				__0x5400.Enabled = __0x5385;
			if( __0x5400.Visible != __0x5385 )
				__0x5400.Visible = __0x5385;
			if( __0x5378 != __0x5385 )
			{
				__0x5378 = __0x5385;

				if( EditorAPI.DarkTheme )
					__0x5400.Values.Image = __0x5385 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
				else
					__0x5400.Values.Image = __0x5385 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
			}

			var __0x5386 = __0x5384 != null && EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5395.Enabled != __0x5386 )
				__0x5395.Enabled = __0x5386;

			var __0x5387 = EditorUtility.AllowConfigureComponentTypeSettings;
			if( __0x5395.Visible != __0x5387 )
				__0x5395.Visible = __0x5387;

			
			
			

			
			
			
		}

		
		
		
		
		

		
		
		

		
		
		

		
		
		
		
		

		
		
		

		
		
		

		private void __0x5406( object __0x5412, EventArgs __0x5413 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			__0x5402();
			__0x5405();
		}

		private void __0x5407( object __0x5414, EventArgs __0x5415 )
		{
			var __0x5388 = __0x5403();
			if( __0x5388 != null )
			{
				var __0x5389 = new ComponentTypeSettingsForm( SettingsPanel.documentWindow.Document, __0x5388 );
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x5389.ShowDialog();
				} );
			}
		}

		private void __0x5408( object __0x5416, EventArgs __0x5417 )
		{
			var __0x5390 = __0x5403();
			if( __0x5390 != null )
			{
				var __0x5391 = EditorLocalization.Translate( "SettingsWindow", "Reset to default?" );
				if( EditorMessageBox.ShowQuestion( __0x5391, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
				{
					var __0x5392 = __0x5390.TypeSettingsPrivateObjects;

					__0x5390.TypeSettingsPrivateObjects = null;

					var __0x5393 = new UndoActionPropertiesChange.Item( __0x5390, (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component ) ).MetadataGetMemberBySignature( "property:TypeSettingsPrivateObjects" ), __0x5392, null );
					SettingsPanel.documentWindow.Document.UndoSystem.CommitAction( new UndoActionPropertiesChange( __0x5393 ) );
					SettingsPanel.documentWindow.Document.Modified = true;
				}
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( Created )
				__0x5404();
		}
	}
}

namespace NeoAxis.Editor
{
    partial class SettingsHeader_ObjectInfo
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5394 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5394 != null))
            {
                __0x5394.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5409()
        {
			this.__0x5394 = new System.ComponentModel.Container();
			this.__0x5395 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5396 = new System.Windows.Forms.Timer(this.__0x5394);
			this.__0x5397 = new NeoAxis.Editor.EngineLabel();
			this.__0x5398 = new NeoAxis.Editor.EngineLabel();
			this.__0x5399 = new NeoAxis.Editor.EngineToolTip(this.__0x5394);
			this.__0x5400 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			
			this.__0x5395.Location = new System.Drawing.Point(317, 0);
			this.__0x5395.Name = "buttonTypeSettings";
			this.__0x5395.Size = new System.Drawing.Size(30, 26);
			this.__0x5395.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5395.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x5395.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5395.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x5395.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5395.TabIndex = 2;
			this.__0x5399.SetToolTip(this.__0x5395, "Type Settings");
			this.__0x5395.Values.Image = global::NeoAxis.Properties.Resources.Class;
			this.__0x5395.Values.Text = "";
			this.__0x5395.Click += new System.EventHandler(this.__0x5407);
			
			
			
			this.__0x5396.Interval = 10;
			this.__0x5396.Tick += new System.EventHandler(this.__0x5406);
			
			
			
			
   
			this.__0x5397.Font = new System.Drawing.Font("Microsoft Sans Serif", 7.8F);
			this.__0x5397.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.BoldControl;
			this.__0x5397.Location = new System.Drawing.Point(0, -1);
			this.__0x5397.Name = "kryptonLabel1";
			this.__0x5397.Size = new System.Drawing.Size(295, 26);
			this.__0x5397.StateCommon.Content.Font = new System.Drawing.Font("Segoe UI", 9F, System.Drawing.FontStyle.Bold);
			this.__0x5397.TabIndex = 6;
			this.__0x5397.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
   
			this.__0x5398.LabelStyle = ComponentFactory.Krypton.Toolkit.LabelStyle.NormalControl;
			this.__0x5398.Location = new System.Drawing.Point(0, 24);
			this.__0x5398.Name = "kryptonLabel2";
			this.__0x5398.Size = new System.Drawing.Size(295, 23);
			this.__0x5398.TabIndex = 6;
			this.__0x5398.Text = "{Object} {Object} {Object} {Object}";
			
			
			
			
			this.__0x5400.Location = new System.Drawing.Point(299, 5);
			this.__0x5400.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5400.Name = "buttonTypeSettingsDefaultValue";
			this.__0x5400.Size = new System.Drawing.Size(15, 15);
			this.__0x5400.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5400.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x5400.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5400.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x5400.TabIndex = 7;
			this.__0x5399.SetToolTip(this.__0x5400, "Type Settings reset to default");
			this.__0x5400.Values.Text = "";
			this.__0x5400.Click += new System.EventHandler(this.__0x5408);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x5400);
			this.Controls.Add(this.__0x5397);
			this.Controls.Add(this.__0x5398);
			this.Controls.Add(this.__0x5395);
			this.Name = "SettingsHeader_ObjectInfo";
			this.Size = new System.Drawing.Size(347, 48);
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5395;
		private System.Windows.Forms.Timer __0x5396;
		private EngineLabel __0x5397;
		private EngineLabel __0x5398;
		private NeoAxis.Editor.EngineToolTip __0x5399;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5400;
	}
}





namespace NeoAxis.Editor
{
	public partial class SettingsLevel2Window : EUserControl
	{
		
		const int __0x5418 = 10;

		public class PanelData : PanelDataWithTableLayout
		{
		}
		List<PanelData> __0x5419 = new List<PanelData>();

		PanelData __0x5420;

		

		public SettingsLevel2Window()
		{
			__0x5433();
		}

		bool __0x5429( object[] __0x5434, object[] __0x5435 )
		{
			if( __0x5434.Length != __0x5435.Length )
				return false;
			for( int __0x5421 = 0; __0x5421 < __0x5434.Length; __0x5421++ )
			{
				if( __0x5434[ __0x5421 ] != __0x5435[ __0x5421 ] )
					return false;
			}
			return true;
		}

		PanelData __0x5430( object[] __0x5436 )
		{
			foreach( var __0x5428 in __0x5419 )
			{
				if( __0x5429( __0x5428.selectedObjects, __0x5436 ) )
					return __0x5428;
			}
			return null;
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		PanelData __0x5431( DocumentWindow __0x5437, object[] __0x5438, bool __0x5439 )
		{
			PanelData __0x5422 = new PanelData();
			__0x5419.Add( __0x5422 );
			__0x5422.selectedObjects = __0x5438;

			__0x5422.CreateAndAddPanel( this );

			
			if( !__0x5439 && __0x5422.layoutPanel != null )
			{
				__0x5422.layoutPanel.Visible = false;
				__0x5422.layoutPanel.Enabled = false;
			}

			SettingsProvider.Create( __0x5437, __0x5422.selectedObjects, __0x5422.layoutPanel, null, true );

			return __0x5422;
		}

		void __0x5432( PanelData __0x5440 )
		{
			if( SelectedPanel == __0x5440 )
				SelectedPanel = null;

			var __0x5423 = __0x5440.layoutPanel;
			__0x5423.Parent.Controls.Remove( __0x5423 );
			__0x5423.Dispose();

			__0x5419.Remove( __0x5440 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5419.Count != 0 )
				__0x5432( __0x5419[ __0x5419.Count - 1 ] );
		}

		public void SelectObjects( DocumentWindow document, IList<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;

			object[] __0x5424 = new object[ objects.Count ];
			objects.CopyTo( __0x5424, 0 );

			PanelData __0x5425 = __0x5430( __0x5424 );

			
			if( __0x5425 != null )
			{
				
				__0x5419.Remove( __0x5425 );
				__0x5419.Add( __0x5425 );
			}

			
			if( __0x5425 == null )
			{
				
				while( __0x5419.Count >= __0x5418 )
					__0x5432( __0x5419[ 0 ] );

				__0x5425 = __0x5431( document, __0x5424, true );
			}

			SelectedPanel = __0x5425;

			
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5420; }
			set
			{
				if( __0x5420 == value )
					return;

				var __0x5426 = __0x5420;
				__0x5420 = value;

				if( __0x5420 != null )
				{
					__0x5420.layoutPanel.Enabled = true;
					__0x5420.layoutPanel.Visible = true;
					
				}

				if( __0x5426 != null )
				{
					__0x5426.layoutPanel.Visible = false;
					__0x5426.layoutPanel.Enabled = false;
				}

				
				
				
				
				

				

				
				
				
				
				
				

				
				
			}
		}
	}
}
namespace NeoAxis.Editor
{
    partial class SettingsLevel2Window
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5427 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5427 != null))
            {
                __0x5427.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5433()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsLevel2Window";
			this.Size = new System.Drawing.Size(145, 31);
			this.ResumeLayout(false);

        }

        #endregion
	}
}





namespace NeoAxis.Editor
{
	
	
	
	

	
	
	
	
	
	

	public class SettingsProvider
	{
		

		

		

		

		DocumentWindow __0x5441;
		object[] __0x5442;
		TableLayoutPanel __0x5443;
		object __0x5444;

		

		public delegate void CreateProviderDelegate( DocumentWindow __0x5462, object[] __0x5463, TableLayoutPanel __0x5464, object __0x5465, ref SettingsProvider __0x5466 );
		public static event CreateProviderDelegate CreateProvider;

		public delegate void UpdateDelegate( SettingsProvider __0x5467 );
		public event UpdateDelegate UpdateBegin;
		public static event UpdateDelegate AllProviders_UpdateBegin;
		public event UpdateDelegate UpdateEnd;
		public static event UpdateDelegate AllProviders_UpdateEnd;

		

		public SettingsProvider( DocumentWindow documentWindow, object[] selectedObjects, TableLayoutPanel layoutPanel, object anyData )
		{
			this.__0x5442 = selectedObjects;
			this.__0x5441 = documentWindow;
			this.__0x5443 = layoutPanel;
			this.__0x5444 = anyData;

			this.__0x5443.Tag = this;
		}

		public static SettingsProvider Create( DocumentWindow documentWindow, object[] selectedObjects, TableLayoutPanel layoutPanel, object anyData, bool update )
		{
			
			SettingsProvider __0x5445 = null;
			CreateProvider?.Invoke( documentWindow, selectedObjects, layoutPanel, anyData, ref __0x5445 );

			
			if( __0x5445 == null )
				__0x5445 = new SettingsProvider( documentWindow, selectedObjects, layoutPanel, anyData );

			if( update )
			{
				try
				{
					
					layoutPanel.SuspendLayout();

					__0x5445.PerformUpdate( false );
				}
				finally
				{
					layoutPanel.ResumeLayout();
				}
			}

			return __0x5445;
		}

		public DocumentWindow DocumentWindow
		{
			get { return __0x5441; }
		}

		public object[] SelectedObjects
		{
			get { return __0x5442; }
		}

		public TableLayoutPanel LayoutPanel
		{
			get { return __0x5443; }
		}

		public object AnyData
		{
			get { return __0x5444; }
		}

		public void Clear()
		{
			if( __0x5443 != null )
			{
				__0x5443.RowStyles.Clear();
				__0x5443.Controls.Clear();
			}

			
		}

		protected virtual void OnUpdate()
		{
			for( int __0x5446 = 0; __0x5446 < __0x5442.Length; __0x5446++ )
			{
				var __0x5447 = __0x5442[ __0x5446 ];

				
				foreach( var __0x5458 in __0x5447.GetType().GetCustomAttributes<EditorSettingsCellAttribute>( true ).Reverse() )
				{
					if( __0x5442.Length == 1 || __0x5458.MultiselectionSupport )
						AddCell( __0x5458.SettingsCellClass, true );
				}

				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				

				
				

				
				
				
				
				
				
				
				
				
				
			}

			
			
			

			
			
			
			

			

			
			
			foreach( Control __0x5459 in __0x5443.Controls )
			{
				SettingsCell_Properties __0x5448 = __0x5459 as SettingsCell_Properties;
				if( __0x5448 != null )
					__0x5448.UpdateData();
			}
		}

		
		public void PerformUpdate( bool clear )
		{
			if( clear )
				Clear();

			UpdateBegin?.Invoke( this );
			AllProviders_UpdateBegin?.Invoke( this );

			OnUpdate();

			

			
			{
				List<Tuple<Control, float>> __0x5449 = new List<Tuple<Control, float>>();
				foreach( Control __0x5460 in __0x5443.Controls )
				{
					float __0x5450 = 0;
					SettingsCell __0x5451 = __0x5460 as SettingsCell;
					if( __0x5451 != null )
						__0x5450 = __0x5451.CellsSortingPriority;
					__0x5449.Add( new Tuple<Control, float>( __0x5460, __0x5450 ) );
				}

				CollectionUtility.MergeSort( __0x5449, delegate ( Tuple<Control, float> __0x5468, Tuple<Control, float> __0x5469 )
				{
					if( __0x5468.Item2 < __0x5469.Item2 )
						return -1;
					if( __0x5468.Item2 > __0x5469.Item2 )
						return 1;
					return 0;
				} );

				for( int __0x5452 = 0; __0x5452 < __0x5449.Count; __0x5452++ )
				{
					var __0x5453 = __0x5449[ __0x5452 ];
					__0x5443.Controls.SetChildIndex( __0x5453.Item1, __0x5452 );
				}
			}

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			

			UpdateEnd?.Invoke( this );
			AllProviders_UpdateEnd?.Invoke( this );
		}

		public Control AddCell( Type cellClass, bool useIfAlreadyCreated )
		{
			if( useIfAlreadyCreated )
			{
				foreach( Control __0x5461 in __0x5443.Controls )
				{
					if( cellClass.IsAssignableFrom( __0x5461.GetType() ) )
						return __0x5461;

					if( typeof( SettingsCellProcedureUI ).IsAssignableFrom( cellClass ) )
					{
						var __0x5454 = __0x5461 as SettingsCellProcedureUI_Container;
						if( __0x5454 != null && cellClass.IsAssignableFrom( __0x5454.procedureUI.GetType() ) )
							return __0x5461;
					}
				}
			}

			SettingsCell __0x5455;
			if( typeof( SettingsCellProcedureUI ).IsAssignableFrom( cellClass ) )
			{
				var __0x5456 = (SettingsCellProcedureUI)Activator.CreateInstance( cellClass );
				var __0x5457 = new SettingsCellProcedureUI_Container();
				__0x5457.procedureUI = __0x5456;
				__0x5456.container = __0x5457;
				__0x5455 = __0x5457;
			}
			else
				__0x5455 = (SettingsCell)cellClass.GetConstructor( new Type[ 0 ] ).Invoke( new object[ 0 ] );

			AddCell( __0x5455 );
			return __0x5455;
		}

		public Control AddCell( SettingsCell cell )
		{
			cell.PerformInit();

			if( cell.SizeType != SizeType.AutoSize )
				cell.SetBounds( 0, 0, __0x5443.Width, __0x5443.Height );
			cell.Dock = DockStyle.Fill;

			if( cell.SizeType == SizeType.AutoSize )
				__0x5443.RowStyles.Add( new RowStyle() { SizeType = SizeType.AutoSize } );
			else
				__0x5443.RowStyles.Add( new RowStyle() { SizeType = SizeType.Percent, Height = 100 } );

			__0x5443.RowCount = __0x5443.RowStyles.Count;
			__0x5443.Controls.Add( cell );

			return cell;
		}

	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Settings Window.
	/// </summary>
	public partial class SettingsWindow : DockWindow
	{
		
		const int __0x5470 = 10;

		
		static SettingsWindow __0x5471;

		List<PanelData> __0x5472 = new List<PanelData>();

		PanelData __0x5473;

		bool __0x5474;

		bool __0x5475;
		DocumentWindow __0x5476;
		object[] __0x5477;

		

		public class PanelData : PanelDataWithTableLayout
		{
			

			public DocumentWindow documentWindow;
			public ESet<object> selectedObjectsSet;

			

			public new T GetControl<T>() where T : Control
			{
				return __0x5515<T>( layoutPanel );
			}

			private T __0x5515<T>( Control __0x5524 ) where T : Control
			{
				if( __0x5524 == null )
					return null;

				var __0x5478 = __0x5524.Controls.OfType<T>().FirstOrDefault();
				if( __0x5478 != null )
					return __0x5478;

				foreach( Control __0x5511 in __0x5524.Controls )
				{
					__0x5478 = __0x5515<T>( __0x5511 );
					if( __0x5478 != null )
						return __0x5478;
				}

				return null;
			}
		}

		

		public SettingsWindow()
		{
			if( __0x5471 != null )
				Log.Fatal( "SettingsWindow: Constructor: instance != null." );
			__0x5471 = this;

			__0x5523();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
				__0x5474 = ProjectSettings.Get.DisplayHierarchyOfObjectsInSettingsWindow;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x5516( object __0x5525, EventArgs __0x5526 )
		{
		}

		public static SettingsWindow Instance
		{
			get { return __0x5471; }
		}

		bool __0x5517( object[] __0x5527, object[] __0x5528 )
		{
			if( __0x5527.Length != __0x5528.Length )
				return false;
			for( int __0x5479 = 0; __0x5479 < __0x5527.Length; __0x5479++ )
			{
				if( __0x5527[ __0x5479 ] != __0x5528[ __0x5479 ] )
					return false;
			}
			return true;
		}

		PanelData __0x5518( object[] __0x5529 )
		{
			foreach( var __0x5512 in __0x5472 )
			{
				if( __0x5517( __0x5512.selectedObjects, __0x5529 ) )
					return __0x5512;
			}
			return null;
		}

		protected override void OnDestroy()
		{
			RemoveCachedPanels();

			base.OnDestroy();
		}

		PanelData __0x5519( DocumentWindow __0x5530, object[] __0x5531 )
		{
			PanelData __0x5480 = new PanelData();
			__0x5472.Add( __0x5480 );
			__0x5480.documentWindow = __0x5530;
			__0x5480.selectedObjects = __0x5531;
			__0x5480.selectedObjectsSet = new ESet<object>( __0x5480.selectedObjects );

			__0x5480.CreateAndAddPanel( this );

			
			
			
			
			
			

			
			if( __0x5480.selectedObjects != null && __0x5480.selectedObjects.Length != 0 )
			{
				
				

				try
				{
					
					

					
					

					
					

					

					
					

					
					

					


					var __0x5481 = new SettingsHeader_ObjectInfo();
					__0x5481.Dock = DockStyle.Fill;
					__0x5480.layoutPanel.Controls.Add( __0x5481 );

					bool __0x5482 = Array.TrueForAll( __0x5480.selectedObjects, __0x5532 => __0x5532 is Component );
					if( __0x5482 )
					{
						if( ProjectSettings.Get.DisplayHierarchyOfObjectsInSettingsWindow.Value )
						{
							

							var __0x5483 = new KryptonSplitContainer();
							__0x5483.SplitterWidth = 8;
							__0x5483.Orientation = Orientation.Horizontal;
							__0x5483.Dock = DockStyle.Fill;
							if( EditorAPI.DarkTheme )
								__0x5483.StateNormal.Back.Color1 = Color.FromArgb( 54, 54, 54 );
							__0x5480.layoutPanel.Controls.Add( __0x5483 );

							{
								var __0x5484 = new SettingsHeader_Components();
								
								__0x5484.Dock = DockStyle.Fill;
								__0x5483.Panel1.Controls.Add( __0x5484 );

								
								float __0x5485 = (float)__0x5484.CalculateHeight() / __0x5483.Height;
								float __0x5486 = 0.33f;
								if( __0x5485 < __0x5486 )
									__0x5483.SplitterDistance = __0x5484.CalculateHeight() + 25;
								else
									__0x5483.SplitterDistance = (int)( __0x5483.Height * __0x5486 );
							}

							{
								var __0x5487 = new SettingsLevel2Window();
								__0x5487.Dock = DockStyle.Fill;
								__0x5483.Panel2.Controls.Add( __0x5487 );
							}

							
							
							
							

							
							

							
						}
						else
						{
							

							var __0x5488 = new SettingsLevel2Window();
							__0x5488.Dock = DockStyle.Fill;
							__0x5480.layoutPanel.Controls.Add( __0x5488 );

							__0x5488.SelectObjects( __0x5480.documentWindow, __0x5480.selectedObjects );
						}
					}
					else
					{
						

						

					}

				}
				finally
				{
					
					

					
					
				}
			}

			return __0x5480;
		}

		void __0x5520( PanelData __0x5533 )
		{
			if( SelectedPanel == __0x5533 )
				SelectedPanel = null;

			var __0x5489 = __0x5533.layoutPanel;
			__0x5489.Parent.Controls.Remove( __0x5489 );
			__0x5489.Dispose();

			__0x5472.Remove( __0x5533 );
		}

		public void RemoveCachedPanels()
		{
			while( __0x5472.Count != 0 )
				__0x5520( __0x5472[ __0x5472.Count - 1 ] );
		}

		public void SelectObjects( DocumentWindow documentWindow, ICollection<object> objects )
		{
			if( EditorAPI.ClosingApplication )
				return;
			
			var __0x5490 = documentWindow?.Document;
			if( __0x5490 != null && __0x5490.Destroyed )
				return;

			if( objects == null )
				objects = new object[ 0 ];

			object[] __0x5491 = new object[ objects.Count ];
			objects.CopyTo( __0x5491, 0 );

			PanelData __0x5492 = __0x5518( __0x5491 );

			
			if( __0x5492 != null )
			{
				
				__0x5472.Remove( __0x5492 );
				__0x5472.Add( __0x5492 );
			}

			
			if( __0x5492 == null )
			{
				
				while( __0x5472.Count >= __0x5470 )
					__0x5520( __0x5472[ 0 ] );

				__0x5492 = __0x5519( documentWindow, __0x5491 );
			}

			
			if( __0x5492.selectedObjects != null && __0x5492.selectedObjects.Length != 0 )
			{
				bool __0x5493 = Array.TrueForAll( __0x5492.selectedObjects, __0x5534 => __0x5534 is Component );
				if( __0x5493 )
				{
					
					

					var __0x5494 = new List<Component>();
					foreach( var __0x5513 in __0x5492.selectedObjects )
						__0x5494.Add( (Component)__0x5513 );
					__0x5492.GetControl<SettingsHeader_Components>()?.SelectObjects( __0x5494.ToArray() );

					
				}
			}

			SelectedPanel = __0x5492;
		}

		[Browsable( false )]
		public PanelData SelectedPanel
		{
			get { return __0x5473; }
			set
			{
				if( __0x5473 == value )
					return;

				var __0x5495 = __0x5473;
				__0x5473 = value;

				if( __0x5473 != null )
				{
					__0x5473.layoutPanel.Enabled = __0x5522();
					__0x5473.layoutPanel.Visible = true;
					
				}

				if( __0x5495 != null )
				{
					__0x5495.layoutPanel.Visible = false;
					__0x5495.layoutPanel.Enabled = false;
				}
			}
		}

		
		[Browsable( false )]
		public object[] SelectedObjects
		{
			get
			{
				var __0x5496 = SelectedPanel;
				if( __0x5496 == null )
					return new object[ 0 ];
				return __0x5496.selectedObjects;
			}
		}

		
		[Browsable( false )]
		public ESet<object> SelectedObjectsSet
		{
			get
			{
				var __0x5497 = SelectedPanel;
				if( __0x5497 == null )
					return new ESet<object>();
				return __0x5497.selectedObjectsSet;
			}
		}

		
		public bool IsObjectSelected( object obj )
		{
			return SelectedObjectsSet.Contains( obj );
		}

		private void __0x5521( object __0x5535, EventArgs __0x5536 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( KryptonPage == null || KryptonPage.Parent == null )
				return;

			if( __0x5473 != null )
				__0x5473.layoutPanel.Enabled = __0x5522();

			
			if( __0x5474 != ProjectSettings.Get.DisplayHierarchyOfObjectsInSettingsWindow.Value )
			{
				__0x5474 = ProjectSettings.Get.DisplayHierarchyOfObjectsInSettingsWindow.Value;

				DocumentWindow __0x5498 = null;
				ESet<object> __0x5499 = null;
				if( SelectedPanel != null )
				{
					__0x5498 = SelectedPanel.documentWindow;
					__0x5499 = SelectedPanel.selectedObjectsSet;
				}

				RemoveCachedPanels();

				if( __0x5499 != null )
					SelectObjects( __0x5498, __0x5499 );
			}

			
			if( __0x5475 )
			{
				var __0x5500 = __0x5476;
				object[] __0x5501 = __0x5477;

				__0x5475 = false;
				__0x5476 = null;
				__0x5477 = null;

				RemoveCachedPanels();

				if( __0x5501 != null )
					SelectObjects( __0x5500, __0x5501 );
			}
		}

		bool __0x5522()
		{
			

			bool __0x5502 = false;

			if( SelectedPanel != null && SelectedPanel.selectedObjects != null && SelectedPanel.selectedObjects.Length != 0 )
			{
				var __0x5503 = SelectedPanel.selectedObjects;

				__0x5502 = true;

				foreach( object __0x5514 in __0x5503 )
				{
					Component __0x5504 = __0x5514 as Component;
					if( __0x5504 != null )
					{
						if( __0x5504.ParentRoot.HierarchyController != null )
						{
							var __0x5505 = __0x5504.ParentRoot.HierarchyController.CreatedByResource;
							if( __0x5505 != null )
							{
								if( EditorAPI.GetDocumentByResource( __0x5505 ) == null )
									__0x5502 = false;
							}
						}
						if( __0x5504.EditorReadOnlyInHierarchy )
							__0x5502 = false;
					}
				}
			}

			return __0x5502;
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x5506 = SelectedPanel;
			if( __0x5506 != null )
			{
				var __0x5507 = __0x5506.GetControl<SettingsLevel2Window>();
				if( __0x5507 != null )
				{
					var __0x5508 = __0x5507.SelectedPanel;
					if( __0x5508 != null )
						return new ObjectsInFocus( __0x5506.documentWindow, __0x5508.selectedObjects );
				}
			}
			return null;
		}

		protected override void OnKryptonPageParentChanged()
		{
			base.OnKryptonPageParentChanged();

			

			
			
			
			
			
			
			
			

			
			
			
		}
	}
}
namespace NeoAxis.Editor
{
    partial class SettingsWindow
    {
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5509 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5509 != null))
            {
                __0x5509.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5523()
        {
			this.__0x5509 = new System.ComponentModel.Container();
			this.__0x5510 = new System.Windows.Forms.Timer(this.__0x5509);
			this.SuspendLayout();
			
			
			
			this.__0x5510.Enabled = true;
			this.__0x5510.Interval = 10;
			this.__0x5510.Tick += new System.EventHandler(this.__0x5521);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "SettingsWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Settings";
			this.Load += new System.EventHandler(this.__0x5516);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x5510;
	}
}





namespace NeoAxis.Editor
{
	public partial class SolutionExplorer : DockWindow
	{
		public SolutionExplorer()
		{
			__0x5541();

			

			
			
			__0x5538.Init( null, null, null );
			__0x5538.Options.PanelMode = ContentBrowser.PanelModeEnum.Tree;
			__0x5538.Options.SplitterPosition = 3.0 / 5.0;
			__0x5538.Options.EditorButton = false;
			__0x5538.Options.SettingsButton = false;
			__0x5538.Options.DisplayPropertiesEditorSettingsButtons = false;

			
			

			__0x5539();
			EngineConfig.SaveEvent += __0x5540;
		}

		public override bool HideOnRemoving { get { return true; } }

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x5538; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			
			return new ObjectsInFocus( null, __0x5538.SelectedItems );
			
		}

		void __0x5539()
		{
			
			
			
			
			
			
			
		}

		void __0x5540()
		{
			

			
			
			

			
			
			
		}
	}
}


namespace NeoAxis.Editor
{
	partial class SolutionExplorer
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5537 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5537 != null ) )
			{
				__0x5537.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5541()
		{
			this.__0x5538 = new NeoAxis.Editor.ContentBrowser();
			this.SuspendLayout();
			
			
			
			this.__0x5538.CanSelectObjectSettings = false;
			this.__0x5538.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x5538.FilteringMode = null;
			this.__0x5538.Location = new System.Drawing.Point(0, 0);
			this.__0x5538.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.__0x5538.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5538.MultiSelect = true;
			this.__0x5538.Name = "resourcesBrowser1";
			this.__0x5538.ReadOnlyHierarchy = false;
			this.__0x5538.Size = new System.Drawing.Size(416, 596);
			this.__0x5538.TabIndex = 0;
			this.__0x5538.ThisIsSettingsWindow = false;
			this.__0x5538.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x5538.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.Controls.Add(this.__0x5538);
			this.Margin = new System.Windows.Forms.Padding(5, 4, 5, 4);
			this.Name = "SolutionExplorer";
			this.Size = new System.Drawing.Size(416, 596);
			this.WindowTitle = "Solution Explorer";
			this.ResumeLayout(false);

		}

		#endregion

		private ContentBrowser __0x5538;
	}
}





namespace NeoAxis.Editor
{
	public partial class SpecifyParametersForm : EngineForm
	{
		__0x5574 __0x5542 = new __0x5574();

		public delegate bool CheckDelegate( ref string __0x5568 );
		CheckDelegate __0x5543;

		public delegate bool OKDelegate( ref string __0x5569 );
		OKDelegate __0x5544;

		bool __0x5545;

		

		public class PropertyImpl : Metadata.Property
		{
			IList<Attribute> __0x5546;
			string __0x5547;
			object __0x5548;

			

			public PropertyImpl( SpecifyParametersForm owner, string name, Metadata.TypeInfo type, IList<Attribute> attributes, string category, object value )
				: base( owner, name, false, type, type, new Metadata.Parameter[ 0 ], false )
			{
				this.__0x5546 = attributes;
				this.__0x5547 = category;
				this.__0x5548 = value;
			}

			public IList<Attribute> Attributes
			{
				get { return __0x5546; }
				set { __0x5546 = value; }
			}

			public string Category
			{
				get { return __0x5547; }
				set { __0x5547 = value; }
			}

			public object Value
			{
				get { return __0x5548; }
				set { this.__0x5548 = value; }
			}

			protected override object[] OnGetCustomAttributes( Type attributeType, bool inherit )
			{
				List<object> __0x5549 = new List<object>();

				if( __0x5546 != null )
				{
					foreach( var __0x5560 in __0x5546 )
					{
						if( attributeType.IsAssignableFrom( __0x5560.GetType() ) )
							__0x5549.Add( __0x5560 );
					}
				}

				
				if( attributeType.IsAssignableFrom( typeof( CategoryAttribute ) ) )
				{
					if( !string.IsNullOrEmpty( __0x5547 ) )
						__0x5549.Add( new CategoryAttribute( __0x5547 ) );
				}

				return __0x5549.ToArray();
			}

			public override object GetValue( object obj, object[] index )
			{
				return __0x5548;
			}

			public override void SetValue( object obj, object value, object[] index )
			{
				bool __0x5550 = !Equals( this.__0x5548, value );

				this.__0x5548 = value;

				if( __0x5550 )
				{
					var __0x5551 = (SpecifyParametersForm)Owner;
					__0x5551.__0x5564();
				}
			}
		}

		

		class __0x5574 : Metadata.IMetadataProvider
		{
			public List<PropertyImpl> properties = new List<PropertyImpl>();

			

			public Metadata.TypeInfo BaseType
			{
				get { return MetadataManager.GetTypeOfNetType( GetType() ); }
			}

			public IEnumerable<Metadata.Member> MetadataGetMembers( Metadata.GetMembersContext context = null )
			{
				foreach( var __0x5561 in properties )
					yield return __0x5561;
			}

			public Metadata.Member MetadataGetMemberBySignature( string signature, Metadata.GetMembersContext context = null )
			{
				foreach( var __0x5562 in properties )
				{
					if( __0x5562.Signature == signature )
						return __0x5562;
				}
				return null;
			}
		}

		

		public SpecifyParametersForm( string caption, object optionalObjectProvider, CheckDelegate checkHandler = null, OKDelegate okHandler = null )
		{
			this.__0x5543 = checkHandler;
			this.__0x5544 = okHandler;

			__0x5567();

			if( optionalObjectProvider != null )
				__0x5559.SetData( null, new object[] { optionalObjectProvider } );
			else
				__0x5559.SetData( null, new object[] { __0x5542 } );

			if( string.IsNullOrEmpty( caption ) )
				Text = EngineInfo.NameWithVersion;
			else
				Text = caption;

			__0x5558.Text = "";

			EditorThemeUtility.ApplyDarkThemeToForm( this );
			__0x5558.ForeColor = Color.Red;
		}

		private void __0x5563( object __0x5570, EventArgs __0x5571 )
		{
			__0x5566();

			__0x5545 = true;

			
		}

		[Browsable( false )]
		public List<PropertyImpl> Properties
		{
			get
			{
				if( __0x5542 != null )
					return __0x5542.properties;
				else
					return new List<PropertyImpl>();
			}
		}

		[Browsable( false )]
		public CheckDelegate CheckHandler
		{
			get { return __0x5543; }
			set { __0x5543 = value; }
		}

		[Browsable( false )]
		public OKDelegate OKHandler
		{
			get { return __0x5544; }
			set { __0x5544 = value; }
		}

		public PropertyImpl AddProperty( string name, string category, object value, IList<Attribute> attributes = null )
		{
			var __0x5552 = new PropertyImpl( this, StringUtility.ToUpperFirstCharacter( name ), MetadataManager.GetTypeOfNetType( value.GetType() ), attributes, category, value );
			__0x5552.DefaultValueSpecified = true;
			__0x5552.DefaultValue = value;

			Properties.Add( __0x5552 );

			return __0x5552;
		}

		void __0x5564()
		{
			if( !__0x5545 )
				return;

			string __0x5553 = "";
			if( __0x5543 != null && !__0x5543( ref __0x5553 ) )
			{
				__0x5558.Text = __0x5553;
				__0x5556.Enabled = false;
			}
			else
			{
				__0x5558.Text = "";
				__0x5556.Enabled = true;
			}
		}

		private void __0x5565( object __0x5572, FormClosingEventArgs __0x5573 )
		{
			if( DialogResult == DialogResult.OK )
			{
				string __0x5554 = "";
				if( __0x5544 != null && !__0x5544( ref __0x5554 ) )
				{
					__0x5573.Cancel = true;
					__0x5558.Text = __0x5554;
					return;
				}
			}
		}

		void __0x5566()
		{
			__0x5557.Location = new Point( ClientSize.Width - __0x5557.Size.Width - DpiHelper.Default.ScaleValue( 12 ), ClientSize.Height - __0x5557.Size.Height - DpiHelper.Default.ScaleValue( 12 ) );
			__0x5556.Location = new Point( __0x5557.Location.X - __0x5556.Size.Width - DpiHelper.Default.ScaleValue( 8 ), __0x5557.Location.Y );
			__0x5558.Location = new Point( __0x5558.Location.X, __0x5556.Location.Y + DpiHelper.Default.ScaleValue( 3 ) );
			__0x5559.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 12 ) - __0x5559.Location.X, __0x5556.Location.Y - DpiHelper.Default.ScaleValue( 8 ) - __0x5559.Location.Y );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			if( IsHandleCreated )
				__0x5566();
		}

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
	partial class SpecifyParametersForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5555 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5555 != null ) )
			{
				__0x5555.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5567()
		{
			this.__0x5556 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5557 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5558 = new System.Windows.Forms.Label();
			this.__0x5559 = new NeoAxis.Editor.HierarchicalContainer();
			this.SuspendLayout();
			
			
			
			
			this.__0x5556.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x5556.Location = new System.Drawing.Point(283, 432);
			this.__0x5556.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5556.Name = "buttonOK";
			this.__0x5556.Size = new System.Drawing.Size(117, 32);
			this.__0x5556.TabIndex = 1;
			this.__0x5556.Values.Text = "OK";
			
			
			
			
			this.__0x5557.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x5557.Location = new System.Drawing.Point(409, 432);
			this.__0x5557.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5557.Name = "buttonCancel";
			this.__0x5557.Size = new System.Drawing.Size(117, 32);
			this.__0x5557.TabIndex = 2;
			this.__0x5557.Values.Text = "Cancel";
			
			
			
			
			this.__0x5558.AutoSize = true;
			this.__0x5558.ForeColor = System.Drawing.Color.Red;
			this.__0x5558.Location = new System.Drawing.Point(16, 411);
			this.__0x5558.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x5558.Name = "labelError";
			this.__0x5558.Size = new System.Drawing.Size(66, 17);
			this.__0x5558.TabIndex = 3;
			this.__0x5558.Text = "Error text";
			
			
			
			
   
   
			this.__0x5559.Location = new System.Drawing.Point(19, 16);
			this.__0x5559.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5559.Name = "hierarchicalContainer1";
			this.__0x5559.Size = new System.Drawing.Size(507, 392);
			this.__0x5559.SplitterPosition = 203;
			this.__0x5559.SplitterRatio = 0.4F;
			this.__0x5559.TabIndex = 4;
			
			
			
			this.AcceptButton = this.__0x5556;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.CancelButton = this.__0x5557;
			this.ClientSize = new System.Drawing.Size(542, 479);
			this.Controls.Add(this.__0x5559);
			this.Controls.Add(this.__0x5558);
			this.Controls.Add(this.__0x5557);
			this.Controls.Add(this.__0x5556);
			
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "SpecifyParametersForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.SizeGripStyle = System.Windows.Forms.SizeGripStyle.Hide;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Form";
			this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.__0x5565);
			this.Load += new System.EventHandler(this.__0x5563);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5556;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5557;
		private System.Windows.Forms.Label __0x5558;
		private HierarchicalContainer __0x5559;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents splash screen of the editor.
	/// </summary>
	public partial class SplashForm : Form
	{
		static SplashForm __0x5575;

		float __0x5576;
		bool __0x5577;

		public SplashForm()
		{
			__0x5575 = this;
			__0x5585();

			
			

			
			
			
		}

		public static SplashForm Instance
		{
			get { return __0x5575; }
		}

		public bool AllowClose
		{
			get { return __0x5577; }
			set
			{
				if( value && !__0x5577 )
					__0x5581.Start();

				__0x5577 = value;
			}
		}

		private void __0x5583( object __0x5586, EventArgs __0x5587 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5576 += (float)__0x5581.Interval / 1000.0f;

			bool __0x5578 = true;
			
			
			
			
			
			
			
			

			float __0x5579 = 1.0f;

			if( __0x5578 )
			{
				if( __0x5576 > 0 )
					__0x5579 = ( 1.0f - __0x5576 ) / 1;
				if( __0x5579 < 0 )
					__0x5579 = 0;
			}

			if( Opacity != __0x5579 )
				Opacity = __0x5579;

			if( __0x5576 > 1 )
			{
				__0x5581.Stop();
				Close();
			}
		}

		private void __0x5584( object __0x5588, FormClosedEventArgs __0x5589 )
		{
			__0x5575 = null;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class SplashForm
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5580 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5580 != null ) )
			{
				__0x5580.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5585()
		{
			this.__0x5580 = new System.ComponentModel.Container();
			this.__0x5581 = new System.Windows.Forms.Timer(this.__0x5580);
			this.__0x5582 = new System.Windows.Forms.Panel();
			this.SuspendLayout();
			
			
			
			this.__0x5581.Interval = 50;
			this.__0x5581.Tick += new System.EventHandler(this.__0x5583);
			
			
			
			this.__0x5582.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5582.BackColor = System.Drawing.Color.White;
			this.__0x5582.Location = new System.Drawing.Point(0, 337);
			this.__0x5582.Name = "panel1";
			this.__0x5582.Size = new System.Drawing.Size(609, 26);
			this.__0x5582.TabIndex = 0;
			
			
			
			this.BackColor = System.Drawing.Color.Black;
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Center;
			this.ClientSize = new System.Drawing.Size(609, 363);
			this.Controls.Add(this.__0x5582);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Name = "SplashForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
			this.Text = "Splash";
			this.TopMost = true;
			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.__0x5584);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x5581;
		private System.Windows.Forms.Panel __0x5582;
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Start Page.
	/// </summary>
	[RestoreDockWindowAfterEditorReload]
	public partial class StartPageWindow : DocumentWindow, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		string[] __0x5590 = new string[ 0 ];
		double __0x5591;

		static Image __0x5592;
		static Image __0x5593;

		

		public delegate void UpdateNewScenesDelegate( ref List<ContentBrowser.Item> __0x5672 );
		public static event UpdateNewScenesDelegate UpdateNewScenes;

		public StartPageWindow()
		{
			__0x5671();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			if( EditorAPI.DarkTheme )
				BackColor = Color.FromArgb( 40, 40, 40 );

			__0x5642.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x5642.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
			__0x5642.UseSelectedTreeNodeAsRootForList = false;
			__0x5642.Options.Breadcrumb = false;
			__0x5642.Options.TileImageSize = 90;

			
			try
			{
				var __0x5594 = new List<ContentBrowser.Item>();

				
				foreach( var __0x5653 in Component_Scene.NewObjectSettingsScene.GetTemplates() )
				{
					__0x5642.AddImageKey( __0x5653.Name, __0x5653.Preview );

					var __0x5595 = new ContentBrowserItem_Virtual( __0x5642, null, __0x5653.ToString() + " scene" );
					__0x5595.Tag = __0x5653;
					__0x5595.imageKey = __0x5653.Name;

					__0x5594.Add( __0x5595 );
				}

				
				{
					var __0x5596 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\UIControl.ui" );
					if( File.Exists( __0x5596 ) )
					{
						var __0x5597 = Path.GetFileNameWithoutExtension( __0x5596 );

						if( __0x5592 == null )
						{
							var __0x5598 = Path.Combine( Path.GetDirectoryName( __0x5596 ), __0x5597 + ".png" );
							__0x5592 = File.Exists( __0x5598 ) ? Image.FromFile( __0x5598 ) : null;
						}

						if( __0x5592 != null )
							__0x5642.AddImageKey( __0x5597, __0x5592 );

						var __0x5599 = new ContentBrowserItem_Virtual( __0x5642, null, "UI Control" );
						__0x5599.Tag = "UIControl";
						if( __0x5592 != null )
							__0x5599.imageKey = __0x5597;

						__0x5594.Add( __0x5599 );
					}
				}

				
				{
					var __0x5600 = "SelectResource";

					if( __0x5593 == null )
					{
						var __0x5601 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\Resource.png" );
						__0x5593 = File.Exists( __0x5601 ) ? Image.FromFile( __0x5601 ) : null;
					}

					if( __0x5593 != null )
						__0x5642.AddImageKey( __0x5600, __0x5593 );

					var __0x5602 = new ContentBrowserItem_Virtual( __0x5642, null, "Select type" );
					__0x5602.Tag = "Resource";
					if( __0x5593 != null )
						__0x5602.imageKey = __0x5600;

					__0x5594.Add( __0x5602 );
				}

				
				
				
				
				
				

				

				
				

				
				
				
				
				
				

				

				
				

				UpdateNewScenes?.Invoke( ref __0x5594 );

				if( __0x5594.Count != 0 )
				{
					__0x5642.SetData( __0x5594, false );
					__0x5642.SelectItems( new ContentBrowser.Item[] { __0x5594[ 0 ] } );
				}
			}
			catch( Exception exc )
			{
				Log.Warning( exc.Message );
				
			}

			__0x5642.ItemAfterChoose += __0x5663;


			__0x5646.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x5646.Options.ListMode = ContentBrowser.ListModeEnum.List;
			__0x5646.UseSelectedTreeNodeAsRootForList = false;
			__0x5646.Options.Breadcrumb = false;

			var __0x5603 = EditorAPI.DPIScale >= 1.25f ? 13 : 16;

			__0x5646.Options.ListImageSize = __0x5603;
			__0x5646.Options.ListColumnWidth = 10000;
			__0x5646.ListViewModeOverride = new EngineListView.DefaultListMode( __0x5646.GetListView(), __0x5603 );

			__0x5646.PreloadResourceOnSelection = false;

			__0x5668();

			WindowTitle = EditorLocalization.Translate( "StartPageWindow", WindowTitle );
		}

		private void __0x5655( object __0x5673, EventArgs __0x5674 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			EditorLocalization.TranslateForm( "StartPageWindow", this );

			__0x5638.Start();

			__0x5656();

			if( EditorActions.GetByName( "Store" ) != null && EditorActions.GetByName( "Store" ).CompletelyDisabled )
				__0x5648.Visible = false;
		}

		void __0x5656()
		{
			__0x5643.Enabled = __0x5642.SelectedItems.Length == 1;
			__0x5647.Enabled = __0x5646.SelectedItems.Length == 1;

			__0x5644.Enabled = ProjectSettings.Get.Theme.Value != Component_ProjectSettings.ThemeEnum.Light;
			__0x5645.Enabled = ProjectSettings.Get.Theme.Value != Component_ProjectSettings.ThemeEnum.Dark;

			__0x5651.Checked = EditorForm.Instance.kryptonRibbon.MinimizedMode;
			__0x5652.Checked = EditorForm.Instance.kryptonRibbon.QATLocation == ComponentFactory.Krypton.Ribbon.QATLocation.Below;
		}

		private void __0x5657( object __0x5675, EventArgs __0x5676 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x5656();

			var __0x5604 = Time.Current;
			if( __0x5604 > __0x5591 + 1.0 )
			{
				__0x5591 = __0x5604;
				__0x5668();
			}
		}

		private void __0x5658( object __0x5677, EventArgs __0x5678 )
		{
			EditorAPI.OpenStoresWindow();
			
		}

		private void __0x5659( object __0x5679, EventArgs __0x5680 )
		{
			if( EditorMessageBox.ShowQuestion( "Set the light theme and restart the editor to apply changes?", EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			ProjectSettings.Get.Theme = Component_ProjectSettings.ThemeEnum.Light;
			ProjectSettings.SaveToFileAndUpdate();
			EditorAPI.BeginRestartApplication();
		}

		private void __0x5660( object __0x5681, EventArgs __0x5682 )
		{
			if( EditorMessageBox.ShowQuestion( "Set the dark theme and restart the editor to apply changes?", EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			ProjectSettings.Get.Theme = Component_ProjectSettings.ThemeEnum.Dark;
			ProjectSettings.SaveToFileAndUpdate();
			EditorAPI.BeginRestartApplication();
		}

		private void __0x5661( object __0x5683, EventArgs __0x5684 )
		{
			if( __0x5646.SelectedItems.Length == 1 )
			{
				var __0x5605 = __0x5646.SelectedItems[ 0 ];
				var __0x5606 = __0x5605.Tag as string;

				if( !string.IsNullOrEmpty( __0x5606 ) )
					EditorAPI.OpenFileAsDocument( VirtualPathUtility.GetRealPathByVirtual( __0x5606 ), true, true );
			}
		}

		private void __0x5662( object __0x5685, EventArgs __0x5686 )
		{
			if( __0x5642.SelectedItems.Length == 1 )
			{
				var __0x5607 = __0x5642.SelectedItems[ 0 ];
				__0x5664( __0x5607 );
			}
		}

		private void __0x5663( ContentBrowser __0x5687, ContentBrowser.Item __0x5688, ref bool __0x5689 )
		{
			if( __0x5688 != null )
				__0x5664( __0x5688 );
		}

		void __0x5664( ContentBrowser.Item __0x5690 )
		{
			if( __0x5690.Tag as Component_Scene.NewObjectSettingsScene.TemplateClass != null )
				__0x5665( __0x5690 );
			else if( __0x5690.Tag as string != null && __0x5690.Tag as string == "UIControl" )
				__0x5666();
			else
				__0x5667();
		}

		void __0x5665( ContentBrowser.Item __0x5691 )
		{
			try
			{
				var __0x5608 = VirtualDirectory.Exists( "Scenes" ) ? @"Scenes\" : "";

				string __0x5609 = null;
				for( int __0x5610 = 1; ; __0x5610++ )
				{
					string __0x5611 = __0x5608 + string.Format( @"New{0}.scene", __0x5610 > 1 ? __0x5610.ToString() : "" );
					if( !VirtualFile.Exists( __0x5611 ) )
					{
						__0x5609 = __0x5611;
						break;
					}
				}

				if( !string.IsNullOrEmpty( __0x5609 ) )
				{
					var __0x5612 = VirtualPathUtility.GetRealPathByVirtual( __0x5609 );

					var __0x5613 = (Component_Scene.NewObjectSettingsScene.TemplateClass)__0x5691.Tag;
					string __0x5614 = __0x5613.Name + ".scene";
					var __0x5615 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\" + __0x5614 );

					

					var __0x5616 = File.ReadAllText( __0x5615 );

					var __0x5617 = Path.GetDirectoryName( __0x5612 );
					if( !Directory.Exists( __0x5617 ) )
						Directory.CreateDirectory( __0x5617 );

					File.WriteAllText( __0x5612, __0x5616 );

					
					var __0x5618 = __0x5615 + "_Files";
					if( Directory.Exists( __0x5618 ) )
					{
						var __0x5619 = __0x5612 + "_Files";
						IOUtility.CopyDirectory( __0x5618, __0x5619 );
					}

					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x5612 } );
					EditorAPI.OpenFileAsDocument( __0x5612, true, true );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				
				return;
			}
		}

		void __0x5666()
		{
			try
			{
				var __0x5620 = VirtualDirectory.Exists( "UI" ) ? @"UI\" : "";

				string __0x5621 = null;
				for( int __0x5622 = 1; ; __0x5622++ )
				{
					string __0x5623 = __0x5620 + string.Format( @"New{0}.ui", __0x5622 > 1 ? __0x5622.ToString() : "" );
					if( !VirtualFile.Exists( __0x5623 ) )
					{
						__0x5621 = __0x5623;
						break;
					}
				}

				if( !string.IsNullOrEmpty( __0x5621 ) )
				{
					var __0x5624 = VirtualPathUtility.GetRealPathByVirtual( __0x5621 );

					var __0x5625 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\UIControl.ui" );

					var __0x5626 = VirtualFile.ReadAllText( __0x5625 );

					var __0x5627 = Path.GetDirectoryName( __0x5624 );
					if( !Directory.Exists( __0x5627 ) )
						Directory.CreateDirectory( __0x5627 );

					File.WriteAllText( __0x5624, __0x5626 );

					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x5624 } );
					EditorAPI.OpenFileAsDocument( __0x5624, true, true );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				
				return;
			}
		}

		void __0x5667()
		{
			var __0x5628 = new NewObjectWindow.CreationDataClass();
			EditorAPI.OpenNewObjectWindow( __0x5628 );
		}

		void __0x5668()
		{
			string[] __0x5629 = new string[ 0 ];
			try
			{
				__0x5629 = VirtualDirectory.GetFiles( "", "*.scene", SearchOption.AllDirectories );

				CollectionUtility.MergeSort( __0x5629, delegate ( string __0x5692, string __0x5693 )
				{
					var __0x5630 = __0x5692.Replace( "\\", " \\" );
					var __0x5631 = __0x5693.Replace( "\\", " \\" );
					return string.Compare( __0x5630, __0x5631 );
				} );
			}
			catch { }

			bool __0x5632 = !__0x5629.SequenceEqual( __0x5590 );
			if( !__0x5632 )
				return;

			__0x5590 = __0x5629;

			
			try
			{
				var __0x5633 = new List<ContentBrowser.Item>();

				foreach( var __0x5654 in __0x5590 )
				{
					if( !__0x5654.Contains( @"Base\Tools\NewResourceTemplates" ) )
					{
						var __0x5634 = VirtualPathUtility.GetRealPathByVirtual( __0x5654 );

						var __0x5635 = new ContentBrowserItem_File( __0x5646, null, __0x5634, false );
						__0x5635.SetText( __0x5654 );
						__0x5635.Tag = __0x5654;
						__0x5635.imageKey = "Scene";

						__0x5633.Add( __0x5635 );
					}
				}

				__0x5646.SetData( __0x5633, false );
				if( __0x5633.Count != 0 )
					__0x5646.SelectItems( new ContentBrowser.Item[] { __0x5633[ 0 ] } );
			}
			catch( Exception exc )
			{
				Log.Warning( exc.Message );
				
			}

		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x5636 = base.CreateParams;
				__0x5636.ExStyle |= 0x02000000;
				return __0x5636;
			}
		}

		private void __0x5669( object __0x5694, EventArgs __0x5695 )
		{
			EditorForm.Instance.kryptonRibbon.MinimizedMode = __0x5651.Checked;
		}

		private void __0x5670( object __0x5696, EventArgs __0x5697 )
		{
			EditorForm.Instance.kryptonRibbon.QATLocation = __0x5652.Checked ? ComponentFactory.Krypton.Ribbon.QATLocation.Below : ComponentFactory.Krypton.Ribbon.QATLocation.Above;
		}

		
		
		
		

		
		
		
		
	}
}

namespace NeoAxis.Editor
{
    partial class StartPageWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x5637 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x5637 != null))
            {
                __0x5637.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x5671()
        {
			this.__0x5637 = new System.ComponentModel.Container();
			this.__0x5638 = new System.Windows.Forms.Timer(this.__0x5637);
			this.__0x5639 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5640 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5641 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5642 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5643 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5644 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5645 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5646 = new NeoAxis.Editor.ContentBrowser();
			this.__0x5647 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5648 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			
			
			this.__0x5649 = new NeoAxis.Editor.EngineToolTip( this.__0x5637);
			this.__0x5650 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5651 = new ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.__0x5652 = new ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.SuspendLayout();
			
			
			
			this.__0x5638.Tick += new System.EventHandler(this.__0x5657);
			
			
			
			this.__0x5639.Location = new System.Drawing.Point(23, 182);
			this.__0x5639.Name = "kryptonLabel1";
			this.__0x5639.Size = new System.Drawing.Size(88, 20);
			this.__0x5639.TabIndex = 0;
			this.__0x5639.Values.Text = "New resource:";
			
			
			
			this.__0x5640.Location = new System.Drawing.Point(23, 23);
			this.__0x5640.Name = "kryptonLabel2";
			this.__0x5640.Size = new System.Drawing.Size(101, 20);
			this.__0x5640.TabIndex = 0;
			this.__0x5640.Values.Text = "Select theme:";
			
			
			
			this.__0x5641.Location = new System.Drawing.Point(23, 487);
			this.__0x5641.Name = "kryptonLabel3";
			this.__0x5641.Size = new System.Drawing.Size(96, 20);
			this.__0x5641.TabIndex = 0;
			this.__0x5641.Values.Text = "Open scene:";
			
			
			
			this.__0x5642.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5642.CanSelectObjectSettings = false;
			this.__0x5642.FilteringMode = null;
			this.__0x5642.ListViewModeOverride = null;
			this.__0x5642.Location = new System.Drawing.Point(26, 207);
			this.__0x5642.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5642.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5642.Name = "contentBrowserNewScene";
			this.__0x5642.ReadOnlyHierarchy = false;
			this.__0x5642.ShowToolBar = false;
			this.__0x5642.Size = new System.Drawing.Size(901, 213);
			this.__0x5642.TabIndex = 5;
			this.__0x5642.ThisIsSettingsWindow = false;
			
			
			
			this.__0x5643.Location = new System.Drawing.Point(26, 426);
			this.__0x5643.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5643.Name = "buttonCreateScene";
			this.__0x5643.Size = new System.Drawing.Size(117, 32);
			this.__0x5643.TabIndex = 3;
			this.__0x5643.Values.Text = "Create";
			this.__0x5643.Click += new System.EventHandler(this.__0x5662);
			
			
			
			this.__0x5644.Location = new System.Drawing.Point(26, 50);
			this.__0x5644.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5644.Name = "kryptonButtonLightTheme";
			this.__0x5644.Size = new System.Drawing.Size(140, 110);
			this.__0x5644.StateCommon.Back.Image = global::NeoAxis.Properties.Resources.LightThemePreview;
			this.__0x5644.StateCommon.Back.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x5644.TabIndex = 0;
			this.__0x5649.SetToolTip(this.__0x5644, "Set the light theme.");
			this.__0x5644.Values.Text = "";
			this.__0x5644.Click += new System.EventHandler(this.__0x5659);
			
			
			
			this.__0x5645.Location = new System.Drawing.Point(174, 50);
			this.__0x5645.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5645.Name = "kryptonButtonDarkTheme";
			this.__0x5645.Size = new System.Drawing.Size(140, 110);
			this.__0x5645.StateCommon.Back.Image = global::NeoAxis.Properties.Resources.DarkThemePreview;
			this.__0x5645.StateCommon.Back.ImageStyle = ComponentFactory.Krypton.Toolkit.PaletteImageStyle.Inherit;
			this.__0x5645.TabIndex = 1;
			this.__0x5649.SetToolTip(this.__0x5645, "Set the dark theme.");
			this.__0x5645.Values.Text = "";
			this.__0x5645.Click += new System.EventHandler(this.__0x5660);
			
			
			
			this.__0x5646.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5646.CanSelectObjectSettings = false;
			this.__0x5646.FilteringMode = null;
			this.__0x5646.ListViewModeOverride = null;
			this.__0x5646.Location = new System.Drawing.Point(26, 512);
			this.__0x5646.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x5646.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.__0x5646.Name = "contentBrowserOpenScene";
			this.__0x5646.ReadOnlyHierarchy = false;
			this.__0x5646.ShowToolBar = false;
			this.__0x5646.Size = new System.Drawing.Size(901, 217);
			this.__0x5646.TabIndex = 6;
			this.__0x5646.ThisIsSettingsWindow = false;
			
			
			
			this.__0x5647.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5647.Location = new System.Drawing.Point(26, 735);
			this.__0x5647.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5647.Name = "kryptonButtonOpenScene";
			this.__0x5647.Size = new System.Drawing.Size(117, 32);
			this.__0x5647.TabIndex = 7;
			this.__0x5647.Values.Text = "Open Scene";
			this.__0x5647.Click += new System.EventHandler(this.__0x5661);
			
			
			
			this.__0x5648.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5648.Location = new System.Drawing.Point(780, 23);
			this.__0x5648.Margin = new System.Windows.Forms.Padding(4);
			this.__0x5648.Name = "kryptonButtonOpenStore";
			this.__0x5648.Size = new System.Drawing.Size(147, 32);
			this.__0x5648.TabIndex = 4;
			this.__0x5648.Values.Text = "Get Content";
			this.__0x5648.Click += new System.EventHandler(this.__0x5658);

			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			this.__0x5650.Location = new System.Drawing.Point(349, 23);
			this.__0x5650.Name = "kryptonLabel4";
			this.__0x5650.Size = new System.Drawing.Size(142, 20);
			this.__0x5650.TabIndex = 7;
			this.__0x5650.Values.Text = "Editor configuration:";
			
			
			
			this.__0x5651.Location = new System.Drawing.Point(355, 50);
			this.__0x5651.Name = "kryptonCheckBoxMinimizeRibbon";
			this.__0x5651.Size = new System.Drawing.Size(158, 20);
			this.__0x5651.TabIndex = 2;
			this.__0x5651.Values.Text = "Minimize the Ribbon";
			this.__0x5651.CheckedChanged += new System.EventHandler(this.__0x5669);
			
			
			
			this.__0x5652.Location = new System.Drawing.Point(355, 76);
			this.__0x5652.Name = "kryptonCheckBoxShowQATBelowRibbon";
			this.__0x5652.Size = new System.Drawing.Size(320, 20);
			this.__0x5652.TabIndex = 3;
			this.__0x5652.Values.Text = "Show Quick Access Toolbar below the Ribbon";
			this.__0x5652.CheckedChanged += new System.EventHandler(this.__0x5670);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x5652);
			this.Controls.Add(this.__0x5651);
			this.Controls.Add(this.__0x5650);
			this.Controls.Add(this.__0x5648);
			
			
			this.Controls.Add(this.__0x5647);
			this.Controls.Add(this.__0x5646);
			this.Controls.Add(this.__0x5645);
			this.Controls.Add(this.__0x5644);
			this.Controls.Add(this.__0x5643);
			this.Controls.Add(this.__0x5642);
			this.Controls.Add(this.__0x5641);
			this.Controls.Add(this.__0x5640);
			this.Controls.Add(this.__0x5639);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "StartPageWindow";
			this.Size = new System.Drawing.Size(957, 789);
			this.WindowTitle = "Start Page";
			this.Load += new System.EventHandler(this.__0x5655);
			this.ResumeLayout(false);
			this.PerformLayout();

        }

		#endregion
		private System.Windows.Forms.Timer __0x5638;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5639;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5640;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5641;
		private ContentBrowser __0x5642;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5643;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5644;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5645;
		private ContentBrowser __0x5646;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5647;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5648;
		
		
		private NeoAxis.Editor.EngineToolTip __0x5649;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5650;
		private ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5651;
		private ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5652;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Tips Window.
	/// </summary>
	public partial class TipsWindow : DocumentWindowWithViewport
	{
		UIWebBrowser __0x5698;
		UIControl __0x5699;

		List<string> __0x5700;
		int __0x5701;

		bool __0x5702;

		bool __0x5703 = true;
		

		bool __0x5704 = true;
		bool __0x5705;
		int __0x5706;

		

		public TipsWindow()
		{
			__0x5743();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			WindowTitle = EditorLocalization.Translate( "TipsWindow", WindowTitle );
			EditorLocalization.TranslateForm( "TipsWindow", __0x5730 );

			BackColor = Color.FromArgb( 54, 54, 54 );
			if( EditorAPI.DarkTheme )
				__0x5730.BackColor = BackColor;
			else
				__0x5730.BackColor = Color.FromArgb( 240, 240, 240 );

			__0x5724.Checked = EditorSettingsSerialization.ShowTipsAsStartup;
		}

		private void __0x5732( object __0x5744, EventArgs __0x5745 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			ViewportControl.Dock = __0x5729.Dock;
			ViewportControl.Anchor = __0x5729.Anchor;
			ViewportControl.Location = __0x5729.Location;
			ViewportControl.Size = __0x5729.Size;

			__0x5723.Start();

			__0x5700 = __0x5734();
			__0x5733( 0 );

			__0x5702 = true;
		}

		void __0x5733( int __0x5746 )
		{
			if( __0x5746 < 0 || __0x5746 >= __0x5700.Count )
				return;

			__0x5701 = __0x5746;
			var __0x5707 = __0x5700[ __0x5746 ];

			if( __0x5698 != null )
				__0x5698.StartFile = __0x5707;

			__0x5728.Text = $"{__0x5746 + 1}/{__0x5700.Count}";
		}

		List<string> __0x5734()
		{
			var __0x5708 = new List<string>();

			var __0x5709 = Path.Combine( VirtualFileSystem.Directories.EngineInternal, "Tips" );

			try
			{
				var __0x5710 = Directory.GetFiles( __0x5709, "*.html" );

				for( int __0x5711 = 1; ; __0x5711++ )
				{
					string __0x5712 = "";

					foreach( var __0x5731 in __0x5710 )
					{
						var __0x5713 = Path.GetFileName( __0x5731 );

						if( __0x5713.Length > 3 && __0x5713[ 2 ] == '_' )
						{
							var __0x5714 = __0x5713.Substring( 0, 2 );
							if( int.TryParse( __0x5714, out var number ) )
							{
								if( number == __0x5711 )
								{
									__0x5712 = __0x5731;
									break;
								}
							}
						}
					}

					if( string.IsNullOrEmpty( __0x5712 ) )
						break;

					if( EditorLocalization.Initialized )
					{
						try
						{
							var __0x5715 = Path.GetDirectoryName( __0x5712 );
							var __0x5716 = Path.GetFileName( __0x5712 );
							var __0x5717 = Path.Combine( __0x5715, EditorLocalization.Language + "_" + __0x5716 );
							if( File.Exists( __0x5717 ) )
								__0x5712 = __0x5717;
						}
						catch { }
					}

					__0x5708.Add( __0x5712 );
				}
			}
			catch { }

			return __0x5708;
		}

		private void __0x5735( object __0x5747, EventArgs __0x5748 )
		{
			Close();
		}

		private void __0x5736( object __0x5749, EventArgs __0x5750 )
		{
			int __0x5718 = __0x5701 + 1;
			if( __0x5718 >= __0x5700.Count )
				__0x5718 = 0;
			__0x5733( __0x5718 );
		}

		private void __0x5737( object __0x5751, EventArgs __0x5752 )
		{
			int __0x5719 = __0x5701 - 1;
			if( __0x5719 < 0 )
				__0x5719 = __0x5700.Count - 1;
			__0x5733( __0x5719 );
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			var __0x5720 = sender.Viewport.UIContainer;
			__0x5720.AfterRenderUIWithChildren += __0x5740;

			__0x5698 = __0x5720.CreateComponent<UIWebBrowser>( enabled: false );
			__0x5698.LoadStart += __0x5738;
			__0x5698.LoadEnd += __0x5739;
			__0x5733( __0x5701 );
			__0x5698.Enabled = true;

			__0x5699 = __0x5720.CreateComponent<UIControl>( enabled: false );
			__0x5699.Margin = new UIMeasureValueRectangle( UIMeasure.Screen, Rectangle.Zero );
			__0x5699.Size = new UIMeasureValueVector2( UIMeasure.Screen, Vector2.One );
			__0x5699.BackgroundColor = new ColorValue( 54.0 / 255.0, 54.0 / 255.0, 54.0 / 255.0 );
			__0x5699.Enabled = true;

			
			
		}

		private void __0x5738( UIWebBrowser __0x5753, Xilium.CefGlue.CefFrame __0x5754 )
		{
			if( __0x5704 )
				__0x5705 = false;
		}

		private void __0x5739( UIWebBrowser __0x5755, Xilium.CefGlue.CefFrame __0x5756, int __0x5757 )
		{
			if( __0x5704 )
			{
				__0x5705 = true;
				__0x5706 = 10;

				__0x5704 = false;
			}
		}

		private void __0x5740( UIControl __0x5758, CanvasRenderer __0x5759 )
		{
			if( __0x5705 && __0x5706 > 0 )
				__0x5706--;

			if( !__0x5705 || __0x5706 != 0 )
				__0x5759.AddQuad( new Rectangle( 0, 0, 1, 1 ), new ColorValue( 54.0 / 255.0, 54.0 / 255.0, 54.0 / 255.0 ) );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x5706 = 10;
			__0x5703 = true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			
			

			var __0x5721 = __0x5703;
			if( __0x5699 != null )
				__0x5699.Visible = __0x5721;

			__0x5703 = false;

			viewport.UIContainer.PerformRenderUI( viewport.CanvasRenderer );
		}

		private void __0x5741( object __0x5760, EventArgs __0x5761 )
		{
			if( __0x5702 )
				EditorSettingsSerialization.ShowTipsAsStartup = __0x5724.Checked;
		}

		private void __0x5742( object __0x5762, EventArgs __0x5763 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

		}
	}
}

namespace NeoAxis.Editor
{
	partial class TipsWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x5722 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x5722 != null ) )
			{
				__0x5722.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x5743()
		{
			this.__0x5722 = new System.ComponentModel.Container();
			this.__0x5723 = new System.Windows.Forms.Timer(this.__0x5722);
			this.__0x5724 = new ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.__0x5725 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5726 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5727 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x5728 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x5729 = new System.Windows.Forms.Panel();
			this.__0x5730 = new System.Windows.Forms.Panel();
			this.__0x5730.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x5723.Tick += new System.EventHandler(this.__0x5742);
			
			
			
			this.__0x5724.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.__0x5724.Location = new System.Drawing.Point(14, 18);
			this.__0x5724.Name = "kryptonCheckBoxShowTipsAtStartup";
			this.__0x5724.Size = new System.Drawing.Size(155, 20);
			this.__0x5724.TabIndex = 0;
			this.__0x5724.Values.Text = "Show tips at startup";
			this.__0x5724.CheckedChanged += new System.EventHandler(this.__0x5741);
			
			
			
			this.__0x5725.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5725.Location = new System.Drawing.Point(384, 12);
			this.__0x5725.Name = "kryptonButtonPrevious";
			this.__0x5725.Size = new System.Drawing.Size(117, 32);
			this.__0x5725.TabIndex = 1;
			this.__0x5725.Values.Text = "Previous";
			this.__0x5725.Click += new System.EventHandler(this.__0x5737);
			
			
			
			this.__0x5726.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5726.Location = new System.Drawing.Point(507, 12);
			this.__0x5726.Name = "kryptonButtonNext";
			this.__0x5726.Size = new System.Drawing.Size(117, 32);
			this.__0x5726.TabIndex = 2;
			this.__0x5726.Values.Text = "Next";
			this.__0x5726.Click += new System.EventHandler(this.__0x5736);
			
			
			
			this.__0x5727.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5727.Location = new System.Drawing.Point(630, 12);
			this.__0x5727.Name = "kryptonButtonClose";
			this.__0x5727.Size = new System.Drawing.Size(117, 32);
			this.__0x5727.TabIndex = 3;
			this.__0x5727.Values.Text = "Close";
			this.__0x5727.Click += new System.EventHandler(this.__0x5735);
			
			
			
			this.__0x5728.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5728.Location = new System.Drawing.Point(303, 14);
			this.__0x5728.Name = "tipNumberLabel";
			this.__0x5728.Size = new System.Drawing.Size(69, 28);
			this.__0x5728.StateCommon.ShortText.Font = new System.Drawing.Font("Microsoft Sans Serif", 12F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x5728.TabIndex = 7;
			this.__0x5728.Values.Text = "10/10";
			
			
			
			this.__0x5729.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5729.Location = new System.Drawing.Point(12, 42);
			this.__0x5729.Name = "panel1";
			this.__0x5729.Size = new System.Drawing.Size(734, 439);
			this.__0x5729.TabIndex = 8;
			this.__0x5729.Visible = false;
			
			
			
			this.__0x5730.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x5730.Controls.Add(this.__0x5724);
			this.__0x5730.Controls.Add(this.__0x5725);
			this.__0x5730.Controls.Add(this.__0x5728);
			this.__0x5730.Controls.Add(this.__0x5726);
			this.__0x5730.Controls.Add(this.__0x5727);
			this.__0x5730.Location = new System.Drawing.Point(0, 480);
			this.__0x5730.Name = "panel2";
			this.__0x5730.Size = new System.Drawing.Size(759, 56);
			this.__0x5730.TabIndex = 9;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(7F, 15F);
			this.Controls.Add(this.__0x5730);
			this.Controls.Add(this.__0x5729);
			
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "TipsWindow";
			this.Size = new System.Drawing.Size(759, 535);
			this.WindowTitle = "Tips";
			this.Load += new System.EventHandler(this.__0x5732);
			this.Controls.SetChildIndex(this.__0x5729, 0);
			this.Controls.SetChildIndex(this.__0x5730, 0);
			this.__0x5730.ResumeLayout(false);
			this.__0x5730.PerformLayout();
			this.ResumeLayout(false);

		}

		#endregion
		private System.Windows.Forms.Timer __0x5723;
		private ComponentFactory.Krypton.Toolkit.KryptonCheckBox __0x5724;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5725;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5726;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x5727;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x5728;
		private System.Windows.Forms.Panel __0x5729;
		private System.Windows.Forms.Panel __0x5730;
	}
}





namespace NeoAxis.Editor
{
	[DesignerCategory( "code" )]
	[ToolStripItemDesignerAvailability( ToolStripItemDesignerAvailability.ToolStrip | ToolStripItemDesignerAvailability.StatusStrip )]
	class ToolStripBreadCrumbHost : ToolStripControlHost
	{
		public KryptonBreadCrumb BreadCrumb
		{
			get { return Control as KryptonBreadCrumb; }
		}

		public ToolStripBreadCrumbHost()
			: base( __0x5769() )
		{
		}

		static Control __0x5769()
		{
			KryptonBreadCrumb __0x5764 = new KryptonBreadCrumb();
			__0x5764.StateCommon.Border.Draw = InheritBool.False;

			__0x5764.StateCommon.BreadCrumb.Content.Padding = new Padding( 0 );

			
			
			
			
			
			
			
			
			

			

			return __0x5764;
		}

		public override Size GetPreferredSize( Size constrainingSize )
		{
			if( DesignMode || IsOnOverflow || Owner.Orientation == Orientation.Vertical )
				return DefaultSize;

			int __0x5765 = Owner.DisplayRectangle.Width;

			if( Owner.OverflowButton.Visible )
				__0x5765 = __0x5765 - Owner.OverflowButton.Width - Owner.OverflowButton.Margin.Horizontal;

			int __0x5766 = 0;
			foreach( ToolStripItem __0x5768 in Owner.Items )
			{
				if( __0x5768.IsOnOverflow ) continue;

				if( __0x5768 is ToolStripBreadCrumbHost )
				{
					__0x5766++;
					__0x5765 -= __0x5768.Margin.Horizontal;
				}
				else
				{
					__0x5765 = __0x5765 - __0x5768.Width - __0x5768.Margin.Horizontal;
				}
			}

			if( __0x5766 > 1 )
				__0x5765 /= __0x5766;

			
			
			
			

			Size __0x5767 = base.GetPreferredSize( constrainingSize );
			__0x5767.Width = __0x5765;
			return __0x5767;
		}
	}
}





namespace NeoAxis.Editor
{
	[DesignerCategory( "code" )]
	[ToolStripItemDesignerAvailability( ToolStripItemDesignerAvailability.ToolStrip | ToolStripItemDesignerAvailability.StatusStrip )]
	class ToolStripTextBoxHost : ToolStripControlHost
	{
		public EngineTextBox TextBox
		{
			get { return Control as EngineTextBox; }
		}

		public ToolStripTextBoxHost()
			: base( __0x5771() )
		{
		}

		static Control __0x5771()
		{
			var __0x5770 = new EngineTextBox();
			__0x5770.Multiline = false;
			__0x5770.WordWrap = false;

			return __0x5770;
		}

		
		
		
		

		

		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		

		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for Win32 API functionality.
	/// </summary>
	public static class Win32Utility
	{
		[StructLayout( LayoutKind.Sequential )]
		internal struct SHELLEXECUTEINFO
		{
			public uint cbSize;
			public uint fMask;
			public IntPtr hwnd;
			[MarshalAs( UnmanagedType.LPWStr )]
			public string lpVerb;
			[MarshalAs( UnmanagedType.LPWStr )]
			public string lpFile;
			[MarshalAs( UnmanagedType.LPWStr )]
			public string lpParameters;
			[MarshalAs( UnmanagedType.LPWStr )]
			public string lpDirectory;
			public int nShow;
			public IntPtr hInstApp;
			public IntPtr lpIDList;
			[MarshalAs( UnmanagedType.LPWStr )]
			public string lpClass;
			public IntPtr hkeyClass;
			public uint dwHotKey;
			public IntPtr hIcon;
			public IntPtr hProcess;
		}

		const int __0x5772 = 0x0000000C;
		const int __0x5773 = 1;

		[DllImport( "shell32.dll", CharSet = CharSet.Unicode )]
		internal static extern bool ShellExecuteEx( ref SHELLEXECUTEINFO lpExecInfo );

		

		public static void ShellExecuteEx( string verb, string realFileName )
		{
			try
			{
				SHELLEXECUTEINFO __0x5774 = new SHELLEXECUTEINFO();
				__0x5774.cbSize = (uint)Marshal.SizeOf( typeof( SHELLEXECUTEINFO ) );
				__0x5774.fMask = __0x5772;
				__0x5774.lpVerb = verb;
				__0x5774.lpFile = realFileName;
				__0x5774.nShow = __0x5773;

				ShellExecuteEx( ref __0x5774 );
			}
			catch( Exception )
			{
			}
		}
	}
}




namespace NeoAxis.Editor
{
	

	static class WindowsClipboard
	{
		static class __0x5805
		{
			internal const uint CF_HDROP = 15;

			[DllImport( "User32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool IsClipboardFormatAvailable( uint format );

			[DllImport( "User32.dll", SetLastError = true )]
			internal static extern IntPtr GetClipboardData( uint uFormat );

			[DllImport( "kernel32.dll" )]
			internal static extern IntPtr GlobalAlloc( uint uFlags, IntPtr dwBytes );

			[DllImport( "kernel32.dll", SetLastError = true )]
			internal static extern IntPtr GlobalLock( IntPtr hMem );

			[DllImport( "kernel32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool GlobalUnlock( IntPtr hMem );

			[DllImport( "user32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool OpenClipboard( IntPtr hWndNewOwner );

			[DllImport( "user32.dll", SetLastError = true )]
			[return: MarshalAs( UnmanagedType.Bool )]
			internal static extern bool CloseClipboard();

			[DllImport( "user32.dll", SetLastError = true )]
			internal static extern IntPtr SetClipboardData( uint uFormat, IntPtr data );

			[DllImport( "user32.dll" )]
			internal static extern bool EmptyClipboard();

			[DllImport( "Kernel32.dll", SetLastError = true )]
			internal static extern int GlobalSize( IntPtr hMem );

			[DllImport( "shell32.dll", CharSet = CharSet.Unicode )]
			internal static extern uint DragQueryFile( IntPtr hDrop, uint iFile, StringBuilder lpszFile, int cch );

			[DllImport( "user32.dll", CharSet = CharSet.Unicode )]
			internal static extern uint RegisterClipboardFormat( string lpszFormat );

			[DllImport( "user32.dll" )]
			internal static extern uint EnumClipboardFormats( uint format );

			[StructLayout( LayoutKind.Sequential, Pack = 1 )]
			public struct DROPFILES
			{
				public int pFiles;
				public Point pt;
				public bool fNC;
				public bool fWide;
			}
		}


		public static bool IsCutPrefferdDropEffect( IntPtr hwnd = default )
		{
			uint __0x5775 = __0x5805.RegisterClipboardFormat( "Preferred DropEffect" );
			bool __0x5776 = false;
			if( __0x5805.OpenClipboard( hwnd ) )
			{
				try
				{
					IntPtr __0x5777 = __0x5805.GetClipboardData( __0x5775 );
					if( !( __0x5777 != IntPtr.Zero ) )
					{
						return __0x5776;
					}
					IntPtr __0x5778 = __0x5805.GlobalLock( __0x5777 );
					try
					{
						if( __0x5778 != IntPtr.Zero )
						{
							byte[] __0x5779 = new byte[ 4 ];
							Marshal.Copy( __0x5778, __0x5779, 0, 4 );
							__0x5776 = ( __0x5779[ 0 ] & 2 ) != 0;
						}
					}
					finally
					{
						__0x5805.GlobalUnlock( __0x5777 );
					}
				}
				finally
				{
					__0x5805.CloseClipboard();
				}
			}
			return __0x5776;
		}

		public static bool ContainsFileDropPaths( IntPtr hwnd = default )
		{
			if( ( hwnd != IntPtr.Zero ) && __0x5805.OpenClipboard( hwnd ) )
			{
				try
				{
					for( uint __0x5780 = __0x5805.EnumClipboardFormats( 0 ); __0x5780 != 0; __0x5780 = __0x5805.EnumClipboardFormats( __0x5780 ) )
					{
						if( __0x5780 == __0x5805.CF_HDROP )
						{
							return true;
						}
					}
				}
				finally
				{
					__0x5805.CloseClipboard();
				}
			}
			return false;
		}

		public static List<string> GetFileDropPaths( IntPtr hwnd = default )
		{
			List<string> __0x5781 = new List<string>();
			if( __0x5805.OpenClipboard( hwnd ) )
			{
				try
				{
					IntPtr __0x5782 = __0x5805.GetClipboardData( __0x5805.CF_HDROP );
					if( !( __0x5782 != IntPtr.Zero ) )
					{
						return __0x5781;
					}
					IntPtr __0x5783 = __0x5805.GlobalLock( __0x5782 );
					if( !( __0x5783 != IntPtr.Zero ) )
					{
						return __0x5781;
					}
					try
					{
						uint __0x5784 = __0x5805.DragQueryFile( __0x5783, uint.MaxValue, null, 0 );
						if( __0x5784 > 0 )
						{
							for( uint __0x5785 = 0; __0x5785 < __0x5784; __0x5785++ )
							{
								const int __0x5786 = 260;
								StringBuilder __0x5787 = new StringBuilder( __0x5786 );
								__0x5805.DragQueryFile( __0x5783, __0x5785, __0x5787, __0x5787.Capacity );
								if( __0x5787.Length > 0 )
								{
									__0x5781.Add( __0x5787.ToString() );
								}
							}
						}
						return __0x5781;
					}
					finally
					{
						__0x5805.GlobalUnlock( __0x5782 );
					}
				}
				finally
				{
					__0x5805.CloseClipboard();
				}
			}
			return __0x5781;
		}

		
		public static bool SetFileDropPaths( List<string> lstPaths, bool fCut, IntPtr hwnd = default )
		{
			string __0x5788 = __0x5800( lstPaths );
			if(  ( __0x5788.Length > 1 ) )
			{
				if( !__0x5805.OpenClipboard( hwnd ) )
				{
					return false;
				}
				__0x5805.EmptyClipboard();
				try
				{
					__0x5805.DROPFILES __0x5789 = new __0x5805.DROPFILES();
					__0x5789.pFiles = Marshal.SizeOf( __0x5789 );
					__0x5789.fWide = true;
					int __0x5790 = Marshal.SizeOf( __0x5789 ) + ( __0x5788.Length * Marshal.SystemMaxDBCSCharSize );
					IntPtr __0x5791 = __0x5805.GlobalAlloc( 0x42, (IntPtr)__0x5790 );
					if( __0x5791 != IntPtr.Zero )
					{
						IntPtr __0x5792 = __0x5805.GlobalLock( __0x5791 );
						Marshal.StructureToPtr( __0x5789, __0x5792, false );
						Marshal.Copy( __0x5788.ToCharArray(), 0, __0x5801( __0x5792, Marshal.SizeOf( __0x5789 ) ), __0x5788.Length );
						__0x5805.GlobalUnlock( __0x5791 );
					}
					IntPtr __0x5793 = __0x5805.GlobalAlloc( 0x42, (IntPtr)4 );
					if( __0x5793 != IntPtr.Zero )
					{
						IntPtr __0x5794 = __0x5805.GlobalLock( __0x5793 );
						byte[] __0x5795 = new byte[ 4 ];
						__0x5795[ 0 ] = fCut ? ( (byte)2 ) : ( (byte)5 );
						Marshal.Copy( __0x5795, 0, __0x5794, 4 );
						__0x5805.GlobalUnlock( __0x5793 );
					}
					if( ( __0x5791 != IntPtr.Zero ) && ( __0x5793 != IntPtr.Zero ) )
					{
						uint __0x5796 = __0x5805.RegisterClipboardFormat( "Preferred DropEffect" );
						__0x5805.SetClipboardData( __0x5805.CF_HDROP, __0x5791 );
						__0x5805.SetClipboardData( __0x5796, __0x5793 );
						return true;
					}
				}
				finally
				{
					__0x5805.CloseClipboard();
				}
			}
			return false;
		}

		public static string StringJoin<T>( this IEnumerable<T> list, string separator )
		{
			StringBuilder __0x5797 = new StringBuilder();
			bool __0x5798 = true;
			foreach( T __0x5799 in list )
			{
				if( __0x5798 ) __0x5798 = false;
				else __0x5797.Append( separator );
				__0x5797.Append( __0x5799.ToString() );
			}
			return __0x5797.ToString();
		}

		static string __0x5800( List<string> __0x5802 )
		{
			return __0x5802.StringJoin( "\0" ) + "\0\0";
		}

		static IntPtr __0x5801( IntPtr __0x5803, int __0x5804 )
		{
			if( IntPtr.Size == 4 )
				return (IntPtr)( ( (int)__0x5803 ) + __0x5804 );
			return (IntPtr)( ( (long)__0x5803 ) + __0x5804 );
		}

	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Implements <see cref="ProcedureUI"/> for WinForms.
	/// </summary>
	public static class WinFormsProcedureUI
	{
		/// <summary>
		/// Implements button of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsButton : ProcedureUI.Button
		{
			public KryptonButton control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override event Action<ProcedureUI.Button> Click;
			public void PerformClick()
			{
				Click?.Invoke( this );
			}
		}

		

		/// <summary>
		/// Implements check box of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsCheck : ProcedureUI.Check
		{
			public KryptonCheckBox control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override CheckValue Checked
			{
				get { return (CheckValue)control.CheckState; }
				set { control.CheckState = (CheckState)value; }
			}

			public override event Action<ProcedureUI.Check> CheckedChanged;
			public void PerformCheckedChanged()
			{
				CheckedChanged?.Invoke( this );
			}

			public override event Action<ProcedureUI.Check> Click;
			public void PerformClick()
			{
				Click?.Invoke( this );
			}
		}

		

		/// <summary>
		/// Implements edit box of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsEdit : ProcedureUI.Edit
		{
			public KryptonTextBox control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
		}

		

		/// <summary>
		/// Implements text label of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsText : ProcedureUI.Text
		{
			public EngineLabel control;

			public override bool Enabled
			{
				get { return control.Enabled; }
				set { control.Enabled = value; }
			}

			public override bool Visible
			{
				get { return control.Visible; }
				set { control.Visible = value; }
			}

			public override string Text
			{
				get { return control.Text; }
				set { control.Text = value; }
			}

			public override bool Bold
			{
				get { return base.Bold; }
				set
				{
					if( Bold == value )
						return;
					base.Bold = value;

					control.LabelStyle = Bold ? LabelStyle.BoldControl : LabelStyle.NormalControl;
				}
			}

			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
		}

		

		/// <summary>
		/// Implements form of <see cref="ProcedureUI"/> for WinForms.
		/// </summary>
		public class WinFormsForm : ProcedureUI.Form
		{
			public Control owner;
			int __0x5806;
			public int positionY = 6;

			

			public WinFormsForm( Control owner )
			{
				this.owner = owner;

				owner.Resize += __0x5828;
			}

			private void __0x5828( object __0x5834, EventArgs __0x5835 )
			{
				foreach( var __0x5826 in owner.Controls )
				{
					var __0x5807 = __0x5826 as KryptonTextBox;
					if( __0x5807 != null )
						__0x5829( __0x5807 );

					var __0x5808 = __0x5826 as EngineLabel;
					if( __0x5808 != null )
						__0x5830( __0x5808 );
				}
			}

			void __0x5829( KryptonTextBox __0x5836 )
			{
				__0x5836.Width = owner.ClientSize.Width - __0x5836.Location.X * 2;
			}

			void __0x5830( EngineLabel __0x5837 )
			{
				__0x5837.Width = owner.ClientSize.Width - __0x5837.Location.X * 2;
			}

			public override ProcedureUI.Button CreateButton( string text, ProcedureUI.Button.SizeEnum size )
			{
				var __0x5809 = new KryptonButton();
				__0x5809.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				
				__0x5809.Name = "control" + __0x5806;
				__0x5806++;
				__0x5809.Size = DpiHelper.Default.ScaleValue( new Size( size == ProcedureUI.Button.SizeEnum.Long ? 117 : 93, 26 ) );
				
				__0x5809.TabIndex = __0x5806;
				__0x5809.Values.Text = text;
				__0x5809.Click += __0x5831;
				owner.Controls.Add( __0x5809 );

				var __0x5810 = new WinFormsButton();
				__0x5810.control = __0x5809;
				__0x5809.Tag = __0x5810;

				return __0x5810;
			}

			private void __0x5831( object __0x5838, EventArgs __0x5839 )
			{
				var __0x5811 = (WinFormsButton)( (KryptonButton)__0x5838 ).Tag;
				__0x5811.PerformClick();
			}

			public override ProcedureUI.Check CreateCheck( string text )
			{
				var __0x5812 = new KryptonCheckBox();
				__0x5812.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5812.Name = "control" + __0x5806;
				__0x5806++;
				__0x5812.AutoSize = true;
				__0x5812.TabIndex = __0x5806;
				__0x5812.Values.Text = text;
				__0x5812.CheckStateChanged += __0x5832;
				__0x5812.Click += __0x5833;
				owner.Controls.Add( __0x5812 );

				var __0x5813 = new WinFormsCheck();
				__0x5813.control = __0x5812;
				__0x5812.Tag = __0x5813;

				return __0x5813;
			}

			public override ProcedureUI.Edit CreateEdit( string text = "" )
			{
				var __0x5814 = new KryptonTextBox();
				__0x5814.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5814.Name = "control" + __0x5806;
				__0x5806++;
				
				__0x5814.TabIndex = __0x5806;
				__0x5814.Text = text;
				
				
				owner.Controls.Add( __0x5814 );

				var __0x5815 = new WinFormsEdit();
				__0x5815.control = __0x5814;
				__0x5814.Tag = __0x5815;

				__0x5829( __0x5814 );

				return __0x5815;
			}

			public override ProcedureUI.Text CreateText( string text )
			{
				var __0x5816 = new EngineLabel();
				__0x5816.Location = new Point( DpiHelper.Default.ScaleValue( 3 ), DpiHelper.Default.ScaleValue( 3 ) );
				__0x5816.Name = "control" + __0x5806;
				__0x5806++;
				
				__0x5816.TabIndex = __0x5806;
				__0x5816.Text = text;
				owner.Controls.Add( __0x5816 );

				var __0x5817 = new WinFormsText();
				__0x5817.control = __0x5816;
				__0x5816.Tag = __0x5817;

				__0x5830( __0x5816 );

				return __0x5817;
			}

			private void __0x5832( object __0x5840, EventArgs __0x5841 )
			{
				var __0x5818 = (WinFormsCheck)( (KryptonCheckBox)__0x5840 ).Tag;
				__0x5818.PerformCheckedChanged();
			}

			private void __0x5833( object __0x5842, EventArgs __0x5843 )
			{
				var __0x5819 = (WinFormsCheck)( (KryptonCheckBox)__0x5842 ).Tag;
				__0x5819.PerformClick();
			}

			public override void AddRow( IEnumerable<ProcedureUI.Control> controls )
			{
				int __0x5820 = DpiHelper.Default.ScaleValue( 3 );
				int __0x5821 = 0;

				foreach( var __0x5827 in controls )
				{
					var __0x5822 = __0x5827 as WinFormsButton;
					if( __0x5822 != null )
					{
						__0x5822.control.Location = new Point( __0x5820, positionY );
						__0x5820 += __0x5822.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5821 = Math.Max( __0x5821, __0x5822.control.Height );
					}

					var __0x5823 = __0x5827 as WinFormsCheck;
					if( __0x5823 != null )
					{
						__0x5823.control.Location = new Point( __0x5820, positionY + DpiHelper.Default.ScaleValue( 6 ) );
						__0x5820 += __0x5823.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5821 = Math.Max( __0x5821, __0x5823.control.Height );
					}

					var __0x5824 = __0x5827 as WinFormsEdit;
					if( __0x5824 != null )
					{
						__0x5824.control.Location = new Point( __0x5820, positionY );
						__0x5820 += __0x5824.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5821 = Math.Max( __0x5821, __0x5824.control.Height );
					}

					var __0x5825 = __0x5827 as WinFormsText;
					if( __0x5825 != null )
					{
						__0x5825.control.Location = new Point( __0x5820, positionY );
						__0x5820 += __0x5825.control.Width + DpiHelper.Default.ScaleValue( 6 );

						__0x5821 = Math.Max( __0x5821, __0x5825.control.Height );
					}
				}

				positionY += __0x5821 + DpiHelper.Default.ScaleValue( 5 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public abstract class WorkspaceController : IDisposable
	{
		protected bool disposing;
		protected Control ownerControl;
		protected EditorForm editorForm;
		protected KryptonDockingManager dockingManager;
		protected KryptonDockableWorkspace dockableWorkspaceControl;
		protected KryptonDockingControl dockingControl;

		protected Dictionary<KryptonPage, DockWindow> dockWindows = new Dictionary<KryptonPage, DockWindow>();

		
		
		


		internal virtual DockWindow GetSelectedDockWindow()
		{
			return null;
		}

		public virtual void SelectDockWindow( DockWindow window )
		{
			if( window == null )
				throw new ArgumentNullException( nameof( window ) );

			
			if( !window.Visible )
				EditorForm.Instance.WorkspaceController.SetDockWindowVisibility( window, true );

			
			if( dockingControl != null )
			{
				var __0x5844 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingAutoHiddenGroup;
				if( __0x5844 != null )
				{
					foreach( var __0x5895 in dockingControl )
					{
						var __0x5845 = __0x5895 as KryptonDockingEdge;
						if( __0x5845 != null )
						{
							
							KryptonDockingEdgeAutoHidden __0x5846 = null;
							foreach( var __0x5896 in __0x5845 )
							{
								if( __0x5896 is KryptonDockingEdgeAutoHidden )
								{
									__0x5846 = (KryptonDockingEdgeAutoHidden)__0x5896;
									break;
								}
							}

							if( __0x5846 != null )
								__0x5846.SlidePageOut( window.KryptonPage, true );
						}
					}
				}
			}

			
			var __0x5847 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingSpace;
			if( __0x5847 != null )
			{
				__0x5847.SelectPage( window.KryptonPage.UniqueName );

				
				var __0x5848 = __0x5847.CellForPage( window.KryptonPage.UniqueName );
				__0x5848?.Focus();
			}
		}

		public ICollection<DockWindow> GetDockWindows()
		{
			return dockWindows.Values;
		}

		public DockWindow FindWindow( Type windowClass )
		{
			return GetDockWindows().FirstOrDefault( __0x5916 => windowClass.IsAssignableFrom( __0x5916.GetType() ) );
		}

		public T FindWindow<T>() where T : DockWindow
		{
			return GetDockWindows().OfType<T>().FirstOrDefault();
		}

		public T FindWindow<T>( Func<T, bool> predicate )
		{
			return GetDockWindows().OfType<T>().FirstOrDefault( predicate );
		}

		public IDocumentWindow FindWindow( DocumentInstance doc )
		{
			return FindWindow<IDocumentWindow>( __0x5917 => __0x5917.Document == doc );
		}

		DockWindow __0x5898( KryptonPage __0x5918 )
		{
			if( __0x5918 == null )
				return null;
			dockWindows.TryGetValue( __0x5918, out DockWindow result );
			return result;
		}

		public void ShowDockWindow( Type windowClass )
		{
			var __0x5849 = FindWindow( windowClass );
			__0x5849?.KryptonPage?.Show();
		}
		
		
		
		
		
		

		public WorkspaceController( Control ownerControl, EditorForm editorForm )
		{
			this.ownerControl = ownerControl;
			this.editorForm = editorForm;

			this.dockableWorkspaceControl = ownerControl.Controls.OfType<KryptonDockableWorkspace>().First();

			dockingManager = new KryptonDockingManager();

			var __0x5850 = new KryptonDockingWorkspace( "DockingWorkspace", "Filler", dockableWorkspaceControl );
			dockingManager.Add( __0x5850 );

			if( this is WorkspaceControllerForForm )
			{
				dockingControl = new KryptonDockingControl( "DockingControl", ownerControl, __0x5850 );
				dockingManager.Add( dockingControl );
			}

			var __0x5851 = new KryptonDockingFloating( "DockingFloating", editorForm );
			dockingManager.Add( __0x5851 );

			dockingManager.PageLoading += __0x5907;
			dockingManager.PageSaving += __0x5906;
			dockingManager.RecreateLoadingPage += __0x5905;

			dockingManager.OrphanedPages += __0x5908;
			dockingManager.PageCloseRequest += __0x5909;

			dockableWorkspaceControl.WorkspaceCellAdding += __0x5912;
			dockableWorkspaceControl.WorkspaceCellRemoved += __0x5913;
			dockableWorkspaceControl.CellPageInserting += __0x5914;
		}

		public virtual void Dispose()
		{
			disposing = true;

			dockingManager.PageLoading -= __0x5907;
			dockingManager.PageSaving -= __0x5906;
			dockingManager.RecreateLoadingPage -= __0x5905;

			dockingManager.PageCloseRequest -= __0x5909;
			dockingManager.OrphanedPages -= __0x5908;

			dockableWorkspaceControl.WorkspaceCellAdding -= __0x5912;
			dockableWorkspaceControl.WorkspaceCellRemoved -= __0x5913;
			dockableWorkspaceControl.CellPageInserting -= __0x5914;

			
			foreach( var __0x5897 in dockWindows.Values.ToList() )
				RemoveDockWindow( __0x5897, true );
		}

		public KryptonDockingDockspace AddToDockspace( DockWindow[] windows, DockingEdge edge )
		{
			var __0x5852 = new KryptonPage[ windows.Length ];
			for( int __0x5853 = 0; __0x5853 < windows.Length; __0x5853++ )
			{
				AddDockWindowInternal( windows[ __0x5853 ], true );
				__0x5852[ __0x5853 ] = windows[ __0x5853 ].KryptonPage;
			}

			return dockingManager.AddDockspace( "DockingControl", edge, __0x5852 );
		}

		[Browsable( false )]
		public KryptonDockingManager DockingManager
		{
			get { return dockingManager; }
		}

		public KryptonDockingDockspace AddToDockspaceStack( DockWindow[] windows, DockingEdge edge )
		{
			var __0x5854 = new KryptonPage[ windows.Length ][];
			for( int __0x5855 = 0; __0x5855 < windows.Length; __0x5855++ )
			{
				AddDockWindowInternal( windows[ __0x5855 ], true );
				__0x5854[ __0x5855 ] = new KryptonPage[] { windows[ __0x5855 ].KryptonPage };
			}

			var __0x5856 = dockingManager.AddDockspace( "DockingControl", edge, __0x5854[ 0 ], __0x5854 );
			return __0x5856;
		}

		
		KryptonDockingFloatspace __0x5899( DockWindow __0x5919, bool __0x5920, Point __0x5921, Size __0x5922 )
		{
			AddDockWindowInternal( __0x5919, true );

			var __0x5857 = dockingManager.AddFloatingWindow( "DockingFloating", new KryptonPage[] { __0x5919.KryptonPage }, __0x5921, __0x5922 );

			
			
			

			return __0x5857.FloatspaceElement;
		}

		
		KryptonDockingFloatspace __0x5900( DockWindow __0x5923, bool __0x5924 )
		{
			
			__0x5923.CalculateBigSizeForFloatingWindowDependingScreenSize( out Point position, out Size size );
			return __0x5899( __0x5923, __0x5924, position, size );
		}

		KryptonDockingWorkspace __0x5901( DockWindow __0x5925, bool __0x5926 )
		{
			AddDockWindowInternal( __0x5925, false );

			var __0x5858 = dockingManager.AddToWorkspace( "DockingWorkspace", new KryptonPage[] { __0x5925.KryptonPage } );

			
			__0x5858.DockableWorkspaceControl.PerformLayout();

			if( __0x5926 )
				SelectDockWindow( __0x5925 );

			return __0x5858;
		}

		KryptonDockingWorkspace __0x5902( DockWindow __0x5927, bool __0x5928, int __0x5929 )
		{
			AddDockWindowInternal( __0x5927, false );

			var __0x5859 = dockingManager.ResolvePath( "DockingWorkspace" ) as KryptonDockingWorkspace;

			__0x5859.CellInsert( __0x5859.DockableWorkspaceControl.ActiveCell, __0x5929, __0x5927.KryptonPage );

			
			

			if( __0x5928 )
				SelectDockWindow( __0x5927 );

			return __0x5859;
		}


		public virtual void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			if( floatingWindow )
				__0x5900( window, select );
			else
				__0x5901( window, select );
		}

		protected void AddDockWindowInternal( DockWindow window, bool allowDocking, KryptonPage existPage = null )
		{
			CreatePage( window, true, existPage );

			dockWindows.Add( window.KryptonPage, window );
			window.KryptonPage.Disposed += KryptonPage_Disposed;
			window.KryptonPage.VisibleChanged += KryptonPage_VisibleChanged;

			if( !allowDocking )
				window.KryptonPage.ClearFlags( KryptonPageFlags.DockingAllowAutoHidden | KryptonPageFlags.DockingAllowDocked );

			OnDockWindowAdded( window );
		}

		protected virtual void OnDockWindowAdded( DockWindow window )
		{
			
		}

		public void ReplaceDockWindow( DockWindow oldWindow, DockWindow newWindow, bool disposeOldWindow, bool select )
		{
			if( __0x5904( oldWindow ) )
			{
				var __0x5860 = (KryptonDockingFloatspace)dockingManager.FindPageElement( oldWindow.KryptonPage );
				var __0x5861 = __0x5860.GetParentType( typeof( KryptonDockingFloatingWindow ) ) as KryptonDockingFloatingWindow;

				var __0x5862 = __0x5861.FloatingWindow.Location;
				var __0x5863 = __0x5861.FloatingWindow.ClientSize;
				RemoveDockWindow( oldWindow, disposeOldWindow );
				__0x5899( newWindow, select, __0x5862, __0x5863 );
			}
			else
			{
				int __0x5864 = __0x5903( oldWindow );
				if( __0x5864 == -1 )
					Log.Warning( $"Window {oldWindow} not found." );
				else
				{
					RemoveDockWindow( oldWindow, disposeOldWindow );
					__0x5902( newWindow, select, __0x5864 );
				}
			}
		}

		int __0x5903( DockWindow __0x5930 )
		{
			var __0x5865 = GetWorkspaceCell( __0x5930 );
			if( __0x5865 != null )
				return __0x5865.Pages.IndexOf( __0x5930.KryptonPage );
			else
				return -1;
		}

		bool __0x5904( DockWindow __0x5931 )
		{
			var __0x5866 = dockingManager.FindPageElement( __0x5931.KryptonPage );
			return __0x5866 is KryptonDockingFloatspace;
		}

		public virtual void RemoveDockWindow( DockWindow window, bool dispose )
		{
			RemoveDockWindow( window.KryptonPage, dispose );
		}

		internal void RemoveDockWindow( KryptonPage page, bool dispose )
		{
			page.Disposed -= KryptonPage_Disposed;
			page.VisibleChanged -= KryptonPage_VisibleChanged;

			Debug.Assert( dockWindows.ContainsKey( page ) );
			dockingManager.RemovePage( page, dispose );

			if( !dockWindows.ContainsKey( page ) )
				return;

			var __0x5867 = dockWindows[ page ];
			dockWindows.Remove( page );
			OnDockWindowRemoved( __0x5867 );
		}

		public void CloseDockWindow( DockWindow window )
		{
			OnDockWindowCloseRequest( window, out bool cancel );
			if( !cancel )
				RemoveDockWindow( window, true );
		}

		protected virtual void OnDockWindowRemoved( DockWindow window )
		{
			
		}

		public void LoadLayoutFromFile( string filename )
		{
			dockingManager.LoadConfigFromFile( filename );
		}

		public void SaveLayoutToFile( string filename )
		{
			dockingManager.SaveConfigToFile( filename );
		}

		public void LoadLayoutFromString( string text )
		{
			using( var __0x5868 = new MemoryStream( System.Text.Encoding.Unicode.GetBytes( text ) ) )
				dockingManager.LoadConfigFromStream( __0x5868 );
		}

		public string SaveLayoutToString()
		{
			using( var __0x5869 = new MemoryStream() )
			{
				dockingManager.SaveConfigToStream( __0x5869, System.Text.Encoding.Unicode, Formatting.None );
				return System.Text.Encoding.Unicode.GetString( __0x5869.ToArray() );
			}
		}

		protected virtual KryptonPage CreatePage( DockWindow window, bool createCloseButton, KryptonPage existPage = null )
		{
			var __0x5870 = window.IsSystemWindow ? window.GetType().Name : string.Empty;

			
			if( window is DocumentWindow )
				Debug.Assert( string.IsNullOrEmpty( __0x5870 ) );

			KryptonPage __0x5871 = existPage ?? CreatePage( __0x5870, createCloseButton );
			__0x5871.associatedDockWindow = window;

			window.Dock = DockStyle.Fill;

			var __0x5872 = window.DefaultAutoHiddenSlideSize;
			__0x5871.AutoHiddenSlideSize = new Size( __0x5872.X, __0x5872.Y );

			__0x5871.Controls.Add( window );
			return __0x5871;
		}

		protected KryptonPage CreatePage( string uniqueName, bool createCloseButton )
		{
			KryptonPage __0x5873 = new KryptonPage( "No data", null, uniqueName );
			__0x5873.TextTitle = "description";
			__0x5873.TextDescription = "description";

			if( createCloseButton )
			{
				var __0x5874 = new ButtonSpecAny();
				__0x5874.Tag = __0x5873;
				__0x5874.Type = PaletteButtonSpecStyle.Close;
				__0x5874.Click += ( __0x5932, __0x5933 ) =>
				{
					var __0x5875 = (KryptonPage)( (ButtonSpecAny)__0x5932 ).Tag;
					
					dockingManager.CloseRequest( new string[] { __0x5875.UniqueName } );
					
				};
				__0x5873.ButtonSpecs.Add( __0x5874 );
			}

			return __0x5873;
		}

		protected KryptonWorkspaceCell GetWorkspaceCell( DockWindow window )
		{
			var __0x5876 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingSpace;
			if( __0x5876 != null )
				return __0x5876.CellForPage( window.KryptonPage.UniqueName );
			else
				return null;
		}

		protected virtual void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			if( window is DocumentWindow )
				cancel = editorForm.ShowDialogAndSaveDocument( window );
			else
				cancel = false; 
		}

		protected virtual void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
		}

		protected virtual void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
		}

		internal void KryptonPage_Disposed( object sender, EventArgs e )
		{
			
			if( !ownerControl.IsHandleCreated )
				return;

			
			if( ownerControl.Disposing || ownerControl.IsDisposed )
				return;

			var __0x5877 = (KryptonPage)sender;

			
			
			
			
			
			
			
			
			
			
			

			try
			{
				RemoveDockWindow( __0x5877, true );
			}
			finally
			{
				
				
			}
		}

		internal void KryptonPage_VisibleChanged( object sender, EventArgs e )
		{
			if( ownerControl.Disposing )
				return;

			var __0x5878 = (KryptonPage)sender;

			if( __0x5878.LastVisibleSet != __0x5878.Visible ) 
				return;

			
		}

		private void __0x5905( object __0x5934, RecreateLoadingPageEventArgs __0x5935 )
		{
			__0x5935.Page = CreatePage( __0x5935.UniqueName, true );
		}

		private void __0x5906( object __0x5936, DockPageSavingEventArgs __0x5937 )
		{
			var __0x5879 = __0x5937.Page.GetDockWindow();
			if( __0x5879 == null )
				return;

			OnDockWindowSaving( __0x5879, __0x5937 );
		}

		private void __0x5907( object __0x5938, DockPageLoadingEventArgs __0x5939 )
		{
			if( __0x5939.Page is KryptonStorePage )
				return;

			if( __0x5939.XmlReader.Name != "CPD" )
				throw new ArgumentException( "Expected 'CPD' element was not found" );

			var __0x5880 = __0x5939.Page.GetDockWindow();
			OnDockWindowLoading( __0x5880, __0x5939 );
		}

		private void __0x5908( object __0x5940, PagesEventArgs __0x5941 )
		{
			
			
			

			__0x5941.Pages.Clear();
		}

		private void __0x5909( object __0x5942, CloseRequestEventArgs __0x5943 )
		{
			var __0x5881 = dockingManager.PageForUniqueName( __0x5943.UniqueName );
			var __0x5882 = __0x5881.GetDockWindow();
			if( __0x5882 != null )
			{
				OnDockWindowCloseRequest( __0x5882, out bool cancel );
				if( cancel )
					__0x5943.CloseRequest = DockingCloseRequest.None;
				else
					__0x5943.CloseRequest = __0x5882.HideOnRemoving ? DockingCloseRequest.HidePage : DockingCloseRequest.RemovePageAndDispose;
			}
		}

		
		private void __0x5910( object __0x5944, CloseActionEventArgs __0x5945 )
		{
			var __0x5883 = __0x5945.Item.GetDockWindow();
			if( __0x5883 != null )
			{
				OnDockWindowCloseRequest( __0x5883, out bool cancel );
				if( cancel )
					__0x5945.Action = CloseButtonAction.None;
				else
					__0x5945.Action = __0x5883.HideOnRemoving ? CloseButtonAction.HidePage : CloseButtonAction.RemovePageAndDispose;
			}
		}

		private void __0x5911( object __0x5946, ShowContextMenuArgs __0x5947 )
		{
			var __0x5884 = __0x5947.Item.GetDockWindow();
			if( __0x5884 != null )
			{
				var __0x5885 = new KryptonContextMenuItems();
				__0x5884.OnShowTitleContextMenu( __0x5885 );

				if( __0x5885.Items.Count != 0 )
				{
					
					__0x5947.KryptonContextMenu.Items.Insert( 0, __0x5885 );
					__0x5947.KryptonContextMenu.Items.Insert( 1, new KryptonContextMenuSeparator() );
				}
			}
		}

		private void __0x5912( object __0x5948, WorkspaceCellEventArgs __0x5949 )
		{
			__0x5949.Cell.CloseAction += __0x5910;
			__0x5949.Cell.ShowContextMenu += __0x5911;
		}

		private void __0x5913( object __0x5950, WorkspaceCellEventArgs __0x5951 )
		{
			__0x5951.Cell.ShowContextMenu -= __0x5911;
			__0x5951.Cell.CloseAction -= __0x5910;
		}

		private void __0x5914( object __0x5952, KryptonPageEventArgs __0x5953 )
		{
			var __0x5886 = __0x5898( __0x5953.Item ) as DocumentWindow;
			if( __0x5886 == null )
				return;

			

			var __0x5887 = editorForm.WorkspaceController;
			if( __0x5887.SelectedDocumentWindow == __0x5886 )
				return;

			var __0x5888 = __0x5887.FindWorkspaceWindow( __0x5886 );
			if( __0x5888 != null )
			{
				var __0x5889 = __0x5887.FindWorkspaceWindow( __0x5887.SelectedDocumentWindow );
				if( __0x5888 != __0x5889 )
					editorForm.WorkspaceController.SelectDockWindow( __0x5888 );
			}
		}

		

		internal void RepaintAutoHiddenWindow( DockWindow window )
		{
			var __0x5890 = dockingManager.FindPageElement( window.KryptonPage ) as KryptonDockingAutoHiddenGroup;
			if( __0x5890 != null )
				__0x5890.AutoHiddenGroupControl.PerformNeedPaint( true );
		}

		internal void HideAutoHiddenWindowWithoutAnimation( DockWindow window )
		{
			var __0x5891 = ownerControl.Controls.OfType<KryptonAutoHiddenSlidePanel>()
							.FirstOrDefault( __0x5954 => __0x5954.Page == window.KryptonPage );
			if( __0x5891 != null )
				__0x5891.HideUniqueName();
		}

		internal void BlockAutoHideForAutoHiddenWindow( DockWindow window, bool value )
		{
			var __0x5892 = ownerControl.Controls.OfType<KryptonAutoHiddenSlidePanel>()
							.FirstOrDefault( __0x5955 => __0x5955.Page == window.KryptonPage );
			if( __0x5892 != null ) 
				__0x5892.BlockAutoHide = value;
		}

		internal void BlockAutoHideAndDoAction( Control control, Action action )
		{
			var __0x5893 = control is DockWindow ?
				(DockWindow)control : __0x5915( control );

			BlockAutoHideForAutoHiddenWindow( __0x5893, true );
			try { action(); }
			finally { BlockAutoHideForAutoHiddenWindow( __0x5893, false ); }
		}

		static DockWindow __0x5915( Control __0x5956 )
		{
			Control __0x5894 = __0x5956;
			while( ( __0x5894 = __0x5894.Parent ) != null )
			{
				if( __0x5894 is KryptonPage page )
					return page.GetDockWindow();
			}
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	
	
	
	public class WorkspaceControllerForForm : WorkspaceController
	{
		
		
		

		
		internal class WindowConfig
		{
			internal string RealFileName { get; set; }
			internal Type Type { get; set; }
			internal string SpecialMode { get; set; }

			internal static WindowConfig FromDocumentWindow( IDocumentWindow window )
			{
				var __0x5957 = window.Document;
				return new WindowConfig()
				{
					RealFileName = __0x5957.RealFileName,
					Type = window.GetType(),
					SpecialMode = __0x5957.SpecialMode
				};
			}

			internal void Save( XmlWriter xmlWriter )
			{
				if( !string.IsNullOrEmpty( RealFileName ) )
					xmlWriter.WriteAttributeString( "FileName", VirtualPathUtility.GetVirtualPathByReal( RealFileName ) );
				else
					xmlWriter.WriteAttributeString( "Type", Type.FullName );

				if( !string.IsNullOrEmpty( SpecialMode ) )
					xmlWriter.WriteAttributeString( "SpecialMode", SpecialMode );
			}

			internal void Load( XmlReader xmlReader )
			{
				var __0x5958 = xmlReader.GetAttribute( "FileName" ) ?? "";
				if( !string.IsNullOrEmpty( __0x5958 ) )
					RealFileName = VirtualPathUtility.GetRealPathByVirtual( __0x5958 );

				var __0x5959 = xmlReader.GetAttribute( "Type" );
				if( !string.IsNullOrEmpty( __0x5959 ) )
				{
					var __0x5960 = MetadataManager.GetType( __0x5959 );
					if( __0x5960 != null )
						Type = __0x5960.GetNetType();
				}

				SpecialMode = xmlReader.GetAttribute( "SpecialMode" ) ?? "";
			}
		}

		List<DocumentWindow> __0x5961 = new List<DocumentWindow>();

		public DocumentWindow SelectedDocumentWindow 
		{
			get
			{
				
				__0x5961 = __0x5961.Where( __0x6005 => !__0x6005.Destroyed ).ToList();

				var __0x5962 = GetSelectedDockWindow();
				if( __0x5962 != null && __0x5962 is DocumentWindow documentWindow )
				{
					if( !documentWindow.OpenAsSettings && !( documentWindow is TipsWindow ) )
					{
						__0x5961.Remove( documentWindow );
						__0x5961.Add( documentWindow );
					}
				}

				if( __0x5961.Count != 0 )
					return __0x5961[ __0x5961.Count - 1 ];
				else
					return null;
			}
		}

		internal override DockWindow GetSelectedDockWindow()
		{
			var __0x5963 = __0x6004();
			if( __0x5963 == null )
				return null;

			var __0x5964 = __0x5963.ActivePage;
			if( __0x5964 == null )
				return null;

			var __0x5965 = __0x5964.GetDockWindow();
			if( __0x5965 != null && __0x5965 is WorkspaceWindow workspaceWindow )
				return workspaceWindow.GetSelectedDockWindow();
			else
				return __0x5965;
		}

		private KryptonSpace __0x6004()
		{
			KryptonSpace __0x5966 = null;

			var __0x5967 = Form.ActiveForm;

			if( __0x5967 is EditorForm )
				__0x5966 = __0x5967.ActiveControl as KryptonSpace;

			if( __0x5967 is KryptonFloatingWindow floatingWindow )
				__0x5966 = floatingWindow.FloatspaceControl;

			return __0x5966;
		}


		public WorkspaceControllerForForm( Control ownerControl, EditorForm ownerForm )
			: base( ownerControl, ownerForm )
		{
		}

		
		
		public List<DockWindow> GetDockWindowsRecursive()
		{
			var __0x5968 = new List<DockWindow>();
			foreach( var __0x5994 in dockWindows.Values )
			{
				__0x5968.Add( __0x5994 );
				if( __0x5994 is WorkspaceWindow workspaceWindow )
				{
					foreach( var __0x5995 in workspaceWindow.WorkspaceController.GetDockWindows() )
						__0x5968.Add( __0x5995 );
				}
			}
			return __0x5968;
		}

		public override void SelectDockWindow( DockWindow window )
		{
			if( window != null )
			{
				if( window is DocumentWindow wnd && wnd.IsWindowInWorkspace )
				{
					var __0x5969 = FindWorkspaceWindow( wnd );
					if( __0x5969 != null )
						__0x5969.WorkspaceController.SelectDockWindow( window );
				}
				else
					base.SelectDockWindow( window );
			}
		}

		public override void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			
			
			
			
			
			

			try
			{
				
				if( floatingWindow )
					select = true;

				
				if( !( window is DocumentWindow ) )
				{
					base.AddDockWindow( window, floatingWindow, select );
					return;
				}

				var __0x5970 = ( (DocumentWindow)window ).Document;
				var __0x5971 = FindWindowsRecursive( __0x5970 );

				if( __0x5971.Count() == 0 )
				{
					
					base.AddDockWindow( window, floatingWindow, select );
					return;
				}
				else
				{
					

					var __0x5972 = FindWorkspaceWindow( window );
					if( __0x5972 != null )
					{
						__0x5972.WorkspaceController.AddDockWindow( window, floatingWindow, select );
					}
					else
					{
						

						Debug.Assert( __0x5971.Count() == 1 );
						var __0x5973 = __0x5971.First();

						
						__0x5973.Size = new Size( 1, 1 );
						window.Size = new Size( 1, 1 );

						__0x5972 = new WorkspaceWindow( editorForm );
						__0x5972.Init( __0x5970 );

						
						ReplaceDockWindow( __0x5973, __0x5972, false, select );

						
						__0x5972.WorkspaceController.AddDockWindow( __0x5973, false, false );

						
						__0x5972.WorkspaceController.AddDockWindow( window, floatingWindow, select );
					}
				}
			}
			finally
			{
				
				
			}
		}

		public override void RemoveDockWindow( DockWindow window, bool dispose )
		{
			if( window is DocumentWindow wnd && wnd.IsWindowInWorkspace )
			{
				var __0x5974 = FindWorkspaceWindow( wnd );
				if( __0x5974 != null )
					__0x5974.WorkspaceController.RemoveDockWindow( window, dispose );
			}
			else
			{
				base.RemoveDockWindow( window, dispose );
			}
		}

		public void SetDockWindowVisibility( DockWindow window, bool visible )
		{
			if( visible )
				dockingManager.ShowPage( window.KryptonPage );
			else
				dockingManager.HidePage( window.KryptonPage );
		}

		
		public DocumentWindow FindWindowRecursive( DocumentInstance doc, object obj, Type type = null )
		{
			foreach( var __0x5996 in FindWindowsRecursive( doc ) )
			{
				if( type != null && __0x5996.GetType() != type )
					continue;

				if( ReferenceEquals( __0x5996.ObjectOfWindow, obj ) )
					return __0x5996;
			}

			return null;
		}

		public WorkspaceWindow FindWorkspaceWindow( DocumentInstance doc )
		{
			return FindWindow<WorkspaceWindow>( __0x6006 => __0x6006.Document == doc );
		}

		public WorkspaceWindow FindWorkspaceWindow( DockWindow window )
		{
			if( window is DocumentWindow docWindow )
				return FindWindow<WorkspaceWindow>( __0x6007 => __0x6007.Document == docWindow.Document );
			else
				return null;
		}

		public IEnumerable<DocumentWindow> FindWindowsRecursive( DocumentInstance doc )
		{
			return GetDockWindowsRecursive().OfType<DocumentWindow>().Where( __0x6008 => __0x6008.Document == doc );
		}

		protected override void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			if( window is WorkspaceWindow workspaceWindow )
			{
				var __0x5975 = workspaceWindow.GetMainWindow();
				cancel = editorForm.ShowDialogAndSaveDocument( __0x5975 );
			}
			else
			{
				base.OnDockWindowCloseRequest( window, out cancel );
			}

			
		}

		protected override void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
			
			if( window is IDocumentWindow docWindow )
				WindowConfig.FromDocumentWindow( docWindow ).Save( e.XmlWriter );
			
		}

		protected override void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
			if( window == null )
			{
				var __0x5976 = new WindowConfig();
				__0x5976.Load( e.XmlReader );

				if( !string.IsNullOrEmpty( __0x5976.RealFileName ) || !string.IsNullOrEmpty( __0x5976.SpecialMode ) )
				{
					var __0x5977 = EditorAPI.CreateDocument( __0x5976.RealFileName, __0x5976.SpecialMode );
					if( __0x5977 == null )
					{
						
						e.Page = null;
						return;
					}

					window = EditorAPI.CreateWindow( __0x5977 );
					AddDockWindowInternal( window, false, e.Page );
				}
				else
				{
					if( __0x5976.Type != null && __0x5976.Type.GetCustomAttribute<RestoreDockWindowAfterEditorReloadAttribute>( true ) != null )
					{
						
						

						var __0x5978 = new DocumentInstance( "", null, "" );
						EditorAPI.Documents.Add( __0x5978 );

						var __0x5979 = (DocumentWindow)__0x5976.Type.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
						window = __0x5979;
						__0x5979.InitDocumentWindow( __0x5978, null, false, null );

						AddDockWindowInternal( window, false, e.Page );
					}
				}

			}
			else
			{
				
			}

			
		}

		public void SaveAdditionalConfig()
		{
			var __0x5980 = EngineConfig.TextBlock;

			var __0x5981 = __0x5980.FindChild( "Docking" );
			if( __0x5981 != null )
				__0x5980.DeleteChild( __0x5981 );

			EditorAPI.GetRestartApplication( out _, out var resetWindowsSettings );
			if( !resetWindowsSettings )
			{
				var __0x5982 = __0x5980.AddChild( "Docking" );

				
				if( dockingControl != null )
				{
					
					var __0x5983 = new ESet<string>();
					foreach( var __0x5997 in dockingControl )
					{
						var __0x5984 = __0x5997 as KryptonDockingEdge;
						if( __0x5984 != null )
						{
							foreach( var __0x5998 in __0x5984 )
							{
								var __0x5985 = __0x5998 as KryptonDockingEdgeAutoHidden;
								if( __0x5985 != null )
								{
									foreach( var __0x5999 in __0x5985 )
									{
										var __0x5986 = __0x5999 as KryptonDockingAutoHiddenGroup;
										if( __0x5986 != null )
										{
											foreach( var __0x6000 in __0x5986.AutoHiddenGroupControl.Pages )
												__0x5983.AddWithCheckAlreadyContained( __0x6000.UniqueName );
										}
									}
								}
							}
						}
					}

					
					var __0x5987 = new Dictionary<string, KryptonPage>();
					foreach( var __0x6001 in DockingManager.Pages )
						__0x5987[ __0x6001.UniqueName ] = __0x6001;

					
					foreach( var __0x6002 in __0x5983 )
					{
						if( __0x5987.TryGetValue( __0x6002, out var page ) )
						{
							var __0x5988 = __0x5982.AddChild( "Page" );
							__0x5988.SetAttribute( "Name", page.UniqueName );
							__0x5988.SetAttribute( "AutoHiddenSlideSize", $"{page.AutoHiddenSlideSize.Width} {page.AutoHiddenSlideSize.Height}" );
						}
					}
				}
			}
		}

		protected override KryptonPage CreatePage( DockWindow window, bool createCloseButton, KryptonPage existPage = null )
		{
			var __0x5989 = base.CreatePage( window, createCloseButton, existPage );

			
			var __0x5990 = EngineConfig.TextBlock;
			var __0x5991 = __0x5990.FindChild( "Docking" );
			if( __0x5991 != null )
			{
				foreach( var __0x6003 in __0x5991.Children )
				{
					if( __0x6003.Name == "Page" )
					{
						var __0x5992 = __0x6003.GetAttribute( "Name" );
						if( __0x5989.UniqueName == __0x5992 )
						{
							try
							{
								var __0x5993 = Vector2I.Parse( __0x6003.GetAttribute( "AutoHiddenSlideSize" ) );
								__0x5989.AutoHiddenSlideSize = new Size( __0x5993.X, __0x5993.Y );
							}
							catch { }

							break;
						}
					}
				}
			}

			return __0x5989;
		}

	}

	
	
	
	
	
	

	
	
	
	

	
	
	

	
	
	
	

}





namespace NeoAxis.Editor
{
	
	
	
	
	class WorkspaceControllerForWindow : WorkspaceController
	{
		
		internal class WindowConfig
		{
			internal string ObjectPath { get; set; }
			internal bool OpenAsSettings { get; set; }

			internal static WindowConfig FromComponent( Component comp )
			{
				return new WindowConfig()
				{
					OpenAsSettings = EditorAPI.GetDocumentWindowClass( comp ) == typeof( ObjectSettingsWindow ), 
					ObjectPath = comp.GetPathFromRoot()
				};
			}

			public static WindowConfig FromDocumentWindow( DocumentWindow window )
			{
				var __0x6009 = (Component)window.ObjectOfWindow;
				return new WindowConfig()
				{
					OpenAsSettings = window.OpenAsSettings,
					ObjectPath = __0x6009.GetPathFromRoot()
				};
			}

			internal void Save( XmlWriter xmlWriter )
			{
				xmlWriter.WriteAttributeString( "ObjPath", ObjectPath );
				if( OpenAsSettings )
					xmlWriter.WriteAttributeString( "OpenAsSettings", OpenAsSettings.ToString() );
			}

			internal void Load( XmlReader xmlReader )
			{
				ObjectPath = xmlReader.GetAttribute( "ObjPath" );
				bool.TryParse( xmlReader.GetAttribute( "OpenAsSettings" ), out bool result );
				OpenAsSettings = result;
			}
		}

		bool __0x6010 = false;

		protected WorkspaceWindow WorkspaceWindow
		{
			get { return (WorkspaceWindow)ownerControl; }
		}

		public DocumentWindow GetMainWindow()
		{
			return GetDockWindows().OfType<DocumentWindow>().FirstOrDefault( __0x6021 => __0x6021.IsMainWindowInWorkspace );
		}

		internal override DockWindow GetSelectedDockWindow()
		{
			
			
			

			var __0x6011 = dockableWorkspaceControl.ActivePage;
			
			if( __0x6011 == null )
				return null;

			var __0x6012 = __0x6011.GetDockWindow();
			return __0x6012;
		}

		public WorkspaceControllerForWindow( Control ownerControl, EditorForm ownerForm )
			: base( ownerControl, ownerForm )
		{
		}

		public override void AddDockWindow( DockWindow window, bool floatingWindow, bool select )
		{
			Debug.Assert( window is DocumentWindow );

			var __0x6013 = (DocumentWindow)window;

			if( __0x6013.Document == null )
				throw new ArgumentNullException( nameof( __0x6013.Document ) );

			if( __0x6013.Document != WorkspaceWindow.Document )
				throw new ArgumentException( nameof( __0x6013.Document ) + " should be equal to the " + nameof( WorkspaceWindow.Document ) );

			base.AddDockWindow( window, floatingWindow, select );
		}

		protected override void OnDockWindowAdded( DockWindow window )
		{
			base.OnDockWindowAdded( window );

			var __0x6014 = (DocumentWindow)window;
			__0x6014.IsWindowInWorkspace = true;
		}

		protected override void OnDockWindowRemoved( DockWindow window )
		{
			Debug.Assert( window is DocumentWindow );
			Debug.Assert( ( (DocumentWindow)window ).IsWindowInWorkspace );

			var __0x6015 = (DocumentWindow)window;
			__0x6015.IsWindowInWorkspace = false;

			if( !__0x6010 & !disposing )
			{
				var __0x6016 = editorForm.WorkspaceController;

				
				if( __0x6015.IsMainWindowInWorkspace )
				{
					
					__0x6016.RemoveDockWindow( WorkspaceWindow, true );
				}
				else
				{
					
					
					bool __0x6017 = dockWindows.Count() == 1;
					if( __0x6017 )
					{
						__0x6010 = true;
						var __0x6018 = dockWindows.First().Value;
						this.RemoveDockWindow( __0x6018, false );

						__0x6016.ReplaceDockWindow( WorkspaceWindow, __0x6018, true, true );

						__0x6010 = false;
					}
				}
			}

			base.OnDockWindowRemoved( window );
		}

		protected override void OnDockWindowSaving( DockWindow window, DockPageSavingEventArgs e )
		{
			
			if( window is DocumentWindow docWindow )
				WindowConfig.FromDocumentWindow( docWindow ).Save( e.XmlWriter );
			
		}

		protected override void OnDockWindowLoading( DockWindow window, DockPageLoadingEventArgs e )
		{
			if( window == null )
			{
				var __0x6019 = new WindowConfig();
				__0x6019.Load( e.XmlReader );

				window = EditorAPI.CreateWindowImpl( WorkspaceWindow.Document, __0x6019.ObjectPath, __0x6019.OpenAsSettings );
				AddDockWindowInternal( window, false, e.Page );
			}
			else
			{
				
			}

			
		}

		protected override void OnDockWindowCloseRequest( DockWindow window, out bool cancel )
		{
			
			var __0x6020 = window as DocumentWindow;
			if( __0x6020 != null && __0x6020.ObjectOfWindow == __0x6020.Document.ResultObject && !__0x6020.OpenAsSettings )
			{
				cancel = true;
				return;
			}

			base.OnDockWindowCloseRequest( window, out cancel );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class WorkspaceWindow : DockWindow, IDocumentWindow
	{
		WorkspaceControllerForWindow __0x6022;

		

		public DocumentInstance Document { get; private set; }

		public bool IsDocumentSaved()
		{
			return !Document.Modified;
		}

		public WorkspaceController WorkspaceController
		{
			get { return __0x6022; }
		}

		public DocumentWindow GetMainWindow()
		{
			return __0x6022.GetMainWindow();
		}

		public DockWindow GetSelectedDockWindow()
		{
			return __0x6022.GetSelectedDockWindow();
		}

		public WorkspaceWindow( EditorForm ownerForm )
		{
			__0x6029();
			__0x6022 = new WorkspaceControllerForWindow( this, ownerForm );

			var __0x6023 = __0x6022.DockingManager.Strings;
			__0x6023.TextTabbedDocument = EditorLocalization.Translate( "Docking", __0x6023.TextTabbedDocument );
			__0x6023.TextAutoHide = EditorLocalization.Translate( "Docking", __0x6023.TextAutoHide );
			__0x6023.TextClose = EditorLocalization.Translate( "Docking", __0x6023.TextClose );
			__0x6023.TextCloseAllButThis = EditorLocalization.Translate( "Docking", __0x6023.TextCloseAllButThis );
			__0x6023.TextDock = EditorLocalization.Translate( "Docking", __0x6023.TextDock );
			__0x6023.TextFloat = EditorLocalization.Translate( "Docking", __0x6023.TextFloat );
			__0x6023.TextHide = EditorLocalization.Translate( "Docking", __0x6023.TextHide );
			__0x6023.TextWindowLocation = EditorLocalization.Translate( "Docking", __0x6023.TextWindowLocation );
		}

		public void Init( DocumentInstance document )
		{
			if( document == null )
				throw new ArgumentNullException( nameof( document ) );

			Document = document;
			UpdateWindowTitle();
		}

		public void InitFromConfig( DocumentInstance document )
		{
			Init( document );

			var __0x6024 = document.ResultComponent.EditorDocumentConfiguration;
			__0x6022.LoadLayoutFromString( __0x6024 );
		}

		protected override string GetResultWindowTitle()
		{
			var __0x6025 = Path.GetFileName( Document.RealFileName );
			if( Document.Modified )
				__0x6025 += "*";

			
			
			
			

			return __0x6025;
		}

		protected override void Dispose( bool disposing )
		{
			__0x6022.Dispose();
			base.Dispose( disposing );
		}

		protected internal override void OnShowTitleContextMenu( KryptonContextMenuItems items )
		{
			Document.OnShowTitleContextMenu( this, items );
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			var __0x6026 = GetSelectedDockWindow() as DocumentWindow;
			if( __0x6026 != null )
				return new ObjectsInFocus( __0x6026, __0x6026.SelectedObjects );
			return null;
		}
	}
}
namespace NeoAxis.Editor
{
	partial class WorkspaceWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x6027 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6029()
		{
			this.__0x6028 = new LowProfileDockableWorkspace();
			((System.ComponentModel.ISupportInitialize)(this.__0x6028)).BeginInit();
			this.SuspendLayout();
			
			
			
			this.__0x6028.AutoHiddenHost = false;
			this.__0x6028.CompactFlags = ((ComponentFactory.Krypton.Workspace.CompactFlags)(((ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptyCells | ComponentFactory.Krypton.Workspace.CompactFlags.RemoveEmptySequences) 
            | ComponentFactory.Krypton.Workspace.CompactFlags.PromoteLeafs)));
			this.__0x6028.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x6028.Location = new System.Drawing.Point(0, 0);
			this.__0x6028.Name = "kryptonDockableWorkspace";
			
			
			
			this.__0x6028.Root.UniqueName = "4A87E34386084E14BC81ED10FBED4D99";
			this.__0x6028.Root.WorkspaceControl = this.__0x6028;
			this.__0x6028.ShowMaximizeButton = false;
			this.__0x6028.Size = new System.Drawing.Size(266, 139);
			this.__0x6028.TabIndex = 1;
			this.__0x6028.TabStop = true;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x6028);
			this.Name = "WorkspaceWindow";
			((System.ComponentModel.ISupportInitialize)(this.__0x6028)).EndInit();
			this.ResumeLayout(false);

		}

		#endregion

		private ComponentFactory.Krypton.Docking.KryptonDockableWorkspace __0x6028;
	}
}







namespace NeoAxis.Editor
{
	class ColorGradientControl : UserControl
	{
		private System.ComponentModel.Container __0x6030 = null;

		int __0x6031 = -1;
		int __0x6032 = -1;

		const int __0x6033 = 7;
		const int __0x6034 = ( __0x6033 - 1 ) / 2;

		int[] __0x6035;

		public int Value
		{
			get { return GetValue( 0 ); }
			set { SetValue( 0, value ); }
		}

		public int Count
		{
			get { return __0x6035.Length; }

			set
			{
				if( value < 0 || value > 16 )
					throw new ArgumentOutOfRangeException( "value", value, "Count must be between 0 and 16" );

				__0x6035 = new int[ value ];

				if( value > 1 )
				{
					for( int __0x6036 = 0; __0x6036 < value; __0x6036++ )
						__0x6035[ __0x6036 ] = __0x6036 * 255 / ( value - 1 );
				}
				else if( value == 1 )
				{
					__0x6035[ 0 ] = 128;
				}

				OnValueChanged(  );
				Invalidate();
			}
		}

		public int GetValue( int index )
		{
			if( index < 0 || index >= __0x6035.Length )
				throw new ArgumentOutOfRangeException( "index", index, "Index must be within the bounds of the array" );
			return __0x6035[ index ];
		}

		public void SetValue( int index, int val )
		{
			int __0x6037 = -1;
			int __0x6038 = 256;

			if( index < 0 || index >= __0x6035.Length )
				throw new ArgumentOutOfRangeException( "index", index, "Index must be within the bounds of the array" );

			if( index - 1 >= 0 )
				__0x6037 = __0x6035[ index - 1 ];
			if( index + 1 < __0x6035.Length )
				__0x6038 = __0x6035[ index + 1 ];

			if( __0x6035[ index ] != val )
			{
				__0x6035[ index ] = val;
				if( __0x6035[ index ] < __0x6037 + 1 )
					__0x6035[ index ] = __0x6037 + 1;
				if( __0x6035[ index ] > __0x6038 - 1 )
					__0x6035[ index ] = __0x6038 - 1;
				OnValueChanged();
				Invalidate();
			}

			Update();
		}

		public event EventHandler ValueChanged;
		protected virtual void OnValueChanged(  )
		{
			if( ValueChanged != null )
				ValueChanged( this, EventArgs.Empty );
		}

		private Color __0x6039;
		public Color TopColor
		{
			get { return __0x6039; }
			set
			{
				if( __0x6039 != value )
				{
					__0x6039 = value;
					Invalidate();
				}
			}
		}

		private Color __0x6040;
		public Color BottomColor
		{
			get { return __0x6040; }
			set
			{
				if( __0x6040 != value )
				{
					__0x6040 = value;
					Invalidate();
				}
			}
		}

		public ColorGradientControl()
		{
			
			__0x6067();

			this.ResizeRedraw = true;
			this.Count = 1;
		}

		private void __0x6062( Graphics __0x6068 )
		{
#if !ANDROID
			System.Drawing.Rectangle __0x6041;

			
			using( LinearGradientBrush __0x6042 = new LinearGradientBrush( this.ClientRectangle, __0x6039, __0x6040, 90, false ) )
			{
				__0x6041 = ClientRectangle;
				__0x6041.Inflate( -__0x6033, -__0x6034 );
				__0x6068.FillRectangle( __0x6042, __0x6041 );
			}

			using( SolidBrush __0x6043 = new SolidBrush( BackColor ) )
			{
				__0x6068.FillRectangle( __0x6043, new System.Drawing.Rectangle( 0, 0, __0x6033, ClientRectangle.Bottom ) );
				__0x6068.FillRectangle( __0x6043, new System.Drawing.Rectangle( ClientRectangle.Width - __0x6033, 0, __0x6033, ClientRectangle.Bottom ) );
				__0x6068.FillRectangle( __0x6043, new System.Drawing.Rectangle( 0, 0, ClientRectangle.Width, __0x6034 ) );
				__0x6068.FillRectangle( __0x6043, new System.Drawing.Rectangle( 0, ClientRectangle.Height - __0x6034, ClientRectangle.Width, __0x6034 ) );
			}

			
			for( int __0x6044 = 0; __0x6044 < __0x6035.Length; __0x6044++ )
			{
				int __0x6045 = __0x6064( __0x6035[ __0x6044 ] );
				Brush __0x6046;

				
				
				
				
				
				
				if( EditorAPI.DarkTheme )
					__0x6046 = new SolidBrush( Color.FromArgb( 140, 140, 140 ) );
				else
					__0x6046 = Brushes.Black;
				

				__0x6068.SmoothingMode = SmoothingMode.AntiAlias;

				Point __0x6047 = new Point( 0, __0x6045 - __0x6034 );
				Point __0x6048 = new Point( __0x6033 - 1, __0x6045 );
				Point __0x6049 = new Point( 0, __0x6045 + __0x6034 );
				__0x6068.FillPolygon( __0x6046, new Point[] { __0x6047, __0x6048, __0x6049, __0x6047 } );

				Point __0x6050 = new Point( Width - 1 - __0x6047.X, __0x6047.Y );
				Point __0x6051 = new Point( Width - 1 - __0x6048.X, __0x6048.Y );
				Point __0x6052 = new Point( Width - 1 - __0x6049.X, __0x6049.Y );
				__0x6068.FillPolygon( __0x6046, new Point[] { __0x6050, __0x6051, __0x6052, __0x6050 } );

				if( EditorAPI.DarkTheme )
					__0x6046.Dispose();
			}
#endif 
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );
			__0x6062( e.Graphics );
		}

		protected override void OnPaintBackground( PaintEventArgs pevent )
		{
			__0x6062( pevent.Graphics );
		}

		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if( __0x6030 != null )
				{
					__0x6030.Dispose();
					__0x6030 = null;
				}
			}
			base.Dispose( disposing );
		}

		int __0x6063( int __0x6069 )
		{
			return ( ( ( Height - __0x6033 ) - ( __0x6069 - __0x6034 ) ) * 255 ) / ( Height - __0x6033 );
		}

		int __0x6064( int __0x6070 )
		{
			return __0x6034 + ( ( Height - __0x6033 ) - ( ( ( __0x6070 * ( Height - __0x6033 ) ) / 255 ) ) );
		}

		private int __0x6065( int __0x6071 )
		{
			int __0x6053 = -1, __0x6054 = int.MaxValue;
			int __0x6055 = __0x6063( __0x6071 );

			for( int __0x6056 = 0; __0x6056 < __0x6035.Length; __0x6056++ )
			{
				int __0x6057 = Math.Abs( __0x6035[ __0x6056 ] - __0x6055 );
				if( __0x6057 < __0x6054 )
				{
					__0x6054 = __0x6057;
					__0x6053 = __0x6056;
				}
			}
			return __0x6053;
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			base.OnMouseDown( e );

			if( e.Button == MouseButtons.Left )
			{
				__0x6031 = __0x6065( e.Y );
				Invalidate();
				OnMouseMove( e );
			}
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			if( e.Button == MouseButtons.Left )
			{
				OnMouseMove( e );
				__0x6031 = -1;
				Invalidate();
			}
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			if( __0x6031 >= 0 )
			{
				this.SetValue( __0x6031, __0x6063( e.Y ) );
			}
			else
			{
				int __0x6058 = __0x6032;
				__0x6032 = __0x6065( e.Y );

				if( __0x6032 != __0x6058 )
				{
					this.__0x6066( __0x6058 );
					this.__0x6066( __0x6032 );
				}
			}
		}

		protected override void OnMouseLeave( EventArgs e )
		{
			int __0x6059 = __0x6032;
			__0x6032 = -1;
			this.__0x6066( __0x6059 );
		}

		private void __0x6066( int __0x6072 )
		{
			if( __0x6072 < 0 || __0x6072 >= __0x6035.Length )
			{
				return;
			}

			int __0x6060 = __0x6064( __0x6035[ __0x6072 ] );
			System.Drawing.Rectangle __0x6061 = new System.Drawing.Rectangle( 0, __0x6060 - __0x6034, this.Width, __0x6033 );

			this.Invalidate( __0x6061, true );
		}

		#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6067()
		{
			__0x6030 = new System.ComponentModel.Container();
		}
		#endregion
	}
}





namespace NeoAxis.Editor
{
	

	public partial class ColorValuePoweredSelectControl : HCDropDownControl
	{
		HCItemProperty __0x6073;
		bool __0x6074;
		bool __0x6075;
		ApplicableRangeColorValuePowerAttribute __0x6076;
		bool __0x6077;

		bool __0x6078;
		bool __0x6079;

		HCItemProperty __0x6080;

		KryptonButton __0x6081;
		KryptonButton __0x6082;

		

		public ColorValuePoweredSelectControl()
		{
			__0x6303();
			AddOkCancelButtons( out __0x6081, out __0x6082 );
			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public ColorValuePoweredSelectControl( HCItemProperty itemProperty )
		{
			__0x6303();
			AddOkCancelButtons( out __0x6081, out __0x6082 );

			this.__0x6073 = itemProperty;

			__0x6075 = ReferenceUtility.GetUnreferencedType( itemProperty.Property.Type.GetNetType() ) == typeof( ColorValuePowered );

			var __0x6083 = itemProperty.GetValues();
			if( __0x6083 == null )
				return;

			
			var __0x6084 = __0x6083[ 0 ];

			ColorValuePowered __0x6085;

			bool __0x6086;
			{
				var __0x6087 = itemProperty.Property.Type.GetNetType();
				bool __0x6088 = ReferenceUtility.IsReferenceType( __0x6087 );

				bool __0x6089 = false;
				IReference __0x6090 = null;
				if( __0x6088 && __0x6084 != null )
				{
					__0x6090 = (IReference)__0x6084;
					__0x6089 = !string.IsNullOrEmpty( __0x6090.GetByReference );
				}

				__0x6086 = __0x6089;
			}

			if( __0x6075 )
				__0x6085 = (ColorValuePowered)ReferenceUtility.GetUnreferencedValue( __0x6084 );
			else
			{
				var __0x6091 = (ColorValue)ReferenceUtility.GetUnreferencedValue( __0x6084 );
				__0x6085 = new ColorValuePowered( __0x6091.Red, __0x6091.Green, __0x6091.Blue, __0x6091.Alpha, 1 );
			}

			
			
			

			
			
			
			
			
			
			
			
			
			
			

			bool __0x6092 = itemProperty.Property.GetCustomAttributes( typeof( ColorValueNoAlphaAttribute ), true ).Length != 0;

			ApplicableRangeColorValuePowerAttribute __0x6093 = null;
			if( __0x6075 )
			{
				var __0x6094 = itemProperty.Property.GetCustomAttributes( typeof( ApplicableRangeColorValuePowerAttribute ), true );
				if( __0x6094.Length != 0 )
					__0x6093 = (ApplicableRangeColorValuePowerAttribute)__0x6094[ 0 ];
			}

			Init( __0x6085, __0x6092, __0x6075, __0x6093, __0x6086 );

			__0x6080 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x6080.SaveValuesToRestore();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public void Init( ColorValuePowered value, bool noAlpha, bool powered, ApplicableRangeColorValuePowerAttribute powerRange, bool readOnly )
		{
			this.__0x6074 = noAlpha;
			this.__0x6075 = powered;
			if( powered && powerRange == null )
				powerRange = new ApplicableRangeColorValuePowerAttribute( 0, 100, RangeAttribute.ConvenientDistributionEnum.Exponential, 2 );
			this.__0x6076 = powerRange;
			this.__0x6077 = readOnly;

			__0x6079 = true;

			__0x6294( value.Color, null );

			if( powered )
			{
				__0x6136.Minimum = (decimal)powerRange.Minimum;
				__0x6136.Maximum = (decimal)powerRange.Maximum;

				powerRange.GetTrackBarMinMax( false, out int min, out int max );
				__0x6138.Minimum = min;
				__0x6138.Maximum = max;
				__0x6138.LargeChange = ( __0x6138.Maximum - __0x6138.Minimum ) / 10;
				__0x6138.SmallChange = ( __0x6138.Maximum - __0x6138.Minimum ) / 100;

				__0x6295( value.Power, null );
			}
			else
			{
				__0x6136.Enabled = false;
				__0x6138.Enabled = false;
				__0x6137.Enabled = false;

				__0x6136.Minimum = 0;
				__0x6136.Maximum = 1;
				__0x6136.Value = 1;
				__0x6138.Minimum = 0;
				__0x6138.Maximum = 1;
				__0x6138.Value = 1;
			}

			
			if( noAlpha )
			{
				__0x6130.Enabled = false;
				__0x6128.Enabled = false;
				__0x6129.Enabled = false;
			}

			__0x6298();

			if( readOnly )
			{
				__0x6134.Enabled = false;
				__0x6135.Enabled = false;

				__0x6123.Enabled = false;
				__0x6124.Enabled = false;
				__0x6126.Enabled = false;
				__0x6130.Enabled = false;
				__0x6136.Enabled = false;
				
				
				
				
				
				

				__0x6128.Enabled = false;
				__0x6131.Enabled = false;
				__0x6132.Enabled = false;
				__0x6133.Enabled = false;
				__0x6138.Enabled = false;
			}

			__0x6123.TextChanged += __0x6297;
			__0x6124.TextChanged += __0x6297;
			__0x6126.TextChanged += __0x6297;
			__0x6130.TextChanged += __0x6297;
			__0x6136.TextChanged += __0x6297;

			__0x6079 = false;
		}

		void __0x6294( ColorValue __0x6304, object __0x6305 )
		{
			HSVColor __0x6095 = HSVColor.FromRGB( __0x6304 );

			if( __0x6305 != __0x6134 )
				__0x6134.HsvColor = __0x6095;
			if( __0x6305 != __0x6135 )
			{
				__0x6135.Value = (int)( __0x6095.Value * 255 );
				__0x6135.TopColor = new HSVColor( __0x6095.Hue, __0x6095.Saturation, 1 ).ToColor();
				__0x6135.BottomColor = Color.Black;
			}

			if( __0x6305 != __0x6123 )
				__0x6123.Value = (decimal)MathEx.Saturate( __0x6304.Red ) * 255;
			if( __0x6305 != __0x6124 )
				__0x6124.Value = (decimal)MathEx.Saturate( __0x6304.Green ) * 255;
			if( __0x6305 != __0x6126 )
				__0x6126.Value = (decimal)MathEx.Saturate( __0x6304.Blue ) * 255;
			if( __0x6305 != __0x6130 )
				__0x6130.Value = (decimal)( MathEx.Saturate( __0x6074 ? 1 : __0x6304.Alpha ) * 255 );

			if( __0x6305 != __0x6133 )
				__0x6133.Value = (int)( MathEx.Saturate( __0x6304.Red ) * 1000 );
			if( __0x6305 != __0x6132 )
				__0x6132.Value = (int)( MathEx.Saturate( __0x6304.Green ) * 1000 );
			if( __0x6305 != __0x6131 )
				__0x6131.Value = (int)( MathEx.Saturate( __0x6304.Blue ) * 1000 );
			if( __0x6305 != __0x6128 )
				__0x6128.Value = (int)( MathEx.Saturate( __0x6074 ? 1 : __0x6304.Alpha ) * 1000 );
		}

		void __0x6295( double __0x6306, object __0x6307 )
		{
			if( __0x6307 != __0x6136 )
				__0x6136.Value = (decimal)MathEx.Clamp( __0x6306, __0x6076.Minimum, __0x6076.Maximum );
			if( __0x6307 != __0x6138 )
				__0x6138.Value = __0x6076.GetTrackBarValue( false, __0x6306 );
		}

		[Browsable( false )]
		public bool ValueWasChanged
		{
			get { return __0x6078; }
		}

		[Browsable( false )]
		public ColorValuePowered CurrentValue
		{
			get
			{
				return new ColorValuePowered(
					(float)( __0x6123.TextValue / 255 ),
					(float)( __0x6124.TextValue / 255 ),
					(float)( __0x6126.TextValue / 255 ),
					(float)( __0x6130.TextValue / 255 ),
					(float)__0x6136.TextValue );
			}
		}

		private void __0x6296( object __0x6308, EventArgs __0x6309 )
		{
			__0x6297( __0x6308, __0x6309 );
		}

		private void __0x6297( object __0x6310, EventArgs __0x6311 )
		{
			if( __0x6079 )
				return;

			__0x6079 = true;

			__0x6078 = true;

			if( __0x6310 == __0x6134 || __0x6310 == __0x6135 ||
				__0x6310 == __0x6123 || __0x6310 == __0x6124 || __0x6310 == __0x6126 || __0x6310 == __0x6130 ||
				__0x6310 == __0x6133 || __0x6310 == __0x6132 || __0x6310 == __0x6131 || __0x6310 == __0x6128 )
			{
				ColorValue __0x6096 = CurrentValue.Color;

				if( __0x6310 == __0x6134 || __0x6310 == __0x6135 )
				{
					HSVColor __0x6097 = __0x6134.HsvColor;
					__0x6097.Value = (double)__0x6135.Value / 255.0;

					var __0x6098 = __0x6097.ToColorValue();
					__0x6096.Red = __0x6098.Red;
					__0x6096.Green = __0x6098.Green;
					__0x6096.Blue = __0x6098.Blue;
				}

				if( __0x6310 == __0x6133 )
					__0x6096.Red = (float)( (double)__0x6133.Value / 1000 );
				if( __0x6310 == __0x6132 )
					__0x6096.Green = (float)( (double)__0x6132.Value / 1000 );
				if( __0x6310 == __0x6131 )
					__0x6096.Blue = (float)( (double)__0x6131.Value / 1000 );
				if( __0x6310 == __0x6128 )
					__0x6096.Alpha = (float)( (double)__0x6128.Value / 1000 );

				__0x6294( __0x6096, __0x6310 );
			}

			if( __0x6075 && ( __0x6310 == __0x6136 || __0x6310 == __0x6138 ) )
			{
				double __0x6099 = CurrentValue.Power;

				if( __0x6310 == __0x6138 )
					__0x6099 = __0x6076.GetValueFromTrackBar( false, __0x6138.Value );

				__0x6295( __0x6099, __0x6310 );
			}

			if( __0x6073 != null && __0x6073.CanEditValue() )
			{
				if( __0x6075 )
					__0x6073.SetValue( CurrentValue, false );
				else
					__0x6073.SetValue( CurrentValue.ToColorValue(), false );
			}

			__0x6300();

			__0x6079 = false;
		}

		static Tuple<string, string>[] __0x6100 =
		{
			Tuple.Create( "AliceBlue", "F0F8FF" ),
			Tuple.Create( "AntiqueWhite", "FAEBD7" ),
			Tuple.Create( "Aqua", "00FFFF" ),
			Tuple.Create( "Aquamarine", "7FFFD4" ),
			Tuple.Create( "Azure", "F0FFFF" ),
			Tuple.Create( "Beige", "F5F5DC" ),
			Tuple.Create( "Bisque", "FFE4C4" ),
			Tuple.Create( "Black", "000000" ),
			Tuple.Create( "BlanchedAlmond", "FFEBCD" ),
			Tuple.Create( "Blue", "0000FF" ),
			Tuple.Create( "BlueViolet", "8A2BE2" ),
			Tuple.Create( "Brown", "A52A2A" ),
			Tuple.Create( "BurlyWood", "DEB887" ),
			Tuple.Create( "CadetBlue", "5F9EA0" ),
			Tuple.Create( "Chartreuse", "7FFF00" ),
			Tuple.Create( "Chocolate", "D2691E" ),
			Tuple.Create( "Coral", "FF7F50" ),
			Tuple.Create( "CornflowerBlue", "6495ED" ),
			Tuple.Create( "Cornsilk", "FFF8DC" ),
			Tuple.Create( "Crimson", "DC143C" ),
			Tuple.Create( "Cyan", "00FFFF" ),
			Tuple.Create( "DarkBlue", "00008B" ),
			Tuple.Create( "DarkCyan", "008B8B" ),
			Tuple.Create( "DarkGoldenRod", "B8860B" ),
			Tuple.Create( "DarkGray", "A9A9A9" ),
			Tuple.Create( "DarkGrey", "A9A9A9" ),
			Tuple.Create( "DarkGreen", "006400" ),
			Tuple.Create( "DarkKhaki", "BDB76B" ),
			Tuple.Create( "DarkMagenta", "8B008B" ),
			Tuple.Create( "DarkOliveGreen", "556B2F" ),
			Tuple.Create( "DarkOrange", "FF8C00" ),
			Tuple.Create( "DarkOrchid", "9932CC" ),
			Tuple.Create( "DarkRed", "8B0000" ),
			Tuple.Create( "DarkSalmon", "E9967A" ),
			Tuple.Create( "DarkSeaGreen", "8FBC8F" ),
			Tuple.Create( "DarkSlateBlue", "483D8B" ),
			Tuple.Create( "DarkSlateGray", "2F4F4F" ),
			Tuple.Create( "DarkSlateGrey", "2F4F4F" ),
			Tuple.Create( "DarkTurquoise", "00CED1" ),
			Tuple.Create( "DarkViolet", "9400D3" ),
			Tuple.Create( "DeepPink", "FF1493" ),
			Tuple.Create( "DeepSkyBlue", "00BFFF" ),
			Tuple.Create( "DimGray", "696969" ),
			Tuple.Create( "DimGrey", "696969" ),
			Tuple.Create( "DodgerBlue", "1E90FF" ),
			Tuple.Create( "FireBrick", "B22222" ),
			Tuple.Create( "FloralWhite", "FFFAF0" ),
			Tuple.Create( "ForestGreen", "228B22" ),
			Tuple.Create( "Fuchsia", "FF00FF" ),
			Tuple.Create( "Gainsboro", "DCDCDC" ),
			Tuple.Create( "GhostWhite", "F8F8FF" ),
			Tuple.Create( "Gold", "FFD700" ),
			Tuple.Create( "GoldenRod", "DAA520" ),
			Tuple.Create( "Gray", "808080" ),
			Tuple.Create( "Grey", "808080" ),
			Tuple.Create( "Green", "008000" ),
			Tuple.Create( "GreenYellow", "ADFF2F" ),
			Tuple.Create( "HoneyDew", "F0FFF0" ),
			Tuple.Create( "HotPink", "FF69B4" ),
			Tuple.Create( "IndianRed", "CD5C5C" ),
			Tuple.Create( "Indigo", "4B0082" ),
			Tuple.Create( "Ivory", "FFFFF0" ),
			Tuple.Create( "Khaki", "F0E68C" ),
			Tuple.Create( "Lavender", "E6E6FA" ),
			Tuple.Create( "LavenderBlush", "FFF0F5" ),
			Tuple.Create( "LawnGreen", "7CFC00" ),
			Tuple.Create( "LemonChiffon", "FFFACD" ),
			Tuple.Create( "LightBlue", "ADD8E6" ),
			Tuple.Create( "LightCoral", "F08080" ),
			Tuple.Create( "LightCyan", "E0FFFF" ),
			Tuple.Create( "LightGoldenRodYellow", "FAFAD2" ),
			Tuple.Create( "LightGray", "D3D3D3" ),
			Tuple.Create( "LightGrey", "D3D3D3" ),
			Tuple.Create( "LightGreen", "90EE90" ),
			Tuple.Create( "LightPink", "FFB6C1" ),
			Tuple.Create( "LightSalmon", "FFA07A" ),
			Tuple.Create( "LightSeaGreen", "20B2AA" ),
			Tuple.Create( "LightSkyBlue", "87CEFA" ),
			Tuple.Create( "LightSlateGray", "778899" ),
			Tuple.Create( "LightSlateGrey", "778899" ),
			Tuple.Create( "LightSteelBlue", "B0C4DE" ),
			Tuple.Create( "LightYellow", "FFFFE0" ),
			Tuple.Create( "Lime", "00FF00" ),
			Tuple.Create( "LimeGreen", "32CD32" ),
			Tuple.Create( "Linen", "FAF0E6" ),
			Tuple.Create( "Magenta", "FF00FF" ),
			Tuple.Create( "Maroon", "800000" ),
			Tuple.Create( "MediumAquaMarine", "66CDAA" ),
			Tuple.Create( "MediumBlue", "0000CD" ),
			Tuple.Create( "MediumOrchid", "BA55D3" ),
			Tuple.Create( "MediumPurple", "9370DB" ),
			Tuple.Create( "MediumSeaGreen", "3CB371" ),
			Tuple.Create( "MediumSlateBlue", "7B68EE" ),
			Tuple.Create( "MediumSpringGreen", "00FA9A" ),
			Tuple.Create( "MediumTurquoise", "48D1CC" ),
			Tuple.Create( "MediumVioletRed", "C71585" ),
			Tuple.Create( "MidnightBlue", "191970" ),
			Tuple.Create( "MintCream", "F5FFFA" ),
			Tuple.Create( "MistyRose", "FFE4E1" ),
			Tuple.Create( "Moccasin", "FFE4B5" ),
			Tuple.Create( "NavajoWhite", "FFDEAD" ),
			Tuple.Create( "Navy", "000080" ),
			Tuple.Create( "OldLace", "FDF5E6" ),
			Tuple.Create( "Olive", "808000" ),
			Tuple.Create( "OliveDrab", "6B8E23" ),
			Tuple.Create( "Orange", "FFA500" ),
			Tuple.Create( "OrangeRed", "FF4500" ),
			Tuple.Create( "Orchid", "DA70D6" ),
			Tuple.Create( "PaleGoldenRod", "EEE8AA" ),
			Tuple.Create( "PaleGreen", "98FB98" ),
			Tuple.Create( "PaleTurquoise", "AFEEEE" ),
			Tuple.Create( "PaleVioletRed", "DB7093" ),
			Tuple.Create( "PapayaWhip", "FFEFD5" ),
			Tuple.Create( "PeachPuff", "FFDAB9" ),
			Tuple.Create( "Peru", "CD853F" ),
			Tuple.Create( "Pink", "FFC0CB" ),
			Tuple.Create( "Plum", "DDA0DD" ),
			Tuple.Create( "PowderBlue", "B0E0E6" ),
			Tuple.Create( "Purple", "800080" ),
			Tuple.Create( "RebeccaPurple", "663399" ),
			Tuple.Create( "Red", "FF0000" ),
			Tuple.Create( "RosyBrown", "BC8F8F" ),
			Tuple.Create( "RoyalBlue", "4169E1" ),
			Tuple.Create( "SaddleBrown", "8B4513" ),
			Tuple.Create( "Salmon", "FA8072" ),
			Tuple.Create( "SandyBrown", "F4A460" ),
			Tuple.Create( "SeaGreen", "2E8B57" ),
			Tuple.Create( "SeaShell", "FFF5EE" ),
			Tuple.Create( "Sienna", "A0522D" ),
			Tuple.Create( "Silver", "C0C0C0" ),
			Tuple.Create( "SkyBlue", "87CEEB" ),
			Tuple.Create( "SlateBlue", "6A5ACD" ),
			Tuple.Create( "SlateGray", "708090" ),
			Tuple.Create( "SlateGrey", "708090" ),
			Tuple.Create( "Snow", "FFFAFA" ),
			Tuple.Create( "SpringGreen", "00FF7F" ),
			Tuple.Create( "SteelBlue", "4682B4" ),
			Tuple.Create( "Tan", "D2B48C" ),
			Tuple.Create( "Teal", "008080" ),
			Tuple.Create( "Thistle", "D8BFD8" ),
			Tuple.Create( "Tomato", "FF6347" ),
			Tuple.Create( "Turquoise", "40E0D0" ),
			Tuple.Create( "Violet", "EE82EE" ),
			Tuple.Create( "Wheat", "F5DEB3" ),
			Tuple.Create( "White", "FFFFFF" ),
			Tuple.Create( "WhiteSmoke", "F5F5F5" ),
			Tuple.Create( "Yellow", "FFFF00" ),
			Tuple.Create( "YellowGreen", "9ACD32")
		};

		void __0x6298()
		{
			List<(string, ColorValue)> __0x6101 = new List<(string, ColorValue)>();
			ESet<ColorValue> __0x6102 = new ESet<ColorValue>();
			foreach( var __0x6292 in __0x6100 )
			{
				var __0x6103 = __0x6292.Item1;

				var __0x6104 = __0x6292.Item2;
				int __0x6105 = int.Parse( __0x6104.Substring( 0, 2 ), System.Globalization.NumberStyles.HexNumber );
				int __0x6106 = int.Parse( __0x6104.Substring( 2, 2 ), System.Globalization.NumberStyles.HexNumber );
				int __0x6107 = int.Parse( __0x6104.Substring( 4, 2 ), System.Globalization.NumberStyles.HexNumber );
				ColorValue __0x6108 = new ColorValue( Color.FromArgb( __0x6105, __0x6106, __0x6107 ) );

				if( !__0x6102.Contains( __0x6108 ) )
				{
					__0x6102.Add( __0x6108 );

					__0x6101.Add( (__0x6103, __0x6108) );
				}
			}

			for( int __0x6109 = 0; __0x6109 < __0x6101.Count; __0x6109++ )
			{
				var __0x6110 = __0x6101[ __0x6109 ];
				string __0x6111 = __0x6110.Item1;
				var __0x6112 = __0x6110.Item2;

				var __0x6113 = Controls.Find( $"button{__0x6109}", false );
				if( __0x6113.Length != 0 )
				{
					Button __0x6114 = (Button)__0x6113[ 0 ];

					__0x6114.Enabled = !__0x6077;
					__0x6114.BackColor = __0x6112.ToColor();
					__0x6114.Tag = __0x6112;

					__0x6114.Click += __0x6299;

					
				}
			}

			__0x6300();
		}

		private void __0x6299( object __0x6312, EventArgs __0x6313 )
		{
			Button __0x6115 = (Button)__0x6312;
			if( __0x6115.Tag == null )
				return;

			ColorValue __0x6116 = (ColorValue)__0x6115.Tag;

			__0x6079 = true;
			__0x6123.Value = (decimal)( __0x6116.Red * 255 );
			__0x6124.Value = (decimal)( __0x6116.Green * 255 );
			__0x6126.Value = (decimal)( __0x6116.Blue * 255 );
			__0x6079 = false;
			__0x6297( __0x6126, null );

			__0x6300();
		}

		void __0x6300()
		{
			var __0x6117 = new ColorValue( CurrentValue.Red, CurrentValue.Green, CurrentValue.Blue );

			foreach( var __0x6293 in Controls )
			{
				Button __0x6118 = __0x6293 as Button;
				if( __0x6118 != null )
				{
					if( __0x6118.Tag != null && __0x6118.Tag is ColorValue )
					{
						ColorValue __0x6119 = (ColorValue)__0x6118.Tag;

						if( __0x6119.Equals( __0x6117, .001f ) )
							__0x6118.Image = EditorResourcesCache.GetImage( "Check_12" );
						else
							__0x6118.Image = null;
					}
				}
			}
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			if( __0x6078 )
				__0x6080.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x6078 )
				__0x6080.RestoreSavedOldValues();
		}

		private void __0x6301( object __0x6314, MouseEventArgs __0x6315 )
		{
			
			
		}

		private void __0x6302( object __0x6316, EventArgs __0x6317 )
		{
			
			
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x6120 = keyData & Keys.KeyCode;

			if( __0x6120 == Keys.Return )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x6120 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class ColorValuePoweredSelectControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x6121 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x6121 != null ) )
			{
				__0x6121.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6303()
		{
			this.__0x6122 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x6123 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6124 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6125 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x6126 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6127 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x6128 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6129 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x6130 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6131 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6132 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6133 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6135 = new NeoAxis.Editor.ColorGradientControl();
			this.__0x6134 = new NeoAxis.Editor.ColorWheel();
			this.__0x6136 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6137 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x6138 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6139 = new System.Windows.Forms.Button();
			this.__0x6140 = new System.Windows.Forms.Button();
			this.__0x6141 = new System.Windows.Forms.Button();
			this.__0x6142 = new System.Windows.Forms.Button();
			this.__0x6143 = new System.Windows.Forms.Button();
			this.__0x6144 = new System.Windows.Forms.Button();
			this.__0x6145 = new System.Windows.Forms.Button();
			this.__0x6146 = new System.Windows.Forms.Button();
			this.__0x6147 = new System.Windows.Forms.Button();
			this.__0x6148 = new System.Windows.Forms.Button();
			this.__0x6149 = new System.Windows.Forms.Button();
			this.__0x6150 = new System.Windows.Forms.Button();
			this.__0x6151 = new System.Windows.Forms.Button();
			this.__0x6152 = new System.Windows.Forms.Button();
			this.__0x6153 = new System.Windows.Forms.Button();
			this.__0x6154 = new System.Windows.Forms.Button();
			this.__0x6155 = new System.Windows.Forms.Button();
			this.__0x6156 = new System.Windows.Forms.Button();
			this.__0x6157 = new System.Windows.Forms.Button();
			this.__0x6158 = new System.Windows.Forms.Button();
			this.__0x6159 = new System.Windows.Forms.Button();
			this.__0x6160 = new System.Windows.Forms.Button();
			this.__0x6161 = new System.Windows.Forms.Button();
			this.__0x6162 = new System.Windows.Forms.Button();
			this.__0x6163 = new System.Windows.Forms.Button();
			this.__0x6164 = new System.Windows.Forms.Button();
			this.__0x6165 = new System.Windows.Forms.Button();
			this.__0x6166 = new System.Windows.Forms.Button();
			this.__0x6167 = new System.Windows.Forms.Button();
			this.__0x6168 = new System.Windows.Forms.Button();
			this.__0x6169 = new System.Windows.Forms.Button();
			this.__0x6170 = new System.Windows.Forms.Button();
			this.__0x6171 = new System.Windows.Forms.Button();
			this.__0x6172 = new System.Windows.Forms.Button();
			this.__0x6173 = new System.Windows.Forms.Button();
			this.__0x6174 = new System.Windows.Forms.Button();
			this.__0x6175 = new System.Windows.Forms.Button();
			this.__0x6176 = new System.Windows.Forms.Button();
			this.__0x6177 = new System.Windows.Forms.Button();
			this.__0x6178 = new System.Windows.Forms.Button();
			this.__0x6179 = new System.Windows.Forms.Button();
			this.__0x6180 = new System.Windows.Forms.Button();
			this.__0x6181 = new System.Windows.Forms.Button();
			this.__0x6182 = new System.Windows.Forms.Button();
			this.__0x6183 = new System.Windows.Forms.Button();
			this.__0x6184 = new System.Windows.Forms.Button();
			this.__0x6185 = new System.Windows.Forms.Button();
			this.__0x6186 = new System.Windows.Forms.Button();
			this.__0x6187 = new System.Windows.Forms.Button();
			this.__0x6188 = new System.Windows.Forms.Button();
			this.__0x6189 = new System.Windows.Forms.Button();
			this.__0x6190 = new System.Windows.Forms.Button();
			this.__0x6191 = new System.Windows.Forms.Button();
			this.__0x6192 = new System.Windows.Forms.Button();
			this.__0x6193 = new System.Windows.Forms.Button();
			this.__0x6194 = new System.Windows.Forms.Button();
			this.__0x6195 = new System.Windows.Forms.Button();
			this.__0x6196 = new System.Windows.Forms.Button();
			this.__0x6197 = new System.Windows.Forms.Button();
			this.__0x6198 = new System.Windows.Forms.Button();
			this.__0x6199 = new System.Windows.Forms.Button();
			this.__0x6200 = new System.Windows.Forms.Button();
			this.__0x6201 = new System.Windows.Forms.Button();
			this.__0x6202 = new System.Windows.Forms.Button();
			this.__0x6203 = new System.Windows.Forms.Button();
			this.__0x6204 = new System.Windows.Forms.Button();
			this.__0x6205 = new System.Windows.Forms.Button();
			this.__0x6206 = new System.Windows.Forms.Button();
			this.__0x6207 = new System.Windows.Forms.Button();
			this.__0x6208 = new System.Windows.Forms.Button();
			this.__0x6209 = new System.Windows.Forms.Button();
			this.__0x6210 = new System.Windows.Forms.Button();
			this.__0x6211 = new System.Windows.Forms.Button();
			this.__0x6212 = new System.Windows.Forms.Button();
			this.__0x6213 = new System.Windows.Forms.Button();
			this.__0x6214 = new System.Windows.Forms.Button();
			this.__0x6215 = new System.Windows.Forms.Button();
			this.__0x6216 = new System.Windows.Forms.Button();
			this.__0x6217 = new System.Windows.Forms.Button();
			this.__0x6218 = new System.Windows.Forms.Button();
			this.__0x6219 = new System.Windows.Forms.Button();
			this.__0x6220 = new System.Windows.Forms.Button();
			this.__0x6221 = new System.Windows.Forms.Button();
			this.__0x6222 = new System.Windows.Forms.Button();
			this.__0x6223 = new System.Windows.Forms.Button();
			this.__0x6224 = new System.Windows.Forms.Button();
			this.__0x6225 = new System.Windows.Forms.Button();
			this.__0x6226 = new System.Windows.Forms.Button();
			this.__0x6227 = new System.Windows.Forms.Button();
			this.__0x6228 = new System.Windows.Forms.Button();
			this.__0x6229 = new System.Windows.Forms.Button();
			this.__0x6230 = new System.Windows.Forms.Button();
			this.__0x6231 = new System.Windows.Forms.Button();
			this.__0x6232 = new System.Windows.Forms.Button();
			this.__0x6233 = new System.Windows.Forms.Button();
			this.__0x6234 = new System.Windows.Forms.Button();
			this.__0x6235 = new System.Windows.Forms.Button();
			this.__0x6236 = new System.Windows.Forms.Button();
			this.__0x6237 = new System.Windows.Forms.Button();
			this.__0x6238 = new System.Windows.Forms.Button();
			this.__0x6239 = new System.Windows.Forms.Button();
			this.__0x6240 = new System.Windows.Forms.Button();
			this.__0x6241 = new System.Windows.Forms.Button();
			this.__0x6242 = new System.Windows.Forms.Button();
			this.__0x6243 = new System.Windows.Forms.Button();
			this.__0x6244 = new System.Windows.Forms.Button();
			this.__0x6245 = new System.Windows.Forms.Button();
			this.__0x6246 = new System.Windows.Forms.Button();
			this.__0x6247 = new System.Windows.Forms.Button();
			this.__0x6248 = new System.Windows.Forms.Button();
			this.__0x6249 = new System.Windows.Forms.Button();
			this.__0x6250 = new System.Windows.Forms.Button();
			this.__0x6251 = new System.Windows.Forms.Button();
			this.__0x6252 = new System.Windows.Forms.Button();
			this.__0x6253 = new System.Windows.Forms.Button();
			this.__0x6254 = new System.Windows.Forms.Button();
			this.__0x6255 = new System.Windows.Forms.Button();
			this.__0x6256 = new System.Windows.Forms.Button();
			this.__0x6257 = new System.Windows.Forms.Button();
			this.__0x6258 = new System.Windows.Forms.Button();
			this.__0x6259 = new System.Windows.Forms.Button();
			this.__0x6260 = new System.Windows.Forms.Button();
			this.__0x6261 = new System.Windows.Forms.Button();
			this.__0x6262 = new System.Windows.Forms.Button();
			this.__0x6263 = new System.Windows.Forms.Button();
			this.__0x6264 = new System.Windows.Forms.Button();
			this.__0x6265 = new System.Windows.Forms.Button();
			this.__0x6266 = new System.Windows.Forms.Button();
			this.__0x6267 = new System.Windows.Forms.Button();
			this.__0x6268 = new System.Windows.Forms.Button();
			this.__0x6269 = new System.Windows.Forms.Button();
			this.__0x6270 = new System.Windows.Forms.Button();
			this.__0x6271 = new System.Windows.Forms.Button();
			this.__0x6272 = new System.Windows.Forms.Button();
			this.__0x6273 = new System.Windows.Forms.Button();
			this.__0x6274 = new System.Windows.Forms.Button();
			this.__0x6275 = new System.Windows.Forms.Button();
			this.__0x6276 = new System.Windows.Forms.Button();
			this.__0x6277 = new System.Windows.Forms.Button();
			this.__0x6278 = new System.Windows.Forms.Button();
			this.__0x6279 = new System.Windows.Forms.Button();
			this.__0x6280 = new System.Windows.Forms.Button();
			this.__0x6281 = new System.Windows.Forms.Button();
			this.__0x6282 = new System.Windows.Forms.Button();
			this.__0x6283 = new System.Windows.Forms.Button();
			this.__0x6284 = new System.Windows.Forms.Button();
			this.__0x6285 = new System.Windows.Forms.Button();
			this.__0x6286 = new System.Windows.Forms.Button();
			this.__0x6287 = new System.Windows.Forms.Button();
			this.__0x6288 = new System.Windows.Forms.Button();
			this.__0x6289 = new System.Windows.Forms.Button();
			this.__0x6290 = new System.Windows.Forms.Button();
			this.__0x6291 = new System.Windows.Forms.Button();
			this.SuspendLayout();
			
			
			
			this.__0x6122.Location = new System.Drawing.Point(227, 21);
			this.__0x6122.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6122.Name = "label1";
			this.__0x6122.Size = new System.Drawing.Size(45, 20);
			this.__0x6122.TabIndex = 0;
			this.__0x6122.Values.Text = "Red:";
			
			
			
			this.__0x6123.AlwaysActive = false;
			this.__0x6123.DecimalPlaces = 2;
			this.__0x6123.Location = new System.Drawing.Point(279, 20);
			this.__0x6123.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6123.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6123.Name = "numericUpDownRed";
			this.__0x6123.Size = new System.Drawing.Size(75, 21);
			this.__0x6123.TabIndex = 2;
			this.__0x6123.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6124.AlwaysActive = false;
			this.__0x6124.DecimalPlaces = 2;
			this.__0x6124.Location = new System.Drawing.Point(279, 52);
			this.__0x6124.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6124.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6124.Name = "numericUpDownGreen";
			this.__0x6124.Size = new System.Drawing.Size(75, 21);
			this.__0x6124.TabIndex = 3;
			this.__0x6124.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6125.Location = new System.Drawing.Point(227, 53);
			this.__0x6125.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6125.Name = "label2";
			this.__0x6125.Size = new System.Drawing.Size(59, 20);
			this.__0x6125.TabIndex = 2;
			this.__0x6125.Values.Text = "Green:";
			
			
			
			this.__0x6126.AlwaysActive = false;
			this.__0x6126.DecimalPlaces = 2;
			this.__0x6126.Location = new System.Drawing.Point(279, 84);
			this.__0x6126.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6126.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6126.Name = "numericUpDownBlue";
			this.__0x6126.Size = new System.Drawing.Size(75, 21);
			this.__0x6126.TabIndex = 4;
			this.__0x6126.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6127.Location = new System.Drawing.Point(227, 85);
			this.__0x6127.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6127.Name = "label3";
			this.__0x6127.Size = new System.Drawing.Size(47, 20);
			this.__0x6127.TabIndex = 4;
			this.__0x6127.Values.Text = "Blue:";
			
			
			
			this.__0x6128.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6128.DrawBackground = true;
			this.__0x6128.LargeChange = 100;
			this.__0x6128.Location = new System.Drawing.Point(359, 114);
			this.__0x6128.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6128.Maximum = 1000;
			this.__0x6128.Name = "trackBarAlpha";
			this.__0x6128.Size = new System.Drawing.Size(165, 26);
			this.__0x6128.SmallChange = 10;
			this.__0x6128.TabIndex = 10;
			this.__0x6128.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6128.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6129.Location = new System.Drawing.Point(227, 117);
			this.__0x6129.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6129.Name = "label4";
			this.__0x6129.Size = new System.Drawing.Size(55, 20);
			this.__0x6129.TabIndex = 7;
			this.__0x6129.Values.Text = "Alpha:";
			
			
			
			this.__0x6130.AlwaysActive = false;
			this.__0x6130.DecimalPlaces = 2;
			this.__0x6130.Location = new System.Drawing.Point(279, 116);
			this.__0x6130.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6130.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6130.Name = "numericUpDownAlpha";
			this.__0x6130.Size = new System.Drawing.Size(75, 21);
			this.__0x6130.TabIndex = 5;
			this.__0x6130.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6131.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6131.DrawBackground = true;
			this.__0x6131.LargeChange = 100;
			this.__0x6131.Location = new System.Drawing.Point(359, 82);
			this.__0x6131.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6131.Maximum = 1000;
			this.__0x6131.Name = "trackBarBlue";
			this.__0x6131.Size = new System.Drawing.Size(165, 26);
			this.__0x6131.SmallChange = 10;
			this.__0x6131.TabIndex = 9;
			this.__0x6131.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6131.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6132.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6132.DrawBackground = true;
			this.__0x6132.LargeChange = 100;
			this.__0x6132.Location = new System.Drawing.Point(359, 50);
			this.__0x6132.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6132.Maximum = 1000;
			this.__0x6132.Name = "trackBarGreen";
			this.__0x6132.Size = new System.Drawing.Size(165, 26);
			this.__0x6132.SmallChange = 10;
			this.__0x6132.TabIndex = 8;
			this.__0x6132.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6132.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6133.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6133.DrawBackground = true;
			this.__0x6133.LargeChange = 100;
			this.__0x6133.Location = new System.Drawing.Point(359, 18);
			this.__0x6133.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6133.Maximum = 1000;
			this.__0x6133.Name = "trackBarRed";
			this.__0x6133.Size = new System.Drawing.Size(165, 26);
			this.__0x6133.SmallChange = 10;
			this.__0x6133.TabIndex = 7;
			this.__0x6133.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6133.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6135.BottomColor = System.Drawing.Color.Black;
			this.__0x6135.Count = 1;
			this.__0x6135.Location = new System.Drawing.Point(183, 12);
			this.__0x6135.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6135.Name = "colorGradientControl";
			this.__0x6135.Size = new System.Drawing.Size(35, 164);
			this.__0x6135.TabIndex = 1;
			this.__0x6135.TabStop = false;
			this.__0x6135.TopColor = System.Drawing.Color.Red;
			this.__0x6135.Value = 128;
			this.__0x6135.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6134.Location = new System.Drawing.Point(8, 12);
			this.__0x6134.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6134.Name = "colorWheel";
			this.__0x6134.Size = new System.Drawing.Size(164, 164);
			this.__0x6134.TabIndex = 0;
			this.__0x6134.TabStop = false;
			this.__0x6134.ColorChanged += new System.EventHandler(this.__0x6296);
			this.__0x6134.DoubleClick += new System.EventHandler(this.__0x6302);
			this.__0x6134.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.__0x6301);
			
			
			
			this.__0x6136.AlwaysActive = false;
			this.__0x6136.DecimalPlaces = 2;
			this.__0x6136.Location = new System.Drawing.Point(279, 148);
			this.__0x6136.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6136.Name = "numericUpDownPower";
			this.__0x6136.Size = new System.Drawing.Size(75, 21);
			this.__0x6136.TabIndex = 6;
			this.__0x6136.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6137.Location = new System.Drawing.Point(227, 149);
			this.__0x6137.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6137.Name = "label5";
			this.__0x6137.Size = new System.Drawing.Size(58, 20);
			this.__0x6137.TabIndex = 11;
			this.__0x6137.Values.Text = "Power:";
			
			
			
			this.__0x6138.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6138.DrawBackground = true;
			this.__0x6138.LargeChange = 100;
			this.__0x6138.Location = new System.Drawing.Point(359, 146);
			this.__0x6138.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6138.Maximum = 1000;
			this.__0x6138.Name = "trackBarPower";
			this.__0x6138.Size = new System.Drawing.Size(165, 26);
			this.__0x6138.SmallChange = 10;
			this.__0x6138.TabIndex = 11;
			this.__0x6138.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6138.ValueChanged += new System.EventHandler(this.__0x6296);
			
			
			
			this.__0x6139.BackColor = System.Drawing.Color.White;
			this.__0x6139.Enabled = false;
			this.__0x6139.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6139.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6139.Location = new System.Drawing.Point(13, 194);
			this.__0x6139.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6139.Name = "button0";
			this.__0x6139.Size = new System.Drawing.Size(24, 20);
			this.__0x6139.TabIndex = 12;
			this.__0x6139.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6140.BackColor = System.Drawing.Color.White;
			this.__0x6140.Enabled = false;
			this.__0x6140.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6140.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6140.Location = new System.Drawing.Point(43, 194);
			this.__0x6140.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6140.Name = "button1";
			this.__0x6140.Size = new System.Drawing.Size(24, 20);
			this.__0x6140.TabIndex = 13;
			this.__0x6140.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6141.BackColor = System.Drawing.Color.White;
			this.__0x6141.Enabled = false;
			this.__0x6141.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6141.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6141.Location = new System.Drawing.Point(73, 194);
			this.__0x6141.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6141.Name = "button2";
			this.__0x6141.Size = new System.Drawing.Size(24, 20);
			this.__0x6141.TabIndex = 14;
			this.__0x6141.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6142.BackColor = System.Drawing.Color.White;
			this.__0x6142.Enabled = false;
			this.__0x6142.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6142.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6142.Location = new System.Drawing.Point(103, 194);
			this.__0x6142.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6142.Name = "button3";
			this.__0x6142.Size = new System.Drawing.Size(24, 20);
			this.__0x6142.TabIndex = 15;
			this.__0x6142.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6143.BackColor = System.Drawing.Color.White;
			this.__0x6143.Enabled = false;
			this.__0x6143.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6143.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6143.Location = new System.Drawing.Point(133, 194);
			this.__0x6143.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6143.Name = "button4";
			this.__0x6143.Size = new System.Drawing.Size(24, 20);
			this.__0x6143.TabIndex = 16;
			this.__0x6143.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6144.BackColor = System.Drawing.Color.White;
			this.__0x6144.Enabled = false;
			this.__0x6144.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6144.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6144.Location = new System.Drawing.Point(163, 194);
			this.__0x6144.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6144.Name = "button5";
			this.__0x6144.Size = new System.Drawing.Size(24, 20);
			this.__0x6144.TabIndex = 17;
			this.__0x6144.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6145.BackColor = System.Drawing.Color.White;
			this.__0x6145.Enabled = false;
			this.__0x6145.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6145.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6145.Location = new System.Drawing.Point(193, 194);
			this.__0x6145.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6145.Name = "button6";
			this.__0x6145.Size = new System.Drawing.Size(24, 20);
			this.__0x6145.TabIndex = 18;
			this.__0x6145.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6146.BackColor = System.Drawing.Color.White;
			this.__0x6146.Enabled = false;
			this.__0x6146.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6146.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6146.Location = new System.Drawing.Point(223, 194);
			this.__0x6146.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6146.Name = "button7";
			this.__0x6146.Size = new System.Drawing.Size(24, 20);
			this.__0x6146.TabIndex = 19;
			this.__0x6146.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6147.BackColor = System.Drawing.Color.White;
			this.__0x6147.Enabled = false;
			this.__0x6147.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6147.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6147.Location = new System.Drawing.Point(253, 194);
			this.__0x6147.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6147.Name = "button8";
			this.__0x6147.Size = new System.Drawing.Size(24, 20);
			this.__0x6147.TabIndex = 20;
			this.__0x6147.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6148.BackColor = System.Drawing.Color.White;
			this.__0x6148.Enabled = false;
			this.__0x6148.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6148.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6148.Location = new System.Drawing.Point(283, 194);
			this.__0x6148.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6148.Name = "button9";
			this.__0x6148.Size = new System.Drawing.Size(24, 20);
			this.__0x6148.TabIndex = 21;
			this.__0x6148.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6149.BackColor = System.Drawing.Color.White;
			this.__0x6149.Enabled = false;
			this.__0x6149.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6149.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6149.Location = new System.Drawing.Point(313, 194);
			this.__0x6149.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6149.Name = "button10";
			this.__0x6149.Size = new System.Drawing.Size(24, 20);
			this.__0x6149.TabIndex = 22;
			this.__0x6149.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6150.BackColor = System.Drawing.Color.White;
			this.__0x6150.Enabled = false;
			this.__0x6150.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6150.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6150.Location = new System.Drawing.Point(343, 194);
			this.__0x6150.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6150.Name = "button11";
			this.__0x6150.Size = new System.Drawing.Size(24, 20);
			this.__0x6150.TabIndex = 23;
			this.__0x6150.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6151.BackColor = System.Drawing.Color.White;
			this.__0x6151.Enabled = false;
			this.__0x6151.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6151.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6151.Location = new System.Drawing.Point(373, 194);
			this.__0x6151.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6151.Name = "button12";
			this.__0x6151.Size = new System.Drawing.Size(24, 20);
			this.__0x6151.TabIndex = 24;
			this.__0x6151.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6152.BackColor = System.Drawing.Color.White;
			this.__0x6152.Enabled = false;
			this.__0x6152.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6152.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6152.Location = new System.Drawing.Point(403, 194);
			this.__0x6152.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6152.Name = "button13";
			this.__0x6152.Size = new System.Drawing.Size(24, 20);
			this.__0x6152.TabIndex = 25;
			this.__0x6152.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6153.BackColor = System.Drawing.Color.White;
			this.__0x6153.Enabled = false;
			this.__0x6153.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6153.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6153.Location = new System.Drawing.Point(433, 194);
			this.__0x6153.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6153.Name = "button14";
			this.__0x6153.Size = new System.Drawing.Size(24, 20);
			this.__0x6153.TabIndex = 26;
			this.__0x6153.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6154.BackColor = System.Drawing.Color.White;
			this.__0x6154.Enabled = false;
			this.__0x6154.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6154.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6154.Location = new System.Drawing.Point(463, 194);
			this.__0x6154.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6154.Name = "button15";
			this.__0x6154.Size = new System.Drawing.Size(24, 20);
			this.__0x6154.TabIndex = 27;
			this.__0x6154.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6155.BackColor = System.Drawing.Color.White;
			this.__0x6155.Enabled = false;
			this.__0x6155.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6155.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6155.Location = new System.Drawing.Point(493, 194);
			this.__0x6155.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6155.Name = "button16";
			this.__0x6155.Size = new System.Drawing.Size(24, 20);
			this.__0x6155.TabIndex = 28;
			this.__0x6155.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6156.BackColor = System.Drawing.Color.White;
			this.__0x6156.Enabled = false;
			this.__0x6156.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6156.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6156.Location = new System.Drawing.Point(13, 220);
			this.__0x6156.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6156.Name = "button17";
			this.__0x6156.Size = new System.Drawing.Size(24, 20);
			this.__0x6156.TabIndex = 29;
			this.__0x6156.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6157.BackColor = System.Drawing.Color.White;
			this.__0x6157.Enabled = false;
			this.__0x6157.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6157.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6157.Location = new System.Drawing.Point(43, 220);
			this.__0x6157.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6157.Name = "button18";
			this.__0x6157.Size = new System.Drawing.Size(24, 20);
			this.__0x6157.TabIndex = 30;
			this.__0x6157.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6158.BackColor = System.Drawing.Color.White;
			this.__0x6158.Enabled = false;
			this.__0x6158.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6158.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6158.Location = new System.Drawing.Point(73, 220);
			this.__0x6158.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6158.Name = "button19";
			this.__0x6158.Size = new System.Drawing.Size(24, 20);
			this.__0x6158.TabIndex = 31;
			this.__0x6158.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6159.BackColor = System.Drawing.Color.White;
			this.__0x6159.Enabled = false;
			this.__0x6159.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6159.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6159.Location = new System.Drawing.Point(103, 220);
			this.__0x6159.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6159.Name = "button20";
			this.__0x6159.Size = new System.Drawing.Size(24, 20);
			this.__0x6159.TabIndex = 32;
			this.__0x6159.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6160.BackColor = System.Drawing.Color.White;
			this.__0x6160.Enabled = false;
			this.__0x6160.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6160.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6160.Location = new System.Drawing.Point(133, 220);
			this.__0x6160.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6160.Name = "button21";
			this.__0x6160.Size = new System.Drawing.Size(24, 20);
			this.__0x6160.TabIndex = 33;
			this.__0x6160.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6161.BackColor = System.Drawing.Color.White;
			this.__0x6161.Enabled = false;
			this.__0x6161.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6161.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6161.Location = new System.Drawing.Point(163, 220);
			this.__0x6161.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6161.Name = "button22";
			this.__0x6161.Size = new System.Drawing.Size(24, 20);
			this.__0x6161.TabIndex = 34;
			this.__0x6161.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6162.BackColor = System.Drawing.Color.White;
			this.__0x6162.Enabled = false;
			this.__0x6162.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6162.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6162.Location = new System.Drawing.Point(193, 220);
			this.__0x6162.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6162.Name = "button23";
			this.__0x6162.Size = new System.Drawing.Size(24, 20);
			this.__0x6162.TabIndex = 35;
			this.__0x6162.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6163.BackColor = System.Drawing.Color.White;
			this.__0x6163.Enabled = false;
			this.__0x6163.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6163.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6163.Location = new System.Drawing.Point(223, 220);
			this.__0x6163.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6163.Name = "button24";
			this.__0x6163.Size = new System.Drawing.Size(24, 20);
			this.__0x6163.TabIndex = 36;
			this.__0x6163.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6164.BackColor = System.Drawing.Color.White;
			this.__0x6164.Enabled = false;
			this.__0x6164.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6164.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6164.Location = new System.Drawing.Point(253, 220);
			this.__0x6164.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6164.Name = "button25";
			this.__0x6164.Size = new System.Drawing.Size(24, 20);
			this.__0x6164.TabIndex = 37;
			this.__0x6164.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6165.BackColor = System.Drawing.Color.White;
			this.__0x6165.Enabled = false;
			this.__0x6165.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6165.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6165.Location = new System.Drawing.Point(283, 220);
			this.__0x6165.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6165.Name = "button26";
			this.__0x6165.Size = new System.Drawing.Size(24, 20);
			this.__0x6165.TabIndex = 38;
			this.__0x6165.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6166.BackColor = System.Drawing.Color.White;
			this.__0x6166.Enabled = false;
			this.__0x6166.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6166.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6166.Location = new System.Drawing.Point(313, 220);
			this.__0x6166.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6166.Name = "button27";
			this.__0x6166.Size = new System.Drawing.Size(24, 20);
			this.__0x6166.TabIndex = 39;
			this.__0x6166.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6167.BackColor = System.Drawing.Color.White;
			this.__0x6167.Enabled = false;
			this.__0x6167.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6167.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6167.Location = new System.Drawing.Point(343, 220);
			this.__0x6167.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6167.Name = "button28";
			this.__0x6167.Size = new System.Drawing.Size(24, 20);
			this.__0x6167.TabIndex = 40;
			this.__0x6167.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6168.BackColor = System.Drawing.Color.White;
			this.__0x6168.Enabled = false;
			this.__0x6168.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6168.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6168.Location = new System.Drawing.Point(373, 220);
			this.__0x6168.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6168.Name = "button29";
			this.__0x6168.Size = new System.Drawing.Size(24, 20);
			this.__0x6168.TabIndex = 41;
			this.__0x6168.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6169.BackColor = System.Drawing.Color.White;
			this.__0x6169.Enabled = false;
			this.__0x6169.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6169.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6169.Location = new System.Drawing.Point(403, 220);
			this.__0x6169.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6169.Name = "button30";
			this.__0x6169.Size = new System.Drawing.Size(24, 20);
			this.__0x6169.TabIndex = 42;
			this.__0x6169.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6170.BackColor = System.Drawing.Color.White;
			this.__0x6170.Enabled = false;
			this.__0x6170.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6170.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6170.Location = new System.Drawing.Point(433, 220);
			this.__0x6170.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6170.Name = "button31";
			this.__0x6170.Size = new System.Drawing.Size(24, 20);
			this.__0x6170.TabIndex = 43;
			this.__0x6170.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6171.BackColor = System.Drawing.Color.White;
			this.__0x6171.Enabled = false;
			this.__0x6171.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6171.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6171.Location = new System.Drawing.Point(463, 220);
			this.__0x6171.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6171.Name = "button32";
			this.__0x6171.Size = new System.Drawing.Size(24, 20);
			this.__0x6171.TabIndex = 44;
			this.__0x6171.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6172.BackColor = System.Drawing.Color.White;
			this.__0x6172.Enabled = false;
			this.__0x6172.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6172.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6172.Location = new System.Drawing.Point(493, 220);
			this.__0x6172.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6172.Name = "button33";
			this.__0x6172.Size = new System.Drawing.Size(24, 20);
			this.__0x6172.TabIndex = 45;
			this.__0x6172.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6173.BackColor = System.Drawing.Color.White;
			this.__0x6173.Enabled = false;
			this.__0x6173.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6173.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6173.Location = new System.Drawing.Point(13, 246);
			this.__0x6173.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6173.Name = "button34";
			this.__0x6173.Size = new System.Drawing.Size(24, 20);
			this.__0x6173.TabIndex = 46;
			this.__0x6173.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6174.BackColor = System.Drawing.Color.White;
			this.__0x6174.Enabled = false;
			this.__0x6174.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6174.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6174.Location = new System.Drawing.Point(43, 246);
			this.__0x6174.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6174.Name = "button35";
			this.__0x6174.Size = new System.Drawing.Size(24, 20);
			this.__0x6174.TabIndex = 47;
			this.__0x6174.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6175.BackColor = System.Drawing.Color.White;
			this.__0x6175.Enabled = false;
			this.__0x6175.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6175.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6175.Location = new System.Drawing.Point(73, 246);
			this.__0x6175.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6175.Name = "button36";
			this.__0x6175.Size = new System.Drawing.Size(24, 20);
			this.__0x6175.TabIndex = 48;
			this.__0x6175.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6176.BackColor = System.Drawing.Color.White;
			this.__0x6176.Enabled = false;
			this.__0x6176.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6176.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6176.Location = new System.Drawing.Point(103, 246);
			this.__0x6176.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6176.Name = "button37";
			this.__0x6176.Size = new System.Drawing.Size(24, 20);
			this.__0x6176.TabIndex = 49;
			this.__0x6176.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6177.BackColor = System.Drawing.Color.White;
			this.__0x6177.Enabled = false;
			this.__0x6177.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6177.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6177.Location = new System.Drawing.Point(133, 246);
			this.__0x6177.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6177.Name = "button38";
			this.__0x6177.Size = new System.Drawing.Size(24, 20);
			this.__0x6177.TabIndex = 50;
			this.__0x6177.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6178.BackColor = System.Drawing.Color.White;
			this.__0x6178.Enabled = false;
			this.__0x6178.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6178.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6178.Location = new System.Drawing.Point(163, 246);
			this.__0x6178.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6178.Name = "button39";
			this.__0x6178.Size = new System.Drawing.Size(24, 20);
			this.__0x6178.TabIndex = 51;
			this.__0x6178.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6179.BackColor = System.Drawing.Color.White;
			this.__0x6179.Enabled = false;
			this.__0x6179.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6179.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6179.Location = new System.Drawing.Point(193, 246);
			this.__0x6179.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6179.Name = "button40";
			this.__0x6179.Size = new System.Drawing.Size(24, 20);
			this.__0x6179.TabIndex = 52;
			this.__0x6179.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6180.BackColor = System.Drawing.Color.White;
			this.__0x6180.Enabled = false;
			this.__0x6180.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6180.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6180.Location = new System.Drawing.Point(223, 246);
			this.__0x6180.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6180.Name = "button41";
			this.__0x6180.Size = new System.Drawing.Size(24, 20);
			this.__0x6180.TabIndex = 53;
			this.__0x6180.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6181.BackColor = System.Drawing.Color.White;
			this.__0x6181.Enabled = false;
			this.__0x6181.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6181.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6181.Location = new System.Drawing.Point(253, 246);
			this.__0x6181.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6181.Name = "button42";
			this.__0x6181.Size = new System.Drawing.Size(24, 20);
			this.__0x6181.TabIndex = 54;
			this.__0x6181.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6182.BackColor = System.Drawing.Color.White;
			this.__0x6182.Enabled = false;
			this.__0x6182.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6182.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6182.Location = new System.Drawing.Point(283, 246);
			this.__0x6182.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6182.Name = "button43";
			this.__0x6182.Size = new System.Drawing.Size(24, 20);
			this.__0x6182.TabIndex = 55;
			this.__0x6182.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6183.BackColor = System.Drawing.Color.White;
			this.__0x6183.Enabled = false;
			this.__0x6183.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6183.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6183.Location = new System.Drawing.Point(313, 246);
			this.__0x6183.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6183.Name = "button44";
			this.__0x6183.Size = new System.Drawing.Size(24, 20);
			this.__0x6183.TabIndex = 56;
			this.__0x6183.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6184.BackColor = System.Drawing.Color.White;
			this.__0x6184.Enabled = false;
			this.__0x6184.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6184.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6184.Location = new System.Drawing.Point(343, 246);
			this.__0x6184.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6184.Name = "button45";
			this.__0x6184.Size = new System.Drawing.Size(24, 20);
			this.__0x6184.TabIndex = 57;
			this.__0x6184.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6185.BackColor = System.Drawing.Color.White;
			this.__0x6185.Enabled = false;
			this.__0x6185.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6185.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6185.Location = new System.Drawing.Point(373, 246);
			this.__0x6185.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6185.Name = "button46";
			this.__0x6185.Size = new System.Drawing.Size(24, 20);
			this.__0x6185.TabIndex = 58;
			this.__0x6185.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6186.BackColor = System.Drawing.Color.White;
			this.__0x6186.Enabled = false;
			this.__0x6186.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6186.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6186.Location = new System.Drawing.Point(403, 246);
			this.__0x6186.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6186.Name = "button47";
			this.__0x6186.Size = new System.Drawing.Size(24, 20);
			this.__0x6186.TabIndex = 59;
			this.__0x6186.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6187.BackColor = System.Drawing.Color.White;
			this.__0x6187.Enabled = false;
			this.__0x6187.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6187.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6187.Location = new System.Drawing.Point(433, 246);
			this.__0x6187.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6187.Name = "button48";
			this.__0x6187.Size = new System.Drawing.Size(24, 20);
			this.__0x6187.TabIndex = 60;
			this.__0x6187.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6188.BackColor = System.Drawing.Color.White;
			this.__0x6188.Enabled = false;
			this.__0x6188.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6188.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6188.Location = new System.Drawing.Point(463, 246);
			this.__0x6188.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6188.Name = "button49";
			this.__0x6188.Size = new System.Drawing.Size(24, 20);
			this.__0x6188.TabIndex = 61;
			this.__0x6188.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6189.BackColor = System.Drawing.Color.White;
			this.__0x6189.Enabled = false;
			this.__0x6189.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6189.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6189.Location = new System.Drawing.Point(493, 246);
			this.__0x6189.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6189.Name = "button50";
			this.__0x6189.Size = new System.Drawing.Size(24, 20);
			this.__0x6189.TabIndex = 62;
			this.__0x6189.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6190.BackColor = System.Drawing.Color.White;
			this.__0x6190.Enabled = false;
			this.__0x6190.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6190.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6190.Location = new System.Drawing.Point(13, 272);
			this.__0x6190.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6190.Name = "button51";
			this.__0x6190.Size = new System.Drawing.Size(24, 20);
			this.__0x6190.TabIndex = 63;
			this.__0x6190.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6191.BackColor = System.Drawing.Color.White;
			this.__0x6191.Enabled = false;
			this.__0x6191.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6191.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6191.Location = new System.Drawing.Point(43, 272);
			this.__0x6191.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6191.Name = "button52";
			this.__0x6191.Size = new System.Drawing.Size(24, 20);
			this.__0x6191.TabIndex = 64;
			this.__0x6191.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6192.BackColor = System.Drawing.Color.White;
			this.__0x6192.Enabled = false;
			this.__0x6192.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6192.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6192.Location = new System.Drawing.Point(73, 272);
			this.__0x6192.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6192.Name = "button53";
			this.__0x6192.Size = new System.Drawing.Size(24, 20);
			this.__0x6192.TabIndex = 65;
			this.__0x6192.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6193.BackColor = System.Drawing.Color.White;
			this.__0x6193.Enabled = false;
			this.__0x6193.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6193.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6193.Location = new System.Drawing.Point(103, 272);
			this.__0x6193.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6193.Name = "button54";
			this.__0x6193.Size = new System.Drawing.Size(24, 20);
			this.__0x6193.TabIndex = 66;
			this.__0x6193.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6194.BackColor = System.Drawing.Color.White;
			this.__0x6194.Enabled = false;
			this.__0x6194.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6194.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6194.Location = new System.Drawing.Point(133, 272);
			this.__0x6194.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6194.Name = "button55";
			this.__0x6194.Size = new System.Drawing.Size(24, 20);
			this.__0x6194.TabIndex = 67;
			this.__0x6194.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6195.BackColor = System.Drawing.Color.White;
			this.__0x6195.Enabled = false;
			this.__0x6195.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6195.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6195.Location = new System.Drawing.Point(163, 272);
			this.__0x6195.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6195.Name = "button56";
			this.__0x6195.Size = new System.Drawing.Size(24, 20);
			this.__0x6195.TabIndex = 68;
			this.__0x6195.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6196.BackColor = System.Drawing.Color.White;
			this.__0x6196.Enabled = false;
			this.__0x6196.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6196.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6196.Location = new System.Drawing.Point(193, 272);
			this.__0x6196.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6196.Name = "button57";
			this.__0x6196.Size = new System.Drawing.Size(24, 20);
			this.__0x6196.TabIndex = 69;
			this.__0x6196.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6197.BackColor = System.Drawing.Color.White;
			this.__0x6197.Enabled = false;
			this.__0x6197.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6197.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6197.Location = new System.Drawing.Point(223, 272);
			this.__0x6197.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6197.Name = "button58";
			this.__0x6197.Size = new System.Drawing.Size(24, 20);
			this.__0x6197.TabIndex = 70;
			this.__0x6197.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6198.BackColor = System.Drawing.Color.White;
			this.__0x6198.Enabled = false;
			this.__0x6198.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6198.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6198.Location = new System.Drawing.Point(253, 272);
			this.__0x6198.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6198.Name = "button59";
			this.__0x6198.Size = new System.Drawing.Size(24, 20);
			this.__0x6198.TabIndex = 71;
			this.__0x6198.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6199.BackColor = System.Drawing.Color.White;
			this.__0x6199.Enabled = false;
			this.__0x6199.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6199.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6199.Location = new System.Drawing.Point(283, 272);
			this.__0x6199.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6199.Name = "button60";
			this.__0x6199.Size = new System.Drawing.Size(24, 20);
			this.__0x6199.TabIndex = 72;
			this.__0x6199.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6200.BackColor = System.Drawing.Color.White;
			this.__0x6200.Enabled = false;
			this.__0x6200.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6200.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6200.Location = new System.Drawing.Point(313, 272);
			this.__0x6200.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6200.Name = "button61";
			this.__0x6200.Size = new System.Drawing.Size(24, 20);
			this.__0x6200.TabIndex = 73;
			this.__0x6200.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6201.BackColor = System.Drawing.Color.White;
			this.__0x6201.Enabled = false;
			this.__0x6201.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6201.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6201.Location = new System.Drawing.Point(343, 272);
			this.__0x6201.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6201.Name = "button62";
			this.__0x6201.Size = new System.Drawing.Size(24, 20);
			this.__0x6201.TabIndex = 74;
			this.__0x6201.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6202.BackColor = System.Drawing.Color.White;
			this.__0x6202.Enabled = false;
			this.__0x6202.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6202.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6202.Location = new System.Drawing.Point(373, 272);
			this.__0x6202.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6202.Name = "button63";
			this.__0x6202.Size = new System.Drawing.Size(24, 20);
			this.__0x6202.TabIndex = 75;
			this.__0x6202.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6203.BackColor = System.Drawing.Color.White;
			this.__0x6203.Enabled = false;
			this.__0x6203.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6203.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6203.Location = new System.Drawing.Point(403, 272);
			this.__0x6203.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6203.Name = "button64";
			this.__0x6203.Size = new System.Drawing.Size(24, 20);
			this.__0x6203.TabIndex = 76;
			this.__0x6203.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6204.BackColor = System.Drawing.Color.White;
			this.__0x6204.Enabled = false;
			this.__0x6204.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6204.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6204.Location = new System.Drawing.Point(433, 272);
			this.__0x6204.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6204.Name = "button65";
			this.__0x6204.Size = new System.Drawing.Size(24, 20);
			this.__0x6204.TabIndex = 77;
			this.__0x6204.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6205.BackColor = System.Drawing.Color.White;
			this.__0x6205.Enabled = false;
			this.__0x6205.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6205.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6205.Location = new System.Drawing.Point(463, 272);
			this.__0x6205.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6205.Name = "button66";
			this.__0x6205.Size = new System.Drawing.Size(24, 20);
			this.__0x6205.TabIndex = 78;
			this.__0x6205.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6206.BackColor = System.Drawing.Color.White;
			this.__0x6206.Enabled = false;
			this.__0x6206.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6206.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6206.Location = new System.Drawing.Point(493, 272);
			this.__0x6206.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6206.Name = "button67";
			this.__0x6206.Size = new System.Drawing.Size(24, 20);
			this.__0x6206.TabIndex = 79;
			this.__0x6206.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6207.BackColor = System.Drawing.Color.White;
			this.__0x6207.Enabled = false;
			this.__0x6207.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6207.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6207.Location = new System.Drawing.Point(13, 298);
			this.__0x6207.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6207.Name = "button68";
			this.__0x6207.Size = new System.Drawing.Size(24, 20);
			this.__0x6207.TabIndex = 80;
			this.__0x6207.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6208.BackColor = System.Drawing.Color.White;
			this.__0x6208.Enabled = false;
			this.__0x6208.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6208.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6208.Location = new System.Drawing.Point(43, 298);
			this.__0x6208.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6208.Name = "button69";
			this.__0x6208.Size = new System.Drawing.Size(24, 20);
			this.__0x6208.TabIndex = 81;
			this.__0x6208.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6209.BackColor = System.Drawing.Color.White;
			this.__0x6209.Enabled = false;
			this.__0x6209.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6209.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6209.Location = new System.Drawing.Point(73, 298);
			this.__0x6209.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6209.Name = "button70";
			this.__0x6209.Size = new System.Drawing.Size(24, 20);
			this.__0x6209.TabIndex = 82;
			this.__0x6209.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6210.BackColor = System.Drawing.Color.White;
			this.__0x6210.Enabled = false;
			this.__0x6210.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6210.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6210.Location = new System.Drawing.Point(103, 298);
			this.__0x6210.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6210.Name = "button71";
			this.__0x6210.Size = new System.Drawing.Size(24, 20);
			this.__0x6210.TabIndex = 83;
			this.__0x6210.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6211.BackColor = System.Drawing.Color.White;
			this.__0x6211.Enabled = false;
			this.__0x6211.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6211.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6211.Location = new System.Drawing.Point(133, 298);
			this.__0x6211.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6211.Name = "button72";
			this.__0x6211.Size = new System.Drawing.Size(24, 20);
			this.__0x6211.TabIndex = 84;
			this.__0x6211.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6212.BackColor = System.Drawing.Color.White;
			this.__0x6212.Enabled = false;
			this.__0x6212.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6212.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6212.Location = new System.Drawing.Point(163, 298);
			this.__0x6212.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6212.Name = "button73";
			this.__0x6212.Size = new System.Drawing.Size(24, 20);
			this.__0x6212.TabIndex = 85;
			this.__0x6212.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6213.BackColor = System.Drawing.Color.White;
			this.__0x6213.Enabled = false;
			this.__0x6213.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6213.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6213.Location = new System.Drawing.Point(193, 298);
			this.__0x6213.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6213.Name = "button74";
			this.__0x6213.Size = new System.Drawing.Size(24, 20);
			this.__0x6213.TabIndex = 86;
			this.__0x6213.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6214.BackColor = System.Drawing.Color.White;
			this.__0x6214.Enabled = false;
			this.__0x6214.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6214.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6214.Location = new System.Drawing.Point(223, 298);
			this.__0x6214.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6214.Name = "button75";
			this.__0x6214.Size = new System.Drawing.Size(24, 20);
			this.__0x6214.TabIndex = 87;
			this.__0x6214.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6215.BackColor = System.Drawing.Color.White;
			this.__0x6215.Enabled = false;
			this.__0x6215.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6215.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6215.Location = new System.Drawing.Point(253, 298);
			this.__0x6215.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6215.Name = "button76";
			this.__0x6215.Size = new System.Drawing.Size(24, 20);
			this.__0x6215.TabIndex = 88;
			this.__0x6215.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6216.BackColor = System.Drawing.Color.White;
			this.__0x6216.Enabled = false;
			this.__0x6216.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6216.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6216.Location = new System.Drawing.Point(283, 298);
			this.__0x6216.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6216.Name = "button77";
			this.__0x6216.Size = new System.Drawing.Size(24, 20);
			this.__0x6216.TabIndex = 89;
			this.__0x6216.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6217.BackColor = System.Drawing.Color.White;
			this.__0x6217.Enabled = false;
			this.__0x6217.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6217.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6217.Location = new System.Drawing.Point(313, 298);
			this.__0x6217.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6217.Name = "button78";
			this.__0x6217.Size = new System.Drawing.Size(24, 20);
			this.__0x6217.TabIndex = 90;
			this.__0x6217.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6218.BackColor = System.Drawing.Color.White;
			this.__0x6218.Enabled = false;
			this.__0x6218.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6218.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6218.Location = new System.Drawing.Point(343, 298);
			this.__0x6218.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6218.Name = "button79";
			this.__0x6218.Size = new System.Drawing.Size(24, 20);
			this.__0x6218.TabIndex = 91;
			this.__0x6218.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6219.BackColor = System.Drawing.Color.White;
			this.__0x6219.Enabled = false;
			this.__0x6219.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6219.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6219.Location = new System.Drawing.Point(373, 298);
			this.__0x6219.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6219.Name = "button80";
			this.__0x6219.Size = new System.Drawing.Size(24, 20);
			this.__0x6219.TabIndex = 92;
			this.__0x6219.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6220.BackColor = System.Drawing.Color.White;
			this.__0x6220.Enabled = false;
			this.__0x6220.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6220.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6220.Location = new System.Drawing.Point(403, 298);
			this.__0x6220.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6220.Name = "button81";
			this.__0x6220.Size = new System.Drawing.Size(24, 20);
			this.__0x6220.TabIndex = 93;
			this.__0x6220.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6221.BackColor = System.Drawing.Color.White;
			this.__0x6221.Enabled = false;
			this.__0x6221.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6221.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6221.Location = new System.Drawing.Point(433, 298);
			this.__0x6221.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6221.Name = "button82";
			this.__0x6221.Size = new System.Drawing.Size(24, 20);
			this.__0x6221.TabIndex = 94;
			this.__0x6221.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6222.BackColor = System.Drawing.Color.White;
			this.__0x6222.Enabled = false;
			this.__0x6222.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6222.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6222.Location = new System.Drawing.Point(463, 298);
			this.__0x6222.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6222.Name = "button83";
			this.__0x6222.Size = new System.Drawing.Size(24, 20);
			this.__0x6222.TabIndex = 95;
			this.__0x6222.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6223.BackColor = System.Drawing.Color.White;
			this.__0x6223.Enabled = false;
			this.__0x6223.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6223.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6223.Location = new System.Drawing.Point(493, 298);
			this.__0x6223.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6223.Name = "button84";
			this.__0x6223.Size = new System.Drawing.Size(24, 20);
			this.__0x6223.TabIndex = 96;
			this.__0x6223.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6224.BackColor = System.Drawing.Color.White;
			this.__0x6224.Enabled = false;
			this.__0x6224.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6224.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6224.Location = new System.Drawing.Point(13, 324);
			this.__0x6224.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6224.Name = "button85";
			this.__0x6224.Size = new System.Drawing.Size(24, 20);
			this.__0x6224.TabIndex = 97;
			this.__0x6224.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6225.BackColor = System.Drawing.Color.White;
			this.__0x6225.Enabled = false;
			this.__0x6225.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6225.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6225.Location = new System.Drawing.Point(43, 324);
			this.__0x6225.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6225.Name = "button86";
			this.__0x6225.Size = new System.Drawing.Size(24, 20);
			this.__0x6225.TabIndex = 98;
			this.__0x6225.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6226.BackColor = System.Drawing.Color.White;
			this.__0x6226.Enabled = false;
			this.__0x6226.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6226.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6226.Location = new System.Drawing.Point(73, 324);
			this.__0x6226.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6226.Name = "button87";
			this.__0x6226.Size = new System.Drawing.Size(24, 20);
			this.__0x6226.TabIndex = 99;
			this.__0x6226.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6227.BackColor = System.Drawing.Color.White;
			this.__0x6227.Enabled = false;
			this.__0x6227.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6227.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6227.Location = new System.Drawing.Point(103, 324);
			this.__0x6227.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6227.Name = "button88";
			this.__0x6227.Size = new System.Drawing.Size(24, 20);
			this.__0x6227.TabIndex = 100;
			this.__0x6227.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6228.BackColor = System.Drawing.Color.White;
			this.__0x6228.Enabled = false;
			this.__0x6228.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6228.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6228.Location = new System.Drawing.Point(133, 324);
			this.__0x6228.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6228.Name = "button89";
			this.__0x6228.Size = new System.Drawing.Size(24, 20);
			this.__0x6228.TabIndex = 101;
			this.__0x6228.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6229.BackColor = System.Drawing.Color.White;
			this.__0x6229.Enabled = false;
			this.__0x6229.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6229.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6229.Location = new System.Drawing.Point(163, 324);
			this.__0x6229.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6229.Name = "button90";
			this.__0x6229.Size = new System.Drawing.Size(24, 20);
			this.__0x6229.TabIndex = 102;
			this.__0x6229.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6230.BackColor = System.Drawing.Color.White;
			this.__0x6230.Enabled = false;
			this.__0x6230.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6230.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6230.Location = new System.Drawing.Point(193, 324);
			this.__0x6230.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6230.Name = "button91";
			this.__0x6230.Size = new System.Drawing.Size(24, 20);
			this.__0x6230.TabIndex = 103;
			this.__0x6230.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6231.BackColor = System.Drawing.Color.White;
			this.__0x6231.Enabled = false;
			this.__0x6231.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6231.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6231.Location = new System.Drawing.Point(223, 324);
			this.__0x6231.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6231.Name = "button92";
			this.__0x6231.Size = new System.Drawing.Size(24, 20);
			this.__0x6231.TabIndex = 104;
			this.__0x6231.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6232.BackColor = System.Drawing.Color.White;
			this.__0x6232.Enabled = false;
			this.__0x6232.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6232.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6232.Location = new System.Drawing.Point(253, 324);
			this.__0x6232.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6232.Name = "button93";
			this.__0x6232.Size = new System.Drawing.Size(24, 20);
			this.__0x6232.TabIndex = 105;
			this.__0x6232.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6233.BackColor = System.Drawing.Color.White;
			this.__0x6233.Enabled = false;
			this.__0x6233.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6233.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6233.Location = new System.Drawing.Point(283, 324);
			this.__0x6233.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6233.Name = "button94";
			this.__0x6233.Size = new System.Drawing.Size(24, 20);
			this.__0x6233.TabIndex = 106;
			this.__0x6233.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6234.BackColor = System.Drawing.Color.White;
			this.__0x6234.Enabled = false;
			this.__0x6234.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6234.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6234.Location = new System.Drawing.Point(313, 324);
			this.__0x6234.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6234.Name = "button95";
			this.__0x6234.Size = new System.Drawing.Size(24, 20);
			this.__0x6234.TabIndex = 107;
			this.__0x6234.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6235.BackColor = System.Drawing.Color.White;
			this.__0x6235.Enabled = false;
			this.__0x6235.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6235.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6235.Location = new System.Drawing.Point(343, 324);
			this.__0x6235.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6235.Name = "button96";
			this.__0x6235.Size = new System.Drawing.Size(24, 20);
			this.__0x6235.TabIndex = 108;
			this.__0x6235.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6236.BackColor = System.Drawing.Color.White;
			this.__0x6236.Enabled = false;
			this.__0x6236.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6236.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6236.Location = new System.Drawing.Point(373, 324);
			this.__0x6236.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6236.Name = "button97";
			this.__0x6236.Size = new System.Drawing.Size(24, 20);
			this.__0x6236.TabIndex = 109;
			this.__0x6236.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6237.BackColor = System.Drawing.Color.White;
			this.__0x6237.Enabled = false;
			this.__0x6237.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6237.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6237.Location = new System.Drawing.Point(403, 324);
			this.__0x6237.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6237.Name = "button98";
			this.__0x6237.Size = new System.Drawing.Size(24, 20);
			this.__0x6237.TabIndex = 110;
			this.__0x6237.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6238.BackColor = System.Drawing.Color.White;
			this.__0x6238.Enabled = false;
			this.__0x6238.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6238.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6238.Location = new System.Drawing.Point(433, 324);
			this.__0x6238.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6238.Name = "button99";
			this.__0x6238.Size = new System.Drawing.Size(24, 20);
			this.__0x6238.TabIndex = 111;
			this.__0x6238.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6239.BackColor = System.Drawing.Color.White;
			this.__0x6239.Enabled = false;
			this.__0x6239.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6239.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6239.Location = new System.Drawing.Point(463, 324);
			this.__0x6239.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6239.Name = "button100";
			this.__0x6239.Size = new System.Drawing.Size(24, 20);
			this.__0x6239.TabIndex = 112;
			this.__0x6239.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6240.BackColor = System.Drawing.Color.White;
			this.__0x6240.Enabled = false;
			this.__0x6240.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6240.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6240.Location = new System.Drawing.Point(493, 324);
			this.__0x6240.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6240.Name = "button101";
			this.__0x6240.Size = new System.Drawing.Size(24, 20);
			this.__0x6240.TabIndex = 113;
			this.__0x6240.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6241.BackColor = System.Drawing.Color.White;
			this.__0x6241.Enabled = false;
			this.__0x6241.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6241.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6241.Location = new System.Drawing.Point(13, 350);
			this.__0x6241.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6241.Name = "button102";
			this.__0x6241.Size = new System.Drawing.Size(24, 20);
			this.__0x6241.TabIndex = 114;
			this.__0x6241.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6242.BackColor = System.Drawing.Color.White;
			this.__0x6242.Enabled = false;
			this.__0x6242.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6242.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6242.Location = new System.Drawing.Point(43, 350);
			this.__0x6242.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6242.Name = "button103";
			this.__0x6242.Size = new System.Drawing.Size(24, 20);
			this.__0x6242.TabIndex = 115;
			this.__0x6242.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6243.BackColor = System.Drawing.Color.White;
			this.__0x6243.Enabled = false;
			this.__0x6243.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6243.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6243.Location = new System.Drawing.Point(73, 350);
			this.__0x6243.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6243.Name = "button104";
			this.__0x6243.Size = new System.Drawing.Size(24, 20);
			this.__0x6243.TabIndex = 116;
			this.__0x6243.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6244.BackColor = System.Drawing.Color.White;
			this.__0x6244.Enabled = false;
			this.__0x6244.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6244.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6244.Location = new System.Drawing.Point(103, 350);
			this.__0x6244.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6244.Name = "button105";
			this.__0x6244.Size = new System.Drawing.Size(24, 20);
			this.__0x6244.TabIndex = 117;
			this.__0x6244.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6245.BackColor = System.Drawing.Color.White;
			this.__0x6245.Enabled = false;
			this.__0x6245.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6245.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6245.Location = new System.Drawing.Point(133, 350);
			this.__0x6245.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6245.Name = "button106";
			this.__0x6245.Size = new System.Drawing.Size(24, 20);
			this.__0x6245.TabIndex = 118;
			this.__0x6245.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6246.BackColor = System.Drawing.Color.White;
			this.__0x6246.Enabled = false;
			this.__0x6246.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6246.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6246.Location = new System.Drawing.Point(163, 350);
			this.__0x6246.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6246.Name = "button107";
			this.__0x6246.Size = new System.Drawing.Size(24, 20);
			this.__0x6246.TabIndex = 119;
			this.__0x6246.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6247.BackColor = System.Drawing.Color.White;
			this.__0x6247.Enabled = false;
			this.__0x6247.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6247.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6247.Location = new System.Drawing.Point(193, 350);
			this.__0x6247.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6247.Name = "button108";
			this.__0x6247.Size = new System.Drawing.Size(24, 20);
			this.__0x6247.TabIndex = 120;
			this.__0x6247.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6248.BackColor = System.Drawing.Color.White;
			this.__0x6248.Enabled = false;
			this.__0x6248.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6248.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6248.Location = new System.Drawing.Point(223, 350);
			this.__0x6248.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6248.Name = "button109";
			this.__0x6248.Size = new System.Drawing.Size(24, 20);
			this.__0x6248.TabIndex = 121;
			this.__0x6248.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6249.BackColor = System.Drawing.Color.White;
			this.__0x6249.Enabled = false;
			this.__0x6249.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6249.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6249.Location = new System.Drawing.Point(253, 350);
			this.__0x6249.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6249.Name = "button110";
			this.__0x6249.Size = new System.Drawing.Size(24, 20);
			this.__0x6249.TabIndex = 122;
			this.__0x6249.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6250.BackColor = System.Drawing.Color.White;
			this.__0x6250.Enabled = false;
			this.__0x6250.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6250.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6250.Location = new System.Drawing.Point(283, 350);
			this.__0x6250.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6250.Name = "button111";
			this.__0x6250.Size = new System.Drawing.Size(24, 20);
			this.__0x6250.TabIndex = 123;
			this.__0x6250.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6251.BackColor = System.Drawing.Color.White;
			this.__0x6251.Enabled = false;
			this.__0x6251.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6251.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6251.Location = new System.Drawing.Point(313, 350);
			this.__0x6251.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6251.Name = "button112";
			this.__0x6251.Size = new System.Drawing.Size(24, 20);
			this.__0x6251.TabIndex = 124;
			this.__0x6251.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6252.BackColor = System.Drawing.Color.White;
			this.__0x6252.Enabled = false;
			this.__0x6252.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6252.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6252.Location = new System.Drawing.Point(343, 350);
			this.__0x6252.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6252.Name = "button113";
			this.__0x6252.Size = new System.Drawing.Size(24, 20);
			this.__0x6252.TabIndex = 125;
			this.__0x6252.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6253.BackColor = System.Drawing.Color.White;
			this.__0x6253.Enabled = false;
			this.__0x6253.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6253.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6253.Location = new System.Drawing.Point(373, 350);
			this.__0x6253.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6253.Name = "button114";
			this.__0x6253.Size = new System.Drawing.Size(24, 20);
			this.__0x6253.TabIndex = 126;
			this.__0x6253.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6254.BackColor = System.Drawing.Color.White;
			this.__0x6254.Enabled = false;
			this.__0x6254.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6254.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6254.Location = new System.Drawing.Point(403, 350);
			this.__0x6254.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6254.Name = "button115";
			this.__0x6254.Size = new System.Drawing.Size(24, 20);
			this.__0x6254.TabIndex = 127;
			this.__0x6254.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6255.BackColor = System.Drawing.Color.White;
			this.__0x6255.Enabled = false;
			this.__0x6255.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6255.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6255.Location = new System.Drawing.Point(433, 350);
			this.__0x6255.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6255.Name = "button116";
			this.__0x6255.Size = new System.Drawing.Size(24, 20);
			this.__0x6255.TabIndex = 128;
			this.__0x6255.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6256.BackColor = System.Drawing.Color.White;
			this.__0x6256.Enabled = false;
			this.__0x6256.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6256.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6256.Location = new System.Drawing.Point(463, 350);
			this.__0x6256.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6256.Name = "button117";
			this.__0x6256.Size = new System.Drawing.Size(24, 20);
			this.__0x6256.TabIndex = 129;
			this.__0x6256.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6257.BackColor = System.Drawing.Color.White;
			this.__0x6257.Enabled = false;
			this.__0x6257.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6257.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6257.Location = new System.Drawing.Point(493, 350);
			this.__0x6257.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6257.Name = "button118";
			this.__0x6257.Size = new System.Drawing.Size(24, 20);
			this.__0x6257.TabIndex = 130;
			this.__0x6257.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6258.BackColor = System.Drawing.Color.White;
			this.__0x6258.Enabled = false;
			this.__0x6258.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6258.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6258.Location = new System.Drawing.Point(13, 377);
			this.__0x6258.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6258.Name = "button119";
			this.__0x6258.Size = new System.Drawing.Size(24, 20);
			this.__0x6258.TabIndex = 131;
			this.__0x6258.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6259.BackColor = System.Drawing.Color.White;
			this.__0x6259.Enabled = false;
			this.__0x6259.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6259.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6259.Location = new System.Drawing.Point(43, 377);
			this.__0x6259.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6259.Name = "button120";
			this.__0x6259.Size = new System.Drawing.Size(24, 20);
			this.__0x6259.TabIndex = 132;
			this.__0x6259.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6260.BackColor = System.Drawing.Color.White;
			this.__0x6260.Enabled = false;
			this.__0x6260.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6260.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6260.Location = new System.Drawing.Point(73, 377);
			this.__0x6260.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6260.Name = "button121";
			this.__0x6260.Size = new System.Drawing.Size(24, 20);
			this.__0x6260.TabIndex = 133;
			this.__0x6260.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6261.BackColor = System.Drawing.Color.White;
			this.__0x6261.Enabled = false;
			this.__0x6261.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6261.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6261.Location = new System.Drawing.Point(103, 377);
			this.__0x6261.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6261.Name = "button122";
			this.__0x6261.Size = new System.Drawing.Size(24, 20);
			this.__0x6261.TabIndex = 134;
			this.__0x6261.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6262.BackColor = System.Drawing.Color.White;
			this.__0x6262.Enabled = false;
			this.__0x6262.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6262.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6262.Location = new System.Drawing.Point(133, 377);
			this.__0x6262.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6262.Name = "button123";
			this.__0x6262.Size = new System.Drawing.Size(24, 20);
			this.__0x6262.TabIndex = 135;
			this.__0x6262.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6263.BackColor = System.Drawing.Color.White;
			this.__0x6263.Enabled = false;
			this.__0x6263.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6263.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6263.Location = new System.Drawing.Point(163, 377);
			this.__0x6263.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6263.Name = "button124";
			this.__0x6263.Size = new System.Drawing.Size(24, 20);
			this.__0x6263.TabIndex = 136;
			this.__0x6263.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6264.BackColor = System.Drawing.Color.White;
			this.__0x6264.Enabled = false;
			this.__0x6264.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6264.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6264.Location = new System.Drawing.Point(193, 377);
			this.__0x6264.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6264.Name = "button125";
			this.__0x6264.Size = new System.Drawing.Size(24, 20);
			this.__0x6264.TabIndex = 137;
			this.__0x6264.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6265.BackColor = System.Drawing.Color.White;
			this.__0x6265.Enabled = false;
			this.__0x6265.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6265.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6265.Location = new System.Drawing.Point(223, 377);
			this.__0x6265.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6265.Name = "button126";
			this.__0x6265.Size = new System.Drawing.Size(24, 20);
			this.__0x6265.TabIndex = 138;
			this.__0x6265.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6266.BackColor = System.Drawing.Color.White;
			this.__0x6266.Enabled = false;
			this.__0x6266.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6266.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6266.Location = new System.Drawing.Point(253, 377);
			this.__0x6266.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6266.Name = "button127";
			this.__0x6266.Size = new System.Drawing.Size(24, 20);
			this.__0x6266.TabIndex = 139;
			this.__0x6266.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6267.BackColor = System.Drawing.Color.White;
			this.__0x6267.Enabled = false;
			this.__0x6267.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6267.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6267.Location = new System.Drawing.Point(283, 377);
			this.__0x6267.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6267.Name = "button128";
			this.__0x6267.Size = new System.Drawing.Size(24, 20);
			this.__0x6267.TabIndex = 140;
			this.__0x6267.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6268.BackColor = System.Drawing.Color.White;
			this.__0x6268.Enabled = false;
			this.__0x6268.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6268.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6268.Location = new System.Drawing.Point(313, 377);
			this.__0x6268.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6268.Name = "button129";
			this.__0x6268.Size = new System.Drawing.Size(24, 20);
			this.__0x6268.TabIndex = 141;
			this.__0x6268.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6269.BackColor = System.Drawing.Color.White;
			this.__0x6269.Enabled = false;
			this.__0x6269.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6269.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6269.Location = new System.Drawing.Point(343, 377);
			this.__0x6269.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6269.Name = "button130";
			this.__0x6269.Size = new System.Drawing.Size(24, 20);
			this.__0x6269.TabIndex = 142;
			this.__0x6269.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6270.BackColor = System.Drawing.Color.White;
			this.__0x6270.Enabled = false;
			this.__0x6270.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6270.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6270.Location = new System.Drawing.Point(373, 377);
			this.__0x6270.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6270.Name = "button131";
			this.__0x6270.Size = new System.Drawing.Size(24, 20);
			this.__0x6270.TabIndex = 143;
			this.__0x6270.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6271.BackColor = System.Drawing.Color.White;
			this.__0x6271.Enabled = false;
			this.__0x6271.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6271.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6271.Location = new System.Drawing.Point(403, 377);
			this.__0x6271.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6271.Name = "button132";
			this.__0x6271.Size = new System.Drawing.Size(24, 20);
			this.__0x6271.TabIndex = 144;
			this.__0x6271.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6272.BackColor = System.Drawing.Color.White;
			this.__0x6272.Enabled = false;
			this.__0x6272.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6272.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6272.Location = new System.Drawing.Point(433, 377);
			this.__0x6272.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6272.Name = "button133";
			this.__0x6272.Size = new System.Drawing.Size(24, 20);
			this.__0x6272.TabIndex = 145;
			this.__0x6272.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6273.BackColor = System.Drawing.Color.White;
			this.__0x6273.Enabled = false;
			this.__0x6273.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6273.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6273.Location = new System.Drawing.Point(463, 377);
			this.__0x6273.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6273.Name = "button134";
			this.__0x6273.Size = new System.Drawing.Size(24, 20);
			this.__0x6273.TabIndex = 146;
			this.__0x6273.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6274.BackColor = System.Drawing.Color.White;
			this.__0x6274.Enabled = false;
			this.__0x6274.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6274.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6274.Location = new System.Drawing.Point(493, 377);
			this.__0x6274.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6274.Name = "button135";
			this.__0x6274.Size = new System.Drawing.Size(24, 20);
			this.__0x6274.TabIndex = 147;
			this.__0x6274.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6275.BackColor = System.Drawing.Color.White;
			this.__0x6275.Enabled = false;
			this.__0x6275.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6275.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6275.Location = new System.Drawing.Point(13, 402);
			this.__0x6275.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6275.Name = "button136";
			this.__0x6275.Size = new System.Drawing.Size(24, 20);
			this.__0x6275.TabIndex = 148;
			this.__0x6275.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6276.BackColor = System.Drawing.Color.White;
			this.__0x6276.Enabled = false;
			this.__0x6276.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6276.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6276.Location = new System.Drawing.Point(43, 402);
			this.__0x6276.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6276.Name = "button137";
			this.__0x6276.Size = new System.Drawing.Size(24, 20);
			this.__0x6276.TabIndex = 149;
			this.__0x6276.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6277.BackColor = System.Drawing.Color.White;
			this.__0x6277.Enabled = false;
			this.__0x6277.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6277.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6277.Location = new System.Drawing.Point(73, 402);
			this.__0x6277.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6277.Name = "button138";
			this.__0x6277.Size = new System.Drawing.Size(24, 20);
			this.__0x6277.TabIndex = 150;
			this.__0x6277.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6278.BackColor = System.Drawing.Color.White;
			this.__0x6278.Enabled = false;
			this.__0x6278.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6278.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6278.Location = new System.Drawing.Point(103, 402);
			this.__0x6278.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6278.Name = "button139";
			this.__0x6278.Size = new System.Drawing.Size(24, 20);
			this.__0x6278.TabIndex = 151;
			this.__0x6278.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6279.BackColor = System.Drawing.Color.White;
			this.__0x6279.Enabled = false;
			this.__0x6279.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6279.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6279.Location = new System.Drawing.Point(133, 402);
			this.__0x6279.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6279.Name = "button140";
			this.__0x6279.Size = new System.Drawing.Size(24, 20);
			this.__0x6279.TabIndex = 152;
			this.__0x6279.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6280.BackColor = System.Drawing.Color.White;
			this.__0x6280.Enabled = false;
			this.__0x6280.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6280.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6280.Location = new System.Drawing.Point(163, 402);
			this.__0x6280.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6280.Name = "button141";
			this.__0x6280.Size = new System.Drawing.Size(24, 20);
			this.__0x6280.TabIndex = 153;
			this.__0x6280.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6281.BackColor = System.Drawing.Color.White;
			this.__0x6281.Enabled = false;
			this.__0x6281.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6281.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6281.Location = new System.Drawing.Point(193, 402);
			this.__0x6281.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6281.Name = "button142";
			this.__0x6281.Size = new System.Drawing.Size(24, 20);
			this.__0x6281.TabIndex = 154;
			this.__0x6281.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6282.BackColor = System.Drawing.Color.White;
			this.__0x6282.Enabled = false;
			this.__0x6282.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6282.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6282.Location = new System.Drawing.Point(223, 402);
			this.__0x6282.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6282.Name = "button143";
			this.__0x6282.Size = new System.Drawing.Size(24, 20);
			this.__0x6282.TabIndex = 155;
			this.__0x6282.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6283.BackColor = System.Drawing.Color.White;
			this.__0x6283.Enabled = false;
			this.__0x6283.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6283.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6283.Location = new System.Drawing.Point(253, 402);
			this.__0x6283.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6283.Name = "button144";
			this.__0x6283.Size = new System.Drawing.Size(24, 20);
			this.__0x6283.TabIndex = 156;
			this.__0x6283.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6284.BackColor = System.Drawing.Color.White;
			this.__0x6284.Enabled = false;
			this.__0x6284.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6284.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6284.Location = new System.Drawing.Point(283, 402);
			this.__0x6284.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6284.Name = "button145";
			this.__0x6284.Size = new System.Drawing.Size(24, 20);
			this.__0x6284.TabIndex = 157;
			this.__0x6284.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6285.BackColor = System.Drawing.Color.White;
			this.__0x6285.Enabled = false;
			this.__0x6285.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6285.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6285.Location = new System.Drawing.Point(313, 402);
			this.__0x6285.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6285.Name = "button146";
			this.__0x6285.Size = new System.Drawing.Size(24, 20);
			this.__0x6285.TabIndex = 158;
			this.__0x6285.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6286.BackColor = System.Drawing.Color.White;
			this.__0x6286.Enabled = false;
			this.__0x6286.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6286.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6286.Location = new System.Drawing.Point(343, 402);
			this.__0x6286.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6286.Name = "button147";
			this.__0x6286.Size = new System.Drawing.Size(24, 20);
			this.__0x6286.TabIndex = 159;
			this.__0x6286.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6287.BackColor = System.Drawing.Color.White;
			this.__0x6287.Enabled = false;
			this.__0x6287.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6287.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6287.Location = new System.Drawing.Point(373, 402);
			this.__0x6287.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6287.Name = "button148";
			this.__0x6287.Size = new System.Drawing.Size(24, 20);
			this.__0x6287.TabIndex = 160;
			this.__0x6287.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6288.BackColor = System.Drawing.Color.White;
			this.__0x6288.Enabled = false;
			this.__0x6288.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6288.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6288.Location = new System.Drawing.Point(403, 402);
			this.__0x6288.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6288.Name = "button149";
			this.__0x6288.Size = new System.Drawing.Size(24, 20);
			this.__0x6288.TabIndex = 161;
			this.__0x6288.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6289.BackColor = System.Drawing.Color.White;
			this.__0x6289.Enabled = false;
			this.__0x6289.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6289.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6289.Location = new System.Drawing.Point(433, 402);
			this.__0x6289.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6289.Name = "button150";
			this.__0x6289.Size = new System.Drawing.Size(24, 20);
			this.__0x6289.TabIndex = 162;
			this.__0x6289.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6290.BackColor = System.Drawing.Color.White;
			this.__0x6290.Enabled = false;
			this.__0x6290.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6290.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6290.Location = new System.Drawing.Point(463, 402);
			this.__0x6290.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6290.Name = "button151";
			this.__0x6290.Size = new System.Drawing.Size(24, 20);
			this.__0x6290.TabIndex = 163;
			this.__0x6290.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6291.BackColor = System.Drawing.Color.White;
			this.__0x6291.Enabled = false;
			this.__0x6291.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6291.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6291.Location = new System.Drawing.Point(493, 402);
			this.__0x6291.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6291.Name = "button152";
			this.__0x6291.Size = new System.Drawing.Size(24, 20);
			this.__0x6291.TabIndex = 164;
			this.__0x6291.UseVisualStyleBackColor = false;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.Controls.Add(this.__0x6122);
			this.Controls.Add(this.__0x6136);
			this.Controls.Add(this.__0x6137);
			this.Controls.Add(this.__0x6138);
			this.Controls.Add(this.__0x6135);
			this.Controls.Add(this.__0x6134);
			this.Controls.Add(this.__0x6133);
			this.Controls.Add(this.__0x6132);
			this.Controls.Add(this.__0x6131);
			this.Controls.Add(this.__0x6130);
			this.Controls.Add(this.__0x6129);
			this.Controls.Add(this.__0x6128);
			this.Controls.Add(this.__0x6126);
			this.Controls.Add(this.__0x6127);
			this.Controls.Add(this.__0x6124);
			this.Controls.Add(this.__0x6125);
			this.Controls.Add(this.__0x6123);
			this.Controls.Add(this.__0x6139);
			this.Controls.Add(this.__0x6140);
			this.Controls.Add(this.__0x6141);
			this.Controls.Add(this.__0x6142);
			this.Controls.Add(this.__0x6143);
			this.Controls.Add(this.__0x6144);
			this.Controls.Add(this.__0x6145);
			this.Controls.Add(this.__0x6146);
			this.Controls.Add(this.__0x6147);
			this.Controls.Add(this.__0x6148);
			this.Controls.Add(this.__0x6149);
			this.Controls.Add(this.__0x6150);
			this.Controls.Add(this.__0x6151);
			this.Controls.Add(this.__0x6152);
			this.Controls.Add(this.__0x6153);
			this.Controls.Add(this.__0x6154);
			this.Controls.Add(this.__0x6155);
			this.Controls.Add(this.__0x6156);
			this.Controls.Add(this.__0x6157);
			this.Controls.Add(this.__0x6158);
			this.Controls.Add(this.__0x6159);
			this.Controls.Add(this.__0x6160);
			this.Controls.Add(this.__0x6161);
			this.Controls.Add(this.__0x6162);
			this.Controls.Add(this.__0x6163);
			this.Controls.Add(this.__0x6164);
			this.Controls.Add(this.__0x6165);
			this.Controls.Add(this.__0x6166);
			this.Controls.Add(this.__0x6167);
			this.Controls.Add(this.__0x6168);
			this.Controls.Add(this.__0x6169);
			this.Controls.Add(this.__0x6170);
			this.Controls.Add(this.__0x6171);
			this.Controls.Add(this.__0x6172);
			this.Controls.Add(this.__0x6173);
			this.Controls.Add(this.__0x6174);
			this.Controls.Add(this.__0x6175);
			this.Controls.Add(this.__0x6176);
			this.Controls.Add(this.__0x6177);
			this.Controls.Add(this.__0x6178);
			this.Controls.Add(this.__0x6179);
			this.Controls.Add(this.__0x6180);
			this.Controls.Add(this.__0x6181);
			this.Controls.Add(this.__0x6182);
			this.Controls.Add(this.__0x6183);
			this.Controls.Add(this.__0x6184);
			this.Controls.Add(this.__0x6185);
			this.Controls.Add(this.__0x6186);
			this.Controls.Add(this.__0x6187);
			this.Controls.Add(this.__0x6188);
			this.Controls.Add(this.__0x6189);
			this.Controls.Add(this.__0x6190);
			this.Controls.Add(this.__0x6191);
			this.Controls.Add(this.__0x6192);
			this.Controls.Add(this.__0x6193);
			this.Controls.Add(this.__0x6194);
			this.Controls.Add(this.__0x6195);
			this.Controls.Add(this.__0x6196);
			this.Controls.Add(this.__0x6197);
			this.Controls.Add(this.__0x6198);
			this.Controls.Add(this.__0x6199);
			this.Controls.Add(this.__0x6200);
			this.Controls.Add(this.__0x6201);
			this.Controls.Add(this.__0x6202);
			this.Controls.Add(this.__0x6203);
			this.Controls.Add(this.__0x6204);
			this.Controls.Add(this.__0x6205);
			this.Controls.Add(this.__0x6206);
			this.Controls.Add(this.__0x6207);
			this.Controls.Add(this.__0x6208);
			this.Controls.Add(this.__0x6209);
			this.Controls.Add(this.__0x6210);
			this.Controls.Add(this.__0x6211);
			this.Controls.Add(this.__0x6212);
			this.Controls.Add(this.__0x6213);
			this.Controls.Add(this.__0x6214);
			this.Controls.Add(this.__0x6215);
			this.Controls.Add(this.__0x6216);
			this.Controls.Add(this.__0x6217);
			this.Controls.Add(this.__0x6218);
			this.Controls.Add(this.__0x6219);
			this.Controls.Add(this.__0x6220);
			this.Controls.Add(this.__0x6221);
			this.Controls.Add(this.__0x6222);
			this.Controls.Add(this.__0x6223);
			this.Controls.Add(this.__0x6224);
			this.Controls.Add(this.__0x6225);
			this.Controls.Add(this.__0x6226);
			this.Controls.Add(this.__0x6227);
			this.Controls.Add(this.__0x6228);
			this.Controls.Add(this.__0x6229);
			this.Controls.Add(this.__0x6230);
			this.Controls.Add(this.__0x6231);
			this.Controls.Add(this.__0x6232);
			this.Controls.Add(this.__0x6233);
			this.Controls.Add(this.__0x6234);
			this.Controls.Add(this.__0x6235);
			this.Controls.Add(this.__0x6236);
			this.Controls.Add(this.__0x6237);
			this.Controls.Add(this.__0x6238);
			this.Controls.Add(this.__0x6239);
			this.Controls.Add(this.__0x6240);
			this.Controls.Add(this.__0x6241);
			this.Controls.Add(this.__0x6242);
			this.Controls.Add(this.__0x6243);
			this.Controls.Add(this.__0x6244);
			this.Controls.Add(this.__0x6245);
			this.Controls.Add(this.__0x6246);
			this.Controls.Add(this.__0x6247);
			this.Controls.Add(this.__0x6248);
			this.Controls.Add(this.__0x6249);
			this.Controls.Add(this.__0x6250);
			this.Controls.Add(this.__0x6251);
			this.Controls.Add(this.__0x6252);
			this.Controls.Add(this.__0x6253);
			this.Controls.Add(this.__0x6254);
			this.Controls.Add(this.__0x6255);
			this.Controls.Add(this.__0x6256);
			this.Controls.Add(this.__0x6257);
			this.Controls.Add(this.__0x6258);
			this.Controls.Add(this.__0x6259);
			this.Controls.Add(this.__0x6260);
			this.Controls.Add(this.__0x6261);
			this.Controls.Add(this.__0x6262);
			this.Controls.Add(this.__0x6263);
			this.Controls.Add(this.__0x6264);
			this.Controls.Add(this.__0x6265);
			this.Controls.Add(this.__0x6266);
			this.Controls.Add(this.__0x6267);
			this.Controls.Add(this.__0x6268);
			this.Controls.Add(this.__0x6269);
			this.Controls.Add(this.__0x6270);
			this.Controls.Add(this.__0x6271);
			this.Controls.Add(this.__0x6272);
			this.Controls.Add(this.__0x6273);
			this.Controls.Add(this.__0x6274);
			this.Controls.Add(this.__0x6275);
			this.Controls.Add(this.__0x6276);
			this.Controls.Add(this.__0x6277);
			this.Controls.Add(this.__0x6278);
			this.Controls.Add(this.__0x6279);
			this.Controls.Add(this.__0x6280);
			this.Controls.Add(this.__0x6281);
			this.Controls.Add(this.__0x6282);
			this.Controls.Add(this.__0x6283);
			this.Controls.Add(this.__0x6284);
			this.Controls.Add(this.__0x6285);
			this.Controls.Add(this.__0x6286);
			this.Controls.Add(this.__0x6287);
			this.Controls.Add(this.__0x6288);
			this.Controls.Add(this.__0x6289);
			this.Controls.Add(this.__0x6290);
			this.Controls.Add(this.__0x6291);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "ColorValuePoweredSelectControl";
			this.Size = new System.Drawing.Size(533, 441);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x6122;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6123;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6124;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x6125;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6126;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x6127;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6128;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x6129;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6130;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6131;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6132;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6133;
		private NeoAxis.Editor.ColorWheel __0x6134;
		private NeoAxis.Editor.ColorGradientControl __0x6135;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6136;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x6137;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6138;
		private System.Windows.Forms.Button __0x6139;
		private System.Windows.Forms.Button __0x6140;
		private System.Windows.Forms.Button __0x6141;
		private System.Windows.Forms.Button __0x6142;
		private System.Windows.Forms.Button __0x6143;
		private System.Windows.Forms.Button __0x6144;
		private System.Windows.Forms.Button __0x6145;
		private System.Windows.Forms.Button __0x6146;
		private System.Windows.Forms.Button __0x6147;
		private System.Windows.Forms.Button __0x6148;
		private System.Windows.Forms.Button __0x6149;
		private System.Windows.Forms.Button __0x6150;
		private System.Windows.Forms.Button __0x6151;
		private System.Windows.Forms.Button __0x6152;
		private System.Windows.Forms.Button __0x6153;
		private System.Windows.Forms.Button __0x6154;
		private System.Windows.Forms.Button __0x6155;
		private System.Windows.Forms.Button __0x6156;
		private System.Windows.Forms.Button __0x6157;
		private System.Windows.Forms.Button __0x6158;
		private System.Windows.Forms.Button __0x6159;
		private System.Windows.Forms.Button __0x6160;
		private System.Windows.Forms.Button __0x6161;
		private System.Windows.Forms.Button __0x6162;
		private System.Windows.Forms.Button __0x6163;
		private System.Windows.Forms.Button __0x6164;
		private System.Windows.Forms.Button __0x6165;
		private System.Windows.Forms.Button __0x6166;
		private System.Windows.Forms.Button __0x6167;
		private System.Windows.Forms.Button __0x6168;
		private System.Windows.Forms.Button __0x6169;
		private System.Windows.Forms.Button __0x6170;
		private System.Windows.Forms.Button __0x6171;
		private System.Windows.Forms.Button __0x6172;
		private System.Windows.Forms.Button __0x6173;
		private System.Windows.Forms.Button __0x6174;
		private System.Windows.Forms.Button __0x6175;
		private System.Windows.Forms.Button __0x6176;
		private System.Windows.Forms.Button __0x6177;
		private System.Windows.Forms.Button __0x6178;
		private System.Windows.Forms.Button __0x6179;
		private System.Windows.Forms.Button __0x6180;
		private System.Windows.Forms.Button __0x6181;
		private System.Windows.Forms.Button __0x6182;
		private System.Windows.Forms.Button __0x6183;
		private System.Windows.Forms.Button __0x6184;
		private System.Windows.Forms.Button __0x6185;
		private System.Windows.Forms.Button __0x6186;
		private System.Windows.Forms.Button __0x6187;
		private System.Windows.Forms.Button __0x6188;
		private System.Windows.Forms.Button __0x6189;
		private System.Windows.Forms.Button __0x6190;
		private System.Windows.Forms.Button __0x6191;
		private System.Windows.Forms.Button __0x6192;
		private System.Windows.Forms.Button __0x6193;
		private System.Windows.Forms.Button __0x6194;
		private System.Windows.Forms.Button __0x6195;
		private System.Windows.Forms.Button __0x6196;
		private System.Windows.Forms.Button __0x6197;
		private System.Windows.Forms.Button __0x6198;
		private System.Windows.Forms.Button __0x6199;
		private System.Windows.Forms.Button __0x6200;
		private System.Windows.Forms.Button __0x6201;
		private System.Windows.Forms.Button __0x6202;
		private System.Windows.Forms.Button __0x6203;
		private System.Windows.Forms.Button __0x6204;
		private System.Windows.Forms.Button __0x6205;
		private System.Windows.Forms.Button __0x6206;
		private System.Windows.Forms.Button __0x6207;
		private System.Windows.Forms.Button __0x6208;
		private System.Windows.Forms.Button __0x6209;
		private System.Windows.Forms.Button __0x6210;
		private System.Windows.Forms.Button __0x6211;
		private System.Windows.Forms.Button __0x6212;
		private System.Windows.Forms.Button __0x6213;
		private System.Windows.Forms.Button __0x6214;
		private System.Windows.Forms.Button __0x6215;
		private System.Windows.Forms.Button __0x6216;
		private System.Windows.Forms.Button __0x6217;
		private System.Windows.Forms.Button __0x6218;
		private System.Windows.Forms.Button __0x6219;
		private System.Windows.Forms.Button __0x6220;
		private System.Windows.Forms.Button __0x6221;
		private System.Windows.Forms.Button __0x6222;
		private System.Windows.Forms.Button __0x6223;
		private System.Windows.Forms.Button __0x6224;
		private System.Windows.Forms.Button __0x6225;
		private System.Windows.Forms.Button __0x6226;
		private System.Windows.Forms.Button __0x6227;
		private System.Windows.Forms.Button __0x6228;
		private System.Windows.Forms.Button __0x6229;
		private System.Windows.Forms.Button __0x6230;
		private System.Windows.Forms.Button __0x6231;
		private System.Windows.Forms.Button __0x6232;
		private System.Windows.Forms.Button __0x6233;
		private System.Windows.Forms.Button __0x6234;
		private System.Windows.Forms.Button __0x6235;
		private System.Windows.Forms.Button __0x6236;
		private System.Windows.Forms.Button __0x6237;
		private System.Windows.Forms.Button __0x6238;
		private System.Windows.Forms.Button __0x6239;
		private System.Windows.Forms.Button __0x6240;
		private System.Windows.Forms.Button __0x6241;
		private System.Windows.Forms.Button __0x6242;
		private System.Windows.Forms.Button __0x6243;
		private System.Windows.Forms.Button __0x6244;
		private System.Windows.Forms.Button __0x6245;
		private System.Windows.Forms.Button __0x6246;
		private System.Windows.Forms.Button __0x6247;
		private System.Windows.Forms.Button __0x6248;
		private System.Windows.Forms.Button __0x6249;
		private System.Windows.Forms.Button __0x6250;
		private System.Windows.Forms.Button __0x6251;
		private System.Windows.Forms.Button __0x6252;
		private System.Windows.Forms.Button __0x6253;
		private System.Windows.Forms.Button __0x6254;
		private System.Windows.Forms.Button __0x6255;
		private System.Windows.Forms.Button __0x6256;
		private System.Windows.Forms.Button __0x6257;
		private System.Windows.Forms.Button __0x6258;
		private System.Windows.Forms.Button __0x6259;
		private System.Windows.Forms.Button __0x6260;
		private System.Windows.Forms.Button __0x6261;
		private System.Windows.Forms.Button __0x6262;
		private System.Windows.Forms.Button __0x6263;
		private System.Windows.Forms.Button __0x6264;
		private System.Windows.Forms.Button __0x6265;
		private System.Windows.Forms.Button __0x6266;
		private System.Windows.Forms.Button __0x6267;
		private System.Windows.Forms.Button __0x6268;
		private System.Windows.Forms.Button __0x6269;
		private System.Windows.Forms.Button __0x6270;
		private System.Windows.Forms.Button __0x6271;
		private System.Windows.Forms.Button __0x6272;
		private System.Windows.Forms.Button __0x6273;
		private System.Windows.Forms.Button __0x6274;
		private System.Windows.Forms.Button __0x6275;
		private System.Windows.Forms.Button __0x6276;
		private System.Windows.Forms.Button __0x6277;
		private System.Windows.Forms.Button __0x6278;
		private System.Windows.Forms.Button __0x6279;
		private System.Windows.Forms.Button __0x6280;
		private System.Windows.Forms.Button __0x6281;
		private System.Windows.Forms.Button __0x6282;
		private System.Windows.Forms.Button __0x6283;
		private System.Windows.Forms.Button __0x6284;
		private System.Windows.Forms.Button __0x6285;
		private System.Windows.Forms.Button __0x6286;
		private System.Windows.Forms.Button __0x6287;
		private System.Windows.Forms.Button __0x6288;
		private System.Windows.Forms.Button __0x6289;
		private System.Windows.Forms.Button __0x6290;
		private System.Windows.Forms.Button __0x6291;
	}
}





namespace NeoAxis.Editor
{
	

	public partial class ColorValuePoweredSelectForm : EngineForm
	{
		
		bool __0x6318;
		bool __0x6319;
		ApplicableRangeColorValuePowerAttribute __0x6320;
		bool __0x6321;

		bool __0x6322;
		bool __0x6323;

		

		

		public ColorValuePoweredSelectForm()
		{
			__0x6531();

			Text = EditorLocalization.Translate( "ColorValuePoweredSelectForm", Text );
			__0x6521.Text = EditorLocalization.Translate( "General", __0x6521.Text );
			__0x6520.Text = EditorLocalization.Translate( "General", __0x6520.Text );

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		
		
		

		

		

		
		
		

		
		

		

		
		
		
		

		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		

		
		
		

		public void Init( ColorValuePowered value, bool noAlpha, bool powered, ApplicableRangeColorValuePowerAttribute powerRange, bool readOnly )
		{
			this.__0x6318 = noAlpha;
			this.__0x6319 = powered;
			if( powered && powerRange == null )
				powerRange = new ApplicableRangeColorValuePowerAttribute( 0, 100, RangeAttribute.ConvenientDistributionEnum.Exponential, 2 );
			this.__0x6320 = powerRange;
			this.__0x6321 = readOnly;

			__0x6323 = true;

			__0x6524( value.Color, null );

			if( powered )
			{
				__0x6364.Minimum = (decimal)powerRange.Minimum;
				__0x6364.Maximum = (decimal)powerRange.Maximum;

				powerRange.GetTrackBarMinMax( false, out int min, out int max );
				__0x6366.Minimum = min;
				__0x6366.Maximum = max;
				__0x6366.LargeChange = ( __0x6366.Maximum - __0x6366.Minimum ) / 10;
				__0x6366.SmallChange = ( __0x6366.Maximum - __0x6366.Minimum ) / 100;

				__0x6525( value.Power, null );
			}
			else
			{
				__0x6364.Enabled = false;
				__0x6366.Enabled = false;
				__0x6365.Enabled = false;

				__0x6364.Minimum = 0;
				__0x6364.Maximum = 1;
				__0x6364.Value = 1;
				__0x6366.Minimum = 0;
				__0x6366.Maximum = 1;
				__0x6366.Value = 1;
			}

			
			if( noAlpha )
			{
				__0x6358.Enabled = false;
				__0x6356.Enabled = false;
				__0x6357.Enabled = false;
			}

			__0x6528();

			if( readOnly )
			{
				__0x6362.Enabled = false;
				__0x6363.Enabled = false;

				__0x6351.Enabled = false;
				__0x6352.Enabled = false;
				__0x6354.Enabled = false;
				__0x6358.Enabled = false;
				__0x6364.Enabled = false;
				
				
				
				
				
				

				__0x6356.Enabled = false;
				__0x6359.Enabled = false;
				__0x6360.Enabled = false;
				__0x6361.Enabled = false;
				__0x6366.Enabled = false;
			}

			__0x6351.TextChanged += __0x6527;
			__0x6352.TextChanged += __0x6527;
			__0x6354.TextChanged += __0x6527;
			__0x6358.TextChanged += __0x6527;
			__0x6364.TextChanged += __0x6527;

			__0x6323 = false;
		}

		void __0x6524( ColorValue __0x6532, object __0x6533 )
		{
			HSVColor __0x6324 = HSVColor.FromRGB( __0x6532 );

			if( __0x6533 != __0x6362 )
				__0x6362.HsvColor = __0x6324;
			if( __0x6533 != __0x6363 )
			{
				__0x6363.Value = (int)( __0x6324.Value * 255 );
				__0x6363.TopColor = new HSVColor( __0x6324.Hue, __0x6324.Saturation, 1 ).ToColor();
				__0x6363.BottomColor = Color.Black;
			}

			if( __0x6533 != __0x6351 )
				__0x6351.Value = (decimal)MathEx.Saturate( __0x6532.Red ) * 255;
			if( __0x6533 != __0x6352 )
				__0x6352.Value = (decimal)MathEx.Saturate( __0x6532.Green ) * 255;
			if( __0x6533 != __0x6354 )
				__0x6354.Value = (decimal)MathEx.Saturate( __0x6532.Blue ) * 255;
			if( __0x6533 != __0x6358 )
				__0x6358.Value = (decimal)( MathEx.Saturate( __0x6318 ? 1 : __0x6532.Alpha ) * 255 );

			if( __0x6533 != __0x6361 )
				__0x6361.Value = (int)( MathEx.Saturate( __0x6532.Red ) * 1000 );
			if( __0x6533 != __0x6360 )
				__0x6360.Value = (int)( MathEx.Saturate( __0x6532.Green ) * 1000 );
			if( __0x6533 != __0x6359 )
				__0x6359.Value = (int)( MathEx.Saturate( __0x6532.Blue ) * 1000 );
			if( __0x6533 != __0x6356 )
				__0x6356.Value = (int)( MathEx.Saturate( __0x6318 ? 1 : __0x6532.Alpha ) * 1000 );
		}

		void __0x6525( double __0x6534, object __0x6535 )
		{
			if( __0x6535 != __0x6364 )
				__0x6364.Value = (decimal)MathEx.Clamp( __0x6534, __0x6320.Minimum, __0x6320.Maximum );
			if( __0x6535 != __0x6366 )
				__0x6366.Value = __0x6320.GetTrackBarValue( false, __0x6534 );
		}

		[Browsable( false )]
		public bool ValueWasChanged
		{
			get { return __0x6322; }
		}

		[Browsable( false )]
		public ColorValuePowered CurrentValue
		{
			get
			{
				return new ColorValuePowered(
					(float)( __0x6351.TextValue / 255 ),
					(float)( __0x6352.TextValue / 255 ),
					(float)( __0x6354.TextValue / 255 ),
					(float)( __0x6358.TextValue / 255 ),
					(float)__0x6364.TextValue );
			}
		}

		private void __0x6526( object __0x6536, EventArgs __0x6537 )
		{
			__0x6527( __0x6536, __0x6537 );
		}

		private void __0x6527( object __0x6538, EventArgs __0x6539 )
		{
			if( __0x6323 )
				return;

			__0x6323 = true;

			__0x6322 = true;

			if( __0x6538 == __0x6362 || __0x6538 == __0x6363 ||
				__0x6538 == __0x6351 || __0x6538 == __0x6352 || __0x6538 == __0x6354 || __0x6538 == __0x6358 ||
				__0x6538 == __0x6361 || __0x6538 == __0x6360 || __0x6538 == __0x6359 || __0x6538 == __0x6356 )
			{
				ColorValue __0x6325 = CurrentValue.Color;

				if( __0x6538 == __0x6362 || __0x6538 == __0x6363 )
				{
					HSVColor __0x6326 = __0x6362.HsvColor;
					__0x6326.Value = (double)__0x6363.Value / 255.0;

					var __0x6327 = __0x6326.ToColorValue();
					__0x6325.Red = __0x6327.Red;
					__0x6325.Green = __0x6327.Green;
					__0x6325.Blue = __0x6327.Blue;
				}

				if( __0x6538 == __0x6361 )
					__0x6325.Red = (float)( (double)__0x6361.Value / 1000 );
				if( __0x6538 == __0x6360 )
					__0x6325.Green = (float)( (double)__0x6360.Value / 1000 );
				if( __0x6538 == __0x6359 )
					__0x6325.Blue = (float)( (double)__0x6359.Value / 1000 );
				if( __0x6538 == __0x6356 )
					__0x6325.Alpha = (float)( (double)__0x6356.Value / 1000 );

				__0x6524( __0x6325, __0x6538 );
			}

			if( __0x6319 && ( __0x6538 == __0x6364 || __0x6538 == __0x6366 ) )
			{
				double __0x6328 = CurrentValue.Power;

				if( __0x6538 == __0x6366 )
					__0x6328 = __0x6320.GetValueFromTrackBar( false, __0x6366.Value );

				__0x6525( __0x6328, __0x6538 );
			}

			
			
			
			
			
			
			

			__0x6530();

			__0x6323 = false;
		}

		static Tuple<string, string>[] __0x6329 =
		{
			Tuple.Create( "AliceBlue", "F0F8FF" ),
			Tuple.Create( "AntiqueWhite", "FAEBD7" ),
			Tuple.Create( "Aqua", "00FFFF" ),
			Tuple.Create( "Aquamarine", "7FFFD4" ),
			Tuple.Create( "Azure", "F0FFFF" ),
			Tuple.Create( "Beige", "F5F5DC" ),
			Tuple.Create( "Bisque", "FFE4C4" ),
			Tuple.Create( "Black", "000000" ),
			Tuple.Create( "BlanchedAlmond", "FFEBCD" ),
			Tuple.Create( "Blue", "0000FF" ),
			Tuple.Create( "BlueViolet", "8A2BE2" ),
			Tuple.Create( "Brown", "A52A2A" ),
			Tuple.Create( "BurlyWood", "DEB887" ),
			Tuple.Create( "CadetBlue", "5F9EA0" ),
			Tuple.Create( "Chartreuse", "7FFF00" ),
			Tuple.Create( "Chocolate", "D2691E" ),
			Tuple.Create( "Coral", "FF7F50" ),
			Tuple.Create( "CornflowerBlue", "6495ED" ),
			Tuple.Create( "Cornsilk", "FFF8DC" ),
			Tuple.Create( "Crimson", "DC143C" ),
			Tuple.Create( "Cyan", "00FFFF" ),
			Tuple.Create( "DarkBlue", "00008B" ),
			Tuple.Create( "DarkCyan", "008B8B" ),
			Tuple.Create( "DarkGoldenRod", "B8860B" ),
			Tuple.Create( "DarkGray", "A9A9A9" ),
			Tuple.Create( "DarkGrey", "A9A9A9" ),
			Tuple.Create( "DarkGreen", "006400" ),
			Tuple.Create( "DarkKhaki", "BDB76B" ),
			Tuple.Create( "DarkMagenta", "8B008B" ),
			Tuple.Create( "DarkOliveGreen", "556B2F" ),
			Tuple.Create( "DarkOrange", "FF8C00" ),
			Tuple.Create( "DarkOrchid", "9932CC" ),
			Tuple.Create( "DarkRed", "8B0000" ),
			Tuple.Create( "DarkSalmon", "E9967A" ),
			Tuple.Create( "DarkSeaGreen", "8FBC8F" ),
			Tuple.Create( "DarkSlateBlue", "483D8B" ),
			Tuple.Create( "DarkSlateGray", "2F4F4F" ),
			Tuple.Create( "DarkSlateGrey", "2F4F4F" ),
			Tuple.Create( "DarkTurquoise", "00CED1" ),
			Tuple.Create( "DarkViolet", "9400D3" ),
			Tuple.Create( "DeepPink", "FF1493" ),
			Tuple.Create( "DeepSkyBlue", "00BFFF" ),
			Tuple.Create( "DimGray", "696969" ),
			Tuple.Create( "DimGrey", "696969" ),
			Tuple.Create( "DodgerBlue", "1E90FF" ),
			Tuple.Create( "FireBrick", "B22222" ),
			Tuple.Create( "FloralWhite", "FFFAF0" ),
			Tuple.Create( "ForestGreen", "228B22" ),
			Tuple.Create( "Fuchsia", "FF00FF" ),
			Tuple.Create( "Gainsboro", "DCDCDC" ),
			Tuple.Create( "GhostWhite", "F8F8FF" ),
			Tuple.Create( "Gold", "FFD700" ),
			Tuple.Create( "GoldenRod", "DAA520" ),
			Tuple.Create( "Gray", "808080" ),
			Tuple.Create( "Grey", "808080" ),
			Tuple.Create( "Green", "008000" ),
			Tuple.Create( "GreenYellow", "ADFF2F" ),
			Tuple.Create( "HoneyDew", "F0FFF0" ),
			Tuple.Create( "HotPink", "FF69B4" ),
			Tuple.Create( "IndianRed", "CD5C5C" ),
			Tuple.Create( "Indigo", "4B0082" ),
			Tuple.Create( "Ivory", "FFFFF0" ),
			Tuple.Create( "Khaki", "F0E68C" ),
			Tuple.Create( "Lavender", "E6E6FA" ),
			Tuple.Create( "LavenderBlush", "FFF0F5" ),
			Tuple.Create( "LawnGreen", "7CFC00" ),
			Tuple.Create( "LemonChiffon", "FFFACD" ),
			Tuple.Create( "LightBlue", "ADD8E6" ),
			Tuple.Create( "LightCoral", "F08080" ),
			Tuple.Create( "LightCyan", "E0FFFF" ),
			Tuple.Create( "LightGoldenRodYellow", "FAFAD2" ),
			Tuple.Create( "LightGray", "D3D3D3" ),
			Tuple.Create( "LightGrey", "D3D3D3" ),
			Tuple.Create( "LightGreen", "90EE90" ),
			Tuple.Create( "LightPink", "FFB6C1" ),
			Tuple.Create( "LightSalmon", "FFA07A" ),
			Tuple.Create( "LightSeaGreen", "20B2AA" ),
			Tuple.Create( "LightSkyBlue", "87CEFA" ),
			Tuple.Create( "LightSlateGray", "778899" ),
			Tuple.Create( "LightSlateGrey", "778899" ),
			Tuple.Create( "LightSteelBlue", "B0C4DE" ),
			Tuple.Create( "LightYellow", "FFFFE0" ),
			Tuple.Create( "Lime", "00FF00" ),
			Tuple.Create( "LimeGreen", "32CD32" ),
			Tuple.Create( "Linen", "FAF0E6" ),
			Tuple.Create( "Magenta", "FF00FF" ),
			Tuple.Create( "Maroon", "800000" ),
			Tuple.Create( "MediumAquaMarine", "66CDAA" ),
			Tuple.Create( "MediumBlue", "0000CD" ),
			Tuple.Create( "MediumOrchid", "BA55D3" ),
			Tuple.Create( "MediumPurple", "9370DB" ),
			Tuple.Create( "MediumSeaGreen", "3CB371" ),
			Tuple.Create( "MediumSlateBlue", "7B68EE" ),
			Tuple.Create( "MediumSpringGreen", "00FA9A" ),
			Tuple.Create( "MediumTurquoise", "48D1CC" ),
			Tuple.Create( "MediumVioletRed", "C71585" ),
			Tuple.Create( "MidnightBlue", "191970" ),
			Tuple.Create( "MintCream", "F5FFFA" ),
			Tuple.Create( "MistyRose", "FFE4E1" ),
			Tuple.Create( "Moccasin", "FFE4B5" ),
			Tuple.Create( "NavajoWhite", "FFDEAD" ),
			Tuple.Create( "Navy", "000080" ),
			Tuple.Create( "OldLace", "FDF5E6" ),
			Tuple.Create( "Olive", "808000" ),
			Tuple.Create( "OliveDrab", "6B8E23" ),
			Tuple.Create( "Orange", "FFA500" ),
			Tuple.Create( "OrangeRed", "FF4500" ),
			Tuple.Create( "Orchid", "DA70D6" ),
			Tuple.Create( "PaleGoldenRod", "EEE8AA" ),
			Tuple.Create( "PaleGreen", "98FB98" ),
			Tuple.Create( "PaleTurquoise", "AFEEEE" ),
			Tuple.Create( "PaleVioletRed", "DB7093" ),
			Tuple.Create( "PapayaWhip", "FFEFD5" ),
			Tuple.Create( "PeachPuff", "FFDAB9" ),
			Tuple.Create( "Peru", "CD853F" ),
			Tuple.Create( "Pink", "FFC0CB" ),
			Tuple.Create( "Plum", "DDA0DD" ),
			Tuple.Create( "PowderBlue", "B0E0E6" ),
			Tuple.Create( "Purple", "800080" ),
			Tuple.Create( "RebeccaPurple", "663399" ),
			Tuple.Create( "Red", "FF0000" ),
			Tuple.Create( "RosyBrown", "BC8F8F" ),
			Tuple.Create( "RoyalBlue", "4169E1" ),
			Tuple.Create( "SaddleBrown", "8B4513" ),
			Tuple.Create( "Salmon", "FA8072" ),
			Tuple.Create( "SandyBrown", "F4A460" ),
			Tuple.Create( "SeaGreen", "2E8B57" ),
			Tuple.Create( "SeaShell", "FFF5EE" ),
			Tuple.Create( "Sienna", "A0522D" ),
			Tuple.Create( "Silver", "C0C0C0" ),
			Tuple.Create( "SkyBlue", "87CEEB" ),
			Tuple.Create( "SlateBlue", "6A5ACD" ),
			Tuple.Create( "SlateGray", "708090" ),
			Tuple.Create( "SlateGrey", "708090" ),
			Tuple.Create( "Snow", "FFFAFA" ),
			Tuple.Create( "SpringGreen", "00FF7F" ),
			Tuple.Create( "SteelBlue", "4682B4" ),
			Tuple.Create( "Tan", "D2B48C" ),
			Tuple.Create( "Teal", "008080" ),
			Tuple.Create( "Thistle", "D8BFD8" ),
			Tuple.Create( "Tomato", "FF6347" ),
			Tuple.Create( "Turquoise", "40E0D0" ),
			Tuple.Create( "Violet", "EE82EE" ),
			Tuple.Create( "Wheat", "F5DEB3" ),
			Tuple.Create( "White", "FFFFFF" ),
			Tuple.Create( "WhiteSmoke", "F5F5F5" ),
			Tuple.Create( "Yellow", "FFFF00" ),
			Tuple.Create( "YellowGreen", "9ACD32")
		};

		void __0x6528()
		{
			List<(string, ColorValue)> __0x6330 = new List<(string, ColorValue)>();
			ESet<ColorValue> __0x6331 = new ESet<ColorValue>();
			foreach( var __0x6522 in __0x6329 )
			{
				var __0x6332 = __0x6522.Item1;

				var __0x6333 = __0x6522.Item2;
				int __0x6334 = int.Parse( __0x6333.Substring( 0, 2 ), System.Globalization.NumberStyles.HexNumber );
				int __0x6335 = int.Parse( __0x6333.Substring( 2, 2 ), System.Globalization.NumberStyles.HexNumber );
				int __0x6336 = int.Parse( __0x6333.Substring( 4, 2 ), System.Globalization.NumberStyles.HexNumber );
				ColorValue __0x6337 = new ColorValue( Color.FromArgb( __0x6334, __0x6335, __0x6336 ) );

				if( !__0x6331.Contains( __0x6337 ) )
				{
					__0x6331.Add( __0x6337 );

					__0x6330.Add( (__0x6332, __0x6337) );
				}
			}

			for( int __0x6338 = 0; __0x6338 < __0x6330.Count; __0x6338++ )
			{
				var __0x6339 = __0x6330[ __0x6338 ];
				string __0x6340 = __0x6339.Item1;
				var __0x6341 = __0x6339.Item2;

				var __0x6342 = Controls.Find( $"button{__0x6338}", false );
				if( __0x6342.Length != 0 )
				{
					Button __0x6343 = (Button)__0x6342[ 0 ];

					__0x6343.Enabled = !__0x6321;
					__0x6343.BackColor = __0x6341.ToColor();
					__0x6343.Tag = __0x6341;

					__0x6343.Click += __0x6529;

					
				}
			}

			__0x6530();
		}

		private void __0x6529( object __0x6540, EventArgs __0x6541 )
		{
			Button __0x6344 = (Button)__0x6540;
			if( __0x6344.Tag == null )
				return;

			ColorValue __0x6345 = (ColorValue)__0x6344.Tag;

			__0x6323 = true;
			__0x6351.Value = (decimal)( __0x6345.Red * 255 );
			__0x6352.Value = (decimal)( __0x6345.Green * 255 );
			__0x6354.Value = (decimal)( __0x6345.Blue * 255 );
			__0x6323 = false;
			__0x6527( __0x6354, null );

			__0x6530();
		}

		void __0x6530()
		{
			var __0x6346 = new ColorValue( CurrentValue.Red, CurrentValue.Green, CurrentValue.Blue );

			foreach( var __0x6523 in Controls )
			{
				Button __0x6347 = __0x6523 as Button;
				if( __0x6347 != null )
				{
					if( __0x6347.Tag != null && __0x6347.Tag is ColorValue )
					{
						ColorValue __0x6348 = (ColorValue)__0x6347.Tag;

						if( __0x6348.Equals( __0x6346, .001f ) )
							__0x6347.Image = EditorResourcesCache.GetImage( "Check_12" );
						else
							__0x6347.Image = null;
					}
				}
			}
		}

		
		
		

		
		
		

		
		
		

		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class ColorValuePoweredSelectForm
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x6349 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x6349 != null ) )
			{
				__0x6349.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6531()
		{
			this.__0x6350 = new System.Windows.Forms.Label();
			this.__0x6351 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6352 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6353 = new System.Windows.Forms.Label();
			this.__0x6354 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6355 = new System.Windows.Forms.Label();
			this.__0x6356 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6357 = new System.Windows.Forms.Label();
			this.__0x6358 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6359 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6360 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6361 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6363 = new NeoAxis.Editor.ColorGradientControl();
			this.__0x6362 = new NeoAxis.Editor.ColorWheel();
			this.__0x6364 = new ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown();
			this.__0x6365 = new System.Windows.Forms.Label();
			this.__0x6366 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x6367 = new System.Windows.Forms.Button();
			this.__0x6368 = new System.Windows.Forms.Button();
			this.__0x6369 = new System.Windows.Forms.Button();
			this.__0x6370 = new System.Windows.Forms.Button();
			this.__0x6371 = new System.Windows.Forms.Button();
			this.__0x6372 = new System.Windows.Forms.Button();
			this.__0x6373 = new System.Windows.Forms.Button();
			this.__0x6374 = new System.Windows.Forms.Button();
			this.__0x6375 = new System.Windows.Forms.Button();
			this.__0x6376 = new System.Windows.Forms.Button();
			this.__0x6377 = new System.Windows.Forms.Button();
			this.__0x6378 = new System.Windows.Forms.Button();
			this.__0x6379 = new System.Windows.Forms.Button();
			this.__0x6380 = new System.Windows.Forms.Button();
			this.__0x6381 = new System.Windows.Forms.Button();
			this.__0x6382 = new System.Windows.Forms.Button();
			this.__0x6383 = new System.Windows.Forms.Button();
			this.__0x6384 = new System.Windows.Forms.Button();
			this.__0x6385 = new System.Windows.Forms.Button();
			this.__0x6386 = new System.Windows.Forms.Button();
			this.__0x6387 = new System.Windows.Forms.Button();
			this.__0x6388 = new System.Windows.Forms.Button();
			this.__0x6389 = new System.Windows.Forms.Button();
			this.__0x6390 = new System.Windows.Forms.Button();
			this.__0x6391 = new System.Windows.Forms.Button();
			this.__0x6392 = new System.Windows.Forms.Button();
			this.__0x6393 = new System.Windows.Forms.Button();
			this.__0x6394 = new System.Windows.Forms.Button();
			this.__0x6395 = new System.Windows.Forms.Button();
			this.__0x6396 = new System.Windows.Forms.Button();
			this.__0x6397 = new System.Windows.Forms.Button();
			this.__0x6398 = new System.Windows.Forms.Button();
			this.__0x6399 = new System.Windows.Forms.Button();
			this.__0x6400 = new System.Windows.Forms.Button();
			this.__0x6401 = new System.Windows.Forms.Button();
			this.__0x6402 = new System.Windows.Forms.Button();
			this.__0x6403 = new System.Windows.Forms.Button();
			this.__0x6404 = new System.Windows.Forms.Button();
			this.__0x6405 = new System.Windows.Forms.Button();
			this.__0x6406 = new System.Windows.Forms.Button();
			this.__0x6407 = new System.Windows.Forms.Button();
			this.__0x6408 = new System.Windows.Forms.Button();
			this.__0x6409 = new System.Windows.Forms.Button();
			this.__0x6410 = new System.Windows.Forms.Button();
			this.__0x6411 = new System.Windows.Forms.Button();
			this.__0x6412 = new System.Windows.Forms.Button();
			this.__0x6413 = new System.Windows.Forms.Button();
			this.__0x6414 = new System.Windows.Forms.Button();
			this.__0x6415 = new System.Windows.Forms.Button();
			this.__0x6416 = new System.Windows.Forms.Button();
			this.__0x6417 = new System.Windows.Forms.Button();
			this.__0x6418 = new System.Windows.Forms.Button();
			this.__0x6419 = new System.Windows.Forms.Button();
			this.__0x6420 = new System.Windows.Forms.Button();
			this.__0x6421 = new System.Windows.Forms.Button();
			this.__0x6422 = new System.Windows.Forms.Button();
			this.__0x6423 = new System.Windows.Forms.Button();
			this.__0x6424 = new System.Windows.Forms.Button();
			this.__0x6425 = new System.Windows.Forms.Button();
			this.__0x6426 = new System.Windows.Forms.Button();
			this.__0x6427 = new System.Windows.Forms.Button();
			this.__0x6428 = new System.Windows.Forms.Button();
			this.__0x6429 = new System.Windows.Forms.Button();
			this.__0x6430 = new System.Windows.Forms.Button();
			this.__0x6431 = new System.Windows.Forms.Button();
			this.__0x6432 = new System.Windows.Forms.Button();
			this.__0x6433 = new System.Windows.Forms.Button();
			this.__0x6434 = new System.Windows.Forms.Button();
			this.__0x6435 = new System.Windows.Forms.Button();
			this.__0x6436 = new System.Windows.Forms.Button();
			this.__0x6437 = new System.Windows.Forms.Button();
			this.__0x6438 = new System.Windows.Forms.Button();
			this.__0x6439 = new System.Windows.Forms.Button();
			this.__0x6440 = new System.Windows.Forms.Button();
			this.__0x6441 = new System.Windows.Forms.Button();
			this.__0x6442 = new System.Windows.Forms.Button();
			this.__0x6443 = new System.Windows.Forms.Button();
			this.__0x6444 = new System.Windows.Forms.Button();
			this.__0x6445 = new System.Windows.Forms.Button();
			this.__0x6446 = new System.Windows.Forms.Button();
			this.__0x6447 = new System.Windows.Forms.Button();
			this.__0x6448 = new System.Windows.Forms.Button();
			this.__0x6449 = new System.Windows.Forms.Button();
			this.__0x6450 = new System.Windows.Forms.Button();
			this.__0x6451 = new System.Windows.Forms.Button();
			this.__0x6452 = new System.Windows.Forms.Button();
			this.__0x6453 = new System.Windows.Forms.Button();
			this.__0x6454 = new System.Windows.Forms.Button();
			this.__0x6455 = new System.Windows.Forms.Button();
			this.__0x6456 = new System.Windows.Forms.Button();
			this.__0x6457 = new System.Windows.Forms.Button();
			this.__0x6458 = new System.Windows.Forms.Button();
			this.__0x6459 = new System.Windows.Forms.Button();
			this.__0x6460 = new System.Windows.Forms.Button();
			this.__0x6461 = new System.Windows.Forms.Button();
			this.__0x6462 = new System.Windows.Forms.Button();
			this.__0x6463 = new System.Windows.Forms.Button();
			this.__0x6464 = new System.Windows.Forms.Button();
			this.__0x6465 = new System.Windows.Forms.Button();
			this.__0x6466 = new System.Windows.Forms.Button();
			this.__0x6467 = new System.Windows.Forms.Button();
			this.__0x6468 = new System.Windows.Forms.Button();
			this.__0x6469 = new System.Windows.Forms.Button();
			this.__0x6470 = new System.Windows.Forms.Button();
			this.__0x6471 = new System.Windows.Forms.Button();
			this.__0x6472 = new System.Windows.Forms.Button();
			this.__0x6473 = new System.Windows.Forms.Button();
			this.__0x6474 = new System.Windows.Forms.Button();
			this.__0x6475 = new System.Windows.Forms.Button();
			this.__0x6476 = new System.Windows.Forms.Button();
			this.__0x6477 = new System.Windows.Forms.Button();
			this.__0x6478 = new System.Windows.Forms.Button();
			this.__0x6479 = new System.Windows.Forms.Button();
			this.__0x6480 = new System.Windows.Forms.Button();
			this.__0x6481 = new System.Windows.Forms.Button();
			this.__0x6482 = new System.Windows.Forms.Button();
			this.__0x6483 = new System.Windows.Forms.Button();
			this.__0x6484 = new System.Windows.Forms.Button();
			this.__0x6485 = new System.Windows.Forms.Button();
			this.__0x6486 = new System.Windows.Forms.Button();
			this.__0x6487 = new System.Windows.Forms.Button();
			this.__0x6488 = new System.Windows.Forms.Button();
			this.__0x6489 = new System.Windows.Forms.Button();
			this.__0x6490 = new System.Windows.Forms.Button();
			this.__0x6491 = new System.Windows.Forms.Button();
			this.__0x6492 = new System.Windows.Forms.Button();
			this.__0x6493 = new System.Windows.Forms.Button();
			this.__0x6494 = new System.Windows.Forms.Button();
			this.__0x6495 = new System.Windows.Forms.Button();
			this.__0x6496 = new System.Windows.Forms.Button();
			this.__0x6497 = new System.Windows.Forms.Button();
			this.__0x6498 = new System.Windows.Forms.Button();
			this.__0x6499 = new System.Windows.Forms.Button();
			this.__0x6500 = new System.Windows.Forms.Button();
			this.__0x6501 = new System.Windows.Forms.Button();
			this.__0x6502 = new System.Windows.Forms.Button();
			this.__0x6503 = new System.Windows.Forms.Button();
			this.__0x6504 = new System.Windows.Forms.Button();
			this.__0x6505 = new System.Windows.Forms.Button();
			this.__0x6506 = new System.Windows.Forms.Button();
			this.__0x6507 = new System.Windows.Forms.Button();
			this.__0x6508 = new System.Windows.Forms.Button();
			this.__0x6509 = new System.Windows.Forms.Button();
			this.__0x6510 = new System.Windows.Forms.Button();
			this.__0x6511 = new System.Windows.Forms.Button();
			this.__0x6512 = new System.Windows.Forms.Button();
			this.__0x6513 = new System.Windows.Forms.Button();
			this.__0x6514 = new System.Windows.Forms.Button();
			this.__0x6515 = new System.Windows.Forms.Button();
			this.__0x6516 = new System.Windows.Forms.Button();
			this.__0x6517 = new System.Windows.Forms.Button();
			this.__0x6518 = new System.Windows.Forms.Button();
			this.__0x6519 = new System.Windows.Forms.Button();
			this.__0x6520 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x6521 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			this.__0x6350.AutoSize = true;
			this.__0x6350.Location = new System.Drawing.Point(231, 24);
			this.__0x6350.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6350.Name = "label1";
			this.__0x6350.Size = new System.Drawing.Size(38, 17);
			this.__0x6350.TabIndex = 0;
			this.__0x6350.Text = "Red:";
			
			
			
			this.__0x6351.AlwaysActive = false;
			this.__0x6351.DecimalPlaces = 2;
			this.__0x6351.Location = new System.Drawing.Point(283, 23);
			this.__0x6351.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6351.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6351.Name = "numericUpDownRed";
			this.__0x6351.Size = new System.Drawing.Size(75, 21);
			this.__0x6351.TabIndex = 2;
			this.__0x6351.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6352.AlwaysActive = false;
			this.__0x6352.DecimalPlaces = 2;
			this.__0x6352.Location = new System.Drawing.Point(283, 55);
			this.__0x6352.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6352.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6352.Name = "numericUpDownGreen";
			this.__0x6352.Size = new System.Drawing.Size(75, 21);
			this.__0x6352.TabIndex = 3;
			this.__0x6352.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6353.AutoSize = true;
			this.__0x6353.Location = new System.Drawing.Point(231, 56);
			this.__0x6353.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6353.Name = "label2";
			this.__0x6353.Size = new System.Drawing.Size(52, 17);
			this.__0x6353.TabIndex = 2;
			this.__0x6353.Text = "Green:";
			
			
			
			this.__0x6354.AlwaysActive = false;
			this.__0x6354.DecimalPlaces = 2;
			this.__0x6354.Location = new System.Drawing.Point(283, 87);
			this.__0x6354.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6354.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6354.Name = "numericUpDownBlue";
			this.__0x6354.Size = new System.Drawing.Size(75, 21);
			this.__0x6354.TabIndex = 4;
			this.__0x6354.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6355.AutoSize = true;
			this.__0x6355.Location = new System.Drawing.Point(231, 88);
			this.__0x6355.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6355.Name = "label3";
			this.__0x6355.Size = new System.Drawing.Size(40, 17);
			this.__0x6355.TabIndex = 4;
			this.__0x6355.Text = "Blue:";
			
			
			
			this.__0x6356.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6356.DrawBackground = true;
			this.__0x6356.LargeChange = 100;
			this.__0x6356.Location = new System.Drawing.Point(359, 114);
			this.__0x6356.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6356.Maximum = 1000;
			this.__0x6356.Name = "trackBarAlpha";
			this.__0x6356.Size = new System.Drawing.Size(162, 26);
			this.__0x6356.SmallChange = 10;
			this.__0x6356.TabIndex = 10;
			this.__0x6356.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6356.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6357.AutoSize = true;
			this.__0x6357.Location = new System.Drawing.Point(231, 120);
			this.__0x6357.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6357.Name = "label4";
			this.__0x6357.Size = new System.Drawing.Size(48, 17);
			this.__0x6357.TabIndex = 7;
			this.__0x6357.Text = "Alpha:";
			
			
			
			this.__0x6358.AlwaysActive = false;
			this.__0x6358.DecimalPlaces = 2;
			this.__0x6358.Location = new System.Drawing.Point(283, 119);
			this.__0x6358.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6358.Maximum = new decimal(new int[] {
            255,
            0,
            0,
            0});
			this.__0x6358.Name = "numericUpDownAlpha";
			this.__0x6358.Size = new System.Drawing.Size(75, 21);
			this.__0x6358.TabIndex = 5;
			this.__0x6358.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6359.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6359.DrawBackground = true;
			this.__0x6359.LargeChange = 100;
			this.__0x6359.Location = new System.Drawing.Point(359, 82);
			this.__0x6359.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6359.Maximum = 1000;
			this.__0x6359.Name = "trackBarBlue";
			this.__0x6359.Size = new System.Drawing.Size(162, 26);
			this.__0x6359.SmallChange = 10;
			this.__0x6359.TabIndex = 9;
			this.__0x6359.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6359.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6360.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6360.DrawBackground = true;
			this.__0x6360.LargeChange = 100;
			this.__0x6360.Location = new System.Drawing.Point(359, 50);
			this.__0x6360.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6360.Maximum = 1000;
			this.__0x6360.Name = "trackBarGreen";
			this.__0x6360.Size = new System.Drawing.Size(162, 26);
			this.__0x6360.SmallChange = 10;
			this.__0x6360.TabIndex = 8;
			this.__0x6360.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6360.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6361.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6361.DrawBackground = true;
			this.__0x6361.LargeChange = 100;
			this.__0x6361.Location = new System.Drawing.Point(359, 18);
			this.__0x6361.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6361.Maximum = 1000;
			this.__0x6361.Name = "trackBarRed";
			this.__0x6361.Size = new System.Drawing.Size(162, 26);
			this.__0x6361.SmallChange = 10;
			this.__0x6361.TabIndex = 7;
			this.__0x6361.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6361.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6363.BottomColor = System.Drawing.Color.Black;
			this.__0x6363.Count = 1;
			this.__0x6363.Location = new System.Drawing.Point(187, 15);
			this.__0x6363.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6363.Name = "colorGradientControl";
			this.__0x6363.Size = new System.Drawing.Size(35, 164);
			this.__0x6363.TabIndex = 1;
			this.__0x6363.TabStop = false;
			this.__0x6363.TopColor = System.Drawing.Color.Red;
			this.__0x6363.Value = 128;
			this.__0x6363.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6362.Location = new System.Drawing.Point(12, 15);
			this.__0x6362.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6362.Name = "colorWheel";
			this.__0x6362.Size = new System.Drawing.Size(164, 164);
			this.__0x6362.TabIndex = 0;
			this.__0x6362.TabStop = false;
			this.__0x6362.ColorChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6364.AlwaysActive = false;
			this.__0x6364.DecimalPlaces = 2;
			this.__0x6364.Location = new System.Drawing.Point(283, 151);
			this.__0x6364.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6364.Name = "numericUpDownPower";
			this.__0x6364.Size = new System.Drawing.Size(75, 21);
			this.__0x6364.TabIndex = 6;
			this.__0x6364.TextAlign = System.Windows.Forms.HorizontalAlignment.Right;
			
			
			
			this.__0x6365.AutoSize = true;
			this.__0x6365.Location = new System.Drawing.Point(231, 152);
			this.__0x6365.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x6365.Name = "label5";
			this.__0x6365.Size = new System.Drawing.Size(51, 17);
			this.__0x6365.TabIndex = 11;
			this.__0x6365.Text = "Power:";
			
			
			
			this.__0x6366.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6366.DrawBackground = true;
			this.__0x6366.LargeChange = 100;
			this.__0x6366.Location = new System.Drawing.Point(359, 146);
			this.__0x6366.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6366.Maximum = 1000;
			this.__0x6366.Name = "trackBarPower";
			this.__0x6366.Size = new System.Drawing.Size(162, 26);
			this.__0x6366.SmallChange = 10;
			this.__0x6366.TabIndex = 11;
			this.__0x6366.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x6366.ValueChanged += new System.EventHandler(this.__0x6526);
			
			
			
			this.__0x6367.BackColor = System.Drawing.Color.White;
			this.__0x6367.Enabled = false;
			this.__0x6367.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6367.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6367.Location = new System.Drawing.Point(18, 198);
			this.__0x6367.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6367.Name = "button0";
			this.__0x6367.Size = new System.Drawing.Size(24, 20);
			this.__0x6367.TabIndex = 12;
			this.__0x6367.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6368.BackColor = System.Drawing.Color.White;
			this.__0x6368.Enabled = false;
			this.__0x6368.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6368.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6368.Location = new System.Drawing.Point(47, 197);
			this.__0x6368.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6368.Name = "button1";
			this.__0x6368.Size = new System.Drawing.Size(24, 20);
			this.__0x6368.TabIndex = 13;
			this.__0x6368.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6369.BackColor = System.Drawing.Color.White;
			this.__0x6369.Enabled = false;
			this.__0x6369.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6369.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6369.Location = new System.Drawing.Point(77, 197);
			this.__0x6369.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6369.Name = "button2";
			this.__0x6369.Size = new System.Drawing.Size(24, 20);
			this.__0x6369.TabIndex = 14;
			this.__0x6369.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6370.BackColor = System.Drawing.Color.White;
			this.__0x6370.Enabled = false;
			this.__0x6370.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6370.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6370.Location = new System.Drawing.Point(107, 197);
			this.__0x6370.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6370.Name = "button3";
			this.__0x6370.Size = new System.Drawing.Size(24, 20);
			this.__0x6370.TabIndex = 15;
			this.__0x6370.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6371.BackColor = System.Drawing.Color.White;
			this.__0x6371.Enabled = false;
			this.__0x6371.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6371.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6371.Location = new System.Drawing.Point(137, 197);
			this.__0x6371.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6371.Name = "button4";
			this.__0x6371.Size = new System.Drawing.Size(24, 20);
			this.__0x6371.TabIndex = 16;
			this.__0x6371.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6372.BackColor = System.Drawing.Color.White;
			this.__0x6372.Enabled = false;
			this.__0x6372.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6372.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6372.Location = new System.Drawing.Point(167, 197);
			this.__0x6372.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6372.Name = "button5";
			this.__0x6372.Size = new System.Drawing.Size(24, 20);
			this.__0x6372.TabIndex = 17;
			this.__0x6372.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6373.BackColor = System.Drawing.Color.White;
			this.__0x6373.Enabled = false;
			this.__0x6373.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6373.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6373.Location = new System.Drawing.Point(197, 197);
			this.__0x6373.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6373.Name = "button6";
			this.__0x6373.Size = new System.Drawing.Size(24, 20);
			this.__0x6373.TabIndex = 18;
			this.__0x6373.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6374.BackColor = System.Drawing.Color.White;
			this.__0x6374.Enabled = false;
			this.__0x6374.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6374.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6374.Location = new System.Drawing.Point(227, 197);
			this.__0x6374.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6374.Name = "button7";
			this.__0x6374.Size = new System.Drawing.Size(24, 20);
			this.__0x6374.TabIndex = 19;
			this.__0x6374.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6375.BackColor = System.Drawing.Color.White;
			this.__0x6375.Enabled = false;
			this.__0x6375.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6375.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6375.Location = new System.Drawing.Point(257, 197);
			this.__0x6375.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6375.Name = "button8";
			this.__0x6375.Size = new System.Drawing.Size(24, 20);
			this.__0x6375.TabIndex = 20;
			this.__0x6375.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6376.BackColor = System.Drawing.Color.White;
			this.__0x6376.Enabled = false;
			this.__0x6376.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6376.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6376.Location = new System.Drawing.Point(287, 197);
			this.__0x6376.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6376.Name = "button9";
			this.__0x6376.Size = new System.Drawing.Size(24, 20);
			this.__0x6376.TabIndex = 21;
			this.__0x6376.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6377.BackColor = System.Drawing.Color.White;
			this.__0x6377.Enabled = false;
			this.__0x6377.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6377.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6377.Location = new System.Drawing.Point(317, 197);
			this.__0x6377.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6377.Name = "button10";
			this.__0x6377.Size = new System.Drawing.Size(24, 20);
			this.__0x6377.TabIndex = 22;
			this.__0x6377.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6378.BackColor = System.Drawing.Color.White;
			this.__0x6378.Enabled = false;
			this.__0x6378.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6378.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6378.Location = new System.Drawing.Point(347, 197);
			this.__0x6378.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6378.Name = "button11";
			this.__0x6378.Size = new System.Drawing.Size(24, 20);
			this.__0x6378.TabIndex = 23;
			this.__0x6378.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6379.BackColor = System.Drawing.Color.White;
			this.__0x6379.Enabled = false;
			this.__0x6379.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6379.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6379.Location = new System.Drawing.Point(377, 197);
			this.__0x6379.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6379.Name = "button12";
			this.__0x6379.Size = new System.Drawing.Size(24, 20);
			this.__0x6379.TabIndex = 24;
			this.__0x6379.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6380.BackColor = System.Drawing.Color.White;
			this.__0x6380.Enabled = false;
			this.__0x6380.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6380.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6380.Location = new System.Drawing.Point(407, 197);
			this.__0x6380.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6380.Name = "button13";
			this.__0x6380.Size = new System.Drawing.Size(24, 20);
			this.__0x6380.TabIndex = 25;
			this.__0x6380.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6381.BackColor = System.Drawing.Color.White;
			this.__0x6381.Enabled = false;
			this.__0x6381.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6381.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6381.Location = new System.Drawing.Point(437, 197);
			this.__0x6381.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6381.Name = "button14";
			this.__0x6381.Size = new System.Drawing.Size(24, 20);
			this.__0x6381.TabIndex = 26;
			this.__0x6381.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6382.BackColor = System.Drawing.Color.White;
			this.__0x6382.Enabled = false;
			this.__0x6382.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6382.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6382.Location = new System.Drawing.Point(467, 197);
			this.__0x6382.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6382.Name = "button15";
			this.__0x6382.Size = new System.Drawing.Size(24, 20);
			this.__0x6382.TabIndex = 27;
			this.__0x6382.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6383.BackColor = System.Drawing.Color.White;
			this.__0x6383.Enabled = false;
			this.__0x6383.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6383.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6383.Location = new System.Drawing.Point(497, 197);
			this.__0x6383.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6383.Name = "button16";
			this.__0x6383.Size = new System.Drawing.Size(24, 20);
			this.__0x6383.TabIndex = 28;
			this.__0x6383.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6384.BackColor = System.Drawing.Color.White;
			this.__0x6384.Enabled = false;
			this.__0x6384.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6384.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6384.Location = new System.Drawing.Point(18, 224);
			this.__0x6384.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6384.Name = "button17";
			this.__0x6384.Size = new System.Drawing.Size(24, 20);
			this.__0x6384.TabIndex = 29;
			this.__0x6384.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6385.BackColor = System.Drawing.Color.White;
			this.__0x6385.Enabled = false;
			this.__0x6385.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6385.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6385.Location = new System.Drawing.Point(47, 223);
			this.__0x6385.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6385.Name = "button18";
			this.__0x6385.Size = new System.Drawing.Size(24, 20);
			this.__0x6385.TabIndex = 30;
			this.__0x6385.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6386.BackColor = System.Drawing.Color.White;
			this.__0x6386.Enabled = false;
			this.__0x6386.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6386.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6386.Location = new System.Drawing.Point(77, 223);
			this.__0x6386.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6386.Name = "button19";
			this.__0x6386.Size = new System.Drawing.Size(24, 20);
			this.__0x6386.TabIndex = 31;
			this.__0x6386.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6387.BackColor = System.Drawing.Color.White;
			this.__0x6387.Enabled = false;
			this.__0x6387.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6387.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6387.Location = new System.Drawing.Point(107, 223);
			this.__0x6387.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6387.Name = "button20";
			this.__0x6387.Size = new System.Drawing.Size(24, 20);
			this.__0x6387.TabIndex = 32;
			this.__0x6387.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6388.BackColor = System.Drawing.Color.White;
			this.__0x6388.Enabled = false;
			this.__0x6388.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6388.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6388.Location = new System.Drawing.Point(137, 223);
			this.__0x6388.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6388.Name = "button21";
			this.__0x6388.Size = new System.Drawing.Size(24, 20);
			this.__0x6388.TabIndex = 33;
			this.__0x6388.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6389.BackColor = System.Drawing.Color.White;
			this.__0x6389.Enabled = false;
			this.__0x6389.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6389.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6389.Location = new System.Drawing.Point(167, 223);
			this.__0x6389.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6389.Name = "button22";
			this.__0x6389.Size = new System.Drawing.Size(24, 20);
			this.__0x6389.TabIndex = 34;
			this.__0x6389.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6390.BackColor = System.Drawing.Color.White;
			this.__0x6390.Enabled = false;
			this.__0x6390.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6390.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6390.Location = new System.Drawing.Point(197, 223);
			this.__0x6390.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6390.Name = "button23";
			this.__0x6390.Size = new System.Drawing.Size(24, 20);
			this.__0x6390.TabIndex = 35;
			this.__0x6390.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6391.BackColor = System.Drawing.Color.White;
			this.__0x6391.Enabled = false;
			this.__0x6391.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6391.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6391.Location = new System.Drawing.Point(227, 223);
			this.__0x6391.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6391.Name = "button24";
			this.__0x6391.Size = new System.Drawing.Size(24, 20);
			this.__0x6391.TabIndex = 36;
			this.__0x6391.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6392.BackColor = System.Drawing.Color.White;
			this.__0x6392.Enabled = false;
			this.__0x6392.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6392.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6392.Location = new System.Drawing.Point(257, 223);
			this.__0x6392.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6392.Name = "button25";
			this.__0x6392.Size = new System.Drawing.Size(24, 20);
			this.__0x6392.TabIndex = 37;
			this.__0x6392.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6393.BackColor = System.Drawing.Color.White;
			this.__0x6393.Enabled = false;
			this.__0x6393.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6393.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6393.Location = new System.Drawing.Point(287, 223);
			this.__0x6393.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6393.Name = "button26";
			this.__0x6393.Size = new System.Drawing.Size(24, 20);
			this.__0x6393.TabIndex = 38;
			this.__0x6393.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6394.BackColor = System.Drawing.Color.White;
			this.__0x6394.Enabled = false;
			this.__0x6394.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6394.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6394.Location = new System.Drawing.Point(317, 223);
			this.__0x6394.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6394.Name = "button27";
			this.__0x6394.Size = new System.Drawing.Size(24, 20);
			this.__0x6394.TabIndex = 39;
			this.__0x6394.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6395.BackColor = System.Drawing.Color.White;
			this.__0x6395.Enabled = false;
			this.__0x6395.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6395.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6395.Location = new System.Drawing.Point(347, 223);
			this.__0x6395.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6395.Name = "button28";
			this.__0x6395.Size = new System.Drawing.Size(24, 20);
			this.__0x6395.TabIndex = 40;
			this.__0x6395.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6396.BackColor = System.Drawing.Color.White;
			this.__0x6396.Enabled = false;
			this.__0x6396.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6396.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6396.Location = new System.Drawing.Point(377, 223);
			this.__0x6396.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6396.Name = "button29";
			this.__0x6396.Size = new System.Drawing.Size(24, 20);
			this.__0x6396.TabIndex = 41;
			this.__0x6396.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6397.BackColor = System.Drawing.Color.White;
			this.__0x6397.Enabled = false;
			this.__0x6397.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6397.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6397.Location = new System.Drawing.Point(407, 223);
			this.__0x6397.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6397.Name = "button30";
			this.__0x6397.Size = new System.Drawing.Size(24, 20);
			this.__0x6397.TabIndex = 42;
			this.__0x6397.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6398.BackColor = System.Drawing.Color.White;
			this.__0x6398.Enabled = false;
			this.__0x6398.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6398.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6398.Location = new System.Drawing.Point(437, 223);
			this.__0x6398.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6398.Name = "button31";
			this.__0x6398.Size = new System.Drawing.Size(24, 20);
			this.__0x6398.TabIndex = 43;
			this.__0x6398.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6399.BackColor = System.Drawing.Color.White;
			this.__0x6399.Enabled = false;
			this.__0x6399.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6399.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6399.Location = new System.Drawing.Point(467, 223);
			this.__0x6399.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6399.Name = "button32";
			this.__0x6399.Size = new System.Drawing.Size(24, 20);
			this.__0x6399.TabIndex = 44;
			this.__0x6399.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6400.BackColor = System.Drawing.Color.White;
			this.__0x6400.Enabled = false;
			this.__0x6400.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6400.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6400.Location = new System.Drawing.Point(497, 223);
			this.__0x6400.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6400.Name = "button33";
			this.__0x6400.Size = new System.Drawing.Size(24, 20);
			this.__0x6400.TabIndex = 45;
			this.__0x6400.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6401.BackColor = System.Drawing.Color.White;
			this.__0x6401.Enabled = false;
			this.__0x6401.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6401.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6401.Location = new System.Drawing.Point(18, 250);
			this.__0x6401.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6401.Name = "button34";
			this.__0x6401.Size = new System.Drawing.Size(24, 20);
			this.__0x6401.TabIndex = 46;
			this.__0x6401.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6402.BackColor = System.Drawing.Color.White;
			this.__0x6402.Enabled = false;
			this.__0x6402.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6402.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6402.Location = new System.Drawing.Point(47, 249);
			this.__0x6402.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6402.Name = "button35";
			this.__0x6402.Size = new System.Drawing.Size(24, 20);
			this.__0x6402.TabIndex = 47;
			this.__0x6402.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6403.BackColor = System.Drawing.Color.White;
			this.__0x6403.Enabled = false;
			this.__0x6403.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6403.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6403.Location = new System.Drawing.Point(77, 249);
			this.__0x6403.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6403.Name = "button36";
			this.__0x6403.Size = new System.Drawing.Size(24, 20);
			this.__0x6403.TabIndex = 48;
			this.__0x6403.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6404.BackColor = System.Drawing.Color.White;
			this.__0x6404.Enabled = false;
			this.__0x6404.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6404.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6404.Location = new System.Drawing.Point(107, 249);
			this.__0x6404.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6404.Name = "button37";
			this.__0x6404.Size = new System.Drawing.Size(24, 20);
			this.__0x6404.TabIndex = 49;
			this.__0x6404.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6405.BackColor = System.Drawing.Color.White;
			this.__0x6405.Enabled = false;
			this.__0x6405.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6405.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6405.Location = new System.Drawing.Point(137, 249);
			this.__0x6405.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6405.Name = "button38";
			this.__0x6405.Size = new System.Drawing.Size(24, 20);
			this.__0x6405.TabIndex = 50;
			this.__0x6405.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6406.BackColor = System.Drawing.Color.White;
			this.__0x6406.Enabled = false;
			this.__0x6406.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6406.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6406.Location = new System.Drawing.Point(167, 249);
			this.__0x6406.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6406.Name = "button39";
			this.__0x6406.Size = new System.Drawing.Size(24, 20);
			this.__0x6406.TabIndex = 51;
			this.__0x6406.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6407.BackColor = System.Drawing.Color.White;
			this.__0x6407.Enabled = false;
			this.__0x6407.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6407.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6407.Location = new System.Drawing.Point(197, 249);
			this.__0x6407.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6407.Name = "button40";
			this.__0x6407.Size = new System.Drawing.Size(24, 20);
			this.__0x6407.TabIndex = 52;
			this.__0x6407.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6408.BackColor = System.Drawing.Color.White;
			this.__0x6408.Enabled = false;
			this.__0x6408.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6408.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6408.Location = new System.Drawing.Point(227, 249);
			this.__0x6408.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6408.Name = "button41";
			this.__0x6408.Size = new System.Drawing.Size(24, 20);
			this.__0x6408.TabIndex = 53;
			this.__0x6408.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6409.BackColor = System.Drawing.Color.White;
			this.__0x6409.Enabled = false;
			this.__0x6409.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6409.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6409.Location = new System.Drawing.Point(257, 249);
			this.__0x6409.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6409.Name = "button42";
			this.__0x6409.Size = new System.Drawing.Size(24, 20);
			this.__0x6409.TabIndex = 54;
			this.__0x6409.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6410.BackColor = System.Drawing.Color.White;
			this.__0x6410.Enabled = false;
			this.__0x6410.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6410.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6410.Location = new System.Drawing.Point(287, 249);
			this.__0x6410.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6410.Name = "button43";
			this.__0x6410.Size = new System.Drawing.Size(24, 20);
			this.__0x6410.TabIndex = 55;
			this.__0x6410.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6411.BackColor = System.Drawing.Color.White;
			this.__0x6411.Enabled = false;
			this.__0x6411.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6411.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6411.Location = new System.Drawing.Point(317, 249);
			this.__0x6411.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6411.Name = "button44";
			this.__0x6411.Size = new System.Drawing.Size(24, 20);
			this.__0x6411.TabIndex = 56;
			this.__0x6411.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6412.BackColor = System.Drawing.Color.White;
			this.__0x6412.Enabled = false;
			this.__0x6412.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6412.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6412.Location = new System.Drawing.Point(347, 249);
			this.__0x6412.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6412.Name = "button45";
			this.__0x6412.Size = new System.Drawing.Size(24, 20);
			this.__0x6412.TabIndex = 57;
			this.__0x6412.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6413.BackColor = System.Drawing.Color.White;
			this.__0x6413.Enabled = false;
			this.__0x6413.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6413.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6413.Location = new System.Drawing.Point(377, 249);
			this.__0x6413.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6413.Name = "button46";
			this.__0x6413.Size = new System.Drawing.Size(24, 20);
			this.__0x6413.TabIndex = 58;
			this.__0x6413.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6414.BackColor = System.Drawing.Color.White;
			this.__0x6414.Enabled = false;
			this.__0x6414.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6414.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6414.Location = new System.Drawing.Point(407, 249);
			this.__0x6414.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6414.Name = "button47";
			this.__0x6414.Size = new System.Drawing.Size(24, 20);
			this.__0x6414.TabIndex = 59;
			this.__0x6414.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6415.BackColor = System.Drawing.Color.White;
			this.__0x6415.Enabled = false;
			this.__0x6415.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6415.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6415.Location = new System.Drawing.Point(437, 249);
			this.__0x6415.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6415.Name = "button48";
			this.__0x6415.Size = new System.Drawing.Size(24, 20);
			this.__0x6415.TabIndex = 60;
			this.__0x6415.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6416.BackColor = System.Drawing.Color.White;
			this.__0x6416.Enabled = false;
			this.__0x6416.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6416.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6416.Location = new System.Drawing.Point(467, 249);
			this.__0x6416.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6416.Name = "button49";
			this.__0x6416.Size = new System.Drawing.Size(24, 20);
			this.__0x6416.TabIndex = 61;
			this.__0x6416.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6417.BackColor = System.Drawing.Color.White;
			this.__0x6417.Enabled = false;
			this.__0x6417.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6417.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6417.Location = new System.Drawing.Point(497, 249);
			this.__0x6417.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6417.Name = "button50";
			this.__0x6417.Size = new System.Drawing.Size(24, 20);
			this.__0x6417.TabIndex = 62;
			this.__0x6417.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6418.BackColor = System.Drawing.Color.White;
			this.__0x6418.Enabled = false;
			this.__0x6418.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6418.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6418.Location = new System.Drawing.Point(18, 276);
			this.__0x6418.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6418.Name = "button51";
			this.__0x6418.Size = new System.Drawing.Size(24, 20);
			this.__0x6418.TabIndex = 63;
			this.__0x6418.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6419.BackColor = System.Drawing.Color.White;
			this.__0x6419.Enabled = false;
			this.__0x6419.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6419.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6419.Location = new System.Drawing.Point(47, 275);
			this.__0x6419.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6419.Name = "button52";
			this.__0x6419.Size = new System.Drawing.Size(24, 20);
			this.__0x6419.TabIndex = 64;
			this.__0x6419.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6420.BackColor = System.Drawing.Color.White;
			this.__0x6420.Enabled = false;
			this.__0x6420.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6420.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6420.Location = new System.Drawing.Point(77, 275);
			this.__0x6420.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6420.Name = "button53";
			this.__0x6420.Size = new System.Drawing.Size(24, 20);
			this.__0x6420.TabIndex = 65;
			this.__0x6420.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6421.BackColor = System.Drawing.Color.White;
			this.__0x6421.Enabled = false;
			this.__0x6421.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6421.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6421.Location = new System.Drawing.Point(107, 275);
			this.__0x6421.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6421.Name = "button54";
			this.__0x6421.Size = new System.Drawing.Size(24, 20);
			this.__0x6421.TabIndex = 66;
			this.__0x6421.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6422.BackColor = System.Drawing.Color.White;
			this.__0x6422.Enabled = false;
			this.__0x6422.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6422.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6422.Location = new System.Drawing.Point(137, 275);
			this.__0x6422.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6422.Name = "button55";
			this.__0x6422.Size = new System.Drawing.Size(24, 20);
			this.__0x6422.TabIndex = 67;
			this.__0x6422.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6423.BackColor = System.Drawing.Color.White;
			this.__0x6423.Enabled = false;
			this.__0x6423.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6423.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6423.Location = new System.Drawing.Point(167, 275);
			this.__0x6423.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6423.Name = "button56";
			this.__0x6423.Size = new System.Drawing.Size(24, 20);
			this.__0x6423.TabIndex = 68;
			this.__0x6423.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6424.BackColor = System.Drawing.Color.White;
			this.__0x6424.Enabled = false;
			this.__0x6424.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6424.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6424.Location = new System.Drawing.Point(197, 275);
			this.__0x6424.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6424.Name = "button57";
			this.__0x6424.Size = new System.Drawing.Size(24, 20);
			this.__0x6424.TabIndex = 69;
			this.__0x6424.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6425.BackColor = System.Drawing.Color.White;
			this.__0x6425.Enabled = false;
			this.__0x6425.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6425.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6425.Location = new System.Drawing.Point(227, 275);
			this.__0x6425.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6425.Name = "button58";
			this.__0x6425.Size = new System.Drawing.Size(24, 20);
			this.__0x6425.TabIndex = 70;
			this.__0x6425.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6426.BackColor = System.Drawing.Color.White;
			this.__0x6426.Enabled = false;
			this.__0x6426.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6426.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6426.Location = new System.Drawing.Point(257, 275);
			this.__0x6426.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6426.Name = "button59";
			this.__0x6426.Size = new System.Drawing.Size(24, 20);
			this.__0x6426.TabIndex = 71;
			this.__0x6426.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6427.BackColor = System.Drawing.Color.White;
			this.__0x6427.Enabled = false;
			this.__0x6427.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6427.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6427.Location = new System.Drawing.Point(287, 275);
			this.__0x6427.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6427.Name = "button60";
			this.__0x6427.Size = new System.Drawing.Size(24, 20);
			this.__0x6427.TabIndex = 72;
			this.__0x6427.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6428.BackColor = System.Drawing.Color.White;
			this.__0x6428.Enabled = false;
			this.__0x6428.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6428.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6428.Location = new System.Drawing.Point(317, 275);
			this.__0x6428.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6428.Name = "button61";
			this.__0x6428.Size = new System.Drawing.Size(24, 20);
			this.__0x6428.TabIndex = 73;
			this.__0x6428.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6429.BackColor = System.Drawing.Color.White;
			this.__0x6429.Enabled = false;
			this.__0x6429.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6429.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6429.Location = new System.Drawing.Point(347, 275);
			this.__0x6429.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6429.Name = "button62";
			this.__0x6429.Size = new System.Drawing.Size(24, 20);
			this.__0x6429.TabIndex = 74;
			this.__0x6429.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6430.BackColor = System.Drawing.Color.White;
			this.__0x6430.Enabled = false;
			this.__0x6430.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6430.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6430.Location = new System.Drawing.Point(377, 275);
			this.__0x6430.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6430.Name = "button63";
			this.__0x6430.Size = new System.Drawing.Size(24, 20);
			this.__0x6430.TabIndex = 75;
			this.__0x6430.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6431.BackColor = System.Drawing.Color.White;
			this.__0x6431.Enabled = false;
			this.__0x6431.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6431.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6431.Location = new System.Drawing.Point(407, 275);
			this.__0x6431.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6431.Name = "button64";
			this.__0x6431.Size = new System.Drawing.Size(24, 20);
			this.__0x6431.TabIndex = 76;
			this.__0x6431.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6432.BackColor = System.Drawing.Color.White;
			this.__0x6432.Enabled = false;
			this.__0x6432.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6432.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6432.Location = new System.Drawing.Point(437, 275);
			this.__0x6432.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6432.Name = "button65";
			this.__0x6432.Size = new System.Drawing.Size(24, 20);
			this.__0x6432.TabIndex = 77;
			this.__0x6432.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6433.BackColor = System.Drawing.Color.White;
			this.__0x6433.Enabled = false;
			this.__0x6433.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6433.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6433.Location = new System.Drawing.Point(467, 275);
			this.__0x6433.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6433.Name = "button66";
			this.__0x6433.Size = new System.Drawing.Size(24, 20);
			this.__0x6433.TabIndex = 78;
			this.__0x6433.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6434.BackColor = System.Drawing.Color.White;
			this.__0x6434.Enabled = false;
			this.__0x6434.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6434.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6434.Location = new System.Drawing.Point(497, 275);
			this.__0x6434.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6434.Name = "button67";
			this.__0x6434.Size = new System.Drawing.Size(24, 20);
			this.__0x6434.TabIndex = 79;
			this.__0x6434.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6435.BackColor = System.Drawing.Color.White;
			this.__0x6435.Enabled = false;
			this.__0x6435.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6435.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6435.Location = new System.Drawing.Point(18, 302);
			this.__0x6435.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6435.Name = "button68";
			this.__0x6435.Size = new System.Drawing.Size(24, 20);
			this.__0x6435.TabIndex = 80;
			this.__0x6435.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6436.BackColor = System.Drawing.Color.White;
			this.__0x6436.Enabled = false;
			this.__0x6436.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6436.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6436.Location = new System.Drawing.Point(47, 301);
			this.__0x6436.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6436.Name = "button69";
			this.__0x6436.Size = new System.Drawing.Size(24, 20);
			this.__0x6436.TabIndex = 81;
			this.__0x6436.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6437.BackColor = System.Drawing.Color.White;
			this.__0x6437.Enabled = false;
			this.__0x6437.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6437.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6437.Location = new System.Drawing.Point(77, 301);
			this.__0x6437.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6437.Name = "button70";
			this.__0x6437.Size = new System.Drawing.Size(24, 20);
			this.__0x6437.TabIndex = 82;
			this.__0x6437.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6438.BackColor = System.Drawing.Color.White;
			this.__0x6438.Enabled = false;
			this.__0x6438.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6438.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6438.Location = new System.Drawing.Point(107, 301);
			this.__0x6438.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6438.Name = "button71";
			this.__0x6438.Size = new System.Drawing.Size(24, 20);
			this.__0x6438.TabIndex = 83;
			this.__0x6438.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6439.BackColor = System.Drawing.Color.White;
			this.__0x6439.Enabled = false;
			this.__0x6439.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6439.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6439.Location = new System.Drawing.Point(137, 301);
			this.__0x6439.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6439.Name = "button72";
			this.__0x6439.Size = new System.Drawing.Size(24, 20);
			this.__0x6439.TabIndex = 84;
			this.__0x6439.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6440.BackColor = System.Drawing.Color.White;
			this.__0x6440.Enabled = false;
			this.__0x6440.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6440.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6440.Location = new System.Drawing.Point(167, 301);
			this.__0x6440.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6440.Name = "button73";
			this.__0x6440.Size = new System.Drawing.Size(24, 20);
			this.__0x6440.TabIndex = 85;
			this.__0x6440.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6441.BackColor = System.Drawing.Color.White;
			this.__0x6441.Enabled = false;
			this.__0x6441.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6441.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6441.Location = new System.Drawing.Point(197, 301);
			this.__0x6441.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6441.Name = "button74";
			this.__0x6441.Size = new System.Drawing.Size(24, 20);
			this.__0x6441.TabIndex = 86;
			this.__0x6441.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6442.BackColor = System.Drawing.Color.White;
			this.__0x6442.Enabled = false;
			this.__0x6442.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6442.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6442.Location = new System.Drawing.Point(227, 301);
			this.__0x6442.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6442.Name = "button75";
			this.__0x6442.Size = new System.Drawing.Size(24, 20);
			this.__0x6442.TabIndex = 87;
			this.__0x6442.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6443.BackColor = System.Drawing.Color.White;
			this.__0x6443.Enabled = false;
			this.__0x6443.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6443.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6443.Location = new System.Drawing.Point(257, 301);
			this.__0x6443.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6443.Name = "button76";
			this.__0x6443.Size = new System.Drawing.Size(24, 20);
			this.__0x6443.TabIndex = 88;
			this.__0x6443.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6444.BackColor = System.Drawing.Color.White;
			this.__0x6444.Enabled = false;
			this.__0x6444.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6444.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6444.Location = new System.Drawing.Point(287, 301);
			this.__0x6444.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6444.Name = "button77";
			this.__0x6444.Size = new System.Drawing.Size(24, 20);
			this.__0x6444.TabIndex = 89;
			this.__0x6444.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6445.BackColor = System.Drawing.Color.White;
			this.__0x6445.Enabled = false;
			this.__0x6445.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6445.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6445.Location = new System.Drawing.Point(317, 301);
			this.__0x6445.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6445.Name = "button78";
			this.__0x6445.Size = new System.Drawing.Size(24, 20);
			this.__0x6445.TabIndex = 90;
			this.__0x6445.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6446.BackColor = System.Drawing.Color.White;
			this.__0x6446.Enabled = false;
			this.__0x6446.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6446.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6446.Location = new System.Drawing.Point(347, 301);
			this.__0x6446.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6446.Name = "button79";
			this.__0x6446.Size = new System.Drawing.Size(24, 20);
			this.__0x6446.TabIndex = 91;
			this.__0x6446.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6447.BackColor = System.Drawing.Color.White;
			this.__0x6447.Enabled = false;
			this.__0x6447.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6447.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6447.Location = new System.Drawing.Point(377, 301);
			this.__0x6447.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6447.Name = "button80";
			this.__0x6447.Size = new System.Drawing.Size(24, 20);
			this.__0x6447.TabIndex = 92;
			this.__0x6447.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6448.BackColor = System.Drawing.Color.White;
			this.__0x6448.Enabled = false;
			this.__0x6448.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6448.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6448.Location = new System.Drawing.Point(407, 301);
			this.__0x6448.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6448.Name = "button81";
			this.__0x6448.Size = new System.Drawing.Size(24, 20);
			this.__0x6448.TabIndex = 93;
			this.__0x6448.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6449.BackColor = System.Drawing.Color.White;
			this.__0x6449.Enabled = false;
			this.__0x6449.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6449.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6449.Location = new System.Drawing.Point(437, 301);
			this.__0x6449.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6449.Name = "button82";
			this.__0x6449.Size = new System.Drawing.Size(24, 20);
			this.__0x6449.TabIndex = 94;
			this.__0x6449.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6450.BackColor = System.Drawing.Color.White;
			this.__0x6450.Enabled = false;
			this.__0x6450.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6450.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6450.Location = new System.Drawing.Point(467, 301);
			this.__0x6450.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6450.Name = "button83";
			this.__0x6450.Size = new System.Drawing.Size(24, 20);
			this.__0x6450.TabIndex = 95;
			this.__0x6450.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6451.BackColor = System.Drawing.Color.White;
			this.__0x6451.Enabled = false;
			this.__0x6451.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6451.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6451.Location = new System.Drawing.Point(497, 301);
			this.__0x6451.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6451.Name = "button84";
			this.__0x6451.Size = new System.Drawing.Size(24, 20);
			this.__0x6451.TabIndex = 96;
			this.__0x6451.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6452.BackColor = System.Drawing.Color.White;
			this.__0x6452.Enabled = false;
			this.__0x6452.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6452.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6452.Location = new System.Drawing.Point(18, 328);
			this.__0x6452.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6452.Name = "button85";
			this.__0x6452.Size = new System.Drawing.Size(24, 20);
			this.__0x6452.TabIndex = 97;
			this.__0x6452.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6453.BackColor = System.Drawing.Color.White;
			this.__0x6453.Enabled = false;
			this.__0x6453.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6453.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6453.Location = new System.Drawing.Point(47, 327);
			this.__0x6453.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6453.Name = "button86";
			this.__0x6453.Size = new System.Drawing.Size(24, 20);
			this.__0x6453.TabIndex = 98;
			this.__0x6453.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6454.BackColor = System.Drawing.Color.White;
			this.__0x6454.Enabled = false;
			this.__0x6454.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6454.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6454.Location = new System.Drawing.Point(77, 327);
			this.__0x6454.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6454.Name = "button87";
			this.__0x6454.Size = new System.Drawing.Size(24, 20);
			this.__0x6454.TabIndex = 99;
			this.__0x6454.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6455.BackColor = System.Drawing.Color.White;
			this.__0x6455.Enabled = false;
			this.__0x6455.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6455.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6455.Location = new System.Drawing.Point(107, 327);
			this.__0x6455.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6455.Name = "button88";
			this.__0x6455.Size = new System.Drawing.Size(24, 20);
			this.__0x6455.TabIndex = 100;
			this.__0x6455.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6456.BackColor = System.Drawing.Color.White;
			this.__0x6456.Enabled = false;
			this.__0x6456.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6456.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6456.Location = new System.Drawing.Point(137, 327);
			this.__0x6456.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6456.Name = "button89";
			this.__0x6456.Size = new System.Drawing.Size(24, 20);
			this.__0x6456.TabIndex = 101;
			this.__0x6456.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6457.BackColor = System.Drawing.Color.White;
			this.__0x6457.Enabled = false;
			this.__0x6457.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6457.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6457.Location = new System.Drawing.Point(167, 327);
			this.__0x6457.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6457.Name = "button90";
			this.__0x6457.Size = new System.Drawing.Size(24, 20);
			this.__0x6457.TabIndex = 102;
			this.__0x6457.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6458.BackColor = System.Drawing.Color.White;
			this.__0x6458.Enabled = false;
			this.__0x6458.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6458.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6458.Location = new System.Drawing.Point(197, 327);
			this.__0x6458.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6458.Name = "button91";
			this.__0x6458.Size = new System.Drawing.Size(24, 20);
			this.__0x6458.TabIndex = 103;
			this.__0x6458.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6459.BackColor = System.Drawing.Color.White;
			this.__0x6459.Enabled = false;
			this.__0x6459.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6459.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6459.Location = new System.Drawing.Point(227, 327);
			this.__0x6459.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6459.Name = "button92";
			this.__0x6459.Size = new System.Drawing.Size(24, 20);
			this.__0x6459.TabIndex = 104;
			this.__0x6459.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6460.BackColor = System.Drawing.Color.White;
			this.__0x6460.Enabled = false;
			this.__0x6460.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6460.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6460.Location = new System.Drawing.Point(257, 327);
			this.__0x6460.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6460.Name = "button93";
			this.__0x6460.Size = new System.Drawing.Size(24, 20);
			this.__0x6460.TabIndex = 105;
			this.__0x6460.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6461.BackColor = System.Drawing.Color.White;
			this.__0x6461.Enabled = false;
			this.__0x6461.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6461.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6461.Location = new System.Drawing.Point(287, 327);
			this.__0x6461.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6461.Name = "button94";
			this.__0x6461.Size = new System.Drawing.Size(24, 20);
			this.__0x6461.TabIndex = 106;
			this.__0x6461.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6462.BackColor = System.Drawing.Color.White;
			this.__0x6462.Enabled = false;
			this.__0x6462.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6462.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6462.Location = new System.Drawing.Point(317, 327);
			this.__0x6462.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6462.Name = "button95";
			this.__0x6462.Size = new System.Drawing.Size(24, 20);
			this.__0x6462.TabIndex = 107;
			this.__0x6462.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6463.BackColor = System.Drawing.Color.White;
			this.__0x6463.Enabled = false;
			this.__0x6463.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6463.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6463.Location = new System.Drawing.Point(347, 327);
			this.__0x6463.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6463.Name = "button96";
			this.__0x6463.Size = new System.Drawing.Size(24, 20);
			this.__0x6463.TabIndex = 108;
			this.__0x6463.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6464.BackColor = System.Drawing.Color.White;
			this.__0x6464.Enabled = false;
			this.__0x6464.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6464.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6464.Location = new System.Drawing.Point(377, 327);
			this.__0x6464.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6464.Name = "button97";
			this.__0x6464.Size = new System.Drawing.Size(24, 20);
			this.__0x6464.TabIndex = 109;
			this.__0x6464.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6465.BackColor = System.Drawing.Color.White;
			this.__0x6465.Enabled = false;
			this.__0x6465.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6465.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6465.Location = new System.Drawing.Point(407, 327);
			this.__0x6465.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6465.Name = "button98";
			this.__0x6465.Size = new System.Drawing.Size(24, 20);
			this.__0x6465.TabIndex = 110;
			this.__0x6465.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6466.BackColor = System.Drawing.Color.White;
			this.__0x6466.Enabled = false;
			this.__0x6466.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6466.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6466.Location = new System.Drawing.Point(437, 327);
			this.__0x6466.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6466.Name = "button99";
			this.__0x6466.Size = new System.Drawing.Size(24, 20);
			this.__0x6466.TabIndex = 111;
			this.__0x6466.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6467.BackColor = System.Drawing.Color.White;
			this.__0x6467.Enabled = false;
			this.__0x6467.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6467.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6467.Location = new System.Drawing.Point(467, 327);
			this.__0x6467.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6467.Name = "button100";
			this.__0x6467.Size = new System.Drawing.Size(24, 20);
			this.__0x6467.TabIndex = 112;
			this.__0x6467.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6468.BackColor = System.Drawing.Color.White;
			this.__0x6468.Enabled = false;
			this.__0x6468.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6468.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6468.Location = new System.Drawing.Point(497, 327);
			this.__0x6468.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6468.Name = "button101";
			this.__0x6468.Size = new System.Drawing.Size(24, 20);
			this.__0x6468.TabIndex = 113;
			this.__0x6468.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6469.BackColor = System.Drawing.Color.White;
			this.__0x6469.Enabled = false;
			this.__0x6469.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6469.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6469.Location = new System.Drawing.Point(18, 354);
			this.__0x6469.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6469.Name = "button102";
			this.__0x6469.Size = new System.Drawing.Size(24, 20);
			this.__0x6469.TabIndex = 114;
			this.__0x6469.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6470.BackColor = System.Drawing.Color.White;
			this.__0x6470.Enabled = false;
			this.__0x6470.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6470.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6470.Location = new System.Drawing.Point(47, 353);
			this.__0x6470.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6470.Name = "button103";
			this.__0x6470.Size = new System.Drawing.Size(24, 20);
			this.__0x6470.TabIndex = 115;
			this.__0x6470.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6471.BackColor = System.Drawing.Color.White;
			this.__0x6471.Enabled = false;
			this.__0x6471.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6471.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6471.Location = new System.Drawing.Point(77, 353);
			this.__0x6471.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6471.Name = "button104";
			this.__0x6471.Size = new System.Drawing.Size(24, 20);
			this.__0x6471.TabIndex = 116;
			this.__0x6471.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6472.BackColor = System.Drawing.Color.White;
			this.__0x6472.Enabled = false;
			this.__0x6472.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6472.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6472.Location = new System.Drawing.Point(107, 353);
			this.__0x6472.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6472.Name = "button105";
			this.__0x6472.Size = new System.Drawing.Size(24, 20);
			this.__0x6472.TabIndex = 117;
			this.__0x6472.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6473.BackColor = System.Drawing.Color.White;
			this.__0x6473.Enabled = false;
			this.__0x6473.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6473.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6473.Location = new System.Drawing.Point(137, 353);
			this.__0x6473.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6473.Name = "button106";
			this.__0x6473.Size = new System.Drawing.Size(24, 20);
			this.__0x6473.TabIndex = 118;
			this.__0x6473.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6474.BackColor = System.Drawing.Color.White;
			this.__0x6474.Enabled = false;
			this.__0x6474.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6474.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6474.Location = new System.Drawing.Point(167, 353);
			this.__0x6474.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6474.Name = "button107";
			this.__0x6474.Size = new System.Drawing.Size(24, 20);
			this.__0x6474.TabIndex = 119;
			this.__0x6474.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6475.BackColor = System.Drawing.Color.White;
			this.__0x6475.Enabled = false;
			this.__0x6475.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6475.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6475.Location = new System.Drawing.Point(197, 353);
			this.__0x6475.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6475.Name = "button108";
			this.__0x6475.Size = new System.Drawing.Size(24, 20);
			this.__0x6475.TabIndex = 120;
			this.__0x6475.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6476.BackColor = System.Drawing.Color.White;
			this.__0x6476.Enabled = false;
			this.__0x6476.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6476.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6476.Location = new System.Drawing.Point(227, 353);
			this.__0x6476.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6476.Name = "button109";
			this.__0x6476.Size = new System.Drawing.Size(24, 20);
			this.__0x6476.TabIndex = 121;
			this.__0x6476.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6477.BackColor = System.Drawing.Color.White;
			this.__0x6477.Enabled = false;
			this.__0x6477.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6477.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6477.Location = new System.Drawing.Point(257, 353);
			this.__0x6477.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6477.Name = "button110";
			this.__0x6477.Size = new System.Drawing.Size(24, 20);
			this.__0x6477.TabIndex = 122;
			this.__0x6477.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6478.BackColor = System.Drawing.Color.White;
			this.__0x6478.Enabled = false;
			this.__0x6478.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6478.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6478.Location = new System.Drawing.Point(287, 353);
			this.__0x6478.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6478.Name = "button111";
			this.__0x6478.Size = new System.Drawing.Size(24, 20);
			this.__0x6478.TabIndex = 123;
			this.__0x6478.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6479.BackColor = System.Drawing.Color.White;
			this.__0x6479.Enabled = false;
			this.__0x6479.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6479.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6479.Location = new System.Drawing.Point(317, 353);
			this.__0x6479.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6479.Name = "button112";
			this.__0x6479.Size = new System.Drawing.Size(24, 20);
			this.__0x6479.TabIndex = 124;
			this.__0x6479.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6480.BackColor = System.Drawing.Color.White;
			this.__0x6480.Enabled = false;
			this.__0x6480.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6480.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6480.Location = new System.Drawing.Point(347, 353);
			this.__0x6480.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6480.Name = "button113";
			this.__0x6480.Size = new System.Drawing.Size(24, 20);
			this.__0x6480.TabIndex = 125;
			this.__0x6480.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6481.BackColor = System.Drawing.Color.White;
			this.__0x6481.Enabled = false;
			this.__0x6481.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6481.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6481.Location = new System.Drawing.Point(377, 353);
			this.__0x6481.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6481.Name = "button114";
			this.__0x6481.Size = new System.Drawing.Size(24, 20);
			this.__0x6481.TabIndex = 126;
			this.__0x6481.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6482.BackColor = System.Drawing.Color.White;
			this.__0x6482.Enabled = false;
			this.__0x6482.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6482.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6482.Location = new System.Drawing.Point(407, 353);
			this.__0x6482.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6482.Name = "button115";
			this.__0x6482.Size = new System.Drawing.Size(24, 20);
			this.__0x6482.TabIndex = 127;
			this.__0x6482.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6483.BackColor = System.Drawing.Color.White;
			this.__0x6483.Enabled = false;
			this.__0x6483.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6483.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6483.Location = new System.Drawing.Point(437, 353);
			this.__0x6483.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6483.Name = "button116";
			this.__0x6483.Size = new System.Drawing.Size(24, 20);
			this.__0x6483.TabIndex = 128;
			this.__0x6483.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6484.BackColor = System.Drawing.Color.White;
			this.__0x6484.Enabled = false;
			this.__0x6484.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6484.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6484.Location = new System.Drawing.Point(467, 353);
			this.__0x6484.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6484.Name = "button117";
			this.__0x6484.Size = new System.Drawing.Size(24, 20);
			this.__0x6484.TabIndex = 129;
			this.__0x6484.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6485.BackColor = System.Drawing.Color.White;
			this.__0x6485.Enabled = false;
			this.__0x6485.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6485.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6485.Location = new System.Drawing.Point(497, 353);
			this.__0x6485.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6485.Name = "button118";
			this.__0x6485.Size = new System.Drawing.Size(24, 20);
			this.__0x6485.TabIndex = 130;
			this.__0x6485.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6486.BackColor = System.Drawing.Color.White;
			this.__0x6486.Enabled = false;
			this.__0x6486.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6486.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6486.Location = new System.Drawing.Point(18, 381);
			this.__0x6486.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6486.Name = "button119";
			this.__0x6486.Size = new System.Drawing.Size(24, 20);
			this.__0x6486.TabIndex = 131;
			this.__0x6486.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6487.BackColor = System.Drawing.Color.White;
			this.__0x6487.Enabled = false;
			this.__0x6487.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6487.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6487.Location = new System.Drawing.Point(47, 380);
			this.__0x6487.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6487.Name = "button120";
			this.__0x6487.Size = new System.Drawing.Size(24, 20);
			this.__0x6487.TabIndex = 132;
			this.__0x6487.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6488.BackColor = System.Drawing.Color.White;
			this.__0x6488.Enabled = false;
			this.__0x6488.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6488.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6488.Location = new System.Drawing.Point(77, 380);
			this.__0x6488.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6488.Name = "button121";
			this.__0x6488.Size = new System.Drawing.Size(24, 20);
			this.__0x6488.TabIndex = 133;
			this.__0x6488.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6489.BackColor = System.Drawing.Color.White;
			this.__0x6489.Enabled = false;
			this.__0x6489.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6489.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6489.Location = new System.Drawing.Point(107, 380);
			this.__0x6489.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6489.Name = "button122";
			this.__0x6489.Size = new System.Drawing.Size(24, 20);
			this.__0x6489.TabIndex = 134;
			this.__0x6489.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6490.BackColor = System.Drawing.Color.White;
			this.__0x6490.Enabled = false;
			this.__0x6490.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6490.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6490.Location = new System.Drawing.Point(137, 380);
			this.__0x6490.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6490.Name = "button123";
			this.__0x6490.Size = new System.Drawing.Size(24, 20);
			this.__0x6490.TabIndex = 135;
			this.__0x6490.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6491.BackColor = System.Drawing.Color.White;
			this.__0x6491.Enabled = false;
			this.__0x6491.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6491.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6491.Location = new System.Drawing.Point(167, 380);
			this.__0x6491.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6491.Name = "button124";
			this.__0x6491.Size = new System.Drawing.Size(24, 20);
			this.__0x6491.TabIndex = 136;
			this.__0x6491.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6492.BackColor = System.Drawing.Color.White;
			this.__0x6492.Enabled = false;
			this.__0x6492.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6492.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6492.Location = new System.Drawing.Point(197, 380);
			this.__0x6492.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6492.Name = "button125";
			this.__0x6492.Size = new System.Drawing.Size(24, 20);
			this.__0x6492.TabIndex = 137;
			this.__0x6492.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6493.BackColor = System.Drawing.Color.White;
			this.__0x6493.Enabled = false;
			this.__0x6493.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6493.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6493.Location = new System.Drawing.Point(227, 380);
			this.__0x6493.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6493.Name = "button126";
			this.__0x6493.Size = new System.Drawing.Size(24, 20);
			this.__0x6493.TabIndex = 138;
			this.__0x6493.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6494.BackColor = System.Drawing.Color.White;
			this.__0x6494.Enabled = false;
			this.__0x6494.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6494.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6494.Location = new System.Drawing.Point(257, 380);
			this.__0x6494.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6494.Name = "button127";
			this.__0x6494.Size = new System.Drawing.Size(24, 20);
			this.__0x6494.TabIndex = 139;
			this.__0x6494.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6495.BackColor = System.Drawing.Color.White;
			this.__0x6495.Enabled = false;
			this.__0x6495.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6495.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6495.Location = new System.Drawing.Point(287, 380);
			this.__0x6495.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6495.Name = "button128";
			this.__0x6495.Size = new System.Drawing.Size(24, 20);
			this.__0x6495.TabIndex = 140;
			this.__0x6495.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6496.BackColor = System.Drawing.Color.White;
			this.__0x6496.Enabled = false;
			this.__0x6496.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6496.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6496.Location = new System.Drawing.Point(317, 380);
			this.__0x6496.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6496.Name = "button129";
			this.__0x6496.Size = new System.Drawing.Size(24, 20);
			this.__0x6496.TabIndex = 141;
			this.__0x6496.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6497.BackColor = System.Drawing.Color.White;
			this.__0x6497.Enabled = false;
			this.__0x6497.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6497.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6497.Location = new System.Drawing.Point(347, 380);
			this.__0x6497.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6497.Name = "button130";
			this.__0x6497.Size = new System.Drawing.Size(24, 20);
			this.__0x6497.TabIndex = 142;
			this.__0x6497.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6498.BackColor = System.Drawing.Color.White;
			this.__0x6498.Enabled = false;
			this.__0x6498.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6498.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6498.Location = new System.Drawing.Point(377, 380);
			this.__0x6498.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6498.Name = "button131";
			this.__0x6498.Size = new System.Drawing.Size(24, 20);
			this.__0x6498.TabIndex = 143;
			this.__0x6498.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6499.BackColor = System.Drawing.Color.White;
			this.__0x6499.Enabled = false;
			this.__0x6499.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6499.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6499.Location = new System.Drawing.Point(407, 380);
			this.__0x6499.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6499.Name = "button132";
			this.__0x6499.Size = new System.Drawing.Size(24, 20);
			this.__0x6499.TabIndex = 144;
			this.__0x6499.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6500.BackColor = System.Drawing.Color.White;
			this.__0x6500.Enabled = false;
			this.__0x6500.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6500.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6500.Location = new System.Drawing.Point(437, 380);
			this.__0x6500.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6500.Name = "button133";
			this.__0x6500.Size = new System.Drawing.Size(24, 20);
			this.__0x6500.TabIndex = 145;
			this.__0x6500.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6501.BackColor = System.Drawing.Color.White;
			this.__0x6501.Enabled = false;
			this.__0x6501.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6501.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6501.Location = new System.Drawing.Point(467, 380);
			this.__0x6501.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6501.Name = "button134";
			this.__0x6501.Size = new System.Drawing.Size(24, 20);
			this.__0x6501.TabIndex = 146;
			this.__0x6501.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6502.BackColor = System.Drawing.Color.White;
			this.__0x6502.Enabled = false;
			this.__0x6502.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6502.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6502.Location = new System.Drawing.Point(497, 380);
			this.__0x6502.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6502.Name = "button135";
			this.__0x6502.Size = new System.Drawing.Size(24, 20);
			this.__0x6502.TabIndex = 147;
			this.__0x6502.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6503.BackColor = System.Drawing.Color.White;
			this.__0x6503.Enabled = false;
			this.__0x6503.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6503.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6503.Location = new System.Drawing.Point(18, 406);
			this.__0x6503.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6503.Name = "button136";
			this.__0x6503.Size = new System.Drawing.Size(24, 20);
			this.__0x6503.TabIndex = 148;
			this.__0x6503.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6504.BackColor = System.Drawing.Color.White;
			this.__0x6504.Enabled = false;
			this.__0x6504.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6504.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6504.Location = new System.Drawing.Point(47, 405);
			this.__0x6504.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6504.Name = "button137";
			this.__0x6504.Size = new System.Drawing.Size(24, 20);
			this.__0x6504.TabIndex = 149;
			this.__0x6504.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6505.BackColor = System.Drawing.Color.White;
			this.__0x6505.Enabled = false;
			this.__0x6505.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6505.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6505.Location = new System.Drawing.Point(77, 405);
			this.__0x6505.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6505.Name = "button138";
			this.__0x6505.Size = new System.Drawing.Size(24, 20);
			this.__0x6505.TabIndex = 150;
			this.__0x6505.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6506.BackColor = System.Drawing.Color.White;
			this.__0x6506.Enabled = false;
			this.__0x6506.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6506.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6506.Location = new System.Drawing.Point(107, 405);
			this.__0x6506.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6506.Name = "button139";
			this.__0x6506.Size = new System.Drawing.Size(24, 20);
			this.__0x6506.TabIndex = 151;
			this.__0x6506.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6507.BackColor = System.Drawing.Color.White;
			this.__0x6507.Enabled = false;
			this.__0x6507.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6507.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6507.Location = new System.Drawing.Point(137, 405);
			this.__0x6507.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6507.Name = "button140";
			this.__0x6507.Size = new System.Drawing.Size(24, 20);
			this.__0x6507.TabIndex = 152;
			this.__0x6507.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6508.BackColor = System.Drawing.Color.White;
			this.__0x6508.Enabled = false;
			this.__0x6508.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6508.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6508.Location = new System.Drawing.Point(167, 405);
			this.__0x6508.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6508.Name = "button141";
			this.__0x6508.Size = new System.Drawing.Size(24, 20);
			this.__0x6508.TabIndex = 153;
			this.__0x6508.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6509.BackColor = System.Drawing.Color.White;
			this.__0x6509.Enabled = false;
			this.__0x6509.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6509.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6509.Location = new System.Drawing.Point(197, 405);
			this.__0x6509.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6509.Name = "button142";
			this.__0x6509.Size = new System.Drawing.Size(24, 20);
			this.__0x6509.TabIndex = 154;
			this.__0x6509.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6510.BackColor = System.Drawing.Color.White;
			this.__0x6510.Enabled = false;
			this.__0x6510.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6510.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6510.Location = new System.Drawing.Point(227, 405);
			this.__0x6510.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6510.Name = "button143";
			this.__0x6510.Size = new System.Drawing.Size(24, 20);
			this.__0x6510.TabIndex = 155;
			this.__0x6510.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6511.BackColor = System.Drawing.Color.White;
			this.__0x6511.Enabled = false;
			this.__0x6511.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6511.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6511.Location = new System.Drawing.Point(257, 405);
			this.__0x6511.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6511.Name = "button144";
			this.__0x6511.Size = new System.Drawing.Size(24, 20);
			this.__0x6511.TabIndex = 156;
			this.__0x6511.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6512.BackColor = System.Drawing.Color.White;
			this.__0x6512.Enabled = false;
			this.__0x6512.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6512.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6512.Location = new System.Drawing.Point(287, 405);
			this.__0x6512.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6512.Name = "button145";
			this.__0x6512.Size = new System.Drawing.Size(24, 20);
			this.__0x6512.TabIndex = 157;
			this.__0x6512.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6513.BackColor = System.Drawing.Color.White;
			this.__0x6513.Enabled = false;
			this.__0x6513.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6513.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6513.Location = new System.Drawing.Point(317, 405);
			this.__0x6513.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6513.Name = "button146";
			this.__0x6513.Size = new System.Drawing.Size(24, 20);
			this.__0x6513.TabIndex = 158;
			this.__0x6513.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6514.BackColor = System.Drawing.Color.White;
			this.__0x6514.Enabled = false;
			this.__0x6514.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6514.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6514.Location = new System.Drawing.Point(347, 405);
			this.__0x6514.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6514.Name = "button147";
			this.__0x6514.Size = new System.Drawing.Size(24, 20);
			this.__0x6514.TabIndex = 159;
			this.__0x6514.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6515.BackColor = System.Drawing.Color.White;
			this.__0x6515.Enabled = false;
			this.__0x6515.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6515.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6515.Location = new System.Drawing.Point(377, 405);
			this.__0x6515.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6515.Name = "button148";
			this.__0x6515.Size = new System.Drawing.Size(24, 20);
			this.__0x6515.TabIndex = 160;
			this.__0x6515.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6516.BackColor = System.Drawing.Color.White;
			this.__0x6516.Enabled = false;
			this.__0x6516.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6516.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6516.Location = new System.Drawing.Point(407, 405);
			this.__0x6516.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6516.Name = "button149";
			this.__0x6516.Size = new System.Drawing.Size(24, 20);
			this.__0x6516.TabIndex = 161;
			this.__0x6516.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6517.BackColor = System.Drawing.Color.White;
			this.__0x6517.Enabled = false;
			this.__0x6517.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6517.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6517.Location = new System.Drawing.Point(437, 405);
			this.__0x6517.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6517.Name = "button150";
			this.__0x6517.Size = new System.Drawing.Size(24, 20);
			this.__0x6517.TabIndex = 162;
			this.__0x6517.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6518.BackColor = System.Drawing.Color.White;
			this.__0x6518.Enabled = false;
			this.__0x6518.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6518.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6518.Location = new System.Drawing.Point(467, 405);
			this.__0x6518.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6518.Name = "button151";
			this.__0x6518.Size = new System.Drawing.Size(24, 20);
			this.__0x6518.TabIndex = 163;
			this.__0x6518.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6519.BackColor = System.Drawing.Color.White;
			this.__0x6519.Enabled = false;
			this.__0x6519.FlatAppearance.BorderColor = System.Drawing.SystemColors.ControlDark;
			this.__0x6519.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
			this.__0x6519.Location = new System.Drawing.Point(497, 405);
			this.__0x6519.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x6519.Name = "button152";
			this.__0x6519.Size = new System.Drawing.Size(24, 20);
			this.__0x6519.TabIndex = 164;
			this.__0x6519.UseVisualStyleBackColor = false;
			
			
			
			this.__0x6520.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6520.DialogResult = System.Windows.Forms.DialogResult.Cancel;
			this.__0x6520.Location = new System.Drawing.Point(404, 448);
			this.__0x6520.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6520.Name = "buttonCancel";
			this.__0x6520.Size = new System.Drawing.Size(117, 32);
			this.__0x6520.TabIndex = 166;
			this.__0x6520.Values.Text = "Cancel";
			
			
			
			this.__0x6521.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x6521.DialogResult = System.Windows.Forms.DialogResult.OK;
			this.__0x6521.Location = new System.Drawing.Point(278, 448);
			this.__0x6521.Margin = new System.Windows.Forms.Padding(4);
			this.__0x6521.Name = "buttonOK";
			this.__0x6521.Size = new System.Drawing.Size(117, 32);
			this.__0x6521.TabIndex = 165;
			this.__0x6521.Values.Text = "OK";
			
			
			
			this.AcceptButton = this.__0x6521;
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.CancelButton = this.__0x6520;
			this.ClientSize = new System.Drawing.Size(537, 494);
			this.Controls.Add(this.__0x6350);
			this.Controls.Add(this.__0x6364);
			this.Controls.Add(this.__0x6365);
			this.Controls.Add(this.__0x6366);
			this.Controls.Add(this.__0x6363);
			this.Controls.Add(this.__0x6362);
			this.Controls.Add(this.__0x6361);
			this.Controls.Add(this.__0x6360);
			this.Controls.Add(this.__0x6359);
			this.Controls.Add(this.__0x6358);
			this.Controls.Add(this.__0x6357);
			this.Controls.Add(this.__0x6356);
			this.Controls.Add(this.__0x6354);
			this.Controls.Add(this.__0x6355);
			this.Controls.Add(this.__0x6352);
			this.Controls.Add(this.__0x6353);
			this.Controls.Add(this.__0x6351);
			this.Controls.Add(this.__0x6367);
			this.Controls.Add(this.__0x6368);
			this.Controls.Add(this.__0x6369);
			this.Controls.Add(this.__0x6370);
			this.Controls.Add(this.__0x6371);
			this.Controls.Add(this.__0x6372);
			this.Controls.Add(this.__0x6373);
			this.Controls.Add(this.__0x6374);
			this.Controls.Add(this.__0x6375);
			this.Controls.Add(this.__0x6376);
			this.Controls.Add(this.__0x6377);
			this.Controls.Add(this.__0x6378);
			this.Controls.Add(this.__0x6379);
			this.Controls.Add(this.__0x6380);
			this.Controls.Add(this.__0x6381);
			this.Controls.Add(this.__0x6382);
			this.Controls.Add(this.__0x6383);
			this.Controls.Add(this.__0x6384);
			this.Controls.Add(this.__0x6385);
			this.Controls.Add(this.__0x6386);
			this.Controls.Add(this.__0x6387);
			this.Controls.Add(this.__0x6388);
			this.Controls.Add(this.__0x6389);
			this.Controls.Add(this.__0x6390);
			this.Controls.Add(this.__0x6391);
			this.Controls.Add(this.__0x6392);
			this.Controls.Add(this.__0x6393);
			this.Controls.Add(this.__0x6394);
			this.Controls.Add(this.__0x6395);
			this.Controls.Add(this.__0x6396);
			this.Controls.Add(this.__0x6397);
			this.Controls.Add(this.__0x6398);
			this.Controls.Add(this.__0x6399);
			this.Controls.Add(this.__0x6400);
			this.Controls.Add(this.__0x6401);
			this.Controls.Add(this.__0x6402);
			this.Controls.Add(this.__0x6403);
			this.Controls.Add(this.__0x6404);
			this.Controls.Add(this.__0x6405);
			this.Controls.Add(this.__0x6406);
			this.Controls.Add(this.__0x6407);
			this.Controls.Add(this.__0x6408);
			this.Controls.Add(this.__0x6409);
			this.Controls.Add(this.__0x6410);
			this.Controls.Add(this.__0x6411);
			this.Controls.Add(this.__0x6412);
			this.Controls.Add(this.__0x6413);
			this.Controls.Add(this.__0x6414);
			this.Controls.Add(this.__0x6415);
			this.Controls.Add(this.__0x6416);
			this.Controls.Add(this.__0x6417);
			this.Controls.Add(this.__0x6418);
			this.Controls.Add(this.__0x6419);
			this.Controls.Add(this.__0x6420);
			this.Controls.Add(this.__0x6421);
			this.Controls.Add(this.__0x6422);
			this.Controls.Add(this.__0x6423);
			this.Controls.Add(this.__0x6424);
			this.Controls.Add(this.__0x6425);
			this.Controls.Add(this.__0x6426);
			this.Controls.Add(this.__0x6427);
			this.Controls.Add(this.__0x6428);
			this.Controls.Add(this.__0x6429);
			this.Controls.Add(this.__0x6430);
			this.Controls.Add(this.__0x6431);
			this.Controls.Add(this.__0x6432);
			this.Controls.Add(this.__0x6433);
			this.Controls.Add(this.__0x6434);
			this.Controls.Add(this.__0x6435);
			this.Controls.Add(this.__0x6436);
			this.Controls.Add(this.__0x6437);
			this.Controls.Add(this.__0x6438);
			this.Controls.Add(this.__0x6439);
			this.Controls.Add(this.__0x6440);
			this.Controls.Add(this.__0x6441);
			this.Controls.Add(this.__0x6442);
			this.Controls.Add(this.__0x6443);
			this.Controls.Add(this.__0x6444);
			this.Controls.Add(this.__0x6445);
			this.Controls.Add(this.__0x6446);
			this.Controls.Add(this.__0x6447);
			this.Controls.Add(this.__0x6448);
			this.Controls.Add(this.__0x6449);
			this.Controls.Add(this.__0x6450);
			this.Controls.Add(this.__0x6451);
			this.Controls.Add(this.__0x6452);
			this.Controls.Add(this.__0x6453);
			this.Controls.Add(this.__0x6454);
			this.Controls.Add(this.__0x6455);
			this.Controls.Add(this.__0x6456);
			this.Controls.Add(this.__0x6457);
			this.Controls.Add(this.__0x6458);
			this.Controls.Add(this.__0x6459);
			this.Controls.Add(this.__0x6460);
			this.Controls.Add(this.__0x6461);
			this.Controls.Add(this.__0x6462);
			this.Controls.Add(this.__0x6463);
			this.Controls.Add(this.__0x6464);
			this.Controls.Add(this.__0x6465);
			this.Controls.Add(this.__0x6466);
			this.Controls.Add(this.__0x6467);
			this.Controls.Add(this.__0x6468);
			this.Controls.Add(this.__0x6469);
			this.Controls.Add(this.__0x6470);
			this.Controls.Add(this.__0x6471);
			this.Controls.Add(this.__0x6472);
			this.Controls.Add(this.__0x6473);
			this.Controls.Add(this.__0x6474);
			this.Controls.Add(this.__0x6475);
			this.Controls.Add(this.__0x6476);
			this.Controls.Add(this.__0x6477);
			this.Controls.Add(this.__0x6478);
			this.Controls.Add(this.__0x6479);
			this.Controls.Add(this.__0x6480);
			this.Controls.Add(this.__0x6481);
			this.Controls.Add(this.__0x6482);
			this.Controls.Add(this.__0x6483);
			this.Controls.Add(this.__0x6484);
			this.Controls.Add(this.__0x6485);
			this.Controls.Add(this.__0x6486);
			this.Controls.Add(this.__0x6487);
			this.Controls.Add(this.__0x6488);
			this.Controls.Add(this.__0x6489);
			this.Controls.Add(this.__0x6490);
			this.Controls.Add(this.__0x6491);
			this.Controls.Add(this.__0x6492);
			this.Controls.Add(this.__0x6493);
			this.Controls.Add(this.__0x6494);
			this.Controls.Add(this.__0x6495);
			this.Controls.Add(this.__0x6496);
			this.Controls.Add(this.__0x6497);
			this.Controls.Add(this.__0x6498);
			this.Controls.Add(this.__0x6499);
			this.Controls.Add(this.__0x6500);
			this.Controls.Add(this.__0x6501);
			this.Controls.Add(this.__0x6502);
			this.Controls.Add(this.__0x6503);
			this.Controls.Add(this.__0x6504);
			this.Controls.Add(this.__0x6505);
			this.Controls.Add(this.__0x6506);
			this.Controls.Add(this.__0x6507);
			this.Controls.Add(this.__0x6508);
			this.Controls.Add(this.__0x6509);
			this.Controls.Add(this.__0x6510);
			this.Controls.Add(this.__0x6511);
			this.Controls.Add(this.__0x6512);
			this.Controls.Add(this.__0x6513);
			this.Controls.Add(this.__0x6514);
			this.Controls.Add(this.__0x6515);
			this.Controls.Add(this.__0x6516);
			this.Controls.Add(this.__0x6517);
			this.Controls.Add(this.__0x6518);
			this.Controls.Add(this.__0x6519);
			this.Controls.Add(this.__0x6521);
			this.Controls.Add(this.__0x6520);
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
			this.Margin = new System.Windows.Forms.Padding(5);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ColorValuePoweredSelectForm";
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "Select Color";
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private System.Windows.Forms.Label __0x6350;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6351;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6352;
		private System.Windows.Forms.Label __0x6353;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6354;
		private System.Windows.Forms.Label __0x6355;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6356;
		private System.Windows.Forms.Label __0x6357;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6358;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6359;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6360;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6361;
		private NeoAxis.Editor.ColorWheel __0x6362;
		private NeoAxis.Editor.ColorGradientControl __0x6363;
		private ComponentFactory.Krypton.Toolkit.KryptonNumericUpDown __0x6364;
		private System.Windows.Forms.Label __0x6365;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x6366;
		private System.Windows.Forms.Button __0x6367;
		private System.Windows.Forms.Button __0x6368;
		private System.Windows.Forms.Button __0x6369;
		private System.Windows.Forms.Button __0x6370;
		private System.Windows.Forms.Button __0x6371;
		private System.Windows.Forms.Button __0x6372;
		private System.Windows.Forms.Button __0x6373;
		private System.Windows.Forms.Button __0x6374;
		private System.Windows.Forms.Button __0x6375;
		private System.Windows.Forms.Button __0x6376;
		private System.Windows.Forms.Button __0x6377;
		private System.Windows.Forms.Button __0x6378;
		private System.Windows.Forms.Button __0x6379;
		private System.Windows.Forms.Button __0x6380;
		private System.Windows.Forms.Button __0x6381;
		private System.Windows.Forms.Button __0x6382;
		private System.Windows.Forms.Button __0x6383;
		private System.Windows.Forms.Button __0x6384;
		private System.Windows.Forms.Button __0x6385;
		private System.Windows.Forms.Button __0x6386;
		private System.Windows.Forms.Button __0x6387;
		private System.Windows.Forms.Button __0x6388;
		private System.Windows.Forms.Button __0x6389;
		private System.Windows.Forms.Button __0x6390;
		private System.Windows.Forms.Button __0x6391;
		private System.Windows.Forms.Button __0x6392;
		private System.Windows.Forms.Button __0x6393;
		private System.Windows.Forms.Button __0x6394;
		private System.Windows.Forms.Button __0x6395;
		private System.Windows.Forms.Button __0x6396;
		private System.Windows.Forms.Button __0x6397;
		private System.Windows.Forms.Button __0x6398;
		private System.Windows.Forms.Button __0x6399;
		private System.Windows.Forms.Button __0x6400;
		private System.Windows.Forms.Button __0x6401;
		private System.Windows.Forms.Button __0x6402;
		private System.Windows.Forms.Button __0x6403;
		private System.Windows.Forms.Button __0x6404;
		private System.Windows.Forms.Button __0x6405;
		private System.Windows.Forms.Button __0x6406;
		private System.Windows.Forms.Button __0x6407;
		private System.Windows.Forms.Button __0x6408;
		private System.Windows.Forms.Button __0x6409;
		private System.Windows.Forms.Button __0x6410;
		private System.Windows.Forms.Button __0x6411;
		private System.Windows.Forms.Button __0x6412;
		private System.Windows.Forms.Button __0x6413;
		private System.Windows.Forms.Button __0x6414;
		private System.Windows.Forms.Button __0x6415;
		private System.Windows.Forms.Button __0x6416;
		private System.Windows.Forms.Button __0x6417;
		private System.Windows.Forms.Button __0x6418;
		private System.Windows.Forms.Button __0x6419;
		private System.Windows.Forms.Button __0x6420;
		private System.Windows.Forms.Button __0x6421;
		private System.Windows.Forms.Button __0x6422;
		private System.Windows.Forms.Button __0x6423;
		private System.Windows.Forms.Button __0x6424;
		private System.Windows.Forms.Button __0x6425;
		private System.Windows.Forms.Button __0x6426;
		private System.Windows.Forms.Button __0x6427;
		private System.Windows.Forms.Button __0x6428;
		private System.Windows.Forms.Button __0x6429;
		private System.Windows.Forms.Button __0x6430;
		private System.Windows.Forms.Button __0x6431;
		private System.Windows.Forms.Button __0x6432;
		private System.Windows.Forms.Button __0x6433;
		private System.Windows.Forms.Button __0x6434;
		private System.Windows.Forms.Button __0x6435;
		private System.Windows.Forms.Button __0x6436;
		private System.Windows.Forms.Button __0x6437;
		private System.Windows.Forms.Button __0x6438;
		private System.Windows.Forms.Button __0x6439;
		private System.Windows.Forms.Button __0x6440;
		private System.Windows.Forms.Button __0x6441;
		private System.Windows.Forms.Button __0x6442;
		private System.Windows.Forms.Button __0x6443;
		private System.Windows.Forms.Button __0x6444;
		private System.Windows.Forms.Button __0x6445;
		private System.Windows.Forms.Button __0x6446;
		private System.Windows.Forms.Button __0x6447;
		private System.Windows.Forms.Button __0x6448;
		private System.Windows.Forms.Button __0x6449;
		private System.Windows.Forms.Button __0x6450;
		private System.Windows.Forms.Button __0x6451;
		private System.Windows.Forms.Button __0x6452;
		private System.Windows.Forms.Button __0x6453;
		private System.Windows.Forms.Button __0x6454;
		private System.Windows.Forms.Button __0x6455;
		private System.Windows.Forms.Button __0x6456;
		private System.Windows.Forms.Button __0x6457;
		private System.Windows.Forms.Button __0x6458;
		private System.Windows.Forms.Button __0x6459;
		private System.Windows.Forms.Button __0x6460;
		private System.Windows.Forms.Button __0x6461;
		private System.Windows.Forms.Button __0x6462;
		private System.Windows.Forms.Button __0x6463;
		private System.Windows.Forms.Button __0x6464;
		private System.Windows.Forms.Button __0x6465;
		private System.Windows.Forms.Button __0x6466;
		private System.Windows.Forms.Button __0x6467;
		private System.Windows.Forms.Button __0x6468;
		private System.Windows.Forms.Button __0x6469;
		private System.Windows.Forms.Button __0x6470;
		private System.Windows.Forms.Button __0x6471;
		private System.Windows.Forms.Button __0x6472;
		private System.Windows.Forms.Button __0x6473;
		private System.Windows.Forms.Button __0x6474;
		private System.Windows.Forms.Button __0x6475;
		private System.Windows.Forms.Button __0x6476;
		private System.Windows.Forms.Button __0x6477;
		private System.Windows.Forms.Button __0x6478;
		private System.Windows.Forms.Button __0x6479;
		private System.Windows.Forms.Button __0x6480;
		private System.Windows.Forms.Button __0x6481;
		private System.Windows.Forms.Button __0x6482;
		private System.Windows.Forms.Button __0x6483;
		private System.Windows.Forms.Button __0x6484;
		private System.Windows.Forms.Button __0x6485;
		private System.Windows.Forms.Button __0x6486;
		private System.Windows.Forms.Button __0x6487;
		private System.Windows.Forms.Button __0x6488;
		private System.Windows.Forms.Button __0x6489;
		private System.Windows.Forms.Button __0x6490;
		private System.Windows.Forms.Button __0x6491;
		private System.Windows.Forms.Button __0x6492;
		private System.Windows.Forms.Button __0x6493;
		private System.Windows.Forms.Button __0x6494;
		private System.Windows.Forms.Button __0x6495;
		private System.Windows.Forms.Button __0x6496;
		private System.Windows.Forms.Button __0x6497;
		private System.Windows.Forms.Button __0x6498;
		private System.Windows.Forms.Button __0x6499;
		private System.Windows.Forms.Button __0x6500;
		private System.Windows.Forms.Button __0x6501;
		private System.Windows.Forms.Button __0x6502;
		private System.Windows.Forms.Button __0x6503;
		private System.Windows.Forms.Button __0x6504;
		private System.Windows.Forms.Button __0x6505;
		private System.Windows.Forms.Button __0x6506;
		private System.Windows.Forms.Button __0x6507;
		private System.Windows.Forms.Button __0x6508;
		private System.Windows.Forms.Button __0x6509;
		private System.Windows.Forms.Button __0x6510;
		private System.Windows.Forms.Button __0x6511;
		private System.Windows.Forms.Button __0x6512;
		private System.Windows.Forms.Button __0x6513;
		private System.Windows.Forms.Button __0x6514;
		private System.Windows.Forms.Button __0x6515;
		private System.Windows.Forms.Button __0x6516;
		private System.Windows.Forms.Button __0x6517;
		private System.Windows.Forms.Button __0x6518;
		private System.Windows.Forms.Button __0x6519;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x6520;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x6521;
	}
}




namespace NeoAxis.Editor
{
	class ColorWheel : UserControl
	{
		System.ComponentModel.Container __0x6542 = null;
		Bitmap __0x6543 = null;
		bool __0x6544 = false;
		Point __0x6545;

		
		const int __0x6546 = 64 * 4;

		System.Windows.Forms.PictureBox __0x6547;

		HSVColor __0x6548;

		public HSVColor HsvColor
		{
			get
			{
				return __0x6548;
			}

			set
			{
				if( __0x6548 != value )
				{
					HSVColor __0x6549 = __0x6548;
					__0x6548 = value;
					this.OnColorChanged();
					Invalidate( true );
				}
			}
		}

		public ColorWheel()
		{
			
			__0x6587();

			
			__0x6548 = new HSVColor( 0, 0, 0 );
		}

		private static PointF __0x6577( float __0x6592, float __0x6593 )
		{
			float __0x6550;
			float __0x6551;

			__0x6550 = __0x6592 * (float)Math.Cos( __0x6593 );
			__0x6551 = __0x6592 * (float)Math.Sin( __0x6593 );

			return new PointF( __0x6550, __0x6551 );
		}

		private static PointF[] __0x6578( float __0x6594, PointF __0x6595 )
		{
			PointF[] __0x6552 = new PointF[ __0x6546 ];

			for( int __0x6553 = 0; __0x6553 < __0x6546; __0x6553++ )
			{
				float __0x6554 = ( (float)__0x6553 / (float)__0x6546 ) * 2 * (float)Math.PI;
				__0x6552[ __0x6553 ] = __0x6577( __0x6594, __0x6554 );
				__0x6552[ __0x6553 ].X += __0x6595.X;
				__0x6552[ __0x6553 ].Y += __0x6595.Y;
			}

			return __0x6552;
		}

		private Color[] __0x6579()
		{
			Color[] __0x6555 = new Color[ __0x6546 ];

			for( int __0x6556 = 0; __0x6556 < __0x6546; __0x6556++ )
			{
				int __0x6557 = ( __0x6556 * 360 ) / __0x6546;
				__0x6555[ __0x6556 ] = new HSVColor( __0x6557, 1, 1 ).ToColor();
			}

			return __0x6555;
		}

		protected override void OnLoad( EventArgs e )
		{
			__0x6580();
			base.OnLoad( e );
		}


		protected override void OnPaint( PaintEventArgs e )
		{
			__0x6580();
			base.OnPaint( e );
		}

		private void __0x6580()
		{
			if( this.__0x6543 == null )
			{
				__0x6582();
				this.__0x6547.SizeMode = PictureBoxSizeMode.StretchImage;
				int __0x6558 = (int)Math.Ceiling( __0x6585( this.Size ) );
				this.__0x6547.Size = new Size( __0x6558, __0x6558 );
				this.__0x6547.Image = this.__0x6543;
			}
		}

		private void __0x6581( object __0x6596, System.Windows.Forms.PaintEventArgs __0x6597 )
		{
			float __0x6559 = __0x6584( Size );
			float __0x6560 = ( (float)HsvColor.Hue / 360.0f ) * 2.0f * (float)Math.PI;
			float __0x6561 = ( (float)HsvColor.Saturation );
			float __0x6562 = ( __0x6561 * ( __0x6559 - 1 ) * (float)Math.Cos( __0x6560 ) ) + __0x6559;
			float __0x6563 = ( __0x6561 * ( __0x6559 - 1 ) * (float)Math.Sin( __0x6560 ) ) + __0x6559;

			GraphicsContainer __0x6564 = __0x6597.Graphics.BeginContainer();
			__0x6597.Graphics.PixelOffsetMode = PixelOffsetMode.HighQuality;
			__0x6597.Graphics.SmoothingMode = SmoothingMode.HighQuality;
			__0x6597.Graphics.DrawRectangle( Pens.Black, __0x6562 - 1, __0x6563 - 1, 3, 3 );
			__0x6597.Graphics.DrawRectangle( Pens.White, __0x6562, __0x6563, 1, 1 );
			__0x6597.Graphics.EndContainer( __0x6564 );
		}

		private void __0x6582()
		{
			if( __0x6543 != null )
			{
				__0x6543.Dispose();
			}

			int __0x6565 = (int)__0x6585( Size );

			__0x6543 = new Bitmap( 
				Math.Max( 1, ( __0x6565 * 4 ) / 3 ),
				Math.Max( 1, ( __0x6565 * 4 ) / 3 ), System.Drawing.Imaging.PixelFormat.Format24bppRgb );

			using( Graphics __0x6566 = Graphics.FromImage( __0x6543 ) )
			{
#if !ANDROID
				__0x6566.Clear( this.BackColor );
#endif 
				__0x6583( __0x6566, __0x6543.Width, __0x6543.Height );
			}
		}

		private void __0x6583( Graphics __0x6598, int __0x6599, int __0x6600 )
		{
			float __0x6567 = __0x6584( new Size( __0x6599, __0x6600 ) );
			PointF[] __0x6568 = __0x6578( Math.Max( 1.0f, (float)__0x6567 - 1 ), new PointF( __0x6567, __0x6567 ) );

#if !ANDROID
			using( PathGradientBrush __0x6569 = new PathGradientBrush( __0x6568 ) )
			{
				__0x6569.CenterColor = new HSVColor( 0, 0, 1 ).ToColor();
				__0x6569.CenterPoint = new PointF( __0x6567, __0x6567 );
				__0x6569.SurroundColors = __0x6579();

				__0x6598.FillEllipse( __0x6569, 0, 0, __0x6567 * 2, __0x6567 * 2 );
			}
#endif 
		}

		private static float __0x6584( Size __0x6601 )
		{
			return Math.Min( (float)__0x6601.Width / 2, (float)__0x6601.Height / 2 );
		}

		private static float __0x6585( Size __0x6602 )
		{
			return Math.Min( (float)__0x6602.Width, (float)__0x6602.Height );
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

#if !ANDROID
			if( __0x6543 != null && ( __0x6584( Size ) != __0x6584( __0x6543.Size ) ) )
			{
				__0x6543.Dispose();
				__0x6543 = null;
			}
#endif 

			Invalidate();
		}

		public event EventHandler ColorChanged;
		protected virtual void OnColorChanged()
		{
			if( ColorChanged != null )
			{
				ColorChanged( this, EventArgs.Empty );
			}
		}

		private void __0x6586( Point __0x6603 )
		{
			
			int __0x6570 = __0x6603.X - ( Width / 2 );
			int __0x6571 = __0x6603.Y - ( Height / 2 );

			double __0x6572 = Math.Atan2( __0x6571, __0x6570 );

			if( __0x6572 < 0 )
			{
				__0x6572 += 2 * Math.PI;
			}

			double __0x6573 = Math.Sqrt( ( __0x6570 * __0x6570 ) + ( __0x6571 * __0x6571 ) );

			double __0x6574 = ( __0x6572 / ( Math.PI * 2 ) ) * 360.0;
			double __0x6575 = Math.Min( 1, ( __0x6573 / (double)( Width / 2 ) ) );
			double __0x6576 = 1;

			__0x6548 = new HSVColor( __0x6574, __0x6575, __0x6576 );
			OnColorChanged();
			Invalidate( true );
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			base.OnMouseDown( e );

			if( e.Button == MouseButtons.Left )
			{
				__0x6544 = true;
			}
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			if( __0x6544 )
			{
				__0x6586( new Point( e.X, e.Y ) );
			}

			__0x6544 = false;
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			__0x6545 = new Point( e.X, e.Y );

			if( __0x6544 )
			{
				__0x6586( new Point( e.X, e.Y ) );
			}
		}

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				if( __0x6542 != null )
				{
					__0x6542.Dispose();
					__0x6542 = null;
				}
			}

			base.Dispose( disposing );
		}

#region Component Designer generated code
		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x6587()
		{
			this.__0x6547 = new System.Windows.Forms.PictureBox();
			this.SuspendLayout();
			
			
			
			this.__0x6547.Location = new System.Drawing.Point( 0, 0 );
			this.__0x6547.Name = "wheelPictureBox";
			this.__0x6547.TabIndex = 0;
			this.__0x6547.TabStop = false;
			this.__0x6547.Click += new System.EventHandler( this.__0x6591 );
			this.__0x6547.Paint += new System.Windows.Forms.PaintEventHandler( this.__0x6581 );
			this.__0x6547.MouseUp += new System.Windows.Forms.MouseEventHandler( this.__0x6589 );
			this.__0x6547.MouseMove += new System.Windows.Forms.MouseEventHandler( this.__0x6588 );
			this.__0x6547.MouseDown += new System.Windows.Forms.MouseEventHandler( this.__0x6590 );
			
			
			
			this.Controls.Add( this.__0x6547 );
			this.Name = "ColorWheel";
			this.ResumeLayout( false );

		}
#endregion

		private void __0x6588( object __0x6604, System.Windows.Forms.MouseEventArgs __0x6605 )
		{
			OnMouseMove( __0x6605 );
		}

		private void __0x6589( object __0x6606, System.Windows.Forms.MouseEventArgs __0x6607 )
		{
			OnMouseUp( __0x6607 );
		}

		private void __0x6590( object __0x6608, System.Windows.Forms.MouseEventArgs __0x6609 )
		{
			OnMouseDown( __0x6609 );
		}

		private void __0x6591( object __0x6610, System.EventArgs __0x6611 )
		{
			OnClick( __0x6611 );
		}
	}
}




namespace NeoAxis.Editor
{
	struct HSVColor
	{
		double __0x6612; 
		double __0x6613; 
		double __0x6614; 

		public double Hue
		{
			get { return __0x6612; }
			set { __0x6612 = value; }
		}

		public double Saturation
		{
			get { return __0x6613; }
			set { __0x6613 = value; }
		}

		public double Value
		{
			get { return this.__0x6614; }
			set { this.__0x6614 = value; }
		}

		public static bool operator ==( HSVColor lhs, HSVColor rhs )
		{
			if( ( lhs.Hue == rhs.Hue ) &&
				 ( lhs.Saturation == rhs.Saturation ) &&
				 ( lhs.Value == rhs.Value ) )
			{
				return true;
			}
			else
			{
				return false;
			}
		}

		public static bool operator !=( HSVColor lhs, HSVColor rhs )
		{
			return !( lhs == rhs );
		}

		public override bool Equals( object obj )
		{
			return ( obj is HSVColor ) && this == (HSVColor)obj;
		}

		public override int GetHashCode()
		{
			return Hue.GetHashCode() ^ Saturation.GetHashCode() ^ Value.GetHashCode();
		}

		public HSVColor( double hue, double saturation, double value )
		{
			MathEx.Clamp( ref hue, 0, 360 );
			MathEx.Clamp( ref saturation, 0, 1 );
			MathEx.Clamp( ref value, 0, 1 );
			
			
			
			
			
			

			
			
			
			
			
			

			this.__0x6612 = hue;
			this.__0x6613 = saturation;
			this.__0x6614 = value;
		}

		
		
		
		
		

		
		
		
		
		

		public static HSVColor FromRGB( ColorValue color )
		{
			
			
			
			

			double __0x6615;
			double __0x6616;
			double __0x6617;

			double __0x6618 = color.Red;
			double __0x6619 = color.Green;
			double __0x6620 = color.Blue;

			double __0x6621;
			double __0x6622;
			double __0x6623;

			__0x6615 = Math.Min( Math.Min( __0x6618, __0x6619 ), __0x6620 );
			__0x6616 = Math.Max( Math.Max( __0x6618, __0x6619 ), __0x6620 );
			__0x6623 = __0x6616;
			__0x6617 = __0x6616 - __0x6615;

			if( __0x6616 == 0 || __0x6617 == 0 )
			{
				
				
				
				__0x6622 = 0;
				__0x6621 = 0;
			}
			else
			{
				__0x6622 = __0x6617 / __0x6616;
				if( __0x6618 == __0x6616 )
				{
					
					__0x6621 = ( __0x6619 - __0x6620 ) / __0x6617;
				}
				else if( __0x6619 == __0x6616 )
				{
					
					__0x6621 = 2 + ( __0x6620 - __0x6618 ) / __0x6617;
				}
				else
				{
					
					__0x6621 = 4 + ( __0x6618 - __0x6619 ) / __0x6617;
				}

			}
			
			
			
			__0x6621 *= 60;

			if( __0x6621 < 0 )
			{
				__0x6621 += 360;
			}

			return new HSVColor( __0x6621, __0x6622, __0x6623 );
		}

		public ColorValue ToColorValue()
		{
			

			double __0x6624;
			double __0x6625;
			double __0x6626;

			double __0x6627 = 0;
			double __0x6628 = 0;
			double __0x6629 = 0;

			
			
			__0x6624 = Hue % 360;
			__0x6625 = Saturation;
			__0x6626 = Value;

			if( __0x6625 == 0 )
			{
				
				
				__0x6627 = __0x6626;
				__0x6628 = __0x6626;
				__0x6629 = __0x6626;
			}
			else
			{
				double __0x6630;
				double __0x6631;
				double __0x6632;

				double __0x6633;
				int __0x6634;
				double __0x6635;

				
				
				__0x6635 = __0x6624 / 60;
				__0x6634 = (int)( Math.Floor( __0x6635 ) );

				
				
				
				__0x6633 = __0x6635 - __0x6634;

				
				
				__0x6630 = __0x6626 * ( 1 - __0x6625 );
				__0x6631 = __0x6626 * ( 1 - ( __0x6625 * __0x6633 ) );
				__0x6632 = __0x6626 * ( 1 - ( __0x6625 * ( 1 - __0x6633 ) ) );

				
				
				switch( __0x6634 )
				{
				case 0: __0x6627 = __0x6626; __0x6628 = __0x6632; __0x6629 = __0x6630; break;
				case 1: __0x6627 = __0x6631; __0x6628 = __0x6626; __0x6629 = __0x6630; break;
				case 2: __0x6627 = __0x6630; __0x6628 = __0x6626; __0x6629 = __0x6632; break;
				case 3: __0x6627 = __0x6630; __0x6628 = __0x6631; __0x6629 = __0x6626; break;
				case 4: __0x6627 = __0x6632; __0x6628 = __0x6630; __0x6629 = __0x6626; break;
				case 5: __0x6627 = __0x6626; __0x6628 = __0x6630; __0x6629 = __0x6631; break;
				}
			}
			return new ColorValue( __0x6627, __0x6628, __0x6629 );
		}

		public Color ToColor()
		{
			var __0x6636 = ToColorValue();
			return Color.FromArgb( (int)( __0x6636.Red * 255 ), (int)( __0x6636.Green * 255 ), (int)( __0x6636.Blue * 255 ) );
		}

		public override string ToString()
		{
			return String.Format( "({0}, {1}, {2})", Hue, Saturation, Value );
		}
	}
}





namespace NeoAxis.Editor
{
	public class EngineToolTip
	{
		static ESet<EngineToolTip> __0x6637 = new ESet<EngineToolTip>();

		Dictionary<Control, string> __0x6638 = new Dictionary<Control, string>();

		

		static EngineToolTip __0x6639;
		public static EngineToolTip Global
		{
			get
			{
				if( __0x6639 == null )
					__0x6639 = new EngineToolTip();
				return __0x6639;
			}
		}

		public EngineToolTip()
		{
		}

		public EngineToolTip( IContainer container )
		{
		}

		public void Dispose()
		{
			lock( __0x6638 )
			{
				foreach( var __0x6642 in __0x6638.Keys )
					Hide( __0x6642 );
			}
		}

		public string GetToolTip( Control control )
		{
			lock( __0x6638 )
			{
				if( control != null && __0x6638.TryGetValue( control, out var text ) )
					return text;
				return "";
			}
		}

		public void SetToolTip( Control control, string text )
		{
			Hide( control );

			if( control != null )
			{
				lock( __0x6638 )
				{
					if( !string.IsNullOrEmpty( text ) )
						__0x6638[ control ] = text;
					else
						__0x6638.Remove( control );
				}
			}

			lock( __0x6637 )
			{
				if( __0x6638.Count != 0 )
					__0x6637.AddWithCheckAlreadyContained( this );
				else
					__0x6637.Remove( this );
			}
		}

		public void Hide( Control control )
		{
			if( control != null )
				EngineToolTipManager.Hide( control );
		}

		void __0x6647( out bool __0x6648 )
		{
			lock( __0x6638 )
			{
				if( __0x6638.Count != 0 )
				{
					again:
					foreach( var __0x6643 in __0x6638.Keys )
					{
						if( __0x6643.IsDisposed )
						{
							__0x6638.Remove( __0x6643 );
							goto again;
						}
					}
				}

				__0x6648 = __0x6638.Count == 0;
			}
		}

		internal static void UpdateAllInstances()
		{
			lock( __0x6637 )
			{
				var __0x6640 = new List<EngineToolTip>();

				foreach( var __0x6644 in __0x6637 )
				{
					__0x6644.__0x6647( out var remove );
					if( remove )
						__0x6640.Add( __0x6644 );
				}

				foreach( var __0x6645 in __0x6640 )
					__0x6637.Remove( __0x6645 );
			}
		}

		internal static (EngineToolTip toolTip, string text) GetToolTipByControl( Control control )
		{
			

			lock( __0x6637 )
			{
				foreach( var __0x6646 in __0x6637 )
				{
					var __0x6641 = __0x6646.GetToolTip( control );
					if( !string.IsNullOrEmpty( __0x6641 ) )
							return (__0x6646, __0x6641);

					
					
					
					
					
				}
			}

			return (null, "");
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class EngineToolTipForm : Form
	{
		

		Color __0x6649 = Color.FromArgb( 100, 100, 100 );
		

		

		public EngineToolTipForm(string body )
		{
			__0x6663();

			
			
			
			
			

			
			
			__0x6658.Text = body;

			
			

			
			
			
			
			

			if( EditorAPI.DarkTheme )
			{
				
				BackColor = Color.FromArgb( 10, 10, 10 );
				__0x6649 = Color.FromArgb( 90, 90, 90 );
				__0x6658.ForeColor = Color.White;
			}
		}

		protected override bool ShowWithoutActivation
		{
			get { return true; }
		}

		const int __0x6650 = 0x00000008;
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x6651 = base.CreateParams;
				__0x6651.ExStyle |= __0x6650;
				return __0x6651;
			}
		}

		
		
		
		
		

		
		
		

		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			ControlPaint.DrawBorder( e.Graphics, ClientRectangle, __0x6649, ButtonBorderStyle.Solid );
		}

		private void __0x6659( object __0x6664, EventArgs __0x6665 )
		{
			
			

			using( var __0x6652 = CreateGraphics() )
			{
				

				__0x6652.TextRenderingHint = System.Drawing.Text.TextRenderingHint.AntiAlias;

				var __0x6653 = __0x6652.MeasureString( __0x6658.Text, __0x6658.Font );
				var __0x6654 = new Vector2I( (int)( __0x6653.Width + EditorAPI.DPIScale * 7.0f ), (int)( __0x6653.Height + EditorAPI.DPIScale * 7.0f ) );

				
				var __0x6655 = SystemSettings.AllDisplaysBounds.RightBottom;
				var __0x6656 = Location;
				if( Location.X + __0x6654.X + (int)( EditorAPI.DPIScale * 2.0f ) > __0x6655.X )
					__0x6656.X = __0x6655.X - __0x6654.X - (int)( EditorAPI.DPIScale * 2.0f );
				if( Location.Y + __0x6654.Y + (int)( EditorAPI.DPIScale * 2.0f ) > __0x6655.Y )
					__0x6656.Y = __0x6655.Y - __0x6654.Y - (int)( EditorAPI.DPIScale * 2.0f );
				if( __0x6656 != Location )
					Location = __0x6656;

				Size = new Size( __0x6654.X, __0x6654.Y );
				__0x6658.Location = new Point( (int)( EditorAPI.DPIScale * 2.0f ), 0 );
				__0x6658.Size = new Size( Size.Width + 100, Size.Height );
			}
		}

		
		
		
		

		private void __0x6660( object __0x6666, EventArgs __0x6667 )
		{
			Close();
		}

		private void __0x6661( object __0x6668, EventArgs __0x6669 )
		{
			Close();
		}

		private void __0x6662( object __0x6670, EventArgs __0x6671 )
		{
			Close();
		}

		
		
		
		
		
		
		
		
		
		
	}
}
namespace NeoAxis.Editor
{
    partial class EngineToolTipForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x6657 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x6657 != null))
            {
                __0x6657.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x6663()
        {
			this.__0x6657 = new System.ComponentModel.Container();
			
			this.__0x6658 = new System.Windows.Forms.Label();
			
			
			this.SuspendLayout();
			
			
			
			
			
			
			
			this.__0x6658.BackColor = System.Drawing.Color.Transparent;
			
			this.__0x6658.Font = new System.Drawing.Font("Tahoma", 8, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x6658.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(0)))), ((int)(((byte)(0)))), ((int)(((byte)(0)))));
			this.__0x6658.Location = new System.Drawing.Point(0, 0);
			this.__0x6658.Margin = new System.Windows.Forms.Padding(0, 0, 0, 0);
			this.__0x6658.Name = "labelBody";
			
			this.__0x6658.TabIndex = 0;
			this.__0x6658.Text = "Text Text Text";
			this.__0x6658.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			
			this.__0x6658.Click += new System.EventHandler(this.__0x6662);
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(255)))), ((int)(((byte)(255)))), ((int)(((byte)(225)))));
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
			this.ClientSize = new System.Drawing.Size(459, 48);
			this.ControlBox = false;
			
			this.Controls.Add(this.__0x6658);
			this.DoubleBuffered = true;
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "EngineToolTipForm";
			
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "Text";
			this.Load += new System.EventHandler(this.__0x6659);
			this.Click += new System.EventHandler(this.__0x6660);
			this.ResumeLayout(false);

        }

        #endregion

        
        private System.Windows.Forms.Label __0x6658;
        
		
	}
}




namespace NeoAxis.Editor
{
	static class EngineToolTipManager
	{
		const double __0x6672 = 0.5;

		static Control __0x6673;
		static string __0x6674;
		static double __0x6675;
		static Point __0x6676;
		static EngineToolTipForm __0x6677;

		

		[System.Runtime.InteropServices.DllImport( "user32.dll" )]
		internal static extern IntPtr WindowFromPoint( Point pnt );

		

		static Control __0x6682()
		{
			IntPtr __0x6678 = WindowFromPoint( Control.MousePosition );
			if( __0x6678 != IntPtr.Zero )
				return Control.FromHandle( __0x6678 );
			return null;
		}

		public static void Update()
		{
			EngineToolTip.UpdateAllInstances();

			var __0x6679 = __0x6682();

			if( __0x6673 != __0x6679 )
			{
				
				__0x6673 = null;
				__0x6677?.Close();
				__0x6677 = null;

				
				if( __0x6679 != null )
				{
					(EngineToolTip toolTip, string text) __0x6680 = EngineToolTip.GetToolTipByControl( __0x6679 );
					if( __0x6680.toolTip != null && !string.IsNullOrEmpty( __0x6680.text ) )
					{
						__0x6673 = __0x6679;
						__0x6674 = __0x6680.text;
						__0x6675 = EngineApp.GetSystemTime();
						__0x6676 = Control.MousePosition;
					}
				}
			}

			
			if( __0x6673 != null && __0x6677 == null )
			{
				
				if( __0x6676 != Control.MousePosition )
				{
					__0x6676 = Control.MousePosition;
					__0x6675 = EngineApp.GetSystemTime();
				}

				
				if( EngineApp.GetSystemTime() > __0x6675 + __0x6672 )
				{
					__0x6677 = new EngineToolTipForm( __0x6674 );
					__0x6677.StartPosition = FormStartPosition.Manual;
					var __0x6681 = Control.MousePosition;
					__0x6677.Location = new Point( __0x6681.X, __0x6681.Y + (int)( 16.0f * EditorAPI.DPIScale ) );
					__0x6677.Show();
				}
			}
		}

		internal static void Hide( Control control )
		{
			if( __0x6673 == control )
			{
				__0x6673 = null;
				try
				{
					__0x6677?.Close();
				}
				catch { }
				__0x6677 = null;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCColorPreviewButton : KryptonButton
	{
		public HCColorPreviewButton()
		{
			Text = "";
		}

		ColorValue __0x6683;

		public ColorValue PreviewColor
		{
			get
			{
				return __0x6683;
			}
			set
			{
				if( __0x6683 == value )
					return;
				__0x6683 = value;
				Invalidate();
			}
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			var __0x6684 = DisplayRectangle;
			__0x6684.Inflate( -1, -1 );

			int[] __0x6685 = new int[ 4 ];
			for( int __0x6686 = 0; __0x6686 < 4; __0x6686++ )
			{
				int __0x6687 = (int)( PreviewColor[ __0x6686 ] * 255.0f );
				if( __0x6687 < 0 )
					__0x6687 = 0;
				if( __0x6687 > 255 )
					__0x6687 = 255;
				__0x6685[ __0x6686 ] = __0x6687;
			}

#if !ANDROID
			if( PreviewColor.Alpha != 1 )
			{
				using( HatchBrush __0x6688 = new HatchBrush( HatchStyle.LargeCheckerBoard,
					Color.FromArgb( 128, 128, 128 ), Color.FromArgb( 192, 192, 192 ) ) )
				{
					e.Graphics.FillRectangle( __0x6688, __0x6684 );
				}
			}

			Color __0x6689 = Color.FromArgb( 255, __0x6685[ 0 ], __0x6685[ 1 ], __0x6685[ 2 ] );
			Color __0x6690 = Color.FromArgb( __0x6685[ 3 ], __0x6685[ 0 ], __0x6685[ 1 ], __0x6685[ 2 ] );

			using( LinearGradientBrush __0x6691 = new LinearGradientBrush( __0x6684, __0x6689, __0x6690, 90, false ) )
			{
				e.Graphics.FillRectangle( __0x6691, __0x6684 );
			}
#endif 
		}
	}
}





namespace NeoAxis.Editor
{
	
	[AttributeUsage( AttributeTargets.Class | AttributeTargets.Struct )]
	public class HCExpandableAttribute : Attribute
	{
		public HCExpandableAttribute()
		{
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCDropDownControl : EUserControl
	{
		public bool Resizable { get; set; }
		public bool UseFormDropDownHolder { get; set; }
		public IDropDownHolder ParentHolder { get; set; }

		public HCDropDownControl()
		{
			MinimumSize = new Size( 1, 1 );
			MaximumSize = new Size( 10000, 10000 );
		}

		public virtual void OnCommitChanges()
		{ }

		public virtual void OnCancelChanges()
		{ }

		public virtual void OnHolderOpened()
		{ }

		public void AddOkCancelButtons( out KryptonButton buttonOK, out KryptonButton buttonCancel )
		{
			var __0x6692 = DpiHelper.Default.ScaleValue( new Size( 94, 26 ) );

			buttonOK = new KryptonButton();
			buttonOK.Size = __0x6692;
			buttonOK.Text = "OK";
			buttonOK.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonOK.Location = new Point( Width - __0x6692.Width - buttonOK.Width - 20, Height - buttonOK.Height - 10 );
			buttonOK.Click += ( __0x6694, __0x6695 ) => ParentHolder.Close( true );
			Controls.Add( buttonOK );

			buttonCancel = new KryptonButton();
			buttonCancel.Size = __0x6692;
			buttonCancel.Text = "Cancel";
			buttonCancel.Anchor = AnchorStyles.Bottom | AnchorStyles.Right;
			buttonCancel.Location = new Point( Size - buttonCancel.Size - new Size( 10, 10 ) );
			buttonCancel.Click += ( __0x6696, __0x6697 ) => ParentHolder.Close( false );
			Controls.Add( buttonCancel );

			Height += buttonCancel.Height + 10;

			buttonOK.Text = EditorLocalization.Translate( "General", buttonOK.Text );
			buttonCancel.Text = EditorLocalization.Translate( "General", buttonCancel.Text );
		}

		protected override void WndProc( ref Message m )
		{
			if( Parent is IDropDownHolder holder && holder.ProcessResizing( ref m ) )
				return;

			base.WndProc( ref m );
		}

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x6693 = base.CreateParams;
				__0x6693.ExStyle |= 0x02000000;
				return __0x6693;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public static class HCExtensions
	{
		public delegate void OverridePropertyReadOnlyDelegate( HCItemProperty __0x6726, ref bool? __0x6727 );
		public static event OverridePropertyReadOnlyDelegate OverridePropertyReadOnly;
		
		

		public static void PerformOverridePropertyReadOnly( HCItemProperty itemProperty, ref bool? readOnly )
		
		{
			
			OverridePropertyReadOnly?.Invoke( itemProperty, ref readOnly );
			
			
			

			var __0x6698 = itemProperty.Property;

			
			if( __0x6698.Name == "Position" || __0x6698.Name == "Rotation" || __0x6698.Name == "Scale" )
			{
				var __0x6699 = __0x6698.Owner as Metadata.NetTypeInfo;
				if( __0x6699 != null && __0x6699.Type == typeof( Transform ) )
				{
					readOnly = false;
					
				}
			}

			
			if( __0x6698.Name == "Length" )
			{
				var __0x6700 = __0x6698.Owner as Metadata.TypeInfo;
				if( __0x6700 != null && __0x6700.GetNetType() == typeof( Array ) )
				{
					var __0x6701 = itemProperty.Parent as HCItemProperty;
					if( __0x6701 != null && !__0x6701.Property.ReadOnly )
					{
						readOnly = false;
						
					}
				}
			}

			
			if( __0x6698.Name == "Count" )
			{
				var __0x6702 = __0x6698.Owner as Metadata.TypeInfo;
				if( __0x6702 != null && HCItemProperty.IsListType( __0x6702.GetNetType() ) )
				{
					readOnly = false;
					
				}
			}
		}

		

		public delegate void OverridePropertySetValueDelegate( HCItemProperty.PropertySetValueData __0x6728 );
		public static event OverridePropertySetValueDelegate OverridePropertySetValue;

		public static void PerformOverridePropertySetValue( HCItemProperty.PropertySetValueData data )
		{
			OverridePropertySetValue?.Invoke( data );

			var __0x6703 = data.itemProperty.Property;

			
			if( data.parentItemProperty != null && ReferenceUtility.GetUnreferencedType( data.parentItemProperty.Property.Type.GetNetType() ) == typeof( Transform ) )
			{
				for( int __0x6704 = 0; __0x6704 < data.itemProperty.ControlledObjects.Length; __0x6704++ )
				{
					var __0x6705 = data.itemProperty.ControlledObjects[ __0x6704 ];
					if( __0x6703.Name == "Position" )
						data.itemProperty.ControlledObjects[ __0x6704 ] = __0x6705.GetType().GetMethod( "UpdatePosition" ).Invoke( __0x6705, new object[] { data.value } );
					else if( __0x6703.Name == "Rotation" )
						data.itemProperty.ControlledObjects[ __0x6704 ] = __0x6705.GetType().GetMethod( "UpdateRotation" ).Invoke( __0x6705, new object[] { data.value } );
					else if( __0x6703.Name == "Scale" )
						data.itemProperty.ControlledObjects[ __0x6704 ] = __0x6705.GetType().GetMethod( "UpdateScale" ).Invoke( __0x6705, new object[] { data.value } );
				}

				data.setValueHandled = true;
			}

			
			if( __0x6703.Name == "Length" )
			{
				var __0x6706 = __0x6703.Owner as Metadata.TypeInfo;
				if( __0x6706 != null && __0x6706.GetNetType() == typeof( Array ) )
				{
					int __0x6707 = (int)data.unrefValue;

					for( int __0x6708 = 0; __0x6708 < data.parentItemProperty.ControlledObjects.Length; __0x6708++ )
					{
						var __0x6709 = (IList)ReferenceUtility.GetUnreferencedValue( data.itemProperty.ControlledObjects[ __0x6708 ] );
						if( __0x6709 != null && __0x6709.Count != __0x6707 )
						{
							var __0x6710 = Array.CreateInstance( __0x6709.GetType().GetElementType(), __0x6707 );
							Array.Copy( (Array)__0x6709, __0x6710, Math.Min( __0x6707, __0x6709.Count ) );

							

							data.parentItemProperty.SetValue( __0x6710, data.addUndo );
						}
					}

					data.setValueHandled = true;
					data.addUndoHandled = true;
					data.updateParentPropertyHandled = true;
				}
			}

			
			if( __0x6703.Name == "Count" )
			{
				var __0x6711 = __0x6703.Owner as Metadata.TypeInfo;
				if( __0x6711 != null && HCItemProperty.IsListType( __0x6711.GetNetType() ) )
				{
					int __0x6712 = (int)data.unrefValue;

					for( int __0x6713 = 0; __0x6713 < data.parentItemProperty.ControlledObjects.Length; __0x6713++ )
					{
						var __0x6714 = (IList)ReferenceUtility.GetUnreferencedValue( data.itemProperty.ControlledObjects[ __0x6713 ] );
						if( __0x6714 != null )
						{
							if( __0x6712 < __0x6714.Count )
							{
								

								if( !data.addUndoHandled && data.addUndo && data.itemProperty.Owner.DocumentWindow?.Document != null )
								{
									

									var __0x6715 = new List<int>();
									for( int __0x6716 = __0x6712; __0x6716 < __0x6714.Count; __0x6716++ )
										__0x6715.Add( __0x6716 );
									var __0x6717 = new UndoActionListAddRemove( __0x6714, __0x6715, false );

									DocumentInstance __0x6718 = data.itemProperty.Owner.DocumentWindow.Document;
									__0x6718.UndoSystem.CommitAction( __0x6717 );
									__0x6718.Modified = true;
								}
								else
								{
									
									while( __0x6714.Count > __0x6712 )
										__0x6714.RemoveAt( __0x6714.Count - 1 );
								}
							}
							else if( __0x6712 > __0x6714.Count )
							{
								

								var __0x6719 = new List<int>();
								for( int __0x6720 = __0x6714.Count; __0x6720 < __0x6712; __0x6720++ )
									__0x6719.Add( __0x6720 );

								var __0x6721 = __0x6714.GetType().GetGenericArguments()[ 0 ];
								while( __0x6714.Count < __0x6712 )
								{
									object __0x6722 = null;
									var __0x6723 = __0x6714 as IReferenceList;
									if( __0x6723 != null )
										__0x6722 = Activator.CreateInstance( __0x6723.GetItemType() );
									else if( __0x6721.IsValueType )
										__0x6722 = Activator.CreateInstance( __0x6721 );
									__0x6714.Add( __0x6722 );
								}

								
								if( !data.addUndoHandled && data.addUndo && data.itemProperty.Owner.DocumentWindow?.Document != null )
								{
									var __0x6724 = new UndoActionListAddRemove( __0x6714, __0x6719, true );

									DocumentInstance __0x6725 = data.itemProperty.Owner.DocumentWindow.Document;
									__0x6725.UndoSystem.CommitAction( __0x6724 );
									__0x6725.Modified = true;
								}
							}
						}
					}

					data.setValueHandled = true;
					data.addUndoHandled = true;
					data.updateParentPropertyHandled = true;
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCCheckBox
	{
		ComponentFactory.Krypton.Toolkit.KryptonCheckBox CheckBox1 { get; }
		bool CheckBox1SetText { get; }
	}

	/// <summary>
	/// Represents a check box item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemCheckBox : HCItemProperty
	{
		bool __0x6729 = true;

		

		public HCItemCheckBox( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridCheckBox();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x6730 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			__0x6730.CheckBox1.CheckedChanged += __0x6740;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6731 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			var __0x6732 = GetValues();
			if( __0x6732 == null )
				return;

			bool __0x6733 = false;
			bool __0x6734 = false;
			foreach( var __0x6739 in __0x6732 )
			{
				bool __0x6735 = (bool)ReferenceUtility.GetUnreferencedValue( __0x6739 );
				if( !__0x6735 )
					__0x6733 = true;
				if( __0x6735 )
					__0x6734 = true;
			}

			string __0x6736 = Property.Name;
			
			
			
			
			
			
			
			

			if( __0x6731.CheckBox1SetText )
				__0x6731.CheckBox1.Text = __0x6736;
			else
				__0x6731.CheckBox1.Text = "";

			__0x6731.CheckBox1.Enabled = CanEditValue();

			__0x6729 = false;

			if( __0x6733 && __0x6734 )
			{
				__0x6731.CheckBox1.ThreeState = true;
				__0x6731.CheckBox1.CheckState = CheckState.Indeterminate;
			}
			else
			{
				__0x6731.CheckBox1.ThreeState = false;
				__0x6731.CheckBox1.CheckState = __0x6734 ? CheckState.Checked : CheckState.Unchecked;
			}

			__0x6729 = true;
		}

		private void __0x6740( object __0x6741, EventArgs __0x6742 )
		{
			if( !__0x6729 )
				return;

			var __0x6737 = (IHCCheckBox)CreatedControlInsidePropertyItemControl;
			object __0x6738 = __0x6737.CheckBox1.Checked;

			SetValue( __0x6738, true );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCCollection
	{
		EngineTextBox Label2 { get; }
		ComponentFactory.Krypton.Toolkit.KryptonButton ButtonEdit { get; }
	}

	public class HCItemCollection : HCItemProperty
	{
		public HCItemCollection( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridCollection();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			
			
			var __0x6743 = (IHCCollection)CreatedControlInsidePropertyItemControl;
			__0x6743.Label2.MouseUp += Control_MouseUp_ResetDefaultValue;

			
		}

		public virtual string GetValueText( object value )
		{
			if( value.GetType().IsArray )
			{
				int __0x6744 = (int)value.GetType().GetProperty( "Length" ).GetValue( value, null );
				return $"Length: {__0x6744}";
			}
			else
			{
				int __0x6745 = (int)value.GetType().GetProperty( "Count" ).GetValue( value, null );
				return $"Count: {__0x6745}";
			}
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6746 = (IHCCollection)CreatedControlInsidePropertyItemControl;
			var __0x6747 = GetValues();
			if( __0x6747 == null )
				return;

			var __0x6748 = "";

			for( int __0x6749 = 0; __0x6749 < __0x6747.Length; __0x6749++ )
			{
				var __0x6750 = __0x6747[ __0x6749 ];
				var __0x6751 = ReferenceUtility.GetUnreferencedValue( __0x6750 );
				string __0x6752;
				if( __0x6751 != null )
					__0x6752 = GetValueText( __0x6751 );
				else
					__0x6752 = "(Null)";

				if( __0x6749 == 0 )
					__0x6748 = __0x6752;
				else
				{
					if( __0x6748 != __0x6752 )
						__0x6748 = "";
				}
			}

			if( __0x6746.Label2 != null )
				__0x6746.Label2.Text = __0x6748;
		}

		
		
		
		
		

		
		

		

		
		
		
	}
}





namespace NeoAxis.Editor
{
	public interface IHCColorValue : IHCTextBox
	{
		HCColorPreviewButton PreviewButton { get; }
	}

	public class HCItemColorValue : HCItemTextBox
	{
		public HCItemColorValue( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridColorValue();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x6753 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			__0x6753.PreviewButton.Click += __0x6764;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6754 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			__0x6763();
		}

		protected override void GetExpandablePropertiesFilter( Metadata.Property p, ref bool skip )
		{
			base.GetExpandablePropertiesFilter( p, ref skip );

			
			if( p.Name == "Alpha" && Property.GetCustomAttributes( typeof( ColorValueNoAlphaAttribute ), true ).Length != 0 )
				skip = true;
		}

		void __0x6763()
		{
			var __0x6755 = GetValues();
			if( __0x6755 == null )
				return;

			var __0x6756 = ColorValue.Zero;

			for( int __0x6757 = 0; __0x6757 < __0x6755.Length; __0x6757++ )
			{
				var __0x6758 = __0x6755[ __0x6757 ];
				var __0x6759 = ReferenceUtility.GetUnreferencedValue( __0x6758 );

				ColorValue __0x6760;
				if( __0x6759 is ColorValuePowered )
					__0x6760 = ( (ColorValuePowered)__0x6759 ).Color;
				else
					__0x6760 = (ColorValue)__0x6759;

				if( __0x6757 == 0 )
					__0x6756 = __0x6760;
				else
				{
					if( __0x6756 != __0x6760 )
						__0x6756 = ColorValue.One;
				}
			}

			var __0x6761 = (IHCColorValue)CreatedControlInsidePropertyItemControl;
			if( __0x6761 != null )
				__0x6761.PreviewButton.PreviewColor = __0x6756;
		}

		private void __0x6764( object __0x6765, EventArgs __0x6766 )
		{
			var __0x6762 = (IHCColorValue)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
				Owner.ToggleDropDown( new ColorValuePoweredSelectControl( this ), __0x6762.PreviewButton );
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCColorValuePowered : IHCColorValue
	{
		ComponentFactory.Krypton.Toolkit.KryptonTrackBar TrackBarPower { get; }
	}

	public class HCItemColorValuePowered : HCItemColorValue
	{
		ApplicableRangeColorValuePowerAttribute __0x6767;

		bool __0x6768;
		bool __0x6769;
		HCItemProperty __0x6770;
		bool __0x6771;

		

		public HCItemColorValuePowered( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridColorValuePowered();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x6772 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			
			

			
			var __0x6773 = Property.GetCustomAttributes( typeof( ApplicableRangeColorValuePowerAttribute ), true );
			if( __0x6773.Length != 0 )
				__0x6767 = (ApplicableRangeColorValuePowerAttribute)__0x6773[ 0 ];
			if( __0x6767 == null )
				__0x6767 = new ApplicableRangeColorValuePowerAttribute( 0, 100, RangeAttribute.ConvenientDistributionEnum.Exponential, 2 );

			
			
			{
				var __0x6774 = __0x6772.TrackBarPower;

				__0x6771 = true;
				__0x6767.GetTrackBarMinMax( false, out int min, out int max );
				__0x6774.Minimum = min;
				__0x6774.Maximum = max;
				__0x6774.LargeChange = ( __0x6774.Maximum - __0x6774.Minimum ) / 10;
				__0x6774.SmallChange = ( __0x6774.Maximum - __0x6774.Minimum ) / 100;
				__0x6771 = false;

				__0x6774.GotFocus += __0x6801;
				__0x6774.LostFocus += __0x6803;
				__0x6774.MouseUp += __0x6804;
				__0x6774.ValueChanged += __0x6805;
			}

			
			
			
			
			
			
			
			
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6775 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x6776 = __0x6775.TrackBarPower;

			if( __0x6767 != null )
			{
				var __0x6777 = Property.Type.GetNetType();
				bool __0x6778 = ReferenceUtility.IsReferenceType( __0x6777 );

				var __0x6779 = GetValues();
				if( __0x6779 != null )
				{
					__0x6776.Enabled = CanEditValue();
					
					
					
					
					

					
					if( !__0x6769 )
						__0x6800();
				}
			}
		}

		void __0x6800()
		{
			var __0x6780 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x6781 = __0x6780.TrackBarPower;

			var __0x6782 = GetValues();
			if( __0x6782 == null )
				return;

			int __0x6783 = 0;

			for( int __0x6784 = 0; __0x6784 < __0x6782.Length; __0x6784++ )
			{
				var __0x6785 = __0x6782[ __0x6784 ];
				var __0x6786 = ReferenceUtility.GetUnreferencedValue( __0x6785 );
				var __0x6787 = ( (ColorValuePowered)__0x6786 ).Power;
				var __0x6788 = __0x6767.GetTrackBarValue( false, __0x6787 );

				if( __0x6784 == 0 )
					__0x6783 = __0x6788;
				else
				{
					if( __0x6783 != __0x6788 )
						__0x6783 = __0x6780.TrackBarPower.Minimum;
				}
			}

			if( __0x6781.Value != __0x6783 )
			{
				__0x6771 = true;
				__0x6781.Value = __0x6783;
				__0x6771 = false;
			}
		}

		protected override void TextBoxTextChanged()
		{
			base.TextBoxTextChanged();

			if( __0x6767 != null )
				__0x6800();
		}

		private void __0x6801( object __0x6806, EventArgs __0x6807 )
		{
			__0x6768 = true;
		}

		void __0x6802()
		{
			
			if( __0x6769 )
			{
				__0x6770.AddUndoActionWithSavedValuesToRestore();
				__0x6769 = false;
			}
		}

		private void __0x6803( object __0x6808, EventArgs __0x6809 )
		{
			__0x6768 = false;

			var __0x6789 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			if( !__0x6789.TextBox.ReadOnly )
				__0x6802();
		}

		private void __0x6804( object __0x6810, MouseEventArgs __0x6811 )
		{
			var __0x6790 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			if( !__0x6790.TextBox.ReadOnly )
				__0x6802();
		}

		private void __0x6805( object __0x6812, EventArgs __0x6813 )
		{
			if( __0x6771 )
				return;

			
			if( !__0x6768 )
				return;

			
			if( !__0x6769 )
			{
				__0x6770 = GetItemInHierarchyToRestoreValues();
				__0x6770.SaveValuesToRestore();
				__0x6769 = true;
			}

			var __0x6791 = (IHCColorValuePowered)CreatedControlInsidePropertyItemControl;
			var __0x6792 = __0x6791.TrackBarPower;

			__0x6771 = true;

			var __0x6793 = Property.Type.GetNetType();
			var __0x6794 = ReferenceUtility.GetUnreferencedType( __0x6793 );


			var __0x6795 = GetValues();
			if( __0x6795 == null )
				return;

			
			var __0x6796 = __0x6795[ 0 ];

			var __0x6797 = ReferenceUtility.GetUnreferencedValue( __0x6796 );

			var __0x6798 = (ColorValuePowered)__0x6797;

			try
			{
				var __0x6799 = __0x6767.GetValueFromTrackBar( false, __0x6792.Value );
				__0x6798.Power = (float)__0x6799;

				SetValue( __0x6798, false );
			}
			catch
			{
			}

			__0x6771 = false;
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCItemEnumDropDown : HCItemProperty
	{
		object __0x6814;

		public HCItemEnumDropDown( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridDropDownButton();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x6815 = (IHCDropDownButton)CreatedControlInsidePropertyItemControl;
			__0x6815.Button.MouseUp += Control_MouseUp_ResetDefaultValue;
			__0x6815.Button.DropDown += __0x6828;
		}

		private void __0x6828( object __0x6829, ComponentFactory.Krypton.Toolkit.ContextPositionMenuArgs __0x6830 )
		{
			var __0x6816 = (HCGridDropDownButton)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
				Owner.ToggleDropDown( new EnumDropDownControl( this ), __0x6816.Button );
			else
				Owner.ToggleDropDown( null, null );
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			bool __0x6817 = !CanEditValue();
			var __0x6818 = (HCGridDropDownButton )CreatedControlInsidePropertyItemControl;
			__0x6818.Button.Enabled = !__0x6817;

			
			__0x6818.Button.Width = __0x6818.Width - __0x6818.Button.Location.X;

			var __0x6819 = GetValues();
			if( __0x6819 == null )
				return;

			object __0x6820 = null;

			for( int __0x6821 = 0; __0x6821 < __0x6819.Length; __0x6821++ )
			{
				var __0x6822 = __0x6819[ __0x6821 ];
				object __0x6823 = ReferenceUtility.GetUnreferencedValue( __0x6822 );

				if( __0x6821 == 0 )
					__0x6820 = __0x6823;
				else
				{
					if( !Equals( __0x6820, __0x6823 ) )
						__0x6820 = "";
				}
			}

			if( !Equals( __0x6814, __0x6820 ) )
			{
				OnValueChanged( __0x6814, __0x6820 );
				__0x6814 = __0x6820;
			}
		}

		protected virtual void OnValueChanged( object oldValue, object newValue )
		{
			var __0x6824 = (IHCDropDownButton)CreatedControlInsidePropertyItemControl;

			var __0x6825 = EnumUtility.GetValueDisplayName( newValue );

			var __0x6826 = EnumUtility.GetValueDescription( newValue );
			Owner.PerformOverridePropertyEnumItem( this, ref __0x6825, ref __0x6826 );

			__0x6824.Button.Text = __0x6825;

			var __0x6827 = (IHCProperty)CreatedControl;
			__0x6827.SetToolTip( __0x6824.Button, __0x6826 );

			

			
			
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCGroup
	{
		Label Label1 { get; }
	}

	/// <summary>
	/// Represents a group item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemGroup : HierarchicalContainer.Item
	{
		string __0x6831;

		public HCItemGroup( HierarchicalContainer owner, HierarchicalContainer.Item parent, string name )
			: base( owner, parent )
		{
			this.__0x6831 = name;
		}

		public override EUserControl CreateControlImpl()
		{
			
			return new HCGridGroup();
			
			
		}

		public string Name
		{
			get { return __0x6831; }
		}

		public override void UpdateControl()
		{
			var __0x6832 = (IHCGroup)CreatedControl;

			if( __0x6832.Label1 != null )
			{
				var __0x6833 = __0x6831;
				Owner.PerformOverrideGroupDisplayName( this, ref __0x6833 );
				__0x6832.Label1.Text = __0x6833;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCLabel
	{
		
		EngineTextBox Label2 { get; }
	}

	public class HCItemLabel : HCItemProperty
	{
		public HCItemLabel( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridLabel();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			
			
			var __0x6834 = (IHCLabel)CreatedControlInsidePropertyItemControl;
			__0x6834.Label2.MouseUp += Control_MouseUp_ResetDefaultValue;
		}

		public static string GetValueText( object value )
		{
			if( value == null )
				return "(Null)";

			
			var __0x6835 = value as Component;
			if( __0x6835 != null )
			{
				if( string.IsNullOrEmpty( __0x6835.Name ) )
				{
					if( __0x6835.HierarchyController != null && __0x6835.HierarchyController.CreatedByResource != null )
					{
						var __0x6836 = __0x6835.HierarchyController.CreatedByResource.Owner;
						if( __0x6836.LoadFromFile )
						{
							var __0x6837 = Path.GetFileName( __0x6836.Name );
							if( !string.IsNullOrEmpty( __0x6837 ) )
								return __0x6837;
						}
					}
				}
			}

			return value.ToString();
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6838 = (IHCLabel)CreatedControlInsidePropertyItemControl;
			var __0x6839 = GetValues();
			if( __0x6839 == null )
				return;

			var __0x6840 = "";

			for( int __0x6841 = 0; __0x6841 < __0x6839.Length; __0x6841++ )
			{
				var __0x6842 = __0x6839[ __0x6841 ];
				var __0x6843 = ReferenceUtility.GetUnreferencedValue( __0x6842 );
				var __0x6844 = GetValueText( __0x6843 );

				if( __0x6841 == 0 )
					__0x6840 = __0x6844;
				else
				{
					if( __0x6840 != __0x6844 )
						__0x6840 = "";
				}
			}

			if( __0x6838.Label2 != null )
				__0x6838.Label2.Text = __0x6840;

			if( Property != null )
			{
				if( __0x6838.Label2.Enabled != !Property.ReadOnly )
					__0x6838.Label2.Enabled = !Property.ReadOnly;
			}

			
			

			

			
			
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a type member for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public abstract class HCItemMember : HierarchicalContainer.Item
	{
		object[] __0x6845;

		public HCItemMember( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects )
			: base( owner, parent )
		{
			this.__0x6845 = controlledObjects;
		}

		public object[] ControlledObjects
		{
			get { return __0x6845; }
			set { __0x6845 = value; }
		}

		public abstract Metadata.Member Member
		{
			get;
		}

		public T GetOneControlledObject<T>() where T : class
		{
			if( ControlledObjects.Length == 1 )
			{
				var __0x6846 = ControlledObjects[ 0 ] as T;
				if( __0x6846 != null )
					return __0x6846;
			}
			return null;
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCProperty
	{
		Label LabelName { get; }

		void ButtonExpandInit();
		KryptonButton ButtonExpand { get; }

		void ButtonDefaultValueInit();
		KryptonButton ButtonDefaultValue { get; }

		void ButtonReferenceInit();
		KryptonButton ButtonReference { get; }

		void ButtonReferenceSetToolTip( string value );
		void LabelNameSetToolTip( string value );
		void SetToolTip( Control control, string caption );

		void ButtonTypeInit();
		KryptonButton ButtonType { get; }
		

		bool ShowOnlyEditorControl { get; set; }

		
		Control EditorControl { get; set; }
	}

	/// <summary>
	/// Represents a property item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public abstract class HCItemProperty : HCItemMember
	{
		Metadata.Property __0x6847;
		object[] __0x6848;
		Metadata.Property __0x6849;

		EUserControl __0x6850;
		

		bool __0x6851;
		bool? __0x6852;

		bool __0x6853;
		bool? __0x6854;

		object[] __0x6855;
		object[] __0x6856;

		bool __0x6857;
		bool __0x6858;

		string __0x6859;
		string __0x6860;

		bool __0x6861;
		bool? __0x6862;

		bool __0x6863;

		

		public HCItemProperty( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects )
		{
			this.__0x6847 = property;
			this.__0x6848 = indexers;

			try
			{
				var __0x6864 = property.GetCustomAttribute<UndoDependentPropertyAttribute>();
				if( __0x6864 != null )
				{
					var __0x6865 = MetadataManager.MetadataGetType( controlledObjects[ 0 ] );
					__0x6849 = __0x6865.MetadataGetMemberBySignature( "property:" + __0x6864.PropertyName ) as Metadata.Property;
				}
			}
			catch { }
		}

		public Metadata.Property Property
		{
			get { return __0x6847; }
		}

		public object[] Indexers
		{
			get { return __0x6848; }
		}

		public override Metadata.Member Member
		{
			get { return __0x6847; }
		}

		private bool __0x7061()
		{
			return __0x6848.Length != 0;
		}

		public string DisplayName
		{
			get
			{
				if( __0x6860 == null )
				{
					var __0x6866 = Property.GetCustomAttribute<DisplayNameAttribute>( true );
					if( __0x6866 != null )
					{
						__0x6860 = __0x6866.DisplayName ?? string.Empty;
					}
					else
					{
						if( __0x7061() )
							__0x6860 = __0x7062();
						else
							__0x6860 = TypeUtility.DisplayNameAddSpaces( Property.Name );
					}

					Owner.PerformOverridePropertyDisplayName( this, ref __0x6860 );
				}
				return __0x6860;
			}
		}

		private string __0x7062()
		{
			var __0x6867 = new StringBuilder();
			
			for( int __0x6868 = 0; __0x6868 < __0x6848.Length; __0x6868++ )
			{
				var __0x6869 = __0x6848[ __0x6868 ];
				if( __0x6868 != 0 )
					__0x6867.Append( ", " );
				__0x6867.Append( __0x6848[ __0x6868 ].ToString() );
			}
			
			return __0x6867.ToString();
		}

		public string Description
		{
			get
			{
				if( __0x6859 == null )
				{
					var __0x6870 = Property.GetCustomAttribute<DescriptionAttribute>( true );
					if( __0x6870 != null )
						__0x6859 = __0x6870.Description;

					if( __0x6859 == null )
					{
						var __0x6871 = XmlDocumentationFiles.GetMemberId( __0x6847 );
						if( !string.IsNullOrEmpty( __0x6871 ) )
							__0x6859 = XmlDocumentationFiles.GetMemberSummary( __0x6871 );
					}

					if( __0x6859 == null )
						__0x6859 = "";

					Owner.PerformOverrideMemberDescription( this, ref __0x6859 );
				}
				return __0x6859;
			}
		}

		public override EUserControl CreateControlImpl()
		{
			
			var __0x6872 = new HCGridProperty();
			
			

			var __0x6873 = (IHCProperty)__0x6872;

			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			

			var __0x6874 = CreateControlInsidePropertyItemControl();

			
			__0x6872.Height = Math.Max( __0x6872.Height, __0x6874.Height );

			__0x6850 = __0x6874;
			ControlInsidePropertyItemControlWasCreated();
			__0x6873.EditorControl = __0x6874;

			
			
			__0x6872.MouseUp += Control_MouseUp_ResetDefaultValue;
			if( __0x6873.LabelName != null )
				__0x6873.LabelName.MouseUp += Control_MouseUp_ResetDefaultValue;

			__0x6874.MouseUp += Control_MouseUp_ResetDefaultValue;

			
			__0x6872.AllowDrop = true;
			__0x6872.DragEnter += __0x7080;
			__0x6872.DragOver += __0x7083;
			__0x6872.DragLeave += __0x7084;
			__0x6872.DragDrop += __0x7085;

			return __0x6872;
		}

		public abstract EUserControl CreateControlInsidePropertyItemControl();

		public EUserControl CreatedControlInsidePropertyItemControl
		{
			get { return __0x6850; }
		}

		public virtual void ControlInsidePropertyItemControlWasCreated() { }

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x6875 = (IHCProperty)CreatedControl;
			var __0x6876 = GetValues();
			if( __0x6876 == null )
				return;

			if( __0x6875.LabelName != null )
			{
				if( __0x6875.LabelName.Text != DisplayName )
					__0x6875.LabelName.Text = DisplayName;
				__0x6875.LabelNameSetToolTip( !string.IsNullOrEmpty( Description ) ? Description : DisplayName );
			}

			var __0x6877 = Property.Type.GetNetType();
			bool __0x6878 = ReferenceUtility.IsReferenceType( __0x6877 );

			bool __0x6879 = false;
			string __0x6880 = "";
			for( int __0x6881 = 0; __0x6881 < __0x6876.Length; __0x6881++ )
			{
				var __0x6882 = __0x6876[ __0x6881 ];

				if( __0x6878 && __0x6882 != null )
				{
					var __0x6883 = (IReference)__0x6882;
					if( __0x6883.ReferenceSpecified )
					{
						__0x6879 = true;

						if( __0x6881 == 0 )
							__0x6880 = __0x6883.GetByReference;
						else
						{
							if( __0x6880 != __0x6883.GetByReference )
								__0x6880 = "";
						}
					}
				}
			}
			if( __0x6880 == "" )
				__0x6880 = "Different references are specified (multiselection).";

			__0x6853 = __0x6879;

			__0x7063();
			__0x7064( __0x6878, __0x6879, __0x6880 );




			
			
			
			
			

			__0x7065();
			
			

			__0x7066();

			
			
			if( __0x6875 is HCGridProperty gridProp )
			{
				
				
				gridProp.SplitterPosition = Owner.SplitterPosition;
				gridProp.UpdateLayout();
				
				
				

				
			}
		}

		void __0x7063()
		{
			var __0x6884 = (IHCProperty)CreatedControl;

			bool __0x6885 = __0x7076() && !__0x6884.ShowOnlyEditorControl;

			if( __0x6885 && !__0x6851 )
			{
				__0x6851 = true;
				__0x6884.ButtonDefaultValueInit();
				__0x6884.ButtonDefaultValue.Click += __0x7079;
				__0x6884.ButtonDefaultValue.MouseUp += Control_MouseUp_ResetDefaultValue;
			}

			if( __0x6884.ButtonDefaultValue != null )
			{
				if( __0x6884.ButtonDefaultValue.Enabled != __0x6885 )
					__0x6884.ButtonDefaultValue.Enabled = __0x6885;
				if( __0x6884.ButtonDefaultValue.Visible != __0x6885 )
					__0x6884.ButtonDefaultValue.Visible = __0x6885;

				if( __0x6852 != __0x6885 && __0x6884.ButtonDefaultValue.Visible )
				{
					__0x6852 = __0x6885;

					if( EditorAPI.DarkTheme )
						__0x6884.ButtonDefaultValue.Values.Image = __0x6885 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big_Dark" : "DefaultValueCircle3_Dark" ) : null;
					else
						__0x6884.ButtonDefaultValue.Values.Image = __0x6885 ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "DefaultValueCircle_Big" : "DefaultValueCircle3" ) : null;
				}
			}
		}

		void __0x7064( bool __0x7087, bool __0x7088, string __0x7089 )
		{
			var __0x6886 = (IHCProperty)CreatedControl;

			if( __0x7087 && !__0x6857 )
			{
				__0x6857 = true;
				__0x6886.ButtonReferenceInit();
				__0x6886.ButtonReference.Click += __0x7069;
				__0x6886.ButtonReference.MouseDown += __0x7070;
				__0x6886.ButtonReference.MouseMove += __0x7071;
				__0x6886.ButtonReference.MouseUp += __0x7073;
			}

			if( __0x6886.ButtonReference != null )
			{
				var __0x6887 = __0x7087 && !__0x6886.ShowOnlyEditorControl;

				if( __0x6886.ButtonReference.Visible != __0x6887 )
					__0x6886.ButtonReference.Visible = __0x6887;
				if( __0x6886.ButtonReference.Enabled != __0x7087 )
					__0x6886.ButtonReference.Enabled = __0x7087;

				if( __0x7087 )
				{
					if( __0x6854 != __0x7088 && __0x6886.ButtonReference.Visible )
					{
						__0x6854 = __0x7088;

						if( EditorAPI.DarkTheme )
							__0x6886.ButtonReference.Values.Image = __0x6854.Value ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "ReferenceEnabled2_Dark" : "ReferenceEnabled2_10_Dark" ) : null;
						else
							__0x6886.ButtonReference.Values.Image = __0x6854.Value ? EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 2.0 ? "ReferenceEnabled2" : "ReferenceEnabled2_10" ) : null;

						
						

						
						
					}
				}

				__0x6886.ButtonReferenceSetToolTip( __0x7088 ? __0x7089 : __0x7072( "The reference is not specified." ) );
				
			}
		}

		void __0x7065()
		{
			var __0x6888 = (IHCProperty)CreatedControl;

			bool __0x6889 = ( CanExpand || Children.Count != 0 ) && !__0x6888.ShowOnlyEditorControl;

			if( __0x6889 && !__0x6861 )
			{
				__0x6861 = true;
				__0x6888.ButtonExpandInit();
				__0x6888.ButtonExpand.Click += __0x7067;
			}

			if( __0x6888.ButtonExpand != null )
			{
				if( __0x6888.ButtonExpand.Visible != __0x6889 )
					__0x6888.ButtonExpand.Visible = __0x6889;
				if( __0x6888.ButtonExpand.Enabled != __0x6889 )
					__0x6888.ButtonExpand.Enabled = __0x6889;

				if( __0x6862 != Expanded && __0x6888.ButtonExpand.Visible )
				{
					__0x6862 = Expanded;

					if( EditorAPI.DarkTheme )
					{
						if( Expanded )
							__0x6888.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Minus_Big_Dark" : "Minus_small_Dark" );
						else
							__0x6888.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big_Dark" : "Plus_small3_Dark" );
					}
					else
					{
						if( Expanded )
							__0x6888.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Minus_Big" : "Minus_small" );
						else
							__0x6888.ButtonExpand.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big" : "Plus_small3" );
					}
				}
			}
		}

		void __0x7066()
		{
			var __0x6890 = (IHCProperty)CreatedControl;

			var __0x6891 = __0x6847.TypeUnreferenced.GetNetType();
			var __0x6892 = !ReferenceSpecifiedCached;
			
			
			var __0x6893 = !__0x6847.ReadOnly && __0x6891.IsClass && !__0x6891.IsArray && !typeof( Component ).IsAssignableFrom( __0x6891 ) &&
				!__0x6891.IsSealed && !typeof( Metadata.TypeInfo ).IsAssignableFrom( __0x6891 ) && !typeof( ReferenceValueType_Resource ).IsAssignableFrom( __0x6891 ) && !typeof( ReferenceValueType_Member ).IsAssignableFrom( __0x6891 ) && __0x6891 != typeof( object );

			
			if( __0x6893 && __0x6891.IsGenericType && __0x6891.GetGenericTypeDefinition() == typeof( List<> ) )
				__0x6893 = false;

			if( __0x6893 && !__0x6863 )
			{
				__0x6863 = true;
				__0x6890.ButtonTypeInit();
				__0x6890.ButtonType.Click += __0x7086;
			}

			if( __0x6890.ButtonType != null )
			{
				if( __0x6890.ButtonType.Enabled != __0x6892 )
					__0x6890.ButtonType.Enabled = __0x6892;
				if( __0x6890.ButtonType.Visible != __0x6893 )
					__0x6890.ButtonType.Visible = __0x6893;
			}
		}

		private void __0x7067( object __0x7090, EventArgs __0x7091 )
		{
			Expanded = !Expanded;
		}

		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		

		public object[] GetValues()
		{
			
			try
			{
				object[] __0x6894 = new object[ ControlledObjects.Length ];
				for( int __0x6895 = 0; __0x6895 < __0x6894.Length; __0x6895++ )
					__0x6894[ __0x6895 ] = __0x6847.GetValue( ControlledObjects[ __0x6895 ], __0x6848 );
				return __0x6894;
			}
			catch
			{
				return null;
			}
		}

		public object[] GetValues_Dependent()
		{
			if( __0x6849 != null )
			{
				try
				{
					object[] __0x6896 = new object[ ControlledObjects.Length ];
					for( int __0x6897 = 0; __0x6897 < __0x6896.Length; __0x6897++ )
						__0x6896[ __0x6897 ] = __0x6849.GetValue( ControlledObjects[ __0x6897 ], new object[ 0 ] );
					return __0x6896;
				}
				catch
				{
					return null;
				}
			}
			return null;
		}

		public object[] SavedOldValuesToRestore
		{
			get { return __0x6855; }
		}

		public object[] SavedOldValuesToRestore_Dependent
		{
			get { return __0x6856; }
		}

		public void SaveValuesToRestore()
		{
			__0x6855 = GetValues();
			__0x6856 = GetValues_Dependent();
		}

		
		public void RestoreSavedOldValues()
		{
			for( int __0x6898 = 0; __0x6898 < ControlledObjects.Length; __0x6898++ )
			{
				if( __0x6849 != null )
					__0x6849.SetValue( ControlledObjects[ __0x6898 ], __0x6856[ __0x6898 ], new object[ 0 ] );

				__0x6847.SetValue( ControlledObjects[ __0x6898 ], __0x6855[ __0x6898 ], __0x6848 );
			}
		}

		public HCItemProperty GetItemInHierarchyToRestoreValues()
		{
			
			bool __0x6899 = false;
			HCItemProperty __0x6900 = null;
			if( Parent != null )
			{
				__0x6900 = Parent as HCItemProperty;
				if( __0x6900 != null )
				{
					var __0x6901 = __0x6900.Property.Type.GetNetType();
					var __0x6902 = ReferenceUtility.GetUnreferencedType( __0x6901 );

					if( __0x6902.IsValueType )
						__0x6899 = true;
					if( Property.ReadOnly )
						__0x6899 = true;
				}
			}

			
			if( __0x6899 )
				return __0x6900.GetItemInHierarchyToRestoreValues();

			return this;
		}

		public void AddUndoActionWithSavedValuesToRestore()
		{
			if( SavedOldValuesToRestore == null )
				return;

			if( Owner.DocumentWindow != null )
			{
				DocumentInstance __0x6903 = Owner.DocumentWindow.Document;
				if( __0x6903 != null )
				{
					var __0x6904 = new List<UndoActionPropertiesChange.Item>();
					for( int __0x6905 = 0; __0x6905 < ControlledObjects.Length; __0x6905++ )
					{
						if( __0x6849 != null )
						{
							var __0x6906 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x6905 ], __0x6849, SavedOldValuesToRestore_Dependent[ __0x6905 ], new object[ 0 ] );
							__0x6904.Add( __0x6906 );
						}

						var __0x6907 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x6905 ], __0x6847, SavedOldValuesToRestore[ __0x6905 ], __0x6848 );
						__0x6904.Add( __0x6907 );
					}
					if( __0x6904.Count != 0 )
					{
						var __0x6908 = new UndoActionPropertiesChange( __0x6904.ToArray() );
						__0x6903.UndoSystem.CommitAction( __0x6908 );
						__0x6903.Modified = true;
					}
				}
			}
		}

		public class PropertySetValueData
		{
			public HCItemProperty itemProperty;
			public object unrefValue;
			public bool addUndo;
			public object value;
			public HCItemProperty parentItemProperty;
			public bool updateParentProperty;

			public bool setValueHandled;
			public bool addUndoHandled;
			public bool updateParentPropertyHandled;
		}

		public void SetValue( object value, bool addUndo )
		
		{
			var __0x6909 = new PropertySetValueData();
			__0x6909.itemProperty = this;
			__0x6909.unrefValue = ReferenceUtility.GetUnreferencedValue( value );
			
			__0x6909.addUndo = addUndo;

			

			var __0x6910 = Property.Type.GetNetType();
			var __0x6911 = ReferenceUtility.GetUnreferencedType( __0x6910 );

			
			

			if( ReferenceUtility.IsReferenceType( __0x6910 ) )
			{
				if( value != null && value.GetType() == __0x6910 )
					__0x6909.value = value;
				else
					__0x6909.value = ReferenceUtility.MakeReference( ReferenceUtility.GetUnreferencedType( __0x6910 ), value, "" );
			}
			else
				__0x6909.value = value;

			
			if( Parent != null )
			{
				__0x6909.parentItemProperty = Parent as HCItemProperty;
				if( __0x6909.parentItemProperty != null )
				{
					var __0x6912 = __0x6909.parentItemProperty.Property.Type.GetNetType();
					var __0x6913 = ReferenceUtility.GetUnreferencedType( __0x6912 );

					if( __0x6913.IsValueType )
						__0x6909.updateParentProperty = true;
					if( Property.ReadOnly )
						__0x6909.updateParentProperty = true;
				}
			}

			

			object[] __0x6914 = null;
			object[] __0x6915 = null;
			
			
			
			
			
			
			if( addUndo && Owner.DocumentWindow != null && !__0x6909.updateParentProperty )
			{
				if( __0x6849 != null )
				{
					__0x6915 = new object[ ControlledObjects.Length ];
					for( int __0x6916 = 0; __0x6916 < ControlledObjects.Length; __0x6916++ )
						__0x6915[ __0x6916 ] = __0x6849.GetValue( ControlledObjects[ __0x6916 ], new object[ 0 ] );
				}

				__0x6914 = new object[ ControlledObjects.Length ];
				for( int __0x6917 = 0; __0x6917 < ControlledObjects.Length; __0x6917++ )
					__0x6914[ __0x6917 ] = __0x6847.GetValue( ControlledObjects[ __0x6917 ], __0x6848 );
			}
			
			

			HCExtensions.PerformOverridePropertySetValue( __0x6909 );

			
			if( !__0x6909.setValueHandled && !Property.ReadOnly )
			{
				for( int __0x6918 = 0; __0x6918 < ControlledObjects.Length; __0x6918++ )
					__0x6847.SetValue( ControlledObjects[ __0x6918 ], __0x6909.value, __0x6848 );
			}

			
			if( !__0x6909.addUndoHandled && addUndo && Owner.DocumentWindow != null && !__0x6909.updateParentProperty )
			{
				DocumentInstance __0x6919 = Owner.DocumentWindow.Document;
				if( __0x6919 != null )
				{
					var __0x6920 = new List<UndoActionPropertiesChange.Item>();
					for( int __0x6921 = 0; __0x6921 < ControlledObjects.Length; __0x6921++ )
					{
						
						if( __0x6849 != null )
						{
							var __0x6922 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x6921 ], __0x6849, __0x6915[ __0x6921 ], new object[ 0 ] );
							__0x6920.Add( __0x6922 );
						}

						var __0x6923 = new UndoActionPropertiesChange.Item( ControlledObjects[ __0x6921 ], __0x6847, __0x6914[ __0x6921 ], __0x6848 );
						__0x6920.Add( __0x6923 );
					}
					if( __0x6920.Count != 0 )
					{
						var __0x6924 = new UndoActionPropertiesChange( __0x6920.ToArray() );
						__0x6919.UndoSystem.CommitAction( __0x6924 );
						__0x6919.Modified = true;
					}
				}
			}

			
			if( !__0x6909.updateParentPropertyHandled && __0x6909.updateParentProperty )
			{
				

				__0x6909.parentItemProperty.SetValue( ControlledObjects[ 0 ], addUndo );
			}
		}

		
		
		
		

		
		
		
		
		

		
		
		
		

		Component[] __0x7068()
		{
			Component[] __0x6925 = new Component[ ControlledObjects.Length ];
			for( int __0x6926 = 0; __0x6926 < __0x6925.Length; __0x6926++ )
			{
				var __0x6927 = ControlledObjects[ __0x6926 ] as IReferenceList;
				if( __0x6927 != null )
					__0x6925[ __0x6926 ] = __0x6927.Owner;
				else
					__0x6925[ __0x6926 ] = (Component)ControlledObjects[ __0x6926 ];
			}
			return __0x6925;
		}

		private void __0x7069( object __0x7092, EventArgs __0x7093 )
		{
			EditorAPI.OpenSetReferenceWindow( Owner.DocumentWindow, __0x7068(), ControlledObjects, __0x6847, __0x6848 );
			
		}

		private void __0x7070( object __0x7094, MouseEventArgs __0x7095 )
		{
			if( __0x7095.Button == MouseButtons.Left )
				__0x6858 = true;
		}

		private void __0x7071( object __0x7096, MouseEventArgs __0x7097 )
		{
			var __0x6928 = (IHCProperty)CreatedControl;

			if( __0x6858 )
			{
				var __0x6929 = __0x6928.ButtonReference;
				if( !__0x6929.ClientRectangle.Contains( __0x6929.PointToClient( Control.MousePosition ) ) )
				{
					__0x6858 = false;

					var __0x6930 = new DragDropSetReferenceData();
					__0x6930.document = Owner.DocumentWindow.Document;
					__0x6930.controlledComponents = __0x7068();
					__0x6930.propertyOwners = ControlledObjects;
					
					__0x6930.property = __0x6847;
					__0x6930.indexers = __0x6848;
					__0x6929.DoDragDrop( __0x6930, DragDropEffects.Link );
				}
			}
		}

		string __0x7072( string __0x7098 )
		{
			return EditorLocalization.Translate( "SettingsWindow", __0x7098 );
		}

		private void __0x7073( object __0x7099, MouseEventArgs __0x7100 )
		{
			if( __0x7100.Button == MouseButtons.Left )
				__0x6858 = false;

			if( __0x7100.Button == MouseButtons.Right )
			{
				var __0x6931 = (IHCProperty)CreatedControl;

				var __0x6932 = new List<KryptonContextMenuItemBase>();

				
				{
					var __0x6933 = new KryptonContextMenuItem( __0x7072( "Reset Reference" ), null, delegate ( object __0x7101, EventArgs __0x7102 )
					{
						if( __0x6853 )
						{
							var __0x6934 = GetValues();
							if( __0x6934 != null )
							{
								var __0x6935 = __0x6934[ 0 ];
								var __0x6936 = ReferenceUtility.GetUnreferencedValue( __0x6935 );
								
								if( __0x6936 as Component != null )
									__0x6936 = null;

								SetValue( __0x6936, true );
							}
						}
					} );
					__0x6933.Enabled = __0x6853;
					__0x6932.Add( __0x6933 );
				}

				__0x6932.Add( new KryptonContextMenuSeparator() );

				
				{
					var __0x6937 = new KryptonContextMenuItem( __0x7072( "Find Resource" ), null, delegate ( object __0x7103, EventArgs __0x7104 )
					{
						if( __0x6853 )
						{
							var __0x6938 = GetValues();
							if( __0x6938 != null )
							{
								var __0x6939 = __0x6938[ 0 ];

								

								var __0x6940 = ReferenceUtility.GetUnreferencedValue( __0x6939 );
								if( __0x6940 != null )
								{
									
									var __0x6941 = __0x6940 as Component;
									if( __0x6941 != null )
									{
										var __0x6942 = ComponentUtility.GetOwnedFileNameOfComponent( __0x6941 );
										if( !string.IsNullOrEmpty( __0x6942 ) )
										{
											var __0x6943 = VirtualPathUtility.GetRealPathByVirtual( __0x6942 );
											EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x6943 } );
											EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
										}
									}
								}
							}
						}
					} );

					__0x6937.Enabled = false;
					if( __0x6853 )
					{
						var __0x6944 = GetValues();
						if( __0x6944 != null )
						{
							var __0x6945 = __0x6944[ 0 ];

							var __0x6946 = ReferenceUtility.GetUnreferencedValue( __0x6945 );
							if( __0x6946 != null )
							{
								
								var __0x6947 = __0x6946 as Component;
								if( __0x6947 != null )
								{
									var __0x6948 = ComponentUtility.GetOwnedFileNameOfComponent( __0x6947 );
									if( !string.IsNullOrEmpty( __0x6948 ) )
										__0x6937.Enabled = true;
								}

								
								
							}
						}
					}
					
					__0x6932.Add( __0x6937 );
				}

				
				{
					var __0x6949 = new KryptonContextMenuItem( __0x7072( "Open By Reference" ), null, delegate ( object __0x7105, EventArgs __0x7106 )
					{
						if( __0x6853 )
						{
							var __0x6950 = GetValues();
							if( __0x6950 != null )
							{
								var __0x6951 = __0x6950[ 0 ];

								

								var __0x6952 = ReferenceUtility.GetUnreferencedValue( __0x6951 );
								if( __0x6952 != null )
								{
									var __0x6953 = EditorAPI.GetDocumentByObject( __0x6952 );
									if( EditorAPI.IsDocumentObjectSupport( __0x6952 ) )
										EditorAPI.OpenDocumentWindowForObject( __0x6953, __0x6952 );
									else
									{
										
									}

									
									{
										var __0x6954 = __0x6952 as Component;
										if( __0x6954 != null )
										{
											var __0x6955 = ComponentUtility.GetOwnedFileNameOfComponent( __0x6954 );
											if( !string.IsNullOrEmpty( __0x6955 ) )
											{
												var __0x6956 = VirtualPathUtility.GetRealPathByVirtual( __0x6955 );
												EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x6956 } );
												EditorAPI.SelectDockWindow( EditorAPI.FindWindow<ResourcesWindow>() );
											}
										}
									}
								}
							}
						}
					} );

					__0x6949.Enabled = false;
					if( __0x6853 )
					{
						var __0x6957 = GetValues();
						if( __0x6957 != null )
						{
							var __0x6958 = __0x6957[ 0 ];

							var __0x6959 = ReferenceUtility.GetUnreferencedValue( __0x6958 );
							if( __0x6959 != null )
							{
								
								__0x6949.Enabled = true;
							}
						}
					}
					
					__0x6932.Add( __0x6949 );
				}

				EditorContextMenuWinForms.Show( __0x6932, CreatedControl );
			}
		}

		protected virtual void GetExpandablePropertiesFilter( Metadata.Property property, ref bool skip )
		{
		}

		public static bool IsOneDimensionArray( Type type )
		{
			return type.IsArray && type.GetArrayRank() == 1;
		}

		public static bool IsListType( Type type )
		{
			return type.IsGenericType &&
				( typeof( List<> ).IsAssignableFrom( type.GetGenericTypeDefinition() ) || typeof( ReferenceList<> ).IsAssignableFrom( type.GetGenericTypeDefinition() ) );
			
			
			
			
		}

		public override void Update()
		{
			

			ESet<HierarchicalContainer.Item> __0x6960 = new ESet<HierarchicalContainer.Item>();

			var __0x6961 = GetValues();
			if( __0x6961 == null )
				return;
			object[] __0x6962 = new object[ __0x6961.Length ];
			for( int __0x6963 = 0; __0x6963 < __0x6961.Length; __0x6963++ )
			{
				if( __0x6961[ __0x6963 ] != null )
					__0x6962[ __0x6963 ] = ReferenceUtility.GetUnreferencedValue( __0x6961[ __0x6963 ] );
			}

			
			var __0x6964 = __0x6962[ 0 ];

			if( __0x6964 != null )
			{
				var __0x6965 = MetadataManager.MetadataGetType( __0x6964 );

				
				var __0x6966 = __0x6965.GetCustomAttributes( typeof( HCExpandableAttribute ) );
				if( __0x6966.Length != 0 )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						Dictionary<Metadata.Property, HCItemProperty> __0x6967 = new Dictionary<Metadata.Property, HCItemProperty>();
						foreach( var __0x7050 in Children )
						{
							HCItemProperty __0x6968 = __0x7050 as HCItemProperty;
							if( __0x6968 != null )
								__0x6967.Add( __0x6968.Property, __0x6968 );
						}

						List<Metadata.Property> __0x6969 = new List<Metadata.Property>();
						foreach( var __0x7051 in MetadataManager.MetadataGetMembers( __0x6964 ) )
						{
							var __0x6970 = __0x7051 as Metadata.Property;

							
							if( __0x6970 != null && __0x6970.Browsable && !__0x6970.HasIndexers && !__0x6970.Static )
							{
								bool __0x6971 = false;
								GetExpandablePropertiesFilter( __0x6970, ref __0x6971 );
								if( !__0x6971 )
									__0x6969.Add( __0x6970 );
							}
						}

						foreach( var __0x7052 in __0x6969 )
						{
							if( !__0x6967.TryGetValue( __0x7052, out HCItemProperty item ) )
							{
								Type __0x6972 = Owner.GetSuitableItemType( __0x7052 );
								
								
								

								var __0x6973 = __0x6972.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								

								item = (HCItemProperty)__0x6973.Invoke( new object[] { Owner, this, __0x6962, __0x7052, __0x7052.Indexers } );
							}
							else
							{
								

								item.ControlledObjects = __0x6962;
							}

							__0x6960.Add( item );
						}
					}
				}

				
				if( IsOneDimensionArray( __0x6965.GetNetType() ) )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						var __0x6974 = __0x6965.GetNetType().GetElementType();
						int __0x6975 = (int)__0x6964.GetType().GetProperty( "Length" ).GetValue( __0x6964, null );

						
						var __0x6976 = __0x6965.GetNetType().GetInterface( "IList`1" );
						var __0x6977 = MetadataManager.GetTypeOfNetType( __0x6976 );
						var __0x6978 = (Metadata.Property)__0x6977.MetadataGetMemberBySignature( "property:Item[System.Int32]" );

						HCItemProperty __0x6979 = null;
						Dictionary<int, HCItemProperty> __0x6980 = new Dictionary<int, HCItemProperty>();
						foreach( var __0x7053 in Children )
						{
							HCItemProperty __0x6981 = __0x7053 as HCItemProperty;
							if( __0x6981 != null )
							{
								if( __0x6981.Property.Name == "Length" )
									__0x6979 = __0x6981;
								else if( __0x6981.Property.Name == "Item" )
								{
									int __0x6982 = (int)__0x6981.__0x6848[ 0 ];
									__0x6980.Add( __0x6982, __0x6981 );
								}
							}
						}

						
						{
							HCItemProperty __0x6983 = __0x6979;

							if( __0x6979 == null )
							{
								var __0x6984 = (Metadata.Property)__0x6965.MetadataGetMemberBySignature( "property:Length" );

								Type __0x6985 = Owner.GetSuitableItemType( __0x6984 );

								var __0x6986 = __0x6985.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								__0x6983 = (HCItemProperty)__0x6986.Invoke( new object[] { Owner, this, __0x6962, __0x6984, __0x6984.Indexers } );
							}
							else
							{
								
								__0x6983.ControlledObjects = __0x6962;
							}

							__0x6960.Add( __0x6983 );
						}

						
						if( __0x6975 <= ProjectSettings.Get.PropertiesMaxCountCollectionItemsToDisplay )
						{
							for( int __0x6987 = 0; __0x6987 < __0x6975; __0x6987++ )
							{
								if( !__0x6980.TryGetValue( __0x6987, out HCItemProperty item ) )
								{
									Type __0x6988 = Owner.GetSuitableItemType( __0x6978 );

									var __0x6989 = __0x6988.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( HierarchicalContainer.Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

									

									item = (HCItemProperty)__0x6989.Invoke( new object[] { Owner, this, __0x6962, __0x6978, new object[] { __0x6987 } } );
								}
								else
								{
									
									item.ControlledObjects = __0x6962;
								}

								__0x6960.Add( item );
							}
						}
					}
				}

				
				if( IsListType( __0x6965.GetNetType() ) )
				{
					CanExpand = true;

					if( WasExpanded )
					{
						
						int __0x6990 = (int)__0x6964.GetType().GetProperty( "Count" ).GetValue( __0x6964, null );

						
						var __0x6991 = (Metadata.Property)__0x6965.MetadataGetMemberBySignature( "property:Item[System.Int32]" );

						HCItemProperty __0x6992 = null;
						Dictionary<int, HCItemProperty> __0x6993 = new Dictionary<int, HCItemProperty>();
						foreach( var __0x7054 in Children )
						{
							HCItemProperty __0x6994 = __0x7054 as HCItemProperty;
							if( __0x6994 != null )
							{
								if( __0x6994.Property.Name == "Count" )
									__0x6992 = __0x6994;
								else if( __0x6994.Property.Name == "Item" )
								{
									int __0x6995 = (int)__0x6994.__0x6848[ 0 ];
									__0x6993.Add( __0x6995, __0x6994 );
								}
							}
						}

						
						{
							HCItemProperty __0x6996 = __0x6992;

							if( __0x6992 == null )
							{
								var __0x6997 = (Metadata.Property)__0x6965.MetadataGetMemberBySignature( "property:Count" );

								Type __0x6998 = Owner.GetSuitableItemType( __0x6997 );

								var __0x6999 = __0x6998.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( HierarchicalContainer.Item ),
									typeof( object[] ),
									typeof( Metadata.Property ),
									typeof( object[] )
								} );

								

								__0x6996 = (HCItemProperty)__0x6999.Invoke( new object[] { Owner, this, __0x6962, __0x6997, __0x6997.Indexers } );
							}
							else
							{
								
								__0x6996.ControlledObjects = __0x6962;
							}

							__0x6960.Add( __0x6996 );
						}

						
						if( __0x6990 <= ProjectSettings.Get.PropertiesMaxCountCollectionItemsToDisplay )
						{
							for( int __0x7000 = 0; __0x7000 < __0x6990; __0x7000++ )
							{
								if( !__0x6993.TryGetValue( __0x7000, out HCItemProperty item ) )
								{
									Type __0x7001 = Owner.GetSuitableItemType( __0x6991 );

									var __0x7002 = __0x7001.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( HierarchicalContainer.Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

									

									item = (HCItemProperty)__0x7002.Invoke( new object[] { Owner, this, __0x6962, __0x6991, new object[] { __0x7000 } } );
								}
								else
								{
									
									item.ControlledObjects = __0x6962;
								}

								__0x6960.Add( item );
							}
						}
					}
				}
			}

			
			List<HierarchicalContainer.Item> __0x7003 = new List<HierarchicalContainer.Item>();
			foreach( var __0x7055 in Children )
			{
				if( !__0x6960.Contains( __0x7055 ) )
					__0x7003.Add( __0x7055 );
			}

			
			Children.Clear();
			Children.AddRange( __0x6960 );

			
			foreach( var __0x7056 in __0x7003 )
				__0x7056.Dispose();

			
			base.Update();
		}

		bool __0x7074()
		{
			bool? __0x7004 = null;
			HCExtensions.PerformOverridePropertyReadOnly( this, ref __0x7004 );
			if( __0x7004.HasValue )
				return __0x7004.Value;

			return Property.ReadOnly;
		}

		public bool IsReferenceSpecifiedInHierarchy()
		{
			if( __0x6853 )
				return true;

			var __0x7005 = Parent as HCItemProperty;
			if( __0x7005 != null && __0x7005.IsReferenceSpecifiedInHierarchy() )
				return true;

			return false;
		}

		public bool CanEditValue()
		{
			if( __0x7074() )
				return false;
			if( IsReferenceSpecifiedInHierarchy() )
				return false;

			return true;
		}

		void __0x7075( out bool __0x7107, out object __0x7108 )
		{
			var __0x7006 = GetOneControlledObject<Component>();
			if( __0x7006 != null )
			{
				__0x7006.BaseType.GetPropertyDefaultValue( __0x6847, out __0x7107, out __0x7108 );
				return;
			}

			__0x7107 = __0x6847.DefaultValueSpecified;
			__0x7108 = __0x6847.DefaultValue;
		}

		bool __0x7076()
		{
			var __0x7007 = Parent as HCItemProperty;
			if( __0x7007 != null && __0x7007.IsReferenceSpecifiedInHierarchy() )
				return false;

			__0x7075( out var defaultValueSpecified, out var defaultValue );

			if( __0x6853 )
			{
				
				
				if( defaultValueSpecified )
				{
					
					if( defaultValue != null && ReferenceUtility.IsReferenceType( defaultValue.GetType() ) )
					{
						var __0x7008 = GetValues();
						if( __0x7008 != null )
						{
							foreach( var __0x7057 in __0x7008 )
							{
								var __0x7009 = __0x7057 as IReference;
								if( __0x7009 != null && ( (IReference)defaultValue ).GetByReference != __0x7009.GetByReference )
									return true;
							}
							return false;

							

							
							
							
						}
					}
				}

				return true;
			}

			var __0x7010 = ReferenceUtility.GetUnreferencedType( __0x6847.Type.GetNetType() );

			
			
			if( ( IsOneDimensionArray( __0x7010 ) && !__0x6847.ReadOnly ) || IsListType( __0x7010 ) )
			{
				var __0x7011 = GetValues();
				if( __0x7011 != null )
				{
					foreach( var __0x7058 in __0x7011 )
					{
						object __0x7012 = ReferenceUtility.GetUnreferencedValue( __0x7058 );
						if( __0x7012 != null )
						{
							var __0x7013 = __0x7012 as IList;
							if( __0x7013 != null && __0x7013.Count != 0 )
								return true;
						}
					}
				}
				return false;
			}

			if( __0x7074() )
				return false;

			
			if( defaultValueSpecified )
			{
				

				var __0x7014 = GetValues();
				if( __0x7014 != null )
				{
					foreach( var __0x7059 in __0x7014 )
					{
						object __0x7015 = ReferenceUtility.GetUnreferencedValue( __0x7059 );

						bool __0x7016;
						if( defaultValue != null )
						{
							

							if( __0x7015 != null )
							{
								

								if( !( __0x7015 is string ) && defaultValue is string )
								{
									__0x7016 = __0x7015.ToString() == (string)defaultValue;
								}
								else
								{
									if( __0x7015.GetType().IsValueType )
										__0x7016 = __0x7015.Equals( defaultValue );
									else
										__0x7016 = Equals( __0x7015, defaultValue );
								}
							}
							else
								__0x7016 = false;
						}
						else
							__0x7016 = __0x7015 == null;

						if( !__0x7016 )
							return true;
					}
				}
			}

			return false;
		}

		void __0x7077()
		{
			if( !__0x7076() )
				return;

			var __0x7017 = ReferenceUtility.GetUnreferencedType( __0x6847.Type.GetNetType() );

			
			if( IsOneDimensionArray( __0x7017 ) && !Property.ReadOnly )
			{
				var __0x7018 = Array.CreateInstance( __0x7017.GetElementType(), 0 );
				SetValue( __0x7018, true );
				return;
			}

			
			if( IsListType( __0x7017 ) )
			{
				if( !Property.ReadOnly )
				{
					var __0x7019 = __0x7017.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, null );
					SetValue( __0x7019, true );
				}
				else
				{
					var __0x7020 = GetValues();
					if( __0x7020 != null )
					{
						var __0x7021 = new List<UndoSystem.Action>();

						foreach( var __0x7060 in __0x7020 )
						{
							object __0x7022 = ReferenceUtility.GetUnreferencedValue( __0x7060 );

							var __0x7023 = (IList)__0x7022;
							if( __0x7023 != null )
							{
								
								var __0x7024 = new List<int>();
								for( int __0x7025 = 0; __0x7025 < __0x7023.Count; __0x7025++ )
									__0x7024.Add( __0x7025 );
								var __0x7026 = new UndoActionListAddRemove( __0x7023, __0x7024, false );

								__0x7021.Add( __0x7026 );
							}
						}

						if( __0x7021.Count != 0 )
						{
							var __0x7027 = Owner.DocumentWindow.Document;
							__0x7027.UndoSystem.CommitAction( new UndoMultiAction( __0x7021 ) );
							__0x7027.Modified = true;
						}
					}
				}
				return;
			}

			
			__0x7075( out var defaultValueSpecified, out var defaultValue );
			

			try
			{
				object __0x7028 = defaultValue;

				

				

				
				if( defaultValue != null )
				{
					if( __0x7017 != typeof( string ) && defaultValue is string )
					{
						if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x7017 ) )
						{
							var __0x7029 = __0x7017.GetMethod( "Parse", BindingFlags.Public | BindingFlags.Static );
							if( __0x7029 != null )
								__0x7028 = __0x7029.Invoke( null, new object[] { (string)defaultValue } );
						}
						else
							__0x7028 = SimpleTypes.ParseValue( __0x7017, (string)defaultValue );
					}
				}

				if( __0x7028 == null && __0x7017.IsValueType )
					__0x7028 = Activator.CreateInstance( __0x7017 );

				SetValue( __0x7028, true );
			}
			catch
			{
				
			}
		}

		void __0x7078()
		{
			var __0x7030 = new List<KryptonContextMenuItemBase>();

			
			{
				

				

				var __0x7031 = new KryptonContextMenuItem( __0x7072( "Reset To Default" ), null, delegate ( object __0x7109, EventArgs __0x7110 )
				{
					__0x7077();
				} );
				__0x7031.Enabled = __0x7076();
				__0x7030.Add( __0x7031 );
			}

			EditorContextMenuWinForms.Show( __0x7030, CreatedControl );
		}

		private void __0x7079( object __0x7111, EventArgs __0x7112 )
		{
			__0x7078();
		}

		public void Control_MouseUp_ResetDefaultValue( object sender, MouseEventArgs e )
		{
			if( e.Button == MouseButtons.Right )
				__0x7078();
		}

		

		private void __0x7080( object __0x7113, DragEventArgs __0x7114 )
		{
		}

		bool __0x7081( DragEventArgs __0x7115, bool __0x7116 )
		{
			DragDropSetReferenceData __0x7032 = (DragDropSetReferenceData)__0x7115.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x7032 != null )
			{
				var __0x7033 = __0x7068();

				var __0x7034 = __0x7032.controlledComponents;
				var __0x7035 = __0x7034[ 0 ];

				
				var __0x7036 = __0x7033[ 0 ];

				if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x7032.property.TypeUnreferenced, __0x6847.TypeUnreferenced ) &&
					( __0x7035 != __0x7036 || __0x7032.property != __0x6847 ) )
				{
					if( __0x7035.ParentRoot == __0x7036.ParentRoot )
					{
						

						if( !__0x7116 )
						{
							string[] __0x7037 = new string[ __0x7032.controlledComponents.Length ];
							for( int __0x7038 = 0; __0x7038 < __0x7037.Length; __0x7038++ )
								__0x7037[ __0x7038 ] = ReferenceUtility.CalculateThisReference( __0x7034[ __0x7038 ], __0x7036, __0x6847.Name );

							__0x7032.SetProperty( __0x7037 );
						}

						return true;
					}
					else
					{
						

						var __0x7039 = __0x7036.ParentRoot?.HierarchyController.CreatedByResource;
						if( __0x7039 != null )
						{
							if( !__0x7116 )
							{
								var __0x7040 = ReferenceUtility.CalculateResourceReference( __0x7036, __0x6847.Name );

								string[] __0x7041 = new string[ __0x7032.controlledComponents.Length ];
								for( int __0x7042 = 0; __0x7042 < __0x7041.Length; __0x7042++ )
									__0x7041[ __0x7042 ] = __0x7040;

								__0x7032.SetProperty( __0x7041 );
							}

							return true;
						}
					}
				}
			}

			return false;
		}

		bool __0x7082( DragEventArgs __0x7117, bool __0x7118 )
		{
			var __0x7043 = ContentBrowser.GetDroppingItemData( __0x7117.Data );
			if( __0x7043 != null )
			{
				var __0x7044 = __0x7043.Item;

				var __0x7045 = __0x7068();

				string[] __0x7046 = new string[ __0x7045.Length ];
				for( int __0x7047 = 0; __0x7047 < __0x7045.Length; __0x7047++ )
				{
					__0x7044.CalculateReferenceValue( __0x7045[ __0x7047 ], __0x6847.TypeUnreferenced, out string referenceValue, out bool canSet );
					__0x7046[ __0x7047 ] = referenceValue;
					if( !canSet )
					{
						__0x7046 = null;
						break;
					}
				}

				if( __0x7046 != null )
				{
					if( !__0x7118 )
						EditorUtility.SetPropertyReference( Owner.DocumentWindow.Document, ControlledObjects, __0x6847, __0x6848, __0x7046 );
					
					

					return true;
				}
			}

			return false;
		}

		private void __0x7083( object __0x7119, DragEventArgs __0x7120 )
		{
			__0x7120.Effect = DragDropEffects.None;
			if( __0x7081( __0x7120, true ) )
				__0x7120.Effect = DragDropEffects.Link;
			if( __0x7082( __0x7120, true ) )
				__0x7120.Effect = DragDropEffects.Link;
		}

		private void __0x7084( object __0x7121, EventArgs __0x7122 )
		{
		}

		private void __0x7085( object __0x7123, DragEventArgs __0x7124 )
		{
			__0x7081( __0x7124, false );
			__0x7082( __0x7124, false );
		}

		public bool ReferenceSpecifiedCached
		{
			get { return __0x6853; }
		}

		private void __0x7086( object __0x7125, EventArgs __0x7126 )
		{
			var __0x7048 = new SelectTypeWindow.CreationDataClass();
			__0x7048.initDocumentWindow = Owner.DocumentWindow;
			__0x7048.initDemandedType = __0x6847.TypeUnreferenced;
			__0x7048.initCanSelectNull = true;

			__0x7048.WasSelected = delegate ( SelectTypeWindow __0x7127, Metadata.TypeInfo __0x7128, ref bool __0x7129 )
			{
				object __0x7049 = null;
				if( __0x7128 != null )
					__0x7049 = __0x7128.InvokeInstance( null );
				SetValue( __0x7049, true );
			};

			
			

			EditorAPI.OpenSelectTypeWindow( __0x7048 );
		}
	}
}





namespace NeoAxis.Editor
{
	public class HCItemRange : HCItemTextBoxSelect
	{
		public HCItemRange( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		protected override void OnDropDownMouseButtonDown()
		{
			var __0x7130 = (HCGridTextBoxSelect)CreatedControlInsidePropertyItemControl;

			if( !Owner.IsDropDownOpen )
				Owner.ToggleDropDown( new RangeDropDownControl( this ), __0x7130.ButtonSelect );
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}





namespace NeoAxis.Editor
{
	public interface IHCTextBox
	{
		
		EngineTextBox TextBox { get; }
	}

	/// <summary>
	/// Represents a text box item for property for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemTextBox : HCItemProperty
	{
		bool __0x7131;
		bool __0x7132;
		bool __0x7133;

		
		
		bool __0x7134;

		

		public HCItemTextBox( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			return new HCGridTextBox();
			
			
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7135 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			__0x7135.TextBox.GotFocus += __0x7157;
			__0x7135.TextBox.LostFocus += __0x7159;
			__0x7135.TextBox.KeyDown += __0x7160;
			__0x7135.TextBox.TextChanged += __0x7161;
		}

		private void __0x7157( object __0x7163, EventArgs __0x7164 )
		{
			__0x7131 = true;

			if( !__0x7134 )
			{
				var __0x7136 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
				
				
			}
		}

		void __0x7158()
		{
			TextBoxTextChanged();

			
			
			
			
			
			

			__0x7132 = false;
		}

		private void __0x7159( object __0x7165, EventArgs __0x7166 )
		{
			__0x7131 = false;

			if( __0x7132 )
			{
				var __0x7137 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
				if( !__0x7137.TextBox.ReadOnly )
					__0x7158();
			}
		}

		private void __0x7160( object __0x7167, KeyEventArgs __0x7168 )
		{
			var __0x7138 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			if( !__0x7138.TextBox.ReadOnly )
			{
				if( __0x7168.KeyCode == Keys.Return )
					__0x7158();
			}
		}

		private void __0x7161( object __0x7169, EventArgs __0x7170 )
		{
			if( __0x7133 )
				return;

			if( __0x7131 )
				__0x7132 = true;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7139 = (IHCTextBox)CreatedControlInsidePropertyItemControl;

			
			

			bool __0x7140 = !CanEditValue();
			
			if( __0x7140 )
				__0x7134 = false;

			
			if( __0x7139.TextBox.LikeLabel != __0x7140 )
				__0x7139.TextBox.LikeLabel = __0x7140;

			
			if( !__0x7132 && !__0x7134 )
			{
				var __0x7141 = GetValues();
				if( __0x7141 != null )
				{
					var __0x7142 = "";

					for( int __0x7143 = 0; __0x7143 < __0x7141.Length; __0x7143++ )
					{
						var __0x7144 = __0x7141[ __0x7143 ];
						var __0x7145 = Property.Type.GetNetType();
						var __0x7146 = ReferenceUtility.GetUnreferencedValue( __0x7144 );

						string __0x7147;
						if( __0x7146 != null )
						{
							if( __0x7146 is double )
								__0x7147 = ( (double)__0x7146 ).ToString( "0.#################" );
							else if( __0x7146 is float )
								__0x7147 = ( (float)__0x7146 ).ToString( "0.########" );
							else
								__0x7147 = __0x7146.ToString();
						}
						else
							__0x7147 = "";

						if( __0x7143 == 0 )
							__0x7142 = __0x7147;
						else
						{
							if( __0x7142 != __0x7147 )
								__0x7142 = "";
						}
					}

					if( __0x7139.TextBox.Text != __0x7142 )
					{
						__0x7133 = true;
						__0x7139.TextBox.Text = __0x7142;
						__0x7133 = false;
					}
				}
			}

			__0x7139.TextBox.SetError( __0x7134 ? "Invalid value" : "" );
		}

		object __0x7162( out bool __0x7171 )
		{
			var __0x7148 = (IHCTextBox)CreatedControlInsidePropertyItemControl;
			var __0x7149 = Property.Type.GetNetType();
			var __0x7150 = ReferenceUtility.GetUnreferencedType( __0x7149 );

			try
			{
				__0x7171 = false;

				var __0x7151 = __0x7148.TextBox.Text;

				if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x7150 ) )
				{
					var __0x7152 = __0x7150.GetMethod( "Parse", BindingFlags.Public | BindingFlags.Static );
					if( __0x7152 != null )
						return __0x7152.Invoke( null, new object[] { __0x7151 } );
				}

				return SimpleTypes.ParseValue( __0x7150, __0x7151 );
			}
			catch
			{
				__0x7171 = true;
				return null;
			}
		}

		protected virtual void TextBoxTextChanged()
		{
			var __0x7153 = GetValues();
			if( __0x7153 == null )
				return;

			var __0x7154 = __0x7153[ 0 ];
			var __0x7155 = ReferenceUtility.GetUnreferencedValue( __0x7154 );

			var __0x7156 = __0x7162( out __0x7134 );
			if( !__0x7134 )
			{
				try
				{
					if( !Equals( __0x7156, __0x7155 ) || __0x7153.Length > 1 )
						SetValue( __0x7156, true );
				}
				catch { }
			}

			
			
			

			
			
			
			

			
			
			
			
			
			
			
		}
	}
}




namespace NeoAxis.Editor
{
	public class HCItemTextBoxDropMultiline : HCItemTextBoxSelect
	{
		public HCItemTextBoxDropMultiline( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		protected override void OnDropDownMouseButtonDown()
		{
			if( !Owner.IsDropDownOpen )
			{
				var __0x7172 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;
				Owner.ToggleDropDown( new MultilineTextDropDownControl( this ), __0x7172.ButtonSelect );
			}
			else
				Owner.ToggleDropDown( null, null );
		}
	}
}




namespace NeoAxis.Editor
{
	public interface IHCTextBoxNumeric : IHCTextBox
	{
		KryptonTrackBar TrackBar { get; }
	}

	/// <summary>
	/// Represents a numeric text box item for property for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemTextBoxNumeric : HCItemTextBox
	{
		RangeAttribute __0x7173;

		bool __0x7174;
		bool __0x7175;
		HCItemProperty __0x7176;
		bool __0x7177;

		

		public HCItemTextBoxNumeric( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridTextBoxNumeric();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7178 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;

			
			var __0x7179 = Property.GetCustomAttributes( typeof( RangeAttribute ), true );
			if( __0x7179.Length != 0 )
				__0x7173 = (RangeAttribute)__0x7179[ 0 ];

			
			if( __0x7173 != null )
			{
				var __0x7180 = __0x7178.TrackBar;

				__0x7177 = true;
				__0x7173.GetTrackBarMinMax( __0x7211(), out int min, out int max );
				__0x7180.Minimum = min;
				__0x7180.Maximum = max;
				__0x7180.LargeChange = Math.Max( ( __0x7180.Maximum - __0x7180.Minimum ) / 10, 1 );
				__0x7180.SmallChange = Math.Max( ( __0x7180.Maximum - __0x7180.Minimum ) / 100, 1 );
				__0x7177 = false;

				__0x7180.GotFocus += __0x7207;
				__0x7180.LostFocus += __0x7209;
				__0x7180.MouseUp += __0x7210;
				__0x7180.ValueChanged += __0x7212;
			}

			
			
			if( __0x7173 == null )
			{
				__0x7178.TrackBar.Enabled = false;
				__0x7178.TrackBar.Visible = false;
				__0x7178.TextBox.Width = ( (Control)__0x7178 ).Width;
				__0x7178.TextBox.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right;
			}
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7181 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x7182 = __0x7181.TrackBar;

			if( __0x7173 != null )
			{
				var __0x7183 = Property.Type.GetNetType();
				bool __0x7184 = ReferenceUtility.IsReferenceType( __0x7183 );

				var __0x7185 = GetValues();
				if( __0x7185 != null )
				{
					__0x7182.Enabled = CanEditValue();

					
					if( !__0x7175 )
						__0x7206();
				}
			}
		}

		void __0x7206()
		{
			var __0x7186 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x7187 = __0x7186.TrackBar;

			var __0x7188 = GetValues();
			if( __0x7188 == null )
				return;

			int __0x7189 = 0;

			for( int __0x7190 = 0; __0x7190 < __0x7188.Length; __0x7190++ )
			{
				var __0x7191 = __0x7188[ __0x7190 ];
				var __0x7192 = ReferenceUtility.GetUnreferencedValue( __0x7191 );
				
				double __0x7193 = double.Parse( __0x7192.ToString() );
				var __0x7194 = __0x7173.GetTrackBarValue( __0x7211(), __0x7193 );

				if( __0x7190 == 0 )
					__0x7189 = __0x7194;
				else
				{
					if( __0x7189 != __0x7194 )
						__0x7189 = __0x7186.TrackBar.Minimum;
				}
			}

			if( __0x7187.Value != __0x7189 )
			{
				__0x7177 = true;
				__0x7187.Value = __0x7189;
				__0x7177 = false;
			}
		}

		protected override void TextBoxTextChanged()
		{
			base.TextBoxTextChanged();

			if( __0x7173 != null )
				__0x7206();
		}

		private void __0x7207( object __0x7213, EventArgs __0x7214 )
		{
			__0x7174 = true;
		}

		void __0x7208()
		{
			
			if( __0x7175 )
			{
				__0x7176.AddUndoActionWithSavedValuesToRestore();
				__0x7175 = false;
			}
		}

		private void __0x7209( object __0x7215, EventArgs __0x7216 )
		{
			__0x7174 = false;

			var __0x7195 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			if( !__0x7195.TextBox.ReadOnly )
				__0x7208();
		}

		private void __0x7210( object __0x7217, MouseEventArgs __0x7218 )
		{
			var __0x7196 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			if( !__0x7196.TextBox.ReadOnly )
				__0x7208();
		}

		bool __0x7211()
		{
			var __0x7197 = Property.Type.GetNetType();
			var __0x7198 = ReferenceUtility.GetUnreferencedType( __0x7197 );

			return
				__0x7198 == typeof( sbyte ) ||
				__0x7198 == typeof( byte ) ||
				__0x7198 == typeof( char ) ||
				__0x7198 == typeof( short ) ||
				__0x7198 == typeof( ushort ) ||
				__0x7198 == typeof( int ) ||
				__0x7198 == typeof( uint ) ||
				__0x7198 == typeof( long ) ||
				__0x7198 == typeof( ulong );
		}

		private void __0x7212( object __0x7219, EventArgs __0x7220 )
		{
			if( __0x7177 )
				return;

			if( !__0x7174 )
				return;

			
			if( !__0x7175 )
			{
				__0x7176 = GetItemInHierarchyToRestoreValues();
				__0x7176.SaveValuesToRestore();
				__0x7175 = true;
			}

			var __0x7199 = (IHCTextBoxNumeric)CreatedControlInsidePropertyItemControl;
			var __0x7200 = __0x7199.TrackBar;

			__0x7177 = true;

			var __0x7201 = Property.Type.GetNetType();
			var __0x7202 = ReferenceUtility.GetUnreferencedType( __0x7201 );

			try
			{
				double __0x7203 = __0x7173.GetValueFromTrackBar( __0x7211(), __0x7200.Value );

				
				string __0x7204;
				if( __0x7211() )
					__0x7204 = Convert.ToInt64( __0x7203 ).ToString();
				else
					__0x7204 = __0x7203.ToString();
				var __0x7205 = SimpleTypes.ParseValue( __0x7202, __0x7204 );

				SetValue( __0x7205, false );
			}
			catch
			{
			}

			__0x7177 = false;
		}
	}
}




namespace NeoAxis.Editor
{
	public interface IHCTextBoxSelect : IHCTextBox
	{
		ComponentFactory.Krypton.Toolkit.KryptonButton ButtonSelect { get; }
	}

	public class HCItemTextBoxSelect : HCItemTextBox
	{
		

		

		public HCItemTextBoxSelect( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			return new HCGridTextBoxSelect();
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x7221 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;

			__0x7221.TextBox.MouseUp += Control_MouseUp_ResetDefaultValue;
			__0x7221.ButtonSelect.MouseUp += ( __0x7225, __0x7226 ) => OnDropDownMouseButtonUp();
			__0x7221.ButtonSelect.MouseDown += ( __0x7227, __0x7228 ) => OnDropDownMouseButtonDown();

			
			
			
			
			
			
			
		}

		protected virtual void OnDropDownMouseButtonUp()
		{
		}

		protected virtual void OnDropDownMouseButtonDown()
		{
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x7222 = (IHCTextBoxSelect)CreatedControlInsidePropertyItemControl;
			var __0x7223 = __0x7222.ButtonSelect;

			bool __0x7224 = !CanEditValue();
			__0x7223.Enabled = !__0x7224;

			
			
			
			

			

			
			

			
			
			

			
			
			
		}

		
		
		

		
		

		

		
		

		
		
		

		
		

		
		
		
		
		
		

		

		
		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a user control item for <see cref="HierarchicalContainer"/>.
	/// </summary>
	public class HCItemUserControl : HCItemProperty
	{
		public HCItemUserControl( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x7229 = new EUserControl();
			__0x7229.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			return __0x7229;
		}

		

		
		
		

		
		

		
		
		

		
		

		
		
		
		
		
		
		

		
		
		
		
		
	}
}




namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents a container to manage controls with the ability to set up the structure of controls in the form of a hierarchy.
	/// </summary>
	public partial class HierarchicalContainer : EUserControl, IMessageFilter, ControlDoubleBufferComposited.IDoubleBufferComposited
	{
		static Dictionary<Type, Type> __0x7230 = new Dictionary<Type, Type>();

		
		

		DocumentWindow __0x7231;
		object[] __0x7232;

		
		List<Item> __0x7233 = new List<Item>();

		
		bool __0x7234;

		bool __0x7235;

		IDropDownHolder __0x7236;

		internal const bool DrawSplitter = true;
		internal const int SpliterWidth = 6;
		
		float __0x7237 = 2.0f / 5.0f;
		SplitterState __0x7238 = SplitterState.None;
		int __0x7239 = 0;
		Point __0x7240 = Point.Empty;
		ContentModeEnum __0x7241 = ContentModeEnum.Properties;

		
		

		double __0x7242;

		DateTime? __0x7243;

		

		

		/// <summary>
		/// Represents an item of the <see cref="HierarchicalContainer"/>.
		/// </summary>
		public abstract class Item : IDisposable
		{
			HierarchicalContainer __0x7244;
			Item __0x7245;
			List<Item> __0x7246 = new List<Item>();

			EUserControl __0x7247;

			bool __0x7248;
			bool __0x7249;
			bool __0x7250;

			

			public Item( HierarchicalContainer owner, Item parent )
			{
				this.__0x7244 = owner;
				this.__0x7245 = parent;
			}

			public HierarchicalContainer Owner
			{
				get { return __0x7244; }
			}

			public Item Parent
			{
				get { return __0x7245; }
			}

			public List<Item> Children
			{
				get { return __0x7246; }
			}

			internal int GetTotalHeight()
			{
				int __0x7251 = CreatedControl?.Height ?? 0;
				if( Expanded )
				{
					foreach( var __0x7312 in Children )
						__0x7251 += __0x7312.GetTotalHeight();
				}
				return __0x7251;
			}

			public abstract EUserControl CreateControlImpl();

			public virtual void UpdateControl() { }

			
			public virtual void Update()
			{
				foreach( var __0x7313 in Children )
					__0x7313.Update();
			}

			public virtual void CreateControl()
			{
				if( CreatedControl == null )
				{

					try
					{
						
						KryptonToolkitSettings.DisableLayout = true;
						CreatedControl = CreateControlImpl();
					}
					catch( Exception )
					{
						
						throw;
					}
					finally
					{
						KryptonToolkitSettings.DisableLayout = false;
					}

					Owner.ContentPanel.Controls.Add( CreatedControl );

					

					
					
					
					
					
					
					
				}

				foreach( var __0x7314 in Children )
					__0x7314.CreateControl();
			}

			
			public virtual void UpdateLayout( ref int positionY, ref int tabIndex, bool needVerticalScroll )
			{
				if( VisibleDependingExpandedFlag )
				{
					if( CreatedControl != null )
					{
						CreatedControl.SuspendLayout();

						var __0x7252 = new Point( 0, positionY );
						

						

						if( CreatedControl.Location != __0x7252 )
							CreatedControl.Location = __0x7252;

						int __0x7253 = 0;
						if( needVerticalScroll )
							__0x7253 = Owner.ScrollBarWidth + 1;

						if( CreatedControl.Width != Owner.ClientSize.Width - __0x7253 )
							CreatedControl.Width = Owner.ClientSize.Width - __0x7253;

						
						
						

						
						
						

						
						



						UpdateControl();

						if( !CreatedControl.Visible )
							CreatedControl.Visible = true;
						CreatedControl.ResumeLayout( true );

						positionY += CreatedControl.Height;

						if( CreatedControl.TabIndex != tabIndex )
							CreatedControl.TabIndex = tabIndex;
						tabIndex++;
					}
				}
				else
				{
					if( CreatedControl != null && CreatedControl.Visible )
						CreatedControl.Visible = false;
				}

				foreach( var __0x7315 in Children )
					__0x7315.UpdateLayout( ref positionY, ref tabIndex, needVerticalScroll );
			}

			public virtual void Dispose()
			{
				foreach( var __0x7316 in Children.ToArray() )
					__0x7316.Dispose();
				Children.Clear();

				if( CreatedControl != null )
				{
					if( CreatedControl.Parent != null )
						CreatedControl.Parent.Controls.Remove( CreatedControl );
					CreatedControl.Dispose();
					CreatedControl = null;
				}
			}

			public EUserControl CreatedControl
			{
				get { return __0x7247; }
				set { __0x7247 = value; }
			}

			public bool CanExpand
			{
				get { return __0x7248; }
				set { __0x7248 = value; }
			}

			public bool Expanded
			{
				get { return __0x7249; }
				set
				{
					__0x7249 = value;
					if( __0x7249 )
						__0x7250 = true;
				}
			}

			public bool WasExpanded
			{
				get { return __0x7250; }
				set { __0x7250 = value; }
			}

			public bool VisibleDependingExpandedFlag
			{
				get
				{
					if( Parent != null )
						return Parent.VisibleDependingExpandedFlag && Parent.Expanded;
					return true;
				}
			}
		}

		

		[Flags]
		enum SplitterState
		{
			None = 0x0,
			Hovered = 0x1,
			Dragged = 0x2
		}

		

		public enum ContentModeEnum
		{
			Properties,
			Events
		}

		

		public delegate void BeforeTimerUpdateDelegate( HierarchicalContainer __0x7351, ref bool __0x7352 );
		public event BeforeTimerUpdateDelegate BeforeTimerUpdate;

		public delegate void OverridePropertyDisplayNameDelegate( HierarchicalContainer __0x7353, HCItemProperty __0x7354, ref string __0x7355 );
		public event OverridePropertyDisplayNameDelegate OverridePropertyDisplayName;

		public delegate void OverrideMemberDescriptionDelegate( HierarchicalContainer __0x7356, HCItemMember __0x7357, ref string __0x7358 );
		public event OverrideMemberDescriptionDelegate OverrideMemberDescription;

		public delegate void OverridePropertyEnumItemDelegate( HierarchicalContainer __0x7359, HCItemEnumDropDown __0x7360, ref string __0x7361, ref string __0x7362 );
		public event OverridePropertyEnumItemDelegate OverridePropertyEnumItem;

		public delegate void OverrideGroupDisplayNameDelegate( HierarchicalContainer __0x7363, HCItemGroup __0x7364, ref string __0x7365 );
		public event OverrideGroupDisplayNameDelegate OverrideGroupDisplayName;

		

		static HierarchicalContainer()
		{
			__0x7344();
		}

		public HierarchicalContainer()
		{
			__0x7350();

			
			
			
			
			
			

			
			
			
			
			

			

			
			Application.AddMessageFilter( this );

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x7310.Visible = false;
			

			__0x7311.MouseLeave += __0x7334;
			__0x7311.MouseMove += __0x7335;
			__0x7311.MouseDown += __0x7336;
			__0x7311.MouseUp += __0x7337;
		}

		
		
		
		
		

		
		
		
		
		
		

		[Browsable( false )]
		public DocumentWindow DocumentWindow
		{
			get { return __0x7231; }
		}

		[Browsable( false )]
		public object[] SelectedObjects
		{
			get { return __0x7232; }
		}

		[Browsable( false )]
		public List<Item> RootItems
		{
			get { return __0x7233; }
		}

		
		public float SplitterRatio
		{
			get { return __0x7237; }
			set
			{
				var __0x7254 = Math.Max( 50.0f / Width, Math.Min( value, ( Width - 50 ) / (float)Width ) );
				if( __0x7237 != __0x7254 )
				{
					__0x7237 = __0x7254;
					

					UpdateItems();
					Refresh();
					
					
				}
			}
		}

		public int SplitterPosition
		{
			get { return (int)Math.Round( SplitterRatio * Width ); }
			set { SplitterRatio = value / (float)Width; }
		}

		public ContentModeEnum ContentMode
		{
			get { return __0x7241; }
			set
			{
				if( __0x7241 == value )
					return;
				__0x7241 = value;

				
				
			}
		}

		[DefaultValue( true )]
		public bool DisplayGroups { get; set; } = true;

		private void __0x7333( object __0x7366, EventArgs __0x7367 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			

			
			
			
			
			
			
			

			
			__0x7310.ValueChanged += __0x7349;
		}

		
		
		
		

		private void __0x7334( object __0x7368, EventArgs __0x7369 )
		{
			
			

			if( __0x7238.HasFlag( SplitterState.Hovered ) )
			{
				__0x7238 &= ~SplitterState.Hovered;
				Cursor = Cursors.Default;
			}
		}

		private void __0x7335( object __0x7370, MouseEventArgs __0x7371 )
		{
			
			

			if( __0x7238.HasFlag( SplitterState.Dragged ) )
			{
				SplitterPosition = __0x7239 + __0x7371.X - __0x7240.X;
				__0x7338();
			}
			else
			{
				int __0x7255 = SplitterPosition;
				bool __0x7256 = __0x7371.Button == MouseButtons.None &&
					__0x7371.X < __0x7255 && __0x7371.X >= __0x7255 - SpliterWidth;
				if( __0x7256 && !__0x7238.HasFlag( SplitterState.Hovered ) )
				{
					__0x7238 |= SplitterState.Hovered;
					Cursor = KryptonCursors.VSplit;
				}
				else if( !__0x7256 && __0x7238.HasFlag( SplitterState.Hovered ) )
				{
					__0x7238 &= ~SplitterState.Hovered;
					Cursor = Cursors.Default;
				}
			}
		}

		private void __0x7336( object __0x7372, MouseEventArgs __0x7373 )
		{
			
			
			if( __0x7238.HasFlag( SplitterState.Hovered ) )
			{
				__0x7238 |= SplitterState.Dragged;
				__0x7240 = __0x7373.Location;
				__0x7239 = this.SplitterPosition;
				
				
				
				
			}
			
		}

		private void __0x7337( object __0x7374, MouseEventArgs __0x7375 )
		{
			
			

			if( __0x7238.HasFlag( SplitterState.Dragged ) )
			{
				__0x7238 &= ~SplitterState.Dragged;
				
				
				
				
			}
		}

		protected override void OnMouseLeave( EventArgs e )
		{
			base.OnMouseLeave( e );

			
			

			
			
			
			
			
		}

		protected override void OnMouseMove( MouseEventArgs e )
		{
			base.OnMouseMove( e );

			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		protected override void OnMouseDown( MouseEventArgs e )
		{
			
			
			
			
			
			
			
			
			
			
			
			
			

			base.OnMouseDown( e );
		}

		protected override void OnMouseUp( MouseEventArgs e )
		{
			base.OnMouseUp( e );

			
			

			
			
			
			
			
			
			
			
		}

		protected override void OnDestroy()
		{
			Application.RemoveMessageFilter( this );

			__0x7235 = true;
			foreach( var __0x7317 in RootItems.ToArray() )
				__0x7317.Dispose();
			RootItems.Clear();

			base.OnDestroy();
		}

		protected override void OnResize( EventArgs e )
		{
			if( !IsHandleCreated )
				return;

			PerformUpdate();
			
			

			base.OnResize( e );
		}

		void __0x7338()
		{
			__0x7242 = 0;

			
			

			
			
		}

		protected override Point ScrollToControl( Control activeControl )
		{
			
			
			return this.AutoScrollPosition;
			
		}

		protected override void OnLostFocus( EventArgs e )
		{
			base.OnLostFocus( e );

			
			
			
		}

		private void __0x7339( object __0x7376, EventArgs __0x7377 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( !WinFormsUtility.IsControlVisibleInHierarchy( this ) )
				return;

			bool __0x7257 = false;
			BeforeTimerUpdate?.Invoke( this, ref __0x7257 );
			if( __0x7257 )
				return;

			
			PerformUpdate();

			if( __0x7243.HasValue && ( DateTime.Now - __0x7243.Value ).TotalSeconds > 0 )
			{
				ControlDoubleBufferComposited.RestoreComposited( this );
				__0x7243 = null;
			}
		}

		public void PerformUpdate( bool forceUpdate = false )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;
			if( Destroyed || __0x7235 )
				return;

			double __0x7258 = 0.05;
			if( SelectedObjects != null )
			{
				if( SelectedObjects.Length > 2000 )
					__0x7258 = 2.0;
				else if( SelectedObjects.Length > 500 )
					__0x7258 = 1.0;
				else if( SelectedObjects.Length > 250 )
					__0x7258 = 0.5;
				else if( SelectedObjects.Length > 100 )
					__0x7258 = 0.35;
				else
					__0x7258 = 0.1;
			}

			if( EngineApp.GetSystemTime() - __0x7242 < __0x7258 && !forceUpdate )
				return;

			if( __0x7234 )
				return;
			try
			{
				__0x7234 = true;

				
				
				__0x7309?.Start();

				UpdateItems();

				
			}
			finally
			{
				__0x7242 = EngineApp.GetSystemTime();
				__0x7234 = false;
			}
		}

		public void SetData( DocumentWindow documentWindow, object[] objects, bool callPerformUpdate = true )
		{
			this.__0x7231 = documentWindow;
			this.__0x7232 = objects;

			if( callPerformUpdate )
				PerformUpdate( true );

			
			__0x7309?.Start();

			
			
			
			
			
			
			
		}

		IEnumerable<Item> __0x7340( object[] __0x7378 )
		{
			var __0x7259 = new Dictionary<string, HCItemGroup>();
			var __0x7260 = new Dictionary<Metadata.Member, HCItemMember>();
			foreach( var __0x7318 in __0x7233 )
			{
				var __0x7261 = __0x7318 as HCItemGroup;
				if( __0x7261 != null )
					__0x7259.Add( __0x7261.Name, __0x7261 );
				var __0x7262 = __0x7318 as HCItemMember;
				if( __0x7262 != null )
					__0x7260.Add( __0x7262.Member, __0x7262 );
			}

			var __0x7263 = new EDictionary<string, List<Metadata.Member>>();
			
			
			

			var __0x7264 = __0x7378[ 0 ];

			var __0x7265 = new EDictionary<Metadata.Member, int>( 128 );

			
			foreach( var __0x7319 in MetadataManager.MetadataGetMembers( __0x7264 ) )
			{
				if( __0x7241 == ContentModeEnum.Properties && !( __0x7319 is Metadata.Property ) )
					continue;
				if( __0x7241 == ContentModeEnum.Events && !( __0x7319 is Metadata.Event ) )
					continue;

				if( EditorUtility.IsMemberVisible( __0x7264, __0x7319 ) )
				{
					bool __0x7266 = false;

					
					var __0x7267 = __0x7264 as Component;
					if( __0x7267 != null && !__0x7267.TypeSettingsIsPublicMember( __0x7319 ) )
						__0x7266 = true;
					
					
					
					
					
					

					if( !__0x7266 )
						__0x7265[ __0x7319 ] = 1;
				}
			}

			for( int __0x7268 = 1; __0x7268 < __0x7378.Length; __0x7268++ )
			{
				var __0x7269 = __0x7378[ __0x7268 ];
				foreach( var __0x7320 in MetadataManager.MetadataGetMembers( __0x7269 ) )
				{
					if( __0x7265.TryGetValue( __0x7320, out var counter ) )
						__0x7265[ __0x7320 ] = counter + 1;
				}
			}

			foreach( var __0x7321 in __0x7265 )
			{
				var __0x7270 = __0x7321.Key;
				var __0x7271 = __0x7321.Value;
				if( __0x7271 == __0x7378.Length )
				{
					var __0x7272 = TypeUtility.GetUserFriendlyCategory( __0x7270 );

					List<Metadata.Member> __0x7273;
					if( !__0x7263.TryGetValue( __0x7272, out __0x7273 ) )
					{
						__0x7273 = new List<Metadata.Member>();
						__0x7263.Add( __0x7272, __0x7273 );
					}
					__0x7273.Add( __0x7270 );
				}
			}

			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			

			
			if( ReverseGroups )
			{
				var __0x7274 = new EDictionary<string, List<Metadata.Member>>( __0x7263.Count );
				foreach( var __0x7322 in __0x7263.Reverse() )
					__0x7274.Add( __0x7322.Key, __0x7322.Value );
				__0x7263 = __0x7274;
			}

			foreach( var __0x7323 in __0x7263 )
			{
				var __0x7275 = __0x7323.Key;
				var __0x7276 = __0x7323.Value;

				
				if( DisplayGroups )
				{
					if( !__0x7259.TryGetValue( __0x7275, out HCItemGroup groupItem ) )
						groupItem = new HCItemGroup( this, null, __0x7275 );
					yield return groupItem;
				}

				
				foreach( var __0x7324 in __0x7276 )
				{
					if( !__0x7260.TryGetValue( __0x7324, out var item ) )
					{
						Type __0x7277 = GetSuitableItemType( __0x7324 );
						
						
						

						
						if( __0x7277 != null )
						{
							var __0x7278 = __0x7324 as Metadata.Property;
							if( __0x7278 != null )
							{
								var __0x7279 = __0x7277.GetConstructor( new Type[] {
										typeof( HierarchicalContainer ),
										typeof( Item ),
										typeof( object[] ),
										typeof( Metadata.Property ),
										typeof( object[] )
									} );

								item = (HCItemMember)__0x7279.Invoke( new object[] { this, null, SelectedObjects, __0x7278, __0x7278.Indexers } );
							}

							var __0x7280 = __0x7324 as Metadata.Event;
							if( __0x7280 != null )
							{
								var __0x7281 = __0x7277.GetConstructor( new Type[] {
									typeof( HierarchicalContainer ),
									typeof( Item ),
									typeof( object[] ),
									typeof( Metadata.Event )
								} );

								item = (HCItemMember)__0x7281.Invoke( new object[] { this, null, SelectedObjects, __0x7280 } );
							}
						}
					}

					if( item != null )
						yield return item;
				}
			}
		}

		
		internal void UpdateItems()
		
		{
			
			

			ESet<Item> __0x7282 = new ESet<Item>();

			if( SelectedObjects != null && SelectedObjects.Length != 0 )
			{
				foreach( var __0x7325 in __0x7340( SelectedObjects ) )
					__0x7282.Add( __0x7325 );
			}

			
			List<Item> __0x7283 = new List<Item>();
			foreach( var __0x7326 in __0x7233 )
			{
				if( !__0x7282.Contains( __0x7326 ) )
					__0x7283.Add( __0x7326 );
			}

			
			__0x7233.Clear();
			__0x7233.AddRange( __0x7282 );

			if( __0x7283.Count != 0 )
			{
				SuspendLayout();

				
				foreach( var __0x7327 in __0x7283 )
					__0x7327.Dispose();

				ResumeLayout( false );
			}

			foreach( var __0x7328 in __0x7233 )
				__0x7328.Update();

			
			if( __0x7233.Count != 0 )
			{
				
				try
				{
					foreach( var __0x7329 in __0x7233 )
						__0x7329.CreateControl();
				}
				catch { }

				var __0x7284 = __0x7341( out var itemsHeight );

				if( __0x7310.Visible != __0x7284 )
					__0x7310.Visible = __0x7284;

				__0x7310.Maximum = Math.Max( itemsHeight - Height, 0 );
				__0x7310.SmallChange = 30;
				__0x7310.LargeChange = Height;

				
				

				
				
				

				
				__0x7342( __0x7284 );

				
				__0x7348( __0x7284 );
			}
			else
			{
				if( __0x7310.Visible )
					__0x7310.Visible = false;
			}
		}

		bool __0x7341( out int __0x7379 )
		{
			__0x7379 = 0;
			
			foreach( var __0x7330 in __0x7233 )
				__0x7379 += __0x7330.GetTotalHeight();
			return __0x7379 > Height;
		}

		void __0x7342( bool __0x7380 )
		{
			SuspendLayout();

			int __0x7285 = 0;
			int __0x7286 = 0;
			foreach( var __0x7331 in __0x7233 )
				__0x7331.UpdateLayout( ref __0x7285, ref __0x7286, __0x7380 );

			ResumeLayout( true );
		}

		protected override void AdjustFormScrollbars( bool displayScrollbars )
		{
			

			
			

			
			

			
			displayScrollbars = false;

			
			base.AdjustFormScrollbars( displayScrollbars );
		}

		[Browsable( false )]
		public bool IsDropDownOpen
		{
			get { return __0x7236 != null; }
		}

		public void ToggleDropDown( HCDropDownControl control, Control parentControl )
		{
			if( __0x7236 == null && control != null )
			{
				if( control.UseFormDropDownHolder )
					__0x7236 = new HCFormDropDownHolder( control );
				else
					__0x7236 = new HCToolStripDropDownHolder( control );

				__0x7236.Show( parentControl );
				__0x7236.HolderClosed += __0x7343;
			}
			else
			{
				__0x7236?.Close( true );
			}
		}

		private void __0x7343( object __0x7381, EventArgs __0x7382 )
		{
			__0x7236.HolderClosed -= __0x7343;
			__0x7236 = null;
		}

		[Browsable( false )]
		public Dictionary<Type, Type> ItemTypeByPropertyType
		{
			get { return __0x7230; }
		}

		public static void RegisterItemTypeByPropertyType( Type propertyType, Type itemType )
		{
			__0x7230[ propertyType ] = itemType;
		}

		static void __0x7344()
		{
			RegisterItemTypeByPropertyType( typeof( object ), typeof( HCItemLabel ) );
			RegisterItemTypeByPropertyType( typeof( Enum ), typeof( HCItemEnumDropDown ) );
			

			
			foreach( var __0x7332 in SimpleTypes.Types )
				RegisterItemTypeByPropertyType( __0x7332.Type, typeof( HCItemTextBox ) );

			
			

			RegisterItemTypeByPropertyType( typeof( bool ), typeof( HCItemCheckBox ) );
			RegisterItemTypeByPropertyType( typeof( ColorValue ), typeof( HCItemColorValue ) );
			RegisterItemTypeByPropertyType( typeof( ColorValuePowered ), typeof( HCItemColorValuePowered ) );

			RegisterItemTypeByPropertyType( typeof( int ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( uint ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( long ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( ulong ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( float ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( double ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( DegreeF ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Degree ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( RadianF ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Radian ), typeof( HCItemTextBoxNumeric ) );
			RegisterItemTypeByPropertyType( typeof( Range ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( RangeF ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( RangeI ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2 ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2F ), typeof( HCItemRange ) );
			RegisterItemTypeByPropertyType( typeof( Vector2I ), typeof( HCItemRange ) );

			
			

			RegisterItemTypeByPropertyType( typeof( Component_ProjectSettings.RibbonAndToolbarActionsClass ), typeof( HCItemProjectRibbonAndToolbarActions ) );
			RegisterItemTypeByPropertyType( typeof( Component_ProjectSettings.ShortcutSettingsClass ), typeof( HCItemProjectShortcuts ) );
		}

		Type __0x7345( Type __0x7383 )
		{
			
			if( typeof( ICollection ).IsAssignableFrom( __0x7383 ) )
				return typeof( HCItemCollection );
			if( __0x7383.IsGenericType && typeof( ReferenceList<> ).IsAssignableFrom( __0x7383.GetGenericTypeDefinition() ) )
				return typeof( HCItemCollection );

			Type __0x7287;
			if( __0x7383.IsGenericType )
				__0x7287 = __0x7383.GetGenericTypeDefinition();
			else
				__0x7287 = __0x7383;

			var __0x7288 = __0x7287;

			do
			{
				if( __0x7288 == typeof( object ) )
				{
					if( typeof( ICanParseFromAndConvertToString ).IsAssignableFrom( __0x7287 ) )
						return typeof( HCItemTextBox );
				}

				__0x7230.TryGetValue( __0x7288, out Type type2 );
				if( type2 != null )
					return type2;

				__0x7288 = __0x7288.BaseType;
			} while( __0x7288 != null );

			return null;
		}

		public delegate void GetSuitableItemTypeOverrideDelegate( HierarchicalContainer __0x7384, Metadata.Member __0x7385, ref Type __0x7386 );
		public event GetSuitableItemTypeOverrideDelegate GetSuitableItemTypeOverride;

		public virtual Type GetSuitableItemType( Metadata.Member member )
		{
			Type __0x7289 = null;

			
			GetSuitableItemTypeOverride?.Invoke( this, member, ref __0x7289 );

			if( __0x7289 == null )
			{
				var __0x7290 = (EditorAttribute)member.GetCustomAttributes( typeof( EditorAttribute ), true ).FirstOrDefault();
				if( __0x7290 != null )
				{
					var __0x7291 = EditorUtility.GetTypeByName( __0x7290.EditorTypeName );
					if( typeof( HCItemProperty ).IsAssignableFrom( __0x7291 ) )
						return __0x7291;
				}

				var __0x7292 = member as Metadata.Property;
				if( __0x7292 != null )
				{
					
					
					
					
					
					
					
					
					
					
					var __0x7293 = __0x7292.Type.GetNetType();
					var __0x7294 = ReferenceUtility.GetUnreferencedType( __0x7293 );
					__0x7289 = __0x7345( __0x7294 );
					
				}

				var __0x7295 = member as Metadata.Event;
				if( __0x7295 != null )
					return EditorAssemblyInterface.Instance.GetTypeByName( "NeoAxis.Editor.HCItemEvent" );
			}

			return __0x7289;
		}

		[DllImport( "user32.dll" )]
		internal static extern IntPtr WindowFromPoint( Point pnt );

		bool __0x7346( Control __0x7387 )
		{
			var __0x7296 = __0x7387;
			while( __0x7296 != null )
			{
				if( __0x7296 == this )
					return true;
				__0x7296 = __0x7296.Parent;
			}
			return false;
		}

		bool IMessageFilter.PreFilterMessage( ref Message __0x7388 )
		{
			if( !Enabled || !Visible || IsDisposed )
				return false;

			if( __0x7388.Msg == ComponentFactory.Krypton.Toolkit.PI.WM_MOUSEWHEEL )
			{
				
				if( !__0x7310.Visible )
					return false;
				
				

				Point __0x7297 = new Point( ComponentFactory.Krypton.Toolkit.PI.LOWORD( (int)__0x7388.LParam ), ComponentFactory.Krypton.Toolkit.PI.HIWORD( (int)__0x7388.LParam ) );

				try 
				{
					Control __0x7298 = GetChildAtPoint( PointToClient( __0x7297 ) );

					if( __0x7298 == null )
						return false;
					if( __0x7298 == __0x7310 )
						return false;

					var __0x7299 = WindowFromPoint( __0x7297 );
					if( __0x7299 != IntPtr.Zero )
					{
						var __0x7300 = FromHandle( __0x7299 );
						if( !__0x7346( __0x7300 ) )
							return false;
					}

					
					
					

					if( __0x7236 != null && __0x7236.Visible )
						return false;

					if( __0x7347( __0x7297 ) )
						return false;

					int __0x7301 = (short)( ( ( (long)__0x7388.WParam ) >> 0x10 ) & 0xffff );
					int __0x7302 = __0x7301 / 120;
					var __0x7303 = __0x7310.Value - 100 * __0x7302;
					__0x7310.Value = __0x7303;

					
					

					return true;
				}
				catch { }
			}

			return false;
		}

		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		

		private bool __0x7347( Point __0x7389 )
		{
			IntPtr __0x7304 = ComponentFactory.Krypton.Toolkit.PI.WindowFromPoint( new ComponentFactory.Krypton.Toolkit.PI.POINT( __0x7389 ) );
			if( __0x7304 != IntPtr.Zero )
			{
				string __0x7305 = ComponentFactory.Krypton.Toolkit.PI.GetClassName( __0x7304 );
				if( __0x7305 == "ComboLBox" )
					return true;
			}

			return false;
		}

		[DefaultValue( false )]
		public bool ReverseGroups { get; set; }

		
		

		public void PerformOverridePropertyDisplayName( HCItemProperty property, ref string displayName )
		{
			OverridePropertyDisplayName?.Invoke( this, property, ref displayName );
		}

		public void PerformOverrideMemberDescription( HCItemMember member, ref string description )
		{
			OverrideMemberDescription?.Invoke( this, member, ref description );
		}

		public void PerformOverridePropertyEnumItem( HCItemEnumDropDown property, ref string displayName, ref string description )
		{
			OverridePropertyEnumItem?.Invoke( this, property, ref displayName, ref description );
		}

		public void PerformOverrideGroupDisplayName( HCItemGroup group, ref string displayName )
		{
			OverrideGroupDisplayName?.Invoke( this, group, ref displayName );
		}

		
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x7306 = base.CreateParams;
				__0x7306.ExStyle |= 0x02000000;
				return __0x7306;
			}
		}

		[Browsable( false )]
		public Control ContentPanel
		{
			get { return __0x7311; }
		}

		void __0x7348( bool __0x7390 )
		{
			if( __0x7390 )
			{
				var __0x7307 = ScrollBarPosition;
				__0x7311.SetBounds( 0, -__0x7307, ClientRectangle.Right - __0x7310.Size.Width, ClientRectangle.Height + __0x7307 );
			}
			else
				__0x7311.SetBounds( 0, 0, ClientRectangle.Right, ClientRectangle.Height );

			__0x7310.SetBounds( ClientRectangle.Right - __0x7310.Size.Width, 0, __0x7310.Size.Width, ClientRectangle.Height );

			
			
		}

		[Browsable( false )]
		public int ScrollBarWidth
		{
			get { return __0x7310.Width; }
		}

		[Browsable( false )]
		public int ScrollBarPosition
		{
			get { return __0x7310.Value; }
		}

		public override bool AutoScroll
		{
			get { return false; }
			set { base.AutoScroll = value; }
		}

		private void __0x7349( object __0x7391, EventArgs __0x7392 )
		{
			__0x7242 = 0;

			__0x7243 = DateTime.Now + TimeSpan.FromSeconds( 0.5 );
			ControlDoubleBufferComposited.DisableComposited( this );
		}

		protected override void OnParentFormResizeBegin( EventArgs e )
		{
			base.OnParentFormResizeBegin( e );

			
			
		}

		protected override void OnParentFormResizeEnd( EventArgs e )
		{
			base.OnParentFormResizeEnd( e );

			Invalidate();
			
			
		}

	}
}

namespace NeoAxis.Editor
{
    partial class HierarchicalContainer
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x7308 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x7308 != null))
            {
                __0x7308.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x7350()
        {
			this.__0x7308 = new System.ComponentModel.Container();
			this.__0x7309 = new System.Windows.Forms.Timer(this.__0x7308);
			this.__0x7310 = new NeoAxis.Editor.EngineScrollBar();
			this.__0x7311 = new System.Windows.Forms.Panel();
			this.SuspendLayout();
			
			
			
			this.__0x7309.Interval = 10;
			this.__0x7309.Tick += new System.EventHandler(this.__0x7339);
			
			
			
			this.__0x7310.Location = new System.Drawing.Point(500, 0);
			this.__0x7310.Name = "engineScrollBar1";
			this.__0x7310.Size = new System.Drawing.Size(19, 624);
			this.__0x7310.TabIndex = 0;
			
			
			
			this.__0x7311.Location = new System.Drawing.Point(0, 0);
			this.__0x7311.Name = "panel1";
			this.__0x7311.Size = new System.Drawing.Size(450, 531);
			this.__0x7311.TabIndex = 1;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x7311);
			this.Controls.Add(this.__0x7310);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HierarchicalContainer";
			this.Size = new System.Drawing.Size(519, 624);
			this.Load += new System.EventHandler(this.__0x7333);
			this.ResumeLayout(false);

        }

        #endregion
		private System.Windows.Forms.Timer __0x7309;
		private EngineScrollBar __0x7310;
		private System.Windows.Forms.Panel __0x7311;
	}
}




#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	public static partial class Actions
	{
		

		public delegate void ActionExecuteDelegate( Component_MeshInSpace[] __0x7546, UndoMultiAction __0x7547, UndoMultiAction __0x7548 );

		
		public static void ExecuteAction( ActionContext actionContext, ActionExecuteDelegate execute )
		{
			var __0x7393 = actionContext.GetSelectedMeshInSpaceArray();
			if( __0x7393.Length == 0 )
				return;

			var __0x7394 = new UndoMultiAction();

			bool __0x7395 = false;
			bool __0x7396 = false;
			foreach( var __0x7525 in __0x7393 )
			{
				var __0x7397 = __0x7525.Mesh.Value;
				if( __0x7397 != null )
				{
					
					CommonFunctions.CopyExternalMesh( actionContext.DocumentWindow.Document, __0x7525, ref __0x7397, __0x7394, out var needUndoForNextActions ); 
					if( needUndoForNextActions )
						__0x7395 = true;
					else
						__0x7396 = true;
				}
			}
			foreach( var __0x7526 in __0x7393 )
				if( !__0x7538( __0x7526.Mesh ) )
				{
					if( __0x7396 )
						actionContext.DocumentWindow?.Document?.CommitUndoAction( __0x7394 );
					return;
				}

			execute( __0x7393, __0x7395 ? __0x7394 : null, __0x7394 );

			__0x7394.Actions.Reverse();
			actionContext.DocumentWindow?.Document?.CommitUndoAction( __0x7394 );
		}

		static bool __0x7538( Component_Mesh __0x7549 )
		{
			if( !CommonFunctions.CheckValidMesh( __0x7549, out string error ) )
			{
				EditorMessageBox.ShowWarning( error );
				return false;
			}
			return true;
		}

		public static void MergeObjectsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode != SelectionMode.Object )
				return;
			var __0x7398 = actionContext.GetSelectedMeshInSpaceArray();
			if( __0x7398.Length == 0 )
				return;
			if( __0x7398.Length == 1 )
			{
				if( 1 < __0x7398[ 0 ].Mesh.Value?.GetComponents<Component_MeshGeometry>()?.Length )
					context.Enabled = true;
			}
			else
				context.Enabled = true;
		}

		
		
		public static void MergeObjects( ActionContext actionContext )
		{
			void Execute( Component_MeshInSpace[] __0x7550, UndoMultiAction __0x7551, UndoMultiAction __0x7552 )
			{
				if( __0x7550.Length == 1 )
				{
					var __0x7399 = __0x7550[ 0 ].Mesh.Value;
					if( __0x7399 == null )
						return;

					__0x7539( __0x7399, actionContext.DocumentWindow?.Document, __0x7551 );
				}
				else
				{
					var __0x7400 = __0x7540( __0x7550, actionContext.DocumentWindow?.Document, __0x7552 );
					actionContext.SelectMeshesInSpace( __0x7400 );
				}
			}

			ExecuteAction( actionContext, Execute );
		}

		
		static void __0x7539( Component_Mesh __0x7553, DocumentInstance __0x7554, UndoMultiAction __0x7555 )
		{
			Component_MeshGeometry[] __0x7401 = __0x7553.GetComponents<Component_MeshGeometry>();
			if( __0x7401 == null || __0x7401.Length < 2 )
				return;

			Reference<Component_Material> __0x7402 = __0x7401[ 0 ].Material;
			
			
			
			
			
			
			
			
			
			
			

			var __0x7403 = __0x7553.ExtractStructure();

			var __0x7404 = new List<int>();
			var __0x7405 = new List<byte>();
			var __0x7406 = __0x7403.MeshGeometries[ 0 ].VertexStructure;
			var __0x7407 = new MeshData.MeshGeometryFormat( __0x7406 );

			for( int __0x7408 = 0; __0x7408 < __0x7403.MeshGeometries.Length; __0x7408++ )
			{
				var __0x7409 = __0x7403.MeshGeometries[ __0x7408 ];


				if( __0x7409.Vertices == null || __0x7409.Indices == null )
					continue;
				int __0x7410 = __0x7405.Count / __0x7407.vertexSize;

				for( int __0x7411 = 0; __0x7411 < __0x7409.Indices.Length; __0x7411++ )
					__0x7404.Add( __0x7409.Indices[ __0x7411 ] + __0x7410 );

				if( !CommonFunctions.IsSameVertexStructure( __0x7406, __0x7409.VertexStructure ) )
					__0x7409.Vertices = MeshData.ConvertToFormat( new MeshData.MeshGeometryFormat( __0x7409.VertexStructure ), __0x7409.Vertices, __0x7407 );

				__0x7405.AddRange( __0x7409.Vertices );

				foreach( var __0x7527 in __0x7403.Structure.Faces )
				{
					for( int __0x7412 = 0; __0x7412 < __0x7527.Triangles.Length; __0x7412++ )
					{
						if( __0x7527.Triangles[ __0x7412 ].RawGeometry == __0x7408 )
						{
							__0x7527.Triangles[ __0x7412 ].RawGeometry = 0;
							__0x7527.Triangles[ __0x7412 ].RawVertex += __0x7410;
						}
					}
				}
			}

			

			if( __0x7555 != null )
			{
				
				var __0x7413 = (Metadata.Property)__0x7553.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
				__0x7555.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7553, __0x7413, __0x7553.Structure?.Clone() ) ) );
			}

			bool __0x7414 = __0x7553.Enabled;
			__0x7553.Enabled = false;
			try
			{
				var __0x7415 = __0x7553.CreateComponent<Component_MeshGeometry>();
				__0x7415.Material = __0x7402;

				__0x7415.Vertices = __0x7405.ToArray();
				__0x7415.Indices = __0x7404.ToArray();
				__0x7415.VertexStructure = __0x7406;

				
				__0x7555?.AddAction( new UndoActionComponentCreateDelete( __0x7554, new Component[] { __0x7415 }, create: true ) );

				__0x7553.Structure = __0x7403.Structure;

				
				__0x7555?.AddAction( new UndoActionComponentCreateDelete( __0x7554, __0x7401, create: false ) );

				__0x7415.Name = CommonFunctions.GetUniqueFriendlyName( __0x7415 );
			}
			finally
			{
				__0x7553.Enabled = __0x7414;
			}
		}

		
		
		static Component_MeshInSpace __0x7540( Component_MeshInSpace[] __0x7556, DocumentInstance __0x7557, UndoMultiAction __0x7558 )
		{
			if( __0x7556.Length < 2 )
				return null;

			var __0x7416 = __0x7556[ 0 ].Transform.Value;
			var __0x7417 = __0x7416.ToMatrix4().GetInverse();
			var __0x7418 = __0x7416.Rotation.GetInverse();

			Component_Mesh.StructureClass __0x7419 = null;
			var __0x7420 = new List<Component_MeshGeometry>();
			for( int __0x7421 = 0; __0x7421 < __0x7556.Length; __0x7421++ )
			{
				var __0x7422 = __0x7556[ __0x7421 ].Mesh.Value;
				if( __0x7422 == null )
					continue;
				var __0x7423 = __0x7556[ __0x7421 ].Transform.Value;
				var __0x7424 = __0x7417 * __0x7423.ToMatrix4();
				var __0x7425 = __0x7418 * __0x7423.Rotation;

				var __0x7426 = __0x7422.GetComponents<Component_MeshGeometry>();
				__0x7419 = Component_Mesh.StructureClass.Concat( __0x7419, __0x7422.ExtractStructure().Structure, __0x7420.Count );
				foreach( var __0x7528 in __0x7426 )
				{
					if( __0x7528 is Component_MeshGeometry_Procedural meshGeometryProcedural )
					{
						VertexElement[] __0x7427 = null;
						byte[] __0x7428 = null;
						int[] __0x7429 = null;
						Component_Material __0x7430 = null;
						Component_Mesh.StructureClass __0x7431 = null;
						meshGeometryProcedural.GetProceduralGeneratedData( ref __0x7427, ref __0x7428, ref __0x7429, ref __0x7430, ref __0x7431 );

						var __0x7432 = new Component_MeshGeometry();
						__0x7432.Name = meshGeometryProcedural.Name;
						__0x7432.VertexStructure = __0x7427;
						__0x7432.Vertices = __0x7428;
						__0x7432.Indices = __0x7429;

						__0x7432.Material = meshGeometryProcedural.Material;
						

						__0x7541( __0x7432.Vertices.Value, new MeshData.MeshGeometryFormat( __0x7432.VertexStructure ), __0x7424, __0x7425 );
						__0x7420.Add( __0x7432 );
					}
					else
					{
						
						var __0x7433 = (Component_MeshGeometry)__0x7528.Clone();
						if( __0x7433.Vertices.Value != null )
						{
							__0x7433.Vertices = (byte[])__0x7433.Vertices.Value.Clone();
							__0x7541( __0x7433.Vertices.Value, new MeshData.MeshGeometryFormat( __0x7433.VertexStructure ), __0x7424, __0x7425 );
						}
						__0x7420.Add( __0x7433 );
					}
				}
			}

			

			var __0x7434 = __0x7556[ 0 ].Parent;
			__0x7558.AddAction( new UndoActionComponentCreateDelete( __0x7557, __0x7556, create: false ) );
			Component_MeshInSpace __0x7435 = __0x7434.CreateComponent<Component_MeshInSpace>();
			bool __0x7436 = __0x7435.Enabled;
			try
			{

				__0x7435.Enabled = false;
				__0x7435.Name = CommonFunctions.GetUniqueFriendlyName( __0x7435 );
				__0x7435.Transform = __0x7416;

				var __0x7437 = __0x7435.CreateComponent<Component_Mesh>();
				__0x7437.Name = CommonFunctions.GetUniqueFriendlyName( __0x7437 );
				__0x7437.Structure = __0x7419;
				__0x7435.Mesh = ReferenceUtility.MakeReference<Component_Mesh>( null, ReferenceUtility.CalculateRootReference( __0x7437 ) );

				foreach( var __0x7529 in __0x7420 )
				{
					__0x7437.AddComponent( __0x7529 );
					CommonFunctions.EnsureNameIsUnique( __0x7529 );
				}
			}
			finally
			{
				__0x7435.Enabled = __0x7436;
			}

			__0x7558.AddAction( new UndoActionComponentCreateDelete( __0x7557, new[] { __0x7435 }, create: true ) );
			return __0x7435;
		}

		static unsafe void __0x7541( byte[] __0x7559, MeshData.MeshGeometryFormat __0x7560, Matrix4 __0x7561, Quaternion __0x7562 )
		{
			fixed ( byte* __0x7438 = __0x7559 )
			{
				int __0x7439 = __0x7559.Length / __0x7560.vertexSize;
				for( int __0x7440 = 0; __0x7440 < __0x7439; __0x7440++ )
				{
					byte* __0x7441 = __0x7438 + __0x7440 * __0x7560.vertexSize;
					Vector3F* __0x7442 = (Vector3F*)( __0x7441 + __0x7560.positionOffset );
					*__0x7442 = ( *__0x7442 * __0x7561 ).ToVector3F();

					Vector3F* __0x7443 = (Vector3F*)( __0x7441 + __0x7560.normalOffset );
					*__0x7443 = ( *__0x7443 * __0x7562 ).ToVector3F();

					Vector4F* __0x7444 = (Vector4F*)( __0x7441 + __0x7560.tangentOffset );
					*__0x7444 = new Vector4F( ( ( *__0x7444 ).ToVector3F() * __0x7562 ).ToVector3F(), ( *__0x7444 ).W );
				}
			}
		}

		

		public static void BoolActionGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length == 2 )
				context.Enabled = true;
		}

		public enum BoolActionEnum { Union, Intersect, Subtract }

		
		
		
		

		
		
		
		
		public static void BoolAction( ActionContext actionContext, BoolActionEnum boolAction )
		{
			if( actionContext.SelectionMode != SelectionMode.Object )
				return;

			void Exec( Component_MeshInSpace[] __0x7563, UndoMultiAction __0x7564, UndoMultiAction __0x7565 )
			{
				if( __0x7563.Length != 2 )
					return;

				BoolActionExecute( __0x7563[ 0 ], __0x7563[ 1 ], __0x7564, actionContext.DocumentWindow?.Document, boolAction );
			}
			ExecuteAction( actionContext, Exec );
		}

		public static void BoolActionExecute( Component_MeshInSpace firstMeshInSpace, Component_MeshInSpace secondMeshInSpace, UndoMultiAction undo, DocumentInstance document, BoolActionEnum boolAction )
		{
			
			if( boolAction == BoolActionEnum.Union && 1 < firstMeshInSpace.Mesh.Value.GetComponents<Component_MeshGeometry>().Length )
			{
				__0x7539( firstMeshInSpace.Mesh, document, undo );
			}
			bool __0x7445 = true;
			CommonFunctions.ConvertProceduralMeshGeometries( document, firstMeshInSpace.Mesh, undo, ref __0x7445 );

			List<(Vector3F[] positions, int[] indices)> __0x7446 = __0x7543( firstMeshInSpace );
			(Vector3F[] positions, int[] indices) __0x7447 = __0x7544( __0x7543( secondMeshInSpace ) );

			
			var __0x7448 = firstMeshInSpace.Transform.Value.ToMatrix4().GetInverse() * secondMeshInSpace.Transform.Value.ToMatrix4();
			Net3dBool.Vector3[] __0x7449 = new Net3dBool.Vector3[ __0x7447.positions.Length ];
			for( int __0x7450 = 0; __0x7450 < __0x7447.positions.Length; __0x7450++ )
				__0x7449[ __0x7450 ] = ToNet3DBoolVector3( ( __0x7448 * __0x7447.positions[ __0x7450 ] ).ToVector3F() );
			var __0x7451 = new Net3dBool.Solid( __0x7449, __0x7447.indices );

			var __0x7452 = firstMeshInSpace.Mesh.Value.GetComponents<Component_MeshGeometry>();
			var __0x7453 = new List<(Vector3F[] positions, int[] indices, MeshData.MeshGeometryFormat format)>();
			var __0x7454 = new List<Component_MeshGeometry>();

			for( int __0x7455 = 0; __0x7455 < __0x7446.Count; __0x7455++ )
			{
				var __0x7456 = __0x7446[ __0x7455 ];
				Net3dBool.Vector3[] __0x7457 = __0x7456.positions.Select( ToNet3DBoolVector3 ).ToArray();

				var __0x7458 = new Net3dBool.BooleanModeller( new Net3dBool.Solid( __0x7457, __0x7456.indices ), __0x7451 ); 

				Net3dBool.Solid __0x7459 = null;
				switch( boolAction )
				{
				case BoolActionEnum.Union: __0x7459 = __0x7458.GetUnion(); break;
				case BoolActionEnum.Intersect: __0x7459 = __0x7458.GetIntersection(); break;
				case BoolActionEnum.Subtract: __0x7459 = __0x7458.GetDifference(); break;
				default: return;
				}

				var __0x7460 = __0x7459.getVertices().Select( ToVector3F ).ToArray();
				if( 0 < __0x7460.Length )
					__0x7453.Add( (__0x7460, __0x7459.getIndices(), new MeshData.MeshGeometryFormat( __0x7452[ __0x7455 ].VertexStructure )) );
				else
					__0x7454.Add( __0x7452[ __0x7455 ] );
			}

			foreach( var __0x7530 in __0x7453 )
				if( !__0x7542( __0x7530.positions, __0x7530.indices ) )
					throw new Exception();

			
			if( 0 < __0x7454.Count )
				undo?.AddAction( new UndoActionComponentCreateDelete( document, __0x7454.ToArray(), create: false ) );

			var __0x7461 = MeshData.BuildFromRaw( __0x7453 );
			__0x7461?.Save( firstMeshInSpace.Mesh.Value, __0x7445 ? undo : null, null ); 
			firstMeshInSpace.Mesh.Value?.RebuildStructure();
		}

		static bool __0x7542( Vector3F[] __0x7566, int[] __0x7567 )
		{
			foreach( var __0x7531 in __0x7567 )
			{
				if( __0x7531 < 0 && __0x7566.Length <= __0x7531 )
					return false;
			}
			return true;
		}

		internal static Vector3F ToVector3F( Net3dBool.Vector3 v ) => new Vector3F( (float)v.x, (float)v.y, (float)v.z );

		internal static Net3dBool.Vector3 ToNet3DBoolVector3( Vector3F v ) => new Net3dBool.Vector3( v.X, v.Y, v.Z );

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		

		
		


		
		
		static List<(Vector3F[] positions, int[] indices)> __0x7543( Component_MeshInSpace __0x7568 )
		{
			Component_Mesh.ExtractedStructure __0x7462 = __0x7568.Mesh.Value.ExtractStructure();

			var __0x7463 = new List<(Vector3F[] positions, int[] indices)>();

			
			var __0x7464 = new Vector3F[ __0x7462.MeshGeometries.Length ][];
			for( int __0x7465 = 0; __0x7465 < __0x7462.MeshGeometries.Length; __0x7465++ )
			{
				var __0x7466 = new MeshData.MeshGeometryFormat( __0x7462.MeshGeometries[ __0x7465 ].VertexStructure );
				__0x7464[ __0x7465 ] = new Vector3F[ __0x7462.MeshGeometries[ __0x7465 ].Vertices.Length / __0x7466.vertexSize ];

				unsafe
				{
					fixed ( byte* __0x7467 = __0x7462.MeshGeometries[ __0x7465 ].Vertices )
					{
						for( int __0x7468 = 0; __0x7468 < __0x7464[ __0x7465 ].Length; __0x7468++ )
							__0x7464[ __0x7465 ][ __0x7468 ] = *(Vector3F*)( __0x7467 + __0x7468 * __0x7466.vertexSize + __0x7466.positionOffset );
					}
				}
			}
			

			var __0x7469 = new List<Component_Mesh.StructureClass.FaceVertex>[ __0x7462.MeshGeometries.Length ];
			for( int __0x7470 = 0; __0x7470 < __0x7462.MeshGeometries.Length; __0x7470++ )
				__0x7469[ __0x7470 ] = new List<Component_Mesh.StructureClass.FaceVertex>();
			for( int __0x7471 = 0; __0x7471 < __0x7462.Structure.Faces.Length; __0x7471++ )
			{
				var __0x7472 = __0x7462.Structure.Faces[ __0x7471 ];
				for( int __0x7473 = 0; __0x7473 < __0x7472.Triangles.Length; __0x7473++ )
					__0x7469[ __0x7472.Triangles[ __0x7473 ].RawGeometry ].Add( __0x7472.Triangles[ __0x7473 ] );
			}

			for( int __0x7474 = 0; __0x7474 < __0x7469.Length; __0x7474++ )
			{
				var __0x7475 = __0x7469[ __0x7474 ];
				int[] __0x7476 = new int[ __0x7462.Structure.Vertices.Length ];
				for( int __0x7477 = 0; __0x7477 < __0x7476.Length; __0x7477++ )
					__0x7476[ __0x7477 ] = -1;
				int __0x7478 = 0;
				var __0x7479 = new List<Vector3F>();
				var __0x7480 = new int[ __0x7475.Count ];

				for( int __0x7481 = 0; __0x7481 < __0x7475.Count; __0x7481++ )
				{
					var __0x7482 = __0x7475[ __0x7481 ];
					int __0x7483 = __0x7476[ __0x7482.Vertex ];
					if( __0x7483 == -1 )
					{
						__0x7483 = __0x7478++;
						__0x7476[ __0x7482.Vertex ] = __0x7483;
						__0x7479.Add( __0x7464[ __0x7482.RawGeometry ][ __0x7482.RawVertex ] );
					}
					__0x7480[ __0x7481 ] = __0x7483;
				}
				__0x7463.Add( (__0x7479.ToArray(), __0x7480) );
			}

			return __0x7463;
		}

		

		static (Vector3F[] positions, int[] indices) __0x7544( List<(Vector3F[] positions, int[] indices)> __0x7569 )
		{
			var __0x7484 = new List<Vector3F>();
			var __0x7485 = new List<int>();

			foreach( var __0x7532 in __0x7569 )
			{
				int __0x7486 = __0x7484.Count;
				__0x7484.AddRange( __0x7532.positions );
				int __0x7487 = __0x7485.Count;
				__0x7485.AddRange( __0x7532.indices );
				for( int __0x7488 = __0x7487; __0x7488 < __0x7485.Count; __0x7488++ )
					__0x7485[ __0x7488 ] += __0x7486;
			}
			return (__0x7484.ToArray(), __0x7485.ToArray());
		}

		


		
		
		
		

		
		
		

		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		
		

		

		
		

		
		

		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		

		public static void SetColorGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMesh().mesh != null ||
				0 < actionContext.Selection.VertexCount ||
				0 < actionContext.Selection.EdgeCount ||
				0 < actionContext.Selection.FaceCount
				)
			{
				context.Enabled = true;
			}
		}

		public static void SetColor( ActionContext actionContext, ColorValue color )
		{
			if( actionContext.SelectionMode == SelectionMode.Object )
			{
				var __0x7489 = actionContext.DocumentWindow.Document;
				var __0x7490 = new UndoMultiAction();

				foreach( var __0x7533 in actionContext.GetSelectedMeshInSpaceArray( false ) )
				{
					
					{
						var __0x7491 = (Metadata.Property)__0x7533.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshInSpace.Color ) );
						__0x7490.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7533, __0x7491, __0x7533.Color ) ) );

						__0x7533.Color = color;
					}

					
					{
						var __0x7492 = new ReferenceNoValue( @"Base\Materials\White.material" );

						var __0x7493 = __0x7533.Mesh.Value;
						if( __0x7493 != null )
						{
							if( __0x7493.Parent == __0x7533 )
							{
								foreach( var __0x7534 in __0x7493.GetComponents<Component_MeshGeometry>() )
								{
									if( !__0x7534.Material.ReferenceSpecified && __0x7534.Material.Value == null )
										OneMeshActions.SetMaterialForGeometry( __0x7534, __0x7492, __0x7490 );
								}
							}
						}
					}
				}
				__0x7489.CommitUndoAction( __0x7490 );
			}
			else
				OneMeshActions.SetVertexColor( actionContext, color );
		}

		public static ColorValue? GetInitialColor( ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object )
			{
				var __0x7494 = actionContext.GetSelectedMeshInSpaceArray( false );
				if( 0 < __0x7494.Length )
				{
					ColorValue __0x7495 = __0x7494[ 0 ].Color;
					for( int __0x7496 = 1; __0x7496 < __0x7494.Length; __0x7496++ )
						if( __0x7495 != __0x7494[ __0x7496 ].Color )
							return null;
					return __0x7495;
				}
				else
					return null;
			}
			else
				return OneMeshActions.GetInitialColor( actionContext );
		}

		

		public static void MirrorObjectsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMesh().mesh != null )
			{
				context.Enabled = true;
			}
		}

		public static void MirrorObjects( ActionContext actionContext, int axis )
		{
			void Execute( Component_MeshInSpace[] __0x7570, UndoMultiAction __0x7571, UndoMultiAction __0x7572 )
			{
				foreach( var __0x7535 in __0x7570 )
				{
					bool __0x7497 = __0x7571 != null;
					var __0x7498 = __0x7535.Mesh.Value;
					CommonFunctions.ConvertProceduralMeshGeometries( actionContext.DocumentWindow.Document, __0x7498, __0x7571, ref __0x7497 );

					__0x7545( __0x7498, axis, __0x7497 ? __0x7571 : null );
				}
			}
			ExecuteAction( actionContext, Execute );
		}

		static void __0x7545( Component_Mesh __0x7573, int __0x7574, UndoMultiAction __0x7575 )
		{
			Component_Mesh.ExtractedStructure __0x7499 = __0x7573.ExtractStructure();

			for( int __0x7500 = 0; __0x7500 < __0x7499.MeshGeometries.Length; __0x7500++ )
			{
				var __0x7501 = __0x7499.MeshGeometries[ __0x7500 ];
				__0x7501.Vertices = (byte[])__0x7501.Vertices.Clone();
				__0x7501.Indices = (int[])__0x7501.Indices.Clone();
				var __0x7502 = new MeshData.MeshGeometryFormat( __0x7501.VertexStructure );
				int __0x7503 = __0x7501.Vertices.Length / __0x7502.vertexSize;

				unsafe
				{
					fixed ( byte* __0x7504 = __0x7501.Vertices )
					{
						for( int __0x7505 = 0; __0x7505 < __0x7503; __0x7505++ )
						{
							byte* __0x7506 = __0x7504 + __0x7505 * __0x7502.vertexSize;

							ref Vector3F __0x7507 = ref *(Vector3F*)( __0x7506 + __0x7502.positionOffset );
							ref Vector3F __0x7508 = ref *(Vector3F*)( __0x7506 + __0x7502.normalOffset );
							ref Vector4F __0x7509 = ref *(Vector4F*)( __0x7506 + __0x7502.tangentOffset );
							switch( __0x7574 )
							{
							case 0:
								__0x7507.X = -__0x7507.X;
								if( 0 <= __0x7502.normalOffset )
									__0x7508.X = -__0x7508.X;
								if( 0 <= __0x7502.tangentOffset )
									__0x7509.X = -__0x7509.X;

								break;
							case 1:
								__0x7507.Y = -__0x7507.Y;
								if( 0 <= __0x7502.normalOffset )
									__0x7508.Y = -__0x7508.Y;
								if( 0 <= __0x7502.tangentOffset )
									__0x7509.Y = -__0x7509.Y;
								break;

							case 2:
								__0x7507.Z = -__0x7507.Z;
								if( 0 <= __0x7502.normalOffset )
									__0x7508.Z = -__0x7508.Z;
								if( 0 <= __0x7502.tangentOffset )
									__0x7509.Z = -__0x7509.Z;
								break;
							default: throw new Exception();
							}
						}
					}
				}

				
				for( int __0x7510 = 0; __0x7510 < __0x7501.Indices.Length; __0x7510 += 3 )
				{
					int __0x7511 = __0x7501.Indices[ __0x7510 + 1 ];
					__0x7501.Indices[ __0x7510 + 1 ] = __0x7501.Indices[ __0x7510 + 2 ];
					__0x7501.Indices[ __0x7510 + 2 ] = __0x7511;
				}

				foreach( var __0x7536 in __0x7499.Structure.Faces )
				{
					for( int __0x7512 = 0; __0x7512 < __0x7536.Triangles.Length; __0x7512 += 3 )
					{
						var __0x7513 = __0x7536.Triangles[ __0x7512 + 1 ];
						__0x7536.Triangles[ __0x7512 + 1 ] = __0x7536.Triangles[ __0x7512 + 2 ];
						__0x7536.Triangles[ __0x7512 + 2 ] = __0x7513;
					}
				}
			}

			

			var __0x7514 = __0x7573.GetComponents<Component_MeshGeometry>();

			for( int __0x7515 = 0; __0x7515 < __0x7514.Length; __0x7515++ )
			{
				var __0x7516 = __0x7514[ __0x7515 ];

				if( __0x7516 is Component_MeshGeometry_Procedural )
					throw new Exception();

				if( __0x7575 != null )
				{
					var __0x7517 = (Metadata.Property)__0x7516.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshGeometry.Vertices ) );
					__0x7575.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7516, __0x7517, __0x7516.Vertices ) ) );

					var __0x7518 = (Metadata.Property)__0x7516.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshGeometry.Indices ) );
					__0x7575.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7516, __0x7518, __0x7516.Indices ) ) );
				}
				__0x7516.Vertices = __0x7499.MeshGeometries[ __0x7515 ].Vertices;
				__0x7516.Indices = __0x7499.MeshGeometries[ __0x7515 ].Indices;
			}

			if( __0x7575 != null )
			{
				var __0x7519 = (Metadata.Property)__0x7573.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
				__0x7575.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x7573, __0x7519, __0x7573.Structure ) ) );
			}
			__0x7573.Structure = __0x7499.Structure;
		}

		

		public static void AddPaintLayerGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length > 0 )
				context.Enabled = true;
		}

		public static void AddPaintLayer( ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object )
			{
				var __0x7520 = actionContext.GetSelectedMeshInSpaceArray();
				if( __0x7520.Length != 0 )
				{
					var __0x7521 = new List<Component>();

					foreach( var __0x7537 in __0x7520 )
					{
						var __0x7522 = __0x7537.CreateComponent<Component_PaintLayer>( enabled: false );
						__0x7522.Name = CommonFunctions.GetUniqueFriendlyName( __0x7522 );
						__0x7522.Enabled = true;

						__0x7521.Add( __0x7522 );
					}

					actionContext.DocumentWindow.Focus();

					
					var __0x7523 = actionContext.DocumentWindow.Document;
					var __0x7524 = new UndoActionComponentCreateDelete( __0x7523, __0x7521, true );
					__0x7523.CommitUndoAction( __0x7524 );
					actionContext.DocumentWindow.SelectObjects( __0x7521.ToArray() );
				}
			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	/// <summary>
	/// The class is intended to register Builder 3D add-on.
	/// </summary>
	public class Assembly_Builder3D : AssemblyUtility.AssemblyRegistration
	{
		static EditorRibbonDefaultConfiguration.Group __0x7576;

		

		public override void OnRegister()
		{
			if( EngineApp.ApplicationType == EngineApp.ApplicationTypeEnum.Editor )
			{
				__0x7678();
				__0x7680();

				EditorAPI.EditorActionGetStateEvent += __0x7685;
				EditorAPI.EditorActionClickEvent += __0x7686;
			}
		}

		static void __0x7678()
		{
			foreach( var __0x7669 in __0x7681() )
				__0x7682( __0x7669 );

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x7577 = new EditorAction();
				__0x7577.Name = "Builder 3D Object Selection";
				
				__0x7577.ImageBig = Properties.Resources.SelectionModeObject_32;
				__0x7577.QatSupport = true;
				__0x7577.Description = "Object Mode\nThis is the usual scene editor mode, enabled by default.";
				__0x7577.RibbonText = ("Object", "");
				EditorActions.Register( __0x7577 );
			}

			
			{
				var __0x7578 = new EditorAction();
				__0x7578.Name = "Builder 3D Vertex Selection";
				
				__0x7578.ImageBig = Properties.Resources.SelectionModeVertex_32;
				__0x7578.QatSupport = true;
				__0x7578.Description = "Vertex Mode\nIn this mode you can select the vertices, move them, perform actions to edit them.";
				__0x7578.RibbonText = ("Vertex", "");
				EditorActions.Register( __0x7578 );
			}

			
			{
				var __0x7579 = new EditorAction();
				__0x7579.Name = "Builder 3D Edge Selection";
				
				__0x7579.ImageBig = Properties.Resources.SelectionModeEdge_32;
				__0x7579.QatSupport = true;
				__0x7579.Description = "Edge Mode\nIn this mode you can select the edges, move them, perform actions to edit them.";
				__0x7579.RibbonText = ("Edge", "");
				EditorActions.Register( __0x7579 );
			}

			
			{
				var __0x7580 = new EditorAction();
				__0x7580.Name = "Builder 3D Face Selection";
				
				__0x7580.ImageBig = Properties.Resources.SelectionModeFace_32;
				__0x7580.QatSupport = true;
				__0x7580.Description = "Face Mode\nIn this mode you can select the faces, move them, perform actions to edit them.";
				__0x7580.RibbonText = ("Face", "");
				EditorActions.Register( __0x7580 );
			}



			
			{
				var __0x7581 = new EditorAction();
				__0x7581.Name = "Builder 3D Select All";
				
				__0x7581.ImageBig = Properties.Resources.SelectAll_32;
				__0x7581.QatSupport = true;
				__0x7581.Description = "Select All\nSelects all elements.";
				__0x7581.RibbonText = ("Select", "All");
				EditorActions.Register( __0x7581 );
			}

			
			{
				var __0x7582 = new EditorAction();
				__0x7582.Name = "Builder 3D Invert Selection";
				
				__0x7582.ImageBig = Properties.Resources.InvertSelection_32;
				__0x7582.QatSupport = true;
				__0x7582.Description = "Invert Selection\nSelects all the elements that are not currently selected and removes selection from the currently selected elements.";
				__0x7582.RibbonText = ("Invert", "");
				EditorActions.Register( __0x7582 );
			}

			
			{
				var __0x7583 = new EditorAction();
				__0x7583.Name = "Builder 3D Grow Selection";
				
				__0x7583.ImageBig = Properties.Resources.GrowSelection_32;
				__0x7583.QatSupport = true;
				__0x7583.Description = "Grow Selection\nAdds adjacent elements to the currently selected elements.";
				__0x7583.RibbonText = ("Grow", "");
				EditorActions.Register( __0x7583 );
			}

			
			{
				var __0x7584 = new EditorAction();
				__0x7584.Name = "Builder 3D Select By Material";
				
				__0x7584.ImageBig = Properties.Resources.SelectByMaterial_32;
				__0x7584.QatSupport = true;
				__0x7584.Description = "Select By Material\nSelects all the faces that have the same material as currently selected faces.";
				__0x7584.RibbonText = ("By", "Material");
				EditorActions.Register( __0x7584 );
			}

			
			
			
			
			
			
			
			
			
			
			


			
			{
				var __0x7585 = new EditorAction();
				__0x7585.Name = "Builder 3D Set Material";
				
				__0x7585.ImageBig = Properties.Resources.SetMaterial_32;
				__0x7585.QatSupport = true;
				__0x7585.Description = "Set Material\nSets a material for the selected faces. The material to use has to be selected in the Resources Window.";
				__0x7585.RibbonText = ("Set", "Material");
				EditorActions.Register( __0x7585 );
			}

			
			{
				var __0x7586 = new EditorAction();
				__0x7586.Name = "Builder 3D Set Color";
				__0x7586.ImageSmall = Properties.Resources.Color_16;
				__0x7586.ImageBig = Properties.Resources.Color_32;
				__0x7586.QatSupport = true;
				__0x7586.Description = "Set Color\nSets a color for the selected objects.";
				
				__0x7586.RibbonText = ("Set", "Color");
				EditorActions.Register( __0x7586 );
			}

			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			




			
			{
				var __0x7587 = new EditorAction();
				__0x7587.Name = "Builder 3D Merge Objects";
				
				__0x7587.ImageBig = Properties.Resources.MergeObjects_32;
				__0x7587.QatSupport = true;
				__0x7587.Description = "Merge Objects\nCombines the selected objects into a single one.";
				__0x7587.RibbonText = ("Merge", "");
				EditorActions.Register( __0x7587 );
			}

			
			{
				var __0x7588 = new EditorAction();
				__0x7588.Name = "Builder 3D Mirror Objects X";
				__0x7588.ImageSmall = Properties.Resources.Mirror_16;
				__0x7588.ImageBig = Properties.Resources.Mirror_32;
				__0x7588.QatSupport = true;
				__0x7588.Description = "Mirror Objects";
				__0x7588.RibbonText = ("Mirror", "");
				__0x7588.ContextMenuText = "X";
				EditorActions.Register( __0x7588 );
			}

			
			{
				var __0x7589 = new EditorAction();
				__0x7589.Name = "Builder 3D Mirror Objects Y";
				__0x7589.ImageSmall = Properties.Resources.Mirror_16;
				__0x7589.ImageBig = Properties.Resources.Mirror_32;
				__0x7589.QatSupport = true;
				__0x7589.Description = "Mirror Objects";
				__0x7589.RibbonText = ("Mirror", "");
				__0x7589.ContextMenuText = "Y";
				EditorActions.Register( __0x7589 );
			}

			
			{
				var __0x7590 = new EditorAction();
				__0x7590.Name = "Builder 3D Mirror Objects Z";
				__0x7590.ImageSmall = Properties.Resources.Mirror_16;
				__0x7590.ImageBig = Properties.Resources.Mirror_32;
				__0x7590.QatSupport = true;
				__0x7590.Description = "Mirror Objects";
				__0x7590.RibbonText = ("Mirror", "");
				__0x7590.ContextMenuText = "Z";
				EditorActions.Register( __0x7590 );
			}

			
			{
				var __0x7591 = new EditorAction();
				__0x7591.Name = "Builder 3D Center Pivot";
				__0x7591.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7591.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7591.QatSupport = true;
				__0x7591.Description = "Center Pivot";
				__0x7591.RibbonText = ("Center", "");
				EditorActions.Register( __0x7591 );
			}

			
			{
				var __0x7592 = new EditorAction();
				__0x7592.Name = "Builder 3D Merge Vertices Move To Middle";
				__0x7592.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7592.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7592.QatSupport = true;
				__0x7592.Description = "Merge vertices, move to the middle.";
				__0x7592.RibbonText = ("Merge", "");
				__0x7592.ContextMenuText = "Move to the Middle";
				EditorActions.Register( __0x7592 );
			}

			
			{
				var __0x7593 = new EditorAction();
				__0x7593.Name = "Builder 3D Merge Vertices Move To First";
				__0x7593.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7593.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7593.QatSupport = true;
				__0x7593.Description = "Merge vertices, move to the first vertex.";
				__0x7593.RibbonText = ("Merge", "");
				__0x7593.ContextMenuText = "Move to the First Vertex";
				EditorActions.Register( __0x7593 );
			}

			
			{
				var __0x7594 = new EditorAction();
				__0x7594.Name = "Builder 3D Split Vertices";
				
				__0x7594.ImageBig = Properties.Resources.SplitVertices_32;
				__0x7594.QatSupport = true;
				__0x7594.Description = "Split Vertices\nMakes the vertices that are shared by many triangles independent.";
				__0x7594.RibbonText = ("Split", "");
				EditorActions.Register( __0x7594 );
			}


			
			{
				var __0x7595 = new EditorAction();
				__0x7595.Name = "Builder 3D Bridge Edges";
				
				__0x7595.ImageBig = Properties.Resources.BridgeEdges_32;
				__0x7595.QatSupport = true;
				__0x7595.Description = "Bridge Edges\nConnects two selected edges with a new face.";
				__0x7595.RibbonText = ("Bridge", "");
				EditorActions.Register( __0x7595 );
			}

			
			{
				var __0x7596 = new EditorAction();
				__0x7596.Name = "Builder 3D Extrude Edges";
				__0x7596.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7596.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7596.QatSupport = true;
				__0x7596.Description = "Extrude Edges";
				__0x7596.RibbonText = ("Extrude", "");
				EditorActions.Register( __0x7596 );
			}

			
			{
				var __0x7597 = new EditorAction();
				__0x7597.Name = "Builder 3D Bevel Edges";
				__0x7597.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7597.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7597.QatSupport = true;
				__0x7597.Description = "Bevel Edges";
				__0x7597.RibbonText = ("Bevel", "");
				EditorActions.Register( __0x7597 );
			}



			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x7598 = new EditorAction();
				__0x7598.Name = "Builder 3D Merge Faces";
				
				__0x7598.ImageBig = Properties.Resources.MergeFaces_32;
				__0x7598.QatSupport = true;
				__0x7598.Description = "Merge Faces\nCombines selected faces into a single one.";
				__0x7598.RibbonText = ("Merge", "");
				EditorActions.Register( __0x7598 );
			}

			
			{
				var __0x7599 = new EditorAction();
				__0x7599.Name = "Builder 3D Detach Faces To Mesh In Space";
				__0x7599.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7599.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7599.QatSupport = true;
				__0x7599.Description = "Detach faces to mesh in space.";
				__0x7599.RibbonText = ("Detach", "");
				__0x7599.ContextMenuText = "Detach Faces to Mesh In Space";
				EditorActions.Register( __0x7599 );
			}

			
			{
				var __0x7600 = new EditorAction();
				__0x7600.Name = "Builder 3D Detach Faces To Mesh Geometry";
				__0x7600.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7600.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7600.QatSupport = true;
				__0x7600.Description = "Detach faces to mesh geometry.";
				__0x7600.RibbonText = ("Detach", "");
				__0x7600.ContextMenuText = "Detach Faces to Mesh Geometry";
				EditorActions.Register( __0x7600 );
			}

			
			{
				var __0x7601 = new EditorAction();
				__0x7601.Name = "Builder 3D Detach Faces To Mesh Geometry (Split Vertices)";
				__0x7601.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7601.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7601.QatSupport = true;
				__0x7601.Description = "Detach faces to mesh geometry (Split Vertices).";
				__0x7601.RibbonText = ("Detach", "");
				__0x7601.ContextMenuText = "Detach Faces to Mesh Geometry (Split Vertices)";
				EditorActions.Register( __0x7601 );
			}

			
			{
				var __0x7602 = new EditorAction();
				__0x7602.Name = "Builder 3D Triangulate Faces";
				
				__0x7602.ImageBig = Properties.Resources.TriangulateFaces_32;
				__0x7602.QatSupport = true;
				__0x7602.Description = "Triangulate Faces\nSplits selected faces to the separate triangles.";
				__0x7602.RibbonText = ("Triangulate", "");
				EditorActions.Register( __0x7602 );
			}

			
			{
				var __0x7603 = new EditorAction();
				__0x7603.Name = "Builder 3D Extrude Faces";
				__0x7603.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7603.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7603.QatSupport = true;
				__0x7603.Description = "Extrude Faces";
				__0x7603.RibbonText = ("Extrude", "");
				EditorActions.Register( __0x7603 );
			}

			
			{
				var __0x7604 = new EditorAction();
				__0x7604.Name = "Builder 3D Subdivide Faces";
				__0x7604.ImageSmall = NeoAxis.Properties.Resources.Default_16;
				__0x7604.ImageBig = NeoAxis.Properties.Resources.Default_32;
				__0x7604.QatSupport = true;
				__0x7604.Description = "Subdivide Faces";
				__0x7604.RibbonText = ("Subdivide", "");
				EditorActions.Register( __0x7604 );
			}

			
			{
				var __0x7605 = new EditorAction();
				__0x7605.Name = "Builder 3D Conform Normals";
				
				__0x7605.ImageBig = Properties.Resources.ConformNormals_32;
				__0x7605.QatSupport = true;
				__0x7605.Description = "Conform Normals\nFix invalid normals of the mesh.";
				__0x7605.RibbonText = ("Conform", "Normals");
				EditorActions.Register( __0x7605 );
			}

			
			{
				var __0x7606 = new EditorAction();
				__0x7606.Name = "Builder 3D Flip Normals";
				
				__0x7606.ImageBig = Properties.Resources.FlipNormals_32;
				__0x7606.QatSupport = true;
				__0x7606.Description = "Flip Normals\nInverts the normals of selected faces.";
				__0x7606.RibbonText = ("Flip", "Normals");
				EditorActions.Register( __0x7606 );
			}

			
			{
				var __0x7607 = new EditorAction();
				__0x7607.Name = "Builder 3D Smooth Normals";
				
				__0x7607.ImageBig = Properties.Resources.SmoothNormals_32;
				__0x7607.QatSupport = true;
				__0x7607.Description = "Smooth Normals\nSmooths the normals of selected faces.";
				__0x7607.RibbonText = ("Smooth", "Normals");
				EditorActions.Register( __0x7607 );
			}

			
			{
				var __0x7608 = new EditorAction();
				__0x7608.Name = "Builder 3D Flat Normals";
				
				__0x7608.ImageBig = Properties.Resources.FlatNormals_32;
				__0x7608.QatSupport = true;
				__0x7608.Description = "Flat Normals\nRecalculates the normals of selected faces so that they do not have smoothing.";
				__0x7608.RibbonText = ("Flat", "Normals");
				EditorActions.Register( __0x7608 );
			}

			
			{
				var __0x7609 = new EditorAction();
				__0x7609.Name = "Builder 3D Union";
				__0x7609.ImageSmall = Properties.Resources.Union_16;
				__0x7609.ImageBig = Properties.Resources.Union_32;
				__0x7609.QatSupport = true;
				__0x7609.Description = "Union\nExecutes constructive solid geometry union operation for two selected objects.";
				__0x7609.RibbonText = ("Union", "");
				EditorActions.Register( __0x7609 );
			}

			
			{
				var __0x7610 = new EditorAction();
				__0x7610.Name = "Builder 3D Subtract";
				__0x7610.ImageSmall = Properties.Resources.Subtract_16;
				__0x7610.ImageBig = Properties.Resources.Subtract_32;
				__0x7610.QatSupport = true;
				__0x7610.Description = "Subtract\nExecutes constructive solid geometry difference operation for two selected objects.";
				__0x7610.RibbonText = ("Subtract", "");
				EditorActions.Register( __0x7610 );
			}

			
			{
				var __0x7611 = new EditorAction();
				__0x7611.Name = "Builder 3D Intersect";
				__0x7611.ImageSmall = Properties.Resources.Intersect_16;
				__0x7611.ImageBig = Properties.Resources.Intersect_32;
				__0x7611.QatSupport = true;
				__0x7611.Description = "Intersect\nExecutes constructive solid geometry intersect operation for two selected objects.";
				__0x7611.RibbonText = ("Intersect", "");
				EditorActions.Register( __0x7611 );
			}

			foreach( var __0x7670 in __0x7683( Assembly.GetExecutingAssembly() ) )
				__0x7684( __0x7670 );

			
			{
				var __0x7612 = new EditorAction();
				__0x7612.Name = "Builder 3D Add Paint Layer";
				__0x7612.ImageSmall = NeoAxis.Properties.Resources.Layers_16;
				__0x7612.ImageBig = NeoAxis.Properties.Resources.Layers_32;
				__0x7612.QatSupport = true;
				__0x7612.Description = "Add Paint Layer\nAdds a masked paint layer.";
				__0x7612.RibbonText = ("Add", "Layer");
				EditorActions.Register( __0x7612 );
			}

			AssemblyUtility.RegisterAssemblyEvent += __0x7679;
		}

		private static void __0x7679( Assembly __0x7687 )
		{
			
			if( __0x7687 == Assembly.GetExecutingAssembly() )
				return;

			foreach( var __0x7671 in __0x7683( __0x7687 ) )
			{
				__0x7684( __0x7671 );

				if( __0x7576 != null )
				{
					var __0x7613 = __0x7671.GetUserFriendlyNameForInstance();
					__0x7576.AddAction( "Builder 3D New Mesh Modifier " + __0x7613 );
				}
			}
		}

		static void __0x7680()
		{
			var __0x7614 = new EditorRibbonDefaultConfiguration.Tab( "Builder 3D", "Builder 3D", MetadataManager.GetTypeOfNetType( typeof( Component_Scene ) ) );
			EditorRibbonDefaultConfiguration.Tabs.Add( __0x7614 );

			
			{
				var __0x7615 = new EditorRibbonDefaultConfiguration.Group( "New" );
				__0x7614.Groups.Add( __0x7615 );

				var __0x7616 = new EditorRibbonDefaultConfiguration.Group( "New Shape" );
				__0x7615.Children.Add( __0x7616 );
				__0x7616.DropDownGroupText = ("Shape", "");
				__0x7616.DropDownGroupImageLarge = Properties.Resources.NewShape_32;
				__0x7616.DropDownGroupDescription = "Creates a new primitive.";
				

				foreach( var __0x7672 in __0x7681() )
					__0x7616.AddAction( "Builder 3D New Shape " + __0x7672 );

				
				
				
			}

			
			{
				var __0x7617 = new EditorRibbonDefaultConfiguration.Group( "Selection Mode" );
				__0x7614.Groups.Add( __0x7617 );
				__0x7617.AddAction( "Builder 3D Object Selection" );
				__0x7617.AddAction( "Builder 3D Vertex Selection" );
				__0x7617.AddAction( "Builder 3D Edge Selection" );
				__0x7617.AddAction( "Builder 3D Face Selection" );
			}

			
			{
				var __0x7618 = new EditorRibbonDefaultConfiguration.Group( "Selection Tools" );
				__0x7614.Groups.Add( __0x7618 );
				__0x7618.AddAction( "Builder 3D Select All" );
				__0x7618.AddAction( "Builder 3D Invert Selection" );
				__0x7618.AddAction( "Builder 3D Grow Selection" );
				__0x7618.AddAction( "Builder 3D Select By Material" );
				
			}

			
			{
				var __0x7619 = new EditorRibbonDefaultConfiguration.Group( "Material Tools" );
				__0x7614.Groups.Add( __0x7619 );
				__0x7619.AddAction( "Builder 3D Set Material" );
				__0x7619.AddAction( "Builder 3D Set Color" );
				
			}

			
			{
				var __0x7620 = new EditorRibbonDefaultConfiguration.Group( "Object Tools" );
				__0x7614.Groups.Add( __0x7620 );
				__0x7620.AddAction( "Builder 3D Merge Objects" );

				{
					var __0x7621 = new EditorRibbonDefaultConfiguration.Group( "Mirror" );
					__0x7620.Children.Add( __0x7621 );
					__0x7621.DropDownGroupText = ("Mirror", "");
					__0x7621.DropDownGroupImageLarge = Properties.Resources.Mirror_32;
					__0x7621.DropDownGroupDescription = "Mirror Objects\nCreates a mirror transformation of the selected object.";
					__0x7621.AddAction( "Builder 3D Mirror Objects X" );
					__0x7621.AddAction( "Builder 3D Mirror Objects Y" );
					__0x7621.AddAction( "Builder 3D Mirror Objects Z" );
				}
				

				
			}

			
			{
				var __0x7622 = new EditorRibbonDefaultConfiguration.Group( "Vertex Tools" );
				__0x7614.Groups.Add( __0x7622 );

				{
					var __0x7623 = new EditorRibbonDefaultConfiguration.Group( "Merge Vertices" );
					__0x7622.Children.Add( __0x7623 );
					__0x7623.DropDownGroupText = ("Merge", "");
					__0x7623.DropDownGroupImageLarge = Properties.Resources.MergeVertices_32;
					__0x7623.DropDownGroupDescription = "Merge Vertices\nMerges selected vertices into the single vertex.";
					__0x7623.AddAction( "Builder 3D Merge Vertices Move To Middle" );
					__0x7623.AddAction( "Builder 3D Merge Vertices Move To First" );
				}

				__0x7622.AddAction( "Builder 3D Split Vertices" );
			}

			
			{
				var __0x7624 = new EditorRibbonDefaultConfiguration.Group( "Edge" );
				
				__0x7614.Groups.Add( __0x7624 );
				__0x7624.AddAction( "Builder 3D Bridge Edges" );
				
				
			}

			
			{
				var __0x7625 = new EditorRibbonDefaultConfiguration.Group( "Face Tools" );
				__0x7614.Groups.Add( __0x7625 );
				
				

				

				
				__0x7625.AddAction( "Builder 3D Merge Faces" );
				__0x7625.AddAction( "Builder 3D Triangulate Faces" );

				{
					var __0x7626 = new EditorRibbonDefaultConfiguration.Group( "Detach Faces" );
					__0x7625.Children.Add( __0x7626 );
					__0x7626.DropDownGroupText = ("Detach", "");
					__0x7626.DropDownGroupImageLarge = Properties.Resources.DetachFaces_32;
					__0x7626.DropDownGroupDescription = "Detach Faces\nRemoves selected faces from a geometry and places them in a new geometry.";
					__0x7626.AddAction( "Builder 3D Detach Faces To Mesh Geometry" );
					__0x7626.AddAction( "Builder 3D Detach Faces To Mesh Geometry (Split Vertices)" );
					__0x7626.AddAction( "Builder 3D Detach Faces To Mesh In Space" );
				}

				
				
				__0x7625.AddAction( "Builder 3D Conform Normals" );
				__0x7625.AddAction( "Builder 3D Flip Normals" );
				__0x7625.AddAction( "Builder 3D Smooth Normals" );
				__0x7625.AddAction( "Builder 3D Flat Normals" );
			}

			
			{
				var __0x7627 = new EditorRibbonDefaultConfiguration.Group( "Boolean" );
				__0x7614.Groups.Add( __0x7627 );
				__0x7627.AddAction( "Builder 3D Union" );
				__0x7627.AddAction( "Builder 3D Subtract" );
				__0x7627.AddAction( "Builder 3D Intersect" );
			}

			
			{
				var __0x7628 = new EditorRibbonDefaultConfiguration.Group( "Modify" );
				__0x7614.Groups.Add( __0x7628 );

				var __0x7629 = new EditorRibbonDefaultConfiguration.Group( "Add Mesh Modifier" );
				__0x7628.Children.Add( __0x7629 );
				__0x7629.DropDownGroupText = ("Add", "Modifier");
				__0x7629.DropDownGroupImageLarge = NeoAxis.Properties.Resources.Modify_32;
				__0x7629.DropDownGroupDescription = "Add Mesh Modifier\nAdds a mesh modifier to the object.";

				__0x7576 = __0x7629;

				foreach( var __0x7673 in __0x7683( Assembly.GetExecutingAssembly() ) )
				{
					var __0x7630 = __0x7673.GetUserFriendlyNameForInstance();
					__0x7629.AddAction( "Builder 3D New Mesh Modifier " + __0x7630 );
				}

				__0x7628.AddAction( "Builder 3D Add Paint Layer" );
			}
		}

		static List<string> __0x7681()
		{
			var __0x7631 = new List<string>();
			__0x7631.Add( "Arch" );
			__0x7631.Add( "Box" );
			__0x7631.Add( "Capsule" );
			__0x7631.Add( "Cone" );
			__0x7631.Add( "Cylinder" );
			__0x7631.Add( "Door" );
			__0x7631.Add( "Pipe" );
			__0x7631.Add( "Plane" );
			__0x7631.Add( "Prism" );
			__0x7631.Add( "Sphere" );
			__0x7631.Add( "Stairs" );
			__0x7631.Add( "Torus" );
			__0x7631.Add( "PolygonBasedPolyhedron" );
			return __0x7631;
		}

		static void __0x7682( string __0x7688 )
		{
			var __0x7632 = TypeUtility.DisplayNameAddSpaces( __0x7688 );

			var __0x7633 = new EditorAction();
			__0x7633.Name = "Builder 3D New Shape " + __0x7688;
			__0x7633.ImageSmall = NeoAxis.Properties.Resources.New_16;
			__0x7633.ImageBig = Properties.Resources.NewShape_32;
			__0x7633.QatSupport = true;
			var __0x7634 = __0x7632;
			__0x7633.RibbonText = (__0x7634, "");
			__0x7633.ContextMenuText = __0x7634;
			__0x7633.UserData = __0x7688;
			__0x7633.GetState += delegate ( EditorAction.GetStateContext __0x7689 )
			{
				if( __0x7689.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow != null )
					__0x7689.Enabled = true;
			};
			__0x7633.Click += delegate ( EditorAction.ClickContext __0x7690 )
			{
				var __0x7635 = __0x7690.ObjectsInFocus.DocumentWindow as Component_Scene_DocumentWindow;
				var __0x7636 = __0x7635.Scene;
				var __0x7637 = (string)__0x7633.UserData;

				var __0x7638 = MetadataManager.GetType( "NeoAxis.Component_MeshGeometry_" + __0x7637 );

				var __0x7639 = __0x7636.CreateComponent<Component_MeshInSpace>( enabled: false );
				__0x7639.Name = EditorUtility.GetUniqueFriendlyName( __0x7639, __0x7638.GetUserFriendlyNameForInstance() );

				var __0x7640 = __0x7639.CreateComponent<Component_Mesh>();
				__0x7640.Name = "Mesh";

				var __0x7641 = __0x7640.CreateComponent( __0x7638 );
				__0x7641.Name = "Mesh Geometry";

				__0x7639.Mesh = ReferenceUtility.MakeThisReference( __0x7639, __0x7640 );

				__0x7635.CalculateCreateObjectPosition( __0x7639, __0x7639, new Vector2( 0.5, 0.5 ) );

				__0x7639.Enabled = true;

				if( __0x7638 == MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_PolygonBasedPolyhedron ) ) )
				{
					__0x7635.StartObjectCreationMode( __0x7638, __0x7639 );
					
					foreach( var __0x7674 in __0x7641.GetComponents<Component_MeshGeometry_PolygonBasedPolyhedron_Point>() )
						__0x7674.RemoveFromParent( false );
				}
				else
				{
					
					var __0x7642 = new Component[] { __0x7639 };
					var __0x7643 = __0x7690.ObjectsInFocus.DocumentWindow.Document;
					var __0x7644 = new UndoActionComponentCreateDelete( __0x7643, __0x7642, true );
					__0x7643.CommitUndoAction( __0x7644 );
					__0x7635.SelectObjects( __0x7642 );
				}

				__0x7635.Focus();
			};
			EditorActions.Register( __0x7633 );
		}

		static List<Metadata.TypeInfo> __0x7683( Assembly __0x7691 )
		{
			var __0x7645 = new List<Metadata.TypeInfo>();

			foreach( var __0x7675 in __0x7691.GetTypes() )
			{
				try
				{
					if( typeof( Component_MeshModifier ).IsAssignableFrom( __0x7675 ) && !__0x7675.IsAbstract )
					{
						var __0x7646 = MetadataManager.GetTypeOfNetType( __0x7675 );
						if( __0x7646 != null )
							__0x7645.Add( __0x7646 );
					}
				}
				catch { }
			}

			CollectionUtility.InsertionSort( __0x7645, delegate ( Metadata.TypeInfo __0x7692, Metadata.TypeInfo __0x7693 )
			{
				if( __0x7692 == MetadataManager.GetTypeOfNetType( typeof( Component_MeshModifier ) ) )
					return -1;
				if( __0x7693 == MetadataManager.GetTypeOfNetType( typeof( Component_MeshModifier ) ) )
					return 1;

				var __0x7647 = __0x7692.GetUserFriendlyNameForInstance();
				var __0x7648 = __0x7693.GetUserFriendlyNameForInstance();
				return string.Compare( __0x7647, __0x7648 );
			} );

			return __0x7645;
		}

		static void __0x7684( Metadata.TypeInfo __0x7694 )
		{
			var __0x7649 = __0x7694.GetUserFriendlyNameForInstance();

			List<Component_Mesh> GetSelectedMeshes( object[] __0x7695 )
			{
				var __0x7650 = new List<Component_Mesh>();

				foreach( var __0x7676 in __0x7695 )
				{
					if( __0x7676 is Component_Mesh mesh )
						__0x7650.Add( mesh );

					var __0x7651 = __0x7676 as Component_MeshInSpace;
					if( __0x7651 != null )
					{
						var __0x7652 = __0x7651.Mesh.Value;
						if( __0x7652 != null )
							__0x7650.Add( __0x7652 );
					}
				}

				return __0x7650;
			}

			var __0x7653 = new EditorAction();
			__0x7653.Name = "Builder 3D New Mesh Modifier " + __0x7649;
			__0x7653.ImageSmall = NeoAxis.Properties.Resources.Modify_16;
			__0x7653.ImageBig = NeoAxis.Properties.Resources.Modify_32;
			__0x7653.QatSupport = true;
			__0x7653.RibbonText = (__0x7649, "");
			__0x7653.ContextMenuText = __0x7649;
			__0x7653.UserData = __0x7694;
			__0x7653.GetState += delegate ( EditorAction.GetStateContext __0x7696 )
			{
				if( GetSelectedMeshes( __0x7696.ObjectsInFocus.Objects ).Count != 0 )
					__0x7696.Enabled = true;
			};
			__0x7653.Click += delegate ( EditorAction.ClickContext __0x7697 )
			{
				var __0x7654 = GetSelectedMeshes( __0x7697.ObjectsInFocus.Objects );
				if( __0x7654.Count != 0 )
				{
					var __0x7655 = __0x7697.ObjectsInFocus.DocumentWindow;
					var __0x7656 = (Metadata.TypeInfo)__0x7653.UserData;

					var __0x7657 = new List<Component>();

					foreach( var __0x7677 in __0x7654 )
					{
						var __0x7658 = __0x7677.CreateComponent( __0x7656, enabled: false );
						__0x7658.Name = CommonFunctions.GetUniqueFriendlyName( __0x7658 );
						__0x7658.Enabled = true;

						__0x7657.Add( __0x7658 );

						__0x7655.Focus();
					}

					
					var __0x7659 = __0x7697.ObjectsInFocus.DocumentWindow.Document;
					var __0x7660 = new UndoActionComponentCreateDelete( __0x7659, __0x7657, true );
					__0x7659.CommitUndoAction( __0x7660 );
					__0x7655.SelectObjects( __0x7657.ToArray() );
				}
			};
			EditorActions.Register( __0x7653 );
		}

		private void __0x7685( EditorAction.GetStateContext __0x7698 )
		{
			var __0x7661 = new ActionContext( __0x7698 );

			switch( __0x7698.Action.Name )
			{
			
			
			
			
			
			
			
			
			

			case "Builder 3D Object Selection":
				__0x7698.Enabled = __0x7661.DocumentWindow is Component_Scene_DocumentWindow;
				__0x7698.Checked = __0x7661.BuilderWorkareaMode == null;
				break;
			case "Builder 3D Vertex Selection":
				__0x7698.Enabled = __0x7661.DocumentWindow is Component_Scene_DocumentWindow;
				__0x7698.Checked = __0x7661.SelectionMode == SelectionMode.Vertex;
				break;
			case "Builder 3D Edge Selection":
				__0x7698.Enabled = __0x7661.DocumentWindow is Component_Scene_DocumentWindow;
				__0x7698.Checked = __0x7661.SelectionMode == SelectionMode.Edge;
				break;
			case "Builder 3D Face Selection":
				__0x7698.Enabled = __0x7661.DocumentWindow is Component_Scene_DocumentWindow;
				__0x7698.Checked = __0x7661.SelectionMode == SelectionMode.Face;
				break;

			case "Builder 3D Merge Vertices Move To Middle":
			case "Builder 3D Merge Vertices Move To First":
				OneMeshActions.MergeVerticesGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Split Vertices":
				OneMeshActions.SplitVerticesGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Select All":
				__0x7661.BuilderWorkareaMode?.SelectAllGetState( __0x7698 );
				break;

			case "Builder 3D Invert Selection":
				__0x7661.BuilderWorkareaMode?.InvertSelectionGetState( __0x7698 );
				break;

			case "Builder 3D Bridge Edges":
				OneMeshActions.BridgeEdgesGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Conform Normals":
				OneMeshActions.ConformNormalsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Flat Normals":
				OneMeshActions.FlatNormalsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Smooth Normals":
				OneMeshActions.SmoothNormalsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Flip Normals":
				OneMeshActions.FlipNormalsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Merge Faces":
				OneMeshActions.MergeFacesGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Triangulate Faces":
				OneMeshActions.TriangulateFacesGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Detach Faces To Mesh Geometry (Split Vertices)":
				OneMeshActions.DetachFacesGetState( __0x7698, __0x7661, false );
				break;

			case "Builder 3D Detach Faces To Mesh Geometry":
				OneMeshActions.DetachFacesGetState( __0x7698, __0x7661, false );
				break;

			case "Builder 3D Detach Faces To Mesh In Space":
				OneMeshActions.DetachFacesGetState( __0x7698, __0x7661, true );
				break;

			case "Builder 3D Set Material":
				OneMeshActions.SetMaterialGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Set Color":
				Actions.SetColorGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Grow Selection":
				OneMeshActions.GrowSelectionGetState( __0x7698, __0x7661 );
				break;
			case "Builder 3D Select By Material":
				OneMeshActions.SelectByMaterialGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Merge Objects":
				Actions.MergeObjectsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Mirror Objects X":
			case "Builder 3D Mirror Objects Y":
			case "Builder 3D Mirror Objects Z":
				Actions.MirrorObjectsGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Union":
			case "Builder 3D Intersect":
			case "Builder 3D Subtract":
				Actions.BoolActionGetState( __0x7698, __0x7661 );
				break;

			case "Builder 3D Add Paint Layer":
				Actions.AddPaintLayerGetState( __0x7698, __0x7661 );
				break;

			}
		}

		private void __0x7686( EditorAction.ClickContext __0x7699 )
		{
			var __0x7662 = new ActionContext( __0x7699 );

			switch( __0x7699.Action.Name )
			{
			
			
			
			

			
			
			
			

			
			
			
			

			case "Builder 3D Object Selection":
			case "Builder 3D Vertex Selection":
			case "Builder 3D Edge Selection":
			case "Builder 3D Face Selection":
				{
					
					
					
					
					
					
					
					

					
					
					var __0x7663 = __0x7662.DocumentWindow as Component_Scene_DocumentWindow;
					if( __0x7663 != null )
					{
						if( __0x7699.Action.Name != "Builder 3D Object Selection" )
						{
							if( __0x7663.WorkareaModeName != "Builder3D" )
							{
								var __0x7664 = new BuilderWorkareaMode( __0x7663 );
								__0x7663.WorkareaModeSet( "Builder3D", __0x7664 );
							}

							var __0x7665 = __0x7663.WorkareaMode as BuilderWorkareaMode;
							if( __0x7665 != null )
							{
								switch( __0x7699.Action.Name )
								{
								case "Builder 3D Vertex Selection": __0x7665.ChangeSelectionMode( SelectionMode.Vertex ); break;
								case "Builder 3D Edge Selection": __0x7665.ChangeSelectionMode( SelectionMode.Edge ); break;
								case "Builder 3D Face Selection": __0x7665.ChangeSelectionMode( SelectionMode.Face ); break;
								}
							}
						}
						else
							__0x7663.WorkareaModeSet( "" );
					}
				}
				break;

			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			case "Builder 3D Merge Vertices Move To Middle":
			case "Builder 3D Merge Vertices Move To First":
				{
					bool __0x7666 = __0x7699.Action.Name == "Builder 3D Merge Vertices Move To First";
					
					OneMeshActions.MergeVertices( __0x7662, __0x7666 );
					
					
				}
				break;

			case "Builder 3D Split Vertices":
				OneMeshActions.SplitVertices( __0x7662, false, true );
				break;

			case "Builder 3D Select All":
				__0x7662.BuilderWorkareaMode?.SelectAll();
				break;

			case "Builder 3D Invert Selection":
				__0x7662.BuilderWorkareaMode?.InvertSelection();
				break;

			case "Builder 3D Bridge Edges":
				OneMeshActions.BridgeEdges( __0x7662 );
				break;

			case "Builder 3D Conform Normals":
				OneMeshActions.ConformNormals( __0x7662 );
				break;

			case "Builder 3D Flat Normals":
				OneMeshActions.FlatNormals( __0x7662 );
				break;

			case "Builder 3D Smooth Normals":
				OneMeshActions.SmoothNormals( __0x7662 );
				break;

			case "Builder 3D Flip Normals":
				OneMeshActions.FlipNormals( __0x7662 );
				break;

			case "Builder 3D Merge Faces":
				OneMeshActions.MergeFaces( __0x7662 );
				break;
			case "Builder 3D Triangulate Faces":
				OneMeshActions.TriangulateFaces( __0x7662 );
				break;
			case "Builder 3D Detach Faces To Mesh Geometry":
				OneMeshActions.DetachFaces( __0x7662, false, false );
				break;
			case "Builder 3D Detach Faces To Mesh Geometry (Split Vertices)":
				OneMeshActions.DetachFaces( __0x7662, false, true );
				break;
			case "Builder 3D Detach Faces To Mesh In Space":
				OneMeshActions.DetachFaces( __0x7662, true, true );
				break;

			case "Builder 3D Set Material":
				OneMeshActions.SetMaterial( __0x7662 );
				break;

			case "Builder 3D Set Color":
				{
					var __0x7667 = Actions.GetInitialColor( __0x7662 ) ?? new ColorValue( 1, 1, 1 );

					var __0x7668 = new ColorValuePoweredSelectForm();
					__0x7668.StartPosition = FormStartPosition.Manual;
					__0x7668.Location = new System.Drawing.Point( Cursor.Position.X + 10, Cursor.Position.Y + 10 );
					__0x7668.Init( __0x7667.ToColorValuePowered(), false, false, null, false );
					if( __0x7668.ShowDialog( EditorForm.Instance ) == DialogResult.OK )
					{
						Actions.SetColor( __0x7662, __0x7668.CurrentValue.ToColorValue() );
					}
				}
				break;

			case "Builder 3D Grow Selection":
				OneMeshActions.GrowSelection( __0x7662 );
				break;
			case "Builder 3D Select By Material":
				OneMeshActions.SelectByMaterial( __0x7662 );
				break;
			case "Builder 3D Merge Objects":
				Actions.MergeObjects( __0x7662 );
				break;

			case "Builder 3D Mirror Objects X":
				Actions.MirrorObjects( __0x7662, 0 );
				break;
			case "Builder 3D Mirror Objects Y":
				Actions.MirrorObjects( __0x7662, 1 );
				break;
			case "Builder 3D Mirror Objects Z":
				Actions.MirrorObjects( __0x7662, 2 );
				break;

			case "Builder 3D Union":
				Actions.BoolAction( __0x7662, Actions.BoolActionEnum.Union );
				break;
			case "Builder 3D Intersect":
				Actions.BoolAction( __0x7662, Actions.BoolActionEnum.Intersect );
				break;
			case "Builder 3D Subtract":
				Actions.BoolAction( __0x7662, Actions.BoolActionEnum.Subtract );
				break;

			case "Builder 3D Add Paint Layer":
				Actions.AddPaintLayer( __0x7662 );
				break;

			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	public class BuilderWorkareaMode : Component_Scene_DocumentWindow.WorkareaModeClass_Scene
	{
		public SelectionMode selectionMode;
		

		
		Component_MeshInSpace __0x7700;
		
		internal MeshData meshToEditData;
		readonly List<Vertex> __0x7701 = new List<Vertex>();
		List<Edge> __0x7702 = new List<Edge>();
		List<Face> __0x7703 = new List<Face>();
		internal Component_Mesh.ExtractedStructure meshExtractedStructure;

		bool __0x7704;

		bool __0x7705;

		__0x8024 __0x7706;
		Task __0x7707;

		__0x8025 __0x7708;
		Task __0x7709;

		

		public class Vertex
		{
			public int Index;

			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			public Rectangle lastLabelScreenRectangle;
		}

		

		public class Edge
		{
			public int Index;


			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			
			
		}

		

		public class Face
		{
			public int Index;


			public Vector3 Position;
			public Quaternion Rotation = Quaternion.Identity;
			public Vector3 Scale = Vector3.One;

			
			
		}

		

		class __0x8024
		{
			public MeshData meshToEditData;

			public Matrix4 meshInSpaceTransformInvert;
			public Component_Mesh.CompiledData meshCompiledData_OnlyToCompare;
			public bool meshInSpaceTwoSided;
			public Vector3F[] meshExtractedVerticesPositions;
			public int[] meshExtractedIndices;
			public MeshRayTestOptimized meshRayTestOptimized;

			public List<Vertex> meshVertices;
			public Vector3 viewportCameraSettingsPosition;

			public ESet<Vertex> visiblePoints;
		}

		

		class __0x8025
		{
			public MeshData meshToEditData;

			public List<Vertex> meshVertices;
			public List<Edge> meshEdges;
			public Component_Mesh.ExtractedStructure meshExtractedStructure;
			public Vector3 viewportCameraSettingsPosition;

			public ESet<int> visibleEdges;
		}

		

		public BuilderWorkareaMode( Component_Scene_DocumentWindow documentWindow )
			: base( documentWindow )
		{
			
			

			if( __0x7975( DocumentWindow.SelectedObjects, out var meshInSpace ) )
			{
				__0x7700 = meshInSpace;
				
				UpdateMeshData();

				
				DocumentWindow.SelectObjects( null );
			}

			DocumentWindow.Document.UndoSystem.ListOfActionsChanged += __0x7974;
			DocumentWindow.SelectedObjectsChanged += __0x7976;
		}

		protected override void OnDestroy()
		{
			DocumentWindow.Document.UndoSystem.ListOfActionsChanged -= __0x7974;
			DocumentWindow.SelectedObjectsChanged -= __0x7976;

			
			if( !EditorAPI.ClosingApplication )
			{
				if( __0x7700 != null && __0x7700.EnabledInHierarchy )
					DocumentWindow.SelectObjects( new object[] { __0x7700 } );
				else
				{
					if( DocumentWindow.SelectedObjects.FirstOrDefault( __0x7979 => __0x7979 is Vertex || __0x7979 is Edge || __0x7979 is Face ) != null )
						DocumentWindow.SelectObjects( null );
				}

				
				
				
				
				
				
				
				
				
				
				
			}
		}

		protected override bool OnMouseDown( Viewport viewport, EMouseButtons button )
		{
			return false;
		}

		protected override bool OnMouseUp( Viewport viewport, EMouseButtons button )
		{
			return false;
		}

		protected override void OnTick( Viewport viewport, double delta )
		{
			

			var __0x7710 = GetMeshToEdit();
			if( __0x7710 != null && !__0x7710.EnabledInHierarchy )
				__0x7705 = true;

			if( __0x7705 )
				UpdateMeshData();

			
			{
				bool __0x7711 = false;

				foreach( var __0x7918 in DocumentWindow.SelectedObjects )
				{
					var __0x7712 = __0x7918 as Vertex;
					if( __0x7712 != null && !__0x7701.Contains( __0x7712 ) )
					{
						__0x7711 = true;
						break;
					}

					var __0x7713 = __0x7918 as Edge;
					if( __0x7713 != null && !__0x7702.Contains( __0x7713 ) )
					{
						__0x7711 = true;
						break;
					}

					var __0x7714 = __0x7918 as Face;
					if( __0x7714 != null && !__0x7703.Contains( __0x7714 ) )
					{
						__0x7711 = true;
						break;
					}
				}

				if( __0x7711 )
					DocumentWindow.SelectObjects( null );
			}

			__0x7977( viewport );
			__0x7978( viewport );
		}

		static bool __0x7960( __0x8024 __0x7980, Ray __0x7981, out double __0x7982, out int __0x7983 )
		{
			__0x7982 = 0;
			__0x7983 = -1;

			RayF __0x7715 = __0x7981.ToRayF();

			
			var __0x7716 = __0x7980.meshRayTestOptimized.RayTest( __0x7715, MeshRayTestOptimized.Mode.OneClosest, __0x7980.meshInSpaceTwoSided );
			if( __0x7716.Length > 0 )
			{
				var __0x7717 = __0x7716[ 0 ];
				__0x7982 = __0x7717.Scale;
				__0x7983 = __0x7717.TriangleIndex;
				return true;
			}

			return false;
		}

		static bool __0x7961( __0x8024 __0x7984, Ray __0x7985, out double __0x7986, out int __0x7987 )
		{
			Ray __0x7718 = __0x7984.meshInSpaceTransformInvert * __0x7985;

			if( __0x7960( __0x7984, __0x7718, out __0x7986, out __0x7987 ) )
				return true;

			__0x7986 = 0;
			__0x7987 = -1;
			return false;
		}

		static bool __0x7962( __0x8024 __0x7988, Vector3 __0x7989 )
		{
			var __0x7719 = new Vector3[] {
				Vector3.Zero,
				new Vector3( -0.05, 0,0 ), new Vector3( 0.05, 0,0 ),
				new Vector3( 0, -0.05, 0 ), new Vector3( 0, 0.05, 0 ) ,
				new Vector3( 0, 0, -0.05 ), new Vector3( 0, 0, 0.05 ) };

			foreach( var __0x7919 in __0x7719 )
			{
				var __0x7720 = ( __0x7989 + __0x7919 ) - __0x7988.viewportCameraSettingsPosition;
				var __0x7721 = __0x7720.Normalize();
				__0x7720 *= __0x7721 - 0.05;

				var __0x7722 = new Ray( __0x7988.viewportCameraSettingsPosition, __0x7720 );
				if( !__0x7961( __0x7988, __0x7722, out _, out _ ) )
					return true;
			}

			return false;
		}

		static void __0x7963( object __0x7990 )
		{
			var __0x7723 = (__0x8024)__0x7990;

			__0x7723.meshRayTestOptimized = new MeshRayTestOptimized( __0x7723.meshExtractedVerticesPositions, __0x7723.meshExtractedIndices );

			__0x7723.visiblePoints = new ESet<Vertex>( __0x7723.meshVertices.Count );
			foreach( var __0x7920 in __0x7723.meshVertices )
			{
				if( __0x7962( __0x7723, __0x7920.Position ) )
					__0x7723.visiblePoints.Add( __0x7920 );
			}
		}

		ESet<Vertex> __0x7964( Viewport __0x7991 )
		{
			if( __0x7706 != null && __0x7706.meshToEditData == meshToEditData )
				return __0x7706.visiblePoints;
			return new ESet<Vertex>();
		}

		void __0x7965( Viewport __0x7992, Vertex __0x7993, List<CanvasRenderer.TriangleVertex> __0x7994 )
		{
			var __0x7724 = __0x7992.RenderingContext.objectInSpaceRenderingContext;
			
			
			

			if( __0x7992.CameraSettings.ProjectToScreenCoordinates( __0x7993.Position, out Vector2 screenPosition ) )
			{
				if( new Rectangle( 0, 0, 1, 1 ).Contains( ref screenPosition ) )
				{
					
					
					
					
					Vector2 __0x7725 = new Vector2( 20, 20 );
					Vector2 __0x7726 = new Vector2( 5, 5 );
					double __0x7727 = 100;

					double __0x7728 = ( __0x7993.Position - __0x7992.CameraSettings.Position ).Length();
					if( __0x7728 < __0x7727 )
					{
						Vector2 __0x7729 = Vector2.Lerp( __0x7725, __0x7726, __0x7728 / __0x7727 );
						Vector2 __0x7730 = __0x7729 / __0x7992.SizeInPixels.ToVector2();

						ColorValue __0x7731;
						double __0x7732;
						if( __0x7724.selectedObjects.Contains( __0x7993 ) )
						{
							__0x7731 = ProjectSettings.Get.SelectedColor;
							__0x7732 = 0.5;
						}
						else if( __0x7724.canSelectObjects.Contains( __0x7993 ) )
						{
							__0x7731 = ProjectSettings.Get.CanSelectColor;
							__0x7732 = 0.5;
						}
						else
						{
							__0x7731 = ProjectSettings.Get.ScreenLabelColor;
							__0x7732 = 0.4;
						}

						Rectangle __0x7733 = new Rectangle( screenPosition - __0x7730 * .5, screenPosition + __0x7730 * .5 );
						var __0x7734 = new Rectangle( screenPosition - __0x7730 * .5 * __0x7732, screenPosition + __0x7730 * .5 * __0x7732 ).ToRectangleF();

						var __0x7735 = new CanvasRenderer.TriangleVertex( __0x7734.LeftTop, __0x7731, new Vector2F( 0, 0 ) );
						var __0x7736 = new CanvasRenderer.TriangleVertex( __0x7734.RightTop, __0x7731, new Vector2F( 1, 0 ) );
						var __0x7737 = new CanvasRenderer.TriangleVertex( __0x7734.RightBottom, __0x7731, new Vector2F( 1, 1 ) );
						var __0x7738 = new CanvasRenderer.TriangleVertex( __0x7734.LeftBottom, __0x7731, new Vector2F( 0, 1 ) );
						__0x7994.Add( __0x7735 );
						__0x7994.Add( __0x7736 );
						__0x7994.Add( __0x7737 );
						__0x7994.Add( __0x7737 );
						__0x7994.Add( __0x7738 );
						__0x7994.Add( __0x7735 );
						
						
						

						__0x7993.lastLabelScreenRectangle = __0x7733;
					}
				}
			}
		}

		void __0x7966( Viewport __0x7995 )
		{
			var __0x7739 = new List<CanvasRenderer.TriangleVertex>( 256 );

			var __0x7740 = __0x7964( __0x7995 );

			for( var __0x7741 = 0; __0x7741 < __0x7701.Count; __0x7741++ )
			{
				var __0x7742 = __0x7701[ __0x7741 ];
				__0x7742.lastLabelScreenRectangle = Rectangle.Cleared;

				if( __0x7740.Contains( __0x7742 ) )
					__0x7965( __0x7995, __0x7742, __0x7739 );
			}

			if( __0x7739.Count != 0 )
			{
				var __0x7743 = ResourceManager.LoadResource<Component_Image>( "Base\\UI\\Images\\Circle.png" );
				__0x7995.CanvasRenderer.AddTriangles( __0x7739, __0x7743, true );
			}
		}

		ESet<int> __0x7967( Viewport __0x7996 )
		{
			if( __0x7708 != null && __0x7708.meshToEditData == meshToEditData )
				return __0x7708.visibleEdges;
			return new ESet<int>();
		}

		static void __0x7968( object __0x7997 )
		{
			var __0x7744 = (__0x8025)__0x7997;

			__0x7744.visibleEdges = new ESet<int>( __0x7744.meshEdges.Count );

			var __0x7745 = new Dictionary<Vector2I, int>( __0x7744.meshEdges.Count );
			{
				foreach( var __0x7921 in __0x7744.meshEdges )
				{
					if( __0x7921.Index < __0x7744.meshExtractedStructure.Structure.Edges.Length )
					{
						var __0x7746 = __0x7744.meshExtractedStructure.Structure.Edges[ __0x7921.Index ];

						int __0x7747, __0x7748;
						if( __0x7746.Vertex1 > __0x7746.Vertex2 )
						{
							__0x7747 = __0x7746.Vertex2;
							__0x7748 = __0x7746.Vertex1;
						}
						else
						{
							__0x7747 = __0x7746.Vertex1;
							__0x7748 = __0x7746.Vertex2;
						}
						var __0x7749 = new Vector2I( __0x7747, __0x7748 );

						__0x7745[ __0x7749 ] = __0x7921.Index;
					}
				}
			}

			foreach( var __0x7922 in __0x7744.meshExtractedStructure.Structure.Faces )
			{
				for( int __0x7750 = 0; __0x7750 < __0x7922.Triangles.Length / 3; __0x7750++ )
				{
					var __0x7751 = __0x7922.Triangles[ __0x7750 * 3 + 0 ].Vertex;
					var __0x7752 = __0x7922.Triangles[ __0x7750 * 3 + 1 ].Vertex;
					var __0x7753 = __0x7922.Triangles[ __0x7750 * 3 + 2 ].Vertex;

					
					var __0x7754 = __0x7744.meshVertices[ __0x7751 ].Position.ToVector3F();
					var __0x7755 = __0x7744.meshVertices[ __0x7752 ].Position.ToVector3F();
					var __0x7756 = __0x7744.meshVertices[ __0x7753 ].Position.ToVector3F();

					var __0x7757 = Plane.FromPoints( __0x7754, __0x7755, __0x7756 );
					if( __0x7757.GetSide( __0x7744.viewportCameraSettingsPosition ) == Plane.Side.Positive )
					{

						void AddEdge( int __0x7998, int __0x7999 )
						{
							int __0x7758, __0x7759;
							if( __0x7998 > __0x7999 )
							{
								__0x7758 = __0x7999;
								__0x7759 = __0x7998;
							}
							else
							{
								__0x7758 = __0x7998;
								__0x7759 = __0x7999;
							}
							var __0x7760 = new Vector2I( __0x7758, __0x7759 );

							if( __0x7745.TryGetValue( __0x7760, out var index ) )
								__0x7744.visibleEdges.AddWithCheckAlreadyContained( index );
						}

						AddEdge( __0x7751, __0x7752 );
						AddEdge( __0x7752, __0x7753 );
						AddEdge( __0x7753, __0x7751 );
					}
				}
			}
		}

		void __0x7969( Viewport __0x8000 )
		{
			var __0x7761 = __0x8000.RenderingContext.objectInSpaceRenderingContext;
			var __0x7762 = __0x8000.Simple3DRenderer;

			var __0x7763 = new List<Line3F>( __0x7701.Count * 4 );
			var __0x7764 = new List<Line3F>( __0x7701.Count * 4 );
			var __0x7765 = new List<Line3F>( __0x7701.Count * 4 );

			foreach( var __0x7923 in __0x7967( __0x8000 ) )
			{
				var __0x7766 = meshExtractedStructure.Structure.Edges[ __0x7923 ];
				var __0x7767 = __0x7702[ __0x7923 ];

				
				var __0x7768 = __0x7701[ __0x7766.Vertex1 ].Position.ToVector3F();
				var __0x7769 = __0x7701[ __0x7766.Vertex2 ].Position.ToVector3F();
				var __0x7770 = new Line3F( __0x7768, __0x7769 );

				__0x7763.Add( __0x7770 );

				if( __0x7761.selectedObjects.Contains( __0x7767 ) )
					__0x7765.Add( __0x7770 );
				else if( __0x7761.canSelectObjects.Contains( __0x7767 ) )
					__0x7764.Add( __0x7770 );
			}

			if( __0x7763.Count != 0 )
			{
				__0x7762.SetColor( new ColorValue( 0, 0, 1 ) );
				foreach( var __0x7924 in __0x7763 )
					__0x7762.AddLineThin( __0x7924 );
			}

			if( __0x7764.Count != 0 )
			{
				var __0x7771 = ProjectSettings.Get.CanSelectColor.Value;
				
				__0x7762.SetColor( __0x7771 );

				foreach( var __0x7925 in __0x7764 )
					__0x7762.AddLine( __0x7925 );
			}

			if( __0x7765.Count != 0 )
			{
				var __0x7772 = ProjectSettings.Get.SelectedColor.Value;
				
				__0x7762.SetColor( __0x7772 );

				foreach( var __0x7926 in __0x7765 )
					__0x7762.AddLine( __0x7926 );
			}
		}

		void __0x7970( Viewport __0x8001 )
		{
			var __0x7773 = __0x8001.RenderingContext.objectInSpaceRenderingContext;
			var __0x7774 = __0x8001.Simple3DRenderer;

			var __0x7775 = new List<Line3F>( __0x7701.Count * 4 );
			
			var __0x7776 = new List<Vector3F>( __0x7701.Count * 4 );
			var __0x7777 = new List<Vector3F>( __0x7701.Count * 4 );

			foreach( var __0x7927 in __0x7703 )
			{
				if( __0x7927.Index < meshExtractedStructure.Structure.Faces.Length )
				{
					var __0x7778 = meshExtractedStructure.Structure.Faces[ __0x7927.Index ];

					var __0x7779 = new Dictionary<Vector2I, int>( __0x7778.Triangles.Length );

					for( int __0x7780 = 0; __0x7780 < __0x7778.Triangles.Length / 3; __0x7780++ )
					{
						var __0x7781 = __0x7778.Triangles[ __0x7780 * 3 + 0 ].Vertex;
						var __0x7782 = __0x7778.Triangles[ __0x7780 * 3 + 1 ].Vertex;
						var __0x7783 = __0x7778.Triangles[ __0x7780 * 3 + 2 ].Vertex;

						
						var __0x7784 = __0x7701[ __0x7781 ].Position.ToVector3F();
						var __0x7785 = __0x7701[ __0x7782 ].Position.ToVector3F();
						var __0x7786 = __0x7701[ __0x7783 ].Position.ToVector3F();

						var __0x7787 = Plane.FromPoints( __0x7784, __0x7785, __0x7786 );
						if( __0x7787.GetSide( __0x8001.CameraSettings.Position ) == Plane.Side.Positive )
						{

							void AddEdge( int __0x8002, int __0x8003 )
							{
								int __0x7788, __0x7789;
								if( __0x8002 > __0x8003 )
								{
									__0x7788 = __0x8003;
									__0x7789 = __0x8002;
								}
								else
								{
									__0x7788 = __0x8002;
									__0x7789 = __0x8003;
								}
								var __0x7790 = new Vector2I( __0x7788, __0x7789 );
								__0x7779.TryGetValue( __0x7790, out var count );
								__0x7779[ __0x7790 ] = count + 1;
							}

							AddEdge( __0x7781, __0x7782 );
							AddEdge( __0x7782, __0x7783 );
							AddEdge( __0x7783, __0x7781 );
							
							
							

							if( __0x7773.selectedObjects.Contains( __0x7927 ) )
							{
								__0x7777.Add( __0x7784 );
								__0x7777.Add( __0x7785 );
								__0x7777.Add( __0x7786 );
							}
							else if( __0x7773.canSelectObjects.Contains( __0x7927 ) )
							{
								__0x7776.Add( __0x7784 );
								__0x7776.Add( __0x7785 );
								__0x7776.Add( __0x7786 );
							}
						}
					}

					foreach( var __0x7928 in __0x7779 )
					{
						if( __0x7928.Value == 1 )
						{
							var __0x7791 = __0x7928.Key;

							
							var __0x7792 = __0x7701[ __0x7791.X ].Position.ToVector3F();
							var __0x7793 = __0x7701[ __0x7791.Y ].Position.ToVector3F();
							__0x7775.Add( new Line3F( __0x7792, __0x7793 ) );
						}
					}
				}
			}

			if( __0x7775.Count != 0 )
			{
				__0x7774.SetColor( new ColorValue( 0, 0, 1 ) );
				foreach( var __0x7929 in __0x7775 )
					__0x7774.AddLineThin( __0x7929 );
			}
			
			
			
			
			

			if( __0x7776.Count != 0 )
			{
				var __0x7794 = ProjectSettings.Get.CanSelectColor.Value;
				__0x7794.Alpha *= 0.5f;
				__0x7774.SetColor( __0x7794 );

				__0x7774.AddTriangles( __0x7776, false, true );
			}

			if( __0x7777.Count != 0 )
			{
				var __0x7795 = ProjectSettings.Get.SelectedColor.Value;
				__0x7795.Alpha *= 0.5f;
				__0x7774.SetColor( __0x7795 );

				__0x7774.AddTriangles( __0x7777, false, true );
			}
		}

		protected override void OnUpdateBeforeOutput( Viewport viewport )
		{
			if( meshToEditData != null )
			{
				
				if( __0x7704 )
					__0x7972( viewport );

				
				if( selectionMode == SelectionMode.Vertex )
					__0x7966( viewport );

				
				if( selectionMode == SelectionMode.Edge && meshExtractedStructure != null )
					__0x7969( viewport );

				
				if( selectionMode == SelectionMode.Face && meshExtractedStructure != null )
					__0x7970( viewport );
			}
		}

		protected override void OnGetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.OnGetTextInfoCenterBottomCorner( lines );

			var __0x7796 = GetMeshToEdit();
			if( __0x7796 != null )
				if( !CommonFunctions.CheckValidMesh( __0x7796, out var error ) )
					lines.Add( error );
		}

		public override bool AllowSelectObjects
		{
			get { return true; }
		}

		public override bool AllowCreateObjectsByDrop
		{
			get { return true; }
		}

		public override bool AllowCreateObjectsByClick
		{
			get { return false; }
		}

		public override bool AllowCreateObjectsByBrush
		{
			get { return false; }
		}

		protected override bool OnGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect )
		{
			var __0x7797 = DocumentWindow.Viewport;

			
			if( selectionMode == SelectionMode.Vertex )
			{
				foreach( var __0x7930 in __0x7701 )
				{
					if( !__0x7930.lastLabelScreenRectangle.IsCleared() )
					{
						if( __0x7797.CameraSettings.ProjectToScreenCoordinates( __0x7930.Position, out var screenPosition ) )
						{
							if( rectangle.Contains( screenPosition ) )
								objectsToSelect.Add( __0x7930 );
						}
					}
				}
			}

			
			if( selectionMode == SelectionMode.Edge && meshExtractedStructure != null )
			{
				foreach( var __0x7931 in __0x7967( __0x7797 ) )
				{
					var __0x7798 = meshExtractedStructure.Structure.Edges[ __0x7931 ];
					var __0x7799 = __0x7702[ __0x7931 ];

					var __0x7800 = __0x7701[ __0x7798.Vertex1 ].Position;
					var __0x7801 = __0x7701[ __0x7798.Vertex2 ].Position;
					var __0x7802 = ( __0x7800 + __0x7801 ) / 2;

					if( __0x7797.CameraSettings.ProjectToScreenCoordinates( __0x7802, out var screenPosition ) )
					{
						if( rectangle.Contains( screenPosition ) )
							objectsToSelect.Add( __0x7799 );
					}
				}
			}

			
			if( selectionMode == SelectionMode.Face && meshExtractedStructure != null )
			{
				foreach( var __0x7932 in __0x7703 )
				{
					if( __0x7932.Index < meshExtractedStructure.Structure.Faces.Length )
					{
						var __0x7803 = meshExtractedStructure.Structure.Faces[ __0x7932.Index ];

						for( int __0x7804 = 0; __0x7804 < __0x7803.Triangles.Length / 3; __0x7804++ )
						{
							var __0x7805 = __0x7803.Triangles[ __0x7804 * 3 + 0 ].Vertex;
							var __0x7806 = __0x7803.Triangles[ __0x7804 * 3 + 1 ].Vertex;
							var __0x7807 = __0x7803.Triangles[ __0x7804 * 3 + 2 ].Vertex;

							var __0x7808 = __0x7701[ __0x7805 ].Position;
							var __0x7809 = __0x7701[ __0x7806 ].Position;
							var __0x7810 = __0x7701[ __0x7807 ].Position;

							var __0x7811 = Plane.FromPoints( __0x7808, __0x7809, __0x7810 );
							if( __0x7811.GetSide( __0x7797.CameraSettings.Position ) == Plane.Side.Positive )
							{
								var __0x7812 = ( __0x7808 + __0x7809 + __0x7810 ) / 3;

								if( __0x7797.CameraSettings.ProjectToScreenCoordinates( __0x7812, out var screenPosition ) )
								{
									if( rectangle.Contains( screenPosition ) )
									{
										objectsToSelect.Add( __0x7932 );
										break;
									}
								}
							}
						}
					}
				}
			}

			return true;
		}

		static bool __0x7971( Viewport __0x8004, Vector3 __0x8005, Vector3 __0x8006 )
		{
			double __0x7813 = 6 * EditorAPI.DPIScale;

			var __0x7814 = Vector2.Zero;
			

			Vector2 __0x7815 = __0x8004.SizeInPixels.ToVector2();
			Vector2 __0x7816 = __0x8004.MousePosition * __0x7815;

			Vector2 __0x7817;
			if( !__0x8004.CameraSettings.ProjectToScreenCoordinates( __0x8005, out __0x7817 ) )
				return false;
			Vector2 __0x7818;
			if( !__0x8004.CameraSettings.ProjectToScreenCoordinates( __0x8006, out __0x7818 ) )
				return false;

			Vector2 __0x7819 = __0x7817 * __0x7815;
			Vector2 __0x7820 = __0x7818 * __0x7815;

			Rectangle __0x7821 = new Rectangle( __0x7819 );
			__0x7821.Add( __0x7820 );
			__0x7821.Expand( __0x7813 );

			if( !__0x7821.Contains( __0x7816 ) )
				return false;

			__0x7814 = MathAlgorithms.ProjectPointToLine( __0x7819, __0x7820, __0x7816 );

			double __0x7822 = ( __0x7816 - __0x7814 ).Length();
			if( __0x7822 > __0x7813 )
				return false;

			
			

			return true;
		}

		protected override bool OnGetMouseOverObjectToSelectByClick( Component_Scene_DocumentWindow.GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x7823 = DocumentWindow.Viewport;
			var __0x7824 = __0x7823.MousePosition;

			double __0x7825 = double.MaxValue;

			
			DocumentWindow.GetMouseOverObjectInSpaceToSelectByClick( context );
			if( context.ResultObject != null )
			{
				if( __0x7700 == context.ResultObject )
					context.ResultObject = null;
				else
				{
					

					
					if( __0x7975( new object[] { context.ResultObject }, out var meshInSpace ) )
					{
						if( context.ResultPosition.HasValue )
							__0x7825 = ( context.ResultPosition.Value - __0x7823.CameraSettings.Position ).Length();
						else
							__0x7825 = 0;
					}
					else
						context.ResultObject = null;
				}
			}

			
			if( selectionMode == SelectionMode.Vertex )
			{
				foreach( var __0x7933 in __0x7701 )
				{
					if( __0x7823.CameraSettings.ProjectToScreenCoordinates( __0x7933.Position, out var screenPosition ) )
					{
						if( !__0x7933.lastLabelScreenRectangle.IsCleared() && __0x7933.lastLabelScreenRectangle.Contains( __0x7824 ) )
						{
							var __0x7826 = ( __0x7933.Position - __0x7823.CameraSettings.Position ).Length();
							if( __0x7826 < __0x7825 )
							{
								__0x7825 = __0x7826;
								context.ResultObject = __0x7933;
								context.ResultPosition = __0x7933.Position;
							}
						}
					}
				}
			}

			
			if( selectionMode == SelectionMode.Edge && meshExtractedStructure != null )
			{
				foreach( var __0x7934 in __0x7967( __0x7823 ) )
				{
					var __0x7827 = meshExtractedStructure.Structure.Edges[ __0x7934 ];
					var __0x7828 = __0x7702[ __0x7934 ];

					var __0x7829 = __0x7701[ __0x7827.Vertex1 ].Position;
					var __0x7830 = __0x7701[ __0x7827.Vertex2 ].Position;
					var __0x7831 = ( __0x7829 + __0x7830 ) / 2;

					if( __0x7971( __0x7823, __0x7829, __0x7830 ) )
					{
						var __0x7832 = ( __0x7831 - __0x7823.CameraSettings.Position ).Length();
						if( __0x7832 < __0x7825 )
						{
							__0x7825 = __0x7832;
							context.ResultObject = __0x7828;
						}
					}
				}
			}

			
			if( selectionMode == SelectionMode.Face && meshExtractedStructure != null )
			{
				var __0x7833 = __0x7823.CameraSettings.GetRayByScreenCoordinates( __0x7824 );

				foreach( var __0x7935 in __0x7703 )
				{
					if( __0x7935.Index < meshExtractedStructure.Structure.Faces.Length )
					{
						var __0x7834 = meshExtractedStructure.Structure.Faces[ __0x7935.Index ];

						for( int __0x7835 = 0; __0x7835 < __0x7834.Triangles.Length / 3; __0x7835++ )
						{
							var __0x7836 = __0x7834.Triangles[ __0x7835 * 3 + 0 ].Vertex;
							var __0x7837 = __0x7834.Triangles[ __0x7835 * 3 + 1 ].Vertex;
							var __0x7838 = __0x7834.Triangles[ __0x7835 * 3 + 2 ].Vertex;

							var __0x7839 = __0x7701[ __0x7836 ].Position;
							var __0x7840 = __0x7701[ __0x7837 ].Position;
							var __0x7841 = __0x7701[ __0x7838 ].Position;

							var __0x7842 = new Bounds( __0x7839 );
							__0x7842.Add( ref __0x7840 );
							__0x7842.Add( ref __0x7841 );

							if( __0x7842.Intersects( ref __0x7833 ) && MathAlgorithms.IntersectTriangleRay( ref __0x7839, ref __0x7840, ref __0x7841, ref __0x7833 ) )
							{
								var __0x7843 = ( __0x7839 + __0x7840 + __0x7841 ) / 3;

								var __0x7844 = ( __0x7843 - __0x7823.CameraSettings.Position ).Length();
								if( __0x7844 < __0x7825 )
								{
									__0x7825 = __0x7844;
									context.ResultObject = __0x7935;
								}
							}
						}
					}
				}
			}

			return true;
		}
		
		protected override bool OnTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject )
		{
			Vector3 GetCenter() => __0x7845;

			if( forObject is Vertex vertex )
				transformToolObject = new TransformToolObject_Vertex( vertex, GetCenter );
			else if( forObject is Edge edge )
				transformToolObject = new TransformToolObject_Edge( edge, meshToEditData, __0x7701, GetCenter );
			else if( forObject is Face face )
				transformToolObject = new TransformToolObject_Face( face, meshToEditData, __0x7701, GetCenter );
			
			return true;
		}

		Vector3 __0x7845;
		protected override bool OnTransformToolModifyBegin()
		{
			__0x7704 = true;

			
			var __0x7846 = DocumentWindow.TransformTool.Objects;
			Vector3 __0x7847 = Vector3.Zero;
			foreach( var __0x7936 in __0x7846 )
				__0x7847 += __0x7936.Position;
			__0x7845 = __0x7847 / __0x7846.Count;

			return true;
		}

		protected override bool OnTransformToolModifyCommit()
		{

			int[] __0x7848 = null;


			switch( selectionMode )
			{
			
			case SelectionMode.Vertex: __0x7848 = GetSelectedVertices( DocumentWindow ); break;

			case SelectionMode.Edge:
				{
					var __0x7849 = new HashSet<int>();
					foreach( int __0x7937 in GetSelectedEdges( DocumentWindow ) )
					{
						__0x7849.Add( meshToEditData.Edges[ __0x7937 ].Vertex1 );
						__0x7849.Add( meshToEditData.Edges[ __0x7937 ].Vertex2 );
					}
					__0x7848 = __0x7849.ToArray();
					break;
				}

			case SelectionMode.Face:
				{
					var __0x7850 = new HashSet<int>();
					foreach( int __0x7938 in GetSelectedFaces( DocumentWindow ) )
						foreach( var __0x7939 in meshToEditData.Faces[ __0x7938 ].Triangles )
							__0x7850.Add( __0x7939.Vertex );
					__0x7848 = __0x7850.ToArray();
					break;
				}
			}

			if( __0x7848 != null )
			{
				var __0x7851 = __0x7700.TransformV.ToMatrix4().GetInverse();

				var __0x7852 = new Vector3F[ __0x7848.Length ];
				for( int __0x7853 = 0; __0x7853 < __0x7848.Length; __0x7853++ )
				{
					var __0x7854 = __0x7848[ __0x7853 ];
					var __0x7855 = __0x7701[ __0x7854 ];

					var __0x7856 = __0x7851 * __0x7855.Position;

					__0x7852[ __0x7853 ] = __0x7856.ToVector3F();
				}

				OneMeshActions.MoveVertices( new ActionContext( DocumentWindow ), __0x7848, __0x7852 );
			}


			

			__0x7704 = false;

			return true;
		}

		protected override bool OnTransformToolModifyCancel()
		{
			__0x7704 = false;

			return true;
		}

		protected override bool OnTransformToolCloneAndSelectObjects()
		{
			

			return true;
		}

		protected override void OnEditorActionGetState( EditorAction.GetStateContext context )
		{
			switch( context.Action.Name )
			{
			case "Delete":
				OneMeshActions.DeleteFacesGetState( context, new ActionContext( context ) );

				
				
				
				
				break;
			case "Duplicate":
				OneMeshActions.CloneFacesGetState( context, new ActionContext( context ) );
				break;
			}

		}

		protected override void OnEditorActionClick( EditorAction.ClickContext context )
		{
			switch( context.Action.Name )
			{
			case "Delete":
				OneMeshActions.DeleteFaces( new ActionContext( context ) );
				SelectFaces( new int[] { } );
				break;
			case "Duplicate":
				OneMeshActions.CloneFaces( new ActionContext( context ) );
				break;
			}
		}

		public Component_Mesh GetMeshToEdit()
		{
			if( __0x7700 != null )
				return __0x7700.Mesh;
			return null;
		}

		public static (Component_MeshInSpace meshInSpace, Component_Mesh mesh) GetSelectedMesh( DocumentWindow documentWindow, object[] objectsInFocus )
		{
			var __0x7857 = GetWorkareaMode( documentWindow );

			if( __0x7857 != null )
				return (__0x7857.__0x7700, __0x7857.GetMeshToEdit());
			else
			{
				if( objectsInFocus != null && objectsInFocus.Length > 0 )
				{
					var __0x7858 = objectsInFocus[ 0 ] as Component_MeshInSpace;
					if( __0x7858 != null )
						return (__0x7858, __0x7858.Mesh);
				}
				else
				{
					var __0x7859 = documentWindow?.SelectedObjects;
					if( __0x7859 != null && 0 < __0x7859.Length && __0x7859[ 0 ] is Component_MeshInSpace meshInSpace )
						return (meshInSpace, meshInSpace.Mesh);
				}
				return (null, null);
			}
		}

		public static Selection GetSelection( DocumentWindow documentWindow )
		{
			var __0x7860 = new Selection();
			__0x7860.SelectionMode = SelectionMode.Object;

			var __0x7861 = GetWorkareaMode( documentWindow );
			if( __0x7861 != null )
			{
				__0x7860.SelectionMode = __0x7861.selectionMode;
				var __0x7862 = new List<int>();
				var __0x7863 = documentWindow.SelectedObjects;
				switch( __0x7861.selectionMode )
				{
				case SelectionMode.Vertex:
					{
						foreach( var __0x7940 in __0x7863 )
							if( __0x7940 is Vertex vertex )
								__0x7862.Add( vertex.Index );
						__0x7860.Vertices = __0x7862.ToArray();
						break;
					}
				case SelectionMode.Edge:
					{
						foreach( var __0x7941 in __0x7863 )
							if( __0x7941 is Edge edge )
								__0x7862.Add( edge.Index );
						__0x7860.Edges = __0x7862.ToArray();
						break;
					}
				case SelectionMode.Face:
					{
						foreach( var __0x7942 in __0x7863 )
							if( __0x7942 is Face face )
								__0x7862.Add( face.Index );
						__0x7860.Faces = __0x7862.ToArray();
						break;
					}
				}
			}

			__0x7860.Changed = false;
			return __0x7860;
		}

		
		public static int[] GetSelectedVertices( DocumentWindow documentWindow )
		{
			var __0x7864 = GetWorkareaMode( documentWindow );
			return __0x7864 == null ? new int[ 0 ] : __0x7864.GetSelectedVertices();
		}

		public int[] GetSelectedVertices()
		{
			var __0x7865 = new List<int>();
			if( selectionMode == SelectionMode.Vertex )
			{
				foreach( var __0x7943 in DocumentWindow.SelectedObjects )
					if( __0x7943 is Vertex vertex )
						__0x7865.Add( vertex.Index );
			}
			return __0x7865.ToArray();
		}

		public static int[] GetSelectedEdges( DocumentWindow documentWindow )
		{
			var __0x7866 = GetWorkareaMode( documentWindow );
			return __0x7866 == null ? new int[ 0 ] : __0x7866.GetSelectedEdges();
		}

		public int[] GetSelectedEdges()
		{
			var __0x7867 = new List<int>();
			if( selectionMode == SelectionMode.Edge )
			{
				foreach( var __0x7944 in DocumentWindow.SelectedObjects )
					if( __0x7944 is Edge edge )
						__0x7867.Add( edge.Index );
			}
			return __0x7867.ToArray();
		}

		public static int[] GetSelectedFaces( DocumentWindow documentWindow )
		{
			var __0x7868 = GetWorkareaMode( documentWindow );
			return __0x7868 == null ? new int[ 0 ] : __0x7868.GetSelectedFaces();
		}

		public int[] GetSelectedFaces()
		{
			var __0x7869 = new List<int>();

			if( selectionMode == SelectionMode.Face )
			{
				foreach( var __0x7945 in DocumentWindow.SelectedObjects )
					if( __0x7945 is Face face )
						__0x7869.Add( face.Index );
			}
			return __0x7869.ToArray();
		}

		void __0x7972( Viewport __0x8007 )
		{
			var __0x7870 = __0x8007.Simple3DRenderer;

			__0x7870.SetColor( new ColorValue( 0, 0, 1 ) );

			foreach( var __0x7946 in meshToEditData.Faces )
			{
				for( int __0x7871 = 0; __0x7871 < __0x7946.Triangles.Count / 3; __0x7871++ )
				{
					var __0x7872 = __0x7946.Triangles[ __0x7871 * 3 + 0 ].Vertex;
					var __0x7873 = __0x7946.Triangles[ __0x7871 * 3 + 1 ].Vertex;
					var __0x7874 = __0x7946.Triangles[ __0x7871 * 3 + 2 ].Vertex;

					var __0x7875 = __0x7701[ __0x7872 ].Position;
					var __0x7876 = __0x7701[ __0x7873 ].Position;
					var __0x7877 = __0x7701[ __0x7874 ].Position;

					__0x7870.AddLineThin( __0x7875, __0x7876 );
					__0x7870.AddLineThin( __0x7876, __0x7877 );
					__0x7870.AddLineThin( __0x7877, __0x7875 );
				}
			}
		}

		void __0x7973()
		{
			meshToEditData = null;
			__0x7701.Clear();
			__0x7702.Clear();
			__0x7703.Clear();
			meshExtractedStructure = null;
		}

		public void UpdateMeshData()
		{
			__0x7705 = false;

			var __0x7878 = GetMeshToEdit();

			if( __0x7878 == null || !__0x7878.EnabledInHierarchy )
			{
				__0x7973();
				return;
			}

			
			if( !CommonFunctions.CheckValidMesh( __0x7878, out var error ) )
			{
				__0x7973();
				return;
			}

			
			
			
			
			
			
			
			
			

			meshToEditData = new MeshData();
			meshExtractedStructure = __0x7878.ExtractStructure();
			meshToEditData.Load( meshExtractedStructure );
			

			
			if( __0x7701.Count != meshToEditData.Vertices.Count )
			{
				__0x7701.Clear();
				foreach( var __0x7947 in meshToEditData.Vertices )
					__0x7701.Add( new Vertex() );
			}

			var __0x7879 = meshToEditData.GetVertexPositions();

			
			var __0x7880 = __0x7700.TransformV;
			for( int __0x7881 = 0; __0x7881 < meshToEditData.Vertices.Count; __0x7881++ )
			{
				var __0x7882 = __0x7701[ __0x7881 ];
				__0x7882.Index = __0x7881;

				__0x7879.TryGetValue( __0x7881, out var vertexPosition );
				__0x7882.Position = __0x7880 * vertexPosition;
				

				__0x7882.Rotation = Quaternion.Identity;
				__0x7882.Scale = new Vector3( 1, 1, 1 );
			}

			
			if( selectionMode == SelectionMode.Edge )
			{
				
				if( __0x7702.Count != meshToEditData.Edges.Count )
				{
					__0x7702.Clear();
					foreach( var __0x7948 in meshToEditData.Edges )
						__0x7702.Add( new Edge() );
				}

				
				for( int __0x7883 = 0; __0x7883 < meshToEditData.Edges.Count; __0x7883++ )
				{
					var __0x7884 = __0x7702[ __0x7883 ];
					__0x7884.Index = __0x7883;

					__0x7884.Rotation = Quaternion.Identity;
					__0x7884.Scale = new Vector3( 1, 1, 1 );

					__0x7884.Position = ( __0x7701[ meshToEditData.Edges[ __0x7883 ].Vertex1 ].Position + __0x7701[ meshToEditData.Edges[ __0x7883 ].Vertex2 ].Position ) / 2;
				}
			}

			if( selectionMode == SelectionMode.Face )
			{
				
				if( __0x7703.Count != meshToEditData.Faces.Count )
				{
					__0x7703.Clear();
					foreach( var __0x7949 in meshToEditData.Faces )
						__0x7703.Add( new Face() );
				}

				
				for( int __0x7885 = 0; __0x7885 < meshToEditData.Faces.Count; __0x7885++ )
				{
					var __0x7886 = __0x7703[ __0x7885 ];
					__0x7886.Index = __0x7885;

					__0x7886.Rotation = Quaternion.Identity;
					__0x7886.Scale = new Vector3( 1, 1, 1 );

					Vector3 __0x7887 = Vector3.Zero;
					int __0x7888 = 0;
					foreach( var __0x7950 in meshToEditData.Faces[ __0x7885 ].Triangles )
					{
						__0x7887 += __0x7701[ __0x7950.Vertex ].Position;
						__0x7888++;
					}
					__0x7886.Position = __0x7887 / __0x7888;
				}
			}
		}
		

		private void __0x7974( object __0x8008, EventArgs __0x8009 )
		{
			__0x7705 = true;
		}

		public static BuilderWorkareaMode GetWorkareaMode( DocumentWindow documentWindow )
		{
			var __0x7889 = documentWindow as Component_Scene_DocumentWindow;
			if( __0x7889 != null )
				return __0x7889.WorkareaMode as BuilderWorkareaMode;
			return null;
		}

		public void ChangeSelectionMode( SelectionMode value )
		{
			if( selectionMode != value )
			{
				var __0x7890 = selectionMode;

				if( meshToEditData == null )
				{
					selectionMode = value;
					DocumentWindow.SelectObjects( null );
					UpdateMeshData();
					return;
				}

				HashSet<int> __0x7891 = null;

				switch( __0x7890 )
				{
				case SelectionMode.Face:
					{
						int[] __0x7892 = GetSelectedFaces( DocumentWindow );
						if( __0x7892.Length != 0 )
						{
							var __0x7893 = __0x7892 
								.SelectMany( __0x8010 => meshToEditData.Faces[ __0x8010 ].Triangles )
								.Select( __0x8011 => __0x8011.Vertex ).ToArray();
							__0x7891 = new HashSet<int>();
							foreach( var __0x7951 in __0x7893 )
								__0x7891.Add( __0x7951 );
						}
					}
					break;

				case SelectionMode.Vertex:
					{
						var __0x7894 = GetSelectedVertices( DocumentWindow );
						if( __0x7894.Length != 0 )
						{
							__0x7891 = new HashSet<int>();
							foreach( var __0x7952 in __0x7894 )
								__0x7891.Add( __0x7952 );
						}
					}
					break;

				case SelectionMode.Edge:
					{
						var __0x7895 = GetSelectedEdges( DocumentWindow );
						if( __0x7895.Length != 0 )
						{
							__0x7891 = new HashSet<int>();
							foreach( var __0x7953 in __0x7895 )
							{
								__0x7891.Add( meshToEditData.Edges[ __0x7953 ].Vertex1 );
								__0x7891.Add( meshToEditData.Edges[ __0x7953 ].Vertex2 );
							}
						}
					}
					break;
				}


				

				selectionMode = value; 

				if( __0x7891 == null || __0x7891.Count == 0 )
				{
					DocumentWindow.SelectObjects( null );
					UpdateMeshData(); 
					return;
				}

				switch( selectionMode )
				{
				case SelectionMode.Vertex:
					SelectVertices( __0x7891.ToArray() );
					break;

				case SelectionMode.Edge:
					var __0x7896 = new List<int>();
					for( int __0x7897 = 0; __0x7897 < meshToEditData.Edges.Count; __0x7897++ )
						if( __0x7891.Contains( meshToEditData.Edges[ __0x7897 ].Vertex1 ) && __0x7891.Contains( meshToEditData.Edges[ __0x7897 ].Vertex2 ) )
							__0x7896.Add( __0x7897 );
					SelectEdges( __0x7896.ToArray() );
					break;

				case SelectionMode.Face:
					var __0x7898 = new List<int>();
					for( int __0x7899 = 0; __0x7899 < meshToEditData.Faces.Count; __0x7899++ )
					{
						var __0x7900 = meshToEditData.Faces[ __0x7899 ];
						bool __0x7901 = true;
						for( int __0x7902 = 0; __0x7902 < __0x7900.Triangles.Count; __0x7902++ )
						{
							if( !__0x7891.Contains( __0x7900.Triangles[ __0x7902 ].Vertex ) )
							{
								__0x7901 = false;
								break;
							}
						}

						if( __0x7901 )
							__0x7898.Add( __0x7899 );
					}
					SelectFaces( __0x7898.ToArray() );
					break;

				case SelectionMode.Object:
					DocumentWindow.SelectObjects( null );
					break;
				}

				UpdateMeshData(); 
			}
		}

		public void SelectVertices( int[] vertices )
		{
			UpdateMeshData();

			var __0x7903 = new ESet<int>();
			foreach( var __0x7954 in vertices )
				if( 0 <= __0x7954 )  
					__0x7903.Add( __0x7954 );

			var __0x7904 = new List<Vertex>();
			foreach( var __0x7955 in __0x7701 )
			{
				if( __0x7903.Contains( __0x7955.Index ) )
					__0x7904.Add( __0x7955 );
			}

			DocumentWindow.SelectObjects( __0x7904.ToArray() );
		}

		public void SelectEdges( int[] edges )
		{
			UpdateMeshData();

			var __0x7905 = new ESet<int>();
			foreach( var __0x7956 in edges )
				if( 0 <= __0x7956 )
					__0x7905.Add( __0x7956 );

			var __0x7906 = new List<Edge>();
			foreach( var __0x7957 in __0x7702 )
			{
				if( __0x7905.Contains( __0x7957.Index ) )
					__0x7906.Add( __0x7957 );
			}

			DocumentWindow.SelectObjects( __0x7906.ToArray() );
		}

		public void SelectFaces( int[] faces )
		{
			UpdateMeshData();

			var __0x7907 = new ESet<int>();
			foreach( var __0x7958 in faces )
				if( 0 <= __0x7958 )
					__0x7907.Add( __0x7958 );

			var __0x7908 = new List<Face>();
			foreach( var __0x7959 in __0x7703 )
			{
				if( __0x7907.Contains( __0x7959.Index ) )
					__0x7908.Add( __0x7959 );
			}

			DocumentWindow.SelectObjects( __0x7908.ToArray() );
		}

		static bool __0x7975( object[] __0x8012, out Component_MeshInSpace __0x8013 )
		{
			
			
			if( __0x8012.Length != 0 )
			{
				var __0x7909 = __0x8012[ 0 ] as Component_MeshInSpace;
				if( __0x7909 != null )
				{
					
					var __0x7910 = __0x7909.Mesh.Value; 

					if( __0x7910 != null )
					{
						__0x8013 = __0x7909;
						
						return true;
					}
				}
			}

			__0x8013 = null;
			
			return false;
		}

		private void __0x7976( DocumentWindow __0x8014, object[] __0x8015 )
		{
			
			
			
			
			
			

			if( __0x7975( DocumentWindow.SelectedObjects, out var meshInSpace ) )
			{
				__0x7700 = meshInSpace;
				
				UpdateMeshData();

				
				DocumentWindow.SelectObjects( null );
			}
		}

		public void SelectAllGetState( EditorAction.GetStateContext context )
		{
			switch( selectionMode )
			{
			case SelectionMode.Vertex:
				context.Enabled = !__0x7701.All( __0x8016 => DocumentWindow.IsObjectSelected( __0x8016 ) );
				break;
			case SelectionMode.Edge:
				context.Enabled = !__0x7702.All( __0x8017 => DocumentWindow.IsObjectSelected( __0x8017 ) );
				break;
			case SelectionMode.Face:
				context.Enabled = !__0x7703.All( __0x8018 => DocumentWindow.IsObjectSelected( __0x8018 ) );
				break;
			}
		}

		
		public void SelectAll()
		{
			switch( selectionMode )
			{
			case SelectionMode.Vertex:
				DocumentWindow.SelectObjects( __0x7701.ToArray() );
				break;
			case SelectionMode.Edge:
				DocumentWindow.SelectObjects( __0x7702.ToArray() );
				break;
			case SelectionMode.Face:
				DocumentWindow.SelectObjects( __0x7703.ToArray() );
				break;
			}
		}

		public void InvertSelectionGetState( EditorAction.GetStateContext context )
		{
			switch( selectionMode )
			{
			case SelectionMode.Vertex:
				if( __0x7701.Count != 0 )
					context.Enabled = true;
				break;
			case SelectionMode.Edge:
				if( __0x7702.Count != 0 )
					context.Enabled = true;
				break;
			case SelectionMode.Face:
				if( __0x7703.Count != 0 )
					context.Enabled = true;
				break;
			}
		}

		
		public void InvertSelection()
		{
			switch( selectionMode )
			{
			case SelectionMode.Vertex:
				DocumentWindow.SelectObjects( __0x7701.Where( __0x8019 => !DocumentWindow.IsObjectSelected( __0x8019 ) ).ToArray() );
				break;
			case SelectionMode.Edge:
				DocumentWindow.SelectObjects( __0x7702.Where( __0x8020 => !DocumentWindow.IsObjectSelected( __0x8020 ) ).ToArray() );
				break;
			case SelectionMode.Face:
				DocumentWindow.SelectObjects( __0x7703.Where( __0x8021 => !DocumentWindow.IsObjectSelected( __0x8021 ) ).ToArray() );
				break;
			}
		}

		void __0x7977( Viewport __0x8022 )
		{
			if( selectionMode == SelectionMode.Vertex )
			{
				
				if( __0x7707 != null && __0x7707.IsCanceled )
				{
					var __0x7911 = (__0x8024)__0x7707.AsyncState;
					__0x7911.meshRayTestOptimized?.Dispose();
					__0x7707 = null;
				}

				
				if( __0x7707 != null && __0x7707.IsCompleted )
				{
					var __0x7912 = (__0x8024)__0x7707.AsyncState;
					__0x7912.meshRayTestOptimized?.Dispose();
					__0x7707 = null;

					__0x7706 = __0x7912;
				}

				
				if( __0x7707 == null )
				{
					if( __0x7700 != null )
					{
						var __0x7913 = __0x7700.MeshOutput;
						if( __0x7913 != null && __0x7913.Result != null && __0x7913.Result.ExtractedVerticesPositions != null )
						{
							var __0x7914 = new __0x8024();
							__0x7914.meshToEditData = meshToEditData;

							__0x7914.meshInSpaceTransformInvert = __0x7700.Transform.Value.ToMatrix4().GetInverse();
							__0x7914.meshInSpaceTwoSided = Component_MeshInSpace.IsTwoSided( __0x7913, __0x7700.ReplaceMaterial );
							__0x7914.meshCompiledData_OnlyToCompare = __0x7913.Result;
							__0x7914.meshExtractedVerticesPositions = __0x7913.Result.ExtractedVerticesPositions;
							__0x7914.meshExtractedIndices = __0x7913.Result.ExtractedIndices;

							__0x7914.meshVertices = new List<Vertex>( __0x7701 );
							__0x7914.viewportCameraSettingsPosition = __0x8022.CameraSettings.Position;

							var __0x7915 = __0x7706 != null &&
								__0x7706.meshInSpaceTransformInvert == __0x7914.meshInSpaceTransformInvert &&
								__0x7706.meshInSpaceTwoSided == __0x7914.meshInSpaceTwoSided &&
								__0x7706.meshCompiledData_OnlyToCompare == __0x7914.meshCompiledData_OnlyToCompare &&
								__0x7706.meshToEditData == __0x7914.meshToEditData &&
								__0x7706.viewportCameraSettingsPosition == __0x7914.viewportCameraSettingsPosition;

							if( !__0x7915 )
							{
								__0x7707 = new Task( __0x7963, __0x7914 );
								__0x7707.Start();
							}
						}
					}
				}
			}
		}

		void __0x7978( Viewport __0x8023 )
		{
			if( selectionMode == SelectionMode.Edge && meshExtractedStructure != null )
			{
				
				if( __0x7709 != null && __0x7709.IsCanceled )
					__0x7709 = null;

				
				if( __0x7709 != null && __0x7709.IsCompleted )
				{
					__0x7708 = (__0x8025)__0x7709.AsyncState;
					__0x7709 = null;
				}

				
				if( __0x7709 == null )
				{
					var __0x7916 = new __0x8025();
					__0x7916.meshToEditData = meshToEditData;
					__0x7916.meshVertices = new List<Vertex>( __0x7701 );
					__0x7916.meshEdges = new List<Edge>( __0x7702 );
					__0x7916.meshExtractedStructure = meshExtractedStructure;
					__0x7916.viewportCameraSettingsPosition = __0x8023.CameraSettings.Position;

					var __0x7917 = __0x7708 != null &&
						__0x7708.meshToEditData == __0x7916.meshToEditData &&
						__0x7708.viewportCameraSettingsPosition == __0x7916.viewportCameraSettingsPosition;

					if( !__0x7917 )
					{
						__0x7709 = new Task( __0x7968, __0x7916 );
						__0x7709.Start();
					}
				}
			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	public enum SelectionMode
	{
		Object, 
		Vertex, 
		Edge, 
		Face 
	}

	public class Selection
	{
		public SelectionMode SelectionMode;
		public bool Changed;
		int[] __0x8026, __0x8027, __0x8028;
		static readonly int[] __0x8029 = new int[ 0 ];

		public int[] Vertices
		{
			get => __0x8026 ?? __0x8029;
			set
			{
				__0x8026 = value;
				Changed = true;
			}
		}
		public int[] Edges
		{
			get => __0x8027 ?? __0x8029;
			set
			{
				__0x8027 = value;
				Changed = true;
			}
		}
		public int[] Faces
		{
			get => __0x8028 ?? __0x8029;
			set
			{
				__0x8028 = value;
				Changed = true;
			}
		}

		public int VertexCount => SelectionMode == SelectionMode.Vertex && __0x8026 != null ? __0x8026.Length : 0;
		public int EdgeCount => SelectionMode == SelectionMode.Edge && __0x8027 != null ? __0x8027.Length : 0;
		public int FaceCount => SelectionMode == SelectionMode.Face && __0x8028 != null ? __0x8028.Length : 0;

		public void ClearSelection()
		{
			Changed = 0 < VertexCount || 0 < EdgeCount || 0 < FaceCount;
			Vertices = null;
			Edges = null;
			Faces = null;
		}
	}

	public struct ActionContext
	{
		public ActionContext( EditorAction.ClickContext context )
		{
			DocumentWindow = context.ObjectsInFocus.DocumentWindow;
			ObjectsInFocus = context.ObjectsInFocus.Objects;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( DocumentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}
		public ActionContext( EditorAction.GetStateContext context )
		{
			DocumentWindow = context.ObjectsInFocus.DocumentWindow;
			ObjectsInFocus = context.ObjectsInFocus.Objects;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( DocumentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}
		public ActionContext( DocumentWindow documentWindow )
		{
			DocumentWindow = documentWindow;
			ObjectsInFocus = null;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( documentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}

		public ActionContext( DocumentWindow documentWindow, object[] objectsInFocus )
		{
			DocumentWindow = documentWindow;
			ObjectsInFocus = objectsInFocus;
			BuilderWorkareaMode = BuilderWorkareaMode.GetWorkareaMode( documentWindow );
			Selection = BuilderWorkareaMode.GetSelection( DocumentWindow );
		}
		public readonly DocumentWindow DocumentWindow;
		public readonly object[] ObjectsInFocus;
		public readonly BuilderWorkareaMode BuilderWorkareaMode;
		public readonly Selection Selection;

		public (Component_MeshInSpace meshInSpace, Component_Mesh mesh) GetSelectedMesh()
		{
			return BuilderWorkareaMode.GetSelectedMesh( DocumentWindow, ObjectsInFocus );
		}

		
		
		
		public Component_MeshInSpace[] GetSelectedMeshInSpaceArray( bool onlyWhenAllHaveStructure = false )
		{
			var __0x8030 = new List<Component_MeshInSpace>();

			
			var __0x8031 = DocumentWindow?.SelectedObjects;
			if( __0x8031 == null )
				return new Component_MeshInSpace[ 0 ];

			foreach( var __0x8032 in __0x8031 )
			{
				if( __0x8032 is Component_MeshInSpace meshInSpace )
				{
					if( onlyWhenAllHaveStructure && !__0x8033( meshInSpace ) )
						return new Component_MeshInSpace[ 0 ];
					__0x8030.Add( meshInSpace );
				}
			}

			return __0x8030.ToArray();
		}

		static bool __0x8033( Component_MeshInSpace __0x8034 ) => __0x8034.Mesh.Value?.Structure != null;

		public SelectionMode SelectionMode => BuilderWorkareaMode?.selectionMode ?? SelectionMode.Object;

		public void SelectMeshesInSpace( params Component_MeshInSpace[] meshesInSpace ) => DocumentWindow.SelectObjects( meshesInSpace );

		public void ActionEnd()
		{
			if( !Selection.Changed )
				return;

			switch( SelectionMode )
			{
			case SelectionMode.Vertex:
				BuilderWorkareaMode.SelectVertices( Selection.Vertices ?? new int[ 0 ] );
				break;
			case SelectionMode.Edge:
				BuilderWorkareaMode.SelectEdges( Selection.Edges ?? new int[ 0 ] );
				break;
			case SelectionMode.Face:
				BuilderWorkareaMode.SelectFaces( Selection.Faces ?? new int[ 0 ] );
				break;
			}
			Selection.Changed = false;
		}
	}
}
#endif



#if !DEPLOY


namespace NeoAxis.Addon.Builder3D
{
	static class CommonFunctions
	{
		public static (int lowVertex, int highVertex) OrderVertices( int vertex1, int vertex2 ) => vertex1 < vertex2 ? (vertex1, vertex2) : (vertex2, vertex1);

		public static void CalculateNormal( MeshData.FaceVertex p0, MeshData.FaceVertex p1, MeshData.FaceVertex p2 )
		{
			var __0x8035 = p0.RawVertex.Position;
			var __0x8036 = Vector3F.Cross( p1.RawVertex.Position - __0x8035, p2.RawVertex.Position - __0x8035 ).GetNormalize();
			p0.RawVertex.Normal = p1.RawVertex.Normal = p2.RawVertex.Normal = __0x8036;
		}

		public static Vector3F CalculateNormal( Vector3F p0, Vector3F p1, Vector3F p2 )
		{
			return Vector3F.Cross( p1 - p0, p2 - p0 ).GetNormalize();
		}


		
		
		public static void CalculateTriangleTangentsAndNormalByOldNormalRotation( MeshData.FaceVertex v0, MeshData.FaceVertex v1, MeshData.FaceVertex v2, Vector3F oldNormal )
		{
			var __0x8037 = CalculateNormal( v0.RawVertex.Position, v1.RawVertex.Position, v2.RawVertex.Position );
			var __0x8038 = GetRotationMatrix( oldNormal, __0x8037 );
			v0.RawVertex.Normal = __0x8037;
			v1.RawVertex.Normal = __0x8037;
			v2.RawVertex.Normal = __0x8037;

			if( __0x8038 == null )
				return;

			v0.RawVertex.Tangent = Transform( v0.RawVertex.Tangent );
			v1.RawVertex.Tangent = Transform( v1.RawVertex.Tangent );
			v2.RawVertex.Tangent = Transform( v2.RawVertex.Tangent );

			Vector4F Transform( Vector4F __0x8110 )
			{
				var __0x8039 = __0x8038.Value * __0x8110.ToVector3F();
				return new Vector4F( __0x8039.X, __0x8039.Y, __0x8039.Z, __0x8110.W );
			}
		}

		
		
		
		
		
		internal static void CalculateTriangleTangentsAndNormalByAdjacent( MeshData meshData, MeshData.FaceVertex v0, MeshData.FaceVertex v1, MeshData.FaceVertex v2 )
		{
			CalculateNormal( v0, v1, v2 );
			Vector3F __0x8040 = v0.RawVertex.Normal;

			

			var __0x8041 = GetTrianglesByVertex( meshData, v0.Vertex );
			var __0x8042 = GetTrianglesByVertex( meshData, v1.Vertex );
			var __0x8043 = GetTrianglesByVertex( meshData, v2.Vertex );

			

			var __0x8044 = GetTangentCandidates( __0x8041, __0x8040 );
			var __0x8045 = GetTangentCandidates( __0x8042, __0x8040 );
			var __0x8046 = GetTangentCandidates( __0x8043, __0x8040 );

			

			int __0x8047 = -1;
			int __0x8048 = -1;
			int __0x8049 = -1;
			float __0x8050 = Single.MinValue;
			for( int __0x8051 = 0; __0x8051 < __0x8044.Count; __0x8051++ )
				for( int __0x8052 = 0; __0x8052 < __0x8045.Count; __0x8052++ )
					for( int __0x8053 = 0; __0x8053 < __0x8046.Count; __0x8053++ )
					{
						
						float __0x8054 = Vector3F.Dot( __0x8044[ __0x8051 ].tangent.ToVector3F(), __0x8045[ __0x8052 ].tangent.ToVector3F() );
						__0x8054 += Vector3F.Dot( __0x8044[ __0x8051 ].tangent.ToVector3F(), __0x8046[ __0x8053 ].tangent.ToVector3F() );
						__0x8054 += Vector3F.Dot( __0x8045[ __0x8052 ].tangent.ToVector3F(), __0x8046[ __0x8053 ].tangent.ToVector3F() );

						
						__0x8054 += __0x8044[ __0x8051 ].weigh * __0x8045[ __0x8052 ].weigh / 2;
						__0x8054 += __0x8044[ __0x8051 ].weigh * __0x8046[ __0x8053 ].weigh / 2;
						__0x8054 += __0x8045[ __0x8052 ].weigh * __0x8046[ __0x8053 ].weigh / 2;

						
						
						
						


						if( __0x8050 < __0x8054 )
						{
							__0x8050 = __0x8054;
							__0x8047 = __0x8051;
							__0x8048 = __0x8052;
							__0x8049 = __0x8053;
						}
					}

			if( __0x8047 == -1 )
			{
				
				return;
			}

			var __0x8055 = __0x8044[ __0x8047 ].tangent;
			var __0x8056 = __0x8045[ __0x8048 ].tangent;
			var __0x8057 = __0x8046[ __0x8049 ].tangent;

			

			
			float __0x8058 = Vector3F.Dot( __0x8055.ToVector3F(), __0x8056.ToVector3F() );
			float __0x8059 = Vector3F.Dot( __0x8055.ToVector3F(), __0x8057.ToVector3F() );
			float __0x8060 = Vector3F.Dot( __0x8056.ToVector3F(), __0x8057.ToVector3F() );
			if( __0x8059 <= __0x8058 && __0x8060 <= __0x8058 )
				__0x8057 = __0x8055;
			else if( __0x8058 <= __0x8059 && __0x8060 <= __0x8059 )
				__0x8056 = __0x8055;
			else if( __0x8058 <= __0x8060 && __0x8059 <= __0x8060 )
				__0x8055 = __0x8056;

			

			v0.RawVertex.Tangent = __0x8055;
			v1.RawVertex.Tangent = __0x8056;
			v2.RawVertex.Tangent = __0x8057;

			
			List<(Vector4F tangent, float weigh)> GetTangentCandidates( List<MeshData.FaceVertex> __0x8111, Vector3F __0x8112 )
			{
				var __0x8061 = new List<(Vector4F, float weigh)>();
				for( int __0x8062 = 0; __0x8062 < __0x8111.Count; __0x8062 += 3 )
				{
					var __0x8063 = CommonFunctions.CalculateNormal( __0x8111[ __0x8062 ].RawVertex.Position, __0x8111[ __0x8062 + 1 ].RawVertex.Position, __0x8111[ __0x8062 + 2 ].RawVertex.Position );
					var __0x8064 = __0x8111[ __0x8062 ].RawVertex.Tangent;
					__0x8061.Add( (
						new Vector4F( CommonFunctions.Rotate( __0x8063, __0x8112, __0x8064.ToVector3F() ), __0x8064.W ),
						( 1 + Vector3F.Dot( __0x8063, __0x8112 ) ) / 2
					) );
				}
				return __0x8061;
			}
		}

		

		public static List<MeshData.FaceVertex> GetTrianglesByVertex( MeshData meshData, int vertexIndex )
		{
			var __0x8065 = new List<MeshData.FaceVertex>();
			for( int __0x8066 = 0; __0x8066 < meshData.Faces.Count; __0x8066++ )
			{
				var __0x8067 = meshData.Faces[ __0x8066 ];
				for( int __0x8068 = 0; __0x8068 < __0x8067.Triangles.Count; __0x8068++ )
				{
					if( __0x8067.Triangles[ __0x8068 ].Vertex == vertexIndex )
					{
						__0x8065.Add( __0x8067.Triangles[ __0x8068 ] );

						int __0x8069 = __0x8068 - __0x8068 % 3;
						if( __0x8068 == __0x8069 )
						{
							__0x8065.Add( __0x8067.Triangles[ __0x8069 + 1 ] );
							__0x8065.Add( __0x8067.Triangles[ __0x8069 + 2 ] );
						}
						else if( __0x8068 == __0x8069 + 1 )
						{
							__0x8065.Add( __0x8067.Triangles[ __0x8069 + 2 ] );
							__0x8065.Add( __0x8067.Triangles[ __0x8069 ] );
						}
						else if( __0x8068 == __0x8069 + 2 )
						{
							__0x8065.Add( __0x8067.Triangles[ __0x8069 ] );
							__0x8065.Add( __0x8067.Triangles[ __0x8069 + 1 ] );
						}
					}
				}
			}
			return __0x8065;
		}


		
		public static Vector3F Rotate( Vector3F fromVector, Vector3F toVector, Vector3F vectorToRotate )
		{
			var __0x8070 = GetRotationMatrix( fromVector, toVector );
			if( __0x8070 == null )
				return vectorToRotate;
			return __0x8070.Value * vectorToRotate;
		}

		
		
		internal static Matrix3F? GetRotationMatrix( Vector3F fromVector, Vector3F toVector )
		{
			const double __0x8071 = 1e-5f;

			fromVector = fromVector.GetNormalize();
			toVector = toVector.GetNormalize();
			var __0x8072 = Vector3.Cross( fromVector, toVector );
			if( __0x8072.Length() < __0x8071 )
				return null;
			__0x8072 = __0x8072.GetNormalize();
			double __0x8073 = Math.Acos( Vector3.Dot( fromVector, toVector ) );
			return __0x8108( (float)__0x8073, __0x8072.ToVector3F() );
		}

		/// <summary>
		/// Creates a rotation matrix for a rotation about an arbitrary axis.
		/// </summary>
		/// <param name="__0x8113">Rotation angle, in radians</param>
		/// <param name="__0x8114">Rotation axis, which should be a normalized vector.</param>
		/// <returns>The rotation matrix</returns>
		static Matrix3F __0x8108( float __0x8113, Vector3F __0x8114 )
		{
			float __0x8074 = __0x8114.X;
			float __0x8075 = __0x8114.Y;
			float __0x8076 = __0x8114.Z;

			float __0x8077 = (float)Math.Sin( (double)__0x8113 );
			float __0x8078 = (float)Math.Cos( (double)__0x8113 );

			float __0x8079 = __0x8074 * __0x8074;
			float __0x8080 = __0x8075 * __0x8075;
			float __0x8081 = __0x8076 * __0x8076;
			float __0x8082 = __0x8074 * __0x8075;
			float __0x8083 = __0x8074 * __0x8076;
			float __0x8084 = __0x8075 * __0x8076;

			Matrix3F __0x8085 = new Matrix3F(
			__0x8079 + ( __0x8078 * ( 1.0f - __0x8079 ) ),
			( __0x8082 - ( __0x8078 * __0x8082 ) ) + ( __0x8077 * __0x8076 ),
			( __0x8083 - ( __0x8078 * __0x8083 ) ) - ( __0x8077 * __0x8075 ),

			( __0x8082 - ( __0x8078 * __0x8082 ) ) - ( __0x8077 * __0x8076 ),
			__0x8080 + ( __0x8078 * ( 1.0f - __0x8080 ) ),
			( __0x8084 - ( __0x8078 * __0x8084 ) ) + ( __0x8077 * __0x8074 ),

			( __0x8083 - ( __0x8078 * __0x8083 ) ) + ( __0x8077 * __0x8075 ),
			( __0x8084 - ( __0x8078 * __0x8084 ) ) - ( __0x8077 * __0x8074 ),
			__0x8081 + ( __0x8078 * ( 1.0f - __0x8081 ) )
				);

			return __0x8085;
		}

		
		
		
		
		
		

		
		

		
		
		
		
		
		

		
		
		
		

		
		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		static bool __0x8109( Component_Mesh __0x8115 )
		{
			if( __0x8115.Structure != null )
				return true;

			var __0x8086 = __0x8115.GetComponents<Component_MeshGeometry>();
			if( __0x8086.Length == 0 )
				return false;

			foreach( var __0x8107 in __0x8086 )
			{
				if( __0x8107 is Component_MeshGeometry_Procedural meshGeometryProcedural )
				{
					if( !meshGeometryProcedural.ExistsMeshStructure() )
						return false;

					
					
					
					
					
					

					
					
				}
				else
					return false;
			}

			return true;
		}

		

		public static bool IsSameVertexStructure( Component_Mesh.ExtractedStructure meshExtractedStructure, List<int> geometriesInSelection )
		{
			if( geometriesInSelection.Count == 1 )
				return true;

			var __0x8087 = meshExtractedStructure.MeshGeometries[ geometriesInSelection[ 0 ] ];
			for( int __0x8088 = 1; __0x8088 < geometriesInSelection.Count; __0x8088++ )
			{
				var __0x8089 = meshExtractedStructure.MeshGeometries[ geometriesInSelection[ __0x8088 ] ];
				if( !IsSameVertexStructure( __0x8087.VertexStructure, __0x8089.VertexStructure ) )
					return false;
			}
			return true;
		}

		public static bool IsSameVertexStructure( VertexElement[] a1, VertexElement[] a2 )
		{
			if( a1 == a2 )
				return true;
			if( a1.Length != a2.Length )
				return false;
			for( int __0x8090 = 0; __0x8090 < a1.Length; __0x8090++ )
				if( a1[ __0x8090 ] != a2[ __0x8090 ] )
					return false;
			return true;
		}


		public static string GetUniqueFriendlyName( Component component )
		{
			var __0x8091 = component.BaseType.GetUserFriendlyNameForInstance();
			if( component.Parent.GetComponent( __0x8091 ) == null )
				return __0x8091;
			return component.Parent.Components.GetUniqueName( __0x8091, false, 2 );
		}

		
		public static void EnsureNameIsUnique( Component component )
		{
			var __0x8092 = component.Name;
			if( component.Parent.GetComponents().Count( __0x8116 => __0x8116.Name == __0x8092 ) <= 1 )
				return;
			component.Name = component.Parent.Components.GetUniqueName( __0x8092, true, 2 );
		}

		public static bool CheckValidMesh( Component_Mesh mesh, out string error )
		{
			if( !__0x8109( mesh ) )
			{
				error = "Mesh structure does not exist. You can generate structure in the Mesh Editor.";
				return false;
			}

			

			error = "";
			return true;
		}

		public static void CopyExternalMesh( DocumentInstance document, Component_MeshInSpace meshInSpace, ref Component_Mesh mesh, UndoMultiAction undoMultiAction, out bool needUndoForNextActions )
		{
			needUndoForNextActions = true;

			if( mesh.Parent != meshInSpace )
			{
				var __0x8093 = (Component_Mesh)mesh.Clone();
				__0x8093.Name = "Mesh";
				meshInSpace.AddComponent( __0x8093 );

				
				var __0x8094 = (Metadata.Property)meshInSpace.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshInSpace.Mesh ) );
				undoMultiAction.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( meshInSpace, __0x8094, meshInSpace.Mesh ) ) );
				meshInSpace.Mesh = ReferenceUtility.MakeThisReference( meshInSpace, __0x8093 );

				mesh = __0x8093;

				undoMultiAction.AddAction( new UndoActionComponentCreateDelete( document, new Component[] { __0x8093 }, true ) );
				needUndoForNextActions = false;
			}
		}

		public static void ConvertProceduralMeshGeometries( DocumentInstance document, Component_Mesh mesh, UndoMultiAction undoMultiAction, ref bool needUndoForNextActions )
		{
			

			var __0x8095 = mesh.GetComponents<Component_MeshGeometry>();
			if( __0x8095.Any( __0x8117 => __0x8117 is Component_MeshGeometry_Procedural ) )
			{
				
				bool __0x8096 = __0x8095.Any( __0x8118 => !( __0x8118 is Component_MeshGeometry_Procedural ) );
				if( !__0x8096 )
					needUndoForNextActions = false; 

				
				if( undoMultiAction != null && !needUndoForNextActions )
				{
					
					var __0x8097 = (Metadata.Property)mesh.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
					undoMultiAction.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( mesh, __0x8097, mesh.Structure?.Clone() ) ) );
				}

				for( int __0x8098 = 0; __0x8098 < __0x8095.Length; __0x8098++ )
				{
					var __0x8099 = __0x8095[ __0x8098 ];

					
					if( __0x8099 is Component_MeshGeometry_Procedural meshGeometryProcedural )
					{
						VertexElement[] __0x8100 = null;
						byte[] __0x8101 = null;
						int[] __0x8102 = null;
						Component_Material __0x8103 = null;
						Component_Mesh.StructureClass __0x8104 = null;
						meshGeometryProcedural.GetProceduralGeneratedData( ref __0x8100, ref __0x8101, ref __0x8102, ref __0x8103, ref __0x8104 );

						var __0x8105 = meshGeometryProcedural.Parent.Components.IndexOf( meshGeometryProcedural );

						var __0x8106 = mesh.CreateComponent<Component_MeshGeometry>( __0x8105 );
						__0x8106.Name = __0x8099.Name;
						__0x8106.VertexStructure = __0x8100;
						__0x8106.Vertices = __0x8101;
						__0x8106.Indices = __0x8102;

						__0x8106.Material = meshGeometryProcedural.Material;

						
						mesh.Structure = Component_Mesh.StructureClass.Concat( mesh.Structure, __0x8104, __0x8098 );

						
						if( undoMultiAction != null )
							undoMultiAction.AddAction( new UndoActionComponentCreateDelete( document, new Component[] {__0x8099}, create: false ) );
						else
							__0x8099.Dispose();

						
						if( undoMultiAction != null )
							undoMultiAction.AddAction( new UndoActionComponentCreateDelete( document, new Component[] {__0x8106}, create: true ) );

					}
				}
			}
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	class MeshData
	{
		public List<Vertex> Vertices;
		public List<Edge> Edges;
		public List<Face> Faces;
		
		MeshGeometryFormat[] __0x8119;

		

		
		

		

		

		public class RawVertex
		{
			readonly byte[] __0x8120;
			readonly int __0x8121 = -1;
			readonly int __0x8122 = -1;
			readonly int __0x8123 = -1;
			readonly int __0x8124 = -1;
			readonly int __0x8125 = -1;

			private RawVertex() { }

			
			
			
			
			
			
			
			
			

			public RawVertex( byte[] data, MeshGeometryFormat format )
			{
				this.__0x8120 = data;
				__0x8121 = format.positionOffset;
				__0x8122 = format.normalOffset;
				__0x8123 = format.tangentOffset;
				__0x8124 = format.colorOffset;
				__0x8125 = format.texCoordOffset;
			}

			public byte[] Data
			{
				get { return __0x8120; }
			}

			public unsafe Vector3F Position
			{
				get
				{
					if( __0x8121 != -1 )
						fixed ( byte* __0x8126 = __0x8120 )
							return *(Vector3F*)( __0x8126 + __0x8121 );
					return Vector3F.Zero;
				}
				set
				{
					if( __0x8121 != -1 )
						fixed ( byte* __0x8127 = __0x8120 )
							*(Vector3F*)( __0x8127 + __0x8121 ) = value;
				}
			}

			public unsafe Vector3F Normal
			{
				get
				{
					if( __0x8122 != -1 )
						fixed ( byte* __0x8128 = __0x8120 )
							return *(Vector3F*)( __0x8128 + __0x8122 );
					return Vector3F.Zero;
				}
				set
				{
					if( __0x8122 != -1 )
						fixed ( byte* __0x8129 = __0x8120 )
							*(Vector3F*)( __0x8129 + __0x8122 ) = value;
				}
			}

			public unsafe Vector4F Tangent
			{
				get
				{
					if( __0x8123 != -1 )
						fixed ( byte* __0x8130 = __0x8120 )
							return *(Vector4F*)( __0x8130 + __0x8123 );
					return Vector4F.Zero;
				}
				set
				{
					if( __0x8123 != -1 )
						fixed ( byte* __0x8131 = __0x8120 )
							*(Vector4F*)( __0x8131 + __0x8123 ) = value;
				}
			}

			public unsafe Vector4F Color
			{
				get
				{
					if( __0x8124 != -1 )
						fixed ( byte* __0x8132 = __0x8120 )
							return *(Vector4F*)( __0x8132 + __0x8124 );
					return Vector4F.Zero;
				}
				set
				{
					if( __0x8124 != -1 )
						fixed ( byte* __0x8133 = __0x8120 )
							*(Vector4F*)( __0x8133 + __0x8124 ) = value;
				}
			}

			public unsafe Vector2F TexCoord
			{
				get
				{
					if( __0x8125 != -1 )
						fixed ( byte* __0x8134 = __0x8120 )
							return *(Vector2F*)( __0x8134 + __0x8125 );
					return Vector2F.Zero;
				}
				set
				{
					if( __0x8125 != -1 )
						fixed ( byte* __0x8135 = __0x8120 )
							*(Vector2F*)( __0x8135 + __0x8125 ) = value;
				}
			}

		}

		

		public class Vertex
		{
			public List<(string, string)> Properties;

			
			

			

			public Vertex( List<(string, string)> properties = null )
			{
				Properties = properties;
			}
		}

		

		public class Edge
		{
			public int Vertex1;
			public int Vertex2;
			public List<(string, string)> Properties;

			

			public Edge( int vertex1, int vertex2, List<(string, string)> properties = null )
			{
				Vertex1 = vertex1;
				Vertex2 = vertex2;
				Properties = properties;
			}
		}

		

		public class FaceVertex
		{
			public int Vertex;
			public int RawGeometry;
			public RawVertex RawVertex;

			

			public FaceVertex( int vertex, int rawGeometry, RawVertex rawVertex )
			{
				Vertex = vertex;
				RawGeometry = rawGeometry;
				RawVertex = rawVertex;
			}
		}

		

		public class Face
		{
			public List<FaceVertex> Triangles;
			public List<(string, string)> Properties;
			
			public int SmoothingGroup;

			

			public Face( List<FaceVertex> triangles, List<(string, string)> properties, int smoothingGroup )
			{
				Triangles = triangles;
				Properties = properties;
				SmoothingGroup = smoothingGroup;
			}
		}

		

		
		
		
		

		
		
		
		
		

		

		internal class MeshGeometryFormat
		{
			public int vertexSize;
			public int positionOffset = -1;
			public int normalOffset = -1;
			public int tangentOffset = -1;
			public int colorOffset = -1;
			public int texCoordOffset = -1;

			

			public MeshGeometryFormat( VertexElement[] vertexStructure )
			{
				vertexStructure.GetInfo( out vertexSize, out _ );

				foreach( var __0x8234 in vertexStructure )
				{
					switch( __0x8234.Semantic )
					{
					case VertexElementSemantic.Position:
						if( __0x8234.Type == VertexElementType.Float3 )
							positionOffset = __0x8234.Offset;
						break;
					case VertexElementSemantic.Normal:
						if( __0x8234.Type == VertexElementType.Float3 )
							normalOffset = __0x8234.Offset;
						break;
					case VertexElementSemantic.Tangent:
						if( __0x8234.Type == VertexElementType.Float4 )
							tangentOffset = __0x8234.Offset;
						break;
					case VertexElementSemantic.Color0:
						if( __0x8234.Type == VertexElementType.Float4 )
							colorOffset = __0x8234.Offset;
						break;
					case VertexElementSemantic.TextureCoordinate0:
						if( __0x8234.Type == VertexElementType.Float2 )
							texCoordOffset = __0x8234.Offset;
						break;

					}
				}
			}
		}

		

		static readonly Vector4F __0x8136 = new Vector4F( 1, 1, 1, 1 );


		static MeshGeometryFormat[] __0x8255( Component_Mesh.ExtractedStructure.MeshGeometryItem[] __0x8257 )
		{
			var __0x8137 = new List<MeshGeometryFormat>();
			foreach( var __0x8235 in __0x8257 )
				__0x8137.Add( new MeshGeometryFormat( __0x8235.VertexStructure ) );
			return __0x8137.ToArray();
		}

		static MeshGeometryFormat[] __0x8256( Component_MeshGeometry[] __0x8258 )
		{
			var __0x8138 = new List<MeshGeometryFormat>();
			foreach( var __0x8236 in __0x8258 )
				__0x8138.Add( new MeshGeometryFormat( __0x8236.VertexStructure ) );
			return __0x8138.ToArray();
		}

		public static List<(string, string)> CloneProperties( List<(string, string)> source )
		{
			if( source != null )
				return source.ToList();
			return null;
		}

		public FaceVertex CreateFaceVertex( int vertex, int meshGeometry )
		{
			var __0x8139 = __0x8119[ meshGeometry ];
			var __0x8140 = new RawVertex( new byte[ __0x8139.vertexSize ], __0x8139 );
			__0x8140.Color = __0x8136;
			return new FaceVertex(
				vertex,
				meshGeometry,
				__0x8140 );

		}

		public FaceVertex CloneFaceVertex( FaceVertex vertex )
		{
			var __0x8141 = __0x8119[ vertex.RawGeometry ];
			return new FaceVertex(
				vertex.Vertex,
				vertex.RawGeometry,
				new RawVertex( (byte[])vertex.RawVertex.Data.Clone(), __0x8141 ) );
		}

		public static RawVertex ConvertRawVertex( RawVertex rv, MeshGeometryFormat newFormat )
		{
			var __0x8142 = new RawVertex( new byte[ newFormat.vertexSize ], newFormat )
			{
				Position = rv.Position, Normal = rv.Normal, Tangent = rv.Tangent, Color = rv.Color, TexCoord = rv.TexCoord
			};
			
			return __0x8142;
		}

		public static byte[] ConvertToFormat( MeshGeometryFormat originalFormat, byte[] originalData, MeshGeometryFormat newFormat )
		{
			int __0x8143 = originalData.Length / originalFormat.vertexSize;
			byte[] __0x8144 = new byte[ newFormat.vertexSize * __0x8143 ];

			byte[] __0x8145 = new byte[ originalFormat.vertexSize ];
			for( int __0x8146 = 0; __0x8146 < __0x8143; __0x8146++ )
			{
				Array.Copy( originalData, __0x8146 * originalFormat.vertexSize, __0x8145, 0, originalFormat.vertexSize );
				var __0x8147 = new RawVertex( __0x8145, originalFormat );
				var __0x8148 = ConvertRawVertex( __0x8147, newFormat );
				Array.Copy( __0x8148.Data, 0, __0x8144, __0x8146 * newFormat.vertexSize, newFormat.vertexSize );
			}
			return __0x8144;
		}

		public void Load( Component_Mesh.ExtractedStructure extractedStructure )
		{
			var __0x8149 = extractedStructure.Structure;

			
			
			__0x8119 = __0x8255( extractedStructure.MeshGeometries );

			

			Vertices = new List<Vertex>( __0x8149.Vertices.Length );
			foreach( var __0x8237 in __0x8149.Vertices )
				Vertices.Add( new Vertex( CloneProperties( __0x8237.Properties ) ) );

			Edges = new List<Edge>( __0x8149.Edges.Length );
			foreach( var __0x8238 in __0x8149.Edges )
				Edges.Add( new Edge( __0x8238.Vertex1, __0x8238.Vertex2, CloneProperties( __0x8238.Properties ) ) );

			Faces = new List<Face>( __0x8149.Faces.Length );
			foreach( var __0x8239 in __0x8149.Faces )
			{
				var __0x8150 = new List<FaceVertex>( __0x8239.Triangles.Length );
				foreach( var __0x8240 in __0x8239.Triangles )
				{
					var __0x8151 = __0x8119[ __0x8240.RawGeometry ];
					var __0x8152 = extractedStructure.MeshGeometries[ __0x8240.RawGeometry ];

					var __0x8153 = new byte[ __0x8151.vertexSize ];
					Array.Copy( __0x8152.Vertices, __0x8240.RawVertex * __0x8151.vertexSize, __0x8153, 0, __0x8151.vertexSize );
					var __0x8154 = new RawVertex( __0x8153, __0x8151 );
					__0x8150.Add( new FaceVertex( __0x8240.Vertex, __0x8240.RawGeometry, __0x8154 ) );
				}

				Faces.Add( new Face( __0x8150, CloneProperties( __0x8239.Properties ), __0x8239.SmoothingGroup ) );
			}
		}

		
		public void Save( Component_Mesh mesh, UndoMultiAction undoForGeometries, Selection selection )
		{
			
			var __0x8155 = mesh.GetComponents<Component_MeshGeometry>();
			

			
			RemoveUnusedData( selection );

			var __0x8156 = new Component_Mesh.StructureClass();

			
			
			
			

			var __0x8157 = new (List<byte> geometryVertices, List<int> geometryIndices, int geometryVerticesCounter)[ __0x8155.Length ];
			for( int __0x8158 = 0; __0x8158 < __0x8155.Length; __0x8158++ )
			{
				__0x8157[ __0x8158 ].geometryVertices = new List<byte>();
				__0x8157[ __0x8158 ].geometryIndices = new List<int>();
			}

			{
				var __0x8159 = new List<Component_Mesh.StructureClass.Vertex>( Vertices.Count );
				foreach( var __0x8241 in Vertices )
					__0x8159.Add( new Component_Mesh.StructureClass.Vertex( __0x8241.Properties ) );
				__0x8156.Vertices = __0x8159.ToArray();

				var __0x8160 = new List<Component_Mesh.StructureClass.Edge>( Edges.Count );
				foreach( var __0x8242 in Edges )
					__0x8160.Add( new Component_Mesh.StructureClass.Edge( __0x8242.Vertex1, __0x8242.Vertex2, __0x8242.Properties ) );
				__0x8156.Edges = __0x8160.ToArray();

				var __0x8161 = new List<Component_Mesh.StructureClass.Face>( Faces.Count );
				foreach( var __0x8243 in Faces )
				{
					var __0x8162 = new List<Component_Mesh.StructureClass.FaceVertex>( __0x8243.Triangles.Count );
					foreach( var __0x8244 in __0x8243.Triangles )
					{
						

						ref var __0x8163 = ref __0x8157[ __0x8244.RawGeometry ];

						var __0x8164 = __0x8163.geometryVerticesCounter;
						__0x8163.geometryVertices.AddRange( __0x8244.RawVertex.Data );
						__0x8163.geometryIndices.Add( __0x8163.geometryVerticesCounter );

						__0x8163.geometryVerticesCounter++;

						__0x8162.Add( new Component_Mesh.StructureClass.FaceVertex( __0x8244.Vertex, __0x8244.RawGeometry, __0x8164 ) );
					}

					__0x8161.Add( new Component_Mesh.StructureClass.Face( __0x8162.ToArray(), __0x8243.Properties, __0x8243.SmoothingGroup ) );
				}
				__0x8156.Faces = __0x8161.ToArray();
			}

			
			if( undoForGeometries != null )
			{
				
				var __0x8165 = (Metadata.Property)mesh.MetadataGetMemberBySignature( "property:" + nameof( Component_Mesh.Structure ) );
				undoForGeometries.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( mesh, __0x8165, mesh.Structure ) ) );


				foreach( var __0x8245 in __0x8155 )
				{
					
					__0x8165 = (Metadata.Property)__0x8245.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshGeometry.Vertices ) );
					undoForGeometries.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x8245, __0x8165, __0x8245.Vertices ) ) );

					
					__0x8165 = (Metadata.Property)__0x8245.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshGeometry.Indices ) );
					undoForGeometries.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x8245, __0x8165, __0x8245.Indices ) ) );
				}
			}

			
			mesh.Structure = __0x8156;

			
			for( int __0x8166 = 0; __0x8166 < __0x8155.Length; __0x8166++ )
			{
				ref var __0x8167 = ref __0x8157[ __0x8166 ];
				__0x8155[ __0x8166 ].Vertices = __0x8167.geometryVertices.ToArray();
				__0x8155[ __0x8166 ].Indices = __0x8167.geometryIndices.ToArray();
			}
		}

		public void RemoveUnusedData( Selection selection )
		{
			
			

			

			var __0x8168 = new bool[ Vertices.Count ];
			var __0x8169 = new Dictionary<(int lowVertex, int highVertex), int>(); 
			void AddUsedEdge( int __0x8259, int __0x8260 ) => __0x8169[ CommonFunctions.OrderVertices( __0x8259, __0x8260 ) ] = -1;

			for( int __0x8170 = 0; __0x8170 < Faces.Count; __0x8170++ )
			{
				var __0x8171 = Faces[ __0x8170 ];
				if( __0x8171 == null )
					continue;

				int __0x8172 = __0x8171.Triangles.Count / 3;
				for( int __0x8173 = 0; __0x8173 < __0x8172; __0x8173++ )
				{
					var __0x8174 = __0x8171.Triangles;
					int __0x8175 = __0x8173 * 3;
					var __0x8176 = __0x8174[ __0x8175 ];
					var __0x8177 = __0x8174[ __0x8175 + 1 ];
					var __0x8178 = __0x8174[ __0x8175 + 2 ];

					if( __0x8176 == null || __0x8177 == null || __0x8178 == null ||
						__0x8176.Vertex == __0x8177.Vertex || __0x8176.Vertex == __0x8178.Vertex || __0x8177.Vertex == __0x8178.Vertex
						)
					{
						__0x8174[ __0x8175 ] = null;
						__0x8174[ __0x8175 + 1 ] = null;
						__0x8174[ __0x8175 + 2 ] = null;
					}

					if( __0x8171.Triangles[ __0x8175 ] != null )
					{
						__0x8168[ __0x8174[ __0x8175 ].Vertex ] = true;
						__0x8168[ __0x8174[ __0x8175 + 1 ].Vertex ] = true;
						__0x8168[ __0x8174[ __0x8175 + 2 ].Vertex ] = true;

						AddUsedEdge( __0x8174[ __0x8175 ].Vertex, __0x8174[ __0x8175 + 1 ].Vertex );
						AddUsedEdge( __0x8174[ __0x8175 + 1 ].Vertex, __0x8174[ __0x8175 + 2 ].Vertex );
						AddUsedEdge( __0x8174[ __0x8175 ].Vertex, __0x8174[ __0x8175 + 2 ].Vertex );
					}
				}
			}

			
			for( int __0x8179 = 0; __0x8179 < Edges.Count; __0x8179++ )
			{
				var __0x8180 = Edges[ __0x8179 ];
				if( __0x8180 != null )
				{
					if( __0x8180.Vertex1 == __0x8180.Vertex2 || !__0x8168[ __0x8180.Vertex1 ] || !__0x8168[ __0x8180.Vertex2 ] )
						Edges[ __0x8179 ] = null;
					var __0x8181 = CommonFunctions.OrderVertices( __0x8180.Vertex1, __0x8180.Vertex2 );
					if( __0x8169.TryGetValue( __0x8181, out int edgeIndex ) && edgeIndex == -1 )
						__0x8169[ __0x8181 ] = __0x8179; 
					else
					{
						
						Edges[ __0x8179 ] = null;
					}
				}
			}

			

			
			

			var __0x8182 = new List<Vertex>();
			int[] __0x8183 = new int[ Vertices.Count ]; 
			for( int __0x8184 = 0; __0x8184 < Vertices.Count; __0x8184++ )
			{
				if( !__0x8168[ __0x8184 ] )
					__0x8183[ __0x8184 ] = -1;
				else
				{
					__0x8183[ __0x8184 ] = __0x8182.Count;
					__0x8182.Add( Vertices[ __0x8184 ] );
				}
			}
			Vertices = __0x8182;

			
			var __0x8185 = new List<Edge>();
			int[] __0x8186 = null;
			bool __0x8187 = selection != null && 0 < selection.EdgeCount;
			if( __0x8187 )
			{
				__0x8186 = new int[ Edges.Count ];
				for( int __0x8188 = 0; __0x8188 < __0x8186.Length; __0x8188++ )
					__0x8186[ __0x8188 ] = -1;
			}

			for( int __0x8189 = 0; __0x8189 < Edges.Count; __0x8189++ )
			{
				var __0x8190 = Edges[ __0x8189 ];
				if( __0x8190 != null )
				{
					__0x8190.Vertex1 = __0x8183[ __0x8190.Vertex1 ];
					__0x8190.Vertex2 = __0x8183[ __0x8190.Vertex2 ];
					__0x8185.Add( __0x8190 );
					if( __0x8187 )
						__0x8186[ __0x8189 ] = __0x8185.Count - 1;
				}
			}
			Edges = __0x8185;

			
			var __0x8191 = new List<Face>();

			int[] __0x8192 = null;
			bool __0x8193 = selection != null && 0 < selection.FaceCount;
			if( __0x8193 )
			{
				__0x8192 = new int[ Faces.Count ];
				for( int __0x8194 = 0; __0x8194 < __0x8192.Length; __0x8194++ )
					__0x8192[ __0x8194 ] = -1;
			}
			for( int __0x8195 = 0; __0x8195 < Faces.Count; __0x8195++ )
			{
				var __0x8196 = Faces[ __0x8195 ];
				if( __0x8196 == null || __0x8196.Triangles == null || __0x8196.Triangles.Count == 0 ) 
					continue;

				
				var __0x8197 = new List<FaceVertex>();
				for( int __0x8198 = 0; __0x8198 < __0x8196.Triangles.Count; __0x8198++ )
				{
					var __0x8199 = __0x8196.Triangles[ __0x8198 ];
					if( __0x8199 != null )
					{
						__0x8199.Vertex = __0x8183[ __0x8199.Vertex ];
						__0x8197.Add( __0x8199 );
					}
				}
				if( __0x8197.Count % 3 != 0 )
					throw new Exception(); 
				if( __0x8197.Count != 0 )
				{
					__0x8196.Triangles = __0x8197;
					__0x8191.Add( __0x8196 );
					if( __0x8193 )
						__0x8192[ __0x8195 ] = __0x8191.Count - 1;
				}
			}
			Faces = __0x8191;

			bool __0x8200 = selection != null && 0 < selection.VertexCount;
			if( __0x8200 )
				for( int __0x8201 = 0; __0x8201 < selection.Vertices.Length; __0x8201++ )
				{
					int __0x8202 = __0x8183[ selection.Vertices[ __0x8201 ] ];
					if( selection.Vertices[ __0x8201 ] != __0x8202 )
					{
						selection.Vertices[ __0x8201 ] = __0x8202;
						selection.Changed = true;
					}
				}

			if( __0x8187 )
				for( int __0x8203 = 0; __0x8203 < selection.Edges.Length; __0x8203++ )
				{
					int __0x8204 = __0x8186[ selection.Edges[ __0x8203 ] ];
					if( selection.Edges[ __0x8203 ] != __0x8204 )
					{
						selection.Edges[ __0x8203 ] = __0x8204;
						selection.Changed = true;
					}
				}

			if( __0x8193 )
				for( int __0x8205 = 0; __0x8205 < selection.Faces.Length; __0x8205++ )
				{
					int __0x8206 = __0x8192[ selection.Faces[ __0x8205 ] ];
					if( selection.Faces[ __0x8205 ] != __0x8206 )
					{
						selection.Faces[ __0x8205 ] = __0x8206;
						selection.Changed = true;
					}
				}

			
		}


		
		
		
		
		
		
		
		
		


		
		
		public void MoveVertices( int[] vertices, Vector3F[] newPositions )
		{
			var __0x8207 = new HashSet<int>( vertices );
			for( int __0x8208 = 0; __0x8208 < vertices.Length; __0x8208++ )
				MoveVertex( vertices[ __0x8208 ], newPositions[ __0x8208 ], __0x8207 );

		}

		public void MoveVertex( int vertex, Vector3F newPosition, HashSet<int> allMoved = null )
		{
			
			
			
			
			

			foreach( var __0x8246 in Faces )
			{
				var __0x8209 = __0x8246.Triangles;
				for( var __0x8210 = 0; __0x8210 < __0x8209.Count; __0x8210 += 3 )
				{
					var __0x8211 = __0x8209[ __0x8210 ];
					var __0x8212 = __0x8209[ __0x8210 + 1 ];
					var __0x8213 = __0x8209[ __0x8210 + 2 ];

					if( __0x8211.Vertex == vertex || __0x8212.Vertex == vertex || __0x8213.Vertex == vertex )
					{
						var __0x8214 = CommonFunctions.CalculateNormal( __0x8211.RawVertex.Position, __0x8212.RawVertex.Position, __0x8213.RawVertex.Position );

						if( __0x8211.Vertex == vertex )
							__0x8211.RawVertex.Position = newPosition;
						if( __0x8212.Vertex == vertex )
							__0x8212.RawVertex.Position = newPosition;
						if( __0x8213.Vertex == vertex )
							__0x8213.RawVertex.Position = newPosition;

						
						if( !( allMoved != null && allMoved.Contains( __0x8211.Vertex ) && allMoved.Contains( __0x8212.Vertex ) && allMoved.Contains( __0x8213.Vertex ) ) )
							UpdateNormalsAndTangentsAfterPositionChange( __0x8211, __0x8212, __0x8213, __0x8214 );
					}
				}
			}
		}

		
		
		

		
		public void MoveVertex( List<MeshData.FaceVertex> fVertices, int triangleStart, int vertexToMoveIndex, Vector3F newPosition )
		{
			Vector3F __0x8215 = CommonFunctions.CalculateNormal(
				fVertices[ triangleStart ].RawVertex.Position,
				fVertices[ triangleStart + 1 ].RawVertex.Position,
				fVertices[ triangleStart + 2 ].RawVertex.Position );
			fVertices[ vertexToMoveIndex ].RawVertex.Position = newPosition;
			UpdateNormalsAndTangentsAfterPositionChange( fVertices[ triangleStart ], fVertices[ triangleStart + 1 ], fVertices[ triangleStart + 2 ], __0x8215 );
		}


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		public void UpdateNormalsAndTangentsAfterPositionChange( MeshData.FaceVertex v0, MeshData.FaceVertex v1, MeshData.FaceVertex v2, Vector3F? oldNormal )
		{
			

			

			
			
			
			CommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( this, v0, v1, v2 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		


		public Vector3F GetVertexPosition( int vertex )
		{
			foreach( var __0x8247 in Faces )
			{
				foreach( var __0x8248 in __0x8247.Triangles )
				{
					if( __0x8248.Vertex == vertex )
						return __0x8248.RawVertex.Position;
				}
			}
			return Vector3F.Zero;
		}

		public Dictionary<int, Vector3> GetVertexPositions()
		{
			int __0x8216 = 0;
			foreach( var __0x8249 in Faces )
				foreach( var __0x8250 in __0x8249.Triangles )
					__0x8216 = Math.Max( __0x8216, __0x8250.Vertex );

			var __0x8217 = new Dictionary<int, Vector3>( __0x8216 + 1 );

			foreach( var __0x8251 in Faces )
				foreach( var __0x8252 in __0x8251.Triangles )
					__0x8217[ __0x8252.Vertex ] = __0x8252.RawVertex.Position;

			return __0x8217;
		}

		public void ReplaceVertexIndexForEdgesAndFaces( int oldVertex, int newVertex )
		{
			foreach( var __0x8253 in Edges )
			{
				if( __0x8253.Vertex1 == oldVertex )
					__0x8253.Vertex1 = newVertex;
				if( __0x8253.Vertex2 == oldVertex )
					__0x8253.Vertex2 = newVertex;
			}

			foreach( var __0x8254 in Faces )
			{
				for( int __0x8218 = 0; __0x8218 < __0x8254.Triangles.Count; __0x8218++ )
				{
					if( __0x8254.Triangles[ __0x8218 ].Vertex == oldVertex )
						__0x8254.Triangles[ __0x8218 ].Vertex = newVertex;
				}
			}
		}

		public void AddEdge( int vertex1, int vertex2 )
		{
			
			Edges.Add( new MeshData.Edge( vertex1, vertex2 ) );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		public static MeshData BuildFromRaw( List<(Vector3F[] positions, int[] indices, MeshGeometryFormat format)> geometries )
		{
			if( geometries == null || geometries.Count == 0 )
				return null;
			var __0x8219 = new MeshData();
			__0x8219.__0x8119 = geometries.Select( __0x8261 => __0x8261.format ).ToArray();

			__0x8219.Vertices = new List<Vertex>();
			__0x8219.Faces = new List<Face>();
			var __0x8220 = new HashSet<(int lowVertex, int highVertex)>();

			for( int __0x8221 = 0; __0x8221 < geometries.Count; __0x8221++ )
			{
				var __0x8222 = geometries[ __0x8221 ];

				int __0x8223 = __0x8219.Vertices.Count;
				for( int __0x8224 = 0; __0x8224 < __0x8222.positions.Length; __0x8224++ )
					__0x8219.Vertices.Add( new Vertex() );

				int __0x8225 = __0x8222.indices.Length / 3;
				if( __0x8222.indices.Length % 3 != 0 )
					throw new Exception();

				for( int __0x8226 = 0; __0x8226 < __0x8225; __0x8226++ )
				{
					int __0x8227 = __0x8226 * 3;

					var __0x8228 = new List<FaceVertex>();
					Vector4F __0x8229 = new Vector4F( 1, 0, 0, -1 ); 

					var __0x8230 = new FaceVertex( __0x8223 + __0x8222.indices[ __0x8227 ], __0x8221, new RawVertex( new byte[ __0x8222.format.vertexSize ], __0x8222.format ) )
					{
						RawVertex = { Position = __0x8222.positions[ __0x8222.indices[ __0x8227 ] ], Color = __0x8136, Tangent = __0x8229 }
					};
					__0x8228.Add( __0x8230 );

					var __0x8231 = new FaceVertex( __0x8223 + __0x8222.indices[ __0x8227 + 1 ], __0x8221, new RawVertex( new byte[ __0x8222.format.vertexSize ], __0x8222.format ) )
					{
						RawVertex = { Position = __0x8222.positions[ __0x8222.indices[ __0x8227 + 1 ] ], Color = __0x8136, Tangent = __0x8229 }
					};
					__0x8228.Add( __0x8231 );

					var __0x8232 = new FaceVertex( __0x8223 + __0x8222.indices[ __0x8227 + 2 ], __0x8221, new RawVertex( new byte[ __0x8222.format.vertexSize ], __0x8222.format ) )
					{
						RawVertex = { Position = __0x8222.positions[ __0x8222.indices[ __0x8227 + 2 ] ], Color = __0x8136, Tangent = __0x8229 }
					};
					__0x8228.Add( __0x8232 );

					CommonFunctions.CalculateNormal( __0x8230, __0x8231, __0x8232 );

					var __0x8233 = new Face( __0x8228, null, 0 );
					__0x8219.Faces.Add( __0x8233 );

					__0x8220.Add( CommonFunctions.OrderVertices( __0x8230.Vertex, __0x8231.Vertex ) );
					__0x8220.Add( CommonFunctions.OrderVertices( __0x8231.Vertex, __0x8232.Vertex ) );
					__0x8220.Add( CommonFunctions.OrderVertices( __0x8232.Vertex, __0x8230.Vertex ) );
				}
			}

			__0x8219.Edges = __0x8220.Select( __0x8262 => new Edge( __0x8262.lowVertex, __0x8262.highVertex ) ).ToList();

			return __0x8219;
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	

	public static partial class OneMeshActions
	{
		public delegate string OneMeshActionCanExecuteDelegate( Component_Mesh __0x8624 );

		
		
		
		
		public delegate void OneMeshActionExecuteDelegate( Component_Mesh __0x8625, UndoMultiAction __0x8626, UndoMultiAction __0x8627 );

		
		static void __0x8600( ActionContext __0x8628, OneMeshActionCanExecuteDelegate __0x8629, OneMeshActionExecuteDelegate __0x8630 )
		{
			var (meshInSpace, mesh) = __0x8628.GetSelectedMesh();
			if( mesh != null )
			{
				
				
				
				
				
				
				

				
				bool __0x8263 = mesh.Enabled;

				try
				{
					var __0x8264 = __0x8628.DocumentWindow.Document;

					var __0x8265 = new UndoMultiAction();

					
					CommonFunctions.CopyExternalMesh( __0x8264, meshInSpace, ref mesh, __0x8265, out var needUndoForNextActions );

					
					
					var __0x8266 = __0x8629( mesh );
					if( !string.IsNullOrEmpty( __0x8266 ) )
					{
						EditorMessageBox.ShowWarning( __0x8266 );
						__0x8264.CommitUndoAction( __0x8265 );
						return;
					}
					
					__0x8263 = mesh.Enabled;
					mesh.Enabled = false;

					
					CommonFunctions.ConvertProceduralMeshGeometries( __0x8264, mesh, needUndoForNextActions ? __0x8265 : null, ref needUndoForNextActions );

					
					__0x8630( mesh, needUndoForNextActions ? __0x8265 : null, __0x8265 ); 

					__0x8264.CommitUndoAction( __0x8265 );
				}
				finally
				{
					
					mesh.Enabled = __0x8263;
					__0x8628.ActionEnd();
				}
			}
		}


		static string __0x8601( Component_Mesh __0x8631 )
		{
			if( !CommonFunctions.CheckValidMesh( __0x8631, out var error ) )
				return error;
			return "";
		}

		

		public static void MergeVerticesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if(  1 < actionContext.Selection.VertexCount )
				context.Enabled = true;
		}

		
		public static void MergeVertices( ActionContext actionContext, bool moveToFirst )
		{
			void Execute( Component_Mesh __0x8632, UndoMultiAction __0x8633, UndoMultiAction __0x8634 )
			{
				
				var __0x8267 = new MeshData();
				var __0x8268 = __0x8632.ExtractStructure();
				__0x8267.Load( __0x8268 );

				int __0x8269 = __0x8602( __0x8267, actionContext.Selection.Vertices, moveToFirst );
				actionContext.Selection.Vertices = new[] { __0x8269 };

				
				__0x8267.Save( __0x8632, __0x8633, actionContext.Selection );

				
				
				
				

			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		static int __0x8602( MeshData __0x8635, int[] __0x8636, bool __0x8637 )
		{
			int __0x8270 = __0x8636[ 0 ];
			
			Vector3F __0x8271;
			{
				if( __0x8637 )
					__0x8271 = __0x8635.GetVertexPosition( __0x8270 );
				else
				{
					__0x8271 = Vector3F.Zero;
					foreach( var __0x8544 in __0x8636 )
						__0x8271 += __0x8635.GetVertexPosition( __0x8544 );
					__0x8271 /= __0x8636.Length;
				}
			}

			
			foreach( var __0x8545 in __0x8636 )
				__0x8635.MoveVertex( __0x8545, __0x8271 );

			
			for( int __0x8272 = 1; __0x8272 < __0x8636.Length; __0x8272++ )
				__0x8635.ReplaceVertexIndexForEdgesAndFaces( __0x8636[ __0x8272 ], __0x8270 );

			return __0x8270;
		}

		

		public static void DeleteFacesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if(  0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		public static void DeleteFaces( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8638, UndoMultiAction __0x8639, UndoMultiAction __0x8640 )
			{
				var __0x8273 = actionContext.Selection.Faces;
				if( __0x8273.Length == 0 )
					return;
				string __0x8274 = __0x8273.Length > 1 ? "s" : "";
				if( EditorMessageBox.ShowQuestion( $"Delete selected face{__0x8274}?", EMessageBoxButtons.YesNo ) == EDialogResult.No )
					return;
				__0x8603( __0x8638, __0x8273, __0x8639, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		static void __0x8603( Component_Mesh __0x8641, int[] __0x8642, UndoMultiAction __0x8643, Selection __0x8644 )
		{
			if( __0x8642 == null || __0x8642.Length == 0 )
				return;

			var __0x8275 = new MeshData();
			var __0x8276 = __0x8641.ExtractStructure();
			__0x8275.Load( __0x8276 );

			
			for( int __0x8277 = 0; __0x8277 < __0x8642.Length; __0x8277++ )
				__0x8275.Faces[ __0x8642[ __0x8277 ] ] = null;

			__0x8275.Save( __0x8641, __0x8643, __0x8644 );
		}

		

		public static void MoveVertices( ActionContext actionContext, int[] vertices, Vector3F[] newPositions )
		{
			void Execute( Component_Mesh __0x8645, UndoMultiAction __0x8646, UndoMultiAction __0x8647 )
			{
				
				var __0x8278 = new MeshData();
				var __0x8279 = __0x8645.ExtractStructure();
				__0x8278.Load( __0x8279 );

				__0x8278.MoveVertices( vertices, newPositions );

				
				__0x8278.Save( __0x8645, __0x8646, selection: actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		
		#region SplitVertices

		const float __0x8280 = 15f;

		public static void SplitVerticesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 0 < actionContext.Selection.VertexCount )
				context.Enabled = true;
		}

		
		public static void SplitVertices( ActionContext actionContext, bool splitOnlyOne, bool shiftSplitVertices )
		{
			void Execute( Component_Mesh __0x8648, UndoMultiAction __0x8649, UndoMultiAction __0x8650 )
			{
				var __0x8281 = new MeshData();
				var __0x8282 = __0x8648.ExtractStructure();
				__0x8281.Load( __0x8282 );
				var __0x8283 = actionContext.Selection.Vertices;
				List<int>[] __0x8284;
				if( __0x8604( __0x8281, __0x8283 ) )
					__0x8284 = __0x8606( __0x8281, __0x8283, splitOnlyOne, shiftSplitVertices );
				else
					__0x8284 = __0x8605( __0x8281, __0x8283, splitOnlyOne, true );

				actionContext.Selection.ClearSelection();
				__0x8281.Save( __0x8648, __0x8649, actionContext.Selection );
			}

			
			__0x8600( actionContext, __0x8601, Execute );
		}

		static bool __0x8604( MeshData __0x8651, int[] __0x8652 )
		{
			foreach( var __0x8546 in __0x8652 )
			{
				int __0x8285 = -1;
				for( int __0x8286 = 0; __0x8286 < __0x8651.Faces.Count; __0x8286++ )
				{
					var __0x8287 = __0x8651.Faces[ __0x8286 ];
					for( int __0x8288 = 0; __0x8288 < __0x8287.Triangles.Count; __0x8288++ )
					{
						if( __0x8287.Triangles[ __0x8288 ].Vertex == __0x8546 )
						{
							if( __0x8285 == -1 )
								__0x8285 = __0x8286;
							else
							{
								if( __0x8285 != __0x8286 )
									return true;
							}
						}
					}
				}
			}
			return false;
		}

		
		static List<int>[] __0x8605( MeshData __0x8653, int[] __0x8654, bool __0x8655, bool __0x8656 )
		{
			var __0x8289 = new List<int>[ __0x8654.Length ];

			if( __0x8654.Length == 0 )
				return new List<int>[ 0 ];

			for( int __0x8290 = 0; __0x8290 < __0x8654.Length; __0x8290++ )
			{
				var __0x8291 = CommonFunctions.GetTrianglesByVertex( __0x8653, __0x8654[ __0x8290 ] );
				if( 3 < __0x8291.Count )
				{
					__0x8289[ __0x8290 ] = new List<int>();
					

					int __0x8292 = __0x8655 ? 2 * 3 : __0x8291.Count;
					var __0x8293 = new Dictionary<(int lowVertex, int highVertex), int>();

					for( int __0x8294 = 0; __0x8294 < __0x8292; __0x8294 += 3 )
					{
						var __0x8295 = __0x8291[ __0x8294 ];

						var __0x8296 = new MeshData.Vertex( MeshData.CloneProperties( __0x8653.Vertices[ __0x8295.Vertex ].Properties ) );
						__0x8653.Vertices.Add( __0x8296 );
						__0x8295.Vertex = __0x8653.Vertices.Count - 1;
						__0x8289[ __0x8290 ].Add( __0x8295.Vertex );

						AddEdge( __0x8293, __0x8291[ __0x8294 ].Vertex, __0x8291[ __0x8294 + 1 ].Vertex );
						AddEdge( __0x8293, __0x8291[ __0x8294 ].Vertex, __0x8291[ __0x8294 + 2 ].Vertex );

						if( __0x8656 )
						{
							var __0x8297 = __0x8291[ __0x8294 + 1 ].RawVertex.Position - __0x8291[ __0x8294 ].RawVertex.Position;
							__0x8297 += __0x8291[ __0x8294 + 2 ].RawVertex.Position - __0x8291[ __0x8294 ].RawVertex.Position;
							__0x8297 /= 2 * __0x8280;
							
							__0x8653.MoveVertex( __0x8291, __0x8294, __0x8294, __0x8291[ __0x8294 ].RawVertex.Position + __0x8297 );
						}
					}
					foreach( var __0x8547 in __0x8293 )
						if( __0x8547.Value == 1 )
							__0x8653.AddEdge( __0x8547.Key.lowVertex, __0x8547.Key.highVertex );
				}
			}

			return __0x8289;
		}


		
		static List<int>[] __0x8606( MeshData __0x8657, int[] __0x8658, bool __0x8659, bool __0x8660 )
		{
			var __0x8298 = new List<int>[ __0x8658.Length ];

			if( __0x8658.Length == 0 )
				return new List<int>[ 0 ];

			for( int __0x8299 = 0; __0x8299 < __0x8658.Length; __0x8299++ )
			{
				__0x8298[ __0x8299 ] = new List<int>();
				

				var __0x8300 = __0x8607( __0x8657, __0x8658[ __0x8299 ] );
				if( 1 < __0x8300.Count )
				{
					int __0x8301 = __0x8659 ? 2 : __0x8300.Count;

					for( int __0x8302 = 0; __0x8302 < __0x8301; __0x8302++ )
					{
						var __0x8303 = __0x8300[ __0x8302 ];

						var __0x8304 = new MeshData.Vertex( MeshData.CloneProperties( __0x8657.Vertices[ __0x8303[ 0 ].Vertex ].Properties ) ); 
						__0x8657.Vertices.Add( __0x8304 );
						int __0x8305 = __0x8657.Vertices.Count - 1;
						__0x8298[ __0x8299 ].Add( __0x8305 );

						var __0x8306 = new Dictionary<(int lowVertex, int highVertex), int>();
						Vector3F __0x8307 = Vector3F.Zero;
						for( int __0x8308 = 0; __0x8308 < __0x8303.Count; __0x8308 += 3 )
						{
							__0x8303[ __0x8308 ].Vertex = __0x8305;
							AddEdge( __0x8306, __0x8303[ __0x8308 ].Vertex, __0x8303[ __0x8308 + 1 ].Vertex );
							AddEdge( __0x8306, __0x8303[ __0x8308 ].Vertex, __0x8303[ __0x8308 + 2 ].Vertex );
							if( __0x8660 )
							{
								__0x8307 += ( __0x8303[ __0x8308 + 1 ].RawVertex.Position - __0x8303[ __0x8308 ].RawVertex.Position );
								__0x8307 += ( __0x8303[ __0x8308 + 2 ].RawVertex.Position - __0x8303[ __0x8308 ].RawVertex.Position );
							}
						}

						if( __0x8660 )
						{
							__0x8307 /= 2 * ( __0x8303.Count / 3 ) * __0x8280;
							for( int __0x8309 = 0; __0x8309 < __0x8303.Count; __0x8309 += 3 ) 
								__0x8657.MoveVertex( __0x8303, __0x8309, __0x8309, __0x8303[ __0x8309 ].RawVertex.Position + __0x8307 );
						}

						foreach( var __0x8548 in __0x8306 )
							if( __0x8548.Value == 1 )
								__0x8657.AddEdge( __0x8548.Key.lowVertex, __0x8548.Key.highVertex );
					}
				}
			}

			return __0x8298;
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		


		
		static List<List<MeshData.FaceVertex>> __0x8607( MeshData __0x8661, int __0x8662 )
		{
			var __0x8310 = new List<List<MeshData.FaceVertex>>();
			for( int __0x8311 = 0; __0x8311 < __0x8661.Faces.Count; __0x8311++ )
			{
				var __0x8312 = __0x8661.Faces[ __0x8311 ];
				List<MeshData.FaceVertex> __0x8313 = null;
				for( int __0x8314 = 0; __0x8314 < __0x8312.Triangles.Count; __0x8314++ )
				{
					if( __0x8312.Triangles[ __0x8314 ].Vertex == __0x8662 )
					{
						if( __0x8313 == null )
							__0x8313 = new List<MeshData.FaceVertex>();
						__0x8313.Add( __0x8312.Triangles[ __0x8314 ] );

						int __0x8315 = __0x8314 - __0x8314 % 3;
						if( __0x8314 == __0x8315 )
						{
							__0x8313.Add( __0x8312.Triangles[ __0x8315 + 1 ] );
							__0x8313.Add( __0x8312.Triangles[ __0x8315 + 2 ] );
						}
						else if( __0x8314 == __0x8315 + 1 )
						{
							__0x8313.Add( __0x8312.Triangles[ __0x8315 + 2 ] );
							__0x8313.Add( __0x8312.Triangles[ __0x8315 ] );
						}
						else if( __0x8314 == __0x8315 + 2 )
						{
							__0x8313.Add( __0x8312.Triangles[ __0x8315 ] );
							__0x8313.Add( __0x8312.Triangles[ __0x8315 + 1 ] );
						}
					}
				}
				if( __0x8313 != null )
					__0x8310.Add( __0x8313 );
			}
			return __0x8310;
		}

		#endregion

		

		public static void FlipNormalsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length == 1 ||
				0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void FlipNormals( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8663, UndoMultiAction __0x8664, UndoMultiAction __0x8665 )
			{
				var __0x8316 = __0x8663.ExtractStructure();
				var __0x8317 = new MeshData();
				__0x8317.Load( __0x8316 );

				if( actionContext.SelectionMode == SelectionMode.Object )
					for( int __0x8318 = 0; __0x8318 < __0x8317.Faces.Count; __0x8318++ )
						__0x8608( __0x8317, __0x8318, __0x8664 );
				else if( actionContext.SelectionMode == SelectionMode.Face )
					foreach( var __0x8549 in actionContext.Selection.Faces )
						__0x8608( __0x8317, __0x8549, __0x8664 );

				__0x8317.Save( __0x8663, __0x8664, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		static void __0x8608( MeshData __0x8666, int __0x8667, UndoMultiAction __0x8668 )
		{

			var __0x8319 = __0x8666.Faces[ __0x8667 ];
			for( int __0x8320 = 0; __0x8320 < __0x8319.Triangles.Count; __0x8320 += 3 )
			{
				var __0x8321 = __0x8319.Triangles[ __0x8320 ];
				__0x8319.Triangles[ __0x8320 ] = __0x8319.Triangles[ __0x8320 + 1 ];
				__0x8319.Triangles[ __0x8320 + 1 ] = __0x8321;

				__0x8319.Triangles[ __0x8320 ].RawVertex.Normal = -__0x8319.Triangles[ __0x8320 ].RawVertex.Normal;
				__0x8319.Triangles[ __0x8320 + 1 ].RawVertex.Normal = -__0x8319.Triangles[ __0x8320 + 1 ].RawVertex.Normal;
				__0x8319.Triangles[ __0x8320 + 2 ].RawVertex.Normal = -__0x8319.Triangles[ __0x8320 + 2 ].RawVertex.Normal;
			}
		}


		

		#region BridgeEdges  

		public static void BridgeEdgesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			var __0x8322 = actionContext.Selection.Edges;
			if( __0x8322.Length == 2 )
			{
				var __0x8323 = actionContext.BuilderWorkareaMode.meshToEditData; 
				var __0x8324 = FindTriangles( __0x8323, __0x8323.Edges[ __0x8322[ 0 ] ].Vertex1, __0x8323.Edges[ __0x8322[ 0 ] ].Vertex2 );
				var __0x8325 = FindTriangles( __0x8323, __0x8323.Edges[ __0x8322[ 1 ] ].Vertex1, __0x8323.Edges[ __0x8322[ 1 ] ].Vertex2 );
				if( __0x8324.Count == 1 && __0x8325.Count == 1 )
					context.Enabled = true;
			}
		}

		
		public static void BridgeEdges( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8669, UndoMultiAction __0x8670, UndoMultiAction __0x8671 )
			{
				var __0x8326 = actionContext.Selection.Edges;
				if( __0x8326.Length == 2 )
				{
					var __0x8327 = new MeshData();
					var __0x8328 = __0x8669.ExtractStructure();
					__0x8327.Load( __0x8328 );

					__0x8609( __0x8327, __0x8326[ 0 ], __0x8326[ 1 ] );
					__0x8327.Save( __0x8669, __0x8670, actionContext.Selection );
				}
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		
		
		
		
		
		

		static void __0x8609( MeshData __0x8672, int __0x8673, int __0x8674 )
		{
			int __0x8329 = __0x8672.Edges[ __0x8673 ].Vertex1;
			int __0x8330 = __0x8672.Edges[ __0x8673 ].Vertex2;
			int __0x8331 = __0x8672.Edges[ __0x8674 ].Vertex1;
			int __0x8332 = __0x8672.Edges[ __0x8674 ].Vertex2;

			bool __0x8333 = false;
			{
				int __0x8334 = -1;
				int __0x8335 = -1;
				int __0x8336 = -1;

				if( __0x8329 == __0x8331 )
				{
					__0x8334 = __0x8329;
					__0x8335 = __0x8330;
					__0x8336 = __0x8332;
				}
				else if( __0x8329 == __0x8332 )
				{
					__0x8334 = __0x8329;
					__0x8335 = __0x8330;
					__0x8336 = __0x8331;
				}
				else if( __0x8330 == __0x8331 )
				{
					__0x8334 = __0x8330;
					__0x8335 = __0x8329;
					__0x8336 = __0x8332;
				}
				else if( __0x8330 == __0x8332 )
				{
					__0x8334 = __0x8330;
					__0x8335 = __0x8329;
					__0x8336 = __0x8331;
				}

				if( __0x8334 != -1 ) 
				{
					__0x8333 = true;

					__0x8611( __0x8672, __0x8335, __0x8334, __0x8336 );
				}
			}

			if( !__0x8333 )
			{
				__0x8610( __0x8672, __0x8329, __0x8330, __0x8331, __0x8332 );
			}
		}

		static void __0x8610( MeshData __0x8675, int __0x8676, int __0x8677, int __0x8678, int __0x8679 )
		{
			var __0x8337 = FindTriangles( __0x8675, __0x8676, __0x8677 );
			var __0x8338 = FindTriangles( __0x8675, __0x8678, __0x8679 );
			if( __0x8337.Count != 1 || __0x8338.Count != 1 )
			{
				
				
				return;
			}

			var __0x8339 = __0x8337[ 0 ];
			var __0x8340 = __0x8338[ 0 ];

			int __0x8341 = __0x8339.fv0.RawGeometry; 

			if( __0x8339.reversed )
				__0x8612( ref __0x8676, ref __0x8677 );
			if( __0x8340.reversed )
				__0x8612( ref __0x8678, ref __0x8679 );

			var __0x8342 = __0x8675.GetVertexPosition( __0x8676 );
			var __0x8343 = __0x8675.GetVertexPosition( __0x8677 );
			var __0x8344 = __0x8675.GetVertexPosition( __0x8678 );
			var __0x8345 = __0x8675.GetVertexPosition( __0x8679 );

			
			{
				
				var __0x8346 = __0x8675.CreateFaceVertex( __0x8677, __0x8341 );
				__0x8346.RawVertex.Position = __0x8343;
				

				var __0x8347 = __0x8675.CreateFaceVertex( __0x8676, __0x8341 );
				__0x8347.RawVertex.Position = __0x8342;

				var __0x8348 = __0x8675.CreateFaceVertex( __0x8678, __0x8341 );
				__0x8348.RawVertex.Position = __0x8344;

				CommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x8675, __0x8346, __0x8347, __0x8348 );
				__0x8675.Faces.Add( new MeshData.Face(
					new List<MeshData.FaceVertex>() { __0x8346, __0x8347, __0x8348 },
					null,
					0 
				) );
				__0x8675.AddEdge( __0x8676, __0x8678 );
				__0x8675.AddEdge( __0x8677, __0x8678 );
			}
			{
				
				var __0x8349 = __0x8675.CreateFaceVertex( __0x8679, __0x8341 );
				__0x8349.RawVertex.Position = __0x8345;

				var __0x8350 = __0x8675.CreateFaceVertex( __0x8678, __0x8341 );
				__0x8350.RawVertex.Position = __0x8344;

				var __0x8351 = __0x8675.CreateFaceVertex( __0x8676, __0x8341 );
				__0x8351.RawVertex.Position = __0x8342;

				CommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x8675, __0x8349, __0x8350, __0x8351 );
				__0x8675.Faces.Add( new MeshData.Face(
					new List<MeshData.FaceVertex>() { __0x8349, __0x8350, __0x8351 },
					null,
					0 
				) );
				__0x8675.AddEdge( __0x8676, __0x8679 );
			}

		}

		static void __0x8611( MeshData __0x8680, int __0x8681, int __0x8682, int __0x8683 )
		{
			

			var __0x8352 = FindTriangles( __0x8680, __0x8681, __0x8682 );
			var __0x8353 = FindTriangles( __0x8680, __0x8682, __0x8683 );
			if( __0x8352.Count != 1 || __0x8353.Count != 1 )
			{
				
				
				return;
			}

			var __0x8354 = __0x8352[ 0 ];
			var __0x8355 = __0x8353[ 0 ];

			if( __0x8354.reversed != __0x8355.reversed )
			{
				
				
				return;
			}
			if( __0x8354.reversed )
			{
				__0x8612( ref __0x8354, ref __0x8355 );
				__0x8612( ref __0x8681, ref __0x8683 );
				
			}

			int __0x8356 = __0x8354.fv0.RawGeometry; 

			var __0x8357 = __0x8680.CreateFaceVertex( __0x8681, __0x8356 );
			__0x8357.RawVertex.Position = __0x8680.GetVertexPosition( __0x8681 );

			var __0x8358 = __0x8680.CreateFaceVertex( __0x8683, __0x8356 );
			__0x8358.RawVertex.Position = __0x8680.GetVertexPosition( __0x8683 );

			var __0x8359 = __0x8680.CreateFaceVertex( __0x8682, __0x8356 );
			__0x8359.RawVertex.Position = __0x8680.GetVertexPosition( __0x8682 );

			CommonFunctions.CalculateTriangleTangentsAndNormalByAdjacent( __0x8680, __0x8357, __0x8358, __0x8359 );

			__0x8680.Faces.Add( new MeshData.Face(
				new List<MeshData.FaceVertex>() { __0x8357, __0x8358, __0x8359 },
				null,
				0 
			) );
			__0x8680.AddEdge( __0x8681, __0x8683 );
		}

		static void __0x8612<T>( ref T __0x8684, ref T __0x8685 )
		{
			T __0x8360 = __0x8684;
			__0x8684 = __0x8685;
			__0x8685 = __0x8360;
		}

		
		
		internal static List<(MeshData.FaceVertex fv0, MeshData.FaceVertex fv1, MeshData.FaceVertex fv2, bool reversed)> FindTriangles( MeshData data, int vertex1, int vertex2 )
		{
			var __0x8361 = new List<(MeshData.FaceVertex fv1, MeshData.FaceVertex fv2, MeshData.FaceVertex fv3, bool reversed)>();
			for( int __0x8362 = 0; __0x8362 < data.Faces.Count; __0x8362++ )
			{
				var __0x8363 = data.Faces[ __0x8362 ].Triangles;
				for( int __0x8364 = 0; __0x8364 < __0x8363.Count; __0x8364 += 3 )
				{
					var __0x8365 = __0x8363[ __0x8364 ];
					var __0x8366 = __0x8363[ __0x8364 + 1 ];
					var __0x8367 = __0x8363[ __0x8364 + 2 ];

					if( __0x8365.Vertex == vertex1 && __0x8366.Vertex == vertex2 )
						__0x8361.Add( (__0x8365, __0x8366, __0x8367, false) );
					else if( __0x8366.Vertex == vertex1 && __0x8367.Vertex == vertex2 )
						__0x8361.Add( (__0x8366, __0x8367, __0x8365, false) );
					else if( __0x8367.Vertex == vertex1 && __0x8365.Vertex == vertex2 )
						__0x8361.Add( (__0x8367, __0x8365, __0x8366, false) );

					if( __0x8365.Vertex == vertex2 && __0x8366.Vertex == vertex1 )
						__0x8361.Add( (__0x8365, __0x8366, __0x8367, true) );
					else if( __0x8366.Vertex == vertex2 && __0x8367.Vertex == vertex1 )
						__0x8361.Add( (__0x8366, __0x8367, __0x8365, true) );
					else if( __0x8367.Vertex == vertex2 && __0x8365.Vertex == vertex1 )
						__0x8361.Add( (__0x8367, __0x8365, __0x8366, true) );
				}
			}
			return __0x8361;
		}

		#endregion

		

		#region ConformNormals  

		public static void ConformNormalsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 
				( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length == 1 ||
				  0 < actionContext.Selection.FaceCount ))
				context.Enabled = true;
		}

		

		
		public static void ConformNormals( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8686, UndoMultiAction __0x8687, UndoMultiAction __0x8688 )
			{
				var __0x8368 = new MeshData();
				var __0x8369 = __0x8686.ExtractStructure();
				__0x8368.Load( __0x8369 );

				ConformNormals( __0x8368.Faces );
				__0x8614( __0x8368 );

				__0x8368.Save( __0x8686, __0x8687, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		

		
		
		
		
		
		
		
		
		
		
		
		internal static void ConformNormals( List<MeshData.Face> faces )
		{
			

			
			

			
			
			var __0x8370 = new Dictionary<(int vertexLow, int vertexHigh), List<(int faceIndex, int triangleIndex, bool reversed)>>();

			void AddTriangle( int __0x8689, int __0x8690, int __0x8691, int __0x8692 ) 
			{
				bool __0x8371 = false;
				if( __0x8692 < __0x8691 )
				{
					__0x8612( ref __0x8691, ref __0x8692 );
					__0x8371 = true;
				}

				if( !__0x8370.TryGetValue( (__0x8691, __0x8692), out var list ) )
				{
					list = new List<(int faceIndex, int triangleIndex, bool reversed)>();
					__0x8370[ (__0x8691, __0x8692) ] = list;
				}
				list.Add( (__0x8689, __0x8690, __0x8371) );
			}

			

			for( int __0x8372 = 0; __0x8372 < faces.Count; __0x8372++ )
			{
				var __0x8373 = faces[ __0x8372 ];

				for( int __0x8374 = 0; __0x8374 < __0x8373.Triangles.Count; __0x8374 += 3 )
				{
					int __0x8375 = __0x8374 / 3;
					AddTriangle( __0x8372, __0x8375, __0x8373.Triangles[ __0x8374 ].Vertex, __0x8373.Triangles[ __0x8374 + 1 ].Vertex );
					AddTriangle( __0x8372, __0x8375, __0x8373.Triangles[ __0x8374 + 1 ].Vertex, __0x8373.Triangles[ __0x8374 + 2 ].Vertex );
					AddTriangle( __0x8372, __0x8375, __0x8373.Triangles[ __0x8374 + 2 ].Vertex, __0x8373.Triangles[ __0x8374 ].Vertex );
				}
			}

			
			ConformantMark[][] __0x8376 = new ConformantMark[ faces.Count ][];
			for( int __0x8377 = 0; __0x8377 < faces.Count; __0x8377++ )
				__0x8376[ __0x8377 ] = new ConformantMark[ faces[ __0x8377 ].Triangles.Count / 3 ];

			

			var __0x8378 = new Stack<(int faceIndex, int triangleIndex)>(); 

			
			
			while( true )
			{
				
				(int faceIndex, int triangleIndex)? __0x8379 = null;
				for( int __0x8380 = 0; __0x8380 < __0x8376.Length; __0x8380++ )
				{
					for( int __0x8381 = 0; __0x8381 < __0x8376[ __0x8380 ].Length; __0x8381++ )
					{
						if( __0x8376[ __0x8380 ][ __0x8381 ] == ConformantMark.NotProcessed )
						{
							__0x8379 = (__0x8380, __0x8381);
							break;
						}
					}
					if( __0x8379 != null )
						break;
				}

				if( __0x8379 == null )
					break;
				__0x8376[ __0x8379.Value.faceIndex ][ __0x8379.Value.triangleIndex ] = ConformantMark.Conformant; 
				__0x8378.Push( (__0x8379.Value.faceIndex, __0x8379.Value.triangleIndex) ); 
				__0x8613( faces, __0x8370, __0x8376, __0x8378 );

				
			}
		}

		enum ConformantMark { NotProcessed = 0, Conformant, NonConformant, Done }

		static void __0x8613(
			List<MeshData.Face> __0x8693,
			Dictionary<(int vertexLow, int vertexHigh), List<(int faceIndex, int triangleIndex, bool reversed)>> __0x8694,
			ConformantMark[][] __0x8695,
			Stack<(int faceIndex, int triangleIndex)> __0x8696 )
		{

			while( 0 < __0x8696.Count )
			{
				var __0x8382 = __0x8696.Pop();
				ConformantMark __0x8383 = __0x8695[ __0x8382.faceIndex ][ __0x8382.triangleIndex ];
				bool __0x8384;
				if( __0x8383 == ConformantMark.Conformant )
					__0x8384 = true;
				else if( __0x8383 == ConformantMark.NonConformant )
					__0x8384 = false;
				else
					continue;

				var __0x8385 = __0x8693[ __0x8382.faceIndex ].Triangles;
				int __0x8386 = __0x8382.triangleIndex * 3;

				ProcEdge( __0x8385[ __0x8386 ].Vertex, __0x8385[ __0x8386 + 1 ].Vertex, __0x8384 );
				ProcEdge( __0x8385[ __0x8386 + 1 ].Vertex, __0x8385[ __0x8386 + 2 ].Vertex, __0x8384 );
				ProcEdge( __0x8385[ __0x8386 + 2 ].Vertex, __0x8385[ __0x8386 ].Vertex, __0x8384 );
			}

			int __0x8387 = 0;
			int __0x8388 = 0;
			foreach( var __0x8550 in __0x8695 )
			{
				foreach( var __0x8551 in __0x8550 )
				{
					if( __0x8551 == ConformantMark.Conformant )
						__0x8387++;
					else if( __0x8551 == ConformantMark.NonConformant )
						__0x8388++;
				}
			}

			bool __0x8389 = __0x8388 < __0x8387;
			for( int __0x8390 = 0; __0x8390 < __0x8693.Count; __0x8390++ )
			{
				var __0x8391 = __0x8693[ __0x8390 ];
				int __0x8392 = __0x8391.Triangles.Count / 3;
				for( int __0x8393 = 0; __0x8393 < __0x8392; __0x8393++ )
				{
					if( __0x8389 && __0x8695[ __0x8390 ][ __0x8393 ] == ConformantMark.NonConformant ||
						!__0x8389 && __0x8695[ __0x8390 ][ __0x8393 ] == ConformantMark.Conformant )
					{
						int __0x8394 = __0x8393 * 3;
						var __0x8395 = __0x8391.Triangles[ __0x8394 ];
						__0x8391.Triangles[ __0x8394 ] = __0x8391.Triangles[ __0x8394 + 1 ];
						__0x8391.Triangles[ __0x8394 + 1 ] = __0x8395;

						__0x8391.Triangles[ __0x8394 ].RawVertex.Normal = -__0x8391.Triangles[ __0x8394 ].RawVertex.Normal;
						__0x8391.Triangles[ __0x8394 + 1 ].RawVertex.Normal = -__0x8391.Triangles[ __0x8394 + 1 ].RawVertex.Normal;
						__0x8391.Triangles[ __0x8394 + 2 ].RawVertex.Normal = -__0x8391.Triangles[ __0x8394 + 2 ].RawVertex.Normal;
					}
				}
			}

			foreach( var __0x8552 in __0x8695 )
			{
				for( int __0x8396 = 0; __0x8396 < __0x8552.Length; __0x8396++ )
				{
					if( __0x8552[ __0x8396 ] == ConformantMark.Conformant || __0x8552[ __0x8396 ] == ConformantMark.NonConformant )
						__0x8552[ __0x8396 ] = ConformantMark.Done;
				}
			}

			

			void ProcEdge( int __0x8697, int __0x8698, bool __0x8699 )
			{
				bool __0x8397 = false;
				if( __0x8698 < __0x8697 )
				{
					__0x8612( ref __0x8697, ref __0x8698 );
					__0x8397 = true;
				}

				var __0x8398 = __0x8694[ (__0x8697, __0x8698) ];
				foreach( var __0x8553 in __0x8398 )
				{
					if( __0x8695[ __0x8553.faceIndex ][ __0x8553.triangleIndex ] == ConformantMark.NotProcessed ) 
					{
						bool __0x8399 = __0x8553.reversed != __0x8397; 
						bool __0x8400 = __0x8399 ? __0x8699 : !__0x8699;
						__0x8695[ __0x8553.faceIndex ][ __0x8553.triangleIndex ] = __0x8400 ? ConformantMark.Conformant : ConformantMark.NonConformant;
						__0x8696.Push( (__0x8553.faceIndex, __0x8553.triangleIndex) );
					}
				}
			}
		}

		
		static void __0x8614( MeshData __0x8700 )
		{
			foreach( var __0x8554 in __0x8700.Faces )
			{
				for( int __0x8401 = 0; __0x8401 < __0x8554.Triangles.Count; __0x8401 += 3 )
				{
					var __0x8402 = __0x8554.Triangles[ __0x8401 ].RawVertex;
					var __0x8403 = __0x8554.Triangles[ __0x8401 + 1 ].RawVertex;
					var __0x8404 = __0x8554.Triangles[ __0x8401 + 2 ].RawVertex;

					var __0x8405 = CommonFunctions.CalculateNormal( __0x8402.Position, __0x8403.Position, __0x8404.Position );
					if( Vector3F.Dot( __0x8405, __0x8402.Normal ) < 0 || Vector3F.Dot( __0x8405, __0x8403.Normal ) < 0 || Vector3F.Dot( __0x8405, __0x8404.Normal ) < 0 )
					{
						__0x8402.Normal = __0x8405;
						__0x8403.Normal = __0x8405;
						__0x8404.Normal = __0x8405;
					}
				}
			}
		}

		#endregion

		

		public static void FlatNormalsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length == 1 || 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void FlatNormals( ActionContext actionContext )
		{

			Component_Mesh __0x8406 = null;
			int[] __0x8407 = null;
			if( actionContext.SelectionMode == SelectionMode.Object )
				__0x8406 = actionContext.GetSelectedMesh().mesh;
			else
				__0x8407 = actionContext.Selection.Faces;


			void Execute( Component_Mesh __0x8701, UndoMultiAction __0x8702, UndoMultiAction __0x8703 )
			{
				var __0x8408 = new MeshData();
				var __0x8409 = __0x8701.ExtractStructure();
				__0x8408.Load( __0x8409 );

				if( __0x8406 != null )
					foreach( var __0x8555 in __0x8408.Faces )
						CalculateNormals( __0x8555.Triangles );
				else if( __0x8407 != null )
					foreach( var __0x8556 in __0x8407 )
						CalculateNormals( __0x8408.Faces[ __0x8556 ].Triangles );

				__0x8408.Save( __0x8701, __0x8702, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		internal static void CalculateNormals( List<MeshData.FaceVertex> triangles )
		{
			for( int __0x8410 = 0; __0x8410 < triangles.Count; __0x8410 += 3 )
				CommonFunctions.CalculateNormal( triangles[ __0x8410 ], triangles[ __0x8410 + 1 ], triangles[ __0x8410 + 2 ] );
		}

		

		public static void SmoothNormalsGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && actionContext.GetSelectedMeshInSpaceArray().Length == 1 || 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void SmoothNormals( ActionContext actionContext )
		{

			void Execute( Component_Mesh __0x8704, UndoMultiAction __0x8705, UndoMultiAction __0x8706 )
			{
				var __0x8411 = new MeshData();
				var __0x8412 = __0x8704.ExtractStructure();
				__0x8411.Load( __0x8412 );

				int[] __0x8413 = actionContext.SelectionMode == SelectionMode.Object ?
					Enumerable.Range( 0, __0x8411.Faces.Count ).ToArray() :
					actionContext.Selection.Faces;

				Vector3F[] __0x8414 = new Vector3F[ __0x8411.Vertices.Count ];

				
				foreach( var __0x8557 in __0x8413 )
					CalculateNormals( __0x8411.Faces[ __0x8557 ].Triangles );

				
				foreach( var __0x8558 in __0x8411.Faces )
					foreach( var __0x8559 in __0x8558.Triangles )
						__0x8414[ __0x8559.Vertex ] += __0x8559.RawVertex.Normal;

				for( int __0x8415 = 0; __0x8415 < __0x8414.Length; __0x8415++ )
					__0x8414[ __0x8415 ] = __0x8414[ __0x8415 ].GetNormalize();

				foreach( var __0x8560 in __0x8413 )
					foreach( var __0x8561 in __0x8411.Faces[ __0x8560 ].Triangles )
						__0x8561.RawVertex.Normal = __0x8414[ __0x8561.Vertex ];

				__0x8411.Save( __0x8704, __0x8705, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		

		#region MergeFaces

		public static void MergeFacesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 1 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		

		
		
		public static void MergeFaces( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8707, UndoMultiAction __0x8708, UndoMultiAction __0x8709 )
			{
				var __0x8416 = actionContext.Selection.Faces;
				if( __0x8416.Length < 2 )
					return;
				var __0x8417 = new MeshData();
				var __0x8418 = __0x8707.ExtractStructure();
				__0x8417.Load( __0x8418 );

				int __0x8419 = __0x8615( __0x8417, __0x8416 );
				actionContext.Selection.Faces = new[] { __0x8419 };

				__0x8417.Save( __0x8707, __0x8708, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		static int __0x8615( MeshData __0x8710, int[] __0x8711 )
		{
			int __0x8420 = __0x8711[ 0 ];
			var __0x8421 = __0x8710.Faces[ __0x8420 ];
			for( int __0x8422 = 1; __0x8422 < __0x8711.Length; __0x8422++ )
			{
				__0x8421.Triangles.AddRange( __0x8710.Faces[ __0x8711[ __0x8422 ] ].Triangles );
				
				
				__0x8710.Faces[ __0x8711[ __0x8422 ] ] = null;
			}

			
			var __0x8423 = GetEdgesCountDictionary( __0x8421.Triangles );

			for( int __0x8424 = 0; __0x8424 < __0x8710.Edges.Count; __0x8424++ )
			{
				var __0x8425 = __0x8710.Edges[ __0x8424 ];
				if( __0x8423.TryGetValue( __0x8425.Vertex1 < __0x8425.Vertex2 ? (__0x8425.Vertex1, __0x8425.Vertex2) : (__0x8425.Vertex2, __0x8425.Vertex1), out var foundEdgeCount ) && 1 < foundEdgeCount )
					__0x8710.Edges[ __0x8424 ] = null;
			}

			return __0x8420;
		}

		internal static Dictionary<(int lowVertex, int highVertex), int> GetEdgesCountDictionary( List<MeshData.FaceVertex> fVertices )
		{
			var __0x8426 = new Dictionary<(int lowVertex, int highVertex), int>();
			for( int __0x8427 = 0; __0x8427 < fVertices.Count; __0x8427 += 3 )
			{
				AddEdge( __0x8426, fVertices[ __0x8427 ].Vertex, fVertices[ __0x8427 + 1 ].Vertex );
				AddEdge( __0x8426, fVertices[ __0x8427 + 1 ].Vertex, fVertices[ __0x8427 + 2 ].Vertex );
				AddEdge( __0x8426, fVertices[ __0x8427 + 2 ].Vertex, fVertices[ __0x8427 ].Vertex );
			}
			return __0x8426;
		}

		internal static void AddEdge( Dictionary<(int lowVertex, int highVertex), int> edgesOrderedCount, int vertex1, int vertex2 )
		{
			var __0x8428 = CommonFunctions.OrderVertices( vertex1, vertex2 );
			if( edgesOrderedCount.TryGetValue( __0x8428, out var count ) )
				count++;
			else
				count = 1;
			edgesOrderedCount[ __0x8428 ] = count;
		}

		#endregion

		

		public static void TriangulateFacesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void TriangulateFaces( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8712, UndoMultiAction __0x8713, UndoMultiAction __0x8714 )
			{
				var __0x8429 = actionContext.Selection.Faces;
				if( __0x8429.Length == 0 )
					return;
				var __0x8430 = new MeshData();
				var __0x8431 = __0x8712.ExtractStructure();
				__0x8430.Load( __0x8431 );
				actionContext.Selection.Faces = __0x8616( __0x8430, __0x8429 ).ToArray();
				__0x8430.Save( __0x8712, __0x8713, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		static List<int> __0x8616( MeshData __0x8715, int[] __0x8716 )
		{
			var __0x8432 = new List<int>();
			foreach( var __0x8562 in __0x8716 )
			{
				var __0x8433 = __0x8715.Faces[ __0x8562 ];
				__0x8715.Faces[ __0x8562 ] = null;

				for( int __0x8434 = 0; __0x8434 < __0x8433.Triangles.Count; __0x8434 += 3 )
				{
					var __0x8435 = new List<MeshData.FaceVertex>( 3 );
					__0x8435.Add( __0x8433.Triangles[ __0x8434 ] );
					__0x8435.Add( __0x8433.Triangles[ __0x8434 + 1 ] );
					__0x8435.Add( __0x8433.Triangles[ __0x8434 + 2 ] );

					__0x8715.Edges.Add( new MeshData.Edge( __0x8435[ 0 ].Vertex, __0x8435[ 1 ].Vertex ) );
					__0x8715.Edges.Add( new MeshData.Edge( __0x8435[ 1 ].Vertex, __0x8435[ 2 ].Vertex ) );
					__0x8715.Edges.Add( new MeshData.Edge( __0x8435[ 2 ].Vertex, __0x8435[ 0 ].Vertex ) );

					__0x8715.Faces.Add( new MeshData.Face(
						__0x8435,
						null, 
						__0x8433.SmoothingGroup 
						) );
					__0x8432.Add( __0x8715.Faces.Count - 1 );
				}
			}

			return __0x8432;
		}

		

		#region DetachFaces

		public static void DetachFacesGetState( EditorAction.GetStateContext context, ActionContext actionContext, bool toMeshInSpace )
		{
			if(  0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		
		
		
		public static void DetachFaces( ActionContext actionContext, bool toMeshInSpace, bool splitVertices )
		{
			(Component_MeshInSpace newMeshInSpace, int[] faces) __0x8436 = (null, null);

			void Execute( Component_Mesh __0x8717, UndoMultiAction __0x8718, UndoMultiAction __0x8719 )
			{
				var __0x8437 = actionContext.Selection.Faces;
				if( __0x8437.Length == 0 )
					return;

				__0x8436 = __0x8617( toMeshInSpace, splitVertices, actionContext.BuilderWorkareaMode, __0x8717, __0x8437, __0x8718, __0x8719, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );

			if( __0x8436.newMeshInSpace != null )
			{
				
				actionContext.SelectMeshesInSpace( __0x8436.newMeshInSpace );
				actionContext.BuilderWorkareaMode.SelectFaces( __0x8436.faces );
			}
		}

		static (Component_MeshInSpace newMeshInSpace, int[] newFaces) __0x8617( bool __0x8720, bool __0x8721, BuilderWorkareaMode __0x8722, Component_Mesh __0x8723, int[] __0x8724, UndoMultiAction __0x8725, UndoMultiAction __0x8726, Selection __0x8727 )
		{
			var __0x8438 = new MeshData();
			var __0x8439 = __0x8723.ExtractStructure();
			__0x8438.Load( __0x8439 );

			(Component_MeshInSpace newMeshInSpace, int[] newFaces) __0x8440 = (null, null);

			Component_Mesh __0x8441 = null;
			Component_MeshGeometry __0x8442;
			MeshData __0x8443 = null;
			int __0x8444;
			if( __0x8720 )
			{
				var __0x8445 = __0x8723.Parent?.Parent;
				if( __0x8445 == null )
				{
					return __0x8440; 
				}

				var __0x8446 = __0x8445.CreateComponent<Component_MeshInSpace>();
				__0x8446.Name = CommonFunctions.GetUniqueFriendlyName( __0x8446 );
				__0x8446.Transform = ( (Component_MeshInSpace)__0x8723.Parent ).Transform;

				__0x8441 = __0x8446.CreateComponent<Component_Mesh>();
				__0x8441.Name = CommonFunctions.GetUniqueFriendlyName( __0x8441 );
				__0x8446.Mesh = ReferenceUtility.MakeReference<Component_Mesh>( null, ReferenceUtility.CalculateRootReference( __0x8441 ) );

				__0x8442 = __0x8441.CreateComponent<Component_MeshGeometry>();
				__0x8442.Name = CommonFunctions.GetUniqueFriendlyName( __0x8442 );

				__0x8726.AddAction( new UndoActionComponentCreateDelete( __0x8722.DocumentWindow.Document, new[] { __0x8446 }, true ) );
				__0x8443 = new MeshData();

				__0x8440.newMeshInSpace = __0x8446;
				__0x8440.newFaces = Enumerable.Range( 0, __0x8724.Length ).ToArray();
				__0x8444 = 0;
			}
			else
			{
				__0x8442 = __0x8723.CreateComponent<Component_MeshGeometry>();
				__0x8442.Name = CommonFunctions.GetUniqueFriendlyName( __0x8442 );
				__0x8726.AddAction( new UndoActionComponentCreateDelete( __0x8722.DocumentWindow.Document, new[] { __0x8442 }, true ) );
				__0x8444 = __0x8439.MeshGeometries.Length;
			}

			if( __0x8720 || __0x8721 )
				__0x8619( __0x8438, __0x8724 );

			var __0x8447 = __0x8618( __0x8438, __0x8724 );

			var __0x8448 = __0x8439.MeshGeometries[ __0x8447[ 0 ] ];
			var __0x8449 = (VertexElement[])__0x8448.VertexStructure.Clone(); 

			__0x8442.VertexStructure = __0x8449;
			__0x8442.Material = __0x8448.Material;

			if( !CommonFunctions.IsSameVertexStructure( __0x8439, __0x8447 ) )
			{
				var __0x8450 = new MeshData.MeshGeometryFormat( __0x8449 );
				foreach( var __0x8563 in __0x8724 )
					foreach( var __0x8564 in __0x8438.Faces[ __0x8563 ].Triangles )
						__0x8564.RawVertex = MeshData.ConvertRawVertex( __0x8564.RawVertex, __0x8450 );
			}

			foreach( var __0x8565 in __0x8724 )
				foreach( var __0x8566 in __0x8438.Faces[ __0x8565 ].Triangles )
					__0x8566.RawGeometry = __0x8444;

			if( __0x8720 )
			{
				__0x8727.Faces = null; 
				__0x8443.Faces = new List<MeshData.Face>();
				foreach( var __0x8567 in __0x8724 )
				{
					__0x8443.Faces.Add( __0x8438.Faces[ __0x8567 ] );
					__0x8438.Faces[ __0x8567 ] = null;
				}
				__0x8443.Vertices = new List<MeshData.Vertex>( __0x8438.Vertices );
				__0x8443.Edges = new List<MeshData.Edge>( __0x8438.Edges ); 
																			   
				var __0x8451 = new Selection(){SelectionMode = SelectionMode.Face, Faces = __0x8440.newFaces};
				__0x8443.Save( __0x8441, null, __0x8451 );
				__0x8440.newFaces = __0x8451.Faces;
			}
			if(__0x8720)
				__0x8438.Save( __0x8723, __0x8725, __0x8727 );
			else
			{
				__0x8438.Save( __0x8723, __0x8725, __0x8727 );
			}
			return __0x8440;
		}

		static List<int> __0x8618( MeshData __0x8728, int[] __0x8729 )
		{
			var __0x8452 = new List<int>();
			foreach( var __0x8568 in __0x8729 )
				foreach( var __0x8569 in __0x8728.Faces[ __0x8568 ].Triangles )
				{
					int __0x8453 = __0x8569.RawGeometry;
					if( !__0x8452.Contains( __0x8453 ) )
						__0x8452.Add( __0x8453 );
				}
			return __0x8452;
		}

		static void __0x8619( MeshData __0x8730, int[] __0x8731 )
		{
			var __0x8454 = new Dictionary<int, int>();
			foreach( var __0x8570 in __0x8731 )
			{
				var __0x8455 = __0x8730.Faces[ __0x8570 ];

				for( int __0x8456 = 0; __0x8456 < __0x8455.Triangles.Count; __0x8456++ )
				{
					int __0x8457 = __0x8455.Triangles[ __0x8456 ].Vertex;
					__0x8454[ __0x8457 ] = __0x8457;
				}
			}

			var __0x8458 = new List<int>();
			for( int __0x8459 = 0; __0x8459 < __0x8730.Faces.Count; __0x8459++ )
			{
				if( __0x8731.Contains( __0x8459 ) )
					continue;
				var __0x8460 = __0x8730.Faces[ __0x8459 ];

				for( int __0x8461 = 0; __0x8461 < __0x8460.Triangles.Count; __0x8461++ )
				{
					if( __0x8454.ContainsKey( __0x8460.Triangles[ __0x8461 ].Vertex ) )
						__0x8458.Add( __0x8460.Triangles[ __0x8461 ].Vertex );
				}
			}

			
			foreach( var __0x8571 in __0x8458 )
			{
				__0x8730.Vertices.Add( new MeshData.Vertex() );
				__0x8454[ __0x8571 ] = __0x8730.Vertices.Count - 1;
			}
			foreach( var __0x8572 in __0x8731 )
			{
				var __0x8462 = __0x8730.Faces[ __0x8572 ];

				for( int __0x8463 = 0; __0x8463 < __0x8462.Triangles.Count; __0x8463 += 3 )
				{
					var __0x8464 = __0x8462.Triangles[ __0x8463 ];
					var __0x8465 = __0x8462.Triangles[ __0x8463 + 1 ];
					var __0x8466 = __0x8462.Triangles[ __0x8463 + 2 ];

					var __0x8467 = __0x8454[ __0x8464.Vertex ];
					var __0x8468 = __0x8454[ __0x8465.Vertex ];
					var __0x8469 = __0x8454[ __0x8466.Vertex ];

					if( __0x8464.Vertex != __0x8467 || __0x8465.Vertex != __0x8468 )
						__0x8730.AddEdge( __0x8467, __0x8468 );
					if( __0x8465.Vertex != __0x8468 || __0x8466.Vertex != __0x8469 )
						__0x8730.AddEdge( __0x8468, __0x8469 );
					if( __0x8466.Vertex != __0x8469 || __0x8464.Vertex != __0x8467 )
						__0x8730.AddEdge( __0x8469, __0x8467 );

					__0x8464.Vertex = __0x8467; 
					__0x8465.Vertex = __0x8468;
					__0x8466.Vertex = __0x8469;
				}
			}

		}

		#endregion

		

		public static void CloneFacesGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		public static void CloneFaces( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8732, UndoMultiAction __0x8733, UndoMultiAction __0x8734 )
			{
				var __0x8470 = new MeshData();
				var __0x8471 = __0x8732.ExtractStructure();
				__0x8470.Load( __0x8471 );

				var __0x8472 = actionContext.Selection.Faces;
				if( __0x8472.Length == 0 )
					return;
				string __0x8473 = __0x8472.Length > 1 ? "s" : "";
				if( EditorMessageBox.ShowQuestion( $"Clone selected face{__0x8473}?", EMessageBoxButtons.YesNo ) == EDialogResult.No )
					return;
				actionContext.Selection.Faces = __0x8620( __0x8470, __0x8472 );

				__0x8470.Save( __0x8732, __0x8733, actionContext.Selection );
			}
			__0x8600( actionContext, __0x8601, Execute );
		}

		static int[] __0x8620( MeshData __0x8735, int[] __0x8736 )
		{
			int[] __0x8474 = Enumerable.Range( __0x8735.Faces.Count, __0x8736.Length ).ToArray();
			foreach( var __0x8573 in __0x8736 )
			{
				var __0x8475 = __0x8735.Faces[ __0x8573 ];
				var __0x8476 = new List<MeshData.FaceVertex>( __0x8475.Triangles.Count );
				foreach( var __0x8574 in __0x8475.Triangles )
					__0x8476.Add( __0x8735.CloneFaceVertex( __0x8574 ) );

				var __0x8477 = new MeshData.Face( __0x8476, MeshData.CloneProperties( __0x8475.Properties ), __0x8475.SmoothingGroup ); 
				__0x8735.Faces.Add( __0x8477 );
			}

			__0x8619( __0x8735, __0x8474 );

			return __0x8474;
		}

		

		public static void SetMaterialGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && 0 < actionContext.GetSelectedMeshInSpaceArray().Length ||
				actionContext.GetSelectedMesh().mesh != null && 0 < actionContext.Selection.FaceCount )
			{
				
				
				context.Enabled = true;
			}
		}

		
		public static void SetMaterial( ActionContext actionContext )
		{
			if( actionContext.SelectionMode == SelectionMode.Object && 0 < actionContext.GetSelectedMeshInSpaceArray().Length )
			{
				

				var __0x8478 = __0x8622();
				if( !__0x8478.ReferenceSpecified )
				{
					

					var __0x8479 = new List<Component_MeshGeometry>();
					var __0x8480 = new List<Component_MeshInSpace>();

					foreach( var __0x8575 in actionContext.GetSelectedMeshInSpaceArray() )
					{
						var __0x8481 = __0x8575.Mesh.Value;
						if( __0x8481 != null )
						{
							if( __0x8481.Parent == __0x8575 )
							{
								if( __0x8575.ReplaceMaterial.ReferenceSpecified )
									__0x8480.Add( __0x8575 );
								else
								{
									foreach( var __0x8576 in __0x8481.GetComponents<Component_MeshGeometry>() )
										__0x8479.Add( __0x8576 );
								}
							}
							else
								__0x8480.Add( __0x8575 );
						}
					}

					if( __0x8480.Count != 0 )
					{
						var __0x8482 = MetadataManager.GetTypeOfNetType( typeof( Component_MeshInSpace ) );
						var __0x8483 = __0x8482.MetadataGetMemberBySignature( "property:ReplaceMaterial" ) as Metadata.Property;
						if( __0x8483 != null )
							EditorAPI.OpenSetReferenceWindow( actionContext.DocumentWindow, __0x8480.ToArray(), __0x8480.ToArray(), __0x8483, null );
					}
					else if( __0x8479.Count != 0 )
					{
						var __0x8484 = MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry ) );
						var __0x8485 = __0x8484.MetadataGetMemberBySignature( "property:Material" ) as Metadata.Property;
						if( __0x8485 != null )
							EditorAPI.OpenSetReferenceWindow( actionContext.DocumentWindow, __0x8479.ToArray(), __0x8479.ToArray(), __0x8485, null );
					}
				}
				else
				{
					

					var __0x8486 = new UndoMultiAction();

					foreach( var __0x8577 in actionContext.GetSelectedMeshInSpaceArray() )
					{
						var __0x8487 = __0x8577.Mesh.Value;
						if( __0x8487 != null )
						{
							if( __0x8487.Parent == __0x8577 )
							{
								__0x8621( __0x8577, new Reference<Component_Material>(), __0x8486 );
								foreach( var __0x8578 in __0x8487.GetComponents<Component_MeshGeometry>() )
									SetMaterialForGeometry( __0x8578, __0x8478, __0x8486 );
							}
							else
								__0x8621( __0x8577, __0x8478, __0x8486 );
						}
					}

					actionContext.DocumentWindow?.Document?.CommitUndoAction( __0x8486 );
				}
			}
			else if( actionContext.GetSelectedMesh().mesh != null && 0 < actionContext.Selection.FaceCount )
			{
				

				var __0x8488 = __0x8622();

				void ExecuteFacesMode( Component_Mesh __0x8737, UndoMultiAction __0x8738, UndoMultiAction __0x8739 )
				{
					var __0x8489 = new MeshData();
					var __0x8490 = __0x8737.ExtractStructure();
					__0x8489.Load( __0x8490 );

					var __0x8491 = __0x8737.GetComponents<Component_MeshGeometry>();
					var __0x8492 = __0x8618( __0x8489, actionContext.Selection.Faces ).Select( __0x8740 => __0x8491[ __0x8740 ] );

					if( !__0x8488.ReferenceSpecified )
					{
						

						var __0x8493 = MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry ) );
						var __0x8494 = __0x8493.MetadataGetMemberBySignature( "property:Material" ) as Metadata.Property;
						if( __0x8494 != null )
							EditorAPI.OpenSetReferenceWindow( actionContext.DocumentWindow, __0x8492.ToArray(), __0x8492.ToArray(), __0x8494, null );
					}
					else
					{
						

						
						if( __0x8737.Parent is Component_MeshInSpace meshInSpace )
							__0x8621( meshInSpace, new Reference<Component_Material>(), __0x8739 );
						foreach( var __0x8579 in __0x8492 )
							SetMaterialForGeometry( __0x8579, __0x8488, __0x8738 );
					}
				}

				__0x8600( actionContext, __0x8601, ExecuteFacesMode );
			}


			
			
			

			
			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			

			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			

			
			
		}

		public static void SetMaterialForGeometry( Component_MeshGeometry geom, Reference<Component_Material> material, UndoMultiAction undo )
		{
			if( undo != null )
			{
				var __0x8495 = (Metadata.Property)geom.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshGeometry.Material ) );
				undo.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( geom, __0x8495, geom.Material ) ) );
			}
			geom.Material = material;
		}

		static void __0x8621( Component_MeshInSpace __0x8741, Reference<Component_Material> __0x8742, UndoMultiAction __0x8743 )
		{
			if( !__0x8741.ReplaceMaterial.Equals( __0x8742 ) )
			{
				if( __0x8743 != null )
				{
					var __0x8496 = (Metadata.Property)__0x8741.MetadataGetMemberBySignature( "property:" + nameof( Component_MeshInSpace.ReplaceMaterial ) );
					__0x8743.AddAction( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x8741, __0x8496, __0x8741.ReplaceMaterial ) ) );
				}

				__0x8741.ReplaceMaterial = __0x8742;
			}

			
		}


		static ReferenceNoValue __0x8622()
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetSelectedObjectToCreate();
			if( objectType != null )
			{
				var __0x8497 = objectType as Metadata.ComponentTypeInfo;
				if( __0x8497 != null && __0x8497.BasedOnObject != null )
				{
					

					
					var __0x8498 = __0x8497.BasedOnObject as Component_Material;
					if( __0x8498 != null )
						return ReferenceUtility.MakeResourceReference( __0x8498 );

					
					if( __0x8497.BasedOnObject is Component_Import3D )
					{
						__0x8498 = __0x8497.BasedOnObject.GetComponent( "Material" ) as Component_Material;
						if( __0x8498 != null )
							return ReferenceUtility.MakeResourceReference( __0x8498 );
					}
				}
			}

			return new ReferenceNoValue();
		}

		

		public static void GrowSelectionGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 0 < actionContext.Selection.FaceCount || 0 < actionContext.Selection.EdgeCount || 0 < actionContext.Selection.VertexCount )
				context.Enabled = true;
		}

		
		public static void GrowSelection( ActionContext actionContext )
		{
			

			void Execute( Component_Mesh __0x8744, UndoMultiAction __0x8745, UndoMultiAction __0x8746 )
			{
				var __0x8499 = new MeshData();
				var __0x8500 = __0x8744.ExtractStructure();
				__0x8499.Load( __0x8500 );

				switch( actionContext.SelectionMode )
				{
				case SelectionMode.Face:
					{
						
						var __0x8501 = actionContext.Selection.Faces;
						var __0x8502 = new HashSet<(int lowVertex, int highVertex)>();
						foreach( var __0x8580 in __0x8499.Edges )
							__0x8502.Add( CommonFunctions.OrderVertices( __0x8580.Vertex1, __0x8580.Vertex2 ) );

						var __0x8503 = new HashSet<(int lowVertex, int highVertex)>();
						for( int __0x8504 = 0; __0x8504 < __0x8501.Length; __0x8504++ )
							__0x8503.UnionWith( IntersectEdgesByFace( __0x8502, __0x8499.Faces[ __0x8501[ __0x8504 ] ].Triangles ) );

						var __0x8505 = new List<int>();
						for( int __0x8506 = 0; __0x8506 < __0x8499.Faces.Count; __0x8506++ )
							if( 0 < IntersectEdgesByFace( __0x8503, __0x8499.Faces[ __0x8506 ].Triangles ).Count )
								__0x8505.Add( __0x8506 );
						 actionContext.Selection.Faces = __0x8505.ToArray();
					}
					break;

				case SelectionMode.Edge:
					{
						var __0x8507 = actionContext.Selection.Edges;
						if( __0x8507.Length == 0 )
							return;

						var __0x8508 = new HashSet<int>();
						foreach( var __0x8581 in __0x8507 )
						{
							var __0x8509 = __0x8499.Edges[ __0x8581 ];
							__0x8508.Add( __0x8509.Vertex1 );
							__0x8508.Add( __0x8509.Vertex2 );
						}

						var __0x8510 = new List<int>();
						for( int __0x8511 = 0; __0x8511 < __0x8499.Edges.Count; __0x8511++ )
						{
							var __0x8512 = __0x8499.Edges[ __0x8511 ];
							if( __0x8508.Contains( __0x8512.Vertex1 ) || __0x8508.Contains( __0x8512.Vertex2 ) )
								__0x8510.Add( __0x8511 );
						}
						actionContext.Selection.Edges = __0x8510.ToArray();
					}
					break;

				case SelectionMode.Vertex:
					{
						var __0x8513 = new HashSet<int>( actionContext.Selection.Vertices );
						var __0x8514 = new HashSet<int>();
						foreach( var __0x8582 in __0x8499.Faces )
							for( int __0x8515 = 0; __0x8515 < __0x8582.Triangles.Count; __0x8515 += 3 )
								if( __0x8513.Contains( __0x8582.Triangles[ __0x8515 ].Vertex ) ||
									__0x8513.Contains( __0x8582.Triangles[ __0x8515 + 1 ].Vertex ) ||
									__0x8513.Contains( __0x8582.Triangles[ __0x8515 + 2 ].Vertex ) )
								{
									__0x8514.Add( __0x8582.Triangles[ __0x8515 ].Vertex );
									__0x8514.Add( __0x8582.Triangles[ __0x8515 + 1 ].Vertex );
									__0x8514.Add( __0x8582.Triangles[ __0x8515 + 2 ].Vertex );
								}

						actionContext.Selection.Vertices = __0x8514.ToArray();
					}
					break;
				}
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		internal static HashSet<(int lowVertex, int highVertex)> IntersectEdgesByFace( HashSet<(int lowVertex, int highVertex)> edges, List<MeshData.FaceVertex> triangles )
		{
			var __0x8516 = new HashSet<(int lowVertex, int highVertex)>();
			for( int __0x8517 = 0; __0x8517 < triangles.Count; __0x8517 += 3 )
			{
				var __0x8518 = CommonFunctions.OrderVertices( triangles[ __0x8517 ].Vertex, triangles[ __0x8517 + 1 ].Vertex );
				var __0x8519 = CommonFunctions.OrderVertices( triangles[ __0x8517 + 1 ].Vertex, triangles[ __0x8517 + 2 ].Vertex );
				var __0x8520 = CommonFunctions.OrderVertices( triangles[ __0x8517 + 2 ].Vertex, triangles[ __0x8517 ].Vertex );
				if( edges.Contains( __0x8518 ) )
					__0x8516.Add( __0x8518 );
				if( edges.Contains( __0x8519 ) )
					__0x8516.Add( __0x8519 );
				if( edges.Contains( __0x8520 ) )
					__0x8516.Add( __0x8520 );
			}

			return __0x8516;
		}

		

		public static void SelectByMaterialGetState( EditorAction.GetStateContext context, ActionContext actionContext )
		{
			if( 0 < actionContext.Selection.FaceCount )
				context.Enabled = true;
		}

		
		public static void SelectByMaterial( ActionContext actionContext )
		{
			void Execute( Component_Mesh __0x8747, UndoMultiAction __0x8748, UndoMultiAction __0x8749 )
			{
				var __0x8521 = __0x8747.GetComponents<Component_MeshGeometry>();

				var __0x8522 = new MeshData();
				var __0x8523 = __0x8747.ExtractStructure();
				__0x8522.Load( __0x8523 );

				var __0x8524 = actionContext.Selection.Faces;
				if( __0x8524.Length == 0 )
					return;

				var __0x8525 = new HashSet<int>(); 
				foreach( var __0x8583 in __0x8524 )
				{
					var __0x8526 = __0x8522.Faces[ __0x8583 ].Triangles;
					foreach( var __0x8584 in __0x8526 )
						__0x8525.Add( __0x8584.RawGeometry );
				}

				var __0x8527 = new List<Reference<Component_Material>>();
				foreach( var __0x8585 in __0x8525 )
				{
					var __0x8528 = __0x8521[ __0x8585 ].Material;
					if( !Contains( __0x8527, __0x8528 ) )
						__0x8527.Add( __0x8528 );
				}

				var __0x8529 = new HashSet<int>();
				for( int __0x8530 = 0; __0x8530 < __0x8521.Length; __0x8530++ )
				{
					if( Contains( __0x8527, __0x8521[ __0x8530 ].Material ) )
						__0x8529.Add( __0x8530 );
				}

				var __0x8531 = new List<int>();
				for( int __0x8532 = 0; __0x8532 < __0x8522.Faces.Count; __0x8532++ )
				{
					var __0x8533 = __0x8522.Faces[ __0x8532 ].Triangles;
					foreach( var __0x8586 in __0x8533 )
					{
						if( __0x8529.Contains( __0x8586.RawGeometry ) )
						{
							__0x8531.Add( __0x8532 );
							break;
						}
					}
				}

				actionContext.Selection.Faces = __0x8531.ToArray();

			}

			__0x8600( actionContext, __0x8601, Execute );
			
			

			
			bool Contains( List<Reference<Component_Material>> __0x8750, Reference<Component_Material> __0x8751 )
			{
				foreach( var __0x8587 in __0x8750 )
					if( __0x8587.Value == null && __0x8751.Value == null || __0x8751.Equals( __0x8587 ) )
						return true;
				return false;
			}
		}

		

		public static void SetVertexColor( ActionContext actionContext, ColorValue color )
		{
			void Execute( Component_Mesh __0x8752, UndoMultiAction __0x8753, UndoMultiAction __0x8754 )
			{
				
				var __0x8534 = new MeshData();
				var __0x8535 = __0x8752.ExtractStructure();
				__0x8534.Load( __0x8535 );

				var __0x8536 = color.ToVector4F();
				if( actionContext.Selection.SelectionMode == SelectionMode.Face )
				{
					foreach( var __0x8588 in actionContext.Selection.Faces )
						foreach( var __0x8589 in __0x8534.Faces[ __0x8588 ].Triangles )
							__0x8589.RawVertex.Color = __0x8536;
				}
				else
				{
					
					var __0x8537 = __0x8623( actionContext, __0x8534 );
					foreach( var __0x8590 in __0x8534.Faces )
						foreach( var __0x8591 in __0x8590.Triangles )
							if( __0x8537.Contains( __0x8591.Vertex ) )
								__0x8591.RawVertex.Color = __0x8536;
				}

				
				__0x8534.Save( __0x8752, __0x8753, actionContext.Selection );
			}

			__0x8600( actionContext, __0x8601, Execute );
		}

		public static ColorValue? GetInitialColor( ActionContext actionContext )
		{
			var (_, mesh) = actionContext.GetSelectedMesh();
			if( mesh == null )
				return null;

			var __0x8538 = new MeshData();
			var __0x8539 = mesh.ExtractStructure();
			__0x8538.Load( __0x8539 );

			if( actionContext.SelectionMode == SelectionMode.Face )
			{
				ColorValue? __0x8540 = null;
				foreach( var __0x8592 in actionContext.Selection.Faces )
				{
					foreach( var __0x8593 in __0x8538.Faces[ __0x8592 ].Triangles )
					{
						if( __0x8540 == null )
							__0x8540 = new ColorValue( __0x8593.RawVertex.Color );
						else if( __0x8540 != new ColorValue( __0x8593.RawVertex.Color ) )
							return null;
					}
				}
				return __0x8540;
			}
			else
			{
				ColorValue? __0x8541 = null;

				var __0x8542 = __0x8623( actionContext, __0x8538 );
				if( __0x8542.Count != 0 )
				{
					foreach( var __0x8594 in __0x8538.Faces )
					{
						foreach( var __0x8595 in __0x8594.Triangles )
						{
							if( __0x8542.Contains( __0x8595.Vertex ) )
							{
								if( __0x8541 == null )
									__0x8541 = new ColorValue( __0x8595.RawVertex.Color );
								else if( __0x8541 != new ColorValue( __0x8595.RawVertex.Color ) )
									return null;
							}
						}
					}
				}

				return __0x8541;
			}
		}

		static ESet<int> __0x8623( ActionContext __0x8755, MeshData __0x8756 )
		{
			var __0x8543 = new ESet<int>();
			switch( __0x8755.SelectionMode )
			{
			case SelectionMode.Vertex:
				foreach( var __0x8596 in __0x8755.Selection.Vertices )
					__0x8543.AddWithCheckAlreadyContained( __0x8596 );
				break;
			case SelectionMode.Edge:
				foreach( var __0x8597 in __0x8755.Selection.Edges )
				{
					__0x8543.AddWithCheckAlreadyContained( __0x8756.Edges[ __0x8597 ].Vertex1 );
					__0x8543.AddWithCheckAlreadyContained( __0x8756.Edges[ __0x8597 ].Vertex2 );
				}
				break;
			case SelectionMode.Face:
				foreach( var __0x8598 in __0x8755.Selection.Faces )
					foreach( var __0x8599 in __0x8756.Faces[ __0x8598 ].Triangles )
						__0x8543.AddWithCheckAlreadyContained( __0x8599.Vertex );
				break;
			}
			return __0x8543;
		}


	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	
	
	class TransformToolObject_Edge : TransformToolObject
	{
		public readonly BuilderWorkareaMode.Edge Edge;

		public Vector3 Vertex1Offset;
		public Vector3 Vertex2Offset;

		readonly List<BuilderWorkareaMode.Vertex> __0x8757;
		readonly MeshData __0x8758;
		readonly Func<Vector3> __0x8759;

		
		

		

		public TransformToolObject_Edge( BuilderWorkareaMode.Edge edge, MeshData meshData , List<BuilderWorkareaMode.Vertex> meshVertices, Func<Vector3> getOperationCenter)
			: base( edge )
		{
			Edge = edge;
			this.__0x8757 = meshVertices;
			this.__0x8758 = meshData;
			this.__0x8759 = getOperationCenter;
		}


		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			
			return true;
		}

		public override Vector3 Position
		{
			get { return Edge.Position; }
			set
			{
				if( IsAllowMove() )
				{
					Edge.Position = value;
					var __0x8760 = __0x8758.Edges[ Edge.Index ];
					__0x8757[ __0x8760.Vertex1 ].Position = Vertex1Offset + Position;
					__0x8757[ __0x8760.Vertex2 ].Position = Vertex2Offset + Position;
				}
			}
		}

		public override Quaternion Rotation
		{
			get { return Edge.Rotation; }
			set
			{
				if( IsAllowRotate() )
				{
					Edge.Rotation = value;

					var __0x8761 = __0x8758.Edges[ Edge.Index ];
					var __0x8762 = Edge.Rotation;

					__0x8757[ __0x8761.Vertex1 ].Position = __0x8762 * Vertex1Offset + Position;
					__0x8757[ __0x8761.Vertex2 ].Position = __0x8762 * Vertex2Offset + Position;
				}
			}
		}

		public override Vector3 Scale
		{
			get { return Edge.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					Edge.Scale = value;

					var __0x8763 = __0x8758.Edges[ Edge.Index ];

					var __0x8764 = Edge.Scale;
					var __0x8765 = __0x8759();
					__0x8757[ __0x8763.Vertex1 ].Position = __0x8764 * ( Vertex1Offset + Position - __0x8765 ) + __0x8765;
					__0x8757[ __0x8763.Vertex2 ].Position = __0x8764 * ( Vertex2Offset + Position - __0x8765 ) + __0x8765;
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();
			

			var __0x8766 = __0x8758.Edges[ Edge.Index ];
			Vertex1Offset = __0x8757[ __0x8766.Vertex1 ].Position - Edge.Position;
			Vertex2Offset = __0x8757[ __0x8766.Vertex2 ].Position - Edge.Position;
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();
			Edge.Rotation = Quaternion.Identity;
			Edge.Scale = Vector3.One;
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	
	
	
	
	
	
	
	class TransformToolObject_Face : TransformToolObject
	{
		public readonly BuilderWorkareaMode.Face Face;
		public Vector3[] VertexOffsets;

		readonly List<BuilderWorkareaMode.Vertex> __0x8767;
		readonly MeshData __0x8768;
		readonly Func<Vector3> __0x8769;


		
		

		public TransformToolObject_Face( BuilderWorkareaMode.Face face, MeshData meshData, List<BuilderWorkareaMode.Vertex> meshVertices, Func<Vector3> getOperationCenter )
			: base( face )
		{
			Face = face;
			this.__0x8767 = meshVertices;
			this.__0x8768 = meshData;
			this.__0x8769 = getOperationCenter;
		}


		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			
			return true;
		}

		public override Vector3 Position
		{
			get { return Face.Position; }
			set
			{
				if( IsAllowMove() )
				{
					Face.Position = value;

					var __0x8770 = __0x8768.Faces[ Face.Index ].Triangles;
					for( int __0x8771 = 0; __0x8771 < __0x8770.Count; __0x8771++ )
						__0x8767[ __0x8770[ __0x8771 ].Vertex ].Position = VertexOffsets[ __0x8771 ] + Position;
				}
			}
		}


		public override Quaternion Rotation
		{
			get { return Face.Rotation; }
			set
			{
				if( IsAllowRotate() )
				{
					Face.Rotation = value;

					var __0x8772 = __0x8768.Faces[ Face.Index ].Triangles;
					for( int __0x8773 = 0; __0x8773 < __0x8772.Count; __0x8773++ )
						__0x8767[ __0x8772[ __0x8773 ].Vertex ].Position = Face.Rotation * VertexOffsets[ __0x8773 ] + Face.Position;
				}
			}
		}

		public override Vector3 Scale
		{
			get { return Face.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					Face.Scale = value;
					var __0x8774 = __0x8769();
					var __0x8775 = __0x8768.Faces[ Face.Index ].Triangles;
					for( int __0x8776 = 0; __0x8776 < __0x8775.Count; __0x8776++ )
						__0x8767[ __0x8775[ __0x8776 ].Vertex ].Position = Face.Scale * ( VertexOffsets[ __0x8776 ] + Face.Position - __0x8774 ) + __0x8774;
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();
			

			var __0x8777 = __0x8768.Faces[ Face.Index ].Triangles;
			var __0x8778 = new Vector3[ __0x8777.Count ];
			for( int __0x8779 = 0; __0x8779 < __0x8777.Count; __0x8779++ )
				__0x8778[ __0x8779 ] = __0x8767[ __0x8777[ __0x8779 ].Vertex ].Position - Face.Position;
			VertexOffsets = __0x8778;
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();
			for( int __0x8780 = 0; __0x8780 < VertexOffsets.Length; __0x8780++ )
				VertexOffsets[ __0x8780 ] = Face.Rotation * (Scale * VertexOffsets[ __0x8780 ]);
			Face.Rotation = Quaternion.Identity;
			Face.Scale = Vector3.One;
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif



#if !DEPLOY

namespace NeoAxis.Addon.Builder3D
{
	class TransformToolObject_Vertex : TransformToolObject
	{
		BuilderWorkareaMode.Vertex __0x8781;

		
		

		public Vector3 PositionBeforeScaling;
		readonly Func<Vector3> __0x8782;

		public TransformToolObject_Vertex( BuilderWorkareaMode.Vertex vertex, Func<Vector3> getOperationCenter )
			: base( vertex )
		{
			this.__0x8781 = vertex;
			this.__0x8782 = getOperationCenter;
		}

		public BuilderWorkareaMode.Vertex Vertex
		{
			get { return __0x8781; }
		}

		
		
		
		

		public override bool IsAllowMove()
		{
			return true;
		}

		public override bool IsAllowRotate()
		{
			return true;
		}

		public override bool IsAllowScale()
		{
			return true;
		}

		public override Vector3 Position
		{
			get { return __0x8781.Position; }
			set
			{
				if( IsAllowMove() )
				{
					__0x8781.Position = value;
				}
			}
		}

		public override Quaternion Rotation
		{
			get { return __0x8781.Rotation; }
			set
			{
				if( IsAllowRotate() )
					__0x8781.Rotation = value;
			}
		}

		public override Vector3 Scale
		{
			get { return __0x8781.Scale; }
			set
			{
				if( IsAllowScale() )
				{
					__0x8781.Scale = value;
					var __0x8783 = __0x8782();
					Vertex.Position = Vertex.Scale * ( PositionBeforeScaling - __0x8783 ) + __0x8783;
				}
			}
		}

		public override void OnModifyBegin()
		{
			base.OnModifyBegin();

			PositionBeforeScaling = __0x8781.Position;

			
		}

		public override void OnModifyCommit()
		{
			base.OnModifyCommit();
			__0x8781.Scale = Vector3.One;
			__0x8781.Rotation = Quaternion.Identity;
		}

		public override void OnModifyCancel()
		{
			base.OnModifyCancel();
		}
	}
}
#endif




namespace NeoAxis.Editor
{
	class HCItemProjectRibbonAndToolbarActions : HCItemProperty
	{
		Dictionary<Image, string> __0x8784 = new Dictionary<Image, string>();
		int __0x8785 = 0;

		

		class __0x8981 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8786;
			HCItemProjectRibbonAndToolbarActionsForm __0x8787;
			public Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem group;

			EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual> __0x8788 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual>();

			

			public __0x8981( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control, Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem group )
				: base( owner, parent, text )
			{
				this.__0x8786 = hcItem;
				this.__0x8787 = control;
				this.group = group;
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8789 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem, ContentBrowserItem_Virtual>( __0x8788.Count );

					var __0x8790 = group != null ? group.Actions : __0x8786.__0x8944().ToolbarActions;
					foreach( var __0x8929 in __0x8790 )
					{
						var __0x8791 = EditorActions.GetByName( __0x8929.Name );

						
						
						
						if( !__0x8788.TryGetValue( __0x8929, out var item ) )
						{
							item = new ContentBrowserItem_Virtual( __0x8787.contentBrowserProject, this, __0x8929.Name );
							item.Tag = __0x8929;
							if( __0x8791 != null )
								item.Description = __0x8791.Description;

							if( __0x8791 != null && __0x8929.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.Action )
							{
								var __0x8792 = __0x8791.GetImageSmall();
								if( __0x8792 != null )
								{
									if( !__0x8786.__0x8784.TryGetValue( __0x8792, out var id ) )
									{
										id = "Name_" + __0x8786.__0x8785.ToString();
										__0x8786.__0x8784[ __0x8792 ] = id;
										__0x8787.contentBrowserProject.AddImageKey( id, __0x8792, __0x8791.GetImageBig() );
										__0x8786.__0x8785++;
									}
									item.imageKey = id;
								}
							}
							else if( __0x8929.Type == Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem.TypeEnum.SubGroupOfActions )
							{
								

								item.imageKey = "";
							}
						}

						if( item.ShowDisabled != !__0x8929.Enabled )
						{
							item.ShowDisabled = !__0x8929.Enabled;
							Owner?.Invalidate( true );
						}

						__0x8789[ __0x8929 ] = item;
						
					}

					__0x8788 = __0x8789;
				}

				var __0x8793 = new List<ContentBrowser.Item>( __0x8788.Count );
				foreach( var __0x8930 in __0x8788.Values )
					__0x8793.Add( __0x8930 );
				return __0x8793;
			}
		}

		

		class __0x8982 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8794;
			HCItemProjectRibbonAndToolbarActionsForm __0x8795;
			public Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem tabItem;

			EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual> __0x8796 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual>();

			

			public __0x8982( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control, Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem tabItem )
				: base( owner, parent, text )
			{
				this.__0x8794 = hcItem;
				this.__0x8795 = control;
				this.tabItem = tabItem;
			}

			public override void LightweightUpdate()
			{
				base.LightweightUpdate();

				if( ShowDisabled != !tabItem.Enabled )
				{
					ShowDisabled = !tabItem.Enabled;
					Owner?.Invalidate( true );
				}
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8797 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem, ContentBrowserItem_Virtual>( __0x8796.Count );

					foreach( var __0x8931 in tabItem.Groups )
					{
						
						if( !__0x8796.TryGetValue( __0x8931, out var item ) )
						{
							item = new __0x8981( __0x8795.contentBrowserProject, this, __0x8931.Name, __0x8794, __0x8795, __0x8931 );
							item.Tag = __0x8931;
							item.imageKey = "Folder";
							item.expandAtStartup = true;
						}

						if( item.ShowDisabled != !__0x8931.Enabled )
						{
							item.ShowDisabled = !__0x8931.Enabled;
							Owner?.Invalidate( true );
						}

						__0x8797[ __0x8931 ] = item;
					}

					__0x8796 = __0x8797;
				}

				var __0x8798 = new List<ContentBrowser.Item>( __0x8796.Count );
				foreach( var __0x8932 in __0x8796.Values )
					__0x8798.Add( __0x8932 );
				return __0x8798;
			}
		}

		

		class __0x8983 : ContentBrowserItem_Virtual
		{
			HCItemProjectRibbonAndToolbarActions __0x8799;
			HCItemProjectRibbonAndToolbarActionsForm __0x8800;

			EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual> __0x8801 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual>();

			

			public __0x8983( ContentBrowser owner, ContentBrowser.Item parent, string text, HCItemProjectRibbonAndToolbarActions hcItem, HCItemProjectRibbonAndToolbarActionsForm control )
				: base( owner, parent, text )
			{
				this.__0x8799 = hcItem;
				this.__0x8800 = control;
			}

			public override IList<ContentBrowser.Item> GetChildren( bool onlyAlreadyCreated )
			{
				
				if( !onlyAlreadyCreated )
				{
					var __0x8802 = new EDictionary<Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem, ContentBrowserItem_Virtual>( __0x8801.Count );

					foreach( var __0x8933 in __0x8799.__0x8944().RibbonTabs )
					{
						
						
						

						
						if( !__0x8801.TryGetValue( __0x8933, out var item ) )
						{
							item = new __0x8982( __0x8800.contentBrowserProject, this, __0x8933.Name, __0x8799, __0x8800, __0x8933 );
							item.Tag = __0x8933;
							item.imageKey = "Folder";

							

							
							
							
							
							
							
							
							
							
							
							
							
						}

						__0x8802[ __0x8933 ] = item;

						
					}

					__0x8801 = __0x8802;
				}

				var __0x8803 = new List<ContentBrowser.Item>( __0x8801.Count );
				foreach( var __0x8934 in __0x8801.Values )
					__0x8803.Add( __0x8934 );
				return __0x8803;
			}
		}

		

		public HCItemProjectRibbonAndToolbarActions( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x8804 = new HCItemProjectRibbonAndToolbarActionsForm();
			__0x8804.contentBrowserProject.ShowContextMenuEvent += ContentBrowserProject_ShowContextMenuEvent;
			return __0x8804;
		}

		public override EUserControl CreateControlImpl()
		{
			var __0x8805 = (HCGridProperty)base.CreateControlImpl();
			__0x8805.ShowOnlyEditorControl = true;
			return __0x8805;
		}

		string __0x8943( string __0x8952 )
		{
			return EditorLocalization.Translate( "ProjectSettingsRibbonAndToolbarActions", __0x8952 );
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x8806 = __0x8944();
			if( __0x8806 == null )
				return;

			var __0x8807 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			__0x8807.kryptonButtonReset.Click += KryptonButtonReset_Click;
			__0x8807.toolStripButtonEnabled.Click += ToolStripButtonEnabled_Click;
			__0x8807.toolStripButtonDelete.Click += ToolStripButtonDelete_Click;
			__0x8807.toolStripButtonAdd.Click += ToolStripButtonAdd_Click;
			__0x8807.toolStripButtonRename.Click += ToolStripButtonRename_Click;
			__0x8807.toolStripButtonMoveUp.Click += ToolStripButtonMoveUp_Click;
			__0x8807.toolStripButtonMoveDown.Click += ToolStripButtonMoveDown_Click;
			__0x8807.toolStripButtonNewGroup.Click += ToolStripButtonNewGroup_Click;
			__0x8807.contentBrowserProject.KeyDownOverride += ContentBrowserProject_KeyDownOverride;

			
			{
				var __0x8808 = new List<ContentBrowser.Item>();

				var __0x8809 = new List<EditorAction>( EditorActions.Actions ).Where( __0x8953 => !__0x8953.CompletelyDisabled ).ToArray();
				CollectionUtility.InsertionSort( __0x8809, delegate ( EditorAction __0x8954, EditorAction __0x8955 )
				{
					return string.Compare( __0x8954.Name, __0x8955.Name );
				} );

				Dictionary<Image, string> __0x8810 = new Dictionary<Image, string>();
				int __0x8811 = 0;

				foreach( var __0x8935 in __0x8809 )
				{
					var __0x8812 = new ContentBrowserItem_Virtual( __0x8807.contentBrowserAll, null, __0x8935.Name );
					__0x8812.Tag = __0x8935;
					__0x8812.Description = __0x8935.Description;

					var __0x8813 = __0x8935.GetImageSmall();
					if( __0x8813 != null )
					{
						if( !__0x8810.TryGetValue( __0x8813, out var id ) )
						{
							id = "Name_" + __0x8811.ToString();
							__0x8810[ __0x8813 ] = id;
							__0x8807.contentBrowserAll.AddImageKey( id, __0x8813, __0x8935.GetImageBig() );
							__0x8811++;
						}
						__0x8812.imageKey = id;
					}

					__0x8808.Add( __0x8812 );
				}

				__0x8807.contentBrowserAll.SetData( __0x8808, false );
			}

			
			{
				var __0x8814 = new List<ContentBrowser.Item>();

				{
					var __0x8815 = new __0x8983( __0x8807.contentBrowserProject, null, "Ribbon", this, __0x8807 );
					__0x8815.imageKey = "Folder";
					__0x8815.expandAtStartup = true;
					__0x8814.Add( __0x8815 );
				}

				{
					var __0x8816 = new __0x8981( __0x8807.contentBrowserProject, null, "Quick Access Toolbar", this, __0x8807, null );
					__0x8816.imageKey = "Folder";
					__0x8816.expandAtStartup = true;
					__0x8814.Add( __0x8816 );
				}

				__0x8807.contentBrowserProject.SetData( __0x8814, true );

				
			}
		}

		internal void ContentBrowserProject_KeyDownOverride( ContentBrowser browser, object sender, KeyEventArgs e, ref bool handled )
		{
			
			{
				var __0x8817 = EditorAPI.GetActionShortcuts( "Delete" );
				if( __0x8817 != null )
				{
					foreach( var __0x8936 in __0x8817 )
					{
						Keys __0x8818 = e.KeyCode | Control.ModifierKeys;
						if( __0x8936 == __0x8818 )
						{
							TryDeleteObjects();
							handled = true;
							break;
						}
					}
				}
			}

			
			{
				var __0x8819 = EditorAPI.GetActionShortcuts( "Rename" );
				if( __0x8819 != null )
				{
					foreach( var __0x8937 in __0x8819 )
					{
						Keys __0x8820 = e.KeyCode | Control.ModifierKeys;
						if( __0x8937 == __0x8820 )
						{
							TryRename();
							handled = true;
							break;
						}
					}
				}
			}
		}

		internal void KryptonButtonReset_Click( object sender, EventArgs e )
		{
			var __0x8821 = __0x8944();
			if( __0x8821 == null )
				return;

			if( EditorMessageBox.ShowQuestion( __0x8943( "Reset the configuration of the Ribbon and Quick Access Toolbar to default?" ), EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			__0x8821.ResetToDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;
		}

		Component_ProjectSettings.RibbonAndToolbarActionsClass __0x8944()
		{
			var __0x8822 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8823 = GetValues();
			if( __0x8823 == null || __0x8823.Length != 1 )
				return null;
			return __0x8823[ 0 ] as Component_ProjectSettings.RibbonAndToolbarActionsClass;
		}

		void __0x8945()
		{
			var __0x8824 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8938 in __0x8824.contentBrowserProject.GetAllItems() )
				__0x8938.PerformChildrenChanged();
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x8825 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8826 = __0x8944();
			if( __0x8826 == null )
				return;

			__0x8825.kryptonButtonReset.Enabled = !__0x8826.UseDefaultSettings;

			__0x8945();

			__0x8825.toolStripButtonEnabled.Enabled = CanSetEnabled( out _, out var enabledNewValue );
			__0x8825.toolStripButtonEnabled.Checked = __0x8825.toolStripButtonEnabled.Enabled && !enabledNewValue;
			__0x8825.toolStripButtonAdd.Enabled = CanAddAction( out _, out _ );
			__0x8825.toolStripButtonDelete.Enabled = CanDeleteObjects( out _ );
			__0x8825.toolStripButtonRename.Enabled = CanRename( out _ );
			__0x8825.toolStripButtonMoveUp.Enabled = __0x8948( out _, out _, out _ );
			__0x8825.toolStripButtonMoveDown.Enabled = __0x8950( out _, out _, out _ );

			__0x8825.toolStripButtonNewGroup.Enabled = CanNewGroup( out var newGroupText, out _ );
			if( __0x8825.toolStripButtonNewGroup.Text != newGroupText )
				__0x8825.toolStripButtonNewGroup.Text = newGroupText;
		}

		internal void ContentBrowserProject_ShowContextMenuEvent( ContentBrowser sender, ContentBrowser.Item contentItem, List<KryptonContextMenuItemBase> items )
		{
			var __0x8827 = __0x8944();
			if( __0x8827 == null )
				return;

			
			{
				var __0x8828 = new KryptonContextMenuItem( __0x8943( "Enabled" ), null,
					delegate ( object __0x8956, EventArgs __0x8957 )
					{
						TrySetEnabled();
					} );
				__0x8828.Enabled = CanSetEnabled( out _, out var newValue );
				__0x8828.Checked = __0x8828.Enabled && !newValue;
				items.Add( __0x8828 );
			}

			
			items.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x8829 = CanNewGroup( out var newGroupText, out _ );

				var __0x8830 = new KryptonContextMenuItem( __0x8943( newGroupText ), EditorResourcesCache.New,
					delegate ( object __0x8958, EventArgs __0x8959 )
					{
						TryNewGroup();
					} );
				__0x8830.Enabled = __0x8829;
				items.Add( __0x8830 );
			}

			
			{
				var __0x8831 = new KryptonContextMenuItem( __0x8943( "Add Action" ), EditorResourcesCache.Add,
					delegate ( object __0x8960, EventArgs __0x8961 )
					{
						TryAddAction();
					} );
				__0x8831.Enabled = CanAddAction( out _, out _ );
				items.Add( __0x8831 );
			}

			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
			
			

			
			

			
			{
				var __0x8832 = new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Delete" ), EditorResourcesCache.Delete,
					delegate ( object __0x8962, EventArgs __0x8963 )
					{
						TryDeleteObjects();
					} );
				__0x8832.Enabled = CanDeleteObjects( out _ );
				items.Add( __0x8832 );
			}

			
			{
				var __0x8833 = new KryptonContextMenuItem( EditorLocalization.Translate( "General", "Rename" ), null,
					delegate ( object __0x8964, EventArgs __0x8965 )
					{
						TryRename();
					} );
				__0x8833.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x8833.Enabled = CanRename( out _ );
				items.Add( __0x8833 );
			}
		}

		public bool CanDeleteObjects( out List<ContentBrowser.Item> resultItemsToDelete )
		{
			resultItemsToDelete = new List<ContentBrowser.Item>();

			var __0x8834 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8939 in __0x8834.contentBrowserProject.SelectedItems )
			{
				var __0x8835 = __0x8939.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8835 != null )
				{
					var __0x8836 = __0x8939.Parent as __0x8981;
					if( __0x8836 != null )
						resultItemsToDelete.Add( __0x8939 );
				}

				var __0x8837 = __0x8939.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8837 != null )
					resultItemsToDelete.Add( __0x8939 );

				var __0x8838 = __0x8939.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8838 != null )
					resultItemsToDelete.Add( __0x8939 );
			}

			if( resultItemsToDelete.Count == 0 )
				return false;

			return true;
		}

		public void TryDeleteObjects()
		{
			if( !CanDeleteObjects( out var itemsToDelete ) )
				return;

			string __0x8839;
			if( itemsToDelete.Count == 1 )
				__0x8839 = string.Format( EditorLocalization.Translate( "General", "Delete \'{0}\'?" ), itemsToDelete[ 0 ].ToString() );
			else
				__0x8839 = EditorLocalization.Translate( "General", "Delete selected objects?" );

			if( EditorMessageBox.ShowQuestion( __0x8839, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			var __0x8840 = __0x8944();

			__0x8840.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			foreach( var __0x8940 in itemsToDelete )
			{
				var __0x8841 = __0x8940.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8841 != null )
				{
					var __0x8842 = __0x8940.Parent as __0x8981;
					if( __0x8842 != null )
					{
						if( __0x8842.group != null )
							__0x8842.group.Actions.Remove( __0x8841 );
						else
							__0x8840.ToolbarActions.Remove( __0x8841 );
					}
				}

				var __0x8843 = __0x8940.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8843 != null && __0x8940.Parent != null )
				{
					var __0x8844 = __0x8940.Parent.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8844 != null )
						__0x8844.Groups.Remove( __0x8843 );
				}

				var __0x8845 = __0x8940.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8845 != null )
					__0x8840.RibbonTabs.Remove( __0x8845 );
			}
		}

		internal void ToolStripButtonDelete_Click( object sender, EventArgs e )
		{
			TryDeleteObjects();
		}

		EditorAction __0x8946()
		{
			var __0x8846 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8847 = __0x8846.contentBrowserAll.SelectedItems;
			if( __0x8847.Length == 1 )
				return __0x8847[ 0 ].Tag as EditorAction;
			return null;
		}

		bool __0x8947( out Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem __0x8966 )
		{
			var __0x8848 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8849 = __0x8848.contentBrowserProject.SelectedItems;
			if( __0x8849.Length == 1 )
			{
				var __0x8850 = __0x8849[ 0 ];

				var __0x8851 = __0x8850 as __0x8981;
				if( __0x8851 != null )
				{
					__0x8966 = __0x8851.group;
					return true;
				}

				var __0x8852 = __0x8850.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8852 != null )
				{
					var __0x8853 = __0x8850.Parent as __0x8981;
					if( __0x8853 != null )
					{
						__0x8966 = __0x8853.group;
						return true;
					}
				}
			}

			__0x8966 = null;
			return false;
		}

		public bool CanAddAction( out Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem destinationGroup, out EditorAction actionToAdd )
		{
			var __0x8854 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8855 = __0x8944();

			actionToAdd = __0x8946();
			if( actionToAdd != null )
			{
				if( __0x8947( out var destinationGroup2 ) )
				{
					destinationGroup = destinationGroup2;
					return true;
				}
			}

			destinationGroup = null;
			actionToAdd = null;
			return false;
		}

		public void TryAddAction()
		{
			if( !CanAddAction( out var destinationGroup, out var actionToAdd ) )
				return;

			var __0x8856 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8857 = __0x8944();

			__0x8857.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( destinationGroup != null )
			{
				var __0x8858 = new Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem();
				__0x8858.Name = actionToAdd.Name;
				destinationGroup.Actions.Add( __0x8858 );
			}
			else
			{
				var __0x8859 = new Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem();
				__0x8859.Name = actionToAdd.Name;
				__0x8857.ToolbarActions.Add( __0x8859 );
			}

			
			
		}

		internal void ToolStripButtonAdd_Click( object sender, EventArgs e )
		{
			TryAddAction();
		}

		internal void ToolStripButtonRename_Click( object sender, EventArgs e )
		{
			TryRename();
		}

		bool __0x8948( out Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem __0x8967, out Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem __0x8968, out Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem __0x8969 )
		{
			var __0x8860 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8861 = __0x8944();

			var __0x8862 = __0x8860.contentBrowserProject.SelectedItems;
			if( __0x8862.Length == 1 )
			{
				var __0x8863 = __0x8862[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8863 != null )
				{
					var __0x8864 = __0x8862[ 0 ].Parent.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
					var __0x8865 = __0x8864 != null ? __0x8864.Actions : __0x8861.ToolbarActions;

					var __0x8866 = __0x8865.IndexOf( __0x8863 );
					if( __0x8866 != -1 && __0x8866 > 0 )
					{
						__0x8967 = null;
						__0x8968 = __0x8864;
						__0x8969 = __0x8863;
						return true;
					}
				}

				var __0x8867 = __0x8862[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8867 != null )
				{
					var __0x8868 = __0x8862[ 0 ].Parent?.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8868 != null )
					{
						var __0x8869 = __0x8868.Groups.IndexOf( __0x8867 );
						if( __0x8869 != -1 && __0x8869 > 0 )
						{
							__0x8967 = __0x8868;
							__0x8968 = __0x8867;
							__0x8969 = null;
							return true;
						}
					}
				}

				var __0x8870 = __0x8862[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8870 != null )
				{
					var __0x8871 = __0x8861.RibbonTabs.IndexOf( __0x8870 );
					if( __0x8871 != -1 && __0x8871 > 0 )
					{
						__0x8967 = __0x8870;
						__0x8968 = null;
						__0x8969 = null;
						return true;
					}
				}
			}

			__0x8967 = null;
			__0x8968 = null;
			__0x8969 = null;
			return false;
		}

		void __0x8949()
		{
			if( !__0x8948( out var tab, out var group, out var actionItem ) )
				return;

			var __0x8872 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8873 = __0x8944();

			__0x8873.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( actionItem != null )
			{
				

				var __0x8874 = group != null ? group.Actions : __0x8873.ToolbarActions;

				var __0x8875 = __0x8874.IndexOf( actionItem );
				if( __0x8875 == -1 || __0x8875 == 0 )
					return;

				__0x8874.RemoveAt( __0x8875 );
				__0x8874.Insert( __0x8875 - 1, actionItem );

				
				{
					__0x8945();

					var __0x8876 = __0x8872.contentBrowserProject.FindItemByTag( actionItem );
					if( __0x8876 != null )
						__0x8872.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8876 } );
				}
			}
			else if( group != null )
			{
				

				var __0x8877 = tab.Groups.IndexOf( group );
				if( __0x8877 == -1 || __0x8877 == 0 )
					return;

				tab.Groups.RemoveAt( __0x8877 );
				tab.Groups.Insert( __0x8877 - 1, group );

				
				{
					__0x8945();

					var __0x8878 = __0x8872.contentBrowserProject.FindItemByTag( group );
					if( __0x8878 != null )
						__0x8872.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8878 } );
				}
			}
			else
			{
				

				var __0x8879 = __0x8873.RibbonTabs.IndexOf( tab );
				if( __0x8879 == -1 || __0x8879 == 0 )
					return;

				__0x8873.RibbonTabs.RemoveAt( __0x8879 );
				__0x8873.RibbonTabs.Insert( __0x8879 - 1, tab );

				
				{
					__0x8945();

					var __0x8880 = __0x8872.contentBrowserProject.FindItemByTag( tab );
					if( __0x8880 != null )
						__0x8872.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8880 } );
				}
			}
		}

		bool __0x8950( out Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem __0x8970, out Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem __0x8971, out Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem __0x8972 )
		{
			var __0x8881 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8882 = __0x8944();

			var __0x8883 = __0x8881.contentBrowserProject.SelectedItems;
			if( __0x8883.Length == 1 )
			{
				var __0x8884 = __0x8883[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8884 != null )
				{
					var __0x8885 = __0x8883[ 0 ].Parent.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
					var __0x8886 = __0x8885 != null ? __0x8885.Actions : __0x8882.ToolbarActions;

					var __0x8887 = __0x8886.IndexOf( __0x8884 );
					if( __0x8887 != -1 && __0x8887 < __0x8886.Count - 1 )
					{
						__0x8970 = null;
						__0x8971 = __0x8885;
						__0x8972 = __0x8884;
						return true;
					}
				}

				var __0x8888 = __0x8883[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8888 != null )
				{
					var __0x8889 = __0x8883[ 0 ].Parent?.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
					if( __0x8889 != null )
					{
						var __0x8890 = __0x8889.Groups.IndexOf( __0x8888 );
						if( __0x8890 != -1 && __0x8890 < __0x8889.Groups.Count - 1 )
						{
							__0x8970 = __0x8889;
							__0x8971 = __0x8888;
							__0x8972 = null;
							return true;
						}
					}
				}

				var __0x8891 = __0x8883[ 0 ].Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8891 != null )
				{
					var __0x8892 = __0x8882.RibbonTabs.IndexOf( __0x8891 );
					if( __0x8892 != -1 && __0x8892 < __0x8882.RibbonTabs.Count - 1 )
					{
						__0x8970 = __0x8891;
						__0x8971 = null;
						__0x8972 = null;
						return true;
					}
				}
			}

			__0x8970 = null;
			__0x8971 = null;
			__0x8972 = null;
			return false;
		}

		void __0x8951()
		{
			if( !__0x8950( out var tab, out var group, out var actionItem ) )
				return;

			var __0x8893 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8894 = __0x8944();

			__0x8894.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			if( actionItem != null )
			{
				

				var __0x8895 = group != null ? group.Actions : __0x8894.ToolbarActions;

				var __0x8896 = __0x8895.IndexOf( actionItem );
				if( __0x8896 == -1 || __0x8896 == __0x8895.Count - 1 )
					return;

				__0x8895.RemoveAt( __0x8896 );
				__0x8895.Insert( __0x8896 + 1, actionItem );

				
				{
					__0x8945();

					var __0x8897 = __0x8893.contentBrowserProject.FindItemByTag( actionItem );
					if( __0x8897 != null )
						__0x8893.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8897 } );
				}
			}
			else if( group != null )
			{
				

				var __0x8898 = tab.Groups.IndexOf( group );
				if( __0x8898 == -1 || __0x8898 == tab.Groups.Count - 1 )
					return;

				tab.Groups.RemoveAt( __0x8898 );
				tab.Groups.Insert( __0x8898 + 1, group );

				
				{
					__0x8945();

					var __0x8899 = __0x8893.contentBrowserProject.FindItemByTag( group );
					if( __0x8899 != null )
						__0x8893.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8899 } );
				}
			}
			else
			{
				

				var __0x8900 = __0x8894.RibbonTabs.IndexOf( tab );
				if( __0x8900 == -1 || __0x8900 == __0x8894.RibbonTabs.Count - 1 )
					return;

				__0x8894.RibbonTabs.RemoveAt( __0x8900 );
				__0x8894.RibbonTabs.Insert( __0x8900 + 1, tab );

				
				{
					__0x8945();

					var __0x8901 = __0x8893.contentBrowserProject.FindItemByTag( tab );
					if( __0x8901 != null )
						__0x8893.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8901 } );
				}
			}
		}

		internal void ToolStripButtonMoveUp_Click( object sender, EventArgs e )
		{
			__0x8949();
		}

		internal void ToolStripButtonMoveDown_Click( object sender, EventArgs e )
		{
			__0x8951();
		}

		internal void ToolStripButtonEnabled_Click( object sender, EventArgs e )
		{
			TrySetEnabled();
		}

		public bool CanSetEnabled( out List<ContentBrowser.Item> itemsToUpdate, out bool newValue )
		{
			itemsToUpdate = new List<ContentBrowser.Item>();
			newValue = false;

			var __0x8902 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x8941 in __0x8902.contentBrowserProject.SelectedItems )
			{
				var __0x8903 = __0x8941.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8903 != null )
				{
					if( !__0x8903.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8941 );
				}

				var __0x8904 = __0x8941.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8904 != null )
				{
					if( !__0x8904.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8941 );
				}

				var __0x8905 = __0x8941.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8905 != null )
				{
					if( !__0x8905.Enabled )
						newValue = true;
					itemsToUpdate.Add( __0x8941 );
				}
			}

			if( itemsToUpdate.Count == 0 )
				return false;

			return true;
		}

		public void TrySetEnabled()
		{
			if( !CanSetEnabled( out var itemsToUpdate, out var newValue ) )
				return;

			var __0x8906 = __0x8944();

			__0x8906.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			foreach( var __0x8942 in itemsToUpdate )
			{
				var __0x8907 = __0x8942.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.ActionItem;
				if( __0x8907 != null )
					__0x8907.Enabled = newValue;

				var __0x8908 = __0x8942.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8908 != null )
					__0x8908.Enabled = newValue;

				var __0x8909 = __0x8942.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8909 != null )
					__0x8909.Enabled = newValue;
			}
		}

		public bool CanRename( out ContentBrowser.Item itemToRename )
		{
			var __0x8910 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			if( __0x8910.contentBrowserProject.SelectedItems.Length == 1 )
			{
				var __0x8911 = __0x8910.contentBrowserProject.SelectedItems[ 0 ];

				var __0x8912 = __0x8911.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
				if( __0x8912 != null )
				{
					itemToRename = __0x8911;
					return true;
				}

				var __0x8913 = __0x8911.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
				if( __0x8913 != null )
				{
					itemToRename = __0x8911;
					return true;
				}
			}

			itemToRename = null;
			return false;
		}

		public void TryRename()
		{
			if( !CanRename( out var itemToRename ) )
				return;

			var __0x8914 = __0x8944();

			var __0x8915 = itemToRename.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem;
			if( __0x8915 != null )
			{
				var __0x8916 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), __0x8915.Name, EditorLocalization.Translate( "General", "Rename" ),
					delegate ( string __0x8973, ref string __0x8974 )
					{
						if( string.IsNullOrEmpty( __0x8973.Trim() ) )
							return false;
						return true;
					},
					delegate ( string __0x8975, ref string __0x8976 )
					{
						__0x8915.Name = __0x8975;
						return true;
					}
				);

				if( __0x8916.ShowDialog() == DialogResult.Cancel )
					return;

				__0x8914.SetToNotDefault();
				if( Owner?.DocumentWindow?.Document != null )
					Owner.DocumentWindow.Document.Modified = true;

				__0x8915.Name = __0x8916.TextBoxText;

				( (ContentBrowserItem_Virtual)itemToRename ).SetText( __0x8915.Name );
				Owner?.Invalidate( true );
			}

			var __0x8917 = itemToRename.Tag as Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem;
			if( __0x8917 != null )
			{
				var __0x8918 = new OKCancelTextBoxForm( EditorLocalization.TranslateLabel( "General", "Name:" ), __0x8917.Name, EditorLocalization.Translate( "General", "Rename" ),
					delegate ( string __0x8977, ref string __0x8978 )
					{
						if( string.IsNullOrEmpty( __0x8977.Trim() ) )
							return false;
						return true;
					},
					delegate ( string __0x8979, ref string __0x8980 )
					{
						__0x8917.Name = __0x8979;
						return true;
					}
				);

				if( __0x8918.ShowDialog() == DialogResult.Cancel )
					return;

				__0x8914.SetToNotDefault();
				if( Owner?.DocumentWindow?.Document != null )
					Owner.DocumentWindow.Document.Modified = true;

				__0x8917.Name = __0x8918.TextBoxText;

				( (ContentBrowserItem_Virtual)itemToRename ).SetText( __0x8917.Name );
				Owner?.Invalidate( true );
			}
		}

		public bool CanNewGroup( out string newGroupText, out Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem destinationTab )
		{
			newGroupText = "New Group";
			destinationTab = null;

			var __0x8919 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;

			var __0x8920 = __0x8919.contentBrowserProject.SelectedItems;
			if( __0x8920.Length == 1 )
			{
				var __0x8921 = __0x8920[ 0 ];

				if( __0x8921 is __0x8983 )
				{
					newGroupText = "New Tab";
					return true;
				}

				var __0x8922 = __0x8921 as __0x8982;
				if( __0x8922 != null )
				{
					destinationTab = __0x8922.tabItem;
					return true;
				}
			}

			return false;
		}

		public void TryNewGroup()
		{
			if( !CanNewGroup( out _, out var destinationTab ) )
				return;

			var __0x8923 = (HCItemProjectRibbonAndToolbarActionsForm)CreatedControlInsidePropertyItemControl;
			var __0x8924 = __0x8944();

			__0x8924.SetToNotDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;

			object __0x8925 = null;

			if( destinationTab == null )
			{
				

				var __0x8926 = new Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem();
				__0x8926.Name = "My Tab";
				__0x8926.Type = Component_ProjectSettings.RibbonAndToolbarActionsClass.TabItem.TypeEnum.Additional;

				__0x8924.RibbonTabs.Add( __0x8926 );

				__0x8925 = __0x8926;
			}
			else
			{
				

				var __0x8927 = new Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem();
				__0x8927.Name = "My Group";
				__0x8927.Type = Component_ProjectSettings.RibbonAndToolbarActionsClass.GroupItem.TypeEnum.Additional;

				destinationTab.Groups.Add( __0x8927 );

				__0x8925 = __0x8927;
			}

			

			__0x8945();

			var __0x8928 = __0x8923.contentBrowserProject.FindItemByTag( __0x8925 );
			if( __0x8928 != null )
				__0x8923.contentBrowserProject.SelectItems( new ContentBrowser.Item[] { __0x8928 } );
		}

		internal void ToolStripButtonNewGroup_Click( object sender, EventArgs e )
		{
			TryNewGroup();
		}
	}
}





namespace NeoAxis.Editor
{
	partial class HCItemProjectRibbonAndToolbarActionsForm : EUserControl
	{
		public HCItemProjectRibbonAndToolbarActionsForm()
		{
			__0x8995();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x8990.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();

			
			
			
		}

		private void __0x8994( object __0x8996, EventArgs __0x8997 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			
			{
				var __0x8984 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x8998 )
				{
					__0x8998.Size = new Size( (int)( 20 * __0x8984 ), (int)( 20 * __0x8984 + 2 ) );
					
				}

				__0x8990.Padding = new Padding( (int)__0x8984 );
				__0x8990.Size = new Size( 10, (int)( 21 * __0x8984 + 2 ) );
				__0x8992.SplitterDistance = (int)( 21 * __0x8984 + 2 + (int)__0x8984 - 1 );

				foreach( var __0x8993 in __0x8990.Items )
				{
					var __0x8985 = __0x8993 as ToolStripButton;
					if( __0x8985 != null )
						UpdateSize( __0x8985 );
				}
			}
		}

	}
}

namespace NeoAxis.Editor
{
	partial class HCItemProjectRibbonAndToolbarActionsForm
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x8986 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x8986 != null ) )
			{
				__0x8986.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x8995()
		{
			this.__0x8987 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowserAll = new NeoAxis.Editor.ContentBrowser();
			this.__0x8992 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.__0x8990 = new System.Windows.Forms.ToolStrip();
			this.toolStripButtonEnabled = new System.Windows.Forms.ToolStripButton();
			this.__0x8991 = new System.Windows.Forms.ToolStripSeparator();
			this.toolStripButtonNewGroup = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonAdd = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonDelete = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonRename = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonMoveUp = new System.Windows.Forms.ToolStripButton();
			this.toolStripButtonMoveDown = new System.Windows.Forms.ToolStripButton();
			this.contentBrowserProject = new NeoAxis.Editor.ContentBrowser();
			this.kryptonButtonReset = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x8988 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x8989 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x8987)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x8987.Panel1)).BeginInit();
			this.__0x8987.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8987.Panel2)).BeginInit();
			this.__0x8987.Panel2.SuspendLayout();
			this.__0x8987.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8992)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x8992.Panel1)).BeginInit();
			this.__0x8992.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8992.Panel2)).BeginInit();
			this.__0x8992.Panel2.SuspendLayout();
			this.__0x8992.SuspendLayout();
			this.__0x8990.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x8987.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8987.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x8987.Location = new System.Drawing.Point(2, 24);
			this.__0x8987.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8987.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x8987.Panel1.Controls.Add(this.contentBrowserAll);
			
			
			
			this.__0x8987.Panel2.Controls.Add(this.__0x8992);
			this.__0x8987.Size = new System.Drawing.Size(452, 411);
			this.__0x8987.SplitterDistance = 226;
			this.__0x8987.SplitterPercent = 0.5D;
			this.__0x8987.TabIndex = 4;
			
			
			
			this.contentBrowserAll.CanSelectObjectSettings = false;
			this.contentBrowserAll.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserAll.FilteringMode = null;
			this.contentBrowserAll.ListViewModeOverride = null;
			this.contentBrowserAll.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserAll.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.contentBrowserAll.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserAll.Name = "contentBrowserAll";
			this.contentBrowserAll.ReadOnlyHierarchy = false;
			this.contentBrowserAll.ShowToolBar = false;
			this.contentBrowserAll.Size = new System.Drawing.Size(226, 411);
			this.contentBrowserAll.TabIndex = 3;
			this.contentBrowserAll.ThisIsSettingsWindow = false;
			
			
			
			this.__0x8992.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x8992.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x8992.FixedPanel = System.Windows.Forms.FixedPanel.Panel1;
			this.__0x8992.IsSplitterFixed = true;
			this.__0x8992.Location = new System.Drawing.Point(0, 0);
			this.__0x8992.Name = "kryptonSplitContainer2";
			this.__0x8992.Orientation = System.Windows.Forms.Orientation.Horizontal;
			
			
			
			this.__0x8992.Panel1.Controls.Add(this.__0x8990);
			this.__0x8992.Panel1MinSize = 10;
			
			
			
			this.__0x8992.Panel2.Controls.Add(this.contentBrowserProject);
			this.__0x8992.Size = new System.Drawing.Size(221, 411);
			this.__0x8992.SplitterDistance = 24;
			this.__0x8992.SplitterPercent = 0.058394160583941604D;
			this.__0x8992.SplitterWidth = 0;
			this.__0x8992.TabIndex = 6;
			
			
			
			this.__0x8990.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x8990.ImageScalingSize = new System.Drawing.Size(20, 20);
			this.__0x8990.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
            this.toolStripButtonEnabled,
            this.__0x8991,
            this.toolStripButtonNewGroup,
            this.toolStripButtonAdd,
            this.toolStripButtonDelete,
            this.toolStripButtonRename,
            this.toolStripButtonMoveUp,
            this.toolStripButtonMoveDown});
			this.__0x8990.Location = new System.Drawing.Point(0, 0);
			this.__0x8990.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x8990.Name = "toolStrip1";
			this.__0x8990.AutoSize = false;
			this.__0x8990.Size = new System.Drawing.Size(221, 26);
			this.__0x8990.TabIndex = 5;
			this.__0x8990.Text = "toolStrip1";
			
			
			
			this.toolStripButtonEnabled.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonEnabled.Image = global::NeoAxis.Properties.Resources.Checked_16;
			this.toolStripButtonEnabled.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonEnabled.Name = "toolStripButtonEnabled";
			this.toolStripButtonEnabled.AutoSize = false;
			this.toolStripButtonEnabled.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonEnabled.Text = "Enabled";
			
			
			
			this.__0x8991.Name = "toolStripSeparator1";
			this.__0x8991.Size = new System.Drawing.Size(6, 25);
			
			
			
			this.toolStripButtonNewGroup.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonNewGroup.Image = global::NeoAxis.Properties.Resources.NewFolder_16;
			this.toolStripButtonNewGroup.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonNewGroup.Name = "toolStripButtonNewGroup";
			this.toolStripButtonNewGroup.AutoSize = false;
			this.toolStripButtonNewGroup.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonNewGroup.Text = "New Group";
			
			
			
			this.toolStripButtonAdd.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonAdd.Image = global::NeoAxis.Properties.Resources.Add_16;
			this.toolStripButtonAdd.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonAdd.Name = "toolStripButtonAdd";
			this.toolStripButtonAdd.AutoSize = false;
			this.toolStripButtonAdd.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonAdd.Text = "Add";
			
			
			
			this.toolStripButtonDelete.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonDelete.Image = global::NeoAxis.Properties.Resources.Delete_16;
			this.toolStripButtonDelete.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonDelete.Name = "toolStripButtonDelete";
			this.toolStripButtonDelete.AutoSize = false;
			this.toolStripButtonDelete.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonDelete.Text = "Delete";
			
			
			
			this.toolStripButtonRename.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonRename.Image = global::NeoAxis.Properties.Resources.Rename_16x;
			this.toolStripButtonRename.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonRename.Name = "toolStripButtonRename";
			this.toolStripButtonRename.AutoSize = false;
			this.toolStripButtonRename.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonRename.Text = "Rename";
			
			
			
			this.toolStripButtonMoveUp.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonMoveUp.Image = global::NeoAxis.Properties.Resources.MoveUp_16;
			this.toolStripButtonMoveUp.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonMoveUp.Name = "toolStripButtonMoveUp";
			this.toolStripButtonMoveUp.AutoSize = false;
			this.toolStripButtonMoveUp.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonMoveUp.Text = "Move Up";
			
			
			
			this.toolStripButtonMoveDown.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.toolStripButtonMoveDown.Image = global::NeoAxis.Properties.Resources.MoveDown_16;
			this.toolStripButtonMoveDown.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.toolStripButtonMoveDown.Name = "toolStripButtonMoveDown";
			this.toolStripButtonMoveDown.AutoSize = false;
			this.toolStripButtonMoveDown.Size = new System.Drawing.Size(23, 22);
			this.toolStripButtonMoveDown.Text = "Move Down";
			
			
			
			this.contentBrowserProject.CanSelectObjectSettings = false;
			this.contentBrowserProject.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserProject.FilteringMode = null;
			this.contentBrowserProject.ListViewModeOverride = null;
			this.contentBrowserProject.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserProject.Margin = new System.Windows.Forms.Padding(2, 2, 2, 2);
			this.contentBrowserProject.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserProject.MultiSelect = true;
			this.contentBrowserProject.Name = "contentBrowserProject";
			this.contentBrowserProject.ReadOnlyHierarchy = false;
			this.contentBrowserProject.ShowToolBar = false;
			this.contentBrowserProject.Size = new System.Drawing.Size(221, 387);
			this.contentBrowserProject.TabIndex = 4;
			this.contentBrowserProject.ThisIsSettingsWindow = false;
			
			
			
			this.kryptonButtonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonButtonReset.Location = new System.Drawing.Point(2, 441);
			this.kryptonButtonReset.Margin = new System.Windows.Forms.Padding(2);
			this.kryptonButtonReset.Name = "kryptonButtonReset";
			this.kryptonButtonReset.Size = new System.Drawing.Size(110, 26);
			this.kryptonButtonReset.TabIndex = 5;
			this.kryptonButtonReset.Values.Text = "Reset to Default";
			
			
			
			this.__0x8988.Location = new System.Drawing.Point(0, 3);
			this.__0x8988.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8988.Name = "kryptonLabel1";
			this.__0x8988.Size = new System.Drawing.Size(62, 16);
			this.__0x8988.TabIndex = 6;
			this.__0x8988.Values.Text = "All actions";
			
			
			
			this.__0x8989.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x8989.Location = new System.Drawing.Point(342, 3);
			this.__0x8989.Margin = new System.Windows.Forms.Padding(2);
			this.__0x8989.Name = "kryptonLabel2";
			this.__0x8989.Size = new System.Drawing.Size(112, 16);
			this.__0x8989.TabIndex = 7;
			this.__0x8989.Values.Text = "Current configuration";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x8989);
			this.Controls.Add(this.__0x8988);
			this.Controls.Add(this.kryptonButtonReset);
			this.Controls.Add(this.__0x8987);
			this.Margin = new System.Windows.Forms.Padding(2);
			this.Name = "HCItemProjectRibbonAndToolbarActionsForm";
			this.Size = new System.Drawing.Size(456, 470);
			this.Load += new System.EventHandler( this.__0x8994 );
			( (System.ComponentModel.ISupportInitialize)(this.__0x8987.Panel1)).EndInit();
			this.__0x8987.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8987.Panel2)).EndInit();
			this.__0x8987.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8987)).EndInit();
			this.__0x8987.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8992.Panel1)).EndInit();
			this.__0x8992.Panel1.ResumeLayout(false);
			this.__0x8992.Panel1.PerformLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x8992.Panel2)).EndInit();
			this.__0x8992.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x8992)).EndInit();
			this.__0x8992.ResumeLayout(false);
			this.__0x8990.ResumeLayout(false);
			this.__0x8990.PerformLayout();
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public ContentBrowser contentBrowserAll;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x8987;
		public ContentBrowser contentBrowserProject;
		public ComponentFactory.Krypton.Toolkit.KryptonButton kryptonButtonReset;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8988;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x8989;
		private System.Windows.Forms.ToolStrip __0x8990;
		public System.Windows.Forms.ToolStripButton toolStripButtonDelete;
		public System.Windows.Forms.ToolStripButton toolStripButtonAdd;
		public System.Windows.Forms.ToolStripButton toolStripButtonRename;
		public System.Windows.Forms.ToolStripButton toolStripButtonMoveUp;
		public System.Windows.Forms.ToolStripButton toolStripButtonMoveDown;
		public System.Windows.Forms.ToolStripButton toolStripButtonEnabled;
		private System.Windows.Forms.ToolStripSeparator __0x8991;
		public System.Windows.Forms.ToolStripButton toolStripButtonNewGroup;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x8992;
	}
}





namespace NeoAxis.Editor
{
	class HCItemProjectShortcuts : HCItemProperty
	{
		
		

		Component_ProjectSettings.ShortcutSettingsClass.ActionItem __0x8999;

		

		public HCItemProjectShortcuts( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			var __0x9000 = new HCItemProjectShortcutsForm();
			return __0x9000;
		}

		public override EUserControl CreateControlImpl()
		{
			var __0x9001 = (HCGridProperty)base.CreateControlImpl();
			__0x9001.ShowOnlyEditorControl = true;
			return __0x9001;
		}

		string __0x9044( string __0x9051 )
		{
			return EditorLocalization.Translate( "ProjectShortcuts", __0x9051 );
		}

		public override void ControlInsidePropertyItemControlWasCreated()
		{
			base.ControlInsidePropertyItemControlWasCreated();

			var __0x9002 = __0x9047();
			if( __0x9002 == null )
				return;

			var __0x9003 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			__0x9003.kryptonButtonReset.Click += KryptonButtonReset_Click;

			
			{
				var __0x9004 = new List<ContentBrowser.Item>();

				var __0x9005 = new List<EditorAction>( EditorActions.Actions ).Where( __0x9052 => !__0x9052.CompletelyDisabled ).ToArray();
				CollectionUtility.InsertionSort( __0x9005, delegate ( EditorAction __0x9053, EditorAction __0x9054 )
				{
					return string.Compare( __0x9053.Name, __0x9054.Name );
				} );

				Dictionary<Image, string> __0x9006 = new Dictionary<Image, string>();
				int __0x9007 = 0;

				foreach( var __0x9042 in __0x9005 )
				{
					var __0x9008 = __0x9042.Name;

					var __0x9009 = __0x9002.GetActionItem( __0x9042.Name );
					if( __0x9009 != null )
					{
						var __0x9010 = EditorActions.ConvertShortcutKeysToString( __0x9009.ToArray() );
						if( __0x9010 != "" )
							__0x9008 += " (" + __0x9010 + ")";
					}
					
					
					
					

					var __0x9011 = new ContentBrowserItem_Virtual( __0x9003.contentBrowserAll, null, __0x9008 );
					__0x9011.Tag = __0x9042;
					__0x9011.Description = __0x9042.Description;

					var __0x9012 = __0x9042.GetImageSmall();
					if( __0x9012 != null )
					{
						if( !__0x9006.TryGetValue( __0x9012, out var id ) )
						{
							id = "Name_" + __0x9007.ToString();
							__0x9006[ __0x9012 ] = id;
							__0x9003.contentBrowserAll.AddImageKey( id, __0x9012, __0x9042.GetImageBig() );
							__0x9007++;
						}
						__0x9011.imageKey = id;
					}

					__0x9004.Add( __0x9011 );
				}

				__0x9003.contentBrowserAll.SetData( __0x9004, false );
			}
		}

		class __0x9065
		{
			HCItemProjectShortcuts __0x9013;
			Component_ProjectSettings.ShortcutSettingsClass.ActionItem __0x9014;

			

			static void __0x9045( Keys __0x9055, out EKeys __0x9056, out bool __0x9057, out bool __0x9058, out bool __0x9059 )
			{
				var __0x9015 = __0x9055;
				__0x9015 = __0x9015 & ~Keys.Shift;
				__0x9015 = __0x9015 & ~Keys.Control;
				__0x9015 = __0x9015 & ~Keys.Alt;
				__0x9056 = (EKeys)__0x9015;

				__0x9057 = ( ( __0x9055 & Keys.Shift ) == Keys.Shift );
				__0x9058 = ( ( __0x9055 & Keys.Control ) == Keys.Control );
				__0x9059 = ( ( __0x9055 & Keys.Alt ) == Keys.Alt );
			}

			static void __0x9046( EKeys __0x9060, bool __0x9061, bool __0x9062, bool __0x9063, out Keys __0x9064 )
			{
				__0x9064 = (Keys)__0x9060;
				if( __0x9061 )
					__0x9064 |= Keys.Shift;
				if( __0x9062 )
					__0x9064 |= Keys.Control;
				if( __0x9063 )
					__0x9064 |= Keys.Alt;
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Key" )]
			public EKeys Shortcut1Key
			{
				get
				{
					__0x9045( __0x9014.Shortcut1, out var value, out _, out _, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( key == value )
						return;

					var __0x9016 = __0x9013.__0x9047();
					if( __0x9016 != null )
						__0x9016.SetToNotDefault();

					key = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut1 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Shift" )]
			public bool Shortcut1Shift
			{
				get
				{
					__0x9045( __0x9014.Shortcut1, out _, out var value, out _, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( shift == value )
						return;

					var __0x9017 = __0x9013.__0x9047();
					if( __0x9017 != null )
						__0x9017.SetToNotDefault();

					shift = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut1 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Control" )]
			public bool Shortcut1Control
			{
				get
				{
					__0x9045( __0x9014.Shortcut1, out _, out _, out var value, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( control == value )
						return;

					var __0x9018 = __0x9013.__0x9047();
					if( __0x9018 != null )
						__0x9018.SetToNotDefault();

					control = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut1 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 1" )]
			[DisplayName( "Alt" )]
			public bool Shortcut1Alt
			{
				get
				{
					__0x9045( __0x9014.Shortcut1, out _, out _, out _, out var value );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut1, out var key, out var shift, out var control, out var alt );
					if( alt == value )
						return;

					var __0x9019 = __0x9013.__0x9047();
					if( __0x9019 != null )
						__0x9019.SetToNotDefault();

					alt = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut1 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Key" )]
			public EKeys Shortcut2Key
			{
				get
				{
					__0x9045( __0x9014.Shortcut2, out var value, out _, out _, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( key == value )
						return;

					var __0x9020 = __0x9013.__0x9047();
					if( __0x9020 != null )
						__0x9020.SetToNotDefault();

					key = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut2 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Shift" )]
			public bool Shortcut2Shift
			{
				get
				{
					__0x9045( __0x9014.Shortcut2, out _, out var value, out _, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( shift == value )
						return;

					var __0x9021 = __0x9013.__0x9047();
					if( __0x9021 != null )
						__0x9021.SetToNotDefault();

					shift = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut2 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Control" )]
			public bool Shortcut2Control
			{
				get
				{
					__0x9045( __0x9014.Shortcut2, out _, out _, out var value, out _ );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( control == value )
						return;

					var __0x9022 = __0x9013.__0x9047();
					if( __0x9022 != null )
						__0x9022.SetToNotDefault();

					control = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut2 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			[Category( "Shortcut 2" )]
			[DisplayName( "Alt" )]
			public bool Shortcut2Alt
			{
				get
				{
					__0x9045( __0x9014.Shortcut2, out _, out _, out _, out var value );
					return value;
				}
				set
				{
					__0x9045( __0x9014.Shortcut2, out var key, out var shift, out var control, out var alt );
					if( alt == value )
						return;

					var __0x9023 = __0x9013.__0x9047();
					if( __0x9023 != null )
						__0x9023.SetToNotDefault();

					alt = value;
					__0x9046( key, shift, control, alt, out __0x9014.Shortcut2 );

					if( __0x9013.Owner?.DocumentWindow?.Document != null )
						__0x9013.Owner.DocumentWindow.Document.Modified = true;
				}
			}

			public __0x9065( HCItemProjectShortcuts owner, Component_ProjectSettings.ShortcutSettingsClass.ActionItem obj )
			{
				this.__0x9013 = owner;
				this.__0x9014 = obj;
			}
		}

		internal void KryptonButtonReset_Click( object sender, EventArgs e )
		{
			var __0x9024 = __0x9047();
			if( __0x9024 == null )
				return;

			if( EditorMessageBox.ShowQuestion( __0x9044( "Reset the configuration of shortcuts to default?" ), EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return;

			__0x9024.ResetToDefault();
			if( Owner?.DocumentWindow?.Document != null )
				Owner.DocumentWindow.Document.Modified = true;
		}

		Component_ProjectSettings.ShortcutSettingsClass __0x9047()
		{
			var __0x9025 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x9026 = GetValues();
			if( __0x9026 == null || __0x9026.Length != 1 )
				return null;
			return __0x9026[ 0 ] as Component_ProjectSettings.ShortcutSettingsClass;
		}

		public override void UpdateControl()
		{
			base.UpdateControl();

			var __0x9027 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x9028 = __0x9047();
			if( __0x9028 == null )
				return;

			__0x9027.kryptonButtonReset.Enabled = !__0x9028.UseDefaultSettings;

			__0x9050();
			__0x9049();
		}

		EditorAction __0x9048()
		{
			var __0x9029 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			var __0x9030 = __0x9029.contentBrowserAll.SelectedItems;
			if( __0x9030.Length == 1 )
				return __0x9030[ 0 ].Tag as EditorAction;
			return null;
		}

		void __0x9049()
		{
			var __0x9031 = __0x9047();
			if( __0x9031 == null )
				return;
			var __0x9032 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			Component_ProjectSettings.ShortcutSettingsClass.ActionItem __0x9033 = null;

			var __0x9034 = __0x9048();
			if( __0x9034 != null )
				__0x9033 = __0x9031.GetActionItem( __0x9034.Name );

			if( __0x9033 != __0x8999 )
			{
				__0x8999 = __0x9033;

				

				__0x9032.hierarchicalContainerSelected.SetData( null, new object[ 0 ], false );
				__0x9032.hierarchicalContainerSelected.UpdateItems();

				if( __0x8999 != null )
				{
					var __0x9035 = new __0x9065( this, __0x8999 );

					__0x9032.hierarchicalContainerSelected.SetData( null, new object[] { __0x9035 }, false );
					__0x9032.hierarchicalContainerSelected.UpdateItems();
				}

				
				
				

				
				
				
				
				

				

				

				
				
				

				
				
				
				

				

				
				

			}

			

			
			
			
			
			
			
			
			
			

			

			

			
			
			
			
			

			
			
			
			

			
			
			
			

			
			
		}

		void __0x9050()
		{
			var __0x9036 = __0x9047();
			if( __0x9036 == null )
				return;
			var __0x9037 = (HCItemProjectShortcutsForm)CreatedControlInsidePropertyItemControl;

			foreach( var __0x9043 in __0x9037.contentBrowserAll.GetAllItems() )
			{
				var __0x9038 = __0x9043.Tag as EditorAction;
				if( __0x9038 != null )
				{
					var __0x9039 = __0x9038.Name;

					var __0x9040 = __0x9036.GetActionItem( __0x9038.Name );
					if( __0x9040 != null )
					{
						var __0x9041 = EditorActions.ConvertShortcutKeysToString( __0x9040.ToArray() );
						if( __0x9041 != "" )
							__0x9039 += " (" + __0x9041 + ")";
					}

					( (ContentBrowserItem_Virtual)__0x9043 ).SetText( __0x9039 );
				}
			}
		}

	}
}





namespace NeoAxis.Editor
{
	partial class HCItemProjectShortcutsForm : EUserControl
	{
		public HCItemProjectShortcutsForm()
		{
			__0x9070();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCItemProjectShortcutsForm
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x9066 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x9066 != null ) )
			{
				__0x9066.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x9070()
		{
			this.__0x9067 = new ComponentFactory.Krypton.Toolkit.KryptonSplitContainer();
			this.contentBrowserAll = new NeoAxis.Editor.ContentBrowser();
			this.hierarchicalContainerSelected = new NeoAxis.Editor.HierarchicalContainer();
			this.kryptonButtonReset = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x9068 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x9069 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			((System.ComponentModel.ISupportInitialize)(this.__0x9067)).BeginInit();
			((System.ComponentModel.ISupportInitialize)(this.__0x9067.Panel1)).BeginInit();
			this.__0x9067.Panel1.SuspendLayout();
			((System.ComponentModel.ISupportInitialize)(this.__0x9067.Panel2)).BeginInit();
			this.__0x9067.Panel2.SuspendLayout();
			this.__0x9067.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x9067.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x9067.Cursor = System.Windows.Forms.Cursors.Default;
			this.__0x9067.Location = new System.Drawing.Point(3, 30);
			this.__0x9067.Name = "kryptonSplitContainer1";
			
			
			
			this.__0x9067.Panel1.Controls.Add(this.contentBrowserAll);
			
			
			
			this.__0x9067.Panel2.Controls.Add(this.hierarchicalContainerSelected);
			this.__0x9067.Size = new System.Drawing.Size(602, 506);
			this.__0x9067.SplitterDistance = 301;
			this.__0x9067.SplitterPercent = 0.5D;
			this.__0x9067.TabIndex = 4;
			
			
			
			this.contentBrowserAll.CanSelectObjectSettings = false;
			this.contentBrowserAll.Dock = System.Windows.Forms.DockStyle.Fill;
			this.contentBrowserAll.FilteringMode = null;
			this.contentBrowserAll.ListViewModeOverride = null;
			this.contentBrowserAll.Location = new System.Drawing.Point(0, 0);
			this.contentBrowserAll.Margin = new System.Windows.Forms.Padding(4);
			this.contentBrowserAll.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			this.contentBrowserAll.Name = "contentBrowserAll";
			this.contentBrowserAll.ReadOnlyHierarchy = false;
			this.contentBrowserAll.ShowToolBar = false;
			this.contentBrowserAll.Size = new System.Drawing.Size(301, 506);
			this.contentBrowserAll.TabIndex = 3;
			this.contentBrowserAll.ThisIsSettingsWindow = false;
			
			
			
			this.hierarchicalContainerSelected.ContentMode = NeoAxis.Editor.HierarchicalContainer.ContentModeEnum.Properties;
			this.hierarchicalContainerSelected.Dock = System.Windows.Forms.DockStyle.Fill;
			this.hierarchicalContainerSelected.Location = new System.Drawing.Point(0, 0);
			this.hierarchicalContainerSelected.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.hierarchicalContainerSelected.Name = "hierarchicalContainerSelected";
			this.hierarchicalContainerSelected.Size = new System.Drawing.Size(296, 506);
			this.hierarchicalContainerSelected.SplitterPosition = 118;
			this.hierarchicalContainerSelected.SplitterRatio = 0.4F;
			this.hierarchicalContainerSelected.TabIndex = 6;
			
			
			
			this.kryptonButtonReset.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Bottom | System.Windows.Forms.AnchorStyles.Left)));
			this.kryptonButtonReset.Location = new System.Drawing.Point(3, 543);
			this.kryptonButtonReset.Name = "kryptonButtonReset";
			this.kryptonButtonReset.Size = new System.Drawing.Size(147, 32);
			this.kryptonButtonReset.TabIndex = 5;
			this.kryptonButtonReset.Values.Text = "Reset to Default";
			
			
			
			this.__0x9068.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x9068.Location = new System.Drawing.Point(493, 4);
			this.__0x9068.Name = "kryptonLabel2";
			this.__0x9068.Size = new System.Drawing.Size(112, 20);
			this.__0x9068.TabIndex = 9;
			this.__0x9068.Values.Text = "Selected action";
			this.__0x9068.Visible = false;
			
			
			
			this.__0x9069.Location = new System.Drawing.Point(0, 4);
			this.__0x9069.Name = "kryptonLabel1";
			this.__0x9069.Size = new System.Drawing.Size(79, 20);
			this.__0x9069.TabIndex = 8;
			this.__0x9069.Values.Text = "All actions";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x9068);
			this.Controls.Add(this.__0x9069);
			this.Controls.Add(this.kryptonButtonReset);
			this.Controls.Add(this.__0x9067);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCItemProjectShortcutsForm";
			this.Size = new System.Drawing.Size(608, 578);
			((System.ComponentModel.ISupportInitialize)(this.__0x9067.Panel1)).EndInit();
			this.__0x9067.Panel1.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x9067.Panel2)).EndInit();
			this.__0x9067.Panel2.ResumeLayout(false);
			((System.ComponentModel.ISupportInitialize)(this.__0x9067)).EndInit();
			this.__0x9067.ResumeLayout(false);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public ContentBrowser contentBrowserAll;
		private ComponentFactory.Krypton.Toolkit.KryptonSplitContainer __0x9067;
		public ComponentFactory.Krypton.Toolkit.KryptonButton kryptonButtonReset;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x9068;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x9069;
		public HierarchicalContainer hierarchicalContainerSelected;
	}
}





namespace NeoAxis.Editor
{
	public class NewResourceType
	{
	}

	/// <summary>
	/// Create a new text file.
	/// </summary>
	[EditorNewObjectCell( typeof( NewResourceType_TextFile_Cell ) )]
	[ResourceFileExtension( "txt" )]
	public class NewResourceType_TextFile : NewResourceType
	{
	}

	
	
	/// <summary>
	/// Create a new C# class library. The feature is not implemented.
	/// </summary>
	[ResourceFileExtension( "csproj" )]
	public class NewResourceType_CSharpClassLibrary : NewResourceType
	{
	}

	
	
	
	/// <summary>
	/// Create a new executable module (C# app). The feature is not implemented.
	/// </summary>
	public class NewResourceType_ExecutableApp : NewResourceType
	{
	}

	
	
	
	
	
}





namespace NeoAxis.Editor
{
	[EditorNewObjectSettings( typeof( NewObjectSettingsCSharpClass ) )]
	[ResourceFileExtension( "cs" )]
	[NewObjectDefaultName( "MyClass" )]
	public class NewResourceType_CSharpClass : NewResourceType
	{
		/// <summary>
		/// A set of settings for creation <see cref="NewResourceType_CSharpClass"/> in the editor.
		/// </summary>
		public class NewObjectSettingsCSharpClass : NewObjectSettings
		{
			[DefaultValue( "NeoAxis.Component" )]
			[Category( "Options" )]
			[DisplayName( "Base class" )]
			public string BaseClass { get; set; } = "NeoAxis.Component";

			[DefaultValue( true )]
			[Category( "Options" )]
			[DisplayName( "Add to Project.csproj" )]
			public bool AddToProjectCsproj { get; set; } = true;

			[DefaultValue( false )]
			[Category( "Options" )]
			[DisplayName( "Add example properties" )]
			public bool AddExampleProperties { get; set; } = false;

			public override bool Creation( NewObjectCell.ObjectCreationContext context )
			{
				string __0x9071 = @"using System;

namespace Project
{
	public class {Name}{BasedOnComponentClass}
	{
{Body}
	}
}";

				
				var __0x9072 = Path.GetFileNameWithoutExtension( context.fileCreationRealFileName );
				__0x9071 = __0x9071.Replace( "{Name}", __0x9072 );

				
				if( !string.IsNullOrEmpty( BaseClass ) )
					__0x9071 = __0x9071.Replace( "{BasedOnComponentClass}", " : " + BaseClass );
				else
					__0x9071 = __0x9071.Replace( "{BasedOnComponentClass}", "" );

				
				{
					var __0x9073 = new List<string>();

					if( AddExampleProperties )
					{
						__0x9073.Add( "[DefaultValue( 1 )]" );
						__0x9073.Add( "[Range( 0, 2 )]" );
						__0x9073.Add( "public double Power { get; set; } = 1;" );
						__0x9073.Add( "" );
						__0x9073.Add( "[DefaultValue( \"1 1 1\" )]" );
						__0x9073.Add( "public ColorValue Color { get; set; } = new ColorValue( 1, 1, 1 );" );

						
						
					}

					var __0x9074 = false;
					if( !string.IsNullOrEmpty( BaseClass ) )
					{
						if( BaseClass == "NeoAxis.Component" )
							__0x9074 = true;
						var __0x9075 = MetadataManager.GetType( BaseClass );
						if( __0x9075 != null && typeof( Component ).IsAssignableFrom( __0x9075.GetNetType() ) )
							__0x9074 = true;
						var __0x9076 = MetadataManager.GetType( "NeoAxis." + BaseClass );
						if( __0x9076 != null && typeof( Component ).IsAssignableFrom( __0x9076.GetNetType() ) )
							__0x9074 = true;
					}

					if( __0x9074 )
					{
						if( __0x9073.Count != 0 )
							__0x9073.Add( "" );

						__0x9073.Add( "protected override void OnEnabledInSimulation()" );
						__0x9073.Add( "{" );
						__0x9073.Add( "}" );
						__0x9073.Add( "" );

						__0x9073.Add( "protected override void OnUpdate( float delta )" );
						__0x9073.Add( "{" );
						__0x9073.Add( "}" );
						__0x9073.Add( "" );

						__0x9073.Add( "protected override void OnSimulationStep()" );
						__0x9073.Add( "{" );
						__0x9073.Add( "}" );
					}

					var __0x9077 = "";
					foreach( var __0x9080 in __0x9073 )
					{
						if( __0x9077 != "" )
							__0x9077 += "\r\n";
						__0x9077 += "\t\t" + __0x9080;
					}
					__0x9071 = __0x9071.Replace( "{Body}", __0x9077 );
				}

				
				try
				{
					File.WriteAllText( context.fileCreationRealFileName, __0x9071 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
					return false;
				}

				
				if( AddToProjectCsproj )
				{
					var __0x9078 = new List<string>();

					var __0x9079 = Path.Combine( "Assets", VirtualPathUtility.GetVirtualPathByReal( context.fileCreationRealFileName ) );
					__0x9078.Add( __0x9079 );

					if( CSharpProjectFileUtility.UpdateProjectFile( __0x9078, null, out var error ) )
					{
						if( __0x9078.Count > 1 )
							Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
						else
							Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
					}
					else
						Log.Warning( error );
				}

				return true;
			}
		}
	}
}




namespace NeoAxis.Editor
{
	public partial class NewResourceType_CSharpClassLibrary_Cell : NewObjectCell
	{
		public NewResourceType_CSharpClassLibrary_Cell()
		{
			__0x9082();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			

			
			
			
			
			
			
			
			
			

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_CSharpClassLibrary_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x9081 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x9081 != null))
            {
                __0x9081.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x9082()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_CSharpClassLibrary_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class NewResourceType_FlowGraphLibrary_Cell : NewObjectCell
	{
		public NewResourceType_FlowGraphLibrary_Cell()
		{
			__0x9085();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			var __0x9083 = VirtualPathUtility.GetRealPathByVirtual( @"Base\Tools\NewResourceTemplates\FlowGraphLibrary.component" );

			try
			{
				File.Copy( __0x9083, context.fileCreationRealFileName );
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return false;
			}

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_FlowGraphLibrary_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x9084 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x9084 != null))
            {
                __0x9084.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x9085()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_FlowGraphLibrary_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class NewResourceType_TextFile_Cell : NewObjectCell
	{
		public NewResourceType_TextFile_Cell()
		{
			__0x9087();
		}

		public override bool ReadyToCreate( out string reason )
		{
			if( !base.ReadyToCreate( out reason ) )
				return false;

			return true;
		}

		public override bool ObjectCreation( ObjectCreationContext context )
		{
			if( !base.ObjectCreation( context ) )
				return false;

			try
			{
				File.WriteAllText( context.fileCreationRealFileName, "" );
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return false;
			}

			return true;
		}
	}
}

namespace NeoAxis.Editor
{
    partial class NewResourceType_TextFile_Cell
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x9086 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x9086 != null))
            {
                __0x9086.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x9087()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "NewResourceType_TextFile_Cell";
			this.Size = new System.Drawing.Size(492, 163);
			this.ResumeLayout(false);

        }

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class ScreenNotificationForm : Form
	{
		const double __0x9088 = 0.93;

		static readonly List<ScreenNotificationForm> __0x9089 = new List<ScreenNotificationForm>();
		Color __0x9090 = Color.FromArgb( 144, 171, 231 );
		double __0x9091;

		

		public ScreenNotificationForm( string title, string body, bool error, int duration )
		{
			__0x9110();

			var __0x9092 = duration;
			if( __0x9092 < 0 )
				__0x9092 = int.MaxValue;
			else
				__0x9092 = __0x9092 * 1000;

			__0x9097.Interval = __0x9092;
			__0x9099.Text = title;
			__0x9098.Text = body;

			if( error )
				BackColor = Color.FromArgb( 206, 0, 0 );

			if( duration == -1 )
			{
				__0x9091 = __0x9088;
				Opacity = __0x9091;
			}

			if( EditorAPI.DarkTheme )
			{
				if( !error )
					BackColor = Color.FromArgb( 10, 10, 10 );
				
				__0x9090 = Color.FromArgb( 90, 90, 90 );
			}
		}

		protected override bool ShowWithoutActivation
		{
			get { return true; }
		}

		const int __0x9093 = 0x00000008;
		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x9094 = base.CreateParams;
				__0x9094.ExStyle |= __0x9093;
				return __0x9094;
			}
		}

		
		
		
		
		

		
		
		

		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			System.Drawing.Rectangle __0x9095 = ClientRectangle;
			
			ControlPaint.DrawBorder( e.Graphics, __0x9095, __0x9090, ButtonBorderStyle.Solid );
		}

		private void __0x9103( object __0x9111, EventArgs __0x9112 )
		{
			
			Location = new Point( Screen.PrimaryScreen.WorkingArea.Width - Width - 2, Screen.PrimaryScreen.WorkingArea.Height - Height - 2 );

			
			foreach( ScreenNotificationForm __0x9101 in __0x9089 )
				__0x9101.Top -= Height + 3;

			__0x9089.Add( this );
			__0x9097.Start();
			__0x9100.Start();
		}

		private void __0x9104( object __0x9113, FormClosedEventArgs __0x9114 )
		{
			
			foreach( ScreenNotificationForm __0x9102 in __0x9089 )
			{
				if( __0x9102 == this )
				{
					
					break;
				}
				__0x9102.Top += Height + 3;
			}

			__0x9089.Remove( this );
		}

		private void __0x9105( object __0x9115, EventArgs __0x9116 )
		{
			Close();
		}

		private void __0x9106( object __0x9117, EventArgs __0x9118 )
		{
			Close();
		}

		private void __0x9107( object __0x9119, EventArgs __0x9120 )
		{
			Close();
		}

		private void __0x9108( object __0x9121, EventArgs __0x9122 )
		{
			Close();
		}

		private void __0x9109( object __0x9123, EventArgs __0x9124 )
		{
			if( __0x9091 < __0x9088 )
			{
				__0x9091 += 10.0 / 1000.0 * 8;
				if( __0x9091 > __0x9088 )
					__0x9091 = __0x9088;
				Opacity = __0x9091;
			}
		}
	}
}
namespace NeoAxis.Editor
{
    partial class ScreenNotificationForm
    {
        /// <summary>
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x9096 = null;

        /// <summary>
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x9096 != null))
            {
                __0x9096.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Windows Form Designer generated code

        /// <summary>
        /// Required method for Designer support - do not modify
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x9110()
        {
			this.__0x9096 = new System.ComponentModel.Container();
			this.__0x9097 = new System.Windows.Forms.Timer(this.__0x9096);
			this.__0x9098 = new System.Windows.Forms.Label();
			this.__0x9099 = new System.Windows.Forms.Label();
			this.__0x9100 = new System.Windows.Forms.Timer(this.__0x9096);
			this.SuspendLayout();
			
			
			
			this.__0x9097.Tick += new System.EventHandler(this.__0x9105);
			
			
			
			this.__0x9098.BackColor = System.Drawing.Color.Transparent;
			this.__0x9098.Dock = System.Windows.Forms.DockStyle.Fill;
			this.__0x9098.Font = new System.Drawing.Font("Tahoma", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x9098.ForeColor = System.Drawing.Color.White;
			this.__0x9098.Location = new System.Drawing.Point(0, 0);
			this.__0x9098.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x9098.Name = "labelBody";
			this.__0x9098.Size = new System.Drawing.Size(459, 48);
			this.__0x9098.TabIndex = 0;
			this.__0x9098.Text = "Text Text Text";
			this.__0x9098.TextAlign = System.Drawing.ContentAlignment.MiddleCenter;
			this.__0x9098.Click += new System.EventHandler(this.__0x9108);
			
			
			
			this.__0x9099.BackColor = System.Drawing.Color.Transparent;
			this.__0x9099.Font = new System.Drawing.Font("Calibri", 12.75F, System.Drawing.FontStyle.Bold, System.Drawing.GraphicsUnit.Point, ((byte)(0)));
			this.__0x9099.ForeColor = System.Drawing.Color.Gainsboro;
			this.__0x9099.Location = new System.Drawing.Point(4, 1);
			this.__0x9099.Margin = new System.Windows.Forms.Padding(4, 0, 4, 0);
			this.__0x9099.Name = "labelTitle";
			this.__0x9099.Size = new System.Drawing.Size(49, 26);
			this.__0x9099.TabIndex = 0;
			this.__0x9099.Text = "title goes here";
			this.__0x9099.Visible = false;
			this.__0x9099.Click += new System.EventHandler(this.__0x9107);
			
			
			
			this.__0x9100.Interval = 10;
			this.__0x9100.Tick += new System.EventHandler(this.__0x9109);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(42)))), ((int)(((byte)(87)))), ((int)(((byte)(154)))));
			this.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
			this.ClientSize = new System.Drawing.Size(459, 48);
			this.ControlBox = false;
			this.Controls.Add(this.__0x9099);
			this.Controls.Add(this.__0x9098);
			this.DoubleBuffered = true;
			this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.None;
			this.Margin = new System.Windows.Forms.Padding(4);
			this.MaximizeBox = false;
			this.MinimizeBox = false;
			this.Name = "ScreenNotificationForm";
			this.Opacity = 0D;
			this.ShowIcon = false;
			this.ShowInTaskbar = false;
			this.Text = "Notification";
			this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.__0x9104);
			this.Load += new System.EventHandler(this.__0x9103);
			this.Click += new System.EventHandler(this.__0x9106);
			this.ResumeLayout(false);

        }

        #endregion

        private System.Windows.Forms.Timer __0x9097;
        private System.Windows.Forms.Label __0x9098;
        private System.Windows.Forms.Label __0x9099;
		private System.Windows.Forms.Timer __0x9100;
	}
}




namespace NeoAxis.Editor
{
	public static class ScreenNotifications
	{
		
		static int __0x9125 = 5;

		static List<NotificationItem> __0x9126 = new List<NotificationItem>();

		static Queue<(string, bool, bool)> __0x9127 = new Queue<(string, bool, bool)>();

		

		
		
		
		
		
		

		

		public class NotificationItem
		{
			string __0x9128;
			bool __0x9129;
			
			internal ScreenNotificationForm notificationForm;

			internal NotificationItem( string text, bool error )
			{
				this.__0x9128 = text;
				this.__0x9129 = error;
				
			}

			public string Text
			{
				get { return __0x9128; }
			}

			public bool Error
			{
				get { return __0x9129; }
			}
			
			
			
			
		}

		

		public class StickyNotificationItem : NotificationItem
		{
			object UserData { get; set; }

			internal StickyNotificationItem( string text, bool error )
				: base( text, error )
			{
			}

			public void Close()
			{
				ScreenNotifications.__0x9135( this );
			}
		}

		

		static void __0x9135( NotificationItem __0x9137 )
		{
			__0x9126.Remove( __0x9137 );

			if( __0x9137.notificationForm != null )
			{
				__0x9137.notificationForm.Close();
				__0x9137.notificationForm.Dispose();
			}
		}

		public static int DurationInSeconds
		{
			get { return __0x9125; }
			set { __0x9125 = value; }
		}

		public static void Show( string text, bool error = false )
		{
			__0x9136( text, error, false );
		}

		public static StickyNotificationItem ShowSticky( string text, bool error = false )
		{
			return (StickyNotificationItem)__0x9136( text, error, true );
		}

		static NotificationItem __0x9136( string __0x9138, bool __0x9139, bool __0x9140 )
		{
			Thread __0x9130 = Thread.CurrentThread;
			if( Log.MainThread == null || __0x9130 == Log.MainThread )
			{
				NotificationItem __0x9131;
				if( __0x9140 )
					__0x9131 = new StickyNotificationItem( __0x9138, __0x9139 );
				else
					__0x9131 = new NotificationItem( __0x9138, __0x9139 );
				__0x9126.Add( __0x9131 );

				if( EditorForm.Instance != null && !EngineApp.Closing )
				{
					
					string __0x9132 = "";

					int __0x9133 = __0x9140 ? -1 : DurationInSeconds;

					__0x9131.notificationForm = new ScreenNotificationForm( __0x9132, __0x9138, __0x9139, __0x9133 );
					__0x9131.notificationForm.Show();
					if( __0x9140 )
					{
						__0x9131.notificationForm.Update();
						Application.DoEvents();
					}
				}

				return __0x9131;
			}
			else
			{
				

				lock( __0x9127 )
				{
					while( __0x9127.Count > 100 )
						__0x9127.Dequeue();
					__0x9127.Enqueue( (__0x9138, __0x9139, __0x9140) );
				}
				return null;
			}
		}

		internal static void Update()
		{
			lock( __0x9127 )
			{
				while( __0x9127.Count != 0 )
				{
					var __0x9134 = __0x9127.Dequeue();
					__0x9136( __0x9134.Item1, __0x9134.Item2, __0x9134.Item3 );
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class NeoAxisStoreImplementation : StoreManager.StoreImplementation
	{
		__0x9178 __0x9141;

		

		class __0x9178
		{
			public Thread thread;
			public bool needStop;
			public string search;
			public StoreManager.FilterSettingsClass filterSettings;
		}

		

		void __0x9172( object __0x9173 )
		{
			__0x9178 __0x9142 = (__0x9178)__0x9173;
			var __0x9143 = __0x9142.filterSettings;

			try
			{
				string __0x9144 = "";

				string __0x9145 = @"https://store.neoaxis.com/api/get_store_items2/";

				
				__0x9145 += "?min_triangle_count=" + __0x9143.MinTriangleCount.ToString();
				if( __0x9143.MaxTriangleCount > 0 )
					__0x9145 += "&max_triangle_count=" + __0x9143.MaxTriangleCount.ToString();

				if( !string.IsNullOrEmpty( __0x9142.search ) )
					__0x9145 += "&search=" + __0x9142.search.Replace( ' ', '+' );

				if( __0x9143.LicenseMIT )
					__0x9145 += "&license_mit=true";
				if( __0x9143.CCAttribution )
					__0x9145 += "&license_cc_attribution=true";
				
				
				
				
				
				
				
				
				
				
				
				
				if( __0x9143.FreeToUseWithNeoAxis )
					__0x9145 += "&license_free_to_use_with_neoaxis=true";
				if( __0x9143.PaidPerSeat )
					__0x9145 += "&license_paid_per_seat=true";

				if( __0x9143.SortBy == StoreManager.FilterSettingsClass.SortByEnum.Latest )
					__0x9145 += "&sort_by=latest";
				
				



				var __0x9146 = (HttpWebRequest)WebRequest.Create( __0x9145 );

				using( var __0x9147 = (HttpWebResponse)__0x9146.GetResponse() )
				using( var __0x9148 = __0x9147.GetResponseStream() )
				using( var __0x9149 = new StreamReader( __0x9148 ) )
					__0x9144 = __0x9149.ReadToEnd();

				if( __0x9142.needStop || EditorAPI.ClosingApplication )
					return;

				XmlDocument __0x9150 = new XmlDocument();
				__0x9150.LoadXml( __0x9144 );

				if( __0x9142.needStop || EditorAPI.ClosingApplication )
					return;

				var __0x9151 = new List<PackageManager.PackageInfo>();

				foreach( XmlNode __0x9170 in __0x9150.GetElementsByTagName( "item" ) )
				{
					var __0x9152 = new PackageManager.PackageInfo();
					__0x9152.Store = store;

					
					

					foreach( XmlNode __0x9171 in __0x9170.ChildNodes )
					{
						if( __0x9171.Name == "identifier" )
							__0x9152.Identifier = __0x9171.InnerText;
						else if( __0x9171.Name == "title" )
							__0x9152.Title = __0x9171.InnerText;
						else if( __0x9171.Name == "author" )
							__0x9152.Author = __0x9171.InnerText;
						else if( __0x9171.Name == "version" )
							__0x9152.Version = __0x9171.InnerText;
						else if( __0x9171.Name == "size" )
						{
							double.TryParse( __0x9171.InnerText, out var value );
							__0x9152.Size = (long)value;
						}
						else if( __0x9171.Name == "free_download" )
							__0x9152.FreeDownload = __0x9171.InnerText;
						else if( __0x9171.Name == "secure_download" && !string.IsNullOrEmpty( __0x9171.InnerText ) )
							__0x9152.SecureDownload = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x9171.InnerText );
						else if( __0x9171.Name == "short_description" )
							__0x9152.ShortDescription = __0x9171.InnerText;
						else if( __0x9171.Name == "full_description" )
							__0x9152.FullDescription = __0x9171.InnerText;
						else if( __0x9171.Name == "permalink" )
							__0x9152.Permalink = __0x9171.InnerText;
						else if( __0x9171.Name == "cost" )
							__0x9152.Cost = __0x9171.InnerText;
						else if( __0x9171.Name == "date" )
							__0x9152.Date = __0x9171.InnerText;
						else if( __0x9171.Name == "files" )
							__0x9152.Files = __0x9171.InnerText;
						else if( __0x9171.Name == "categories" )
							__0x9152.Categories = __0x9171.InnerText;
						else if( __0x9171.Name == "tags" )
							__0x9152.Tags = __0x9171.InnerText;
						else if( __0x9171.Name == "thumbnail" )
							__0x9152.Thumbnail = __0x9171.InnerText;
						else if( __0x9171.Name == "triangles" )
						{
							int.TryParse( __0x9171.InnerText, out var value );
							__0x9152.Triangles = value;
						}
						else if( __0x9171.Name == "vertices" )
						{
							int.TryParse( __0x9171.InnerText, out var value );
							__0x9152.Vertices = value;
						}
						else if( __0x9171.Name == "rigged" && !string.IsNullOrEmpty( __0x9171.InnerText ) )
							__0x9152.Rigged = (bool)SimpleTypes.ParseValue( typeof( bool ), __0x9171.InnerText );
						else if( __0x9171.Name == "animations" )
						{
							int.TryParse( __0x9171.InnerText, out var value );
							__0x9152.Animations = value;
						}
						else if( __0x9171.Name == "license" )
						{
							var __0x9153 = __0x9171.InnerText.Replace( " ", "" ).Replace( "-", "" );
							Enum.TryParse<StoreProductLicense>( __0x9153, out var value );
							__0x9152.License = value;
						}
					}

					__0x9151.Add( __0x9152 );
				}

				if( __0x9142.needStop || EditorAPI.ClosingApplication )
					return;

				
				
				
				
				
				
				

				StoreManager.SetDownloadedListOfPackages( store, __0x9151 );
			}
			catch { }
		}

		public override void StartRefreshPackageList( string search, StoreManager.FilterSettingsClass filterSettings )
		{
			StopCurrentTask();

			var __0x9154 = new Thread( __0x9172 );
			var __0x9155 = new __0x9178() { thread = __0x9154, search = search, filterSettings = filterSettings };
			__0x9141 = __0x9155;

			__0x9154.Start( __0x9155 );
		}

		public override void StopCurrentTask()
		{
			var __0x9156 = __0x9141;
			if( __0x9156 != null )
				__0x9156.needStop = true;
			__0x9141 = null;
		}

		public override void ThreadDownloadBody( StoresWindow.ThreadDownloadData data )
		{
			var __0x9157 = data.State;

			using( WebClient __0x9158 = new WebClient() )
			{
				__0x9157.downloadingClient = __0x9158;

				var __0x9159 = Path.GetTempFileName();

				__0x9158.DownloadProgressChanged += delegate ( object __0x9174, DownloadProgressChangedEventArgs __0x9175 )
				{
					
					if( data.Cancelled )
						return;

					if( __0x9175.TotalBytesToReceive != 0 )
						__0x9157.downloadProgress = MathEx.Saturate( (float)__0x9175.BytesReceived / (float)__0x9175.TotalBytesToReceive );
				};

				__0x9158.DownloadFileCompleted += delegate ( object __0x9176, AsyncCompletedEventArgs __0x9177 )
				{
					
					if( !data.Cancelled )
					{
						
						lock( __0x9177.UserState )
							Monitor.Pulse( __0x9177.UserState );

						data.Cancelled = __0x9177.Cancelled;
						data.Error = __0x9177.Error;

						
						if( !data.Cancelled && data.Error == null )
							File.Copy( __0x9159, __0x9157.downloadingDestinationPath, true );
					}

					try
					{
						if( File.Exists( __0x9159 ) )
							File.Delete( __0x9159 );
					}
					catch { }
				};

				using( var __0x9160 = __0x9158.DownloadFileTaskAsync( new Uri( __0x9157.downloadingAddress ), __0x9159 ) )
				{
					while( !string.IsNullOrEmpty( __0x9157.downloadingAddress ) && !__0x9160.Wait( 10 ) )
					{
					}
				}

				__0x9157.downloadingClient = null;
			}

			if( data.Cancelled || data.Error != null )
				return;


			
			using( var __0x9161 = ZipFile.Open( __0x9157.downloadingDestinationPath, ZipArchiveMode.Update ) )
			{
				var __0x9162 = __0x9161.GetEntry( "Package.info" );
				if( __0x9162 != null )
				{
					
					string __0x9163;
					using( var __0x9164 = __0x9162.Open() )
					using( var __0x9165 = new StreamReader( __0x9164 ) )
						__0x9163 = __0x9165.ReadToEnd();

					
					var __0x9166 = TextBlock.Parse( __0x9163, out var error );
					if( !string.IsNullOrEmpty( error ) )
						throw new Exception( error );

					

					var __0x9167 = data.Package;

					__0x9166.SetAttribute( "Store", store.Name );
					if( !string.IsNullOrEmpty( __0x9167.Permalink ) )
						__0x9166.SetAttribute( "Permalink", __0x9167.Permalink );
					if( !string.IsNullOrEmpty( __0x9167.Thumbnail ) )
						__0x9166.SetAttribute( "Thumbnail", __0x9167.Thumbnail );
					if( __0x9167.Triangles != 0 )
						__0x9166.SetAttribute( "Triangles", __0x9167.Triangles.ToString() );
					if( __0x9167.Vertices != 0 )
						__0x9166.SetAttribute( "Vertices", __0x9167.Vertices.ToString() );
					if( __0x9167.Rigged )
						__0x9166.SetAttribute( "Rigged", __0x9167.Rigged.ToString() );
					if( __0x9167.Animations != 0 )
						__0x9166.SetAttribute( "Animations", __0x9167.Animations.ToString() );

					
					
					

					
					__0x9162.Delete();
					__0x9162 = __0x9161.CreateEntry( "Package.info" );
					using( var __0x9168 = __0x9162.Open() )
					using( var __0x9169 = new StreamWriter( __0x9168 ) )
						__0x9169.Write( __0x9166.DumpToString() );
				}
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public static class PackageManager
	{
		static Dictionary<string, PackageInfo> __0x9179 = new Dictionary<string, PackageInfo>();
		static ESet<string> __0x9180 = new ESet<string>();

		

		public class PackageInfo
		{
			public StoreManager.StoreItem Store;
			public string Identifier;

			public string FullFilePath;
			public string Title;
			public string Version;
			public string Author;
			public string ShortDescription;
			public string FullDescription;
			public string Permalink;
			public string Cost;
			public long Size;
			public string FreeDownload;
			public bool SecureDownload;
			public string Date;
			public string Files;
			public string Categories;
			public string Tags;
			public string Thumbnail;
			public int Triangles;
			public int Vertices;
			public bool Rigged;
			public int Animations;
			public StoreProductLicense License;

			bool __0x9181;

			

			public override string ToString()
			{
				return Identifier.Replace( '_', ' ' );
				
			}

			public int CostNumber
			{
				get
				{
					var __0x9182 = 0;
					if( !string.IsNullOrEmpty( Cost ) )
						int.TryParse( Cost, out __0x9182 );
					return __0x9182;
				}
			}

			public void UpdateDataFromArchive()
			{
				if( !__0x9181 )
				{
					__0x9181 = true;

					if( !string.IsNullOrEmpty( FullFilePath ) && File.Exists( FullFilePath ) )
					{
						var __0x9183 = ReadPackageArchiveInfo( FullFilePath, out _ );
						if( __0x9183 != null )
						{
							if( string.IsNullOrEmpty( Files ) )
							{
								var __0x9184 = "";
								foreach( var __0x9231 in __0x9183.Files )
								{
									if( __0x9184 != "" )
										__0x9184 += "\r\n";
									__0x9184 += __0x9231;
								}
								Files = __0x9184;
							}

							if( !string.IsNullOrEmpty( __0x9183.Title ) )
								Title = __0x9183.Title;
							if( !string.IsNullOrEmpty( __0x9183.Permalink ) )
								Permalink = __0x9183.Permalink;
							if( !string.IsNullOrEmpty( __0x9183.Thumbnail ) )
								Thumbnail = __0x9183.Thumbnail;
							if( __0x9183.Triangles != 0 )
								Triangles = __0x9183.Triangles;
							if( __0x9183.Vertices != 0 )
								Vertices = __0x9183.Vertices;
							if( __0x9183.Rigged )
								Rigged = __0x9183.Rigged;
							if( __0x9183.Animations != 0 )
								Animations = __0x9183.Animations;
							if( !string.IsNullOrEmpty( __0x9183.ShortDescription ) )
								ShortDescription = __0x9183.ShortDescription;
							if( !string.IsNullOrEmpty( __0x9183.FullDescription ) )
								FullDescription = __0x9183.FullDescription;
							if( !string.IsNullOrEmpty( __0x9183.Author ) )
								Author = __0x9183.Author;
							if( !string.IsNullOrEmpty( __0x9183.Cost ) )
								Cost = __0x9183.Cost;
							if( __0x9183.License != StoreProductLicense.None )
								License = __0x9183.License;
							if( !string.IsNullOrEmpty( __0x9183.Categories ) )
								Categories = __0x9183.Categories;
							if( !string.IsNullOrEmpty( __0x9183.Tags ) )
								Tags = __0x9183.Tags;
							if( !string.IsNullOrEmpty( __0x9183.Store ) )
								Store = StoreManager.GetStore( __0x9183.Store );
						}

						try
						{
							if( Size == 0 )
								Size = new FileInfo( FullFilePath ).Length;
						}
						catch { }
					}
				}
			}

			string[] __0x9185;
			public string[] GetFiles()
			{
				if( __0x9185 == null && !string.IsNullOrEmpty( Files ) )
				{
					var __0x9186 = Files.Trim( new char[] { ' ', '\r', '\n' } );
					__0x9185 = __0x9186.Split( new char[] { '\r', '\n' }, StringSplitOptions.RemoveEmptyEntries );
				}
				if( __0x9185 != null )
					return __0x9185;
				else
					return Array.Empty<string>();
			}

			public static PackageInfo Merge( PackageInfo p1, PackageInfo p2 )
			{
				var __0x9187 = new PackageInfo();
				__0x9187.Store = p1.Store ?? p2.Store;
				__0x9187.Identifier = p1.Identifier;

				__0x9187.FullFilePath = p1.FullFilePath ?? p2.FullFilePath;
				__0x9187.Title = p1.Title ?? p2.Title;
				__0x9187.Version = p1.Version ?? p2.Version;
				__0x9187.Author = p1.Author ?? p2.Author;
				__0x9187.ShortDescription = p1.ShortDescription ?? p2.ShortDescription;
				__0x9187.FullDescription = p1.FullDescription ?? p2.FullDescription;
				__0x9187.Permalink = p1.Permalink ?? p2.Permalink;
				__0x9187.Cost = p1.Cost ?? p2.Cost;
				__0x9187.Size = p1.Size != 0 ? p1.Size : p2.Size;
				__0x9187.FreeDownload = p1.FreeDownload ?? p2.FreeDownload;
				__0x9187.SecureDownload = p1.SecureDownload || p2.SecureDownload;
				__0x9187.Date = p1.Date ?? p2.Date;
				__0x9187.Files = p1.Files ?? p2.Files;
				__0x9187.Categories = p1.Categories ?? p2.Categories;
				__0x9187.Tags = p1.Tags ?? p2.Tags;
				__0x9187.Thumbnail = p1.Thumbnail ?? p2.Thumbnail;
				__0x9187.Triangles = p1.Triangles != 0 ? p1.Triangles : p2.Triangles;
				__0x9187.Vertices = p1.Vertices != 0 ? p1.Vertices : p2.Vertices;
				__0x9187.Rigged = p1.Rigged || p2.Rigged;
				__0x9187.Animations = p1.Animations != 0 ? p1.Animations : p2.Animations;
				__0x9187.License = p1.License != StoreProductLicense.None ? p1.License : p2.License;

				return __0x9187;
			}

			public enum FileTypeToDrop
			{
				None,
				Mesh,
				Material,
				Environment,
				Surface,
			}

			public (FileTypeToDrop type, string file) GetFileToDrop()
			{
				var __0x9188 = GetFiles();

				
				{
					var __0x9189 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x9232 in __0x9188 )
					{
						try
						{
							var __0x9190 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x9232 ) );
							
							if( __0x9190 != null && __0x9190.Name == "Skybox" )
								__0x9189.Add( (__0x9190, __0x9232) );
						}
						catch { }
					}

					if( __0x9189.Count == 1 )
					{
						var __0x9191 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9189[ 0 ].Item2 );
						var __0x9192 = VirtualPathUtility.GetVirtualPathByReal( __0x9191 );

						if( !string.IsNullOrEmpty( __0x9192 ) )
							return (FileTypeToDrop.Environment, __0x9192);
					}
				}

				
				{
					var __0x9193 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x9233 in __0x9188 )
					{
						try
						{
							var __0x9194 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x9233 ) );
							if( __0x9194 != null && ( __0x9194.Name == "Import 3D" || __0x9194.Name == "Mesh" ) )
								__0x9193.Add( (__0x9194, __0x9233) );
						}
						catch { }
					}

					if( __0x9193.Count == 1 )
					{
						var __0x9195 = __0x9193[ 0 ].Item1;
						var __0x9196 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9193[ 0 ].Item2 );
						var __0x9197 = VirtualPathUtility.GetVirtualPathByReal( __0x9196 );

						if( !string.IsNullOrEmpty( __0x9197 ) )
						{
							if( __0x9195.Name == "Import 3D" )
								return (FileTypeToDrop.Mesh, __0x9197 + "|$Mesh");
							else
								return (FileTypeToDrop.Mesh, __0x9197);
						}
					}
				}

				
				{
					var __0x9198 = new List<(ResourceManager.ResourceType, string)>();

					foreach( var __0x9234 in __0x9188 )
					{
						try
						{
							var __0x9199 = ResourceManager.GetTypeByFileExtension( Path.GetExtension( __0x9234 ) );
							if( __0x9199 != null && __0x9199.Name == "Material" )
								__0x9198.Add( (__0x9199, __0x9234) );
						}
						catch { }
					}

					if( __0x9198.Count == 1 )
					{
						var __0x9200 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9198[ 0 ].Item2 );
						var __0x9201 = VirtualPathUtility.GetVirtualPathByReal( __0x9200 );

						if( !string.IsNullOrEmpty( __0x9201 ) )
							return (FileTypeToDrop.Material, __0x9201);
					}
				}

				return (FileTypeToDrop.None, "");
			}

			
			
			

			
			
			
			
			

			
			
			

			
			
			
			
			
		}

		

		public class PackageArchiveInfo
		{
			public string Title;
			
			public string Author = "";
			public string ShortDescription = "";
			public string FullDescription = "";
			public List<string> Files = new List<string>();
			public bool MustRestart = false;
			public string OpenAfterInstall = "";
			public string AddCSharpFilesToProject = "";
			public string Permalink = "";
			public string Thumbnail = "";
			public int Triangles;
			public int Vertices;
			public bool Rigged;
			public int Animations;
			public string Cost = "";
			public StoreProductLicense License;
			public string Categories = "";
			public string Tags = "";
			public string Store = "";
		}

		

		public static string PackagesFolder
		{
			get { return Path.Combine( VirtualFileSystem.Directories.Project, "EnginePackages" ); }
		}

		public static Dictionary<string, PackageInfo> GetPackagesInfoByFileArchives( bool update )
		{
			if( update )
			{
				
				
				

				__0x9179.Clear();

				var __0x9202 = new List<PackageInfo>();

				
				
				var __0x9203 = "*.neoaxispackage";
				

				if( Directory.Exists( PackagesFolder ) )
				{
					foreach( var __0x9235 in Directory.GetFiles( PackagesFolder, __0x9203 ) )
					{
						var __0x9204 = Path.GetFileNameWithoutExtension( __0x9235 );
						var __0x9205 = __0x9204.Split( new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries );
						if( __0x9205.Length >= 2 )
						{
							var __0x9206 = __0x9205[ 0 ];

							var __0x9207 = new PackageInfo();
							
							

							__0x9207.Identifier = __0x9206;
							__0x9207.FullFilePath = __0x9235;
							__0x9207.Title = __0x9206.Replace( '_', ' ' );
							__0x9207.Version = __0x9205[ 1 ];

							__0x9202.Add( __0x9207 );
							
						}
					}
				}
				

				CollectionUtility.MergeSort( __0x9202, delegate ( PackageInfo __0x9242, PackageInfo __0x9243 )
				{
					return string.Compare( __0x9242.Identifier, __0x9243.Identifier );
				} );

				foreach( var __0x9236 in __0x9202 )
					__0x9179[ __0x9236.Identifier ] = __0x9236;
			}

			return __0x9179;
		}

		public static ESet<string> GetInstalledPackages( bool update )
		{
			if( update )
			{
				__0x9180.Clear();

				var __0x9208 = Path.Combine( PackagesFolder, "PackagesState.txt" );
				if( File.Exists( __0x9208 ) )
				{
					var __0x9209 = TextBlockUtility.LoadFromRealFile( __0x9208, out _ );
					if( __0x9209 != null )
					{
						foreach( var __0x9237 in __0x9209.Children )
						{
							if( __0x9237.Name == "Package" )
								__0x9180.AddWithCheckAlreadyContained( __0x9237.GetAttribute( "Name" ) );
						}
					}
				}
			}

			return __0x9180;
		}

		public static bool IsInstalled( string packageName, bool update )
		{
			return GetInstalledPackages( update ).Contains( packageName );
		}

		public static bool ChangeInstalledState( string packageName, bool installed )
		{
			var __0x9210 = Path.Combine( PackagesFolder, "PackagesState.txt" );

			
			TextBlock __0x9211;
			if( File.Exists( __0x9210 ) )
			{
				__0x9211 = TextBlockUtility.LoadFromRealFile( __0x9210, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					EditorMessageBox.ShowWarning( error );
					return false;
				}
			}
			else
				__0x9211 = new TextBlock();

			
			{
				foreach( var __0x9238 in __0x9211.Children )
				{
					if( __0x9238.Name == "Package" )
					{
						if( __0x9238.GetAttribute( "Name" ) == packageName )
						{
							__0x9211.DeleteChild( __0x9238 );
							break;
						}
					}
				}

				if( installed )
				{
					var __0x9212 = __0x9211.AddChild( "Package" );
					__0x9212.SetAttribute( "Name", packageName );
				}
			}

			
			{
				if( !Directory.Exists( PackagesFolder ) )
					Directory.CreateDirectory( PackagesFolder );

				TextBlockUtility.SaveToRealFile( __0x9211, __0x9210, out var error );
				if( !string.IsNullOrEmpty( error ) )
				{
					EditorMessageBox.ShowWarning( error );
					return false;
				}
			}

			return true;
		}

		public static PackageArchiveInfo ReadPackageArchiveInfo( string fullPath, out string error )
		{
			error = "";

			try
			{
				using( var __0x9213 = ZipFile.OpenRead( fullPath ) )
				{
					PackageArchiveInfo __0x9214 = new PackageArchiveInfo();

					
					var __0x9215 = __0x9213.GetEntry( "Package.info" );
					using( var __0x9216 = new StreamReader( __0x9215.Open() ) )
					{
						var __0x9217 = __0x9216.ReadToEnd();

						var __0x9218 = TextBlock.Parse( __0x9217, out error );
						if( __0x9218 == null )
							return null;

						__0x9214.Title = __0x9218.GetAttribute( "Title" );
						__0x9214.Author = __0x9218.GetAttribute( "Author" );
						__0x9214.ShortDescription = __0x9218.GetAttribute( "Description" );
						__0x9214.FullDescription = __0x9218.GetAttribute( "FullDescription" );

						if( bool.TryParse( __0x9218.GetAttribute( "MustRestart" ), out var mustRestart ) )
							__0x9214.MustRestart = mustRestart;

						__0x9214.OpenAfterInstall = __0x9218.GetAttribute( "OpenAfterInstall" );
						__0x9214.AddCSharpFilesToProject = __0x9218.GetAttribute( "AddCSharpFilesToProject" );
						__0x9214.Permalink = __0x9218.GetAttribute( "Permalink" );
						__0x9214.Thumbnail = __0x9218.GetAttribute( "Thumbnail" );

						if( int.TryParse( __0x9218.GetAttribute( "Triangles" ), out var triangles ) )
							__0x9214.Triangles = triangles;

						if( int.TryParse( __0x9218.GetAttribute( "Vertices" ), out var vertices ) )
							__0x9214.Vertices = vertices;

						if( bool.TryParse( __0x9218.GetAttribute( "Rigged" ), out var rigged ) )
							__0x9214.Rigged = rigged;

						if( int.TryParse( __0x9218.GetAttribute( "Animations" ), out var animations ) )
							__0x9214.Animations = animations;

						__0x9214.Cost = __0x9218.GetAttribute( "Cost" );

						var __0x9219 = __0x9218.GetAttribute( "License" ).Replace( " ", "" ).Replace( "-", "" );
						Enum.TryParse<StoreProductLicense>( __0x9219, out var value );
						__0x9214.License = value;

						__0x9214.Categories = __0x9218.GetAttribute( "Categories" );
						__0x9214.Tags = __0x9218.GetAttribute( "Tags" );
						__0x9214.Store = __0x9218.GetAttribute( "Store" );
					}

					
					foreach( var __0x9239 in __0x9213.Entries )
					{
						var __0x9220 = __0x9239.FullName;
						bool __0x9221 = __0x9220[ __0x9220.Length - 1 ] == '/';
						if( __0x9220 != "Package.info" && !__0x9221 )
							__0x9214.Files.Add( __0x9220 );
					}

					return __0x9214;
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return null;
			}
		}

		public static bool ReadPackageArchiveInfo_CheckOnly( string fullPath, out string error )
		{
			error = "";

			try
			{
				using( var __0x9222 = ZipFile.OpenRead( fullPath ) )
				{
					PackageArchiveInfo __0x9223 = new PackageArchiveInfo();

					
					var __0x9224 = __0x9222.GetEntry( "Package.info" );

					return __0x9224 != null;
				}
			}
			catch( Exception e )
			{
				error = e.Message;
				return false;
			}
		}

		public static void DeleteFilesAsStartup()
		{
			try
			{
				var __0x9225 = Path.Combine( PackagesFolder, "FilesToDeleteAtStartup.txt" );
				if( File.Exists( __0x9225 ) )
				{
					var __0x9226 = File.ReadAllLines( __0x9225 );

					foreach( var __0x9240 in __0x9226 )
					{
						var __0x9227 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9240 );

						var __0x9228 = DateTime.Now;
						Exception __0x9229 = null;
						do
						{
							try
							{
								if( File.Exists( __0x9227 ) )
									File.Delete( __0x9227 );
								__0x9229 = null;
								break;
							}
							catch( Exception e2 )
							{
								__0x9229 = e2;
							}

						} while( ( DateTime.Now - __0x9228 ).TotalSeconds < 30 );

						if( __0x9229 != null )
							throw __0x9229;
					}

					File.Delete( __0x9225 );
				}
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
			}
		}

		public static void AddFilesToDeletionAtStartup( List<string> fileNames )
		{
			try
			{
				var __0x9230 = Path.Combine( PackagesFolder, "FilesToDeleteAtStartup.txt" );
				foreach( var __0x9241 in fileNames )
					File.AppendAllText( __0x9230, __0x9241 + "\r\n" );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowInfo( e.Message );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Store Window.
	/// </summary>
	[RestoreDockWindowAfterEditorReload]
	public partial class StoreDocumentWindow : DocumentWindowWithViewport
	{
		public const string homeURL = "https://store.neoaxis.com";
		public const string homeURLBasicContent = "https://store.neoaxis.com/product-category/basic-content/";
		readonly bool __0x9244 = false;

		
		UIWebBrowser __0x9245;

		double __0x9246;

		volatile bool __0x9247;

		volatile string __0x9248;

		

		public StoreDocumentWindow()
		{
			__0x9278();

			WindowTitle = EditorLocalization.Translate( "StoreDocumentWindow", WindowTitle );
			EditorThemeUtility.ApplyDarkThemeToForm( __0x9259 );
		}

		private void __0x9266( object __0x9279, EventArgs __0x9280 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x9246 = Time.Current;
			__0x9260.Start();

			__0x9268();
		}

		[Browsable( false )]
		public string StartURL { get; set; } = homeURL;

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			var __0x9249 = sender.Viewport.UIContainer;

			
			
			
			
			
			

			__0x9245 = __0x9249.CreateComponent<UIWebBrowser>( enabled: false );
			__0x9245.StartURL = StartURL;
			__0x9245.Enabled = true;

			__0x9245.AddressChanged += __0x9274;
			__0x9245.TargetUrlChanged += __0x9275;
			__0x9245.DownloadBefore += __0x9277;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			
			viewport.UIContainer.PerformRenderUI( viewport.CanvasRenderer );

			
			if( EditorAPI.SelectedDocumentWindow == this )
			{
				if( __0x9245 != null && __0x9245.CurrentCursor != null )
					ViewportControl.OneFrameChangeCursor = __0x9245.CurrentCursor;
			}
		}

		void __0x9267()
		{
			if( __0x9244 )
			{
				var __0x9250 = __0x9259.PointToClient( Cursor.Position );

				Rectangle __0x9251 = new Rectangle( 0, 0, __0x9259.Size.Width, 0 );
				var __0x9252 = __0x9251.GetPointDistance( new Vector2( __0x9250.X, __0x9250.Y ) ) < 10;

				if( __0x9259.Visible )
				{
					Rectangle __0x9253 = new Rectangle( 0, 0, __0x9259.Size.Width, __0x9259.Size.Height );
					if( __0x9253.Contains( new Vector2( __0x9250.X, __0x9250.Y ) ) )
						__0x9252 = true;
				}

				if( __0x9261.Focused )
					__0x9252 = true;

				if( __0x9252 )
					__0x9246 = Time.Current;

				var __0x9254 = __0x9246 > Time.Current - 2.0;

				if( __0x9259.Visible != __0x9254 )
					__0x9259.Visible = __0x9254;
			}
			else
			{
				__0x9259.Visible = true;
			}
		}

		void __0x9268()
		{
			__0x9262.Enabled = __0x9245 != null && __0x9245.CanGoBack;
			__0x9263.Enabled = __0x9245 != null && __0x9245.CanGoForward;

			if( __0x9247 )
			{
				__0x9247 = false;
				__0x9261.Text = __0x9245 != null ? __0x9245.TargetURL : "";
			}

			__0x9261.Width = Width - __0x9261.Location.X - 6;

			if( !__0x9244 )
			{
				if( ViewportControl != null )
				{
					var __0x9255 = ViewportControl.Parent.ClientSize;

					ViewportControl.Dock = DockStyle.None;
					ViewportControl.Location = new Point( 0, __0x9259.Height );
					ViewportControl.Size = new Size( __0x9255.Width, __0x9255.Height - __0x9259.Height );
				}
				
				
			}
		}

		private void __0x9269( object __0x9281, EventArgs __0x9282 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x9267();

			__0x9268();

			
			if( EditorAPI.SelectedDocumentWindow == this )
			{
				if( __0x9245 != null && __0x9245.CurrentCursor != null )
					ViewportControl.Cursor = __0x9245.CurrentCursor;
			}

			if( !string.IsNullOrEmpty( __0x9248 ) )
			{
				EditorAPI.OpenPackages( __0x9248, true );
				__0x9248 = null;
			}
		}

		private void __0x9270( object __0x9283, EventArgs __0x9284 )
		{
			__0x9245?.GoBack();
		}

		private void __0x9271( object __0x9285, EventArgs __0x9286 )
		{
			__0x9245?.GoForward();
		}

		private void __0x9272( object __0x9287, EventArgs __0x9288 )
		{
			__0x9245?.Reload();
		}

		private void __0x9273( object __0x9289, KeyEventArgs __0x9290 )
		{
			if( __0x9290.KeyCode == Keys.Return )
				__0x9245?.LoadURL( __0x9261.Text );
		}

		private void __0x9274( UIWebBrowser __0x9291, string __0x9292 )
		{
			__0x9247 = true;
		}

		private void __0x9275( UIWebBrowser __0x9293, string __0x9294 )
		{
		}

		private void __0x9276( object __0x9295, EventArgs __0x9296 )
		{
			__0x9245.LoadURL( homeURL );
		}

		public void LoadURL( string url )
		{
			__0x9245.LoadURL( url );
		}

		private void __0x9277( UIWebBrowser __0x9297, Xilium.CefGlue.CefDownloadItem __0x9298, string __0x9299, Xilium.CefGlue.CefBeforeDownloadCallback __0x9300 )
		{
			try
			{
				if( Path.GetExtension( __0x9299 ).ToLower() == ".neoaxispackage" )
				{
					var __0x9256 = Path.GetFileNameWithoutExtension( __0x9299 );
					var __0x9257 = __0x9256.Split( new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries );
					if( __0x9257.Length >= 2 )
						__0x9248 = __0x9257[ 0 ];
				}
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return;
			}
		}

	}
}

namespace NeoAxis.Editor
{
    partial class StoreDocumentWindow
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x9258 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x9258 != null))
            {
                __0x9258.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x9278()
        {
			this.__0x9258 = new System.ComponentModel.Container();
			this.__0x9259 = new System.Windows.Forms.Panel();
			this.__0x9265 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x9264 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x9263 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x9262 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x9261 = new ComponentFactory.Krypton.Toolkit.KryptonTextBox();
			this.__0x9260 = new System.Windows.Forms.Timer(this.__0x9258);
			this.__0x9259.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x9259.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x9259.Controls.Add(this.__0x9265);
			this.__0x9259.Controls.Add(this.__0x9264);
			this.__0x9259.Controls.Add(this.__0x9263);
			this.__0x9259.Controls.Add(this.__0x9262);
			this.__0x9259.Controls.Add(this.__0x9261);
			this.__0x9259.Location = new System.Drawing.Point(0, 0);
			this.__0x9259.Name = "panelToolbar";
			this.__0x9259.Size = new System.Drawing.Size(477, 36);
			this.__0x9259.TabIndex = 1;
			
			
			
			this.__0x9265.Location = new System.Drawing.Point(2, 2);
			this.__0x9265.Name = "kryptonButtonHome";
			this.__0x9265.Size = new System.Drawing.Size(32, 32);
			this.__0x9265.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9265.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x9265.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9265.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x9265.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9265.TabIndex = 0;
			this.__0x9265.Values.Image = global::NeoAxis.Properties.Resources.House_16;
			this.__0x9265.Values.Text = "";
			this.__0x9265.Click += new System.EventHandler(this.__0x9276);
			
			
			
			this.__0x9264.Location = new System.Drawing.Point(117, 2);
			this.__0x9264.Name = "kryptonButtonRefresh";
			this.__0x9264.Size = new System.Drawing.Size(32, 32);
			this.__0x9264.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9264.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x9264.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9264.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x9264.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9264.TabIndex = 3;
			this.__0x9264.Values.Image = global::NeoAxis.Properties.Resources.Refresh_16;
			this.__0x9264.Values.Text = "";
			this.__0x9264.Click += new System.EventHandler(this.__0x9272);
			
			
			
			this.__0x9263.Location = new System.Drawing.Point(79, 2);
			this.__0x9263.Name = "kryptonButtonForward";
			this.__0x9263.Size = new System.Drawing.Size(32, 32);
			this.__0x9263.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9263.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x9263.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9263.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x9263.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9263.TabIndex = 2;
			this.__0x9263.Values.Image = global::NeoAxis.Properties.Resources.Forward_16;
			this.__0x9263.Values.Text = "";
			this.__0x9263.Click += new System.EventHandler(this.__0x9271);
			
			
			
			this.__0x9262.Location = new System.Drawing.Point(41, 2);
			this.__0x9262.Name = "kryptonButtonBack";
			this.__0x9262.Size = new System.Drawing.Size(32, 32);
			this.__0x9262.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9262.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.__0x9262.StateDisabled.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9262.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.__0x9262.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.__0x9262.TabIndex = 1;
			this.__0x9262.Values.Image = global::NeoAxis.Properties.Resources.Back_16;
			this.__0x9262.Values.Text = "";
			this.__0x9262.Click += new System.EventHandler(this.__0x9270);
			
			
			
			this.__0x9261.Font = new System.Drawing.Font("Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ((byte)(204)));
			this.__0x9261.Location = new System.Drawing.Point(162, 6);
			this.__0x9261.Name = "kryptonTextBoxAddress";
			this.__0x9261.Size = new System.Drawing.Size(306, 21);
			this.__0x9261.TabIndex = 4;
			this.__0x9261.WordWrap = false;
			this.__0x9261.KeyDown += new System.Windows.Forms.KeyEventHandler(this.__0x9273);
			
			
			
			this.__0x9260.Tick += new System.EventHandler(this.__0x9269);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x9259);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "StoreDocumentWindow";
			this.Size = new System.Drawing.Size(477, 277);
			this.WindowTitle = "Asset Store";
			this.Load += new System.EventHandler(this.__0x9266);
			this.Controls.SetChildIndex(this.__0x9259, 0);
			this.__0x9259.ResumeLayout(false);
			this.__0x9259.PerformLayout();
			this.ResumeLayout(false);

        }

		#endregion

		private System.Windows.Forms.Panel __0x9259;
		private System.Windows.Forms.Timer __0x9260;
		private ComponentFactory.Krypton.Toolkit.KryptonTextBox __0x9261;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x9262;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x9263;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x9264;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x9265;
	}
}





namespace NeoAxis.Editor
{
	public static class StoreManager
	{
		static List<StoreItem> __0x9301 = new List<StoreItem>();

		static ImageManagerClass __0x9302 = new ImageManagerClass();
		

		static List<Dictionary<string, PackageManager.PackageInfo>> __0x9303 = new List<Dictionary<string, PackageManager.PackageInfo>>();
		
		public static event Action DownloadedListOfPackagesUpdated;

		public static ESet<StoreItem> needGetNextItemsForStores = new ESet<StoreItem>();

		

		public class StoreItem
		{
			public string Name;
			public Image Icon16;
			public Image Icon32;
			public string Website;
			public StoreImplementation Implementation;

			internal Image IconScaled;
		}

		

		public abstract class StoreImplementation
		{
			public StoreItem store;

			public abstract void StartRefreshPackageList( string search, FilterSettingsClass filterSettings );
			public abstract void StopCurrentTask();

			public void Shutdown()
			{
				StopCurrentTask();
			}

			public abstract void ThreadDownloadBody( StoresWindow.ThreadDownloadData data );
			
		}

		

		public class ImageManagerClass
		{
			Dictionary<string, __0x9354> __0x9304 = new Dictionary<string, __0x9354>();

			

			class __0x9354
			{
				public string url;

				public volatile HttpWebRequest webRequest;
				public volatile HttpWebResponse webResponse;

				public volatile Image sourceImage;
				public volatile Image squareImage;

				public volatile bool disposed;

				public double lastUsedTime;

				

				public void Dispose()
				{
					disposed = true;

					try
					{
						webResponse?.Close();
						webRequest?.Abort();
					}
					catch { }

					try
					{
						sourceImage?.Dispose();
						squareImage?.Dispose();
					}
					catch { }
				}
			}

			

			__0x9354 __0x9349( string __0x9351 )
			{
				if( !__0x9304.TryGetValue( __0x9351, out var item ) )
				{
					item = new __0x9354();
					item.url = __0x9351;
					__0x9304[ __0x9351 ] = item;

					var __0x9305 = new Thread( __0x9350 );
					__0x9305.Start( item );
				}

				return item;
			}

			public Image GetSourceImage( string url, double currentTime )
			{
				var __0x9306 = __0x9349( url );
				if( __0x9306.sourceImage != null && __0x9306.sourceImage.PixelFormat != System.Drawing.Imaging.PixelFormat.DontCare )
				{
					__0x9306.lastUsedTime = currentTime;
					return __0x9306.sourceImage;
				}
				return null;
			}

			public Image GetSquareImage( string url, double currentTime )
			{
				var __0x9307 = __0x9349( url );
				if( __0x9307.squareImage != null && __0x9307.squareImage.PixelFormat != System.Drawing.Imaging.PixelFormat.DontCare )
				{
					__0x9307.lastUsedTime = currentTime;
					return __0x9307.squareImage;
				}
				return null;
			}

			void __0x9350( object __0x9352 )
			{
				var __0x9308 = (__0x9354)__0x9352;

				try
				{
					var __0x9309 = (HttpWebRequest)WebRequest.Create( __0x9308.url );
					if( __0x9308.disposed )
						return;
					__0x9308.webRequest = __0x9309;

					using( var __0x9310 = (HttpWebResponse)__0x9309.GetResponse() )
					{
						if( __0x9308.disposed )
							return;
						__0x9308.webResponse = __0x9310;

						using( var __0x9311 = __0x9310.GetResponseStream() )
						{
							var __0x9312 = Image.FromStream( __0x9311, true, true );

							
							var __0x9313 = 512;

							var __0x9314 = 1.0;
							if( __0x9312.Height > __0x9313 )
								__0x9314 = (double)__0x9313 / (double)__0x9312.Height;

							var __0x9315 = (int)( __0x9314 * (double)__0x9312.Height );

							
							
							

							var __0x9316 = new Bitmap( __0x9315, __0x9315, __0x9312.PixelFormat );
							using( var __0x9317 = Graphics.FromImage( __0x9316 ) )
							{
								__0x9317.DrawImage( __0x9312, new System.Drawing.Rectangle( 0, 0, __0x9315, __0x9315 ), new System.Drawing.Rectangle( ( __0x9312.Width - __0x9312.Height ) / 2, 0, __0x9312.Height, __0x9312.Height ), GraphicsUnit.Pixel );
							}

							if( __0x9308.disposed )
								return;

							__0x9308.sourceImage = __0x9312;
							__0x9308.squareImage = __0x9316;
						}
					}
				}
				catch
				{
				}
				finally
				{
					__0x9308.webRequest = null;
					__0x9308.webResponse = null;
				}
			}

			public void Clear()
			{
				foreach( var __0x9338 in __0x9304.Values )
					__0x9338.Dispose();
				__0x9304.Clear();
			}

			public void DeleteItemsNotUsedForLongTime()
			{
				var __0x9318 = EngineApp.GetSystemTime();

				var __0x9319 = new List<__0x9354>();
				foreach( var __0x9339 in __0x9304.Values )
				{
					if( __0x9339.lastUsedTime != 0 && __0x9339.lastUsedTime + 30 < __0x9318 )
						__0x9319.Add( __0x9339 );
				}

				foreach( var __0x9340 in __0x9319 )
				{
					__0x9304.Remove( __0x9340.url );
					__0x9340.Dispose();
				}
			}
		}

		

		public class FilterSettingsClass
		{
			
			
			

			
			
			

			

			
			
			
			

			
			
			
			

			

			[Category( "Licenses" )]
			[Description( "Permissive free software license." )]
			[DefaultValue( true )]
			[DisplayName( "MIT" )]
			[EngineConfig( "StoresWindowFilterSettings" )]
			public bool LicenseMIT { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution alone. Licensees may copy, distribute, display and perform the work and make derivative works and remixes based on it only if they give the author the credits." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution" )]
			public bool CCAttribution { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, share-alike. Licensees may distribute derivative works only under a license identical to the license that governs the original work." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution BY-SA" )]
			public bool CCAttributionBYSA { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, no derivative works. Licensees may copy, distribute, display and perform only verbatim copies of the work, not derivative works and remixes based on it." )]
			[DefaultValue( true )]
			[DisplayName( "CC Attribution BY-ND" )]
			public bool CCAttributionBYND { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial. Licensees may copy, distribute, display, and perform the work and make derivative works and remixes based on it only for non-commercial purposes." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC" )]
			public bool CCAttributionBYNC { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial, share-alike." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC-SA" )]
			public bool CCAttributionBYNCSA { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Attribution, non-commercial, no derivative works." )]
			[DefaultValue( false )]
			[DisplayName( "CC Attribution BY-NC-ND" )]
			public bool CCAttributionBYNCND { get; set; } = false;

			[Category( "Licenses" )]
			[Description( "Freeing content globally without restrictions." )]
			[DefaultValue( true )]
			[DisplayName( "CC0" )]
			public bool CC0 { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Free to use, can only be used in NeoAxis products." )]
			[DefaultValue( true )]
			[DisplayName( "Free To Use With NeoAxis" )]
			public bool FreeToUseWithNeoAxis { get; set; } = true;

			[Category( "Licenses" )]
			[Description( "Paid license for individual person or per seat in an organization." )]
			[DefaultValue( true )]
			public bool PaidPerSeat { get; set; } = true;

			
			
			
			

			

			public enum SortByEnum
			{
				Relevance,
				Latest,
			}

			[Category( "Sort" )]
			
			[DefaultValue( SortByEnum.Relevance )]
			public SortByEnum SortBy { get; set; } = SortByEnum.Relevance;

			
			
			
			
			

			

			[Category( "Models" )]
			[Description( "Minimum number of triangles in the model." )]
			[DefaultValue( 1 )]
			[Range( 1, 10000000, RangeAttribute.ConvenientDistributionEnum.Exponential, 4 )]
			public int MinTriangleCount { get; set; } = 1;

			[Category( "Models" )]
			[Description( "Maximum number of triangles in the model." )]
			[DefaultValue( 10000000 )]
			[Range( 1, 10000000, RangeAttribute.ConvenientDistributionEnum.Exponential, 4 )]
			public int MaxTriangleCount { get; set; } = 10000000;

			[Category( "Models" )]
			[Description( "Selected as awesome content by staff." )]
			[DefaultValue( false )]
			public bool StaffPicks { get; set; } = false;

			[Category( "Models" )]
			[Description( "The content has animations." )]
			[DefaultValue( false )]
			public bool Animated { get; set; } = false;

			[Category( "Models" )]
			[Description( "Content that contain partial or full nudity, that depict drug use, extreme or realistically violent content are filtered." )]
			[DefaultValue( false )]
			public bool ShowRestricted { get; set; } = false;

			

			public FilterSettingsClass Clone()
			{
				var __0x9320 = new FilterSettingsClass();

				var __0x9321 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x9341 in __0x9321.MetadataGetMembers() )
				{
					var __0x9322 = __0x9341 as Metadata.Property;
					if( __0x9322 != null && !__0x9322.ReadOnly )
					{
						var __0x9323 = __0x9322.GetValue( this, null );
						__0x9322.SetValue( __0x9320, __0x9323, null );
					}
				}

				return __0x9320;
			}

			public void Load( TextBlock block )
			{
				try
				{
					var __0x9324 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
					foreach( var __0x9342 in __0x9324.MetadataGetMembers() )
					{
						var __0x9325 = __0x9342 as Metadata.Property;
						if( __0x9325 != null && !__0x9325.ReadOnly )
						{
							if( block.AttributeExists( __0x9325.Name ) )
							{
								var __0x9326 = SimpleTypes.ParseValue( __0x9325.Type.GetNetType(), block.GetAttribute( __0x9325.Name ) );
								__0x9325.SetValue( this, __0x9326, null );
							}
						}
					}
				}
				catch { }
			}

			public void Save( TextBlock block )
			{
				var __0x9327 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x9343 in __0x9327.MetadataGetMembers() )
				{
					var __0x9328 = __0x9343 as Metadata.Property;
					if( __0x9328 != null && !__0x9328.ReadOnly )
						block.SetAttribute( __0x9328.Name, __0x9328.GetValue( this, null ).ToString() );
				}
			}

			public bool Equals( FilterSettingsClass other )
			{
				var __0x9329 = MetadataManager.GetTypeOfNetType( typeof( FilterSettingsClass ) );
				foreach( var __0x9344 in __0x9329.MetadataGetMembers() )
				{
					var __0x9330 = __0x9344 as Metadata.Property;
					if( __0x9330 != null && !__0x9330.ReadOnly )
					{
						var __0x9331 = __0x9330.GetValue( this, null );
						var __0x9332 = __0x9330.GetValue( other, null );
						if( !__0x9331.Equals( __0x9332 ) )
							return false;
					}
				}
				return true;
			}
		}

		

		
		
		

		

		

		
		
		

		
		

		

		

		
		

		

		

		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		


		

		public static List<StoreItem> Stores
		{
			get { return __0x9301; }
		}

		public static ImageManagerClass ImageManager
		{
			get { return __0x9302; }
		}

		
		
		
		

		public static void RegisterStore( StoreItem storeItem )
		{
			storeItem.IconScaled = RenderStandard.GetImageForDispalyScale( storeItem.Icon16, storeItem.Icon32 );
			storeItem.Implementation.store = storeItem;

			__0x9301.Add( storeItem );
		}

		internal static void Init()
		{
			RegisterStore( new StoreItem() { Name = "NeoAxis Store", Website = "https://store.neoaxis.com/", Icon16 = Properties.Resources.NeoAxis_16, Icon32 = Properties.Resources.NeoAxis_32, Implementation = new NeoAxisStoreImplementation() } );
		}

		internal static void Shutdown()
		{
			foreach( var __0x9345 in __0x9301 )
				__0x9345.Implementation.Shutdown();
		}

		public static void SetDownloadedListOfPackages( StoreItem store, List<PackageManager.PackageInfo> list )
		{
			var __0x9333 = Stores.IndexOf( store );

			lock( __0x9303 )
			{
				while( __0x9333 >= __0x9303.Count )
					__0x9303.Add( new Dictionary<string, PackageManager.PackageInfo>() );

				var __0x9334 = __0x9303[ __0x9333 ];

				__0x9334.Clear();
				foreach( var __0x9346 in list )
					__0x9334[ __0x9346.Identifier ] = __0x9346;
			}

			
			
			
			
			
			

			
			DownloadedListOfPackagesUpdated?.Invoke();
		}

		public static void ClearDownloadedListOfPackages()
		{
			lock( __0x9303 )
				__0x9303.Clear();

			DownloadedListOfPackagesUpdated?.Invoke();
		}

		public static string[] GetPackages()
		{
			var __0x9335 = new ESet<string>();

			lock( __0x9303 )
			{
				foreach( var __0x9347 in __0x9303 )
					__0x9335.AddRangeWithCheckAlreadyContained( __0x9347.Keys );
			}

			return __0x9335.ToArray();

			
			
		}

		public static PackageManager.PackageInfo GetPackageInfo( string packageId, bool needDetailedInfo )
		{
			

			lock( __0x9303 )
			{
				foreach( var __0x9348 in __0x9303 )
				{
					if( __0x9348.TryGetValue( packageId, out var package ) )
						return package;
				}
			}

			return null;

			
			
			
			
			
			
			
		}

		public static StoreItem GetPackageStore( string packageId )
		{
			lock( __0x9303 )
			{
				for( int __0x9336 = 0; __0x9336 < __0x9303.Count; __0x9336++ )
				{
					var __0x9337 = __0x9303[ __0x9336 ];
					if( __0x9337.ContainsKey( packageId ) )
						return __0x9301[ __0x9336 ];
				}
			}
			return null;
		}

		public static StoreItem DefaultStore
		{
			get { return __0x9301[ 0 ]; }
		}

		public static StoreItem GetStore( string name )
		{
			return Stores.FirstOrDefault( __0x9353 => __0x9353.Name == name );
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents the Stores window.
	/// </summary>
	public partial class StoresWindow : DockWindow
	{
		double __0x9355;

		StoreManager.StoreItem __0x9356;

		Dictionary<string, ContentBrowserItem_StoreGroupItem> __0x9357 = new Dictionary<string, ContentBrowserItem_StoreGroupItem>();

		double __0x9358;
		bool __0x9359;
		bool __0x9360;

		Dictionary<string, PackageState> __0x9361 = new Dictionary<string, PackageState>();

		string __0x9362;
		bool __0x9363;

		
		List<(string, bool)> __0x9364 = new List<(string, bool)>();

		Dictionary<string, CategoryItem> __0x9365 = new Dictionary<string, CategoryItem>();

		double __0x9366;

		StoreManager.FilterSettingsClass __0x9367 = new StoreManager.FilterSettingsClass();

		public static bool needOpenOptions;

		

		public class ContentBrowserItem_StoreGroupItem : ContentBrowserItem_Virtual
		{
			public StoreGroupType groupType;

			public ContentBrowserItem_StoreGroupItem( ContentBrowser owner, ContentBrowser.Item parent, string text, StoreGroupType groupType )
				: base( owner, parent, text )
			{
				this.groupType = groupType;
			}
		}

		

		[EditorPreviewControl( typeof( Component_StoreItem_PreviewControl ) )]
		public class ContentBrowserItem_StoreItem : ContentBrowserItem_Virtual
		{
			public StoresWindow storesWindow;
			public string packageId;

			public double stateProgress;
			public Color stateColor;

			public Image createdImage;
			public double createdImageStateProgress;
			public Color createdImageStateColor;
			public double createdImageLastUsedTime;

			

			public ContentBrowserItem_StoreItem( ContentBrowser owner, ContentBrowser.Item parent, string text, StoresWindow storesWindow, string packageId )
				: base( owner, parent, text )
			{
				this.storesWindow = storesWindow;
				this.packageId = packageId;
			}

			public override string GetDescription()
			{
				var __0x9368 = storesWindow.GetPackage( packageId, false );
				if( __0x9368 != null )
				{
					var __0x9369 = __0x9368.Title;

					if( __0x9368.Triangles != 0 )
					{
						__0x9369 += "\r\nTriangles " + GetTrianglesVerticesAsString( __0x9368.Triangles );
						__0x9369 += ", Vertices " + GetTrianglesVerticesAsString( __0x9368.Vertices );
					}

					if( __0x9368.Rigged )
						__0x9369 += "\r\nRigged";

					if( __0x9368.Animations != 0 )
						__0x9369 += "\r\nAnimations " + __0x9368.Animations;

					if( __0x9368.Size != 0 )
						__0x9369 += "\r\n" + GetSizeAsString( __0x9368.Size );

					if( __0x9368.License != StoreProductLicense.None && !__0x9368.License.ToString().Contains( "Paid" ) )
						__0x9369 += "\r\nFree (" + EnumUtility.GetValueDisplayName( __0x9368.License ) + ")";
					else if( __0x9368.CostNumber > 0 || !string.IsNullOrEmpty( __0x9368.FreeDownload ) )
					{
						__0x9369 += "\r\n";
						if( __0x9368.CostNumber > 0 )
							__0x9369 += "$" + __0x9368.CostNumber.ToString();
						else
							__0x9369 += "Free";

						if( __0x9368.License != StoreProductLicense.None )
							__0x9369 += " (" + EnumUtility.GetValueDisplayName( __0x9368.License ) + ")";
					}

					if( !string.IsNullOrEmpty( __0x9368.ShortDescription ) )
						__0x9369 += "\r\n\r\n" + __0x9368.ShortDescription;

					
					
					
					
					
					
					
					
					
					
					
					

					return __0x9369;
				}
				return "";
			}

			public override void Dispose()
			{
				createdImage?.Dispose();
				createdImage = null;

				base.Dispose();
			}

			public override object ContainedObject
			{
				get
				{
					return this;
					
				}
			}

			public (PackageManager.PackageInfo.FileTypeToDrop type, string file) GetFileToDrop( bool allowAutoInstall )
			{
				var __0x9370 = storesWindow.GetPackage( packageId, false );
				if( __0x9370 != null )
				{
					var __0x9371 = __0x9370.GetFileToDrop();

					
					if( allowAutoInstall && __0x9371.type != PackageManager.PackageInfo.FileTypeToDrop.None )
					{
						var __0x9372 = storesWindow.__0x9629( packageId );
						if( __0x9372 == null || !__0x9372.Downloaded )
							storesWindow.__0x9620( __0x9370.Identifier, true, false );
					}

					return __0x9371;
				}

				return (PackageManager.PackageInfo.FileTypeToDrop.None, "");
			}
		}

		

		public class StoresContentBrowserOptions : ContentBrowserOptions
		{
			public StoresContentBrowserOptions( ContentBrowser owner )
				: base( owner )
			{
			}

			protected override void MetadataGetMembersFilter( Metadata.GetMembersContext context, Metadata.Member member, ref bool skip )
			{
				var __0x9373 = member as Metadata.Property;
				if( __0x9373 != null )
				{
					if( __0x9373.Name != nameof( TileImageSize ) && __0x9373.Name != nameof( Breadcrumb ) )
						skip = true;
				}

				base.MetadataGetMembersFilter( context, member, ref skip );
			}
		}

		

		public enum StoreGroupType
		{
			None,
			
			
			Models,
			
			
		}

		

		public class PackageState
		{
			public StoresWindow storesWindow;
			public string packageId;

			public volatile string downloadingAddress = "";
			public volatile string downloadingDestinationPath = "";
			public volatile float downloadProgress;
			public volatile bool downloadingInstallAfterDownload;
			public volatile WebClient downloadingClient;

			

			public bool Installed
			{
				get { return PackageManager.IsInstalled( packageId, false ); }
			}

			public bool Downloaded
			{
				get
				{
					var __0x9374 = storesWindow.GetPackage( packageId, false );
					if( __0x9374 == null )
						return false;
					return !string.IsNullOrEmpty( __0x9374.FullFilePath ) && PackageManager.ReadPackageArchiveInfo_CheckOnly( __0x9374.FullFilePath, out _ );
				}
			}

			public bool Downloading
			{
				get { return !string.IsNullOrEmpty( downloadingAddress ); }
			}

			public bool CanDownload
			{
				get
				{
					var __0x9375 = storesWindow.GetPackage( packageId, false );
					if( __0x9375 == null )
						return false;
					return !string.IsNullOrEmpty( __0x9375.FreeDownload ) || __0x9375.SecureDownload && __0x9616( __0x9375.Identifier );
				}
			}
		}

		

		public class CategoryItem
		{
			public string Name;
			public CategoryItem Parent;
			

			public CategoryItem( string name )
			{
				Name = name;
			}
		}

		

		public StoresWindow()
		{
			__0x9633();

			__0x9595();

			__0x9556.Image = EditorResourcesCache.Options;
			__0x9557.Image = EditorResourcesCache.Refresh;
			__0x9558.Image = EditorResourcesCache.Selection;
			__0x9559.Image = EditorResourcesCache.Filter;

			foreach( var __0x9561 in __0x9553.Items )
			{
				var __0x9376 = __0x9561 as ToolStripButton;
				if( __0x9376 != null )
					__0x9376.Text = EditorLocalization.Translate( "StoresWindow", __0x9376.Text );

				var __0x9377 = __0x9561 as ToolStripDropDownButton;
				if( __0x9377 != null )
					__0x9377.Text = EditorLocalization.Translate( "StoresWindow", __0x9377.Text );
			}

			__0x9553.Renderer = EditorThemeUtility.GetToolbarToolStripRenderer();


			
			
			__0x9555.Init( null, null, null );
			__0x9555.Options = new StoresContentBrowserOptions( __0x9555 );

			__0x9555.Options.TileImageSize = 60;

			__0x9596();

			__0x9598();
			EngineConfig.SaveEvent += __0x9599;

			WindowTitle = EditorLocalization.Translate( "Windows", WindowTitle );
			

			__0x9560.TextChanged += __0x9608;
			__0x9553.Layout += __0x9601;
			Resize += __0x9602;
		}

		void __0x9595()
		{
			var __0x9378 = new[] {   "Basic Content", "Demos", "Environments", "Extensions",  "Materials", "Models", "Surfaces", "Visual Effects", "Uncategorized", "Installed" };
			foreach( var __0x9562 in __0x9378 )
			{
				var __0x9379 = new CategoryItem( __0x9562 );
				__0x9365.Add( __0x9379.Name, __0x9379 );
			}

			
			
			
			
			
			
			
			
			
			
			

			
			{
				var __0x9380 = __0x9365[ "Extensions" ];
				var __0x9381 = new[] { "Basic Extensions", "Components", "Constructors", "Kits" };
				foreach( var __0x9563 in __0x9381 )
				{
					var __0x9382 = new CategoryItem( __0x9563 );
					__0x9382.Parent = __0x9380;
					__0x9365.Add( __0x9382.Name, __0x9382 );
				}
			}

			
			{
				var __0x9383 = __0x9365[ "Models" ];
				var __0x9384 = new[] { "Animals", "Architecture", "Characters", "Exterior", "Food", "Industrial", "Interior", "Nature",  "Uncategorized Models", "Vehicles" };
				foreach( var __0x9564 in __0x9384 )
				{
					var __0x9385 = new CategoryItem( __0x9564 );
					__0x9385.Parent = __0x9383;
					__0x9365.Add( __0x9385.Name, __0x9385 );
				}
			}
		}

		void __0x9596()
		{
			__0x9555.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x9555.Options.SplitterPosition = 3.0 / 5.0;
			__0x9555.Options.EditorButton = false;
			__0x9555.Options.SettingsButton = false;
			__0x9555.Options.DisplayPropertiesEditorSettingsButtons = false;
			__0x9555.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
			__0x9555.ShowToolBar = false;
		}

		public override bool HideOnRemoving { get { return true; } }

		private void __0x9597( object __0x9634, EventArgs __0x9635 )
		{
			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x9355 = Time.Current;
			__0x9554.Start();


			
			{
				var __0x9386 = Math.Min( EditorAPI.DPIScale, 2 );

				void UpdateSize( ToolStripItem __0x9636 )
				{
					int __0x9387 = 20;
					if( __0x9636 is ToolStripDropDownButton )
						__0x9387 = 28;
					__0x9636.Size = new Size( (int)( __0x9387 * __0x9386 ), (int)( 20 * __0x9386 + 2 ) );
					
				}

				__0x9553.Padding = new Padding( (int)__0x9386 );
				__0x9553.Size = new Size( 10, (int)( 21 * __0x9386 + 2 ) );

				foreach( var __0x9565 in __0x9553.Items )
				{
					var __0x9388 = __0x9565 as ToolStripButton;
					if( __0x9388 != null )
						UpdateSize( __0x9388 );

					var __0x9389 = __0x9565 as ToolStripDropDownButton;
					if( __0x9389 != null )
						UpdateSize( __0x9389 );
				}


				__0x9553.Padding = new Padding( (int)__0x9386 );
				__0x9553.Size = new Size( 10, (int)( 21 * __0x9386 + 2 ) );
			}


			__0x9600();

			__0x9610();

			EditorAPI.ClosingApplicationChanged += __0x9627;

			
			try
			{
				if( !Directory.Exists( PackageManager.PackagesFolder ) )
					Directory.CreateDirectory( PackageManager.PackagesFolder );
			}
			catch( Exception e2 )
			{
				Log.Warning( e2.Message );
			}

			__0x9611();

			
			StoreManager.DownloadedListOfPackagesUpdated += delegate ()
			{
				__0x9358 = EngineApp.GetSystemTime();
			};

			__0x9618( false );
			PackageManager.GetInstalledPackages( true );

			
			
			
		}


		protected override void OnDestroy()
		{
			EditorAPI.ClosingApplicationChanged -= __0x9627;

			base.OnDestroy();
		}

		[Browsable( false )]
		public ContentBrowser ContentBrowser1
		{
			get { return __0x9555; }
		}

		public override ObjectsInFocus GetObjectsInFocus()
		{
			return new ObjectsInFocus( null, __0x9555.SelectedItems );
			
		}

		void __0x9598()
		{
			var __0x9390 = EngineConfig.TextBlock.FindChild( nameof( StoresWindow ) );
			if( __0x9390 != null )
			{
				var __0x9391 = __0x9390.FindChild( "ContentBrowser" );
				if( __0x9391 != null )
				{
					ContentBrowser1.Options.Load( __0x9391 );
					__0x9596();
				}

				if( __0x9390.AttributeExists( "Store" ) )
				{
					var __0x9392 = __0x9390.GetAttribute( "Store" );
					__0x9356 = StoreManager.Stores.Find( __0x9637 => __0x9637.Name == __0x9392 );
				}

				var __0x9393 = __0x9390.FindChild( "Filter" );
				if( __0x9393 != null )
					__0x9367.Load( __0x9393 );

				__0x9604();
			}
		}

		void __0x9599()
		{
			var __0x9394 = EngineConfig.TextBlock;

			var __0x9395 = __0x9394.FindChild( nameof( StoresWindow ) );
			if( __0x9395 != null )
				__0x9394.DeleteChild( __0x9395 );

			var __0x9396 = __0x9394.AddChild( nameof( StoresWindow ) );
			var __0x9397 = __0x9396.AddChild( "ContentBrowser" );
			ContentBrowser1.Options.Save( __0x9397 );

			if( __0x9356 != null )
				__0x9396.SetAttribute( "Store", __0x9356.Name );

			var __0x9398 = __0x9396.AddChild( "Filter" );
			__0x9367.Save( __0x9398 );
		}

		void __0x9600()
		{
			var __0x9399 = __0x9555.Parent.ClientSize;
			__0x9555.Location = new Point( 0, __0x9553.Height );
			__0x9555.Size = new Size( __0x9399.Width, __0x9399.Height - __0x9553.Height );
		}

		private void __0x9601( object __0x9638, LayoutEventArgs __0x9639 )
		{
			int __0x9400 = __0x9553.DisplayRectangle.Width;

			foreach( ToolStripItem __0x9566 in __0x9553.Items )
			{
				if( !( __0x9566 == __0x9560 ) )
				{
					__0x9400 -= __0x9566.Width;
					__0x9400 -= __0x9566.Margin.Horizontal;
				}
			}

			__0x9560.Width = Math.Max( 0, __0x9400 - __0x9560.Margin.Horizontal - 1 );
		}

		private void __0x9602( object __0x9640, EventArgs __0x9641 )
		{
			__0x9600();
		}

		private void __0x9603( object __0x9642, EventArgs __0x9643 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			__0x9600();

			var __0x9401 = EngineApp.GetSystemTime();

			if( __0x9358 != 0 && __0x9401 > __0x9358 )
			{
				var __0x9402 = __0x9359;
				var __0x9403 = __0x9360;

				__0x9359 = false;
				__0x9360 = false;
				__0x9358 = 0;

				if( __0x9403 )
					__0x9618( false );
				else
					__0x9614( false, __0x9402 );

				
				__0x9366 = 0;
			}
			
			
			
			
			

			if( __0x9366 + 1.0 < __0x9401 )
			{
				__0x9366 = __0x9401;

				PackageManager.GetPackagesInfoByFileArchives( true );
				PackageManager.GetInstalledPackages( true );

				StoreManager.ImageManager.DeleteItemsNotUsedForLongTime();

				try
				{
					__0x9628();
				}
				catch { }

				__0x9631();
			}

			
			{
				List<(string, bool)> __0x9404;
				lock( __0x9364 )
				{
					__0x9404 = new List<(string, bool)>( __0x9364 );
					__0x9364.Clear();
				}
				foreach( var __0x9567 in __0x9404 )
					__0x9623( __0x9567.Item1, __0x9567.Item2 );
			}

			
			if( !string.IsNullOrEmpty( __0x9362 ) )
			{
				foreach( var __0x9568 in __0x9555.GetAllItemsByItemHierarchy( true ) )
				{
					var __0x9405 = __0x9568 as ContentBrowserItem_StoreItem;
					if( __0x9405 != null && __0x9405.packageId == __0x9362 )
					{
						__0x9555.SelectItemsList( new ContentBrowser.Item[] { __0x9568 }, true );

						if( __0x9363 )
							__0x9620( __0x9362, true, true );

						break;
					}
				}

				__0x9362 = null;
				__0x9363 = false;
			}

			if( needOpenOptions )
			{
				needOpenOptions = false;
				__0x9606( null, null );
			}

		}

		void __0x9604()
		{
			__0x9558.Image = __0x9356 != null ? __0x9356.IconScaled : EditorResourcesCache.Selection;
		}

		private void __0x9605( object __0x9644, EventArgs __0x9645 )
		{
			var __0x9406 = new List<KryptonContextMenuItemBase>();

			{
				var __0x9407 = new KryptonContextMenuItem( __0x9609( "All" ), EditorResourcesCache.Selection, delegate ( object __0x9646, EventArgs __0x9647 )
				{
					var __0x9408 = GetSelectedStore();

					__0x9356 = null;

					if( __0x9408 != __0x9356 )
					{
						__0x9604();
						__0x9555.SelectItems( new List<ContentBrowser.Item>() );
						__0x9618( false );
						
					}
				} );
				__0x9407.Checked = __0x9356 == null;
				__0x9406.Add( __0x9407 );
			}

			foreach( var __0x9569 in StoreManager.Stores )
			{
				var __0x9409 = new KryptonContextMenuItem( __0x9569.Name, __0x9569.IconScaled, delegate ( object __0x9648, EventArgs __0x9649 )
				{
					var __0x9410 = GetSelectedStore();

					__0x9356 = (StoreManager.StoreItem)( (KryptonContextMenuItem)__0x9648 ).Tag;

					if( __0x9410 != __0x9356 )
					{
						__0x9604();
						__0x9555.SelectItems( new List<ContentBrowser.Item>() );
						__0x9618( false );
						
					}
				} );
				__0x9409.Checked = GetSelectedStore() == __0x9569;
				__0x9409.Tag = __0x9569;
				__0x9406.Add( __0x9409 );
			}

			
			

			EditorContextMenuWinForms.Show( __0x9406, this, PointToClient( Cursor.Position ) );
		}

		private void __0x9606( object __0x9650, EventArgs __0x9651 )
		{
			var __0x9411 = new ContentBrowserOptionsForm( __0x9555 );

			if( EditorForm.Instance == null )
				__0x9411.ShowDialog();
			else
			{
				EditorForm.Instance.WorkspaceController.BlockAutoHideAndDoAction( this, () =>
				{
					__0x9411.ShowDialog();
				} );
			}
		}

		private void __0x9607( object __0x9652, EventArgs __0x9653 )
		{
			StoreManager.ImageManager.Clear();
			
			__0x9618( true );

			
			
			
		}

		private void __0x9608( object __0x9654, EventArgs __0x9655 )
		{
			__0x9359 = true;
			__0x9360 = true;
			__0x9358 = EngineApp.GetSystemTime() + 1.0;
		}

		static string __0x9609( string __0x9656 )
		{
			return EditorLocalization.Translate( "StoresWindow", __0x9656 );
		}

		void __0x9610()
		{
			__0x9555.ShowContextMenuEvent += delegate ( ContentBrowser __0x9657, ContentBrowser.Item __0x9658, List<KryptonContextMenuItemBase> __0x9659 )
			{
				
				var __0x9412 = __0x9658 as ContentBrowserItem_StoreItem;
				if( __0x9412 != null )
				{
					var __0x9413 = GetPackage( __0x9412.packageId, false );
					if( __0x9413 != null )
					{
						var __0x9414 = __0x9629( __0x9412.packageId );

						
						
						
						

						
						
						
						

						if( __0x9413.CostNumber > 0 && !__0x9414.CanDownload )
						{
							var __0x9415 = new KryptonContextMenuItem( __0x9609( "Buy" ), EditorResourcesCache.Money, delegate ( object __0x9660, EventArgs __0x9661 )
							{
								
								var __0x9416 = __0x9413.Permalink;
								Process.Start( new ProcessStartInfo( __0x9416 ) { UseShellExecute = true } );
							} );
							
							__0x9659.Add( __0x9415 );
						}

						
						

						var __0x9417 = __0x9414.Downloading;
						if( __0x9417 )
						{
							var __0x9418 = new KryptonContextMenuItem( __0x9609( "Cancel Installation" ), EditorResourcesCache.Download, delegate ( object __0x9662, EventArgs __0x9663 )
							{
								__0x9621( __0x9412.packageId );
							} );
							
							__0x9659.Add( __0x9418 );
						}
						else
						{
							var __0x9419 = new KryptonContextMenuItem( __0x9609( "Install" ), EditorResourcesCache.Download, delegate ( object __0x9664, EventArgs __0x9665 )
							{
								__0x9620( __0x9412.packageId, true, true );
							} );
							__0x9419.Enabled = !__0x9414.Installed && ( __0x9414.CanDownload || __0x9414.Downloaded );
							
							__0x9659.Add( __0x9419 );
						}

						{
							var __0x9420 = new KryptonContextMenuItem( __0x9609( "Uninstall" ), EditorResourcesCache.Delete, delegate ( object __0x9666, EventArgs __0x9667 )
							{
								__0x9626( __0x9412.packageId );
							} );
							__0x9420.Enabled = ( __0x9414.Installed || __0x9414.Downloaded ) && !__0x9414.Downloading;
							__0x9659.Add( __0x9420 );
						}

						
						__0x9659.Add( new KryptonContextMenuSeparator() );

						{
							var __0x9421 = "";
							try
							{
								if( !string.IsNullOrEmpty( __0x9413.FullFilePath ) )
								{
									var __0x9422 = PackageManager.ReadPackageArchiveInfo( __0x9413.FullFilePath, out _ );
									if( __0x9422 != null )
									{
										foreach( var __0x9570 in __0x9422.Files )
										{
											var __0x9423 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9570 );
											if( File.Exists( __0x9423 ) )
											{
												var __0x9424 = Path.GetDirectoryName( __0x9423 );
												if( string.IsNullOrEmpty( __0x9421 ) || __0x9424.Length < __0x9421.Length )
													__0x9421 = __0x9424;
											}
										}
									}
								}

								
								
								
								
								
								
								
								
								
								
								
								
								
							}
							catch { }

							var __0x9425 = new KryptonContextMenuItem( __0x9609( "Go to Folder" ), EditorResourcesCache.SelectFolder, delegate ( object __0x9668, EventArgs __0x9669 )
							{
								if( !string.IsNullOrEmpty( __0x9421 ) )
									EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x9421 }, true );
							} );
							__0x9425.Enabled = __0x9414.Installed && !string.IsNullOrEmpty( __0x9421 );
							__0x9659.Add( __0x9425 );
						}

						{
							var __0x9426 = new KryptonContextMenuItem( __0x9609( "View on Website" ), null, delegate ( object __0x9670, EventArgs __0x9671 )
							{
								Process.Start( new ProcessStartInfo( __0x9413.Permalink ) { UseShellExecute = true } );
							} );
							__0x9426.Enabled = !string.IsNullOrEmpty( __0x9413.Permalink );
							__0x9659.Add( __0x9426 );
						}
					}
				}
			};
		}

		void __0x9611()
		{
			__0x9357.Clear();

			var __0x9427 = new List<ContentBrowser.Item>();

			__0x9555.AddImageKey( "Folder_512", Properties.Resources.Folder_512 );
			__0x9555.AddImageKey( "Default_512", Properties.Resources.Default_512 );

			var __0x9428 = new ContentBrowserItem_Virtual( __0x9555, null, "Root" );
			__0x9428.imageKey = "Folder_512";
			__0x9427.Add( __0x9428 );

			foreach( var __0x9571 in __0x9365.Values )
			{
				if( __0x9571.Parent == null )
				{
					var __0x9429 = __0x9571.Name;

					StoreGroupType __0x9430;
					if( !Enum.TryParse( __0x9429, out __0x9430 ) )
						__0x9430 = StoreGroupType.None;

					var __0x9431 = new ContentBrowserItem_StoreGroupItem( __0x9555, __0x9428, __0x9429, __0x9430 );
					__0x9431.imageKey = "Folder_512";
					__0x9431.Tag = __0x9429;
					__0x9428.children.Add( __0x9431 );

					__0x9357[ __0x9429 ] = __0x9431;
				}
			}

			__0x9555.SetData( __0x9427 );
		}

		ContentBrowserItem_StoreGroupItem __0x9612( string __0x9672, bool __0x9673 )
		{
			var __0x9432 = __0x9672;

			next:
			if( __0x9357.TryGetValue( __0x9432, out var item ) )
				return item;

			if( __0x9673 )
			{
				if( __0x9365.TryGetValue( __0x9432, out var categoryItem ) && categoryItem.Parent != null )
				{
					__0x9432 = categoryItem.Parent.Name;
					goto next;
				}
			}

			return null;
		}

		ContentBrowserItem_StoreItem __0x9613( ContentBrowserItem_StoreGroupItem __0x9674, string __0x9675 )
		{
			foreach( var __0x9572 in __0x9674.GetChildren( true ) )
			{
				var __0x9433 = __0x9572 as ContentBrowserItem_StoreItem;
				if( __0x9433 != null && __0x9433.packageId == __0x9675 )
					return __0x9433;
			}
			return null;
		}

		void __0x9614( bool __0x9676, bool __0x9677 )
		{
			var __0x9434 = new ESet<ContentBrowserItem_StoreGroupItem>();

			
			if( __0x9677 )
			{
				foreach( var __0x9573 in __0x9357.Values )
				{
					if( __0x9573.children.Count != 0 )
					{
						__0x9573.DeleteChildren();

						__0x9573.SetText( (string)__0x9573.Tag );

						
						__0x9573.PerformChildrenChanged();
					}
				}
			}

			
			{
				var __0x9435 = __0x9612( "Uncategorized", true );
				if( __0x9435 != null && __0x9435.children.Count != 0 )
				{
					__0x9435.DeleteChildren();

					__0x9434.AddWithCheckAlreadyContained( __0x9435 );
				}
			}

			
			
			


			if( !__0x9676 )
			{
				
				
				
				
				
				
				
				
				

				foreach( var __0x9574 in GetAllPackages( true ) )
				{
					var __0x9436 = GetPackage( __0x9574, false );
					if( __0x9436 != null )
					{
						var __0x9437 = __0x9629( __0x9574 );

						var __0x9438 = false;
						

						var __0x9439 = __0x9436.Categories;
						if( __0x9439 == null )
							__0x9439 = "";
						if( __0x9437 != null && __0x9437.Installed )
						{
							if( !string.IsNullOrEmpty( __0x9439 ) )
								__0x9439 += ", ";
							__0x9439 += "Installed";
						}

						foreach( var __0x9575 in __0x9439.Split( new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries ) )
						{
							var __0x9440 = __0x9575.Trim();

							var __0x9441 = __0x9612( __0x9440, true );
							if( __0x9441 != null )
							{
								if( __0x9613( __0x9441, __0x9574 ) == null )
								{
									var __0x9442 = new ContentBrowserItem_StoreItem( __0x9555, __0x9441, __0x9436.Title, this, __0x9574 );
									__0x9442.imageKey = "Default_512";
									__0x9441.children.Add( __0x9442 );

									__0x9434.AddWithCheckAlreadyContained( __0x9441 );
								}

								if( __0x9440 != "Installed" )
									__0x9438 = true;
								
							}

							
							
							
							
							
							
							

							
							

							
							
							
							
						}

						if( !__0x9438 )
						{
							
							

							var __0x9443 = __0x9612( "Uncategorized", true );

							if( __0x9613( __0x9443, __0x9574 ) == null )
							{
								var __0x9444 = new ContentBrowserItem_StoreItem( __0x9555, __0x9443, __0x9436.Title, this, __0x9574 );
								__0x9444.imageKey = "Default_512";
								__0x9443.children.Add( __0x9444 );

								__0x9434.AddWithCheckAlreadyContained( __0x9443 );
							}

							
						}
					}
				}
			}

			foreach( var __0x9576 in __0x9434 )
			{
				
				{
					var __0x9445 = (string)__0x9576.Tag;
					if( __0x9576.children.Count != 0 )
					{
						
						var __0x9446 = "";
						if( __0x9576.children.Count >= 24 && __0x9576.groupType == StoreGroupType.Models )
							__0x9446 = "+";

						__0x9445 += $" ({__0x9576.children.Count}{__0x9446})";
					}
					__0x9576.SetText( __0x9445 );
				}

				
				CollectionUtility.InsertionSort( __0x9576.children, delegate ( ContentBrowser.Item __0x9678, ContentBrowser.Item __0x9679 )
				{
					var __0x9447 = (ContentBrowserItem_StoreItem)__0x9678;
					var __0x9448 = (ContentBrowserItem_StoreItem)__0x9679;

					var __0x9449 = StoreManager.GetPackageStore( __0x9447.packageId );
					var __0x9450 = StoreManager.GetPackageStore( __0x9448.packageId );

					if( __0x9449 != null && __0x9450 != null )
					{
						var __0x9451 = StoreManager.Stores.IndexOf( __0x9449 );
						var __0x9452 = StoreManager.Stores.IndexOf( __0x9450 );
						if( __0x9451 < __0x9452 )
							return -1;
						if( __0x9451 > __0x9452 )
							return 1;
					}

					return 0;
				} );

				

				
				var __0x9453 = __0x9555.GetListView();
				__0x9453.SetItemsScrollBarPositionReset = false;

				__0x9576.PerformChildrenChanged();

				__0x9453.SetItemsScrollBarPositionReset = true;
			}

			
			if( __0x9677 || __0x9434.Count != 0 )
				__0x9555.UpdateBreadcrumb();
		}

		void __0x9615()
		{
			
		}

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		static bool __0x9616( string __0x9680 )
		{
			if( LoginUtility.GetCurrentLicense( out var email, out _ ) )
			{
				if( LoginUtility.GetRequestedFullLicenseInfo( out var license, out var purchasedProducts, out _, out _ ) )
				{
					if( !string.IsNullOrEmpty( license ) )
						return purchasedProducts.Contains( __0x9680 );
				}
			}
			return false;
		}

		string __0x9617()
		{
			var __0x9454 = __0x9560.Text.Trim().ToLower().Replace( '&', ' ' ).Replace( '\t', ' ' );
			__0x9454 = new string( __0x9454.Where( __0x9681 => !char.IsControl( __0x9681 ) ).ToArray() );
			return __0x9454;
		}

		void __0x9618( bool __0x9682 )
		{
			if( __0x9682 )
			{
				LoginUtility.RequestFullLicenseInfo();
				Thread.Sleep( 500 );
			}

			__0x9614( true, true );

			StoreManager.ClearDownloadedListOfPackages();

			

			var __0x9455 = __0x9617();
			var __0x9456 = __0x9367.Clone();

			foreach( var __0x9577 in StoreManager.Stores )
			{
				if( GetSelectedStore() == __0x9577 || GetSelectedStore() == null )
					__0x9577.Implementation.StartRefreshPackageList( __0x9455, __0x9456 );
				else
					__0x9577.Implementation.StopCurrentTask();
			}
		}

		public static string GetSizeAsString( long size )
		{
			if( size == 0 )
				return "";

			var __0x9457 = size / 1024 / 1024;
			if( __0x9457 >= 1 )
				return __0x9457.ToString() + " MB";
			else
			{
				__0x9457 = size / 1024;
				return __0x9457.ToString() + " KB";
			}
		}

		public static string GetTrianglesVerticesAsString( int count )
		{
			if( count >= 1000000 )
			{
				var __0x9458 = ( (double)count / 1000000 ).ToString( "F1" );
				return __0x9458.Replace( ".0", "" ) + "M";
			}

			if( count >= 1000 )
			{
				var __0x9459 = ( (double)count / 1000 ).ToString( "F1" );
				return __0x9459.Replace( ".0", "" ) + "k";
			}

			return count.ToString();
		}

		string __0x9619( string __0x9683 )
		{
			var __0x9460 = __0x9683.Replace( "-", "" );
			DateTime __0x9461 = DateTime.ParseExact( __0x9460, "yyyyMMdd", CultureInfo.InvariantCulture );
			return __0x9461.ToString( "dd MMMM yyyy", CultureInfo.InvariantCulture );
			
		}

		void __0x9620( string __0x9684, bool __0x9685, bool __0x9686 )
		{
			var __0x9462 = GetPackage( __0x9684, true );
			if( __0x9462 == null )
				return;
			var __0x9463 = __0x9629( __0x9684 );

			
			if( !string.IsNullOrEmpty( __0x9463.downloadingAddress ) )
				return;

			if( __0x9463.CanDownload && !__0x9463.Downloaded )
			{
				if( !string.IsNullOrEmpty( __0x9462.FreeDownload ) )
				{
					__0x9463.downloadingAddress = __0x9462.FreeDownload;

					var __0x9464 = Path.GetFileName( __0x9463.downloadingAddress );
					if( Path.GetExtension( __0x9464 ) != ".neoaxispackage" )
						__0x9464 = $"{__0x9462.Identifier}-{__0x9462.Version}.neoaxispackage";

					__0x9463.downloadingDestinationPath = Path.Combine( PackageManager.PackagesFolder, __0x9464 );
					
				}
				else if( __0x9462.SecureDownload )
				{
					if( !LoginUtility.GetCurrentLicense( out var email, out var hash ) )
						return;

					var __0x9465 = __0x9462.Identifier;
					var __0x9466 = __0x9462.Version;

					var __0x9467 = Convert.ToBase64String( Encoding.UTF8.GetBytes( email ) ).Replace( "=", "" );
					var __0x9468 = Convert.ToBase64String( Encoding.UTF8.GetBytes( hash ) ).Replace( "=", "" );
					var __0x9469 = Convert.ToBase64String( Encoding.UTF8.GetBytes( __0x9465 ) ).Replace( "=", "" );
					var __0x9470 = Convert.ToBase64String( Encoding.UTF8.GetBytes( "download" ) ).Replace( "=", "" );
					

					__0x9463.downloadingAddress = $@"https://store.neoaxis.com/api/secure_download?email={__0x9467}&hash={__0x9468}&product={__0x9469}&action={__0x9470}";

					var __0x9471 = $"{__0x9465}-{__0x9466}.neoaxispackage";
					__0x9463.downloadingDestinationPath = Path.Combine( PackageManager.PackagesFolder, __0x9471 );
				}

				__0x9463.downloadProgress = 0;
				__0x9463.downloadingInstallAfterDownload = __0x9685;

				Thread __0x9472 = new Thread( __0x9622 );
				__0x9472.Start( (__0x9684, __0x9686, __0x9462) );
			}
			else if( __0x9463.Downloaded && !__0x9463.Installed )
				__0x9623( __0x9684, __0x9686 );
		}

		void __0x9621( string __0x9687 )
		{
			var __0x9473 = __0x9629( __0x9687 );

			__0x9473.downloadingClient?.CancelAsync();
			
			

			__0x9473.downloadingAddress = "";
			
			__0x9473.downloadProgress = 0;
			__0x9473.downloadingInstallAfterDownload = false;
			__0x9473.downloadingClient = null;
			
		}

		public class ThreadDownloadData
		{
			public PackageManager.PackageInfo Package;
			public PackageState State;
			public bool Cancelled;
			public Exception Error;
		}

		void __0x9622( object __0x9688 )
		{
			var (packageId, openAfterInstall, package) = ((string, bool, PackageManager.PackageInfo))__0x9688;
			var __0x9474 = __0x9629( packageId );

			var __0x9475 = new ThreadDownloadData();
			__0x9475.Package = package;
			__0x9475.State = __0x9474;

			try
			{
				package.Store?.Implementation?.ThreadDownloadBody( __0x9475 );
			}
			catch( Exception e )
			{
				if( !e.Message.Contains( "A task may only be disposed if it is in a completion state (RanToCompletion, Faulted or Canceled)." ) )
					Log.Warning( e.Message );

				__0x9475.Error = e;

				return;
			}
			finally
			{
				try
				{
					if( !__0x9475.Cancelled )
					{
						if( File.Exists( __0x9474.downloadingDestinationPath ) && new FileInfo( __0x9474.downloadingDestinationPath ).Length == 0 )
						{
							File.Delete( __0x9474.downloadingDestinationPath );
							__0x9475.Cancelled = true;
						}
					}
					if( !__0x9475.Cancelled && !File.Exists( __0x9474.downloadingDestinationPath ) )
						__0x9475.Cancelled = true;

					if( __0x9475.Cancelled || __0x9475.Error != null )
					{
						if( File.Exists( __0x9474.downloadingDestinationPath ) )
							File.Delete( __0x9474.downloadingDestinationPath );
					}
				}
				catch { }

				if( __0x9475.Error != null && !__0x9475.Cancelled )
					Log.Warning( ( __0x9475.Error.InnerException ?? __0x9475.Error ).Message );

				var __0x9476 = __0x9474.downloadingInstallAfterDownload;

				__0x9474.downloadingAddress = "";
				__0x9474.downloadingDestinationPath = "";
				__0x9474.downloadProgress = 0;
				__0x9474.downloadingInstallAfterDownload = false;
				__0x9474.downloadingClient = null;
				

				
				if( __0x9476 && !__0x9475.Cancelled )
				{
					lock( __0x9364 )
						__0x9364.Add( (packageId, openAfterInstall) );
				}
			}

			if( !__0x9475.Cancelled )
			{
				if( __0x9475.Error != null )
					ScreenNotifications.Show( EditorLocalization.Translate( "General", "Error downloading the package." ), true );
				else
					ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully downloaded." ) );
			}
		}

		void __0x9623( string __0x9689, bool __0x9690 )
		{
			var __0x9477 = GetPackage( __0x9689, true );
			if( __0x9477 == null )
				return;

			var __0x9478 = PackageManager.ReadPackageArchiveInfo( __0x9477.FullFilePath, out var error );
			if( __0x9478 == null )
			{
				
				__0x9620( __0x9689, true, __0x9690 );
				return;
			}

			var __0x9479 = new ESet<string>();
			foreach( var __0x9578 in __0x9478.Files )
			{
				__0x9479.AddWithCheckAlreadyContained( __0x9578 );
				
				
			}

			var __0x9480 = new List<string>();
			foreach( var __0x9579 in __0x9479 )
			{
				var __0x9481 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9579 );
				if( File.Exists( __0x9481 ) )
					__0x9480.Add( __0x9579 );
			}

			if( __0x9480.Count != 0 )
			{
				var __0x9482 = $"{__0x9480.Count} files already exist. Overwrite?";
				__0x9482 += "\r\n";

				int __0x9483 = 0;
				foreach( var __0x9580 in __0x9479 )
				{
					__0x9482 += "\r\n";
					if( __0x9483 > 10 )
					{
						__0x9482 += "...";
						break;
					}
					__0x9482 += __0x9580;
				}

				if( EditorMessageBox.ShowQuestion( __0x9482, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
					return;
			}

			
			
			

			var __0x9484 = ScreenNotifications.ShowSticky( "Installing the package..." );

			
			PreviewImagesManager.EnableVirtualFileWatcherUpdate = false;

			try
			{
				using( var __0x9485 = ZipFile.OpenRead( __0x9477.FullFilePath ) )
				{
					foreach( var __0x9581 in __0x9485.Entries )
					{
						var __0x9486 = __0x9581.FullName;
						bool __0x9487 = __0x9486[ __0x9486.Length - 1 ] == '/';
						if( __0x9486 != "Package.info" && !__0x9487 )
						{
							var __0x9488 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9486 );

							var __0x9489 = Path.GetDirectoryName( __0x9488 );
							if( !Directory.Exists( __0x9489 ) )
								Directory.CreateDirectory( __0x9489 );

							__0x9581.ExtractToFile( __0x9488, true );
						}
					}
				}

				PackageManager.ChangeInstalledState( __0x9477.Identifier, true );

				
				Thread.Sleep( 1000 );
				VirtualFileWatcher.ProcessEvents();

			}
			catch( Exception e2 )
			{
				EditorMessageBox.ShowWarning( e2.Message );
				return;
			}
			finally
			{
				
				PreviewImagesManager.EnableVirtualFileWatcherUpdate = true;

				__0x9484.Close();
			}


			if( !string.IsNullOrEmpty( __0x9478.AddCSharpFilesToProject ) )
			{
				var __0x9490 = new ESet<string>();

				var __0x9491 = Path.Combine( VirtualFileSystem.Directories.Assets, __0x9478.AddCSharpFilesToProject );
				if( Directory.Exists( __0x9491 ) )
				{
					var __0x9492 = CSharpProjectFileUtility.GetProjectFileCSFiles( false, true );
					var __0x9493 = Directory.GetFiles( __0x9491, "*.cs", SearchOption.AllDirectories );
					foreach( var __0x9582 in __0x9493 )
					{
						if( !__0x9492.Contains( __0x9582 ) )
							__0x9490.AddWithCheckAlreadyContained( __0x9582 );
					}
				}

				
				
				
				
				
				

				if( __0x9490.Count != 0 )
				{
					if( CSharpProjectFileUtility.UpdateProjectFile( __0x9490, null, out var error2 ) )
					{
						if( __0x9490.Count > 1 )
							Log.Info( EditorLocalization.Translate( "General", "Items have been added to the Project.csproj." ) );
						else
							Log.Info( EditorLocalization.Translate( "General", "The item has been added to the Project.csproj." ) );
					}
					else
						Log.Warning( error2 );
				}
			}

			
			
			
			
			
			
			
			
			
			
			
			
			

			if( __0x9478.MustRestart )
				__0x9615();

			
			if( __0x9690 && !string.IsNullOrEmpty( __0x9478.OpenAfterInstall ) )
			{
				var __0x9494 = VirtualPathUtility.GetRealPathByVirtual( __0x9478.OpenAfterInstall );

				if( __0x9478.MustRestart )
				{
					EditorSettingsSerialization.OpenFileAtStartup = __0x9494;
				}
				else
				{
					EditorAPI.SelectFilesOrDirectoriesInMainResourcesWindow( new string[] { __0x9494 }, Directory.Exists( __0x9494 ) );
					EditorAPI.OpenFileAsDocument( __0x9494, true, true );
				}
			}

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully installed." ) );

			
			if( __0x9478.MustRestart )
			{
				var __0x9495 = EditorLocalization.Translate( "General", "To apply changes need restart the editor. Restart?" );
				if( EditorMessageBox.ShowQuestion( __0x9495, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					EditorAPI.BeginRestartApplication();
			}

			
			
			
			
		}

		bool __0x9624( string __0x9691 )
		{
			return !Directory.EnumerateFileSystemEntries( __0x9691 ).Any();
		}

		bool __0x9625( string __0x9692 )
		{
			var __0x9496 = GetPackage( __0x9692, true );
			if( __0x9496 == null )
				return false;

			var __0x9497 = new List<string>();
			bool __0x9498 = false;

			
			if( !string.IsNullOrEmpty( __0x9496.FullFilePath ) && File.Exists( __0x9496.FullFilePath ) )
			{
				

				var __0x9499 = PackageManager.ReadPackageArchiveInfo( __0x9496.FullFilePath, out var error );
				if( __0x9499 == null )
				{
					ScreenNotifications.Show( "Could not read the package info.", true );
					Log.Warning( error );
					return false;
				}

				foreach( var __0x9583 in __0x9499.Files )
				{
					var __0x9500 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9583 );
					if( File.Exists( __0x9500 ) )
						__0x9497.Add( __0x9583 );
				}

				__0x9498 = __0x9499.MustRestart;
			}
			else
			{
				

				foreach( var __0x9584 in __0x9496.GetFiles() )
				{
					var __0x9501 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9584 );
					if( File.Exists( __0x9501 ) )
						__0x9497.Add( __0x9584 );
				}

				
			}

			if( __0x9497.Count == 0 )
				return false;

			var __0x9502 = string.Format( __0x9609( "Uninstall {0}?\n\n{1} files will deleted." ), __0x9496.Title, __0x9497.Count );
			if( EditorMessageBox.ShowQuestion( __0x9502, EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return false;

			var __0x9503 = new List<string>();

			try
			{
				
				try
				{
					var __0x9504 = new List<string>();

					foreach( var __0x9585 in __0x9497 )
					{
						var __0x9505 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9585 );
						if( Path.GetExtension( __0x9505 ).ToLower() == ".cs" )
							__0x9504.Add( VirtualPathUtility.NormalizePath( __0x9505 ) );
					}

					if( __0x9504.Count != 0 )
						CSharpProjectFileUtility.UpdateProjectFile( null, __0x9504, out _ );
				}
				catch { }

				
				foreach( var __0x9586 in __0x9497 )
				{
					var __0x9506 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9586 );

					try
					{
						File.Delete( __0x9506 );
					}
					catch( UnauthorizedAccessException )
					{
						__0x9503.Add( __0x9586 );
					}
					catch( IOException )
					{
						__0x9503.Add( __0x9586 );
					}
				}

				
				{
					var __0x9507 = new ESet<string>();
					foreach( var __0x9587 in __0x9497 )
					{
						var __0x9508 = Path.GetDirectoryName( __0x9587 );
						while( !string.IsNullOrEmpty( __0x9508 ) )
						{
							__0x9507.AddWithCheckAlreadyContained( __0x9508 );
							__0x9508 = Path.GetDirectoryName( __0x9508 );
						}
					}

					var __0x9509 = __0x9507.ToArray();
					CollectionUtility.MergeSort( __0x9509, delegate ( string __0x9693, string __0x9694 )
					{
						var __0x9510 = __0x9693.Split( new char[] { '\\' } ).Length;
						var __0x9511 = __0x9694.Split( new char[] { '\\' } ).Length;
						return __0x9511 - __0x9510;
					} );

					foreach( var __0x9588 in __0x9509 )
					{
						var __0x9512 = Path.Combine( VirtualFileSystem.Directories.Project, __0x9588 );

						if( Directory.Exists( __0x9512 ) && __0x9624( __0x9512 ) )
							Directory.Delete( __0x9512 );
					}
				}

				PackageManager.ChangeInstalledState( __0x9496.Identifier, false );
			}
			catch( Exception e2 )
			{
				EditorMessageBox.ShowWarning( e2.Message );
				return false;
			}

			if( __0x9503.Count != 0 )
				PackageManager.AddFilesToDeletionAtStartup( __0x9503 );

			if( __0x9498 )
				__0x9615();

			ScreenNotifications.Show( EditorLocalization.Translate( "General", "The package has been successfully uninstalled." ) );

			
			
			
			
			
			
			

			return true;
		}

		void __0x9626( string __0x9695 )
		{
			var __0x9513 = GetPackage( __0x9695, true );
			if( __0x9513 == null )
				return;

			bool __0x9514 = PackageManager.IsInstalled( __0x9695, true );

			
			var __0x9515 = false;
			if( __0x9514 )
			{
				if( !__0x9625( __0x9695 ) )
					return;
				__0x9515 = true;
			}

			
			if( !File.Exists( __0x9513.FullFilePath ) )
				return;

			
			if( !__0x9515 )
			{
				var __0x9516 = __0x9609( "Are you sure you want to uninstall \'{0}\'?" );
				var __0x9517 = string.Format( __0x9516, __0x9513.FullFilePath );
				if( EditorMessageBox.ShowQuestion( __0x9517, EMessageBoxButtons.YesNo ) == EDialogResult.No )
					return;
			}

			
			try
			{
				File.Delete( __0x9513.FullFilePath );
			}
			catch( Exception e2 )
			{
				EditorMessageBox.ShowWarning( e2.Message );
				return;
			}
		}

		private void __0x9627()
		{
			if( EditorAPI.ClosingApplication )
			{
				foreach( var __0x9589 in __0x9361.Values.ToArray() )
				{
					try
					{
						__0x9589.downloadingClient?.CancelAsync();
					}
					catch { }
				}
			}
		}

		public void NeedSelectPackage( string packageId, bool install )
		{
			__0x9362 = packageId;
			__0x9363 = install;
		}

		void __0x9628()
		{
#if !DEPLOY
			var __0x9518 = EngineApp.GetSystemTime();

			var __0x9519 = new ESet<ContentBrowser.Item>( __0x9555.GetVisibleItemsByListView() );

			foreach( var __0x9590 in __0x9555.GetAllItemsByItemHierarchy( true ) )
			{
				var __0x9520 = __0x9590 as ContentBrowserItem_StoreItem;
				if( __0x9520 != null )
				{
					if( __0x9519.Contains( __0x9520 ) )
					{
						var __0x9521 = GetPackage( __0x9520.packageId, false );

						if( __0x9521 != null && !string.IsNullOrEmpty( __0x9521.Thumbnail ) )
						{
							var __0x9522 = StoreManager.ImageManager.GetSquareImage( __0x9521.Thumbnail, __0x9518 );
							if( __0x9522 != null )
							{
								var __0x9523 = __0x9629( __0x9520.packageId );

								
								if( __0x9523.Installed )
								{
									__0x9520.stateProgress = 1;
									__0x9520.stateColor = Color.FromArgb( 0, 255, 0 );
								}
								else if( __0x9523.Downloading )
								{
									__0x9520.stateProgress = __0x9523.downloadProgress;
									__0x9520.stateColor = Color.FromArgb( 255, 255, 0 );
								}
								else if( __0x9523.Downloaded )
								{
									__0x9520.stateProgress = 1;
									__0x9520.stateColor = Color.FromArgb( 255, 255, 0 );
								}
								else
								{
									__0x9520.stateProgress = 0;
									__0x9520.stateColor = Color.FromArgb( 0, 0, 0, 0 );
								}

								
								if( __0x9520.createdImage == null || __0x9520.stateProgress != __0x9520.createdImageStateProgress || __0x9520.stateColor != __0x9520.createdImageStateColor )
								{
									__0x9520.createdImage = new Bitmap( __0x9522.Width, __0x9522.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb );
									__0x9520.createdImageStateProgress = __0x9520.stateProgress;
									__0x9520.createdImageStateColor = __0x9520.stateColor;

									using( var __0x9524 = Graphics.FromImage( __0x9520.createdImage ) )
									{
										__0x9524.CompositingMode = CompositingMode.SourceOver;
										__0x9524.DrawImage( __0x9522, 0, 0 );

										if( __0x9520.createdImageStateProgress > 0 && __0x9520.createdImageStateColor.A > 0 )
										{
											using( var __0x9525 = new SolidBrush( __0x9520.createdImageStateColor ) )
											{
												var __0x9526 = __0x9520.createdImage.Size;

												var __0x9527 = (int)( __0x9520.createdImageStateProgress * __0x9526.Width );
												var __0x9528 = (int)( 0.93 * __0x9526.Height );

												__0x9524.FillRectangle( __0x9525, 0, __0x9528, __0x9527, __0x9526.Height - __0x9528 );
											}
										}

										
										var __0x9529 = StoreManager.GetPackageStore( __0x9520.packageId );
										if( __0x9529 != null )
										{
											var __0x9530 = __0x9529.Icon32;
											var __0x9531 = __0x9520.createdImage.Width / 7;
											__0x9524.DrawImage( __0x9530, new System.Drawing.RectangleF( __0x9531 / 6, __0x9531 / 6, __0x9531, __0x9531 ), new System.Drawing.RectangleF( 0, 0, __0x9530.Width, __0x9530.Height ), GraphicsUnit.Pixel );
										}

										
										if( __0x9521.CostNumber > 0 )
										{
											var __0x9532 = Properties.Resources.Money_32;
											var __0x9533 = __0x9520.createdImage.Width / 7;
											__0x9524.DrawImage( __0x9532, new System.Drawing.RectangleF( __0x9520.createdImage.Width - __0x9533, __0x9533 / 6, __0x9533, __0x9533 ), new System.Drawing.RectangleF( 0, 0, __0x9532.Width, __0x9532.Height ), GraphicsUnit.Pixel );
										}
									}

									__0x9520.imageKey = null;
									__0x9520.image = __0x9520.createdImage;

									
									__0x9555.needUpdateImages = true;
								}

								
								__0x9520.createdImageLastUsedTime = __0x9518;
							}
						}
					}
					else
					{
						
						if( __0x9520.createdImage != null && __0x9520.createdImageLastUsedTime + 10 < __0x9518 )
						{
							__0x9520.imageKey = null;
							__0x9520.image = null;
							__0x9520.createdImage?.Dispose();
							__0x9520.createdImage = null;

							__0x9520.imageKey = "Default_512";

							
							__0x9555.needUpdateImages = true;
						}
					}
				}
			}
#endif
		}

		PackageState __0x9629( string __0x9696 )
		{
			PackageState __0x9534 = null;
			lock( __0x9361 )
			{
				if( !__0x9361.TryGetValue( __0x9696, out __0x9534 ) )
				{
					__0x9534 = new PackageState();
					__0x9534.storesWindow = this;
					__0x9534.packageId = __0x9696;
					__0x9361[ __0x9696 ] = __0x9534;
				}
			}
			return __0x9534;
		}

		public PackageManager.PackageInfo GetPackage( string packageId, bool updateDownloadedPackages, bool needDetailedInfo = false )
		{
			PackageManager.PackageInfo __0x9535 = null;

			
			{
				var __0x9536 = PackageManager.GetPackagesInfoByFileArchives( updateDownloadedPackages );
				if( __0x9536.TryGetValue( packageId, out var package ) )
					__0x9535 = package;

				__0x9535?.UpdateDataFromArchive();
			}

			
			

			
			{
				var __0x9537 = StoreManager.GetPackageInfo( packageId, needDetailedInfo );
				if( __0x9537 != null )
				{
					if( __0x9535 != null )
						__0x9535 = PackageManager.PackageInfo.Merge( __0x9537, __0x9535 );
					else
						__0x9535 = __0x9537;
				}
			}

			return __0x9535;
		}

		bool __0x9630( string[] __0x9697, PackageManager.PackageInfo __0x9698 )
		{
			if( __0x9697.Length != 0 )
			{
				foreach( var __0x9591 in __0x9697 )
				{
					if( !__0x9698.Title.ToLower().Contains( __0x9591 ) )
						return false;
				}

				
				
				
				
				
				
				
				
				
				
				
			}

			return true;
		}

		public ESet<string> GetAllPackages( bool updateDownloadedPackages )
		{
			var __0x9538 = new ESet<string>();

			
			
			

			
			foreach( var __0x9592 in StoreManager.GetPackages() )
				__0x9538.AddWithCheckAlreadyContained( __0x9592 );


			

			var __0x9539 = __0x9617();
			var __0x9540 = __0x9539.Split( ' ' );

			foreach( var __0x9593 in PackageManager.GetPackagesInfoByFileArchives( updateDownloadedPackages ).Keys )
			{
				var __0x9541 = GetPackage( __0x9593, false );

				if( __0x9541 != null )
				{
					if( !__0x9630( __0x9540, __0x9541 ) )
						continue;

					if( __0x9356 != null )
					{
						var __0x9542 = __0x9541.Store ?? StoreManager.Stores[ 0 ];
						if( __0x9356 != __0x9542 )
							continue;
					}
				}

				__0x9538.AddWithCheckAlreadyContained( __0x9593 );
			}

			return __0x9538;
		}

		public StoreManager.StoreItem GetSelectedStore()
		{
			var __0x9543 = __0x9356;
			
			
			return __0x9543;
		}

		void __0x9631()
		{
			var __0x9544 = new List<StoreManager.StoreItem>();

			

			var __0x9545 = __0x9555.GetItemsByListView().Where( __0x9699 => __0x9699 is ContentBrowserItem_StoreItem ).Cast<ContentBrowserItem_StoreItem>();
			var __0x9546 = new ESet<ContentBrowser.Item>( __0x9555.GetVisibleItemsByListView() );

			
			for( int __0x9547 = 0; __0x9547 < StoreManager.Stores.Count; __0x9547++ )
			{
				var __0x9548 = StoreManager.Stores[ __0x9547 ];

				
				foreach( var __0x9594 in __0x9545.Reverse() )
				{
					
					var __0x9549 = StoreManager.GetPackageStore( __0x9594.packageId );
					if( __0x9548 == __0x9549 )
					{
						
						if( __0x9546.Contains( __0x9594 ) )
							__0x9544.Add( __0x9548 );

						break;
					}
				}
			}

			lock( StoreManager.needGetNextItemsForStores )
			{
				StoreManager.needGetNextItemsForStores.Clear();
				StoreManager.needGetNextItemsForStores.AddRange( __0x9544 );
			}
		}

		private void __0x9632( object __0x9700, EventArgs __0x9701 )
		{
			

			var __0x9550 = __0x9367.Clone();

			var __0x9551 = new SpecifyParametersForm( "Filters", __0x9550 );
			__0x9551.Size = new Size( __0x9551.Size.Width, (int)( (double)__0x9551.Size.Height * 1.3 ) );

			if( __0x9551.ShowDialog() != DialogResult.OK )
				return;

			if( !__0x9367.Equals( __0x9550 ) )
			{
				__0x9367 = __0x9550;

				__0x9359 = true;
				__0x9360 = true;
				__0x9358 = EngineApp.GetSystemTime();
			}
		}

		[Browsable( false )]
		public StoreManager.FilterSettingsClass FilterSettings
		{
			get { return __0x9367; }
		}

	}
}


namespace NeoAxis.Editor
{
	partial class StoresWindow
	{
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x9552 = null;

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x9552 != null ) )
			{
				__0x9552.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code

		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x9633()
		{
			this.__0x9552 = new System.ComponentModel.Container();
			this.__0x9553 = new NeoAxis.Editor.EngineToolStrip();
			this.__0x9556 = new System.Windows.Forms.ToolStripButton();
			this.__0x9557 = new System.Windows.Forms.ToolStripButton();
			this.__0x9558 = new System.Windows.Forms.ToolStripButton();
			this.__0x9559 = new System.Windows.Forms.ToolStripButton();
			this.__0x9560 = new NeoAxis.Editor.ToolStripTextBoxHost();
			this.__0x9554 = new System.Windows.Forms.Timer( this.__0x9552 );
			this.__0x9555 = new NeoAxis.Editor.ContentBrowser();
			
			this.__0x9553.SuspendLayout();
			this.SuspendLayout();
			
			
			
			this.__0x9553.GripStyle = System.Windows.Forms.ToolStripGripStyle.Hidden;
			this.__0x9553.ImageScalingSize = new System.Drawing.Size( 20, 20 );
			this.__0x9553.Items.AddRange( new System.Windows.Forms.ToolStripItem[] {
			this.__0x9556,
			this.__0x9557,
			this.__0x9558,
			this.__0x9559,
			this.__0x9560} );
			this.__0x9553.Location = new System.Drawing.Point( 0, 0 );
			this.__0x9553.Padding = new System.Windows.Forms.Padding( 1, 1, 1, 1 );
			this.__0x9553.Name = "toolStripForTreeView";
			this.__0x9553.ShowItemToolTips = false;
			this.__0x9553.CanOverflow = false;
			this.__0x9553.AutoSize = false;
			this.__0x9553.Size = new System.Drawing.Size( 511, 26 );
			this.__0x9553.TabIndex = 3;
			this.__0x9553.Text = "toolStrip1";
			
			
			
			this.__0x9556.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9556.Image = global::NeoAxis.Properties.Resources.Options_16;
			this.__0x9556.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9556.Name = "toolStripButtonOptions";
			this.__0x9556.AutoSize = false;
			this.__0x9556.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9556.Text = "Options";
			this.__0x9556.Click += new System.EventHandler( this.__0x9606 );
			
			
			
			this.__0x9557.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9557.Image = global::NeoAxis.Properties.Resources.Refresh_16;
			this.__0x9557.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9557.Name = "toolStripButtonRefresh";
			this.__0x9557.AutoSize = false;
			this.__0x9557.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9557.Text = "Refresh";
			this.__0x9557.Click += new System.EventHandler( this.__0x9607 );
			
			
			
			this.__0x9558.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9558.Image = global::NeoAxis.Properties.Resources.Selection_16;
			this.__0x9558.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9558.Name = "toolStripButtonStores";
			this.__0x9558.AutoSize = false;
			this.__0x9558.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9558.Text = "Stores";
			this.__0x9558.Click += new System.EventHandler( this.__0x9605 );
			
			
			
			this.__0x9559.DisplayStyle = System.Windows.Forms.ToolStripItemDisplayStyle.Image;
			this.__0x9559.Image = global::NeoAxis.Properties.Resources.Filter_32;
			this.__0x9559.ImageScaling = System.Windows.Forms.ToolStripItemImageScaling.None;
			this.__0x9559.Name = "toolStripButtonFilter";
			this.__0x9559.AutoSize = false;
			this.__0x9559.Size = new System.Drawing.Size( 23, 22 );
			this.__0x9559.Text = "Filter";
			this.__0x9559.Click += new System.EventHandler( this.__0x9632 );
			
			
			
			this.__0x9560.Font = new System.Drawing.Font( "Microsoft Sans Serif", 10.2F, System.Drawing.FontStyle.Regular, System.Drawing.GraphicsUnit.Point, ( (byte)( 204 ) ) );
			this.__0x9560.Name = "toolStripButtonSearch";
			this.__0x9560.AutoSize = false;
			this.__0x9560.Size = new System.Drawing.Size( 106, 22 );
			this.__0x9560.Text = "";
			this.__0x9560.ToolTipText = "Search";
			
			
			
			this.__0x9554.Tick += new System.EventHandler( this.__0x9603 );
			
			
			
			this.__0x9555.CanSelectObjectSettings = false;
			this.__0x9555.Dock = System.Windows.Forms.DockStyle.None;
			this.__0x9555.FilteringMode = null;
			this.__0x9555.Location = new System.Drawing.Point( 0, 0 );
			this.__0x9555.Margin = new System.Windows.Forms.Padding( 5, 4, 5, 4 );
			this.__0x9555.Mode = ContentBrowser.ModeEnum.Objects;
			this.__0x9555.MultiSelect = true;
			this.__0x9555.Name = "contentBrowser1";
			this.__0x9555.ReadOnlyHierarchy = false;
			this.__0x9555.Size = new System.Drawing.Size( 416, 596 );
			this.__0x9555.TabIndex = 0;
			this.__0x9555.ThisIsSettingsWindow = false;
			this.__0x9555.TreeViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			this.__0x9555.ListViewBorderDraw = NeoAxis.Editor.BorderSides.Top;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add( this.__0x9553 );
			this.Controls.Add( this.__0x9555 );
			this.Margin = new System.Windows.Forms.Padding( 5, 4, 5, 4 );
			this.Name = "StoresWindow";
			this.Size = new System.Drawing.Size( 416, 596 );
			this.WindowTitle = "Stores";
			this.Load += new System.EventHandler( this.__0x9597 );
			this.__0x9553.ResumeLayout( false );
			this.__0x9553.PerformLayout();
			this.ResumeLayout( false );
			this.PerformLayout();
		}

		#endregion

		private NeoAxis.Editor.EngineToolStrip __0x9553;
		private System.Windows.Forms.Timer __0x9554;
		private ContentBrowser __0x9555;
		
		private System.Windows.Forms.ToolStripButton __0x9556;
		private System.Windows.Forms.ToolStripButton __0x9557;
		private System.Windows.Forms.ToolStripButton __0x9558;
		private System.Windows.Forms.ToolStripButton __0x9559;
		private NeoAxis.Editor.ToolStripTextBoxHost __0x9560;
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Object implemetation of <see cref="TransformTool"/>.
	/// </summary>
	public abstract class TransformToolObject
	{
		object __0x9702;
		

		

		protected TransformToolObject( object controlledObject )
		{
			this.__0x9702 = controlledObject;
		}

		public object ControlledObject { get { return __0x9702; } }
		

		public virtual bool IsAllowMove() { return false; }
		public virtual bool IsAllowRotate() { return false; }
		public virtual bool IsAllowScale() { return false; }

		public abstract Vector3 Position { get; set; }
		public abstract Quaternion Rotation { get; set; }
		public abstract Vector3 Scale { get; set; }

		
		
		
		

		public virtual void OnModifyBegin() { }
		public virtual void OnModifyCommit() { }
		public virtual void OnModifyCancel() { }
		
		
		
	}

	

	/// <summary>
	/// Config for <see cref="TransformTool"/>.
	/// </summary>
	public static class TransformToolConfig
	{
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		[EngineConfig( "TransformTool", "moveObjectsDuringRotation" )]
		public static bool moveObjectsDuringRotation = true;
		[EngineConfig( "TransformTool", "moveObjectsDuringScaling" )]
		public static bool moveObjectsDuringScaling;

		
		
		
		
		
		
		
		
	}

	

	/// <summary>
	/// A tool for editing the transformation of objects.
	/// </summary>
	public partial class TransformTool
	{
		EngineViewportControl __0x9703;

		List<TransformToolObject> __0x9704 = new List<TransformToolObject>();
		ModeEnum __0x9705;
		CoordinateSystemModeEnum __0x9706 = CoordinateSystemModeEnum.World;
		ModeClass[] __0x9707 = new ModeClass[ 6 ];

		bool __0x9708 = true;

		static Cursor __0x9709;
		static Cursor __0x9710;
		static Cursor __0x9711;

		

		/// <summary>
		/// Defines the position in space of an object for <see cref="TransformTool"/>.
		/// </summary>
		public struct TransformOfObject
		{
			public Vector3 position;
			public Quaternion rotation;
			public Vector3 scale;

			public TransformOfObject( Vector3 position, Quaternion rotation, Vector3 scale )
			{
				this.position = position;
				this.rotation = rotation;
				this.scale = scale;
			}
		}

		

		public TransformTool( EngineViewportControl viewportControl )
		{
			this.__0x9703 = viewportControl;
			viewportControl.TransformTool = this;

			__0x9707[ 0 ] = new ModeClass();
			__0x9707[ 1 ] = new __0x10464();
			__0x9707[ 2 ] = new __0x10470();
			__0x9707[ 3 ] = new __0x10467();
			__0x9707[ 4 ] = new __0x10471();
			__0x9707[ 5 ] = new ModeClass();
			foreach( var __0x10380 in __0x9707 )
				__0x10380.owner = this;

			Mode = ModeEnum.None;

			try
			{
				if( __0x9709 == null )
				{
					var __0x9712 = PlatformFunctionality.Get().GetSystemCursorByFileName( @"Base\UI\Cursors\Move.cur" );
					if( __0x9712 != IntPtr.Zero )
						__0x9709 = new Cursor( __0x9712 );
					else
						__0x9709 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.MoveCursor ) );
				}

				if( __0x9710 == null )
				{
					var __0x9713 = PlatformFunctionality.Get().GetSystemCursorByFileName( @"Base\UI\Cursors\Rotate.cur" );
					if( __0x9713 != IntPtr.Zero )
						__0x9710 = new Cursor( __0x9713 );
					else
						__0x9710 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.RotateCursor ) );
				}

				if( __0x9711 == null )
				{
					var __0x9714 = PlatformFunctionality.Get().GetSystemCursorByFileName( @"Base\UI\Cursors\Scale.cur" );
					if( __0x9714 != IntPtr.Zero )
						__0x9711 = new Cursor( __0x9714 );
					else
						__0x9711 = new Cursor( new MemoryStream( NeoAxis.Properties.Resources.ScaleCursor ) );
				}
			}
			catch { }
		}

		

		static double ArrowPixelSize
		{
			get { return (double)ProjectSettings.Get.TransformToolSizeScaled; }
		}

		static double SelectNearPixels
		{
			get { return ArrowPixelSize * .07f; }
		}

		
		
		
		

		

		public enum ModeEnum
		{
			None,
			Position,
			Rotation,
			PositionRotation,
			Scale,
			Undefined
		}

		

		public enum CoordinateSystemModeEnum
		{
			World,
			Local
		}

		

		public class ModeClass
		{
			internal TransformTool owner;

			protected Vector2 modifyStartPos;
			protected bool modify_Prepare;
			protected bool modify_Activated;
			protected Screen cursorTransitionOnScreenBorderScreen;
			protected Vector2 cursorTransitionOnScreenBorderOffset;

			public TransformTool Owner
			{
				get { return owner; }
			}

			
			public EngineViewportControl ViewportControl
			{
				get { return owner.ViewportControl; }
			}
			public Viewport Viewport
			{
				get { return owner.ViewportControl.Viewport; }
			}
			public Viewport.CameraSettingsClass CameraSettings
			{
				get { return owner.__0x9703.Viewport.CameraSettings; }
			}
			public Simple3DRenderer DebugGeometry
			{
				get { return owner.__0x9703.Viewport.Simple3DRenderer; }
			}

			public virtual bool OnKeyDown( KeyEvent e )
			{
				if( e.Key == EKeys.Escape && modify_Prepare )
				{
					OnCancelModify();
					return true;
				}
				return false;
			}

			public virtual bool OnKeyUp( KeyEvent e ) { return false; }

			public virtual bool OnMouseDown( EMouseButtons button )
			{
				if( button == EMouseButtons.Left && Owner.Objects.Count != 0 )
				{
					if( OnTryBeginModify() )
					{
						modify_Prepare = true;
						modifyStartPos = Viewport.MousePosition;
						return true;
					}
				}

				return false;
			}

			public virtual void OnUpdateInitialObjectsTransform() { }

			public virtual bool OnMouseUp( EMouseButtons button )
			{
				if( button == EMouseButtons.Left && modify_Prepare )
				{
					OnCommitModify();
					return true;
				}

				if( button == EMouseButtons.Right && modify_Prepare )
				{
					OnCancelModify();
					return true;
				}

				return false;
			}

			public virtual bool OnMouseDoubleClick( EMouseButtons button ) { return false; }

			public virtual void OnMouseMove( Vector2 mouse )
			{
				if( modify_Prepare && !modify_Activated )
				{
					Vector2 __0x9715 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					Vector2 __0x9716 = ( mouse - modifyStartPos ) * __0x9715;
					if( Math.Abs( __0x9716.X ) >= 3 || Math.Abs( __0x9716.Y ) >= 3 )
					{
						

						ViewportControl.Capture = true;

						modify_Activated = true;
						cursorTransitionOnScreenBorderScreen = Screen.FromPoint( Cursor.Position );
						cursorTransitionOnScreenBorderOffset = Vector2.Zero;

						if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
							Owner.__0x10402();

						Owner.__0x10396();
					}
				}
			}

			public virtual void OnTick( double delta ) { }
			public virtual bool OnIsMouseOverAxisToActivation() { return false; }
			public virtual void OnRender() { }
			public virtual void OnRenderUI() { }

			public bool IsMouseNearLine( Vector3 start, Vector3 end, out Vector2 projectedScreenPointInPixels, out Radian projectedScreenAngle, out double distance )
			{
				projectedScreenPointInPixels = Vector2.Zero;
				projectedScreenAngle = 0;
				distance = 0;

				Vector2 __0x9717 = Viewport.SizeInPixels.ToVector2();
				Vector2 __0x9718 = Viewport.MousePosition * __0x9717;

				Vector2 __0x9719;
				if( !CameraSettings.ProjectToScreenCoordinates( start, out __0x9719 ) )
					return false;
				Vector2 __0x9720;
				if( !CameraSettings.ProjectToScreenCoordinates( end, out __0x9720 ) )
					return false;

				Vector2 __0x9721 = __0x9719 * __0x9717;
				Vector2 __0x9722 = __0x9720 * __0x9717;

				Rectangle __0x9723 = new Rectangle( __0x9721 );
				__0x9723.Add( __0x9722 );
				__0x9723.Expand( SelectNearPixels );

				if( !__0x9723.Contains( __0x9718 ) )
					return false;

				projectedScreenPointInPixels = MathAlgorithms.ProjectPointToLine( __0x9721, __0x9722, __0x9718 );

				
				distance = ( __0x9718 - projectedScreenPointInPixels ).Length();
				if( distance > SelectNearPixels )
					return false;

				Vector2 __0x9724 = __0x9722 - __0x9721;
				projectedScreenAngle = Math.Atan2( __0x9724.Y, __0x9724.X );

				return true;
			}

			public bool IsMouseNearLine( Vector3 start, Vector3 end )
			{
				return IsMouseNearLine( start, end, out _, out _, out _ );
			}

			double __0x10393( Vector2 __0x10439, Vector2 __0x10440, Vector2 __0x10441 )
			{
				return ( __0x10439.X - __0x10441.X ) * ( __0x10440.Y - __0x10441.Y ) - ( __0x10440.X - __0x10441.X ) * ( __0x10439.Y - __0x10441.Y );
			}

			bool __0x10394( Vector2 __0x10442, Vector2 __0x10443, Vector2 __0x10444, Vector2 __0x10445 )
			{
				bool __0x9725 = __0x10393( __0x10442, __0x10443, __0x10444 ) < 0;
				bool __0x9726 = __0x10393( __0x10442, __0x10444, __0x10445 ) < 0;
				bool __0x9727 = __0x10393( __0x10442, __0x10445, __0x10443 ) < 0;
				return ( ( __0x9725 == __0x9726 ) && ( __0x9726 == __0x9727 ) );
			}

			public bool IsMouseOverTriangle( Vector3 p1, Vector3 p2, Vector3 p3 )
			{
				Vector2 __0x9728;
				if( !CameraSettings.ProjectToScreenCoordinates( p1, out __0x9728 ) )
					return false;
				Vector2 __0x9729;
				if( !CameraSettings.ProjectToScreenCoordinates( p2, out __0x9729 ) )
					return false;
				Vector2 __0x9730;
				if( !CameraSettings.ProjectToScreenCoordinates( p3, out __0x9730 ) )
					return false;

				Vector2 __0x9731 = Viewport.MousePosition;
				return __0x10394( __0x9731, __0x9728, __0x9729, __0x9730 );
			}

			public double GetSize()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				return DebugGeometry.GetThicknessByPixelSize( Owner.__0x10395(), ArrowPixelSize );
			}

			protected virtual bool OnTryBeginModify() { return false; }

			protected virtual void OnCommitModify()
			{
				bool __0x9732 = modify_Activated;

				if( modify_Activated )
					ViewportControl.Capture = false;

				modify_Activated = false;
				modify_Prepare = false;

				if( __0x9732 )
					Owner.__0x10397();
			}

			internal protected virtual void OnCancelModify()
			{
				bool __0x9733 = modify_Activated;

				if( modify_Activated )
					ViewportControl.Capture = false;

				modify_Activated = false;
				modify_Prepare = false;

				if( __0x9733 )
					Owner.__0x10398();
			}

			public bool Modify_Activated
			{
				get { return modify_Activated; }
			}

			internal protected virtual bool OnMouseOverAxis() { return false; }

			protected void UpdateCursorTransitionOnScreenBorder()
			{
				System.Drawing.Point __0x9734 = Cursor.Position;
				Vector2I __0x9735 = new Vector2I( __0x9734.X, __0x9734.Y );

				System.Drawing.Rectangle __0x9736 = cursorTransitionOnScreenBorderScreen.Bounds;
				RectangleI __0x9737 = new RectangleI( __0x9736.Left, __0x9736.Top, __0x9736.Right, __0x9736.Bottom );

				if( __0x9735.X < __0x9737.Left + 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9737.Right - 6, __0x9735.Y );
					cursorTransitionOnScreenBorderOffset -= new Vector2( __0x9737.Size.X, 0 );
				}
				if( __0x9735.X > __0x9737.Right - 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9737.Left + 6, __0x9735.Y );
					cursorTransitionOnScreenBorderOffset += new Vector2( __0x9737.Size.X, 0 );
				}
				if( __0x9735.Y < __0x9737.Top + 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9735.X, __0x9737.Bottom - 6 );
					cursorTransitionOnScreenBorderOffset -= new Vector2( 0, __0x9737.Size.Y );
				}
				if( __0x9735.Y > __0x9737.Bottom - 3 )
				{
					Cursor.Position = new System.Drawing.Point( __0x9735.X, __0x9737.Top + 6 );
					cursorTransitionOnScreenBorderOffset += new Vector2( 0, __0x9737.Size.Y );
				}
			}

			protected double GetLineWorldThickness( Vector3 position )
			{
				return DebugGeometry.GetThicknessByPixelSize( position, ProjectSettings.Get.TransformToolLineThicknessScaled );
			}

			
			
			
			
			
			
			
			

			
			
			
			
			

			
			
			
			
			
			
			
			
			
			

			protected void AddLine( Vector3 start, Vector3 end, double thickness, double drawShadowsFactor )
			{
				
				
				

				if( thickness != 0 )
				{
					

					Vector3 __0x9738 = start;
					Vector3 __0x9739 = end;
					double __0x9740 = thickness;
					if( drawShadowsFactor != 0 )
					{
						

						double __0x9741 = ( end - start ).Length();
						__0x9741 -= __0x9740;
						
						__0x9740 *= 2.7 * drawShadowsFactor;
															  
															  

						var __0x9742 = ( end + start ) / 2;
						__0x9738 = __0x9742 + ( start - __0x9742 ).GetNormalize() * __0x9741 / 2;
						__0x9739 = __0x9742 + ( end - __0x9742 ).GetNormalize() * __0x9741 / 2;
					}

					Viewport.Simple3DRenderer.AddLine( __0x9738, __0x9739, __0x9740 );
				}
				else
					Viewport.Simple3DRenderer.AddLine( start, end );
			}

			protected void AddCone( Vector3 from, Vector3 to, double radius, double lineThickness, double drawShadowsFactor )
			{
				Vector3 __0x9743 = from;
				Vector3 __0x9744 = to;
				double __0x9745 = radius;
				if( drawShadowsFactor != 0 )
				{
					Vector3 __0x9746 = ( __0x9744 - __0x9743 ).GetNormalize();
					__0x9743 -= __0x9746 * lineThickness * 0.4 * drawShadowsFactor;
					__0x9744 += __0x9746 * lineThickness * 3 * drawShadowsFactor;
					__0x9745 += lineThickness * 1.5f * drawShadowsFactor;
				}

				double __0x9747 = ( __0x9744 - __0x9743 ).Length();
				Matrix4 __0x9748 = new Matrix4( Quaternion.FromDirectionZAxisUp( __0x9744 - __0x9743 ).ToMatrix3(), __0x9743 );
				DebugGeometry.AddCone( __0x9748, 0, SimpleMeshGenerator.ConeOrigin.Bottom, __0x9745, __0x9747, 32, 32, true );

				

				
				
				
				

				
				

				
				
				

				
				
				

				
			}

			protected void AddSphere( Sphere sphere, double lineThickness, double drawShadowsFactor )
			{
				double __0x9749 = sphere.Radius;
				if( drawShadowsFactor != 0 )
					__0x9749 += lineThickness * drawShadowsFactor;

				DebugGeometry.AddSphere( sphere.Origin, __0x9749, 32, true );

				
				
				

				
				
			}

			protected void AddPolygonalChain( Vector3[] points, double radius, double drawShadowsFactor )
			{
				if( points.Length < 2 )
					return;

				double __0x9750 = radius;
				if( drawShadowsFactor != 0 )
					__0x9750 *= 2.5 * drawShadowsFactor;

				Vector3 __0x9751 = Vector3.Zero;
				foreach( Vector3 __0x10381 in points )
					__0x9751 += __0x10381;
				__0x9751 /= points.Length;

				Vector3[] __0x9752 = new Vector3[ points.Length ];
				for( int __0x9753 = 0; __0x9753 < points.Length; __0x9753++ )
					__0x9752[ __0x9753 ] = points[ __0x9753 ] - __0x9751;

				Vector3[] __0x9754;
				int[] __0x9755;
				SimpleMeshGenerator.GeneratePolygonalChain( __0x9752, __0x9750, out __0x9754, out __0x9755 );

				Matrix4 __0x9756 = Matrix4.FromTranslate( __0x9751 );
				DebugGeometry.AddTriangles( __0x9754, __0x9755, __0x9756, false, true );

				
				
				
				
				
				
			}

			public double GetFontSize()
			{
				double __0x9757 = 14.0;
				if( SystemSettings.CurrentPlatform == SystemSettings.Platform.Windows )
				{
					try
					{
						__0x9757 *= DpiHelper.Default.DpiScaleFactor;
					}
					catch { }
				}
				__0x9757 = (int)__0x9757;

				var __0x9758 = ViewportControl.Viewport.CanvasRenderer;

				int __0x9759 = __0x9758.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
				float __0x9760 = (float)__0x9757 / (float)__0x9759;
				float __0x9761 = __0x9760;

				return __0x9761;
			}

			protected void AddTextWithShadow( CanvasRenderer renderer, string text, Vector2 position, EHorizontalAlignment horizontalAlign,
				EVerticalAlignment verticalAlign, ColorValue color, double shadowOffsetInPixels )
			{
				Vector2 __0x9762 = shadowOffsetInPixels / Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
				renderer.AddText( null, GetFontSize(), text, position + __0x9762, horizontalAlign, verticalAlign, new ColorValue( 0, 0, 0, color.Alpha / 2.5f ) );
				renderer.AddText( null, GetFontSize(), text, position, horizontalAlign, verticalAlign, color );
			}
		}

		

		public EngineViewportControl ViewportControl
		{
			get { return __0x9703; }
		}

		public ModeEnum Mode
		{
			get { return __0x9705; }
			set
			{
				if( Modifying )
					return;
				if( __0x9705 == value )
					return;
				__0x9705 = value;

				ModeChanged?.Invoke( this, new EventArgs() );
			}
		}

		public CoordinateSystemModeEnum CoordinateSystemMode
		{
			get { return __0x9706; }
			set
			{
				if( __0x9706 == value )
					return;
				__0x9706 = value;

				
				ModeChanged?.Invoke( this, new EventArgs() );
			}
		}

		
		public event EventHandler ModeChanged;

		public List<TransformToolObject> Objects
		{
			get { return __0x9704; }
		}

		
		
		public void PerformKeyDown( KeyEvent e, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9707[ (int)__0x9705 ].OnKeyDown( e ) )
				handled = true;
		}

		
		public void PerformKeyUp( KeyEvent e, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9707[ (int)__0x9705 ].OnKeyUp( e ) )
				handled = true;
		}

		public void PerformMouseDown( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9707[ (int)__0x9705 ].OnMouseDown( button ) )
				handled = true;
		}

		public void PerformUpdateInitialObjectsTransform()
		{
			if( !Active )
				return;
			__0x9707[ (int)__0x9705 ].OnUpdateInitialObjectsTransform();
		}

		public void PerformMouseUp( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9707[ (int)__0x9705 ].OnMouseUp( button ) )
				handled = true;
		}

		public void PerformMouseDoubleClick( EMouseButtons button, ref bool handled )
		{
			if( !Active )
				return;
			if( __0x9707[ (int)__0x9705 ].OnMouseDoubleClick( button ) )
				handled = true;
		}

		public void PerformMouseMove( Vector2 mouse )
		{
			if( Active )
				__0x9707[ (int)__0x9705 ].OnMouseMove( mouse );
		}

		public void PerformTick( double delta )
		{
			if( Active )
				__0x9707[ (int)__0x9705 ].OnTick( delta );
		}

		public bool IsMouseOverAxisToActivation()
		{
			if( Active )
				return __0x9707[ (int)__0x9705 ].OnIsMouseOverAxisToActivation();
			return false;
		}

		public void PerformRender()
		{
			if( Active )
				__0x9707[ (int)__0x9705 ].OnRender();
		}

		public void PerformOnRenderUI()
		{
			if( Active )
				__0x9707[ (int)__0x9705 ].OnRenderUI();
		}

		Vector3 __0x10395()
		{
			Trace.Assert( Objects.Count != 0 );
			Vector3 __0x9763 = Vector3.Zero;
			foreach( TransformToolObject __0x10382 in Objects )
				__0x9763 += __0x10382.Position;
			__0x9763 = __0x9763 / (double)Objects.Count;

			
			Plane __0x9764 = __0x9703.Viewport.CameraSettings.Frustum.Planes[ 0 ];
			double __0x9765 = __0x9764.GetDistance( __0x9763 );
			if( __0x9765 > 0 && __0x9765 < .1f )
				__0x9763 += __0x9764.Normal * ( .1f - __0x9765 );

			return __0x9763;
		}

		
		
		

		
		
		
		
		
		
		
		

		public delegate void ChangeMofidyStateDelegate( TransformTool __0x10446 );
		public event ChangeMofidyStateDelegate ModifyBegin;
		public event ChangeMofidyStateDelegate ModifyCommit;
		public event ChangeMofidyStateDelegate ModifyCancel;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyBegin;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyCommit;
		public static event ChangeMofidyStateDelegate AllInstances_ModifyCancel;

		void __0x10396()
		{
			foreach( TransformToolObject __0x10383 in Objects )
				__0x10383.OnModifyBegin();

			ModifyBegin?.Invoke( this );
			AllInstances_ModifyBegin?.Invoke( this );
		}

		void __0x10397()
		{
			foreach( TransformToolObject __0x10384 in Objects )
				__0x10384.OnModifyCommit();

			ModifyCommit?.Invoke( this );
			AllInstances_ModifyCommit?.Invoke( this );
		}

		void __0x10398()
		{
			foreach( TransformToolObject __0x10385 in Objects )
				__0x10385.OnModifyCancel();

			ModifyCancel?.Invoke( this );
			AllInstances_ModifyCancel?.Invoke( this );
		}

		double __0x10399()
		{
			if( __0x9703.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditorStepMovement;
			else
				return 0;
			
		}

		Degree __0x10400()
		{
			if( __0x9703.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditorStepRotation;
			else
				return 0;
			
		}

		double __0x10401()
		{
			if( __0x9703.Viewport.IsKeyPressed( EKeys.Control ) )
				return ProjectSettings.Get.SceneEditorStepScaling;
			else
				return 0;
			
		}

		public delegate void CloneAndSelectObjectsDelegate();
		public event CloneAndSelectObjectsDelegate CloneAndSelectObjects;

		void __0x10402()
		{
			if( CloneAndSelectObjects != null )
				CloneAndSelectObjects();
		}

		bool __0x10403()
		{
			foreach( TransformToolObject __0x10386 in Objects )
				if( __0x10386.IsAllowMove() )
					return true;
			return false;
		}

		bool __0x10404()
		{
			foreach( TransformToolObject __0x10387 in Objects )
				if( __0x10387.IsAllowRotate() )
					return true;
			return false;
		}

		bool __0x10405()
		{
			foreach( TransformToolObject __0x10388 in Objects )
				if( __0x10388.IsAllowScale() )
					return true;
			return false;
		}

		

		public bool Active
		{
			get { return __0x9708; }
			set { __0x9708 = value; }
		}

		public bool Modifying
		{
			get
			{
				foreach( ModeClass __0x10389 in __0x9707 )
				{
					if( __0x10389.Modify_Activated )
						return true;
				}
				return false;
			}
		}

		public void DoCancelModify()
		{
			if( __0x9707[ (int)__0x9705 ].Modify_Activated )
				__0x9707[ (int)__0x9705 ].OnCancelModify();
		}

		protected virtual void OnPositionModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 positionOffset )
		{
			for( int __0x9766 = 0; __0x9766 < Objects.Count; __0x9766++ )
			{
				TransformOfObject __0x9767 = initialObjectsTransform[ __0x9766 ];
				Objects[ __0x9766 ].Position = __0x9767.position + positionOffset;
				Objects[ __0x9766 ].Rotation = __0x9767.rotation;
			}
		}

		protected virtual void OnRotationModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 modifyPosition, Quaternion rotationOffset )
		{
			for( int __0x9768 = 0; __0x9768 < Objects.Count; __0x9768++ )
			{
				TransformOfObject __0x9769 = initialObjectsTransform[ __0x9768 ];
				if( TransformToolConfig.moveObjectsDuringRotation )
				{
					Vector3 __0x9770 = __0x9769.position - modifyPosition;
					Objects[ __0x9768 ].Position = modifyPosition + __0x9770 * rotationOffset;
				}
				Objects[ __0x9768 ].Rotation = rotationOffset * __0x9769.rotation;
			}
		}

		protected virtual void OnScaleModeUpdateObjects( TransformOfObject[] initialObjectsTransform, Vector3 modifyPosition, Vector3 scaleOffset )
		{
			for( int __0x9771 = 0; __0x9771 < Objects.Count; __0x9771++ )
			{
				if( TransformToolConfig.moveObjectsDuringScaling )
				{
					Vector3 __0x9772 = initialObjectsTransform[ __0x9771 ].position - modifyPosition;
					Objects[ __0x9771 ].Position = modifyPosition + __0x9772 * scaleOffset;
				}
				Objects[ __0x9771 ].Scale = initialObjectsTransform[ __0x9771 ].scale * scaleOffset;
			}
		}

		public bool MouseOverAxis
		{
			get { return __0x9707[ (int)__0x9705 ].OnMouseOverAxis(); }
		}

		bool SceneMode2D
		{
			get
			{
				var __0x9773 = __0x9703.Viewport.AttachedScene;
				if( __0x9773 != null )
					return __0x9773.Mode.Value == Component_Scene.ModeEnum._2D;
				return false;
			}
		}

		
		
		

		
		
		
		
		
		
		

	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10464 : ModeClass
		{
			Vector3 __0x9774;
			Vector2 __0x9775;
			TransformOfObject[] __0x9776;
			__0x10465 __0x9777;
			string __0x9778 = "";

			

			struct __0x10465
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10465( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			

			struct __0x10466
			{
				public enum ItemType
				{
					Line,
					Cone
				}
				public ItemType type;
				public Vector3 start;
				public Vector3 end;
				public ColorValue color;
				public double coneArrowSize;

				public __0x10466( ItemType type, Vector3 start, Vector3 end, ColorValue color, double coneArrowSize )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = coneArrowSize;
				}

				public __0x10466( ItemType type, Vector3 start, Vector3 end, ColorValue color )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = 0;
				}
			}

			

			Quaternion __0x10406()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
						return Owner.Objects[ 0 ].Rotation;
				}
				return Quaternion.Identity;
			}

			__0x10465 __0x10407()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9779 = Owner.__0x10395();
				double __0x9780 = GetSize();

				if( __0x9780 == 0 )
					return new __0x10465( false, false, false );

				Quaternion __0x9781 = __0x10406();

				bool __0x9782;
				{
					Vector3 __0x9783 = __0x9779 + __0x9781 * new Vector3( __0x9780, 0, 0 );
					Vector3 __0x9784 = __0x9779 - __0x9781 * new Vector3( __0x9780, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9782 = __0x10409( __0x9783 ) < __0x10409( __0x9784 );
					else
						__0x9782 = true;
				}
				bool __0x9785;
				{
					Vector3 __0x9786 = __0x9779 + __0x9781 * new Vector3( 0, __0x9780, 0 );
					Vector3 __0x9787 = __0x9779 - __0x9781 * new Vector3( 0, __0x9780, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9785 = __0x10409( __0x9786 ) < __0x10409( __0x9787 );
					else
						__0x9785 = true;
				}
				bool __0x9788;
				{
					Vector3 __0x9789 = __0x9779 + __0x9781 * new Vector3( 0, 0, __0x9780 );
					Vector3 __0x9790 = __0x9779 - __0x9781 * new Vector3( 0, 0, __0x9780 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9788 = __0x10409( __0x9789 ) < __0x10409( __0x9790 );
					else
						__0x9788 = true;
				}
				double __0x9791 = __0x9782 ? __0x9780 : -__0x9780;
				double __0x9792 = __0x9785 ? __0x9780 : -__0x9780;
				double __0x9793 = __0x9788 ? __0x9780 : -__0x9780;

				
				Vector3 __0x9794 = __0x9779 + __0x9781 * new Vector3( __0x9791 / 2, 0, 0 );
				Vector3 __0x9795 = __0x9779 + __0x9781 * new Vector3( 0, __0x9792 / 2, 0 );
				Vector3 __0x9796 = __0x9779 + __0x9781 * new Vector3( 0, 0, __0x9793 / 2 );
				Vector3 __0x9797 = __0x9779 + __0x9781 * new Vector3( __0x9791 / 2, __0x9792 / 2, 0 );
				Vector3 __0x9798 = __0x9779 + __0x9781 * new Vector3( __0x9791 / 2, 0, __0x9793 / 2 );
				Vector3 __0x9799 = __0x9779 + __0x9781 * new Vector3( 0, __0x9792 / 2, __0x9793 / 2 );
				
				if( IsMouseOverTriangle( __0x9779, __0x9794, __0x9797 ) || IsMouseOverTriangle( __0x9797, __0x9795, __0x9779 ) )
					return new __0x10465( true, true, false );
				if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					
					if( IsMouseOverTriangle( __0x9779, __0x9794, __0x9798 ) || IsMouseOverTriangle( __0x9798, __0x9796, __0x9779 ) )
						return new __0x10465( true, false, true );
					
					if( IsMouseOverTriangle( __0x9779, __0x9795, __0x9799 ) || IsMouseOverTriangle( __0x9799, __0x9796, __0x9779 ) )
						return new __0x10465( false, true, true );
				}

				{
					double __0x9800 = double.MaxValue;
					__0x10465 __0x9801 = new __0x10465( false, false, false );

					double __0x9802;

					
					if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( __0x9780 / 5, 0, 0 ), __0x9779 + __0x9781 * new Vector3( __0x9780, 0, 0 ), out _, out _, out __0x9802 ) )
					{
						if( __0x9802 < __0x9800 )
						{
							__0x9800 = __0x9802;
							__0x9801 = new __0x10465( true, false, false );
						}
					}
					if( !__0x9782 )
					{
						if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( -__0x9780 / 5, 0, 0 ), __0x9779 + __0x9781 * new Vector3( -__0x9780, 0, 0 ), out _, out _, out __0x9802 ) )
						{
							if( __0x9802 < __0x9800 )
							{
								__0x9800 = __0x9802;
								__0x9801 = new __0x10465( true, false, false );
							}
						}
					}

					
					if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( 0, __0x9780 / 5, 0 ), __0x9779 + __0x9781 * new Vector3( 0, __0x9780, 0 ), out _, out _, out __0x9802 ) )
					{
						if( __0x9802 < __0x9800 )
						{
							__0x9800 = __0x9802;
							__0x9801 = new __0x10465( false, true, false );
						}
					}

					if( !__0x9785 )
					{
						if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( 0, -__0x9780 / 5, 0 ), __0x9779 + __0x9781 * new Vector3( 0, -__0x9780, 0 ), out _, out _, out __0x9802 ) )
						{
							if( __0x9802 < __0x9800 )
							{
								__0x9800 = __0x9802;
								__0x9801 = new __0x10465( false, true, false );
							}
						}
					}

					
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( 0, 0, __0x9780 / 5 ), __0x9779 + __0x9781 * new Vector3( 0, 0, __0x9780 ), out _, out _, out __0x9802 ) )
						{
							if( __0x9802 < __0x9800 )
							{
								__0x9800 = __0x9802;
								__0x9801 = new __0x10465( false, false, true );
							}
						}

						if( !__0x9788 )
						{
							if( IsMouseNearLine( __0x9779 + __0x9781 * new Vector3( 0, 0, -__0x9780 / 5 ), __0x9779 + __0x9781 * new Vector3( 0, 0, -__0x9780 ), out _, out _, out __0x9802 ) )
							{
								if( __0x9802 < __0x9800 )
								{
									__0x9800 = __0x9802;
									__0x9801 = new __0x10465( false, false, true );
								}
							}
						}
					}

					if( __0x9801.TrueCount != 0 )
						return __0x9801;
				}


				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				

				return new __0x10465( false, false, false );
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10403() )
					return false;
				__0x10465 __0x9803 = __0x10407();
				return __0x9803.TrueCount != 0;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10403() )
					return false;

				__0x10465 __0x9804 = __0x10407();
				if( __0x9804.TrueCount != 0 )
				{
					__0x9774 = Owner.__0x10395();
					Vector2 __0x9805;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9774, out __0x9805 ) )
					{
						__0x9775 = Viewport.MousePosition - __0x9805;
						__0x9777 = __0x9804;
						__0x9778 = "";
						__0x9776 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9806 = 0; __0x9806 < Owner.Objects.Count; __0x9806++ )
						{
							TransformToolObject __0x9807 = Owner.Objects[ __0x9806 ];
							__0x9776[ __0x9806 ] = new TransformOfObject( __0x9807.Position, __0x9807.Rotation, __0x9807.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9776 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9808 = 0; __0x9808 < Owner.Objects.Count; __0x9808++ )
				{
					TransformToolObject __0x9809 = Owner.Objects[ __0x9808 ];
					__0x9776[ __0x9808 ] = new TransformOfObject( __0x9809.Position, __0x9809.Rotation, __0x9809.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9776 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10408();
				__0x9776 = null;
			}

			void __0x10408()
			{
				if( __0x9776 != null && Owner.Objects.Count == __0x9776.Length )
				{
					for( int __0x9810 = 0; __0x9810 < Owner.Objects.Count; __0x9810++ )
					{
						Owner.Objects[ __0x9810 ].Position = __0x9776[ __0x9810 ].position;
						Owner.Objects[ __0x9810 ].Rotation = __0x9776[ __0x9810 ].rotation;
					}
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !Viewport.MouseRelativeMode )
				{
					Vector2 __0x9811 = Viewport.MousePosition - __0x9775;
					Ray __0x9812 = CameraSettings.GetRayByScreenCoordinates( __0x9811 );

					if( !double.IsNaN( __0x9812.Direction.X ) )
					{
						Quaternion __0x9813 = __0x10406();

						Plane __0x9814 = Plane.FromVectors( __0x9813 * new Vector3( 0, 1, 0 ),
							__0x9813 * new Vector3( 0, 0, 1 ), __0x9774 );
						Plane __0x9815 = Plane.FromVectors( __0x9813 * new Vector3( 1, 0, 0 ),
							__0x9813 * new Vector3( 0, 0, 1 ), __0x9774 );
						Plane __0x9816 = Plane.FromVectors( __0x9813 * new Vector3( 1, 0, 0 ),
							__0x9813 * new Vector3( 0, 1, 0 ), __0x9774 );

						Vector3 __0x9817 = Vector3.Zero;

						if( __0x9777.x && __0x9777.TrueCount == 1 )
						{
							double __0x9818;
							if( __0x9816.Intersects( __0x9812, out __0x9818 ) )
							{
								Vector3 __0x9819 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 1, 0, 0 ), __0x9812.GetPointOnRay( __0x9818 ) );
								__0x9817 += __0x9819 - __0x9774;
							}
						}

						if( __0x9777.y && __0x9777.TrueCount == 1 )
						{
							double __0x9820;
							if( __0x9816.Intersects( __0x9812, out __0x9820 ) )
							{
								Vector3 __0x9821 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 1, 0 ), __0x9812.GetPointOnRay( __0x9820 ) );
								__0x9817 += __0x9821 - __0x9774;
							}
						}

						if( __0x9777.z && __0x9777.TrueCount == 1 )
						{
							Vector3 __0x9822 = CameraSettings.Direction;

							bool __0x9823 = Math.Abs( CameraSettings.Direction.X ) > Math.Abs( CameraSettings.Direction.Y );
							Plane __0x9824 = __0x9823 ? __0x9814 : __0x9815;

							double __0x9825;
							if( __0x9824.Intersects( __0x9812, out __0x9825 ) )
							{
								Vector3 __0x9826 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 0, 1 ), __0x9812.GetPointOnRay( __0x9825 ) );
								__0x9817 += __0x9826 - __0x9774;
							}
						}

						if( __0x9777.x && __0x9777.y )
						{
							double __0x9827;
							if( __0x9816.Intersects( __0x9812, out __0x9827 ) )
							{
								Vector3 __0x9828 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 1, 0, 0 ), __0x9812.GetPointOnRay( __0x9827 ) );
								Vector3 __0x9829 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 1, 0 ), __0x9812.GetPointOnRay( __0x9827 ) );
								__0x9817 += __0x9828 - __0x9774;
								__0x9817 += __0x9829 - __0x9774;
							}
						}

						if( __0x9777.x && __0x9777.z )
						{
							double __0x9830;
							if( __0x9815.Intersects( __0x9812, out __0x9830 ) )
							{
								Vector3 __0x9831 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 1, 0, 0 ), __0x9812.GetPointOnRay( __0x9830 ) );
								Vector3 __0x9832 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 0, 1 ), __0x9812.GetPointOnRay( __0x9830 ) );
								__0x9817 += __0x9831 - __0x9774;
								__0x9817 += __0x9832 - __0x9774;
							}
						}

						if( __0x9777.y && __0x9777.z )
						{
							double __0x9833;
							if( __0x9814.Intersects( __0x9812, out __0x9833 ) )
							{
								Vector3 __0x9834 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 1, 0 ), __0x9812.GetPointOnRay( __0x9833 ) );
								Vector3 __0x9835 = MathAlgorithms.ProjectPointToLine( __0x9774,
									__0x9774 + __0x9813 * new Vector3( 0, 0, 1 ), __0x9812.GetPointOnRay( __0x9833 ) );
								__0x9817 += __0x9834 - __0x9774;
								__0x9817 += __0x9835 - __0x9774;
							}
						}

						
						__0x9817 *= __0x9813.GetInverse();
						double __0x9836 = Owner.__0x10399();
						if( __0x9836 != 0 )
						{
							Vector3 __0x9837 = __0x9817;

							Vector3 __0x9838 = new Vector3( __0x9836, __0x9836, __0x9836 );
							__0x9837 += __0x9838 / 2;
							__0x9837 /= __0x9838;
							__0x9837 = new Vector3I( (int)__0x9837.X, (int)__0x9837.Y,
								(int)__0x9837.Z ).ToVector3();
							__0x9837 *= __0x9838;

							if( __0x9777.x )
								__0x9817.X = __0x9837.X;
							if( __0x9777.y )
								__0x9817.Y = __0x9837.Y;
							if( __0x9777.z )
								__0x9817.Z = __0x9837.Z;
						}
						__0x9817 *= __0x9813;

						
						if( __0x9776 != null && Owner.Objects.Count == __0x9776.Length )
							Owner.OnPositionModeUpdateObjects( __0x9776, __0x9817 );

						__0x9778 = string.Format( "[{0} {1} {2}]", __0x9817.X.ToString( "F2" ), __0x9817.Y.ToString( "F2" ),
							__0x9817.Z.ToString( "F2" ) );
					}
				}
			}

			double __0x10409( Vector3 __0x10447 )
			{
				return ( Viewport.CameraSettings.Position - __0x10447 ).Length();
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10403() )
					return false;

				__0x10465 __0x9839 = new __0x10465( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9839 = __0x10407();
					else
						__0x9839 = __0x9777;
				}

				Vector3 __0x9840 = Owner.__0x10395();
				double __0x9841 = GetLineWorldThickness( __0x9840 );
				double __0x9842 = GetSize();
				if( __0x9842 == 0 )
					return false;

				return __0x9839.TrueCount != 0;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10403() )
					return;

				ColorValue __0x9843 = new ColorValue( 1, 1, 0 );
				ColorValue __0x9844 = new ColorValue( 1, 0, 0 );
				ColorValue __0x9845 = new ColorValue( 0, 1, 0 );
				ColorValue __0x9846 = new ColorValue( 0, 0, 1 );
				ColorValue __0x9847 = new ColorValue( 0, 0, 0, ProjectSettings.Get.TransformToolShadowIntensity );

				__0x10465 __0x9848 = new __0x10465( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9848 = __0x10407();
					else
						__0x9848 = __0x9777;
				}

				Vector3 __0x9849 = Owner.__0x10395();
				double __0x9850 = GetLineWorldThickness( __0x9849 );
				double __0x9851 = GetSize();
				if( __0x9851 == 0 )
					return;

				

				double __0x9852 = __0x9851 / 4.0f;
				Quaternion __0x9853 = __0x10406();

				bool __0x9854;
				{
					Vector3 __0x9855 = __0x9849 + __0x9853 * new Vector3( __0x9851, 0, 0 );
					Vector3 __0x9856 = __0x9849 - __0x9853 * new Vector3( __0x9851, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9854 = __0x10409( __0x9855 ) < __0x10409( __0x9856 );
					else
						__0x9854 = true;
				}
				bool __0x9857;
				{
					Vector3 __0x9858 = __0x9849 + __0x9853 * new Vector3( 0, __0x9851, 0 );
					Vector3 __0x9859 = __0x9849 - __0x9853 * new Vector3( 0, __0x9851, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9857 = __0x10409( __0x9858 ) < __0x10409( __0x9859 );
					else
						__0x9857 = true;
				}
				bool __0x9860;
				{
					Vector3 __0x9861 = __0x9849 + __0x9853 * new Vector3( 0, 0, __0x9851 );
					Vector3 __0x9862 = __0x9849 - __0x9853 * new Vector3( 0, 0, __0x9851 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9860 = __0x10409( __0x9861 ) < __0x10409( __0x9862 );
					else
						__0x9860 = true;
				}

				double __0x9863 = __0x9854 ? __0x9851 : -__0x9851;
				double __0x9864 = __0x9857 ? __0x9851 : -__0x9851;
				double __0x9865 = __0x9860 ? __0x9851 : -__0x9851;

				double __0x9866 = __0x9851 - __0x9850;
				double __0x9867 = __0x9854 ? __0x9866 : -__0x9866;
				double __0x9868 = __0x9857 ? __0x9866 : -__0x9866;
				double __0x9869 = __0x9860 ? __0x9866 : -__0x9866;

				
				{
					List<__0x10466> __0x9870 = new List<__0x10466>( 32 );
					ColorValue __0x9871;

					

					__0x9871 = __0x9848.x ? __0x9843 : __0x9844;
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
						__0x9849 + __0x9853 * new Vector3( __0x9851 / 5, 0, 0 ),
						__0x9849 + __0x9853 * new Vector3( __0x9851 - __0x9852, 0, 0 ),
						__0x9871 ) );
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Cone,
						__0x9849 + __0x9853 * new Vector3( __0x9851 - __0x9852, 0, 0 ),
						__0x9849 + __0x9853 * new Vector3( __0x9851, 0, 0 ),
						__0x9871, __0x9852 / 6 ) );
					if( !__0x9854 )
					{
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( -__0x9851 / 5, 0, 0 ),
							__0x9849 + __0x9853 * new Vector3( -__0x9851, 0, 0 ),
							__0x9871, __0x9850 ) );
					}

					__0x9871 = __0x9848.x && __0x9848.y ? __0x9843 : __0x9844;
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
						__0x9849 + __0x9853 * new Vector3( __0x9863 / 2, 0, 0 ),
						__0x9849 + __0x9853 * new Vector3( __0x9863 / 2, __0x9868 / 2, 0 ),
						__0x9871, __0x9850 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9871 = __0x9848.x && __0x9848.z ? __0x9843 : __0x9844;
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( __0x9863 / 2, 0, 0 ),
							__0x9849 + __0x9853 * new Vector3( __0x9863 / 2, 0, __0x9869 / 2 ),
							__0x9871, __0x9850 ) );
					}

					

					__0x9871 = __0x9848.y ? __0x9843 : __0x9845;
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
						__0x9849 + __0x9853 * new Vector3( 0, __0x9851 / 5, 0 ),
						__0x9849 + __0x9853 * new Vector3( 0, __0x9851 - __0x9852, 0 ),
						__0x9871, __0x9850 ) );
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Cone,
						__0x9849 + __0x9853 * new Vector3( 0, __0x9851 - __0x9852, 0 ),
						__0x9849 + __0x9853 * new Vector3( 0, __0x9851, 0 ),
						__0x9871, __0x9852 / 6 ) );
					if( !__0x9857 )
					{
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( 0, -__0x9851 / 5, 0 ),
							__0x9849 + __0x9853 * new Vector3( 0, -__0x9851, 0 ),
							__0x9871, __0x9850 ) );
					}

					__0x9871 = __0x9848.x && __0x9848.y ? __0x9843 : __0x9845;
					__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
						__0x9849 + __0x9853 * new Vector3( 0, __0x9864 / 2, 0 ),
						__0x9849 + __0x9853 * new Vector3( __0x9867 / 2, __0x9864 / 2, 0 ),
						__0x9871, __0x9850 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9871 = __0x9848.y && __0x9848.z ? __0x9843 : __0x9845;
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( 0, __0x9864 / 2, 0 ),
							__0x9849 + __0x9853 * new Vector3( 0, __0x9864 / 2, __0x9869 / 2 ),
							__0x9871, __0x9850 ) );
					}

					

					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x9871 = __0x9848.z ? __0x9843 : __0x9846;
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9851 / 5 ),
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9851 - __0x9852 ),
							__0x9871, __0x9850 ) );
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Cone,
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9851 - __0x9852 ),
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9851 ),
							__0x9871, __0x9852 / 6 ) );
						if( !__0x9860 )
						{
							__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
								__0x9849 + __0x9853 * new Vector3( 0, 0, -__0x9851 / 5 ),
								__0x9849 + __0x9853 * new Vector3( 0, 0, -__0x9851 ),
								__0x9871, __0x9850 ) );
						}

						__0x9871 = __0x9848.x && __0x9848.z ? __0x9843 : __0x9846;
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9865 / 2 ),
							__0x9849 + __0x9853 * new Vector3( __0x9867 / 2, 0, __0x9865 / 2 ),
							__0x9871, __0x9850 ) );
						__0x9871 = __0x9848.y && __0x9848.z ? __0x9843 : __0x9846;
						__0x9870.Add( new __0x10466( __0x10466.ItemType.Line,
							__0x9849 + __0x9853 * new Vector3( 0, 0, __0x9865 / 2 ),
							__0x9849 + __0x9853 * new Vector3( 0, __0x9868 / 2, __0x9865 / 2 ),
							__0x9871, __0x9850 ) );
					}

					
					CollectionUtility.SelectionSort( __0x9870, delegate ( __0x10466 __0x10448, __0x10466 __0x10449 )
					{
						double __0x9872 = Math.Max( __0x10409( __0x10448.start ), __0x10409( __0x10448.end ) );
						double __0x9873 = Math.Max( __0x10409( __0x10449.start ), __0x10409( __0x10449.end ) );
						if( __0x9872 > __0x9873 )
							return -1;
						if( __0x9872 < __0x9873 )
							return 1;
						return 0;
					} );

					
					for( int __0x9874 = 0; __0x9874 < 5; __0x9874++ )
					{
						bool __0x9875 = __0x9874 <= 3;
						if( __0x9875 && ProjectSettings.Get.TransformToolShadowIntensity == 0 )
							continue;

						var __0x9876 = 0.0;
						if( __0x9875 )
							__0x9876 = ( (double)__0x9874 + 1.0 ) / 4.0;

						
						

						if( __0x9875 )
							DebugGeometry.SetColor( __0x9847 * new ColorValue( 1, 1, 1, 0.25 ), false );
						foreach( __0x10466 __0x10390 in __0x9870 )
						{
							if( !__0x9875 )
								DebugGeometry.SetColor( __0x10390.color, false );
							switch( __0x10390.type )
							{
							case __0x10466.ItemType.Line:
								AddLine( __0x10390.start, __0x10390.end, __0x9850, __0x9876 );
								break;
							case __0x10466.ItemType.Cone:
								AddCone( __0x10390.start, __0x10390.end, __0x10390.coneArrowSize, __0x9850, __0x9876 );
								break;
							}
						}

						
						
					}
				}

				
				if( __0x9848.TrueCount == 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x9877 = new List<Vector3>();
					List<int> __0x9878 = new List<int>();

					Vector3 __0x9879;
					Vector3 __0x9880;

					if( __0x9848.x )
					{
						__0x9879 = Vector3.XAxis;
						__0x9880 = __0x9848.y ? Vector3.YAxis : Vector3.ZAxis;
					}
					else
					{
						__0x9879 = Vector3.YAxis;
						__0x9880 = Vector3.ZAxis;
					}

					__0x9879 *= new Vector3( __0x9863 / 2, __0x9864 / 2, __0x9865 / 2 );
					__0x9880 *= new Vector3( __0x9863 / 2, __0x9864 / 2, __0x9865 / 2 );

					__0x9877.Add( __0x9849 );
					__0x9877.Add( __0x9849 + __0x9853 * __0x9879 );
					__0x9877.Add( __0x9849 + __0x9853 * ( __0x9879 + __0x9880 ) );
					__0x9877.Add( __0x9849 + __0x9853 * __0x9880 );

					__0x9878.Add( 0 ); __0x9878.Add( 1 ); __0x9878.Add( 2 );
					__0x9878.Add( 2 ); __0x9878.Add( 3 ); __0x9878.Add( 0 );

					DebugGeometry.AddTriangles( __0x9877, __0x9878,
						Matrix4.Identity, false, false );
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10403() )
					return;

				Vector2 __0x9881 = Viewport.SizeInPixels.ToVector2();
				var __0x9882 = Viewport.CanvasRenderer;

				__0x10465 __0x9883 = new __0x10465( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x9883 = __0x10407();
					else
						__0x9883 = __0x9777;
				}

				Vector3 __0x9884 = Owner.__0x10395();
				Quaternion __0x9885 = __0x10406();
				double __0x9886 = GetSize();

				
				if( __0x9709 != null && __0x9883.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9709;

				if( __0x9886 != 0 )
				{
					
					
					
					
					
					
					

					

					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					

					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					

					
					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					

					
					
					
					
					
					
					
					
					
					
					
					

					
					
					
					

					
					

					
					

					
					
					
					
					
					
					
					
					
					

					
					

					
					
					
					

					
					

					
					
					

					
					{
						Vector3 __0x9887 = __0x9884 + __0x9885 * new Vector3( __0x9886, 0, 0 );
						Vector3 __0x9888 = __0x9884 + __0x9885 * new Vector3( 0, __0x9886, 0 );
						Vector3 __0x9889 = __0x9884 + __0x9885 * new Vector3( 0, 0, __0x9886 );
						double __0x9890 = ( ArrowPixelSize / 20.0f ) / __0x9881.Y;

						Vector2 __0x9891;

						if( CameraSettings.ProjectToScreenCoordinates( __0x9887, out __0x9891 ) )
						{
							Vector2 __0x9892 = new Vector2( __0x9891.X, __0x9891.Y - __0x9890 );
							ColorValue __0x9893 = __0x9883.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x9882, "x", __0x9892, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9893, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x9888, out __0x9891 ) )
						{
							Vector2 __0x9894 = new Vector2( __0x9891.X, __0x9891.Y - __0x9890 );
							ColorValue __0x9895 = __0x9883.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x9882, "y", __0x9894, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9895, 1 );
						}

						if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						{
							if( CameraSettings.ProjectToScreenCoordinates( __0x9889, out __0x9891 ) )
							{
								Vector2 __0x9896 = new Vector2( __0x9891.X, __0x9891.Y - __0x9890 );
								ColorValue __0x9897 = __0x9883.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
								AddTextWithShadow( __0x9882, "z", __0x9896, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x9897, 1 );
							}
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x9778 ) )
					{
						Vector2 __0x9898;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10395(), out __0x9898 ) )
						{
							double __0x9899 = ( ArrowPixelSize / __0x9881.Y ) * 1.2f;
							Vector2 __0x9900 = new Vector2( __0x9898.X, __0x9898.Y - __0x9899 );
							AddTextWithShadow( __0x9882, __0x9778, __0x9900, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
								new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10467 : ModeClass
		{
			Vector3 __0x9901;
			Vector2 __0x9902;
			TransformOfObject[] __0x9903;
			__0x10468 __0x9904;
			string __0x9905 = "";

			Vector3 __0x9906;
			Axis __0x9907 = Axis.None;
			Vector2 __0x9908;
			Radian __0x9909;
			Vector2 __0x9910;
			
			

			bool __0x9911;

			

			
			struct __0x10468
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10468( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			
			enum Axis
			{
				None,
				X,
				Y,
				Z,
				Radius,
				InnerCircle,
			}

			

			struct __0x10469
			{
				public enum ItemType
				{
					Line,
					Cone
				}
				public ItemType type;
				public Vector3 start;
				public Vector3 end;
				public ColorValue color;
				public double coneArrowSize;

				public __0x10469( ItemType type, Vector3 start, Vector3 end, ColorValue color, double coneArrowSize )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = coneArrowSize;
				}

				public __0x10469( ItemType type, Vector3 start, Vector3 end, ColorValue color )
				{
					this.type = type;
					this.start = start;
					this.end = end;
					this.color = color;
					this.coneArrowSize = 0;
				}
			}

			

			Quaternion __0x10410()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
						return Owner.Objects[ 0 ].Rotation;
				}
				return Quaternion.Identity;
			}

			__0x10468 __0x10411()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9912 = Owner.__0x10395();
				double __0x9913 = GetSize();

				if( __0x9913 == 0 )
					return new __0x10468( false, false, false );

				Quaternion __0x9914 = __0x10410();

				bool __0x9915;
				{
					Vector3 __0x9916 = __0x9912 + __0x9914 * new Vector3( __0x9913, 0, 0 );
					Vector3 __0x9917 = __0x9912 - __0x9914 * new Vector3( __0x9913, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9915 = __0x10422( __0x9916 ) < __0x10422( __0x9917 );
					else
						__0x9915 = true;
				}
				bool __0x9918;
				{
					Vector3 __0x9919 = __0x9912 + __0x9914 * new Vector3( 0, __0x9913, 0 );
					Vector3 __0x9920 = __0x9912 - __0x9914 * new Vector3( 0, __0x9913, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9918 = __0x10422( __0x9919 ) < __0x10422( __0x9920 );
					else
						__0x9918 = true;
				}
				bool __0x9921;
				{
					Vector3 __0x9922 = __0x9912 + __0x9914 * new Vector3( 0, 0, __0x9913 );
					Vector3 __0x9923 = __0x9912 - __0x9914 * new Vector3( 0, 0, __0x9913 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x9921 = __0x10422( __0x9922 ) < __0x10422( __0x9923 );
					else
						__0x9921 = true;
				}
				double __0x9924 = __0x9915 ? __0x9913 : -__0x9913;
				double __0x9925 = __0x9918 ? __0x9913 : -__0x9913;
				double __0x9926 = __0x9921 ? __0x9913 : -__0x9913;

				
				Vector3 __0x9927 = __0x9912 + __0x9914 * new Vector3( __0x9924 / 2, 0, 0 );
				Vector3 __0x9928 = __0x9912 + __0x9914 * new Vector3( 0, __0x9925 / 2, 0 );
				Vector3 __0x9929 = __0x9912 + __0x9914 * new Vector3( 0, 0, __0x9926 / 2 );
				Vector3 __0x9930 = __0x9912 + __0x9914 * new Vector3( __0x9924 / 2, __0x9925 / 2, 0 );
				Vector3 __0x9931 = __0x9912 + __0x9914 * new Vector3( __0x9924 / 2, 0, __0x9926 / 2 );
				Vector3 __0x9932 = __0x9912 + __0x9914 * new Vector3( 0, __0x9925 / 2, __0x9926 / 2 );
				
				if( IsMouseOverTriangle( __0x9912, __0x9927, __0x9930 ) || IsMouseOverTriangle( __0x9930, __0x9928, __0x9912 ) )
					return new __0x10468( true, true, false );
				if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					
					if( IsMouseOverTriangle( __0x9912, __0x9927, __0x9931 ) || IsMouseOverTriangle( __0x9931, __0x9929, __0x9912 ) )
						return new __0x10468( true, false, true );
					
					if( IsMouseOverTriangle( __0x9912, __0x9928, __0x9932 ) || IsMouseOverTriangle( __0x9932, __0x9929, __0x9912 ) )
						return new __0x10468( false, true, true );
				}

				{
					double __0x9933 = double.MaxValue;
					__0x10468 __0x9934 = new __0x10468( false, false, false );

					double __0x9935;

					
					if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( __0x9913 / 5, 0, 0 ), __0x9912 + __0x9914 * new Vector3( __0x9913, 0, 0 ), out _, out _, out __0x9935 ) )
					{
						if( __0x9935 < __0x9933 )
						{
							__0x9933 = __0x9935;
							__0x9934 = new __0x10468( true, false, false );
						}
					}
					if( !__0x9915 )
					{
						if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( -__0x9913 / 5, 0, 0 ), __0x9912 + __0x9914 * new Vector3( -__0x9913, 0, 0 ), out _, out _, out __0x9935 ) )
						{
							if( __0x9935 < __0x9933 )
							{
								__0x9933 = __0x9935;
								__0x9934 = new __0x10468( true, false, false );
							}
						}
					}

					
					if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( 0, __0x9913 / 5, 0 ), __0x9912 + __0x9914 * new Vector3( 0, __0x9913, 0 ), out _, out _, out __0x9935 ) )
					{
						if( __0x9935 < __0x9933 )
						{
							__0x9933 = __0x9935;
							__0x9934 = new __0x10468( false, true, false );
						}
					}

					if( !__0x9918 )
					{
						if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( 0, -__0x9913 / 5, 0 ), __0x9912 + __0x9914 * new Vector3( 0, -__0x9913, 0 ), out _, out _, out __0x9935 ) )
						{
							if( __0x9935 < __0x9933 )
							{
								__0x9933 = __0x9935;
								__0x9934 = new __0x10468( false, true, false );
							}
						}
					}

					
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( 0, 0, __0x9913 / 5 ), __0x9912 + __0x9914 * new Vector3( 0, 0, __0x9913 ), out _, out _, out __0x9935 ) )
						{
							if( __0x9935 < __0x9933 )
							{
								__0x9933 = __0x9935;
								__0x9934 = new __0x10468( false, false, true );
							}
						}

						if( !__0x9921 )
						{
							if( IsMouseNearLine( __0x9912 + __0x9914 * new Vector3( 0, 0, -__0x9913 / 5 ), __0x9912 + __0x9914 * new Vector3( 0, 0, -__0x9913 ), out _, out _, out __0x9935 ) )
							{
								if( __0x9935 < __0x9933 )
								{
									__0x9933 = __0x9935;
									__0x9934 = new __0x10468( false, false, true );
								}
							}
						}
					}

					if( __0x9934.TrueCount != 0 )
						return __0x9934;
				}


				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				
				

				return new __0x10468( false, false, false );
			}

			Quaternion __0x10412()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
					{
						if( modify_Activated )
							return __0x9903[ 0 ].rotation;
						else
							return Owner.Objects[ 0 ].Rotation;
					}
				}
				return Quaternion.Identity;
			}

			Axis __0x10413( out Vector2 __0x10450, out Radian __0x10451 )
			{
				__0x10450 = Vector2.Zero;
				__0x10451 = 0;

				
				if( __0x10411().TrueCount != 0 )
					return Axis.None;

				Vector2 __0x9936 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x9937 = Owner.__0x10395();
				double __0x9938 = GetSize();
				if( __0x9938 == 0 )
					return Axis.None;

				const double __0x9939 = MathEx.PI / 64;

				double __0x9940 = __0x9938 * .75f;
				double __0x9941 = __0x10422( __0x9937 );

				Vector3 __0x9942 = Vector3.Zero;

				Quaternion __0x9943 = __0x10412();

				
				for( double __0x9944 = 0; __0x9944 <= MathEx.PI * 2 + __0x9939 * .5f; __0x9944 += __0x9939 )
				{
					Vector3 __0x9945 = __0x9937 + __0x9943 * ( new Vector3( Math.Sin( __0x9944 ),
						Math.Cos( __0x9944 ), 0 ) * __0x9940 );
					if( __0x9944 != 0 && ( __0x10422( __0x9945 ) <= __0x9941 || Owner.SceneMode2D ) &&
						IsMouseNearLine( __0x9942, __0x9945, out __0x10450, out __0x10451, out _ ) )
					{
						return Axis.Z;
					}
					__0x9942 = __0x9945;
				}

				return Axis.None;
			}

			internal protected override bool OnMouseOverAxis()
			{
				return __0x10414() || __0x10415();
			}

			bool __0x10414()
			{
				if( !Owner.__0x10403() )
					return false;
				__0x10468 __0x9946 = __0x10411();
				return __0x9946.TrueCount != 0;
			}

			bool __0x10415()
			{
				if( !Owner.__0x10404() )
					return false;
				Vector2 __0x9947;
				Radian __0x9948;
				Axis __0x9949 = __0x10413( out __0x9947, out __0x9948 );
				return __0x9949 != Axis.None;
			}

			protected override bool OnTryBeginModify()
			{
				if( __0x10416() )
				{
					__0x9911 = true;
					return true;
				}

				if( __0x10417() )
				{
					__0x9911 = false;
					return true;
				}

				return false;
			}

			bool __0x10416()
			{
				if( !Owner.__0x10403() )
					return false;

				__0x10468 __0x9950 = __0x10411();
				if( __0x9950.TrueCount != 0 )
				{
					__0x9901 = Owner.__0x10395();
					Vector2 __0x9951;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9901, out __0x9951 ) )
					{
						__0x9902 = Viewport.MousePosition - __0x9951;
						__0x9904 = __0x9950;
						__0x9905 = "";
						__0x9903 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9952 = 0; __0x9952 < Owner.Objects.Count; __0x9952++ )
						{
							TransformToolObject __0x9953 = Owner.Objects[ __0x9952 ];
							__0x9903[ __0x9952 ] = new TransformOfObject( __0x9953.Position, __0x9953.Rotation, __0x9953.Scale );
						}
						return true;
					}
				}

				return false;
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x9903 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x9954 = 0; __0x9954 < Owner.Objects.Count; __0x9954++ )
				{
					TransformToolObject __0x9955 = Owner.Objects[ __0x9954 ];
					__0x9903[ __0x9954 ] = new TransformOfObject( __0x9955.Position, __0x9955.Rotation, __0x9955.Scale );
				}
			}

			bool __0x10417()
			{
				if( !Owner.__0x10404() )
					return false;

				Vector2 __0x9956;
				Radian __0x9957;
				Axis __0x9958 = __0x10413( out __0x9956, out __0x9957 );

				if( __0x9958 != Axis.None )
				{
					__0x9906 = Owner.__0x10395();

					Vector2 __0x9959;
					if( CameraSettings.ProjectToScreenCoordinates( __0x9906, out __0x9959 ) )
					{
						Vector2 __0x9960 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

						__0x9907 = __0x9958;
						__0x9908 = __0x9956;
						__0x9909 = __0x9957;
						__0x9910 = Viewport.MousePosition;
						
						__0x9905 = "";
						__0x9903 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x9961 = 0; __0x9961 < Owner.Objects.Count; __0x9961++ )
						{
							TransformToolObject __0x9962 = Owner.Objects[ __0x9961 ];
							__0x9903[ __0x9961 ] = new TransformOfObject( __0x9962.Position, __0x9962.Rotation, __0x9962.Scale );
						}
						return true;
					}
				}

				return false;
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x9903 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10418();
				__0x9903 = null;
			}

			void __0x10418()
			{
				if( __0x9903 != null && Owner.Objects.Count == __0x9903.Length )
				{
					for( int __0x9963 = 0; __0x9963 < Owner.Objects.Count; __0x9963++ )
					{
						Owner.Objects[ __0x9963 ].Position = __0x9903[ __0x9963 ].position;
						Owner.Objects[ __0x9963 ].Rotation = __0x9903[ __0x9963 ].rotation;
					}
				}
			}

			void __0x10419( ref Radian __0x10452 )
			{
				
				Degree __0x9964 = Owner.__0x10400();
				if( __0x9964 != 0 )
				{
					Radian __0x9965 = __0x9964.InRadians();
					__0x10452 += __0x9965 / 2;
					__0x10452 /= __0x9965;
					__0x10452 = (int)__0x10452;
					__0x10452 *= __0x9965;
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				__0x10420();
				__0x10421();
			}

			void __0x10420()
			{
				if( modify_Activated && !Viewport.MouseRelativeMode && __0x9911 )
				{
					Vector2 __0x9966 = Viewport.MousePosition - __0x9902;
					Ray __0x9967 = CameraSettings.GetRayByScreenCoordinates( __0x9966 );

					if( !double.IsNaN( __0x9967.Direction.X ) )
					{
						Quaternion __0x9968 = __0x10410();

						Plane __0x9969 = Plane.FromVectors( __0x9968 * new Vector3( 0, 1, 0 ),
							__0x9968 * new Vector3( 0, 0, 1 ), __0x9901 );
						Plane __0x9970 = Plane.FromVectors( __0x9968 * new Vector3( 1, 0, 0 ),
							__0x9968 * new Vector3( 0, 0, 1 ), __0x9901 );
						Plane __0x9971 = Plane.FromVectors( __0x9968 * new Vector3( 1, 0, 0 ),
							__0x9968 * new Vector3( 0, 1, 0 ), __0x9901 );

						Vector3 __0x9972 = Vector3.Zero;

						if( __0x9904.x && __0x9904.TrueCount == 1 )
						{
							double __0x9973;
							if( __0x9971.Intersects( __0x9967, out __0x9973 ) )
							{
								Vector3 __0x9974 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 1, 0, 0 ), __0x9967.GetPointOnRay( __0x9973 ) );
								__0x9972 += __0x9974 - __0x9901;
							}
						}

						if( __0x9904.y && __0x9904.TrueCount == 1 )
						{
							double __0x9975;
							if( __0x9971.Intersects( __0x9967, out __0x9975 ) )
							{
								Vector3 __0x9976 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 1, 0 ), __0x9967.GetPointOnRay( __0x9975 ) );
								__0x9972 += __0x9976 - __0x9901;
							}
						}

						if( __0x9904.z && __0x9904.TrueCount == 1 )
						{
							Vector3 __0x9977 = CameraSettings.Direction;

							bool __0x9978 = Math.Abs( CameraSettings.Direction.X ) > Math.Abs( CameraSettings.Direction.Y );
							Plane __0x9979 = __0x9978 ? __0x9969 : __0x9970;

							double __0x9980;
							if( __0x9979.Intersects( __0x9967, out __0x9980 ) )
							{
								Vector3 __0x9981 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 0, 1 ), __0x9967.GetPointOnRay( __0x9980 ) );
								__0x9972 += __0x9981 - __0x9901;
							}
						}

						if( __0x9904.x && __0x9904.y )
						{
							double __0x9982;
							if( __0x9971.Intersects( __0x9967, out __0x9982 ) )
							{
								Vector3 __0x9983 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 1, 0, 0 ), __0x9967.GetPointOnRay( __0x9982 ) );
								Vector3 __0x9984 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 1, 0 ), __0x9967.GetPointOnRay( __0x9982 ) );
								__0x9972 += __0x9983 - __0x9901;
								__0x9972 += __0x9984 - __0x9901;
							}
						}

						if( __0x9904.x && __0x9904.z )
						{
							double __0x9985;
							if( __0x9970.Intersects( __0x9967, out __0x9985 ) )
							{
								Vector3 __0x9986 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 1, 0, 0 ), __0x9967.GetPointOnRay( __0x9985 ) );
								Vector3 __0x9987 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 0, 1 ), __0x9967.GetPointOnRay( __0x9985 ) );
								__0x9972 += __0x9986 - __0x9901;
								__0x9972 += __0x9987 - __0x9901;
							}
						}

						if( __0x9904.y && __0x9904.z )
						{
							double __0x9988;
							if( __0x9969.Intersects( __0x9967, out __0x9988 ) )
							{
								Vector3 __0x9989 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 1, 0 ), __0x9967.GetPointOnRay( __0x9988 ) );
								Vector3 __0x9990 = MathAlgorithms.ProjectPointToLine( __0x9901,
									__0x9901 + __0x9968 * new Vector3( 0, 0, 1 ), __0x9967.GetPointOnRay( __0x9988 ) );
								__0x9972 += __0x9989 - __0x9901;
								__0x9972 += __0x9990 - __0x9901;
							}
						}

						
						__0x9972 *= __0x9968.GetInverse();
						double __0x9991 = Owner.__0x10399();
						if( __0x9991 != 0 )
						{
							Vector3 __0x9992 = __0x9972;

							Vector3 __0x9993 = new Vector3( __0x9991, __0x9991, __0x9991 );
							__0x9992 += __0x9993 / 2;
							__0x9992 /= __0x9993;
							__0x9992 = new Vector3I( (int)__0x9992.X, (int)__0x9992.Y,
								(int)__0x9992.Z ).ToVector3();
							__0x9992 *= __0x9993;

							if( __0x9904.x )
								__0x9972.X = __0x9992.X;
							if( __0x9904.y )
								__0x9972.Y = __0x9992.Y;
							if( __0x9904.z )
								__0x9972.Z = __0x9992.Z;
						}
						__0x9972 *= __0x9968;

						
						if( __0x9903 != null && Owner.Objects.Count == __0x9903.Length )
							Owner.OnPositionModeUpdateObjects( __0x9903, __0x9972 );

						__0x9905 = string.Format( "[{0} {1} {2}]", __0x9972.X.ToString( "F2" ), __0x9972.Y.ToString( "F2" ),
							__0x9972.Z.ToString( "F2" ) );
					}
				}
			}

			void __0x10421()
			{
				if( modify_Activated && !owner.__0x9703.Viewport.MouseRelativeMode && !__0x9911 )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x9994 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					var __0x9995 = owner.__0x9703.Viewport.CameraSettings;
					Vector2 __0x9996 = owner.__0x9703.Viewport.MousePosition * __0x9994 + cursorTransitionOnScreenBorderOffset;

					Vector2 __0x9997 = __0x9910 * __0x9994;
					Vector2 __0x9998 = __0x9996 - __0x9997;
					Quaternion __0x9999 = __0x10412();
					double __0x10000 = ProjectSettings.Get.TransformToolRotationSensitivity / 150;

					Quaternion __0x10001 = Quaternion.Identity;

					if( __0x9907 == Axis.Z )
					{
						Radian __0x10002;
						{
							Matrix2 __0x10003 = Matrix2.FromRotate( __0x9909 );
							Vector2 __0x10004 = __0x10003 * __0x9998;
							__0x10002 = __0x10004.X * __0x10000;
							__0x10419( ref __0x10002 );
						}

						string __0x10005 = 0.0f.ToString( "F2" );

						__0x10001 = new Quaternion( new Vector3( 0, 0, Math.Sin( -__0x10002 / 2 ) ), Math.Cos( -__0x10002 / 2 ) );
						__0x10001 = __0x9999 * __0x10001.GetNormalize() * __0x9999.GetInverse();
						__0x9905 = string.Format( "[{0} {1} {2}]", __0x10005, __0x10005, ( (double)__0x10002.InDegrees() ).ToString( "F2" ) );
					}

					__0x10001.Normalize();

					
					if( __0x9903 != null && Owner.Objects.Count == __0x9903.Length )
						Owner.OnRotationModeUpdateObjects( __0x9903, __0x9906, __0x10001 );
				}
			}

			double __0x10422( Vector3 __0x10453 )
			{
				return ( Viewport.CameraSettings.Position - __0x10453 ).Length();
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				return __0x10423() || __0x10424();
			}

			bool __0x10423()
			{
				if( !Owner.__0x10403() )
					return false;

				__0x10468 __0x10006 = new __0x10468( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10006 = __0x10411();
					else
						__0x10006 = __0x9904;
				}

				Vector3 __0x10007 = Owner.__0x10395();
				double __0x10008 = GetLineWorldThickness( __0x10007 );
				double __0x10009 = GetSize();
				if( __0x10009 == 0 )
					return false;

				return __0x10006.TrueCount != 0;
			}

			bool __0x10424()
			{
				if( !Owner.__0x10404() )
					return false;

				Axis __0x10010 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x10011;
						Radian __0x10012;
						__0x10010 = __0x10413( out __0x10011, out __0x10012 );
					}
					else
						__0x10010 = __0x9907;
				}

				Vector3 __0x10013;
				if( !modify_Activated )
					__0x10013 = Owner.__0x10395();
				else
					__0x10013 = __0x9906;
				double __0x10014 = GetLineWorldThickness( __0x10013 );
				double __0x10015 = GetSize();
				if( __0x10015 == 0 )
					return false;

				return __0x10010 != Axis.None;
			}

			public override void OnRender()
			{
				base.OnRender();

				__0x10426();
				__0x10425();
			}

			void __0x10425()
			{
				if( !Owner.__0x10403() )
					return;

				ColorValue __0x10016 = new ColorValue( 1, 1, 0 );
				ColorValue __0x10017 = new ColorValue( 1, 0, 0 );
				ColorValue __0x10018 = new ColorValue( 0, 1, 0 );
				ColorValue __0x10019 = new ColorValue( 0, 0, 1 );
				ColorValue __0x10020 = new ColorValue( 0, 0, 0, ProjectSettings.Get.TransformToolShadowIntensity );

				__0x10468 __0x10021 = new __0x10468( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10021 = __0x10411();
					else
						__0x10021 = __0x9904;
				}

				Vector3 __0x10022 = Owner.__0x10395();
				double __0x10023 = GetLineWorldThickness( __0x10022 );
				double __0x10024 = GetSize();
				if( __0x10024 == 0 )
					return;

				

				double __0x10025 = __0x10024 / 4.0f;
				Quaternion __0x10026 = __0x10410();

				bool __0x10027;
				{
					Vector3 __0x10028 = __0x10022 + __0x10026 * new Vector3( __0x10024, 0, 0 );
					Vector3 __0x10029 = __0x10022 - __0x10026 * new Vector3( __0x10024, 0, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x10027 = __0x10422( __0x10028 ) < __0x10422( __0x10029 );
					else
						__0x10027 = true;
				}
				bool __0x10030;
				{
					Vector3 __0x10031 = __0x10022 + __0x10026 * new Vector3( 0, __0x10024, 0 );
					Vector3 __0x10032 = __0x10022 - __0x10026 * new Vector3( 0, __0x10024, 0 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x10030 = __0x10422( __0x10031 ) < __0x10422( __0x10032 );
					else
						__0x10030 = true;
				}
				bool __0x10033;
				{
					Vector3 __0x10034 = __0x10022 + __0x10026 * new Vector3( 0, 0, __0x10024 );
					Vector3 __0x10035 = __0x10022 - __0x10026 * new Vector3( 0, 0, __0x10024 );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						__0x10033 = __0x10422( __0x10034 ) < __0x10422( __0x10035 );
					else
						__0x10033 = true;
				}

				double __0x10036 = __0x10027 ? __0x10024 : -__0x10024;
				double __0x10037 = __0x10030 ? __0x10024 : -__0x10024;
				double __0x10038 = __0x10033 ? __0x10024 : -__0x10024;

				double __0x10039 = __0x10024 - __0x10023;
				double __0x10040 = __0x10027 ? __0x10039 : -__0x10039;
				double __0x10041 = __0x10030 ? __0x10039 : -__0x10039;
				double __0x10042 = __0x10033 ? __0x10039 : -__0x10039;

				
				{
					List<__0x10469> __0x10043 = new List<__0x10469>( 32 );
					ColorValue __0x10044;

					

					__0x10044 = __0x10021.x ? __0x10016 : __0x10017;
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
						__0x10022 + __0x10026 * new Vector3( __0x10024 / 5, 0, 0 ),
						__0x10022 + __0x10026 * new Vector3( __0x10024 - __0x10025, 0, 0 ),
						__0x10044 ) );
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Cone,
						__0x10022 + __0x10026 * new Vector3( __0x10024 - __0x10025, 0, 0 ),
						__0x10022 + __0x10026 * new Vector3( __0x10024, 0, 0 ),
						__0x10044, __0x10025 / 6 ) );
					if( !__0x10027 )
					{
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( -__0x10024 / 5, 0, 0 ),
							__0x10022 + __0x10026 * new Vector3( -__0x10024, 0, 0 ),
							__0x10044, __0x10023 ) );
					}

					__0x10044 = __0x10021.x && __0x10021.y ? __0x10016 : __0x10017;
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
						__0x10022 + __0x10026 * new Vector3( __0x10036 / 2, 0, 0 ),
						__0x10022 + __0x10026 * new Vector3( __0x10036 / 2, __0x10041 / 2, 0 ),
						__0x10044, __0x10023 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x10044 = __0x10021.x && __0x10021.z ? __0x10016 : __0x10017;
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( __0x10036 / 2, 0, 0 ),
							__0x10022 + __0x10026 * new Vector3( __0x10036 / 2, 0, __0x10042 / 2 ),
							__0x10044, __0x10023 ) );
					}

					

					__0x10044 = __0x10021.y ? __0x10016 : __0x10018;
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
						__0x10022 + __0x10026 * new Vector3( 0, __0x10024 / 5, 0 ),
						__0x10022 + __0x10026 * new Vector3( 0, __0x10024 - __0x10025, 0 ),
						__0x10044, __0x10023 ) );
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Cone,
						__0x10022 + __0x10026 * new Vector3( 0, __0x10024 - __0x10025, 0 ),
						__0x10022 + __0x10026 * new Vector3( 0, __0x10024, 0 ),
						__0x10044, __0x10025 / 6 ) );
					if( !__0x10030 )
					{
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( 0, -__0x10024 / 5, 0 ),
							__0x10022 + __0x10026 * new Vector3( 0, -__0x10024, 0 ),
							__0x10044, __0x10023 ) );
					}

					__0x10044 = __0x10021.x && __0x10021.y ? __0x10016 : __0x10018;
					__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
						__0x10022 + __0x10026 * new Vector3( 0, __0x10037 / 2, 0 ),
						__0x10022 + __0x10026 * new Vector3( __0x10040 / 2, __0x10037 / 2, 0 ),
						__0x10044, __0x10023 ) );
					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x10044 = __0x10021.y && __0x10021.z ? __0x10016 : __0x10018;
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( 0, __0x10037 / 2, 0 ),
							__0x10022 + __0x10026 * new Vector3( 0, __0x10037 / 2, __0x10042 / 2 ),
							__0x10044, __0x10023 ) );
					}

					

					if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
					{
						__0x10044 = __0x10021.z ? __0x10016 : __0x10019;
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10024 / 5 ),
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10024 - __0x10025 ),
							__0x10044, __0x10023 ) );
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Cone,
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10024 - __0x10025 ),
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10024 ),
							__0x10044, __0x10025 / 6 ) );
						if( !__0x10033 )
						{
							__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
								__0x10022 + __0x10026 * new Vector3( 0, 0, -__0x10024 / 5 ),
								__0x10022 + __0x10026 * new Vector3( 0, 0, -__0x10024 ),
								__0x10044, __0x10023 ) );
						}

						__0x10044 = __0x10021.x && __0x10021.z ? __0x10016 : __0x10019;
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10038 / 2 ),
							__0x10022 + __0x10026 * new Vector3( __0x10040 / 2, 0, __0x10038 / 2 ),
							__0x10044, __0x10023 ) );
						__0x10044 = __0x10021.y && __0x10021.z ? __0x10016 : __0x10019;
						__0x10043.Add( new __0x10469( __0x10469.ItemType.Line,
							__0x10022 + __0x10026 * new Vector3( 0, 0, __0x10038 / 2 ),
							__0x10022 + __0x10026 * new Vector3( 0, __0x10041 / 2, __0x10038 / 2 ),
							__0x10044, __0x10023 ) );
					}

					
					CollectionUtility.SelectionSort( __0x10043, delegate ( __0x10469 __0x10454, __0x10469 __0x10455 )
					{
						double __0x10045 = Math.Max( __0x10422( __0x10454.start ), __0x10422( __0x10454.end ) );
						double __0x10046 = Math.Max( __0x10422( __0x10455.start ), __0x10422( __0x10455.end ) );
						if( __0x10045 > __0x10046 )
							return -1;
						if( __0x10045 < __0x10046 )
							return 1;
						return 0;
					} );

					
					for( int __0x10047 = 0; __0x10047 < 5; __0x10047++ )
					{
						bool __0x10048 = __0x10047 <= 3;
						if( __0x10048 && ProjectSettings.Get.TransformToolShadowIntensity == 0 )
							continue;

						var __0x10049 = 0.0;
						if( __0x10048 )
							__0x10049 = ( (double)__0x10047 + 1.0 ) / 4.0;

						
						

						if( __0x10048 )
							DebugGeometry.SetColor( __0x10020 * new ColorValue( 1, 1, 1, 0.25 ), false );
						foreach( __0x10469 __0x10391 in __0x10043 )
						{
							if( !__0x10048 )
								DebugGeometry.SetColor( __0x10391.color, false );
							switch( __0x10391.type )
							{
							case __0x10469.ItemType.Line:
								AddLine( __0x10391.start, __0x10391.end, __0x10023, __0x10049 );
								break;
							case __0x10469.ItemType.Cone:
								AddCone( __0x10391.start, __0x10391.end, __0x10391.coneArrowSize, __0x10023, __0x10049 );
								break;
							}
						}

						
						
					}
				}

				
				if( __0x10021.TrueCount == 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x10050 = new List<Vector3>();
					List<int> __0x10051 = new List<int>();

					Vector3 __0x10052;
					Vector3 __0x10053;

					if( __0x10021.x )
					{
						__0x10052 = Vector3.XAxis;
						__0x10053 = __0x10021.y ? Vector3.YAxis : Vector3.ZAxis;
					}
					else
					{
						__0x10052 = Vector3.YAxis;
						__0x10053 = Vector3.ZAxis;
					}

					__0x10052 *= new Vector3( __0x10036 / 2, __0x10037 / 2, __0x10038 / 2 );
					__0x10053 *= new Vector3( __0x10036 / 2, __0x10037 / 2, __0x10038 / 2 );

					__0x10050.Add( __0x10022 );
					__0x10050.Add( __0x10022 + __0x10026 * __0x10052 );
					__0x10050.Add( __0x10022 + __0x10026 * ( __0x10052 + __0x10053 ) );
					__0x10050.Add( __0x10022 + __0x10026 * __0x10053 );

					__0x10051.Add( 0 ); __0x10051.Add( 1 ); __0x10051.Add( 2 );
					__0x10051.Add( 2 ); __0x10051.Add( 3 ); __0x10051.Add( 0 );

					DebugGeometry.AddTriangles( __0x10050, __0x10051,
						Matrix4.Identity, false, false );
				}

				
			}

			void __0x10426()
			{
				if( !Owner.__0x10404() )
					return;

				ColorValue __0x10054 = new ColorValue( 1, 1, 0 );
				ColorValue __0x10055 = new ColorValue( 1, 0, 0 );
				ColorValue __0x10056 = new ColorValue( 0, 1, 0 );
				ColorValue __0x10057 = new ColorValue( 0, 0, 1 );
				ColorValue __0x10058 = new ColorValue( .66f, .66f, .66f );
				ColorValue __0x10059 = new ColorValue( .33f, .33f, .33f );
				ColorValue __0x10060 = new ColorValue( 0, 0, 0, ProjectSettings.Get.TransformToolShadowIntensity );

				Axis __0x10061 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated || __0x9911 )
					{
						Vector2 __0x10062;
						Radian __0x10063;
						__0x10061 = __0x10413( out __0x10062, out __0x10063 );
					}
					else
						__0x10061 = __0x9907;
				}

				Vector3 __0x10064;
				if( !modify_Activated || __0x9911 )
					__0x10064 = Owner.__0x10395();
				else
					__0x10064 = __0x9906;
				double __0x10065 = GetLineWorldThickness( __0x10064 );
				double __0x10066 = GetSize();
				if( __0x10066 == 0 )
					return;

				

				const double __0x10067 = MathEx.PI / 64;

				double __0x10068 = __0x10066 * .75f;
				double __0x10069 = __0x10422( __0x10064 );
				Vector3 __0x10070 = Vector3.Cross( CameraSettings.Direction, CameraSettings.Up );
				Vector3 __0x10071 = Vector3.Zero;
				Quaternion __0x10072 = __0x10412();

				for( int __0x10073 = 0; __0x10073 < 5; __0x10073++ )
				{
					bool __0x10074 = __0x10073 <= 3;
					if( __0x10074 && ProjectSettings.Get.TransformToolShadowIntensity == 0 )
						continue;

					var __0x10075 = 0.0;
					if( __0x10074 )
						__0x10075 = ( (double)__0x10073 + 1.0 ) / 4.0;

					if( __0x10074 )
						DebugGeometry.SetColor( __0x10060 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					
					
					
					
					
					
					
					

					

					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x10076 = new List<Vector3>( 64 );
						List<bool> __0x10077 = new List<bool>( 64 );
						for( double __0x10078 = 0; __0x10078 <= MathEx.PI * 2 + __0x10067 * .5f; __0x10078 += __0x10067 )
						{
							Vector3 __0x10079 = __0x10064 + __0x10072 * ( new Vector3( Math.Sin( __0x10078 ),
								Math.Cos( __0x10078 ), 0 ) * __0x10068 );
							__0x10076.Add( __0x10079 );
							bool __0x10080 = __0x10422( __0x10079 ) > __0x10069;
							if( Owner.SceneMode2D )
								__0x10080 = false;
							__0x10077.Add( __0x10080 );
							
							
						}
						if( !__0x10074 )
							DebugGeometry.SetColor( ( __0x10061 == Axis.Z ) ? __0x10054 : __0x10057, false );

						List<Vector3> __0x10081 = new List<Vector3>( 64 );
						for( int __0x10082 = 0; __0x10082 < __0x10076.Count; __0x10082++ )
						{
							if( !__0x10077[ __0x10082 ] )
							{
								__0x10081.Add( __0x10076[ __0x10082 ] );
							}
							else
							{
								if( __0x10081.Count != 0 )
								{
									AddPolygonalChain( __0x10081.ToArray(), __0x10065, __0x10075 );
									__0x10081.Clear();
								}
							}
						}
						if( __0x10081.Count != 0 )
						{
							AddPolygonalChain( __0x10081.ToArray(), __0x10065, __0x10075 );
							__0x10081.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					
					
					
					
					
					

					

					
					
					

					
					

					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
					
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				__0x10428();
				__0x10427();
			}

			void __0x10427()
			{
				if( !Owner.__0x10403() )
					return;

				Vector2 __0x10083 = Viewport.SizeInPixels.ToVector2();
				var __0x10084 = Viewport.CanvasRenderer;

				__0x10468 __0x10085 = new __0x10468( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10085 = __0x10411();
					else
						__0x10085 = __0x9904;
				}

				Vector3 __0x10086 = Owner.__0x10395();
				Quaternion __0x10087 = __0x10410();
				double __0x10088 = GetSize();

				
				if( __0x9709 != null && __0x10085.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9709;

				if( __0x10088 != 0 )
				{
					
					{
						Vector3 __0x10089 = __0x10086 + __0x10087 * new Vector3( __0x10088, 0, 0 );
						Vector3 __0x10090 = __0x10086 + __0x10087 * new Vector3( 0, __0x10088, 0 );
						Vector3 __0x10091 = __0x10086 + __0x10087 * new Vector3( 0, 0, __0x10088 );
						double __0x10092 = ( ArrowPixelSize / 20.0f ) / __0x10083.Y;

						Vector2 __0x10093;

						if( CameraSettings.ProjectToScreenCoordinates( __0x10089, out __0x10093 ) )
						{
							Vector2 __0x10094 = new Vector2( __0x10093.X, __0x10093.Y - __0x10092 );
							ColorValue __0x10095 = __0x10085.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x10084, "x", __0x10094, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10095, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x10090, out __0x10093 ) )
						{
							Vector2 __0x10096 = new Vector2( __0x10093.X, __0x10093.Y - __0x10092 );
							ColorValue __0x10097 = __0x10085.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x10084, "y", __0x10096, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10097, 1 );
						}

						if( !Owner.SceneMode2D || Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
						{
							if( CameraSettings.ProjectToScreenCoordinates( __0x10091, out __0x10093 ) )
							{
								Vector2 __0x10098 = new Vector2( __0x10093.X, __0x10093.Y - __0x10092 );
								ColorValue __0x10099 = __0x10085.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
								AddTextWithShadow( __0x10084, "z", __0x10098, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10099, 1 );
							}
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x9905 ) )
					{
						Vector2 __0x10100;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10395(), out __0x10100 ) )
						{
							double __0x10101 = ( ArrowPixelSize / __0x10083.Y ) * 1.2f;
							Vector2 __0x10102 = new Vector2( __0x10100.X, __0x10100.Y - __0x10101 );
							AddTextWithShadow( __0x10084, __0x9905, __0x10102, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
								new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}

			void __0x10428()
			{
				if( !Owner.__0x10404() )
					return;

				var __0x10103 = Viewport.CanvasRenderer;
				Vector2 __0x10104 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Axis __0x10105 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated && !modify_Prepare )
					{
						Vector2 __0x10106;
						Radian __0x10107;
						__0x10105 = __0x10413( out __0x10106, out __0x10107 );
					}
					else
						__0x10105 = __0x9907;
				}

				
				if( __0x9710 != null && __0x10105 != Axis.None )
					ViewportControl.OneFrameChangeCursor = __0x9710;

				
				if( modify_Activated && !string.IsNullOrEmpty( __0x9905 ) )
				{
					Vector2 __0x10108;
					if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10395(), out __0x10108 ) )
					{
						double __0x10109 = ( ArrowPixelSize / __0x10104.Y ) * 1.2f;
						Vector2 __0x10110 = new Vector2( __0x10108.X, __0x10108.Y - __0x10109 );
						AddTextWithShadow( __0x10103, __0x9905, __0x10110, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
							new ColorValue( 1, 1, 0 ), 2 );
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10470 : ModeClass
		{
			TransformOfObject[] __0x10111;
			Vector3 __0x10112;
			Axis __0x10113 = Axis.None;
			Vector2 __0x10114;
			Radian __0x10115;
			Vector2 __0x10116;
			
			string __0x10117 = "";

			

			enum Axis
			{
				None,
				X,
				Y,
				Z,
				Radius,
				InnerCircle,
			}

			

			Axis __0x10429( out Vector2 __0x10456, out Radian __0x10457 )
			{
				__0x10456 = Vector2.Zero;
				__0x10457 = 0;

				Vector2 __0x10118 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x10119 = Owner.__0x10395();
				double __0x10120 = GetSize();
				if( __0x10120 == 0 )
					return Axis.None;

				const double __0x10121 = MathEx.PI / 64;

				double __0x10122 = __0x10120 * .75f;
				double __0x10123 = __0x10430( __0x10119 );

				Vector3 __0x10124 = Vector3.Zero;

				Quaternion __0x10125 = __0x10432();

				
				for( double __0x10126 = 0; __0x10126 <= MathEx.PI * 2 + __0x10121 * .5f; __0x10126 += __0x10121 )
				{
					Vector3 __0x10127 = __0x10119 + __0x10125 * ( new Vector3( 0, Math.Sin( __0x10126 ), Math.Cos( __0x10126 ) ) * __0x10122 );
					if( __0x10126 != 0 && __0x10430( __0x10127 ) <= __0x10123 &&
						IsMouseNearLine( __0x10124, __0x10127, out __0x10456, out __0x10457, out _ ) )
					{
						return Axis.X;
					}
					__0x10124 = __0x10127;
				}

				
				for( double __0x10128 = 0; __0x10128 <= MathEx.PI * 2 + __0x10121 * .5f; __0x10128 += __0x10121 )
				{
					Vector3 __0x10129 = __0x10119 + __0x10125 * ( new Vector3( Math.Sin( __0x10128 ), 0, Math.Cos( __0x10128 ) ) * __0x10122 );
					if( __0x10128 != 0 && __0x10430( __0x10129 ) <= __0x10123 &&
						IsMouseNearLine( __0x10124, __0x10129, out __0x10456, out __0x10457, out _ ) )
					{
						return Axis.Y;
					}
					__0x10124 = __0x10129;
				}

				
				for( double __0x10130 = 0; __0x10130 <= MathEx.PI * 2 + __0x10121 * .5f; __0x10130 += __0x10121 )
				{
					Vector3 __0x10131 = __0x10119 + __0x10125 * ( new Vector3( Math.Sin( __0x10130 ),
						Math.Cos( __0x10130 ), 0 ) * __0x10122 );
					if( __0x10130 != 0 && ( __0x10430( __0x10131 ) <= __0x10123 || Owner.SceneMode2D ) &&
						IsMouseNearLine( __0x10124, __0x10131, out __0x10456, out __0x10457, out _ ) )
					{
						return Axis.Z;
					}
					__0x10124 = __0x10131;
				}

				Vector2 __0x10132 = Owner.__0x9703.Viewport.MousePosition * __0x10118;

				Vector2 __0x10133;
				if( CameraSettings.ProjectToScreenCoordinates( __0x10119, out __0x10133 ) )
				{
					Vector2 __0x10134 = __0x10133 * __0x10118;
					double __0x10135 = ( __0x10132 - __0x10134 ).Length();

					
					if( Math.Abs( __0x10135 - ArrowPixelSize ) < SelectNearPixels && !Owner.SceneMode2D )
					{
						Vector2 __0x10136 = __0x10132 - __0x10134;
						Vector2 __0x10137 = __0x10136.GetNormalize();

						__0x10456 = ( __0x10134 + __0x10137 * ArrowPixelSize );
						__0x10457 = Math.Atan2( __0x10136.Y, __0x10136.X ) + MathEx.PI / 2;

						return Axis.Radius;
					}

					
					if( __0x10135 < ( ArrowPixelSize ) * .75f + SelectNearPixels )
						return Axis.InnerCircle;
				}

				return Axis.None;
			}

			double __0x10430( Vector3 __0x10458 )
			{
				return ( CameraSettings.Position - __0x10458 ).Length();
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10404() )
					return false;
				Vector2 __0x10138;
				Radian __0x10139;
				Axis __0x10140 = __0x10429( out __0x10138, out __0x10139 );
				return __0x10140 != Axis.None;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10404() )
					return false;

				Vector2 __0x10141;
				Radian __0x10142;
				Axis __0x10143 = __0x10429( out __0x10141, out __0x10142 );

				if( __0x10143 != Axis.None )
				{
					__0x10112 = Owner.__0x10395();

					Vector2 __0x10144;
					if( CameraSettings.ProjectToScreenCoordinates( __0x10112, out __0x10144 ) )
					{
						Vector2 __0x10145 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

						__0x10113 = __0x10143;
						__0x10114 = __0x10141;
						__0x10115 = __0x10142;
						__0x10116 = Viewport.MousePosition;
						
						__0x10117 = "";
						__0x10111 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x10146 = 0; __0x10146 < Owner.Objects.Count; __0x10146++ )
						{
							TransformToolObject __0x10147 = Owner.Objects[ __0x10146 ];
							__0x10111[ __0x10146 ] = new TransformOfObject( __0x10147.Position, __0x10147.Rotation, __0x10147.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x10111 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x10148 = 0; __0x10148 < Owner.Objects.Count; __0x10148++ )
				{
					TransformToolObject __0x10149 = Owner.Objects[ __0x10148 ];
					__0x10111[ __0x10148 ] = new TransformOfObject( __0x10149.Position, __0x10149.Rotation, __0x10149.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x10111 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10431();
				__0x10111 = null;
			}

			void __0x10431()
			{
				if( __0x10111 != null && Owner.Objects.Count == __0x10111.Length )
				{
					for( int __0x10150 = 0; __0x10150 < Owner.Objects.Count; __0x10150++ )
					{
						Owner.Objects[ __0x10150 ].Position = __0x10111[ __0x10150 ].position;
						Owner.Objects[ __0x10150 ].Rotation = __0x10111[ __0x10150 ].rotation;
					}
				}
			}

			Quaternion __0x10432()
			{
				if( Owner.CoordinateSystemMode == CoordinateSystemModeEnum.Local )
				{
					if( Owner.Objects.Count != 0 )
					{
						if( modify_Activated )
							return __0x10111[ 0 ].rotation;
						else
							return Owner.Objects[ 0 ].Rotation;
					}
				}
				return Quaternion.Identity;
			}

			void __0x10433( ref Radian __0x10459 )
			{
				
				Degree __0x10151 = Owner.__0x10400();
				if( __0x10151 != 0 )
				{
					Radian __0x10152 = __0x10151.InRadians();
					__0x10459 += __0x10152 / 2;
					__0x10459 /= __0x10152;
					__0x10459 = (int)__0x10459;
					__0x10459 *= __0x10152;
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !owner.__0x9703.Viewport.MouseRelativeMode )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x10153 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					var __0x10154 = owner.__0x9703.Viewport.CameraSettings;
					Vector2 __0x10155 = owner.__0x9703.Viewport.MousePosition * __0x10153 + cursorTransitionOnScreenBorderOffset;

					Vector2 __0x10156 = __0x10116 * __0x10153;
					Vector2 __0x10157 = __0x10155 - __0x10156;
					Quaternion __0x10158 = __0x10432();
					double __0x10159 = ProjectSettings.Get.TransformToolRotationSensitivity / 150;

					Quaternion __0x10160 = Quaternion.Identity;

					if( __0x10113 == Axis.X || __0x10113 == Axis.Y || __0x10113 == Axis.Z ||
						__0x10113 == Axis.Radius )
					{
						Radian __0x10161;
						{
							Matrix2 __0x10162 = Matrix2.FromRotate( __0x10115 );
							Vector2 __0x10163 = __0x10162 * __0x10157;
							__0x10161 = __0x10163.X * __0x10159;
							__0x10433( ref __0x10161 );
						}

						string __0x10164 = 0.0f.ToString( "F2" );

						switch( __0x10113 )
						{
						case Axis.X:
							__0x10160 = new Quaternion( new Vector3( Math.Sin( -__0x10161 / 2 ), 0, 0 ), Math.Cos( -__0x10161 / 2 ) );
							__0x10160 = __0x10158 * __0x10160.GetNormalize() * __0x10158.GetInverse();
							__0x10117 = string.Format( "[{0} {1} {2}]", ( (double)__0x10161.InDegrees() ).ToString( "F2" ), __0x10164, __0x10164 );
							break;

						case Axis.Y:
							__0x10160 = new Quaternion( new Vector3( 0, Math.Sin( __0x10161 / 2 ), 0 ), Math.Cos( __0x10161 / 2 ) );
							__0x10160 = __0x10158 * __0x10160.GetNormalize() * __0x10158.GetInverse();
							__0x10117 = string.Format( "[{0} {1} {2}]", __0x10164, ( (double)-__0x10161.InDegrees() ).ToString( "F2" ), __0x10164 );
							break;

						case Axis.Z:
							__0x10160 = new Quaternion( new Vector3( 0, 0, Math.Sin( -__0x10161 / 2 ) ), Math.Cos( -__0x10161 / 2 ) );
							__0x10160 = __0x10158 * __0x10160.GetNormalize() * __0x10158.GetInverse();
							__0x10117 = string.Format( "[{0} {1} {2}]", __0x10164, __0x10164, ( (double)__0x10161.InDegrees() ).ToString( "F2" ) );
							break;

						case Axis.Radius:
							Vector3 __0x10165 = Vector3.Cross( __0x10154.Direction, __0x10154.Up );
							Matrix3 __0x10166 = new Matrix3( __0x10154.Direction, -__0x10165, __0x10154.Up );
							Matrix3 __0x10167 = __0x10166 * Matrix3.FromRotateByX( -__0x10161 ) * __0x10166.GetInverse();
							__0x10160 = __0x10167.ToQuaternion();
							break;
						}
					}
					else if( __0x10113 == Axis.InnerCircle )
					{
						Radian __0x10168 = __0x10157.X * __0x10159;
						Radian __0x10169 = __0x10157.Y * __0x10159;
						__0x10433( ref __0x10168 );
						__0x10433( ref __0x10169 );

						Vector3 __0x10170 = Vector3.Cross( __0x10154.Direction, __0x10154.Up );
						Matrix3 __0x10171 = new Matrix3( __0x10154.Direction, -__0x10170, __0x10154.Up );

						Matrix3 __0x10172 = Matrix3.FromRotateByZ( -__0x10168 ) * Matrix3.FromRotateByY( __0x10169 );
						Matrix3 __0x10173 = __0x10171 * __0x10172 * __0x10171.GetInverse();
						__0x10160 = __0x10173.ToQuaternion();
					}

					__0x10160.Normalize();

					
					if( __0x10111 != null && Owner.Objects.Count == __0x10111.Length )
						Owner.OnRotationModeUpdateObjects( __0x10111, __0x10112, __0x10160 );
				}
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10404() )
					return false;

				Axis __0x10174 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x10175;
						Radian __0x10176;
						__0x10174 = __0x10429( out __0x10175, out __0x10176 );
					}
					else
						__0x10174 = __0x10113;
				}

				Vector3 __0x10177;
				if( !modify_Activated )
					__0x10177 = Owner.__0x10395();
				else
					__0x10177 = __0x10112;
				double __0x10178 = GetLineWorldThickness( __0x10177 );
				double __0x10179 = GetSize();
				if( __0x10179 == 0 )
					return false;

				return __0x10174 != Axis.None;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10404() )
					return;

				ColorValue __0x10180 = new ColorValue( 1, 1, 0 );
				ColorValue __0x10181 = new ColorValue( 1, 0, 0 );
				ColorValue __0x10182 = new ColorValue( 0, 1, 0 );
				ColorValue __0x10183 = new ColorValue( 0, 0, 1 );
				ColorValue __0x10184 = new ColorValue( .66f, .66f, .66f );
				ColorValue __0x10185 = new ColorValue( .33f, .33f, .33f );
				ColorValue __0x10186 = new ColorValue( 0, 0, 0, ProjectSettings.Get.TransformToolShadowIntensity );

				Axis __0x10187 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
					{
						Vector2 __0x10188;
						Radian __0x10189;
						__0x10187 = __0x10429( out __0x10188, out __0x10189 );
					}
					else
						__0x10187 = __0x10113;
				}

				Vector3 __0x10190;
				if( !modify_Activated )
					__0x10190 = Owner.__0x10395();
				else
					__0x10190 = __0x10112;
				double __0x10191 = GetLineWorldThickness( __0x10190 );
				double __0x10192 = GetSize();
				if( __0x10192 == 0 )
					return;

				

				const double __0x10193 = MathEx.PI / 64;

				double __0x10194 = __0x10192 * .75f;
				double __0x10195 = __0x10430( __0x10190 );
				Vector3 __0x10196 = Vector3.Cross( CameraSettings.Direction, CameraSettings.Up );
				Vector3 __0x10197 = Vector3.Zero;
				Quaternion __0x10198 = __0x10432();

				for( int __0x10199 = 0; __0x10199 < 5; __0x10199++ )
				{
					bool __0x10200 = __0x10199 <= 3;
					if( __0x10200 && ProjectSettings.Get.TransformToolShadowIntensity == 0 )
						continue;

					var __0x10201 = 0.0;
					if( __0x10200 )
						__0x10201 = ( (double)__0x10199 + 1.0 ) / 4.0;

					if( __0x10200 )
						DebugGeometry.SetColor( __0x10186 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					if( __0x10187 == Axis.InnerCircle && !__0x10200 )
					{
						if( !__0x10200 )
							DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );
																							

						List<Vector3> __0x10202 = new List<Vector3>();

						for( double __0x10203 = 0; __0x10203 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10203 += __0x10193 )
						{
							Vector3 __0x10204 = __0x10190;
							__0x10204 += __0x10196 * Math.Cos( __0x10203 ) * __0x10194;
							__0x10204 += CameraSettings.Up * Math.Sin( __0x10203 ) * __0x10194;

							if( __0x10203 != 0 )
							{
								int __0x10205 = __0x10202.Count;

								__0x10202.Add( __0x10190 );
								__0x10202.Add( __0x10197 );
								__0x10202.Add( __0x10204 );
							}
							__0x10197 = __0x10204;
						}

						DebugGeometry.AddTriangles( __0x10202, Matrix4.Identity, false, false );
					}

					
					
					if( !__0x10200 && Owner.Objects.Count <= 30 )
					{
						foreach( TransformToolObject __0x10392 in Owner.Objects )
						{
							var __0x10206 = __0x10192 / 3;
							double __0x10207 = 1;
							double __0x10208 = GetLineWorldThickness( __0x10392.Position );

							Matrix4 __0x10209 = new Matrix4( __0x10392.Rotation.ToMatrix3() * Matrix3.FromScale( new Vector3( __0x10206, __0x10206, __0x10206 ) ), __0x10392.Position );

							var __0x10210 = __0x10206 / 4;
							DebugGeometry.SetColor( new ColorValue( 1, 0, 0, __0x10207 ), false );
							DebugGeometry.AddArrow( __0x10209 * Vector3.Zero, __0x10209 * Vector3.XAxis, __0x10210, 0, true, __0x10208 );
							DebugGeometry.SetColor( new ColorValue( 0, 1, 0, __0x10207 ), false );
							DebugGeometry.AddArrow( __0x10209 * Vector3.Zero, __0x10209 * Vector3.YAxis, __0x10210, 0, true, __0x10208 );
							DebugGeometry.SetColor( new ColorValue( 0, 0, 1, __0x10207 ), false );
							DebugGeometry.AddArrow( __0x10209 * Vector3.Zero, __0x10209 * Vector3.ZAxis, __0x10210, 0, true, __0x10208 );
						}
					}

					
					{
						List<Vector3> __0x10211 = new List<Vector3>( 64 );
						for( double __0x10212 = 0; __0x10212 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10212 += __0x10193 )
						{
							Vector3 __0x10213 = __0x10190;
							__0x10213 += __0x10196 * Math.Cos( __0x10212 ) * __0x10194;
							__0x10213 += CameraSettings.Up * Math.Sin( __0x10212 ) * __0x10194;
							__0x10211.Add( __0x10213 );
						}
						if( !__0x10200 )
							DebugGeometry.SetColor( __0x10185, false );
						AddPolygonalChain( __0x10211.ToArray(), __0x10191, __0x10201 );
					}
					
					
					
					
					
					
					
					
					
					
					

					
					if( !Owner.SceneMode2D )
					{
						List<Vector3> __0x10214 = new List<Vector3>( 64 );
						for( double __0x10215 = 0; __0x10215 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10215 += __0x10193 )
						{
							Vector3 __0x10216 = __0x10190;
							__0x10216 += __0x10196 * Math.Cos( __0x10215 ) * __0x10192;
							__0x10216 += CameraSettings.Up * Math.Sin( __0x10215 ) * __0x10192;
							__0x10214.Add( __0x10216 );
						}
						if( !__0x10200 )
							DebugGeometry.SetColor( ( __0x10187 == Axis.Radius ) ? __0x10180 : __0x10184, false );
						AddPolygonalChain( __0x10214.ToArray(), __0x10191, __0x10201 );
					}
					
					
					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x10217 = new List<Vector3>( 64 );
						List<bool> __0x10218 = new List<bool>( 64 );
						for( double __0x10219 = 0; __0x10219 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10219 += __0x10193 )
						{
							Vector3 __0x10220 = __0x10190 + __0x10198 * ( new Vector3( 0, Math.Sin( __0x10219 ),
								Math.Cos( __0x10219 ) ) * __0x10194 );
							__0x10217.Add( __0x10220 );
							bool __0x10221 = __0x10430( __0x10220 ) > __0x10195;
							__0x10218.Add( __0x10221 );
							
							
						}
						if( !__0x10200 )
							DebugGeometry.SetColor( ( __0x10187 == Axis.X ) ? __0x10180 : __0x10181, false );

						List<Vector3> __0x10222 = new List<Vector3>( 64 );
						for( int __0x10223 = 0; __0x10223 < __0x10217.Count; __0x10223++ )
						{
							if( !__0x10218[ __0x10223 ] )
							{
								__0x10222.Add( __0x10217[ __0x10223 ] );
							}
							else
							{
								if( __0x10222.Count != 0 )
								{
									AddPolygonalChain( __0x10222.ToArray(), __0x10191, __0x10201 );
									__0x10222.Clear();
								}
							}
						}
						if( __0x10222.Count != 0 )
						{
							AddPolygonalChain( __0x10222.ToArray(), __0x10191, __0x10201 );
							__0x10222.Clear();
						}
					}
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x10224 = new List<Vector3>( 64 );
						List<bool> __0x10225 = new List<bool>( 64 );
						for( double __0x10226 = 0; __0x10226 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10226 += __0x10193 )
						{
							Vector3 __0x10227 = __0x10190 + __0x10198 * ( new Vector3( Math.Sin( __0x10226 ), 0,
								Math.Cos( __0x10226 ) ) * __0x10194 );
							__0x10224.Add( __0x10227 );
							bool __0x10228 = __0x10430( __0x10227 ) > __0x10195;
							__0x10225.Add( __0x10228 );
							
							
						}
						if( !__0x10200 )
							DebugGeometry.SetColor( ( __0x10187 == Axis.Y ) ? __0x10180 : __0x10182, false );

						List<Vector3> __0x10229 = new List<Vector3>( 64 );
						for( int __0x10230 = 0; __0x10230 < __0x10224.Count; __0x10230++ )
						{
							if( !__0x10225[ __0x10230 ] )
							{
								__0x10229.Add( __0x10224[ __0x10230 ] );
							}
							else
							{
								if( __0x10229.Count != 0 )
								{
									AddPolygonalChain( __0x10229.ToArray(), __0x10191, __0x10201 );
									__0x10229.Clear();
								}
							}
						}
						if( __0x10229.Count != 0 )
						{
							AddPolygonalChain( __0x10229.ToArray(), __0x10191, __0x10201 );
							__0x10229.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					{
						List<Vector3> __0x10231 = new List<Vector3>( 64 );
						List<bool> __0x10232 = new List<bool>( 64 );
						for( double __0x10233 = 0; __0x10233 <= MathEx.PI * 2 + __0x10193 * .5f; __0x10233 += __0x10193 )
						{
							Vector3 __0x10234 = __0x10190 + __0x10198 * ( new Vector3( Math.Sin( __0x10233 ),
								Math.Cos( __0x10233 ), 0 ) * __0x10194 );
							__0x10231.Add( __0x10234 );
							bool __0x10235 = __0x10430( __0x10234 ) > __0x10195;
							if( Owner.SceneMode2D )
								__0x10235 = false;
							__0x10232.Add( __0x10235 );
							
							
						}
						if( !__0x10200 )
							DebugGeometry.SetColor( ( __0x10187 == Axis.Z ) ? __0x10180 : __0x10183, false );

						List<Vector3> __0x10236 = new List<Vector3>( 64 );
						for( int __0x10237 = 0; __0x10237 < __0x10231.Count; __0x10237++ )
						{
							if( !__0x10232[ __0x10237 ] )
							{
								__0x10236.Add( __0x10231[ __0x10237 ] );
							}
							else
							{
								if( __0x10236.Count != 0 )
								{
									AddPolygonalChain( __0x10236.ToArray(), __0x10191, __0x10201 );
									__0x10236.Clear();
								}
							}
						}
						if( __0x10236.Count != 0 )
						{
							AddPolygonalChain( __0x10236.ToArray(), __0x10191, __0x10201 );
							__0x10236.Clear();
						}
					}
					
					
					
					
					
					
					
					
					
					

					
					if( __0x10187 != Axis.None && __0x10187 != Axis.InnerCircle )
					{
						Plane __0x10238 = new Plane();
						switch( __0x10187 )
						{
						case Axis.X: __0x10238 = Plane.FromPointAndNormal( __0x10190, __0x10432() * Vector3.XAxis ); break;
						case Axis.Y: __0x10238 = Plane.FromPointAndNormal( __0x10190, __0x10432() * Vector3.YAxis ); break;
						case Axis.Z: __0x10238 = Plane.FromPointAndNormal( __0x10190, __0x10432() * Vector3.ZAxis ); break;
						case Axis.Radius: __0x10238 = Plane.FromPointAndNormal( __0x10190, CameraSettings.Direction ); break;
						}

						Vector2 __0x10239;
						if( modify_Activated || __0x10111 != null )
							__0x10239 = __0x10116;
						else
							__0x10239 = Viewport.MousePosition;
						Ray __0x10240 = CameraSettings.GetRayByScreenCoordinates( __0x10239 );

						Vector3 __0x10241;
						if( __0x10238.Intersects( __0x10240, out __0x10241 ) )
						{
							Vector3 __0x10242 = ( __0x10241 - __0x10190 ).GetNormalize();
							Vector3 __0x10243;
							if( __0x10187 == Axis.Radius )
								__0x10243 = __0x10190 + __0x10242 * __0x10192;
							else
								__0x10243 = __0x10190 + __0x10242 * __0x10194;

							double __0x10244 = __0x10192 * .3f;

							Vector3 __0x10245 = Vector3.Cross( __0x10242, __0x10238.Normal );
							Vector3 __0x10246 = __0x10243 + __0x10245 * __0x10244;
							Vector3 __0x10247 = __0x10243 - __0x10245 * __0x10244;

							if( !__0x10200 )
								DebugGeometry.SetColor( __0x10180, false );

							{
								Vector3 __0x10248 = ( __0x10246 - __0x10243 ).GetNormalize();
								AddCone(
									__0x10243 + __0x10248 * __0x10244 / 2,
									__0x10246,
									__0x10244 / 8, __0x10191, __0x10201 );
							}
							{
								Vector3 __0x10249 = ( __0x10247 - __0x10243 ).GetNormalize();
								AddCone(
									__0x10243 + __0x10249 * __0x10244 / 2,
									__0x10247,
									__0x10244 / 8, __0x10191, __0x10201 );
							}
						}
					}
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10404() )
					return;

				var __0x10250 = Viewport.CanvasRenderer;
				Vector2 __0x10251 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();

				Axis __0x10252 = Axis.None;
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated && !modify_Prepare )
					{
						Vector2 __0x10253;
						Radian __0x10254;
						__0x10252 = __0x10429( out __0x10253, out __0x10254 );
					}
					else
						__0x10252 = __0x10113;
				}

				
				if( __0x9710 != null && __0x10252 != Axis.None )
					ViewportControl.OneFrameChangeCursor = __0x9710;

				
				if( modify_Activated && !string.IsNullOrEmpty( __0x10117 ) )
				{
					Vector2 __0x10255;
					if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10395(), out __0x10255 ) )
					{
						double __0x10256 = ( ArrowPixelSize / __0x10251.Y ) * 1.2f;
						Vector2 __0x10257 = new Vector2( __0x10255.X, __0x10255.Y - __0x10256 );
						AddTextWithShadow( __0x10250, __0x10117, __0x10257, EHorizontalAlignment.Center, EVerticalAlignment.Bottom,
							new ColorValue( 1, 1, 0 ), 2 );
					}
				}
			}
		}
	}
}



namespace NeoAxis.Editor
{
	public partial class TransformTool
	{
		class __0x10471 : ModeClass
		{
			Vector2 __0x10258;
			Vector2 __0x10259;
			TransformOfObject[] __0x10260;
			Vector3 __0x10261;
			__0x10472 __0x10262;
			string __0x10263 = "";

			

			struct __0x10472
			{
				public bool x;
				public bool y;
				public bool z;

				public __0x10472( bool x, bool y, bool z )
				{
					this.x = x;
					this.y = y;
					this.z = z;
				}

				public int TrueCount
				{
					get { return ( x ? 1 : 0 ) + ( y ? 1 : 0 ) + ( z ? 1 : 0 ); }
				}
			}

			

			Quaternion __0x10434()
			{
				if( Owner.Objects.Count == 0 )
					return Quaternion.Identity;
				return Owner.Objects[ 0 ].Rotation;
			}

			void __0x10435( out Vector3 __0x10460, out Vector3 __0x10461, out Vector3 __0x10462 )
			{
				Vector3 __0x10264 = Owner.__0x10395();
				Quaternion __0x10265 = __0x10434();
				double __0x10266 = GetSize();

				{
					Vector3 __0x10267 = __0x10264 + __0x10265 * new Vector3( __0x10266, 0, 0 );
					Vector3 __0x10268 = __0x10264 - __0x10265 * new Vector3( __0x10266, 0, 0 );
					Vector3 __0x10269 = ( ( __0x10437( __0x10267 ) < __0x10437( __0x10268 ) ) || Owner.SceneMode2D ) ? __0x10267 : __0x10268;
					__0x10460 = __0x10269 - __0x10264;
				}

				{
					Vector3 __0x10270 = __0x10264 + __0x10265 * new Vector3( 0, __0x10266, 0 );
					Vector3 __0x10271 = __0x10264 - __0x10265 * new Vector3( 0, __0x10266, 0 );
					Vector3 __0x10272 = ( ( __0x10437( __0x10270 ) < __0x10437( __0x10271 ) ) || Owner.SceneMode2D ) ? __0x10270 : __0x10271;
					__0x10461 = __0x10272 - __0x10264;
				}

				{
					Vector3 __0x10273 = __0x10264 + __0x10265 * new Vector3( 0, 0, __0x10266 );
					Vector3 __0x10274 = __0x10264 - __0x10265 * new Vector3( 0, 0, __0x10266 );
					Vector3 __0x10275 = ( ( __0x10437( __0x10273 ) < __0x10437( __0x10274 ) ) || Owner.SceneMode2D ) ? __0x10273 : __0x10274;
					__0x10462 = __0x10275 - __0x10264;
				}
			}

			__0x10472 __0x10436()
			{
				Trace.Assert( Owner.Objects.Count != 0 );

				Vector3 __0x10276 = Owner.__0x10395();
				double __0x10277 = GetSize();
				if( __0x10277 == 0 )
					return new __0x10472( false, false, false );

				Vector3 __0x10278, __0x10279, __0x10280;
				__0x10435( out __0x10278, out __0x10279, out __0x10280 );

				
				{
					Vector3 __0x10281 = __0x10276 + __0x10278 * .5f;
					Vector3 __0x10282 = __0x10276 + __0x10279 * .5f;
					Vector3 __0x10283 = __0x10276 + __0x10280 * .5f;
					if( IsMouseOverTriangle( __0x10283, __0x10281, __0x10282 ) )
						return new __0x10472( true, true, true );
				}

				
				{
					Vector3 __0x10284 = __0x10276 + __0x10278 * .7f;
					Vector3 __0x10285 = __0x10276 + __0x10279 * .7f;
					Vector3 __0x10286 = __0x10276 + __0x10278 * .5f;
					Vector3 __0x10287 = __0x10276 + __0x10279 * .5f;
					if( IsMouseOverTriangle( __0x10286, __0x10284, __0x10285 ) || IsMouseOverTriangle( __0x10285, __0x10287, __0x10286 ) )
						return new __0x10472( true, true, false );
				}

				
				{
					Vector3 __0x10288 = __0x10276 + __0x10278 * .7f;
					Vector3 __0x10289 = __0x10276 + __0x10280 * .7f;
					Vector3 __0x10290 = __0x10276 + __0x10278 * .5f;
					Vector3 __0x10291 = __0x10276 + __0x10280 * .5f;
					if( IsMouseOverTriangle( __0x10290, __0x10288, __0x10289 ) || IsMouseOverTriangle( __0x10289, __0x10291, __0x10290 ) )
						return new __0x10472( true, false, true );
				}

				
				{
					Vector3 __0x10292 = __0x10276 + __0x10279 * .7f;
					Vector3 __0x10293 = __0x10276 + __0x10280 * .7f;
					Vector3 __0x10294 = __0x10276 + __0x10279 * .5f;
					Vector3 __0x10295 = __0x10276 + __0x10280 * .5f;
					if( IsMouseOverTriangle( __0x10294, __0x10292, __0x10293 ) || IsMouseOverTriangle( __0x10293, __0x10295, __0x10294 ) )
						return new __0x10472( false, true, true );
				}

				
				if( IsMouseNearLine( __0x10276, __0x10276 + __0x10278 ) )
					return new __0x10472( true, false, false );

				
				if( IsMouseNearLine( __0x10276, __0x10276 + __0x10279 ) )
					return new __0x10472( false, true, false );

				
				if( IsMouseNearLine( __0x10276, __0x10276 + __0x10280 ) )
					return new __0x10472( false, false, true );

				return new __0x10472( false, false, false );
			}

			double __0x10437( Vector3 __0x10463 )
			{
				return ( Viewport.CameraSettings.Position - __0x10463 ).Length();
			}

			internal protected override bool OnMouseOverAxis()
			{
				if( !Owner.__0x10405() )
					return false;
				__0x10472 __0x10296 = __0x10436();
				return __0x10296.TrueCount != 0;
			}

			protected override bool OnTryBeginModify()
			{
				if( !Owner.__0x10405() )
					return false;

				__0x10472 __0x10297 = __0x10436();
				if( __0x10297.TrueCount != 0 )
				{
					__0x10261 = Owner.__0x10395();
					Vector2 __0x10298;
					if( CameraSettings.ProjectToScreenCoordinates( __0x10261, out __0x10298 ) )
					{
						__0x10258 = Viewport.MousePosition - __0x10298;
						__0x10259 = Viewport.MousePosition;
						
						__0x10262 = __0x10297;
						__0x10263 = "";
						__0x10260 = new TransformOfObject[ Owner.Objects.Count ];
						for( int __0x10299 = 0; __0x10299 < Owner.Objects.Count; __0x10299++ )
						{
							TransformToolObject __0x10300 = Owner.Objects[ __0x10299 ];
							__0x10260[ __0x10299 ] = new TransformOfObject( __0x10300.Position, __0x10300.Rotation, __0x10300.Scale );
						}
						return true;
					}
				}

				return base.OnTryBeginModify();
			}

			public override void OnUpdateInitialObjectsTransform()
			{
				__0x10260 = new TransformOfObject[ Owner.Objects.Count ];
				for( int __0x10301 = 0; __0x10301 < Owner.Objects.Count; __0x10301++ )
				{
					TransformToolObject __0x10302 = Owner.Objects[ __0x10301 ];
					__0x10260[ __0x10301 ] = new TransformOfObject( __0x10302.Position, __0x10302.Rotation, __0x10302.Scale );
				}
			}

			protected override void OnCommitModify()
			{
				base.OnCommitModify();
				__0x10260 = null;
			}

			internal protected override void OnCancelModify()
			{
				base.OnCancelModify();
				__0x10438();
				__0x10260 = null;
			}

			void __0x10438()
			{
				if( __0x10260 != null && Owner.Objects.Count == __0x10260.Length )
				{
					for( int __0x10303 = 0; __0x10303 < Owner.Objects.Count; __0x10303++ )
					{
						Owner.Objects[ __0x10303 ].Position = __0x10260[ __0x10303 ].position;
						Owner.Objects[ __0x10303 ].Scale = __0x10260[ __0x10303 ].scale;
					}
				}
			}

			public override void OnMouseMove( Vector2 mouse )
			{
				base.OnMouseMove( mouse );

				if( modify_Activated && !Viewport.MouseRelativeMode )
				{
					UpdateCursorTransitionOnScreenBorder();

					Vector2 __0x10304 = Owner.ViewportControl.Viewport.SizeInPixels.ToVector2();
					Vector2 __0x10305 = mouse + cursorTransitionOnScreenBorderOffset / __0x10304;

					Vector2 __0x10306 = __0x10305 - __0x10258;
					Ray __0x10307 = CameraSettings.GetRayByScreenCoordinates( __0x10306 );

					Vector3 __0x10308 = __0x10261;
					double __0x10309 = GetSize();

					if( __0x10309 == 0 )
						return;

					Vector3 __0x10310, __0x10311, __0x10312;
					__0x10435( out __0x10310, out __0x10311, out __0x10312 );

					double __0x10313 = 0;

					if( !double.IsNaN( __0x10307.Direction.X ) )
					{
						Vector2 __0x10314 = ( __0x10305 - __0x10259 ) * __0x10304;
						double __0x10315 = Math.Atan2( -__0x10314.Y, __0x10314.X );

						if( __0x10262.TrueCount == 3 )
						{
							__0x10313 = __0x10305.Y - __0x10259.Y;
							__0x10313 *= -1;
							__0x10313 *= __0x10304.Y;
						}
						else
						{
							Vector2 __0x10316;
							if( CameraSettings.ProjectToScreenCoordinates( __0x10261, out __0x10316 ) )
							{
								__0x10316 *= __0x10304;

								__0x10313 = 0;

								if( __0x10262.x )
								{
									Vector2 __0x10317;
									CameraSettings.ProjectToScreenCoordinates( __0x10308 + __0x10310, out __0x10317 );
									if( __0x10317.X != 0 && __0x10317.Y != 0 )
									{
										__0x10317 *= __0x10304;
										Vector2 __0x10318 = __0x10317 - __0x10316;
										double __0x10319 = Math.Atan2( -__0x10318.Y, __0x10318.X );
										double __0x10320 = __0x10315 - __0x10319;
										__0x10320 = MathEx.RadianNormalize360( __0x10320 );
										double __0x10321 = Math.Cos( __0x10320 ) * __0x10314.Length();
										__0x10313 += __0x10321;
									}
								}

								if( __0x10262.y )
								{
									Vector2 __0x10322;
									CameraSettings.ProjectToScreenCoordinates( __0x10308 + __0x10311, out __0x10322 );
									if( __0x10322.X != 0 && __0x10322.Y != 0 )
									{
										__0x10322 *= __0x10304;
										Vector2 __0x10323 = __0x10322 - __0x10316;
										double __0x10324 = Math.Atan2( -__0x10323.Y, __0x10323.X );
										double __0x10325 = __0x10315 - __0x10324;
										__0x10325 = MathEx.RadianNormalize360( __0x10325 );
										double __0x10326 = Math.Cos( __0x10325 ) * __0x10314.Length();
										__0x10313 += __0x10326;
									}
								}

								if( __0x10262.z )
								{
									Vector2 __0x10327;
									CameraSettings.ProjectToScreenCoordinates( __0x10308 + __0x10312, out __0x10327 );
									if( __0x10327.X != 0 && __0x10327.Y != 0 )
									{
										__0x10327 *= __0x10304;
										Vector2 __0x10328 = __0x10327 - __0x10316;
										double __0x10329 = Math.Atan2( -__0x10328.Y, __0x10328.X );
										double __0x10330 = __0x10315 - __0x10329;
										__0x10330 = MathEx.RadianNormalize360( __0x10330 );
										double __0x10331 = Math.Cos( __0x10330 ) * __0x10314.Length();
										__0x10313 += __0x10331;
									}
								}
							}
						}

						const double __0x10332 = .01f;
						__0x10313 *= __0x10332;


						double __0x10333;
						if( __0x10313 > 0 )
						{
							double __0x10334 = Owner.__0x10401();
							if( __0x10334 != 0 )
							{
								__0x10313 += __0x10334 / 2;
								__0x10313 /= __0x10334;
								__0x10313 = (int)__0x10313;
								__0x10313 *= __0x10334;
							}

							__0x10333 = __0x10313 + 1.0f;
						}
						else
						{
							double __0x10335 = Owner.__0x10401();
							if( __0x10335 != 0 )
							{
								__0x10313 -= __0x10335 / 2;
								__0x10313 /= __0x10335;
								__0x10313 = (int)__0x10313;
								__0x10313 *= __0x10335;
							}

							__0x10333 = 1.0f / ( 1.0f - __0x10313 );
						}

						Vector3 __0x10336 = new Vector3( __0x10262.x ? __0x10333 : 1, __0x10262.y ? __0x10333 : 1, __0x10262.z ? __0x10333 : 1 );

						
						if( __0x10260 != null && Owner.Objects.Count == __0x10260.Length )
							Owner.OnScaleModeUpdateObjects( __0x10260, __0x10261, __0x10336 );

						__0x10263 = string.Format( "[{0} {1} {2}]", __0x10336.X.ToString( "F2" ), __0x10336.Y.ToString( "F2" ),
							__0x10336.Z.ToString( "F2" ) );
					}
				}
			}

			public override bool OnIsMouseOverAxisToActivation()
			{
				if( !Owner.__0x10405() )
					return false;

				__0x10472 __0x10337 = new __0x10472( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10337 = __0x10436();
					else
						__0x10337 = __0x10262;
				}

				Vector3 __0x10338 = Owner.__0x10395();
				double __0x10339 = GetLineWorldThickness( __0x10338 );
				double __0x10340 = GetSize();
				if( __0x10340 == 0 )
					return false;

				return __0x10337.TrueCount != 0;
			}

			public override void OnRender()
			{
				base.OnRender();

				if( !Owner.__0x10405() )
					return;

				ColorValue __0x10341 = new ColorValue( 1, 1, 0 );
				ColorValue __0x10342 = new ColorValue( 1, 0, 0 );
				ColorValue __0x10343 = new ColorValue( 0, 1, 0 );
				ColorValue __0x10344 = new ColorValue( 0, 0, 1 );
				ColorValue __0x10345 = new ColorValue( 0, 0, 0, ProjectSettings.Get.TransformToolShadowIntensity );

				__0x10472 __0x10346 = new __0x10472( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10346 = __0x10436();
					else
						__0x10346 = __0x10262;
				}

				Vector3 __0x10347 = Owner.__0x10395();
				double __0x10348 = GetLineWorldThickness( __0x10347 );
				double __0x10349 = GetSize();
				if( __0x10349 == 0 )
					return;

				
				

				Vector3 __0x10350, __0x10351, __0x10352;
				__0x10435( out __0x10350, out __0x10351, out __0x10352 );

				
				for( int __0x10353 = 0; __0x10353 < 5; __0x10353++ )
				{
					bool __0x10354 = __0x10353 <= 3;
					if( __0x10354 && ProjectSettings.Get.TransformToolShadowIntensity == 0 )
						continue;

					var __0x10355 = 0.0;
					if( __0x10354 )
						__0x10355 = ( (double)__0x10353 + 1.0 ) / 4.0;

					if( __0x10354 )
						DebugGeometry.SetColor( __0x10345 * new ColorValue( 1, 1, 1, 0.25 ), false );

					
					if( !__0x10354 )
						DebugGeometry.SetColor( ( __0x10346.x && __0x10346.TrueCount != 3 ) ? __0x10341 : __0x10342, false );
					AddLine( __0x10347, __0x10347 + __0x10350, __0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10350, __0x10349 / 80 ), __0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10350, __0x10349 / 40 ), __0x10348, __0x10355 );

					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.x && __0x10346.y ? __0x10341 : __0x10342, false );
					AddLine( __0x10347 + __0x10350 * .7f, __0x10347 + ( __0x10350 * .7f + __0x10351 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10350 * .5f, __0x10347 + ( __0x10350 * .5f + __0x10351 * .5f ) / 2,
						 __0x10348, __0x10355 );
					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.x && __0x10346.z ? __0x10341 : __0x10342, false );
					AddLine( __0x10347 + __0x10350 * .7f, __0x10347 + ( __0x10350 * .7f + __0x10352 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10350 * .5f, __0x10347 + ( __0x10350 * .5f + __0x10352 * .5f ) / 2,
						 __0x10348, __0x10355 );

					
					if( !__0x10354 )
						DebugGeometry.SetColor( ( __0x10346.y && __0x10346.TrueCount != 3 ) ? __0x10341 : __0x10343, false );
					AddLine( __0x10347, __0x10347 + __0x10351,
						 __0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10351, __0x10349 / 80 ), __0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10351, __0x10349 / 40 ), __0x10348, __0x10355 );

					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.y && __0x10346.x ? __0x10341 : __0x10343, false );
					AddLine( __0x10347 + __0x10351 * .7f, __0x10347 + ( __0x10351 * .7f + __0x10350 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10351 * .5f, __0x10347 + ( __0x10351 * .5f + __0x10350 * .5f ) / 2,
						 __0x10348, __0x10355 );
					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.y && __0x10346.z ? __0x10341 : __0x10343, false );
					AddLine( __0x10347 + __0x10351 * .7f, __0x10347 + ( __0x10351 * .7f + __0x10352 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10351 * .5f, __0x10347 + ( __0x10351 * .5f + __0x10352 * .5f ) / 2,
						 __0x10348, __0x10355 );

					
					if( !__0x10354 )
						DebugGeometry.SetColor( ( __0x10346.z && __0x10346.TrueCount != 3 ) ? __0x10341 : __0x10344, false );
					AddLine( __0x10347, __0x10347 + __0x10352,
						__0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10352, __0x10349 / 80 ), __0x10348, __0x10355 );
					AddSphere( new Sphere( __0x10347 + __0x10352, __0x10349 / 40 ), __0x10348, __0x10355 );

					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.z && __0x10346.x ? __0x10341 : __0x10344, false );
					AddLine( __0x10347 + __0x10352 * .7f, __0x10347 + ( __0x10352 * .7f + __0x10350 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10352 * .5f, __0x10347 + ( __0x10352 * .5f + __0x10350 * .5f ) / 2,
						 __0x10348, __0x10355 );
					if( !__0x10354 )
						DebugGeometry.SetColor( __0x10346.z && __0x10346.y ? __0x10341 : __0x10344, false );
					AddLine( __0x10347 + __0x10352 * .7f, __0x10347 + ( __0x10352 * .7f + __0x10351 * .7f ) / 2,
						 __0x10348, __0x10355 );
					AddLine( __0x10347 + __0x10352 * .5f, __0x10347 + ( __0x10352 * .5f + __0x10351 * .5f ) / 2,
						 __0x10348, __0x10355 );
				}

				
				if( __0x10346.TrueCount >= 2 )
				{
					DebugGeometry.SetColor( new ColorValue( 1, 1, 0, .4f ), false );

					List<Vector3> __0x10356 = new List<Vector3>();
					List<int> __0x10357 = new List<int>();

					if( __0x10346.TrueCount == 3 )
					{
						__0x10356.Add( __0x10347 + __0x10350 * .5f );
						__0x10356.Add( __0x10347 + __0x10351 * .5f );
						__0x10356.Add( __0x10347 + __0x10352 * .5f );

						__0x10357.Add( 0 ); __0x10357.Add( 1 ); __0x10357.Add( 2 );
					}
					else
					{
						Vector3 __0x10358;
						Vector3 __0x10359;

						if( __0x10346.x )
						{
							__0x10358 = __0x10350;
							__0x10359 = __0x10346.y ? __0x10351 : __0x10352;
						}
						else
						{
							__0x10358 = __0x10351;
							__0x10359 = __0x10352;
						}

						__0x10356.Add( __0x10347 + __0x10358 * .5f );
						__0x10356.Add( __0x10347 + __0x10358 * .7f );
						__0x10356.Add( __0x10347 + __0x10359 * .7f );
						__0x10356.Add( __0x10347 + __0x10359 * .5f );

						__0x10357.Add( 0 ); __0x10357.Add( 1 ); __0x10357.Add( 2 );
						__0x10357.Add( 2 ); __0x10357.Add( 3 ); __0x10357.Add( 0 );
					}

					DebugGeometry.AddTriangles( __0x10356, __0x10357, Matrix4.Identity, false, false );
				}

				
			}

			public override void OnRenderUI()
			{
				base.OnRenderUI();

				if( !Owner.__0x10405() )
					return;

				var __0x10360 = Viewport.CanvasRenderer;
				Vector2 __0x10361 = Viewport.SizeInPixels.ToVector2();

				__0x10472 __0x10362 = new __0x10472( false, false, false );
				if( !Viewport.MouseRelativeMode )
				{
					if( !modify_Activated )
						__0x10362 = __0x10436();
					else
						__0x10362 = __0x10262;
				}

				
				if( __0x9711 != null && __0x10362.TrueCount != 0 )
					ViewportControl.OneFrameChangeCursor = __0x9711;

				Vector3 __0x10363, __0x10364, __0x10365;
				__0x10435( out __0x10363, out __0x10364, out __0x10365 );

				Vector3 __0x10366 = Owner.__0x10395();
				Quaternion __0x10367 = __0x10434();
				double __0x10368 = GetSize();
				if( __0x10368 != 0 )
				{
					
					{
						double __0x10369 = ( ArrowPixelSize / 20.0f ) / __0x10361.Y;

						Vector2 __0x10370;

						if( CameraSettings.ProjectToScreenCoordinates( __0x10366 + __0x10363, out __0x10370 ) )
						{
							Vector2 __0x10371 = new Vector2( __0x10370.X, __0x10370.Y - __0x10369 );
							ColorValue __0x10372 = __0x10362.x ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
							AddTextWithShadow( __0x10360, "x", __0x10371, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10372, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x10366 + __0x10364, out __0x10370 ) )
						{
							Vector2 __0x10373 = new Vector2( __0x10370.X, __0x10370.Y - __0x10369 );
							ColorValue __0x10374 = __0x10362.y ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 1, 0 );
							AddTextWithShadow( __0x10360, "y", __0x10373, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10374, 1 );
						}

						if( CameraSettings.ProjectToScreenCoordinates( __0x10366 + __0x10365, out __0x10370 ) )
						{
							Vector2 __0x10375 = new Vector2( __0x10370.X, __0x10370.Y - __0x10369 );
							ColorValue __0x10376 = __0x10362.z ? new ColorValue( 1, 1, 0 ) : new ColorValue( 0, 0, 1 );
							AddTextWithShadow( __0x10360, "z", __0x10375, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, __0x10376, 1 );
						}
					}

					
					if( modify_Activated && !string.IsNullOrEmpty( __0x10263 ) )
					{
						Vector2 __0x10377;
						if( CameraSettings.ProjectToScreenCoordinates( Owner.__0x10395(), out __0x10377 ) )
						{
							double __0x10378 = ( ArrowPixelSize / __0x10361.Y ) * 1.2f;
							Vector2 __0x10379 = new Vector2( __0x10377.X, __0x10377.Y - __0x10378 );
							AddTextWithShadow( __0x10360, __0x10263, __0x10379, EHorizontalAlignment.Center, EVerticalAlignment.Bottom, new ColorValue( 1, 1, 0 ), 2 );
						}
					}
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Represents undo/redo system.
	/// </summary>
	public class UndoSystem
	{
		int __0x10473;
		List<Action> __0x10474 = new List<Action>();
		List<Action> __0x10475 = new List<Action>();

		

		/// <summary>
		/// Represents an action of undo/redo system.
		/// </summary>
		public abstract class Action
		{
			protected internal abstract void DoUndo();
			protected internal abstract void DoRedo();

			protected internal abstract void Destroy();
		}

		

		public event EventHandler ListOfActionsChanged;
		public event EventHandler WasCleaned;

		public delegate void ActionDelegate( Action __0x10485 );
		public event ActionDelegate ActionUndo;
		public event ActionDelegate ActionRedo;
		public event ActionDelegate ActionDestroy;

		public UndoSystem( int maxLevel )
		{
			this.__0x10473 = maxLevel;
		}

		
		public void Dispose()
		{
			Clear();
		}

		public int MaxLevel
		{
			get { return __0x10473; }
			set { __0x10473 = value; }
		}

		public void Clear()
		{
			bool __0x10476 = __0x10475.Count != 0 || __0x10474.Count != 0;

			foreach( Action __0x10482 in __0x10474 )
			{
				__0x10482.Destroy();
				ActionDestroy?.Invoke( __0x10482 );
			}
			__0x10474.Clear();

			foreach( Action __0x10483 in __0x10475 )
			{
				__0x10483.Destroy();
				ActionDestroy?.Invoke( __0x10483 );
			}
			__0x10475.Clear();

			if( __0x10476 )
			{
				ListOfActionsChanged?.Invoke( this, EventArgs.Empty );
			}

			WasCleaned?.Invoke( this, EventArgs.Empty );
		}

		public void CommitAction( Action action )
		{
			foreach( Action __0x10484 in __0x10474 )
			{
				__0x10484.Destroy();
				ActionDestroy?.Invoke( __0x10484 );
			}
			__0x10474.Clear();

			if( __0x10475.Count + 1 >= __0x10473 )
			{
				__0x10475[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10475[ 0 ] );
				__0x10475.RemoveAt( 0 );
			}

			__0x10475.Add( action );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );
		}

		public Action GetTopUndoAction()
		{
			if( __0x10475.Count == 0 )
				return null;
			return __0x10475[ __0x10475.Count - 1 ];
		}

		public Action GetTopRedoAction()
		{
			if( __0x10474.Count == 0 )
				return null;
			return __0x10474[ __0x10474.Count - 1 ];
		}

		public bool DoUndo()
		{
			if( __0x10475.Count == 0 )
				return false;

			
			Action __0x10477 = __0x10475[ __0x10475.Count - 1 ];
			__0x10475.RemoveAt( __0x10475.Count - 1 );

			
			__0x10477.DoUndo();
			ActionUndo?.Invoke( __0x10477 );

			
			if( __0x10474.Count + 1 >= __0x10473 )
			{
				__0x10474[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10474[ 0 ] );
				__0x10474.RemoveAt( 0 );
			}
			__0x10474.Add( __0x10477 );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );

			return true;
		}

		public bool DoRedo()
		{
			if( __0x10474.Count == 0 )
				return false;

			
			Action __0x10478 = __0x10474[ __0x10474.Count - 1 ];
			__0x10474.RemoveAt( __0x10474.Count - 1 );

			
			__0x10478.DoRedo();
			ActionRedo?.Invoke( __0x10478 );

			
			if( __0x10475.Count + 1 >= __0x10473 )
			{
				__0x10475[ 0 ].Destroy();
				ActionDestroy?.Invoke( __0x10475[ 0 ] );
				__0x10475.RemoveAt( 0 );
			}
			__0x10475.Add( __0x10478 );

			ListOfActionsChanged?.Invoke( this, EventArgs.Empty );

			return true;
		}

		public string[] DumpDebugToLines()
		{
			List<string> __0x10479 = new List<string>();

			__0x10479.Add( "UndoSystem" );

			__0x10479.Add( "" );
			__0x10479.Add( "Undo actions:" );
			for( int __0x10480 = 0; __0x10480 < __0x10475.Count; __0x10480++ )
				__0x10479.Add( __0x10475[ __0x10480 ].ToString() );

			__0x10479.Add( "" );
			__0x10479.Add( "Redo actions:" );
			for( int __0x10481 = __0x10474.Count - 1; __0x10481 >= 0; __0x10481-- )
				__0x10479.Add( __0x10474[ __0x10481 ].ToString() );

			return __0x10479.ToArray();
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Compound action of undo/redo system.
	/// </summary>
	public class UndoMultiAction : UndoSystem.Action
	{
		List<UndoSystem.Action> __0x10486;

		public UndoMultiAction()
		{
			__0x10486 = new List<UndoSystem.Action>();
		}

		public UndoMultiAction( ICollection<UndoSystem.Action> actions )
		{
			this.__0x10486 = new List<UndoSystem.Action>( actions );
		}

		public void AddAction( UndoSystem.Action action )
		{
			__0x10486.Add( action );
		}

		public List<UndoSystem.Action> Actions
		{
			get { return __0x10486; }
		}

		protected internal override void Destroy()
		{
			for( int __0x10487 = 0; __0x10487 < __0x10486.Count; __0x10487++ )
				__0x10486[ __0x10487 ].Destroy();
		}

		protected internal override void DoRedo()
		{
			for( int __0x10488 = 0; __0x10488 < __0x10486.Count; __0x10488++ )
				__0x10486[ __0x10488 ].DoRedo();

			__0x10486.Reverse();
		}

		protected internal override void DoUndo()
		{
			for( int __0x10489 = 0; __0x10489 < __0x10486.Count; __0x10489++ )
				__0x10486[ __0x10489 ].DoUndo();

			__0x10486.Reverse();
		}

		
		
		
		
		
		
		
		

		
		
		
		
	}

	

	
	
	
	

	
	
	
	
	

	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	
	
	
	
	
	

	

	
	/// <summary>
	/// The action of undo/redo system for creating and deleting objects.
	/// </summary>
	public class UndoActionComponentCreateDelete : UndoSystem.Action
	{
		DocumentInstance __0x10490;
		List<Component> __0x10491;
		bool __0x10492;
		Dictionary<Component, __0x10542> __0x10493 = new Dictionary<Component, __0x10542>();

		class __0x10542
		{
			public Component parent;
			public int insertIndex;
		}

		

		public UndoActionComponentCreateDelete( DocumentInstance document, ICollection<Component> objects, bool create )
		{
			this.__0x10490 = document;
			this.__0x10491 = new List<Component>( objects );
			this.__0x10492 = create;

			
			if( !create )
			{
				CollectionUtility.InsertionSort( this.__0x10491, delegate ( Component __0x10538, Component __0x10539 )
				{
					if( __0x10538.Parent != null && __0x10538.Parent == __0x10539.Parent )
						return __0x10538.Parent.Components.IndexOf( __0x10538 ) - __0x10539.Parent.Components.IndexOf( __0x10539 );
					return 0;
				} );
			}

			if( !create )
				__0x10534();
		}

		void __0x10533()
		{
			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();
			ESet<ComponentHierarchyController> __0x10494 = new ESet<ComponentHierarchyController>();
			try
			{
				foreach( var __0x10525 in Objects )
				{
					
					if( __0x10525.Disposed )
						continue;

					__0x10493.TryGetValue( __0x10525, out __0x10542 data );
					if( data != null )
					{
						__0x10493.Remove( __0x10525 );

						data.parent.AddComponent( __0x10525, data.insertIndex );

						if( __0x10525.ParentRoot?.HierarchyController != null )
							__0x10494.AddWithCheckAlreadyContained( __0x10525.ParentRoot?.HierarchyController );
					}
				}
			}
			finally
			{
				foreach( var __0x10526 in __0x10494 )
					__0x10526.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}
		}

		void __0x10534()
		{
			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();
			ESet<ComponentHierarchyController> __0x10495 = new ESet<ComponentHierarchyController>();

			List<Component> __0x10496 = new List<Component>();

			try
			{
				foreach( var __0x10527 in Objects )
				{
					var __0x10497 = __0x10527.Parent;
					if( __0x10497 != null )
					{
						__0x10542 __0x10498 = new __0x10542();
						__0x10498.parent = __0x10497;
						__0x10498.insertIndex = __0x10497.Components.IndexOf( __0x10527 );

						__0x10493[ __0x10527 ] = __0x10498;

						__0x10527.RemoveFromParent( true );

						__0x10496.Add( __0x10527 );

						if( __0x10527.ParentRoot?.HierarchyController != null )
							__0x10495.AddWithCheckAlreadyContained( __0x10527.ParentRoot?.HierarchyController );
					}
				}
			}
			finally
			{
				foreach( var __0x10528 in __0x10495 )
					__0x10528.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}

			
			if( __0x10490 != null )
			{
				foreach( var __0x10529 in EditorAPI.GetAllDocumentWindowsOfDocument( __0x10490 ) )
				{
					var __0x10499 = new ESet<object>( __0x10529.SelectedObjectsSet );
					bool __0x10500 = false;

					foreach( var __0x10530 in __0x10496 )
					{
						if( __0x10499.Remove( __0x10530 ) )
							__0x10500 = true;
					}

					if( __0x10500 )
						__0x10529.SelectObjects( __0x10499 );
				}
			}
			
			
			
			
			
			
			
			

			
			

			
			
			
			
		}

		protected internal override void DoUndo()
		{
			if( __0x10492 )
				__0x10534();
			else
				__0x10533();

			__0x10492 = !__0x10492;
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			
			
			
			
			
			
			

			__0x10491.Clear();
		}

		public DocumentInstance Document
		{
			get { return __0x10490; }
		}

		public List<Component> Objects
		{
			get { return __0x10491; }
		}

		public override string ToString()
		{
			return string.Format( "{0}: Objects: {1}", ( __0x10492 ? "Create" : "Delete" ), __0x10491.Count );
		}
	}

	

	/// <summary>
	/// The action of undo/redo system for moving components relative to other components.
	/// </summary>
	public class UndoActionComponentMove : UndoSystem.Action
	{
		DocumentInstance __0x10501;
		Component __0x10502;
		__0x10543 __0x10503 = new __0x10543();

		class __0x10543
		{
			public Component parent;
			public int insertIndex;
		}

		

		public UndoActionComponentMove( DocumentInstance document, Component obj, Component oldParent, int oldIndex )
		{
			this.__0x10501 = document;
			this.__0x10502 = obj;

			__0x10503.parent = oldParent;
			__0x10503.insertIndex = oldIndex;
		}

		void __0x10535()
		{
			
			if( __0x10502.Disposed )
				return;

			if( __0x10503.parent != __0x10502.Parent )
			{
				var __0x10504 = new __0x10543();
				__0x10504.parent = __0x10502.Parent;
				__0x10504.insertIndex = __0x10502.Parent.Components.IndexOf( __0x10502 );

				__0x10502.Parent.RemoveComponent( __0x10502, false );
				__0x10503.parent.AddComponent( __0x10502, __0x10503.insertIndex );

				__0x10503 = __0x10504;
			}
			else
			{
				var __0x10505 = new __0x10543();
				__0x10505.parent = __0x10503.parent;
				__0x10505.insertIndex = __0x10502.Parent.Components.IndexOf( __0x10502 );

				__0x10503.parent.Components.MoveTo( __0x10502, __0x10503.insertIndex );

				__0x10503 = __0x10505;
			}
		}

		protected internal override void DoUndo()
		{
			__0x10535();
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			__0x10502 = null;
		}

		public DocumentInstance Document
		{
			get { return __0x10501; }
		}

		public Component Obj
		{
			get { return __0x10502; }
		}

		public override string ToString()
		{
			return string.Format( "Move: Object: {0}", __0x10502 );
		}
	}

	

	
	
	
	
	
	
	
	
	
	
	

	/// <summary>
	/// The action of undo/redo system for adding and removing items of a list.
	/// </summary>
	public class UndoActionListAddRemove : UndoSystem.Action
	{
		object __0x10506;
		List<int> __0x10507;
		bool __0x10508;
		Dictionary<int, __0x10544> __0x10509 = new Dictionary<int, __0x10544>();

		

		class __0x10544
		{
			public object objectToRestore;
		}

		

		public UndoActionListAddRemove( object list, ICollection<int> objectIndexes, bool add )
		{
			this.__0x10506 = list;
			this.__0x10507 = new List<int>( objectIndexes );

			
			
			

			CollectionUtility.MergeSort( this.__0x10507, delegate ( int __0x10540, int __0x10541 )
			{
				if( __0x10540 < __0x10541 )
					return -1;
				if( __0x10540 > __0x10541 )
					return 1;
				return 0;
			} );

			this.__0x10508 = add;

			if( !add )
				__0x10537();
			
			
			
			
		}

		void __0x10536()
		{
			MethodInfo __0x10510;
			var __0x10511 = __0x10506 as IReferenceList;
			if( __0x10511 != null )
				__0x10510 = __0x10506.GetType().GetMethod( "Insert", new Type[] { typeof( int ), __0x10511.GetItemType() } );
			else
				__0x10510 = __0x10506.GetType().GetMethod( "Insert" );

			foreach( var __0x10531 in ObjectIndexes )
			{
				
				

				__0x10509.TryGetValue( __0x10531, out __0x10544 data );
				if( data != null )
				{
					
					__0x10509.Remove( __0x10531 );

					
					__0x10510.Invoke( __0x10506, new object[] { __0x10531, data.objectToRestore } );
					
				}
			}
			
		}

		void __0x10537()
		{
			var __0x10512 = __0x10506.GetType().GetGenericArguments()[ 0 ];
			MethodInfo __0x10513 = __0x10506.GetType().GetMethod( "RemoveAt" );
			var __0x10514 = __0x10506.GetType().GetProperty( "Item" );

			var __0x10515 = new List<int>( ObjectIndexes );
			__0x10515.Reverse();

			foreach( var __0x10532 in __0x10515 )
			{
				
				var __0x10516 = new __0x10544();
				__0x10516.objectToRestore = __0x10514.GetValue( __0x10506, new object[] { __0x10532 } );
				__0x10509[ __0x10532 ] = __0x10516;

				
				__0x10513.Invoke( __0x10506, new object[] { __0x10532 } );
				
			}
			
		}

		protected internal override void DoUndo()
		{
			if( __0x10508 )
				__0x10537();
			else
				__0x10536();

			__0x10508 = !__0x10508;
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
			
			
			
			
			
			
			__0x10507.Clear();
		}

		public object List
		{
			get { return __0x10506; }
		}

		public List<int> ObjectIndexes
		{
			get { return __0x10507; }
		}

		public override string ToString()
		{
			return string.Format( "{0}: Objects: {1}", ( __0x10508 ? "Add" : "Remove" ), __0x10507.Count );
		}
	}

	

	
	
	
	
	
	

	
	
	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	
	
	
	
	

	

	
	
	

	
	
	

	
	

	
	
	
	

	
	
	

	
	
	
	
	

	

	
	/// <summary>
	/// The action of undo/redo system for changing properties.
	/// </summary>
	public class UndoActionPropertiesChange : UndoSystem.Action
	{
		IList<Item> __0x10517;

		

		
		/// <summary>
		/// Represents an item of <see cref="UndoActionPropertiesChange"/>.
		/// </summary>
		public class Item
		{
			object __0x10518;
			Metadata.Property __0x10519;
			object __0x10520;
			object[] __0x10521;

			public Item( object obj, Metadata.Property property, object restoreValue, object[] indexes = null )
			{
				if( indexes == null )
					indexes = new object[ 0 ];

				if( property == null )
				{
					
					Log.Fatal( "UndoActionPropertiesChange: Item: Constructor: property == null." );
				}

				this.__0x10518 = obj;
				this.__0x10519 = property;
				this.__0x10520 = restoreValue;
				this.__0x10521 = indexes;
			}

			public object Obj
			{
				get { return __0x10518; }
				set { __0x10518 = value; }
			}

			public Metadata.Property Property
			{
				get { return __0x10519; }
				set { __0x10519 = value; }
			}

			public object RestoreValue
			{
				get { return __0x10520; }
				set { __0x10520 = value; }
			}

			public object[] Indexes
			{
				get { return __0x10521; }
				set { __0x10521 = value; }
			}
		}

		

		public UndoActionPropertiesChange( IList<Item> items )
		{
			this.__0x10517 = items;
		}

		public UndoActionPropertiesChange( Item item )
		{
			this.__0x10517 = new Item[] { item };
		}

		protected internal override void DoUndo()
		{
			for( int __0x10522 = 0; __0x10522 < __0x10517.Count; __0x10522++ )
			{
				Item __0x10523 = __0x10517[ __0x10522 ];

				

				object __0x10524 = __0x10523.Property.GetValue( __0x10523.Obj, __0x10523.Indexes );
				__0x10523.Property.SetValue( __0x10523.Obj, __0x10523.RestoreValue, __0x10523.Indexes );
				__0x10523.RestoreValue = __0x10524;

				
			}
		}

		protected internal override void DoRedo()
		{
			DoUndo();
		}

		protected internal override void Destroy()
		{
		}

		public override string ToString()
		{
			return string.Format( "Property change: Items: {0}", __0x10517.Count );
		}

		public IList<Item> Items
		{
			get { return __0x10517; }
		}

		public void PerformUndo()
		{
			DoUndo();
		}
	}

	

	
	
	
	
	

	

	
	
	
	
	

	

	
	
	
	

	
	
	
	

	
	
	
	
	
	
	
	
	
	
	
	

	
	
	
	
	
	

	
	
	
	

	
	
	
	
	

	
	

	
	
	
	
	
	
	
	

	
	
	

	
	

	
	
	
	
	
	
	
	
	
	
	
	
	

	
	

	
	
	
	

	
	
	
	
	
	
	
	

	
	
	
	
	
}





namespace NeoAxis.Editor
{
	public partial class Component_FlowGraph_DocumentWindow : DocumentWindowWithViewport
	{
		
		

		
		
		
		
		
		

		
		Component_Font __0x10545;
		
		
		
		

		static float[] __0x10546 = new float[] { .1f, .2f, .35f, .5f, .6f, .7f, .8f, .9f, 1, 1.1f, 1.2f, 1.3f, 1.5f, 1.75f, 2.0f, 2.5f, 3.0f };

		
		float __0x10547;

		
		
		Component_FlowGraphNode.Representation.Connector __0x10548;

		
		bool __0x10549;
		bool __0x10550;
		Vector2 __0x10551;
		Vector2I __0x10552;
		Vector2 __0x10553;

		
		bool __0x10554;
		bool __0x10555;
		Vector2 __0x10556;
		Vector2 __0x10557;
		Vector2 __0x10558;

		
		bool __0x10559;
		bool __0x10560;
		bool __0x10561;
		Vector2I __0x10562;
		Vector2 __0x10563;
		Component_FlowGraphNode __0x10564;
		
		ESet<Component_FlowGraphNode> __0x10565;
		Dictionary<Component_FlowGraphNode, Vector2I> __0x10566;

		
		Component_FlowGraphNode.Representation.Item __0x10567;

		
		Component __0x10568;
		
		DragDropSetReferenceData __0x10569;
		bool __0x10570;
		string[] __0x10571;

		

		public class PinInputMouseSelection
		{
			public Component_FlowGraphNode.Representation.Item socket;

			public PinInputMouseSelection( Component_FlowGraphNode.Representation.Item socket )
			{
				this.socket = socket;
			}
		}

		

		public Component_FlowGraph_DocumentWindow()
		{
			__0x10847();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x10846();

			

			
			
		}

		[Browsable( false )]
		public Component_FlowGraph FlowGraph
		{
			get { return ObjectOfWindow as Component_FlowGraph; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			

			__0x10798.Start();

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		
		
		
		
		

		private void __0x10822( object __0x10848, FormClosingEventArgs __0x10849 )
		{
		}

		
		
		
		
		

		
		
		
		
		
		

		
		
		
		

		
		
		

		public float GetZoom()
		{
			if( FlowGraph.EditorZoomIndex >= 0 && FlowGraph.EditorZoomIndex < __0x10546.Length )
				return __0x10546[ FlowGraph.EditorZoomIndex ];
			return 1;
		}

		double __0x10823()
		{
			return (double)__0x10547 / (double)ViewportControl.Viewport.SizeInPixels.X;
		}

		double __0x10824()
		{
			return (double)__0x10547 / (double)ViewportControl.Viewport.SizeInPixels.Y;
		}

		double __0x10825()
		{
			return FlowGraph.EditorScrollPosition.X - ConvertScreenToUnitX( 0.5, false );
		}

		double __0x10826()
		{
			return FlowGraph.EditorScrollPosition.Y - ConvertScreenToUnitY( 0.5, false );
		}

		public double ConvertUnitToScreenX( double posX )
		{
			double __0x10572 = ( posX - __0x10825() ) * __0x10823();
			__0x10572 *= GetZoom();
			return __0x10572;
		}

		public double ConvertUnitToScreenY( double posY )
		{
			double __0x10573 = ( posY - __0x10826() ) * __0x10824();
			__0x10573 *= GetZoom();
			return __0x10573;
		}

		public Vector2 ConvertUnitToScreen( Vector2 vector )
		{
			return new Vector2(
				ConvertUnitToScreenX( vector.X ),
				ConvertUnitToScreenY( vector.Y ) );
		}

		public Rectangle ConvertUnitToScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertUnitToScreenX( rect.Left ),
				ConvertUnitToScreenY( rect.Top ),
				ConvertUnitToScreenX( rect.Right ),
				ConvertUnitToScreenY( rect.Bottom ) );
		}

		public double ConvertScreenToUnitX( double screenX, bool applyScrollPosition )
		{
			double __0x10574 = screenX / __0x10823() / GetZoom();
			if( applyScrollPosition )
				__0x10574 += __0x10825();
			return __0x10574;
		}

		public double ConvertScreenToUnitY( double screenY, bool applyScrollPosition )
		{
			double __0x10575 = screenY / __0x10824() / GetZoom();
			if( applyScrollPosition )
				__0x10575 += __0x10826();
			return __0x10575;
		}

		public Vector2 ConvertScreenToUnit( Vector2 screen, bool applyScrollPosition )
		{
			return new Vector2(
				ConvertScreenToUnitX( screen.X, applyScrollPosition ),
				ConvertScreenToUnitY( screen.Y, applyScrollPosition ) );
		}

		public RectangleI GetVisibleCells()
		{
			Vector2I __0x10576 = ConvertScreenToUnit( Vector2.Zero, true ).ToVector2I() - new Vector2I( 1, 1 );
			Vector2I __0x10577 = ConvertScreenToUnit( Vector2.One, true ).ToVector2I() + new Vector2I( 1, 1 );
			return new RectangleI( __0x10576, __0x10577 );
		}

		public Rectangle SelectByRectangle_GetRectangleInUnits()
		{
			Rectangle __0x10578 = new Rectangle( __0x10557 );
			__0x10578.Add( __0x10558 );
			return __0x10578;
		}

		

		void __0x10827( CanvasRenderer __0x10850 )
		{
			if( __0x10545 == null )
				__0x10545 = ResourceManager.LoadResource<Component_Font>( @"Base\Fonts\FlowGraphEditor.ttf" );

			
			
			

			
			
			
			
			

			
			
			
			
			
			
		}

		public void GetFontSizes( CanvasRenderer renderer, out float nodeFontSize, out float nodeFontSizeComment )
		{
			int __0x10579 = renderer.ViewportForScreenCanvasRenderer.SizeInPixels.Y;
			float __0x10580 = (float)__0x10547 / (float)__0x10579;
			nodeFontSize = __0x10580 * GetZoom();

			float __0x10581 = GetZoom();
			if( __0x10581 < .5f )
				__0x10581 = .5f;
			nodeFontSizeComment = __0x10580 * __0x10581 * 1.4f;
		}

		private void __0x10828( object __0x10851, KeyEventArgs __0x10852 )
		{
			
			
			
		}

		
		void __0x10829()
		{
			var __0x10582 = new List<KryptonContextMenuItemBase>();

			
			
			Component __0x10583 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x10583 = SelectedObjects[ 0 ] as Component;
			}

			

			
			
			{
				

				
				var __0x10584 = new KryptonContextMenuItem( __0x10831( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x10853, EventArgs __0x10854 )
				{
					
					EditorAPI.OpenDocumentWindowForObject( Document, __0x10583 );
				} );
				__0x10584.Enabled = __0x10583 != null && EditorAPI.IsDocumentObjectSupport( __0x10583 );
				__0x10582.Add( __0x10584 );
			}

			
			{
				var __0x10585 = new KryptonContextMenuItem( __0x10831( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x10855, EventArgs __0x10856 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x10582.Add( __0x10585 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x10586 = new KryptonContextMenuItem( __0x10831( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x10857, EventArgs __0x10858 )
				{
					var __0x10587 = __0x10583 ?? ObjectOfWindow;
					bool __0x10588 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x10587, __0x10588 );
				} );
				__0x10586.Enabled = __0x10583 != null || SelectedObjects.Length == 0;
				__0x10582.Add( __0x10586 );
			}

			__0x10582.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x10582, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x10859 )
				{
					TryNewObject( __0x10859 );
				} );

				
				
				
				
				
				
			}

			
			__0x10582.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x10589 = new KryptonContextMenuItem( __0x10831( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x10860, EventArgs __0x10861 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x10589.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x10589.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x10582.Add( __0x10589 );
			}

			
			{
				var __0x10590 = new KryptonContextMenuItem( __0x10831( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x10862, EventArgs __0x10863 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x10590.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x10590.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x10582.Add( __0x10590 );
			}

			
			{
				var __0x10591 = new KryptonContextMenuItem( __0x10831( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x10864, EventArgs __0x10865 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x10591.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x10591.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x10582.Add( __0x10591 );
			}

			
			{
				var __0x10592 = new KryptonContextMenuItem( __0x10831( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x10866, EventArgs __0x10867 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x10592.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x10592.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x10582.Add( __0x10592 );
			}

			
			{
				var __0x10593 = new KryptonContextMenuItem( __0x10831( "Export to File" ), null, delegate ( object __0x10868, EventArgs __0x10869 )
				{
					EditorUtility.ExportComponentToFile( __0x10583 );
				} );
				__0x10593.Enabled = __0x10583 != null;
				__0x10582.Add( __0x10593 );
			}

			
			__0x10582.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x10594 = new KryptonContextMenuItem( __0x10831( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x10870, EventArgs __0x10871 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x10594.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x10582.Add( __0x10594 );
			}

			
			{
				var __0x10595 = new KryptonContextMenuItem( __0x10831( "Rename" ), null, delegate ( object __0x10872, EventArgs __0x10873 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x10595.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x10595.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x10582.Add( __0x10595 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x10582 );

			EditorContextMenuWinForms.Show( __0x10582, this );
		}

		
		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		
		
		

		
		

		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		object __0x10830()
		
		{
			
			

			foreach( Component_FlowGraphNode __0x10799 in FlowGraph.GetComponents<Component_FlowGraphNode>( true ) )
			{
				var __0x10596 = __0x10799.GetResultStyle( FlowGraph );

				var __0x10597 = __0x10596.GetMouseOverObject( this, __0x10799 );
				if( __0x10597 != null )
					return __0x10597;
			}

			return null;
		}
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		
		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		

		
		
		

		

		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		
		
		
		
		
		

		string __0x10831( string __0x10874 )
		{
			return EditorContextMenuWinForms.Translate( __0x10874 );
		}

		
		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		

		
		
		
		
		
		

		

		public bool CanCreateReferenceDragDropSetReference( DragDropSetReferenceData dragDropData, Component_FlowGraphNode.Representation.Connector to,
			out string[] outReferenceValues )
		
		{
			
			var __0x10598 = to.item as Component_FlowGraphNode.Representation.ItemThisObject;
			if( __0x10598 != null )
			{
				Component __0x10599 = __0x10598.Owner.Owner.ControlledObject;
				if( __0x10599 != null && ReferenceUtility.CanMakeReferenceToObjectWithType( dragDropData.property.TypeUnreferenced,
					MetadataManager.MetadataGetType( __0x10599 ) ) )
				{
					if( __0x10599.ParentRoot.HierarchyController != null &&
						__0x10599.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
					{
						
						var __0x10600 = __0x10599.GetProvidedType();
						if( __0x10600 != null )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10601 = 0; __0x10601 < outReferenceValues.Length; __0x10601++ )
								outReferenceValues[ __0x10601 ] = __0x10600.Name;
							return true;
						}
					}
					else
					{
						if( dragDropData.controlledComponents[ 0 ].ParentRoot == __0x10599.ParentRoot )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10602 = 0; __0x10602 < outReferenceValues.Length; __0x10602++ )
								outReferenceValues[ __0x10602 ] = ReferenceUtility.CalculateThisReference( dragDropData.controlledComponents[ __0x10602 ], __0x10599 );
							return true;
						}
					}
				}
			}

			
			var __0x10603 = to.item as Component_FlowGraphNode.Representation.ItemProperty;
			if( __0x10603 != null &&
				ReferenceUtility.CanMakeReferenceToObjectWithType( dragDropData.property.TypeUnreferenced, __0x10603.Property.TypeUnreferenced ) )
			{
				Component __0x10604 = __0x10603.Owner.Owner.ControlledObject;
				if( __0x10604 != null )
				{
					

					if( __0x10604.ParentRoot.HierarchyController != null &&
						__0x10604.ParentRoot.HierarchyController.CreatedByResource.InstanceType == Resource.InstanceType.Resource )
					{
						
						var __0x10605 = __0x10604.GetProvidedType();
						if( __0x10605 != null )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10606 = 0; __0x10606 < outReferenceValues.Length; __0x10606++ )
							{
								
								if( __0x10604.Parent == null )
									outReferenceValues[ __0x10606 ] = __0x10605.Name + "|" + __0x10603.Property.Name;
								else
									outReferenceValues[ __0x10606 ] = __0x10605.Name + "\\" + __0x10603.Property.Name;
								
							}
							return true;
						}
					}
					else
					{
						if( dragDropData.controlledComponents[ 0 ].ParentRoot == __0x10604.ParentRoot )
						{
							outReferenceValues = new string[ dragDropData.controlledComponents.Length ];
							for( int __0x10607 = 0; __0x10607 < outReferenceValues.Length; __0x10607++ )
							{
								outReferenceValues[ __0x10607 ] = ReferenceUtility.CalculateThisReference(
									dragDropData.controlledComponents[ __0x10607 ], __0x10604, __0x10603.Property.Name );
							}
							return true;
						}
					}
				}
			}

			outReferenceValues = null;
			return false;
		}

		public bool CanCreateReference( Component_FlowGraphNode.Representation.Connector c1, Component_FlowGraphNode.Representation.Connector c2 )
		{
			if( c1.item == c2.item )
				return false;
			if( c1.input == c2.input )
				return false;

			Component_FlowGraphNode.Representation.Connector __0x10608;
			Component_FlowGraphNode.Representation.Connector __0x10609;
			if( !c1.input )
			{
				__0x10608 = c2;
				__0x10609 = c1;
			}
			else
			{
				__0x10608 = c1;
				__0x10609 = c2;
			}

			

			var __0x10610 = __0x10608.item as Component_FlowGraphNode.Representation.ItemProperty;
			if( __0x10610 != null )
			{
				
				var __0x10611 = __0x10609.item as Component_FlowGraphNode.Representation.ItemThisObject;
				if( __0x10611 != null )
				{
					var __0x10612 = __0x10611.Owner.Owner.ControlledObject.Value as Component;
					if( __0x10612 != null )
					{
						var __0x10613 = MetadataManager.MetadataGetType( __0x10612 );
						if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x10610.Property.TypeUnreferenced, __0x10613 ) )
							return true;
					}
					return false;
				}

				
				var __0x10614 = __0x10609.item as Component_FlowGraphNode.Representation.ItemProperty;
				if( __0x10614 != null )
				{
					if( ReferenceUtility.CanMakeReferenceToObjectWithType( __0x10610.Property.TypeUnreferenced, __0x10614.Property.TypeUnreferenced ) )
						return true;
					return false;

					
					
					
					
					
					
				}
			}

			return false;
		}

		
		
		
		

		
		

		
		
		
		
		
		

		
		

		

		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		

		

		
		

		
		
		
		
		
		
		

		

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			if( button == EMouseButtons.Left )
			{
				__0x10548 = null;

				var __0x10615 = __0x10830();
				var __0x10616 = __0x10615 as Component_FlowGraphNode;
				var __0x10617 = __0x10615 as Component_FlowGraphNode.Representation.Connector;

				if( __0x10616 != null )
				{
					
					

					
					
					

					

					Vector2 __0x10618 = viewport.MousePosition;
					Vector2I __0x10619 = ( __0x10618 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

					__0x10559 = true;
					__0x10560 = false;
					__0x10561 = false;
					__0x10564 = __0x10616;
					__0x10562 = __0x10619;
					__0x10563 = ConvertScreenToUnit( __0x10618, true );

					__0x10565 = new ESet<Component_FlowGraphNode>();
					__0x10565.Add( __0x10616 );

					var __0x10620 = __0x10834();

					foreach( var __0x10800 in SelectedObjectsSet )
					{
						var __0x10621 = __0x10800 as Component_FlowGraphNode;
						if( __0x10621 != null )
							__0x10565.AddWithCheckAlreadyContained( __0x10621 );

						var __0x10622 = __0x10800 as Component;
						if( __0x10622 != null )
						{
							if( __0x10620.TryGetValue( __0x10622, out List<Component_FlowGraphNode> nodes ) )
							{
								foreach( var __0x10801 in nodes )
								{
									var __0x10623 = __0x10564.ControlledObject.Value;
									if( __0x10623 != null && __0x10801.ControlledObject.Value == __0x10623 )
										continue;

									__0x10565.AddWithCheckAlreadyContained( __0x10801 );
								}
							}
						}
					}

					__0x10566 = new Dictionary<Component_FlowGraphNode, Vector2I>();
					foreach( var __0x10802 in __0x10565 )
						__0x10566.Add( __0x10802, __0x10802.Position );

					handled = true;
					return;
				}
				else if( __0x10617 != null )
				{
					__0x10548 = __0x10617;

					
					
					
					
					

					
					
					
					
					
					
					
					
					
					
					
					
					

					handled = true;
					return;
				}
				else
				{
					
					__0x10554 = true;
					__0x10555 = false;
					__0x10556 = viewport.MousePosition;
					__0x10557 = ConvertScreenToUnit( __0x10556, true );
					__0x10558 = __0x10557;

					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				Vector2 __0x10624 = viewport.MousePosition;
				Vector2I __0x10625 = ( __0x10624 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

				__0x10549 = true;
				__0x10550 = false;
				__0x10551 = FlowGraph.EditorScrollPosition;
				__0x10552 = __0x10625;
				__0x10553 = __0x10624;

				handled = true;
				return;
			}
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( viewport, button, ref handled );

			
			
			
			
			

			object __0x10626 = __0x10830();
			var __0x10627 = __0x10626 as Component_FlowGraphNode.Representation.Connector;


			var __0x10628 = new ESet<object>( SelectedObjectsSet );

			
			
			if( button == EMouseButtons.Left )
			{
				
				bool __0x10629 = true;

				
				if( __0x10560 || __0x10548 != null )
					__0x10629 = false;
				if( __0x10629 )
				{
					bool __0x10630 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x10630 )
						__0x10628.Clear();

					
					var __0x10631 = __0x10626 as Component_FlowGraphNode;
					if( __0x10631 != null )
					{
						var __0x10632 = __0x10631.ControlledObject.Value;
						if( __0x10632 != null )
						{
							if( !__0x10628.Contains( __0x10632 ) )
								__0x10628.Add( __0x10632 );
							else
								__0x10628.Remove( __0x10632 );
						}
						else
						{
							
							__0x10628.Add( __0x10631 );
						}
					}

					
					if( __0x10567 != null )
					{
						

						__0x10628.Add( __0x10567 );

						
						__0x10567 = null;
					}
				}

				
				if( __0x10548 != null )
				{
					if( __0x10627 != null && CanCreateReference( __0x10548, __0x10627 ) )
					{
						Component_FlowGraphNode.Representation.Connector __0x10633;
						Component_FlowGraphNode.Representation.Connector __0x10634;

						bool __0x10635 = false;
						{
							var __0x10636 = __0x10548.item as Component_FlowGraphNode.Representation.ItemProperty;
							if( __0x10636 != null )
							{
								if( MetadataManager.GetTypeOfNetType( typeof( FlowInput ) ).IsAssignableFrom( __0x10636.Property.TypeUnreferenced ) )
									__0x10635 = true;
							}
						}

						if( __0x10635 )
						{
							if( __0x10548.input )
							{
								__0x10633 = __0x10627;
								__0x10634 = __0x10548;
							}
							else
							{
								__0x10633 = __0x10548;
								__0x10634 = __0x10627;
							}
						}
						else
						{
							if( __0x10548.input )
							{
								__0x10633 = __0x10548;
								__0x10634 = __0x10627;
							}
							else
							{
								__0x10633 = __0x10627;
								__0x10634 = __0x10548;
							}
						}

						var __0x10637 = __0x10633.item as Component_FlowGraphNode.Representation.ItemProperty;

						var __0x10638 = __0x10633.item.Owner.Owner.ControlledObject.Value;
						var __0x10639 = __0x10634.item.Owner.Owner.ControlledObject.Value;

						string __0x10640 = "";
						{
							
							var __0x10641 = __0x10634.item as Component_FlowGraphNode.Representation.ItemThisObject;
							if( __0x10641 != null )
								__0x10640 = ReferenceUtility.CalculateThisReference( __0x10638, __0x10639 );

							
							var __0x10642 = __0x10634.item as Component_FlowGraphNode.Representation.ItemProperty;
							if( __0x10642 != null )
								__0x10640 = ReferenceUtility.CalculateThisReference( __0x10638, __0x10639, __0x10642.Property.Name );
						}
						

						var __0x10643 = __0x10637.Property.Type.GetNetType();
						var __0x10644 = ReferenceUtility.GetUnderlyingType( __0x10643 );
						object __0x10645 = ReferenceUtility.MakeReference( __0x10644, null, __0x10640 );

						var __0x10646 = new List<UndoActionPropertiesChange.Item>();

						var __0x10647 = __0x10637.Property.GetValue( __0x10638, null );
						__0x10637.Property.SetValue( __0x10638, __0x10645, null );
						__0x10646.Add( new UndoActionPropertiesChange.Item( __0x10638, __0x10637.Property, __0x10647, null ) );

						
						if( __0x10646.Count != 0 )
						{
							var __0x10648 = new UndoActionPropertiesChange( __0x10646.ToArray() );
							Document.UndoSystem.CommitAction( __0x10648 );
							Document.Modified = true;
						}
					}

					
					__0x10548 = null;
				}

				
				if( __0x10560 )
				{
					

					

					if( !__0x10561 )
					{
						

						var __0x10649 = new List<UndoActionPropertiesChange.Item>();

						foreach( var __0x10803 in __0x10565 )
						{
							var __0x10650 = __0x10566[ __0x10803 ];
							var __0x10651 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x10803.GetType() ).
								MetadataGetMemberBySignature( "property:Position" );
							var __0x10652 = new UndoActionPropertiesChange.Item( __0x10803, __0x10651, __0x10650, null );
							__0x10649.Add( __0x10652 );
						}

						if( __0x10649.Count != 0 )
						{
							var __0x10653 = new UndoActionPropertiesChange( __0x10649.ToArray() );
							Document.UndoSystem.CommitAction( __0x10653 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x10654 = new UndoActionComponentCreateDelete( Document, __0x10565.ToArray(), true );
						Document.UndoSystem.CommitAction( __0x10654 );
						Document.Modified = true;

						
						SelectObjects( SelectedObjects, forceUpdate: true );
					}
				}
				__0x10559 = false;
				__0x10560 = false;
				__0x10561 = false;
				__0x10564 = null;
				__0x10565 = null;
				__0x10566 = null;
				__0x10562 = Vector2I.Zero;
				__0x10563 = Vector2.Zero;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x10554 )
				{
					if( __0x10555 )
					{
						bool __0x10655 = ( Form.ModifierKeys & Keys.Shift ) != 0;
						if( !__0x10655 )
							__0x10628.Clear();

						if( __0x10555 )
						{
							foreach( var __0x10804 in __0x10833() )
								__0x10628.AddWithCheckAlreadyContained( __0x10804 );
						}

						if( __0x10555 )
							handled = true;
					}

					__0x10554 = false;
					__0x10555 = false;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				if( __0x10550 )
					handled = true;

				__0x10549 = false;
				__0x10550 = false;
			}

			
			SelectObjects( __0x10628 );

			
			if( !handled && button == EMouseButtons.Right )
				__0x10829();
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			

			
			if( __0x10559 && !__0x10560 )
			{
				Vector2I __0x10656 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x10657 = __0x10562 - __0x10656;
				if( Math.Abs( __0x10657.X ) > 2 || Math.Abs( __0x10657.Y ) > 2 )
				{
					__0x10560 = true;

					
					if( ( ModifierKeys & Keys.Shift ) != 0 )
					{
						Component_FlowGraphNode __0x10658 = __0x10564;
						ESet<Component_FlowGraphNode> __0x10659 = __0x10565;
						Dictionary<Component_FlowGraphNode, Vector2I> __0x10660 = __0x10566;

						__0x10564 = null;
						__0x10565 = new ESet<Component_FlowGraphNode>();
						__0x10566 = new Dictionary<Component_FlowGraphNode, Vector2I>();

						

						foreach( var __0x10805 in __0x10659 )
						{
							var __0x10661 = (Component_FlowGraphNode)EditorUtility.CloneComponent( __0x10805 );

							if( __0x10658 == __0x10805 )
								__0x10564 = __0x10661;
							__0x10565.Add( __0x10661 );
							__0x10566[ __0x10661 ] = __0x10660[ __0x10805 ];
						}

						__0x10561 = true;

						SelectObjects( __0x10565.ToArray(), updateSettingsWindowSelectObjects: false );

						
						EditorUtility.ShowScreenNotificationObjectsCloned( __0x10565.Count );


						
						
						
						
						

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						

						

						
						
						
						
						

						
						
						
						

						
						
						
						
					}
				}
			}
			if( __0x10560 )
			{
				Vector2 __0x10662 = ConvertScreenToUnit( viewport.MousePosition, true );
				Vector2 __0x10663 = __0x10662 - __0x10563;
				if( __0x10663.X < 0 )
					__0x10663.X -= .5f;
				if( __0x10663.Y < 0 )
					__0x10663.Y -= .5f;

				foreach( var __0x10806 in __0x10565 )
					__0x10806.Position = __0x10566[ __0x10806 ] + __0x10663.ToVector2I();
			}

			
			if( __0x10549 )
			{
				Vector2I __0x10664 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x10665 = __0x10552 - __0x10664;
				if( Math.Abs( __0x10665.X ) > 2 || Math.Abs( __0x10665.Y ) > 2 )
					__0x10550 = true;
			}
			if( __0x10550 )
			{
				Vector2 __0x10666 = mouse - __0x10553;
				FlowGraph.EditorScrollPosition = __0x10551 - ConvertScreenToUnit( __0x10666, false );
			}

			
			if( __0x10554 )
			{
				Vector2 __0x10667 = ( viewport.MousePosition - __0x10556 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x10667.X ) >= 3 || Math.Abs( __0x10667.Y ) >= 3 )
					__0x10555 = true;

				__0x10558 = ConvertScreenToUnit( viewport.MousePosition, true );
			}
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( viewport, delta, ref handled );
			if( handled )
				return;

			

			Vector2 __0x10668 = viewport.MousePosition;
			Vector2 __0x10669 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

			
			bool __0x10670 = false;

			if( delta > 0 )
			{
				int __0x10671 = delta / 120;
				if( __0x10671 == 0 )
					__0x10671 = 1;

				for( int __0x10672 = 0; __0x10672 < __0x10671; __0x10672++ )
				{
					if( FlowGraph.EditorZoomIndex < __0x10546.Length - 1 )
					{
						FlowGraph.EditorZoomIndex++;
						__0x10670 = true;
					}
				}
			}
			else if( delta < 0 )
			{
				int __0x10673 = -delta / 120;
				if( __0x10673 == 0 )
					__0x10673 = 1;

				for( int __0x10674 = 0; __0x10674 < __0x10673; __0x10674++ )
				{
					if( FlowGraph.EditorZoomIndex > 0 )
					{
						FlowGraph.EditorZoomIndex--;
						__0x10670 = true;
					}
				}
			}

			if( __0x10670 )
			{
				Vector2 __0x10675 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

				Vector2 __0x10676 = __0x10669 * ( __0x10668 - new Vector2( 0.5, 0.5 ) );
				Vector2 __0x10677 = __0x10675 * ( __0x10668 - new Vector2( 0.5, 0.5 ) );

				Vector2 __0x10678 = FlowGraph.EditorScrollPosition;
				__0x10678 += __0x10676;
				__0x10678 -= __0x10677;
				FlowGraph.EditorScrollPosition = __0x10678;

				AddScreenMessage( string.Format( "Zoom {0}", GetZoom() ) );
			}

			handled = true;
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			base.Viewport_UpdateBegin( viewport );
		}

		List<Component_FlowGraphNode> __0x10832( Rectangle __0x10875 )
		{
			List<Component_FlowGraphNode> __0x10679 = new List<Component_FlowGraphNode>();

			foreach( Component_FlowGraphNode __0x10807 in FlowGraph.GetComponents<Component_FlowGraphNode>( false ) )
			{
				var __0x10680 = __0x10807.GetResultStyle( FlowGraph );
				if( __0x10680.IsIntersectsWithRectangle( this, __0x10807, __0x10875 ) )
					__0x10679.Add( __0x10807 );
			}

			return __0x10679;
		}

		ESet<Component_FlowGraphNode> __0x10833()
		{
			ESet<Component_FlowGraphNode> __0x10681 = new ESet<Component_FlowGraphNode>();
			if( __0x10555 )
			{
				foreach( var __0x10808 in __0x10832( SelectByRectangle_GetRectangleInUnits() ) )
					__0x10681.Add( __0x10808 );
			}
			return __0x10681;
		}
		
		
		

		
		
		
		
		
		
		
		
		

		
		

		Dictionary<Component, List<Component_FlowGraphNode>> __0x10834()
		{
			var __0x10682 = new Dictionary<Component, List<Component_FlowGraphNode>>();

			foreach( Component_FlowGraphNode __0x10809 in FlowGraph.GetComponents<Component_FlowGraphNode>( false ) )
			{
				Component __0x10683 = __0x10809.ControlledObject.Value;
				if( __0x10683 != null )
				{
					if( !__0x10682.TryGetValue( __0x10683, out List<Component_FlowGraphNode> list ) )
					{
						list = new List<Component_FlowGraphNode>();
						__0x10682.Add( __0x10683, list );
					}
					list.Add( __0x10809 );
				}
			}

			return __0x10682;
		}

		public Component_FlowGraphStyle GetFlowGraphStyle()
		{
			Component_FlowGraphStyle __0x10684 = FlowGraph.Style;
			if( __0x10684 == null )
			{
				__0x10684 = Component_FlowGraphStyle_Default.Instance;
				
				
			}

			return __0x10684;
		}

		bool __0x10835()
		{
			if( __0x10560 || __0x10569 != null )
				return false;
			return true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			

			var __0x10685 = viewport.CanvasRenderer;

			
			var __0x10686 = __0x10830();
			var __0x10687 = __0x10686 as Component_FlowGraphNode;
			var __0x10688 = __0x10686 as Component_FlowGraphNode.Representation.Connector;
			

			var __0x10689 = new Dictionary<Component_FlowGraphNode.Representation.Item, EditorRenderSelectionState>();
			{
				if( __0x10567 != null && __0x10835() )
					__0x10689[ __0x10567 ] = EditorRenderSelectionState.CanSelect;
				foreach( var __0x10810 in SelectedObjects )
				{
					var __0x10690 = __0x10810 as Component_FlowGraphNode.Representation.Item;
					if( __0x10690 != null )
						__0x10689[ __0x10690 ] = EditorRenderSelectionState.Selected;
				}
			}

			__0x10827( __0x10685 );

			
			var __0x10691 = GetFlowGraphStyle();

			
			__0x10691.RenderBackground( this );

			
			

			var __0x10692 = __0x10834();
			var __0x10693 = __0x10833();

			Component_FlowGraphNode.Representation.Item __0x10694 = null;

			
			
			foreach( Component_FlowGraphNode __0x10811 in FlowGraph.GetComponents<Component_FlowGraphNode>( false ) )
			{
				
				

				
				var __0x10695 = __0x10811.GetResultStyle( FlowGraph );

				
				__0x10695.RenderNodeReferences( this, __0x10811, __0x10692, __0x10689, out Component_FlowGraphNode.Representation.Item outMouseOver );

				if( outMouseOver != null && __0x10694 == null )
					__0x10694 = outMouseOver;
			}

			
			
			if( __0x10548 == null && __0x10686 == null )
				__0x10567 = __0x10694;
			else
				__0x10567 = null;

			
			{
				
				
				
				
				
				
				

				
				
				

				
				
				
				

				
				foreach( Component_FlowGraphNode __0x10812 in FlowGraph.GetComponents<Component_FlowGraphNode>( false ) )
				{
					
					

					
					var __0x10696 = __0x10812.GetResultStyle( FlowGraph );

					
					var __0x10697 = EditorRenderSelectionState.None;

					if( __0x10693.Contains( __0x10812 ) && __0x10835() )
						__0x10697 = EditorRenderSelectionState.CanSelect;

					if( IsObjectSelected( __0x10812 ) )
						__0x10697 = EditorRenderSelectionState.Selected;
					else
					{
						
						if( __0x10548 == null )
						{
							if( __0x10687 == __0x10812 && __0x10812.ControlledObject.Value == null && __0x10835() )
								__0x10697 = EditorRenderSelectionState.CanSelect;
						}
					}

					
					var __0x10698 = EditorRenderSelectionState.None;
					object __0x10699 = __0x10812.ControlledObject.Value;
					if( __0x10699 != null )
					{
						if( __0x10548 == null )
						{
							if( __0x10687 != null && __0x10687.ControlledObject.Value == __0x10699 && __0x10835() )
								__0x10698 = EditorRenderSelectionState.CanSelect;
						}
						if( IsObjectSelected( __0x10699 ) )
							__0x10698 = EditorRenderSelectionState.Selected;
					}

					
					__0x10696.RenderNode( this, __0x10812, __0x10697, __0x10698, __0x10686, __0x10548,
						__0x10569 );

					
					
					
					
					
				}
			}

			
			
			if( __0x10548 != null )
			{
				var __0x10700 = __0x10548.item.Owner.Owner;

				
				var __0x10701 = __0x10700.GetResultStyle( FlowGraph );

				

				Vector2 __0x10702 = __0x10701.GetSocketPositionInUnits( __0x10548.item, __0x10548.input );

				Vector2 __0x10703;
				if( __0x10688 != null && CanCreateReference( __0x10548, __0x10688 ) )
					__0x10703 = __0x10701.GetSocketPositionInUnits( __0x10688.item, __0x10688.input );
				else
					__0x10703 = ConvertScreenToUnit( ViewportControl.Viewport.MousePosition, true );

				__0x10691.RenderReference( this, __0x10702, __0x10548.input, __0x10703, new ColorValue( 1, 1, 1 ), out bool mouseOver );

				
				
			}

			
			if( __0x10554 && __0x10555 )
			{
				Rectangle __0x10704 = new Rectangle( ConvertUnitToScreen( __0x10557 ) );
				__0x10704.Add( viewport.MousePosition );

				Vector2I __0x10705 = viewport.SizeInPixels;
				Vector2 __0x10706 = new Vector2( 1.0f / (float)__0x10705.X, 1.0f / (float)__0x10705.Y );

				__0x10685.AddRectangle( __0x10704 + __0x10706, new ColorValue( 0, 0, 0, .5f ) );
				__0x10685.AddRectangle( __0x10704, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			

			
			__0x10570 = false;
			if( __0x10569 != null && __0x10688 != null )
			{
				bool __0x10707 = MetadataManager.GetTypeOfNetType( typeof( FlowInput ) ).IsAssignableFrom( __0x10569.property.TypeUnreferenced );

				if( __0x10707 )
				{
					if( __0x10688.input )
					{
						if( CanCreateReferenceDragDropSetReference( __0x10569, __0x10688, out __0x10571 ) )
							__0x10570 = true;
					}
				}
				else
				{
					if( !__0x10688.input )
					{
						if( CanCreateReferenceDragDropSetReference( __0x10569, __0x10688, out __0x10571 ) )
							__0x10570 = true;
					}
				}
			}
			
			
			
			
			
			
			
			

			
			__0x10691.RenderForeground( this );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			base.Viewport_UpdateEnd( viewport );
		}

		[Browsable( false )]
		public Component_Font NodeFont
		{
			get { return __0x10545; }
		}

		
		
		
		
		

		
		
		
		
		

		[Browsable( false )]
		public Component_Font NodeFontComment
		{
			get { return __0x10545; }
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x10813 in SelectedObjects )
			{
				var __0x10708 = __0x10813 as Component;
				if( __0x10708 != null )
					parentsForNewObjects.Add( __0x10708 );
			}

			
			foreach( var __0x10814 in SelectedObjects )
			{
				var __0x10709 = __0x10814 as Component_FlowGraphNode.Representation.Item;
				if( __0x10709 != null )
					return false;
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( FlowGraph );
			return true;
			
		}

		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out List<Component> parentsForNewObjects ) )
				return;

			bool __0x10710 = false;
			Vector2I __0x10711 = Vector2I.Zero;
			if( parentsForNewObjects.Count == 1 && parentsForNewObjects[ 0 ] == FlowGraph )
			{
				__0x10710 = true;
				__0x10711 = ConvertScreenToUnit( ViewportControl.Viewport.MousePosition, true ).ToVector2I();
			}

			var __0x10712 = new NewObjectWindow.CreationDataClass();
			__0x10712.initDocumentWindow = this;
			__0x10712.initParentObjects = new List<object>();
			__0x10712.initParentObjects.AddRange( parentsForNewObjects );

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			
			

			

			
			
			


			__0x10712.beforeCreateObjectsFunction = delegate ( NewObjectWindow __0x10876, Metadata.TypeInfo __0x10877 )
			{
				if( __0x10710 && !typeof( Component_FlowGraphNode ).IsAssignableFrom( __0x10877.GetNetType() ) )
				{
					__0x10876.creationData.createdObjects = new List<object>();

					
					var __0x10713 = FlowGraph.CreateComponent<Component_FlowGraphNode>( -1, false );
					__0x10876.creationData.createdObjects.Add( __0x10713 );
					__0x10876.creationData.createdComponentsOnTopLevel.Add( __0x10713 );

					
					var __0x10714 = __0x10713.CreateComponent( __0x10877 );

					
					
					bool __0x10715 = false;
					if( !__0x10876.ApplyCreationSettingsToObject( __0x10714, ref __0x10715 ) )
						return false;

					__0x10876.creationData.createdObjects.Add( __0x10714 );

					var __0x10716 = "Node " + __0x10714.Name;
					__0x10713.Name = FlowGraph.Components.GetUniqueName( __0x10716, false, 1 );

					
					
					__0x10713.ControlledObject = new Reference<Component>( null, ReferenceUtility.CalculateThisReference( __0x10713, __0x10714 ) );
				}

				return true;
			};

			
			__0x10712.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x10878 )
			{
				if( __0x10710 )
				{
					foreach( var __0x10815 in __0x10712.createdComponentsOnTopLevel )
					{
						var __0x10717 = __0x10815 as Component_FlowGraphNode;
						if( __0x10717 != null )
							__0x10717.Position = __0x10711;
					}
				}
			};

			__0x10712.initLockType = lockType;
			__0x10712.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x10712 );
		}

		public override bool CanDeleteObjects( out List<object> resultObjectsToDelete )
		{
			resultObjectsToDelete = new List<object>();

			foreach( var __0x10816 in SelectedObjects )
			{
				var __0x10718 = __0x10816 as Component;
				if( __0x10718 != null && __0x10718.Parent != null )
					resultObjectsToDelete.Add( __0x10718 );

				var __0x10719 = __0x10816 as Component_FlowGraphNode.Representation.Item;
				if( __0x10719 != null )
					resultObjectsToDelete.Add( __0x10719 );
			}

			

			if( resultObjectsToDelete.Count == 0 )
				return false;

			return true;
		}

		public override bool TryDeleteObjects()
		{
			if( !CanDeleteObjects( out List<object> objectsToDelete ) )
				return false;

			string __0x10720;
			if( objectsToDelete.Count == 1 )
			{
				string __0x10721 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete \'{0}\'?" );
				var __0x10722 = objectsToDelete[ 0 ].ToString();
				__0x10720 = string.Format( __0x10721, __0x10722 );
			}
			else
			{
				string __0x10723 = EditorLocalization.Translate( "DocumentWindow", "Are you sure you want to delete selected objects?" );
				__0x10720 = string.Format( __0x10723, objectsToDelete.Count );
			}

			if( EditorMessageBox.ShowQuestion( __0x10720, EMessageBoxButtons.YesNo ) == EDialogResult.No )
				return false;

			SelectObjects( null );

			
			List<Component> __0x10724 = new List<Component>();
			List<UndoActionPropertiesChange.Item> __0x10725 = new List<UndoActionPropertiesChange.Item>();

			foreach( var __0x10817 in objectsToDelete )
			{
				var __0x10726 = __0x10817 as Component;
				if( __0x10726 != null )
					__0x10724.Add( __0x10726 );

				var __0x10727 = __0x10817 as Component_FlowGraphNode.Representation.ItemProperty;
				if( __0x10727 != null )
				{
					var __0x10728 = __0x10727.Owner.Owner.ControlledObject.Value;
					var __0x10729 = __0x10727.Property;

					var __0x10730 = __0x10729.GetValue( __0x10728, null );

					object __0x10731 = null;
					{
						var __0x10732 = __0x10729.TypeUnreferenced;

						
						if( __0x10729.DefaultValueSpecified )
						{
							__0x10731 = __0x10729.DefaultValue;

							
							if( __0x10731 != null )
							{
								if( __0x10732.GetNetType() != typeof( string ) && __0x10731 is string )
									__0x10731 = SimpleTypes.ParseValue( __0x10732.GetNetType(), (string)__0x10731 );
							}
						}

						if( __0x10731 != null && !__0x10732.IsAssignableFrom( MetadataManager.MetadataGetType( __0x10731 ) ) )
							__0x10731 = null;
					}

					var __0x10733 = ReferenceUtility.MakeReference( ReferenceUtility.GetUnreferencedType( __0x10729.Type.GetNetType() ), __0x10731, "" );
					
					

					__0x10729.SetValue( __0x10728, __0x10733, null );

					__0x10725.Add( new UndoActionPropertiesChange.Item( __0x10728, __0x10729, __0x10730, null ) );
				}
			}

			UndoSystem.Action __0x10734 = null;
			if( __0x10724.Count != 0 && __0x10725.Count != 0 )
			{
				UndoMultiAction __0x10735 = new UndoMultiAction();
				__0x10735.Actions.Add( new UndoActionComponentCreateDelete( Document, __0x10724, false ) );
				__0x10735.Actions.Add( new UndoActionPropertiesChange( __0x10725.ToArray() ) );
				__0x10734 = __0x10735;
			}
			else if( __0x10724.Count != 0 )
				__0x10734 = new UndoActionComponentCreateDelete( Document, __0x10724, false );
			else if( __0x10725.Count != 0 )
				__0x10734 = new UndoActionPropertiesChange( __0x10725.ToArray() );

			Document.UndoSystem.CommitAction( __0x10734 );
			
			
			Document.Modified = true;

			return true;
		}

		public override bool CanCloneObjects( out List<Component> resultObjectsToClone )
		{
			resultObjectsToClone = new List<Component>();

			var __0x10736 = __0x10834();

			
			foreach( var __0x10818 in SelectedObjects )
			{
				var __0x10737 = __0x10818 as Component;
				if( __0x10737 != null )
				{
					if( __0x10736.TryGetValue( __0x10737, out List<Component_FlowGraphNode> nodes ) )
					{
						foreach( var __0x10819 in nodes )
							resultObjectsToClone.Add( __0x10819 );
					}
					else
					{
						if( __0x10737.Parent != null )
							resultObjectsToClone.Add( __0x10737 );
					}
				}
			}

			
			resultObjectsToClone = ComponentUtility.GetComponentsWithoutChildren( resultObjectsToClone );

			if( resultObjectsToClone.Count == 0 )
				return false;

			return true;
		}

		private void __0x10836( object __0x10879, EventArgs __0x10880 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			foreach( Component_FlowGraphNode __0x10820 in FlowGraph.GetComponents<Component_FlowGraphNode>( false ) )
				__0x10820.RepresentationNeedUpdate();
		}

		

		
		
		
		
		
		

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		

		
		
		
		

		
		
		
		

		
		

		private void __0x10837( object __0x10881, DragEventArgs __0x10882 )
		{
			__0x10841( __0x10882 );

			
			
			
			
		}

		private void __0x10838( object __0x10883, DragEventArgs __0x10884 )
		{
			__0x10884.Effect = DragDropEffects.None;

			
			ViewportControl?.PerformMouseMove();

			__0x10844();
			if( __0x10568 != null )
				__0x10884.Effect = DragDropEffects.Link;

			DragDropSetReferenceData __0x10738 = (DragDropSetReferenceData)__0x10884.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x10738 != null )
				__0x10569 = __0x10738;
			if( __0x10569 != null && __0x10570 )
				__0x10884.Effect = DragDropEffects.Link;

			
			ViewportControl.TryRender();
		}

		private void __0x10839( object __0x10885, EventArgs __0x10886 )
		{
			__0x10842();

			__0x10569 = null;

			
			ViewportControl.TryRender();
		}

		private void __0x10840( object __0x10887, DragEventArgs __0x10888 )
		{
			__0x10845();

			if( __0x10569 != null )
			{
				if( __0x10570 )
				{
					__0x10569.SetProperty( __0x10571 );
					__0x10570 = false;
				}
				__0x10569 = null;
			}
		}

		void __0x10841( DragEventArgs __0x10889 )
		{
			Metadata.TypeInfo __0x10739 = null;
			string __0x10740 = "";
			Component __0x10741 = null;
			Component __0x10742 = null;
			{
				var __0x10743 = ContentBrowser.GetDroppingItemData( __0x10889.Data );
				if( __0x10743 != null )
				{
					var __0x10744 = __0x10743.Item;
					

					
					var __0x10745 = __0x10744 as ContentBrowserItem_File;
					if( __0x10745 != null && !__0x10745.IsDirectory )
					{
						
						var __0x10746 = Path.GetExtension( __0x10745.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x10746 ) != null )
						{
							var __0x10747 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x10745.FullPath ) );

							var __0x10748 = __0x10747?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x10748 != null )
								__0x10739 = __0x10748;
						}
					}

					
					var __0x10749 = __0x10744 as ContentBrowserItem_Type;
					if( __0x10749 != null )
					{
						var __0x10750 = __0x10749.Type;

						

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x10750 ) && !__0x10750.Abstract )
							__0x10739 = __0x10750;
					}

					
					var __0x10751 = __0x10744 as ContentBrowserItem_Member;
					if( __0x10751 != null )
					{
						var __0x10752 = __0x10751.Member;

						

						var __0x10753 = __0x10752.Owner as Metadata.TypeInfo;
						if( __0x10753 != null )
							__0x10740 = string.Format( "{0}|{1}", __0x10753.Name, __0x10752.Signature );

						

						var __0x10754 = __0x10752.Owner as Component;
						if( __0x10754 != null )
							__0x10740 = ReferenceUtility.CalculateResourceReference( __0x10754, __0x10752.Signature );

						
						var __0x10755 = __0x10744.Parent as ContentBrowserItem_Component;
						if( __0x10755 != null )
						{
							var __0x10756 = __0x10755.Component;

							
							if( __0x10756.ParentRoot == Document.ResultComponent )
								__0x10741 = __0x10756;
						}
					}

					
					var __0x10757 = __0x10744 as ContentBrowserItem_Component;
					if( __0x10757 != null )
					{
						var __0x10758 = __0x10757.Component;

						if( FlowGraph.ParentRoot == __0x10758.ParentRoot )
						{
							
							__0x10742 = __0x10758;
						}
						else
						{
							var __0x10759 = __0x10758.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x10759 != null )
							{
								
								__0x10739 = __0x10758.GetProvidedType();
							}
						}
					}
				}
			}

			if( __0x10739 != null || __0x10740 != "" || __0x10742 != null )
			{
				

				
				var __0x10760 = FlowGraph.CreateComponent<Component_FlowGraphNode>( -1, false );
				bool __0x10761 = false;

				Component __0x10762 = null;

				
				bool __0x10763 = false;
				var __0x10764 = FlowGraph.Specialization.Value;
				if( __0x10764 != null )
				{
					var __0x10765 = new Component_FlowGraphSpecialization.DragDropObjectCreateInitNodeContext();
					__0x10765.createComponentType = __0x10739;
					__0x10765.memberFullSignature = __0x10740;
					
					__0x10765.createNodeWithComponent = __0x10742;

					__0x10764.DragDropObjectCreateInitNode( __0x10760, __0x10765, ref __0x10763 );

					if( __0x10763 )
						__0x10762 = __0x10765.controlledObject;
				}

				
				if( !__0x10763 )
				{
					
					if( !__0x10761 && __0x10762 == null && __0x10739 != null && MetadataManager.GetTypeOfNetType( typeof( Component_CSharpScript ) ).IsAssignableFrom( __0x10739 ) )
					{
						var __0x10766 = __0x10739 as Metadata.ComponentTypeInfo;
						if( __0x10766 != null && __0x10766.BasedOnObject != null )
						{
							var __0x10767 = __0x10766.BasedOnObject as Component_CSharpScript;
							if( __0x10767 != null )
							{
								if( __0x10767.CompiledOneMethod != null )
								{
									var __0x10768 = __0x10760.CreateComponent<Component_InvokeMember>();
									__0x10762 = __0x10768;
									__0x10768.Name = "Invoke Member";

									var __0x10769 = __0x10739.Name + "|" + __0x10767.CompiledOneMethod.Signature;
									__0x10768.Member = new Reference<ReferenceValueType_Member>( null, __0x10769 );
								}
							}

							if( __0x10762 == null )
								__0x10761 = true;
						}
					}

					
					if( !__0x10761 && __0x10762 == null && __0x10739 != null && __0x10739 != MetadataManager.GetTypeOfNetType( typeof( Component_FlowGraphNode ) ) )
					{
						var __0x10770 = __0x10760.CreateComponent( __0x10739 );
						__0x10770.Name = __0x10739.GetUserFriendlyNameForInstance( true );
						__0x10770.NewObjectSetDefaultConfiguration();
						__0x10762 = __0x10770;
					}

					
					if( !__0x10761 && __0x10762 == null && __0x10740 != "" )
					{
						var __0x10771 = __0x10760.CreateComponent<Component_InvokeMember>();
						__0x10771.Name = "Invoke Member";
						__0x10771.Member = new Reference<ReferenceValueType_Member>( null, __0x10740 );

						if( __0x10741 != null )
						{
							var __0x10772 = __0x10771.MetadataGetMemberBySignature( "property:" + __0x10771.GetThisPropertyName() ) as Metadata.Property;
							if( __0x10772 != null )
							{
								var __0x10773 = ReferenceUtility.CalculateThisReference( __0x10771, __0x10741 );
								var __0x10774 = ReferenceUtility.MakeReference( __0x10772.TypeUnreferenced.GetNetType(), null, __0x10773 );
								__0x10772.SetValue( __0x10771, __0x10774, new object[ 0 ] );
							}
						}

						__0x10762 = __0x10771;
					}

					
					if( !__0x10761 && __0x10742 != null )
						__0x10762 = __0x10742;
				}

				
				

				if( __0x10761 )
				{
					__0x10760.Dispose();
					__0x10568 = null;
				}
				else
				{
					
					if( __0x10762 != null )
					{
						var __0x10775 = "Node " + __0x10762.Name;
						__0x10760.Name = FlowGraph.Components.GetUniqueName( __0x10775, false, 1 );

						
						__0x10760.ControlledObject = new Reference<Component>( null, ReferenceUtility.CalculateThisReference( __0x10760, __0x10762 ) );
					}
					__0x10760.Enabled = true;
					__0x10568 = __0x10760;

					__0x10844();
				}
			}
		}

		void __0x10842()
		{
			if( __0x10568 != null )
			{
				__0x10568.RemoveFromParent( true );
				__0x10568.Dispose();
				__0x10568 = null;
			}
		}

		void __0x10843( Component_FlowGraphNode __0x10890 )
		{
			var __0x10776 = ViewportControl.Viewport;
			Vector2 __0x10777 = __0x10776.MousePosition;
			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x10777 ) )
				__0x10777 = new Vector2( 0.5, 0.5 );

			
			var __0x10778 = ConvertScreenToUnit( __0x10777, true ) - __0x10890.GetRepresentation().Size.ToVector2() / 2 + new Vector2( 1, 1 );
			__0x10890.Position = __0x10778.ToVector2I();
		}

		void __0x10844()
		{
			if( __0x10568 != null )
			{
				var __0x10779 = __0x10568 as Component_FlowGraphNode;
				if( __0x10779 != null )
					__0x10843( __0x10779 );
			}
		}

		void __0x10845()
		{
			if( __0x10568 != null )
			{
				
				var __0x10780 = new List<Component>();
				__0x10780.Add( __0x10568 );
				var __0x10781 = new UndoActionComponentCreateDelete( Document, __0x10780, true );
				Document.UndoSystem.CommitAction( __0x10781 );
				Document.Modified = true;

				__0x10568 = null;

				EditorAPI.SelectDockWindow( this );

				
				
			}
		}

		void __0x10846()
		{
			__0x10547 = 14;

			float __0x10782 = EditorAPI.DPI;
			if( __0x10782 > 96 )
			{
				__0x10547 *= __0x10782 / 96;
				__0x10547 = (int)__0x10547;
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x10783 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x10783 != null )
			{
				var __0x10784 = new List<Component>();
				foreach( var __0x10821 in __0x10783.objects )
				{
					var __0x10785 = __0x10821 as Component;
					if( __0x10785 != null )
						__0x10784.Add( __0x10785 );
				}

				

				var __0x10786 = new List<Component>();
				Vector2I __0x10787 = Vector2I.Zero;

				for( int __0x10788 = 0; __0x10788 < __0x10784.Count; __0x10788++ )
				{
					var __0x10789 = __0x10784[ __0x10788 ];

					var __0x10790 = __0x10789.Clone();
					if( destinationParent.GetComponent( __0x10789.Name ) == null )
						__0x10790.Name = __0x10789.Name;
					else
						__0x10790.Name = destinationParent.Components.GetUniqueName( __0x10789.Name, true, 2 );
					destinationParent.AddComponent( __0x10790 );

					
					if( destinationParent == FlowGraph )
					{
						var __0x10791 = __0x10790 as Component_FlowGraphNode;
						if( __0x10791 != null )
						{
							if( __0x10788 == 0 )
							{
								__0x10843( __0x10791 );
								__0x10787 = __0x10791.Position - ( (Component_FlowGraphNode)__0x10789 ).Position;
							}
							else
								__0x10791.Position += __0x10787;
						}
					}

					__0x10786.Add( __0x10790 );
				}

				if( __0x10783.cut )
				{
					
					if( __0x10783.documentWindow.Document != Document )
					{
						
						{
							var __0x10792 = new UndoActionComponentCreateDelete( __0x10783.documentWindow.Document, __0x10784, false );
							__0x10783.documentWindow.Document.UndoSystem.CommitAction( __0x10792 );
							__0x10783.documentWindow.Document.Modified = true;
						}
						{
							var __0x10793 = new UndoActionComponentCreateDelete( Document, __0x10786, true );
							Document.UndoSystem.CommitAction( __0x10793 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x10794 = new UndoMultiAction();
						__0x10794.AddAction( new UndoActionComponentCreateDelete( Document, __0x10784, false ) );
						__0x10794.AddAction( new UndoActionComponentCreateDelete( Document, __0x10786, true ) );
						Document.UndoSystem.CommitAction( __0x10794 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x10795 = new UndoActionComponentCreateDelete( Document, __0x10786, true );
					Document.UndoSystem.CommitAction( __0x10795 );
					Document.Modified = true;
				}
			}

			return true;
		}

		protected override object OnGetSelectObjectWhenNoSelectedObjects()
		{
			
			
			var __0x10796 = FlowGraph?.Specialization.Value;
			if( __0x10796 as Component_FlowGraphSpecialization_Shader != null )
			{
				if( FlowGraph.Parent as Component_Material != null )
					return FlowGraph.Parent;
			}

			return base.OnGetSelectObjectWhenNoSelectedObjects();
		}
	}
}

namespace NeoAxis.Editor
{
	partial class Component_FlowGraph_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x10797 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x10847()
		{
			this.__0x10797 = new System.ComponentModel.Container();
			this.__0x10798 = new System.Windows.Forms.Timer(this.__0x10797);
			this.SuspendLayout();
			
			
			
			this.__0x10798.Interval = 50;
			this.__0x10798.Tick += new System.EventHandler(this.__0x10836);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_FlowGraph_DocumentWindow";
			this.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x10840);
			this.DragEnter += new System.Windows.Forms.DragEventHandler(this.__0x10837);
			this.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x10838);
			this.DragLeave += new System.EventHandler(this.__0x10839);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x10798;
	}
}






namespace NeoAxis.Editor
{
	public class Component_GroupOfObjectsElement_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10891;
		ProcedureUI.Button __0x10892;
		ProcedureUI.Button __0x10893;
		ProcedureUI.Button __0x10894;
		ProcedureUI.Button __0x10895;

		

		string __0x10919( string __0x10927 )
		{
			return EditorLocalization.Translate( "GroupOfObjectsElement", __0x10927 );
		}

		protected override void OnInit()
		{
			__0x10891 = ProcedureForm.CreateButton( __0x10919( "Clear Objects" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10891.Click += __0x10920;

			__0x10892 = ProcedureForm.CreateButton( __0x10919( "Update Alignment" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10892.Click += __0x10921;

			__0x10893 = ProcedureForm.CreateButton( __0x10919( "Update Variations" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10893.Click += __0x10924;

			__0x10894 = ProcedureForm.CreateButton( __0x10919( "Random Groups" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10894.Click += __0x10925;

			__0x10895 = ProcedureForm.CreateButton( __0x10919( "Reset Colors" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10895.Click += __0x10926;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10891, __0x10892 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10893, __0x10894 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10895 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x10896 = GetObjects<Component_GroupOfObjectsElement>();
			__0x10891.Enabled = __0x10896.Any( __0x10928 => __0x10928.ObjectsExists() );
			__0x10892.Enabled = __0x10891.Enabled;

			__0x10893.Enabled = __0x10891.Enabled && GetObjects<Component_GroupOfObjectsElement_Surface>().Length != 0;
			__0x10894.Enabled = __0x10893.Enabled;

			__0x10895.Enabled = __0x10891.Enabled;
		}

		private void __0x10920( ProcedureUI.Button __0x10929 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10919( "Delete all objects of the element?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10897 = new UndoMultiAction();

			foreach( var __0x10912 in GetObjects<Component_GroupOfObjectsElement>() )
			{
				var __0x10898 = __0x10912.Parent as Component_GroupOfObjects;
				if( __0x10898 != null )
				{
					var __0x10899 = __0x10912.GetObjectsOfElement();
					if( __0x10899.Count != 0 )
					{
						var __0x10900 = new Component_GroupOfObjects_Editor.UndoActionCreateDelete( __0x10898, __0x10899.ToArray(), false, true );
						__0x10897.AddAction( __0x10900 );
					}
				}
			}

			if( __0x10897.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10897 );
		}

		private unsafe void __0x10921( ProcedureUI.Button __0x10930 )
		{
			var __0x10901 = new UndoMultiAction();
			var __0x10902 = new ESet<Component_GroupOfObjects>();

			foreach( var __0x10913 in GetObjects<Component_GroupOfObjectsElement>() )
			{
				var __0x10903 = __0x10913.Parent as Component_GroupOfObjects;
				if( __0x10903 != null )
				{
					var __0x10904 = __0x10913 as Component_GroupOfObjectsElement_Mesh;
					if( __0x10904 != null )
					{
						__0x10904.UpdateAlignment( __0x10901 );
						__0x10902.AddWithCheckAlreadyContained( __0x10903 );
					}

					var __0x10905 = __0x10913 as Component_GroupOfObjectsElement_Surface;
					if( __0x10905 != null )
					{
						__0x10905.UpdateAlignment( __0x10901 );
						__0x10902.AddWithCheckAlreadyContained( __0x10903 );
					}
				}
			}

			foreach( var __0x10914 in __0x10902 )
				__0x10914.CreateSectors();

			if( __0x10901.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10901 );
		}

		void __0x10922( bool __0x10931 )
		{
			var __0x10906 = new UndoMultiAction();
			var __0x10907 = new ESet<Component_GroupOfObjects>();

			foreach( var __0x10915 in GetObjects<Component_GroupOfObjectsElement_Surface>() )
			{
				var __0x10908 = __0x10915.Parent as Component_GroupOfObjects;
				if( __0x10908 != null )
				{
					__0x10915.UpdateVariations( __0x10931, __0x10906 );
					__0x10907.AddWithCheckAlreadyContained( __0x10908 );
				}
			}

			foreach( var __0x10916 in __0x10907 )
				__0x10916.CreateSectors();

			if( __0x10906.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10906 );
		}

		void __0x10923()
		{
			var __0x10909 = new UndoMultiAction();
			var __0x10910 = new ESet<Component_GroupOfObjects>();

			foreach( var __0x10917 in GetObjects<Component_GroupOfObjectsElement>() )
			{
				var __0x10911 = __0x10917.Parent as Component_GroupOfObjects;
				if( __0x10911 != null )
				{
					__0x10917.ResetColors( __0x10909 );
					__0x10910.AddWithCheckAlreadyContained( __0x10911 );
				}
			}

			foreach( var __0x10918 in __0x10910 )
				__0x10918.CreateSectors();

			if( __0x10909.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10909 );
		}

		private unsafe void __0x10924( ProcedureUI.Button __0x10932 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10919( "Update variations of the objects?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10922( false );
		}

		private void __0x10925( ProcedureUI.Button __0x10933 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10919( "Refresh surface groups randomly?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10922( true );
		}

		private void __0x10926( ProcedureUI.Button __0x10934 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10919( "Reset color of the objects to \'1 1 1\'?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			__0x10923();
		}
	}
}





namespace NeoAxis.Editor
{
	/// <summary>
	/// Auxiliary class for <see cref="Component_GroupOfObjects"/>.
	/// </summary>
	public class Component_GroupOfObjects_Editor
	{
		public class UndoActionCreateDelete : UndoSystem.Action
		{
			Component_GroupOfObjects __0x10935;
			Component_GroupOfObjects.Object[] __0x10936;
			bool __0x10937;

			

			public UndoActionCreateDelete( Component_GroupOfObjects groupOfObjects, int[] indexes, bool create, bool callDestroyObjects )
			{
				this.__0x10935 = groupOfObjects;
				this.__0x10936 = groupOfObjects.ObjectsGetData( indexes );
				this.__0x10937 = create;

				if( !create && callDestroyObjects )
					__0x10941();
			}

			public UndoActionCreateDelete( Component_GroupOfObjects groupOfObjects, Component_GroupOfObjects.Object[] objects, bool create, bool callDestroyObjects )
			{
				this.__0x10935 = groupOfObjects;
				this.__0x10936 = objects;
				this.__0x10937 = create;

				if( !create && callDestroyObjects )
					__0x10941();
			}

			void __0x10940()
			{
				var __0x10938 = __0x10935.ObjectsAdd( __0x10936 );
				__0x10936 = __0x10935.ObjectsGetData( __0x10938 );
			}

			void __0x10941()
			{
				var __0x10939 = __0x10935.ObjectsRemove( __0x10936 );
				if( __0x10939 != __0x10936.Length )
					Log.Fatal( "Component_GroupOfObjects_Editor: DestroyObjects: removedCount != objects.Length." );
			}

			protected internal override void DoUndo()
			{
				if( __0x10937 )
					__0x10941();
				else
					__0x10940();

				__0x10937 = !__0x10937;
			}

			protected internal override void DoRedo()
			{
				DoUndo();
			}

			protected internal override void Destroy()
			{
			}

			public override string ToString()
			{
				return string.Format( "GroupOfObjects: {0}", __0x10937 ? "Create" : "Delete" );
			}
		}

		

		
		
		
		
		

		

		
		
		
		
		
		

		
		
		

		
		
		
		

		
		

		

		
		
		

		
		
		
		

		
		
		

		
		
		
		
		

	}
}





namespace NeoAxis.Editor
{
	public class Component_GroupOfObjects_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x10942;
		ProcedureUI.Button __0x10943;
		ProcedureUI.Button __0x10944;
		ProcedureUI.Button __0x10945;

		

		string __0x10973( string __0x10978 )
		{
			return EditorLocalization.Translate( "GroupOfObjects", __0x10978 );
		}

		protected override void OnInit()
		{
			__0x10942 = ProcedureForm.CreateButton( __0x10973( "Clear" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10942.Click += __0x10974;

			__0x10943 = ProcedureForm.CreateButton( __0x10973( "Clear Objects" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10943.Click += __0x10975;

			__0x10944 = ProcedureForm.CreateButton( __0x10973( "Update Alignment" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10944.Click += __0x10976;

			__0x10945 = ProcedureForm.CreateButton( __0x10973( "Statistics" ), ProcedureUI.Button.SizeEnum.Long );
			__0x10945.Click += __0x10977;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10942, __0x10943 } );
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x10944, __0x10945 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x10946 = GetObjects<Component_GroupOfObjects>();
			__0x10942.Enabled = __0x10946.Any( __0x10979 => __0x10979.ObjectsExists() || __0x10979.Components.Count != 0 );
			__0x10943.Enabled = __0x10946.Any( __0x10980 => __0x10980.ObjectsExists() );
			__0x10944.Enabled = __0x10946.Any( __0x10981 => __0x10981.ObjectsExists() );

			__0x10945.Enabled = GetObjects<Component_GroupOfObjects>().Length == 1;
		}

		private void __0x10974( ProcedureUI.Button __0x10982 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10973( "Delete all objects and child components?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10947 = new UndoMultiAction();

			foreach( var __0x10966 in GetObjects<Component_GroupOfObjects>() )
			{
				var __0x10948 = __0x10966.ObjectsGetAll();
				if( __0x10948.Count != 0 )
				{
					var __0x10949 = new Component_GroupOfObjects_Editor.UndoActionCreateDelete( __0x10966, __0x10948.ToArray(), false, true );
					__0x10947.AddAction( __0x10949 );
				}

				var __0x10950 = __0x10966.GetComponents();
				__0x10947.AddAction( new UndoActionComponentCreateDelete( Provider.DocumentWindow.Document, __0x10950, false ) );
			}

			if( __0x10947.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10947 );
		}

		private void __0x10975( ProcedureUI.Button __0x10983 )
		{
			if( EditorMessageBox.ShowQuestion( __0x10973( "Delete all objects?" ), EMessageBoxButtons.YesNo ) != EDialogResult.Yes )
				return;

			var __0x10951 = new UndoMultiAction();

			foreach( var __0x10967 in GetObjects<Component_GroupOfObjects>() )
			{
				var __0x10952 = __0x10967.ObjectsGetAll();
				if( __0x10952.Count != 0 )
				{
					var __0x10953 = new Component_GroupOfObjects_Editor.UndoActionCreateDelete( __0x10967, __0x10952.ToArray(), false, true );
					__0x10951.AddAction( __0x10953 );
				}
			}

			if( __0x10951.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10951 );
		}

		private unsafe void __0x10976( ProcedureUI.Button __0x10984 )
		{
			var __0x10954 = new UndoMultiAction();
			foreach( var __0x10968 in GetObjects<Component_GroupOfObjects>() )
			{
				foreach( var __0x10969 in __0x10968.GetComponents<Component_GroupOfObjectsElement>() )
				{
					var __0x10955 = __0x10969 as Component_GroupOfObjectsElement_Mesh;
					if( __0x10955 != null )
						__0x10955.UpdateAlignment( __0x10954 );

					var __0x10956 = __0x10969 as Component_GroupOfObjectsElement_Surface;
					if( __0x10956 != null )
						__0x10956.UpdateAlignment( __0x10954 );
				}

				__0x10968.CreateSectors();
			}
			if( __0x10954.Actions.Count != 0 )
				Provider.DocumentWindow.Document.CommitUndoAction( __0x10954 );

			
			
			
			
			

			
			

			
			
			
			

			
			
			
			

			
			
			
			
			

			
			
			
			
			

			
			
			
			

			
			
		}

		private unsafe void __0x10977( ProcedureUI.Button __0x10985 )
		{
			var __0x10957 = GetObjects<Component_GroupOfObjects>();
			if( __0x10957.Length != 1 )
				return;

			var __0x10958 = __0x10957[ 0 ];
			var __0x10959 = __0x10958.ObjectsGetAll();
			var __0x10960 = sizeof( Component_GroupOfObjects.Object );

			var __0x10961 = new List<string>();
			long __0x10962 = 0;

			foreach( var __0x10970 in __0x10958.GetComponents<Component_GroupOfObjectsElement>() )
			{
				long __0x10963 = 0;
				foreach( var __0x10971 in __0x10959 )
				{
					ref var __0x10964 = ref __0x10958.ObjectGetData( __0x10971 );
					if( __0x10964.Element == __0x10970.Index )
						__0x10963++;
				}

				__0x10961.Add( $"{__0x10970}: {__0x10963 }" );
				
				__0x10962 += __0x10963;
			}

			__0x10961.Add( "" );
			__0x10961.Add( string.Format( __0x10973( "Total objects: {0}" ), __0x10962 ) );
			__0x10961.Add( string.Format( __0x10973( "Total data size: {0} MB." ), __0x10962 * __0x10960 / 1024 / 1024 ) );

			

			string __0x10965 = "";
			foreach( var __0x10972 in __0x10961 )
			{
				if( __0x10965 != "" )
					__0x10965 += "\r\n";
				__0x10965 += __0x10972;
			}

			EditorMessageBox.ShowInfo( __0x10965 );
		}

	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Image_DocumentWindow : DocumentWindowWithViewport
	{
		public Component_Image_DocumentWindow()
		{
			__0x10998();
		}

		public Component_Image Texture
		{
			get { return (Component_Image)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x10986 = CreateScene( false );

			if( Texture?.Result?.TextureType == Component_Image.TypeEnum.Cube )
			{
				var __0x10987 = MetadataManager.GetType( "NeoAxis.Component_Skybox" );
				if( __0x10987 != null )
				{
					var __0x10988 = __0x10986.CreateComponent( __0x10987 );
					__0x10988.PropertySet( "Cubemap", Texture );
					__0x10988.PropertySet( "AllowProcessEnvironmentCubemap", false );
				}
			}

			__0x10986.Enabled = true;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			if( Texture?.Result?.TextureType == Component_Image.TypeEnum._2D )
			{
				var __0x10989 = Texture.Result;

				var __0x10990 = __0x10989.ResultSize.ToVector2();
				var __0x10991 = viewport.SizeInPixels.ToVector2();

				
				{
					if( __0x10990.X > __0x10991.X * .95f )
					{
						var __0x10992 = __0x10991.X * .95f / __0x10990.X;
						__0x10990 *= __0x10992;
					}
					if( __0x10990.Y > __0x10991.Y * .95f )
					{
						var __0x10993 = __0x10991.Y * .95f / __0x10990.Y;
						__0x10990 *= __0x10993;
					}
				}

				var __0x10994 = __0x10990 / __0x10991;

				var __0x10995 = ( new Vector2( 1, 1 ) - __0x10994 ) / 2;

				var __0x10996 = new Rectangle( __0x10995, __0x10995 + __0x10994 );
				viewport.CanvasRenderer.AddQuad( __0x10996, new Rectangle( 0, 0, 1, 1 ), Texture, new ColorValue( 1, 1, 1 ), true );
			}
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

		}
	}
}

namespace NeoAxis.Editor
{
	partial class Component_Image_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x10997 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x10998()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "Component_Image_DocumentWindow";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class Component_Image_PreviewControl : PreviewControlWithViewport
	{
		public Component_Image_PreviewControl()
		{
			__0x11016();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x10999 = CreateScene( false );

			var __0x11000 = ObjectOfPreview as Component_Image;
			if( __0x11000?.Result?.TextureType == Component_Image.TypeEnum.Cube )
			{
				var __0x11001 = MetadataManager.GetType( "NeoAxis.Component_Skybox" );
				if( __0x11001 != null )
				{
					var __0x11002 = __0x10999.CreateComponent( __0x11001 );
					__0x11002.PropertySet( "Cubemap", __0x11000 );
					__0x11002.PropertySet( "AllowProcessEnvironmentCubemap", false );
				}
			}

			__0x10999.Enabled = true;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			var __0x11003 = ObjectOfPreview as Component_Image;
			if( __0x11003?.Result?.TextureType == Component_Image.TypeEnum._2D )
			{
				double __0x11004 = 0.95;

				double __0x11005 = Math.Min(
					(double)viewport.SizeInPixels.X / (double)__0x11003.Result.ResultSize.X,
					(double)viewport.SizeInPixels.Y / (double)__0x11003.Result.ResultSize.Y );
				Vector2 __0x11006 = __0x11003.Result.ResultSize.ToVector2() * __0x11005 * __0x11004;
				Vector2 __0x11007 = viewport.SizeInPixels.ToVector2() / 2;
				Rectangle __0x11008 = new Rectangle( __0x11007 - __0x11006 / 2, __0x11007 + __0x11006 / 2 );

				Rectangle __0x11009 = __0x11008 / viewport.SizeInPixels.ToVector2();

				var __0x11010 = viewport.CanvasRenderer;

				var __0x11011 = false;
				if( __0x11008.Size.X >= __0x11003.Result.ResultSize.X && __0x11008.Size.Y >= __0x11003.Result.ResultSize.Y )
					__0x11011 = true;

				if( __0x11011 )
					__0x11010.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
				__0x11010.AddQuad( __0x11009, new Rectangle( 0, 0, 1, 1 ), __0x11003 );
				if( __0x11011 )
					__0x11010.PopTextureFilteringMode();
			}
		}

		static string __0x11015( string __0x11017 )
		{
			return EditorLocalization.Translate( "ImagePreviewControl", __0x11017 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			var __0x11012 = ObjectOfPreview as Component_Image;
			if( __0x11012 != null )
			{
				var __0x11013 = __0x11012.Result;
				if( __0x11013 != null )
				{
					lines.Add( __0x11015( "Source" ) + $": {__0x11013.SourceSize}, {TypeUtility.DisplayNameAddSpaces( __0x11013.SourceFormat.ToString() )}" );
					lines.Add( __0x11015( "Processed" ) + $": {__0x11013.ResultSize}, {TypeUtility.DisplayNameAddSpaces( __0x11013.ResultFormat.ToString() )}" );
					lines.Add( __0x11015( "Type" ) + $": " + TypeUtility.DisplayNameAddSpaces( __0x11013.TextureType.ToString() ) );
				}
				else
					lines.Add( __0x11015( "No data" ) );
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class Component_Image_PreviewControl
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x11014 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x11014 != null))
            {
                __0x11014.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x11016()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_Image_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Image_PreviewImage : PreviewImageGenerator
	{
		public Component_Image_PreviewImage()
		{
		}

		public override bool ClampImage
		{
			get { return false; }
		}

		protected override void Update()
		{
			var __0x11018 = CreateScene( false );

			var __0x11019 = ObjectOfPreview as Component_Image;
			if( __0x11019?.Result?.TextureType == Component_Image.TypeEnum.Cube )
			{
				var __0x11020 = MetadataManager.GetType( "NeoAxis.Component_Skybox" );
				if( __0x11020 != null )
				{
					var __0x11021 = __0x11018.CreateComponent( __0x11020 );
					__0x11021.PropertySet( "Cubemap", __0x11019 );
					__0x11021.PropertySet( "AllowProcessEnvironmentCubemap", false );
				}
			}

			__0x11018.Enabled = true;

			if( __0x11019?.Result?.TextureType == Component_Image.TypeEnum._2D )
			{
				double __0x11022 = 0.95;

				double __0x11023 = Math.Min(
					(double)Viewport.SizeInPixels.X / (double)__0x11019.Result.ResultSize.X,
					(double)Viewport.SizeInPixels.Y / (double)__0x11019.Result.ResultSize.Y );
				Vector2 __0x11024 = __0x11019.Result.ResultSize.ToVector2() * __0x11023 * __0x11022;
				Vector2 __0x11025 = Viewport.SizeInPixels.ToVector2() / 2;
				Rectangle __0x11026 = new Rectangle( __0x11025 - __0x11024 / 2, __0x11025 + __0x11024 / 2 );

				Rectangle __0x11027 = __0x11026 / Viewport.SizeInPixels.ToVector2();

				var __0x11028 = Viewport.CanvasRenderer;

				var __0x11029 = false;
				if( __0x11026.Size.X >= __0x11019.Result.ResultSize.X && __0x11026.Size.Y >= __0x11019.Result.ResultSize.Y )
					__0x11029 = true;

				if( __0x11029 )
					__0x11028.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
				__0x11028.AddQuad( __0x11027, new Rectangle( 0, 0, 1, 1 ), __0x11019 );
				if( __0x11029 )
					__0x11028.PopTextureFilteringMode();
			}
		}

	}
}





namespace NeoAxis.Editor
{
	public class Component_Import3D_Editor : CanvasBasedEditor
	{
		bool __0x11030 = true;

		bool __0x11031;
		Component_Import3D __0x11032;
		Dictionary<Component_Mesh, Transform> __0x11033;

		

		public Component_Import3D Import
		{
			get { return (Component_Import3D)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x11034 = CreateScene( false );
			__0x11076();
			__0x11034.Enabled = true;

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x11075;
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11075;

			base.OnDestroy();
		}

		public void NeedRecreateDisplayObject( bool resetCamera )
		{
			__0x11031 = true;
			if( resetCamera )
				__0x11030 = true;

			unchecked
			{
				if( Import != null )
					Import.VersionForPreviewDisplay++;
			}
		}

		private void __0x11075( object __0x11081, EventArgs __0x11082 )
		{
			__0x11031 = true;

			unchecked
			{
				if( Import != null )
					Import.VersionForPreviewDisplay++;
			}
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		void __0x11076()
		{
			if( Import != null )
				__0x11032 = Import.CreateForPreviewDisplay( Scene, out _, out __0x11033 );
		}

		void __0x11077()
		{
			if( __0x11032 != null )
			{
				__0x11032.RemoveFromParent( false );
				__0x11032.Dispose();
				__0x11032 = null;
				__0x11033 = null;
			}
		}

		protected override void OnViewportUpdateBegin()
		{
			base.OnViewportUpdateBegin();

			if( Scene != null && __0x11031 )
			{
				__0x11031 = false;
				__0x11077();
				__0x11076();
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x11030 && Scene.CameraEditor.Value != null )
			{
				__0x11078();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );

				__0x11030 = false;
			}
		}

		void __0x11078()
		{
			var __0x11035 = Scene.CameraEditor.Value;

			var __0x11036 = Scene.CalculateTotalBoundsOfObjectsInSpace();

			var __0x11037 = __0x11036.GetCenter();

			

			double __0x11038 = Math.Max( Math.Max( __0x11036.GetSize().X, __0x11036.GetSize().Y ), __0x11036.GetSize().Z );
			double __0x11039 = __0x11038 * 2;
			if( __0x11039 < 2 )
				__0x11039 = 2;

			double __0x11040 = 1;
			SphericalDirection __0x11041 = new SphericalDirection( -3.83, -.47 );

			var __0x11042 = __0x11037 - __0x11041.GetVector() * __0x11039 * __0x11040;
			var __0x11043 = __0x11037;

			Vector3 __0x11044 = __0x11042;
			Vector3 __0x11045 = __0x11043;
			Degree __0x11046 = 65;

			
			
			__0x11035.FieldOfView = __0x11046;
			__0x11035.NearClipPlane = Math.Max( __0x11039 / 10000, 0.01 );
			__0x11035.FarClipPlane = Math.Max( 1000, __0x11039 * 2 );

			__0x11035.Transform = new Transform( __0x11044, Quaternion.LookAt( ( __0x11045 - __0x11044 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11035.FixedUp = Vector3.ZAxis;
		}

		Bounds __0x11079()
		{
			Bounds __0x11047 = NeoAxis.Bounds.Cleared;

			if( __0x11032 != null )
			{
				
				
				foreach( var __0x11070 in __0x11032.GetComponents<Component_ObjectInSpace>( false, true ) )
				{
					if( __0x11070.SpaceBounds.BoundingBox.HasValue )
						__0x11047.Add( __0x11070.SpaceBounds.BoundingBox.Value );
				}
			}

			return __0x11047;
		}

		protected override void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.OnGetTextInfoLeftTopCorner( lines );

			if( Import != null )
			{
				{
					int __0x11048 = Import.GetComponents<Component_Material>( false, true ).Length;
					lines.Add( "Materials: " + __0x11048.ToString() );
				}

				{
					int __0x11049 = Import.GetComponents<Component_Mesh>( false, true ).Where( __0x11083 => __0x11083.FindParent<Component_Mesh>() == null ).Count();
					lines.Add( "Meshes: " + __0x11049.ToString() );
				}

				int __0x11050 = Import.GetComponents<Component_ObjectInSpace>( false, true ).Length;
				if( __0x11050 != 0 )
					lines.Add( "Scene objects: " + __0x11050.ToString() );

				var __0x11051 = __0x11079();
				if( !__0x11051.IsCleared() )
				{
					string __0x11052 = "";
					if( Import.GetComponent( "Mesh" ) != null )
						__0x11052 = "Mesh size";
					else if( __0x11050 != 0 )
						__0x11052 = "Total size of scene objects";
					if( !string.IsNullOrEmpty( __0x11052 ) )
						lines.Add( string.Format( "{0}: {1}", __0x11052, __0x11051.GetSize().ToString( 3 ) ) );
				}
			}
		}

		T[] __0x11080<T>( byte[] __0x11084, int __0x11085, int __0x11086, int __0x11087 ) where T : unmanaged
		{
			T[] __0x11053 = new T[ __0x11086 ];
			unsafe
			{
				fixed ( byte* __0x11054 = __0x11084 )
				{
					byte* __0x11055 = __0x11054 + __0x11087;
					for( int __0x11056 = 0; __0x11056 < __0x11086; __0x11056++ )
					{
						__0x11053[ __0x11056 ] = *(T*)__0x11055;
						__0x11055 += __0x11085;
					}
				}
			}
			return __0x11053;
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			{
				var __0x11057 = new ESet<Component_MeshGeometry>();
				foreach( var __0x11071 in Import.GetComponents<Component_MeshGeometry>( checkChildren: true ) )
				{
					
					if( __0x11071.ParentMesh != null && __0x11071.ParentMesh.FindParent<Component_Mesh>() == null )
					{
						
						if( SelectedObjectsSet.Contains( __0x11071.ParentMesh ) && Import.GetComponent( "Mesh" ) == null )
							__0x11057.AddWithCheckAlreadyContained( __0x11071 );

						if( SelectedObjectsSet.Contains( __0x11071 ) )
							__0x11057.AddWithCheckAlreadyContained( __0x11071 );

						var __0x11058 = __0x11071.Material.Value;
						if( __0x11058 != null && SelectedObjectsSet.Contains( __0x11058 ) )
							__0x11057.AddWithCheckAlreadyContained( __0x11071 );
					}
				}

				foreach( var __0x11072 in __0x11057 )
				{
					var __0x11059 = __0x11072.ParentMesh;
					var __0x11060 = __0x11072.VertexStructure.Value;
					var __0x11061 = __0x11072.Vertices.Value;
					var __0x11062 = __0x11072.Indices.Value;

					if( __0x11060 != null )
					{
						__0x11060.GetInfo( out var vertexSize, out var holes );
						var __0x11063 = __0x11061.Length / vertexSize;

						try
						{
							if( __0x11060.GetElementBySemantic( VertexElementSemantic.Position, out var element ) && element.Type == VertexElementType.Float3 )
							{
								if( __0x11061 != null && __0x11062 != null )
								{
									

									var __0x11064 = __0x11080<Vector3F>( __0x11061, vertexSize, __0x11063, element.Offset );

									Transform __0x11065;
									if( !__0x11033.TryGetValue( __0x11059, out __0x11065 ) )
										__0x11065 = Transform.Identity;
									var __0x11066 = __0x11065.ToMatrix4();

									Viewport.Simple3DRenderer.SetColor( ProjectSettings.Get.SelectedColor );
									Viewport.Simple3DRenderer.AddTriangles( __0x11064, __0x11062, ref __0x11066, true, true );
								}
							}
						}
						catch( Exception e )
						{
							Log.Warning( e.Message );
						}
					}
				}
			}

			
			
			
			
			
			
			

			
			{
				var __0x11067 = new ESet<Component_ObjectInSpace>();
				foreach( var __0x11073 in SelectedObjects )
				{
					var __0x11068 = __0x11073 as Component_ObjectInSpace;
					if( __0x11068 != null )
						__0x11067.Add( __0x11068 );
				}

				foreach( var __0x11074 in __0x11067 )
				{
					var __0x11069 = __0x11074.SpaceBounds.CalculatedBoundingBox;

					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, 0.5 ) );
					Viewport.Simple3DRenderer.AddBounds( __0x11069 );

					
					
					
					
				}
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Import3D_Preview : CanvasBasedPreview
	{
		Component_Import3D __0x11088;
		long __0x11089;

		bool __0x11090;
		Component_Mesh __0x11091;
		Reference<Component_Image> __0x11092;
		Component __0x11093;

		

		protected override void OnCreate()
		{
			base.OnCreate();

			CreateScene( false );
			__0x11101();
			Scene.Enabled = true;
			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );

			var __0x11094 = ObjectOfPreview as Component_Import3D;
			var __0x11095 = __0x11094?.GetComponent( "Mesh" ) as Component_Mesh;
			if( __0x11095 != null && __0x11095.EditorCameraTransform != null )
			{
				var __0x11096 = __0x11095.EditorCameraTransform;
				CameraInitialDistance = ( __0x11096.Position - CameraLookTo ).Length();
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11096.Position );
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			
			{
				var __0x11097 = __0x11090 ? ProjectSettings.Get.GetMaterialPreviewEnvironment() : new Reference<Component_Image>();
				if( !__0x11092.Equals( __0x11097 ) )
					__0x11102();
			}
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			__0x11101();

			
			
			
			
			
			
			

			
			
			
			
			
			
			
			
			
		}

		void __0x11101()
		{
			if( Scene == null )
				return;

			var __0x11098 = ObjectOfPreview as Component_Import3D;
			if( __0x11098 != null )
			{
				if( __0x11088 == null || __0x11089 != __0x11098.VersionForPreviewDisplay || __0x11091 != ProjectSettings.Get.MaterialPreviewMesh.Value )
				{
					Scene.Enabled = false;

					if( __0x11088 != null )
					{
						__0x11088.RemoveFromParent( false );
						__0x11088.Dispose();
					}

					__0x11088 = __0x11098.CreateForPreviewDisplay( Scene, out __0x11090, out _ );
					__0x11089 = __0x11098.VersionForPreviewDisplay;

					Scene.Enabled = true;

					__0x11091 = ProjectSettings.Get.MaterialPreviewMesh.Value;
				}
			}
		}

		void __0x11102()
		{
			var __0x11099 = __0x11090 ? ProjectSettings.Get.GetMaterialPreviewEnvironment() : new Reference<Component_Image>();

			__0x11092 = __0x11099;

			if( __0x11099.ReferenceSpecified )
			{
				var __0x11100 = MetadataManager.GetType( "NeoAxis.Component_Skybox" );
				if( __0x11100 != null )
				{
					if( __0x11093 == null )
						__0x11093 = Scene.CreateComponent( __0x11100 );
					__0x11093.PropertySet( "Cubemap", __0x11099 );
				}
			}
			else
			{
				__0x11093?.Dispose();
				__0x11093 = null;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Import3D_PreviewImage : PreviewImageGenerator
	{
		public Component_Import3D_PreviewImage()
		{
		}

		protected override void Update()
		{
			CreateScene( false );

			var __0x11103 = ObjectOfPreview as Component_Import3D;
			if( __0x11103 != null )
				__0x11103.CreateForPreviewDisplay( Scene, out _, out _ );

			Scene.Enabled = true;

			var __0x11104 = 2.6;

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), __0x11104 );

			var __0x11105 = __0x11103.GetComponent( "Mesh" ) as Component_Mesh;
			if( __0x11105 != null && __0x11105.EditorCameraTransform != null )
			{
				var __0x11106 = __0x11105.EditorCameraTransform;
				CameraDistance = ( __0x11106.Position - CameraLookTo ).Length() * __0x11104;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11106.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Import3D_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11107;

		


		static string __0x11115( string __0x11118 )
		{
			return EditorLocalization.Translate( "Import3D", __0x11118 );
		}

		protected override void OnInit()
		{
			__0x11107 = ProcedureForm.CreateButton( __0x11115( "Re-import" ) );
			__0x11107.Click += __0x11117;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11107 } );
		}

		void __0x11116()
		{
			var __0x11108 = Provider.SelectedObjects[ 0 ] as Component_Import3D;
			if( __0x11108 == null )
				return;

			var __0x11109 = new Component_Import3D.ReimportSettings();

			var __0x11110 = new SpecifyParametersForm( __0x11115( "Re-import" ), __0x11109 );
			__0x11110.CheckHandler = delegate ( ref string __0x11119 )
			{
				return true;
			};
			if( __0x11110.ShowDialog() != DialogResult.OK )
				return;


			
			Provider.DocumentWindow?.Document?.UndoSystem.Clear();

			if( !__0x11108.DoUpdate( __0x11109, out string error ) )
			{
				var __0x11111 = __0x11108.ParentRoot.HierarchyController?.CreatedByResource?.Owner.Name;
				if( string.IsNullOrEmpty( __0x11111 ) )
					__0x11111 = "NO FILE NAME";
				var __0x11112 = string.Format( __0x11115( "Unable to load or import resource \'{0}\'." ), __0x11111 ) + "\r\n\r\n" + error;
				Log.Error( __0x11112 );
				return;
			}

			if( Provider?.DocumentWindow != null )
			{
				Provider.DocumentWindow.Document.Modified = true;

				
				var __0x11113 = Provider.DocumentWindow as DocumentWindowWithViewport_CanvasBasedEditor;
				if( __0x11113 != null )
				{
					var __0x11114 = __0x11113.Editor as Component_Import3D_Editor;
					__0x11114?.NeedRecreateDisplayObject( true );
				}
				
				
			}
		}

		private void __0x11117( ProcedureUI.Button __0x11120 )
		{
			__0x11116();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Material_DocumentWindow : DocumentWindowWithViewport
	{
		bool __0x11121 = true;

		
		

		Component_Mesh __0x11122;
		Component_Mesh __0x11123;

		Reference<Component_Image> __0x11124;
		ColorValuePowered __0x11125;
		double __0x11126 = -1;
		Component_Skybox __0x11127;

		

		public Component_Material_DocumentWindow()
		{
			__0x11158();
		}

		public Component_Material Material
		{
			get { return (Component_Material)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			
			{
				var __0x11128 = CreateScene( false );

				var __0x11129 = __0x11128.CreateComponent<Component_MeshInSpace>();
				__0x11129.Name = "Mesh In Space";
				__0x11129.ReplaceMaterial = Material;

				__0x11156();
				__0x11157();

				__0x11128.Enabled = true;
			}

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );

			
			

			__0x11152.Start();
		}

		protected override void OnDestroy()
		{
			
			

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			
			{
				var __0x11130 = ProjectSettings.Get.MaterialPreviewMesh.Value;
				if( __0x11122 != __0x11130 )
				{
					__0x11156();
					__0x11121 = true;
				}
			}

			__0x11157();

			if( __0x11121 && scene.CameraEditor.Value != null )
			{
				__0x11153();
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, scene.CameraEditor );

				__0x11121 = false;
			}
		}

		void __0x11153()
		{
			var __0x11131 = Scene.CameraEditor.Value;
			var __0x11132 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			var __0x11133 = __0x11132.GetCenter();

			

			double __0x11134 = Math.Max( Math.Max( __0x11132.GetSize().X, __0x11132.GetSize().Y ), __0x11132.GetSize().Z );
			double __0x11135 = __0x11134 * 2;
			if( __0x11135 < 2 )
				__0x11135 = 2;

			double __0x11136 = 1;
			SphericalDirection __0x11137 = new SphericalDirection( -3.83, -.47 );

			var __0x11138 = __0x11133 - __0x11137.GetVector() * __0x11135 * __0x11136;
			var __0x11139 = __0x11133;

			Vector3 __0x11140 = __0x11138;
			Vector3 __0x11141 = __0x11139;
			Degree __0x11142 = 65;

			
			
			__0x11131.FieldOfView = __0x11142;
			__0x11131.NearClipPlane = Math.Max( __0x11135 / 10000, 0.01 );
			__0x11131.FarClipPlane = Math.Max( 1000, __0x11135 * 2 );

			__0x11131.Transform = new Transform( __0x11140, Quaternion.LookAt( ( __0x11141 - __0x11140 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11131.FixedUp = Vector3.ZAxis;
		}

		static string __0x11154( string __0x11159 )
		{
			return EditorLocalization.Translate( "MaterialDocumentWindow", __0x11159 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			if( Material != null )
			{
				var __0x11143 = Material.Result;
				if( __0x11143 != null )
				{
					var __0x11144 = __0x11143 as Component_Material.CompiledMaterialData;
					if( __0x11144 != null )
					{
						if( __0x11144.deferredShadingSupport )
							lines.Add( __0x11154( "Deferred shading is supported." ) );
						else
							lines.Add( string.Format( __0x11154( "Deferred shading is not supported because {0}." ), __0x11144.deferredShadingSupportReason ) );

						if( __0x11144.receiveDecalsSupport )
							lines.Add( __0x11154( "Receiving decals is supported." ) );
						else
							lines.Add( string.Format( __0x11154( "Receiving decals is not supported because {0}." ), __0x11144.receiveDecalsSupportReason ) );

						if( __0x11144.decalSupport )
							lines.Add( __0x11154( "Decal rendering is supported." ) );
						else
							lines.Add( string.Format( __0x11154( "Decal rendering is not supported because {0}." ), __0x11144.decalSupportReason ) );
					}
				}
			}
		}

		
		
		
		

		
		
		

		private void __0x11155( object __0x11160, EventArgs __0x11161 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( Material != null )
			{
				

				
				
				

				
				
				

				
				
				
				
				
				
				
				
				
				
			}
		}

		void __0x11156()
		{
			var __0x11145 = ProjectSettings.Get.MaterialPreviewMesh.Value;

			__0x11122 = __0x11145;

			if( __0x11145 == null )
			{
				if( __0x11123 == null )
				{
					
					__0x11123 = Scene.CreateComponent<Component_Mesh>( enabled: false );
					var __0x11146 = __0x11123.CreateComponent<Component_MeshGeometry_Sphere>();
					__0x11146.SegmentsHorizontal = 64;
					__0x11146.SegmentsVertical = 64;
					__0x11123.Enabled = true;
				}
				__0x11145 = __0x11123;
			}

			var __0x11147 = (Component_MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x11147.Mesh = __0x11145;
		}

		void __0x11157()
		{
			var __0x11148 = ProjectSettings.Get.GetMaterialPreviewEnvironment();
			var __0x11149 = ProjectSettings.Get.MaterialPreviewEnvironmentMultiplier.Value;
			var __0x11150 = ProjectSettings.Get.MaterialPreviewEnvironmentAffectLighting.Value;

			if( !__0x11124.Equals( __0x11148 ) || __0x11125 != __0x11149 || __0x11126 != __0x11150 )
			{
				__0x11124 = __0x11148;
				__0x11125 = __0x11149;
				__0x11126 = __0x11150;

				if( __0x11148.Value != null )
				{
					if( __0x11127 == null )
						__0x11127 = Scene.CreateComponent<Component_Skybox>();
					__0x11127.Cubemap = __0x11148;
					__0x11127.Multiplier = __0x11149;
					__0x11127.AffectLighting = __0x11150;
				}
				else
				{
					__0x11127?.Dispose();
					__0x11127 = null;
				}
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class Component_Material_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x11151 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x11158()
		{
			this.__0x11151 = new System.ComponentModel.Container();
			this.__0x11152 = new System.Windows.Forms.Timer(this.__0x11151);
			this.SuspendLayout();
			
			
			
			this.__0x11152.Interval = 50;
			this.__0x11152.Tick += new System.EventHandler(this.__0x11155);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_Material_DocumentWindow";
			this.Size = new System.Drawing.Size(785, 518);
			this.ResumeLayout(false);

		}

		#endregion

		private System.Windows.Forms.Timer __0x11152;
	}
}






namespace NeoAxis.Editor
{
	public partial class Component_Material_PreviewControl : PreviewControlWithViewport
	{
		Component_Mesh __0x11162;
		Component_Mesh __0x11163;

		Reference<Component_Image> __0x11164;
		ColorValuePowered __0x11165;
		double __0x11166 = -1;
		Component_Skybox __0x11167;

		

		public Component_Material_PreviewControl()
		{
			__0x11181();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			Component_Material __0x11168 = ObjectOfPreview as Component_Material;

			
			{
				var __0x11169 = CreateScene( false );

				var __0x11170 = __0x11169.CreateComponent<Component_MeshInSpace>();
				__0x11170.Name = "Mesh In Space";
				__0x11170.ReplaceMaterial = __0x11168;

				__0x11179();
				__0x11180();

				__0x11169.Enabled = true;
			}

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			
			{
				var __0x11171 = ProjectSettings.Get.MaterialPreviewMesh.Value;
				if( __0x11162 != __0x11171 )
				{
					__0x11179();
					SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace() );
					
				}
			}

			__0x11180();
		}

		void __0x11179()
		{
			var __0x11172 = ProjectSettings.Get.MaterialPreviewMesh.Value;

			__0x11162 = __0x11172;

			if( __0x11172 == null )
			{
				if( __0x11163 == null )
				{
					
					__0x11163 = Scene.CreateComponent<Component_Mesh>( enabled: false );
					var __0x11173 = __0x11163.CreateComponent<Component_MeshGeometry_Sphere>();
					__0x11173.SegmentsHorizontal = 64;
					__0x11173.SegmentsVertical = 64;
					__0x11163.Enabled = true;
				}
				__0x11172 = __0x11163;
			}

			var __0x11174 = (Component_MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x11174.Mesh = __0x11172;
		}

		void __0x11180()
		{
			var __0x11175 = ProjectSettings.Get.GetMaterialPreviewEnvironment();
			var __0x11176 = ProjectSettings.Get.MaterialPreviewEnvironmentMultiplier.Value;
			var __0x11177 = ProjectSettings.Get.MaterialPreviewEnvironmentAffectLighting.Value;

			if( !__0x11164.Equals( __0x11175 ) || __0x11165 != __0x11176 || __0x11166 != __0x11177 )
			{
				__0x11164 = __0x11175;
				__0x11165 = __0x11176;
				__0x11166 = __0x11177;

				if( __0x11175.Value != null )
				{
					if( __0x11167 == null )
						__0x11167 = Scene.CreateComponent<Component_Skybox>();
					__0x11167.Cubemap = __0x11175;
					__0x11167.Multiplier = __0x11176;
					__0x11167.AffectLighting = __0x11177;
				}
				else
				{
					__0x11167?.Dispose();
					__0x11167 = null;
				}
			}
		}
	}
}

namespace NeoAxis.Editor
{
    partial class Component_Material_PreviewControl
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x11178 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x11178 != null))
            {
                __0x11178.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x11181()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_Material_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Material_PreviewImage : PreviewImageGenerator
	{
		public Component_Material_PreviewImage()
		{
		}

		protected override void Update()
		{
			var __0x11182 = ObjectOfPreview as Component_Material;

			
			{
				var __0x11183 = CreateScene( false );

				var __0x11184 = __0x11183.CreateComponent<Component_MeshInSpace>();
				__0x11184.Name = "Mesh In Space";
				__0x11184.ReplaceMaterial = __0x11182;

				__0x11183.Enabled = true;
			}

			__0x11188();
			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), 2.6 );
		}

		void __0x11188()
		{
			var __0x11185 = ProjectSettings.Get.MaterialPreviewMesh.Value;

			if( __0x11185 == null )
			{
				
				__0x11185 = Scene.CreateComponent<Component_Mesh>( enabled: false );
				var __0x11186 = __0x11185.CreateComponent<Component_MeshGeometry_Sphere>();
				__0x11186.SegmentsHorizontal = 64;
				__0x11186.SegmentsVertical = 64;
				__0x11185.Enabled = true;
			}

			var __0x11187 = (Component_MeshInSpace)Scene.GetComponent( "Mesh In Space" );
			__0x11187.Mesh = __0x11185;
		}

	}
}





namespace NeoAxis.Editor
{
	public class Component_Material_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11189;
		ProcedureUI.Check __0x11190;

		

		protected override void OnInit()
		{
			__0x11189 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x11189.Click += __0x11198;

			__0x11190 = ProcedureForm.CreateCheck( EditorLocalization.Translate( "General", "Auto update" ) );
			__0x11190.Click += __0x11199;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11189, __0x11190 } );
		}

		private void __0x11198( ProcedureUI.Button __0x11200 )
		{
			foreach( var __0x11196 in GetObjects<Component_Material>() )
				__0x11196.ResultCompile();
			
			
		}

		private void __0x11199( ProcedureUI.Check __0x11201 )
		{
			if( __0x11190.Checked == ProcedureUI.Check.CheckValue.Indeterminate )
				return;

			var __0x11191 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x11197 in GetObjects<Component_Material>() )
			{
				var __0x11192 = __0x11197.EditorAutoUpdate;

				__0x11197.EditorAutoUpdate = __0x11190.Checked == ProcedureUI.Check.CheckValue.Checked;

				var __0x11193 = (Metadata.Property)__0x11197.MetadataGetMemberBySignature( "property:EditorAutoUpdate" );
				__0x11191.Add( new UndoActionPropertiesChange.Item( __0x11197, __0x11193, __0x11192 ) );
			}

			var __0x11194 = new UndoActionPropertiesChange( __0x11191 );
			Provider.DocumentWindow.Document.CommitUndoAction( __0x11194 );
		}

		protected override void OnUpdate()
		{
			var __0x11195 = GetObjects<Component_Material>();

			if( __0x11195.All( __0x11202 => __0x11202.EditorAutoUpdate ) )
				__0x11190.Checked = ProcedureUI.Check.CheckValue.Checked;
			else if( __0x11195.All( __0x11203 => !__0x11203.EditorAutoUpdate ) )
				__0x11190.Checked = ProcedureUI.Check.CheckValue.Unchecked;
			else
				__0x11190.Checked = ProcedureUI.Check.CheckValue.Indeterminate;

			
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_MeshModifier_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11204;

		

		string __0x11210( string __0x11213 )
		{
			return EditorLocalization.Translate( "MeshModifier", __0x11213 );
		}

		protected override void OnInit()
		{
			__0x11204 = ProcedureForm.CreateButton( __0x11210( "Bake into Mesh" ) );
			__0x11204.Click += __0x11212;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11204 } );
		}

		Component_MeshModifier[] __0x11211()
		{
			return GetObjects<Component_MeshModifier>().Where( __0x11214 => __0x11214.Parent as Component_Mesh != null ).ToArray();
		}

		private void __0x11212( ProcedureUI.Button __0x11215 )
		{
			var __0x11205 = Provider.DocumentWindow.Document;
			var __0x11206 = new UndoMultiAction();

			var __0x11207 = __0x11211();
			if( __0x11207.Length != 0 )
			{
				string __0x11208;
				if( __0x11207.Length > 1 )
					__0x11208 = __0x11210( "Bake selected geometries into the mesh?" );
				else
					__0x11208 = __0x11210( "Bake selected geometry into the mesh?" );

				if( EditorMessageBox.ShowQuestion( __0x11208, EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
				{
					
					foreach( var __0x11209 in __0x11207 )
						__0x11209.BakeIntoMesh( __0x11205, __0x11206 );

					
					__0x11206.AddAction( new UndoActionComponentCreateDelete( __0x11205, __0x11207, false ) );

					if( __0x11206.Actions.Count != 0 )
						__0x11205.CommitUndoAction( __0x11206 );
				}
			}
		}

		protected override void OnUpdate()
		{
			__0x11204.Enabled = __0x11211().Length != 0;
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Mesh_Editor : CanvasBasedEditor
	{
		bool __0x11216 = true;

		int __0x11217 = -1;
		Component_Mesh.CompiledData __0x11218;
		CanvasRenderer.TriangleVertex[] __0x11219;
		CanvasRenderer.TriangleVertex[] __0x11220;

		Component_MeshInSpaceAnimationController __0x11221;

		bool __0x11222;

		

		

		public Component_Mesh Mesh
		{
			get { return (Component_Mesh)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x11223 = CreateScene( false );
			if( Mesh != null )
			{
				var __0x11224 = __0x11223.CreateComponent<Component_MeshInSpace>();
				__0x11224.Mesh = Mesh;
				__0x11221 = __0x11224.CreateComponent<Component_MeshInSpaceAnimationController>();
			}
			__0x11223.Enabled = true;

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x11352;

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11352;

			base.OnDestroy();
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x11216 && Scene.CameraEditor.Value != null )
			{
				__0x11346();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );
			}

			if( Mesh != null && Scene.CameraEditor.Value != null )
				Mesh.EditorCameraTransform = Scene.CameraEditor.Value.Transform;

			__0x11216 = false;
		}

		void __0x11346()
		{
			

			var __0x11225 = Scene.CameraEditor.Value;
			var __0x11226 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			
			var __0x11227 = __0x11226.GetCenter();

			

			double __0x11228 = Math.Max( Math.Max( __0x11226.GetSize().X, __0x11226.GetSize().Y ), __0x11226.GetSize().Z );
			double __0x11229 = __0x11228 * 2;
			if( __0x11229 < 2 )
				__0x11229 = 2;

			double __0x11230 = 1;
			SphericalDirection __0x11231 = new SphericalDirection( -3.83, -.47 );

			var __0x11232 = __0x11227 - __0x11231.GetVector() * __0x11229 * __0x11230;
			var __0x11233 = __0x11227;

			Vector3 __0x11234 = __0x11232;
			Vector3 __0x11235 = __0x11233;
			Degree __0x11236 = 65;

			
			
			__0x11225.FieldOfView = __0x11236;
			__0x11225.NearClipPlane = Math.Max( __0x11229 / 10000, 0.01 );
			__0x11225.FarClipPlane = Math.Max( 1000, __0x11229 * 2 );

			if( Mesh != null && Mesh.EditorCameraTransform != null )
				__0x11225.Transform = Mesh.EditorCameraTransform;
			else
				__0x11225.Transform = new Transform( __0x11234, Quaternion.LookAt( ( __0x11235 - __0x11234 ).GetNormalize(), Vector3.ZAxis ) );

			__0x11225.FixedUp = Vector3.ZAxis;

		}

		T[] __0x11347<T>( byte[] __0x11353, int __0x11354, int __0x11355, int __0x11356 ) where T : unmanaged
		{
			T[] __0x11237 = new T[ __0x11355 ];
			unsafe
			{
				fixed( byte* __0x11238 = __0x11353 )
				{
					byte* __0x11239 = __0x11238 + __0x11356;
					for( int __0x11240 = 0; __0x11240 < __0x11355; __0x11240++ )
					{
						__0x11237[ __0x11240 ] = *(T*)__0x11239;
						__0x11239 += __0x11354;
					}
				}
			}
			return __0x11237;
		}

		int __0x11348()
		{
			if( Mesh.EditorDisplayLOD != 0 )
			{
				var __0x11241 = Mesh.Result?.MeshData?.LODs;
				if( __0x11241 != null )
					return Math.Min( Mesh.EditorDisplayLOD, __0x11241.Length );
			}
			return 0;
		}

		Component_Mesh.CompiledData __0x11349()
		{
			return Mesh.Result?.GetLOD( __0x11348() );
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			if( Mesh != null && __0x11222 )
			{
				Mesh.ResultCompile();
				__0x11222 = false;
			}

			if( Mesh != null && Mesh.Result != null )
			{
				var __0x11242 = Mesh.Result.SpaceBounds;
				var __0x11243 = __0x11349();

				
				if( ProjectSettings.Get.ShowCenteringBorders )
				{
					double __0x11244 = 0.8;

					var __0x11245 = __0x11244 * 0.5 * Viewport.CanvasRenderer.AspectRatioInv;
					var __0x11246 = __0x11244 * 0.5;

					var __0x11247 = new Rectangle( new Vector2( 0.5, 0.5 ) );
					__0x11247.Expand( new Vector2( __0x11245, __0x11246 ) );
					Viewport.CanvasRenderer.AddRectangle( __0x11247, new ColorValue( 1, 1, 1, 0.05 ) );
				}

				
				if( Mesh.EditorDisplayPivot )
				{
					var __0x11248 = 35 * EditorAPI.DPIScale;
					var __0x11249 = Viewport.Simple3DRenderer.GetThicknessByPixelSize( Vector3.Zero, __0x11248 );
					
					

					var __0x11250 = __0x11249 / 20;
					var __0x11251 = __0x11249 / 3;
					var __0x11252 = __0x11251 / 3;
					var __0x11253 = 1.0;

					
					
					
					
					
					

					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, __0x11253 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.XAxis * __0x11249, __0x11251, __0x11252, true, __0x11250 );
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, __0x11253 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.YAxis * __0x11249, __0x11251, __0x11252, true, __0x11250 );
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, __0x11253 ), false );
					Viewport.Simple3DRenderer.AddArrow( Vector3.Zero, Vector3.ZAxis * __0x11249, __0x11251, __0x11252, true, __0x11250 );
				}

				
				if( Mesh.EditorDisplayVertexColor )
				{
					var __0x11254 = __0x11243.GetExtractedVertices( true );

					var __0x11255 = new Simple3DRenderer.Vertex[ __0x11254.Length ];
					for( int __0x11256 = 0; __0x11256 < __0x11255.Length; __0x11256++ )
					{
						ref var __0x11257 = ref __0x11254[ __0x11256 ];

						var __0x11258 = new Simple3DRenderer.Vertex();
						__0x11258.position = __0x11257.Position;

						__0x11258.color = RenderingSystem.ConvertColorValue( ref __0x11257.Color );
						

						
						__0x11255[ __0x11256 ] = __0x11258;
					}

					Viewport.Simple3DRenderer.AddTriangles( __0x11255, __0x11243.ExtractedIndices, false, true );
				}

				
				if( Mesh.EditorDisplayTriangles )
				{
					
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, 0.7 ) );
					
					Viewport.Simple3DRenderer.AddTriangles( __0x11243.ExtractedVerticesPositions, __0x11243.ExtractedIndices, true, false );
				}

				
				if( Mesh.EditorDisplayVertices )
				{
					var __0x11259 = __0x11242.CalculatedBoundingBox.GetSize();
					var __0x11260 = (float)Math.Max( __0x11259.X, Math.Max( __0x11259.Y, __0x11259.Z ) ) / 200;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, 0.7 ) );
					
					foreach( var __0x11335 in __0x11243.ExtractedVerticesPositions )
					{
						Viewport.Simple3DRenderer.AddLineThin( __0x11335 - new Vector3F( __0x11260, 0, 0 ), __0x11335 + new Vector3F( __0x11260, 0, 0 ) );
						Viewport.Simple3DRenderer.AddLineThin( __0x11335 - new Vector3F( 0, __0x11260, 0 ), __0x11335 + new Vector3F( 0, __0x11260, 0 ) );
						Viewport.Simple3DRenderer.AddLineThin( __0x11335 - new Vector3F( 0, 0, __0x11260 ), __0x11335 + new Vector3F( 0, 0, __0x11260 ) );
					}
				}

				
				if( Mesh.EditorDisplayNormals )
				{
					var __0x11261 = __0x11242.CalculatedBoundingBox.GetSize();
					var __0x11262 = (float)Math.Max( __0x11261.X, Math.Max( __0x11261.Y, __0x11261.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0, 0.7 ) );
					foreach( var __0x11336 in __0x11243.GetExtractedVertices( true ) )
					{
						if( __0x11336.Normal != Vector3F.Zero )
							Viewport.Simple3DRenderer.AddLineThin( __0x11336.Position, __0x11336.Position + __0x11336.Normal * __0x11262 );
					}
				}

				
				if( Mesh.EditorDisplayTangents )
				{
					var __0x11263 = __0x11242.CalculatedBoundingBox.GetSize();
					var __0x11264 = (float)Math.Max( __0x11263.X, Math.Max( __0x11263.Y, __0x11263.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0, 0.7 ) );
					foreach( var __0x11337 in __0x11243.GetExtractedVertices( true ) )
					{
						if( __0x11337.Tangent != Vector4F.Zero )
							Viewport.Simple3DRenderer.AddLineThin( __0x11337.Position, __0x11337.Position + __0x11337.Tangent.ToVector3F() * __0x11264 );
					}
				}

				
				if( Mesh.EditorDisplayBinormals )
				{
					var __0x11265 = __0x11242.CalculatedBoundingBox.GetSize();
					var __0x11266 = (float)Math.Max( __0x11265.X, Math.Max( __0x11265.Y, __0x11265.Z ) ) / 30;
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1, 0.7 ) );
					foreach( var __0x11338 in __0x11243.GetExtractedVertices( true ) )
					{
						if( __0x11338.Normal != Vector3F.Zero && __0x11338.Tangent != Vector4F.Zero )
						{
							var __0x11267 = Vector3.Cross( __0x11338.Tangent.ToVector3F(), __0x11338.Normal ) * __0x11338.Tangent.W;
							Viewport.Simple3DRenderer.AddLineThin( __0x11338.Position, __0x11338.Position + __0x11267 * __0x11266 );
						}
					}
				}

				
				if( Mesh.EditorDisplayCollision )
				{
					var __0x11268 = Mesh.GetComponent( "Collision Definition" ) as Component_RigidBody;
					if( __0x11268 != null )
					{
						ColorValue __0x11269 = new ColorValue( 0, 0, 1, 0.7 );
						
						
						
						
						
						
						Viewport.Simple3DRenderer.SetColor( __0x11269, __0x11269 * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );

						int __0x11270 = 0;
						foreach( var __0x11339 in __0x11268.GetComponents<Component_CollisionShape>( false, true, true ) )
							__0x11339.Render( Viewport, Transform.Identity, false, ref __0x11270 );
					}
				}

				
				if( !string.IsNullOrEmpty( Mesh.EditorPlayAnimation ) )
				{
					var __0x11271 = Mesh.ParentRoot.GetComponentByPath( Mesh.EditorPlayAnimation ) as Component_Animation;
					__0x11221.PlayAnimation = __0x11271;
					
				}
				else
					__0x11221.PlayAnimation = null;

				
				if( Mesh.EditorDisplaySkeleton )
				{
					var __0x11272 = Mesh.Skeleton.Value;
					if( __0x11272 != null )
					{
						var __0x11273 = __0x11221.GetCurrentAnimatedSkeletonArrows();
						if( __0x11273 != null )
						{
							var __0x11274 = new ColorValue( 0, 0.5, 1, 0.7 );
							Viewport.Simple3DRenderer.SetColor( __0x11274, __0x11274 * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );

							foreach( var __0x11340 in __0x11273 )
								Viewport.Simple3DRenderer.AddArrow( __0x11340.Start, __0x11340.End );
						}
						else
						{
							foreach( var __0x11341 in __0x11272.GetBones() )
							{
								var __0x11275 = __0x11341.Transform.Value;

								var __0x11276 = __0x11275.Position;
								var __0x11277 = __0x11341.Parent as Component_SkeletonBone;
								if( __0x11277 != null )
								{
									var __0x11278 = __0x11277.Transform.Value.Position;

									var __0x11279 = SelectedObjectsSet.Contains( __0x11341 );

									ColorValue __0x11280;
									if( __0x11279 )
										__0x11280 = new ColorValue( 0, 1, 0 );
									else
										__0x11280 = new ColorValue( 0, 0.5, 1, 0.7 );
									Viewport.Simple3DRenderer.SetColor( __0x11280, __0x11280 * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );

									Viewport.Simple3DRenderer.AddArrow( __0x11278, __0x11276 );

									if( __0x11279 )
									{
										var __0x11281 = ( __0x11276 - __0x11278 ).Length() / 3;

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ), new ColorValue( 1, 0, 0 ) * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x11276, __0x11276 + __0x11275.Rotation * new Vector3( __0x11281, 0, 0 ) );

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0 ), new ColorValue( 0, 1, 0 ) * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x11276, __0x11276 + __0x11275.Rotation * new Vector3( 0, __0x11281, 0 ) );

										Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1 ), new ColorValue( 0, 0, 1 ) * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );
										Viewport.Simple3DRenderer.AddArrow( __0x11276, __0x11276 + __0x11275.Rotation * new Vector3( 0, 0, __0x11281 ) );
									}
								}
							}
						}
					}
				}

				
				if( Mesh.EditorDisplayBounds )
				{
					Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0, 0.7 ) );
					
					if( __0x11242.BoundingBox.HasValue )
						Viewport.Simple3DRenderer.AddBounds( __0x11242.BoundingBox.Value );
					if( __0x11242.BoundingSphere.HasValue )
						Viewport.Simple3DRenderer.AddSphere( __0x11242.BoundingSphere.Value );
				}

				
				int __0x11282 = -1;
				if( !Viewport.MouseRelativeMode )
				{
					var __0x11283 = Viewport.CameraSettings.GetRayByScreenCoordinates( Viewport.MousePosition );
					if( __0x11243.RayCast( __0x11283, Component_Mesh.CompiledData.RayCastMode.BruteforceNoCache, false, out double scale2, out int triangleIndex2 ) )
						__0x11282 = triangleIndex2;
				}

				
				if( __0x11282 != -1 )
				{
					var __0x11284 = __0x11243.GetExtractedVertices( true );
					var __0x11285 = __0x11243.ExtractedIndices;

					int __0x11286 = __0x11285[ __0x11282 * 3 + 0 ];
					int __0x11287 = __0x11285[ __0x11282 * 3 + 1 ];
					int __0x11288 = __0x11285[ __0x11282 * 3 + 2 ];
					var __0x11289 = new int[] { __0x11286, __0x11287, __0x11288 };
					Vector3F __0x11290 = __0x11284[ __0x11286 ].Position;
					Vector3F __0x11291 = __0x11284[ __0x11287 ].Position;
					Vector3F __0x11292 = __0x11284[ __0x11288 ].Position;

					
					
					

					
					
					
					
					
					

					
					
					
					
					
					
					

					
					
					
					
					
					
					
					
					

					
					
					

					
					
					
					
					

					
					
					
					
					
					
					
					

					
					{
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0, 0.3 ) );
						Viewport.Simple3DRenderer.AddTriangles( new Vector3F[] { __0x11290, __0x11291, __0x11292 }, false, false );
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 1, 0 ) );
						Viewport.Simple3DRenderer.AddLine( __0x11290, __0x11291 );
						Viewport.Simple3DRenderer.AddLine( __0x11291, __0x11292 );
						Viewport.Simple3DRenderer.AddLine( __0x11292, __0x11290 );
					}

					float __0x11293 = Math.Max( ( __0x11290 - __0x11291 ).Length(), Math.Max( ( __0x11291 - __0x11292 ).Length(), ( __0x11292 - __0x11290 ).Length() ) );
					float __0x11294 = __0x11293 / 5;
					float __0x11295 = __0x11293 / 40;

					
					
					foreach( int __0x11342 in __0x11289 )
					{
						var __0x11296 = __0x11284[ __0x11342 ];
						Vector3F __0x11297 = __0x11296.Position;

						if( __0x11296.Normal != Vector3F.Zero )
						{
							Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 0, 1 ) );
							Viewport.Simple3DRenderer.AddArrow( __0x11297, __0x11297 + __0x11296.Normal * __0x11294, 0, 0, true );

							if( __0x11296.Tangent != Vector4F.Zero )
							{
								Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ) );
								Viewport.Simple3DRenderer.AddArrow( __0x11297, __0x11297 + __0x11296.Tangent.ToVector3F() * __0x11294, 0, 0, true );

								var __0x11298 = Vector3F.Cross( __0x11296.Tangent.ToVector3F(), __0x11296.Normal ) * __0x11296.Tangent.W;
								Viewport.Simple3DRenderer.SetColor( new ColorValue( 0, 1, 0 ) );
								Viewport.Simple3DRenderer.AddArrow( __0x11297, __0x11297 + __0x11298 * __0x11294, 0, 0, true );
							}
						}
					}

					
					{
						Viewport.Simple3DRenderer.SetColor( new ColorValue( 1, 0, 0 ) );
						

						foreach( int __0x11343 in __0x11289 )
						{
							var __0x11299 = __0x11284[ __0x11343 ];
							Vector3F __0x11300 = __0x11299.Position;
							Viewport.Simple3DRenderer.AddSphere( new Sphere( __0x11300, __0x11295 ), 10, true );
							
						}
					}
				}

				
				if( __0x11348() == 0 )
				{
					var __0x11301 = new ESet<Component_MeshGeometry>();
					foreach( var __0x11344 in Mesh.GetComponents<Component_MeshGeometry>() )
					{
						if( SelectedObjectsSet.Contains( __0x11344 ) )
							__0x11301.AddWithCheckAlreadyContained( __0x11344 );

						var __0x11302 = __0x11344.Material.Value;
						if( __0x11302 != null && SelectedObjectsSet.Contains( __0x11302 ) )
							__0x11301.AddWithCheckAlreadyContained( __0x11344 );
					}

					foreach( var __0x11345 in __0x11301 )
					{
						var __0x11303 = __0x11345.VertexStructure.Value;
						var __0x11304 = __0x11345.Vertices.Value;
						var __0x11305 = __0x11345.Indices.Value;

						if( __0x11304 != null & __0x11305 != null )
						{
							__0x11303.GetInfo( out var vertexSize, out var holes );
							var __0x11306 = __0x11304.Length / vertexSize;

							try
							{
								if( __0x11303.GetElementBySemantic( VertexElementSemantic.Position, out var element ) && element.Type == VertexElementType.Float3 )
								{
									if( __0x11304 != null && __0x11305 != null )
									{
										

										var __0x11307 = __0x11347<Vector3F>( __0x11304, vertexSize, __0x11306, element.Offset );

										Viewport.Simple3DRenderer.SetColor( ProjectSettings.Get.SelectedColor );
										Viewport.Simple3DRenderer.AddTriangles( __0x11307, __0x11305, true, true );
									}
								}
							}
							catch( Exception e )
							{
								Log.Warning( e.Message );
							}
						}
					}
				}

				
				if( Scene.RenderingPipeline.Value != null )
					Scene.RenderingPipeline.Value.LODRange = new RangeI( Mesh.EditorDisplayLOD, Mesh.EditorDisplayLOD );
			}
		}

		protected override void OnViewportUpdateBeforeOutput2()
		{
			base.OnViewportUpdateBeforeOutput2();

			if( Mesh != null && Mesh.Result != null )
			{
				
				if( Mesh.EditorDisplayUV != -1 )
					__0x11351();
			}
		}

		static string __0x11350( string __0x11357 )
		{
			return EditorLocalization.Translate( "MeshDocumentWindow", __0x11357 );
		}

		protected override void OnGetTextInfoLeftTopCorner( List<string> lines )
		{
			base.OnGetTextInfoLeftTopCorner( lines );

			if( Mesh != null )
			{
				var __0x11308 = __0x11349();
				if( __0x11308 != null )
				{
					lines.Add( __0x11350( "Level of detail" ) + ": " + __0x11348().ToString() );
					lines.Add( __0x11350( "Triangles" ) + ": " + ( __0x11308.ExtractedIndices.Length / 3 ).ToString( "N0" ) );
					lines.Add( __0x11350( "Vertices" ) + ": " + __0x11308.ExtractedVerticesPositions.Length.ToString( "N0" ) );
					lines.Add( __0x11350( "Render operations" ) + ": " + __0x11308.MeshData.RenderOperations.Count.ToString() );
					lines.Add( __0x11350( "Bounding box size" ) + ": " + __0x11308.SpaceBounds.BoundingBox.Value.GetSize().ToString( 3 ) );
					lines.Add( __0x11350( "Bounding sphere radius" ) + ": " + __0x11308.SpaceBounds.BoundingSphere.Value.Radius.ToString( "N3" ) );
				}
			}
		}

		

		void __0x11351()
		{
			var __0x11309 = __0x11349();

			if( Mesh.EditorDisplayUV >= 0 && Mesh.EditorDisplayUV < 4 )
			{
				StandardVertex.Components __0x11310 = StandardVertex.Components.TexCoord0;
				if( Mesh.EditorDisplayUV == 0 )
					__0x11310 = StandardVertex.Components.TexCoord0;
				else if( Mesh.EditorDisplayUV == 1 )
					__0x11310 = StandardVertex.Components.TexCoord1;
				else if( Mesh.EditorDisplayUV == 2 )
					__0x11310 = StandardVertex.Components.TexCoord2;
				else if( Mesh.EditorDisplayUV == 3 )
					__0x11310 = StandardVertex.Components.TexCoord3;

				if( ( __0x11309.ExtractedVerticesComponents & __0x11310 ) != 0 )
				{
					var __0x11311 = (Vector2F[])StandardVertex.ExtractOneComponentArray( __0x11309.GetExtractedVertices( true ), __0x11310 );

					
					
					

					
					if( __0x11219 != null )
					{
						if( __0x11217 != Mesh.EditorDisplayUV || __0x11218 != __0x11309 )
						{
							__0x11219 = null;
							__0x11220 = null;
						}
					}

					Vector2F __0x11312 = new Vector2F( Viewport.CanvasRenderer.AspectRatioInv * .8f, 0.8f );
					Vector2F __0x11313 = new Vector2F( 1.0f - __0x11312.X - 0.01f, 1.0f - __0x11312.Y - 0.01f );

					Vector2F Convert( Vector2F __0x11358 )
					{
						return __0x11358 * __0x11312 + __0x11313;
					};

					
					if( __0x11219 == null )
					{
						__0x11217 = Mesh.EditorDisplayUV;
						__0x11218 = __0x11309;

						var __0x11314 = __0x11309.ExtractedIndices;

						


						var __0x11315 = new Vector2F[ __0x11311.Length ];
						for( int __0x11316 = 0; __0x11316 < __0x11315.Length; __0x11316++ )
							__0x11315[ __0x11316 ] = Convert( __0x11311[ __0x11316 ] );

						var __0x11317 = new ColorValue( 0, 1, 0, 0.5 );
						var __0x11318 = new ColorValue( 1, 1, 1 );

						
						{
							var __0x11319 = new List<CanvasRenderer.TriangleVertex>( __0x11314.Length / 3 );

							for( int __0x11320 = 0; __0x11320 < __0x11314.Length / 3; __0x11320++ )
							{
								int __0x11321 = __0x11314[ __0x11320 * 3 + 0 ];
								int __0x11322 = __0x11314[ __0x11320 * 3 + 1 ];
								int __0x11323 = __0x11314[ __0x11320 * 3 + 2 ];

								Vector2F __0x11324 = __0x11315[ __0x11321 ];
								Vector2F __0x11325 = __0x11315[ __0x11322 ];
								Vector2F __0x11326 = __0x11315[ __0x11323 ];

								__0x11319.Add( new CanvasRenderer.TriangleVertex( __0x11324, __0x11317 ) );
								__0x11319.Add( new CanvasRenderer.TriangleVertex( __0x11325, __0x11317 ) );
								__0x11319.Add( new CanvasRenderer.TriangleVertex( __0x11326, __0x11317 ) );
							}

							__0x11219 = __0x11319.ToArray();
						}

						
						{
							int[] __0x11327 = MathAlgorithms.TriangleListToLineList( __0x11314 );

							var __0x11328 = new List<CanvasRenderer.LineItem>( __0x11327.Length / 2 );
							for( int __0x11329 = 0; __0x11329 < __0x11327.Length / 2; __0x11329++ )
							{
								var __0x11330 = __0x11315[ __0x11327[ __0x11329 * 2 + 0 ] ];
								var __0x11331 = __0x11315[ __0x11327[ __0x11329 * 2 + 1 ] ];
								__0x11328.Add( new CanvasRenderer.LineItem( __0x11330, __0x11331, __0x11318 ) );
							}

							var __0x11332 = new CanvasRenderer.TriangleVertex[ __0x11328.Count * 2 ];
							for( int __0x11333 = 0; __0x11333 < __0x11328.Count; __0x11333++ )
							{
								var __0x11334 = __0x11328[ __0x11333 ];
								__0x11332[ __0x11333 * 2 + 0 ] = new CanvasRenderer.TriangleVertex( __0x11334.start, __0x11334.color, Vector2F.Zero );
								__0x11332[ __0x11333 * 2 + 1 ] = new CanvasRenderer.TriangleVertex( __0x11334.end, __0x11334.color, Vector2F.Zero );
							}

							__0x11220 = __0x11332;
						}
					}

					
					if( __0x11219 != null )
					{
						Viewport.CanvasRenderer.AddQuad( new RectangleF( Convert( Vector2F.Zero ), Convert( Vector2F.One ) ), new ColorValue( 0, 0, 0, .5 ) );
						Viewport.CanvasRenderer.AddTriangles( __0x11219 );
						Viewport.CanvasRenderer.AddLines( __0x11220 );
					}
				}
			}
		}

		private void __0x11352( object __0x11359, EventArgs __0x11360 )
		{
			__0x11222 = true;
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Mesh_Preview : CanvasBasedPreview
	{
		protected override void OnCreate()
		{
			base.OnCreate();

			var __0x11361 = CreateScene( false );

			Component_Mesh __0x11362 = ObjectOfPreview as Component_Mesh;
			if( __0x11362 != null )
			{
				Component_MeshInSpace __0x11363 = __0x11361.CreateComponent<Component_MeshInSpace>();
				__0x11363.Mesh = __0x11362;
			}

			__0x11361.Enabled = true;

			SetCameraByBounds( __0x11361.CalculateTotalBoundsOfObjectsInSpace() );

			if( __0x11362 != null && __0x11362.EditorCameraTransform != null )
			{
				var __0x11364 = __0x11362.EditorCameraTransform;
				CameraInitialDistance = ( __0x11364.Position - CameraLookTo ).Length() * 1.3;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11364.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Mesh_PreviewImage : PreviewImageGenerator
	{
		public Component_Mesh_PreviewImage()
		{
		}

		protected override void Update()
		{
			var __0x11365 = CreateScene( false );

			var __0x11366 = ObjectOfPreview as Component_Mesh;
			if( __0x11366 != null )
			{
				var __0x11367 = __0x11365.CreateComponent<Component_MeshInSpace>();
				__0x11367.Mesh = __0x11366;
			}

			__0x11365.Enabled = true;

			var __0x11368 = 2.6;

			SetCameraByBounds( __0x11365.CalculateTotalBoundsOfObjectsInSpace(), __0x11368 );

			if( __0x11366 != null && __0x11366.EditorCameraTransform != null )
			{
				var __0x11369 = __0x11366.EditorCameraTransform;
				CameraDistance = ( __0x11369.Position - CameraLookTo ).Length() * __0x11368;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x11369.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Mesh_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11370;
		ProcedureUI.Button __0x11371;

		

		protected override void OnInit()
		{
			__0x11370 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x11370.Click += __0x11375;

			__0x11371 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Export to FBX" ) );
			__0x11371.Click += __0x11376;

			
			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11370, __0x11371 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			__0x11371.Enabled = GetObjects<Component_Mesh>().Length == 1;
		}

		private void __0x11375( ProcedureUI.Button __0x11377 )
		{
			foreach( var __0x11374 in GetObjects<Component_Mesh>() )
				__0x11374.ResultCompile();
		}

		private void __0x11376( ProcedureUI.Button __0x11378 )
		{
			var __0x11372 = GetObjects<Component_Mesh>();
			if( __0x11372.Length != 1 )
				return;
			var __0x11373 = __0x11372[ 0 ];

			if( !EditorUtility.ShowSaveFileDialog( "", "Mesh.fbx", "FBX files (*.fbx)|*.fbx", out var fileName ) )
				return;

			if( !__0x11373.ExportToFBX( fileName, out var error ) )
				EditorMessageBox.ShowWarning( error );
		}

		
		
		
		
		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	class Component_MeshInSpace_EditorExtensions : EditorExtensions
	{
		string __0x11461( string __0x11462 )
		{
			return EditorLocalization.Translate( "MeshInSpace", __0x11462 );
		}

		public override void Register()
		{
			
			{
				const string __0x11379 = "Collision Body";

				var __0x11380 = new EditorAction();
				__0x11380.Name = "Add Collision";
				__0x11380.Description = "Adds a collision body to selected objects.";
				__0x11380.ImageSmall = Properties.Resources.Add_16;
				__0x11380.ImageBig = Properties.Resources.MeshCollision_32;
				__0x11380.ActionType = EditorAction.ActionTypeEnum.DropDown;
				__0x11380.QatSupport = true;
				
				__0x11380.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11380.GetState += delegate ( EditorAction.GetStateContext __0x11463 )
				{
					if( __0x11463.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11381 = __0x11463.ObjectsInFocus.Objects;
						if( __0x11381.Length != 0 && Array.TrueForAll( __0x11381, __0x11464 => __0x11464 is Component_MeshInSpace ) )
						{
							__0x11463.Enabled = Array.Exists( __0x11381, delegate ( object __0x11465 )
							{
								var __0x11382 = ( (Component)__0x11465 ).GetComponent( __0x11379 );
								if( __0x11382 != null )
								{
									if( __0x11382 is Component_RigidBody )
										return false;
									if( __0x11382 is Component_RigidBody2D )
										return false;
								}
								return true;
							} );
						}

						__0x11380.DropDownContextMenu.Tag = (__0x11463.ObjectsInFocus.DocumentWindow.Document, __0x11381);
					}
				};

				
				{
					__0x11380.DropDownContextMenu = new KryptonContextMenu();

					__0x11380.DropDownContextMenu.Opening += delegate ( object __0x11466, CancelEventArgs __0x11467 )
					{
						var __0x11383 = (KryptonContextMenu)__0x11466;
						var __0x11384 = ((DocumentInstance, object[]))__0x11383.Tag;

						
						{
							var __0x11385 = (KryptonContextMenuItems)__0x11383.Items[ 0 ];
							var __0x11386 = (KryptonContextMenuItem)__0x11385.Items[ 0 ];

							bool __0x11387 = false;

							foreach( var __0x11456 in __0x11384.Item2 )
							{
								var __0x11388 = __0x11456 as Component_MeshInSpace;
								if( __0x11388 != null )
								{
									Component_RigidBody __0x11389 = null;
									{
										var __0x11390 = __0x11388.Mesh.Value;
										if( __0x11390 != null )
											__0x11389 = __0x11390.GetComponent( "Collision Definition" ) as Component_RigidBody;
									}

									if( __0x11389 != null )
										__0x11387 = true;
								}
							}

							__0x11386.Enabled = __0x11387;
						}

					};

					EventHandler __0x11391 = delegate ( object __0x11468, EventArgs __0x11469 )
					{
						var __0x11392 = (KryptonContextMenuItem)__0x11468;
						var __0x11393 = ((KryptonContextMenu, string))__0x11392.Tag;
						var __0x11394 = __0x11393.Item1;
						var __0x11395 = __0x11393.Item2;

						var __0x11396 = ((DocumentInstance, object[]))__0x11394.Tag;
						var __0x11397 = __0x11396.Item1;
						var __0x11398 = __0x11396.Item2;

						List<UndoSystem.Action> __0x11399 = new List<UndoSystem.Action>();

						foreach( var __0x11457 in __0x11398 )
						{
							if( __0x11457 is Component_MeshInSpace meshInSpace && meshInSpace.GetComponent( __0x11379 ) as Component_RigidBody == null && meshInSpace.GetComponent( __0x11379 ) as Component_RigidBody2D == null )
							{
								var __0x11400 = meshInSpace.MeshOutput;
								if( __0x11400 == null )
									continue;

								Component __0x11401 = null;
								bool __0x11402 = false;

								if( __0x11395 == "Use Collision of the Mesh" )
								{
									var __0x11403 = __0x11400.GetComponent( "Collision Definition" ) as Component_RigidBody;
									if( __0x11403 != null )
									{
										var __0x11404 = (Component_RigidBody)__0x11403.Clone();
										__0x11401 = __0x11404;
										__0x11404.Enabled = false;
										__0x11404.Name = __0x11379;
										__0x11404.MotionType = Component_RigidBody.MotionTypeEnum.Static;
										__0x11404.Transform = meshInSpace.Transform;

										meshInSpace.AddComponent( __0x11404 );
									}
									else
										__0x11402 = true;
								}
								else
								{
									Component_RigidBody CreateRigidBody()
									{
										var __0x11405 = meshInSpace.CreateComponent<Component_RigidBody>( enabled: false );
										__0x11405.Name = __0x11379;
										__0x11405.Transform = meshInSpace.Transform;
										return __0x11405;
									}

									Component_RigidBody2D CreateRigidBody2D()
									{
										var __0x11406 = meshInSpace.CreateComponent<Component_RigidBody2D>( enabled: false );
										__0x11406.Name = __0x11379;
										__0x11406.Transform = meshInSpace.Transform;
										return __0x11406;
									}

									switch( __0x11395 )
									{
									case "Box":
										{
											__0x11401 = CreateRigidBody();
											var __0x11407 = __0x11401.CreateComponent<Component_CollisionShape_Box>();
											var __0x11408 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11407.TransformRelativeToParent = new Transform( __0x11408.GetCenter(), Quaternion.Identity );
											__0x11407.Dimensions = __0x11408.GetSize();
										}
										break;

									case "Sphere":
										{
											__0x11401 = CreateRigidBody();
											var __0x11409 = __0x11401.CreateComponent<Component_CollisionShape_Sphere>();
											var __0x11410 = __0x11400.Result.SpaceBounds.CalculatedBoundingSphere;
											__0x11409.TransformRelativeToParent = new Transform( __0x11410.Origin, Quaternion.Identity );
											__0x11409.Radius = __0x11410.Radius;
										}
										break;

									case "Capsule":
										{
											__0x11401 = CreateRigidBody();
											var __0x11411 = __0x11401.CreateComponent<Component_CollisionShape_Capsule>();
											var __0x11412 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11411.TransformRelativeToParent = new Transform( __0x11412.GetCenter(), Quaternion.Identity );
											__0x11411.Radius = Math.Max( __0x11412.GetSize().X, __0x11412.GetSize().Y ) / 2;
											__0x11411.Height = Math.Max( __0x11412.GetSize().Z - __0x11411.Radius * 2, 0 );
										}
										break;

									case "Cylinder":
										{
											__0x11401 = CreateRigidBody();
											var __0x11413 = __0x11401.CreateComponent<Component_CollisionShape_Cylinder>();
											var __0x11414 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11413.TransformRelativeToParent = new Transform( __0x11414.GetCenter(), Quaternion.Identity );
											__0x11413.Radius = Math.Max( __0x11414.GetSize().X, __0x11414.GetSize().Y ) / 2;
											__0x11413.Height = __0x11414.GetSize().Z;
										}
										break;

									case "Convex":
										{
											__0x11401 = CreateRigidBody();
											var __0x11415 = __0x11401.CreateComponent<Component_CollisionShape_Mesh>();
											__0x11415.ShapeType = Component_CollisionShape_Mesh.ShapeTypeEnum.Convex;
											__0x11415.Mesh = ReferenceUtility.MakeThisReference( __0x11415, meshInSpace, "Mesh" );
										}
										break;

									case "Convex Decomposition":
										{
											__0x11401 = CreateRigidBody();

											var __0x11416 = new ConvexDecomposition.Settings();

											var __0x11417 = new SpecifyParametersForm( "Convex Decomposition", __0x11416 );
											__0x11417.CheckHandler = delegate ( ref string __0x11470 )
											{
												return true;
											};
											if( __0x11417.ShowDialog() != DialogResult.OK )
												__0x11402 = true;
											else
											{
												var __0x11418 = ConvexDecomposition.Decompose( __0x11400.Result.ExtractedVerticesPositions, __0x11400.Result.ExtractedIndices, __0x11416 );

												if( __0x11418 == null )
												{
													Log.Warning( "Unable to decompose." );
													__0x11402 = true;
												}
												else
												{
													foreach( var __0x11458 in __0x11418 )
													{
														var __0x11419 = __0x11401.CreateComponent<Component_CollisionShape_Mesh>();
														__0x11419.Vertices = __0x11458.Vertices;
														__0x11419.Indices = __0x11458.Indices;
														__0x11419.ShapeType = Component_CollisionShape_Mesh.ShapeTypeEnum.Convex;
													}
												}
											}
										}
										break;

									case "Mesh":
										{
											__0x11401 = CreateRigidBody();
											var __0x11420 = __0x11401.CreateComponent<Component_CollisionShape_Mesh>();
											__0x11420.Mesh = ReferenceUtility.MakeThisReference( __0x11420, meshInSpace, "Mesh" );
										}
										break;

									case "Box 2D":
										{
											__0x11401 = CreateRigidBody2D();
											var __0x11421 = __0x11401.CreateComponent<Component_CollisionShape2D_Box>();
											var __0x11422 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11421.TransformRelativeToParent = new Transform( __0x11422.GetCenter(), Quaternion.Identity );
											__0x11421.Dimensions = __0x11422.GetSize().ToVector2();
										}
										break;

									case "Circle 2D":
										{
											__0x11401 = CreateRigidBody2D();
											var __0x11423 = __0x11401.CreateComponent<Component_CollisionShape2D_Ellipse>();
											var __0x11424 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11423.TransformRelativeToParent = new Transform( __0x11424.GetCenter(), Quaternion.Identity );
											var __0x11425 = __0x11424.GetSize().ToVector2().MaxComponent();
											__0x11423.Dimensions = new Vector2( __0x11425, __0x11425 );
										}
										break;

									case "Ellipse 2D":
										{
											__0x11401 = CreateRigidBody2D();
											var __0x11426 = __0x11401.CreateComponent<Component_CollisionShape2D_Ellipse>();
											var __0x11427 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11426.TransformRelativeToParent = new Transform( __0x11427.GetCenter(), Quaternion.Identity );
											__0x11426.Dimensions = __0x11427.GetSize().ToVector2();
										}
										break;

									case "Capsule 2D":
										{
											__0x11401 = CreateRigidBody2D();
											var __0x11428 = __0x11401.CreateComponent<Component_CollisionShape2D_Capsule>();
											var __0x11429 = __0x11400.Result.SpaceBounds.CalculatedBoundingBox;
											__0x11428.TransformRelativeToParent = new Transform( __0x11429.GetCenter(), Quaternion.Identity );

											var __0x11430 = __0x11429.GetSize();

											if( __0x11430.X > __0x11430.Y )
											{
												__0x11428.Axis = 0;
												__0x11428.Radius = __0x11430.Y / 2;
												__0x11428.Height = Math.Max( __0x11430.X - __0x11428.Radius * 2, 0 );
											}
											else
											{
												__0x11428.Axis = 0;
												__0x11428.Radius = __0x11430.X / 2;
												__0x11428.Height = Math.Max( __0x11430.Y - __0x11428.Radius * 2, 0 );
											}
										}
										break;

									case "Convex 2D":
										{
											__0x11401 = CreateRigidBody2D();

											var __0x11431 = new Vector2[ __0x11400.Result.ExtractedVerticesPositions.Length ];
											for( int __0x11432 = 0; __0x11432 < __0x11431.Length; __0x11432++ )
												__0x11431[ __0x11432 ] = __0x11400.Result.ExtractedVerticesPositions[ __0x11432 ].ToVector2();
											var __0x11433 = MathAlgorithms.GetConvexByPoints( __0x11431 );

											var __0x11434 = new Vector3F[ __0x11433.Count ];
											var __0x11435 = new int[ ( __0x11433.Count - 2 ) * 3 ];
											{
												for( int __0x11436 = 0; __0x11436 < __0x11433.Count; __0x11436++ )
													__0x11434[ __0x11436 ] = new Vector3F( __0x11433[ __0x11436 ].ToVector2F(), 0 );

												for( int __0x11437 = 0; __0x11437 < __0x11433.Count - 2; __0x11437++ )
												{
													__0x11435[ __0x11437 * 3 + 0 ] = 0;
													__0x11435[ __0x11437 * 3 + 1 ] = __0x11437 + 1;
													__0x11435[ __0x11437 * 3 + 2 ] = __0x11437 + 2;
												}
											}

											var __0x11438 = __0x11401.CreateComponent<Component_CollisionShape2D_Mesh>();
											__0x11438.Vertices = __0x11434;
											__0x11438.Indices = __0x11435;
											__0x11438.ShapeType = Component_CollisionShape2D_Mesh.ShapeTypeEnum.Convex;

											
											
											

											
											
											

											
											
											

											
											
											
											
											

											
											
											

											
											
											
											
											
											
											

											
											
											
											
											
											
											

											
											
											
											
											
										}
										break;

									
									
									

									

									
									
									
									
									
									
									
									
									
									
									
									
									

									

									
									

									
									
									
									

									


									
									
									
									

									

									
									
									
									
									
									
									
									
									
									
									
									
									
									
									
									



									
									
									

									

									

									
									
									

									
									
									

									
									
									
									

									
									
									
									
									
									
									
									

									
									
									

									
									
									
									
									

									
									
									
									



									
									

									
									
									
									

									
									
									
									
									
									
									
									

									
									
									

									
									
									
									
									

									
									
									

									
									

									

									
									
									
									
									
									

									case "Mesh 2D":
										{
											__0x11401 = CreateRigidBody2D();
											var __0x11439 = __0x11401.CreateComponent<Component_CollisionShape2D_Mesh>();
											__0x11439.Mesh = ReferenceUtility.MakeThisReference( __0x11439, meshInSpace, "Mesh" );
											__0x11439.ShapeType = Component_CollisionShape2D_Mesh.ShapeTypeEnum.TriangleMesh;

											
											

											

											
											
											
											

											
											
											

											
											
											
											
										}
										break;

									
									
									
									
									
									
									
									
									
									
									

									

									
									
									
									

									
									
									

									
									
									
									
									
									
									
									
									
									

									default:
										Log.Warning( "No implementation." );
										__0x11402 = true;
										continue;
									}
								}

								if( __0x11402 )
								{
									__0x11401?.Dispose();
									continue;
								}

								if( __0x11401 != null )
								{
									__0x11401.Enabled = true;

									__0x11399.Add( new UndoActionComponentCreateDelete( __0x11397, new Component[] { __0x11401 }, true ) );

									
									{
										
										var __0x11440 = (Metadata.Property)meshInSpace.MetadataGetMemberBySignature( "property:Transform" );
										var __0x11441 = new UndoActionPropertiesChange.Item( meshInSpace, __0x11440, meshInSpace.Transform, new object[ 0 ] );
										__0x11399.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11441 } ) );

										
										meshInSpace.Transform = ReferenceUtility.MakeReference<Transform>( null, ReferenceUtility.CalculateThisReference( meshInSpace, __0x11401, "Transform" ) );
									}
								}
							}
						}

						if( __0x11399.Count != 0 )
						{
							__0x11397.UndoSystem.CommitAction( new UndoMultiAction( __0x11399 ) );
							__0x11397.Modified = true;
							ScreenNotifications.Show( __0x11461( "The collision was added successfully." ) );
						}

					};

					var __0x11442 = new List<KryptonContextMenuItemBase>();
					var __0x11443 = new string[] { "Use Collision of the Mesh", "", "Box", "Sphere", "Capsule", "Cylinder", "Convex", "Convex Decomposition", "Mesh", "", "Box 2D", "Circle 2D", "Ellipse 2D", "Capsule 2D", "Convex 2D", "Mesh 2D" };
					foreach( var __0x11459 in __0x11443 )
					{
						if( __0x11459 == "" )
							__0x11442.Add( new KryptonContextMenuSeparator() );
						else
						{
							var __0x11444 = new KryptonContextMenuItem( __0x11459, null, __0x11391 );
							__0x11444.Tag = (__0x11380.DropDownContextMenu, __0x11459);
							__0x11442.Add( __0x11444 );
						}
					}

					__0x11380.DropDownContextMenu.Items.Add( new KryptonContextMenuItems( __0x11442.ToArray() ) );
				}

				EditorActions.Register( __0x11380 );
			}

			
			{
				const string __0x11445 = "Collision Body";

				var __0x11446 = new EditorAction();
				__0x11446.Name = "Delete Collision";
				__0x11446.Description = "Deletes the collision body of selected objects.";
				__0x11446.ImageSmall = Properties.Resources.Delete_16;
				__0x11446.ImageBig = Properties.Resources.Delete_32;
				__0x11446.QatSupport = true;
				
				__0x11446.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11446.GetState += delegate ( EditorAction.GetStateContext __0x11471 )
				{
					if( __0x11471.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11447 = __0x11471.ObjectsInFocus.Objects;
						if( __0x11447.Length != 0 && Array.TrueForAll( __0x11447, __0x11472 => __0x11472 is Component_MeshInSpace ) )
						{
							__0x11471.Enabled = Array.Exists( __0x11447, delegate ( object __0x11473 )
							{
								var __0x11448 = ( (Component)__0x11473 ).GetComponent( __0x11445 );
								if( __0x11448 != null )
								{
									if( __0x11448 is Component_RigidBody )
										return true;
									if( __0x11448 is Component_RigidBody2D )
										return true;
								}
								return false;
							} );
						}
					}
				};

				__0x11446.Click += delegate ( EditorAction.ClickContext __0x11474 )
				{
					var __0x11449 = string.Format( __0x11461( "Delete \'{0}\'?" ), __0x11445 );
					if( EditorMessageBox.ShowQuestion( __0x11449, EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						List<UndoSystem.Action> __0x11450 = new List<UndoSystem.Action>();

						foreach( Component_MeshInSpace __0x11460 in __0x11474.ObjectsInFocus.Objects )
						{
							Component __0x11451 = null;
							{
								var __0x11452 = __0x11460.GetComponent( __0x11445 );
								if( __0x11452 != null && ( __0x11452 is Component_RigidBody || __0x11452 is Component_RigidBody2D ) )
									__0x11451 = __0x11452;
							}

							if( __0x11451 != null )
							{
								var __0x11453 = __0x11460.Transform;

								__0x11450.Add( new UndoActionComponentCreateDelete( __0x11474.ObjectsInFocus.DocumentWindow.Document, new Component[] { __0x11451 }, false ) );

								
								if( __0x11460.Transform.GetByReference == string.Format( "this:${0}\\Transform", __0x11445 ) )
								{
									
									var __0x11454 = (Metadata.Property)__0x11460.MetadataGetMemberBySignature( "property:Transform" );
									var __0x11455 = new UndoActionPropertiesChange.Item( __0x11460, __0x11454, __0x11453, new object[ 0 ] );
									__0x11450.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11455 } ) );

									
									__0x11460.Transform = __0x11453.Value;
								}
							}
						}

						if( __0x11450.Count != 0 )
						{
							__0x11474.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( new UndoMultiAction( __0x11450 ) );
							__0x11474.ObjectsInFocus.DocumentWindow.Document.Modified = true;
							ScreenNotifications.Show( __0x11461( "The collision was deleted." ) );
						}
					}
				};

				EditorActions.Register( __0x11446 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_ObjectInSpace_Editor : CanvasBasedEditor
	{
		bool __0x11475 = true;

		bool __0x11476;
		Component_ObjectInSpace __0x11477;

		

		public Component_ObjectInSpace ObjectInSpace
		{
			get { return (Component_ObjectInSpace)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			if( ObjectInSpace != null )
			{
				var __0x11478 = CreateScene( false );
				__0x11478.DisplayPhysicalObjects = true;

				__0x11477 = (Component_ObjectInSpace)ObjectInSpace.Clone();
				__0x11478.AddComponent( __0x11477 );

				__0x11478.Enabled = true;

				if( Document != null )
					Document.UndoSystem.ListOfActionsChanged += __0x11492;

				if( ObjectOfEditor != null )
					SelectObjects( new object[] { ObjectOfEditor } );
			}
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11492;

			base.OnDestroy();
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			if( ObjectInSpace != null && __0x11476 )
			{
				__0x11477?.Dispose();

				__0x11477 = (Component_ObjectInSpace)ObjectInSpace.Clone();
				Scene.AddComponent( __0x11477 );

				__0x11476 = false;
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x11475 && Scene.CameraEditor.Value != null )
			{
				__0x11491();
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );
			}

			__0x11475 = false;
		}

		void __0x11491()
		{
			var __0x11479 = Scene.CameraEditor.Value;
			var __0x11480 = ObjectInSpace.SpaceBounds.CalculatedBoundingBox;
			var __0x11481 = __0x11480.GetCenter();

			double __0x11482 = Math.Max( Math.Max( __0x11480.GetSize().X, __0x11480.GetSize().Y ), __0x11480.GetSize().Z );
			double __0x11483 = __0x11482 * 2;
			if( __0x11483 < 2 )
				__0x11483 = 2;

			double __0x11484 = 1;
			SphericalDirection __0x11485 = new SphericalDirection( -3.83, -.47 );

			var __0x11486 = __0x11481 - __0x11485.GetVector() * __0x11483 * __0x11484;
			var __0x11487 = __0x11481;

			Vector3 __0x11488 = __0x11486;
			Vector3 __0x11489 = __0x11487;
			Degree __0x11490 = 65;

			__0x11479.FieldOfView = __0x11490;
			__0x11479.NearClipPlane = Math.Max( __0x11483 / 10000, 0.01 );
			__0x11479.FarClipPlane = Math.Max( 1000, __0x11483 * 2 );

			__0x11479.Transform = new Transform( __0x11488, Quaternion.LookAt( ( __0x11489 - __0x11488 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11479.FixedUp = Vector3.ZAxis;
		}

		private void __0x11492( object __0x11493, EventArgs __0x11494 )
		{
			__0x11476 = true;
		}
	}
}





namespace NeoAxis.Editor
{
	class Component_ObjectInSpace_EditorExtensions : EditorExtensions
	{
		string __0x11514( string __0x11515 )
		{
			return EditorLocalization.Translate( "ObjectInSpace", __0x11515 );
		}

		public override void Register()
		{
			
			{
				const string __0x11495 = "Attach Transform Offset";

				var __0x11496 = new EditorAction();
				__0x11496.Name = "Attach Second to First";
				__0x11496.Description = "Attaches the second, third and next selected objects to the first selected object.";
				__0x11496.ImageSmall = Properties.Resources.Attach_16;
				__0x11496.ImageBig = Properties.Resources.Attach_32;
				__0x11496.RibbonText = ("Attach", "");

				
				__0x11496.QatSupport = true;
				
				__0x11496.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11496.GetState += delegate ( EditorAction.GetStateContext __0x11516 )
				{
					if( __0x11516.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11497 = __0x11516.ObjectsInFocus.Objects;
						if( __0x11497.Length > 1 )
						{
							var __0x11498 = __0x11497[ 0 ] as Component_ObjectInSpace;
							if( __0x11498 != null )
							{
								for( int __0x11499 = 1; __0x11499 < __0x11497.Length; __0x11499++ )
								{
									var __0x11500 = __0x11497[ __0x11499 ] as Component_ObjectInSpace;
									if( __0x11500 != null )
									{
										var __0x11501 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( __0x11500 );
										if( __0x11501 != null )
											__0x11500 = __0x11501;

										
										if( !__0x11500.Transform.ReferenceSpecified && __0x11500.GetComponent( __0x11495 ) as Component_TransformOffset == null )
										{
											__0x11516.Enabled = true;
										}
									}

									
									
									
									
									
								}
							}
						}
					}
				};

				__0x11496.Click += delegate ( EditorAction.ClickContext __0x11517 )
				{
					object[] __0x11502 = __0x11517.ObjectsInFocus.Objects;

					var __0x11503 = new UndoMultiAction();

					var __0x11504 = __0x11502[ 0 ] as Component_ObjectInSpace;
					for( int __0x11505 = 1; __0x11505 < __0x11502.Length; __0x11505++ )
					{
						var __0x11506 = __0x11502[ __0x11505 ] as Component_ObjectInSpace;
						if( __0x11506 != null )
							Component_ObjectInSpace_Utility.Attach( __0x11504, __0x11506, __0x11517.ObjectsInFocus.DocumentWindow.Document, __0x11503 );
					}

					__0x11517.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( __0x11503 );
					__0x11517.ObjectsInFocus.DocumentWindow.Document.Modified = true;
					ScreenNotifications.Show( __0x11514( "The object was attached to another object." ) );

					

					
					
					
					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					
					
					

					
					
					
					

					
					
					
					
					
					

					
					

					
					

					
					

					

					
					

					
					
					
					
					
					

					
					
					
					
					

					
					
					
				};

				EditorActions.Register( __0x11496 );
			}

			
			{
				

				var __0x11507 = new EditorAction();
				__0x11507.Name = "Detach from Another Object";
				__0x11507.Description = "Detaches selected objects from another object.";
				__0x11507.ImageSmall = Properties.Resources.Detach_16;
				__0x11507.ImageBig = Properties.Resources.Detach_32;
				__0x11507.RibbonText = ("Detach", "");

				
				__0x11507.QatSupport = true;
				
				__0x11507.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				__0x11507.GetState += delegate ( EditorAction.GetStateContext __0x11518 )
				{
					if( __0x11518.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11508 = __0x11518.ObjectsInFocus.Objects;
						if( __0x11508.Length != 0 && Array.TrueForAll( __0x11508, __0x11519 => __0x11519 is Component_ObjectInSpace ) )
						{
							foreach( Component_ObjectInSpace __0x11512 in __0x11508 )
							{
								var __0x11509 = Component_ObjectInSpace_Utility.FindObjectToDetach( __0x11512 );
								if( __0x11509 != null )
								{
									__0x11518.Enabled = true;
									break;
								}

								
								
								
								

								
								
								
								
								
							}

							
							
						}
					}
				};

				__0x11507.Click += delegate ( EditorAction.ClickContext __0x11520 )
				{
					if( EditorMessageBox.ShowQuestion( __0x11514("Detach from another object?"), EMessageBoxButtons.YesNo ) == EDialogResult.Yes )
					{
						var __0x11510 = new UndoMultiAction();

						foreach( Component_ObjectInSpace __0x11513 in __0x11520.ObjectsInFocus.Objects )
						{
							var __0x11511 = Component_ObjectInSpace_Utility.FindObjectToDetach( __0x11513 );
							if( __0x11511 != null )
								Component_ObjectInSpace_Utility.Detach( __0x11511, __0x11520.ObjectsInFocus.DocumentWindow.Document, __0x11510 );
						}

						if( __0x11510.Actions.Count != 0 )
						{
							__0x11520.ObjectsInFocus.DocumentWindow.Document.UndoSystem.CommitAction( __0x11510 );
							__0x11520.ObjectsInFocus.DocumentWindow.Document.Modified = true;
							ScreenNotifications.Show( __0x11514( "The object was detached from another object." ) );
						}


						

						
						
						
						
						
						

						
						
						
						
						
						
						
						
						

						
						
						

						
						
						
						

						
						
						
						
						
						
					}
				};

				EditorActions.Register( __0x11507 );
			}

		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_ObjectInSpace_Preview : CanvasBasedPreview
	{
		public Component_ObjectInSpace_Preview()
		{
		}

		[Browsable( false )]
		protected virtual bool EnableViewportControl
		{
			get
			{
				var __0x11521 = ObjectOfPreview as Component_ObjectInSpace;
				if( __0x11521 != null && __0x11521.ParentScene == null )
					return true;
				return false;
			}
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			if( EnableViewportControl )
			{
				var __0x11522 = ObjectOfPreview as Component_ObjectInSpace;
				if( __0x11522 != null && __0x11522.ParentScene == null )
				{
					var __0x11523 = CreateScene( false );

					var __0x11524 = __0x11522.GetProvidedType();
					if( __0x11524 != null )
					{
						var __0x11525 = (Component_ObjectInSpace)__0x11523.CreateComponent( __0x11524 );
						__0x11525.Transform = Transform.Identity;
					}

					__0x11523.Enabled = true;
					SetCameraByBounds( __0x11523.CalculateTotalBoundsOfObjectsInSpace() );
				}
			}
			else
			{
				ViewportControl.AllowCreateRenderWindow = false;
				ViewportControl.Visible = false;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_ObjectInSpace_PreviewImage : PreviewImageGenerator
	{
		public Component_ObjectInSpace_PreviewImage()
		{
		}

		protected override void Update()
		{
			var __0x11526 = ObjectOfPreview as Component_ObjectInSpace;
			if( __0x11526 != null )
			{
				var __0x11527 = CreateScene( false );

				var __0x11528 = __0x11526.GetProvidedType();
				if( __0x11528 != null )
				{
					var __0x11529 = (Component_ObjectInSpace)__0x11527.CreateComponent( __0x11528 );
					__0x11529.Transform = Transform.Identity;
				}

				__0x11527.Enabled = true;

				SetCameraByBounds( __0x11527.CalculateTotalBoundsOfObjectsInSpace(), 2.6 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_ParticleSystemInSpace_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11530;
		ProcedureUI.Button __0x11531;

		

		string __0x11543( string __0x11547 )
		{
			return EditorLocalization.Translate( "ParticleSystemInSpace", __0x11547 );
		}

		protected override void OnInit()
		{
			__0x11530 = ProcedureForm.CreateButton( __0x11543( "Play" ) );
			__0x11530.Click += __0x11545;

			__0x11531 = ProcedureForm.CreateButton( __0x11543( "Stop" ) );
			__0x11531.Click += __0x11546;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11530, __0x11531 } );
		}

		protected override void OnUpdate()
		{
			var __0x11532 = __0x11544();

			__0x11530.Enabled = __0x11532 != null;
			__0x11531.Enabled = __0x11532 != null && __0x11532.Activated;
		}

		Component_ParticleSystemInSpace __0x11544()
		{
			foreach( var __0x11542 in Provider.SelectedObjects )
			{
				var __0x11533 = __0x11542 as Component_ParticleSystemInSpace;
				if( __0x11533 != null )
					return __0x11533;
			}
			return null;
		}

		private void __0x11545( ProcedureUI.Button __0x11548 )
		{
			var __0x11534 = __0x11544();
			if( __0x11534 == null )
				return;

			var __0x11535 = __0x11534.Activated;

			
			if( __0x11534.Activated )
				__0x11534.RecreateData( false );
			else
				__0x11534.Activated = true;

			
			if( __0x11535 != __0x11534.Activated )
			{
				var __0x11536 = (Metadata.Property)__0x11534.MetadataGetMemberBySignature( "property:Activated" );
				var __0x11537 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11534, __0x11536, __0x11535, null ) );
				Provider.DocumentWindow.Document.CommitUndoAction( __0x11537 );
			}
		}

		private void __0x11546( ProcedureUI.Button __0x11549 )
		{
			var __0x11538 = __0x11544();
			if( __0x11538 == null )
				return;

			var __0x11539 = __0x11538.Activated;

			
			__0x11538.Activated = false;

			
			var __0x11540 = (Metadata.Property)__0x11538.MetadataGetMemberBySignature( "property:Activated" );
			var __0x11541 = new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item( __0x11538, __0x11540, __0x11539, null ) );
			Provider.DocumentWindow.Document.CommitUndoAction( __0x11541 );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_ParticleSystem_DocumentWindow : DocumentWindowWithViewport
	{
		bool __0x11550 = true;

		bool __0x11551;

		int __0x11552;
		double __0x11553;

		

		public Component_ParticleSystem_DocumentWindow()
		{
			__0x11579();
		}

		public Component_ParticleSystem ParticleSystem
		{
			get { return (Component_ParticleSystem)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11554 = CreateScene( false );
			if( ParticleSystem != null )
			{
				var __0x11555 = __0x11554.CreateComponent<Component_ParticleSystemInSpace>();
				__0x11555.ParticleSystem = ParticleSystem;
			}
			__0x11554.Enabled = true;

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x11578;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x11578;

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void Scene_ViewportUpdateGetCameraSettings( Component_Scene scene, Viewport viewport, ref bool processed )
		{
			base.Scene_ViewportUpdateGetCameraSettings( scene, viewport, ref processed );

			if( __0x11550 && scene.CameraEditor.Value != null )
			{
				__0x11576();
				viewport.CameraSettings = new Viewport.CameraSettingsClass( viewport, scene.CameraEditor );
			}

			__0x11550 = false;
		}

		void __0x11576()
		{
			

			var __0x11556 = Scene.CameraEditor.Value;
			
			var __0x11557 = new Bounds( -5, -5, -5, 5, 5, 5 );
			
			var __0x11558 = __0x11557.GetCenter();

			

			double __0x11559 = Math.Max( Math.Max( __0x11557.GetSize().X, __0x11557.GetSize().Y ), __0x11557.GetSize().Z );
			double __0x11560 = __0x11559 * 2;
			if( __0x11560 < 2 )
				__0x11560 = 2;

			double __0x11561 = 1;
			SphericalDirection __0x11562 = new SphericalDirection( -3.83, -.47 );

			var __0x11563 = __0x11558 - __0x11562.GetVector() * __0x11560 * __0x11561;
			var __0x11564 = __0x11558;

			Vector3 __0x11565 = __0x11563;
			Vector3 __0x11566 = __0x11564;
			Degree __0x11567 = 65;

			
			
			__0x11556.FieldOfView = __0x11567;
			__0x11556.NearClipPlane = Math.Max( __0x11560 / 10000, 0.01 );
			__0x11556.FarClipPlane = Math.Max( 1000, __0x11560 * 2 );

			__0x11556.Transform = new Transform( __0x11565, Quaternion.LookAt( ( __0x11566 - __0x11565 ).GetNormalize(), Vector3.ZAxis ) );
			__0x11556.FixedUp = Vector3.ZAxis;
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			if( ParticleSystem != null && __0x11551 )
			{
				ParticleSystem.ResultCompile();
				__0x11551 = false;
			}

			
			if( ParticleSystem != null && ParticleSystem.Result != null )
			{
				foreach( var __0x11574 in ParticleSystem.GetComponents<Component_ParticleEmitter>() )
				{
					if( __0x11574.Enabled )
					{
						bool __0x11568 = SelectedObjectsSet.Contains( __0x11574 );

						var __0x11569 = Transform.Identity;
						int __0x11570 = 0;

						foreach( var __0x11575 in __0x11574.GetComponents<Component_ParticleEmitterShape>( false, false, false ) )
						{
							if( __0x11575.Enabled )
							{
								ColorValue __0x11571;
								if( __0x11568 || SelectedObjectsSet.Contains( __0x11575 ) )
									__0x11571 = ProjectSettings.Get.SelectedColor;
								else
								{
									
									__0x11571 = new ColorValue( 0, 0, 0.8 );
								}
								viewport.Simple3DRenderer.SetColor( __0x11571, __0x11571 * ProjectSettings.Get.HiddenByOtherObjectsColorMultiplier );
								__0x11575.PerformRender( viewport, __0x11569, false, ref __0x11570 );
							}
						}
					}
				}

			}
		}

		static string __0x11577( string __0x11580 )
		{
			return EditorLocalization.Translate( "ParticleSystemDocumentWindow", __0x11580 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			if( ParticleSystem != null && Scene != null )
			{
				var __0x11572 = Scene.GetComponent<Component_ParticleSystemInSpace>();
				if( __0x11572 != null )
				{
					
					

					if( Time.Current > __0x11553 + 0.25 )
					{
						__0x11553 = Time.Current;
						__0x11552 = __0x11572.ObjectsGetCount();
					}
					lines.Add( __0x11577( "Particles" ) + ": " + __0x11552.ToString() );
				}
			}
		}

		

		private void __0x11578( object __0x11581, EventArgs __0x11582 )
		{
			__0x11551 = true;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class Component_ParticleSystem_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x11573 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x11579()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "Component_ParticleSystem_DocumentWindow";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public partial class Component_ParticleSystem_PreviewControl : PreviewControlWithViewport
	{
		public Component_ParticleSystem_PreviewControl()
		{
			__0x11587();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11583 = CreateScene( false );

			var __0x11584 = ObjectOfPreview as Component_ParticleSystem;
			if( __0x11584 != null )
			{
				var __0x11585 = __0x11583.CreateComponent<Component_ParticleSystemInSpace>();
				__0x11585.ParticleSystem = __0x11584;
			}

			__0x11583.Enabled = true;

			
			SetCameraByBounds( new Bounds( -5, -5, -5, 5, 5, 5 ) );
			
		}
	}
}

namespace NeoAxis.Editor
{
    partial class Component_ParticleSystem_PreviewControl
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x11586 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x11586 != null))
            {
                __0x11586.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x11587()
        {
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_ParticleSystem_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion
	}
}





namespace NeoAxis.Editor
{
	public class Component_ParticleSystem_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11588;

		

		protected override void OnInit()
		{
			__0x11588 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Update" ) );
			__0x11588.Click += __0x11590;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11588 } );
		}

		private void __0x11590( ProcedureUI.Button __0x11591 )
		{
			foreach( var __0x11589 in GetObjects<Component_ParticleSystem>() )
			{
				__0x11589.MustRecreateInstances();
				__0x11589.ResultCompile();
			}
		}
	}
}





namespace NeoAxis.Editor
{
	class Component_PhysicalBody_EditorExtensions : EditorExtensions
	{
		public override void Register()
		{
			
			{
				var __0x11592 = new EditorAction();
				
				__0x11592.Name = "Add Constraint";
				
				

				
				__0x11592.QatSupport = true;
				
				__0x11592.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Document;

				Component_PhysicalBody GetBody( object __0x11605 )
				{
					if( __0x11605 is Component_PhysicalBody body )
						return body;

					var __0x11593 = __0x11605 as Component;
					if( __0x11593 != null )
					{
						var __0x11594 = __0x11593.GetComponent<Component_PhysicalBody>();
						if( __0x11594 != null )
							return __0x11594;
					}

					return null;
				}

				__0x11592.GetState += delegate ( EditorAction.GetStateContext __0x11606 )
				{
					if( __0x11606.ObjectsInFocus.DocumentWindow != null )
					{
						object[] __0x11595 = __0x11606.ObjectsInFocus.Objects;
						if( __0x11595.Length == 2 )
						{
							var __0x11596 = GetBody( __0x11595[ 0 ] );
							var __0x11597 = GetBody( __0x11595[ 1 ] );

							if( __0x11596 != null && __0x11597 != null )
								__0x11606.Enabled = true;
							
							
						}
					}
				};

				__0x11592.Click += delegate ( EditorAction.ClickContext __0x11607 )
				{
					object[] __0x11598 = __0x11607.ObjectsInFocus.Objects;
					if( __0x11598.Length == 2 )
					{
						var __0x11599 = GetBody( __0x11598[ 0 ] );
						var __0x11600 = GetBody( __0x11598[ 1 ] );
						
						

						var __0x11601 = ComponentUtility.FindNearestCommonParent( new Component[] { __0x11599, __0x11600 } );
						if( __0x11601 != null )
						{
							var __0x11602 = new NewObjectWindow.CreationDataClass();

							__0x11602.initDocumentWindow = __0x11607.ObjectsInFocus.DocumentWindow;
							__0x11602.initParentObjects = new List<object>();
							__0x11602.initParentObjects.Add( __0x11601 );
							__0x11602.initLockType = MetadataManager.GetTypeOfNetType( typeof( Component_Constraint ) );
							

							__0x11602.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x11608 )
							{
								var __0x11603 = (Component_Constraint)__0x11602.createdComponentsOnTopLevel[ 0 ];

								__0x11603.BodyA = ReferenceUtility.MakeReference<Component_PhysicalBody>(
									null, ReferenceUtility.CalculateThisReference( __0x11603, __0x11599 ) );
								__0x11603.BodyB = ReferenceUtility.MakeReference<Component_PhysicalBody>(
									null, ReferenceUtility.CalculateThisReference( __0x11603, __0x11600 ) );

								var __0x11604 = ( __0x11599.Transform.Value.Position + __0x11600.Transform.Value.Position ) * 0.5;
								__0x11603.Transform = new Transform( __0x11604, Quaternion.Identity );
							};

							EditorAPI.OpenNewObjectWindow( __0x11602 );
						}
					}
				};

				EditorActions.Register( __0x11592 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public static class EditorPhysicsUtility
	{
		public static void AddCollision( DocumentWindow documentWindow, string collisionName )
		{
			const string __0x11609 = "Collision Definition";

			var __0x11610 = documentWindow.ObjectOfWindow as Component_Mesh;

			var __0x11611 = __0x11610.CreateComponent<Component_RigidBody>( enabled: false );
			__0x11611.Name = __0x11609;
			

			__0x11611.MotionType = Component_RigidBody.MotionTypeEnum.Static;

			string __0x11612 = null;

			

			switch( collisionName )
			{
			case "Box":
				{
					var __0x11613 = __0x11611.CreateComponent<Component_CollisionShape_Box>();
					var __0x11614 = __0x11610.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11613.TransformRelativeToParent = new Transform( __0x11614.GetCenter(), Quaternion.Identity );
					__0x11613.Dimensions = __0x11614.GetSize();
				}
				break;

			case "Sphere":
				{
					var __0x11615 = __0x11611.CreateComponent<Component_CollisionShape_Sphere>();
					var __0x11616 = __0x11610.Result.SpaceBounds.CalculatedBoundingSphere;
					__0x11615.TransformRelativeToParent = new Transform( __0x11616.Origin, Quaternion.Identity );
					__0x11615.Radius = __0x11616.Radius;
				}
				break;

			case "Capsule":
				{
					var __0x11617 = __0x11611.CreateComponent<Component_CollisionShape_Capsule>();
					var __0x11618 = __0x11610.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11617.TransformRelativeToParent = new Transform( __0x11618.GetCenter(), Quaternion.Identity );
					__0x11617.Radius = Math.Max( __0x11618.GetSize().X, __0x11618.GetSize().Y ) / 2;
					__0x11617.Height = Math.Max( __0x11618.GetSize().Z - __0x11617.Radius * 2, 0 );
				}
				break;

			case "Cylinder":
				{
					var __0x11619 = __0x11611.CreateComponent<Component_CollisionShape_Cylinder>();
					var __0x11620 = __0x11610.Result.SpaceBounds.CalculatedBoundingBox;
					__0x11619.TransformRelativeToParent = new Transform( __0x11620.GetCenter(), Quaternion.Identity );
					__0x11619.Radius = Math.Max( __0x11620.GetSize().X, __0x11620.GetSize().Y ) / 2;
					__0x11619.Height = __0x11620.GetSize().Z;
				}
				break;

			case "Convex":
				{
					var __0x11621 = __0x11611.CreateComponent<Component_CollisionShape_Mesh>();
					__0x11621.ShapeType = Component_CollisionShape_Mesh.ShapeTypeEnum.Convex;
					__0x11621.Mesh = ReferenceUtility.MakeThisReference( __0x11621, __0x11610 );
				}
				break;

			case "Convex Decomposition":
				{
					var __0x11622 = new ConvexDecomposition.Settings();

					var __0x11623 = new SpecifyParametersForm( "Convex Decomposition", __0x11622 );
					__0x11623.CheckHandler = delegate ( ref string __0x11631 )
					{
						
						return true;
					};
					if( __0x11623.ShowDialog() != DialogResult.OK )
					{
						__0x11610.RemoveComponent( __0x11611, false );
						return;
					}

					var __0x11624 = ConvexDecomposition.Decompose( __0x11610.Result.ExtractedVerticesPositions, __0x11610.Result.ExtractedIndices, __0x11622 );

					if( __0x11624 == null )
					{
						__0x11610.RemoveComponent( __0x11611, false );
						Log.Warning( "Unable to decompose." );
						return;
					}

					foreach( var __0x11630 in __0x11624 )
					{
						var __0x11625 = __0x11611.CreateComponent<Component_CollisionShape_Mesh>();
						__0x11625.Vertices = __0x11630.Vertices;
						__0x11625.Indices = __0x11630.Indices;
						__0x11625.ShapeType = Component_CollisionShape_Mesh.ShapeTypeEnum.Convex;
					}
				}
				break;

			case "Mesh":
				{
					var __0x11626 = __0x11611.CreateComponent<Component_CollisionShape_Mesh>();
					__0x11626.Mesh = ReferenceUtility.MakeThisReference( __0x11626, __0x11610 );
				}
				break;

			default:
				__0x11612 = "No implementation.";
				break;
			}

			if( !string.IsNullOrEmpty( __0x11612 ) )
			{
				__0x11610.RemoveComponent( __0x11611, false );
				Log.Warning( __0x11612 );
				return;
			}

			__0x11611.Enabled = true;

			var __0x11627 = new List<UndoSystem.Action>();
			__0x11627.Add( new UndoActionComponentCreateDelete( documentWindow.Document, new Component[] { __0x11611 }, true ) );

			
			if( !__0x11610.EditorDisplayCollision )
			{
				__0x11610.EditorDisplayCollision = true;

				var __0x11628 = (Metadata.Property)__0x11610.MetadataGetMemberBySignature( "property:EditorDisplayCollision" );
				var __0x11629 = new UndoActionPropertiesChange.Item( __0x11610, __0x11628, false, new object[ 0 ] );
				__0x11627.Add( new UndoActionPropertiesChange( new UndoActionPropertiesChange.Item[] { __0x11629 } ) );
			}

			documentWindow.Document.UndoSystem.CommitAction( new UndoMultiAction( __0x11627 ) );
			documentWindow.Document.Modified = true;
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_RenderToFile_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x11632;

		

		class __0x11759
		{
			
			
			
			

			
			public string BaseColorTexture;
			public string MetallicTexture;
			public string RoughnessTexture;
			public string NormalTexture;
			public string DisplacementTexture;
			public string AmbientOcclusionTexture;
			public string EmissiveTexture;
			public string OpacityTexture;

			public string GetTextureValueByName( string name )
			{
				switch( name )
				{
				case "BaseColor": return BaseColorTexture;
				case "Metallic": return MetallicTexture;
				case "Roughness": return RoughnessTexture;
				case "Normal": return NormalTexture;
				case "Displacement": return DisplacementTexture;
				case "AmbientOcclusion": return AmbientOcclusionTexture;
				case "Emissive": return EmissiveTexture;
				case "Opacity": return OpacityTexture;
				}
				return "";
			}

			public void SetTextureValueByName( string name, string value )
			{
				switch( name )
				{
				case "BaseColor": BaseColorTexture = value; break;
				case "Metallic": MetallicTexture = value; break;
				case "Roughness": RoughnessTexture = value; break;
				case "Normal": NormalTexture = value; break;
				case "Displacement": DisplacementTexture = value; break;
				case "AmbientOcclusion": AmbientOcclusionTexture = value; break;
				case "Emissive": EmissiveTexture = value; break;
				case "Opacity": OpacityTexture = value; break;
				}
			}

			public int GetTextureCount()
			{
				int __0x11633 = 0;
				if( !string.IsNullOrEmpty( BaseColorTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( MetallicTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( RoughnessTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( NormalTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( DisplacementTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( AmbientOcclusionTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( EmissiveTexture ) )
					__0x11633++;
				if( !string.IsNullOrEmpty( OpacityTexture ) )
					__0x11633++;
				return __0x11633;
			}

			public __0x11759 Clone()
			{
				var __0x11634 = new __0x11759();

				__0x11634.BaseColorTexture = BaseColorTexture;
				__0x11634.MetallicTexture = MetallicTexture;
				__0x11634.RoughnessTexture = RoughnessTexture;
				__0x11634.NormalTexture = NormalTexture;
				__0x11634.DisplacementTexture = DisplacementTexture;
				__0x11634.AmbientOcclusionTexture = AmbientOcclusionTexture;
				__0x11634.EmissiveTexture = EmissiveTexture;
				__0x11634.OpacityTexture = OpacityTexture;

				return __0x11634;
			}
		}

		

		enum MaterialChannel
		{
			Opacity,
			BaseColor,
			Metallic,
			Roughness,
			Normal,
		}

		

		protected override void OnInit()
		{
			__0x11632 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Render" ) );
			__0x11632.Click += __0x11735;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x11632 } );
		}

		private void __0x11735( ProcedureUI.Button __0x11743 )
		{
			__0x11736();
		}

		public Component_RenderToFile RenderToFile
		{
			get { return GetFirstObject<Component_RenderToFile>(); }
		}

		void __0x11736()
		{
			var __0x11635 = RenderToFile;
			var __0x11636 = __0x11635.ParentRoot as Component_Scene;

			
			var __0x11637 = __0x11635.Camera.Value;
			if( __0x11637 == null )
				__0x11637 = __0x11636.Mode.Value == Component_Scene.ModeEnum._2D ? __0x11636.CameraEditor2D : __0x11636.CameraEditor;
			if( __0x11637 == null )
			{
				EditorMessageBox.ShowWarning( "Camera is not specified." );
				return;
			}

			var __0x11638 = __0x11635.OutputFileName.Value.Trim();
			if( !Path.IsPathRooted( __0x11638 ) && !string.IsNullOrEmpty( __0x11638 ) )
				__0x11638 = VirtualPathUtility.GetRealPathByVirtual( __0x11638 );

			if( string.IsNullOrEmpty( __0x11638 ) )
			{
				if( __0x11635.Mode.Value == Component_RenderToFile.ModeEnum.Material )
				{
					if( !EditorUtility.ShowSaveFileDialog( "", "Output.material", "Material files (*.material)|*.material", out __0x11638 ) )
						return;
				}
				else
				{
					if( !EditorUtility.ShowSaveFileDialog( "", "Output.png", "PNG files (*.png)|*.png", out __0x11638 ) )
						return;
				}
			}
			else
			{

				

				
				if( File.Exists( __0x11638 ) )
				{
					var __0x11639 = $"The file with name \'{__0x11638}\' is already exists. Overwrite?";
					if( EditorMessageBox.ShowQuestion( __0x11639, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
						return;
				}
			}

			var __0x11640 = ScreenNotifications.ShowSticky( "Processing..." );
			try
			{
				if( __0x11635.Mode.Value == Component_RenderToFile.ModeEnum.Material )
					__0x11742( __0x11637, __0x11638 );
				else
					__0x11738( __0x11637, __0x11638 );
			}
			finally
			{
				__0x11640.Close();
			}

		}

		private void __0x11737( Component_Scene __0x11744, ref bool __0x11745 )
		{
			__0x11745 = RenderToFile.DisplayDevelopmentData;
		}

		void __0x11738( Component_Camera __0x11746, string __0x11747 )
		{
			var __0x11641 = RenderToFile;
			var __0x11642 = __0x11641.ParentRoot as Component_Scene;

			Component_Image __0x11643 = null;
			Component_Image __0x11644 = null;

			try
			{
				
				var __0x11645 = __0x11641.Resolution.Value;

				
				var __0x11646 = false;
				PixelFormat __0x11647 = __0x11646 ? PixelFormat.Float16RGBA : PixelFormat.A8R8G8B8;
				

				__0x11643 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
				__0x11643.CreateType = Component_Image.TypeEnum._2D;
				__0x11643.CreateSize = __0x11645;
				__0x11643.CreateMipmaps = false;
				__0x11643.CreateFormat = __0x11647;
				__0x11643.CreateUsage = Component_Image.Usages.RenderTarget;
				__0x11643.CreateFSAA = 0;
				__0x11643.Enabled = true;

				var __0x11648 = __0x11643.Result.GetRenderTarget( 0, 0 );
				var __0x11649 = __0x11648.AddViewport( true, true );
				__0x11649.AttachedScene = __0x11642;

				__0x11644 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
				__0x11644.CreateType = Component_Image.TypeEnum._2D;
				__0x11644.CreateSize = __0x11645;
				__0x11644.CreateMipmaps = false;
				__0x11644.CreateFormat = __0x11647;
				__0x11644.CreateUsage = Component_Image.Usages.ReadBack | Component_Image.Usages.BlitDestination;
				__0x11644.CreateFSAA = 0;
				__0x11644.Enabled = true;
				
				__0x11644.Result.PrepareNativeObject();

				
				

				

				
				

				
				

				
				
				
				
				
				
				
				
				
				

				try
				{
					__0x11642.GetDisplayDevelopmentDataInThisApplicationOverride += __0x11737;

					var __0x11650 = new Viewport.CameraSettingsClass( __0x11649, __0x11746 );

					

					__0x11649.Update( true, __0x11650 );

					
					__0x11649.RenderingContext.MultiRenderTarget_DestroyAll();
					__0x11649.RenderingContext.DynamicTexture_DestroyAll();
				}
				finally
				{
					__0x11642.GetDisplayDevelopmentDataInThisApplicationOverride -= __0x11737;
				}

				__0x11643.Result.GetRealObject( true ).BlitTo( __0x11649.RenderingContext.CurrentViewNumber, __0x11644.Result.GetRealObject( true ), 0, 0 );


				

				
				var __0x11651 = PixelFormatUtility.GetNumElemBytes( __0x11647 ) * __0x11645.X * __0x11645.Y;
				var __0x11652 = new byte[ __0x11651 ];
				unsafe
				{
					fixed( byte* __0x11653 = __0x11652 )
					{
						var __0x11654 = __0x11644.Result.GetRealObject( true ).Read( (IntPtr)__0x11653, 0 );
						while( RenderingSystem.CallBgfxFrame() < __0x11654 ) { }
					}
				}

				var __0x11655 = new ImageUtility.Image2D( __0x11647, __0x11645, __0x11652 );

				
				for( int __0x11656 = 0; __0x11656 < __0x11655.Size.Y; __0x11656++ )
				{
					for( int __0x11657 = 0; __0x11657 < __0x11655.Size.X; __0x11657++ )
					{
						var __0x11658 = __0x11655.GetPixel( new Vector2I( __0x11657, __0x11656 ) );
						__0x11658.W = 1.0f;
						__0x11655.SetPixel( new Vector2I( __0x11657, __0x11656 ), __0x11658 );
					}
				}

				
				

				
				
				
				
				
				
				
				
				
				

				
				
				

				if( !Directory.Exists( Path.GetDirectoryName( __0x11747 ) ) )
					Directory.CreateDirectory( Path.GetDirectoryName( __0x11747 ) );

				if( !ImageUtility.Save( __0x11747, __0x11655.Data, __0x11655.Size, 1, __0x11655.Format, 1, 0, out var error ) )
					throw new Exception( error );
			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}
			finally
			{
				__0x11643?.Dispose();
				__0x11644?.Dispose();
			}

			ScreenNotifications.Show( "Rendering completed successfully." );
		}

		void __0x11739( Component_Material __0x11748, __0x11759 __0x11749, out Component_FlowGraph __0x11750 )
		{
			__0x11750 = __0x11748.CreateComponent<Component_FlowGraph>();
			__0x11750.Name = "Shader graph";
			__0x11750.Specialization = ReferenceUtility.MakeReference(
				MetadataManager.GetTypeOfNetType( typeof( Component_FlowGraphSpecialization_Shader ) ).Name + "|Instance" );

			{
				var __0x11659 = __0x11750.CreateComponent<Component_FlowGraphNode>();
				__0x11659.Name = "Node " + "Material";
				__0x11659.Position = new Vector2I( 10, -7 );
				__0x11659.ControlledObject = ReferenceUtility.MakeThisReference( __0x11659, __0x11748 );
			}

			
			{
				const int __0x11660 = 9;
				Vector2I __0x11661 = new Vector2I( -20, -__0x11749.GetTextureCount() * __0x11660 / 2 );

				
				if( !string.IsNullOrEmpty( __0x11749.BaseColorTexture ) )
				{
					var __0x11662 = __0x11750.CreateComponent<Component_FlowGraphNode>();
					__0x11662.Name = "Node Texture Sample " + "BaseColor";
					__0x11662.Position = __0x11661;
					__0x11661.Y += __0x11660;

					var __0x11663 = __0x11662.CreateComponent<Component_ShaderTextureSample>();
					__0x11663.Name = ComponentUtility.GetNewObjectUniqueName( __0x11663 );
					__0x11663.Texture = new Reference<Component_Image>( null, __0x11749.BaseColorTexture );

					__0x11662.ControlledObject = ReferenceUtility.MakeThisReference( __0x11662, __0x11663 );

					__0x11748.BaseColor = ReferenceUtility.MakeThisReference( __0x11748, __0x11663, "RGBA" );
				}
				
				

				
				if( !string.IsNullOrEmpty( __0x11749.MetallicTexture ) )
				{
					var __0x11664 = __0x11750.CreateComponent<Component_FlowGraphNode>();
					__0x11664.Name = "Node Texture Sample " + "Metallic";
					__0x11664.Position = __0x11661;
					__0x11661.Y += __0x11660;

					var __0x11665 = __0x11664.CreateComponent<Component_ShaderTextureSample>();
					__0x11665.Name = ComponentUtility.GetNewObjectUniqueName( __0x11665 );
					__0x11665.Texture = new Reference<Component_Image>( null, __0x11749.MetallicTexture );

					__0x11664.ControlledObject = ReferenceUtility.MakeThisReference( __0x11664, __0x11665 );

					__0x11748.Metallic = ReferenceUtility.MakeThisReference( __0x11748, __0x11665, "R" );
				}

				
				if( !string.IsNullOrEmpty( __0x11749.RoughnessTexture ) )
				{
					var __0x11666 = __0x11750.CreateComponent<Component_FlowGraphNode>();
					__0x11666.Name = "Node Texture Sample " + "Roughness";
					__0x11666.Position = __0x11661;
					__0x11661.Y += __0x11660;

					var __0x11667 = __0x11666.CreateComponent<Component_ShaderTextureSample>();
					__0x11667.Name = ComponentUtility.GetNewObjectUniqueName( __0x11667 );
					__0x11667.Texture = new Reference<Component_Image>( null, __0x11749.RoughnessTexture );

					__0x11666.ControlledObject = ReferenceUtility.MakeThisReference( __0x11666, __0x11667 );

					__0x11748.Roughness = ReferenceUtility.MakeThisReference( __0x11748, __0x11667, "R" );
				}

				
				if( !string.IsNullOrEmpty( __0x11749.NormalTexture ) )
				{
					var __0x11668 = __0x11750.CreateComponent<Component_FlowGraphNode>();
					__0x11668.Name = "Node Texture Sample " + "Normal";
					__0x11668.Position = __0x11661;
					__0x11661.Y += __0x11660;

					var __0x11669 = __0x11668.CreateComponent<Component_ShaderTextureSample>();
					__0x11669.Name = ComponentUtility.GetNewObjectUniqueName( __0x11669 );
					__0x11669.Texture = new Reference<Component_Image>( null, __0x11749.NormalTexture );

					__0x11668.ControlledObject = ReferenceUtility.MakeThisReference( __0x11668, __0x11669 );

					__0x11748.Normal = ReferenceUtility.MakeThisReference( __0x11748, __0x11669, "RGBA" );
				}

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				
				
				
				
				
				

				
				
				

				

				
				

				
				if( !string.IsNullOrEmpty( __0x11749.OpacityTexture ) )
				{
					var __0x11670 = __0x11750.CreateComponent<Component_FlowGraphNode>();
					__0x11670.Name = "Node Texture Sample " + "Opacity";
					__0x11670.Position = __0x11661;
					__0x11661.Y += __0x11660;

					var __0x11671 = __0x11670.CreateComponent<Component_ShaderTextureSample>();
					__0x11671.Name = ComponentUtility.GetNewObjectUniqueName( __0x11671 );
					__0x11671.Texture = new Reference<Component_Image>( null, __0x11749.OpacityTexture );

					__0x11670.ControlledObject = ReferenceUtility.MakeThisReference( __0x11670, __0x11671 );

					__0x11748.Opacity = ReferenceUtility.MakeThisReference( __0x11748, __0x11671, "R" );

					__0x11748.BlendMode = Component_Material.BlendModeEnum.Masked;
				}
			}
		}

		

		struct __0x11760
		{
			public float distance;
			public Vector2I offset;
		}
		static __0x11760[] __0x11672;
		static Vector2I __0x11673;

		__0x11760[] __0x11740( ImageUtility.Image2D __0x11751 )
		{
			if( __0x11672 == null || __0x11673 != __0x11751.Size )
			{
				var __0x11674 = new List<__0x11760>( __0x11751.Size.X * 5 );

				for( int __0x11675 = -__0x11751.Size.Y; __0x11675 <= __0x11751.Size.Y; __0x11675++ )
				{
					for( int __0x11676 = -__0x11751.Size.X; __0x11676 <= __0x11751.Size.X; __0x11676++ )
					{
						if( __0x11676 == 0 && __0x11675 == 0 )
							continue;

						var __0x11677 = new __0x11760();
						__0x11677.offset = new Vector2I( __0x11676, __0x11675 );
						__0x11677.distance = MathEx.Sqrt( __0x11676 * __0x11676 + __0x11675 * __0x11675 );
						__0x11674.Add( __0x11677 );
					}
				}

				__0x11672 = __0x11674.ToArray();
				__0x11673 = __0x11751.Size;

				CollectionUtility.MergeSort( __0x11672, delegate ( __0x11760 __0x11752, __0x11760 __0x11753 )
				{
					if( __0x11752.distance < __0x11753.distance )
						return -1;
					else if( __0x11752.distance > __0x11753.distance )
						return 1;
					return 0;
				}, true );
			}

			return __0x11672;
		}

		

		void __0x11741( ref ImageUtility.Image2D __0x11754, Vector2I[,] __0x11755 )
		{
			for( int __0x11678 = 0; __0x11678 < __0x11754.Size.Y; __0x11678++ )
			{
				for( int __0x11679 = 0; __0x11679 < __0x11754.Size.X; __0x11679++ )
				{
					var __0x11680 = __0x11755[ __0x11679, __0x11678 ];
					var __0x11681 = __0x11754.GetPixelByte( new Vector2I( __0x11680.X, __0x11680.Y ) );

					__0x11754.SetPixel( new Vector2I( __0x11679, __0x11678 ), __0x11681 );


					

					
					
					
					
					
					
					
					

					
				}
			}
		}

		void __0x11742( Component_Camera __0x11756, string __0x11757 )
		{
			var __0x11682 = RenderToFile;
			var __0x11683 = __0x11682.ParentRoot as Component_Scene;

			var __0x11684 = new string[ 5 ];
			
			Vector2I[,] __0x11685 = null;

			
			for( int __0x11686 = 0; __0x11686 < 5; __0x11686++ )
			{
				var __0x11687 = (MaterialChannel)__0x11686;

				Component_Image __0x11688 = null;
				Component_Image __0x11689 = null;

				try
				{
					
					

					var __0x11690 = Path.GetFileNameWithoutExtension( __0x11757 ) + "_";

					string __0x11691 = "";
					switch( __0x11686 )
					{
					case 0: __0x11691 = __0x11690 + "Opacity.png"; break;
					case 1: __0x11691 = __0x11690 + "BaseColor.png"; break;
					case 2: __0x11691 = __0x11690 + "Metallic.png"; break;
					case 3: __0x11691 = __0x11690 + "Roughness.png"; break;
					case 4: __0x11691 = __0x11690 + "Normal.png"; break;
					}

					var __0x11692 = Path.Combine( Path.GetDirectoryName( __0x11757 ), __0x11691 );

					
					var __0x11693 = __0x11682.Resolution.Value;

					PixelFormat __0x11694 = PixelFormat.A8R8G8B8;

					__0x11688 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
					__0x11688.CreateType = Component_Image.TypeEnum._2D;
					__0x11688.CreateSize = __0x11693;
					__0x11688.CreateMipmaps = false;
					__0x11688.CreateFormat = __0x11694;
					__0x11688.CreateUsage = Component_Image.Usages.RenderTarget;
					__0x11688.CreateFSAA = 0;
					__0x11688.Enabled = true;

					var __0x11695 = __0x11688.Result.GetRenderTarget( 0, 0 );
					var __0x11696 = __0x11695.AddViewport( true, true );
					__0x11696.AttachedScene = __0x11683;

					__0x11689 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
					__0x11689.CreateType = Component_Image.TypeEnum._2D;
					__0x11689.CreateSize = __0x11693;
					__0x11689.CreateMipmaps = false;
					__0x11689.CreateFormat = __0x11694;
					__0x11689.CreateUsage = Component_Image.Usages.ReadBack | Component_Image.Usages.BlitDestination;
					__0x11689.CreateFSAA = 0;
					__0x11689.Enabled = true;
					
					__0x11689.Result.PrepareNativeObject();


					var __0x11697 = __0x11683.RenderingPipeline;

					var __0x11698 = ComponentUtility.CreateComponent<Component_RenderingPipeline_Default>( null, true, true );
					switch( __0x11686 )
					{
					case 0: __0x11698.DebugMode = Component_RenderingPipeline_Basic.DebugModeEnum.Normal; break;
					case 1: __0x11698.DebugMode = Component_RenderingPipeline_Basic.DebugModeEnum.BaseColor; break;
					case 2: __0x11698.DebugMode = Component_RenderingPipeline_Basic.DebugModeEnum.Metallic; break;
					case 3: __0x11698.DebugMode = Component_RenderingPipeline_Basic.DebugModeEnum.Roughness; break;
					case 4: __0x11698.DebugMode = Component_RenderingPipeline_Basic.DebugModeEnum.Normal; break;
					}

					try
					{
						__0x11683.RenderingPipeline = __0x11698;
						__0x11683.GetDisplayDevelopmentDataInThisApplicationOverride += __0x11737;

						var __0x11699 = new Viewport.CameraSettingsClass( __0x11696, __0x11756 );

						__0x11696.Update( true, __0x11699 );

						
						__0x11696.RenderingContext.MultiRenderTarget_DestroyAll();
						__0x11696.RenderingContext.DynamicTexture_DestroyAll();
					}
					finally
					{
						__0x11683.RenderingPipeline = __0x11697;
						__0x11683.GetDisplayDevelopmentDataInThisApplicationOverride -= __0x11737;
					}

					__0x11688.Result.GetRealObject( true ).BlitTo( __0x11696.RenderingContext.CurrentViewNumber, __0x11689.Result.GetRealObject( true ), 0, 0 );


					

					
					var __0x11700 = PixelFormatUtility.GetNumElemBytes( __0x11694 ) * __0x11693.X * __0x11693.Y;
					var __0x11701 = new byte[ __0x11700 ];
					unsafe
					{
						fixed( byte* __0x11702 = __0x11701 )
						{
							var __0x11703 = __0x11689.Result.GetRealObject( true ).Read( (IntPtr)__0x11702, 0 );
							while( RenderingSystem.CallBgfxFrame() < __0x11703 ) { }
						}
					}

					var __0x11704 = new ImageUtility.Image2D( __0x11694, __0x11693, __0x11701 );

					if( __0x11687 == MaterialChannel.Opacity )
					{
						
						for( int __0x11705 = 0; __0x11705 < __0x11704.Size.Y; __0x11705++ )
						{
							for( int __0x11706 = 0; __0x11706 < __0x11704.Size.X; __0x11706++ )
							{
								var __0x11707 = __0x11704.GetPixel( new Vector2I( __0x11706, __0x11705 ) );

								if( __0x11707.ToVector3F() != Vector3F.Zero )
									__0x11707 = Vector4F.One;
								else
									__0x11707 = Vector4F.Zero;

								__0x11704.SetPixel( new Vector2I( __0x11706, __0x11705 ), __0x11707 );
							}
						}

						
						if( __0x11682.FillTransparentPixelsByNearPixels )
						{
							var __0x11708 = new bool[ __0x11704.Size.X, __0x11704.Size.Y ];
							for( int __0x11709 = 0; __0x11709 < __0x11704.Size.Y; __0x11709++ )
							{
								for( int __0x11710 = 0; __0x11710 < __0x11704.Size.X; __0x11710++ )
								{
									var __0x11711 = __0x11704.GetPixelByte( new Vector2I( __0x11710, __0x11709 ) );
									__0x11708[ __0x11710, __0x11709 ] = __0x11711.Red == 0;
								}
							}

							var __0x11712 = __0x11740( __0x11704 );

							__0x11685 = new Vector2I[ __0x11704.Size.X, __0x11704.Size.Y ];
							for( int __0x11713 = 0; __0x11713 < __0x11704.Size.Y; __0x11713++ )
								for( int __0x11714 = 0; __0x11714 < __0x11704.Size.X; __0x11714++ )
									__0x11685[ __0x11714, __0x11713 ] = new Vector2I( __0x11714, __0x11713 );

							var __0x11715 = __0x11685;

							

							Parallel.For( 0, __0x11704.Size.Y, delegate ( int __0x11758 )
							{
								for( int __0x11716 = 0; __0x11716 < __0x11704.Size.X; __0x11716++ )
								{
									var __0x11717 = __0x11708[ __0x11716, __0x11758 ];
									if( __0x11717 )
									{
										for( int __0x11718 = 0; __0x11718 < __0x11712.Length; __0x11718++ )
										{
											ref var __0x11719 = ref __0x11712[ __0x11718 ];

											var __0x11720 = new Vector2I( __0x11716, __0x11758 ) + __0x11719.offset;
											if( __0x11720.X >= 0 && __0x11720.X < __0x11704.Size.X && __0x11720.Y >= 0 && __0x11720.Y < __0x11704.Size.Y )
											{
												var __0x11721 = __0x11708[ __0x11720.X, __0x11720.Y ];
												if( !__0x11721 )
												{
													__0x11715[ __0x11716, __0x11758 ] = __0x11720;
													break;
												}
											}
										}
									}
								}
							} );
						}

					}

					if( __0x11687 == MaterialChannel.BaseColor || __0x11687 == MaterialChannel.Metallic || __0x11687 == MaterialChannel.Roughness || __0x11687 == MaterialChannel.Normal )
					{
						
						for( int __0x11722 = 0; __0x11722 < __0x11704.Size.Y; __0x11722++ )
						{
							for( int __0x11723 = 0; __0x11723 < __0x11704.Size.X; __0x11723++ )
							{
								var __0x11724 = __0x11704.GetPixel( new Vector2I( __0x11723, __0x11722 ) );
								__0x11724.W = 1.0f;
								__0x11704.SetPixel( new Vector2I( __0x11723, __0x11722 ), __0x11724 );
							}
						}
					}

					
					var __0x11725 = false;
					if( __0x11687 == MaterialChannel.Metallic )
					{
						var __0x11726 = true;

						for( int __0x11727 = 0; __0x11727 < __0x11704.Size.Y; __0x11727++ )
						{
							for( int __0x11728 = 0; __0x11728 < __0x11704.Size.X; __0x11728++ )
							{
								var __0x11729 = __0x11704.GetPixel( new Vector2I( __0x11728, __0x11727 ) );
								if( __0x11729 != new Vector4F( 0, 0, 0, 1 ) )
								{
									__0x11726 = false;
									break;
								}
							}
						}

						if( __0x11726 )
							__0x11725 = true;
					}

					if( !__0x11725 )
					{
						if( __0x11687 == MaterialChannel.BaseColor || __0x11687 == MaterialChannel.Metallic || __0x11687 == MaterialChannel.Roughness || __0x11687 == MaterialChannel.Normal )
						{
							
							if( __0x11685 != null )
								__0x11741( ref __0x11704, __0x11685 );

						}

						if( !Directory.Exists( Path.GetDirectoryName( __0x11692 ) ) )
							Directory.CreateDirectory( Path.GetDirectoryName( __0x11692 ) );

						if( !ImageUtility.Save( __0x11692, __0x11704.Data, __0x11704.Size, 1, __0x11704.Format, 1, 0, out var error ) )
							throw new Exception( error );

						__0x11684[ __0x11686 ] = VirtualPathUtility.GetVirtualPathByReal( __0x11692 );
					}

				}
				catch( Exception e )
				{
					EditorMessageBox.ShowWarning( e.Message );
					return;
				}
				finally
				{
					__0x11688?.Dispose();
					__0x11689?.Dispose();
				}
			}

			
			try
			{
				var __0x11730 = ComponentUtility.CreateComponent<Component_Material>( null, true, false );

				
				__0x11730.OpacityMaskThreshold = 0.75;

				
				foreach( var __0x11734 in __0x11683.GetComponents<Component_MeshInSpace>( onlyEnabledInHierarchy: true ) )
				{
					var __0x11731 = __0x11734.ReplaceMaterial.Value;
					if( __0x11731 != null )
					{
						if( __0x11731.ShadingModel.Value == Component_Material.ShadingModelEnum.Subsurface )
						{
							__0x11730.ShadingModel = Component_Material.ShadingModelEnum.Subsurface;
							__0x11730.SubsurfacePower = __0x11731.SubsurfacePower;
							__0x11730.SubsurfaceColor = __0x11731.SubsurfaceColor;

							break;
						}
					}
				}

				var __0x11732 = new __0x11759();
				__0x11732.OpacityTexture = __0x11684[ 0 ];
				__0x11732.BaseColorTexture = __0x11684[ 1 ];
				__0x11732.MetallicTexture = __0x11684[ 2 ];
				__0x11732.RoughnessTexture = __0x11684[ 3 ];
				__0x11732.NormalTexture = __0x11684[ 4 ];

				__0x11739( __0x11730, __0x11732, out var graph );

				var __0x11733 = new Component[] { __0x11730, graph };
				__0x11730.EditorDocumentConfiguration = KryptonConfigGenerator.CreateEditorDocumentXmlConfiguration( __0x11733, graph );

				__0x11730.Enabled = true;


				if( !ComponentUtility.SaveComponentToFile( __0x11730, __0x11757, null, out var error ) )
					throw new Exception( error );

				__0x11730.Dispose();

			}
			catch( Exception e )
			{
				EditorMessageBox.ShowWarning( e.Message );
				return;
			}

			ScreenNotifications.Show( "Rendering completed successfully." );
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Scene_DocumentWindow : DocumentWindowWithViewport
	{
		[EngineConfig( "Scene Editor", "CreateObjectsMode" )]
		public static CreateObjectsModeEnum CreateObjectsMode = CreateObjectsModeEnum.Drop;
		[EngineConfig( "Scene Editor", "CreateObjectsBrushRadius" )]
		public static double CreateObjectsBrushRadius = 1;
		[EngineConfig( "Scene Editor", "CreateObjectsBrushStrength" )]
		public static double CreateObjectsBrushStrength = 0.5;
		[EngineConfig( "Scene Editor", "CreateObjectsBrushHardness" )]
		public static double CreateObjectsBrushHardness = 0.5;

		[EngineConfig( "Terrain Editor", "TerrainToolShape" )]
		public static TerrainEditorToolShape TerrainToolShape = TerrainEditorToolShape.Circle;
		[EngineConfig( "Terrain Editor", "TerrainToolRadius" )]
		public static double TerrainToolRadius = 3;
		[EngineConfig( "Terrain Editor", "TerrainToolStrength" )]
		public static double TerrainToolStrength = 0.5;
		[EngineConfig( "Terrain Editor", "TerrainToolHardness" )]
		public static double TerrainToolHardness = 0.5;


		
		bool __0x11761;
		bool __0x11762;
		Vector2 __0x11763;
		Vector2 __0x11764;

		
		TransformTool __0x11765;
		bool __0x11766;
		bool __0x11767;
		Vector2 __0x11768;
		TransformTool.ModeEnum __0x11769 = TransformTool.ModeEnum.PositionRotation;

		
		List<(CreateObjectsDestinationModeEnum Mode, Component Obj, string Text)> __0x11770 = new List<(CreateObjectsDestinationModeEnum, Component, string)>();
		double __0x11771;
		(CreateObjectsDestinationModeEnum Mode, Component Obj) __0x11772;

		
		List<(Component_PaintLayer Obj, string Text)> __0x11773 = new List<(Component_PaintLayer, string)>();
		double __0x11774;
		Component_PaintLayer __0x11775;

		
		bool __0x11776;
		bool __0x11777;
		bool __0x11778;
		Metadata.TypeInfo __0x11779;
		Component __0x11780;
		object __0x11781;
		Metadata.Property __0x11782;
		object[] __0x11783;
		IReference __0x11784;
		Component __0x11785;

		bool __0x11786;
		bool __0x11787;
		float __0x11788;
		Component_GroupOfObjects __0x11789;
		List<int> __0x11790 = new List<int>();
		List<Component_GroupOfObjects.Object> __0x11791 = new List<Component_GroupOfObjects.Object>();
		List<Component> __0x11792 = new List<Component>();
		List<(Component obj, bool wasEnabled)> __0x11793 = new List<(Component obj, bool wasEnabled)>();

		bool __0x11794;

		EngineToolTip __0x11795 = new EngineToolTip();
		Component __0x11796;
		string __0x11797 = "";

		public static List<Type> CanvasWidgetsToCreate { get; } = new List<Type>();
		public List<CanvasWidget> CanvasWidgets { get; } = new List<CanvasWidget>();

		

		public enum CreateObjectsModeEnum
		{
			Drop,
			Click,
			Brush
		}

		

		enum CreateObjectsDestinationModeEnum
		{
			Auto,
			Root,
			Component,
		}

		

		public abstract class WorkareaModeClass_Scene : WorkareaModeClass
		{
			protected WorkareaModeClass_Scene( Component_Scene_DocumentWindow documentWindow )
				: base( documentWindow )
			{
			}

			public new Component_Scene_DocumentWindow DocumentWindow
			{
				get { return (Component_Scene_DocumentWindow)base.DocumentWindow; }
			}

			protected virtual bool OnGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect ) { return false; }
			public delegate void GetObjectsToSelectByRectangleDelegate( WorkareaModeClass __0x12434, Rectangle __0x12435, ref bool __0x12436, ref List<object> __0x12437 );
			public event GetObjectsToSelectByRectangleDelegate GetObjectsToSelectByRectangle;
			internal bool PerformGetObjectsToSelectByRectangle( Rectangle rectangle, ref List<object> objectsToSelect )
			{
				var __0x11798 = OnGetObjectsToSelectByRectangle( rectangle, ref objectsToSelect );
				if( !__0x11798 )
					GetObjectsToSelectByRectangle?.Invoke( this, rectangle, ref __0x11798, ref objectsToSelect );
				return __0x11798;
			}

			protected virtual bool OnGetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context ) { return false; }
			public delegate void GetMouseOverObjectToSelectByClickDelegate( WorkareaModeClass __0x12438, GetMouseOverObjectToSelectByClickContext __0x12439 );
			public event GetMouseOverObjectToSelectByClickDelegate GetMouseOverObjectToSelectByClick;
			internal bool PerformGetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
			{
				var __0x11799 = OnGetMouseOverObjectToSelectByClick( context );
				if( !__0x11799 )
					GetMouseOverObjectToSelectByClick?.Invoke( this, context );
				return __0x11799;
			}

			protected virtual bool OnTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject ) { return false; }
			public delegate void TransformToolCreateObjectDelegate( WorkareaModeClass __0x12440, object __0x12441, ref bool __0x12442, ref TransformToolObject __0x12443 );
			public event TransformToolCreateObjectDelegate TransformToolCreateObject;
			internal bool PerformTransformToolCreateObject( object forObject, ref TransformToolObject transformToolObject )
			{
				var __0x11800 = OnTransformToolCreateObject( forObject, ref transformToolObject );
				if( !__0x11800 )
					TransformToolCreateObject?.Invoke( this, forObject, ref __0x11800, ref transformToolObject );
				return __0x11800;
			}

			protected virtual bool OnTransformToolModifyBegin() { return false; }
			public delegate void TransformToolModifyBeginDelegate( WorkareaModeClass __0x12444, ref bool __0x12445 );
			public event TransformToolModifyBeginDelegate TransformToolModifyBegin;
			internal bool PerformTransformToolModifyBegin()
			{
				var __0x11801 = OnTransformToolModifyBegin();
				if( !__0x11801 )
					TransformToolModifyBegin?.Invoke( this, ref __0x11801 );
				return __0x11801;
			}

			protected virtual bool OnTransformToolModifyCommit() { return false; }
			public delegate void TransformToolModifyCommitDelegate( WorkareaModeClass __0x12446, ref bool __0x12447 );
			public event TransformToolModifyCommitDelegate TransformToolModifyCommit;
			internal bool PerformTransformToolModifyCommit()
			{
				var __0x11802 = OnTransformToolModifyCommit();
				if( !__0x11802 )
					TransformToolModifyCommit?.Invoke( this, ref __0x11802 );
				return __0x11802;
			}

			protected virtual bool OnTransformToolModifyCancel() { return false; }
			public delegate void TransformToolModifyCancelDelegate( WorkareaModeClass __0x12448, ref bool __0x12449 );
			public event TransformToolModifyCancelDelegate TransformToolModifyCancel;
			internal bool PerformTransformToolModifyCancel()
			{
				var __0x11803 = OnTransformToolModifyCancel();
				if( !__0x11803 )
					TransformToolModifyCancel?.Invoke( this, ref __0x11803 );
				return __0x11803;
			}

			protected virtual bool OnTransformToolCloneAndSelectObjects() { return false; }
			public delegate void TransformToolCloneAndSelectObjectsDelegate( WorkareaModeClass __0x12450, ref bool __0x12451 );
			public event TransformToolCloneAndSelectObjectsDelegate TransformToolCloneAndSelectObjects;
			internal bool PerformTransformToolCloneAndSelectObjects()
			{
				var __0x11804 = OnTransformToolCloneAndSelectObjects();
				if( !__0x11804 )
					TransformToolCloneAndSelectObjects?.Invoke( this, ref __0x11804 );
				return __0x11804;
			}
		}

		

		public abstract class CanvasWidget
		{
			Component_Scene_DocumentWindow __0x11805;

			

			protected CanvasWidget( Component_Scene_DocumentWindow window )
			{
				this.__0x11805 = window;
			}

			public Component_Scene_DocumentWindow Window
			{
				get { return __0x11805; }
			}

			public abstract void OnUpdate( Component_Scene_DocumentWindow window, ref double screenPositionY );
		}

		

		public class GetMouseOverObjectToSelectByClickContext
		{
			public bool CheckOnlyObjectsWithEnabledSelectionByCursorFlag = true;

			public object ResultObject;
			public Vector3? ResultPosition;
			public Viewport.LastFrameScreenLabelItem ScreenLabelItem;
		}

		

		static Component_Scene_DocumentWindow()
		{
			EngineConfig.RegisterClassParameters( typeof( Component_Scene_DocumentWindow ) );
		}

		public Component_Scene_DocumentWindow()
		{
			__0x12433();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			var __0x11806 = ObjectOfWindow as Component_Scene;
			if( __0x11806 != null )
			{
				Scene = __0x11806;
				SceneNeedDispose = false;

				__0x11806.ViewportUpdateGetCameraSettings += Scene_ViewportUpdateGetCameraSettings;
			}
			else
				Log.Fatal( "scene == null" );

			__0x11765 = new TransformTool( ViewportControl );
			__0x11765.Mode = TransformTool.ModeEnum.PositionRotation;

			__0x11765.ModifyBegin += TransformToolModifyBegin;
			__0x11765.ModifyCommit += TransformToolModifyCommit;
			__0x11765.ModifyCancel += TransformToolModifyCancel;
			__0x11765.CloneAndSelectObjects += TransformToolCloneAndSelectObjects;

			ViewportControl.MouseEnter += __0x12415;
			ViewportControl.MouseLeave += __0x12417;

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );

			Scene.RenderEvent += __0x12390;
		}

		protected override void OnDestroy()
		{
			if( Scene != null )
				Scene.RenderEvent -= __0x12390;

			if( __0x11765 != null )
			{
				__0x11765.ModifyBegin -= TransformToolModifyBegin;
				__0x11765.ModifyCommit -= TransformToolModifyCommit;
				__0x11765.ModifyCancel -= TransformToolModifyCancel;
				__0x11765.CloneAndSelectObjects -= TransformToolCloneAndSelectObjects;
			}

			__0x11795?.Dispose();

			base.OnDestroy();
		}

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );

			
			

			foreach( var __0x12330 in CanvasWidgetsToCreate )
			{
				try
				{
					var __0x11807 = (CanvasWidget)__0x12330.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this } );
					CanvasWidgets.Add( __0x11807 );
				}
				catch { }
			}
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;

			
			__0x11765.PerformKeyDown( e, ref handled );
			if( handled )
				return;

			
			if( e.Key == EKeys.Escape )
			{
				if( __0x11786 )
				{
					__0x12421( true );
					handled = true;
					return;
				}
			}

			
			if( ( e.Key == EKeys.Space || e.Key == EKeys.Escape ) )
			{
				if( ( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) ) || ( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) ) )
				{
					if( CreateObjectsMode == CreateObjectsModeEnum.Click )
						__0x12416();
					if( CreateObjectsMode == CreateObjectsModeEnum.Brush )
						__0x12419();
					EditorAPI.ResetSelectedObjectToCreate();
					handled = true;
					return;
				}

				
				
				
			}
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );

			__0x11765.PerformKeyUp( e, ref handled );
		}

		public bool StartObjectCreationMode( Metadata.TypeInfo type, Component obj )
		{
			var __0x11808 = type.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
			if( __0x11808.Length != 0 )
			{
				
				var __0x11809 = (ObjectCreationMode)__0x11808[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, obj } );
				ObjectCreationModeSet( __0x11809 );
				__0x11779 = null;
				__0x11780 = null;
				__0x11777 = false;
				return true;
			}

			return false;
		}

		public delegate void ViewportMouseDownAfterTransformToolDelegate( Component_Scene_DocumentWindow __0x12452, Viewport __0x12453, EMouseButtons __0x12454, ref bool __0x12455 );
		public static event ViewportMouseDownAfterTransformToolDelegate Viewport_MouseDown_AfterTransformTool;

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			
			if( viewport.UIContainer != null && viewport.UIContainer.PerformMouseDown( button ) )
			{
				handled = true;
				return;
			}


			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			
			__0x11765.PerformMouseDown( button, ref handled );
			if( handled )
				return;

			
			{
				bool __0x11810 = false;
				Viewport_MouseDown_AfterTransformTool?.Invoke( this, viewport, button, ref __0x11810 );
				if( __0x11810 )
				{
					handled = true;
					return;
				}
			}

			
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && button == EMouseButtons.Left && __0x11777 && __0x11780 != null )
			{
				
				
				
				
				
				
				{
					var __0x11811 = __0x11779.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
					if( __0x11811.Length != 0 )
					{
						
						var __0x11812 = (ObjectCreationMode)__0x11811[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, __0x11780 } );
						ObjectCreationModeSet( __0x11812 );
						__0x11779 = null;
						__0x11780 = null;
						__0x11777 = false;
						handled = true;
						return;
					}
				}

				
				if( __0x12410() )
					__0x12405();
				else
					__0x12407();
				__0x11777 = false;

				
				if( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick )
				{
					if( __0x12414() )
						__0x11777 = true;
				}

				handled = true;
				return;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x12420( viewport ) )
				{
					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Left && AllowSelectObjects )
			{
				__0x11761 = true;
				__0x11762 = false;
				__0x11763 = viewport.MousePosition;
				__0x11764 = __0x11763;

				handled = true;
				return;
			}

			
			handled = true;
		}

		public delegate void Viewport_MouseUp_AfterTransformToolDelegate( Component_Scene_DocumentWindow __0x12456, Viewport __0x12457, EMouseButtons __0x12458, ref bool __0x12459, ref bool __0x12460 );
		public static event Viewport_MouseUp_AfterTransformToolDelegate Viewport_MouseUp_AfterTransformTool;

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			
			base.Viewport_MouseUp( viewport, button, ref handled );
			
			if( handled )
				return;

			
			
			
			

			
			__0x11765.PerformMouseUp( button, ref handled );

			Viewport_MouseUp_AfterTransformTool?.Invoke( this, viewport, button, ref handled, ref __0x11794 );

			
			if( AllowSelectObjects && __0x11780 == null && !__0x11776 && !__0x11777 && !__0x11778 && !__0x11794 && !handled )
			{
				var __0x11813 = new ESet<object>( SelectedObjectsSet );

				
				if( button == EMouseButtons.Left )
				{
					
					bool __0x11814 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x11814 )
						__0x11813.Clear();

					if( __0x11761 && __0x11762 )
					{
						foreach( var __0x12331 in __0x12391() )
							__0x11813.AddWithCheckAlreadyContained( __0x12331 );
						handled = true;
					}

					
					
					
				}

				
				if( button == EMouseButtons.Left && !handled && !CameraRotating )
				{
					var __0x11815 = GetMouseOverObjectToSelectByClick();
					if( __0x11815 != null )
					{
						__0x11813.AddWithCheckAlreadyContained( __0x11815 );
						handled = true;
					}
				}

				
				SelectObjects( __0x11813 );
			}

			if( button == EMouseButtons.Left && __0x11761 )
			{
				__0x11761 = false;
				__0x11762 = false;
			}

			
			
			if( button == EMouseButtons.Left )
			{
				if( __0x12421( false ) )
					handled = true;
			}

			
			if( !handled && button == EMouseButtons.Right )
				__0x12396();

			if( button == EMouseButtons.Left )
				__0x11794 = false;
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;

			__0x11765.PerformMouseDoubleClick( button, ref handled );
			if( handled )
				return;

			
			
			if( button == EMouseButtons.Left && AllowSelectObjects && __0x11780 == null && !__0x11776 && !__0x11777 && !__0x11778 )
			{
				var __0x11816 = new ESet<object>( SelectedObjectsSet );

				var __0x11817 = GetMouseOverObjectToSelectByClick();
				if( __0x11817 != null && IsObjectSelected( __0x11817 ) )
				{
					var __0x11818 = SelectByDoubleClick( __0x11817 );
					if( __0x11818.Length != 0 )
					{
						if( !ModifierKeys.HasFlag( Keys.Shift ) )
						{
							__0x11816.Clear();
							__0x11816.Add( __0x11817 );
						}
						__0x11816.AddRangeWithCheckAlreadyContained( __0x11818 );

						
						SelectObjects( __0x11816 );

						handled = true;
						__0x11794 = true;
					}
				}
			}
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			__0x11767 = true;
			__0x11768 = mouse;

			
			if( __0x11761 && AllowSelectObjects )
			{
				Vector2 __0x11819 = ( viewport.MousePosition - __0x11763 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x11819.X ) >= 3 || Math.Abs( __0x11819.Y ) >= 3 )
					__0x11762 = true;

				__0x11764 = viewport.MousePosition;
			}

			
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && __0x11777 )
			{
				
				
				

				__0x12406();
				
				

				__0x12408( null );
				
				

			}
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );

			__0x12426();
			__0x12428();
			__0x12429();

			__0x12393();
			__0x12411();

			if( __0x11767 )
			{
				__0x11765.PerformMouseMove( __0x11768 );
				__0x11767 = false;
			}
			__0x11765.PerformTick( delta );

			__0x12423( viewport, delta );

			__0x12431();

			
			
			
			
			
			
			
			
			
			
			
			
			
			

			
		}

		public void GetMouseOverObjectInSpaceToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x11820 = ViewportControl.Viewport;
			var __0x11821 = __0x11820.MousePosition;

			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11821 ) )
				return;
			if( __0x11820.MouseRelativeMode )
				return;

			
			foreach( var __0x12332 in __0x11820.LastFrameScreenLabels.GetReverse() )
			{
				var __0x11822 = __0x12332.Object;
				var __0x11823 = __0x11822 as Component_ObjectInSpace;

				if( __0x11823 != null && ( !context.CheckOnlyObjectsWithEnabledSelectionByCursorFlag || __0x11823.EnabledSelectionByCursor ) || __0x11823 == null || __0x12332.AlwaysVisible )
				{
					bool __0x11824 = false;

					switch( __0x12332.Shape )
					{
					case Viewport.LastFrameScreenLabelItem.ShapeEnum.Ellipse:
						__0x11824 = MathAlgorithms.CheckPointInsideEllipse( __0x12332.ScreenRectangle, __0x11821 );
						break;
					case Viewport.LastFrameScreenLabelItem.ShapeEnum.Rectangle:
						__0x11824 = __0x12332.ScreenRectangle.Contains( __0x11821 );
						break;
					}

					if( __0x11824 )
					{
						context.ResultObject = __0x11822;
						context.ScreenLabelItem = __0x12332;
						return;
					}

				}
			}

			
			Component_ObjectInSpace.CheckSelectionByRayContext __0x11825 = new Component_ObjectInSpace.CheckSelectionByRayContext();
			__0x11825.viewport = __0x11820;
			__0x11825.screenPosition = __0x11821;
			__0x11825.ray = __0x11820.CameraSettings.GetRayByScreenCoordinates( __0x11825.screenPosition );

			var __0x11826 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x11825.ray );
			Scene.GetObjectsInSpace( __0x11826 );
			var __0x11827 = __0x11826.Result;

			Component_ObjectInSpace __0x11828 = null;
			double __0x11829 = 0;

			
			double __0x11830 = __0x11825.ray.Direction.Length() / 100;

			foreach( var __0x12333 in __0x11827 )
			{
				var __0x11831 = __0x12333.Object;
				

				if( !context.CheckOnlyObjectsWithEnabledSelectionByCursorFlag || __0x11831.EnabledSelectionByCursor )
				
				{
					
					
					{
					}

					
					__0x11825.thisObjectWasChecked = false;
					__0x11825.thisObjectResultRayScale = -10000000;

					__0x11831.CheckSelectionByRay( __0x11825 );

					if( __0x11825.thisObjectWasChecked && __0x11825.thisObjectResultRayScale >= 0 )
					{
						var __0x11832 = __0x11825.thisObjectResultRayScale;

						
						
						
						
						
						
						
						
						
						

						bool __0x11833;
						if( __0x11828 == null )
							__0x11833 = true;
						else
						{
							if( Math.Abs( __0x11829 - __0x11832 ) < __0x11830 )
							{
								var __0x11834 = __0x11828;
								var __0x11835 = __0x11831;
								bool __0x11836 = __0x11834.GetAllParents( false ).Contains( __0x11835 );
								__0x11833 = __0x11836;
							}
							else
								__0x11833 = __0x11832 < __0x11829;
						}

						if( __0x11833 )
						{
							__0x11828 = __0x11831;
							__0x11829 = __0x11832;
						}
					}
				}
			}

			context.ResultObject = __0x11828;
			context.ResultPosition = __0x11825.ray.GetPointOnRay( __0x11829 );
		}

		public virtual void GetMouseOverObjectToSelectByClick( GetMouseOverObjectToSelectByClickContext context )
		{
			var __0x11837 = ViewportControl.Viewport;
			var __0x11838 = __0x11837.MousePosition;

			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11838 ) )
				return;
			if( __0x11837.MouseRelativeMode )
				return;

			if( WorkareaMode != null && WorkareaMode.PerformGetMouseOverObjectToSelectByClick( context ) )
				return;
			GetMouseOverObjectInSpaceToSelectByClick( context );
		}

		public object GetMouseOverObjectToSelectByClick( out GetMouseOverObjectToSelectByClickContext context )
		{
			context = new GetMouseOverObjectToSelectByClickContext();
			GetMouseOverObjectToSelectByClick( context );
			return context.ResultObject;
		}

		public object GetMouseOverObjectToSelectByClick()
		{
			GetMouseOverObjectToSelectByClick( out var context );
			return context.ResultObject;
		}

		void __0x12389( Viewport __0x12461, ref double __0x12462 )
		{
			var __0x11839 = __0x12461.RenderingContext;
			var __0x11840 = __0x11839.objectInSpaceRenderingContext;

			var __0x11841 = ProjectSettings.Get;
			var __0x11842 = __0x11841.ScreenLabelMaxSize.Value;
			Vector2 __0x11843 = new Vector2( __0x11842, __0x11842 );
			Vector2 __0x11844 = __0x11843 / __0x12461.SizeInPixels.ToVector2();


			var __0x11845 = new List<Component>();

			{
				Component_Camera __0x11846 = Scene.Mode.Value == Component_Scene.ModeEnum._3D ? Scene.CameraEditor : Scene.CameraEditor2D;

				
				foreach( var __0x12334 in Scene.GetComponents( checkChildren: true, depthFirstSearch: true ) )
				{
					var __0x11847 = __0x12334.ScreenLabel.Value;
					if( __0x11847 != ScreenLabelEnum.NeverDisplay )
					{
						var __0x11848 = __0x12334.GetScreenLabelInfo();

						
						if( __0x11846 != null && __0x12334 == __0x11846 )
							__0x11848.DisplayInCorner = true;

						if( __0x11847 == ScreenLabelEnum.AlwaysDisplay )
							__0x11848.DisplayInCorner = true;

						if( __0x11848.DisplayInCorner )
							__0x11845.Add( __0x12334 );
					}
				}
			}

			

			for( int __0x11849 = __0x11845.Count - 1; __0x11849 >= 0; __0x11849-- )
			{
				var __0x11850 = __0x11845[ __0x11849 ];

				

				

				ColorValue __0x11851;
				if( __0x11840.selectedObjects.Contains( __0x11850 ) )
					__0x11851 = ProjectSettings.Get.SelectedColor;
				else if( __0x11840.canSelectObjects.Contains( __0x11850 ) )
					__0x11851 = ProjectSettings.Get.CanSelectColor;
				else
					__0x11851 = ProjectSettings.Get.ScreenLabelColor;

				var __0x11852 = new Viewport.LastFrameScreenLabelItem();
				__0x11852.Object = __0x11850;
				__0x11852.DistanceToCamera = -1;
				
				__0x11852.Color = __0x11851;
				if( !__0x11850.EnabledInHierarchy )
					__0x11852.Color.Alpha *= 0.5f;

				__0x11852.AlwaysVisible = true;
				__0x12461.LastFrameScreenLabels.AddLast( __0x11852 );
				__0x12461.LastFrameScreenLabelByObjectInSpace[ __0x11850 ] = __0x11852;

				
			}

			if( __0x11845.Count != 0 )
				__0x12462 = __0x11844.Y * 1.25;
		}

		private void __0x12390( Component_Scene __0x12463, Viewport __0x12464 )
		{
			double __0x11853 = 0;

			
			if( Scene.GetDisplayDevelopmentDataInThisApplication() && Scene.DisplayLabels && __0x12464.AllowRenderScreenLabels && __0x12464.CanvasRenderer != null )
				__0x12389( __0x12464, ref __0x11853 );

			foreach( var __0x12335 in CanvasWidgets )
				__0x12335.OnUpdate( this, ref __0x11853 );
		}

		protected override void Viewport_UpdateGetObjectInSceneRenderingContext( Viewport viewport, ref Component_ObjectInSpace.RenderingContext context )
		{
			base.Viewport_UpdateGetObjectInSceneRenderingContext( viewport, ref context );

			

			context = new Component_ObjectInSpace.RenderingContext( viewport );

			if( !__0x11776 && !__0x11777 && !__0x11778 && ObjectCreationMode == null )
			{
				
				if( DisplaySelectedObjects )
				{
					foreach( var __0x12336 in SelectedObjectsSet )
						context.selectedObjects.AddWithCheckAlreadyContained( __0x12336 );
				}

				
				if( AllowSelectObjects )
				{
					foreach( var __0x12337 in __0x12391() )
					{
						if( !context.selectedObjects.Contains( __0x12337 ) )
							context.canSelectObjects.AddWithCheckAlreadyContained( __0x12337 );
					}
				}

				
				

				
				{
					bool __0x11854 = false;
					if( __0x11762 )
						__0x11854 = true;
					if( __0x11765 != null && __0x11765.IsMouseOverAxisToActivation() )
						__0x11854 = true;
					if( CameraRotating )
						__0x11854 = true;
					if( __0x11776 || __0x11777 || __0x11778 )
						__0x11854 = true;
					if( !AllowSelectObjects )
						__0x11854 = true;

					

					if( !__0x11854 )
					{
						var __0x11855 = GetMouseOverObjectToSelectByClick();
						if( __0x11855 != null )
						{
							if( !context.selectedObjects.Contains( __0x11855 ) )
								context.canSelectObjects.AddWithCheckAlreadyContained( __0x11855 );
						}
					}
				}
			}
			else
			{
				

				if( __0x11785 != null )
					context.canSelectObjects.Add( __0x11785 );

				if( ObjectCreationMode != null )
					context.objectToCreate = ObjectCreationMode.CreatingObject;
				else
					context.objectToCreate = __0x11780;
			}

			
			if( __0x11776 && __0x11780 != null && __0x11780 is Component_LensFlares )
			{
				var __0x11856 = GetMouseOverObjectToSelectByClick() as Component;

				if( __0x11856 != null && __0x11856 is Component_Light )
					context.canSelectObjects.AddWithCheckAlreadyContained( __0x11856 );
			}

		}

		public delegate void Viewport_UpdateBeforeOutputEventDelegate( Component_Scene_DocumentWindow __0x12465, Viewport __0x12466 );
		public static event Viewport_UpdateBeforeOutputEventDelegate Viewport_UpdateBeforeOutputEvent;

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			var __0x11857 = viewport.CanvasRenderer;

			
			viewport.UIContainer.PerformRenderUI( __0x11857 );

			
			if( __0x11761 && __0x11762 && AllowSelectObjects )
			{
				Rectangle __0x11858 = new Rectangle( __0x11763 );
				__0x11858.Add( viewport.MousePosition );

				Vector2I __0x11859 = viewport.SizeInPixels;
				Vector2 __0x11860 = new Vector2( 1.0f / (float)__0x11859.X, 1.0f / (float)__0x11859.Y );

				__0x11857.AddRectangle( __0x11858 + __0x11860, new ColorValue( 0, 0, 0, .5f ) );
				__0x11857.AddRectangle( __0x11858, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			

			if( !__0x11762 )
				__0x11765.PerformRender();

			__0x12425( viewport );

			Viewport_UpdateBeforeOutputEvent?.Invoke( this, viewport );
		}

		protected override void Viewport_UpdateBeforeOutput2( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput2( viewport );

			if( !__0x11762 )
				__0x11765.PerformOnRenderUI();
		}

		public Rectangle SelectByRectangle_GetRectangle()
		{
			Rectangle __0x11861 = new Rectangle( __0x11763 );
			__0x11861.Add( __0x11764 );
			return __0x11861;
		}

		ESet<object> __0x12391()
		{
			var __0x11862 = new ESet<object>();
			if( __0x11762 )
			{
				foreach( var __0x12338 in GetObjectsToSelectByRectangle( SelectByRectangle_GetRectangle() ) )
					__0x11862.Add( __0x12338 );
			}
			return __0x11862;
		}

		public List<object> GetObjectsInSpaceToSelectByRectangle( Rectangle rectangle )
		{
			var __0x11863 = new ESet<Component>();

			
			foreach( var __0x12339 in ViewportControl.Viewport.LastFrameScreenLabels.GetReverse() )
			{
				var __0x11864 = __0x12339.Object;
				var __0x11865 = __0x12339.Object as Component_ObjectInSpace;
				if( __0x11865 != null && __0x11865.EnabledSelectionByCursor || __0x11865 == null || __0x12339.AlwaysVisible )
				{
					if( rectangle.Contains( __0x12339.ScreenRectangle.GetCenter() ) )
						__0x11863.AddWithCheckAlreadyContained( __0x11864 );
				}
			}

			foreach( var __0x12340 in Scene.GetComponents( false, true, true ) )
			{
				var __0x11866 = __0x12340 as Component_ObjectInSpace;
				if( __0x11866 != null && __0x11866.EnabledSelectionByCursor )
				{
					var __0x11867 = __0x11866.Transform.Value;
					var __0x11868 = __0x11867.Position;

					if( ViewportControl.Viewport.CameraSettings.ProjectToScreenCoordinates( __0x11868, out Vector2 screenPosition ) )
					{
						if( rectangle.Contains( screenPosition ) )
							__0x11863.AddWithCheckAlreadyContained( __0x11866 );
					}
				}
			}

			
			
			

			var __0x11869 = new List<object>();
			foreach( var __0x12341 in __0x11863 )
			{
				bool __0x11870 = false;
				foreach( var __0x12342 in __0x12341.GetAllParents( true ) )
				{
					if( !IsObjectSelected( __0x12342 ) )
					{
						var __0x11871 = __0x12342 as Component_ObjectInSpace;
						if( __0x11871 != null && __0x11863.Contains( __0x11871 ) )
						{
							__0x11870 = true;
							break;
						}
					}
				}

				if( !__0x11870 )
					__0x11869.Add( __0x12341 );
			}

			return __0x11869;

			
			
			
		}

		protected virtual List<object> GetObjectsToSelectByRectangle( Rectangle rectangle )
		{
			var __0x11872 = new List<object>();
			if( WorkareaMode != null && WorkareaMode.PerformGetObjectsToSelectByRectangle( rectangle, ref __0x11872 ) )
				return __0x11872;
			return GetObjectsInSpaceToSelectByRectangle( rectangle );
		}

		TransformToolObject __0x12392( object __0x12467 )
		{
			foreach( var __0x12343 in __0x11765.Objects )
				if( ReferenceEquals( __0x12343.ControlledObject, __0x12467 ) )
					return __0x12343;
			return null;
		}

		void __0x12393()
		{
			var __0x11873 = new ESet<object>();
			foreach( var __0x12344 in __0x11765.Objects )
				__0x11873.AddWithCheckAlreadyContained( __0x12344.ControlledObject );

			
			foreach( var __0x12345 in __0x11873 )
			{
				bool __0x11874 = false;

				
				
				var __0x11875 = __0x12345 as Component_ObjectInSpace;
				if( __0x11875 != null && ( __0x11875.Parent == null || __0x11875.Disposed ) )
					__0x11874 = true;

				
				if( !SelectedObjectsSet.Contains( __0x12345 ) || __0x11874 )
				{
					var __0x11876 = __0x12392( __0x12345 );
					if( __0x11876 != null )
						__0x11765.Objects.Remove( __0x11876 );
				}
			}

			
			foreach( var __0x12346 in SelectedObjectsSet )
			{
				var __0x11877 = __0x12392( __0x12346 );
				if( __0x11877 == null )
				{
					__0x11877 = TransformToolCreateObject( __0x12346 );
					if( __0x11877 != null )
						__0x11765.Objects.Add( __0x11877 );
				}
			}
		}

		protected virtual void TransformToolModifyBegin( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyBegin() )
				return;
		}

		protected virtual void TransformToolModifyCommit( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyCommit() )
				return;

			if( !__0x11766 )
			{
				

				var __0x11878 = new List<UndoActionPropertiesChange.Item>();

				foreach( var __0x12347 in __0x11765.Objects )
				{
					var __0x11879 = __0x12347 as TransformToolObject_ObjectInSpace;
					if( __0x11879 != null )
					{
						var __0x11880 = __0x11879.ObjectToTransform;
						if( __0x11880 != null )
						{
							var __0x11881 = __0x11880.MetadataGetMemberBySignature( "property:Transform" ) as Metadata.Property;
							if( __0x11881 != null )
							{
								var __0x11882 = new UndoActionPropertiesChange.Item( __0x11880, __0x11881, __0x11879.BeforeModifyTransform, null );
								__0x11878.Add( __0x11882 );
							}
						}
					}
				}

				
				if( __0x11878.Count != 0 )
				{
					var __0x11883 = new UndoActionPropertiesChange( __0x11878.ToArray() );
					Document.UndoSystem.CommitAction( __0x11883 );
					Document.Modified = true;
				}
			}
			else
			{
				var __0x11884 = new List<Component>();
				foreach( var __0x12348 in __0x11765.Objects )
				{
					var __0x11885 = __0x12348 as TransformToolObject_ObjectInSpace;
					if( __0x11885 != null )
						__0x11884.Add( __0x11885.SelectedObject );
				}

				
				var __0x11886 = new UndoActionComponentCreateDelete( Document, __0x11884, true );
				Document.UndoSystem.CommitAction( __0x11886 );
				Document.Modified = true;

				
				SelectObjects( SelectedObjects, forceUpdate: true );
			}

			__0x11766 = false;
		}

		protected virtual void TransformToolModifyCancel( TransformTool sender )
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolModifyCancel() )
				return;

			if( __0x11766 )
			{
				ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();

				

				var __0x11887 = new List<Component>();
				foreach( var __0x12349 in __0x11765.Objects )
				{
					var __0x11888 = __0x12349 as TransformToolObject_ObjectInSpace;
					if( __0x11888 != null )
						__0x11887.Add( __0x11888.SelectedObject );
				}

				
				SelectObjects( null );

				
				foreach( var __0x12350 in __0x11887 )
					__0x12350.RemoveFromParent( true );

				Scene.HierarchyController?.ProcessDelayedOperations();
				ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();
			}

			__0x11766 = false;
		}

		protected virtual void TransformToolCloneAndSelectObjects()
		{
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolCloneAndSelectObjects() )
				return;

			ContentBrowserUtility.AllContentBrowsers_SuspendChildrenChangedEvent();

			var __0x11889 = new List<Component>();
			foreach( var __0x12351 in __0x11765.Objects )
			{
				var __0x11890 = __0x12351 as TransformToolObject_ObjectInSpace;
				if( __0x11890 != null )
					__0x11889.Add( __0x11890.SelectedObject );
			}

			
			__0x11889 = ComponentUtility.GetComponentsWithoutChildren( __0x11889 );

			var __0x11891 = new List<Component>();
			foreach( var __0x12352 in __0x11889 )
			{
				var __0x11892 = EditorUtility.CloneComponent( __0x12352 );
				__0x11891.Add( __0x11892 );
				AddClonedSelectableChildrenToList( __0x11891, __0x11892 );
			}

			Scene.HierarchyController?.ProcessDelayedOperations();
			ContentBrowserUtility.AllContentBrowsers_ResumeChildrenChangedEvent();

			
			SelectObjects( __0x11891.Cast<object>().ToArray(), updateSettingsWindowSelectObjects: false );

			
			EditorUtility.ShowScreenNotificationObjectsCloned( __0x11891.Count );

			__0x11766 = true;

			__0x12393();
			__0x11765.PerformUpdateInitialObjectsTransform();
		}

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			switch( context.Action.Name )
			{

			case "Select":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.Mode == TransformTool.ModeEnum.None;
				break;

			case "Move & Rotate":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.Mode == TransformTool.ModeEnum.PositionRotation;
				break;

			case "Move":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.Mode == TransformTool.ModeEnum.Position;
				break;

			case "Rotate":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.Mode == TransformTool.ModeEnum.Rotation;
				break;

			case "Scale":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.Mode == TransformTool.ModeEnum.Scale;
				break;

			case "Transform Using Local Coordinates":
				context.Enabled = true;
				context.Checked = __0x11765 != null && __0x11765.CoordinateSystemMode == TransformTool.CoordinateSystemModeEnum.Local;
				break;

			

			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
			case "Snap Z":
				if( CanSnap( out _ ) )
					context.Enabled = true;
				break;

			case "Focus Camera On Selected Object":
				if( CanFocusCameraOnSelectedObject( out _ ) )
					context.Enabled = true;
				break;

			case "Create Objects By Drag & Drop":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Drop;
				break;

			case "Create Objects By Click":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Click;
				break;

			case "Create Objects By Brush":
				context.Enabled = true;
				context.Checked = CreateObjectsMode == CreateObjectsModeEnum.Brush;
				break;

			case "Create Objects Brush Radius":
			case "Create Objects Brush Strength":
			case "Create Objects Brush Hardness":
				context.Enabled = CreateObjectsMode == CreateObjectsModeEnum.Brush;
				break;

			case "Create Objects Destination":
				{
					if( __0x11770.Count != 0 )
					{
						
						context.Enabled = true;

						
						var __0x11893 = new List<(string, Image)>();
						foreach( var __0x12353 in __0x11770 )
							__0x11893.Add( (__0x12353.Text, null) );
						context.Action.ListBox.Items = __0x11893;

						
						var __0x11894 = __0x11770.FindIndex( __0x12468 => __0x12468.Mode == __0x11772.Mode && __0x12468.Obj == __0x11772.Obj );
						if( __0x11894 == -1 )
							__0x11894 = 0;
						context.Action.ListBox.SelectIndex = __0x11894;
					}
				}
				break;

			case "Terrain Geometry Raise":
			case "Terrain Geometry Lower":
			case "Terrain Geometry Smooth":
			case "Terrain Geometry Flatten":
				context.Enabled = true;
				context.Checked = WorkareaModeName == context.Action.Name;
				break;

			case "Terrain Shape Circle":
				context.Enabled = true;
				context.Checked = TerrainToolShape == TerrainEditorToolShape.Circle;
				break;

			case "Terrain Shape Square":
				context.Enabled = true;
				context.Checked = TerrainToolShape == TerrainEditorToolShape.Square;
				break;

			case "Terrain Tool Radius":
			case "Terrain Tool Strength":
			case "Terrain Tool Hardness":
				context.Enabled = true;
				break;

			case "Terrain Paint Paint":
			case "Terrain Paint Clear":
			case "Terrain Paint Smooth":
			case "Terrain Paint Flatten":
				context.Enabled = true;
				context.Checked = WorkareaModeName == context.Action.Name;
				break;

			case "Terrain Paint Layers":
				{
					if( __0x11773.Count != 0 )
						context.Enabled = true;

					
					var __0x11895 = new List<(string, Image)>();
					foreach( var __0x12354 in __0x11773 )
						__0x11895.Add( (__0x12354.Text, PreviewImagesManager.GetImageForPaintLayer( __0x12354.Obj )) );
					context.Action.ListBox.Items = __0x11895;

					
					var __0x11896 = __0x11773.FindIndex( __0x12469 => __0x12469.Obj == __0x11775 );
					if( __0x11896 == -1 )
						__0x11896 = 0;
					context.Action.ListBox.SelectIndex = __0x11896;
				}
				break;

			case "Terrain Paint Add Layer":
				context.Enabled = true;
				break;
			}
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			switch( context.Action.Name )
			{
			case "Select":
				if( __0x11765 != null )
				{
					if( __0x11765.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11765.Mode = TransformTool.ModeEnum.None;
				}
				break;

			case "Move & Rotate":
				if( __0x11765 != null )
				{
					if( __0x11765.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11765.Mode = TransformTool.ModeEnum.PositionRotation;
				}
				break;

			case "Move":
				if( __0x11765 != null )
				{
					if( __0x11765.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11765.Mode = TransformTool.ModeEnum.Position;
				}
				break;

			case "Rotate":
				if( __0x11765 != null )
				{
					if( __0x11765.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11765.Mode = TransformTool.ModeEnum.Rotation;
				}
				break;

			case "Scale":
				if( __0x11765 != null )
				{
					if( __0x11765.Mode == TransformTool.ModeEnum.Undefined )
						WorkareaModeSet( "" );
					__0x11765.Mode = TransformTool.ModeEnum.Scale;
				}
				break;

			case "Transform Using Local Coordinates":
				if( __0x11765 != null )
					__0x11765.CoordinateSystemMode = __0x11765.CoordinateSystemMode == TransformTool.CoordinateSystemModeEnum.Local ? TransformTool.CoordinateSystemModeEnum.World : TransformTool.CoordinateSystemModeEnum.Local;
				break;

			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
			case "Snap Z":
				Snap( context.Action );
				break;

			case "Focus Camera On Selected Object":
				if( CanFocusCameraOnSelectedObject( out var objects ) )
					FocusCameraOnSelectedObject( objects );
				break;

			case "Create Objects By Drag & Drop":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Drop );
				break;

			case "Create Objects By Click":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Click );
				break;

			case "Create Objects By Brush":
				ChangeCreateObjectsMode( CreateObjectsModeEnum.Brush );
				break;

			case "Create Objects Brush Radius":
				CreateObjectsBrushRadius = context.Action.Slider.Value;
				break;

			case "Create Objects Brush Strength":
				CreateObjectsBrushStrength = context.Action.Slider.Value;
				break;

			case "Create Objects Brush Hardness":
				CreateObjectsBrushHardness = context.Action.Slider.Value;
				break;

			case "Create Objects Destination":
				if( context.Action.ListBox.LastSelectedIndexChangedByUser )
				{
					var __0x11897 = context.Action.ListBox.SelectedIndex;
					if( __0x11897 >= 0 && __0x11897 < __0x11770.Count )
					{
						var __0x11898 = __0x11770[ __0x11897 ];
						__0x11772 = (__0x11898.Mode, __0x11898.Obj);
					}
					else
						__0x11772 = (CreateObjectsDestinationModeEnum.Auto, null);
				}
				break;

			case "Terrain Geometry Raise":
			case "Terrain Geometry Lower":
			case "Terrain Geometry Smooth":
			case "Terrain Geometry Flatten":
				if( WorkareaModeName != context.Action.Name )
				{
					var __0x11899 = context.Action.Name.Substring( "Terrain".Length ).Replace( " ", "" );
					var __0x11900 = (TerrainEditorMode)Enum.Parse( typeof( TerrainEditorMode ), __0x11899 );

					var __0x11901 = MetadataManager.GetType( "NeoAxis.Editor.Component_Terrain_EditingMode" );
					if( __0x11901 != null )
						WorkareaModeSet( context.Action.Name, (WorkareaModeClass)__0x11901.InvokeInstance( new object[] { this, __0x11900, null } ) );
					

					if( __0x11765.Mode != TransformTool.ModeEnum.Undefined )
						__0x11769 = __0x11765.Mode;
					__0x11765.Mode = TransformTool.ModeEnum.Undefined;
				}
				else
				{
					WorkareaModeSet( "" );
					__0x11765.Mode = __0x11769;
					
				}
				break;

			case "Terrain Shape Circle":
				TerrainToolShape = TerrainEditorToolShape.Circle;
				break;

			case "Terrain Shape Square":
				TerrainToolShape = TerrainEditorToolShape.Square;
				break;

			case "Terrain Tool Radius":
				TerrainToolRadius = context.Action.Slider.Value;
				break;

			case "Terrain Tool Strength":
				TerrainToolStrength = context.Action.Slider.Value;
				break;

			case "Terrain Tool Hardness":
				TerrainToolHardness = context.Action.Slider.Value;
				break;

			case "Terrain Paint Paint":
			case "Terrain Paint Clear":
			case "Terrain Paint Smooth":
			case "Terrain Paint Flatten":
				if( WorkareaModeName != context.Action.Name )
				{
					var __0x11902 = context.Action.Name.Substring( "Terrain".Length ).Replace( " ", "" );
					var __0x11903 = (TerrainEditorMode)Enum.Parse( typeof( TerrainEditorMode ), __0x11902 );

					var __0x11904 = MetadataManager.GetType( "NeoAxis.Editor.Component_Terrain_EditingMode" );
					if( __0x11904 != null )
						WorkareaModeSet( context.Action.Name, (WorkareaModeClass)__0x11904.InvokeInstance( new object[] { this, __0x11903, null } ) );
					

					if( __0x11765.Mode != TransformTool.ModeEnum.Undefined )
						__0x11769 = __0x11765.Mode;
					__0x11765.Mode = TransformTool.ModeEnum.Undefined;
				}
				else
				{
					WorkareaModeSet( "" );
					__0x11765.Mode = __0x11769;
					
				}
				break;

			
			
			
			
			
			
			
			
			
			

			case "Terrain Paint Add Layer":
				{
					var __0x11905 = EditorForm.Instance.WorkspaceController.SelectedDocumentWindow?.ObjectOfWindow as Component_Scene;

					var __0x11906 = (Component)__0x11905?.GetComponent<IComponent_Terrain>( true );

					
					
					if( __0x11906 != null )
					{
						var __0x11907 = new List<Component>();

						
						{
							var __0x11908 = __0x11906.CreateComponent<Component_PaintLayer>( enabled: false );
							__0x11908.Name = EditorUtility.GetUniqueFriendlyName( __0x11908 );
							__0x11908.Enabled = true;

							__0x11907.Add( __0x11908 );
						}

						Focus();

						
						var __0x11909 = new UndoActionComponentCreateDelete( Document, __0x11907, true );
						Document.CommitUndoAction( __0x11909 );
						SelectObjects( __0x11907.ToArray() );
					}
				}
				break;
			}
		}

		
		private void __0x12394( object __0x12470, KeyEventArgs __0x12471 )
		{
			
			
			
		}

		string __0x12395( string __0x12472 )
		{
			return EditorContextMenuWinForms.Translate( __0x12472 );
		}

		void __0x12396()
		{
			var __0x11910 = new List<KryptonContextMenuItemBase>();

			Component __0x11911 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x11911 = SelectedObjects[ 0 ] as Component;
			}

			
			if( __0x11765 != null )
			{
				EditorContextMenuWinForms.AddTransformToolToMenu( __0x11910, __0x11765 );
				__0x11910.Add( new KryptonContextMenuSeparator() );
			}

			Vector2 __0x11912 = new Vector2( .5, .5 );
			if( ViewportControl != null && ViewportControl.Viewport != null )
				__0x11912 = ViewportControl.Viewport.MousePosition;

			
			{
				var __0x11913 = new KryptonContextMenuItem( __0x12395( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x12473, EventArgs __0x12474 )
				 {
					 EditorAPI.OpenDocumentWindowForObject( Document, __0x11911 );
				 } );
				__0x11913.Enabled = __0x11911 != null && EditorAPI.IsDocumentObjectSupport( __0x11911 );
				__0x11910.Add( __0x11913 );
			}

			
			{
				var __0x11914 = new KryptonContextMenuItem( __0x12395( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12475, EventArgs __0x12476 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x11910.Add( __0x11914 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x11915 = new KryptonContextMenuItem( __0x12395( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x12477, EventArgs __0x12478 )
				{
					var __0x11916 = __0x11911 ?? ObjectOfWindow;
					bool __0x11917 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x11916, __0x11917 );
				} );
				__0x11915.Enabled = __0x11911 != null || SelectedObjects.Length == 0;
				__0x11910.Add( __0x11915 );
			}

			__0x11910.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x11910, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x12479 )
				{
					TryNewObject( __0x11912, __0x12479 );
				} );

				
				

				
				
				
				
				
				
			}

			
			__0x11910.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x11918 = new KryptonContextMenuItem( __0x12395( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x12480, EventArgs __0x12481 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x11918.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x11918.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x11910.Add( __0x11918 );
			}

			
			{
				var __0x11919 = new KryptonContextMenuItem( __0x12395( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x12482, EventArgs __0x12483 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x11919.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x11919.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x11910.Add( __0x11919 );
			}

			
			{
				var __0x11920 = new KryptonContextMenuItem( __0x12395( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x12484, EventArgs __0x12485 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x11920.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x11920.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x11910.Add( __0x11920 );
			}

			
			{
				var __0x11921 = new KryptonContextMenuItem( __0x12395( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x12486, EventArgs __0x12487 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x11921.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x11921.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x11910.Add( __0x11921 );
			}

			
			{
				var __0x11922 = new KryptonContextMenuItem( __0x12395( "Export to File" ), null, delegate ( object __0x12488, EventArgs __0x12489 )
				{
					EditorUtility.ExportComponentToFile( __0x11911 );
				} );
				__0x11922.Enabled = __0x11911 != null;
				__0x11910.Add( __0x11922 );
			}

			
			__0x11910.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x11923 = new KryptonContextMenuItem( __0x12395( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x12490, EventArgs __0x12491 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x11923.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x11910.Add( __0x11923 );
			}

			
			{
				var __0x11924 = new KryptonContextMenuItem( __0x12395( "Rename" ), null, delegate ( object __0x12492, EventArgs __0x12493 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x11924.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x11924.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x11910.Add( __0x11924 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x11910 );

			EditorContextMenuWinForms.Show( __0x11910, this );
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x12355 in SelectedObjects )
			{
				var __0x11925 = __0x12355 as Component;
				if( __0x11925 != null )
					parentsForNewObjects.Add( __0x11925 );
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( Scene );
			return true;
		}

		public void TryNewObject( Vector2 mouse, Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out var parentsForNewObjects ) )
				return;

			
			

			

			var __0x11926 = new NewObjectWindow.CreationDataClass();
			__0x11926.initDocumentWindow = this;
			__0x11926.initParentObjects = new List<object>();
			__0x11926.initParentObjects.AddRange( parentsForNewObjects );

			
			__0x11926.beforeCreateObjectsFunction = delegate ( NewObjectWindow __0x12494, Metadata.TypeInfo __0x12495 )
			{
				if( __0x12494.creationData.initParentObjects.Count == 1 && __0x12494.creationData.initParentObjects[ 0 ] is Component_Scene )
				{
					Component __0x11927 = __0x12427() as Component_Layer;
					if( __0x11927 == null )
						__0x11927 = Scene;

					
					if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12495 ) )
					{
						var __0x11928 = __0x11927.CreateComponent<Component_MeshInSpace>( -1, false );

						
						__0x11928.Name = EditorUtility.GetUniqueFriendlyName( __0x11928, __0x12495.GetUserFriendlyNameForInstance() );
						
						
						
						
						

						__0x12494.creationData.createdObjects = new List<object>();
						__0x12494.creationData.createdObjects.Add( __0x11928 );
						__0x12494.creationData.createdComponentsOnTopLevel.Add( __0x11928 );

						var __0x11929 = __0x11928.CreateComponent<Component_Mesh>();
						__0x12494.creationData.createdObjects.Add( __0x11929 );
						__0x11929.Name = "Mesh";

						var __0x11930 = __0x11929.CreateComponent( __0x12495 );
						__0x12494.creationData.createdObjects.Add( __0x11930 );
						__0x11930.Name = "Mesh Geometry";

						__0x11928.Mesh = ReferenceUtility.MakeThisReference( __0x11928, __0x11929 );

						return true;
					}

					
					if( MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape ) ).IsAssignableFrom( __0x12495 ) )
					{
						var __0x11931 = __0x11927.CreateComponent<Component_RigidBody>( -1, false );

						
						var __0x11932 = __0x11931.BaseType.GetUserFriendlyNameForInstance();
						if( __0x11931.Parent.GetComponent( __0x11932 ) == null )
							__0x11931.Name = __0x11932;
						else
							__0x11931.Name = __0x11931.Parent.Components.GetUniqueName( __0x11932, false, 2 );

						__0x12494.creationData.createdObjects = new List<object>();
						__0x12494.creationData.createdObjects.Add( __0x11931 );
						__0x12494.creationData.createdComponentsOnTopLevel.Add( __0x11931 );

						var __0x11933 = __0x11931.CreateComponent( __0x12495 );
						__0x12494.creationData.createdObjects.Add( __0x11933 );
						__0x11933.Name = "Collision Shape";

						return true;
					}

					
					if( MetadataManager.GetTypeOfNetType( typeof( Component_RenderingEffect ) ).IsAssignableFrom( __0x12495 ) )
					{
						var __0x11934 = Scene.RenderingPipeline.Value;
						if( __0x11934 != null )
						{
							var __0x11935 = __0x11934.GetComponent( "Scene Effects" );
							if( __0x11935 != null )
							{
								var __0x11936 = EditorUtility.GetNewObjectInsertIndex( __0x11935, __0x12495 );
								var __0x11937 = __0x11935.CreateComponent( __0x12495, __0x11936, false );

								
								var __0x11938 = __0x11937.BaseType.GetUserFriendlyNameForInstance();
								if( __0x11935.GetComponent( __0x11938 ) == null )
									__0x11937.Name = __0x11938;
								else
									__0x11937.Name = __0x11935.Components.GetUniqueName( __0x11938, false, 2 );

								__0x12494.creationData.createdObjects = new List<object>();
								__0x12494.creationData.createdObjects.Add( __0x11937 );
								__0x12494.creationData.createdComponentsOnTopLevel.Add( __0x11937 );

								return true;
							}
						}
					}
				}

				return true;
			};

			
			__0x11926.additionActionAfterEnabled = delegate ( NewObjectWindow __0x12496 )
			
			{
				foreach( var __0x12356 in __0x11926.createdComponentsOnTopLevel )
				{
					if( __0x12356 is Component_ObjectInSpace objectInSpace )
					{
						var __0x11939 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( objectInSpace );
						if( __0x11939 == null )
							__0x11939 = objectInSpace;

						
						if( __0x11939.Transform.Value.Position == Vector3.Zero )
						{
							CalculateCreateObjectPosition( objectInSpace, __0x11939, mouse );
							
						}
					}
				}
			};

			__0x11926.initLockType = lockType;
			__0x11926.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x11926 );
		}

		public override bool TryDeleteObjects()
		{
			if( !base.TryDeleteObjects() )
				return false;

			__0x12393();

			return true;
		}

		private void __0x12397( object __0x12497, DragEventArgs __0x12498 )
		{
			

			if(  ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByDrop ) )
			{
				__0x11776 = true;
				__0x12404( __0x12498 );
			}
		}

		private void __0x12398( object __0x12499, DragEventArgs __0x12500 )
		{
			__0x12500.Effect = DragDropEffects.None;

			if(  ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByDrop ) && __0x11776 )
			{
				ViewportControl?.PerformMouseMove();

				
				
				

				__0x12406();
				if( __0x11780 != null )
					__0x12500.Effect = DragDropEffects.Link;

				__0x12408( __0x12500 );
				if( __0x11782 != null )
					__0x12500.Effect = DragDropEffects.Link;

				ViewportControl.TryRender();
			}
		}

		private void __0x12399( object __0x12501, EventArgs __0x12502 )
		{
			if(  __0x11776 )
			{
				__0x12405();
				__0x12409();
				__0x11776 = false;

				
				ViewportControl.TryRender();
			}
		}

		private void __0x12400( object __0x12503, DragEventArgs __0x12504 )
		{
			if(  __0x11776 )
			{
				
				if( __0x11780 != null )
				{
					var __0x11940 = __0x11779.GetNetType().GetCustomAttributes<ObjectCreationModeAttribute>().ToArray();
					if( __0x11940.Length != 0 )
					{
						
						var __0x11941 = (ObjectCreationMode)__0x11940[ 0 ].CreationModeClass.InvokeMember( "", BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.CreateInstance | BindingFlags.Instance, null, null, new object[] { this, __0x11780 } );
						ObjectCreationModeSet( __0x11941 );
						__0x11779 = null;
						__0x11780 = null;
						__0x11776 = false;
						EditorAPI.SelectDockWindow( this );
						return;
					}
				}

				if( __0x12410() )
					__0x12405();
				else
					__0x12407();
				__0x11776 = false;
			}
		}

		public delegate void CreateObjectWhatTypeWillCreatedEventDelegate( Metadata.TypeInfo __0x12505, string __0x12506, ref Metadata.TypeInfo __0x12507 );
		public static event CreateObjectWhatTypeWillCreatedEventDelegate CreateObjectWhatTypeWillCreatedEvent;

		Metadata.TypeInfo __0x12401( Metadata.TypeInfo __0x12508, string __0x12509 )
		{
			
			{
				Metadata.TypeInfo __0x11942 = null;
				CreateObjectWhatTypeWillCreatedEvent?.Invoke( __0x12508, __0x12509, ref __0x11942 );
				if( __0x11942 != null )
					return __0x11942;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12508 ) )
				return MetadataManager.GetTypeOfNetType( typeof( Component_MeshInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( __0x12508 ) )
				return MetadataManager.GetTypeOfNetType( typeof( Component_MeshInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_ParticleSystem ) ).IsAssignableFrom( __0x12508 ) )
				return MetadataManager.GetTypeOfNetType( typeof( Component_ParticleSystemInSpace ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape ) ).IsAssignableFrom( __0x12508 )  )
				return MetadataManager.GetTypeOfNetType( typeof( Component_RigidBody ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape2D ) ).IsAssignableFrom( __0x12508 ) )
				return MetadataManager.GetTypeOfNetType( typeof( Component_RigidBody2D ) );

			
			if( typeof( Component_Import3D ).IsAssignableFrom( __0x12508.GetNetType() ) )
			{
				var __0x11943 = __0x12508 as Metadata.ComponentTypeInfo;
				if( __0x11943 != null && __0x11943.BasedOnObject != null )
				{
					

					var __0x11944 = __0x11943.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
					if( __0x11944 != null )
						return MetadataManager.GetTypeOfNetType( typeof( Component_MeshInSpace ) );
					else
					{
						
						var __0x11945 = __0x11943.BasedOnObject.GetComponent( "Scene Objects" ) as Component_ObjectInSpace;
						if( __0x11945 != null && __0x11945.GetProvidedType() != null )
							return __0x11945.GetProvidedType();
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_RenderingEffect ) ).IsAssignableFrom( __0x12508 ) )
			{
				var __0x11946 = Scene.RenderingPipeline.Value;
				if( __0x11946 != null )
				{
					var __0x11947 = __0x11946.GetComponent( "Scene Effects" );
					if( __0x11947 != null )
						return __0x12508;
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_Sound ) ).IsAssignableFrom( __0x12508 ) )
				return MetadataManager.GetTypeOfNetType( typeof( Component_SoundSource ) );

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12508 ) )
				return __0x12508;

			return null;
		}

		public delegate void CreateObjectByCreationDataEventDelegate( Metadata.TypeInfo __0x12510, string __0x12511, object __0x12512, Component __0x12513, ref Component __0x12514 );
		public static event CreateObjectByCreationDataEventDelegate CreateObjectByCreationDataEvent;

		Component __0x12402( Metadata.TypeInfo __0x12515, string __0x12516, object __0x12517, string __0x12518 )
		{
			Component __0x11948 = __0x12427() as Component_Layer;
			if( __0x11948 == null )
				__0x11948 = Scene;

			

			Component __0x11949 = null;

			

			
			
			
			
			
			
			
			
			
			
			
			
			

			
			CreateObjectByCreationDataEvent?.Invoke( __0x12515, __0x12516, __0x12517, __0x11948, ref __0x11949 );

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11950 = __0x11948.CreateComponent<Component_MeshInSpace>( -1, false );
				__0x11949 = __0x11950;
				__0x11949.Name = EditorUtility.GetUniqueFriendlyName( __0x11949, __0x12515.GetUserFriendlyNameForInstance() );

				var __0x11951 = __0x11950.CreateComponent<Component_Mesh>();
				__0x11951.Name = "Mesh";
				var __0x11952 = __0x11951.CreateComponent( __0x12515 );
				__0x11952.Name = "Mesh Geometry";
				
				__0x11950.Mesh = new Reference<Component_Mesh>( null, ReferenceUtility.CalculateThisReference( __0x11950, __0x11951 ) );
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11953 = __0x11948.CreateComponent<Component_MeshInSpace>( -1, false );
				__0x11949 = __0x11953;

				
				__0x11953.Mesh = new Reference<Component_Mesh>( null, __0x12516 );
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_ParticleSystem ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11954 = __0x11948.CreateComponent<Component_ParticleSystemInSpace>( -1, false );
				__0x11949 = __0x11954;

				if( MetadataManager.GetTypeOfNetType( typeof( Component_ParticleSystem ) ) == __0x12515 && string.IsNullOrEmpty( __0x12516 ) )
				{
					var __0x11955 = __0x11954.CreateComponent<Component_ParticleSystem>();
					__0x11955.Name = "Particle System";
					__0x11955.NewObjectSetDefaultConfiguration();
					__0x11954.ParticleSystem = ReferenceUtility.MakeThisReference( __0x11954, __0x11955 );
				}
				else
					__0x11954.ParticleSystem = new Reference<Component_ParticleSystem>( null, __0x12516 );
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11956 = __0x11948.CreateComponent<Component_RigidBody>( -1, false );
				__0x11949 = __0x11956;

				var __0x11957 = __0x11956.CreateComponent( __0x12515 );
				__0x11957.Name = "Collision Shape";
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape2D ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11958 = __0x11948.CreateComponent<Component_RigidBody2D>( -1, false );
				__0x11949 = __0x11958;

				var __0x11959 = __0x11958.CreateComponent( __0x12515 );
				__0x11959.Name = "Collision Shape";
			}

			
			if( __0x11949 == null && typeof( Component_Import3D ).IsAssignableFrom( __0x12515.GetNetType() ) )
			{
				var __0x11960 = __0x12515 as Metadata.ComponentTypeInfo;
				if( __0x11960 != null && __0x11960.BasedOnObject != null )
				{
					

					var __0x11961 = __0x11960.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
					if( __0x11961 != null )
					{
						
						var __0x11962 = __0x11948.CreateComponent<Component_MeshInSpace>( -1, false );
						__0x11949 = __0x11962;
						__0x11949.Name = EditorUtility.GetUniqueFriendlyName( __0x11949, __0x12515.GetUserFriendlyNameForInstance() );
						__0x11962.Mesh = new Reference<Component_Mesh>( null, ReferenceUtility.CalculateResourceReference( __0x11961 ) );
					}
					else
					{
						
						var __0x11963 = __0x11960.BasedOnObject.GetComponent( "Scene Objects" ) as Component_ObjectInSpace;
						if( __0x11963 != null && __0x11963.GetProvidedType() != null )
						{
							var __0x11964 = __0x11948.CreateComponent( __0x11963.GetProvidedType(), -1, false );
							__0x11949 = __0x11964;
						}
					}

					
					
					
					

					
					
					
					
					
					
					
					

					
					
					
					
					
					
				}
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_RenderingEffect ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11965 = Scene.RenderingPipeline.Value;
				if( __0x11965 != null )
				{
					var __0x11966 = __0x11965.GetComponent( "Scene Effects" );
					if( __0x11966 != null )
					{
						var __0x11967 = EditorUtility.GetNewObjectInsertIndex( __0x11966, __0x12515 );
						var __0x11968 = __0x11966.CreateComponent( __0x12515, __0x11967, false );
						__0x11949 = __0x11968;
					}
				}
			}

			
			
			
			
			
			
			
			
			
			
			

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Sound ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11969 = __0x11948.CreateComponent<Component_SoundSource>( -1, false );
				__0x11949 = __0x11969;

				
				__0x11969.Sound = new Reference<Component_Sound>( null, __0x12516 );
			}

			
			if( __0x11949 == null && MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12515 ) )
			{
				var __0x11970 = __0x11948.CreateComponent( __0x12515, -1, false );
				__0x11949 = __0x11970;
			}

			if( __0x11949 != null )
			{
				
				if( string.IsNullOrEmpty( __0x11949.Name ) )
				{
					if( !string.IsNullOrEmpty( __0x12518 ) && __0x11949.Parent != null )
					{
						if( __0x11949.Parent.GetComponent( __0x12518 ) == null )
							__0x11949.Name = __0x12518;
						else
							__0x11949.Name = __0x11949.Parent.Components.GetUniqueName( __0x12518, true, 2 );
					}
					else
						__0x11949.Name = ComponentUtility.GetNewObjectUniqueName( __0x11949 );
				}

				
				__0x11949.NewObjectSetDefaultConfiguration();

				
				__0x11949.Enabled = true;
			}

			return __0x11949;
		}

		bool __0x12403( Metadata.TypeInfo __0x12519, string __0x12520, Component_ObjectInSpace __0x12521 )
		{
			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( __0x12519 ) )
			{
				var __0x11971 = __0x12521 as Component_MeshInSpace;
				if( __0x11971 != null )
				{
					var __0x11972 = __0x11971.GetComponent( "Mesh" ) as Component_Mesh;
					if( __0x11972 != null )
					{
						var __0x11973 = __0x11972.GetComponent( __0x12519 );
						if( __0x11973 != null && __0x11973.Name == "Mesh Geometry" )
							return true;
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( __0x12519 ) )
			{
				var __0x11974 = __0x12521 as Component_MeshInSpace;
				if( __0x11974 != null && __0x11974.Mesh.GetByReference == __0x12520 )
					return true;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_ParticleSystem ) ).IsAssignableFrom( __0x12519 ) )
			{
				var __0x11975 = __0x12521 as Component_ParticleSystemInSpace;
				if( __0x11975 != null && __0x11975.ParticleSystem.GetByReference == __0x12520 )
					return true;
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_CollisionShape ) ).IsAssignableFrom( __0x12519 )  )
			{
				var __0x11976 = __0x12521 as Component_RigidBody;
				if( __0x11976 != null )
				{
					var __0x11977 = __0x11976.GetComponent( __0x12519 );
					if( __0x11977 != null && __0x11977.Name == "Collision Shape" )
						return true;
				}
			}

			

			
			if( typeof( Component_Import3D ).IsAssignableFrom( __0x12519.GetNetType() ) )
			{
				var __0x11978 = __0x12521 as Component_MeshInSpace;
				if( __0x11978 != null )
				{
					var __0x11979 = __0x12519 as Metadata.ComponentTypeInfo;
					if( __0x11979 != null && __0x11979.BasedOnObject != null )
					{
						var __0x11980 = __0x11979.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
						if( __0x11980 != null )
						{
							if( __0x11978.Mesh.GetByReference == ReferenceUtility.CalculateResourceReference( __0x11980 ) )
								return true;
						}
						else
						{
							

							
							
							
							
							
							
							
						}
					}
				}
			}

			
			if( MetadataManager.GetTypeOfNetType( typeof( Component_Sound ) ).IsAssignableFrom( __0x12519 ) )
			{
				var __0x11981 = __0x12521 as Component_SoundSource;
				if( __0x11981 != null && __0x11981.Sound.GetByReference == __0x12520 )
					return true;
			}

			
			if( string.IsNullOrEmpty( __0x12520 ) && __0x12519.IsAssignableFrom( __0x12521.BaseType ) )
				return true;

			return false;
		}

		void __0x12404( DragEventArgs __0x12522 )
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetObjectToCreateByDropData( __0x12522 );
			if( objectType != null )
			{
				var __0x11982 = __0x12402( objectType, referenceToObject, anyData, objectName );
				if( __0x11982 != null )
				{
					__0x11779 = objectType;
					__0x11780 = __0x11982;
					__0x12406();
				}
			}
		}

		void __0x12405()
		{
			if( __0x11780 != null )
			{
				__0x11780.Dispose();
				__0x11779 = null;
				__0x11780 = null;
			}
		}

		public (bool found, Vector3 position, Component_ObjectInSpace collidedWith) CalculateCreateObjectPositionUnderCursor( Viewport viewport, Component_ObjectInSpace objectInSpace = null, Vector2? overrideMouse = null, Ray? overrideRay = null, bool allowSnap = true )
		{
			Vector2 __0x11983;
			if( overrideMouse.HasValue )
				__0x11983 = overrideMouse.Value;
			else
			{
				__0x11983 = viewport.MousePosition;
				if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x11983 ) )
					__0x11983 = new Vector2( 0.5, 0.5 );
			}

			Ray __0x11984;
			if( overrideRay.HasValue )
				__0x11984 = overrideRay.Value;
			else
				__0x11984 = viewport.CameraSettings.GetRayByScreenCoordinates( __0x11983 );
			
			

			var __0x11985 = allowSnap && ModifierKeys.HasFlag( Keys.Control );

			return Component_Scene_Utility.CalculateCreateObjectPositionByRay( Scene, objectInSpace, __0x11984, __0x11985 );
		}

		public void CalculateCreateObjectPosition( Component_ObjectInSpace objectInSpace, Component_ObjectInSpace objectToTransform, Vector2? mouse = null )
		{
			var __0x11986 = CalculateCreateObjectPositionUnderCursor( Viewport, objectInSpace, mouse );
			objectToTransform.Transform = new Transform( __0x11986.position, objectToTransform.Transform.Value.Rotation, objectToTransform.Transform.Value.Scale );
		}

		void __0x12406()
		{
			if( __0x11780 != null && __0x11780 is Component_ObjectInSpace objectInSpace )
			{
				var __0x11987 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( objectInSpace );
				if( __0x11987 == null )
					__0x11987 = objectInSpace;

				CalculateCreateObjectPosition( objectInSpace, __0x11987 );

				
				objectInSpace.NewObjectSetDefaultConfigurationUpdate();

				
				
				
				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
			}

			
			if( __0x11780 != null && __0x11780 is Component_LensFlares )
			{
				var __0x11988 = GetMouseOverObjectToSelectByClick() as Component;

				Component __0x11989 = Scene;
				if( __0x11988 != null && __0x11988 is Component_Light )
					__0x11989 = __0x11988;

				if( __0x11780.Parent != __0x11989 )
				{
					__0x11780.RemoveFromParent( false );
					__0x11989.AddComponent( __0x11780 );
				}
			}

			
			
			
			
			
			
			
			
		}

		void __0x12407()
		{
			if( __0x11780 != null )
			{
				var __0x11990 = __0x11780;

				
				var __0x11991 = new List<Component>();
				__0x11991.Add( __0x11780 );
				var __0x11992 = new UndoActionComponentCreateDelete( Document, __0x11991, true );
				Document.UndoSystem.CommitAction( __0x11992 );
				Document.Modified = true;

				__0x11779 = null;
				__0x11780 = null;

				
				if( CreateObjectsMode != CreateObjectsModeEnum.Click )
					
					EditorAPI.SelectComponentsInMainObjectsWindow( this, new Component[] { __0x11990 } );

				EditorAPI.SelectDockWindow( this );
			}
		}

		void __0x12408( DragEventArgs __0x12523 )
		{
			object __0x11993 = null;
			
			
			Metadata.Property __0x11994 = null;
			object[] __0x11995 = null;
			IReference __0x11996 = null;
			Component __0x11997 = null;

			ContentBrowser.Item __0x11998 = null;
			{
				if(  __0x12523 != null )
				{
					var __0x11999 = ContentBrowser.GetDroppingItemData( __0x12523.Data );
					if( __0x11999 != null )
						__0x11998 = __0x11999.Item;
				}
				if( CreateObjectsMode == CreateObjectsModeEnum.Click )
					__0x11998 = EditorAPI.CreateObjectGetSelectedContentBrowserItem();
			}

			
			
			if( __0x11998 != null )
			{
				

				
				var __0x12000 = GetMouseOverObjectToSelectByClick() as Component;
				

				if( __0x12000 != null )
				{
					Metadata.TypeInfo __0x12001 = null;
					string __0x12002 = "";
					char __0x12003 = '\\';

					
					var __0x12004 = __0x11998 as ContentBrowserItem_File;
					if( __0x12004 != null && !__0x12004.IsDirectory )
					{
						
						var __0x12005 = Path.GetExtension( __0x12004.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x12005 ) != null )
						{
							var __0x12006 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x12004.FullPath ) );

							var __0x12007 = __0x12006?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x12007 != null )
							{
								__0x12001 = __0x12007;
								__0x12002 = __0x12006.Name;
								__0x12003 = '|';
							}
						}
					}

					
					var __0x12008 = __0x11998 as ContentBrowserItem_Component;
					if( __0x12008 != null )
					{
						var __0x12009 = __0x12008.Component;

						if( Scene.ParentRoot == __0x12009.ParentRoot )
						{
							__0x12001 = MetadataManager.MetadataGetType( __0x12009 );
							if( __0x12001 != null )
							{
								ReferenceUtility.CalculateThisReference( __0x12000, __0x12009, "", out __0x12002, out __0x12003 );
								
							}
						}
						else
						{
							var __0x12010 = __0x12009.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x12010 != null )
							{
								__0x12001 = __0x12009.GetProvidedType();
								if( __0x12001 != null )
								{
									__0x12002 = __0x12001.Name;
									__0x12003 = '|';
								}
							}
						}

						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
						
					}

					
					var __0x12011 = __0x11998 as ContentBrowserItem_Member;
					if( __0x12011 != null )
					{
						var __0x12012 = __0x12011.Member;

						
						ContentBrowserUtility.CalculateReferenceValueForMemberItem( __0x12000, null, __0x12011, out __0x12002, out __0x12003 );

						if( __0x12012 is Metadata.Property )
						{
							
							var __0x12013 = (Metadata.Property)__0x12012;

							__0x12001 = __0x12013.TypeUnreferenced;
							
							
						}
						else if( __0x12012 is Metadata.Method )
						{
							
							var __0x12014 = (Metadata.Method)__0x12012;

							var __0x12015 = __0x12014.GetReturnParameters();
							if( __0x12014.Parameters.Length == 1 && __0x12015.Length == 1 )
							{
								__0x12001 = __0x12015[ 0 ].Type;
								
								
							}
						}
					}

					
					var __0x12016 = __0x11998 as StoresWindow.ContentBrowserItem_StoreItem;
					if( __0x12016 != null )
					{
						var (type, file) = __0x12016.GetFileToDrop( CreateObjectsMode == CreateObjectsModeEnum.Drop );

						switch( type )
						{
						case PackageManager.PackageInfo.FileTypeToDrop.Material:
							__0x12001 = MetadataManager.GetTypeOfNetType( typeof( Component_Material ) );
							__0x12002 = file;
							__0x12003 = '|';
							break;
						}
					}


					if( __0x12001 != null )
					{
						
						if( MetadataManager.GetTypeOfNetType( typeof( Component_Material ) ).IsAssignableFrom( __0x12001 ) )
						{
							
							var __0x12017 = __0x12000 as Component_MeshInSpace;
							if( __0x12017 != null )
							{
								__0x11993 = __0x12017;
								__0x11994 = (Metadata.Property)__0x12017.MetadataGetMemberBySignature( "property:ReplaceMaterial" );
								__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12002 );

								__0x11997 = null;
							}

							
							var __0x12018 = __0x12000 as Component_Billboard;
							if( __0x12018 != null )
							{
								__0x11993 = __0x12018;
								__0x11994 = (Metadata.Property)__0x12018.MetadataGetMemberBySignature( "property:Material" );
								__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12002 );

								__0x11997 = null;
							}

							
							var __0x12019 = __0x12000 as Component_Decal;
							if( __0x12019 != null )
							{
								__0x11993 = __0x12019;
								__0x11994 = (Metadata.Property)__0x12019.MetadataGetMemberBySignature( "property:Material" );
								__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12002 );

								__0x11997 = null;
							}
						}

						
						if( typeof( Component_Import3D ).IsAssignableFrom( __0x12001.GetNetType() ) )
						{
							
							bool __0x12020 = false;
							{
								var __0x12021 = __0x12001 as Metadata.ComponentTypeInfo;
								if( __0x12021 != null && __0x12021.BasedOnObject != null )
								{
									var __0x12022 = __0x12021.BasedOnObject.GetComponent( "Material" ) as Component_Material;
									if( __0x12022 != null )
										__0x12020 = true;
								}

							}

							if( __0x12020 )
							{
								var __0x12023 = __0x12002 + __0x12003.ToString() + "$Material";

								
								var __0x12024 = __0x12000 as Component_MeshInSpace;
								if( __0x12024 != null )
								{
									__0x11993 = __0x12024;
									__0x11994 = (Metadata.Property)__0x12024.MetadataGetMemberBySignature( "property:ReplaceMaterial" );
									__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12023 );

									__0x11997 = null;
								}

								
								var __0x12025 = __0x12000 as Component_Billboard;
								if( __0x12025 != null )
								{
									__0x11993 = __0x12025;
									__0x11994 = (Metadata.Property)__0x12025.MetadataGetMemberBySignature( "property:Material" );
									__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12023 );

									__0x11997 = null;
								}

								
								var __0x12026 = __0x12000 as Component_Decal;
								if( __0x12026 != null )
								{
									__0x11993 = __0x12026;
									__0x11994 = (Metadata.Property)__0x12026.MetadataGetMemberBySignature( "property:Material" );
									__0x11996 = ReferenceUtility.MakeReference( typeof( Component_Material ), null, __0x12023 );

									__0x11997 = null;
								}
							}
						}
					}
				}
			}

			if( __0x12523 != null )
			{
				var __0x12027 = (DragDropSetReferenceData)__0x12523.Data.GetData( typeof( DragDropSetReferenceData ) );
				if( __0x12027 != null )
				{
					
					if( __0x12027.document == Document )
					{
						var __0x12028 = __0x12027.property.TypeUnreferenced;

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x12028 ) )
						
						{
							
							var __0x12029 = GetMouseOverObjectToSelectByClick() as Component;
							

							if( __0x12029 != null && __0x12028.IsAssignableFrom( MetadataManager.MetadataGetType( __0x12029 ) ) )
							{
								

								var __0x12030 = ReferenceUtility.CalculateThisReference( __0x12027.controlledComponents[ 0 ], __0x12029 );

								__0x11993 = __0x12027.propertyOwners[ 0 ];
								__0x11994 = __0x12027.property;
								__0x11995 = __0x12027.indexers;
								__0x11996 = ReferenceUtility.MakeReference( __0x12028.GetNetType(), null, __0x12030 );

								__0x11997 = __0x12029;
							}
						}

						
						
						

						
						
						
						
						

						
						
						

						
						
						
					}
				}
			}

			
			if( __0x11781 != __0x11993 ||
				__0x11782 != __0x11994 ||
				__0x11785 != __0x11997 )
			{
				__0x12409();

				if( __0x11993 != null )
				{
					try
					{
						__0x11781 = __0x11993;
						__0x11782 = __0x11994;
						__0x11783 = __0x11995;
						__0x11784 = (IReference)__0x11782.GetValue( __0x11781, __0x11783 );

						__0x11782.SetValue( __0x11781, __0x11996, __0x11995 );

						__0x11785 = __0x11997;

					}
					catch( Exception e )
					{
						__0x11781 = null;
						__0x11782 = null;
						__0x11783 = null;
						__0x11784 = null;
						__0x11785 = null;

						Log.Warning( e.Message );
					}
				}
			}
		}

		void __0x12409()
		{
			if( __0x11781 != null )
			{
				try
				{
					__0x11782.SetValue( __0x11781, __0x11784, __0x11783 );
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}

				__0x11781 = null;
				__0x11782 = null;
				__0x11783 = null;
				__0x11784 = null;
				__0x11785 = null;
			}
		}

		bool __0x12410()
		{
			if( __0x11781 != null )
			{
				try
				{
					var __0x12031 = new List<UndoActionPropertiesChange.Item>();

					var __0x12032 = __0x11781;
					var __0x12033 = __0x11784;

					var __0x12034 = __0x11782.GetValue( __0x12032, __0x11783 );
					if( !__0x12034.Equals( __0x12033 ) )
						__0x12031.Add( new UndoActionPropertiesChange.Item( __0x12032, __0x11782, __0x12033, __0x11783 ) );

					if( __0x12031.Count != 0 )
					{
						var __0x12035 = new UndoActionPropertiesChange( __0x12031.ToArray() );
						Document.UndoSystem.CommitAction( __0x12035 );
						Document.Modified = true;
					}
				}
				catch( Exception e )
				{
					Log.Warning( e.Message );
				}

				__0x11781 = null;
				__0x11782 = null;
				__0x11783 = null;
				__0x11784 = null;
				__0x11785 = null;

				EditorAPI.SelectDockWindow( this );

				return true;
			}

			return false;
		}

		void __0x12411()
		{
			__0x11765.Active = !__0x11776 && !__0x11777 && !__0x11778 && ObjectCreationMode == null;
		}

		public bool CanSnap( out List<Component_ObjectInSpace> resultObjects )
		{
			resultObjects = new List<Component_ObjectInSpace>();
			foreach( var __0x12357 in __0x11765.Objects )
			{
				var __0x12036 = __0x12357 as TransformToolObject_ObjectInSpace;
				if( __0x12036 != null )
				{
					var __0x12037 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( __0x12036.SelectedObject );
					if( __0x12037 != null )
						resultObjects.Add( __0x12037 );
				}
			}
			return resultObjects.Count != 0;
		}

		public void Snap( EditorAction action )
		{
			if( !CanSnap( out var objects ) )
				return;

			var __0x12038 = (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( Component_ObjectInSpace ) ).MetadataGetMemberBySignature( "property:Transform" );
			var __0x12039 = ProjectSettings.Get.SceneEditorStepMovement.Value;

			var __0x12040 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x12358 in objects )
			{
				var __0x12041 = __0x12358.Transform;

				var __0x12042 = __0x12358.Transform.Value.Position;
				if( __0x12039 != 0 )
				{
					if( action.Name == "Snap All Axes" || action.Name == "Snap X" )
						__0x12042.X = ( (long)( __0x12042.X / __0x12039 + ( __0x12042.X > 0 ? 0.5 : -0.5 ) ) ) * __0x12039;
					if( action.Name == "Snap All Axes" || action.Name == "Snap Y" )
						__0x12042.Y = ( (long)( __0x12042.Y / __0x12039 + ( __0x12042.Y > 0 ? 0.5 : -0.5 ) ) ) * __0x12039;
					if( action.Name == "Snap All Axes" || action.Name == "Snap Z" )
						__0x12042.Z = ( (long)( __0x12042.Z / __0x12039 + ( __0x12042.Z > 0 ? 0.5 : -0.5 ) ) ) * __0x12039;
				}
				__0x12358.Transform = __0x12358.Transform.Value.UpdatePosition( __0x12042 );

				__0x12040.Add( new UndoActionPropertiesChange.Item( __0x12358, __0x12038, __0x12041, null ) );
			}

			if( __0x12040.Count != 0 )
			{
				var __0x12043 = new UndoActionPropertiesChange( __0x12040.ToArray() );
				Document.UndoSystem.CommitAction( __0x12043 );
				Document.Modified = true;
			}
		}

		static string __0x12412( string __0x12524 )
		{
			return EditorLocalization.Translate( "SceneDocumentWindow", __0x12524 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			
			if( Scene != null && Scene.GetDisplayDevelopmentDataInThisApplication() && Scene.DisplayTextInfo )
			{
				var __0x12044 = ViewportControl?.Viewport?.RenderingContext?.UpdateStatisticsPrevious;
				if( __0x12044 != null )
				{
					lines.Add( __0x12412( "FPS" ) + ": " + __0x12044.FPS.ToString( "F1" ) );
					lines.Add( __0x12412( "Triangles" ) + ": " + __0x12044.Triangles.ToString() );
					lines.Add( __0x12412( "Lines" ) + ": " + __0x12044.Lines.ToString() );
					lines.Add( __0x12412( "Draw calls" ) + ": " + __0x12044.DrawCalls.ToString() );
					lines.Add( __0x12412( "Render targets" ) + ": " + __0x12044.RenderTargets.ToString() );
					lines.Add( __0x12412( "Dynamic textures" ) + ": " + __0x12044.DynamicTextures.ToString() );
					lines.Add( __0x12412( "Lights" ) + ": " + __0x12044.Lights.ToString() );
					lines.Add( __0x12412( "Reflection probes" ) + ": " + __0x12044.ReflectionProbes.ToString() );
				}
			}
		}

		static Type __0x12413( Component __0x12525 )
		{
			var __0x12045 = __0x12525.GetType();
			if( __0x12045.GetCustomAttribute( typeof( WhenCreatingShowWarningIfItAlreadyExistsAttribute ), true ) != null )
			{
				var __0x12046 = new Stack<Type>();
				{
					var __0x12047 = __0x12045;
					while( __0x12047 != null )
					{
						__0x12046.Push( __0x12047 );
						__0x12047 = __0x12047.BaseType;
					}
				}

				while( __0x12046.Count != 0 )
				{
					var __0x12048 = __0x12046.Pop();
					if( __0x12048.GetCustomAttribute( typeof( WhenCreatingShowWarningIfItAlreadyExistsAttribute ), true ) != null )
						return __0x12048;
				}
			}

			return null;
		}

		protected override void GetTextInfoCenterBottomCorner( List<string> lines )
		{
			base.GetTextInfoCenterBottomCorner( lines );

			if( __0x11777 )
				lines.Add( __0x12412( "Creating objects by mouse clicking." ) );
			if( __0x11778 )
				lines.Add( __0x12412( "Creating objects by brush." ) );

			
			if( __0x11776 && __0x11780 != null )
			{
				try
				{
					var __0x12049 = __0x12413( __0x11780 );
					if( __0x12049 != null && Scene.GetComponents( __0x12049, checkChildren: true ).Length > 1 )
					{
						var __0x12050 = TypeUtility.GetUserFriendlyNameForInstanceOfType( __0x12049 );

						if( lines.Count != 0 )
							lines.Add( "" );
						lines.Add( $"Another {__0x12050} component already exists." );
					}
				}
				catch { }
			}

			__0x12430( lines );

			
			
			
			
			
			
			
			
			
			
			
			
			
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x12051 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x12051 != null )
			{
				var __0x12052 = new List<Component>();
				foreach( var __0x12359 in __0x12051.objects )
				{
					var __0x12053 = __0x12359 as Component;
					if( __0x12053 != null )
						__0x12052.Add( __0x12053 );
				}

				

				var __0x12054 = new List<Component>();
				Vector3 __0x12055 = Vector3.Zero;

				for( int __0x12056 = 0; __0x12056 < __0x12052.Count; __0x12056++ )
				{
					var __0x12057 = __0x12052[ __0x12056 ];

					var __0x12058 = __0x12057.Clone();
					if( destinationParent.GetComponent( __0x12057.Name ) == null )
						__0x12058.Name = __0x12057.Name;
					else
						__0x12058.Name = destinationParent.Components.GetUniqueName( __0x12057.Name, true, 2 );
					destinationParent.AddComponent( __0x12058 );

					
					if( destinationParent == Scene )
					{
						var __0x12059 = __0x12058 as Component_ObjectInSpace;
						if( __0x12059 != null )
						{
							var __0x12060 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( __0x12059 );
							if( __0x12060 == null )
								__0x12060 = __0x12059;

							if( __0x12056 == 0 )
							{
								CalculateCreateObjectPosition( __0x12059, __0x12060 );
								__0x12055 = __0x12060.Transform.Value.Position - ( (Component_ObjectInSpace)__0x12057 ).Transform.Value.Position;
							}
							else
							{
								var __0x12061 = __0x12059.Transform.Value;
								__0x12060.Transform = new Transform( __0x12061.Position + __0x12055, __0x12061.Rotation, __0x12061.Scale );
							}
						}
					}

					__0x12054.Add( __0x12058 );
				}

				if( __0x12051.cut )
				{
					
					if( __0x12051.documentWindow.Document != Document )
					{
						
						{
							var __0x12062 = new UndoActionComponentCreateDelete( __0x12051.documentWindow.Document, __0x12052, false );
							__0x12051.documentWindow.Document.UndoSystem.CommitAction( __0x12062 );
							__0x12051.documentWindow.Document.Modified = true;
						}
						{
							var __0x12063 = new UndoActionComponentCreateDelete( Document, __0x12054, true );
							Document.UndoSystem.CommitAction( __0x12063 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x12064 = new UndoMultiAction();
						__0x12064.AddAction( new UndoActionComponentCreateDelete( Document, __0x12052, false ) );
						__0x12064.AddAction( new UndoActionComponentCreateDelete( Document, __0x12054, true ) );
						Document.UndoSystem.CommitAction( __0x12064 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x12065 = new UndoActionComponentCreateDelete( Document, __0x12054, true );
					Document.UndoSystem.CommitAction( __0x12065 );
					Document.Modified = true;
				}
			}

			return true;
		}

		public bool CanFocusCameraOnSelectedObject( out Component_ObjectInSpace[] objects )
		{
			if( !AllowCameraControl )
			{
				objects = null;
				return false;
			}

			objects = SelectedObjects.OfType<Component_ObjectInSpace>().ToArray();
			return objects.Length != 0;
		}

		public void FocusCameraOnSelectedObject( Component_ObjectInSpace[] objects )
		{
			Bounds __0x12066 = NeoAxis.Bounds.Cleared;
			foreach( var __0x12360 in objects )
			{
				if( __0x12360 is Component_Light )
				{
					var __0x12067 = new Bounds( __0x12360.Transform.Value.Position );
					__0x12067.Expand( 0.1 );
					__0x12066.Add( __0x12067 );
				}
				else
					__0x12066.Add( __0x12360.SpaceBounds.CalculatedBoundingBox );
			}

			Component_Camera __0x12068 = Scene.Mode.Value == Component_Scene.ModeEnum._3D ? Scene.CameraEditor : Scene.CameraEditor2D;
			if( !__0x12066.IsCleared() && __0x12068 != null )
			{
				var __0x12069 = new Rectangle( .4f, .3f, .6f, .7f );

				var __0x12070 = __0x12066.GetCenter();
				var __0x12071 = __0x12066.ToPoints();

				if( Scene.Mode.Value == Component_Scene.ModeEnum._3D )
				{
					double __0x12072 = 1000;
					while( __0x12072 > 0.3 )
					{
						__0x12068.SetPosition( __0x12070 - __0x12068.TransformV.Rotation.GetForward() * __0x12072 );

						var __0x12073 = ViewportControl.Viewport;

						
						bool __0x12074 = false;
						Scene_ViewportUpdateGetCameraSettings( Scene, __0x12073, ref __0x12074 );

						foreach( var __0x12361 in __0x12071 )
						{
							__0x12073.CameraSettings.ProjectToScreenCoordinates( __0x12361, out var screenPos );
							if( !__0x12069.Contains( screenPos ) )
								goto end;
						}

						__0x12072 /= 1.03f;
					}
					end:;
				}
				else
				{
					__0x12068.SetPosition( new Vector3( __0x12070.ToVector2(), __0x12068.TransformV.Position.Z ) );
				}
			}
		}

		[Browsable( false )]
		public TransformTool TransformTool
		{
			get { return __0x11765; }
		}

		virtual protected TransformToolObject TransformToolCreateObject( object forObject )
		{
			TransformToolObject __0x12075 = null;

			var __0x12076 = false;
			if( WorkareaMode != null && WorkareaMode.PerformTransformToolCreateObject( forObject, ref __0x12075 ) )
				__0x12076 = true;

			if( !__0x12076 )
			{
				
				if( __0x12075 == null )
				{
					

					var __0x12077 = forObject as Component_ObjectInSpace;
					if( __0x12077 != null )
						return new TransformToolObject_ObjectInSpace( __0x12077 );
				}
			}

			return __0x12075;
		}

		[Browsable( false )]
		public new WorkareaModeClass_Scene WorkareaMode
		{
			get { return (WorkareaModeClass_Scene)base.WorkareaMode; }
		}

		public void ResetWorkareaMode()
		{
			WorkareaModeSet( "" );
			__0x11765.Mode = __0x11769;
		}

		public void ChangeCreateObjectsMode( CreateObjectsModeEnum mode )
		{
			if( CreateObjectsMode == mode )
				return;

			CreateObjectsMode = mode;

			
		}

		bool __0x12414()
		{
			(var objectType, var referenceToObject, var anyData, var objectName) = EditorAPI.GetSelectedObjectToCreate();
			if( objectType != null )
			{
				var __0x12078 = __0x12401( objectType, referenceToObject );
				if( __0x12078 != null && MetadataManager.GetTypeOfNetType( typeof( Component_ObjectInSpace ) ).IsAssignableFrom( __0x12078 ) )
				{
					var __0x12079 = __0x12402( objectType, referenceToObject, anyData, objectName );
					if( __0x12079 != null )
					{
						__0x11779 = objectType;
						__0x11780 = __0x12079;
						__0x12406();
						return true;
					}
				}
			}

			return false;
		}

		private void __0x12415( object __0x12526, EventArgs __0x12527 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && ObjectCreationMode == null )
			{
				if( __0x12414() )
					__0x11777 = true;
			}
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) && ObjectCreationMode == null )
			{
				if( __0x12418() )
					__0x11778 = true;
			}
		}

		void __0x12416()
		{
			__0x12405();
			__0x12409();
			__0x11777 = false;
		}

		private void __0x12417( object __0x12528, EventArgs __0x12529 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Click )
				__0x12416();
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush )
				__0x12419();
		}

		public override void WorkareaModeSet( string name, WorkareaModeClass instance = null )
		{
			base.WorkareaModeSet( name, instance );

			__0x12416();
			__0x12419();

			if( new Rectangle( 0, 0, 1, 1 ).Contains( Viewport.MousePosition ) )
			{
				if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) && ObjectCreationMode == null )
				{
					if( __0x12414() )
						__0x11777 = true;
				}
				if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) && ObjectCreationMode == null )
				{
					if( __0x12418() )
						__0x11778 = true;
				}
			}
		}

		public override void ObjectCreationModeSet( ObjectCreationMode mode )
		{
			if( mode == null )
			{
				
				if( new Rectangle( 0, 0, 1, 1 ).Contains( Viewport.MousePosition ) )
				{
					if( CreateObjectsMode == CreateObjectsModeEnum.Click && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByClick ) )
					{
						if( __0x12414() )
							__0x11777 = true;
					}
					if( CreateObjectsMode == CreateObjectsModeEnum.Brush && ( WorkareaMode == null || WorkareaMode.AllowCreateObjectsByBrush ) )
					{
						if( __0x12418() )
							__0x11778 = true;
					}
				}
			}

			base.ObjectCreationModeSet( mode );
		}

		bool __0x12418()
		{
			var __0x12080 = __0x12427() as Component_GroupOfObjects;

			if( __0x12080 != null )
			{
				

				(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
				if( objectType != null )
				{
					
					{
						Component_Mesh __0x12081 = null;
						Metadata.TypeInfo __0x12082 = null;
						{
							var __0x12083 = objectType as Metadata.ComponentTypeInfo;
							if( __0x12083 != null && __0x12083.BasedOnObject != null )
							{
								
								__0x12081 = __0x12083.BasedOnObject as Component_Mesh;

								
								if( __0x12083.BasedOnObject is Component_Import3D )
									__0x12081 = __0x12083.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
							}

							
							if( __0x12081 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( objectType ) )
							{
								var __0x12084 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
								if( __0x12084 != null )
									__0x12081 = __0x12084.BasedOnObject as Component_Mesh;
							}

							
							if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
								__0x12082 = objectType;
						}

						if( __0x12081 != null || __0x12082 != null )
							return true;
					}

					
					{
						Component_Surface __0x12085 = null;
						{
							var __0x12086 = objectType as Metadata.ComponentTypeInfo;
							if( __0x12086 != null && __0x12086.BasedOnObject != null )
								__0x12085 = __0x12086.BasedOnObject as Component_Surface;
						}

						if( __0x12085 != null )
							return true;
					}
				}
			}
			else
			{
				

				(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
				if( objectType != null )
				{
					if( MetadataManager.GetTypeOfNetType( typeof( Component_Surface ) ).IsAssignableFrom( objectType ) )
						return true;

					var __0x12087 = __0x12401( objectType, referenceToObject );
					if( __0x12087 != null && MetadataManager.GetTypeOfNetType( typeof( Component_ObjectInSpace ) ).IsAssignableFrom( __0x12087 ) )
						return true;
				}
			}

			return false;
		}

		void __0x12419()
		{
			__0x12421( false );
			__0x11778 = false;
		}

		bool __0x12420( Viewport __0x12530 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && !__0x12530.MouseRelativeMode && __0x11778 )
			{
				var __0x12088 = __0x12427() as Component_GroupOfObjects;
				if( __0x12424( __0x12530, __0x12088, out _ ) )
				{
					__0x11786 = true;
					__0x11787 = ( ModifierKeys & Keys.Shift ) != 0;

					
				}

				return true;
			}

			return false;
		}

		bool __0x12421( bool __0x12531 )
		{
			if( __0x11786 )
			{
				if( __0x12531 )
				{
					

					if( __0x11790.Count != 0 )
						__0x11789.ObjectsRemove( __0x11790.ToArray() );

					if( __0x11791.Count != 0 )
						__0x11789.ObjectsAdd( __0x11791.ToArray() );

					foreach( var __0x12362 in __0x11792 )
						__0x12362.Dispose();

					foreach( var __0x12363 in __0x11793 )
						if( __0x12363.wasEnabled )
							__0x12363.obj.Enabled = true;
				}
				else
				{
					

					var __0x12089 = new UndoMultiAction();

					if( __0x11790.Count != 0 )
					{
						__0x12089.AddAction( new Component_GroupOfObjects_Editor.UndoActionCreateDelete( __0x11789, __0x11790.ToArray(), true, false ) );
					}

					if( __0x11791.Count != 0 )
					{
						__0x12089.AddAction( new Component_GroupOfObjects_Editor.UndoActionCreateDelete( __0x11789, __0x11791.ToArray(), false, false ) );
					}

					if( __0x11792.Count != 0 )
						__0x12089.AddAction( new UndoActionComponentCreateDelete( Document, __0x11792, true ) );

					if( __0x11793.Count != 0 )
					{
						var __0x12090 = new List<Component>( __0x11793.Count );
						foreach( var __0x12364 in __0x11793 )
						{
							if( __0x12364.wasEnabled )
								__0x12364.obj.Enabled = true;
							__0x12090.Add( __0x12364.obj );
						}
						__0x12089.AddAction( new UndoActionComponentCreateDelete( Document, __0x12090, false ) );
					}

					if( __0x12089.Actions.Count != 0 )
						Document.CommitUndoAction( __0x12089 );
				}

				__0x11786 = false;
				__0x11787 = false;
				__0x11789 = null;
				__0x11790.Clear();
				__0x11791.Clear();
				__0x11792.Clear();
				__0x11793.Clear();
				return true;
			}

			return false;
		}

		void __0x12422( Viewport __0x12532 )
		{
			var __0x12091 = __0x12427() as Component_GroupOfObjects;
			var __0x12092 = CreateObjectsBrushRadius;
			var __0x12093 = CreateObjectsBrushStrength;
			var __0x12094 = CreateObjectsBrushHardness;
			var __0x12095 = new Random();

			double GetHardnessFactor( double __0x12533 )
			{
				if( __0x12533 == 0 || __0x12533 <= __0x12094 * __0x12092 )
					return 1;
				else
				{
					double __0x12096;
					if( __0x12092 - __0x12092 * __0x12094 != 0 )
						__0x12096 = ( __0x12533 - __0x12092 * __0x12094 ) / ( __0x12092 - __0x12092 * __0x12094 );
					else
						__0x12096 = 0;
					return (float)Math.Cos( Math.PI / 2 * __0x12096 );
				}
			}

			if( __0x12424( __0x12532, __0x12091, out var center ) )
			{
				if( __0x12091 != null )
				{
					

					var __0x12097 = __0x12091.GetBaseObjects();

					if( !__0x11787 )
					{
						

						(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
						if( objectType != null )
						{
							
							{
								Component_Mesh __0x12098 = null;
								ReferenceNoValue __0x12099 = new ReferenceNoValue();
								Metadata.TypeInfo __0x12100 = null;
								{
									var __0x12101 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12101 != null && __0x12101.BasedOnObject != null )
									{
										

										
										__0x12098 = __0x12101.BasedOnObject as Component_Mesh;
										if( __0x12098 != null )
											__0x12099 = ReferenceUtility.MakeResourceReference( __0x12098 );

										
										if( __0x12101.BasedOnObject is Component_Import3D )
										{
											__0x12098 = __0x12101.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
											if( __0x12098 != null )
												__0x12099 = ReferenceUtility.MakeResourceReference( __0x12098 );
										}
									}

									
									if( __0x12098 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( objectType ) )
									{
										var __0x12102 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
										if( __0x12102 != null )
										{
											__0x12098 = __0x12102.BasedOnObject as Component_Mesh;
											if( __0x12098 != null )
												__0x12099 = new ReferenceNoValue( referenceToObject );
										}
									}

									
									if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
									{
										__0x12100 = objectType;
										__0x12099 = new ReferenceNoValue( "this:$Mesh" );
									}
								}

								if( __0x12098 != null || __0x12100 != null )
								{
									double __0x12103 = 1;
									if( __0x12098 != null )
										__0x12103 = __0x12098.Result.SpaceBounds.CalculatedBoundingSphere.Radius;

									
									int __0x12104;
									{
										var __0x12105 = Math.PI * __0x12092 * __0x12092;

										double __0x12106 = __0x12103 / 2;
										double __0x12107 = Math.PI * __0x12106 * __0x12106;
										if( __0x12107 < 0.1 )
											__0x12107 = 0.1;

										double __0x12108 = __0x12105 / __0x12107;
										__0x12108 /= 20;

										__0x12104 = (int)( __0x12093 * (double)__0x12108 );
										__0x12104 = Math.Max( __0x12104, 1 );
									}

									var __0x12109 = new List<Component_GroupOfObjects.Object>( __0x12104 );

									
									Component_GroupOfObjectsElement_Mesh __0x12110 = null;
									{
										var __0x12111 = __0x12091.GetComponents<Component_GroupOfObjectsElement_Mesh>();

										if( __0x12098 != null )
											__0x12110 = __0x12111.FirstOrDefault( __0x12534 => __0x12534.Mesh.Value == __0x12098 && __0x12534.Enabled );

										if( __0x12100 != null )
										{
											foreach( var __0x12365 in __0x12111 )
											{
												if( __0x12365.Enabled )
												{
													var __0x12112 = __0x12365.GetComponent( "Mesh" ) as Component_Mesh;
													if( __0x12112 != null )
													{
														var __0x12113 = __0x12112.GetComponent( "Mesh Geometry" );
														if( __0x12113 != null && __0x12100.IsAssignableFrom( __0x12113.BaseType ) )
														{
															__0x12110 = __0x12365;
															break;
														}
													}
												}
											}
										}
									}

									
									if( __0x12110 == null )
									{
										var __0x12114 = __0x12091.GetFreeElementIndex();
										var __0x12115 = __0x12091.CreateComponent<Component_GroupOfObjectsElement_Mesh>( enabled: false );

										
										string __0x12116 = "";
										{
											string __0x12117 = "";
											if( __0x12098 != null )
												__0x12117 = ComponentUtility.GetOwnedFileNameOfComponent( __0x12098 );
											if( !string.IsNullOrEmpty( __0x12117 ) )
												__0x12116 = "Mesh " + Path.GetFileNameWithoutExtension( __0x12117 );
											if( string.IsNullOrEmpty( __0x12116 ) )
												__0x12116 = "Mesh";
										}
										if( __0x12115.Parent.GetComponent( __0x12116 ) == null )
											__0x12115.Name = __0x12116;
										else
											__0x12115.Name = __0x12115.Parent.Components.GetUniqueName( __0x12116, false, 2 );

										__0x12115.Index = __0x12114;
										__0x12115.Mesh = __0x12099;
										
										
										__0x12091.ElementTypesCacheNeedUpdate();

										if( __0x12100 != null )
										{
											var __0x12118 = __0x12115.CreateComponent<Component_Mesh>();
											__0x12118.Name = "Mesh";
											var __0x12119 = __0x12118.CreateComponent( __0x12100 );
											__0x12119.Name = "Mesh Geometry";
										}

										__0x12115.Enabled = true;

										__0x12110 = __0x12115;
										
										__0x11792.Add( __0x12110 );
									}

									
									PointContainer3D __0x12120;
									{
										var __0x12121 = new Bounds( center );
										__0x12121.Expand( __0x12092 + __0x12103 );
										__0x12120 = new PointContainer3D( __0x12121, 100 );

										var __0x12122 = new Component_GroupOfObjects.GetObjectsItem( Component_GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, true, __0x12121 );
										__0x12091.GetObjects( __0x12122 );
										foreach( var __0x12366 in __0x12122.Result )
										{
											ref var __0x12123 = ref __0x12091.ObjectGetData( __0x12366.Object );
											if( __0x12123.Element == __0x12110.Index )
												__0x12120.Add( ref __0x12123.Position );
										}
									}

									for( int __0x12124 = 0; __0x12124 < __0x12104; __0x12124++ )
									{
										Vector3? __0x12125 = null;

										int __0x12126 = 0;
										while( __0x12126 < 10 )
										{
											var __0x12127 = new Vector2( __0x12095.Next( __0x12092 * 2 ) - __0x12092, __0x12095.Next( __0x12092 * 2 ) - __0x12092 );

											
											var __0x12128 = __0x12127.Length();
											if( __0x12128 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12128 ) )
											{
												var __0x12129 = center.ToVector2() + __0x12127;

												var __0x12130 = Component_Scene_Utility.CalculateObjectPositionZ( Scene, __0x12091, center.Z, __0x12129, __0x12097 );
												if( __0x12130.found )
												{
													var __0x12131 = new Vector3( __0x12129, __0x12130.positionZ );
													
													{
														var __0x12132 = __0x12110.Mesh.Value;
														if( __0x12132 != null )
															__0x12131.Z += -__0x12132.Result.SpaceBounds.CalculatedBoundingBox.Minimum.Z;
													}

													
													if( !__0x12120.Contains( new Sphere( __0x12131, __0x12103 ) ) )
													{
														
														__0x12125 = __0x12131;
														break;
													}
												}
											}

											__0x12126++;
										}

										if( __0x12125 != null )
										{
											var __0x12133 = new Component_GroupOfObjects.Object();
											__0x12133.Element = (ushort)__0x12110.Index.Value;
											__0x12133.Flags = Component_GroupOfObjects.Object.FlagsEnum.Enabled | Component_GroupOfObjects.Object.FlagsEnum.Visible;
											__0x12133.Position = __0x12125.Value;
											__0x12133.Rotation = QuaternionF.Identity;
											__0x12133.Scale = Vector3F.One;
											__0x12133.Color = ColorValue.One;
											__0x12109.Add( __0x12133 );

											
											__0x12120.Add( ref __0x12133.Position );
										}
									}

									__0x11789 = __0x12091;

									var __0x12134 = __0x12091.ObjectsAdd( __0x12109.ToArray() );
									__0x11790.AddRange( __0x12134 );
								}
							}

							
							{
								Component_Surface __0x12135 = null;
								{
									var __0x12136 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12136 != null && __0x12136.BasedOnObject != null )
										__0x12135 = __0x12136.BasedOnObject as Component_Surface;
								}

								if( __0x12135 != null )
								{
									double __0x12137;
									double __0x12138;
									{
										var __0x12139 = __0x12135.GetComponents<Component_SurfaceGroupOfElements>();
										if( __0x12139.Length != 0 )
										{
											__0x12137 = 0;
											__0x12138 = 0;
											foreach( var __0x12367 in __0x12139 )
											{
												if( __0x12367.OccupiedAreaRadius > __0x12137 )
													__0x12137 = __0x12367.OccupiedAreaRadius;
												__0x12138 += __0x12367.OccupiedAreaRadius;
											}
											__0x12138 /= __0x12139.Length;
										}
										else
										{
											__0x12137 = 1;
											__0x12138 = 1;
										}
									}

									
									int __0x12140;
									{
										var __0x12141 = Math.PI * __0x12092 * __0x12092;

										double __0x12142 = __0x12138;
										double __0x12143 = Math.PI * __0x12142 * __0x12142;
										if( __0x12143 < 0.1 )
											__0x12143 = 0.1;

										double __0x12144 = __0x12141 / __0x12143;
										__0x12144 /= 20;

										__0x12140 = (int)( __0x12093 * (double)__0x12144 );
										__0x12140 = Math.Max( __0x12140, 1 );
									}

									var __0x12145 = new List<Component_GroupOfObjects.Object>( __0x12140 );

									
									var __0x12146 = __0x12091.GetComponents<Component_GroupOfObjectsElement_Surface>().FirstOrDefault( __0x12535 => __0x12535.Surface.Value == __0x12135 );

									
									if( __0x12146 == null )
									{
										var __0x12147 = __0x12091.GetFreeElementIndex();

										var __0x12148 = __0x12091.CreateComponent<Component_GroupOfObjectsElement_Surface>();

										
										string __0x12149 = "";
										{
											var __0x12150 = ComponentUtility.GetOwnedFileNameOfComponent( __0x12135 );
											if( !string.IsNullOrEmpty( __0x12150 ) )
												__0x12149 = "Surface " + Path.GetFileNameWithoutExtension( __0x12150 );
											if( string.IsNullOrEmpty( __0x12149 ) )
												__0x12149 = "Surface";
										}
										if( __0x12148.Parent.GetComponent( __0x12149 ) == null )
											__0x12148.Name = __0x12149;
										else
											__0x12148.Name = __0x12148.Parent.Components.GetUniqueName( __0x12149, false, 2 );

										__0x12148.Index = __0x12147;
										
										__0x12148.Surface = ReferenceUtility.MakeResourceReference( __0x12135 );
										__0x12091.ElementTypesCacheNeedUpdate();

										__0x12146 = __0x12148;

										
										__0x11792.Add( __0x12146 );
									}

									var __0x12151 = new Bounds( center );
									__0x12151.Expand( __0x12092 + __0x12137 * 4.01 );

									var __0x12152 = new OctreeContainer.InitSettings();
									__0x12152.InitialOctreeBounds = __0x12151;
									__0x12152.OctreeBoundsRebuildExpand = Vector3.Zero;
									__0x12152.MinNodeSize = __0x12151.GetSize() / 40;
									var __0x12153 = new OctreeContainer( __0x12152 );

									var __0x12154 = new List<Sphere>( 256 );

									{
										var __0x12155 = new Component_GroupOfObjects.GetObjectsItem( Component_GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, true, __0x12151 );
										__0x12091.GetObjects( __0x12155 );
										foreach( var __0x12368 in __0x12155.Result )
										{
											ref var __0x12156 = ref __0x12091.ObjectGetData( __0x12368.Object );
											if( __0x12156.Element == __0x12146.Index )
											{
												var __0x12157 = __0x12135.GetGroup( __0x12156.VariationGroup );
												if( __0x12157 != null )
												{
													__0x12154.Add( new Sphere( __0x12156.Position, __0x12157.OccupiedAreaRadius ) );

													var __0x12158 = new Bounds( __0x12156.Position );
													__0x12158.Expand( __0x12157.OccupiedAreaRadius * 4 );
													__0x12153.AddObject( __0x12158, 1 );
												}
											}
										}
									}

									for( int __0x12159 = 0; __0x12159 < __0x12140; __0x12159++ )
									{
										__0x12135.GetRandomVariation( new Component_Surface.GetRandomVariationOptions(), __0x12095, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
										var __0x12160 = __0x12135.GetGroup( groupIndex );

										Vector3? __0x12161 = null;

										for( var __0x12162 = 0; __0x12162 < 3; __0x12162++ )
										{
											var __0x12163 = 1.0;
											switch( __0x12162 )
											{
											case 0: __0x12163 = 4; break;
											case 1: __0x12163 = 2; break;
											case 2: __0x12163 = 1; break;
											}

											int __0x12164 = 0;
											while( __0x12164 < 10 )
											{
												var __0x12165 = new Vector2( __0x12095.Next( __0x12092 * 2 ) - __0x12092, __0x12095.Next( __0x12092 * 2 ) - __0x12092 );

												
												var __0x12166 = __0x12165.Length();
												if( __0x12166 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12166 ) )
												{
													var __0x12167 = center.ToVector2() + __0x12165;

													var __0x12168 = Component_Scene_Utility.CalculateObjectPositionZ( Scene, __0x12091, center.Z, __0x12167, __0x12097 );
													if( __0x12168.found )
													{
														var __0x12169 = new Vector3( __0x12167, __0x12168.positionZ );

														var __0x12170 = new Sphere( __0x12169, __0x12160.OccupiedAreaRadius );
														__0x12170.ToBounds( out var objBounds );

														var __0x12171 = false;

														foreach( var __0x12369 in __0x12153.GetObjects( objBounds, 0xFFFFFFFF, OctreeContainer.ModeEnum.All ) )
														{
															var __0x12172 = __0x12154[ __0x12369 ];
															__0x12172.Radius *= 0.25;
															__0x12172.Radius *= __0x12163;

															if( ( __0x12169 - __0x12172.Origin ).LengthSquared() < ( __0x12172.Radius + __0x12170.Radius ) * ( __0x12172.Radius + __0x12170.Radius ) )
															{
																__0x12171 = true;
																break;
															}
														}

														if( !__0x12171 )
														{
															
															__0x12161 = __0x12169;
															goto end;
														}
													}
												}

												__0x12164++;
											}
										}

										end:;

										if( __0x12161 != null )
										{
											
											var __0x12173 = new Component_GroupOfObjects.Object();
											__0x12173.Element = (ushort)__0x12146.Index.Value;
											__0x12173.VariationGroup = groupIndex;
											__0x12173.VariationElement = elementIndex;
											__0x12173.Flags = Component_GroupOfObjects.Object.FlagsEnum.Enabled | Component_GroupOfObjects.Object.FlagsEnum.Visible;
											__0x12173.Position = __0x12161.Value + new Vector3( 0, 0, positionZ );
											__0x12173.Rotation = rotation;
											__0x12173.Scale = scale;
											__0x12173.Color = ColorValue.One;
											__0x12145.Add( __0x12173 );

											

											__0x12154.Add( new Sphere( __0x12161.Value, __0x12160.OccupiedAreaRadius ) );

											var __0x12174 = new Bounds( __0x12161.Value );
											__0x12174.Expand( __0x12160.OccupiedAreaRadius * 4 );
											__0x12153.AddObject( __0x12174, 1 );
										}
									}

									__0x12153.Dispose();

									__0x11789 = __0x12091;

									var __0x12175 = __0x12091.ObjectsAdd( __0x12145.ToArray() );
									__0x11790.AddRange( __0x12175 );
								}
							}

						}

					}
					else
					{
						

						(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
						if( objectType != null )
						{
							int __0x12176 = -1;
							{
								
								{
									Component_Mesh __0x12177 = null;
									Metadata.TypeInfo __0x12178 = null;
									{
										var __0x12179 = objectType as Metadata.ComponentTypeInfo;
										if( __0x12179 != null && __0x12179.BasedOnObject != null )
										{
											
											__0x12177 = __0x12179.BasedOnObject as Component_Mesh;

											
											if( __0x12179.BasedOnObject is Component_Import3D )
												__0x12177 = __0x12179.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
										}

										
										if( __0x12177 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( objectType ) )
										{
											var __0x12180 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
											if( __0x12180 != null )
												__0x12177 = __0x12180.BasedOnObject as Component_Mesh;
										}

										
										if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
											__0x12178 = objectType;
									}

									var __0x12181 = __0x12091.GetComponents<Component_GroupOfObjectsElement_Mesh>();

									if( __0x12177 != null )
									{
										var __0x12182 = __0x12181.FirstOrDefault( __0x12536 => __0x12536.Mesh.Value == __0x12177 && __0x12536.Enabled );
										if( __0x12182 != null )
											__0x12176 = __0x12182.Index;
									}

									if( __0x12178 != null )
									{
										foreach( var __0x12370 in __0x12181 )
										{
											if( __0x12370.Enabled )
											{
												var __0x12183 = __0x12370.GetComponent( "Mesh" ) as Component_Mesh;
												if( __0x12183 != null )
												{
													var __0x12184 = __0x12183.GetComponent( "Mesh Geometry" );
													if( __0x12184 != null && __0x12178.IsAssignableFrom( __0x12184.BaseType ) )
													{
														__0x12176 = __0x12370.Index;
														break;
													}
												}
											}
										}
									}
								}

								
								{
									Component_Surface __0x12185 = null;
									{
										var __0x12186 = objectType as Metadata.ComponentTypeInfo;
										if( __0x12186 != null && __0x12186.BasedOnObject != null )
											__0x12185 = __0x12186.BasedOnObject as Component_Surface;
									}

									if( __0x12185 != null )
									{
										var __0x12187 = __0x12091.GetComponents<Component_GroupOfObjectsElement_Surface>().FirstOrDefault( __0x12537 => __0x12537.Surface.Value == __0x12185 );
										if( __0x12187 != null )
											__0x12176 = __0x12187.Index;
									}
								}
							}

							if( __0x12176 != -1 )
							{
								var __0x12188 = new Bounds( center );
								__0x12188.Expand( __0x12092 );

								var __0x12189 = new Component_GroupOfObjects.GetObjectsItem( Component_GroupOfObjects.GetObjectsItem.CastTypeEnum.All, null, false, __0x12188 );
								__0x12091.GetObjects( __0x12189 );

								var __0x12190 = new List<int>( __0x12189.Result.Length );

								foreach( var __0x12371 in __0x12189.Result )
								{
									ref var __0x12191 = ref __0x12091.ObjectGetData( __0x12371.Object );
									var __0x12192 = ( center.ToVector2() - __0x12191.Position.ToVector2() ).Length();

									if( __0x12191.Element == __0x12176 && __0x12192 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12192 ) && __0x12095.NextDouble() <= __0x12093 + 0.05 )
									{
										__0x11789 = __0x12091;

										__0x12190.Add( __0x12371.Object );
										__0x11791.Add( __0x12191 );
									}
								}

								if( __0x12190.Count != 0 )
									__0x12091.ObjectsRemove( __0x12190.ToArray() );
							}
						}
					}

				}
				else
				{
					

					if( !__0x11787 )
					{
						

						(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
						if( objectType != null )
						{
							Component __0x12193 = __0x12427() as Component_Layer;
							if( __0x12193 == null )
								__0x12193 = Scene;

							if( MetadataManager.GetTypeOfNetType( typeof( Component_Surface ) ).IsAssignableFrom( objectType ) )
							{
								

								Component_Surface __0x12194 = null;
								{
									var __0x12195 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12195 != null && __0x12195.BasedOnObject != null )
										__0x12194 = __0x12195.BasedOnObject as Component_Surface;
								}

								if( __0x12194 != null )
								{
									var __0x12196 = new ESet<Component_Mesh>();
									__0x12196.AddRangeWithCheckAlreadyContained( __0x12194.GetAllMeshes() );

									double __0x12197;
									double __0x12198;
									{
										var __0x12199 = __0x12194.GetComponents<Component_SurfaceGroupOfElements>();
										if( __0x12199.Length != 0 )
										{
											__0x12197 = 0;
											__0x12198 = 0;
											foreach( var __0x12372 in __0x12199 )
											{
												if( __0x12372.OccupiedAreaRadius > __0x12197 )
													__0x12197 = __0x12372.OccupiedAreaRadius;
												__0x12198 += __0x12372.OccupiedAreaRadius;
											}
											__0x12198 /= __0x12199.Length;
										}
										else
										{
											__0x12197 = 1;
											__0x12198 = 1;
										}
									}

									
									int __0x12200;
									{
										var __0x12201 = Math.PI * __0x12092 * __0x12092;

										double __0x12202 = __0x12198;
										double __0x12203 = Math.PI * __0x12202 * __0x12202;
										if( __0x12203 < 0.1 )
											__0x12203 = 0.1;

										double __0x12204 = __0x12201 / __0x12203;
										__0x12204 /= 20;

										__0x12200 = (int)( __0x12093 * (double)__0x12204 );
										__0x12200 = Math.Max( __0x12200, 1 );
									}

									for( int __0x12205 = 0; __0x12205 < __0x12200; __0x12205++ )
									{
										__0x12194.GetRandomVariation( new Component_Surface.GetRandomVariationOptions(), __0x12095, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
										var __0x12206 = __0x12194.GetGroup( groupIndex );

										Vector3? __0x12207 = null;

										int __0x12208 = 0;
										while( __0x12208 < 10 )
										{
											var __0x12209 = new Vector2( __0x12095.Next( __0x12092 * 2 ) - __0x12092, __0x12095.Next( __0x12092 * 2 ) - __0x12092 );

											
											var __0x12210 = __0x12209.Length();
											if( __0x12210 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12210 ) )
											{
												var __0x12211 = center.ToVector2() + __0x12209;

												
												var __0x12212 = Component_Scene_Utility.CalculateObjectPositionZ( Scene, null, center.Z, __0x12211 );
												if( __0x12212.found )
												{
													var __0x12213 = new Vector3( __0x12211, __0x12212.positionZ );

													
													bool __0x12214 = true;
													{
														var __0x12215 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, new Sphere( __0x12213, __0x12206.OccupiedAreaRadius ) );
														Scene.GetObjectsInSpace( __0x12215 );
														foreach( var __0x12373 in __0x12215.Result )
														{
															var __0x12216 = __0x12373.Object;

															if( ( center.ToVector2() - __0x12216.TransformV.Position.ToVector2() ).Length() <= __0x12206.OccupiedAreaRadius * __0x12206.OccupiedAreaRadius )
															{
																var __0x12217 = __0x12216 as Component_MeshInSpace;
																if( __0x12217 != null && __0x12217.Mesh.Value != null && __0x12196.Contains( __0x12217.Mesh ) )
																{
																	__0x12214 = false;
																	break;
																}
															}
														}
													}

													if( __0x12214 )
													{
														
														__0x12207 = __0x12213;
														break;
													}
												}
											}

											__0x12208++;
										}

										if( __0x12207 != null )
										{
											Component_ObjectInSpace __0x12218 = null;
											{
												var __0x12219 = __0x12206.GetComponents();
												if( elementIndex < __0x12219.Length )
												{
													var __0x12220 = __0x12219[ elementIndex ];

													
													var __0x12221 = __0x12220 as Component_SurfaceElement_Mesh;
													if( __0x12221 != null )
													{
														var __0x12222 = __0x12193.CreateComponent<Component_MeshInSpace>( enabled: false );
														if( __0x12222 != null )
														{
															
															

															var __0x12223 = __0x12221.Mesh.Value;
															if( __0x12223 != null )
																__0x12222.Mesh = new ReferenceNoValue( ReferenceUtility.CalculateResourceReference( __0x12223 ) );
															

															var __0x12224 = __0x12221.ReplaceMaterial.Value;
															if( __0x12224 != null )
																__0x12222.ReplaceMaterial = new ReferenceNoValue( ReferenceUtility.CalculateResourceReference( __0x12224 ) );

															__0x12222.VisibilityDistance = __0x12221.VisibilityDistance;
															__0x12222.CastShadows = __0x12221.CastShadows;
															__0x12222.ReceiveDecals = __0x12221.ReceiveDecals;

															__0x12218 = __0x12222;
														}
													}

												}
											}

											if( __0x12218 != null )
											{
												
												var __0x12225 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( __0x12218 );
												if( __0x12225 == null )
													__0x12225 = __0x12218;
												__0x12225.Transform = new Transform( __0x12207.Value + new Vector3( 0, 0, positionZ ), rotation, scale );

												
												__0x12218.Name = ComponentUtility.GetNewObjectUniqueName( __0x12218 );
												
												__0x12218.NewObjectSetDefaultConfiguration();
												
												__0x12218.Enabled = true;

												__0x11792.Add( __0x12218 );
											}
										}
									}

								}
							}
							else
							{
								

								double __0x12226 = 1;
								{
									var __0x12227 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12227 != null && __0x12227.BasedOnObject != null )
									{
										
										var __0x12228 = __0x12227.BasedOnObject as Component_Mesh;
										if( __0x12228 != null )
											__0x12226 = __0x12228.Result.SpaceBounds.CalculatedBoundingSphere.Radius;

										
										if( __0x12227.BasedOnObject is Component_Import3D )
										{
											__0x12228 = __0x12227.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
											if( __0x12228 != null )
												__0x12226 = __0x12228.Result.SpaceBounds.CalculatedBoundingSphere.Radius;
										}
									}

									
									if( MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( objectType ) )
									{
										var __0x12229 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
										if( __0x12229 != null )
										{
											var __0x12230 = __0x12229.BasedOnObject as Component_Mesh;
											if( __0x12230 != null )
												__0x12226 = __0x12230.Result.SpaceBounds.CalculatedBoundingSphere.Radius;
										}
									}
								}

								
								int __0x12231;
								{
									var __0x12232 = Math.PI * __0x12092 * __0x12092;

									double __0x12233 = __0x12226 / 2;
									double __0x12234 = Math.PI * __0x12233 * __0x12233;
									if( __0x12234 < 0.1 )
										__0x12234 = 0.1;

									double __0x12235 = __0x12232 / __0x12234;
									__0x12235 /= 20;

									__0x12231 = (int)( __0x12093 * (double)__0x12235 );
									__0x12231 = Math.Max( __0x12231, 1 );
								}


								for( int __0x12236 = 0; __0x12236 < __0x12231; __0x12236++ )
								{
									Vector3? __0x12237 = null;

									int __0x12238 = 0;
									while( __0x12238 < 10 )
									{
										var __0x12239 = new Vector2( __0x12095.Next( __0x12092 * 2 ) - __0x12092, __0x12095.Next( __0x12092 * 2 ) - __0x12092 );

										
										var __0x12240 = __0x12239.Length();
										if( __0x12240 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12240 ) )
										{
											var __0x12241 = center.ToVector2() + __0x12239;

											var __0x12242 = Component_Scene_Utility.CalculateObjectPositionZ( Scene, null, center.Z, __0x12241 );
											if( __0x12242.found )
											{
												var __0x12243 = new Vector3( __0x12241, __0x12242.positionZ );

												
												bool __0x12244 = true;
												{
													var __0x12245 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, new Sphere( __0x12243, __0x12226 ) );
													Scene.GetObjectsInSpace( __0x12245 );
													foreach( var __0x12374 in __0x12245.Result )
													{
														var __0x12246 = __0x12374.Object;
														if( __0x12403( objectType, referenceToObject, __0x12246 ) && ( center.ToVector2() - __0x12246.TransformV.Position.ToVector2() ).Length() <= __0x12226 * __0x12226 )
														{
															__0x12244 = false;
															break;
														}
													}
												}

												if( __0x12244 )
												{
													
													__0x12237 = __0x12243;
													break;
												}
											}
										}

										__0x12238++;
									}

									if( __0x12237 != null )
									{
										var __0x12247 = __0x12402( objectType, referenceToObject, anyData, objectName );
										if( __0x12247 != null )
										{
											var __0x12248 = __0x12247 as Component_ObjectInSpace;
											if( __0x12248 != null )
											{
												var __0x12249 = Component_ObjectInSpace_Utility.CalculateObjectToTransform( __0x12248 );
												if( __0x12249 == null )
													__0x12249 = __0x12248;

												var __0x12250 = __0x12237.Value;
												
												__0x12250.Z += __0x12249.TransformV.Position.Z - __0x12249.SpaceBounds.CalculatedBoundingBox.Minimum.Z;

												__0x12249.Transform = new Transform( __0x12250, __0x12249.Transform.Value.Rotation, __0x12249.Transform.Value.Scale );
											}

											__0x11792.Add( __0x12247 );
										}
									}
								}
							}
						}
					}
					else
					{
						

						(var objectType, var referenceToObject, var anyData, var objectName) = __0x12432();
						if( objectType != null )
						{
							if( MetadataManager.GetTypeOfNetType( typeof( Component_Surface ) ).IsAssignableFrom( objectType ) )
							{
								

								Component_Surface __0x12251 = null;
								{
									var __0x12252 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12252 != null && __0x12252.BasedOnObject != null )
										__0x12251 = __0x12252.BasedOnObject as Component_Surface;
								}

								if( __0x12251 != null )
								{
									var __0x12253 = new ESet<Component_Mesh>();
									__0x12253.AddRangeWithCheckAlreadyContained( __0x12251.GetAllMeshes() );

									var __0x12254 = new Bounds( center );
									__0x12254.Expand( __0x12092 );

									var __0x12255 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x12254 );
									Scene.GetObjectsInSpace( __0x12255 );

									var __0x12256 = new List<Component>( __0x12255.Result.Length );
									foreach( var __0x12375 in __0x12255.Result )
									{
										var __0x12257 = __0x12375.Object;
										var __0x12258 = ( center.ToVector2() - __0x12257.TransformV.Position.ToVector2() ).Length();

										if( __0x12258 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12258 ) && __0x12095.NextDouble() <= __0x12093 + 0.05 )
										{
											var __0x12259 = __0x12257 as Component_MeshInSpace;
											if( __0x12259 != null && __0x12259.Mesh.Value != null && __0x12253.Contains( __0x12259.Mesh ) )
												__0x12256.Add( __0x12257 );
										}
									}

									foreach( var __0x12376 in __0x12256 )
									{
										__0x11793.Add( (__0x12376, __0x12376.Enabled) );
										__0x12376.Enabled = false;
									}

								}
							}
							else
							{
								

								var __0x12260 = __0x12401( objectType, referenceToObject );
								if( __0x12260 != null && MetadataManager.GetTypeOfNetType( typeof( Component_ObjectInSpace ) ).IsAssignableFrom( __0x12260 ) )
								{
									var __0x12261 = new Bounds( center );
									__0x12261.Expand( __0x12092 );

									var __0x12262 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, __0x12260, true, __0x12261 );
									Scene.GetObjectsInSpace( __0x12262 );

									var __0x12263 = new List<Component>( __0x12262.Result.Length );
									foreach( var __0x12377 in __0x12262.Result )
									{
										var __0x12264 = __0x12377.Object;
										var __0x12265 = ( center.ToVector2() - __0x12264.TransformV.Position.ToVector2() ).Length();

										if( __0x12403( objectType, referenceToObject, __0x12264 ) && __0x12265 <= __0x12092 && __0x12095.NextDouble() <= GetHardnessFactor( __0x12265 ) && __0x12095.NextDouble() <= __0x12093 + 0.05 )
										{
											__0x12263.Add( __0x12264 );
										}
									}

									foreach( var __0x12378 in __0x12263 )
									{
										__0x11793.Add( (__0x12378, __0x12378.Enabled) );
										__0x12378.Enabled = false;
									}
								}
							}
						}
					}
				}
			}
		}

		void __0x12423( Viewport __0x12538, float __0x12539 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && __0x11786 && !__0x12538.MouseRelativeMode )
			{
				__0x11788 -= __0x12539;
				while( __0x11788 < 0 )
				{
					__0x12422( __0x12538 );
					__0x11788 += .05f;
				}
			}
		}

		bool __0x12424( Viewport __0x12540, Component_GroupOfObjects __0x12541, out Vector3 __0x12542 )
		{
			var __0x12266 = __0x12540.CameraSettings.GetRayByScreenCoordinates( __0x12540.MousePosition );

			if( __0x12541 != null )
			{
				

				double? __0x12267 = null;
				Vector3 __0x12268 = Vector3.Zero;

				var __0x12269 = __0x12541.GetBaseObjects();
				foreach( var __0x12379 in __0x12269 )
				{
					
					var __0x12270 = __0x12379 as IComponent_Terrain;
					if( __0x12270 != null )
					{
						if( __0x12270.GetPositionByRay( __0x12266, false, out var position ) )
						{
							var __0x12271 = ( position - __0x12266.Origin ).Length();
							if( __0x12267 == null || __0x12271 < __0x12267.Value )
							{
								__0x12267 = __0x12271;
								__0x12268 = position;
							}
						}
					}

					
					var __0x12272 = __0x12379 as Component_MeshInSpace;
					if( __0x12272 != null )
					{
						if( __0x12272.RayCast( __0x12266, Component_Mesh.CompiledData.RayCastMode.Auto, out var scale, out _ ) )
						{
							var __0x12273 = __0x12266.GetPointOnRay( scale );
							var __0x12274 = ( __0x12273 - __0x12266.Origin ).Length();
							if( __0x12267 == null || __0x12274 < __0x12267.Value )
							{
								__0x12267 = __0x12274;
								__0x12268 = __0x12273;
							}
						}
					}

					
					
					
					
					

				}

				if( __0x12267 != null )
				{
					__0x12542 = __0x12268;
					return true;
				}
			}
			else
			{
				
				var __0x12275 = CalculateCreateObjectPositionUnderCursor( Viewport, allowSnap: false );
				if( __0x12275.found )
				{
					__0x12542 = __0x12275.position;
					return true;
				}
			}

			__0x12542 = Vector3.Zero;
			return false;
		}

		void __0x12425( Viewport __0x12543 )
		{
			if( CreateObjectsMode == CreateObjectsModeEnum.Brush && __0x11778 && !__0x12543.MouseRelativeMode )
			{
				var __0x12276 = __0x12427() as Component_GroupOfObjects;

				if( __0x12424( __0x12543, __0x12276, out var center ) )
				{
					bool __0x12277;
					if( __0x11786 )
						__0x12277 = __0x11787;
					else
						__0x12277 = ( ModifierKeys & Keys.Shift ) != 0;

					
					var __0x12278 = !__0x12277 ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );
					__0x12543.Simple3DRenderer.SetColor( __0x12278 );

					double __0x12279 = CreateObjectsBrushRadius;

					const double __0x12280 = Math.PI / 32;
					Vector3 __0x12281 = Vector3.Zero;
					for( double __0x12282 = 0; __0x12282 <= Math.PI * 2 + __0x12280 / 2; __0x12282 += __0x12280 )
					{
						var __0x12283 = new Vector3( center.X + Math.Cos( __0x12282 ) * __0x12279, center.Y + Math.Sin( __0x12282 ) * __0x12279, 0 );
						__0x12283.Z = Component_Scene_Utility.CalculateObjectPositionZ( Scene, __0x12276, center.Z, __0x12283.ToVector2() ).positionZ;

						if( __0x12282 != 0 )
						{
							const float __0x12284 = 0.2f;
							__0x12543.Simple3DRenderer.AddLine( __0x12281 + new Vector3( 0, 0, __0x12284 ), __0x12283 + new Vector3( 0, 0, __0x12284 ) );
						}

						__0x12281 = __0x12283;
					}



					

					
					
					
					
					
					

					
					

					
					
					

					
					
					

					
					
				}
			}
		}

		void __0x12426()
		{
			if( Time.Current > __0x11771 + 1.0 )
			{
				__0x11771 = Time.Current;

				var __0x12285 = new List<Component>();
				foreach( var __0x12380 in Scene.GetComponents( checkChildren: true, onlyEnabledInHierarchy: true ) )
				{
					if( ( __0x12380 is Component_GroupOfObjects obj2 && obj2.EditorAllowUsePaintBrush ) || __0x12380 is Component_Layer )
						if( __0x12380.DisplayInEditor )
							__0x12285.Add( __0x12380 );
				}
				

				__0x11770.Clear();
				__0x11770.Add( (CreateObjectsDestinationModeEnum.Auto, null, EditorLocalization.Translate( "General", "Auto" )) );
				__0x11770.Add( (CreateObjectsDestinationModeEnum.Root, null, EditorLocalization.Translate( "General", "Root" )) );
				foreach( var __0x12381 in __0x12285 )
					__0x11770.Add( (CreateObjectsDestinationModeEnum.Component, __0x12381, __0x12381.Name) );
			}
		}

		Component __0x12427()
		{
			
			if( __0x11772.Obj != null )
			{
				if( __0x11772.Obj.Disposed || __0x11772.Obj.ParentRoot != Scene )
					__0x11772 = (CreateObjectsDestinationModeEnum.Auto, null);
			}

			Component __0x12286 = __0x11772.Obj;

			if( __0x11772.Mode == CreateObjectsDestinationModeEnum.Auto )
			{
				
				if( CreateObjectsMode == CreateObjectsModeEnum.Brush )
				{

					Component_GroupOfObjects __0x12287 = null;
					{
						foreach( var __0x12382 in Scene.GetComponents( checkChildren: true, onlyEnabledInHierarchy: true ) )
						{
							if( __0x12382 is Component_GroupOfObjects obj2 && obj2.EditorAllowUsePaintBrush && __0x12382.DisplayInEditor )
							{
								__0x12287 = obj2;
								break;
							}
						}
					}

					if( __0x12287 != null )
					{
						(var objectType, var referenceToObject, var anyData, string objectName) = __0x12432();
						if( objectType != null )
						{
							
							{
								Component_Mesh __0x12288 = null;
								Metadata.TypeInfo __0x12289 = null;
								{
									var __0x12290 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12290 != null && __0x12290.BasedOnObject != null )
									{
										
										__0x12288 = __0x12290.BasedOnObject as Component_Mesh;

										
										if( __0x12290.BasedOnObject is Component_Import3D )
											__0x12288 = __0x12290.BasedOnObject.GetComponent( "Mesh" ) as Component_Mesh;
									}

									
									if( __0x12288 == null && MetadataManager.GetTypeOfNetType( typeof( Component_Mesh ) ).IsAssignableFrom( objectType ) )
									{
										var __0x12291 = MetadataManager.GetType( referenceToObject ) as Metadata.ComponentTypeInfo;
										if( __0x12291 != null )
											__0x12288 = __0x12291.BasedOnObject as Component_Mesh;
									}

									
									if( MetadataManager.GetTypeOfNetType( typeof( Component_MeshGeometry_Procedural ) ).IsAssignableFrom( objectType ) )
										__0x12289 = objectType;
								}

								if( __0x12288 != null || __0x12289 != null )
									__0x12286 = __0x12287;
							}

							
							{
								Component_Surface __0x12292 = null;
								{
									var __0x12293 = objectType as Metadata.ComponentTypeInfo;
									if( __0x12293 != null && __0x12293.BasedOnObject != null )
										__0x12292 = __0x12293.BasedOnObject as Component_Surface;
								}

								if( __0x12292 != null )
									__0x12286 = __0x12287;
							}
						}
					}

				}
			}

			return __0x12286;

			

			

			
			
			
			
			
			
			
			
			
			
			

			
		}

		void __0x12428()
		{
			if( Time.Current > __0x11774 + 1.0 )
			{
				__0x11774 = Time.Current;

				var __0x12294 = new ESet<Component_PaintLayer>();
				{
					var __0x12295 = Scene.GetComponents<IComponent_Terrain>( checkChildren: true );
					foreach( var __0x12383 in __0x12295 )
					{
						foreach( var __0x12384 in ( (Component)__0x12383 ).GetComponents<Component_PaintLayer>() )
						{
							if( __0x12384.Enabled && __0x12384.MaskImage.Value == null )
								__0x12294.Add( __0x12384 );
						}
					}
				}

				__0x11773.Clear();
				

				foreach( var __0x12385 in __0x12294 )
				{
					var __0x12296 = "";

					Component __0x12297 = __0x12385.Material.Value;
					if( __0x12297 == null )
						__0x12297 = __0x12385.Surface.Value;

					if( __0x12297 != null )
					{
						if( __0x12297.Parent == null )
						{
							var __0x12298 = ComponentUtility.GetOwnedFileNameOfComponent( __0x12297 );
							if( !string.IsNullOrEmpty( __0x12298 ) )
								__0x12296 = Path.GetFileNameWithoutExtension( __0x12298 );
						}
						else
							__0x12296 = __0x12297.Name;
					}

					if( string.IsNullOrEmpty( __0x12296 ) )
						__0x12296 = __0x12385.ToString();

					__0x11773.Add( (__0x12385, __0x12296) );
				}
			}
		}

		void __0x12429()
		{
			var __0x12299 = EditorActions.GetByName( "Terrain Paint Layers" );
			if( __0x12299 != null && !__0x12299.CompletelyDisabled )
			{
				var __0x12300 = __0x12299.ListBox.SelectedIndex;
				if( __0x12300 >= 0 && __0x12300 < __0x11773.Count )
					__0x11775 = __0x11773[ __0x12300 ].Obj;
				else
					__0x11775 = null;
			}
		}

		public Component_PaintLayer TerrainPaintLayersGetSelected()
		{
			if( __0x11775 != null )
			{
				if( __0x11775.Disposed || __0x11775.ParentRoot != Scene )
					__0x11775 = null;
			}
			return __0x11775;
		}

		protected virtual object[] SelectByDoubleClick( object overObject )
		{
			var __0x12301 = new ESet<object>();

			var __0x12302 = ProjectSettings.Get.SceneEditorSelectByDoubleClickRadius.Value;

			var __0x12303 = overObject as Component_ObjectInSpace;
			if( __0x12303 != null && __0x12302 > 0 )
			{
				var __0x12304 = new Sphere( __0x12303.TransformV.Position, __0x12302 );
				var __0x12305 = new Component_Scene.GetObjectsInSpaceItem( Component_Scene.GetObjectsInSpaceItem.CastTypeEnum.All, null, true, __0x12304 );
				Scene.GetObjectsInSpace( __0x12305 );

				foreach( var __0x12386 in __0x12305.Result )
				{
					var __0x12306 = __0x12386.Object;
					if( __0x12306.VisibleInHierarchy && __0x12306.CanBeSelectedInHierarchy && ( __0x12306.TransformV.Position - __0x12303.TransformV.Position ).Length() <= __0x12302 )
					{
						if( __0x12306.BaseType == __0x12303.BaseType )
						{
							
							var __0x12307 = __0x12306 as Component_MeshInSpace;
							var __0x12308 = __0x12303 as Component_MeshInSpace;
							if( __0x12307 != null && __0x12308 != null )
							{
								if( __0x12307.Mesh.Value != __0x12308.Mesh.Value )
									continue;
							}

							__0x12301.AddWithCheckAlreadyContained( __0x12306 );
						}
					}
				}
			}

			return __0x12301.ToArray();
		}

		void __0x12430( List<string> __0x12544 )
		{
			Component __0x12309 = null;
			

			foreach( var __0x12387 in SelectedObjects )
			{
				var __0x12310 = __0x12387 as IComponent_Terrain as Component;
				
				if( __0x12310 != null )
					__0x12309 = __0x12310;

				var __0x12311 = __0x12387 as Component_PaintLayer;
				if( __0x12311 != null )
				{
					var __0x12312 = __0x12311.Parent as IComponent_Terrain as Component;
					
					if( __0x12312 != null )
						__0x12309 = __0x12312;
				}
			}

			if( __0x12309 != null )
			{
				var __0x12313 = new List<(Component_PaintLayer, int)>();

				foreach( var __0x12388 in __0x12309.GetComponents<Component_PaintLayer>() )
				{
					if( __0x12388.Enabled && __0x12388.IsDataAvailable() )
					{
						var __0x12314 = __0x12388.Material.Value?.Result;
						if( __0x12314 == null )
							__0x12314 = ResourceUtility.MaterialNull.Result;

						int __0x12315;
						if( __0x12314.deferredShadingSupport )
							__0x12315 = 0;
						else if( __0x12314.Transparent )
							__0x12315 = 2;
						else
							__0x12315 = 1;

						__0x12313.Add( (__0x12388, __0x12315) );
					}
				}

				var __0x12316 = new List<(Component_PaintLayer, int)>( __0x12313 );

				CollectionUtility.InsertionSort( __0x12316, delegate ( (Component_PaintLayer, int) __0x12545, (Component_PaintLayer, int) __0x12546 )
				{
					if( __0x12545.Item2 < __0x12546.Item2 )
						return -1;
					if( __0x12545.Item2 > __0x12546.Item2 )
						return 1;
					return 0;
				} );

				var __0x12317 = !__0x12313.SequenceEqual( __0x12316 );
				if( __0x12317 )
				{
					if( __0x12544.Count != 0 )
						__0x12544.Add( "" );
					__0x12544.Add( "The layers of this terrain are displayed in a different sequence than they are defined" );
					__0x12544.Add( "in the list because the materials of the layers drawn at different stages of rendering" );
					__0x12544.Add( "(deferred, opacity forward, transparent)." );
					
				}
			}
		}

		void __0x12431()
		{
			Component __0x12318 = null;
			string __0x12319 = "";

			var __0x12320 = GetMouseOverObjectToSelectByClick( out var context );
			if( __0x12320 != null && context.ScreenLabelItem != null )
			{
				__0x12318 = context.ResultObject as Component;
				if( __0x12318 != null )
					__0x12319 = !string.IsNullOrEmpty( __0x12318.Name ) ? __0x12318.Name : __0x12318.ToString();
			}

			if( __0x11796 != __0x12318 || __0x11797 != __0x12319 )
			{
				__0x11796 = __0x12318;
				__0x11797 = __0x12319;

				__0x11795.Hide( ViewportControl );
				__0x11795.SetToolTip( ViewportControl, __0x11797 );
			}
		}

		(Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) __0x12432()
		{
			(Metadata.TypeInfo objectType, string referenceToObject, object anyData, string objectName) __0x12321 = EditorAPI.GetSelectedObjectToCreate();

			Component __0x12322 = null;
			if( SelectedObjects.Length == 1 )
				__0x12322 = SelectedObjects[ 0 ] as Component;

			
			if( __0x12322 != null )
			{
				
				{
					var __0x12323 = __0x12322 as Component_GroupOfObjectsElement_Mesh;
					if( __0x12323 != null )
					{
						var __0x12324 = __0x12323.Mesh.Value;
						if( __0x12324 != null )
						{
							var __0x12325 = __0x12324.GetProvidedType();
							if( __0x12325 != null )
								__0x12321 = (__0x12325, __0x12323.Mesh.GetByReference, null, "");
						}
					}
				}

				
				{
					var __0x12326 = __0x12322 as Component_GroupOfObjectsElement_Surface;
					if( __0x12326 != null )
					{
						var __0x12327 = __0x12326.Surface.Value;
						if( __0x12327 != null )
						{
							var __0x12328 = __0x12327.GetProvidedType();
							if( __0x12328 != null )
								__0x12321 = (__0x12328, __0x12326.Surface.GetByReference, null, "");
						}
					}
				}
			}

			return __0x12321;
		}

	}
}

namespace NeoAxis.Editor
{
	partial class Component_Scene_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x12329 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x12433()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_Scene_DocumentWindow";
			this.Size = new System.Drawing.Size(785, 518);
			this.DragDrop += new System.Windows.Forms.DragEventHandler(this.__0x12400);
			this.DragEnter += new System.Windows.Forms.DragEventHandler(this.__0x12397);
			this.DragOver += new System.Windows.Forms.DragEventHandler(this.__0x12398);
			this.DragLeave += new System.EventHandler(this.__0x12399);
			this.ResumeLayout(false);

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	internal class HCItemNewSceneTemplates : HCItemUserControl
	{
		ContentBrowser __0x12547;

		public HCItemNewSceneTemplates( HierarchicalContainer owner, HierarchicalContainer.Item parent, object[] controlledObjects, Metadata.Property property, object[] indexers )
			: base( owner, parent, controlledObjects, property, indexers )
		{
		}

		public override EUserControl CreateControlInsidePropertyItemControl()
		{
			
			var __0x12548 = base.CreateControlInsidePropertyItemControl();

			
			__0x12547 = new NeoAxis.Editor.ContentBrowser();
			__0x12547.CanSelectObjectSettings = false;
			__0x12547.Dock = System.Windows.Forms.DockStyle.Fill;
			__0x12547.Location = new System.Drawing.Point( 0, 0 );
			__0x12547.Margin = new System.Windows.Forms.Padding( 2 );
			__0x12547.Mode = NeoAxis.Editor.ContentBrowser.ModeEnum.Resources;
			__0x12547.Name = "contentBrowser1";
			__0x12547.Size = new System.Drawing.Size( 215, 247 );
			__0x12547.Options.PanelMode = ContentBrowser.PanelModeEnum.List;
			__0x12547.Options.ListMode = ContentBrowser.ListModeEnum.Tiles;
			__0x12547.UseSelectedTreeNodeAsRootForList = false;
			__0x12547.Options.Breadcrumb = false;
			__0x12547.Options.TileImageSize = 80;
			__0x12547.ShowToolBar = false;
			__0x12547.ItemAfterSelect += __0x12553;
			__0x12548.Controls.Add( this.__0x12547 );

			
			
			Size __0x12549 = DpiHelper.Default.ScaleValue( new Size( 30, 40 ) );
			__0x12548.Height = ( 128 + __0x12549.Height + 4 ) * 2;

			
			try
			{
				var __0x12550 = new List<ContentBrowser.Item>();

				foreach( var __0x12552 in Component_Scene.NewObjectSettingsScene.GetTemplates() )
				{
					__0x12547.AddImageKey( __0x12552.Name, __0x12552.Preview );

					var __0x12551 = new ContentBrowserItem_Virtual( __0x12547, null, __0x12552.ToString() );
					__0x12551.Tag = __0x12552;
					__0x12551.imageKey = __0x12552.Name;
					__0x12550.Add( __0x12551 );
				}

				if( __0x12550.Count != 0 )
				{
					__0x12547.SetData( __0x12550, false );
					__0x12547.SelectItems( new ContentBrowser.Item[] { __0x12550[ 0 ] } );
				}
			}
			catch( Exception exc )
			{
				Log.Warning( exc.Message );
				
			}

			return __0x12548;
		}

		private void __0x12553( ContentBrowser __0x12554, IList<ContentBrowser.Item> __0x12555, bool __0x12556, ref bool __0x12557 )
		{
			if( __0x12556 && __0x12555.Count != 0 )
				SetValue( __0x12555[ 0 ].Tag, true );
		}

		
		
		
		
		

		
		
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Sound_PreviewControl : PreviewControl
	{
		Sound __0x12558;
		SoundVirtualChannel __0x12559;

		

		public Component_Sound_PreviewControl()
		{
			__0x12575();
		}

		private void __0x12568( object __0x12576, EventArgs __0x12577 )
		{
			__0x12567.Start();
		}

		private void __0x12569( object __0x12578, EventArgs __0x12579 )
		{
			__0x12571( false );
		}

		private void __0x12570( object __0x12580, EventArgs __0x12581 )
		{
			__0x12571( true );
		}

		void __0x12571( bool __0x12582 )
		{
			if( __0x12559 != null && !__0x12559.Stopped )
				__0x12573();
			else
				__0x12572( __0x12582 );
		}

		void __0x12572( bool __0x12583 )
		{
			var __0x12560 = ObjectOfPreview as Component_Sound;

			if( __0x12560 != null && __0x12560.Result != null )
			{
				long __0x12561 = 0;
				string __0x12562 = __0x12560.LoadFile.Value.ResourceName;
				if( !string.IsNullOrEmpty( __0x12562 ) )
				{
					try
					{
						__0x12561 = VirtualFile.GetLength( __0x12562 );
						
						
					}
					catch { }
				}

				if( __0x12561 != 0 )
				{
					SoundModes __0x12563 = 0;
					if( Path.GetExtension( __0x12562 ).ToLower() == ".ogg" && __0x12561 > 400000 )
						__0x12563 |= SoundModes.Stream;
					if( __0x12583 )
						__0x12563 |= SoundModes.Loop;

					__0x12558 = __0x12560.Result.LoadSoundByMode( __0x12563 );
					if( __0x12558 != null )
						__0x12559 = SoundWorld.SoundPlay( null, __0x12558, EngineApp.DefaultSoundChannelGroup, .5f );
				}
			}
		}

		void __0x12573()
		{
			if( __0x12559 != null )
			{
				__0x12559.Stop();
				__0x12559 = null;
			}
		}

		private void __0x12574( object __0x12584, EventArgs __0x12585 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( __0x12559 != null && __0x12559.Stopped )
				__0x12559 = null;

			__0x12565.Text = __0x12559 == null ? "Play" : "Stop";
			__0x12566.Text = __0x12559 == null ? "Loop Play" : "Stop";
			
			
		}
	}
}

namespace NeoAxis.Editor
{
    partial class Component_Sound_PreviewControl
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x12564 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x12564 != null))
            {
                __0x12564.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x12575()
        {
			this.__0x12564 = new System.ComponentModel.Container();
			this.__0x12565 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x12566 = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.__0x12567 = new System.Windows.Forms.Timer(this.__0x12564);
			this.SuspendLayout();
			
			
			
			this.__0x12565.Location = new System.Drawing.Point(12, 12);
			this.__0x12565.Name = "buttonPlay";
			this.__0x12565.Size = new System.Drawing.Size(117, 32);
			this.__0x12565.TabIndex = 1;
			this.__0x12565.Values.Text = "Play";
			this.__0x12565.Click += new System.EventHandler(this.__0x12569);
			
			
			
			this.__0x12566.Location = new System.Drawing.Point(12, 50);
			this.__0x12566.Name = "buttonLoopPlay";
			this.__0x12566.Size = new System.Drawing.Size(117, 32);
			this.__0x12566.TabIndex = 2;
			this.__0x12566.Values.Text = "Loop Play";
			this.__0x12566.Click += new System.EventHandler(this.__0x12570);
			
			
			
			this.__0x12567.Tick += new System.EventHandler(this.__0x12574);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x12566);
			this.Controls.Add(this.__0x12565);
			this.Name = "Component_Sound_PreviewControl";
			this.Size = new System.Drawing.Size(216, 113);
			this.Load += new System.EventHandler(this.__0x12568);
			this.ResumeLayout(false);

        }

		#endregion
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x12565;
		private ComponentFactory.Krypton.Toolkit.KryptonButton __0x12566;
		private System.Windows.Forms.Timer __0x12567;
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_StoreProduct_DocumentWindow : DocumentWindowWithViewport
	{
		public Component_StoreProduct_DocumentWindow()
		{
			__0x12588();
		}

		public Component_StoreProduct Product
		{
			get { return (Component_StoreProduct)ObjectOfWindow; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			CreateScene( true );

			if( ObjectOfWindow != null )
				SelectObjects( new object[] { ObjectOfWindow } );
		}

		static string __0x12587( string __0x12589 )
		{
			return EditorLocalization.Translate( "StoreProductDocumentWindow", __0x12589 );
		}

		protected override void GetTextInfoLeftTopCorner( List<string> lines )
		{
			base.GetTextInfoLeftTopCorner( lines );

			if( Product != null )
			{
				if( !string.IsNullOrEmpty( Product.Title ) )
					lines.Add( Product.Title );
				else
					lines.Add( "{NO TITLE}" );
				lines.Add( "" );

				lines.Add( "License: " + Product.License.Value.ToString() );
				lines.Add( "Identifier: " + Product.GetIdentifier() );
				lines.Add( "" );

				lines.Add( "Short description:" );
				lines.AddRange( Product.ShortDescription.Value.Trim().Replace( "\r", "" ).Split( new char[] { '\n' } ) );
				lines.Add( "" );

				lines.Add( "Full description:" );
				lines.AddRange( Product.FullDescription.Value.Trim().Replace( "\r", "" ).Split( new char[] { '\n' } ) );
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class Component_StoreProduct_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x12586 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x12588()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "Component_StoreProduct_DocumentWindow";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	class Component_StoreProduct_EditorExtensions : EditorExtensions
	{
		public override void Register()
		{
			
			{
				var __0x12590 = new EditorAction();
				
				__0x12590.Name = "Prepare for the Store";
				
				__0x12590.Description = "Uploads the selected product or all products in the selected folder to the NeoAxis Store.";
				__0x12590.CommonType = EditorAction.CommonTypeEnum.General;
				__0x12590.ImageSmall = Properties.Resources.Package_16;
				__0x12590.ImageBig = Properties.Resources.Package_32;
				__0x12590.QatSupport = true;
				__0x12590.ContextMenuSupport = EditorContextMenuWinForms.MenuTypeEnum.Resources;
				__0x12590.RibbonText = ("Upload", "");

				__0x12590.GetState += delegate ( EditorAction.GetStateContext __0x12607 )
				{
					if( __0x12607.ObjectsInFocus.DocumentWindow == null && __0x12607.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x12591 = __0x12607.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
						foreach( var __0x12602 in __0x12591 )
						{
							if( __0x12602.IsDirectory )
							{
								bool __0x12592 = false;

								if( __0x12607.Holder == EditorAction.HolderEnum.ContextMenu )
								{
									var __0x12593 = Directory.GetFiles( __0x12602.FullPath, "*.store", SearchOption.AllDirectories );
									if( __0x12593.Length == 0 )
										__0x12592 = true;
								}

								if( !__0x12592 )
								{
									__0x12607.Enabled = true;
									break;
								}
							}

							if( !__0x12602.IsDirectory && Path.GetExtension( __0x12602.FullPath ).ToLower() == ".store" )
							{
								__0x12607.Enabled = true;
								break;
							}
						}
					}
				};

				__0x12590.Click += delegate ( EditorAction.ClickContext __0x12608 )
				{
					if( __0x12608.ObjectsInFocus.DocumentWindow == null && __0x12608.ObjectsInFocus.Objects.Length != 0 )
					{
						var __0x12594 = new ESet<string>();
						{
							var __0x12595 = __0x12608.ObjectsInFocus.Objects.OfType<ContentBrowserItem_File>();
							foreach( var __0x12603 in __0x12595 )
							{
								if( __0x12603.IsDirectory )
									__0x12594.AddRangeWithCheckAlreadyContained( Directory.GetFiles( __0x12603.FullPath, "*.store", SearchOption.AllDirectories ) );

								if( !__0x12603.IsDirectory && Path.GetExtension( __0x12603.FullPath ).ToLower() == ".store" )
								{
									__0x12594.AddWithCheckAlreadyContained( __0x12603.FullPath );
									break;
								}
							}
						}

						var __0x12596 = new List<string>();
						foreach( var __0x12604 in __0x12594 )
						{
							var __0x12597 = VirtualPathUtility.GetVirtualPathByReal( __0x12604 );
							if( VirtualFile.Exists( __0x12597 ) )
								__0x12596.Add( __0x12597 );
						}
						if( __0x12596.Count == 0 )
							return;

						var __0x12598 = "Upload selected products to the store?\n\n";
						foreach( var __0x12605 in __0x12596 )
							__0x12598 += __0x12605 + "\n";
						if( EditorMessageBox.ShowQuestion( __0x12598, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
							return;

						
						var __0x12599 = ScreenNotifications.ShowSticky( "Processing..." );
						try
						{
							foreach( var __0x12606 in __0x12596 )
							{
								var __0x12600 = ResourceManager.LoadResource( __0x12606, true );
								if( __0x12600 != null )
								{
									var __0x12601 = __0x12600.ResultComponent as Component_StoreProduct;
									if( __0x12601 != null )
									{
										if( !__0x12601.BuildArchives() )
											return;
									}
								}
							}
						}
						catch( Exception e )
						{
							Log.Warning( e.Message );
							return;
						}
						finally
						{
							__0x12599.Close();
						}

						if( __0x12596.Count > 1 )
							ScreenNotifications.Show( "The products were prepared successfully." );
						else
							ScreenNotifications.Show( "The product was prepared successfully." );

						
						Win32Utility.ShellExecuteEx( null, Component_StoreProduct.writeToDirectory );

					}
				};

				EditorActions.Register( __0x12590 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_StoreProduct_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x12609;
		ProcedureUI.Button __0x12610;

		

		protected override void OnInit()
		{
			__0x12609 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Prepare" ) );
			__0x12609.Click += __0x12613;

			__0x12610 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Prepare and Upload" ), ProcedureUI.Button.SizeEnum.Long );
			__0x12610.Click += __0x12614;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x12609, __0x12610 } );
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			
			__0x12610.Enabled = false;
		}

		private void __0x12613( ProcedureUI.Button __0x12615 )
		{
			if( EditorMessageBox.ShowQuestion( "Prepare selected products for the store?", EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			var __0x12611 = ScreenNotifications.ShowSticky( "Processing..." );
			try
			{
				foreach( var __0x12612 in GetObjects<Component_StoreProduct>() )
				{
					if( !__0x12612.BuildArchives() )
						return;
				}
			}
			catch( Exception e )
			{
				Log.Warning( e.Message );
				return;
			}
			finally
			{
				__0x12611.Close();
			}

			ScreenNotifications.Show( "The product was prepared successfully." );
		}

		private void __0x12614( ProcedureUI.Button __0x12616 )
		{
			

			
			

		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_StoreItem_PreviewControl : PreviewControl
	{
		bool __0x12617;

		

		

		public Component_StoreItem_PreviewControl()
		{
			__0x12640();
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			

			

			
			
			
			
			
			
			
			
			
			
			

			

			__0x12635.Start();
		}

		
		
		
		
		
		
		

		
		

		StoresWindow.ContentBrowserItem_StoreItem __0x12636()
		{
			return ObjectOfPreview as StoresWindow.ContentBrowserItem_StoreItem;
		}

		Image __0x12637()
		{
			var __0x12618 = __0x12636();
			var __0x12619 = __0x12618.storesWindow.GetPackage( __0x12618.packageId, false );

			if( __0x12619 != null && !string.IsNullOrEmpty( __0x12619.Thumbnail ) )
				return StoreManager.ImageManager.GetSourceImage( __0x12619.Thumbnail, EngineApp.GetSystemTime() );

			return null;
		}

		
		
		
		
		
		
		
		
		
		
		

		

		
		

		

		
		
		
		

		
		
		
		

		

		
		
		
		
		
		
		
		
		
		

		
		
		

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		

		

		

		
		
		

		
		
		
		
		
		
		

		static string __0x12638( string __0x12641 )
		{
			return EditorLocalization.Translate( "StoreItemPreviewControl", __0x12641 );
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			var __0x12620 = __0x12637();
			if( __0x12620 != null )
			{
				var __0x12621 = new Vector2I( ClientSize.Width, ClientSize.Height );
				var __0x12622 = new Vector2I( __0x12620.Size.Width, __0x12620.Size.Height );

				double __0x12623 = 1;

				double __0x12624 = Math.Min(
					(double)__0x12621.X / (double)__0x12622.X,
					(double)__0x12621.Y / (double)__0x12622.Y );
				Vector2 __0x12625 = __0x12622.ToVector2() * __0x12624 * __0x12623;
				Vector2 __0x12626 = __0x12621.ToVector2() / 2;
				var __0x12627 = ( new Rectangle( __0x12626 - __0x12625 / 2, __0x12626 + __0x12625 / 2 ) ).ToRectangleI();
				

				

				

				
				
				

				
				

				e.Graphics.DrawImage( __0x12620, new System.Drawing.Rectangle( __0x12627.Left, __0x12627.Top, __0x12627.Size.X, __0x12627.Size.Y ), new System.Drawing.Rectangle( 0, 0, __0x12622.X, __0x12622.Y ), GraphicsUnit.Pixel );

				var __0x12628 = __0x12636();

				var __0x12629 = __0x12628.storesWindow.GetPackage( __0x12628.packageId, false );
				if( __0x12629 != null )
				{
					var __0x12630 = "";

					if( __0x12629.Triangles != 0 )
					{
						__0x12630 += "Triangles " + StoresWindow.GetTrianglesVerticesAsString( __0x12629.Triangles );
						__0x12630 += ", Vertices " + StoresWindow.GetTrianglesVerticesAsString( __0x12629.Vertices );
					}

					
					
					
					
					
					

					var __0x12631 = (int)( 2.0 * EditorAPI.DPIScale );
					var __0x12632 = (int)( 1.0 * EditorAPI.DPIScale );

					e.Graphics.TextRenderingHint = TextRenderingHint.AntiAliasGridFit;

					var __0x12633 = new System.Drawing.Rectangle( __0x12631, __0x12631, __0x12621.X - __0x12631 * 2, __0x12621.Y - __0x12631 * 2 );

					

					e.Graphics.DrawString( __0x12630, DefaultFont, Brushes.Black, new System.Drawing.Rectangle( __0x12633.Left + __0x12632, __0x12633.Top + __0x12632, __0x12633.Width, __0x12633.Height ), StringFormat.GenericDefault );
					e.Graphics.DrawString( __0x12630, DefaultFont, Brushes.White, __0x12633, StringFormat.GenericDefault );

					

					
					

					__0x12617 = true;
				}
			}
		}

		private void __0x12639( object __0x12642, EventArgs __0x12643 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			if( !__0x12617 && __0x12637() != null )
				Invalidate();
		}

	}
}

namespace NeoAxis.Editor
{
    partial class Component_StoreItem_PreviewControl
	{
        /// <summary> 
        /// Required designer variable.
        /// </summary>
        private System.ComponentModel.IContainer __0x12634 = null;

        /// <summary> 
        /// Clean up any resources being used.
        /// </summary>
        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        protected override void Dispose(bool disposing)
        {
            if (disposing && (__0x12634 != null))
            {
                __0x12634.Dispose();
            }
            base.Dispose(disposing);
        }

        #region Component Designer generated code

        /// <summary> 
        /// Required method for Designer support - do not modify 
        /// the contents of this method with the code editor.
        /// </summary>
        private void __0x12640()
        {
			this.__0x12634 = new System.ComponentModel.Container();
			this.__0x12635 = new System.Windows.Forms.Timer( this.__0x12634 );
			this.SuspendLayout();
			
			
			
			this.__0x12635.Interval = 50;
			this.__0x12635.Tick += new System.EventHandler( this.__0x12639 );
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Name = "Component_StoreItem_PreviewControl";
			this.Size = new System.Drawing.Size(338, 107);
			this.ResumeLayout(false);

        }

		#endregion

		private System.Windows.Forms.Timer __0x12635;
	}
}





namespace NeoAxis.Editor
{
	public static class Component_SurfaceUtility
	{
		public static void CreatePreviewObjects( Component_Scene scene, Component_Surface surface )
		{
			DestroyPreviewObjects( scene );

			var __0x12644 = Vector3.Zero;

			double __0x12645;
			double __0x12646;
			{
				var __0x12647 = surface.GetComponents<Component_SurfaceGroupOfElements>();
				if( __0x12647.Length != 0 )
				{
					__0x12645 = 0;
					__0x12646 = 0;
					foreach( var __0x12682 in __0x12647 )
					{
						if( __0x12682.OccupiedAreaRadius > __0x12645 )
							__0x12645 = __0x12682.OccupiedAreaRadius;
						__0x12646 += __0x12682.OccupiedAreaRadius;
					}
					__0x12646 /= __0x12647.Length;
				}
				else
				{
					__0x12645 = 1;
					__0x12646 = 1;
				}
			}

			var __0x12648 = __0x12645 * 10;
			var __0x12649 = 1.0;
			var __0x12650 = 0;
			var __0x12651 = new Random( 0 );

			double GetHardnessFactor( double __0x12685 )
			{
				if( __0x12685 == 0 || __0x12685 <= __0x12650 * __0x12648 )
					return 1;
				else
				{
					double __0x12652;
					if( __0x12648 - __0x12648 * __0x12650 != 0 )
						__0x12652 = ( __0x12685 - __0x12648 * __0x12650 ) / ( __0x12648 - __0x12648 * __0x12650 );
					else
						__0x12652 = 0;
					return (float)Math.Cos( Math.PI / 2 * __0x12652 );
				}
			}

			
			int __0x12653;
			{
				var __0x12654 = Math.PI * __0x12648 * __0x12648;

				double __0x12655 = __0x12646;
				double __0x12656 = Math.PI * __0x12655 * __0x12655;
				if( __0x12656 < 0.1 )
					__0x12656 = 0.1;

				double __0x12657 = __0x12654 / __0x12656;
				

				__0x12653 = (int)( __0x12649 * (double)__0x12657 );
				__0x12653 = Math.Max( __0x12653, 1 );

				__0x12653 *= 4;
				
			}

			

			var __0x12658 = new Bounds( __0x12644 );
			__0x12658.Expand( __0x12648 + __0x12645 * 4.01 );

			var __0x12659 = new OctreeContainer.InitSettings();
			__0x12659.InitialOctreeBounds = __0x12658;
			__0x12659.OctreeBoundsRebuildExpand = Vector3.Zero;
			__0x12659.MinNodeSize = __0x12658.GetSize() / 40;
			var __0x12660 = new OctreeContainer( __0x12659 );

			var __0x12661 = new List<Sphere>( 256 );


			for( int __0x12662 = 0; __0x12662 < __0x12653; __0x12662++ )
			{
				surface.GetRandomVariation( new Component_Surface.GetRandomVariationOptions(), __0x12651, out var groupIndex, out var elementIndex, out var positionZ, out var rotation, out var scale );
				var __0x12663 = surface.GetGroup( groupIndex );

				Vector3? __0x12664 = null;

				for( var __0x12665 = 0; __0x12665 < 3; __0x12665++ )
				{
					var __0x12666 = 1.0;
					switch( __0x12665 )
					{
					case 0: __0x12666 = 4; break;
					case 1: __0x12666 = 2; break;
					case 2: __0x12666 = 1; break;
					}

					int __0x12667 = 0;
					while( __0x12667 < 10 )
					{
						var __0x12668 = new Vector2( __0x12651.Next( __0x12648 * 2 ) - __0x12648, __0x12651.Next( __0x12648 * 2 ) - __0x12648 );

						
						var __0x12669 = __0x12668.Length();
						if( __0x12669 <= __0x12648 && __0x12651.NextDouble() <= GetHardnessFactor( __0x12669 ) )
						{
							var __0x12670 = __0x12644.ToVector2() + __0x12668;

							
							
							

							var __0x12671 = new Vector3( __0x12670, 0 );

							var __0x12672 = new Sphere( __0x12671, __0x12663.OccupiedAreaRadius );
							__0x12672.ToBounds( out var objBounds );

							var __0x12673 = false;

							foreach( var __0x12683 in __0x12660.GetObjects( objBounds, 0xFFFFFFFF, OctreeContainer.ModeEnum.All ) )
							{
								var __0x12674 = __0x12661[ __0x12683 ];
								__0x12674.Radius *= 0.25;
								__0x12674.Radius *= __0x12666;

								if( ( __0x12671 - __0x12674.Origin ).LengthSquared() < ( __0x12674.Radius + __0x12672.Radius ) * ( __0x12674.Radius + __0x12672.Radius ) )
								{
									__0x12673 = true;
									break;
								}
							}

							if( !__0x12673 )
							{
								
								__0x12664 = __0x12671;
								goto end;
							}
						}

						__0x12667++;
					}
				}

				end:;

				if( __0x12664 != null )
				{
					

					var __0x12675 = __0x12664.Value + new Vector3( 0, 0, positionZ );
					var __0x12676 = rotation;
					var __0x12677 = scale;

					var __0x12678 = __0x12663.GetElement( elementIndex );

					var __0x12679 = __0x12678 as Component_SurfaceElement_Mesh;
					if( __0x12679 != null )
					{
						var __0x12680 = scene.CreateComponent<Component_MeshInSpace>( enabled: false );
						__0x12680.Transform = new Transform( __0x12675, __0x12676, __0x12677 );

						
						__0x12680.Mesh = __0x12679.Mesh;
						if( __0x12680.Mesh.Value == null )
							__0x12680.Mesh = ResourceUtility.MeshInvalid;

						
						if( __0x12679.ReplaceMaterial.ReferenceSpecified )
							__0x12680.ReplaceMaterial = __0x12679.ReplaceMaterial;

						__0x12680.Enabled = true;
					}

					

					__0x12661.Add( new Sphere( __0x12664.Value, __0x12663.OccupiedAreaRadius ) );

					var __0x12681 = new Bounds( __0x12664.Value );
					__0x12681.Expand( __0x12663.OccupiedAreaRadius * 4 );
					__0x12660.AddObject( __0x12681, 1 );
				}
			}

			__0x12660.Dispose();
		}

		public static void DestroyPreviewObjects( Component_Scene scene )
		{
			foreach( var __0x12684 in scene.GetComponents<Component_MeshInSpace>() )
				__0x12684.Dispose();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Surface_Editor : CanvasBasedEditor
	{
		double __0x12686;
		bool __0x12687 = true;

		

		public Component_Surface Surface
		{
			get { return (Component_Surface)ObjectOfEditor; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			
			if( Surface != null )
			{
				var __0x12688 = CreateScene( false );
				__0x12706( __0x12688 );
				__0x12688.Enabled = true;
			}

			if( ObjectOfEditor != null )
				SelectObjects( new object[] { ObjectOfEditor } );
		}

		protected override void OnViewportCreated()
		{
			base.OnViewportCreated();

			
			ViewportControl.Viewport.AllowRenderScreenLabels = false;
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			if( Time.Current > __0x12686 + 1.0 )
			{
				if( Surface != null && Scene != null )
					__0x12706( Scene );
			}

			
			if( ProjectSettings.Get.ShowCenteringBorders )
			{
				double __0x12689 = 0.8;

				var __0x12690 = __0x12689 * 0.5 * Viewport.CanvasRenderer.AspectRatioInv;
				var __0x12691 = __0x12689 * 0.5;

				var __0x12692 = new Rectangle( new Vector2( 0.5, 0.5 ) );
				__0x12692.Expand( new Vector2( __0x12690, __0x12691 ) );
				Viewport.CanvasRenderer.AddRectangle( __0x12692, new ColorValue( 1, 1, 1, 0.05 ) );
			}
		}

		protected override void OnSceneViewportUpdateGetCameraSettings( ref bool processed )
		{
			base.OnSceneViewportUpdateGetCameraSettings( ref processed );

			if( __0x12687 && Scene.CameraEditor.Value != null )
			{
				__0x12705( 0.5 );
				Viewport.CameraSettings = new Viewport.CameraSettingsClass( Viewport, Scene.CameraEditor );

				__0x12687 = false;
			}

			if( Surface != null && Scene.CameraEditor.Value != null )
				Surface.EditorCameraTransform = Scene.CameraEditor.Value.Transform;
		}

		void __0x12705( double __0x12707 = 1 )
		{
			var __0x12693 = Scene.CameraEditor.Value;
			var __0x12694 = Scene.CalculateTotalBoundsOfObjectsInSpace();
			var __0x12695 = __0x12694.GetCenter();

			double __0x12696 = Math.Max( Math.Max( __0x12694.GetSize().X, __0x12694.GetSize().Y ), __0x12694.GetSize().Z );
			double __0x12697 = __0x12696 * 2 * __0x12707;
			if( __0x12697 < 2 )
				__0x12697 = 2;

			double __0x12698 = 1;
			SphericalDirection __0x12699 = new SphericalDirection( -3.83, -.47 );

			var __0x12700 = __0x12695 - __0x12699.GetVector() * __0x12697 * __0x12698;
			var __0x12701 = __0x12695;

			Vector3 __0x12702 = __0x12700;
			Vector3 __0x12703 = __0x12701;
			Degree __0x12704 = 65;

			
			
			__0x12693.FieldOfView = __0x12704;
			__0x12693.NearClipPlane = Math.Max( __0x12697 / 10000, 0.01 );
			__0x12693.FarClipPlane = Math.Max( 1000, __0x12697 * 2 );

			if( Surface != null && Surface.EditorCameraTransform != null )
				__0x12693.Transform = Surface.EditorCameraTransform;
			else
				__0x12693.Transform = new Transform( __0x12702, Quaternion.LookAt( ( __0x12703 - __0x12702 ).GetNormalize(), Vector3.ZAxis ) );

			__0x12693.FixedUp = Vector3.ZAxis;
		}

		void __0x12706( Component_Scene __0x12708 )
		{
			Component_SurfaceUtility.CreatePreviewObjects( __0x12708, Surface );
			__0x12686 = Time.Current;
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Surface_Preview : CanvasBasedPreview
	{
		double __0x12709;

		

		public Component_Surface Surface
		{
			get { return ObjectOfPreview as Component_Surface; }
		}

		protected override void OnCreate()
		{
			base.OnCreate();

			
			if( Surface != null )
			{
				var __0x12710 = CreateScene( false );
				__0x12712( __0x12710 );
				__0x12710.Enabled = true;
			}

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), 0.5 );

			if( Surface != null && Surface.EditorCameraTransform != null )
			{
				var __0x12711 = Surface.EditorCameraTransform;
				CameraInitialDistance = ( __0x12711.Position - CameraLookTo ).Length() * 1.3;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x12711.Position );
			}

			
			
			
			
		}

		protected override void OnViewportUpdateBeforeOutput()
		{
			base.OnViewportUpdateBeforeOutput();

			
			if( Time.Current > __0x12709 + 0.1 )
			{
				if( Surface != null && Scene != null )
					__0x12712( Scene );
			}
		}

		void __0x12712( Component_Scene __0x12713 )
		{
			Component_SurfaceUtility.CreatePreviewObjects( __0x12713, Surface );
			__0x12709 = Time.Current;
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class Component_Surface_PreviewImage : PreviewImageGenerator
	{
		public Component_Surface_PreviewImage()
		{
		}

		protected override void Update()
		{
			var __0x12714 = ObjectOfPreview as Component_Surface;

			if( __0x12714 != null )
			{
				var __0x12715 = CreateScene( false );
				Component_SurfaceUtility.CreatePreviewObjects( __0x12715, __0x12714 );
				__0x12715.Enabled = true;
			}

			var __0x12716 = 1.6;

			SetCameraByBounds( Scene.CalculateTotalBoundsOfObjectsInSpace(), __0x12716 );

			if( __0x12714 != null && __0x12714.EditorCameraTransform != null )
			{
				var __0x12717 = __0x12714.EditorCameraTransform;
				CameraDistance = ( __0x12717.Position - CameraLookTo ).Length() * __0x12716;
				CameraDirection = SphericalDirection.FromVector( CameraLookTo - __0x12717.Position );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Terrain_EditingMode : Component_Scene_DocumentWindow.WorkareaModeClass_Scene
	{
		TerrainEditorMode __0x12718;
		object __0x12719;
		Component_Scene __0x12720;

		bool __0x12721;
		Vector3 __0x12722;
		float __0x12723;

		public class NeedUpdateRectangleItem
		{
			public Component_Terrain Terrain;
			public RectangleI Rectangle;
		}
		List<NeedUpdateRectangleItem> __0x12724 = new List<NeedUpdateRectangleItem>();

		
		List<Component_Terrain_GeometryChangeUndoAction> __0x12725 = new List<Component_Terrain_GeometryChangeUndoAction>();
		List<UndoActionPropertiesChange> __0x12726 = new List<UndoActionPropertiesChange>();
		List<Component_Terrain_PaintChangeUndoAction> __0x12727 = new List<Component_Terrain_PaintChangeUndoAction>();

		const float __0x12728 = 0.2f;

		

		
		
		
		
		
		
		
		
		
		
		
		

		
		

		

		
		
		
		
		

		

		public Component_Terrain_EditingMode( Component_Scene_DocumentWindow documentWindow, TerrainEditorMode mode, object modeExtensionData = null )
			: base( documentWindow )
		{
			this.__0x12718 = mode;
			this.__0x12719 = modeExtensionData;

			__0x12720 = documentWindow.Scene;
		}

		public TerrainEditorMode Mode { get { return __0x12718; } }
		public object ModeExtensionData { get { return __0x12719; } }
		public Component_Scene Scene { get { return __0x12720; } }
		public bool ToolModify { get { return __0x12721; } }
		public Vector3 ToolModifyStartPosition { get { return __0x12722; } }
		public float ToolModifyStartMaskValue { get { return __0x12723; } }
		public List<NeedUpdateRectangleItem> NeedUpdateRectangle { get { return __0x12724; } }
		public List<Component_Terrain_GeometryChangeUndoAction> GeometryChangeUndoActions { get { return __0x12725; } }
		public List<UndoActionPropertiesChange> PaintSetPropertyUndoActions { get { return __0x12726; } }
		public List<Component_Terrain_PaintChangeUndoAction> PaintChangeUndoActions { get { return __0x12727; } }

		protected override void OnDestroy()
		{
			if( __0x12721 )
				StopToolModify( false );
		}

		protected override bool OnKeyDown( Viewport viewport, KeyEvent e )
		{
			if( __0x12721 && e.Key == EKeys.Escape )
			{
				StopToolModify( true );
				return true;
			}

			
			if( ( e.Key == EKeys.Space || e.Key == EKeys.Escape ) && !__0x12721 )
			{
				DocumentWindow.ResetWorkareaMode();
				return true;
			}

			
			if( __0x12721 )
				return true;

			return false;
		}

		protected override bool OnMouseDown( Viewport viewport, EMouseButtons button )
		{
			if( button == EMouseButtons.Left )
			{
				if( GetToolPosition( viewport, out var terrain, out __0x12722 ) )
				{
					var __0x12729 = DocumentWindow.TerrainPaintLayersGetSelected();

					if( IsCurrentPaintTool() && __0x12729 != null )
					{
						if( __0x12729.Mask.Value != null && __0x12729.Mask.Value.Length != 0 )
						{
							if( __0x12729.Mask.Value.Length != terrain.GetPaintMaskSizeInteger() * terrain.GetPaintMaskSizeInteger() )
							{
								EditorMessageBox.ShowWarning( EditorLocalization.Translate( "Terrain", "Unable to paint to selected layer because Mask size of the layer and MaskSize of the terrain are not equal." ) );
								return true;
							}
						}
					}

					if( __0x12718 == TerrainEditorMode.PaintFlatten )
					{
						if( __0x12729 != null )
						{
							Vector2I __0x12730 = terrain.GetMaskIndexByPosition( __0x12722.ToVector2() );
							__0x12723 = __0x12729.GetMaskValue( __0x12730 );
						}
					}

					__0x12721 = true;
					return true;
				}
			}

			return false;
		}

		protected override bool OnMouseUp( Viewport viewport, EMouseButtons button )
		{
			if( button == EMouseButtons.Left )
			{
				if( __0x12721 )
				{
					StopToolModify( false );
					return true;
				}
			}

			return false;
		}

		protected override void OnTick( Viewport viewport, double delta )
		{
			if( __0x12721 && !viewport.IsMouseButtonPressed( EMouseButtons.Left ) )
				StopToolModify( false );

			if( __0x12721 )
			{
				if( __0x12817() )
					ToolPutTickGeometry( viewport, delta );
				else if( IsCurrentPaintTool() )
					ToolPutTickPaint( viewport, delta );
				
				
			}
		}

		protected override void OnUpdateBeforeOutput( Viewport viewport )
		{
			RenderTool( viewport );
		}

		protected virtual bool GetToolPosition( Viewport viewport, out Component_Terrain terrain, out Vector3 center )
		{
			if( !viewport.MouseRelativeMode )
			{
				var __0x12731 = viewport.CameraSettings.GetRayByScreenCoordinates( viewport.MousePosition );

				if( Component_Terrain.GetTerrainByRay( __0x12720, __0x12731, out terrain, out center ) )
					return true;
			}

			terrain = null;
			center = Vector3.Zero;
			return false;
		}

		protected virtual void RenderToolCircle( Viewport viewport, Component_Terrain terrain, Vector2 center )
		{
			var __0x12732 = Component_Scene_DocumentWindow.TerrainToolRadius;

			const double __0x12733 = Math.PI / 32;
			Vector3 __0x12734 = Vector3.Zero;
			for( double __0x12735 = 0; __0x12735 <= Math.PI * 2 + __0x12733 / 2; __0x12735 += __0x12733 )
			{
				var __0x12736 = new Vector3(
					center.X + Math.Cos( __0x12735 ) * __0x12732,
					center.Y + Math.Sin( __0x12735 ) * __0x12732, 0 );
				__0x12736.Z = terrain.GetHeight( __0x12736.ToVector2(), false );

				if( __0x12735 != 0 )
					viewport.Simple3DRenderer.AddLine( __0x12734 + new Vector3( 0, 0, __0x12728 ), __0x12736 + new Vector3( 0, 0, __0x12728 ) );

				__0x12734 = __0x12736;
			}
		}

		protected virtual void RenderToolLine( Viewport viewport, Component_Terrain terrain, Vector2 start, Vector2 end, int stepCount )
		{
			Vector2 __0x12737 = end - start;
			Vector2 __0x12738 = __0x12737;
			var __0x12739 = __0x12738.Normalize();

			Vector3 __0x12740 = Vector3.Zero;
			for( int __0x12741 = 0; __0x12741 <= stepCount; __0x12741++ )
			{
				Vector3 __0x12742 = new Vector3(
					start.X + __0x12738.X * ( (float)__0x12741 / stepCount * __0x12739 ),
					start.Y + __0x12738.Y * ( (float)__0x12741 / stepCount * __0x12739 ), 0 );
				__0x12742.Z = terrain.GetHeight( __0x12742.ToVector2(), false );
				
				
				
				
				
				
				
				
				
				

				if( __0x12741 != 0 )
				{
					if( __0x12740.Z != double.MinValue && __0x12742.Z != double.MinValue )
						viewport.Simple3DRenderer.AddLine( __0x12740 + new Vector3( 0, 0, __0x12728 ), __0x12742 + new Vector3( 0, 0, __0x12728 ) );
				}

				__0x12740 = __0x12742;
			}
		}

		protected virtual void RenderToolSquare( Viewport viewport, Component_Terrain terrain, Vector2 center )
		{
			var __0x12743 = Component_Scene_DocumentWindow.TerrainToolRadius;
			int __0x12744 = (int)( __0x12743 * 2 );
			RenderToolLine( viewport, terrain, center + new Vector2( -__0x12743, -__0x12743 ), center + new Vector2( -__0x12743, __0x12743 ), __0x12744 );
			RenderToolLine( viewport, terrain, center + new Vector2( -__0x12743, __0x12743 ), center + new Vector2( __0x12743, __0x12743 ), __0x12744 );
			RenderToolLine( viewport, terrain, center + new Vector2( __0x12743, __0x12743 ), center + new Vector2( __0x12743, -__0x12743 ), __0x12744 );
			RenderToolLine( viewport, terrain, center + new Vector2( __0x12743, -__0x12743 ), center + new Vector2( -__0x12743, -__0x12743 ), __0x12744 );
		}

		protected virtual void RenderTool( Viewport viewport )
		{
			if( GetToolPosition( viewport, out var terrain, out var center ) )
			{
				var __0x12745 = false;
				if( Mode == TerrainEditorMode.PaintPaint )
					__0x12745 = ( Control.ModifierKeys & Keys.Shift ) != 0;
				if( Mode == TerrainEditorMode.PaintClear )
					__0x12745 = ( Control.ModifierKeys & Keys.Shift ) == 0;

				
				var __0x12746 = !__0x12745 ? new ColorValue( 1, 1, 0 ) : new ColorValue( 1, 0, 0 );

				
				viewport.Simple3DRenderer.SetColor( __0x12746, __0x12746 * new ColorValue( 1, 1, 1, 0.5 ) );

				if( Component_Scene_DocumentWindow.TerrainToolShape == TerrainEditorToolShape.Circle )
					RenderToolCircle( viewport, terrain, center.ToVector2() );
				else
					RenderToolSquare( viewport, terrain, center.ToVector2() );
			}
		}

		public static Vector2I GetClampedCellIndex( Component_Terrain terrain, Vector2I index )
		{
			terrain.ClampCellIndex( ref index );
			return index;
		}

		
		
		
		
		

		bool __0x12817()
		{
			return __0x12718 <= TerrainEditorMode.GeometryFlatten;
		}

		public bool IsCurrentPaintTool()
		{
			return __0x12718 >= TerrainEditorMode.PaintPaint && __0x12718 <= TerrainEditorMode.PaintFlatten;
		}

		
		
		
		

		
		
		
		
		
		
		
		
		

		protected virtual void ToolPutTickGeometry( Viewport viewport, double delta )
		{
			if( !GetToolPosition( viewport, out var selectedTerrain, out var position ) )
				return;

			var __0x12747 = (float)Component_Scene_DocumentWindow.TerrainToolRadius;
			var __0x12748 = (float)Component_Scene_DocumentWindow.TerrainToolHardness;
			var __0x12749 = Component_Scene_DocumentWindow.TerrainToolShape;

			float __0x12750 = (float)( delta * Component_Scene_DocumentWindow.TerrainToolStrength * __0x12747 * 0.5 );

			Vector2 __0x12751 = position.ToVector2() - new Vector2( __0x12747, __0x12747 );
			Vector2 __0x12752 = position.ToVector2() + new Vector2( __0x12747, __0x12747 );

			List<Component_Terrain> __0x12753;
			
			
			
			
			
			
			
			__0x12753 = new List<Component_Terrain>();
			__0x12753.Add( selectedTerrain );
			

			foreach( var __0x12806 in __0x12753 )
			{
				var __0x12754 = __0x12725.Find( __0x12818 => __0x12818.Terrain == __0x12806 );

				Vector2I __0x12755 = __0x12806.GetCellIndexByPosition( __0x12751 );
				Vector2I __0x12756 = __0x12806.GetCellIndexByPosition( __0x12752 ) + new Vector2I( 1, 1 );
				__0x12806.ClampCellIndex( ref __0x12755 );
				__0x12806.ClampCellIndex( ref __0x12756 );

				for( int __0x12757 = __0x12755.Y; __0x12757 <= __0x12756.Y; __0x12757++ )
				{
					for( int __0x12758 = __0x12755.X; __0x12758 <= __0x12756.X; __0x12758++ )
					{
						Vector2 __0x12759 = __0x12806.GetPositionXY( new Vector2I( __0x12758, __0x12757 ) );

						float __0x12760;
						{
							double __0x12761;
							if( __0x12749 == TerrainEditorToolShape.Circle )
								__0x12761 = ( __0x12759 - position.ToVector2() ).Length();
							else
								__0x12761 = Math.Max( Math.Abs( __0x12759.X - position.X ), Math.Abs( __0x12759.Y - position.Y ) );

							if( __0x12761 >= __0x12747 )
								__0x12760 = 0;
							else if( __0x12761 == 0 )
								__0x12760 = 1;
							else if( __0x12761 <= __0x12748 * __0x12747 )
								__0x12760 = 1;
							else
							{
								double __0x12762;
								if( __0x12747 - __0x12747 * __0x12748 != 0 )
									__0x12762 = ( __0x12761 - __0x12747 * __0x12748 ) / ( __0x12747 - __0x12747 * __0x12748 );
								else
									__0x12762 = 0;
								__0x12760 = (float)Math.Cos( Math.PI / 2 * __0x12762 );
							}
						}

						if( __0x12760 != 0 )
						{
							float __0x12763 = __0x12806.GetHeightWithoutPosition( new Vector2I( __0x12758, __0x12757 ), false );

							float __0x12764 = __0x12763;

							
							bool __0x12765 = false;
							
							
							
							
							
							
							
							
							
							
							

							
							
							
							
							
							
							
							
							
							
							

							
							
							
							

							if( !__0x12765 )
							{
								switch( __0x12718 )
								{
								case TerrainEditorMode.GeometryRaise:
								case TerrainEditorMode.GeometryLower:
									{
										bool __0x12766 = __0x12718 == TerrainEditorMode.GeometryRaise;
										if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
											__0x12766 = !__0x12766;

										if( __0x12766 )
											__0x12764 = __0x12763 + __0x12750 * __0x12760;
										else
											__0x12764 = __0x12763 - __0x12750 * __0x12760;
									}
									break;

								case TerrainEditorMode.GeometrySmooth:
									{
										float __0x12767 = 0;
										{
											{
												bool __0x12768 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12768 )
													__0x12767 += __0x12806.GetHeightWithoutPosition( GetClampedCellIndex( __0x12806, new Vector2I( __0x12758 - 1, __0x12757 ) ), false );
											}

											{
												bool __0x12769 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12769 )
													__0x12767 += __0x12806.GetHeightWithoutPosition( GetClampedCellIndex( __0x12806, new Vector2I( __0x12758 + 1, __0x12757 ) ), false );
											}

											{
												bool __0x12770 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12770 )
													__0x12767 += __0x12806.GetHeightWithoutPosition( GetClampedCellIndex( __0x12806, new Vector2I( __0x12758, __0x12757 - 1 ) ), false );
											}

											{
												bool __0x12771 = false;
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												
												if( !__0x12771 )
													__0x12767 += __0x12806.GetHeightWithoutPosition( GetClampedCellIndex( __0x12806, new Vector2I( __0x12758, __0x12757 + 1 ) ), false );
											}


											
											
											
											
											__0x12767 /= 4;
										}

										if( __0x12763 < __0x12767 )
										{
											__0x12764 = __0x12763 + __0x12750 * __0x12760;
											if( __0x12764 > __0x12767 )
												__0x12764 = __0x12767;
										}
										else if( __0x12763 > __0x12767 )
										{
											__0x12764 = __0x12763 - __0x12750 * __0x12760;
											if( __0x12764 < __0x12767 )
												__0x12764 = __0x12767;
										}
									}
									break;

								case TerrainEditorMode.GeometryFlatten:
									{
										var __0x12772 = __0x12722.Z - __0x12806.Position.Value.Z;

										if( __0x12763 < __0x12772 )
										{
											__0x12764 = __0x12763 + __0x12750 * __0x12760;
											if( __0x12764 > __0x12772 )
												__0x12764 = (float)__0x12772;
										}
										else if( __0x12763 > __0x12772 )
										{
											__0x12764 = __0x12763 - __0x12750 * __0x12760;
											if( __0x12764 < __0x12772 )
												__0x12764 = (float)__0x12772;
										}
									}
									break;

								}
							}

							if( __0x12763 != __0x12764 )
							{
								
								if( __0x12754 == null )
								{
									__0x12754 = new Component_Terrain_GeometryChangeUndoAction( __0x12806 );
									__0x12725.Add( __0x12754 );
								}
								__0x12754.SaveValue( new Vector2I( __0x12758, __0x12757 ), __0x12763 );

								
								__0x12806.SetHeightWithoutPosition( new Vector2I( __0x12758, __0x12757 ), __0x12764 );
							}
						}
					}
				}

				var __0x12773 = new RectangleI( __0x12755, __0x12756 );
				__0x12806.UpdateRenderingData( __0x12773, false, false, false );

				bool __0x12774 = false;
				foreach( var __0x12807 in __0x12724 )
				{
					if( __0x12807.Terrain == __0x12806 )
					{
						__0x12807.Rectangle.Add( __0x12773 );
						__0x12774 = true;
						break;
					}
				}
				if( !__0x12774 )
				{
					NeedUpdateRectangleItem __0x12775 = new NeedUpdateRectangleItem();
					__0x12775.Terrain = __0x12806;
					__0x12775.Rectangle = __0x12773;
					__0x12724.Add( __0x12775 );
				}
			}
		}

		protected virtual void ToolPutTickPaint( Viewport viewport, double delta )
		{
			if( !GetToolPosition( viewport, out var selectedTerrain, out var position ) )
				return;

			var __0x12776 = DocumentWindow.TerrainPaintLayersGetSelected();
			if( __0x12776 == null )
				return;

			var __0x12777 = (float)Component_Scene_DocumentWindow.TerrainToolRadius;
			var __0x12778 = (float)Component_Scene_DocumentWindow.TerrainToolHardness;
			var __0x12779 = Component_Scene_DocumentWindow.TerrainToolShape;

			float __0x12780 = (float)( delta * Component_Scene_DocumentWindow.TerrainToolStrength * __0x12777 * 0.5 * 2.0 );

			Vector2 __0x12781 = position.ToVector2() - new Vector2( __0x12777, __0x12777 );
			Vector2 __0x12782 = position.ToVector2() + new Vector2( __0x12777, __0x12777 );

			List<Component_Terrain> __0x12783;
			
			
			
			
			
			
			
			__0x12783 = new List<Component_Terrain>();
			__0x12783.Add( selectedTerrain );
			

			foreach( var __0x12808 in __0x12783 )
			{
				UndoActionPropertiesChange __0x12784 = __0x12726.Find( __0x12819 => __0x12819.Items[ 0 ].Obj == __0x12776 );
				var __0x12785 = __0x12727.Find( __0x12820 => __0x12820.Terrain == __0x12808 );

				Vector2I __0x12786 = __0x12808.GetMaskIndexByPosition( __0x12781 );
				Vector2I __0x12787 = __0x12808.GetMaskIndexByPosition( __0x12782 ) + new Vector2I( 1, 1 );
				__0x12808.ClampMaskIndex( ref __0x12786 );
				__0x12808.ClampMaskIndex( ref __0x12787 );

				for( int __0x12788 = __0x12786.Y; __0x12788 <= __0x12787.Y; __0x12788++ )
				{
					for( int __0x12789 = __0x12786.X; __0x12789 <= __0x12787.X; __0x12789++ )
					{
						Vector2 __0x12790 = __0x12808.GetPositionXYByMaskIndex( new Vector2I( __0x12789, __0x12788 ) );

						float __0x12791;
						{
							double __0x12792;
							if( __0x12779 == TerrainEditorToolShape.Circle )
								__0x12792 = ( __0x12790 - position.ToVector2() ).Length();
							else
								__0x12792 = Math.Max( Math.Abs( __0x12790.X - position.X ), Math.Abs( __0x12790.Y - position.Y ) );

							if( __0x12792 >= __0x12777 )
								__0x12791 = 0;
							else if( __0x12792 == 0 )
								__0x12791 = 1;
							else if( __0x12792 <= __0x12778 * __0x12777 )
								__0x12791 = 1;
							else
							{
								double __0x12793;
								if( __0x12777 - __0x12777 * __0x12778 != 0 )
									__0x12793 = ( __0x12792 - __0x12777 * __0x12778 ) / ( __0x12777 - __0x12777 * __0x12778 );
								else
									__0x12793 = 0;
								__0x12791 = (float)Math.Cos( Math.PI / 2 * __0x12793 );
							}
						}

						if( __0x12791 != 0 )
						{
							float __0x12794 = __0x12776.GetMaskValue( new Vector2I( __0x12789, __0x12788 ) );

							float __0x12795 = __0x12794;

							
							bool __0x12796 = false;
							
							
							
							
							
							
							
							
							
							
							

							
							
							
							
							
							
							
							
							
							
							

							
							
							
							

							if( !__0x12796 )
							{
								switch( __0x12718 )
								{
								case TerrainEditorMode.PaintPaint:
								case TerrainEditorMode.PaintClear:
									{
										bool __0x12797 = __0x12718 == TerrainEditorMode.PaintPaint;
										if( ( Form.ModifierKeys & Keys.Shift ) != 0 )
											__0x12797 = !__0x12797;

										if( __0x12797 )
											__0x12795 = __0x12794 + __0x12780 * __0x12791;
										else
											__0x12795 = __0x12794 - __0x12780 * __0x12791;
									}
									break;

								case TerrainEditorMode.PaintSmooth:
									{
										float __0x12798 = 0;
										{
											__0x12798 += __0x12776.GetMaskValue( new Vector2I( __0x12789 - 1, __0x12788 ) );
											__0x12798 += __0x12776.GetMaskValue( new Vector2I( __0x12789 + 1, __0x12788 ) );
											__0x12798 += __0x12776.GetMaskValue( new Vector2I( __0x12789, __0x12788 - 1 ) );
											__0x12798 += __0x12776.GetMaskValue( new Vector2I( __0x12789, __0x12788 + 1 ) );
											
											
											
											
											__0x12798 /= 4;
										}

										if( __0x12794 < __0x12798 )
										{
											__0x12795 = __0x12794 + __0x12780 * __0x12791;
											if( __0x12795 > __0x12798 )
												__0x12795 = __0x12798;
										}
										else if( __0x12794 > __0x12798 )
										{
											__0x12795 = __0x12794 - __0x12780 * __0x12791;
											if( __0x12795 < __0x12798 )
												__0x12795 = __0x12798;
										}
									}
									break;

								case TerrainEditorMode.PaintFlatten:
									{
										float __0x12799 = __0x12723;

										if( __0x12794 < __0x12799 )
										{
											__0x12795 = __0x12794 + __0x12780 * __0x12791;
											if( __0x12795 > __0x12799 )
												__0x12795 = __0x12799;
										}
										else if( __0x12794 > __0x12799 )
										{
											__0x12795 = __0x12794 - __0x12780 * __0x12791;
											if( __0x12795 < __0x12799 )
												__0x12795 = __0x12799;
										}
									}
									break;

								}
							}

							MathEx.Clamp( ref __0x12795, 0, 1 );

							if( __0x12794 != __0x12795 )
							{
								
								if( __0x12776.Mask.Value == null || __0x12776.Mask.Value.Length == 0 || __0x12784 != null )
								{
									if( __0x12784 == null )
									{
										var __0x12800 = __0x12776.Mask;

										__0x12776.Mask = new byte[ __0x12808.GetPaintMaskSizeInteger() * __0x12808.GetPaintMaskSizeInteger() ];

										var __0x12801 = (Metadata.Property)__0x12776.MetadataGetMemberBySignature( "property:Mask" );
										var __0x12802 = new UndoActionPropertiesChange.Item( __0x12776, __0x12801, __0x12800 );
										__0x12784 = new UndoActionPropertiesChange( __0x12802 );
										__0x12726.Add( __0x12784 );
									}
								}
								else
								{
									if( __0x12785 == null )
									{
										__0x12785 = new Component_Terrain_PaintChangeUndoAction( __0x12808 );
										__0x12727.Add( __0x12785 );
									}
									__0x12785.SaveValue( __0x12776, new Vector2I( __0x12789, __0x12788 ), __0x12794 );
								}

								
								__0x12776.SetMaskValue( new Vector2I( __0x12789, __0x12788 ), __0x12795 );
							}
						}
					}
				}

				
				

				

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}
		}

		protected virtual void StopToolModify( bool cancel )
		{
			
			foreach( var __0x12809 in __0x12724 )
				__0x12809.Terrain.UpdateRenderingData( __0x12809.Rectangle, true, true, true );

			
			if( !cancel )
			{
				foreach( var __0x12810 in __0x12724 )
				{
					__0x12810.Terrain.UpdateCollisionData( __0x12810.Rectangle );

					
					
					

					
					
					
					

					
					

					
					
					
				}
			}

			__0x12724.Clear();

			
			if( __0x12725.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12811 in __0x12725 )
						__0x12811.RestoreOldValues();
				}
				else
				{
					var __0x12803 = new UndoMultiAction();
					foreach( var __0x12812 in __0x12725 )
						__0x12803.AddAction( __0x12812 );
					DocumentWindow.Document.CommitUndoAction( __0x12803 );
				}
				__0x12725.Clear();
			}

			if( __0x12726.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12813 in __0x12726 )
						__0x12813.PerformUndo();
				}
				else
				{
					var __0x12804 = new UndoMultiAction();
					foreach( var __0x12814 in __0x12726 )
						__0x12804.AddAction( __0x12814 );
					DocumentWindow.Document.CommitUndoAction( __0x12804 );
				}
				__0x12726.Clear();
			}

			if( __0x12727.Count != 0 )
			{
				if( cancel )
				{
					foreach( var __0x12815 in __0x12727 )
						__0x12815.PerformUndo();
				}
				else
				{
					var __0x12805 = new UndoMultiAction();
					foreach( var __0x12816 in __0x12727 )
						__0x12805.AddAction( __0x12816 );
					DocumentWindow.Document.CommitUndoAction( __0x12805 );
				}
				__0x12727.Clear();
			}

			
			
			
			
			
			
			
			

			__0x12721 = false;
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Terrain_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x12821;
		ProcedureUI.Button __0x12822;

		

		protected override void OnInit()
		{
			__0x12821 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Update" ) );
			__0x12821.Click += __0x12838;

			__0x12822 = ProcedureForm.CreateButton( EditorLocalization.Translate( "Terrain", "Resize Masks" ) );
			__0x12822.Click += __0x12839;

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x12821, __0x12822 } );
		}

		Component_Terrain __0x12836()
		{
			var __0x12823 = GetObjects<Component_Terrain>();
			if( __0x12823.Length == 1 )
				return __0x12823[ 0 ];
			return null;
		}

		List<Component_PaintLayer> __0x12837( Component_Terrain __0x12840 )
		{
			var __0x12824 = new List<Component_PaintLayer>();
			foreach( var __0x12834 in __0x12840.GetComponents<Component_PaintLayer>() )
			{
				if( __0x12834.Enabled && __0x12834.Mask.Value != null && __0x12834.Mask.Value.Length != 0 )
				{
					if( __0x12834.Mask.Value.Length != __0x12840.GetPaintMaskSizeInteger() * __0x12840.GetPaintMaskSizeInteger() )
						__0x12824.Add( __0x12834 );
				}
			}
			return __0x12824;
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			var __0x12825 = __0x12836();
			__0x12821.Enabled = __0x12825 != null;
			__0x12822.Enabled = __0x12825 != null && __0x12837( __0x12825 ).Count != 0;
		}

		private void __0x12838( ProcedureUI.Button __0x12841 )
		{
			var __0x12826 = __0x12836();
			if( __0x12826 == null )
				return;

			__0x12826.UpdateRenderingAndCollisionData( true );
		}

		private void __0x12839( ProcedureUI.Button __0x12842 )
		{
			var __0x12827 = __0x12836();
			if( __0x12827 == null )
				return;

			var __0x12828 = __0x12837( __0x12827 );
			if( __0x12828.Count == 0 )
				return;

			var __0x12829 = string.Format( EditorLocalization.Translate( "Terrain", "Resize masks of selected layers to {0}x{0}?" ), __0x12827.GetPaintMaskSizeInteger() );
			if( EditorMessageBox.ShowQuestion( __0x12829, EMessageBoxButtons.OKCancel ) == EDialogResult.OK )
			{
				var __0x12830 = new UndoMultiAction();

				foreach( var __0x12835 in __0x12828 )
				{
					var __0x12831 = __0x12835.Mask;

					__0x12835.Mask = Component_PaintLayer.ResizeMask( __0x12835.Mask, __0x12827.GetPaintMaskSizeInteger() );

					var __0x12832 = (Metadata.Property)__0x12835.MetadataGetMemberBySignature( "property:Mask" );
					var __0x12833 = new UndoActionPropertiesChange.Item( __0x12835, __0x12832, __0x12831 );
					__0x12830.AddAction( new UndoActionPropertiesChange( __0x12833 ) );
				}

				if( __0x12830.Actions.Count != 0 )
					Provider.DocumentWindow.Document.CommitUndoAction( __0x12830 );
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public class Component_Terrain_GeometryChangeUndoAction : UndoSystem.Action
	{
		Component_Terrain __0x12843;

		BitArray __0x12844 = new BitArray( 4097 * 4097 );
		Dictionary<int, float> __0x12845 = new Dictionary<int, float>( 512 );

		

		public Component_Terrain_GeometryChangeUndoAction( Component_Terrain terrain )
		{
			this.__0x12843 = terrain;
		}

		public Component_Terrain Terrain
		{
			get { return __0x12843; }
		}

		internal protected override void DoUndo()
		{
			var __0x12846 = RectangleI.Cleared;

			var __0x12847 = new Dictionary<int, float>( __0x12845.Count );
			foreach( var __0x12860 in __0x12845 )
			{
				var __0x12848 = __0x12864( __0x12860.Key );

				float __0x12849 = __0x12843.GetHeightWithoutPosition( __0x12848, false );
				__0x12847.Add( __0x12860.Key, __0x12849 );

				__0x12843.SetHeightWithoutPosition( __0x12848, __0x12860.Value );

				__0x12846.Add( __0x12848 );
			}

			__0x12845 = __0x12847;

			__0x12843.UpdateRenderingData( __0x12846, true, true, true );
			__0x12843.UpdateCollisionData( __0x12846 );
		}

		internal protected override void DoRedo()
		{
			DoUndo();
		}

		internal protected override void Destroy()
		{
		}

		int __0x12863( Vector2I __0x12866 )
		{
			return __0x12866.X * 4097 + __0x12866.Y;
		}

		Vector2I __0x12864( int __0x12867 )
		{
			return new Vector2I( __0x12867 / 4097, __0x12867 % 4097 );
		}

		public void SaveValue( Vector2I cellIndex, float heightCoef )
		{
			int __0x12850 = __0x12863( cellIndex );
			if( !__0x12844[ __0x12850 ] )
			{
				__0x12844[ __0x12850 ] = true;
				__0x12845.Add( __0x12850, heightCoef );
			}
		}

		public void RestoreOldValues()
		{
			DoUndo();
		}
	}

	

	public class Component_Terrain_PaintChangeUndoAction : UndoSystem.Action
	{
		Component_Terrain __0x12851;
		List<__0x12869> __0x12852 = new List<__0x12869>();

		

		class __0x12869
		{
			public Component_PaintLayer layer;

			
			
			public Dictionary<Vector2I, float> values = new Dictionary<Vector2I, float>( 512 );
		}

		

		public Component_Terrain_PaintChangeUndoAction( Component_Terrain terrain )
		{
			this.__0x12851 = terrain;
		}

		public Component_Terrain Terrain
		{
			get { return __0x12851; }
		}

		internal protected override void DoUndo()
		{
			var __0x12853 = new List<__0x12869>();

			foreach( var __0x12861 in __0x12852 )
			{
				

				var __0x12854 = new Dictionary<Vector2I, float>( __0x12861.values.Count );
				foreach( var __0x12862 in __0x12861.values )
				{
					float __0x12855 = __0x12861.layer.GetMaskValue( __0x12862.Key );
					__0x12854.Add( __0x12862.Key, __0x12855 );

					__0x12861.layer.SetMaskValue( __0x12862.Key, __0x12862.Value );

					
				}

				var __0x12856 = new __0x12869();
				__0x12856.layer = __0x12861.layer;
				__0x12856.values = __0x12854;
				__0x12853.Add( __0x12856 );
			}

			__0x12852 = __0x12853;

			
			
		}

		internal protected override void DoRedo()
		{
			DoUndo();
		}

		internal protected override void Destroy()
		{
		}

		__0x12869 __0x12865( Component_PaintLayer __0x12868 )
		{
			for( int __0x12857 = 0; __0x12857 < __0x12852.Count; __0x12857++ )
				if( __0x12852[ __0x12857 ].layer == __0x12868 )
					return __0x12852[ __0x12857 ];

			{
				var __0x12858 = new __0x12869();
				__0x12858.layer = __0x12868;
				__0x12852.Add( __0x12858 );
				return __0x12858;
			}
		}

		public void SaveValue( Component_PaintLayer layer, Vector2I maskIndex, float paintValue )
		{
			var __0x12859 = __0x12865( layer );

			if( !__0x12859.values.ContainsKey( maskIndex ) )
				__0x12859.values.Add( maskIndex, paintValue );
		}

		public void PerformUndo()
		{
			DoUndo();
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class UIControl_DocumentWindow : DocumentWindowWithViewport
	{
		
		

		
		
		
		Component_Font __0x12870;
		
		
		
		

		static float[] __0x12871 = new float[] { .1f, .2f, .35f, .5f, .6f, .7f, .8f, .9f, 1, 1.1f, 1.2f, 1.3f, 1.5f, 1.75f, 2.0f, 2.5f, 3.0f };

		
		float __0x12872;

		
		bool __0x12873;
		bool __0x12874;
		Vector2 __0x12875;
		Vector2I __0x12876;
		Vector2 __0x12877;

		
		bool __0x12878;
		bool __0x12879;
		Vector2 __0x12880;
		
		Vector2 __0x12881;
		

		
		bool __0x12882;
		bool __0x12883;
		bool __0x12884;
		Vector2I __0x12885;
		Vector2 __0x12886;
		
		UIControl __0x12887;
		
		ESet<UIControl> __0x12888;
		Dictionary<UIControl, __0x13215> __0x12889;
		MoveModeEnum __0x12890;

		
		bool __0x12891;
		Component __0x12892;
		
		DragDropSetReferenceData __0x12893;
		bool __0x12894;
		string[] __0x12895;

		Component_Image __0x12896;
		UIControl __0x12897;

		bool __0x12898;

		

		class __0x13215
		{
			public Reference<UIMeasureValueVector2> size;
			public Reference<EHorizontalAlignment> horizontalAlignment;
			public Reference<EVerticalAlignment> verticalAlignment;
			public Reference<UIMeasureValueRectangle> margin;
		}

		

		[Flags]
		enum MoveModeEnum
		{
			Move = 1,
			ResizeLeft = 2,
			ResizeTop = 4,
			ResizeRight = 8,
			ResizeBottom = 16,
		}

		

		public UIControl_DocumentWindow()
		{
			__0x13161();

			if( WinFormsUtility.IsDesignerHosted( this ) )
				return;

			__0x13156();

			

			
			
		}

		[Browsable( false )]
		public UIControl Control
		{
			get { return ObjectOfWindow as UIControl; }
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged += __0x13146;

			
			
		}

		protected override void OnDestroy()
		{
			if( Document != null )
				Document.UndoSystem.ListOfActionsChanged -= __0x13146;

			base.OnDestroy();
		}

		
		
		
		
		

		private void __0x13122( object __0x13162, FormClosingEventArgs __0x13163 )
		{
		}

		private void __0x13123( object __0x13164, EventArgs __0x13165 )
		{
			if( !IsHandleCreated || WinFormsUtility.IsDesignerHosted( this ) || EditorAPI.ClosingApplication )
				return;

			
			
			

			
			
			
			
			
		}

		
		
		
		

		
		
		

		public float GetZoom()
		{
			if( Control.EditorZoomIndex >= 0 && Control.EditorZoomIndex < __0x12871.Length )
				return __0x12871[ Control.EditorZoomIndex ];
			return 1;
		}

		double __0x13124()
		{
			return (double)__0x12872 / (double)ViewportControl.Viewport.SizeInPixels.X;
		}

		double __0x13125()
		{
			return (double)__0x12872 / (double)ViewportControl.Viewport.SizeInPixels.Y;
		}

		double __0x13126()
		{
			return Control.EditorScrollPosition.X - ConvertScreenToUnitX( 0.5, false );
		}

		double __0x13127()
		{
			return Control.EditorScrollPosition.Y - ConvertScreenToUnitY( 0.5, false );
		}

		public double ConvertUnitToScreenX( double posX )
		{
			double __0x12899 = ( posX - __0x13126() ) * __0x13124();
			__0x12899 *= GetZoom();
			return __0x12899;
		}

		public double ConvertUnitToScreenY( double posY )
		{
			double __0x12900 = ( posY - __0x13127() ) * __0x13125();
			__0x12900 *= GetZoom();
			return __0x12900;
		}

		public Vector2 ConvertUnitToScreen( Vector2 vector )
		{
			return new Vector2(
				ConvertUnitToScreenX( vector.X ),
				ConvertUnitToScreenY( vector.Y ) );
		}

		public Rectangle ConvertUnitToScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertUnitToScreenX( rect.Left ),
				ConvertUnitToScreenY( rect.Top ),
				ConvertUnitToScreenX( rect.Right ),
				ConvertUnitToScreenY( rect.Bottom ) );
		}

		public double ConvertScreenToUnitX( double screenX, bool applyScrollPosition )
		{
			double __0x12901 = screenX / __0x13124() / GetZoom();
			if( applyScrollPosition )
				__0x12901 += __0x13126();
			return __0x12901;
		}

		public double ConvertScreenToUnitY( double screenY, bool applyScrollPosition )
		{
			double __0x12902 = screenY / __0x13125() / GetZoom();
			if( applyScrollPosition )
				__0x12902 += __0x13127();
			return __0x12902;
		}

		public Vector2 ConvertScreenToUnit( Vector2 screen, bool applyScrollPosition )
		{
			return new Vector2(
				ConvertScreenToUnitX( screen.X, applyScrollPosition ),
				ConvertScreenToUnitY( screen.Y, applyScrollPosition ) );
		}

		public RectangleI GetVisibleCells()
		{
			Vector2I __0x12903 = ConvertScreenToUnit( Vector2.Zero, true ).ToVector2I() - new Vector2I( 1, 1 );
			Vector2I __0x12904 = ConvertScreenToUnit( Vector2.One, true ).ToVector2I() + new Vector2I( 1, 1 );
			return new RectangleI( __0x12903, __0x12904 );
		}

		public Rectangle SelectByRectangle_GetRectangleInScreen()
		{
			Rectangle __0x12905 = new Rectangle( __0x12880 );
			__0x12905.Add( __0x12881 );
			return __0x12905;
		}

		
		
		
		
		
		

		void __0x13128( CanvasRenderer __0x13166 )
		{
			if( __0x12870 == null )
				__0x12870 = ResourceManager.LoadResource<Component_Font>( @"Base\Fonts\FlowGraphEditor.ttf" );
		}

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		
		
		

		private void __0x13129( object __0x13167, KeyEventArgs __0x13168 )
		{
			
			
			
		}

		void __0x13130()
		{
			var __0x12906 = new List<KryptonContextMenuItemBase>();

			
			
			Component __0x12907 = null;
			{
				if( SelectedObjects.Length == 1 )
					__0x12907 = SelectedObjects[ 0 ] as Component;
			}

			
			{
				

				var __0x12908 = new KryptonContextMenuItem( __0x13132( "Editor" ), EditorResourcesCache.Edit, delegate ( object __0x13169, EventArgs __0x13170 )
				{
					
					EditorAPI.OpenDocumentWindowForObject( Document, __0x12907 );
				} );
				__0x12908.Enabled = __0x12907 != null && EditorAPI.IsDocumentObjectSupport( __0x12907 );
				__0x12906.Add( __0x12908 );
			}

			
			{
				var __0x12909 = new KryptonContextMenuItem( __0x13132( "Settings" ), EditorResourcesCache.Settings, delegate ( object __0x13171, EventArgs __0x13172 )
				{
					EditorAPI.SelectDockWindow( EditorAPI.FindWindow<SettingsWindow>() );
				} );
				__0x12906.Add( __0x12909 );
			}

			
			if( EditorUtility.AllowSeparateSettings )
			{
				var __0x12910 = new KryptonContextMenuItem( __0x13132( "Separate Settings" ), EditorResourcesCache.Settings, delegate ( object __0x13173, EventArgs __0x13174 )
				{
					var __0x12911 = __0x12907 ?? ObjectOfWindow;
					bool __0x12912 = !ModifierKeys.HasFlag( Keys.Shift );
					EditorAPI.ShowObjectSettingsWindow( Document, __0x12911, __0x12912 );
				} );
				__0x12910.Enabled = __0x12907 != null || SelectedObjects.Length == 0;
				__0x12906.Add( __0x12910 );
			}

			__0x12906.Add( new KryptonContextMenuSeparator() );

			
			{
				EditorContextMenuWinForms.AddNewObjectItem( __0x12906, CanNewObject( out _ ), delegate ( Metadata.TypeInfo __0x13175 )
				{
					TryNewObject( __0x13175 );
				} );

				
				
				
				
				
				
			}

			
			__0x12906.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x12913 = new KryptonContextMenuItem( __0x13132( "Cut" ), EditorResourcesCache.Cut, delegate ( object __0x13176, EventArgs __0x13177 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Cut" );
				} );
				__0x12913.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Cut" );
				__0x12913.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Cut" ).Enabled;
				__0x12906.Add( __0x12913 );
			}

			
			{
				var __0x12914 = new KryptonContextMenuItem( __0x13132( "Copy" ), EditorResourcesCache.Copy, delegate ( object __0x13178, EventArgs __0x13179 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Copy" );
				} );
				__0x12914.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Copy" );
				__0x12914.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Copy" ).Enabled;
				__0x12906.Add( __0x12914 );
			}

			
			{
				var __0x12915 = new KryptonContextMenuItem( __0x13132( "Paste" ), EditorResourcesCache.Paste, delegate ( object __0x13180, EventArgs __0x13181 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Paste" );
				} );
				__0x12915.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Paste" );
				__0x12915.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Paste" ).Enabled;
				__0x12906.Add( __0x12915 );
			}

			
			{
				var __0x12916 = new KryptonContextMenuItem( __0x13132( "Duplicate" ), EditorResourcesCache.Clone, delegate ( object __0x13182, EventArgs __0x13183 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Duplicate" );
				} );
				__0x12916.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Duplicate" );
				__0x12916.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Duplicate" ).Enabled;
				__0x12906.Add( __0x12916 );
			}

			
			{
				var __0x12917 = new KryptonContextMenuItem( __0x13132( "Export to File" ), null, delegate ( object __0x13184, EventArgs __0x13185 )
				{
					EditorUtility.ExportComponentToFile( __0x12907 );
				} );
				__0x12917.Enabled = __0x12907 != null;
				__0x12906.Add( __0x12917 );
			}

			
			__0x12906.Add( new KryptonContextMenuSeparator() );

			
			{
				var __0x12918 = new KryptonContextMenuItem( __0x13132( "Delete" ), EditorResourcesCache.Delete, delegate ( object __0x13186, EventArgs __0x13187 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Delete" );
				} );
				__0x12918.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Delete" ).Enabled;
				__0x12906.Add( __0x12918 );
			}

			
			{
				var __0x12919 = new KryptonContextMenuItem( __0x13132( "Rename" ), null, delegate ( object __0x13188, EventArgs __0x13189 )
				{
					EditorAPI.EditorActionClick( EditorAction.HolderEnum.ContextMenu, "Rename" );
				} );
				__0x12919.ShortcutKeyDisplayString = EditorActions.GetFirstShortcutKeyString( "Rename" );
				__0x12919.Enabled = EditorAPI.EditorActionGetState( EditorAction.HolderEnum.ContextMenu, "Rename" ).Enabled;
				__0x12906.Add( __0x12919 );
			}

			EditorContextMenuWinForms.AddActionsToMenu( EditorContextMenuWinForms.MenuTypeEnum.Document, __0x12906 );

			EditorContextMenuWinForms.Show( __0x12906, this );
		}

		(UIControl, MoveModeEnum) __0x13131( bool __0x13190 )
		{
			var __0x12920 = ViewportControl.Viewport;
			Vector2 __0x12921 = __0x12920.MousePosition;

			var __0x12922 = new Vector2( EditorAPI.DPI / 96.0 * 4.0, EditorAPI.DPI / 96.0 * 4.0 ) / __0x12920.SizeInPixels.ToVector2();

			foreach( var __0x13105 in __0x13159( false ).GetReverse() )
			{
				bool __0x12923 = false;
				if( __0x13190 && !__0x13133( __0x13105 ) )
					__0x12923 = true;
				if( __0x12892 != null && ( __0x13105 == __0x12892 || __0x13105.GetAllParents( false ).Contains( __0x12892 ) ) )
					__0x12923 = true;

				if( !__0x12923 )
				{
					var __0x12924 = __0x13158( __0x13105 );
					__0x12924.Expand( __0x12922 / 2 );
					if( __0x12924.Contains( __0x12921 ) )
					{
						MoveModeEnum __0x12925 = 0;

						if( __0x12921.X < __0x12924.Left + __0x12922.X )
							__0x12925 |= MoveModeEnum.ResizeLeft;
						else if( __0x12921.X > __0x12924.Right - __0x12922.X )
							__0x12925 |= MoveModeEnum.ResizeRight;

						if( __0x12921.Y < __0x12924.Top + __0x12922.Y )
							__0x12925 |= MoveModeEnum.ResizeTop;
						else if( __0x12921.Y > __0x12924.Bottom - __0x12922.Y )
							__0x12925 |= MoveModeEnum.ResizeBottom;

						if( __0x12925 == 0 )
							__0x12925 = MoveModeEnum.Move;

						return (__0x13105, __0x12925);
					}
				}
			}

			return (null, MoveModeEnum.Move);
		}

		string __0x13132( string __0x13191 )
		{
			return EditorContextMenuWinForms.Translate( __0x13191 );
		}

		

		protected override void ViewportControl_ViewportCreated( EngineViewportControl sender )
		{
			base.ViewportControl_ViewportCreated( sender );
		}

		protected override void ViewportControl_ViewportDestroyed( EngineViewportControl sender )
		{
			__0x13141();

			base.ViewportControl_ViewportDestroyed( sender );
		}

		protected override void Viewport_KeyDown( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyDown( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyPress( Viewport viewport, KeyPressEvent e, ref bool handled )
		{
			base.Viewport_KeyPress( viewport, e, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_KeyUp( Viewport viewport, KeyEvent e, ref bool handled )
		{
			base.Viewport_KeyUp( viewport, e, ref handled );
		}

		protected override void Viewport_MouseDown( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDown( viewport, button, ref handled );
			if( handled )
				return;

			if( button == EMouseButtons.Left )
			{
				var __0x12926 = __0x13131( true );
				var __0x12927 = __0x12926.Item1;
				var __0x12928 = __0x12926.Item2;

				if( __0x12927 != null )
				{
					

					Vector2 __0x12929 = viewport.MousePosition;
					Vector2I __0x12930 = ( __0x12929 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

					__0x12882 = true;
					__0x12883 = false;
					__0x12884 = false;
					__0x12887 = __0x12927;
					__0x12885 = __0x12930;
					__0x12886 = __0x12929;
					

					__0x12888 = new ESet<UIControl>();
					__0x12888.Add( __0x12927 );

					foreach( var __0x13106 in SelectedObjectsSet )
					{
						var __0x12931 = __0x13106 as UIControl;
						if( __0x12931 != null )
							__0x12888.AddWithCheckAlreadyContained( __0x12931 );
					}

					__0x12889 = new Dictionary<UIControl, __0x13215>();
					foreach( var __0x13107 in __0x12888 )
					{
						var __0x12932 = new __0x13215();
						__0x12932.size = __0x13107.Size;
						__0x12932.horizontalAlignment = __0x13107.HorizontalAlignment;
						__0x12932.verticalAlignment = __0x13107.VerticalAlignment;
						__0x12932.margin = __0x13107.Margin;

						
						
						

						__0x12889.Add( __0x13107, __0x12932 );
					}

					__0x12890 = __0x12928;

					handled = true;
					return;
				}
				else
				{
					
					__0x12878 = true;
					__0x12879 = false;
					__0x12880 = viewport.MousePosition;
					
					__0x12881 = __0x12880;
					

					handled = true;
					return;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				Vector2 __0x12933 = viewport.MousePosition;
				Vector2I __0x12934 = ( __0x12933 * viewport.SizeInPixels.ToVector2() ).ToVector2I();

				__0x12873 = true;
				__0x12874 = false;
				__0x12875 = Control.EditorScrollPosition;
				__0x12876 = __0x12934;
				__0x12877 = __0x12933;

				handled = true;
				return;
			}
		}

		protected override void Viewport_MouseUp( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseUp( viewport, button, ref handled );

			
			
			
			
			

			var __0x12935 = __0x13131( true ).Item1;

			var __0x12936 = new ESet<object>( SelectedObjectsSet );

			
			
			if( button == EMouseButtons.Left )
			{
				
				bool __0x12937 = true;

				
				if( __0x12883 )
					__0x12937 = false;
				if( __0x12937 )
				{
					bool __0x12938 = ( Form.ModifierKeys & Keys.Shift ) != 0;
					if( !__0x12938 )
						__0x12936.Clear();

					
					if( __0x12935 != null )
					{
						if( !__0x12936.Contains( __0x12935 ) )
							__0x12936.Add( __0x12935 );
						else
							__0x12936.Remove( __0x12935 );
					}
				}

				
				if( __0x12883 )
				{
					

					

					if( !__0x12884 )
					{
						

						var __0x12939 = new List<UndoActionPropertiesChange.Item>();

						foreach( var __0x13108 in __0x12888 )
						{
							var __0x12940 = __0x12889[ __0x13108 ];

							{
								var __0x12941 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x13108.GetType() ).MetadataGetMemberBySignature( "property:Size" );
								__0x12939.Add( new UndoActionPropertiesChange.Item( __0x13108, __0x12941, __0x12940.size, null ) );
							}
							{
								var __0x12942 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x13108.GetType() ).MetadataGetMemberBySignature( "property:HorizontalAlignment" );
								__0x12939.Add( new UndoActionPropertiesChange.Item( __0x13108, __0x12942, __0x12940.horizontalAlignment, null ) );
							}
							{
								var __0x12943 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x13108.GetType() ).MetadataGetMemberBySignature( "property:VerticalAlignment" );
								__0x12939.Add( new UndoActionPropertiesChange.Item( __0x13108, __0x12943, __0x12940.verticalAlignment, null ) );
							}
							{
								var __0x12944 = (Metadata.Property)MetadataManager.GetTypeOfNetType( __0x13108.GetType() ).MetadataGetMemberBySignature( "property:Margin" );
								__0x12939.Add( new UndoActionPropertiesChange.Item( __0x13108, __0x12944, __0x12940.margin, null ) );
							}
						}

						if( __0x12939.Count != 0 )
						{
							var __0x12945 = new UndoActionPropertiesChange( __0x12939.ToArray() );
							Document.UndoSystem.CommitAction( __0x12945 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x12946 = new UndoActionComponentCreateDelete( Document, __0x12888.ToArray(), true );
						Document.UndoSystem.CommitAction( __0x12946 );
						Document.Modified = true;

						
						SelectObjects( SelectedObjects, forceUpdate: true );
					}
				}
				__0x12882 = false;
				__0x12883 = false;
				__0x12884 = false;
				__0x12887 = null;
				__0x12888 = null;
				__0x12889 = null;
				__0x12885 = Vector2I.Zero;
				__0x12886 = Vector2.Zero;
				
				__0x12890 = MoveModeEnum.Move;
			}

			
			if( button == EMouseButtons.Left )
			{
				if( __0x12878 )
				{
					if( __0x12879 )
					{
						bool __0x12947 = ( Form.ModifierKeys & Keys.Shift ) != 0;
						if( !__0x12947 )
							__0x12936.Clear();

						if( __0x12879 )
						{
							foreach( var __0x13109 in __0x13135() )
								__0x12936.AddWithCheckAlreadyContained( __0x13109 );
						}

						if( __0x12879 )
							handled = true;
					}

					__0x12878 = false;
					__0x12879 = false;
				}
			}

			
			if( button == EMouseButtons.Right )
			{
				if( __0x12874 )
					handled = true;

				__0x12873 = false;
				__0x12874 = false;
			}

			
			SelectObjects( __0x12936 );

			
			if( !handled && button == EMouseButtons.Right )
				__0x13130();
		}

		protected override void Viewport_MouseDoubleClick( Viewport viewport, EMouseButtons button, ref bool handled )
		{
			base.Viewport_MouseDoubleClick( viewport, button, ref handled );
			if( handled )
				return;
		}

		protected override void Viewport_MouseMove( Viewport viewport, Vector2 mouse )
		{
			base.Viewport_MouseMove( viewport, mouse );

			

			if( __0x12882 && !__0x12883 )
			{
				Vector2I __0x12948 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x12949 = __0x12885 - __0x12948;
				if( Math.Abs( __0x12949.X ) > 2 || Math.Abs( __0x12949.Y ) > 2 )
				{
					__0x12883 = true;

					
					if( ( ModifierKeys & Keys.Shift ) != 0 )
					{
						var __0x12950 = __0x12887;
						var __0x12951 = __0x12888;
						var __0x12952 = __0x12889;

						__0x12887 = null;
						__0x12888 = new ESet<UIControl>();
						__0x12889 = new Dictionary<UIControl, __0x13215>();

						

						foreach( var __0x13110 in __0x12951 )
						{
							var __0x12953 = (UIControl)EditorUtility.CloneComponent( __0x13110 );

							if( __0x12950 == __0x13110 )
								__0x12887 = __0x12953;
							__0x12888.Add( __0x12953 );
							__0x12889[ __0x12953 ] = __0x12952[ __0x13110 ];
						}

						__0x12884 = true;

						SelectObjects( __0x12888.ToArray(), updateSettingsWindowSelectObjects: false );

						
						EditorUtility.ShowScreenNotificationObjectsCloned( __0x12888.Count );
					}
				}
			}
			if( __0x12883 )
			{
				Vector2 __0x12954 = ConvertMainScreenToPreviewScreen( viewport.MousePosition - __0x12886, true );

				foreach( var __0x13111 in __0x12888 )
				{
					var __0x12955 = __0x12889[ __0x13111 ];
					var __0x12956 = __0x12955.margin.Value;
					var __0x12957 = __0x12955.size.Value;

					var __0x12958 = __0x13157( __0x13111 );
					if( __0x12958 == null )
						__0x12958 = __0x13111;

					Vector2 __0x12959 = Vector2.Zero;
					if( __0x12956.Measure == UIMeasure.Parent )
					{
						if( __0x12958.ParentControl != null )
							__0x12959 = __0x12954 * __0x12958.ParentControl.GetScreenSize();
					}
					else
						__0x12959 = __0x12958.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12954 ), __0x12956.Measure );

					
					Vector2 __0x12960 = Vector2.Zero;
					if( __0x12957.Measure == UIMeasure.Parent )
					{
						if( __0x12958.ParentControl != null )
							__0x12960 = __0x12954 * __0x12958.ParentControl.GetScreenSize();
					}
					else
						__0x12960 = __0x12958.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x12954 ), __0x12957.Measure );

					Rectangle __0x12961 = __0x12956.Value;
					Vector2 __0x12962 = __0x12957.Value;
					var __0x12963 = false;
					var __0x12964 = false;
					var __0x12965 = false;
					var __0x12966 = false;
					var __0x12967 = false;
					var __0x12968 = false;

					switch( __0x13111.HorizontalAlignment.Value )
					{
					case EHorizontalAlignment.Left:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12963 = true;
								__0x12962.X -= __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12962.X += __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12963 = true;
							}
						}
						break;

					case EHorizontalAlignment.Center:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12963 = true;
								__0x12962.X -= __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12961.Right -= __0x12959.X;
								__0x12964 = true;
								__0x12962.X += __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12961.Right -= __0x12959.X;
								__0x12963 = true;
								__0x12964 = true;
							}
						}
						break;

					case EHorizontalAlignment.Right:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12962.X -= __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12961.Right -= __0x12959.X;
								__0x12964 = true;
								__0x12962.X += __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Right -= __0x12959.X;
								__0x12964 = true;
							}
						}
						break;

					case EHorizontalAlignment.Stretch:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeLeft ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12963 = true;
								__0x12962.X -= __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeRight ) )
							{
								__0x12961.Right -= __0x12959.X;
								__0x12964 = true;
								__0x12962.X += __0x12960.X;
								__0x12967 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Left += __0x12959.X;
								__0x12961.Right -= __0x12959.X;
								__0x12963 = true;
								__0x12964 = true;
							}
						}
						break;
					}

					switch( __0x13111.VerticalAlignment.Value )
					{
					case EVerticalAlignment.Top:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12965 = true;
								__0x12962.Y -= __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12962.Y += __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12965 = true;
							}
						}
						break;

					case EVerticalAlignment.Center:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12965 = true;
								__0x12962.Y -= __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12961.Bottom -= __0x12959.Y;
								__0x12966 = true;
								__0x12962.Y += __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12961.Bottom -= __0x12959.Y;
								__0x12965 = true;
								__0x12966 = true;
							}
						}
						break;

					case EVerticalAlignment.Bottom:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12962.Y -= __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12961.Bottom -= __0x12959.Y;
								__0x12966 = true;
								__0x12962.Y += __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Bottom -= __0x12959.Y;
								__0x12966 = true;
							}
						}
						break;

					case EVerticalAlignment.Stretch:
						{
							if( __0x12890.HasFlag( MoveModeEnum.ResizeTop ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12965 = true;
								__0x12962.Y -= __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.ResizeBottom ) )
							{
								__0x12961.Bottom -= __0x12959.Y;
								__0x12966 = true;
								__0x12962.Y += __0x12960.Y;
								__0x12968 = true;
							}
							else if( __0x12890.HasFlag( MoveModeEnum.Move ) )
							{
								__0x12961.Top += __0x12959.Y;
								__0x12961.Bottom -= __0x12959.Y;
								__0x12965 = true;
								__0x12966 = true;
							}
						}
						break;
					}

					
					if( ModifierKeys.HasFlag( Keys.Control ) )
					{
						double __0x12969 = ProjectSettings.Get.GetUIEditorStepMovement( __0x12956.Measure );
						if( __0x12969 != 0 )
						{
							var __0x12970 = __0x12961;
							Vector2 __0x12971 = new Vector2( __0x12969, __0x12969 );
							__0x12970 += __0x12971 / 2;
							__0x12970 /= __0x12971;
							__0x12970 = new RectangleI( (int)__0x12970.Left, (int)__0x12970.Top, (int)__0x12970.Right, (int)__0x12970.Bottom ).ToRectangle();
							__0x12970 *= __0x12971;

							if( __0x12963 )
								__0x12961.Left = __0x12970.Left;
							if( __0x12965 )
								__0x12961.Top = __0x12970.Top;
							if( __0x12964 )
								__0x12961.Right = __0x12970.Right;
							if( __0x12966 )
								__0x12961.Bottom = __0x12970.Bottom;
						}

						double __0x12972 = ProjectSettings.Get.GetUIEditorStepMovement( __0x12957.Measure );
						if( __0x12972 != 0 )
						{
							var __0x12973 = __0x12962;
							Vector2 __0x12974 = new Vector2( __0x12972, __0x12972 );
							__0x12973 += __0x12974 / 2;
							__0x12973 /= __0x12974;
							__0x12973 = new Vector2I( (int)__0x12973.X, (int)__0x12973.Y ).ToVector2();
							__0x12973 *= __0x12974;

							if( __0x12967 )
								__0x12962.X = __0x12973.X;
							if( __0x12968 )
								__0x12962.Y = __0x12973.Y;
						}
					}

					if( __0x12963 || __0x12965 || __0x12964 || __0x12966 )
						__0x13111.Margin = new UIMeasureValueRectangle( __0x12956.Measure, __0x12961 );
					if( __0x12967 || __0x12968 )
						__0x13111.Size = new UIMeasureValueVector2( __0x12957.Measure, __0x12962 );

					__0x12898 = true;
				}
			}

			
			if( __0x12873 )
			{
				Vector2I __0x12975 = ( mouse * viewport.SizeInPixels.ToVector2() ).ToVector2I();
				Vector2I __0x12976 = __0x12876 - __0x12975;
				if( Math.Abs( __0x12976.X ) > 2 || Math.Abs( __0x12976.Y ) > 2 )
					__0x12874 = true;
			}
			if( __0x12874 )
			{
				Vector2 __0x12977 = mouse - __0x12877;
				Control.EditorScrollPosition = __0x12875 - ConvertScreenToUnit( __0x12977, false );
			}

			
			if( __0x12878 )
			{
				Vector2 __0x12978 = ( viewport.MousePosition - __0x12880 ) * viewport.SizeInPixels.ToVector2();
				if( Math.Abs( __0x12978.X ) >= 3 || Math.Abs( __0x12978.Y ) >= 3 )
					__0x12879 = true;

				__0x12881 = viewport.MousePosition;
				
			}
		}

		protected override void Viewport_MouseRelativeModeChanged( Viewport viewport, ref bool handled )
		{
			base.Viewport_MouseRelativeModeChanged( viewport, ref handled );
		}

		protected override void Viewport_MouseWheel( Viewport viewport, int delta, ref bool handled )
		{
			base.Viewport_MouseWheel( viewport, delta, ref handled );
			if( handled )
				return;

			

			Vector2 __0x12979 = viewport.MousePosition;
			Vector2 __0x12980 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

			
			bool __0x12981 = false;

			if( delta > 0 )
			{
				int __0x12982 = delta / 120;
				if( __0x12982 == 0 )
					__0x12982 = 1;

				for( int __0x12983 = 0; __0x12983 < __0x12982; __0x12983++ )
				{
					if( Control.EditorZoomIndex < __0x12871.Length - 1 )
					{
						Control.EditorZoomIndex++;
						__0x12981 = true;
					}
				}
			}
			else if( delta < 0 )
			{
				int __0x12984 = -delta / 120;
				if( __0x12984 == 0 )
					__0x12984 = 1;

				for( int __0x12985 = 0; __0x12985 < __0x12984; __0x12985++ )
				{
					if( Control.EditorZoomIndex > 0 )
					{
						Control.EditorZoomIndex--;
						__0x12981 = true;
					}
				}
			}

			if( __0x12981 )
			{
				Vector2 __0x12986 = ConvertScreenToUnit( new Vector2( 1, 1 ), false );

				Vector2 __0x12987 = __0x12980 * ( __0x12979 - new Vector2( 0.5, 0.5 ) );
				Vector2 __0x12988 = __0x12986 * ( __0x12979 - new Vector2( 0.5, 0.5 ) );

				Vector2 __0x12989 = Control.EditorScrollPosition;
				__0x12989 += __0x12987;
				__0x12989 -= __0x12988;
				Control.EditorScrollPosition = __0x12989;

				AddScreenMessage( string.Format( "Zoom {0}", GetZoom() ) );
			}

			handled = true;
		}

		protected override void Viewport_Tick( Viewport viewport, float delta )
		{
			base.Viewport_Tick( viewport, delta );

			__0x13144( delta );
		}

		protected override void Viewport_UpdateBegin( Viewport viewport )
		{
			base.Viewport_UpdateBegin( viewport );
		}

		bool __0x13133( UIControl __0x13192 )
		{
			if( __0x13192.VisibleInHierarchy && __0x13192.CanBeSelectedInHierarchy && __0x13192.TypeSettingsIsPublic() )
				return true;

			return false;
		}

		List<UIControl> __0x13134( Rectangle __0x13193 )
		{
			var __0x12990 = new List<UIControl>();
			foreach( var __0x13112 in __0x13159( false ) )
			{
				if( __0x13133( __0x13112 ) )
				{
					var __0x12991 = __0x13158( __0x13112 );
					if( __0x12991.Intersects( __0x13193 ) )
						__0x12990.Add( __0x13112 );
				}
			}

			

			var __0x12992 = new List<UIControl>( __0x12990.Count );

			var __0x12993 = new ESet<Component>( __0x12990.Count );
			foreach( var __0x13113 in __0x12990 )
				__0x12993.AddRangeWithCheckAlreadyContained( __0x13113.GetAllParents( false ) );

			foreach( var __0x13114 in __0x12990 )
				if( !__0x12993.Contains( __0x13114 ) )
					__0x12992.Add( __0x13114 );

			return __0x12992;
		}

		ESet<UIControl> __0x13135()
		{
			var __0x12994 = new ESet<UIControl>();
			if( __0x12879 )
			{
				foreach( var __0x13115 in __0x13134( SelectByRectangle_GetRectangleInScreen() ) )
					__0x12994.Add( __0x13115 );
			}
			return __0x12994;
		}

		bool __0x13136()
		{
			if( __0x12883 )
				return false;
			return true;
		}

		protected virtual void RenderBackground()
		{
			var __0x12995 = this;

			var __0x12996 = __0x12995.ViewportControl.Viewport;
			var __0x12997 = __0x12996.CanvasRenderer;

			RectangleI __0x12998 = __0x12995.GetVisibleCells();

			
			__0x12997.AddQuad( new Rectangle( 0, 0, 1, 1 ), new ColorValue( .17f, .17f, .17f ) );

			
			if( __0x12995.GetZoom() > .5f && ProjectSettings.Get.UIEditorDisplayGrid )
			{
				var __0x12999 = new List<CanvasRenderer.LineItem>( 256 );

				{
					ColorValue __0x13000 = new ColorValue( .2f, .2f, .2f );
					for( int __0x13001 = __0x12998.Left; __0x13001 <= __0x12998.Right; __0x13001++ )
					{
						if( __0x13001 % 10 != 0 )
						{
							var __0x13002 = (float)__0x12995.ConvertUnitToScreenX( __0x13001 );
							__0x12999.Add( new CanvasRenderer.LineItem( new Vector2F( __0x13002, 0 ), new Vector2F( __0x13002, 1 ), __0x13000 ) );
						}
					}
					for( int __0x13003 = __0x12998.Top; __0x13003 <= __0x12998.Bottom; __0x13003++ )
					{
						if( __0x13003 % 10 != 0 )
						{
							var __0x13004 = (float)__0x12995.ConvertUnitToScreenY( __0x13003 );
							__0x12999.Add( new CanvasRenderer.LineItem( new Vector2F( 0, __0x13004 ), new Vector2F( 1, __0x13004 ), __0x13000 ) );
						}
					}
				}

				{
					ColorValue __0x13005 = new ColorValue( .1f, .1f, .1f );
					for( int __0x13006 = __0x12998.Left; __0x13006 <= __0x12998.Right; __0x13006++ )
					{
						if( __0x13006 % 10 == 0 )
						{
							var __0x13007 = (float)__0x12995.ConvertUnitToScreenX( __0x13006 );
							__0x12999.Add( new CanvasRenderer.LineItem( new Vector2F( __0x13007, 0 ), new Vector2F( __0x13007, 1 ), __0x13005 ) );
						}
					}
					for( int __0x13008 = __0x12998.Top; __0x13008 <= __0x12998.Bottom; __0x13008++ )
					{
						if( __0x13008 % 10 == 0 )
						{
							var __0x13009 = (float)__0x12995.ConvertUnitToScreenY( __0x13008 );
							__0x12999.Add( new CanvasRenderer.LineItem( new Vector2F( 0, __0x13009 ), new Vector2F( 1, __0x13009 ), __0x13005 ) );
						}
					}
				}

				__0x12996.CanvasRenderer.AddLines( __0x12999 );
			}
		}

		ColorValue __0x13137( EditorRenderSelectionState __0x13194 )
		{
			switch( __0x13194 )
			{
			case EditorRenderSelectionState.CanSelect: return new ColorValue( 1, 1, 0 );
			case EditorRenderSelectionState.Selected: return new ColorValue( 0, 1, 0 );
			}
			return new ColorValue( 1, 1, 1 );
		}

		protected override void Viewport_UpdateBeforeOutput( Viewport viewport )
		{
			base.Viewport_UpdateBeforeOutput( viewport );

			

			var __0x13010 = viewport.CanvasRenderer;

			var __0x13011 = __0x13131( true );
			var __0x13012 = __0x13011.Item1;
			var __0x13013 = __0x13011.Item2;

			__0x13128( __0x13010 );

			RenderBackground();
			__0x13138();

			
			{
				
				if( __0x12896 != null && __0x12896.CreateSize.Value != __0x13139() )
					__0x13141();
				if( __0x12896 == null )
					__0x13140();

				if( __0x12898 )
					__0x13142();

				
				if( __0x12896 != null )
				{
					Rectangle __0x13014 = GetViewportRectangleInScreenCoords();
					__0x13010.PushTextureFilteringMode( CanvasRenderer.TextureFilteringMode.Point );
					__0x13010.AddQuad( __0x13014, new Rectangle( 0, 0, 1, 1 ), __0x12896, ColorValue.One, true );
					__0x13010.PopTextureFilteringMode();
				}
			}

			
			if( __0x12891 && __0x12892 != null && __0x12892 is UIControl )
			{
				var __0x13015 = __0x13131( false ).Item1;
				if( __0x13015 == null )
					__0x13015 = Control;

				if( __0x13015 != null )
				{
					var __0x13016 = __0x13158( __0x13015 );
					var __0x13017 = ProjectSettings.Get.CanSelectColor;
					__0x13010.AddRectangle( __0x13016, __0x13017 );
				}
			}

			
			{
				

				var __0x13018 = __0x13135();

				foreach( var __0x13116 in __0x13159( true ) )
				{
					
					var __0x13019 = EditorRenderSelectionState.None;

					if( __0x12891 )
					{
						if( __0x13116 == __0x12892 )
							__0x13019 = EditorRenderSelectionState.CanSelect;
					}
					else
					{
						if( __0x13136() )
						{
							if( __0x13012 == __0x13116 )
							{
								__0x13019 = EditorRenderSelectionState.CanSelect;

								ViewportControl.OneFrameChangeCursor = __0x13160( __0x13013 );
							}

							if( __0x13018.Contains( __0x13116 ) )
								__0x13019 = EditorRenderSelectionState.CanSelect;
						}
						
						

						if( IsObjectSelected( __0x13116 ) )
							__0x13019 = EditorRenderSelectionState.Selected;
					}

					if( __0x13019 != EditorRenderSelectionState.None )
					{
						var __0x13020 = __0x13137( __0x13019 );
						

						var __0x13021 = __0x13158( __0x13116 );

						
						
						

						ColorValue __0x13022;
						if( __0x13019 == EditorRenderSelectionState.Selected )
							__0x13022 = ProjectSettings.Get.SelectedColor;
						else
							__0x13022 = ProjectSettings.Get.CanSelectColor;

						var __0x13023 = __0x13022;
						__0x13023.Alpha *= .5f;

						
						__0x13010.AddQuad( __0x13021, __0x13023 * __0x13020 );
						__0x13010.AddRectangle( __0x13021, __0x13022 * __0x13020 );
					}
				}
			}

			
			if( __0x12878 && __0x12879 )
			{
				Rectangle __0x13024 = new Rectangle( __0x12880 );
				
				__0x13024.Add( viewport.MousePosition );

				Vector2I __0x13025 = viewport.SizeInPixels;
				Vector2 __0x13026 = new Vector2( 1.0f / (float)__0x13025.X, 1.0f / (float)__0x13025.Y );

				__0x13010.AddRectangle( __0x13024 + __0x13026, new ColorValue( 0, 0, 0, .5f ) );
				__0x13010.AddRectangle( __0x13024, new ColorValue( 0, 1, 0, 1 ) );

				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
				
			}

			
			
			
			

			
			
			

			
			
			
			
			
			
			
			
			
			

			
			
			
			
			
			
			
			

			
			
			
			

			
			
			

			
			
			
			
			
			

			if( __0x12882 )
				ViewportControl.OneFrameChangeCursor = __0x13160( __0x12890 );
		}

		protected override void Viewport_UpdateEnd( Viewport viewport )
		{
			base.Viewport_UpdateEnd( viewport );
		}

		[Browsable( false )]
		public Component_Font ControlFont
		{
			get { return __0x12870; }
		}

		
		
		
		
		

		
		
		
		
		

		
		
		
		
		

		public override void EditorActionGetState( EditorAction.GetStateContext context )
		{
			base.EditorActionGetState( context );

			

			switch( context.Action.Name )
			{
			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
				if( CanSnap( out _ ) )
					context.Enabled = true;
				break;
			}
		}

		public override void EditorActionClick( EditorAction.ClickContext context )
		{
			base.EditorActionClick( context );

			switch( context.Action.Name )
			{
			case "Snap All Axes":
			case "Snap X":
			case "Snap Y":
				Snap( context.Action );
				break;
			}
		}

		public bool CanNewObject( out List<Component> parentsForNewObjects )
		{
			parentsForNewObjects = new List<Component>();

			foreach( var __0x13117 in SelectedObjects )
			{
				var __0x13027 = __0x13117 as Component;
				if( __0x13027 != null )
					parentsForNewObjects.Add( __0x13027 );
			}

			
			if( parentsForNewObjects.Count == 0 )
				parentsForNewObjects.Add( Control );
			return true;
		}

		public void TryNewObject( Metadata.TypeInfo lockType )
		{
			if( !CanNewObject( out List<Component> parentsForNewObjects ) )
				return;

			bool __0x13028 = false;
			Vector2 __0x13029 = Vector2.Zero;
			if( parentsForNewObjects.Count == 1 )
			{
				var __0x13030 = parentsForNewObjects[ 0 ] as UIControl;
				if( __0x13030 != null )
				{
					__0x13028 = true;

					var __0x13031 = ConvertMainScreenToPreviewScreen( ViewportControl.Viewport.MousePosition );

					var __0x13032 = __0x13157( __0x13030 );
					if( __0x13032 == null )
						__0x13032 = __0x13030;

					var __0x13033 = __0x13031 - __0x13032.GetScreenPosition();
					__0x13029 = __0x13032.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x13033 ), UIMeasure.Units );
				}
			}

			var __0x13034 = new NewObjectWindow.CreationDataClass();
			__0x13034.initDocumentWindow = this;
			__0x13034.initParentObjects = new List<object>();
			__0x13034.initParentObjects.AddRange( parentsForNewObjects );

			
			
			
			
			

			
			
			
			

			
			

			
			
			
			

			

			
			
			

			
			
			
			

			
			

			
			__0x13034.additionActionBeforeEnabled = delegate ( NewObjectWindow __0x13195 )
			{
				if( __0x13028 )
				{
					foreach( var __0x13118 in __0x13034.createdComponentsOnTopLevel )
					{
						var __0x13035 = __0x13118 as UIControl;
						if( __0x13035 != null )
							__0x13035.Margin = new UIMeasureValueRectangle( UIMeasure.Units, __0x13029.X, __0x13029.Y, 0, 0 );
					}
				}
			};

			__0x13034.initLockType = lockType;
			__0x13034.initSupportAutoCreateAndClose = lockType != null;

			EditorAPI.OpenNewObjectWindow( __0x13034 );
		}

		public Rectangle GetViewportRectangleInUnits()
		{
			var __0x13036 = ProjectSettings.Get.UIEditorAspectRatio.Value;

			var __0x13037 = 0.9 / __0x13124();
			var __0x13038 = 0.9 / __0x13125();

			Vector2 __0x13039;
			if( __0x13037 < __0x13038 * __0x13036 )
				__0x13039 = new Vector2( __0x13037, __0x13037 / __0x13036 );
			else
				__0x13039 = new Vector2( __0x13038 * __0x13036, __0x13038 );

			return new Rectangle( -__0x13039 / 2, __0x13039 / 2 );
		}

		public Rectangle GetViewportRectangleInScreenCoords()
		{
			return ConvertUnitToScreen( GetViewportRectangleInUnits() );
		}

		void __0x13138()
		{
			var __0x13040 = ViewportControl.Viewport;
			var __0x13041 = __0x13040.CanvasRenderer;

			Rectangle __0x13042 = GetViewportRectangleInScreenCoords();

			
			var __0x13043 = new ColorValue( 0.5, 0.5, 0.5, 0.5 );
			

			__0x13041.AddLine( new Vector2( 0, __0x13042.Top ), new Vector2( 1, __0x13042.Top ), __0x13043 );
			__0x13041.AddLine( new Vector2( 0, __0x13042.Bottom ), new Vector2( 1, __0x13042.Bottom ), __0x13043 );
			__0x13041.AddLine( new Vector2( __0x13042.Left, 0 ), new Vector2( __0x13042.Left, 1 ), __0x13043 );
			__0x13041.AddLine( new Vector2( __0x13042.Right, 0 ), new Vector2( __0x13042.Right, 1 ), __0x13043 );
			
		}

		Vector2I __0x13139()
		{
			var __0x13044 = ( ViewportControl.Viewport.SizeInPixels.ToVector2() * GetViewportRectangleInScreenCoords().Size ).ToVector2I();
			if( __0x13044.X < 1 )
				__0x13044.X = 1;
			if( __0x13044.Y < 1 )
				__0x13044.Y = 1;
			return __0x13044;
		}

		

		
		
		

		

		
		
		
		

		
		
		

		
		
		
		

		
		
		
		
		
		

		
		
		
		
		
		
		
		

		public double ConvertPreviewScreenToMainScreenX( double screenX )
		{
			var __0x13045 = GetViewportRectangleInScreenCoords();
			return __0x13045.Left + screenX * __0x13045.Size.X;
		}

		public double ConvertPreviewScreenToMainScreenY( double screenY )
		{
			var __0x13046 = GetViewportRectangleInScreenCoords();
			return __0x13046.Top + screenY * __0x13046.Size.Y;
		}

		public Vector2 ConvertPreviewScreenToMainScreen( Vector2 screen )
		{
			return new Vector2(
				ConvertPreviewScreenToMainScreenX( screen.X ),
				ConvertPreviewScreenToMainScreenY( screen.Y ) );
		}

		public Rectangle ConvertPreviewScreenToMainScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertPreviewScreenToMainScreenX( rect.Left ),
				ConvertPreviewScreenToMainScreenY( rect.Top ),
				ConvertPreviewScreenToMainScreenX( rect.Right ),
				ConvertPreviewScreenToMainScreenY( rect.Bottom ) );
		}

		public double ConvertMainScreenToPreviewScreenX( double screenX, bool offset = false )
		{
			var __0x13047 = GetViewportRectangleInScreenCoords();
			var __0x13048 = screenX;
			if( !offset )
				__0x13048 -= __0x13047.Left;
			if( __0x13047.Size.X != 0 )
				__0x13048 /= __0x13047.Size.X;
			return __0x13048;
		}

		public double ConvertMainScreenToPreviewScreenY( double screenY, bool offset = false )
		{
			var __0x13049 = GetViewportRectangleInScreenCoords();
			var __0x13050 = screenY;
			if( !offset )
				__0x13050 -= __0x13049.Top;
			if( __0x13049.Size.Y != 0 )
				__0x13050 /= __0x13049.Size.Y;
			return __0x13050;
		}

		public Vector2 ConvertMainScreenToPreviewScreen( Vector2 screen, bool offset = false )
		{
			return new Vector2(
				ConvertMainScreenToPreviewScreenX( screen.X, offset ),
				ConvertMainScreenToPreviewScreenY( screen.Y, offset ) );
		}

		public Rectangle ConvertMainScreenToPreviewScreen( Rectangle rect )
		{
			return new Rectangle(
				ConvertMainScreenToPreviewScreenX( rect.Left ),
				ConvertMainScreenToPreviewScreenY( rect.Top ),
				ConvertMainScreenToPreviewScreenX( rect.Right ),
				ConvertMainScreenToPreviewScreenY( rect.Bottom ) );
		}

		

		void __0x13140()
		{
			__0x13141();

			var __0x13051 = ComponentUtility.CreateComponent<Component_Image>( null, true, false );
			__0x13051.CreateType = Component_Image.TypeEnum._2D;
			__0x13051.CreateSize = __0x13139();
			__0x13051.CreateMipmaps = false;
			__0x13051.CreateFormat = PixelFormat.A8R8G8B8;
			__0x13051.CreateUsage = Component_Image.Usages.RenderTarget;
			__0x13051.CreateFSAA = 0;
			__0x13051.Enabled = true;

			
			
			
			
			
			
			

			var __0x13052 = __0x13051.Result.GetRenderTarget();
			var __0x13053 = __0x13052.AddViewport( true, true );
			__0x13053.RenderingPipelineCreate();
			__0x13053.RenderingPipelineCreated.UseRenderTargets = false;
			__0x13053.RenderingPipelineCreated.BackgroundColorOverride = new ColorValue( 0, 0, 0, 0 );

			__0x12896 = __0x13051;

			__0x13053.UpdateBeforeOutput += __0x13145;

			__0x13142();
		}

		void __0x13141()
		{
			if( __0x12896 != null )
			{
				__0x13143();

				__0x12896.Dispose();
				__0x12896 = null;
			}
		}

		void __0x13142()
		{
			__0x13143();

			if( __0x12896 != null )
			{
				var __0x13054 = __0x12896.Result.GetRenderTarget().Viewports[ 0 ];

				__0x12897 = (UIControl)Control.Clone();
				__0x13054.UIContainer.AddComponent( __0x12897 );

				__0x12898 = false;

				
				
				__0x13144( 0.0001f );
				
			}
		}

		void __0x13143()
		{
			__0x12897?.Dispose();
			__0x12897 = null;
		}

		void __0x13144( float __0x13196 )
		{
			
			if( __0x12896 != null && ViewportControl.IsAllowRender() && !__0x12898 )
			{
				var __0x13055 = __0x12896.Result.GetRenderTarget().Viewports[ 0 ];
				__0x13055.PerformTick( __0x13196 );
				__0x13055.Update( true );
			}
		}

		private void __0x13145( Viewport __0x13197 )
		{
			
			__0x13197.UIContainer.PerformRenderUI( __0x13197.CanvasRenderer );
		}

		private void __0x13146( object __0x13198, EventArgs __0x13199 )
		{
			__0x12898 = true;
		}

		private void __0x13147( object __0x13200, DragEventArgs __0x13201 )
		{
			__0x12891 = true;

			__0x13151( __0x13201 );

			
			
			
			
		}

		private void __0x13148( object __0x13202, DragEventArgs __0x13203 )
		{
			__0x13203.Effect = DragDropEffects.None;

			
			ViewportControl?.PerformMouseMove();

			__0x13154();
			if( __0x12892 != null )
				__0x13203.Effect = DragDropEffects.Link;

			DragDropSetReferenceData __0x13056 = (DragDropSetReferenceData)__0x13203.Data.GetData( typeof( DragDropSetReferenceData ) );
			if( __0x13056 != null )
				__0x12893 = __0x13056;
			if( __0x12893 != null && __0x12894 )
				__0x13203.Effect = DragDropEffects.Link;

			
			ViewportControl.TryRender();
		}

		private void __0x13149( object __0x13204, EventArgs __0x13205 )
		{
			__0x13152();

			__0x12891 = false;
			__0x12893 = null;

			
			ViewportControl.TryRender();
		}

		private void __0x13150( object __0x13206, DragEventArgs __0x13207 )
		{
			__0x13155();

			if( __0x12893 != null )
			{
				if( __0x12894 )
				{
					__0x12893.SetProperty( __0x12895 );
					__0x12894 = false;
				}
				__0x12893 = null;
			}

			__0x12891 = false;
		}

		void __0x13151( DragEventArgs __0x13208 )
		{
			Metadata.TypeInfo __0x13057 = null;
			
			
			
			{
				var __0x13058 = ContentBrowser.GetDroppingItemData( __0x13208.Data );
				if( __0x13058 != null )
				{
					var __0x13059 = __0x13058.Item;
					

					
					var __0x13060 = __0x13059 as ContentBrowserItem_File;
					if( __0x13060 != null && !__0x13060.IsDirectory )
					{
						
						var __0x13061 = Path.GetExtension( __0x13060.FullPath );
						if( ResourceManager.GetTypeByFileExtension( __0x13061 ) != null )
						{
							var __0x13062 = ResourceManager.GetByName( VirtualPathUtility.GetVirtualPathByReal( __0x13060.FullPath ) );

							var __0x13063 = __0x13062?.PrimaryInstance?.ResultComponent?.GetProvidedType();
							if( __0x13063 != null )
								__0x13057 = __0x13063;
						}
					}

					
					var __0x13064 = __0x13059 as ContentBrowserItem_Type;
					if( __0x13064 != null )
					{
						var __0x13065 = __0x13064.Type;

						

						

						if( MetadataManager.GetTypeOfNetType( typeof( Component ) ).IsAssignableFrom( __0x13065 ) && !__0x13065.Abstract )
							__0x13057 = __0x13065;
					}

					
					
					
					
					

					

					
					
					

					

					
					
					

					
					
					
					
					

					
					
					
					
					

					
					var __0x13066 = __0x13059 as ContentBrowserItem_Component;
					if( __0x13066 != null )
					{
						var __0x13067 = __0x13066.Component;

						if( Control.ParentRoot == __0x13067.ParentRoot )
						{
							
							
						}
						else
						{
							var __0x13068 = __0x13067.ParentRoot?.HierarchyController.CreatedByResource;
							if( __0x13068 != null )
							{
								
								__0x13057 = __0x13067.GetProvidedType();
							}
						}
					}
				}
			}

			if( __0x13057 != null && MetadataManager.GetTypeOfNetType( typeof( UIControl ) ).IsAssignableFrom( __0x13057 ) )
			{
				
				

				

				

				var __0x13069 = (UIControl)Control.CreateComponent( __0x13057 );
				

				

				
				

				
				
				
				
				
				

				
				
				
				
				
				
				
				
				
				

				
				

				
				
				

				
				

				
				

				
				if( __0x13069.Size.Value == new UIMeasureValueVector2( UIMeasure.Parent, 1, 1 ) )
					__0x13069.Size = new UIMeasureValueVector2( UIMeasure.Units, 400, 400 );

				
				__0x13069.Name = ComponentUtility.GetNewObjectUniqueName( __0x13069 );

				__0x13069.NewObjectSetDefaultConfiguration();

				
				__0x13069.Enabled = true;
				__0x12892 = __0x13069;

				__0x13154();

				
			}
		}

		void __0x13152()
		{
			if( __0x12892 != null )
			{
				__0x12892.RemoveFromParent( true );
				__0x12892.Dispose();
				__0x12892 = null;

				__0x12898 = true;
			}
		}

		void __0x13153( UIControl __0x13209, bool __0x13210 )
		{
			var __0x13070 = ViewportControl.Viewport;
			Vector2 __0x13071 = __0x13070.MousePosition;
			if( !new Rectangle( 0, 0, 1, 1 ).Contains( __0x13071 ) )
				__0x13071 = new Vector2( 0.5, 0.5 );

			var __0x13072 = __0x13157( __0x13209 );
			if( __0x13072 == null )
				__0x13072 = __0x13209;

			var __0x13073 = ConvertMainScreenToPreviewScreen( __0x13071 );
			if( __0x13210 )
				__0x13073 -= __0x13072.GetScreenSize() / 2;

			
			Vector2 __0x13074 = Vector2.Zero;
			UIControl __0x13075 = __0x13072.Parent as UIControl;
			if( __0x13075 != null )
				__0x13074 = __0x13075.GetScreenPosition();
			__0x13073 -= __0x13074;

			var __0x13076 = __0x13072.ConvertOffset( new UIMeasureValueVector2( UIMeasure.Screen, __0x13073 ), UIMeasure.Units );

			
			if( ModifierKeys.HasFlag( Keys.Control ) )
			{
				var __0x13077 = ProjectSettings.Get.GetUIEditorStepMovement( UIMeasure.Units );
				if( __0x13077 != 0 )
				{
					Vector2 __0x13078 = new Vector2( __0x13077, __0x13077 );
					__0x13076 += __0x13078 / 2;
					__0x13076 /= __0x13078;
					__0x13076 = new Vector2I( (int)__0x13076.X, (int)__0x13076.Y ).ToVector2();
					__0x13076 *= __0x13078;
				}
			}

			__0x13209.Margin = new UIMeasureValueRectangle( UIMeasure.Units, __0x13076.X, __0x13076.Y, 0, 0 );

			


			
			
			

			
			
			

			__0x12898 = true;
		}

		void __0x13154()
		{
			if( __0x12892 != null && __0x12892 is UIControl control )
			{
				
				{
					var __0x13079 = __0x13131( false ).Item1;
					if( __0x13079 == null )
						__0x13079 = Control;

					if( __0x13079 != null && control.Parent != __0x13079 )
					{
						control.RemoveFromParent( false );
						__0x13079.AddComponent( control );
					}
				}

				
				__0x13153( control, true );
			}
		}

		void __0x13155()
		{
			if( __0x12892 != null )
			{
				var __0x13080 = __0x12892;

				
				var __0x13081 = new List<Component>();
				__0x13081.Add( __0x12892 );
				var __0x13082 = new UndoActionComponentCreateDelete( Document, __0x13081, true );
				Document.UndoSystem.CommitAction( __0x13082 );
				Document.Modified = true;

				__0x12892 = null;

				
				EditorAPI.SelectComponentsInMainObjectsWindow( this, new Component[] { __0x13080 } );

				EditorAPI.SelectDockWindow( this );
			}
		}

		void __0x13156()
		{
			__0x12872 = 14;

			float __0x13083 = EditorAPI.DPI;
			if( __0x13083 > 96 )
			{
				__0x12872 *= __0x13083 / 96;
				__0x12872 = (int)__0x12872;
			}
		}

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		

		
		
		

		public override bool Paste()
		{
			if( !CanPaste( out var destinationParent ) )
				return false;

			var __0x13084 = ClipboardManager.GetFromClipboard<ObjectCutCopyPasteData>();
			if( __0x13084 != null )
			{
				var __0x13085 = new List<Component>();
				foreach( var __0x13119 in __0x13084.objects )
				{
					var __0x13086 = __0x13119 as Component;
					if( __0x13086 != null )
						__0x13085.Add( __0x13086 );
				}

				

				var __0x13087 = new List<Component>();
				
				

				for( int __0x13088 = 0; __0x13088 < __0x13085.Count; __0x13088++ )
				{
					var __0x13089 = __0x13085[ __0x13088 ];

					var __0x13090 = __0x13089.Clone();
					if( destinationParent.GetComponent( __0x13089.Name ) == null )
						__0x13090.Name = __0x13089.Name;
					else
						__0x13090.Name = destinationParent.Components.GetUniqueName( __0x13089.Name, true, 2 );
					destinationParent.AddComponent( __0x13090 );

					
					
					{
						var __0x13091 = __0x13090 as UIControl;
						if( __0x13091 != null )
						{
							if( __0x13088 == 0 )
							{
								__0x13153( __0x13091, false );

								
								
							}
							else
							{
								
								
							}
						}
					}

					__0x13087.Add( __0x13090 );
				}

				if( __0x13084.cut )
				{
					
					if( __0x13084.documentWindow.Document != Document )
					{
						
						{
							var __0x13092 = new UndoActionComponentCreateDelete( __0x13084.documentWindow.Document, __0x13085, false );
							__0x13084.documentWindow.Document.UndoSystem.CommitAction( __0x13092 );
							__0x13084.documentWindow.Document.Modified = true;
						}
						{
							var __0x13093 = new UndoActionComponentCreateDelete( Document, __0x13087, true );
							Document.UndoSystem.CommitAction( __0x13093 );
							Document.Modified = true;
						}
					}
					else
					{
						
						var __0x13094 = new UndoMultiAction();
						__0x13094.AddAction( new UndoActionComponentCreateDelete( Document, __0x13085, false ) );
						__0x13094.AddAction( new UndoActionComponentCreateDelete( Document, __0x13087, true ) );
						Document.UndoSystem.CommitAction( __0x13094 );
						Document.Modified = true;
					}
				}
				else
				{
					
					var __0x13095 = new UndoActionComponentCreateDelete( Document, __0x13087, true );
					Document.UndoSystem.CommitAction( __0x13095 );
					Document.Modified = true;
				}
			}

			return true;
		}

		UIControl __0x13157( UIControl __0x13211 )
		{
			if( __0x12897 != null )
			{
				if( __0x13211 == Control )
					return __0x12897;
				else
					return __0x12897.GetComponentByPath( __0x13211.GetPathFromRoot() ) as UIControl;
			}
			return null;
		}

		Rectangle __0x13158( UIControl __0x13212 )
		{
			var __0x13096 = __0x13157( __0x13212 );
			if( __0x13096 != null )
				return ConvertPreviewScreenToMainScreen( __0x13096.GetScreenRectangle() );
			return new Rectangle( 0, 0, 1, 1 );
		}

		List<UIControl> __0x13159( bool __0x13213 )
		{
			var __0x13097 = new List<UIControl>( 256 );
			if( __0x13213 )
				__0x13097.Add( Control );
			__0x13097.AddRange( Control.GetComponents<UIControl>( false, true ) );
			return __0x13097;
		}

		public bool CanSnap( out List<UIControl> resultObjects )
		{
			resultObjects = new List<UIControl>();
			foreach( var __0x13120 in SelectedObjects.OfType<UIControl>() )
				resultObjects.Add( __0x13120 );
			return resultObjects.Count != 0;
		}

		public void Snap( EditorAction action )
		{
			if( !CanSnap( out var objects ) )
				return;

			var __0x13098 = (Metadata.Property)MetadataManager.GetTypeOfNetType( typeof( UIControl ) ).MetadataGetMemberBySignature( "property:Margin" );

			var __0x13099 = new List<UndoActionPropertiesChange.Item>();
			foreach( var __0x13121 in objects )
			{
				var __0x13100 = __0x13121.Margin;

				var __0x13101 = __0x13121.Margin.Value;

				var __0x13102 = ProjectSettings.Get.GetUIEditorStepMovement( __0x13101.Measure );
				if( __0x13102 != 0 )
				{
					if( action.Name == "Snap All Axes" || action.Name == "Snap X" )
					{
						__0x13101.Left = ( (long)( __0x13101.Left / __0x13102 + ( __0x13101.Left > 0 ? 0.5 : -0.5 ) ) ) * __0x13102;
						__0x13101.Right = ( (long)( __0x13101.Right / __0x13102 + ( __0x13101.Right > 0 ? 0.5 : -0.5 ) ) ) * __0x13102;
					}
					if( action.Name == "Snap All Axes" || action.Name == "Snap Y" )
					{
						__0x13101.Top = ( (long)( __0x13101.Top / __0x13102 + ( __0x13101.Top > 0 ? 0.5 : -0.5 ) ) ) * __0x13102;
						__0x13101.Bottom = ( (long)( __0x13101.Bottom / __0x13102 + ( __0x13101.Bottom > 0 ? 0.5 : -0.5 ) ) ) * __0x13102;
					}
				}
				__0x13121.Margin = new UIMeasureValueRectangle( __0x13101.Measure, __0x13101.Value );

				__0x13099.Add( new UndoActionPropertiesChange.Item( __0x13121, __0x13098, __0x13100, null ) );
			}

			if( __0x13099.Count != 0 )
			{
				var __0x13103 = new UndoActionPropertiesChange( __0x13099.ToArray() );
				Document.UndoSystem.CommitAction( __0x13103 );
				Document.Modified = true;
			}
		}

		Cursor __0x13160( MoveModeEnum __0x13214 )
		{
			switch( __0x13214 )
			{
			case MoveModeEnum.ResizeLeft | MoveModeEnum.ResizeTop:
			case MoveModeEnum.ResizeRight | MoveModeEnum.ResizeBottom:
				return KryptonCursors.SizeNWSE;

			case MoveModeEnum.ResizeLeft | MoveModeEnum.ResizeBottom:
			case MoveModeEnum.ResizeRight | MoveModeEnum.ResizeTop:
				return KryptonCursors.SizeNESW;

			case MoveModeEnum.ResizeLeft:
			case MoveModeEnum.ResizeRight:
				return KryptonCursors.SizeWE;

			case MoveModeEnum.ResizeTop:
			case MoveModeEnum.ResizeBottom:
				return KryptonCursors.SizeNS;

			case MoveModeEnum.Move:
				return KryptonCursors.SizeAll;
			}

			return Cursors.Default;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class UIControl_DocumentWindow
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13104 = null;

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13161()
		{
			this.SuspendLayout();
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF( 8F, 16F );
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Margin = new System.Windows.Forms.Padding( 4 );
			this.Name = "UIControl_DocumentWindow";
			this.Size = new System.Drawing.Size( 785, 518 );
			this.DragDrop += new System.Windows.Forms.DragEventHandler( this.__0x13150 );
			this.DragEnter += new System.Windows.Forms.DragEventHandler( this.__0x13147 );
			this.DragOver += new System.Windows.Forms.DragEventHandler( this.__0x13148 );
			this.DragLeave += new System.EventHandler( this.__0x13149 );
			this.ResumeLayout( false );

		}

		#endregion
	}
}






namespace NeoAxis.Editor
{
	public class Component_WorldGenerator_SettingsCell : SettingsCellProcedureUI
	{
		ProcedureUI.Button __0x13216;
		

		

		protected override void OnInit()
		{
			__0x13216 = ProcedureForm.CreateButton( EditorLocalization.Translate( "General", "Generate" ) );
			__0x13216.Click += __0x13220;

			
			

			ProcedureForm.AddRow( new ProcedureUI.Control[] { __0x13216 } );
			
		}

		protected override void OnUpdate()
		{
			base.OnUpdate();

			__0x13216.Enabled = GetObjects<Component_WorldGenerator>().Length == 1;
		}

		private void __0x13220( ProcedureUI.Button __0x13221 )
		{
			
			var __0x13217 = "Generate world?\n\nUnable to undo the action.";
			if( EditorMessageBox.ShowQuestion( __0x13217, EMessageBoxButtons.OKCancel ) == EDialogResult.Cancel )
				return;

			var __0x13218 = ScreenNotifications.ShowSticky( "Processing..." );
			try
			{
				foreach( var __0x13219 in GetObjects<Component_WorldGenerator>() )
					__0x13219.Generate( Provider.DocumentWindow.Document );

				
				
				Provider.DocumentWindow.Document?.UndoSystem.Clear();
			}
			finally
			{
				__0x13218.Close();
			}
		}
	}
}





namespace NeoAxis.Editor
{
	public partial class EnumDropDownControl : HCDropDownControl
	{
		HCItemEnumDropDown __0x13222;
		HCItemProperty __0x13223;
		bool __0x13224;
		object __0x13225;
		bool __0x13226;
		Type __0x13227;
		Type __0x13228;
		int __0x13229;

		

		class __0x13341
		{
			public bool SetByCode;
			public object Value;

			public __0x13341( object value )
			{
				Value = value;
			}

			public string DisplayName
			{
				get { return EnumUtility.GetValueDisplayName( Value ); }
			}

			public string Description
			{
				get { return EnumUtility.GetValueDescription( Value ); }
			}
		}

		

		public int DropDownHeight
		{
			get { return __0x13229; }
			set { __0x13229 = value; }
		}

		
		public EnumDropDownControl()
		{
			__0x13322();
		}

		public EnumDropDownControl( HCItemEnumDropDown itemProperty )
		{
			__0x13229 = (int)( (float)200 * EditorAPI.DPIScale );

			__0x13322();

			var __0x13230 = (EngineListView.DefaultListMode)__0x13305.Mode;
			__0x13230.DisplayImages = false;

			this.__0x13222 = itemProperty;

			__0x13227 = ReferenceUtility.GetUnreferencedType( itemProperty.Property.Type.GetNetType() );
			if( __0x13227.IsEnum )
			{
				__0x13228 = Enum.GetUnderlyingType( __0x13227 );
				__0x13226 = __0x13227.IsDefined( typeof( FlagsAttribute ), false );
			}

			__0x13225 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			__0x13223 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13223.SaveValuesToRestore();

			var __0x13231 = new List<EngineListView.Item>();

			__0x13305.CheckBoxes = __0x13226;

			foreach( var __0x13306 in Enum.GetValues( __0x13227 ) )
			{
				var __0x13232 = new __0x13341( __0x13306 );

				var __0x13233 = __0x13232.DisplayName;
				var __0x13234 = __0x13232.Description;
				itemProperty.Owner.PerformOverridePropertyEnumItem( itemProperty, ref __0x13233, ref __0x13234 );

				var __0x13235 = new EngineListView.Item( __0x13305 );
				__0x13235.Text = __0x13233;
				__0x13235.Tag = __0x13232;
				if( !string.IsNullOrEmpty( __0x13234 ) )
				{
					__0x13235.Description = __0x13234;
					__0x13235.ShowTooltip = true;
				}
				__0x13231.Add( __0x13235 );
			}

			__0x13305.SetItems( __0x13231 );

			__0x13317();

			int __0x13236 = __0x13305.Items.Count;
			var __0x13237 = __0x13236 * ( Font.Height + DpiHelper.Default.ScaleValue( 4 ) ) + 3;
			var __0x13238 = ( (IHCProperty)itemProperty.CreatedControl ).EditorControl.Width;

			Size = new Size( __0x13238, Math.Min( __0x13229, __0x13237 ) );
		}

		void __0x13310()
		{
			
			if( !Visible )
				return;

			
			if( __0x13226 )
			{
				foreach( var __0x13307 in __0x13305.CheckedItems )
				{
					__0x13305.SelectedItem = __0x13307;
					__0x13305.CurrentItem = __0x13307;
					__0x13305.EnsureVisible( __0x13307 );
					break;
				}
			}
			else
			{
				foreach( var __0x13308 in __0x13305.Items )
				{
					__0x13341 __0x13239 = __0x13308.Tag as __0x13341;
					if( __0x13239.Value.Equals( __0x13225 ) )
					{
						__0x13305.SelectedItem = __0x13308;
						__0x13305.CurrentItem = __0x13308;
						__0x13305.EnsureVisible( __0x13308 );
						break;
					}
				}
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13240 = keyData & Keys.KeyCode;

			if( __0x13240 == Keys.Return )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13240 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}

		public override void OnHolderOpened()
		{
			base.OnHolderOpened();

			__0x13305.Focus();
			__0x13310();
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			if( __0x13224 )
				__0x13223.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13224 )
				__0x13223.RestoreSavedOldValues();
		}

		void __0x13311()
		{
			if( __0x13222 != null && __0x13222.CanEditValue() )
				__0x13222.SetValue( __0x13225, false );
			__0x13224 = true;
		}

		private void __0x13312( EngineListView __0x13323, EngineListView.Item __0x13324 )
		{
			var __0x13241 = __0x13324.Tag as __0x13341;

			if( __0x13241.SetByCode )
			{
				__0x13241.SetByCode = false;
				return;
			}

			if( __0x13324.Checked )
			{
				if( __0x13321( __0x13228, __0x13241.Value ) ) 
					__0x13225 = Enum.ToObject( __0x13225.GetType(), 0 );
				else
					__0x13320( __0x13228, ref __0x13225, __0x13241.Value );
			}
			else
			{
				object __0x13242 = __0x13225;
				__0x13319( __0x13228, ref __0x13225, __0x13241.Value );

				if( __0x13313() )
					__0x13225 = __0x13242;
			}

			__0x13317();
			__0x13311();
		}

		bool __0x13313()
		{
			if( __0x13321( __0x13228, __0x13225 ) )
			{
				if( !Enum.IsDefined( __0x13227, __0x13225 ) )
					return true;
			}
			return false;
		}

		private void __0x13314( EngineListView __0x13325 )
		{
			if( __0x13226 )
				return;

			if( __0x13305.SelectedItems.Count == 0 )
				return;

			var __0x13243 = __0x13325.SelectedItems[ 0 ].Tag as __0x13341;
			if( !__0x13243.Value.Equals( __0x13225 ) )
			{
				__0x13225 = __0x13243.Value;
				__0x13311();
			}
		}

		private void __0x13315( object __0x13326, MouseEventArgs __0x13327 )
		{
			ParentHolder.Close( true );
		}

		private void __0x13316( object __0x13328, MouseEventArgs __0x13329 )
		{
			if( !__0x13226 )
				ParentHolder.Close( true );
		}

		void __0x13317()
		{
			if( !__0x13226 )
				return;

			foreach( var __0x13309 in __0x13305.Items )
			{
				var __0x13244 = __0x13309.Tag as __0x13341;
				var __0x13245 = __0x13318( Enum.GetUnderlyingType( __0x13227 ), __0x13225, __0x13244.Value );
				if( __0x13309.Checked != __0x13245 )
				{
					__0x13244.SetByCode = true;
					__0x13309.Checked = __0x13245;
				}
			}
		}

		bool __0x13318( Type __0x13330, object __0x13331, object __0x13332 )
		{
			
			bool __0x13246 = __0x13321( __0x13330, __0x13331 );
			bool __0x13247 = __0x13321( __0x13330, __0x13332 );

			if( __0x13246 && __0x13247 )
			{
				return true;
			}
			else if( __0x13246 && !__0x13247 )
			{
				return false;
			}
			else if( !__0x13246 && __0x13247 )
			{
				return false;
			}

			

			if( __0x13330 == typeof( Int16 ) )
			{
				Int16 __0x13248 = Convert.ToInt16( __0x13331 );
				Int16 __0x13249 = Convert.ToInt16( __0x13332 );
				return ( ( __0x13248 & __0x13249 ) == __0x13249 );
			}
			else if( __0x13330 == typeof( UInt16 ) )
			{
				UInt16 __0x13250 = Convert.ToUInt16( __0x13331 );
				UInt16 __0x13251 = Convert.ToUInt16( __0x13332 );
				return ( ( __0x13250 & __0x13251 ) == __0x13251 );
			}
			else if( __0x13330 == typeof( Int32 ) )
			{
				Int32 __0x13252 = Convert.ToInt32( __0x13331 );
				Int32 __0x13253 = Convert.ToInt32( __0x13332 );
				return ( ( __0x13252 & __0x13253 ) == __0x13253 );
			}
			else if( __0x13330 == typeof( UInt32 ) )
			{
				UInt32 __0x13254 = Convert.ToUInt32( __0x13331 );
				UInt32 __0x13255 = Convert.ToUInt32( __0x13332 );
				return ( ( __0x13254 & __0x13255 ) == __0x13255 );
			}
			else if( __0x13330 == typeof( Int64 ) )
			{
				Int64 __0x13256 = Convert.ToInt64( __0x13331 );
				Int64 __0x13257 = Convert.ToInt64( __0x13332 );
				return ( ( __0x13256 & __0x13257 ) == __0x13257 );
			}
			else if( __0x13330 == typeof( UInt64 ) )
			{
				UInt64 __0x13258 = Convert.ToUInt64( __0x13331 );
				UInt64 __0x13259 = Convert.ToUInt64( __0x13332 );
				return ( ( __0x13258 & __0x13259 ) == __0x13259 );
			}
			else if( __0x13330 == typeof( SByte ) )
			{
				SByte __0x13260 = Convert.ToSByte( __0x13331 );
				SByte __0x13261 = Convert.ToSByte( __0x13332 );
				return ( ( __0x13260 & __0x13261 ) == __0x13261 );
			}
			else if( __0x13330 == typeof( Byte ) )
			{
				Byte __0x13262 = Convert.ToByte( __0x13331 );
				Byte __0x13263 = Convert.ToByte( __0x13332 );
				return ( ( __0x13262 & __0x13263 ) == __0x13263 );
			}
			return false;
		}

		void __0x13319( Type __0x13333, ref object __0x13334, object __0x13335 )
		{
			if( __0x13333 == typeof( Int16 ) )
			{
				Int32 __0x13264 = Convert.ToInt32( __0x13334 );
				Int32 __0x13265 = Convert.ToInt32( __0x13335 );
				__0x13264 &= ~( __0x13265 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13264 );
			}
			else if( __0x13333 == typeof( UInt16 ) )
			{
				UInt32 __0x13266 = Convert.ToUInt32( __0x13334 );
				UInt32 __0x13267 = Convert.ToUInt32( __0x13335 );
				__0x13266 &= ~( __0x13267 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13266 );
			}
			else if( __0x13333 == typeof( Int32 ) )
			{
				Int32 __0x13268 = Convert.ToInt32( __0x13334 );
				Int32 __0x13269 = Convert.ToInt32( __0x13335 );
				__0x13268 &= ~( __0x13269 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13268 );
			}
			else if( __0x13333 == typeof( UInt32 ) )
			{
				UInt32 __0x13270 = Convert.ToUInt32( __0x13334 );
				UInt32 __0x13271 = Convert.ToUInt32( __0x13335 );
				__0x13270 &= ~( __0x13271 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13270 );
			}
			else if( __0x13333 == typeof( Int64 ) )
			{
				Int64 __0x13272 = Convert.ToInt64( __0x13334 );
				Int64 __0x13273 = Convert.ToInt64( __0x13335 );
				__0x13272 &= ~( __0x13273 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13272 );
			}
			else if( __0x13333 == typeof( UInt64 ) )
			{
				UInt64 __0x13274 = Convert.ToUInt64( __0x13334 );
				UInt64 __0x13275 = Convert.ToUInt64( __0x13335 );
				__0x13274 &= ~( __0x13275 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13274 );
			}
			else if( __0x13333 == typeof( SByte ) )
			{
				Int32 __0x13276 = Convert.ToInt32( __0x13334 );
				Int32 __0x13277 = Convert.ToInt32( __0x13335 );
				__0x13276 &= ~( __0x13277 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13276 );
			}
			else if( __0x13333 == typeof( Byte ) )
			{
				Int32 __0x13278 = Convert.ToInt32( __0x13334 );
				Int32 __0x13279 = Convert.ToInt32( __0x13335 );
				__0x13278 &= ~( __0x13279 );
				__0x13334 = Enum.ToObject( __0x13334.GetType(), __0x13278 );
			}
		}

		void __0x13320( Type __0x13336, ref object __0x13337, object __0x13338 )
		{
			if( __0x13336 == typeof( Int16 ) )
			{
				Int32 __0x13280 = Convert.ToInt32( __0x13337 );
				Int32 __0x13281 = Convert.ToInt32( __0x13338 );
				__0x13280 |= __0x13281;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13280 );
			}
			else if( __0x13336 == typeof( UInt16 ) )
			{
				UInt32 __0x13282 = Convert.ToUInt32( __0x13337 );
				UInt32 __0x13283 = Convert.ToUInt32( __0x13338 );
				__0x13282 |= __0x13283;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13282 );
			}
			else if( __0x13336 == typeof( Int32 ) )
			{
				Int32 __0x13284 = Convert.ToInt32( __0x13337 );
				Int32 __0x13285 = Convert.ToInt32( __0x13338 );
				__0x13284 |= __0x13285;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13284 );
			}
			else if( __0x13336 == typeof( UInt32 ) )
			{
				UInt32 __0x13286 = Convert.ToUInt32( __0x13337 );
				UInt32 __0x13287 = Convert.ToUInt32( __0x13338 );
				__0x13286 |= __0x13287;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13286 );
			}
			else if( __0x13336 == typeof( Int64 ) )
			{
				Int64 __0x13288 = Convert.ToInt64( __0x13337 );
				Int64 __0x13289 = Convert.ToInt64( __0x13338 );
				__0x13288 |= __0x13289;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13288 );
			}
			else if( __0x13336 == typeof( UInt64 ) )
			{
				UInt64 __0x13290 = Convert.ToUInt64( __0x13337 );
				UInt64 __0x13291 = Convert.ToUInt64( __0x13338 );
				__0x13290 |= __0x13291;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13290 );
			}
			else if( __0x13336 == typeof( SByte ) )
			{
				Int32 __0x13292 = Convert.ToInt32( __0x13337 );
				Int32 __0x13293 = Convert.ToInt32( __0x13338 );
				__0x13292 |= __0x13293;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13292 );
			}
			else if( __0x13336 == typeof( Byte ) )
			{
				Int32 __0x13294 = Convert.ToInt32( __0x13337 );
				Int32 __0x13295 = Convert.ToInt32( __0x13338 );
				__0x13294 |= __0x13295;
				__0x13337 = Enum.ToObject( __0x13337.GetType(), __0x13294 );
			}
		}

		bool __0x13321( Type __0x13339, object __0x13340 )
		{
			if( __0x13339 == typeof( Int16 ) )
			{
				Int16 __0x13296 = Convert.ToInt16( __0x13340 );
				return ( __0x13296 == 0 );
			}
			else if( __0x13339 == typeof( UInt16 ) )
			{
				UInt16 __0x13297 = Convert.ToUInt16( __0x13340 );
				return ( __0x13297 == 0 );
			}
			else if( __0x13339 == typeof( Int32 ) )
			{
				Int32 __0x13298 = Convert.ToInt32( __0x13340 );
				return ( __0x13298 == 0 );
			}
			else if( __0x13339 == typeof( UInt32 ) )
			{
				UInt32 __0x13299 = Convert.ToUInt32( __0x13340 );
				return ( __0x13299 == 0 );
			}
			else if( __0x13339 == typeof( Int64 ) )
			{
				Int64 __0x13300 = Convert.ToInt64( __0x13340 );
				return ( __0x13300 == 0 );
			}
			else if( __0x13339 == typeof( UInt64 ) )
			{
				UInt64 __0x13301 = Convert.ToUInt64( __0x13340 );
				return ( __0x13301 == 0 );
			}
			else if( __0x13339 == typeof( SByte ) )
			{
				SByte __0x13302 = Convert.ToSByte( __0x13340 );
				return ( __0x13302 == 0 );
			}
			else if( __0x13339 == typeof( Byte ) )
			{
				Byte __0x13303 = Convert.ToByte( __0x13340 );
				return ( __0x13303 == 0 );
			}
			return false;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class EnumDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13304 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13304 != null ) )
			{
				__0x13304.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13322()
		{
			this.__0x13305 = new NeoAxis.Editor.EngineListView();
			this.SuspendLayout();
			
			
			
			this.__0x13305.Anchor = ((System.Windows.Forms.AnchorStyles)((((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
            | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13305.BorderStyle = System.Windows.Forms.BorderStyle.None;
			this.__0x13305.Location = new System.Drawing.Point(0, 0);
			this.__0x13305.Name = "listViewEnum";
			this.__0x13305.Size = new System.Drawing.Size(299, 150);
			this.__0x13305.TabIndex = 0;
			this.__0x13305.ItemCheckedChanged += new NeoAxis.Editor.EngineListView.ItemCheckedChangedDelegate( this.__0x13312);
			this.__0x13305.SelectedItemsChanged += new NeoAxis.Editor.EngineListView.SelectedItemsChangedDelegate( this.__0x13314 );
			this.__0x13305.MouseClick += new System.Windows.Forms.MouseEventHandler(this.__0x13316);
			this.__0x13305.MouseDoubleClick += new System.Windows.Forms.MouseEventHandler(this.__0x13315);
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13305);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "EnumDropDownControl";
			this.Size = new System.Drawing.Size(299, 150);
			this.ResumeLayout(false);

		}

		#endregion
		private NeoAxis.Editor.EngineListView __0x13305;
	}
}





namespace NeoAxis.Editor
{
	public partial class MultilineTextDropDownControl : HCDropDownControl
	{
		HCItemProperty __0x13342;
		HCItemProperty __0x13343;
		string __0x13344;
		bool __0x13345;

		KryptonButton __0x13346;
		KryptonButton __0x13347;

		

		public MultilineTextDropDownControl()
		{
			__0x13354();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public MultilineTextDropDownControl( HCItemProperty itemProperty )
		{
			__0x13354();

			Resizable = true;
			UseFormDropDownHolder = true;
			
			ResizeRedraw = true;
			
			

			AddOkCancelButtons( out __0x13346, out __0x13347 );

			this.__0x13342 = itemProperty;

			object __0x13348 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			var __0x13349 = __0x13348 as string;
			if( __0x13349 != null )
				__0x13352.Text = __0x13349;
			__0x13344 = __0x13352.Text;

			__0x13343 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13343.SaveValuesToRestore();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			__0x13353();

			if( __0x13345 )
				__0x13343.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13345 )
				__0x13343.RestoreSavedOldValues();
		}

		void __0x13353()
		{
			if( __0x13342 != null && __0x13342.CanEditValue() )
			{
				if( __0x13352.Text != __0x13344 )
				{
					__0x13342.SetValue( __0x13352.Text, false );
					__0x13345 = true;
				}
			}
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			base.OnSizeChanged( e );

			if( __0x13352 != null && __0x13346 != null )
			{
				__0x13352.Size = new Size( ClientSize.Width - DpiHelper.Default.ScaleValue( 5 ) * 2, __0x13346.Location.Y - DpiHelper.Default.ScaleValue( 4 ) * 2 );
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13350 = keyData & Keys.KeyCode;

			if( __0x13350 == Keys.Return && !ModifierKeys.HasFlag( Keys.Shift ) )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13350 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class MultilineTextDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13351 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13351 != null ) )
			{
				__0x13351.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13354()
		{
			this.__0x13352 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			
			
			
			this.__0x13352.Location = new System.Drawing.Point(5, 4);
			this.__0x13352.Margin = new System.Windows.Forms.Padding(4, 4, 4, 4);
			this.__0x13352.Name = "engineTextBox";
			this.__0x13352.Size = new System.Drawing.Size(615, 206);
			this.__0x13352.TabIndex = 2;
			this.__0x13352.AutoSize = false;
			this.__0x13352.Multiline = true;
			this.__0x13352.AcceptsReturn = true;
			this.__0x13352.AcceptsTab = true;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.Controls.Add(this.__0x13352);
			this.Margin = new System.Windows.Forms.Padding(5, 5, 5, 5);
			this.Name = "MultilineTextDropDownControl";
			this.Size = new System.Drawing.Size(624, 260);
			this.ResumeLayout(false);

		}

		#endregion
		private EngineTextBox __0x13352;
	}
}





namespace NeoAxis.Editor
{
	public partial class RangeDropDownControl : HCDropDownControl
	{
		HCItemProperty __0x13355;
		HCItemProperty __0x13356;
		bool __0x13357;
		Range __0x13358;
		bool __0x13359;
		RangeAttribute __0x13360;

		private static class __0x13388
		{
			public static Range ObjectToRange( object value )
			{
				
				switch( value )
				{
				case Range v:
					return v;
				case RangeF v:
					return v;
				case RangeI v:
					return new Range( v.Minimum, v.Maximum );
				case Vector2 v:
					return new Range( v.X, v.Y );
				case Vector2I v:
					return new Range( v.X, v.Y );
				case Vector2F v:
					return new Range( v.X, v.Y );
				default:
					throw new ArgumentException( "Type not supported.", nameof( value ) );
				}
			}

			public static object ConvertRange( Range range, Type type )
			{
				if( type == typeof( Range ) )
					return range;
				else if( type == typeof( RangeF ) )
					return range.ToRangeF();
				else if( type == typeof( RangeI ) )
					return range.ToRangeI();
				else if( type == typeof( Vector2 ) )
					return range.ToVector2();
				else if( type == typeof( Vector2F ) )
					return range.ToVector2().ToVector2F();
				else if( type == typeof( Vector2I ) )
					return range.ToVector2().ToVector2I();
				else
					throw new ArgumentException( "Type not supported.", nameof( type ) );
			}
		}

		public RangeDropDownControl()
		{
			__0x13380();

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( __0x13366.Height < __0x13366.PreferredSize.Height )
				__0x13366.Height = __0x13366.PreferredSize.Height;
			if( __0x13367.Height < __0x13367.PreferredSize.Height )
				__0x13367.Height = __0x13367.PreferredSize.Height;
		}

		public RangeDropDownControl( HCItemProperty itemProperty )
		{
			__0x13380();

			AddOkCancelButtons( out _, out _ );

			this.__0x13355 = itemProperty;

			__0x13360 = (RangeAttribute)itemProperty.Property.GetCustomAttributes( typeof( RangeAttribute ) ).FirstOrDefault();
			if( __0x13360 == null )
				__0x13360 = new RangeAttribute( 0, 100 ); 

			__0x13374();

			__0x13370.ValueChanged += new EventHandler( __0x13377 );
			__0x13371.ValueChanged += new EventHandler( __0x13377 );

			object __0x13361 = ReferenceUtility.GetUnreferencedValue( itemProperty.GetValues()[ 0 ] );
			__0x13358 = __0x13388.ObjectToRange( __0x13361 );

			__0x13356 = itemProperty.GetItemInHierarchyToRestoreValues();
			__0x13356.SaveValuesToRestore();

			__0x13375();

			EditorThemeUtility.ApplyDarkThemeToForm( this );
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			
			
			
		}

		public override void OnCommitChanges()
		{
			base.OnCommitChanges();

			if( __0x13357 )
				__0x13356.AddUndoActionWithSavedValuesToRestore();
		}

		public override void OnCancelChanges()
		{
			base.OnCancelChanges();

			if( __0x13357 )
				__0x13356.RestoreSavedOldValues();
		}

		private void __0x13372()
		{
			if( __0x13355 != null && __0x13355.CanEditValue() )
			{
				var __0x13362 = ReferenceUtility.GetUnreferencedType( __0x13355.Property.Type ).GetNetType();
				
				__0x13355.SetValue( __0x13388.ConvertRange( __0x13358, __0x13362 ), false );
			}
			__0x13357 = true;
		}

		private bool __0x13373()
		{
			var __0x13363 = ReferenceUtility.GetUnreferencedType( __0x13355.Property.Type ).GetNetType();
			
			return __0x13363 == typeof( RangeI ) || __0x13363 == typeof( Vector2I );
		}

		private void __0x13374()
		{
			if( __0x13360 != null )
			{
				__0x13360.GetTrackBarMinMax( __0x13373(), out int min, out int max );

				__0x13370.Minimum = min;
				__0x13370.Maximum = max;
				__0x13370.LargeChange = Math.Max( ( __0x13370.Maximum - __0x13370.Minimum ) / 10, 1 );
				__0x13370.SmallChange = Math.Max( ( __0x13370.Maximum - __0x13370.Minimum ) / 100, 1 );

				__0x13371.Minimum = min;
				__0x13371.Maximum = max;
				__0x13371.LargeChange = Math.Max( ( __0x13370.Maximum - __0x13370.Minimum ) / 10, 1 );
				__0x13371.SmallChange = Math.Max( ( __0x13370.Maximum - __0x13370.Minimum ) / 100, 1 );
			}
		}

		private void __0x13375()
		{
			__0x13359 = true;

			
			__0x13368.Text = ( (float)__0x13358.Minimum ).ToString();
			__0x13369.Text = ( (float)__0x13358.Maximum ).ToString();

			__0x13370.Value = __0x13360.GetTrackBarValue( __0x13373(), __0x13358.Minimum );
			__0x13371.Value = __0x13360.GetTrackBarValue( __0x13373(), __0x13358.Maximum );

			__0x13359 = false;
		}

		private void __0x13376( object __0x13381, EventArgs __0x13382 )
		{
			if( __0x13359 )
				return;

			if( !__0x13378( (EngineTextBox)__0x13381 ) )
				return;

			try
			{
				__0x13359 = true;

				__0x13358.Minimum = double.Parse( __0x13368.Text );
				__0x13358.Maximum = double.Parse( __0x13369.Text );

				__0x13370.Value = __0x13360.GetTrackBarValue( __0x13373(), __0x13358.Minimum );
				__0x13371.Value = __0x13360.GetTrackBarValue( __0x13373(), __0x13358.Maximum );

				__0x13372();
			}
			finally
			{
				__0x13359 = false;
			}
		}

		private void __0x13377( object __0x13383, EventArgs __0x13384 )
		{
			if( __0x13359 )
				return;
			try
			{
				__0x13359 = true;

				__0x13358.Minimum = __0x13360.GetValueFromTrackBar( __0x13373(), __0x13370.Value );
				__0x13358.Maximum = __0x13360.GetValueFromTrackBar( __0x13373(), __0x13371.Value );

				__0x13368.Text = __0x13358.Minimum.ToString();
				__0x13369.Text = __0x13358.Maximum.ToString();

				__0x13378( __0x13368 );
				__0x13378( __0x13369 );

				__0x13372();
			}
			finally
			{
				__0x13359 = false;
			}
		}

		private bool __0x13378( EngineTextBox __0x13385 )
		{
			try
			{
				

				double.Parse( __0x13385.Text );
				__0x13385.SetError( "" );
				return true;
			}
			catch( FormatException exc )
			{
				__0x13385.SetError( exc.Message );
				return false;
			}
		}

		private void __0x13379( object __0x13386, EventArgs __0x13387 )
		{
			__0x13378( (EngineTextBox)__0x13386 );
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			var __0x13364 = keyData & Keys.KeyCode;

			if( __0x13364 == Keys.Return )
			{
				ParentHolder.Close( true );
				return true;
			}
			else if( __0x13364 == Keys.Escape )
			{
				ParentHolder.Close( false );
				return true;
			}

			return base.ProcessCmdKey( ref msg, keyData );
		}
	}
}

namespace NeoAxis.Editor
{
	partial class RangeDropDownControl
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13365 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13365 != null ) )
			{
				__0x13365.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13380()
		{
			this.__0x13366 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x13367 = new ComponentFactory.Krypton.Toolkit.KryptonLabel();
			this.__0x13368 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13369 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13370 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.__0x13371 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.SuspendLayout();
			
			
			
			this.__0x13366.AutoSize = false;
			this.__0x13366.Location = new System.Drawing.Point(4, 13);
			this.__0x13366.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13366.Name = "minLabel";
			this.__0x13366.Size = new System.Drawing.Size(91, 25);
			this.__0x13366.TabIndex = 0;
			this.__0x13366.Values.Text = "Minimum:";
			
			
			
			this.__0x13367.AutoSize = false;
			this.__0x13367.Location = new System.Drawing.Point(4, 41);
			this.__0x13367.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13367.Name = "maxLabel";
			this.__0x13367.Size = new System.Drawing.Size(91, 31);
			this.__0x13367.TabIndex = 1;
			this.__0x13367.Values.Text = "Maximum:";
			
			
			
			this.__0x13368.Location = new System.Drawing.Point(81, 15);
			this.__0x13368.LikeLabel = false;
			this.__0x13368.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13368.Name = "minTextBox";
			this.__0x13368.Size = new System.Drawing.Size(119, 21);
			this.__0x13368.TabIndex = 2;
			this.__0x13368.TextChanged += new System.EventHandler(this.__0x13376);
			this.__0x13368.Validated += new System.EventHandler(this.__0x13379);
			
			
			
			this.__0x13369.Location = new System.Drawing.Point(81, 47);
			this.__0x13369.LikeLabel = false;
			this.__0x13369.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13369.Name = "maxTextBox";
			this.__0x13369.Size = new System.Drawing.Size(119, 21);
			this.__0x13369.TabIndex = 3;
			this.__0x13369.TextChanged += new System.EventHandler(this.__0x13376);
			this.__0x13369.Validated += new System.EventHandler(this.__0x13379);
			
			
			
			this.__0x13370.DrawBackground = true;
			this.__0x13370.Location = new System.Drawing.Point(208, 12);
			this.__0x13370.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13370.Name = "minTrackBar";
			this.__0x13370.Size = new System.Drawing.Size(151, 26);
			this.__0x13370.TabIndex = 4;
			this.__0x13370.TickStyle = System.Windows.Forms.TickStyle.None;
			
			
			
			this.__0x13371.DrawBackground = true;
			this.__0x13371.Location = new System.Drawing.Point(208, 44);
			this.__0x13371.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13371.Name = "maxTrackBar";
			this.__0x13371.Size = new System.Drawing.Size(151, 26);
			this.__0x13371.TabIndex = 5;
			this.__0x13371.TickStyle = System.Windows.Forms.TickStyle.None;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.BackColor = System.Drawing.SystemColors.Control;
			this.Controls.Add(this.__0x13371);
			this.Controls.Add(this.__0x13370);
			this.Controls.Add(this.__0x13369);
			this.Controls.Add(this.__0x13368);
			this.Controls.Add(this.__0x13367);
			this.Controls.Add(this.__0x13366);
			this.Margin = new System.Windows.Forms.Padding(5);
			this.Name = "RangeDropDownControl";
			this.Size = new System.Drawing.Size(374, 87);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x13366;
		private ComponentFactory.Krypton.Toolkit.KryptonLabel __0x13367;
		private EngineTextBox __0x13368;
		private EngineTextBox __0x13369;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13370;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13371;
	}
}





namespace NeoAxis.Editor
{
	internal struct GripBounds
	{
		private const int __0x13389 = 6;
		private const int __0x13390 = __0x13389 << 1;

		public GripBounds( System.Drawing.Rectangle clientRectangle )
		{
			this.__0x13391 = clientRectangle;
		}

		private System.Drawing.Rectangle __0x13391;
		public System.Drawing.Rectangle ClientRectangle
		{
			get { return __0x13391; }
			
		}

		public System.Drawing.Rectangle Bottom
		{
			get
			{
				System.Drawing.Rectangle __0x13392 = ClientRectangle;
				__0x13392.Y = __0x13392.Bottom - __0x13389 + 1;
				__0x13392.Height = __0x13389;
				return __0x13392;
			}
		}

		public System.Drawing.Rectangle BottomRight
		{
			get
			{
				System.Drawing.Rectangle __0x13393 = ClientRectangle;
				__0x13393.Y = __0x13393.Bottom - __0x13390 + 1;
				__0x13393.Height = __0x13390;
				__0x13393.X = __0x13393.Width - __0x13390 + 1;
				__0x13393.Width = __0x13390;
				return __0x13393;
			}
		}

		public System.Drawing.Rectangle Top
		{
			get
			{
				System.Drawing.Rectangle __0x13394 = ClientRectangle;
				__0x13394.Height = __0x13389;
				return __0x13394;
			}
		}

		public System.Drawing.Rectangle TopRight
		{
			get
			{
				System.Drawing.Rectangle __0x13395 = ClientRectangle;
				__0x13395.Height = __0x13390;
				__0x13395.X = __0x13395.Width - __0x13390 + 1;
				__0x13395.Width = __0x13390;
				return __0x13395;
			}
		}

		public System.Drawing.Rectangle Left
		{
			get
			{
				System.Drawing.Rectangle __0x13396 = ClientRectangle;
				__0x13396.Width = __0x13389;
				return __0x13396;
			}
		}

		public System.Drawing.Rectangle BottomLeft
		{
			get
			{
				System.Drawing.Rectangle __0x13397 = ClientRectangle;
				__0x13397.Width = __0x13390;
				__0x13397.Y = __0x13397.Height - __0x13390 + 1;
				__0x13397.Height = __0x13390;
				return __0x13397;
			}
		}

		public System.Drawing.Rectangle Right
		{
			get
			{
				System.Drawing.Rectangle __0x13398 = ClientRectangle;
				__0x13398.X = __0x13398.Right - __0x13389 + 1;
				__0x13398.Width = __0x13389;
				return __0x13398;
			}
		}

		public System.Drawing.Rectangle TopLeft
		{
			get
			{
				System.Drawing.Rectangle __0x13399 = ClientRectangle;
				__0x13399.Width = __0x13390;
				__0x13399.Height = __0x13390;
				return __0x13399;
			}
		}
	}
}





namespace NeoAxis.Editor
{
	class HCDropDownHolderImpl
	{
		Control __0x13400;
		HCDropDownControl __0x13401; 

		bool __0x13402;
		bool __0x13403 = true;
		
		bool __0x13404;

		public bool Resizable { get; set; }
		
		
		public bool CommitOnClosing { get; set; }
		public bool FocusOnOpen { get; set; } = true;

		public bool NonInteractive
		{
			get { return __0x13404; }
			set
			{
				if( value != __0x13404 )
				{
					__0x13404 = value;
					
				}
			}
		}

		public HCDropDownHolderImpl( Control holder, HCDropDownControl control )
		{
			this.__0x13400 = holder;

			holder.AutoSize = false;
			holder.Margin = Padding.Empty;
			holder.Padding = new Padding( 1 ); 

			__0x13401 = control ?? throw new ArgumentNullException( "control" );
			__0x13401.ParentHolder = (IDropDownHolder)holder;

			if( holder is HCFormDropDownHolder )
				__0x13401.Location = new Point( 1, 1 );
			else
				__0x13401.Location = Point.Empty;

			
			

			Resizable = __0x13401.Resizable;
		}

		internal void Initialize()
		{
			
			
			
			
			__0x13400.Size = __0x13401.Size + __0x13400.Padding.Size;
			
		}

		internal void OnSizeChanged()
		{
			if( __0x13401 != null )
			{
				
				
				__0x13401.Size = __0x13400.Size - __0x13400.Padding.Size;
			}
		}

		internal void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			var __0x13405 = CalculateLocation( openerControl, area );
			__0x13400.Location = __0x13415( 
				openerControl.PointToScreen( __0x13405 ), ToolStripDropDownDirection.BelowLeft ).Location;
			__0x13400.Show();
		}

		internal Point CalculateLocation( Control openerControl, System.Drawing.Rectangle area )
		{
			__0x13402 = false;
			__0x13403 = true;

			Point __0x13406 = openerControl.PointToScreen( new Point( area.Width, area.Top + area.Height + 2 ) );
			
			System.Drawing.Rectangle __0x13407 = Screen.FromControl( openerControl ).WorkingArea;
			if( __0x13406.X - __0x13400.Size.Width < __0x13407.Left )
			{
				__0x13403 = false;
				__0x13406.X = __0x13407.Left;
			}
			if( __0x13406.Y + __0x13400.Size.Height > ( __0x13407.Top + __0x13407.Height ) )
			{
				__0x13402 = true;
				__0x13406.Y -= __0x13400.Size.Height + area.Height + 7;
				
			}
			__0x13406 = openerControl.PointToClient( __0x13406 );
			return __0x13406;
		}

		System.Drawing.Rectangle __0x13415( Point __0x13417, ToolStripDropDownDirection __0x13418 )
		{
			Point __0x13408 = Point.Empty;
			System.Drawing.Rectangle __0x13409 = new System.Drawing.Rectangle( Point.Empty, __0x13400.Size );
			
			switch( __0x13418 )
			{
				case ToolStripDropDownDirection.AboveLeft:
					__0x13408.X = -__0x13409.Width;
					__0x13408.Y = -__0x13409.Height;
					break;
				case ToolStripDropDownDirection.AboveRight:
					__0x13408.Y = -__0x13409.Height;
					break;
				case ToolStripDropDownDirection.BelowRight:
				case ToolStripDropDownDirection.Right:
					break;
				case ToolStripDropDownDirection.BelowLeft:
				case ToolStripDropDownDirection.Left:
					__0x13408.X = -__0x13409.Width;
					break;
			}
			__0x13409.Location = new Point( __0x13417.X + __0x13408.X, __0x13417.Y + __0x13408.Y );
			return __0x13409;
		}

		
		
		
		
		
		
		
		
		
		
		
		

		internal void Close( bool commitChanges )
		{
			CommitOnClosing = commitChanges;
		}

		internal void OnOpened()
		{
			__0x13401.OnHolderOpened();
			if( FocusOnOpen )
				__0x13401.Focus();
		}

		internal void OnClosed()
		{
			if( CommitOnClosing )
				__0x13401.OnCommitChanges();
			else
				__0x13401.OnCancelChanges();
		}

		internal bool ProcessCmdKey( Keys keyData )
		{
			if( keyData == Keys.Escape )
			{
				Close( false );
				return true;
			}
			else if( keyData == Keys.Enter )
			{
				Close( true );
				return true;
			}
			return false;
		}

		internal bool ProcessResizing( ref Message m, bool contentControl = true )
		{
			
			
			
			
			if( !Resizable && !NonInteractive )
			{
				return false;
			}
			if( m.Msg == ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
			{
				return __0x13416( ref m, contentControl );
			}
			
			
			
			
			return false;
		}

		
		
		
		
		
		
		
		
		
		

		bool __0x13416( ref Message __0x13419, bool __0x13420 )
		{
			if( NonInteractive )
			{
				__0x13419.Result = (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
				return true;
			}

			int __0x13410 = Cursor.Position.X; 
			int __0x13411 = Cursor.Position.Y; 
			Point __0x13412 = __0x13400.PointToClient( new Point( __0x13410, __0x13411 ) );

			GripBounds __0x13413 = new GripBounds( __0x13420 ? __0x13401.ClientRectangle : __0x13400.ClientRectangle );
			IntPtr __0x13414 = new IntPtr( ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT );

			if( __0x13402 )
			{
				if( __0x13403 && __0x13413.TopLeft.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTOPLEFT;
					return true;
				}
				if( !__0x13403 && __0x13413.TopRight.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTOPRIGHT;
					return true;
				}
				if( __0x13413.Top.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTOP;
					return true;
				}
			}
			else
			{
				if( __0x13403 && __0x13413.BottomLeft.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTBOTTOMLEFT;
					return true;
				}
				if( !__0x13403 && __0x13413.BottomRight.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTBOTTOMRIGHT;
					return true;
				}
				if( __0x13413.Bottom.Contains( __0x13412 ) )
				{
					__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTBOTTOM;
					return true;
				}
			}
			if( __0x13403 && __0x13413.Left.Contains( __0x13412 ) )
			{
				__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTLEFT;
				return true;
			}
			if( !__0x13403 && __0x13413.Right.Contains( __0x13412 ) )
			{
				__0x13419.Result = __0x13420 ? __0x13414 : (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTRIGHT;
				return true;
			}
			return false;
		}

		
		
		
		

		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	}
}





namespace NeoAxis.Editor
{
	public partial class HCFormDropDownHolder : EngineForm, IDropDownHolder
	{
		HCDropDownHolderImpl __0x13421;

		

		public bool Resizable
		{
			get { return __0x13421 != null ? __0x13421.Resizable : false; }
		}
		
		
		
		
		
		
		
		

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x13422 = base.CreateParams;
				__0x13422.ExStyle |= ComponentFactory.Krypton.Toolkit.PI.WS_EX_TOOLWINDOW;
				__0x13422.Style |= ComponentFactory.Krypton.Toolkit.PI.WS_POPUP | ComponentFactory.Krypton.Toolkit.PI.WS_BORDER;

				return __0x13422;
			}
		}

		public event EventHandler HolderClosed;

		public HCFormDropDownHolder( HCDropDownControl control )
		{
			

			MinimumSize = new Size( 1, 1 );
			MaximumSize = new Size( 10000, 10000 );

			
			ResizeRedraw = true;
			AutoSize = false;

			
			BackColor = EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 240, 240, 240 );

			Closed += ( __0x13425, __0x13426 ) => HolderClosed( __0x13425, __0x13426 );

			FormBorderStyle = FormBorderStyle.None;
			StartPosition = FormStartPosition.Manual;

			Controls.Add( control );

			__0x13421 = new HCDropDownHolderImpl( this, control );
			__0x13421.Initialize();
		}

		public void Show( Control openerControl )
		{
			if( openerControl == null )
				throw new ArgumentNullException( nameof( openerControl ) );
			Show( openerControl, openerControl.ClientRectangle );
		}

		public void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			__0x13421.Show( openerControl, area );
		}

		public void Close( bool commitChanges )
		{
			__0x13421.Close( commitChanges );
			Close();
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			__0x13421?.OnSizeChanged();
			base.OnSizeChanged( e );
		}

		protected override void OnClosed( EventArgs e )
		{
			base.OnClosed( e );
			__0x13421?.OnClosed();
		}

		protected override void OnVisibleChanged( EventArgs e )
		{
			base.OnVisibleChanged( e );
			if( Visible )
				__0x13421?.OnOpened();
		}

		[DllImport( "user32.dll" )]
		internal static extern IntPtr GetActiveWindow();

		protected override void OnDeactivate( EventArgs e )
		{
			base.OnDeactivate( e );

			if( Disposing )
				return; 

			if( !EditorAPI.ClosingApplication )
			{
				try
				{
					
					
					
					
					Task.Delay( 10 ).ContinueWith( ( __0x13427 ) =>
					{
						var __0x13423 = GetActiveWindow();
						if( __0x13423 == IntPtr.Zero || __0x13423 == EditorForm.Instance.Handle )
							Close( true );
					}, TaskScheduler.FromCurrentSynchronizationContext() );
				}
				catch { }
			}
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( __0x13421 != null )
				return __0x13421.ProcessCmdKey( keyData );
			else
				return false;
		}

		protected override void WndProc( ref Message m )
		{
			if( __0x13421 != null && __0x13421.ProcessResizing( ref m, false ) )
				return;
			base.WndProc( ref m );
		}

		public bool ProcessResizing( ref Message m )
		{
			if( __0x13421 != null )
				return __0x13421.ProcessResizing( ref m );
			else
				return false;
		}

		private void __0x13424()
		{
			this.SuspendLayout();
			
			
			
			this.ClientSize = new System.Drawing.Size( 282, 253 );
			this.Name = "HCFormDropDownHolder";
			this.ResumeLayout( false );

		}
	}
}





namespace NeoAxis.Editor
{
	[ToolboxItem( false ), DesignerCategory( "" )]
	public class HCToolStripDropDownHolder : ToolStripDropDown, IDropDownHolder
	{
		HCDropDownHolderImpl __0x13428;
		Control __0x13429; 

		DropShadowManager __0x13430;
		ShadowImageCacheManager __0x13431;

		

		class __0x13443 : ProfessionalColorTable
		{
			public __0x13443()
			{
				base.UseSystemColors = false;
			}

			public override Color MenuBorder
			{
				get
				{
					return EditorAPI.DarkTheme ? Color.FromArgb( 90, 90, 90 ) : Color.FromArgb( 200, 200, 200 );
				}
			}
		}

		

		public bool Resizable
		{
			get { return __0x13428 != null ? __0x13428.Resizable : false; }
		}
		
		
		
		
		
		
		
		

		

		protected override CreateParams CreateParams
		{
			get
			{
				CreateParams __0x13432 = base.CreateParams;
				__0x13432.ExStyle |= ComponentFactory.Krypton.Toolkit.PI.WS_EX_NOACTIVATE;
				
				
				return __0x13432;
			}
		}

		public event EventHandler HolderClosed;

		public HCToolStripDropDownHolder( HCDropDownControl control )
		{
			
			ResizeRedraw = true;
			AutoSize = false;

			RenderMode = ToolStripRenderMode.Professional; 
			Renderer = new ToolStripProfessionalRenderer( new __0x13443() );
			

			DropShadowEnabled = false;

			Closed += ( __0x13441, __0x13442 ) => HolderClosed( __0x13441, __0x13442 );

			__0x13428 = new HCDropDownHolderImpl( this, control );
			__0x13428.Initialize();

			var __0x13433 = new ToolStripControlHost( control )
			{
				Margin = Padding.Empty,
				Padding = Padding.Empty
			};

			Items.Add( __0x13433 );
		}

		protected override void OnHandleCreated( EventArgs e )
		{
			base.OnHandleCreated( e );

			KryptonWinFormsUtility.LockFormUpdate( this );

			__0x13437();
		}

		protected override void Dispose( bool disposing )
		{
			__0x13439();

			base.Dispose( disposing );
		}

		protected override void OnSizeChanged( EventArgs e )
		{
			__0x13428?.OnSizeChanged();
			base.OnSizeChanged( e );
		}

		public void Show( Control openerControl )
		{
			if( openerControl == null )
				throw new ArgumentNullException( nameof( openerControl ) );
			Show( openerControl, openerControl.ClientRectangle );
		}

		public void Show( Control openerControl, System.Drawing.Rectangle area )
		{
			this.__0x13429 = openerControl ?? throw new ArgumentNullException( "sourceControl" );
			var __0x13434 = __0x13428.CalculateLocation( openerControl, area );
			Show( openerControl, __0x13434, ToolStripDropDownDirection.BelowLeft );
		}

		public void Close( bool commitChanges )
		{
			__0x13428.Close( commitChanges );
			Close( ToolStripDropDownCloseReason.CloseCalled );
		}

		protected override void OnOpened( EventArgs e )
		{
			base.OnOpened( e );
			__0x13428?.OnOpened();

			KryptonWinFormsUtility.LockFormUpdate( null );
		}

		protected override void OnClosed( ToolStripDropDownClosedEventArgs e )
		{
			base.OnClosed( e );
			__0x13428?.OnClosed();
		}

		protected override void OnClosing( ToolStripDropDownClosingEventArgs e )
		{
			if( e.CloseReason == ToolStripDropDownCloseReason.AppFocusChange ||
				e.CloseReason == ToolStripDropDownCloseReason.AppClicked )
			{
				if( __0x13428 != null )
					__0x13428.CommitOnClosing = true;
			}

			if( e.CloseReason == ToolStripDropDownCloseReason.ItemClicked )
				e.Cancel = true;

			if( e.CloseReason == ToolStripDropDownCloseReason.AppClicked )
			{
				
				var __0x13435 = ( __0x13429 is IHCProperty ) ?
					( (IHCProperty)__0x13429 ).EditorControl : __0x13429;
				if( __0x13435.ClientRectangle.Contains( __0x13435.PointToClient( Cursor.Position ) ) )
					e.Cancel = true;
			}

			base.OnClosing( e );
		}

		protected override bool ProcessCmdKey( ref Message msg, Keys keyData )
		{
			if( __0x13428 != null )
				return __0x13428.ProcessCmdKey( keyData );
			else
				return false;
		}

		protected override void WndProc( ref Message m )
		{
			if( __0x13428 != null && __0x13428.ProcessResizing( ref m, false ) )
				return;
			try
			{
				base.WndProc( ref m );
			}
			catch { }
		}

		public bool ProcessResizing( ref Message m )
		{
			if( __0x13428 != null )
				return __0x13428.ProcessResizing( ref m );
			else
				return false;
		}

		void __0x13437()
		{
			if( DesignMode || !IsHandleCreated || IsDisposed )
				return;

			
			__0x13438();
			
			
		}

		void __0x13438()
		{
			if( __0x13431 == null )
				__0x13431 = new ShadowImageCacheManager();

			if( __0x13430 == null )
			{
				__0x13430 = new DropShadowManager( this );
				__0x13440();
			}
		}

		void __0x13439()
		{
			if( __0x13430 != null )
			{
				__0x13430.Dispose();
				__0x13430 = null;
			}

			if( __0x13431 != null )
			{
				__0x13431.Dispose();
				__0x13431 = null;
			}
		}

		void __0x13440()
		{
			if( __0x13430 != null )
			{
				var __0x13436 = KryptonDarkThemeUtility.DarkTheme ? Color.FromArgb( 30, 30, 30 ) : Color.FromArgb( 150, 150, 150 );
				__0x13430.ImageCache = __0x13431.GetCached( __0x13436 );
			}
		}

		protected override void OnResize( EventArgs e )
		{
			base.OnResize( e );

			__0x13437();
		}

	}
}





namespace NeoAxis.Editor
{
	public interface IDropDownHolder
	{
		
		event EventHandler HolderClosed;
		bool Visible { get; set; }
		void Show( Control openerControl );
		void Close();
		void Close( bool commitChanges );

		
		bool ProcessResizing( ref Message m );
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridCheckBox : EUserControl, IHCCheckBox
	{
		public HCGridCheckBox()
		{
			__0x13445();

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				checkBox1.Location = new Point( 1, DpiHelper.Default.ScaleValue( 5 ) );
				checkBox1.AutoSize = false;
				checkBox1.Size = new Size( 1, 1 );
			}
		}

		public KryptonCheckBox CheckBox1
		{
			get { return checkBox1; }
		}

		public bool CheckBox1SetText
		{
			get { return false; }
		}

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			if( !WinFormsUtility.IsDesignerHosted( this ) )
			{
				if( checkBox1.AutoSize != true )
					checkBox1.AutoSize = true;
			}
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridCheckBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13444 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13444 != null ) )
			{
				__0x13444.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13445()
		{
			this.checkBox1 = new ComponentFactory.Krypton.Toolkit.KryptonCheckBox();
			this.SuspendLayout();
			
			
			
			this.checkBox1.Location = new System.Drawing.Point(1, 6);
			this.checkBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.checkBox1.Name = "checkBox1";
			this.checkBox1.Size = new System.Drawing.Size(58, 20);
			this.checkBox1.TabIndex = 0;
			this.checkBox1.Values.Text = "Text";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.checkBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridCheckBox";
			this.Size = new System.Drawing.Size(516, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion

		public ComponentFactory.Krypton.Toolkit.KryptonCheckBox checkBox1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridCollection : EUserControl, IHCCollection
	{
		public HCGridCollection()
		{
			__0x13447();

			if( EditorAPI.DarkTheme )
				label2.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );

			buttonEdit.Location = new Point( buttonEdit.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		public EngineTextBox Label2
		{
			get { return label2; }
		}

		public KryptonButton ButtonEdit
		{
			get { return buttonEdit; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridCollection
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13446 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13446 != null ) )
			{
				__0x13446.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13447()
		{
			this.buttonEdit = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.label2 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.buttonEdit.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonEdit.Location = new System.Drawing.Point(223, 2);
			this.buttonEdit.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonEdit.Name = "buttonEdit";
			this.buttonEdit.Size = new System.Drawing.Size(27, 22);
			this.buttonEdit.TabIndex = 1;
			this.buttonEdit.Values.Text = "...";
			this.buttonEdit.Visible = false;
			
			
			
			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label2.Location = new System.Drawing.Point(0, 3);
			this.label2.LikeLabel = true;
			this.label2.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.label2.Name = "label2";
			this.label2.ReadOnly = true;
			this.label2.Size = new System.Drawing.Size(271, 23);
			this.label2.StateCommon.Back.Color1 = System.Drawing.Color.FromArgb(((int)(((byte)(240)))), ((int)(((byte)(240)))), ((int)(((byte)(240)))));
			this.label2.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.label2.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.label2.TabIndex = 0;
			this.label2.TabStop = false;
			this.label2.Text = "label2";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonEdit);
			this.Controls.Add(this.label2);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridCollection";
			this.Size = new System.Drawing.Size(275, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox label2;
		public ComponentFactory.Krypton.Toolkit.KryptonButton buttonEdit;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridColorValue : EUserControl, IHCColorValue
	{
		public HCGridColorValue()
		{
			__0x13449();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );

			previewButton.Location = new Point( previewButton.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		protected override void OnParentChanged( EventArgs e )
		{
			base.OnParentChanged( e );

			
			
			
			
			
			

			

			
			
			
		}

		protected override void OnLoad( EventArgs e )
		{
			base.OnLoad( e );

			
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public HCColorPreviewButton PreviewButton
		{
			get { return previewButton; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridColorValue
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13448 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13448 != null ) )
			{
				__0x13448.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13449()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.previewButton = new NeoAxis.Editor.HCColorPreviewButton();
			this.SuspendLayout();
			
			
			
			this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox1.Location = new System.Drawing.Point(0, 3);
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(277, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.previewButton.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.previewButton.Location = new System.Drawing.Point(280, 3);
			this.previewButton.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.previewButton.Name = "previewButton";
			this.previewButton.Size = new System.Drawing.Size(27, 22);
			this.previewButton.TabIndex = 5;
			this.previewButton.Values.Text = "";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.previewButton);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridColorValue";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		public HCColorPreviewButton previewButton;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridColorValuePowered : EUserControl, IHCColorValuePowered
	{
		public HCGridColorValuePowered()
		{
			__0x13452();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );

			previewButton.Location = new Point( previewButton.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public HCColorPreviewButton PreviewButton
		{
			get { return previewButton; }
		}

		public KryptonTrackBar TrackBarPower
		{
			get { return __0x13451; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridColorValuePowered
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13450 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13450 != null ) )
			{
				__0x13450.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13452()
		{
			this.previewButton = new NeoAxis.Editor.HCColorPreviewButton();
			this.__0x13451 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			
			this.previewButton.Location = new System.Drawing.Point(68, 3);
			this.previewButton.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.previewButton.Name = "previewButton";
			this.previewButton.Size = new System.Drawing.Size(27, 22);
			this.previewButton.TabIndex = 1;
			this.previewButton.Values.Text = "";
			
			
			
			this.__0x13451.Anchor = ( (System.Windows.Forms.AnchorStyles)( ( ( System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left )
			 | System.Windows.Forms.AnchorStyles.Right ) ) );
			
			this.__0x13451.DrawBackground = true;
			this.__0x13451.Location = new System.Drawing.Point(98, 4);
			this.__0x13451.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.__0x13451.Name = "trackBarPower";
			this.__0x13451.Size = new System.Drawing.Size(209, 20);
			this.__0x13451.TabIndex = 2;
			this.__0x13451.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x13451.TrackBarSize = ComponentFactory.Krypton.Toolkit.PaletteTrackBarSize.Small;
			
			
			
			
   
			this.textBox1.Location = new System.Drawing.Point( 0, 4 );
			
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size( 64, 22 );
			
			this.textBox1.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13451);
			this.Controls.Add(this.previewButton);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridColorValuePowered";
			this.Size = new System.Drawing.Size(308, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		public HCColorPreviewButton previewButton;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13451;
	}
}





namespace NeoAxis.Editor
{
	public interface IHCDropDownButton
	{
		KryptonDropButton Button { get; }
	}

	public partial class HCGridDropDownButton : EUserControl, IHCDropDownButton
	{
		public HCGridDropDownButton()
		{
			__0x13455();

			if( EditorAPI.DarkTheme )
				__0x13454.Images.Common = Properties.Resources.DropDownButton_Dark;
			else
				__0x13454.Images.Common = Properties.Resources.DropDownButton;

			__0x13454.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13454.AutoSize = false;
			__0x13454.Height = Math.Max( DpiHelper.Default.ScaleValue( 18 ), __0x13454.PreferredSize.Height );
		}

		public KryptonDropButton Button
		{
			get { return __0x13454; }
		}

		
		
		

		
		
		
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridDropDownButton
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13453 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13453 != null ) )
			{
				__0x13453.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13455()
		{
			this.__0x13454 = new ComponentFactory.Krypton.Toolkit.KryptonDropButton();
			this.SuspendLayout();
			
			
			
			
			
			
			
			
			this.__0x13454.ButtonStyle = ComponentFactory.Krypton.Toolkit.ButtonStyle.Custom3;
			this.__0x13454.Images.Common = global::NeoAxis.Properties.Resources.DropDownButton;
			this.__0x13454.Location = new System.Drawing.Point(0, 3);
			this.__0x13454.Margin = new System.Windows.Forms.Padding(4);
			this.__0x13454.Name = "kryptonDropButton";
			this.__0x13454.Size = new System.Drawing.Size(285, 22);
			this.__0x13454.Splitter = false;
			this.__0x13454.TabIndex = 0;
			this.__0x13454.Values.Text = "kryptonDropButton1";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13454);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridDropDownButton";
			this.Size = new System.Drawing.Size(285, 28);
			this.ResumeLayout(false);

		}

		#endregion

		private ComponentFactory.Krypton.Toolkit.KryptonDropButton __0x13454;
	}
}





namespace NeoAxis.Editor
{
	public interface IHCEvent
	{
		Label LabelName { get; }
		KryptonButton ButtonAddEventHandler { get; }
		KryptonButton ButtonEditEventHandlers { get; }
		void LabelNameSetToolTip( string value );
		void SetToolTip( Control control, string caption );
	}

	public partial class HCGridEvent : EUserControl, IHCEvent
	{
		Control __0x13456;

		

		public HCGridEvent()
		{
			__0x13460();

			buttonEditEventHandlers.Values.Image = EditorResourcesCache.Edit;
			buttonAddEventHandler.Values.Image = EditorResourcesCache.New;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			__0x13459.SetToolTip( buttonAddEventHandler, EditorLocalization.Translate( "SettingsWindow", "Add event handler." ) );
			__0x13459.SetToolTip( buttonEditEventHandlers, EditorLocalization.Translate( "SettingsWindow", "Edit event handlers." ) );
		}

		public Label LabelName
		{
			get { return __0x13458; }
		}

		public void LabelNameSetToolTip( string value )
		{
			if( __0x13459.GetToolTip( __0x13458 ) == string.Empty )
				__0x13459.SetToolTip( __0x13458, value );
		}

		public KryptonButton ButtonAddEventHandler
		{
			get { return buttonAddEventHandler; }
		}

		public KryptonButton ButtonEditEventHandlers
		{
			get { return buttonEditEventHandlers; }
		}

		public void SetToolTip( Control control, string caption )
		{
			if( __0x13459.GetToolTip( control ) != caption )
				__0x13459.SetToolTip( control, caption );
		}

		public KryptonButton ButtonType
		{
			get { return buttonEditEventHandlers; }
		}

		public Control EditorControl
		{
			get { return __0x13456; }
			set
			{
				if( __0x13456 != null )
					Controls.Remove( __0x13456 );
				__0x13456 = value;
				Controls.Add( __0x13456 );
			}
		}

		protected override void WndProc( ref Message m )
		{
			
			if( m.Msg == ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
				m.Result = (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
			else
				base.WndProc( ref m );
		}

		public override string ToString()
		{
			return nameof( HCGridEvent ) + ": " + __0x13458.Text;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridEvent
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13457 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13457 != null ) )
			{
				__0x13457.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13460()
		{
			this.__0x13457 = new System.ComponentModel.Container();
			this.__0x13458 = new System.Windows.Forms.LabelExtended();
			this.__0x13459 = new NeoAxis.Editor.EngineToolTip(this.__0x13457);
			this.buttonEditEventHandlers = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.buttonAddEventHandler = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.SuspendLayout();
			
			
			
			this.__0x13458.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13458.AutoEllipsis = true;
			this.__0x13458.Location = new System.Drawing.Point(21, 3);
			this.__0x13458.Name = "labelName";
			this.__0x13458.Size = new System.Drawing.Size(175, 22);
			this.__0x13458.TabIndex = 0;
			this.__0x13458.Text = "{Name}";
			
			
			
			this.buttonEditEventHandlers.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonEditEventHandlers.Location = new System.Drawing.Point(203, 3);
			this.buttonEditEventHandlers.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonEditEventHandlers.Name = "buttonEditEventHandlers";
			this.buttonEditEventHandlers.Size = new System.Drawing.Size(26, 24);
			this.buttonEditEventHandlers.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonEditEventHandlers.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.buttonEditEventHandlers.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.buttonEditEventHandlers.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonEditEventHandlers.TabIndex = 1;
			this.__0x13459.SetToolTip(this.buttonEditEventHandlers, "Edit event handlers");
			this.buttonEditEventHandlers.Values.Image = global::NeoAxis.Properties.Resources.Edit_16;
			this.buttonEditEventHandlers.Values.Text = "";
			
			
			
			this.buttonAddEventHandler.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonAddEventHandler.Location = new System.Drawing.Point(232, 3);
			this.buttonAddEventHandler.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.buttonAddEventHandler.Name = "buttonAddEventHandler";
			this.buttonAddEventHandler.Size = new System.Drawing.Size(26, 24);
			this.buttonAddEventHandler.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonAddEventHandler.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.buttonAddEventHandler.StateNormal.Back.Color1 = System.Drawing.Color.WhiteSmoke;
			this.buttonAddEventHandler.StateNormal.Back.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.buttonAddEventHandler.TabIndex = 2;
			this.__0x13459.SetToolTip(this.buttonAddEventHandler, "Add event handler");
			this.buttonAddEventHandler.Values.Image = global::NeoAxis.Properties.Resources.New_16;
			this.buttonAddEventHandler.Values.Text = "";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonEditEventHandlers);
			this.Controls.Add(this.buttonAddEventHandler);
			this.Controls.Add(this.__0x13458);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridEvent";
			this.Size = new System.Drawing.Size(266, 28);
			this.ResumeLayout(false);

		}

		#endregion
		public ComponentFactory.Krypton.Toolkit.KryptonButton buttonAddEventHandler;
		private System.Windows.Forms.LabelExtended __0x13458;
		public ComponentFactory.Krypton.Toolkit.KryptonButton buttonEditEventHandlers;
		private NeoAxis.Editor.EngineToolTip __0x13459;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridGroup : EUserControl, IHCGroup
	{
		public HCGridGroup()
		{
			__0x13462();

			if( EditorAPI.DarkTheme )
			{
				label1.ForeColor = Color.FromArgb( 160, 160, 160 );
				label1.BackColor = Color.FromArgb( 40, 40, 40 );
			}
		}

		public Label Label1
		{
			get { return label1; }
		}

		public override string ToString()
		{
			return nameof( HCGridGroup ) + ": " + label1.Text;
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridGroup
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13461 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13461 != null ) )
			{
				__0x13461.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13462()
		{
			this.label1 = new System.Windows.Forms.LabelExtended();
			this.SuspendLayout();
			
			
			
			this.label1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label1.BackColor = System.Drawing.Color.DarkGray;
			this.label1.Location = new System.Drawing.Point(0, 2);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(616, 21);
			this.label1.TabIndex = 0;
			this.label1.Text = "label1";
			this.label1.TextAlign = System.Drawing.ContentAlignment.MiddleLeft;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.label1);
			this.Name = "HCGridGroup";
			this.Size = new System.Drawing.Size(616, 25);
			this.ResumeLayout(false);

		}

		#endregion

		public System.Windows.Forms.LabelExtended label1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridLabel : EUserControl, IHCLabel
	{
		public HCGridLabel()
		{
			__0x13464();

			if( EditorAPI.DarkTheme )
				label2.StateCommon.Back.Color1 = Color.FromArgb( 54, 54, 54 );
			else
				label2.StateCommon.Back.Color1 = Color.FromArgb( 240, 240, 240 );

			label2.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			label2.AutoSize = false;
			label2.Height = Math.Max( DpiHelper.Default.ScaleValue( 18 ), label2.PreferredSize.Height );
		}

		
		
		
		

		public EngineTextBox Label2
		{
			get { return label2; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridLabel
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13463 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13463 != null ) )
			{
				__0x13463.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13464()
		{
			this.label2 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.label2.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.label2.Location = new System.Drawing.Point(0, 3);
			this.label2.LikeLabel = true;
			this.label2.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.label2.Name = "label2";
			this.label2.ReadOnly = true;
			this.label2.Size = new System.Drawing.Size(451, 23);
			this.label2.StateCommon.Border.Draw = ComponentFactory.Krypton.Toolkit.InheritBool.False;
			this.label2.StateCommon.Border.DrawBorders = ((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders)((((ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Top | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Bottom) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Left) 
            | ComponentFactory.Krypton.Toolkit.PaletteDrawBorders.Right)));
			this.label2.TabIndex = 2;
			this.label2.TabStop = false;
			this.label2.Text = "label2";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.label2);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridLabel";
			this.Size = new System.Drawing.Size(452, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox label2;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridProperty : EUserControl, IHCProperty
	{
		string __0x13465;
		int __0x13466;
		Control __0x13467;

		KryptonButton __0x13468;
		readonly Size __0x13469 = DpiHelper.Default.ScaleValue( new Size( 14, 14 ) );

		KryptonButton __0x13470;
		readonly Size __0x13471 = DpiHelper.Default.ScaleValue( new Size( 12, 12 ) );

		KryptonButton __0x13472;
		readonly Size __0x13473 = DpiHelper.Default.ScaleValue( new Size( 22, 18 ) );

		KryptonButton __0x13474;

		bool __0x13475;

		

		public HCGridProperty()
		{
			__0x13484();

			
			ResizeRedraw = true;

			EditorThemeUtility.ApplyDarkThemeToForm( this );

			if( __0x13482.Height < __0x13482.PreferredHeight )
				__0x13482.Height = __0x13482.PreferredHeight;

			
			
		}

		public Label LabelName
		{
			get { return __0x13482; }
		}

		public void LabelNameSetToolTip( string value )
		{
			if( __0x13483.GetToolTip( __0x13482 ) == string.Empty )
				__0x13483.SetToolTip( __0x13482, value );
		}

		public void ButtonExpandInit()
		{
			__0x13468 = new KryptonButton();

			__0x13468.Location = new Point( 2, DpiHelper.Default.ScaleValue( 5 ) );
			__0x13468.Size = __0x13469;
			if( !EditorAPI.DarkTheme )
				__0x13468.StateNormal.Back.Color1 = Color.WhiteSmoke;
			__0x13468.TabIndex = 0;
			if( EditorAPI.DarkTheme )
				__0x13468.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big_Dark" : "Plus_small3_Dark" );
			else
				__0x13468.Values.Image = EditorResourcesCache.GetImage( EditorAPI.DPIScale >= 1.5 ? "Plus_Big" : "Plus_small3" );
			__0x13468.Values.Text = "";
			__0x13468.Visible = false;

			Controls.Add( __0x13468 );
		}

		public KryptonButton ButtonExpand
		{
			get { return __0x13468; }
		}

		public void ButtonDefaultValueInit()
		{
			__0x13470 = new KryptonButton();

			__0x13470.Location = new Point( 0, DpiHelper.Default.ScaleValue( 6 ) );
			__0x13470.Size = __0x13471;
			__0x13470.StateCommon.Border.Draw = InheritBool.False;
			__0x13470.StateCommon.Border.DrawBorders = PaletteDrawBorders.Top | PaletteDrawBorders.Bottom | PaletteDrawBorders.Left | PaletteDrawBorders.Right;
			__0x13470.StateDisabled.Back.Draw = InheritBool.False;
			__0x13470.StateNormal.Back.Draw = InheritBool.False;
			__0x13470.TabIndex = 2;
			__0x13483.SetToolTip( this.__0x13470, EditorLocalization.Translate( "SettingsWindow", "Reset to default." ) );
			__0x13470.Values.Text = "";

			Controls.Add( __0x13470 );
		}

		public KryptonButton ButtonDefaultValue
		{
			get { return __0x13470; }
		}

		public void ButtonReferenceInit()
		{
			__0x13472 = new KryptonButton();

			__0x13472.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13472.Size = __0x13473;
			if( !EditorAPI.DarkTheme )
				__0x13472.StateNormal.Back.Color1 = Color.WhiteSmoke;
			__0x13472.TabIndex = 3;
			__0x13472.Values.Text = "";
			__0x13472.Visible = false;

			Controls.Add( __0x13472 );
		}

		public KryptonButton ButtonReference
		{
			get { return __0x13472; }
		}

		public void ButtonReferenceSetToolTip( string value )
		{
			if( __0x13465 != value && __0x13472 != null )
			{
				__0x13465 = value;
				__0x13483.SetToolTip( __0x13472, value );
			}
		}

		public void SetToolTip( Control control, string caption )
		{
			if( __0x13483.GetToolTip( control ) != caption )
				__0x13483.SetToolTip( control, caption );
		}

		public void ButtonTypeInit()
		{
			__0x13474 = new KryptonButton();

			__0x13474.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			__0x13474.Size = DpiHelper.Default.ScaleValue( new Size( 22, 18 ) );
			__0x13474.TabIndex = 6;
			__0x13483.SetToolTip( __0x13474, EditorLocalization.Translate( "SettingsWindow", "Select a class type." ) );
			__0x13474.Values.Text = "...";
			__0x13474.Visible = false;

			Controls.Add( __0x13474 );
		}

		public KryptonButton ButtonType
		{
			get { return __0x13474; }
		}

		public Control EditorControl
		{
			get { return __0x13467; }
			set
			{
				if( __0x13467 != null )
					Controls.Remove( __0x13467 );
				__0x13467 = value;

				Controls.Add( __0x13467 );

				
				SplitterPosition = (int)( this.Width / 2.5f );
			}
		}

		public int SplitterPosition
		{
			get { return __0x13466; }
			set
			{
				if( __0x13466 == value )
					return;
				__0x13466 = value;
				UpdateLayout();
			}
		}

		protected override void WndProc( ref Message m )
		{
			
			if( m.Msg == ComponentFactory.Krypton.Toolkit.PI.WM_NCHITTEST )
				m.Result = (IntPtr)ComponentFactory.Krypton.Toolkit.PI.HTTRANSPARENT;
			else
				base.WndProc( ref m );
		}

		internal virtual void UpdateLayout()
		{
			if( __0x13482.Width != __0x13466 - __0x13469.Width - HierarchicalContainer.SpliterWidth - 5 )
				__0x13482.Width = __0x13466 - __0x13469.Width - HierarchicalContainer.SpliterWidth - 5;
			if( __0x13482.Visible != !ShowOnlyEditorControl )
				__0x13482.Visible = !ShowOnlyEditorControl;

			int __0x13476 = 1;

			if( __0x13470 != null )
			{
				if( __0x13470.Location != new Point( __0x13466 + __0x13476, __0x13470.Location.Y ) )
					__0x13470.Location = new Point( __0x13466 + __0x13476, __0x13470.Location.Y );
			}
			__0x13476 += __0x13471.Width + 1;

			if( __0x13472 != null )
			{
				if( __0x13472.Location != new Point( __0x13466 + __0x13476, __0x13472.Location.Y ) )
					__0x13472.Location = new Point( __0x13466 + __0x13476, __0x13472.Location.Y );
			}
			__0x13476 += __0x13473.Width + 3;

			if( __0x13474 != null && __0x13474.Visible )
			{
				if( __0x13474.Location != new Point( __0x13466 + __0x13476, __0x13474.Location.Y ) )
					__0x13474.Location = new Point( __0x13466 + __0x13476, __0x13474.Location.Y );
				__0x13476 += __0x13474.Width + 1;
			}

			if( ShowOnlyEditorControl )
			{
				if( __0x13467.Dock != DockStyle.Fill )
					__0x13467.Dock = DockStyle.Fill;
			}
			else
			{
				if( __0x13467.Location != new Point( __0x13466 + __0x13476, 0 ) )
					__0x13467.Location = new Point( __0x13466 + __0x13476, 0 );
				if( __0x13467.Width != Width - EditorControl.Location.X - 2 )
					__0x13467.Width = Width - EditorControl.Location.X - 2;
			}
		}

		
		
		
		
		
		
		
		
		

		protected override void OnPaint( PaintEventArgs e )
		{
			base.OnPaint( e );

			

			if( HierarchicalContainer.DrawSplitter )
			{
#if !ANDROID
				var __0x13477 = EditorAPI.DarkTheme ? Color.FromArgb( 65, 65, 65 ) : Color.FromArgb( 225, 225, 225 );

				var __0x13478 = Parent as HierarchicalContainer;
				
				if( __0x13478 == null && Parent != null )
					__0x13478 = Parent.Parent as HierarchicalContainer;

				if( !__0x13478.ParentFormResizing )
				{
					
					using( Pen __0x13479 = new Pen( __0x13477 ) )
					{
						__0x13479.Width = HierarchicalContainer.SpliterWidth;
						int __0x13480 = __0x13478.SplitterPosition - HierarchicalContainer.SpliterWidth / 2;
						e.Graphics.DrawLine( __0x13479, __0x13480, 0, __0x13480, this.Height );
					}
				}
#endif 
			}
		}

		public override string ToString()
		{
			return nameof( HCGridProperty ) + ": " + __0x13482.Text;
		}

		[Browsable( false )]
		public bool ShowOnlyEditorControl
		{
			get { return __0x13475; }
			set { __0x13475 = value; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridProperty
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13481 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13481 != null ) )
			{
				__0x13481.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13484()
		{
			this.__0x13481 = new System.ComponentModel.Container();
			this.__0x13482 = new System.Windows.Forms.LabelExtended();
			this.__0x13483 = new NeoAxis.Editor.EngineToolTip(this.__0x13481);
			this.SuspendLayout();
			
			
			
			this.__0x13482.AutoEllipsis = true;
			this.__0x13482.Location = new System.Drawing.Point(22, 6);
			this.__0x13482.Name = "labelName";
			this.__0x13482.Size = new System.Drawing.Size(55, 17);
			this.__0x13482.TabIndex = 1;
			this.__0x13482.Text = "{Name}";
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13482);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridProperty";
			this.Size = new System.Drawing.Size(516, 28);
			this.ResumeLayout(false);

		}

		#endregion
		
		
		private System.Windows.Forms.LabelExtended __0x13482;
		
		
		private NeoAxis.Editor.EngineToolTip __0x13483;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBox : EUserControl, IHCTextBox
	{
		public HCGridTextBox()
		{
			__0x13486();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );
		}

		
		
		
		

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}
	}
}


namespace NeoAxis.Editor
{
	partial class HCGridTextBox
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13485 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13485 != null ) )
			{
				__0x13485.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13486()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.textBox1.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox1.Location = new System.Drawing.Point(0, 3);
			this.textBox1.LikeLabel = false;
			this.textBox1.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(307, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBox";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBoxNumeric : EUserControl, IHCTextBoxNumeric
	{
		public HCGridTextBoxNumeric()
		{
			__0x13489();

			textBox1.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox1.AutoSize = false;
			textBox1.Height = DpiHelper.Default.ScaleValue( 18 );
		}

		public EngineTextBox TextBox
		{
			get { return textBox1; }
		}

		public KryptonTrackBar TrackBar
		{
			get { return __0x13488; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridTextBoxNumeric
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13487 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13487 != null ) )
			{
				__0x13487.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13489()
		{
			this.textBox1 = new NeoAxis.Editor.EngineTextBox();
			this.__0x13488 = new ComponentFactory.Krypton.Toolkit.KryptonTrackBar();
			this.SuspendLayout();
			
			
			
			this.textBox1.Location = new System.Drawing.Point( 0, 4 );
			
			this.textBox1.LikeLabel = false;
			this.textBox1.Name = "textBox1";
			this.textBox1.Size = new System.Drawing.Size(64, 22);
			this.textBox1.TabIndex = 1;
			
			
			
			this.__0x13488.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.__0x13488.DrawBackground = true;
			this.__0x13488.Location = new System.Drawing.Point(69, 4);
			this.__0x13488.Name = "trackBar";
			this.__0x13488.Size = new System.Drawing.Size(237, 20);
			this.__0x13488.TabIndex = 2;
			this.__0x13488.TickStyle = System.Windows.Forms.TickStyle.None;
			this.__0x13488.TrackBarSize = ComponentFactory.Krypton.Toolkit.PaletteTrackBarSize.Small;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.__0x13488);
			this.Controls.Add(this.textBox1);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBoxNumeric";
			this.Size = new System.Drawing.Size(307, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox1;
		private ComponentFactory.Krypton.Toolkit.KryptonTrackBar __0x13488;
	}
}





namespace NeoAxis.Editor
{
	public partial class HCGridTextBoxSelect : EUserControl, IHCTextBoxSelect
	{
		public HCGridTextBoxSelect()
		{
			__0x13492();

			if( textBox != null )
				textBox.LikeLabel = UseReadOnlyLabel;

			if( EditorAPI.DarkTheme )
				buttonSelect.Values.Image = Properties.Resources.DropDownButton_Dark;

			textBox.Location = new Point( 0, DpiHelper.Default.ScaleValue( 3 ) );
			textBox.AutoSize = false;
			textBox.Height = DpiHelper.Default.ScaleValue( 18 );

			buttonSelect.Location = new Point( buttonSelect.Location.X, DpiHelper.Default.ScaleValue( 3 ) );
		}

		bool __0x13490 = false;
		public bool UseReadOnlyLabel
		{
			get { return __0x13490; }
			set
			{
				__0x13490 = value;
				if( textBox != null )
					textBox.LikeLabel = value;
			}
		}

		public EngineTextBox TextBox
		{
			get { return textBox; }
		}

		public KryptonButton ButtonSelect
		{
			get { return buttonSelect; }
		}
	}
}

namespace NeoAxis.Editor
{
	partial class HCGridTextBoxSelect
	{
		/// <summary> 
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.IContainer __0x13491 = null;

		/// <summary> 
		/// Clean up any resources being used.
		/// </summary>
		/// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
		protected override void Dispose( bool disposing )
		{
			if( disposing && ( __0x13491 != null ) )
			{
				__0x13491.Dispose();
			}
			base.Dispose( disposing );
		}

		#region Component Designer generated code

		/// <summary> 
		/// Required method for Designer support - do not modify 
		/// the contents of this method with the code editor.
		/// </summary>
		private void __0x13492()
		{
			this.buttonSelect = new ComponentFactory.Krypton.Toolkit.KryptonButton();
			this.textBox = new NeoAxis.Editor.EngineTextBox();
			this.SuspendLayout();
			
			
			
			this.buttonSelect.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
			this.buttonSelect.Location = new System.Drawing.Point(259, 3);
			this.buttonSelect.Name = "buttonSelect";
			this.buttonSelect.Size = new System.Drawing.Size(26, 22);
			this.buttonSelect.TabIndex = 1;
			this.buttonSelect.Values.Image = global::NeoAxis.Properties.Resources.DropDownButton;
			this.buttonSelect.Values.Text = "";
			
			
			
			this.textBox.Anchor = ((System.Windows.Forms.AnchorStyles)(((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
            | System.Windows.Forms.AnchorStyles.Right)));
			this.textBox.Location = new System.Drawing.Point(0, 3);
			this.textBox.LikeLabel = false;
			this.textBox.Name = "textBox";
			this.textBox.Size = new System.Drawing.Size(257, 21);
			this.textBox.TabIndex = 0;
			
			
			
			this.AutoScaleDimensions = new System.Drawing.SizeF(8F, 16F);
			this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
			this.Controls.Add(this.buttonSelect);
			this.Controls.Add(this.textBox);
			this.Margin = new System.Windows.Forms.Padding(3, 2, 3, 2);
			this.Name = "HCGridTextBoxSelect";
			this.Size = new System.Drawing.Size(285, 28);
			this.ResumeLayout(false);
			this.PerformLayout();

		}

		#endregion
		public EngineTextBox textBox;
		public ComponentFactory.Krypton.Toolkit.KryptonButton buttonSelect;
	}
}


