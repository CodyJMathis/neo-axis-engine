<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NeoAxis.Core</name>
    </assembly>
    <members>
        <member name="T:NeoAxis.AssemblyResource">
            <summary>
            The class to handle dynamic link library (DLL) as a resource.
            </summary>
        </member>
        <member name="T:NeoAxis.AssemblyResource.InstanceAssembly">
            <summary>
            Represents an instance of <see cref="T:NeoAxis.AssemblyResource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ResourceFileExtensionAttribute">
            <summary>
            Attribute to specify the resource file name extension.
            </summary>
        </member>
        <member name="T:NeoAxis.AutoConvertTypeAttribute">
            <summary>
            Attribute tagging method or constructor as a function of autoconversion types.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceValueType_Resource">
            <summary>
            Specifies the type to configure a reference to a resource.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceValueType_Member">
            <summary>
            Specifies the type to configure a reference to a type member.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceValueType_Method">
            <summary>
            Specifies the type to configure a reference to a type method.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceValueType_Property">
            <summary>
            Specifies the type to configure a reference to a type property.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceValueType_Event">
            <summary>
            Specifies the type to configure a reference to a type event.
            </summary>
        </member>
        <member name="T:NeoAxis.DefaultValueReferenceAttribute">
            <summary>
            Specifies the default reference value.
            </summary>
        </member>
        <member name="T:NeoAxis.CloneType">
            <summary>
            Enumerates possible ways to clone field and property values.
            </summary>
        </member>
        <member name="T:NeoAxis.CloneableAttribute">
            <summary>
            Specifies how the field or property is cloned.
            </summary>
        </member>
        <member name="T:NeoAxis.SerializeType">
            <summary>
            Enumerate possible ways to serialize field and property values.
            </summary>
        </member>
        <member name="T:NeoAxis.SerializeAttribute">
            <summary>
            Specifies that a field or property supports serialization.
            </summary>
        </member>
        <member name="P:NeoAxis.SerializeAttribute.MemberName">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="M:NeoAxis.SerializeAttribute.#ctor(NeoAxis.SerializeType,System.String)">
            <summary>
            Initializes a new instance of the class.
            </summary>
        </member>
        <member name="T:NeoAxis.ICanParseFromAndConvertToString">
            <summary>
            An interface confirming that the type has a static method Parse(string text) and value can converted to string by means ToString().
            </summary>
        </member>
        <member name="T:NeoAxis.NewObjectDefaultNameAttribute">
            <summary>
            An attribute to specify default name for new instances of the type.
            </summary>
        </member>
        <member name="T:NeoAxis.Component">
            <summary>
            Base class of all components.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.CreatedByBaseType">
            <summary>
            Whether the object is created using a base type.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.EditorDocumentConfiguration">
            <summary>
            Gets or sets the configuration data of the object's settings in the editor.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnEnabledChanged">
            <summary>
            Called when value of <see cref="P:NeoAxis.Component.Enabled"/> property is changed.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnEnabledInHierarchyChanged">
            <summary>
            Called when value of <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property is changed.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.EnabledChanged">
            <summary>
            Occurs when the <see cref="P:NeoAxis.Component.Enabled"/> property value changes.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.EnabledInHierarchyChanged">
            <summary>
            Occurs when the <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property value changes.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.Enabled">
            <summary>
            Whether the component is enabled. Any functionality of component is not works when it disabled.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.EnabledInHierarchy">
            <summary>
            Determines whether the object is attached to a hierarchy of the components and enabled. The object will be enabled only when all parents are enabled, and the property <see cref="P:NeoAxis.Component.Enabled"/> is enabled.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnEnabled">
            <summary>
            Called when the object is attached to a hierarchy of the components and is enabled. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.EnabledEvent">
            <summary>
            Occurs when the object is attached to a hierarchy of the components and is enabled. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnEnabledInSimulation">
            <summary>
            Called when the object is attached to a hierarchy of the components and is enabled. The method is called only in simulation application. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.EnabledInSimulation">
            <summary>
            Occurs when the object is attached to a hierarchy of the components and is enabled. The method is called only in simulation application. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnDisabled">
            <summary>
            Called when the object is detached from a hierarchy of the components or is disabled. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.DisabledEvent">
            <summary>
            Occurs when the object is disabled from a hierarchy of the components or is disabled. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnDisabledInSimulation">
            <summary>
            Called when the object is detached from a hierarchy of the components or is disabled. The method is called only in simulation application. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.DisabledInSimulation">
            <summary>
            Occurs when the object is detached from a hierarchy of the components or is disabled. The method is called only in simulation application. See also <see cref="P:NeoAxis.Component.EnabledInHierarchy"/> property.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.SaveSupport">
            <summary>
            Whether the object supports saving to a file.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.SaveSupportChanged">
            <summary>
            Occurs after changing value of <see cref="P:NeoAxis.Component.SaveSupport"/> property.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.CloneSupport">
            <summary>
            Whether the object supports cloning.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.CloneSupportChanged">
            <summary>
            Occurs after changing value of <see cref="P:NeoAxis.Component.CloneSupport"/> property.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.LoadEvent">
            <summary>
            Occurs during object loading.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.SaveEvent">
            <summary>
            Occurs during object saving.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.CloneEvent">
            <summary>
            Occurs when object is cloned.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnLoad(NeoAxis.Metadata.LoadContext,NeoAxis.TextBlock,System.String@)">
            <summary>
            Called during object loading.
            </summary>
            <param name="context"></param>
            <param name="block"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.OnSave(NeoAxis.Metadata.SaveContext,NeoAxis.TextBlock,System.Boolean@,System.String@)">
            <summary>
            Called during object saving.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnClone(NeoAxis.Metadata.CloneContext,NeoAxis.Component)">
            <summary>
            Called when the object is cloned.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.Clone(NeoAxis.Metadata.CloneContext)">
            <summary>
            Creates a copy of the object.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.Components">
            <summary>
            Gets the collection of the child components.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.GetComponentByNameWithIndex(System.String,System.Int32)">
            <summary>
            Finds a child component by name and number in the case when there are several components with the specified name.
            </summary>
            <param name="name"></param>
            <param name="nameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponent(System.String,System.Boolean)">
            <summary>
            Finds a child component by name.
            </summary>
            <param name="name"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponent``1(System.String,System.Boolean)">
            <summary>
            Finds a child component by name with the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponentByPath(System.String)">
            <summary>
            Finds a child component by path.
            </summary>
            <param name="nameOrPath"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponent(NeoAxis.Metadata.TypeInfo,System.Boolean,System.Boolean)">
            <summary>
            Finds a child component of the specified type.
            </summary>
            <param name="componentClass"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponent(System.Type,System.Boolean,System.Boolean)">
            <summary>
            Finds a child component of the specified type.
            </summary>
            <param name="componentClass"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponent``1(System.Boolean,System.Boolean)">
            <summary>
            Finds a child component of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponents(NeoAxis.Metadata.TypeInfo,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds child components of the specified type.
            </summary>
            <param name="componentClass"></param>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponents(System.Type,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds child components of the specified type.
            </summary>
            <param name="componentClass"></param>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds child components.
            </summary>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponents``1(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Finds child components of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetComponents(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Action{NeoAxis.Component})">
            <summary>
            Finds child components.
            </summary>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <param name="depthFirstSearch"></param>
            <param name="action"></param>
        </member>
        <member name="M:NeoAxis.Component.GetComponents``1(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Action{``0})">
            <summary>
            Finds child components of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="reverse"></param>
            <param name="checkChildren"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <param name="depthFirstSearch"></param>
            <param name="action"></param>
        </member>
        <member name="M:NeoAxis.Component.AddComponent(NeoAxis.Component,System.Int32)">
            <summary>
            Adds a component as a child.
            </summary>
            <param name="component"></param>
            <param name="insertIndex"></param>
        </member>
        <member name="M:NeoAxis.Component.CreateComponent(NeoAxis.Metadata.TypeInfo,System.Int32,System.Boolean,System.Boolean,NeoAxis.NetworkModeEnum)">
            <summary>
            Creates a child component.
            </summary>
            <param name="type"></param>
            <param name="insertIndex"></param>
            <param name="enabled"></param>
            <param name="setUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.CreateComponent(System.Type,System.Int32,System.Boolean,System.Boolean,NeoAxis.NetworkModeEnum)">
            <summary>
            Creates a child component.
            </summary>
            <param name="classType"></param>
            <param name="insertIndex"></param>
            <param name="enabled"></param>
            <param name="setUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.CreateComponent``1(System.Int32,System.Boolean,System.Boolean,NeoAxis.NetworkModeEnum)">
            <summary>
            Creates a child component.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="insertIndex"></param>
            <param name="enabled"></param>
            <param name="setUniqueName"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.RemoveComponent(NeoAxis.Component,System.Boolean)">
            <summary>
            Removes a child component.
            </summary>
            <param name="component"></param>
            <param name="queued"></param>
        </member>
        <member name="M:NeoAxis.Component.RemoveAllComponents(System.Boolean)">
            <summary>
            Removes all child components.
            </summary>
            <param name="queued"></param>
        </member>
        <member name="T:NeoAxis.Component.ComponentSet">
            <summary>
            Represents a collection of child components.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.ParsePathNameWithIndex(System.String,System.String@,System.Int32@)">
            <summary>
            Extracts the name and index from the path string.
            </summary>
            <param name="value"></param>
            <param name="name"></param>
            <param name="nameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetByNameWithIndex(System.String,System.Int32)">
            <summary>
            Finds a child component by name and number in the case when there are several components with the specified name.
            </summary>
            <param name="name"></param>
            <param name="nameIndex"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetByName(System.String,System.Boolean)">
            <summary>
            Finds a child component by name.
            </summary>
            <param name="name"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetByName``1(System.String,System.Boolean)">
            <summary>
            Finds a child component by name with the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="onlyEnabledInHierarchy"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetByPath(System.String)">
            <summary>
            Finds a child component by path.
            </summary>
            <param name="nameOrPath"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.ComponentSet.Item(System.String)">
            <summary>
            Finds a child component by path.
            </summary>
            <param name="nameOrPath"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.ComponentSet.Count">
            <summary>
            Gets the number of child components.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.ComponentSet.IsReadOnly">
            <summary>
            Is the collection read only. Always returns false.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.ComponentSet.SyncRoot">
            <summary>
            Gets the object to be synchronized for multi-threaded operation.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.ComponentSet.IsSynchronized">
            <summary>
            Is the collection synchronized. Always returns false.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Contains(NeoAxis.Component)">
            <summary>
            Determines whether the object contains the specified child component.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.CopyTo(NeoAxis.Component[],System.Int32)">
            <summary>
            Copies a list of child components to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies a list of child components to an array.
            </summary>
            <param name="array"></param>
            <param name="arrayIndex"></param>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.ToArray">
            <summary>
            Copies a list of child components to an array.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetEnumerator">
            <summary>
            Returns an enumerator for traversing child components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator for traversing child components.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Reverse">
            <summary>
            Returns a collection of child components in the reverse order.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Add(NeoAxis.Component)">
            <summary>
            Adds a component as a child.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Clear">
            <summary>
            Removes all child components.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Clear(System.Boolean)">
            <summary>
            Removes all child components.
            </summary>
            <param name="queued"></param>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Remove(NeoAxis.Component)">
            <summary>
            Removes a child component.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.Remove(NeoAxis.Component,System.Boolean)">
            <summary>
            Removes a child component.
            </summary>
            <param name="item"></param>
            <param name="queued"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.MoveTo(NeoAxis.Component,System.Int32)">
            <summary>
            Moves the child component to another location relative to other children.
            </summary>
            <param name="item"></param>
            <param name="newPosition"></param>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.IndexOf(NeoAxis.Component)">
            <summary>
            Determines the position of the child components relative to other.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.ComponentSet.GetUniqueName(System.String,System.Boolean,System.Int32)">
            <summary>
            Finds a unique name by child components.
            </summary>
            <param name="prefix"></param>
            <param name="removePrefixEndNumbers"></param>
            <param name="startNumber"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.Parent">
            <summary>
            Gets the parent object.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.ParentRoot">
            <summary>
            Gets the parent root object.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.Name">
            <summary>
            The name of the component.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.NameChanged">
            <summary>
            Occurs when component name is changed.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.ScreenLabel">
            <summary>
            The displaying mode of an on-screen label of the component in the scene editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.ScreenLabelChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Component.ScreenLabel"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Component.NetworkMode">
            <summary>
            Whether to enable synchronization of the component between server and clients.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.NetworkModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Component.NetworkMode"/> property value changes.</summary>
        </member>
        <member name="M:NeoAxis.Component.RemoveFromParent(System.Boolean)">
            <summary>
            Detaches the object from its parent.
            </summary>
            <param name="queued">Whether to remove the objects later outside hierarchy loop. It is used to prevent exceptions when change the hierarchy during enumeration the hierarchy.</param>
        </member>
        <member name="P:NeoAxis.Component.RemoveFromParentQueued">
            <summary>
            Whether the object is placed in the detach queue from the parent.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.ComponentsChanged">
            <summary>
            Occurs when the set of children is changed.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.ComponentAdded">
            <summary>
            Occurs when a child component is added.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnComponentAdded(NeoAxis.Component)">
            <summary>
            Called when a child component is added.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.ComponentRemoved">
            <summary>
            Occurs when a child component is removed.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnComponentRemoved(NeoAxis.Component)">
            <summary>
            Called when a child component is removed.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.AddedToParent">
            <summary>
            Occurs when a component is added to the parent.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnAddedToParent">
            <summary>
            Called when a component is added to the parent.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.RemovedFromParent">
            <summary>
            Occurs when a component is removed from the parent.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnRemovedFromParent(NeoAxis.Component)">
            <summary>
            Called when a component is removed from the parent.
            </summary>
            <param name="oldParent"></param>
        </member>
        <member name="M:NeoAxis.Component.OnPreloadResources">
            <summary>
            Called when preloading the resources used by the object.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.PreloadResourcesEvent">
            <summary>
            Occurs when preloading the resources used by the object.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.PreloadResources">
            <summary>
            Preload resources used by the object.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.HierarchyController">
            <summary>
            Gets the object hierarchy control controller.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.BaseType">
            <summary>
            Gets the base type of the object.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnMetadataGetMembers">
            <summary>
            Called upon receipt of the object's metadata members.
            </summary>
            <returns></returns>
        </member>
        <member name="E:NeoAxis.Component.MetadataGetMembersEvent">
            <summary>
            Occurs upon receipt of the object's metadata members.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.MetadataGetMembers(NeoAxis.Metadata.GetMembersContext)">
            <summary>
            Returns the object metadata members.
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.OnMetadataGetMemberBySignature(System.String)">
            <summary>
            Called when the object metadata member is received by name.
            </summary>
            <param name="signature"></param>
            <returns></returns>
        </member>
        <member name="E:NeoAxis.Component.MetadataGetMemberBySignatureEvent">
            <summary>
            Occurs when the object metadata member is received by name.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.MetadataGetMemberBySignature(System.String,NeoAxis.Metadata.GetMembersContext)">
            <summary>
            Returns the object metadata member by name.
            </summary>
            <param name="signature"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.OnMetadataGetMembersFilter(NeoAxis.Metadata.GetMembersContext,NeoAxis.Metadata.Member,System.Boolean@)">
            <summary>
            Called when filtering receive members of the object metadata.
            </summary>
            <param name="context"></param>
            <param name="member"></param>
            <param name="skip"></param>
        </member>
        <member name="E:NeoAxis.Component.MetadataGetMembersFilterEvent">
            <summary>
            Occurs when filtering receive members of the object metadata.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.Disposed">
            <summary>
            Whether the object is disposed.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.DisposeEvent">
            <summary>
            Occurs when the object is disposed.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnDispose">
            <summary>
            Called when the object is disposed.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.Dispose">
            <summary>
            Detaches the object from the hierarchy and deletes the object data.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.ToString">
            <summary>
            Returns the name and type of the object as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetPathFromParent">
            <summary>
            Returns the path to the object from the parent.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetPathFromRoot(System.Boolean)">
            <summary>
            Returns the object's access path from the root object.
            </summary>
            <param name="displayableForUser"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetProvidedType">
            <summary>
            Returns a type when the object is used as a type.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.OnUpdate(System.Single)">
            <summary>
            Called during the update process of all objects.
            </summary>
            <param name="delta"></param>
        </member>
        <member name="E:NeoAxis.Component.UpdateEvent">
            <summary>
            Occurs during the update process of all objects.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnSimulationStep">
            <summary>
            Called during the simulation step.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.SimulationStep">
            <summary>
            Occurs during the simulation step.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.OnSimulationStepClient">
            <summary>
            Called during the simulation step.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.SimulationStepClient">
            <summary>
            Occurs during the simulation step.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.EditorReadOnly">
            <summary>
            Whether the object is read only in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.EditorReadOnlyInHierarchy">
            <summary>
            Whether the object is read-only in the editor with respect to parent objects.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.FindThisOrParent(NeoAxis.Metadata.TypeInfo)">
            <summary>
            Finds the parent or self of the specified type.
            </summary>
            <param name="componentClass"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.FindThisOrParent(System.Type)">
            <summary>
            Finds the parent or self of the specified type.
            </summary>
            <param name="componentClass"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.FindThisOrParent``1">
            <summary>
            Finds the parent or self of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.FindParent(NeoAxis.Metadata.TypeInfo)">
            <summary>
            Finds the parent of the specified type.
            </summary>
            <param name="componentClass"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.FindParent(System.Type)">
            <summary>
            Finds the parent of the specified type.
            </summary>
            <param name="componentClass"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.FindParent``1">
            <summary>
            Finds the parent of the specified type.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.GetAllParents(System.Boolean)">
            <summary>
            Gets all parents of the component.
            </summary>
            <param name="makeOrderFromTopToBottom"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.DisplayInEditor">
            <summary>
            Whether to show the object in the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Component.DisplayInEditorChanged">
            <summary>
            Occurs when value of <see cref="P:NeoAxis.Component.DisplayInEditor"/> property is changed.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.NewObjectSetDefaultConfiguration(System.Boolean)">
            <summary>
            Called when the object is created in the editor. Designed to configure the initial state.
            </summary>
            <param name="createdFromNewObjectWindow"></param>
        </member>
        <member name="M:NeoAxis.Component.NewObjectSetDefaultConfigurationUpdate">
            <summary>
            Called during object creation in the editor. Designed to configure the initial state.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.TypeSettingsPrivateObjects">
            <summary>
            Object settings when used as a type.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.MethodInvoke(System.String,System.Object[],System.Double,System.Double)">
            <summary>
            Calls a method by name.
            </summary>
            <param name="name"></param>
            <param name="parameters"></param>
            <param name="time"></param>
            <param name="repeatRate"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.IsMethodInvoking(System.String)">
            <summary>
            Checks if a method is running over time. You can start executing such methods using <see cref="M:NeoAxis.Component.MethodInvoke(System.String,System.Object[],System.Double,System.Double)"/> method.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.MethodInvokeCancel(System.String)">
            <summary>
            Cancels the execution of selected method that run over time. You can start executing such methods using <see cref="M:NeoAxis.Component.MethodInvoke(System.String,System.Object[],System.Double,System.Double)"/> method.
            </summary>
            <param name="name"></param>
        </member>
        <member name="M:NeoAxis.Component.MethodInvokeCancelAll">
            <summary>
            Cancels the execution of all methods that run over time. You can start executing such methods using <see cref="M:NeoAxis.Component.MethodInvoke(System.String,System.Object[],System.Double,System.Double)"/> method.
            </summary>
        </member>
        <member name="M:NeoAxis.Component.PropertyGet(System.String,System.Object[],System.Boolean)">
            <summary>
            Gets the value of a property by name.
            </summary>
            <param name="name"></param>
            <param name="indexers"></param>
            <param name="unreferenceValue"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.PropertyGet``1(System.String,System.Object[],System.Boolean)">
            <summary>
            Gets the value of a property by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="name"></param>
            <param name="indexers"></param>
            <param name="unreferenceValue"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.PropertySet(System.String,System.Object,System.Object[])">
            <summary>
            Sets the value of a property by name.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="indexers"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.Print(System.Object)">
            <summary>
            Calls <see cref="M:NeoAxis.Log.Info(System.Object)"/>.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:NeoAxis.Component.TypeSettingsIsPublic">
            <summary>
            Checks whether the object provided as a type is public.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Component.TypeSettingsIsPublicMember(NeoAxis.Metadata.Member)">
            <summary>
            Checks whether the member is set up as public.
            </summary>
            <param name="member"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.Component.AnyData">
            <summary>
            The user data of the component.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.EnabledInHierarchyAndIsInstance">
            <summary>
            Determines when the object is attached to a hierarchy of the components, is enabled and the object if not part of a resource (it is usual object instance). The object will be enabled only when all parents are enabled, and the property <see cref="P:NeoAxis.Component.Enabled"/> is enabled.
            </summary>
        </member>
        <member name="P:NeoAxis.Component.NetworkIsServer">
            <summary>
            Whether to work in network server mode. It is false until the scene is not loaded.
            </summary>
        </member>
        <member name="T:NeoAxis.ComponentHierarchyController">
            <summary>
            The class for managing the component hierarchy.
            </summary>
        </member>
        <member name="T:NeoAxis.ComponentUtility">
            <summary>
            An auxiliary class for working with components.
            </summary>
        </member>
        <member name="T:NeoAxis.ThreadSafeExchangeAny`1">
            <summary>
            Specifies a structure for thread-safe storage of values of any type.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.ThreadSafeExchangeBool">
            <summary>
            Specifies a structure for thread-safe storage of boolean value.
            </summary>
        </member>
        <member name="T:NeoAxis.ThreadSafeDisposable">
            <summary>
            Specifies a structure for class creation with thread-safe implemetntation of Dispose method.
            </summary>
        </member>
        <member name="T:NeoAxis.EngineThreading">
            <summary>
            Class for multi-threading in the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata">
            <summary>
            Specifies the engine metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.IMetadataProvider">
            <summary>
            An interface to provide engine's metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Member">
            <summary>
            Obtains information about the attributes of a member and provides access to member metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Parameter">
            <summary>
            Keeps the attributes of a parameter and provides access to parameter metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Method">
            <summary>
            Keeps the attributes of a method and provides access to method metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Event">
            <summary>
            Keeps the attributes of an event and provides access to event metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Property">
            <summary>
            Keeps the attributes of a property and provides access to property metadata.
            </summary>
        </member>
        <member name="P:NeoAxis.Metadata.Property.TypeUnreferenced">
            <summary>
            This need to determine non .NET type when it wrapped by the reference.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.Delegate">
            <summary>
            Represents a delegate, which is a data structure that refers to a static method or to a class instance and an instance method of that class.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.TypeClassification">
            <summary>
            The list of supported types of engine's metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.TypeInfo">
            <summary>
            Represents a base class for type declarations for class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.NetTypeInfo">
            <summary>
            Represents type declarations for .NET class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.NetTypeInfo.NetMethod">
            <summary>
            Keeps the attributes of a .NET method and provides access to method metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.NetTypeInfo.NetProperty">
            <summary>
            Keeps the attributes of a .NET property and provides access to property metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.NetTypeInfo.NetEvent">
            <summary>
            Keeps the attributes of a .NET event and provides access to event metadata.
            </summary>
        </member>
        <member name="P:NeoAxis.Metadata.NetTypeInfo.Namespace">
            <summary>
            Same as Type.Namespace. Faster.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.ComponentTypeInfo">
            <summary>
            Represents type declarations for custom class types, interface types, array types, value types, enumeration types, type parameters, generic type definitions, and open or closed constructed generic types.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.GetMembersContext">
            <summary>
            Represents a settings for getting list of members of the type by <see cref="M:NeoAxis.Metadata.IMetadataProvider.MetadataGetMembers(NeoAxis.Metadata.GetMembersContext)"/> method.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.LoadContext">
            <summary>
            Provides data when objects are loading.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.LoadContext.ComponentItem">
            <summary>
            Represents a item of component for <see cref="T:NeoAxis.Metadata.LoadContext"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.SaveContext">
            <summary>
            Provides data when objects are saving.
            </summary>
        </member>
        <member name="T:NeoAxis.Metadata.CloneContext">
            <summary>
            Provides data when objects are cloning.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager">
            <summary>
            Specifies a manager for working with engine metadata.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.ReferenceType">
            <summary>
            Represents a data of supported reference type.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.SerializableTypeItem">
            <summary>
            Represents an item of serializable type.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.AutoConvertTypeItem">
            <summary>
            Represents an item of autoconvertable type.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.Serialization">
            <summary>
            Provides the functionality of engine serialization.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.Serialization.MemberData">
            <summary>
            Provides member info for engine serialization.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.Serialization.MetadataPropertyData">
            <summary>
            Provides a property data for engine serialization.
            </summary>
        </member>
        <member name="T:NeoAxis.MetadataManager.Serialization.ContainerElementData">
            <summary>
            Provides a element data of container for engine serialization.
            </summary>
        </member>
        <member name="T:NeoAxis.ObjectEx">
            <summary>
            A helper class for working with .NET objects.
            </summary>
        </member>
        <member name="M:NeoAxis.ObjectEx.MethodInvoke(System.Object,System.String,System.Object[])">
            <summary>
            Calls the object method by name.
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.ObjectEx.PropertyGet(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Gets the value of the object property by name.
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="indexers"></param>
            <param name="unreferenceValue"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.ObjectEx.PropertyGet``1(System.Object,System.String,System.Object[],System.Boolean)">
            <summary>
            Gets the value of the object property by name.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="indexers"></param>
            <param name="unreferenceValue"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.ObjectEx.PropertySet(System.Object,System.String,System.Object,System.Object[])">
            <summary>
            Sets the value of the object property by name.
            </summary>
            <param name="obj"></param>
            <param name="name"></param>
            <param name="value"></param>
            <param name="indexers"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.IReference">
            <summary>
            Specifies a read access interface to <see cref="T:NeoAxis.Reference`1"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.IReference.GetMember(System.Object,System.Object@,NeoAxis.Metadata.Member@)">
            <summary>
            </summary>
            <param name="owner"></param>
            <param name="outObject">outObject can be null for static members.</param>
            <param name="outMember"></param>
        </member>
        <member name="T:NeoAxis.Reference`1">
            <summary>
            Specifies a reference of the engine.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.ReferenceField`1">
            <summary>
            Specifies a structure for creating a field and property with <see cref="T:NeoAxis.Reference`1"/> support.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.ReferenceNoValue">
            <summary>
            Specifies a structure of <see cref="T:NeoAxis.Reference`1"/> value without real value. The structure is used to transfer the value of the reference without specifying the value type.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceUtility">
            <summary>
            A helper class for working with references.
            </summary>
        </member>
        <member name="T:NeoAxis.Resource">
            <summary>
            Specifies a resource of the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.Resource.Instance">
            <summary>
            Represents an instance of <see cref="T:NeoAxis.Resource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ResourceManager">
            <summary>
            Class for working with engine resources.
            </summary>
        </member>
        <member name="T:NeoAxis.ResourceManager.ResourceType">
            <summary>
            Represents a type of a resource.
            </summary>
        </member>
        <member name="T:NeoAxis.ResourceUtility">
            <summary>
            A helper class for working with base resources of the project.
            </summary>
        </member>
        <member name="T:NeoAxis.ResultCompile`1">
            <summary>
            Base class for objects that prepare a result.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeoAxis.ResultCompile`1.OnResultCompile">
            <summary>
            Function for the implementation of the calculation of the result.
            </summary>
        </member>
        <member name="M:NeoAxis.ResultCompile`1.PerformResultCompile">
            <summary>
            Performs recompilation of the result.
            </summary>
        </member>
        <member name="E:NeoAxis.ResultCompile`1.ResultCompileBegin">
            <summary>
            Occurs before compiling the result.
            </summary>
        </member>
        <member name="E:NeoAxis.ResultCompile`1.ResultCompileEnd">
            <summary>
            Occurs after the completion of the compilation of the result.
            </summary>
        </member>
        <member name="M:NeoAxis.ResultCompile`1.ResultDispose">
            <summary>
            Clears the result.
            </summary>
        </member>
        <member name="P:NeoAxis.ResultCompile`1.Result">
            <summary>
            The result provided by the object.
            </summary>
        </member>
        <member name="E:NeoAxis.ResultCompile`1.ResultChanged">
            <summary>
            Occurs after changing the result value.
            </summary>
            <summary>Occurs when the <see cref="P:NeoAxis.ResultCompile`1.Result"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ResultCompile`1.ResultCompileUpdateMode">
            <summary>
            Mode update of the object.
            </summary>
        </member>
        <member name="P:NeoAxis.ResultCompile`1.ShouldRecompile">
            <summary>
            Whether to update the resulting object data.
            </summary>
        </member>
        <member name="T:NeoAxis.SystemFunctionality">
            <summary>
            A class to work with the operating system.
            </summary>
        </member>
        <member name="T:NeoAxis.SystemSettings">
            <summary>
            A class for getting information about the operating system.
            </summary>
        </member>
        <member name="T:NeoAxis.SystemSettings.DisplayInfo">
            <summary>
            Represents an item for <see cref="P:NeoAxis.SystemSettings.AllDisplays"/> property.
            </summary>
        </member>
        <member name="P:NeoAxis.SystemSettings.AllDisplays">
            <summary>
            Returns a list of available displays in the system.
            </summary>
        </member>
        <member name="P:NeoAxis.SystemSettings.LimitedDevice">
            <summary>
            Android, iOS, Web.
            </summary>
        </member>
        <member name="P:NeoAxis.SystemSettings.MobileDevice">
            <summary>
            Android, iOS.
            </summary>
        </member>
        <member name="T:NeoAxis.Time">
            <summary>
            A class for working with time in the engine.
            </summary>
        </member>
        <member name="P:NeoAxis.Time.SimulationDelta">
            <summary>
            Gets the time step of the simulation.
            </summary>
        </member>
        <member name="P:NeoAxis.Time.Current">
            <summary>
            Gets the current time in the engine. The engine time is updated once before a simulation step or before a frame update if it is an editor.
            </summary>
        </member>
        <member name="T:NeoAxis.TypeUtility">
            <summary>
            A helper class for working with types of the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.Area">
            <summary>
            Represents an area in the scene defined by the set of points.
            </summary>
        </member>
        <member name="T:NeoAxis.AreaPoint">
            <summary>
            Represents a point of the <see cref="T:NeoAxis.Area"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Billboard">
            <summary>
            A flat object in the scene, which faces the camera.
            </summary>
        </member>
        <member name="P:NeoAxis.Billboard.Size">
            <summary>
            The size of the billboard.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.SizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.Size"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.Rotation">
            <summary>
            The rotation of the billboard.
            </summary>
        </member>
        <member name="P:NeoAxis.Billboard.Material">
            <summary>
            The material of the billboard.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.Color">
            <summary>
            The base color and opacity multiplier.
            </summary>
        </member>
        <member name="P:NeoAxis.Billboard.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.ShadowOffset">
            <summary>
            Indent multiplier when rendering shadows to fix overlapping effect of the object with the shadow.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.ShadowOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.ShadowOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.ReceiveDecals">
            <summary>
            Whether to can apply decals the billboard.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Billboard.SpecialEffects">
            <summary>
            Specifies settings for special object effects, such as an outline effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Billboard.SpecialEffectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Billboard.SpecialEffects"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product">
            <summary>
            Represents the product build settings.
            </summary>
        </member>
        <member name="P:NeoAxis.Product.SortOrder">
            <summary>
            The position of the product in the product list for build.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.SortOrderChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.SortOrder"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product.Paths">
            <summary>
            The list of folders and files to add. Items are separated by return or semicolon. The item can have a prefix 'exclude:' to remove selected path.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.PathsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.Paths"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product.FileCache">
            <summary>
            Whether to include the cache of auto-compressed images.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.FileCacheChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.FileCache"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product.ShaderCache">
            <summary>
            Whether to include shader cache.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.ShaderCacheChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.ShaderCache"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product.SkipFilesWithExtension">
            <summary>
            The list of file extensions to remove. Items are separated by return or semicolon.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.SkipFilesWithExtensionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.SkipFilesWithExtension"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product.ClearFilesWithExtension">
            <summary>
            The list of file extensions to clear. Items are separated by return or semicolon. Clearing of files is used for source 3D models, because the actual data of 3D models is stored in settings files. It is enough to save empty original files.
            </summary>
        </member>
        <member name="E:NeoAxis.Product.ClearFilesWithExtensionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product.ClearFilesWithExtension"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Editor.GroupOfObjectsUndo">
            <summary>
            Auxiliary class for <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.EditorAPI">
            <summary>
            Provides an interface to work with the editor. Useful in the case when need to call editor functionality without adding a reference to NeoAxis.Core.Editor.dll.
            </summary>
        </member>
        <member name="M:NeoAxis.Editor.EditorAPI.RegisterEditorAction(System.String,System.String,System.Object,System.ValueTuple{System.String,System.String},System.Action{NeoAxis.Editor.EditorActionGetStateContext},System.Action{NeoAxis.Editor.EditorActionClickContext},NeoAxis.Editor.EditorActionContextMenuType)">
            <summary>
            Register an editor action. Use this method for the code which not referencing to NeoAxis.Core.Editor.dll directly. As example when need to call the method from Project.csproj.
            </summary>
            <param name="name"></param>
            <param name="description"></param>
            <param name="imageOrImageHint">Right now only image hint is supported.</param>
            <param name="ribbonText"></param>
            <param name="getState"></param>
            <param name="click"></param>
            <param name="contextMenuSupport"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.Editor.EditorExtensions">
            <summary>
            Auxiliary class to work with clipboard of the system.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.IEditorUpdateWhenDocumentModified">
            <summary>
            An interface provides the ability to inform the change document to objects.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoDependentPropertyAttribute">
            <summary>
            An attribute to mark dependent property from another. Used when working with the list of properties in the Settings Window.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.WhenCreatingShowWarningIfItAlreadyExistsAttribute">
            <summary>
            An attribute to mark components to show warning when component creating if another component with same type already exists.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.ObjectsInFocus">
            <summary>
            Represents a collection of focuced objects in the document window.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.IDocumentWindow">
            <summary>
            Provides access to the window of the document.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.IDocumentWindowWithViewport">
            <summary>
            Provides access to the window of the document (with viewport).
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.IPreviewControl">
            <summary>
            Provides access to the preview control of the document.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.IPreviewControlWithViewport">
            <summary>
            Provides access to the preview control of the document (with viewport).
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.EditorMessageBox">
            <summary>
            Message box of the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.TransformToolObject">
            <summary>
            Object implemetation of <see cref="T:NeoAxis.Editor.ITransformTool"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.ITransformTool">
            <summary>
            A interface for tool for editing the transformation of objects.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoSystem">
            <summary>
            Represents undo/redo system.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoSystem.Action">
            <summary>
            Represents an action of undo/redo system.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoMultiAction">
            <summary>
            Compound action of undo/redo system.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoActionComponentCreateDelete">
            <summary>
            The action of undo/redo system for creating and deleting objects.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoActionComponentMove">
            <summary>
            The action of undo/redo system for moving components relative to other components.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoActionListAddRemove">
            <summary>
            The action of undo/redo system for adding and removing items of a list.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoActionPropertiesChange">
            <summary>
            The action of undo/redo system for changing properties.
            </summary>
        </member>
        <member name="T:NeoAxis.Editor.UndoActionPropertiesChange.Item">
            <summary>
            Represents an item of <see cref="T:NeoAxis.Editor.UndoActionPropertiesChange"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Product_Android">
            <summary>
            Represents the product build settings for Android.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Android.CompressData">
            <summary>
            Whether to compress Zip archive with the project data.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Android.CompressDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Android.CompressData"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_iOS">
            <summary>
            Represents the product build settings for iOS.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_iOS.CompressData">
            <summary>
            Whether to compress Zip archive with the project data.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_iOS.CompressDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_iOS.CompressData"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_Linux">
            <summary>
            Represents the product build settings for Linux.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Linux.ExecutableName">
            <summary>
            The name of application executable file.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Linux.ExecutableNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Linux.ExecutableName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Linux.CopyDotNetRuntime">
            <summary>
            Whether to copy .NET 6 runtime from NeoAxis.Internal\Platforms\Linux\dotnet_x64 with overwriting files.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Linux.CopyDotNetRuntimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Linux.CopyDotNetRuntime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Linux.DebugFiles">
            <summary>
            Whether to include files for debugging (xml, pdb).
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Linux.DebugFilesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Linux.DebugFiles"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Linux.SatelliteResourceLanguages">
            <summary>
            Whether to include localized assemblies of .NET.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Linux.SatelliteResourceLanguagesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Linux.SatelliteResourceLanguages"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_macOS">
            <summary>
            Represents the product build settings for macOS.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.ExecutableName">
            <summary>
            The name of application executable file.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.ExecutableNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.ExecutableName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.ImportTools">
            <summary>
            Whether to include tools that are intended to import 3D models.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.ImportToolsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.ImportTools"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.CubemapProcessingTools">
            <summary>
            Whether to include tools that are intended to process environment cubemaps.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.CubemapProcessingToolsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.CubemapProcessingTools"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.DebugFiles">
            <summary>
            Whether to include files for debugging (xml, pdb).
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.DebugFilesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.DebugFiles"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.UIWebBrowser">
            <summary>
            Whether to include files to support UIWebBrowser control.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.UIWebBrowserChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.UIWebBrowser"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_macOS.SatelliteResourceLanguages">
            <summary>
            Whether to include localized assemblies of .NET.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_macOS.SatelliteResourceLanguagesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_macOS.SatelliteResourceLanguages"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_Store">
            <summary>
            Represents the product build settings for NeoAxis Store.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Store.OriginalShaders">
            <summary>
            Whether to use not modified shaders. When the parameter is enabled, the Shaders folder will not added to the build.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.OriginalShadersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.OriginalShaders"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.Identifier">
            <summary>
            The unique identifier of the product. When the parameter is empty the identifier calculated by path name of this file.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.IdentifierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.Identifier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.Description">
            <summary>
            The description of the product.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.DescriptionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.Description"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.ProjectItemCategories">
            <summary>
            The list of categories of the product.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.ProjectItemCategoriesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.ProjectItemCategories"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.Tags">
            <summary>
            The list of tags. Use comma to split tags.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.TagsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.Tags"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.License">
            <summary>
            The license of the product.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.LicenseChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.License"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Product_Store.CostChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.Cost"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Product_Store.VersionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.Version"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.ProductLogo">
            <summary>
            The logo of the product. {127, 127, 127} for background is the best. PNG, JPG formats are supported.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.ProductLogoChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.ProductLogo"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.LogoMakeScreenshot">
            <summary>
            Whether to create a screenshot to use it as a product logo.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.LogoMakeScreenshotChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.LogoMakeScreenshot"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.Images">
            <summary>
            The list of images of the product. PNG, JPG formats are supported.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Store.AdditionalScreenshots">
            <summary>
            Whether to create additional screenshots. Used for vehicles.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.AdditionalScreenshotsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.AdditionalScreenshots"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.CreateProducts">
            <summary>
            The mode allows you to create multiple products.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.CreateProductsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.CreateProducts"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.AddCodeOfProjects">
            <summary>
            The list of C# projects to add code of them. Separated by return.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.AddCodeOfProjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.AddCodeOfProjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Store.ReferenceAssemblies">
            <summary>
            The list of referenced assembly DLL names to compile sources. Separated by return.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Store.ReferenceAssembliesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Store.ReferenceAssemblies"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_UWP">
            <summary>
            Represents the product build settings for UWP.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.PackageName">
            <summary>
            The package name of the package.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.BuildPlatformChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.BuildPlatform"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.PatchProjectFilesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.PatchProjectFiles"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.PackageDisplayName">
            <summary>
            The displayable name of the package.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.PackageDisplayNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.PackageDisplayName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.PackageVersion">
            <summary>
            The version of the product package.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.PackageVersionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.PackageVersion"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.PackagePublisher">
            <summary>
            The name of the package publisher.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.PackagePublisherChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.PackagePublisher"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.PublisherDisplayName">
            <summary>
            Displayed publisher name.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.PublisherDisplayNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.PublisherDisplayName"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.AppDisplayNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.AppDisplayName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.AppDescription">
            <summary>
            The description of the product.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.AppDescriptionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.AppDescription"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.ApplicationId">
            <summary>
            The application identifier.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.ApplicationIdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.ApplicationId"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_UWP.EntryPoint">
            <summary>
            The entry point of the product.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_UWP.EntryPointChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_UWP.EntryPoint"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_Web">
            <summary>
            Represents the product build settings for Web.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Web.CompressData">
            <summary>
            Whether to compress Zip archive with the project data.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Web.CompressDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Web.CompressData"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Product_Windows">
            <summary>
            Represents the product build settings for Windows.
            </summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.ExecutableName">
            <summary>
            The name of application executable file.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.ExecutableNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.ExecutableName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.Editor">
            <summary>
            Whether to include NeoAxis Editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.EditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.Editor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.ImportTools">
            <summary>
            Whether to include tools that are intended to import 3D models.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.ImportToolsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.ImportTools"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.CubemapProcessingTools">
            <summary>
            Whether to include tools that are intended to process environment cubemaps.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.CubemapProcessingToolsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.CubemapProcessingTools"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.DebugFiles">
            <summary>
            Whether to include files for debugging (xml, pdb).
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.DebugFilesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.DebugFiles"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.UIWebBrowser">
            <summary>
            Whether to include files to support UIWebBrowser control.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.UIWebBrowserChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.UIWebBrowser"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.SatelliteResourceLanguages">
            <summary>
            Whether to include localized assemblies of .NET.
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.SatelliteResourceLanguagesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.SatelliteResourceLanguages"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Product_Windows.WindowsDesktopAssemblies">
            <summary>
            Whether to include assemblies from .NET WindowsDesktop configuration (WinForms, WPF).
            </summary>
        </member>
        <member name="E:NeoAxis.Product_Windows.WindowsDesktopAssembliesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Product_Windows.WindowsDesktopAssemblies"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Camera">
            <summary>
            Representation of a player's point of view.
            </summary>
        </member>
        <member name="P:NeoAxis.Camera.Projection">
            <summary>
            The projection mode of the camera.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.ProjectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.Projection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.FieldOfView">
            <summary>
            The field of view of the perspective camera in degrees.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.FieldOfViewChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.FieldOfView"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.Height">
            <summary>
            The height of the orthographic camera.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.FixedUp">
            <summary>
            Up direction, determines camera orientation.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.FixedUpChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.FixedUp"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.NearClipPlane">
            <summary>
            The distance of near clipping plane.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.NearClipPlaneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.NearClipPlane"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.FarClipPlane">
            <summary>
            The distance of far clipping plane.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.FarClipPlaneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.FarClipPlane"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.AspectRatio">
            <summary>
            The aspect ratio of the camera.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.AspectRatioChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.AspectRatio"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.Aperture">
            <summary>
            Aperture controls the brightness of the image that passes through the lens and falls on the image sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.ApertureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.Aperture"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.ShutterSpeed">
            <summary>
            Shutter speed or exposure time is the length of time when the film or digital sensor inside the camera is exposed to light.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.ShutterSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.ShutterSpeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.Sensitivity">
            <summary>
            Sensitivity refers to a film or digital camera sensor's sensitivity to light.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.SensitivityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.Sensitivity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Camera.RenderingPipelineOverride">
            <summary>
            The rendering pipeline of the camera. When 'null' the rendering pipeline of the scene is used.
            </summary>
        </member>
        <member name="E:NeoAxis.Camera.RenderingPipelineOverrideChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Camera.RenderingPipelineOverride"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ComponentHost">
            <summary>
            An object to manage a hierarchy of components. For example, using this object, you can load an additional scene inside another scene.
            </summary>
        </member>
        <member name="P:NeoAxis.ComponentHost.LoadFile">
            <summary>
            File to load.
            </summary>
        </member>
        <member name="P:NeoAxis.ComponentHost.CreateType">
            <summary>
            The type to create.
            </summary>
        </member>
        <member name="E:NeoAxis.ComponentHost.CreateTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ComponentHost.CreateType"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ComponentsHidePublic">
            <summary>
            The class is intended for accessing component methods that are preferable to hide from public access. This is done to avoid cluttering up the component classes.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveInSpace">
            <summary>
            Represents the curve in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CurveTypePosition">
            <summary>
            The type of the curve for position of the points.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CurveTypePositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CurveTypePosition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CurveTypeRotation">
            <summary>
            The type of the curve for rotation of the points.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CurveTypeRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CurveTypeRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CurveTypeScale">
            <summary>
            The type of the curve for scale of the points.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CurveTypeScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CurveTypeScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.TimeScale">
            <summary>
            Time scale of the curve points.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.TimeScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.TimeScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Color">
            <summary>
            Specifies the color of the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.DisplayCurveInEditor">
            <summary>
            Whether to display the curve in the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.DisplayCurveInEditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.DisplayCurveInEditor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.DisplayCurveInSimulation">
            <summary>
            Whether to display the curve in the simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.DisplayCurveInSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.DisplayCurveInSimulation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Thickness">
            <summary>
            The thickness of the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Caps">
            <summary>
            Whether to add caps to the geometry of the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CapsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Caps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.SegmentsLength">
            <summary>
            The length of the segments.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.SegmentsLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.SegmentsLength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.SegmentsCircle">
            <summary>
            The amount of segments around the circumference.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.SegmentsCircleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.SegmentsCircle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Material">
            <summary>
            The material of the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.UVTilesLength">
            <summary>
            The length of UV tile by length.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.UVTilesLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.UVTilesLength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.UVTilesCircle">
            <summary>
            The length of UV tile around the circumference.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.UVTilesCircleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.UVTilesCircle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.UVFlip">
            <summary>
            Whether to flip UV coordinates.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.UVFlipChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.UVFlip"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Collision">
            <summary>
            Whether to have a collision body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Collision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CollisionMaterial">
            <summary>
            The physical material used by the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CollisionMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CollisionMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CollisionFriction">
            <summary>
            The amount of friction applied on the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CollisionFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CollisionFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.CollisionRestitution">
            <summary>
            The ratio of the final relative velocity to initial relative velocity of the rigid body after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.CollisionRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.CollisionRestitution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.Time">
            <summary>
            The time of the point.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.TimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.Time"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpace.RoundedLineCurvatureRadius">
            <summary>
            The curvature radius of the points for Rounded Line curve type.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpace.RoundedLineCurvatureRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpace.RoundedLineCurvatureRadius"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CurveInSpace.CurveTypeEnum">
            <summary>
            Enumerates the types of curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveInSpace.SourceData">
            <summary>
            Extracted source data of the curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveInSpace.SourceData.Point">
            <summary>
            Represents a point of <see cref="T:NeoAxis.CurveInSpace.SourceData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveInSpace.CachedData">
            <summary>
            Precalculated data of the curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveInSpaceObjects">
            <summary>
            A component to make objects by path of a Curve In Space.
            </summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.Mesh">
            <summary>
            The assigned mesh to the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.ObjectInSpace">
            <summary>
            The assigned object in space to the curve.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.ObjectInSpaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.ObjectInSpace"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.ReplaceMaterial">
            <summary>
            Replaces all geometries of the mesh by another material.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.ReplaceMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.ReplaceMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.Color">
            <summary>
            The base color and opacity multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.StepMeasure">
            <summary>
            The measure of the step value.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.StepMeasureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.StepMeasure"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.Step">
            <summary>
            The step between objects.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.StepChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.Step"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.PositionOffset">
            <summary>
            The offset to objects position.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.PositionOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.PositionOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.PositionOffsetRandom">
            <summary>
            The random value to position offset.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.PositionOffsetRandomChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.PositionOffsetRandom"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.RotationOffset">
            <summary>
            The offset to objects rotation.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.RotationOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.RotationOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.RotationOffsetByTime">
            <summary>
            The offset to objects rotation depending by step distance or by time.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.RotationOffsetByTimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.RotationOffsetByTime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.RotationOffsetRandom">
            <summary>
            The random value to rotation offset.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.RotationOffsetRandomChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.RotationOffsetRandom"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.ScaleRandom">
            <summary>
            The range of the random scale multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.ScaleRandomChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.ScaleRandom"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.RandomSeed">
            <summary>
            The seed for random parameters.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.RandomSeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.RandomSeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.Collision">
            <summary>
            Whether to have a collision body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.Collision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.CollisionMaterial">
            <summary>
            The physical material used by the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.CollisionMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.CollisionMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.CollisionFriction">
            <summary>
            The amount of friction applied on the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.CollisionFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.CollisionFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CurveInSpaceObjects.CollisionRestitution">
            <summary>
            The ratio of the final relative velocity to initial relative velocity of the rigid body after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpaceObjects.CollisionRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpaceObjects.CollisionRestitution"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CurveInSpacePoint">
            <summary>
            Represents the point of the curve in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.CurveInSpacePoint.Time">
            <summary>
            The time of the point.
            </summary>
        </member>
        <member name="E:NeoAxis.CurveInSpacePoint.TimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpacePoint.Time"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.CurveInSpacePoint.RoundedLineCurvatureRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CurveInSpacePoint.RoundedLineCurvatureRadius"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CutVolume">
            <summary>
            The component to clip geometry by volume in real-time.
            </summary>
        </member>
        <member name="P:NeoAxis.CutVolume.Shape">
            <summary>
            The shape of the volume.
            </summary>
        </member>
        <member name="E:NeoAxis.CutVolume.ShapeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CutVolume.Shape"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CutVolume.CutScene">
            <summary>
            Whether to cut the scene image.
            </summary>
        </member>
        <member name="E:NeoAxis.CutVolume.CutSceneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CutVolume.CutScene"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CutVolume.CutShadows">
            <summary>
            Whether to cut the shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.CutVolume.CutShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CutVolume.CutShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CutVolume.CutSimple3DRenderer">
            <summary>
            Whether to cut the Simple 3D Renderer.
            </summary>
        </member>
        <member name="E:NeoAxis.CutVolume.CutSimple3DRendererChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CutVolume.CutSimple3DRenderer"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Decal">
            <summary>
            Decal in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.Decal.Material">
            <summary>
            The material of a decal.
            </summary>
        </member>
        <member name="E:NeoAxis.Decal.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Decal.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Decal.Color">
            <summary>
            The base color and opacity multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.Decal.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Decal.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Decal.NormalsMode">
            <summary>
            Decal normals calculation mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Decal.NormalsModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Decal.NormalsMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Decal.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.Decal.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Decal.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Decal.SortOrder">
            <summary>
            Determines a decal order rendering relative to others.
            </summary>
        </member>
        <member name="E:NeoAxis.Decal.SortOrderChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Decal.SortOrder"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.EventHandlerComponent">
            <summary>
            Component representing an event handler.
            </summary>
        </member>
        <member name="P:NeoAxis.EventHandlerComponent.Event">
            <summary>
            The event to which the handler is subscribed.
            </summary>
        </member>
        <member name="E:NeoAxis.EventHandlerComponent.EventChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.EventHandlerComponent.Event"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.EventHandlerComponent.Sender">
            <summary>
            The object that generates the event.
            </summary>
        </member>
        <member name="E:NeoAxis.EventHandlerComponent.SenderChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.EventHandlerComponent.Sender"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.EventHandlerComponent.HandlerMethod">
            <summary>
            Event handler method.
            </summary>
        </member>
        <member name="E:NeoAxis.EventHandlerComponent.HandlerMethodChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.EventHandlerComponent.HandlerMethod"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.EventHandlerComponent.HandlerFlow">
            <summary>
            Event handler as a flow.
            </summary>
        </member>
        <member name="E:NeoAxis.EventHandlerComponent.HandlerFlowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.EventHandlerComponent.HandlerFlow"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.EventHandlerComponent.WhenEnable">
            <summary>
            Allows to configure in which cases the handler will be enabled. Editor - in the editor; Simulation - when Play; Resource - when the object is loaded as a resource; Instance - usual instance of the object.
            </summary>
        </member>
        <member name="E:NeoAxis.EventHandlerComponent.WhenEnableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.EventHandlerComponent.WhenEnable"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.IFlowExecutionComponent">
            <summary>
            An interface for components to support flows of the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.Flow">
            <summary>
            A flow instance of the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.Flow.ExecutionStackItem">
            <summary>
            Represents a stack item of execution of <see cref="T:NeoAxis.Flow"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowInput">
            <summary>
            Represents an input connector data for <see cref="T:NeoAxis.Flow"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowConvertTo">
            <summary>
            Converts the given object value to the specified type.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowConvertTo.Source">
            <summary>
            The object to convert.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowConvertTo.SourceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowConvertTo.Source"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowConvertTo.DestinationType">
            <summary>
            The type to convert the value parameter to.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowConvertTo.DestinationTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowConvertTo.DestinationType"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowDeclareVariable">
            <summary>
            Component representing a declaration of a virtual variable.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDeclareVariable.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDeclareVariable.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDeclareVariable.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDeclareVariable.Exit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDeclareVariable.Type">
            <summary>
            The type of the variable.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDeclareVariable.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDeclareVariable.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDeclareVariable.VariableName">
            <summary>
            The name of the variable.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDeclareVariable.VariableNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDeclareVariable.VariableName"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowDoNumber">
            <summary>
            Component representing a loop running specified amount of time.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDoNumber.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDoNumber.Number">
            <summary>
            The number of times to run.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoNumber.NumberChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoNumber.Number"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDoNumber.LoopBody">
            <summary>
            The body of the while loop.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoNumber.LoopBodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoNumber.LoopBody"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDoNumber.Counter">
            <summary>
            Current iteration number.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDoNumber.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoNumber.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoNumber.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowDoWhile">
            <summary>
            Component representing a do-while loop.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDoWhile.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowDoWhile.Condition">
            <summary>
            The condition of the while statement.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoWhile.ConditionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoWhile.Condition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDoWhile.LoopBody">
            <summary>
            The body of the while loop.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoWhile.LoopBodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoWhile.LoopBody"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowDoWhile.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowDoWhile.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowDoWhile.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowFor">
            <summary>
            The component provides the enumeration of collection elements with specifying the interval of elements.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowFor.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowFor.Collection">
            <summary>
            The collection to iterate through.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowFor.CollectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowFor.Collection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowFor.FirstIndex">
            <summary>
            The index of the collection element to start iteration from.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowFor.FirstIndexChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowFor.FirstIndex"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowFor.LastIndex">
            <summary>
            The index of the collection element to end iteration with.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowFor.LastIndexChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowFor.LastIndex"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowFor.LoopBody">
            <summary>
            The action to perform for each collection element from the specified indices range.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowFor.LoopBodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowFor.LoopBody"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowFor.Current">
            <summary>
            Current iteration's collection element.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowFor.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowFor.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowFor.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowForEach">
            <summary>
            The component provides the enumeration of collection elements.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowForEach.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowForEach.Collection">
            <summary>
            The collection to iterate through.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowForEach.CollectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowForEach.Collection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowForEach.LoopBody">
            <summary>
            The action to perform for each collection element.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowForEach.LoopBodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowForEach.LoopBody"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowForEach.Current">
            <summary>
            Current iteration's collection element.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowForEach.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowForEach.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowForEach.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowIf">
            <summary>
            Component representing the if-statement.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowIf.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowIf.Condition">
            <summary>
            The condition of the statement.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowIf.ConditionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowIf.Condition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowIf.True">
            <summary>
            The output of the node if condition is true.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowIf.TrueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowIf.True"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowIf.False">
            <summary>
            The output of the node if condition is false.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowIf.FalseChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowIf.False"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowSequence">
            <summary>
            The component provides the ability to perform several branches in succession.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSequence.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSequence.Count">
            <summary>
            The number of sequences.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowSetVariable">
            <summary>
            The component used to set the value of a virtual variable.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSetVariable.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSetVariable.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowSetVariable.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowSetVariable.Exit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowSetVariable.Variable">
            <summary>
            The variable whose value needs to be set.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowSetVariable.VariableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowSetVariable.Variable"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowSleep">
            <summary>
            A flow control component representing the sleeping for the specified number of seconds.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSleep.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSleep.Seconds">
            <summary>
            The amount of seconds to sleep.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowSleep.SecondsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowSleep.Seconds"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowSleep.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowSleep.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowSleep.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowStart">
            <summary>
            The component for starting a new flow.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowStart.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowStart.Exit">
            <summary>
            The exit of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowStart.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowStart.Exit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowStart.NewFlow">
            <summary>
            A branch of the new flow.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowStart.NewFlowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowStart.NewFlow"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowSwitch">
            <summary>
            Component representing the switch-statement.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSwitch.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowSwitch.Selection">
            <summary>
            The control variable of the switch statement.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowSwitch.SelectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowSwitch.Selection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowSwitch.Cases">
            <summary>
            The list of switch cases.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowWhile">
            <summary>
            Component representing a while statement loop.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowWhile.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowWhile.Condition">
            <summary>
            The condition of the while statement.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowWhile.ConditionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowWhile.Condition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowWhile.LoopBody">
            <summary>
            The body of the while loop.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowWhile.LoopBodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowWhile.LoopBody"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowWhile.Exit">
            <summary>
            The output of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowWhile.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowWhile.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowGraph">
            <summary>
            The component for creation of visual workflow.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraph.Specialization">
            <summary>
            The specialization of the flow graph. Specialization affects graph workflow in editor.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraph.SpecializationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraph.Specialization"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowGraph.Style">
            <summary>
            The graphical style of the flow graph.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraph.StyleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraph.Style"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowGraph.NodesStyle">
            <summary>
            The graphical style of the flow graph nodes.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraph.NodesStyleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraph.NodesStyle"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowGraph.GetAllLinksFromInputPin_Result">
            <summary>
            Represents an item for <see cref="M:NeoAxis.FlowGraph.GetAllLinksFromInputPin(NeoAxis.FlowGraphNode,System.String)"/> method.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNodeContentType">
            <summary>
            The list of flow graph node types.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphRepresentationData">
            <summary>
            Represents a data provided to flow graph editor by objects.
            </summary>
        </member>
        <member name="T:NeoAxis.IFlowGraphRepresentationData">
            <summary>
            An interface to provide <see cref="T:NeoAxis.FlowGraphRepresentationData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphBrowsable">
            <summary>
            Attribute to configure the visibility of an type in flow graph editor.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode">
            <summary>
            The node of the flow graph.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.ControlledObject">
            <summary>
            An object, represented by node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraphNode.ControlledObjectChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraphNode.ControlledObject"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.Mode">
            <summary>
            The mode of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraphNode.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraphNode.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.Style">
            <summary>
            The style of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.FlowGraphNode.StyleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FlowGraphNode.Style"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode.Representation">
            <summary>
            Represents a cached data for visualization of <see cref="T:NeoAxis.FlowGraphNode"/> in the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode.Representation.Item">
            <summary>
            Represents a data item for <see cref="T:NeoAxis.FlowGraphNode.Representation"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode.Representation.Connector">
            <summary>
            Represents a connection slot of <see cref="T:NeoAxis.FlowGraphNode"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode.Representation.ItemThisObject">
            <summary>
            Represents a data item for <see cref="T:NeoAxis.FlowGraphNode.Representation"/> with info about this object.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNode.Representation.ItemProperty">
            <summary>
            Represents a data item for <see cref="T:NeoAxis.FlowGraphNode.Representation"/> with info about a property.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.Position">
            <summary>
            The location of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.Width">
            <summary>
            The width of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraphNode.Comment">
            <summary>
            User comment of the node.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphNodeStyle">
            <summary>
            The style of the flow graph node.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphSpecialization">
            <summary>
            The specialization of the flow graph. Specialization affects graph workflow in the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphSpecialization.DragDropObjectCreateInitNodeContext">
            <summary>
            Represents a drag and drop data for creation <see cref="T:NeoAxis.FlowGraphSpecialization"/> component.
            </summary>
        </member>
        <member name="T:NeoAxis.FlowGraphStyle">
            <summary>
            The graphical style of the flow graph.
            </summary>
        </member>
        <member name="T:NeoAxis.FontComponent">
            <summary>
            Represents font import settings.
            </summary>
        </member>
        <member name="P:NeoAxis.FontComponent.CharacterRanges">
            <summary>
            The list of characters that can be used as a list of ranges.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.CharacterRangesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.CharacterRanges"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FontComponent.CharacterString">
            <summary>
            The list of characters that can be used as a string.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.CharacterStringChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.CharacterString"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FontComponent.SizeMultiplier">
            <summary>
            The multiplier of the defined font size.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.SizeMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.SizeMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FontComponent.AdvanceMultiplier">
            <summary>
            The multiplier of the size of spaces between symbols.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.AdvanceMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.AdvanceMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FontComponent.DrawOffsetY">
            <summary>
            The offset by vertical.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.DrawOffsetYChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.DrawOffsetY"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.FontComponent.BakingMaxCharacterSizeInPixels">
            <summary>
            Maximum pixel size of a character. This limit may be useful in case of big font size, which may consume a lot of memory.
            </summary>
        </member>
        <member name="E:NeoAxis.FontComponent.BakingMaxCharacterSizeInPixelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.FontComponent.BakingMaxCharacterSizeInPixels"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.FontComponent.CompiledData">
            <summary>
            Represents precalculated data of <see cref="T:NeoAxis.FontComponent"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.FontComponent.WordWrapLinesItem">
            <summary>
            Represents an item for <see cref="M:NeoAxis.FontComponent.GetWordWrapLines(System.Double,NeoAxis.CanvasRenderer,System.String,System.Double)"/> method.
            </summary>
        </member>
        <member name="M:NeoAxis.FontComponent.GetCharacterWidth(System.Double,NeoAxis.CanvasRenderer,System.Char)">
            <summary>
            Returns the character screen width.
            </summary>
            <param name="forRenderer"></param>
            <param name="c">The character.</param>
            <returns>The character screen width.</returns>
        </member>
        <member name="M:NeoAxis.FontComponent.GetTextLength(System.Double,NeoAxis.CanvasRenderer,System.String)">
            <summary>
            Returns the text screen width.
            </summary>
            <param name="forRenderer"></param>
            <param name="text">The text.</param>
            <returns>The text screen width.</returns>
        </member>
        <member name="T:NeoAxis.FontResource">
            <summary>
            Represents a resource of a font.
            </summary>
        </member>
        <member name="T:NeoAxis.FontResource.InstanceFont">
            <summary>
            Represents an instance of <see cref="T:NeoAxis.FontResource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjects">
            <summary>
            An object in a scene designed to store a large number of similar objects.
            </summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.Visible">
            <summary>
            Whether the object is visible in the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.VisibleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.Visible"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.BaseObjects">
            <summary>
            The list of base objects. When creating objects, the editor uses base objects as a background on which objects are placed.
            </summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.SectorSize">
            <summary>
            The size of the sector in the scene. The sector size allows to optimize the culling and rendering of objects.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.SectorSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.SectorSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.SectorSubdivide">
            <summary>
            The maximal amount of sub sectors along the axis in the sector.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.SectorSubdivideChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.SectorSubdivide"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.ObjectsSerialize">
            <summary>
            Whether to enable serialization of objects data.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.ObjectsSerializeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.ObjectsSerialize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.ObjectsNetworkMode">
            <summary>
            Whether to enable synchronization of objects data between server and clients.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.ObjectsNetworkModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.ObjectsNetworkMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjects.DrawGroupBounds">
            <summary>
            Whether to visialize bounds of the groups.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjects.DrawGroupBoundsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjects.DrawGroupBounds"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjects.Object">
            <summary>
            Represents an object for <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.GroupOfObjects.ObjectsRemove(NeoAxis.GroupOfObjects.Object[])">
            <summary>
            Removes objects by their unique identifiers.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:NeoAxis.GroupOfObjects.GetObjectsItem">
            <summary>
            Represents data to get items from <see cref="T:NeoAxis.GroupOfObjects"/> object.
            </summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjects.GetObjectsItem.ResultItem">
            <summary>
            Represents result data item of <see cref="T:NeoAxis.GroupOfObjects.GetObjectsItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjectsElement">
            <summary>
            Component for setting item type of <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement.Index">
            <summary>
            The identifier of the element in the group of objects.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement.IndexChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement.Index"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement.AutoAlign">
            <summary>
            Whether to align objects position by base objects.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement.AutoAlignChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement.AutoAlign"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjectsElement_Mesh">
            <summary>
            Component for setting mesh item type of <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.Mesh">
            <summary>
            The mesh used by the mesh object.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.ReplaceMaterial">
            <summary>
            Replaces all geometries of the mesh by another material.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.ReplaceMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.ReplaceMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.StaticShadows">
            <summary>
            Whether to enable the static shadows optimization.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.StaticShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.StaticShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Mesh.Collision">
            <summary>
            Whether to enable a collision detection. A collision rigidbody of the mesh is used.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Mesh.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Mesh.Collision"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjectsElement_Surface">
            <summary>
            Component for setting surface item type of <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Surface.SurfaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Surface.Surface"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Surface.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance for objects of the surface. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Surface.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Surface.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Surface.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces for objects of the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Surface.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Surface.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.GroupOfObjectsElement_Surface.Collision">
            <summary>
            Whether to enable a collision detection. A collision definition of the mesh is used.
            </summary>
        </member>
        <member name="E:NeoAxis.GroupOfObjectsElement_Surface.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.GroupOfObjectsElement_Surface.Collision"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.GroupOfObjectsUtility">
            <summary>
            Auxiliary class for working with <see cref="T:NeoAxis.GroupOfObjects"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageComponent">
            <summary>
            Represents a 2D or cubemap image. The component is useful to make cubemap textures from 6 2D images.
            </summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadFile">
            <summary>
            File name to load a texture from.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadFileChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadFile"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadFileHint">
            <summary>
            The hint for the loader. You can configure loading a cube map from 4x3 2D image.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadFileHintChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadFileHint"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubeNegativeX">
            <summary>
            File name to load a cube texture from, Negative X side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubeNegativeXChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubeNegativeX"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubeNegativeY">
            <summary>
            File name to load a cube texture from, Negative Y side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubeNegativeYChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubeNegativeY"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubeNegativeZ">
            <summary>
            File name to load a cube texture from, Negative Z side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubeNegativeZChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubeNegativeZ"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubePositiveX">
            <summary>
            File name to load a cube texture from, Positive X side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubePositiveXChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubePositiveX"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubePositiveY">
            <summary>
            File name to load a cube texture from, Positive Y side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubePositiveYChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubePositiveY"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.LoadCubePositiveZ">
            <summary>
            File name to load a cube texture from, Positive Z side.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.LoadCubePositiveZChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.LoadCubePositiveZ"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateFormat">
            <summary>
            The format of a texture being created.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateFormatChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateFormat"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateType">
            <summary>
            The type of texture being created.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateSize">
            <summary>
            The size of a texture being created.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateDepth">
            <summary>
            The number of depth levels of a texture being created.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateDepthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateDepth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateArrayLayers">
            <summary>
            The number of layers of a texture being created.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateArrayLayersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateArrayLayers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateMipmaps">
            <summary>
            Whether to create mip levels.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateMipmapsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateMipmaps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateUsage">
            <summary>
            Specifies texture creation flags.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateUsageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateUsage"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ImageComponent.CreateFSAA">
            <summary>
            Enables Full Screen Anti-Aliasing.
            </summary>
        </member>
        <member name="E:NeoAxis.ImageComponent.CreateFSAAChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ImageComponent.CreateFSAA"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ImageComponent.TypeEnum">
            <summary>Enum identifying the texture type.</summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.TypeEnum._2D">
            <summary>2D texture, used in combination with 2D texture coordinates (default).</summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.TypeEnum._3D">
            <summary>3D volume texture, used in combination with 3D texture coordinates.</summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.TypeEnum.Cube">
            <summary>3D cube map, used in combination with 3D texture coordinates.</summary>
        </member>
        <member name="T:NeoAxis.ImageComponent.Usages">
            <summary>Enum describing buffer usage; not mutually exclusive.</summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.Dynamic">
            <summary>
            Indicates the application would like to modify this buffer with the CPU
            fairly often. 
            Buffers created with this flag will typically end up in AGP memory rather 
            than video memory.
            </summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.WriteOnly">
            <summary>
            Indicates the application will never read the contents of the buffer back, 
            it will only ever write data. Locking a buffer with this flag will ALWAYS 
            return a pointer to new, blank memory rather than the memory associated 
            with the contents of the buffer; this avoids DMA stalls because you can 
            write to a new memory area while the previous one is being used. 
            </summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.AutoMipmaps">
            <summary>
            Mipmaps will be automatically generated for this texture.
            </summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.RenderTarget">
            <summary>
            This texture will be a render target, ie. used as a target for render to texture
            setting this flag will ignore all other texture usages except <b>AutoMipmap</b>.
            </summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.BlitDestination">
            <summary>
            Texture can be used as the destination of a blit operation.
            </summary>
        </member>
        <member name="F:NeoAxis.ImageComponent.Usages.ReadBack">
            <summary>
            Texture data can be read back.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageComponent.BindSettingsAttribute">
            <summary>
            Attribute for setting parameters of texture binding.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageResource">
            <summary>
            The class to handle image file as a resource.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageResource.InstanceImage">
            <summary>
            Represents an instance of <see cref="T:NeoAxis.ImageResource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageSettingsFile">
            <summary>
            Class for working with the settings file of <see cref="T:NeoAxis.ImageComponent"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Import3D">
            <summary>
            The component for import of 3D content.
            </summary>
        </member>
        <member name="P:NeoAxis.Import3D.Mode">
            <summary>
            The mode of the import. You can import into one mesh or to make a set of separated meshes.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Position">
            <summary>
            Specifies a result position offset of imported 3D models.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.PositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Position"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Rotation">
            <summary>
            Specifies a result rotation of imported 3D models. Expand the property to specify rotation by euler angles.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.RotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Rotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Scale">
            <summary>
            Specifies a result scale of imported 3D models.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.ScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Scale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.FixAxes">
            <summary>
            Whether to rotate models to engine's coordinate system. X axis is forward, Z axis is up.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.FixAxesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.FixAxes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.CenterBySize">
            <summary>
            Whether to move models to center by result bounding box.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.CenterBySizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.CenterBySize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Simplify">
            <summary>
            The way to reduce amount of triangles.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.SimplifyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Simplify"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.SimplifyQuality">
            <summary>
            The factor to simplify initial geometry. The reduction makes less amount of triangles with some quality decreasing.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.SimplifyQualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.SimplifyQuality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.MergeGeometries">
            <summary>
            Whether to merge mesh geometries. The mesh with one geometry will be rendered most effectively, it can be done by using Multi Material setting.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.MergeGeometriesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.MergeGeometries"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODs">
            <summary>
            Whether to generate level of detail meshes.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODs"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODLevels">
            <summary>
            The result amount of levels of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODLevelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODLevels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODReduction">
            <summary>
            The quality factor for next level of detail, depending on the previous one. Set 0 to use auto mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODReductionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODReduction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODDistance">
            <summary>
            The distance from the previous to the next level of detail. In the default scheme with the one voxel lod, this parameter has sense only when want to move the start distance of the voxel lod. Regardless of the settings, the voxel lod will not turn on while the quality is too small.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODScale">
            <summary>
            The distance multiplier when determining the level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODScaleShadows">
            <summary>
            The distance multiplier when determining the level of detail for shadows. Set 100 or more to always use the best LOD for shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODScaleShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODScaleShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxels">
            <summary>
            Whether to generate a voxel grid for a last LOD. In auto mode voxel LOD is disabled when imported mesh has a skeleton.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxelGrid">
            <summary>
            The size of a voxel grid of a last LOD.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelGridChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxelGrid"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxelThinFactor">
            <summary>
            The factor to changing the visibility of thin objects. It is also useful when your model has holes in its shape, the algorithm thinks your model is empty inside.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelThinFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxelThinFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxelBakeOpacity">
            <summary>
            Whether to apply the material opacity during the voxel calculation. The baked opacity works faster. Not baked mode supports 4 transparency steps, instead of baked which supports 1 transparency step.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelBakeOpacityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxelBakeOpacity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxelOptimizeMaterials">
            <summary>
            Whether to modify materials of the voxels to work with maximal performance (deferred rendering support).
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelOptimizeMaterialsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxelOptimizeMaterials"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.LODVoxelFillHolesDistance">
            <summary>
            The maximal distance to fill holes, which happens when ray matching can't find the result because reach max steps limitations.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.LODVoxelFillHolesDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.LODVoxelFillHolesDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.TransparentMaterialBlending">
            <summary>
            The blend mode of transparent materials.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.TransparentMaterialsBlendingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.TransparentMaterialBlending"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.FlipUVs">
            <summary>
            Whether to flip UV coordinates by vertical axis.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.FlipUVsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.FlipUVs"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.DeleteUnusedMaterials">
            <summary>
            Whether to delete unused materials.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.DeleteUnusedMaterialsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.DeleteUnusedMaterials"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.MaterialDisplacement">
            <summary>
            Whether to import Displacement channel for materials.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.MaterialDisplacementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.MaterialDisplacement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Optimize">
            <summary>
            Whether to optimize the mesh without losing quality. The optimization includes the merging of almost identical vertices, optimizing for vertex cache, for overdraw and for vertex fetch.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.OptimizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Optimize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.OptimizeThreshold">
            <summary>
            The threshold value when optimizes the mesh without losing quality. The parameter affects merging of almost identical vertices.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.OptimizeThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.OptimizeThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Import3D.Compress">
            <summary>
            Whether to compress normals, tangents, colors, texture coordinates and blend weights from Float32 to Half16.
            </summary>
        </member>
        <member name="E:NeoAxis.Import3D.CompressChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Import3D.Compress"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Import3D.ReimportSettings">
            <summary>
            Represents settings for reimporting data of <see cref="T:NeoAxis.Import3D"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Import3DResource">
            <summary>
            Represents a resource of source 3D data for import.
            </summary>
        </member>
        <member name="T:NeoAxis.Import3DResource.InstanceImport">
            <summary>
            Represents an instance for <see cref="T:NeoAxis.Import3DResource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ImportGeneral">
            <summary>
            Base class for implementation content import.
            </summary>
        </member>
        <member name="T:NeoAxis.ImportGeneral.Settings">
            <summary>
            Represents an import settings.
            </summary>
        </member>
        <member name="T:NeoAxis.ImportGeneral.MaterialData">
            <summary>
            The data to import material.
            </summary>
        </member>
        <member name="T:NeoAxis.InvokeMember">
            <summary>
            The component for invoking methods, properties and fields.
            </summary>
        </member>
        <member name="P:NeoAxis.InvokeMember.Member">
            <summary>
            The member to invoke.
            </summary>
        </member>
        <member name="E:NeoAxis.InvokeMember.MemberChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.InvokeMember.Member"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.InvokeMember.FlowSupport">
            <summary>
            Whether the member is support flow control.
            </summary>
        </member>
        <member name="E:NeoAxis.InvokeMember.FlowSupportChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.InvokeMember.FlowSupport"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.InvokeMember.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.InvokeMember.Exit">
            <summary>
            The exit of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.InvokeMember.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.InvokeMember.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Layer">
            <summary>
            A class for grouping components of the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.Layer.Visible">
            <summary>
            Whether the object and its children are visible.
            </summary>
        </member>
        <member name="E:NeoAxis.Layer.VisibleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Layer.Visible"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Layer.CanBeSelected">
            <summary>
            Whether the object and its children are selectable in the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Layer.CanBeSelectedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Layer.CanBeSelected"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Layer.ChildrenUpdateInEditor">
            <summary>
            Whether to call Update methods and event for children components in the editor. The parameter is used to optimize performance.
            </summary>
        </member>
        <member name="E:NeoAxis.Layer.ChildrenUpdateInEditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Layer.ChildrenUpdateInEditor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Layer.ChildrenUpdateInSimulation">
            <summary>
            Whether to call Update methods and event for children components in the simulation. The parameter is used to optimize performance.
            </summary>
        </member>
        <member name="E:NeoAxis.Layer.ChildrenUpdateInSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Layer.ChildrenUpdateInSimulation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Layer.ChildrenStepSimulation">
            <summary>
            Whether to call SimulationStep methods and event for children components. The parameter is used to optimize performance.
            </summary>
        </member>
        <member name="E:NeoAxis.Layer.ChildrenStepSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Layer.ChildrenStepSimulation"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Light">
            <summary>
            The light source in the scene.
            </summary>
        </member>
        <member name="T:NeoAxis.Light.InclusiveVolumeData">
            <summary>
            Represents data for <see cref="M:NeoAxis.Light.GetInclusiveVolume"/> method.
            </summary>
        </member>
        <member name="P:NeoAxis.Light.Type">
            <summary>
            The type of light source.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.Brightness">
            <summary>
            The light's brightness.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.BrightnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.Brightness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.Color">
            <summary>
            The color of emitted light.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.AttenuationNear">
            <summary>
            The minimum distance of the source light.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.AttenuationNearChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.AttenuationNear"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.AttenuationFar">
            <summary>
            The maximum distance of the source light.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.AttenuationFarChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.AttenuationFar"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.AttenuationPower">
            <summary>
            The multiplier of light attenuation power.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.AttenuationPowerChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.AttenuationPower"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.SpotlightInnerAngle">
            <summary>
            The inner angle of the spot light.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.SpotlightInnerAngleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.SpotlightInnerAngle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.SpotlightOuterAngle">
            <summary>
            The outer angle of the spot light.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.SpotlightOuterAngleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.SpotlightOuterAngle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.SpotlightFalloff">
            <summary>
            The spot light fall-off.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.SpotlightFalloffChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.SpotlightFalloff"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.StartDistance">
            <summary>
            The distance of lighting effect from the light position.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.StartDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.StartDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.Mask">
            <summary>
            The light mask used by the light source.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.MaskChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.Mask"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.MaskTransform">
            <summary>
            The position, rotation and scale of the light mask.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.MaskTransformChanged">
            <summary>Occurs when the <see cref="T:NeoAxis.Transform"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.Shadows">
            <summary>
            If active, the light will cast shadows on the surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.Shadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowIntensity">
            <summary>
            The intensity of the shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowIntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowIntensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowBias">
            <summary>
            Shadow bias moves the shadow away from the light source. Adjusting it may help to fix shadow artifacts.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowBiasChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowBias"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowNormalBias">
            <summary>
            Normal bias moves the shadow perpendicular to the shadowed surface. Adjusting it may help to fix shadow artifacts.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowNormalBiasChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowNormalBias"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowSoftness">
            <summary>
            The softness multiplier of shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowSoftnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowSoftness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowTextureSize">
            <summary>
            A method to get the size of a shadow map.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowTextureSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowTextureSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowTextureSizeValue">
            <summary>
            The size of a shadow texture.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowTextureSizeValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowTextureSizeValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowLODWorst">
            <summary>
            Whether to use worst lod, usually voxel, for the shadow generation step. Use for not important light sources.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowLODWorstChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowLODWorst"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowNearClipDistance">
            <summary>
            The minimal distance from the light source to generate shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowNearClipDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowNearClipDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowContact">
            <summary>
            Whether to detail the shadows by means the screen-space contact shadows technique. The contact shadows works only for deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowContactChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowContact"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowContactLength">
            <summary>
            The maximal length of the contact shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowContactLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowContactLength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.ShadowStatic">
            <summary>
            Whether to enable static shadow optimization for this light. Only for Point and Spot lights.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.ShadowStaticChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.ShadowStatic"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.FlareImage">
            <summary>
            The image of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.FlareImageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareImage"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.FlareBlending">
            <summary>
            The method of drawing the image of the flare on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.FlareBlendingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareBlending"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.FlareColor">
            <summary>
            The color of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.FlareColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.FlarePosition">
            <summary>
            The position of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.FlarePositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlarePosition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Light.FlareSize">
            <summary>
            The size of the flare. It is indicated as a ratio of screen size vertically.
            </summary>
        </member>
        <member name="E:NeoAxis.Light.FlareSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Light.FlareSizeFadeByDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareSizeFadeByDistance"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Light.FlareDepthCheckOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Light.FlareDepthCheckOffset"/> property value changes.</summary>
        </member>
        <member name="F:NeoAxis.Light.TypeEnum.Directional">
            <summary>Directional lights simulate parallel light beams from a distant source, hence have direction but no position.</summary>
        </member>
        <member name="F:NeoAxis.Light.TypeEnum.Point">
            <summary>Point light sources give off light equally in all directions, so require only position not direction.</summary>
        </member>
        <member name="F:NeoAxis.Light.TypeEnum.Spotlight">
            <summary>Spotlights simulate a cone of light from a source so require position and direction, plus extra values for falloff.</summary>
        </member>
        <member name="P:NeoAxis.Light.SpotlightClipPlanes">
            <summary>
            Returns 10 planes. Order: backward plane (0), far distance plane (1) and 8 side planes (2-9).
            </summary>
        </member>
        <member name="M:NeoAxis.Light.GetInclusiveVolume">
            <summary>
            Returns precalculated inclusive volume of the light. Its includes convex polyedron and bounding box.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.FlowGraphSpecialization_Shader">
            <summary>
            Flow graph specialization for shaders visual creation. Specialization affects workflow with graph in editor.
            </summary>
        </member>
        <member name="P:NeoAxis.FlowGraphSpecialization_Shader.Instance">
            <summary>
            The singleton object of a component.
            </summary>
        </member>
        <member name="T:NeoAxis.Material">
            <summary>
            Defines how a geometry looks.
            </summary>
        </member>
        <member name="P:NeoAxis.Material.BlendMode">
            <summary>
            Defines how/if the rendered object is blended with the content of the render target.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.BlendModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.BlendMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.TwoSided">
            <summary>
            Whether the material use double-sided rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.TwoSidedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.TwoSided"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.TwoSidedFlipNormals">
            <summary>
            Whether the double-sided material must flip normals for back faces rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.TwoSidedFlipNormalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.TwoSidedFlipNormals"/> property value changes.</summary>
        </member>
        <member name="F:NeoAxis.Material.ShadingModelEnum.Simple">
            <summary>
            Formula is BaseColor * 'light color' + Emissive. Usable for billboard materials.
            </summary>
        </member>
        <member name="P:NeoAxis.Material.ShadingModel">
            <summary>
            The reflection mode of the incoming light.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ShadingModelChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ShadingModel"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.BaseColor">
            <summary>
            Diffuse albedo for non-metallic surfaces, and specular color for metallic surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.BaseColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.BaseColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Metallic">
            <summary>
            Whether a surface appears to be dielectric (0.0) or conductor (1.0). Often used as a binary value (0 or 1).
            </summary>
        </member>
        <member name="E:NeoAxis.Material.MetallicChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Metallic"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Roughness">
            <summary>
            Perceived smoothness (1.0) or roughness (0.0) of a surface. Smooth surfaces exhibit sharp reflections.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.RoughnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Roughness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Reflectance">
            <summary>
            Fresnel reflectance at normal incidence for dielectric surfaces. This directly controls the strength of the reflections.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ReflectanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Reflectance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Normal">
            <summary>
            The material normals. This property is intented to be used with normal mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.NormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Normal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.DisplacementTechnique">
            <summary>
            The way to calculate height displacement. You can use displacement mapping, the data of heights are taken from Displacement property. Tessellation method is another more accurate way to render the displacement.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.DisplacementTechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.DisplacementTechnique"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Displacement">
            <summary>
            The height offset that is specified by the texture.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.DisplacementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Displacement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.DisplacementScale">
            <summary>
            The scale for Displacement.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.DisplacementScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.DisplacementScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.TessellationQuality">
            <summary>
            The quality multiplier of the tessellation.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.TessellationQualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.TessellationQuality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AmbientOcclusion">
            <summary>
            Defines how much of the light is accessible to a surface point.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AmbientOcclusionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AmbientOcclusion"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Emissive">
            <summary>
            The color and intensity of light emitted from the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.EmissiveChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Emissive"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Opacity">
            <summary>
            The opacity of the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.OpacityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Opacity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.OpacityDithering">
            <summary>
            Whether to enable dithering for smooth blending of Masked material.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.OpacityDitheringChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.OpacityDithering"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.OpacityMaskThreshold">
            <summary>
            Transparency threshold for Masked mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.OpacityMaskThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.OpacityMaskThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.ClearCoat">
            <summary>
            Strength of the clear coat layer.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ClearCoatChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ClearCoat"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.ClearCoatRoughness">
            <summary>
            Perceived smoothness or roughness of the clear coat layer.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ClearCoatRoughnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ClearCoatRoughness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.ClearCoatNormal">
            <summary>
            A detail normal used to perturb the clear coat layer using bump mapping (normal mapping).
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ClearCoatNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ClearCoatNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Anisotropy">
            <summary>
            Amount of anisotropy.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AnisotropyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Anisotropy"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AnisotropyDirection">
            <summary>
            Local surface direction. Used by anisotropic materials only.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AnisotropyDirectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AnisotropyDirection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AnisotropyDirectionBasis">
            <summary>
            The direction basis. Used by anisotropic materials only.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AnisotropyDirectionBasisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AnisotropyDirectionBasis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.Thickness">
            <summary>
            A thickness factor of the surface for subsurface scattering rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.SubsurfacePower">
            <summary>
            A power parameter for subsurface scattering rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.SubsurfacePowerChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.SubsurfacePower"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.SheenColor">
            <summary>
            Specular tint to create two-tone specular fabrics.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.SheenColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.SheenColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.SubsurfaceColor">
            <summary>
            Tint for the diffuse color after scattering and absorption through the material.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.SubsurfaceColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.SubsurfaceColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.PositionOffset">
            <summary>
            Vertices position offset. Performed in vertex shader.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.PositionOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.PositionOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.ReceiveShadows">
            <summary>
            Whether the surface receive shadows from other sources.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ReceiveShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ReceiveShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.UseVertexColor">
            <summary>
            Whether to use vertex color for Base Color and Opacity calculation.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.UseVertexColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.UseVertexColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.SoftParticles">
            <summary>
            Whether to enable a soft particles mode. In this mode, objects increase transparency in those places behind which there is an obstacle nearby. The mode works only for transparent materials.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.SoftParticlesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.SoftParticles"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.SoftParticlesDistance">
            <summary>
            A minimal distance to an obstacle to activate the soft particles mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.SoftParticlesDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.SoftParticlesDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.DepthOffsetMode">
            <summary>
            The depth offset mode gives the ability to change output depth in the fragment shader. Works only for deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.DepthOffsetModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.DepthOffsetMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.DepthOffset">
            <summary>
            The depth offset value. Limitation: You can specify the value by means additional block in shader graph, but can't set value in this property.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.DepthOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.DepthOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AdvancedBlending">
            <summary>
            Enables advanced blending mode. In this mode, it is possible to configure blending for each channel separately.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AdvancedBlendingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AdvancedBlending"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectBaseColor">
            <summary>
            Whether to write the Base Color.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectBaseColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectBaseColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectMetallic">
            <summary>
            Whether to write the Metallic.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectMetallicChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectMetallic"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectRoughness">
            <summary>
            Whether to write the Roughness.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectRoughnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectRoughness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectReflectance">
            <summary>
            Whether to write the Reflectance.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectReflectanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectReflectance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectAmbientOcclusion">
            <summary>
            Whether to write the Ambient Occlusion.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectAmbientOcclusionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectAmbientOcclusion"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectEmissive">
            <summary>
            Whether to write the Emissive.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectEmissiveChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectEmissive"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AffectGeometry">
            <summary>
            Whether to write the normals, height data.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AffectGeometryChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AffectGeometry"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.AdvancedScripting">
            <summary>
            Whether to enable the advanced shader scripting functionality.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.AdvancedScriptingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.AdvancedScripting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.VertexFunctions">
            <summary>
            Additional functions to the vertex shader code.
            </summary>		
        </member>
        <member name="E:NeoAxis.Material.VertexFunctionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.VertexFunctions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.VertexCode">
            <summary>
            The injection to the vertex shader code.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.VertexCodeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.VertexCode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.FragmentFunctions">
            <summary>
            Additional functions to the fragment shader code.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.FragmentFunctionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.FragmentFunctions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.FragmentCode">
            <summary>
            The injection to the fragment shader code.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.FragmentCodeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.FragmentCode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.CustomParameter1">
            <summary>
            The parameter is intended to transfer custom data to shader scripts.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.CustomParameter1Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.CustomParameter1"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.CustomParameter2">
            <summary>
            The parameter is intended to transfer custom data to shader scripts.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.CustomParameter2Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.CustomParameter2"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Material.StaticShadows">
            <summary>
            Whether to allow static shadow optimization for this material.
            </summary>
        </member>
        <member name="E:NeoAxis.Material.StaticShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Material.StaticShadows"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Material.CompileExtensionData">
            <summary>
            Represents material data that were procedurally generated and compiled.
            </summary>
        </member>
        <member name="T:NeoAxis.Material.CompiledMaterialData">
            <summary>
            Represents precalculated data of <see cref="T:NeoAxis.Material"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Material.CompiledMaterialData.DynamicParametersFragmentUniform">
            <summary>
            Represents a material data for fragment shader.
            </summary>
        </member>
        <member name="T:NeoAxis.Material.CompiledMaterialData.CurrentFrameData">
            <summary>
            Internal material data for rendering frame.
            </summary>
        </member>
        <member name="T:NeoAxis.MultiMaterial">
            <summary>
            A combined material that includes several usual materials.
            </summary>
        </member>
        <member name="P:NeoAxis.MultiMaterial.Materials">
            <summary>
            The list of materials.
            </summary>
        </member>
        <member name="P:NeoAxis.MultiMaterial.MaterialIndex">
            <summary>
            The parameter is used to determine behavior of material index selection during rasterization.
            </summary>
        </member>
        <member name="E:NeoAxis.MultiMaterial.MaterialIndexChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MultiMaterial.MaterialIndex"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ShaderConstants">
            <summary>
            Provides access to constants in shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.EngineTime">
            <summary>
            Gets the engine time.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.WindSpeed">
            <summary>
            Gets the wind speed vector of the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.ShadowObjectVisibilityDistanceFactor">
            <summary>
            Gets the multiplier of shadow visibility distance depending of object visibility distance.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.WorldMatrix">
            <summary>
            Gets world matrix. Works only in vertex shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.VertexPosition">
            <summary>
            Gets position of a vertex. Works only in vertex shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.VertexNormal">
            <summary>
            Gets normal of a vertex. Works only in vertex shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.VertexTangent">
            <summary>
            Gets tangent vector of a vertex. Works only in vertex shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.IsFrontFace">
            <summary>
            Indicates whether a primitive is front or back facing. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.FragmentCoordinates">
            <summary>
            Gets the window-relative coordinates of the current fragment.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.FragmentWorldPosition">
            <summary>
            Gets world position of the fragment. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.FragmentWorldNormal">
            <summary>
            Gets world normal of the fragment. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord0">
            <summary>
            Gets texture coordinate 0 of the vertex or of the fragment. Works only in vertex and fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord1">
            <summary>
            Gets texture coordinate 1 of the vertex or of the fragment. Works only in vertex and fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord2">
            <summary>
            Gets texture coordinate 2 of the vertex or of the fragment. Works only in vertex and fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.UnwrappedUV">
            <summary>
            Gets texture coordinate unwrapped UV of the vertex or of the fragment. Works only in vertex and fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord0BeforeDisplacement">
            <summary>
            Gets texture coordinate 0 of the fragment before displacement. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord1BeforeDisplacement">
            <summary>
            Gets texture coordinate 1 of the fragment before displacement. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.TexCoord2BeforeDisplacement">
            <summary>
            Gets texture coordinate 2 of the fragment before displacement. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.UnwrappedUVBeforeDisplacement">
            <summary>
            Gets texture coordinate unwrapped UV of the fragment before displacement. Works only in fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.Color0">
            <summary>
            Gets color 0 of the vertex or of the fragment. Works only in vertex and fragment shaders.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.InstanceParameter1">
            <summary>
            Gets material instance parameter 1.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderConstants.InstanceParameter2">
            <summary>
            Gets material instance parameter 2.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerationPropertyPostfixAttribute">
            <summary>
            The attribute for tagging access to members of properties for use in visual adjustment of materials and effects.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerationFunctionAttribute">
            <summary>
            The attribute for tagging functions for use in visual adjustment of materials and effects.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerationAutoConstantAttribute">
            <summary>
            The attribute for tagging members for use in visual adjustment of materials and effects.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerator">
            <summary>
            Represents a shader generation tool for materials and effects.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerator.ResultData">
            <summary>
            Represents a result data for <see cref="T:NeoAxis.ShaderGenerator"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerator.ResultData.ParameterItem">
            <summary>
            Represents a parameter for <see cref="T:NeoAxis.ShaderGenerator.ResultData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerator.ResultData.TextureItem">
            <summary>
            Represents a texture item for <see cref="T:NeoAxis.ShaderGenerator.ResultData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderGenerator.ResultData.AutoConstantParameterItem">
            <summary>
            Represents an auto constant parameter for <see cref="T:NeoAxis.ShaderGenerator.ResultData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderParameter">
            <summary>
            A component to configure access to external parameter for material or screen effect. Its used in the visual graph editor.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderParameter.SourceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderParameter.Source"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ShaderParameter.ManuallySpecifiedReturnType">
            <summary>
            Manually specified return type of parameter. It property must be specified when can't get access to a member in the editor. As example can't get access to objects of a current scene, because current scene is not available.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderParameter.ManuallySpecifiedReturnTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderParameter.ManuallySpecifiedReturnType"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ShaderTextureSample">
            <summary>
            A component to configure texture sampling for material or screen effect. It's used in the visual graph editor.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderTextureSample.TextureTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderTextureSample.TextureType"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ShaderTextureSample.TextureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderTextureSample.Texture"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ShaderTextureSample.RemoveTiling">
            <summary>
            Whether to use a special technique to remove texture tiling.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderTextureSample.RemoveTilingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderTextureSample.RemoveTiling"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ShaderTextureSample.Location2Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderTextureSample.Location2"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ShaderTextureSample.Location3Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderTextureSample.Location3"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshInSpace">
            <summary>
            A mesh instance in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.Mesh">
            <summary>
            The mesh used by the mesh object.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.Static">
            <summary>
            Whether to enable a static mode which improves rendering speed. Internally static objects are grouped into batches.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.StaticChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.Static"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.StaticShadows">
            <summary>
            Whether to allow static shadow optimization for this object.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.StaticShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.StaticShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.ReplaceMaterial">
            <summary>
            Replaces all geometries of the mesh by another material.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.ReplaceMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.ReplaceMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.Color">
            <summary>
            The base color and opacity multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.Occluder">
            <summary>
            Whether to object should be used as an occluder for occlusion culling.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.OccluderChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.Occluder"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.SpecialEffects">
            <summary>
            Specifies settings for special object effects, such as an outline effect.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.SpecialEffectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.SpecialEffects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.Collision">
            <summary>
            Whether to add a collision body. A shape of the body will take from Collision Definition of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.Collision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.PhysicalBodyLinearVelocity">
            <summary>
            The initial linear velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.PhysicalBodyLinearVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.PhysicalBodyLinearVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpace.PhysicalBodyAngularVelocity">
            <summary>
            The initial angular velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpace.PhysicalBodyAngularVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpace.PhysicalBodyAngularVelocity"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshInSpaceAnimationController">
            <summary>
            An animation controller for the mesh in space.
            </summary>
            <remarks>
            Implemented linear skinning algorithm.
            </remarks>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.PlayAnimation">
            <summary>
            The animation used by the controller.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.PlayAnimationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.PlayAnimation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.Speed">
            <summary>
            Animation speed multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.SpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.Speed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.AutoRewind">
            <summary>
            Whether to rewind to the start when playing ended.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.AutoRewindChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.AutoRewind"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.FreezeOnEnd">
            <summary>
            Whether to freeze playing on the end of the animation.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.FreezeOnEndChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.FreezeOnEnd"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.ReplaceSkeleton">
            <summary>
            The skeleton used by the controller.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.ReplaceSkeletonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.ReplaceSkeleton"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.InterpolationTimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.InterpolationTime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.DisplaySkeleton">
            <summary>
            Whether to display the skeleton.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.DisplaySkeletonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.DisplaySkeleton"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.CalculateOnCPU">
            <summary>
            Whether to calculate skinning by means CPU instead GPU.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshInSpaceAnimationController.CalculateOnCPUChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshInSpaceAnimationController.CalculateOnCPU"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshInSpaceAnimationController.CurrentEngineTime">
            <summary>
            Gets the engine time the animation was last updated.
            </summary>
        </member>
        <member name="T:NeoAxis.Animation">
            <summary>
            Represents mesh animation.
            </summary>
        </member>
        <member name="P:NeoAxis.Animation.Length">
            <summary>
            The length of the animation in the seconds.
            </summary>
        </member>
        <member name="E:NeoAxis.Animation.LengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Animation.Length"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.AnimationTrigger">
            <summary>
            Represents a trigger point for animation.
            </summary>
        </member>
        <member name="P:NeoAxis.AnimationTrigger.Time">
            <summary>
            The time to trigger.
            </summary>
        </member>
        <member name="E:NeoAxis.AnimationTrigger.TimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.AnimationTrigger.Time"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.AnimationTrigger.AnyData">
            <summary>
            Any user data as string.
            </summary>
        </member>
        <member name="E:NeoAxis.AnimationTrigger.AnyDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.AnimationTrigger.AnyData"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Mesh">
            <summary>
            Represents a 3D mesh in the engine. The child mesh geometries defines the mesh data.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.Skeleton">
            <summary>
            The skeleton of the skinned mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.SkeletonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.Skeleton"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.LODScale">
            <summary>
            The distance multiplier when determining the level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.LODScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.LODScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.LODScaleShadows">
            <summary>
            The distance multiplier when determining the level of detail for shadows. Set 100 or more to always use the best LOD for shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.LODScaleShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.LODScaleShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.Billboard">
            <summary>
            Whether to treat the mesh as a billboard. When drawing the mesh will turn to face the camera.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.BillboardChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.Billboard"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.BillboardPositionOffset">
            <summary>
            The billboard's translation offset from the pivot of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.BillboardPositionOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.BillboardPositionOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.BillboardShadowOffset">
            <summary>
            Indent multiplier when rendering shadows to fix overlapping effect of the object with the shadow.
            </summary>
        </member>
        <member name="E:NeoAxis.Mesh.BillboardShadowOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Mesh.BillboardShadowOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayPivot">
            <summary>
            Whether the mesh pivot displayed in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayBounds">
            <summary>
            Whether to display mesh bounds in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayTriangles">
            <summary>
            Whether to display mesh triangles in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayVertices">
            <summary>
            Whether to display mesh vertices in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayNormals">
            <summary>
            Whether to display mesh normals in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayTangents">
            <summary>
            Whether to display mesh tangents in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayBinormals">
            <summary>
            Whether to display mesh binormals in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayVertexColor">
            <summary>
            Whether to display mesh vertex colors in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayUV">
            <summary>
            Whether to display mesh uv's in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayProxyMesh">
            <summary>
            Whether to display the proxy mesh of the virtualized mesh.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayLOD">
            <summary>
            Whether to display number of level of detail in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplayCollision">
            <summary>
            Whether the mesh collision displayed in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorDisplaySkeleton">
            <summary>
            Whether to the mesh skeleton displayed in the editor.
            </summary>
        </member>
        <member name="P:NeoAxis.Mesh.EditorPlayAnimation">
            <summary>
            Specifies the animation name to play in the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.CompiledData">
            <summary>
            Represents precalculated data of <see cref="T:NeoAxis.Mesh"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.CompiledData.MeshDataClass">
            <summary>
            Represents geometry data of the mesh for rendering pipeline.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.StructureClass">
            <summary>
            Specifies the structure of the mesh. Includes information about edges, faces.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.StructureClass.Vertex">
            <summary>
            Specifies the vertex of the mesh <see cref="T:NeoAxis.Mesh.StructureClass"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.StructureClass.Edge">
            <summary>
            Specifies the edge of the mesh <see cref="T:NeoAxis.Mesh.StructureClass"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.StructureClass.FaceVertex">
            <summary>
            Specifies the vertex of the <see cref="T:NeoAxis.Mesh.StructureClass.Face"/> of the mesh structure.
            </summary>
        </member>
        <member name="T:NeoAxis.Mesh.StructureClass.Face">
            <summary>
            Specifies the face of the mesh <see cref="T:NeoAxis.Mesh.StructureClass"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.Mesh.BuildStructure(NeoAxis.Mesh,System.Boolean,System.Single)">
            <summary>
            Builds the structure of the mesh. The structure includes edges and faces.
            </summary>
            <param name="mergeTrianglesIntoFaces"> If true. Merges adjacent triangles if their normals ar equal</param>
        </member>
        <member name="M:NeoAxis.Mesh.BuildStructure(System.Boolean,System.Single)">
            <summary>
            Builds the structure of the mesh. The structure includes edges and faces.
            </summary>
            <param name="mergeTrianglesIntoFaces"> If true. Merges adjacent triangles if their normals ar equal</param>
        </member>
        <member name="T:NeoAxis.Mesh.SpatialSort`1">
            <summary>
            A little helper class to quickly find all vertices in the epsilon environment of a given
            position. Construct an instance with an array of positions. The class stores the given positions
            by their indices and sorts them by their distance to an arbitrary chosen plane.
            You can then query the instance for all vertices close to a given position in an average O(log n)
            time, with O(n) worst case complexity when all vertices lay on the plane. The plane is chosen
            so that it avoids common planes in usual data sets. */
            </summary>
        </member>
        <member name="M:NeoAxis.Mesh.SpatialSort`1.FindPositions(NeoAxis.Vector3F,System.Single)">
            <summary>
            Finds all positions close to the given position
            </summary>
            <param name="position">The position to look for vertices.</param>
            <param name="radius">Maximal distance from the position a vertex may have to be counted in.</param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Mesh.SpatialSort`1.FindAllClose(`0,System.Func{`0,`0,System.Single,System.Boolean})">
            <summary>
            
            </summary>
            <param name="vertex"></param>
            <param name="vertexEqualityComparerWithEpsilon"></param>
            <returns>All vertices close to <paramref name="vertex"/>, not including itself</returns>
        </member>
        <member name="T:NeoAxis.MeshGeometry">
            <summary>
            Represents mesh geometry: vertices structure and material data.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VertexStructure">
            <summary>
            The structure of the mesh vertex.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.VertexStructureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.VertexStructure"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.UnwrappedUV">
            <summary>
            Specifies what texture coordinate channel contains unwrapped UV coordinates.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.UnwrappedUVChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.UnwrappedUV"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.Vertices">
            <summary>
            The mesh geometry vertices data.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.VerticesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.Vertices"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.Indices">
            <summary>
            The mesh geometry indices data.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.IndicesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.Indices"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.Material">
            <summary>
            The material of a mesh geometry.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VoxelData">
            <summary>
            A voxelized data of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry.VoxelDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry.VoxelData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VoxelGridSize">
            <summary>
            The size of a voxel grid.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VoxelCount">
            <summary>
            The amount of voxels in the grid.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VoxelFormat">
            <summary>
            The format of a voxel grid.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry.VoxelFillHolesDistance">
            <summary>
            The fill holes distance setting of a voxel grid.
            </summary>
        </member>
        <member name="M:NeoAxis.MeshGeometry.ExtractActualGeometry(System.Byte[],NeoAxis.VertexElement[],System.Int32[],NeoAxis.StandardVertex[]@,System.Int32[]@,System.String@)">
            <summary>
            Extracts actual geometry from a virtualized geometry data or from vertex index arrays.
            </summary>
            <param name="vertices"></param>
            <param name="vertexComponents"></param>
            <param name="indices"></param>
            <param name="virtualizedData"></param>
            <param name="resultVertices"></param>
            <param name="resultIndices"></param>
            <param name="error"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.MeshLevelOfDetail">
            <summary>
            Component for the level of detail configuration.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshLevelOfDetail.Mesh">
            <summary>
            Mesh used for this level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshLevelOfDetail.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshLevelOfDetail.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshLevelOfDetail.Distance">
            <summary>
            Specifies the distance at which this level of detail will become active. For voxel LODs is also another factor exists, voxel LOD will activate only when the size of a voxel is less than 1 pixel on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshLevelOfDetail.DistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshLevelOfDetail.Distance"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshModifier">
            <summary>
            Declares modifier of the mesh. Using mesh modifiers, you can change the output data provided by the mesh; they do not change the original mesh data.
            </summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Arch">
            <summary>
            Mesh geometry in the form of an arch.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Axis">
            <summary>
            The axis of the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Radius">
            <summary>
            The radius of the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Thickness">
            <summary>
            The thickness of the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Depth">
            <summary>
            The depth of the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.DepthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Depth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Segments">
            <summary>
            The number of sides for the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.SegmentsDepth">
            <summary>
            The number of depth segments for the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.SegmentsDepthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.SegmentsDepth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.Circumference">
            <summary>
            The degree of the arch circumference.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.CircumferenceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.Circumference"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.EndCapes">
            <summary>
            Whether to create faces for the ends of the arch.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.EndCapesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.EndCapes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Arch.InsideOut">
            <summary>
            Whether the arch is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Arch.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Arch.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Box">
            <summary>
            Mesh geometry in the form of a box.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Box.Dimensions">
            <summary>
            The size of the box.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Box.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Box.Dimensions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Box.InsideOut">
            <summary>
            Whether the box is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Box.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Box.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Capsule">
            <summary>
            Mesh geometry in the form of a capsule.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.Axis">
            <summary>
            The axis of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.Radius">
            <summary>
            The radius of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.Height">
            <summary>
            The height of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.SegmentsHorizontal">
            <summary>
            The number of horizontal segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.SegmentsHorizontalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.SegmentsHorizontal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.SegmentsVertical">
            <summary>
            The number of vertical segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.SegmentsVerticalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.SegmentsVertical"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Capsule.InsideOut">
            <summary>
            Whether the capsule is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Capsule.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Capsule.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Cone">
            <summary>
            Mesh geometry in the form of a cone.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cone.Axis">
            <summary>
            The axis of the cone.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cone.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cone.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cone.Radius">
            <summary>
            The radius of the cone.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cone.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cone.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cone.Height">
            <summary>
            The height of the cone.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cone.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cone.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cone.Segments">
            <summary>
            The number of horizontal segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cone.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cone.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cone.InsideOut">
            <summary>
            Whether the cone is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cone.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cone.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Cylinder">
            <summary>
            Mesh geometry in the form of a cylinder.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cylinder.Axis">
            <summary>
            The axis of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cylinder.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cylinder.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cylinder.Radius">
            <summary>
            The radius of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cylinder.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cylinder.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cylinder.Height">
            <summary>
            The height of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cylinder.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cylinder.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cylinder.Segments">
            <summary>
            The number of segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cylinder.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cylinder.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Cylinder.InsideOut">
            <summary>
            Whether the cylidner is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Cylinder.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Cylinder.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Door">
            <summary>
            Mesh geometry in the form of a door.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.Axis">
            <summary>
            The axis of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.Width">
            <summary>
            The width of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.WidthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.Width"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.Height">
            <summary>
            The height of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.Depth">
            <summary>
            The depth of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.DepthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.Depth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.DoorWidth">
            <summary>
            The inside width of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.DoorWidthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.DoorWidth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.DoorHeight">
            <summary>
            The inside height of the door.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.DoorHeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.DoorHeight"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Door.InsideOut">
            <summary>
            Whether the door is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Door.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Door.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Pipe">
            <summary>
            Mesh geometry in the form of a pipe.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.Axis">
            <summary>
            The axis of the pipe.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.Radius">
            <summary>
            The radius of the pipe.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.Height">
            <summary>
            The height of the pipe.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.Thickness">
            <summary>
            The thickness of the walls of the pipe.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.Segments">
            <summary>
            The number of sides for the pipe.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.SegmentsHeight">
            <summary>
            The number of divisions to use for the pipe height.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.SegmentsHeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.SegmentsHeight"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Pipe.InsideOut">
            <summary>
            Whether the pipe is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Pipe.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Pipe.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Plane">
            <summary>
            Mesh geometry in the form of a plane.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.Axis">
            <summary>
            The axis of the plane.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.Dimensions">
            <summary>
            The size of the plane. 
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.Dimensions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.Segments">
            <summary>
            The number of segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.UVTilesPerUnit">
            <summary>
            The number of UV tiles per unit of the world.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.UVTilesPerUnitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.UVTilesPerUnit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.UVTilesInTotal">
            <summary>
            The total number of uv tiles.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.UVTilesInTotalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.UVTilesInTotal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Plane.UVOffset">
            <summary>
            The offset of UV coordinates.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Plane.UVOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Plane.UVOffset"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_PolygonBasedPolyhedron">
            <summary>
            Mesh geometry in the form of polyhedron generated by thickening a polygon.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.Clockwise">
            <summary>
            Whether the points are clockwise.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.ClockwiseChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.Clockwise"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.Height">
            <summary>
            The height of the shape.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.InsideOut">
            <summary>
            Whether the box is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.InsideOut"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.AlwaysDisplayPointLabels">
            <summary>
            Whether to always display point labels or only when the object in the scene is selected.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.AlwaysDisplayPointLabelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.AlwaysDisplayPointLabels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.UVScale">
            <summary>
            The multiplier of output texture coordinates.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.UVScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_PolygonBasedPolyhedron.UVScale"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_PolygonBasedPolyhedron_Point">
            <summary>
            Represents a point of the <see cref="T:NeoAxis.MeshGeometry_PolygonBasedPolyhedron"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Prism">
            <summary>
            Mesh geometry in the form of a prism.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Prism.Axis">
            <summary>
            The axis of the prism.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Prism.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Prism.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Prism.Radius">
            <summary>
            The radius of the prism.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Prism.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Prism.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Prism.Height">
            <summary>
            The height of the prism.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Prism.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Prism.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Prism.Segments">
            <summary>
            The number of segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Prism.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Prism.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Prism.InsideOut">
            <summary>
            Whether the prism is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Prism.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Prism.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Procedural">
            <summary>
            Base component for mesh geometry procedural generation.
            </summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Sphere">
            <summary>
            Mesh geometry in the form of a sphere.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.SphereType">
            <summary>
            The type of the sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.SphereTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.SphereType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.SegmentsHorizontal">
            <summary>
            The number of horizontal segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.SegmentsHorizontalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.SegmentsHorizontal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.SegmentsVertical">
            <summary>
            The number of vertical segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.SegmentsVerticalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.SegmentsVertical"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.Subdivisions">
            <summary>
            The subdivision level of the sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.SubdivisionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.Subdivisions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Sphere.InsideOut">
            <summary>
            Whether the sphere is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Sphere.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Sphere.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Stairs">
            <summary>
            Mesh geometry in the form of a stairs.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Axis">
            <summary>
            The axis of the stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Width">
            <summary>
            The width of the stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.WidthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Width"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Height">
            <summary>
            The height of the stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Depth">
            <summary>
            The depth of the stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.DepthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Depth"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Steps">
            <summary>
            The quantity of stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.StepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Steps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Curvature">
            <summary>
            Degree of the stairs twist.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.CurvatureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Curvature"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Radius">
            <summary>
            The radius of the stairs
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.Sides">
            <summary>
            Whether to create faces on the sides of the stairs.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.SidesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.Sides"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Stairs.InsideOut">
            <summary>
            Whether the stairs are flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Stairs.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Stairs.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.MeshGeometry_Torus">
            <summary>
            Mesh geometry in the form of a torus.
            </summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.Axis">
            <summary>
            The axis of the torus.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.Radius">
            <summary>
            The radius of the entire torus.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.Segments">
            <summary>
            The number of torus segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.SegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.Segments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.Circumference">
            <summary>
            The degree of the torus circumference.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.CircumferenceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.Circumference"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.TubeRadius">
            <summary>
            The radius of the torus tube.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.TubeRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.TubeRadius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.TubeSegments">
            <summary>
            The number of tube segments used.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.TubeSegmentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.TubeSegments"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.TubeCircumference">
            <summary>
            The degree of the tube circumference.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.TubeCircumferenceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.TubeCircumference"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.MeshGeometry_Torus.InsideOut">
            <summary>
            Whether the torus is flipped.
            </summary>
        </member>
        <member name="E:NeoAxis.MeshGeometry_Torus.InsideOutChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.MeshGeometry_Torus.InsideOut"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Skeleton">
            <summary>
            Represents mesh skeleton as a collection of bones. Used for a mesh animation.
            </summary>
        </member>
        <member name="T:NeoAxis.SkeletonAnimation">
            <summary>
            Represents mesh skeleton animation. Defines when and which animation track will be used by skeleton.
            </summary>
        </member>
        <member name="P:NeoAxis.SkeletonAnimation.Track">
            <summary>
            Reference to the track with animation data.
            </summary>
        </member>
        <member name="E:NeoAxis.SkeletonAnimation.TrackChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SkeletonAnimation.Track"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SkeletonAnimation.TrackStartTime">
            <summary>
            Start time of a track.
            </summary>
        </member>
        <member name="E:NeoAxis.SkeletonAnimation.TrackStartTimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SkeletonAnimation.TrackStartTime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SkeletonAnimation.OriginalSkeleton">
            <summary>
            The reference to original skeleton when it is imported. Used to support animation retargeting when skeletons have different structure.
            </summary>
        </member>
        <member name="E:NeoAxis.SkeletonAnimation.OriginalSkeletonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SkeletonAnimation.OriginalSkeleton"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SkeletonAnimationTrack">
            <summary>
            Represents the track of a skeleton animation. Defines how mesh skeleton bones will move in space.
            </summary>
        </member>
        <member name="P:NeoAxis.SkeletonAnimationTrack.KeyFrames">
            <summary>
            Data of the track.
            </summary>
        </member>
        <member name="E:NeoAxis.SkeletonAnimationTrack.KeyFramesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SkeletonAnimationTrack.KeyFrames"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SkeletonAnimationTrack.KeyFrame">
            <summary>
            Represents key frame data of <see cref="T:NeoAxis.SkeletonAnimationTrack"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.SkeletonAnimationTrack.CalculateBoneTransformsItem">
            <summary>
            Represents an output item for bone transforms calculation.
            </summary>
        </member>
        <member name="T:NeoAxis.SkeletonBone">
            <summary>
            Represents a bone of a mesh skeleton, how it is positioned in space.
            </summary>
        </member>
        <member name="P:NeoAxis.SkeletonBone.Transform">
            <summary>
            The position, rotation and scale of the bone. By default only position are stored in the property, rotation and scale are applied to key frames.
            </summary>
        </member>
        <member name="E:NeoAxis.SkeletonBone.TransformChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SkeletonBone.Transform"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ObjectInSpace">
            <summary>
            The base component of an object in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.ObjectInSpace.Visible">
            <summary>
            Whether the object is visible in the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.ObjectInSpace.VisibleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ObjectInSpace.Visible"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ObjectInSpace.CanBeSelected">
            <summary>
            Whether the object is selectable in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ObjectInSpace.CanBeSelectedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ObjectInSpace.CanBeSelected"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ObjectInSpace.Transform">
            <summary>
            The position, rotation and scale of the object.
            </summary>
        </member>
        <member name="E:NeoAxis.ObjectInSpace.TransformChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ObjectInSpace.Transform"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ObjectInSpace.TransformV">
            <summary>
            Simplier form of Transform.Value.
            </summary>
        </member>
        <member name="P:NeoAxis.ObjectInSpace.RemainingLifetime">
            <summary>
            The lifetime of the component during the simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.ObjectInSpace.RemainingLifetimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ObjectInSpace.RemainingLifetime"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ObjectInSpace.CheckSelectionByRayContext">
            <summary>
            Provides data for <see cref="M:NeoAxis.ObjectInSpace.CheckSelectionByRay(NeoAxis.ObjectInSpace.CheckSelectionByRayContext)"/> method.
            </summary>
        </member>
        <member name="T:NeoAxis.ObjectInSpace.RenderingContext">
            <summary>
            Object to control the process of displaying objects in the scene.
            </summary>
        </member>
        <member name="T:NeoAxis.ObjectInSpaceUtility">
            <summary>
            Auxiliary class to work with <see cref="T:NeoAxis.ObjectInSpace"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.ObjectInSpaceUtility.CalculateObjectToTransform(NeoAxis.ObjectInSpace)">
            <summary>
            Get object to transform. find by reference. must be child of selected object.
            </summary>
            <param name="selectedObject"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.Occluder">
            <summary>
            The component to cull invisible geometry by volume in real-time.
            </summary>
        </member>
        <member name="T:NeoAxis.PaintLayer">
            <summary>
            Specifies a layer for the mesh or for the terrain.
            </summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.MaskFormat">
            <summary>
            The format of the mask data.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.MaskFormatChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.MaskFormat"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.Mask">
            <summary>
            The editable mask of the layer.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.MaskChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.Mask"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.MaskImage">
            <summary>
            The mask in a form of texture.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.MaskImageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.MaskImage"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.Material">
            <summary>
            The material of the layer.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.MaterialColor">
            <summary>
            The base color and opacity multiplier of the material.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.MaterialColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.MaterialColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.UVScale">
            <summary>
            The multiplier of texture coordinates for texture sampling.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.UVScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.UVScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.BlendMode">
            <summary>
            The technique of rendering of the layer. NoBlend mode is useful when you need mix surface objects of several layers.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.BlendModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.BlendMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.Surface">
            <summary>
            The surface of the layer.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.Surface"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjects">
            <summary>
            Whether to create objects of the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsDistribution">
            <summary>
            The scale the distribution of surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsDistributionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsDistribution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsScale">
            <summary>
            The scale of surface objects size.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsColor">
            <summary>
            The base color and opacity multiplier of the surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsVisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance of surface objects. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsVisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsVisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsCastShadows">
            <summary>
            Whether to cast shadows on the other surfaces of surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsCastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsCastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PaintLayer.SurfaceObjectsCollision">
            <summary>
            Whether to enable a collision detection. A collision definition of the mesh is used.
            </summary>
        </member>
        <member name="E:NeoAxis.PaintLayer.SurfaceObjectsCollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PaintLayer.SurfaceObjectsCollision"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleAccelerationByTime">
            <summary>
            The base class of the module for changing the speed of a particle.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.Type">
            <summary>
            The method for calculating the value.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleAccelerationByTime.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleAccelerationByTime.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.Constant">
            <summary>
            Constant value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleAccelerationByTime.ConstantChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleAccelerationByTime.Constant"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.Range">
            <summary>
            Interval value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleAccelerationByTime.RangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleAccelerationByTime.Range"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.CurveX">
            <summary>
            A value specified by the curve for X axis over time.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.CurveY">
            <summary>
            A value specified by the curve for Y axis over time.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleAccelerationByTime.CurveZ">
            <summary>
            A value specified by the curve for Z axis over time.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleLinearAccelerationByTime">
            <summary>
            Specifies a linear velocity acceleration of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleAngularAccelerationByTime">
            <summary>
            Specifies an angular velocity acceleration of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleColorMultiplierByTime">
            <summary>
            Specifies a color multiplier of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleColorMultiplierByTime.Channels">
            <summary>
            Specifies which color channels the module affects.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleColorMultiplierByTime.ChannelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleColorMultiplierByTime.Channels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleColorMultiplierByTime.Type">
            <summary>
            The method for calculating the value.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleColorMultiplierByTime.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleColorMultiplierByTime.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleColorMultiplierByTime.Range">
            <summary>
            Interval value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleColorMultiplierByTime.RangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleColorMultiplierByTime.Range"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleColorMultiplierByTime.Curve">
            <summary>
            A value specified by the curve over time.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleModuleCustom">
            <summary>
            Custom particle module.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleSizeMultiplierByTime">
            <summary>
            Specifies a size multiplier of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleSizeMultiplierByTime.Axes">
            <summary>
            Specifies which size multiplier components the module affects.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSizeMultiplierByTime.AxesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSizeMultiplierByTime.Axes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSizeMultiplierByTime.Type">
            <summary>
            The method for calculating the value.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSizeMultiplierByTime.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSizeMultiplierByTime.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSizeMultiplierByTime.Range">
            <summary>
            Interval value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSizeMultiplierByTime.RangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSizeMultiplierByTime.Range"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSizeMultiplierByTime.Curve">
            <summary>
            A value specified by the curve over time.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleSpeedMultiplierByTime">
            <summary>
            The base class of the module for changing the speed multiplier of a particle.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleSpeedMultiplierByTime.Type">
            <summary>
            The method for calculating the value.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSpeedMultiplierByTime.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSpeedMultiplierByTime.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSpeedMultiplierByTime.Constant">
            <summary>
            Constant value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSpeedMultiplierByTime.ConstantChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSpeedMultiplierByTime.Constant"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSpeedMultiplierByTime.Range">
            <summary>
            Interval value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSpeedMultiplierByTime.RangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSpeedMultiplierByTime.Range"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSpeedMultiplierByTime.Curve">
            <summary>
            A value specified by the curve over time.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleLinearSpeedMultiplierByTime">
            <summary>
            Specifies a linear speed multiplier of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleAngularSpeedMultiplierByTime">
            <summary>
            Specifies an angular speed multiplier of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleVelocityByTime">
            <summary>
            The base class of the module for changing the velocity of a particle.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.Type">
            <summary>
            The method for calculating the value.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleVelocityByTime.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleVelocityByTime.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.Constant">
            <summary>
            Constant value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleVelocityByTime.ConstantChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleVelocityByTime.Constant"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.Range">
            <summary>
            Interval value over all time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleVelocityByTime.RangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleVelocityByTime.Range"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.CurveX">
            <summary>
            A value specified by the curve for X axis over time.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.CurveY">
            <summary>
            A value specified by the curve for Y axis over time.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleVelocityByTime.CurveZ">
            <summary>
            A value specified by the curve for Z axis over time.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleLinearVelocityByTime">
            <summary>
            Specifies a linear velocity of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleAngularVelocityByTime">
            <summary>
            Specifies an angular velocity of the particles depending on their lifetime.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitter">
            <summary>
            A source of new particles of a <see cref="T:NeoAxis.ParticleSystem">particle system</see>.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.StartTime">
            <summary>
            The start time of the emitter.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.StartTimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.StartTime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Duration">
            <summary>
            Emitter operating time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.DurationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Duration"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.SpawnRate">
            <summary>
            Particle creation frequency.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.SpawnRateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.SpawnRate"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.SpawnCount">
            <summary>
            The multiplier of created particles number.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.SpawnCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.SpawnCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Direction">
            <summary>
            The initial direction of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.DirectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Direction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.DispersionAngle">
            <summary>
            The dispersion angle from the initial movement direction.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.DispersionAngleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.DispersionAngle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Speed">
            <summary>
            The initial speed of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.SpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Speed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.RotateAlongMovement">
            <summary>
            Whether to set the initial rotation in the direction of motion velocity.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.RotateAlongMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.RotateAlongMovement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Rotation">
            <summary>
            The initial rotation of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.RotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Rotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.AngularVelocity">
            <summary>
            The initial angular velocity of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.AngularVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.AngularVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Lifetime">
            <summary>
            Life time of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.LifetimeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Lifetime"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Size">
            <summary>
            The initial size of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.SizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Size"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.GravityMultiplier">
            <summary>
            Multiplier that affects the gravity of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.GravityMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.GravityMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.RenderingMode">
            <summary>
            The rendering mode of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.RenderingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.RenderingMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Mesh">
            <summary>
            The mesh of the particles when Mesh rendering mode is used.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Material">
            <summary>
            The material of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.Color">
            <summary>
            The initial color and opacity of the particles.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.ReceiveDecals">
            <summary>
            Whether decals can be applied to the object.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitter.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitter.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitter.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleSystem">
            <summary>
            Defines a particle system.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleSystem.Looping">
            <summary>
            Whether the particle system will be repeated after completion.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystem.LoopingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystem.Looping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystem.SimulationSpace">
            <summary>
            Space in which the particles will be displayed.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystem.SimulationSpaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystem.SimulationSpace"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystem.MaxParticles">
            <summary>
            The maximum number of particles that can exist at one time.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleSystem.SimulationSpeed">
            <summary>
            Multiplier for simulation run time.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystem.SimulationSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystem.SimulationSpeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystem.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystem.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystem.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleSystem.CompiledData">
            <summary>
            Represents precalculated data of <see cref="T:NeoAxis.ParticleSystem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleSystemInSpace">
            <summary>
            Particle system in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.ParticleSystem">
            <summary>
            The particle system used by the object.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.ParticleSystemChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.ParticleSystem"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.ReplaceMaterial">
            <summary>
            Replaces all geometries of the mesh by another material.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.ReplaceMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.ReplaceMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.Color">
            <summary>
            The base color and opacity multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.DisplayEmitters">
            <summary>
            Whether to display the shapes of the emitters.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.DisplayEmittersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.DisplayEmitters"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.Activated">
            <summary>
            Whether the particle system is in active state.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.ActivatedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.Activated"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleSystemInSpace.SpecialEffects">
            <summary>
            Specifies settings for special object effects, such as an outline effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.SpecialEffectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.SpecialEffects"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ParticleSystemInSpace.MergeSimulationStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleSystemInSpace.MergeSimulationSteps"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleSystemInSpace.Particle">
            <summary>
            Represents a particle for <see cref="T:NeoAxis.ParticleSystemInSpace"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitterShape">
            <summary>
            Base class of a shape of a <see cref="T:NeoAxis.ParticleEmitter">particle system emitter</see>.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape.Transform">
            <summary>
            The position, rotation and scale of the shape.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape.TransformChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape.Transform"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape.Probability">
            <summary>
            The probability of choosing this shape from others when emitting particle.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape.ProbabilityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape.Probability"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitterShape_Box">
            <summary>
            A shape in the form of a box of a <see cref="T:NeoAxis.ParticleEmitter">particle system emitter</see>.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape_Box.Dimensions">
            <summary>
            The size of the box.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape_Box.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape_Box.Dimensions"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitterShape_Cylinder">
            <summary>
            A shape in the form of a cylinder of a <see cref="T:NeoAxis.ParticleEmitter">particle system emitter</see>.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape_Cylinder.Radius">
            <summary>
            The radius of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape_Cylinder.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape_Cylinder.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape_Cylinder.Height">
            <summary>
            The height of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape_Cylinder.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape_Cylinder.Height"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitterShape_Point">
            <summary>
            A shape in the form of a point of a <see cref="T:NeoAxis.ParticleEmitter">particle system emitter</see>.
            </summary>
        </member>
        <member name="T:NeoAxis.ParticleEmitterShape_Sphere">
            <summary>
            A shape in the form of a sphere of a <see cref="T:NeoAxis.ParticleEmitter">particle system emitter</see>.
            </summary>
        </member>
        <member name="P:NeoAxis.ParticleEmitterShape_Sphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.ParticleEmitterShape_Sphere.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ParticleEmitterShape_Sphere.Radius"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D">
            <summary>
            Base class of all 2D collision shapes.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.TransformRelativeToParent">
            <summary>
            The position, rotation and scale of the object relative to parent.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.TransformRelativeToParentChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.TransformRelativeToParent"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.Friction">
            <summary>
            The amount of friction applied on the shape.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.FrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.Friction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.Restitution">
            <summary>
            The ratio of the final relative velocity to initial relative velocity of the shape after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.RestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.Restitution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.CollisionCategories">
            <summary>
            The collision categories this fixture is a part of.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.CollisionCategoriesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.CollisionCategories"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.CollidesWith">
            <summary>
            The collision mask bits. This states the categories that this fixture would accept for collision.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.CollidesWithChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.CollidesWith"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D.CollisionGroup">
            <summary>
            Collision groups allow a certain group of objects to never collide(negative) or always collide (positive). Zero means no collision group. Non-zero group filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D.CollisionGroupChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D.CollisionGroup"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D_Box">
            <summary>
            Box-based 2D collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Box.Dimensions">
            <summary>
            The size of the box.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Box.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Box.Dimensions"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D_Capsule">
            <summary>
            Capsule-based 2D collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Capsule.Axis">
            <summary>
            The axis of the capsule (0 = X-axis, 1 = Y-axis).
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Capsule.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Capsule.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Capsule.Radius">
            <summary>
            The radius of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Capsule.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Capsule.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Capsule.Height">
            <summary>
            The height of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Capsule.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Capsule.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Capsule.Edges">
            <summary>
            The number of edges. The more edges, the more it resembles a capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Capsule.EdgesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Capsule.Edges"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D_Ellipse">
            <summary>
            Ellipse-based 2D collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Ellipse.Dimensions">
            <summary>
            The size of the ellipse.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Ellipse.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Ellipse.Dimensions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Ellipse.Edges">
            <summary>
            The number of edges. The more edges, the more it resembles an ellipse.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Ellipse.EdgesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Ellipse.Edges"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Ellipse.UseSmoothCircleWhenPossible">
            <summary>
            Whether to create smooth circle instead polygon. The mode can works only for circles and when TransformRelativeToParent has default value.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Ellipse.UseSmoothCircleWhenPossibleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Ellipse.UseSmoothCircleWhenPossible"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D_Mesh">
            <summary>
            Mesh-based 2D collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Mesh.Mesh">
            <summary>
            The mesh used by the collision shape.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Mesh.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Mesh.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Mesh.Vertices">
            <summary>
            The reference to the vertex array of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Mesh.VerticesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Mesh.Vertices"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Mesh.Indices">
            <summary>
            The reference to the index array of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Mesh.IndicesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Mesh.Indices"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape2D_Mesh.ShapeTypeEnum">
            <summary>
            Enumerates the types of collision shape being created internally.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape2D_Mesh.ShapeType">
            <summary>
            Defines the type of collision shape being created internally.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape2D_Mesh.ShapeTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape2D_Mesh.ShapeType"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint2D">
            <summary>
            Base class for constraint link between two physical 2D bodies.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint2D.BodyA">
            <summary>
            The first physical body used.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D.BodyAChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D.BodyA"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D.BodyB">
            <summary>
            The second physical body used.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D.BodyBChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D.BodyB"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D.CollisionsBetweenLinkedBodies">
            <summary>
            Whether the collision detection is enabled between the linked physical bodies.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D.CollisionsBetweenLinkedBodiesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D.CollisionsBetweenLinkedBodies"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D.Breakpoint">
            <summary>
            The Breakpoint indicates the maximum value the joint error can be before it breaks.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D.BreakpointChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D.Breakpoint"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint2D_Distance">
            <summary>
            A 2D distance joint rains two points on two bodies to remain at a fixed distance from each other.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Distance.Frequency">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0 disables softness.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Distance.FrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Distance.Frequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Distance.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Distance.DampingRatioChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Distance.DampingRatio"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint2D_Fixed">
            <summary>
            A 2D joint hard constraints two bodies.
            </summary>
        </member>
        <member name="T:NeoAxis.Constraint2D_Prismatic">
            <summary>
            A 2D prismatic joint. This joint provides one degree of freedom: translation along an axis fixed in body A. Relative rotation is prevented.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.LimitEnabled">
            <summary>
            Whether the constraint limit is enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.LimitEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.LimitEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.LimitLow">
            <summary>
            The lower constraint limit in world units (usually in meters).
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.LimitLowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.LimitLow"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.LimitHigh">
            <summary>
            The upper constraint limit in world units (usually in meters).
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.LimitHighChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.LimitHigh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.MotorEnabled">
            <summary>
            Whether the constraint motor is enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.MotorEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.MotorEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.MotorSpeed">
            <summary>
            The motor speed in world units (usually meters) per second.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.MotorSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.MotorSpeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Prismatic.MotorMaxForce">
            <summary>
            The maximum motor torque, usually in N.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Prismatic.MotorMaxForceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Prismatic.MotorMaxForce"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint2D_Revolute">
            <summary>
            A 2D revolute joint constrains to bodies to share a common point while they are free to rotate about the point.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.LimitEnabled">
            <summary>
            Whether the constraint limit is enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.LimitEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.LimitEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.LimitLow">
            <summary>
            The lower constraint limit in degrees.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.LimitLowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.LimitLow"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.LimitHigh">
            <summary>
            The upper constraint limit in degrees.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.LimitHighChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.LimitHigh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.MotorEnabled">
            <summary>
            Whether the constraint motor is enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.MotorEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.MotorEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.MotorSpeed">
            <summary>
            The motor speed in degrees per second.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.MotorSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.MotorSpeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Revolute.MotorMaxTorque">
            <summary>
            The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Revolute.MotorMaxTorqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Revolute.MotorMaxTorque"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint2D_Weld">
            <summary>
            A weld joint essentially glues two bodies together. The joint is soft constraint based, which means the two bodies will move relative to each other.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Weld.Frequency">
            <summary>
            The frequency of the joint. A higher frequency means a stiffer joint, but a too high value can cause the joint to oscillate. Default is 0, which means the joint does no spring calculations.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Weld.FrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Weld.Frequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint2D_Weld.DampingRatio">
            <summary>
            The damping on the joint. The damping is only used when the joint has a frequency (> 0).
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint2D_Weld.DampingRatioChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint2D_Weld.DampingRatio"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.PhysicalBody2D">
            <summary>
            Base class for rigid and soft body 2D components.
            </summary>
        </member>
        <member name="T:NeoAxis.Physics2DRayTestItem">
            <summary>
            The data to perform a search query of 2D physical objects by ray.
            </summary>
        </member>
        <member name="T:NeoAxis.Physics2DRayTestItem.ResultItem">
            <summary>
            Represents a result item for <see cref="T:NeoAxis.Physics2DRayTestItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Physics2DContactTestItem">
            <summary>
            The data to perform a search query of physical objects at a specified area.
            </summary>
        </member>
        <member name="T:NeoAxis.Physics2DContactTestItem.ResultItem">
            <summary>
            Represents a result item for <see cref="T:NeoAxis.Physics2DContactTestItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Physics2DUtility">
            <summary>
            Auxiliary methods for working with the 2D physics engine.
            </summary>
        </member>
        <member name="T:NeoAxis.RigidBody2D">
            <summary>
            2D rigid physical body.
            </summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.MotionType">
            <summary>
            The type of motion used.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.MotionTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.MotionType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.Mass">
            <summary>
            The mass of the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.MassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.Mass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.Inertia">
            <summary>
            Gets or sets the rotational inertia of the body about the local origin.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.InertiaChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.Inertia"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.LocalCenter">
            <summary>
            Gets or sets the local position of the center of mass.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.LocalCenterChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.LocalCenter"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.EnableGravity">
            <summary>
            Whether the rigid body is affected by the gravity.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.EnableGravityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.EnableGravity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.LinearDamping">
            <summary>
            The linear reduction of velocity over time.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.LinearDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.LinearDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.AngularDamping">
            <summary>
            The angular reduction of velocity over time.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.AngularDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.AngularDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.FixedRotation">
            <summary>
            Whether the body to have fixed rotation.
            </summary>
            <value><c>true</c> if it has fixed rotation; otherwise, <c>false</c>.</value>
        </member>
        <member name="E:NeoAxis.RigidBody2D.FixedRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.FixedRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.AllowSleep">
            <summary>
            Allows sleep the body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.AllowSleepChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.AllowSleep"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.CCD">
            <summary>
            Gets or sets a value indicating whether this body should be included in the CCD solver.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.CcdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.CCD"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.LinearVelocity">
            <summary>
            The initial linear velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.LinearVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.LinearVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.AngularVelocity">
            <summary>
            The initial angular velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.AngularVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.AngularVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.ContactsDisplay">
            <summary>
            Whether to display collected collision contacts data.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody2D.ContactsDisplayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody2D.ContactsDisplay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody2D.Active">
            <summary>
            Gets the sleep state of the body. A sleeping body has very low CPU cost.
            </summary>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyForce(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Apply a force at a world point. If the force is not applied at the center of mass, it will generate a torque and affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyForce(NeoAxis.Vector2)">
            <summary>
            Applies a force at the center of mass.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyTorque(System.Double)">
            <summary>
            Apply a torque. This affects the angular velocity without affecting the linear velocity of the center of mass. This wakes up the body.
            </summary>
            <param name="torque">The torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyLinearImpulse(NeoAxis.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyLinearImpulse(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity. It also modifies the angular velocity if the point of application
            is not at the center of mass. This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:NeoAxis.RigidBody2D.ApplyAngularImpulse(System.Double)">
            <summary>
            Apply an angular impulse.
            </summary>
            <param name="impulse">The angular impulse in units of kg*m*m/s.</param>
        </member>
        <member name="T:NeoAxis.Sensor2D">
            <summary>
            The event trigger in the scene with 2D physics support.
            </summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.SourceData">
            <summary>
            What kind of data is used as a source of events.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.SourceDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.SourceData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.Shape">
            <summary>
            The shape of the trigger.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.ShapeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.Shape"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.RayTarget">
            <summary>
            The target by which the sensor ray will trigger.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.RayTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.RayTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.Mode">
            <summary>
            The recognition mode of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.FilterByType">
            <summary>
            The type of objects that sensor will recognize.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.FilterByTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.FilterByType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.CollisionCategories">
            <summary>
            The collision categories this fixture is a part of.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.CollisionCategoriesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.CollisionCategories"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.CollidesWith">
            <summary>
            The collision mask bits. This states the categories that this fixture would accept for collision.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.CollidesWithChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.CollidesWith"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.CollisionGroup">
            <summary>
            Collision groups allow a certain group of objects to never collide or always collide. Zero means no collision group. Non-zero group filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.CollisionGroupChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.CollisionGroup"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.IgnoreSensors">
            <summary>
            Whether the sensor is ignoring other sensors.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.IgnoreSensorsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.IgnoreSensors"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.WhenUpdate">
            <summary>
            The update case mode of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.WhenUpdateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.WhenUpdate"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.DisplayColor">
            <summary>
            The display color of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.DisplayColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.DisplayColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.DisplayObjects">
            <summary>
            Whether to draw gizmos on the objects recognized by the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.DisplayObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.DisplayObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.DisplayObjectsColor">
            <summary>
            The color of the recognized object gizmos.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor2D.DisplayObjectsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor2D.DisplayObjectsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor2D.Objects">
            <summary>
            List of objects recognized by the sensor.
            </summary>
        </member>
        <member name="T:NeoAxis.Sensor2D.ResultItem">
            <summary>
            Represents an item for <see cref="M:NeoAxis.Sensor2D.CalculateObjects"/> method.
            </summary>
        </member>
        <member name="T:NeoAxis.CollisionShape">
            <summary>
            Base class of all collision shapes.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape.LocalTransform">
            <summary>
            The position, rotation and scale of the object relative to parent.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape.LocalTransformChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape.LocalTransform"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Box">
            <summary>
            Box-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Box.Dimensions">
            <summary>
            The size of the box.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Box.DimensionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Box.Dimensions"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Capsule">
            <summary>
            Capsule-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Capsule.Axis">
            <summary>
            The axis of the capsule (0 = X-axis, 1 = Y-axis, 2 = Z-axis).
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Capsule.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Capsule.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Capsule.Radius">
            <summary>
            The radius of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Capsule.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Capsule.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Capsule.Height">
            <summary>
            The height of the capsule.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Capsule.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Capsule.Height"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Cone">
            <summary>
            Cone-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cone.Axis">
            <summary>
            The axis of the cone (0 = X-axis, 1 = Y-axis, 2 = Z-axis).
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cone.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cone.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cone.Radius">
            <summary>
            The radius of the cone.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cone.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cone.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cone.Height">
            <summary>
            The height of the cone.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cone.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cone.Height"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Cylinder">
            <summary>
            Cylinder-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cylinder.Axis">
            <summary>
            The axis of the cylinder (0 = X-axis, 1 = Y-axis, 2 = Z-axis).
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cylinder.AxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cylinder.Axis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cylinder.Radius">
            <summary>
            The radius of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cylinder.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cylinder.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Cylinder.Height">
            <summary>
            The height of the cylinder.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Cylinder.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Cylinder.Height"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Mesh">
            <summary>
            Mesh-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Mesh.Mesh">
            <summary>
            The mesh used by the collision shape.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Mesh.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Mesh.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Mesh.Vertices">
            <summary>
            The reference to the vertex array of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Mesh.VerticesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Mesh.Vertices"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Mesh.Indices">
            <summary>
            The reference to the index array of the mesh.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Mesh.IndicesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Mesh.Indices"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Mesh.ShapeTypeEnum">
            <summary>
            Enumerates the types of collision shape being created internally.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Mesh.ShapeType">
            <summary>
            Defines the type of collision shape being created internally.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Mesh.ShapeTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Mesh.ShapeType"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CollisionShape_Sphere">
            <summary>
            Sphere-based collision shape.
            </summary>
        </member>
        <member name="P:NeoAxis.CollisionShape_Sphere.Radius">
            <summary>
            The radius of the sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.CollisionShape_Sphere.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CollisionShape_Sphere.Radius"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Constraint_SixDOF">
            <summary>
            6-degrees of freedom constraint link between two physical bodies.
            </summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.BodyA">
            <summary>
            The first physical body used.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.BodyAChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.BodyA"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.BodyB">
            <summary>
            The second physical body used.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.BodyBChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.BodyB"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.CollisionsBetweenLinkedBodies">
            <summary>
            Whether the collision detection is enabled between the linked physical bodies.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.CollisionsBetweenLinkedBodiesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.CollisionsBetweenLinkedBodies"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.NumVelocityStepsOverride">
            <summary>
            Override for the number of solver velocity iterations to run, the total amount of iterations is the max of Scene.PhysicsNumVelocitySteps and this for all constraints in the island.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.NumVelocityStepsOverrideChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.NumVelocityStepsOverride"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.NumPositionStepsOverride">
            <summary>
            Override for the number of position velocity iterations to run, the total amount of iterations is the max of Scene.PhysicsNumPositionSteps and this for all constraints in the island.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.NumPositionStepsOverrideChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.NumPositionStepsOverride"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.Simulate">
            <summary>
            Whether to enable the constraint in the simulation. The property can be used to implement a breakable constraint.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.SimulateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.Simulate"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxis">
            <summary>
            Linear X-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisLimit">
            <summary>
            The limits of the linear axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisFriction">
            <summary>
            The friction of linear axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotor">
            <summary>
            The motor mode of linear axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorLimit">
             <summary>
            Force range to apply in case of a linear constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorTarget">
            <summary>
            The target value of the linear axis X motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearXAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearXAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxis">
            <summary>
            Linear Y-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisLimit">
            <summary>
            The limits of the linear axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisFriction">
            <summary>
            The friction of linear axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotor">
            <summary>
            The motor mode of linear axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorLimit">
             <summary>
            Force range to apply in case of a linear constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorTarget">
            <summary>
            The target value of the linear axis Y motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearYAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearYAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxis">
            <summary>
            Linear Z-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisLimit">
            <summary>
            The limits of the linear axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisFriction">
            <summary>
            The friction of linear axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotor">
            <summary>
            The motor mode of linear axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorLimit">
             <summary>
            Force range to apply in case of a linear constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorTarget">
            <summary>
            The target value of the linear axis Z motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.LinearZAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.LinearZAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxis">
            <summary>
            Angular X-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisLimit">
            <summary>
            The limits of the angular axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisFriction">
            <summary>
            The friction of angular axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotor">
            <summary>
            The motor mode of angular axis X.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorLimit">
             <summary>
            Force range to apply in case of a angular constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorTarget">
            <summary>
            The target value of the angular axis X motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularXAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularXAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxis">
            <summary>
            Angular Y-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisLimit">
            <summary>
            The limits of the angular axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisFriction">
            <summary>
            The friction of angular axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotor">
            <summary>
            The motor mode of angular axis Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorLimit">
             <summary>
            Force range to apply in case of a angular constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorTarget">
            <summary>
            The target value of the angular axis Y motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularYAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularYAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxis">
            <summary>
            Angular Z-axis constraint mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisLimit">
            <summary>
            The limits of the angular axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisFriction">
            <summary>
            The friction of angular axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotor">
            <summary>
            The motor mode of angular axis Z.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisMotorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorFrequency">
            <summary>
            Oscillation frequency when solving position target (Hz). Should be in the range (0, 0.5 * simulation frequency]. When simulating at 60 Hz, 20 is a good value for a strong motor. Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisMotorFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorDamping">
            <summary>
            Damping when solving position target (0 = minimal damping, 1 = critical damping). Only used for position motors.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisMotorDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorLimit">
             <summary>
            Force range to apply in case of a angular constraint (N). Usually this is -mMaxForceLimit unless you want a motor that can e.g. push but not pull. Not used when motor is an angular motor.
             </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisMotorLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorTarget">
            <summary>
            The target value of the angular axis Z motor. It is a velocity or a position depending the mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Constraint_SixDOF.AngularZAxisMotorTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Constraint_SixDOF.AngularZAxisMotorTarget"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.PhysicalBody">
            <summary>
            Base class for rigid and soft body components.
            </summary>
        </member>
        <member name="T:NeoAxis.PhysicalMaterial">
            <summary>
            Specifies a physical material that defines the response of a physical object when interacting with the world.
            </summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.FrictionMode">
            <summary>
            The type of friction applied on the physical body.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.FrictionModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.FrictionMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.Friction">
            <summary>
            The amount of friction applied on physical body.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.FrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.Friction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.AnisotropicFriction">
            <summary>
            The amount of directional friction applied on physical body.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.AnisotropicFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.AnisotropicFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.SpinningFriction">
            <summary>
            The amount friction applied when physical body is spinning.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.SpinningFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.SpinningFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.RollingFriction">
            <summary>
            The amount friction applied when physical body is rolling.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.RollingFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.RollingFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.PhysicalMaterial.RigidRestitution">
            <summary>
            The ratio of the final to initial relative velocity of the rigid body after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.PhysicalMaterial.RigidRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.PhysicalMaterial.RigidRestitution"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.PhysicsAxisMode">
            <summary>
            The list of modes of physical object's axis.
            </summary>
        </member>
        <member name="T:NeoAxis.PhysicsRayTestItem">
            <summary>
            The data to perform a search query of physical objects by ray.
            </summary>
        </member>
        <member name="T:NeoAxis.PhysicsRayTestItem.ResultItem">
            <summary>
            Represents a result item for <see cref="T:NeoAxis.PhysicsRayTestItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.PhysicsVolumeTestItem">
            <summary>
            The data to perform a search query of physical objects at a specified volume.
            </summary>
        </member>
        <member name="T:NeoAxis.PhysicsVolumeTestItem.ResultItem">
            <summary>
            Represents a result item for <see cref="T:NeoAxis.PhysicsVolumeTestItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.IPhysicalObject">
            <summary>
            An interface for accessing a component of a physical object.
            </summary>
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mMaxInFlightBodyPairs">
            Size of body pairs array, corresponds to the maximum amount of potential body pairs that can be in flight at any time.
            Setting this to a low value will use less memory but slow down simulation as threads may run out of narrow phase work.
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mStepListenersBatchSize">
            How many PhysicsStepListeners to notify in 1 batch
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mStepListenerBatchesPerJob">
            How many step listener batches are needed before spawning another job (set to INT_MAX if no parallelism is desired)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mBaumgarte">
            Baumgarte stabilization factor (how much of the position error to 'fix' in 1 update) (unit: dimensionless, 0 = nothing, 1 = 100%)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mSpeculativeContactDistance">
            Radius around objects inside which speculative contact points will be detected. Note that if this is too big 
            you will get ghost collisions as speculative contacts are based on the closest points during the collision detection 
            step which may not be the actual closest points by the time the two objects hit (unit: meters)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mPenetrationSlop">
            How much bodies are allowed to sink into eachother (unit: meters)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mLinearCastThreshold">
            Fraction of its inner radius a body must move per step to enable casting for the LinearCast motion quality
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mLinearCastMaxPenetration">
            Fraction of its inner radius a body may penetrate another body for the LinearCast motion quality
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mManifoldToleranceSq">
            Max squared distance to use to determine if two points are on the same plane for determining the contact manifold between two shape faces (unit: meter^2)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mMaxPenetrationDistance">
            Maximum distance to correct in a single iteration when solving position constraints (unit: meters)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mBodyPairCacheMaxDeltaPositionSq">
            Maximum relative delta position for body pairs to be able to reuse collision results from last frame (units: meter^2)
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.PhysicsNative.PhysicsSettings2.mBodyPairCacheCosMaxDeltaRotationDiv2" -->
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.PhysicsNative.PhysicsSettings2.mContactNormalCosMaxDeltaRotation" -->
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.PhysicsNative.PhysicsSettings2.mContactPointPreserveLambdaMaxDistSq" -->
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.PhysicsNative.PhysicsSettings2.mNumVelocitySteps" -->
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mNumPositionSteps">
            Number of solver position iterations to run
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mMinVelocityForRestitution">
            Minimal velocity needed before a collision can be elastic (unit: m)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mTimeBeforeSleep">
            Time before object is allowed to go to sleep (unit: seconds)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mPointVelocitySleepThreshold">
            Velocity of points on bounding box of object below which an object can be considered sleeping (unit: m/s)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mDeterministicSimulation">
            By default the simulation is deterministic, it is possible to turn this off by setting this setting to false. This will make the simulation run faster but it will no longer be deterministic.
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mConstraintWarmStart">
            @name These variables are mainly for debugging purposes, they allow turning on/off certain subsystems. You probably want to leave them alone.
            @{
            Whether or not to use warm starting for constraints (initially applying previous frames impulses)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mUseBodyPairContactCache">
            Whether or not to use the body pair cache, which removes the need for narrow phase collision detection when orientation between two bodies didn't change
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mUseManifoldReduction">
            Whether or not to reduce manifolds with similar contact normals into one contact manifold
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mUseLargeIslandSplitter">
            If we split up large islands into smaller parallel batches of work (to improve performance)
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mAllowSleeping">
            If objects can go to sleep or not
        </member>
        <member name="F:NeoAxis.PhysicsNative.PhysicsSettings2.mCheckActiveEdges">
            When false, we prevent collision against non-active (shared) edges. Mainly for debugging the algorithm.
        </member>
        <member name="T:NeoAxis.RigidBody">
            <summary>
            A rigid physical body.
            </summary>
        </member>
        <member name="P:NeoAxis.RigidBody.MotionType">
            <summary>
            The type of motion used.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MotionTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.MotionType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.MotionQuality">
            <summary>
            The method of detecting collisions to solve issues on a high velocity.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MotionQualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.MotionQuality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.Mass">
            <summary>
            The mass of the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.Mass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.CenterOfMassOffset">
            <summary>
            Offset of the center of mass from the automatically calculated value.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.CenterOfMassOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.CenterOfMassOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.GravityFactor">
            <summary>
            The factor of affect global gravity.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.GravityFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.GravityFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.LinearDamping">
            <summary>
            The linear reduction of velocity over time.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.LinearDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.LinearDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.AngularDamping">
            <summary>
            The angular reduction of velocity over time.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.AngularDampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.AngularDamping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.Material">
            <summary>
            The physical material used by the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.MaterialFriction">
            <summary>
            The amount of friction applied on the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MaterialFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.MaterialFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.MaterialRestitution">
            <summary>
            The ratio of the final relative velocity to initial relative velocity of the rigid body after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.MaterialRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.MaterialRestitution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.LinearVelocity">
            <summary>
            The initial linear velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.LinearVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.LinearVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.AngularVelocity">
            <summary>
            The initial angular velocity of the body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.AngularVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.AngularVelocity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.DisplayContacts">
            <summary>
            Whether to display collected collision contacts data.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.DisplayContactsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.DisplayContacts"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.CollisionSound">
            <summary>
            The sound when the body collided with another body.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.CollisionSoundChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.CollisionSound"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RigidBody.CollisionSoundMinSpeedChangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.CollisionSoundMinSpeedChange"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RigidBody.CollisionSoundTimeIntervalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.CollisionSoundTimeInterval"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RigidBody.CollisionDefinitionSettings">
            <summary>
            Saved collision definition calculation settings to use when recalculate.
            </summary>
        </member>
        <member name="E:NeoAxis.RigidBody.CollisionDefinitionSettingsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RigidBody.CollisionDefinitionSettings"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SoftBody">
            <summary>
            Soft physical body.
            </summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Mesh">
            <summary>
            The mesh used by the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.RandomizeConstraints">
            <summary>
            Whether to randomize constraints to reduce solver bias.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.RandomizeConstraintsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.RandomizeConstraints"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.BendingConstraintDistance">
            <summary>
            The distance between two vertices that produce tension on a surface. Greater distance produces softer physical body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.BendingConstraintDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.BendingConstraintDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.ClustersNumber">
            <summary>
            The number of collision clusters generated.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.ClustersNumberChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.ClustersNumber"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SelfCollision">
            <summary>
            Causes the solver to detect and resolve collisions between different parts of the same soft body, such as when a patch of cloth folds back on itself. 
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SelfCollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SelfCollision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Mass">
            <summary>
            The mass of the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Mass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MassFromFaces">
            <summary>
            Whether to use mass scaling factor for each vertex.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MassFromFacesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MassFromFaces"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Damping">
            <summary>
            The damping factor applied to the overall motion of the soft body. Too much damping prevents the soft body from moving.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.DampingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Damping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Pressure">
            <summary>
            Determines how strongly a closed soft body, such as a sphere, maintains its shape and volume. High Pressure values cause the body to expand, while low Pressure values cause it to collapse. 
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.PressureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Pressure"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Drag">
            <summary>
            Controls the amount of drag acting on the soft body as it moves through the air.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.DragChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Drag"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Lift">
            <summary>
            Controls the amount of lift that is generated as the soft body moves through the air.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.LiftChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Lift"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.BodyAeroModel">
            <summary>
            The aero model of the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.AeroModelChanged">
            <summary>Occurs when the <see cref="T:NeoAxis.SoftBody.AeroModel"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.ShapeMatching">
            <summary>
            When activated, the soft body tries to maintain its original shape.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.ShapeMatchingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.ShapeMatching"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.ShapeCoefficient">
            <summary>
            Pose matching coefficient [0,1]. Specifies the degree to which the rigid body attempts to maintain its shape. Higher Shape Coefficient values cause the rigid body to adhere more strictly to its original shape. If the values are too high, the soft body may penetrate or even fall through other objects. 
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.ShapeCoefficientChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.ShapeCoefficient"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.VolumeMatching">
            <summary>
            When on, the soft body tries to maintain its original volume.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.VolumeMatchingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.VolumeMatching"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.VolumeCoefficient">
            <summary>
            Specifies the degree to which the rigid body attempts to maintain its initial volume. The higher Volume Coefficient value, the more the soft body resists changes to its original volume. High Volume Coefficient values can cause the simulation to become unstable. 
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.VolumeCoefficientChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.VolumeCoefficient"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MaxVolumeRatio">
            <summary>
            Max volume ratio for volume-based pose matching.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaxVolumeRatioChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MaxVolumeRatio"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.Material">
            <summary>
            The physical material used by the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MaterialFriction">
            <summary>
            The friction of the physical material.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaterialFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MaterialFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MaterialLinearStiffness">
            <summary>
            The stiffness of the physical material. The stiffness decides how hard the soft body will be during the collision.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaterialLinearStiffnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MaterialLinearStiffness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MaterialAngularStiffness">
            <summary>
            The angular stiffness of the physical material.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaterialAngularStiffnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MaterialAngularStiffness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.MaterialVolumeStiffness">
            <summary>
            The stiffness volume of the physical material.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.MaterialVolumeStiffnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.MaterialVolumeStiffness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.RigidContactHardness">
            <summary>
            The amount of penetration correction applied to contacts with rigid bodies.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.RigidContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.RigidContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftRigidContactHardness">
            <summary>
            Soft vs rigid hardness [0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftRigidContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftRigidContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.KineticContactHardness">
            <summary>
            The amount of penetration correction applied to contacts with static bodies.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.KineticContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.KineticContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftRigidImpulseSplit">
            <summary>
            Soft vs rigid impulse split [0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftRigidImpulseSplitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftRigidImpulseSplit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftSoftImpulseSplit">
            <summary>
            Soft vs soft impulse split [0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftSoftImpulseSplitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftSoftImpulseSplit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftKineticImpulseSplit">
            <summary>
            Soft vs kinetic impulse split [0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftKineticImpulseSplitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftKineticImpulseSplit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftKineticContactHardness">
            <summary>
            Soft vs kinetic hardness[0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftKineticContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftKineticContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftSoftContactHardness">
            <summary>
            Soft vs soft hardness [0,1] (cluster only).
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftSoftContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftSoftContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.SoftContactHardness">
            <summary>
            The amount of penetration correction applied to contacts with other soft bodies.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.SoftContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.SoftContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.AnchorContactHardness">
            <summary>
            The amount of correction is applied to follow anchor constraints.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.AnchorContactHardnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.AnchorContactHardness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.PositionIterations">
            <summary>
            The number of position iterations performed during soft body simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.PositionIterationsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.PositionIterations"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.VelocityIterations">
            <summary>
            The number of velocity iterations performed during soft body simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.VelocityIterationsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.VelocityIterations"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.DriftIterations">
            <summary>
            The number of drift iterations performed during soft body simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.DriftIterationsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.DriftIterations"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.ClusterIterations">
            <summary>
            The number of collision cluster iterations performed during soft body simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.ClusterIterationsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.ClusterIterations"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.CollisionMargin">
            <summary>
            The minimum allowable distance between cloth and collision object.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.CollisionMarginChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.CollisionMargin"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.VelocityCorrectionFactor">
            <summary>
            The amount of velocity correction applied on the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.VelocityCorrectionFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.VelocityCorrectionFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.TimeScale">
            <summary>
            The time scale of the soft body simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.TimeScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.TimeScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.CollisionGroup">
            <summary>
            The collision filter group of the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.CollisionGroupChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.CollisionGroup"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.CollisionMask">
            <summary>
            The collision filter mask of the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.CollisionMaskChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.CollisionMask"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoftBody.LinearVelocity">
            <summary>
            The initial linear velocity of the soft body.
            </summary>
        </member>
        <member name="E:NeoAxis.SoftBody.LinearVelocityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoftBody.LinearVelocity"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ReflectionProbe">
            <summary>
            The component is capturing surroundings of the scene to get reflections and to get ambient lighting data.
            </summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Mode">
            <summary>
            The mode of the reflection probe.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Global">
            <summary>
            Whether to affect all scene instead of sphere volume.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.GlobalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Global"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Cubemap">
            <summary>
            The cubemap texture of reflection data used by the probe.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.CubemapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Cubemap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Rotation">
            <summary>
            The horizontal rotation of the cubemap.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.RotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Rotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Intensity">
            <summary>
            The factor of the probe effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Multiplier">
            <summary>
            A cubemap color multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.MultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Multiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.RealTime">
            <summary>
            Whether to capture and pass the information in real-time.
            </summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Resolution">
            <summary>
            The resolution of the capture.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.ResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Resolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.HighDynamicRange">
            <summary>
            Whether the high dynamic range is enabled. For Auto mode HDR is disabled on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.HighDynamicRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.HighDynamicRange"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.UseRenderTargets">
            <summary>
            Enables using additional render targets during rendering the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.UseRenderTargetsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.UseRenderTargets"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.DeferredShading">
            <summary>
            Enables the deferred shading. Limited devices (mobile) are not support deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.DeferredShadingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.DeferredShading"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.Shadows">
            <summary>
            Whether to visualize shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.ShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.Shadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.TransparentObjects">
            <summary>
            Whether to visualize transparent objects.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.TransparentObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.TransparentObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.AnimatedObjects">
            <summary>
            Whether to visualize meshes with skeleton animation.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.AnimatedObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.AnimatedObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.LightMaxCount">
            <summary>
            The max amount of light sources to draw.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.LightMaxCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.LightMaxCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.LightMasks">
            <summary>
            Whether to prepare and apply light masks.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.LightMasksChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.LightMasks"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.LODScale">
            <summary>
            The distance multiplier when determining the level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.LODScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.LODScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.NearClipPlane">
            <summary>
            The minimum distance of the reflection probe.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.NearClipPlaneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.NearClipPlane"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.FarClipPlane">
            <summary>
            The maximum distance of the reflection probe.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.FarClipPlaneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.FarClipPlane"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.RenderSky">
            <summary>
            Whether to render sky of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.RenderSkyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.RenderSky"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.BlurFactor">
            <summary>
            The amount of blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.AffectLightingMipOffset">
            <summary>
            The mipmap offset when fetching blurred reflection data to calculate ambient environment lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.AffectLightingMipOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.AffectLightingMipOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ReflectionProbe.PositionDependingCamera">
            <summary>
            Whether to position of the object in the scene by tracking camera position.
            </summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.PositionDependingCameraChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.PositionDependingCamera"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ReflectionProbe.PositionDependingCameraOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ReflectionProbe.PositionDependingCameraOffset"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_AmbientOcclusion">
            <summary>
            Ambient occlusion screen effect (ASSAO).
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Quality">
            <summary>
            The quality of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.QualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Quality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.AdaptiveQualityLimit">
            <summary>
            Adaptive quality limitation. Only for highest adaptive mode.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.AdaptiveQualityLimitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.AdaptiveQualityLimit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Radius">
            <summary>
            World (view) space size of the occlusion sphere.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Multiplier">
            <summary>
            Linear multiplier of effect strength.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.MultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Multiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Power">
            <summary>
            Pow modifier of effect strength.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.PowerChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Power"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutFrom">
            <summary>
            Distance from which the effect to start fading out.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutFromChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutFrom"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutTo">
            <summary>
            Distance from which the effect is faded out.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutToChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.FadeOutTo"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrength">
            <summary>
            Used for high-res detail AO using neighboring depth pixels. Adds a lot of detail but also reduces temporal stability (adds aliasing).
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrengthDistance">
            <summary>
            Maximal distance of detail strength effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrengthDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.DetailStrengthDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.BlurAmount">
            <summary>
            Number of edge-sensitive smart blur passes to apply. Quality 0 is an exception with only one 'dumb' blur pass is used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.BlurAmountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.BlurAmount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.Sharpness">
            <summary>
            How much to bleed over edges; 1: not at all, 0.5: half-half; 0.0: completely ignore edges.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.SharpnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.Sharpness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.MaxValue">
            <summary>
            Clamp result value.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.MaxValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.MaxValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_AmbientOcclusion.ShowAO">
            <summary>
            Enables the debug visualization of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_AmbientOcclusion.ShowAOChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_AmbientOcclusion.ShowAO"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Antialiasing">
            <summary>
            Anti-aliasing screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Antialiasing.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Antialiasing.BasicTechnique">
            <summary>
            The basic technique of the antialiasing solution.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.BasicTechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.BasicTechnique"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.DownscaleSamplerMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.DownscaleSamplerMultiplier"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.DownscaleBeforeSceneEffectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.DownscaleBeforeSceneEffects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Antialiasing.AdditionalTechnique">
            <summary>
            The additional technique of the antialiasing solution.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.AdditionalTechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.AdditionalTechnique"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Antialiasing.MotionTechnique">
            <summary>
            The technique to work with moving objects and with moving camera.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.MotionTechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.MotionTechnique"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.AlphaChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.Alpha"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Antialiasing.ColorBoxSigmaChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Antialiasing.ColorBoxSigma"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Bloom">
            <summary>
            Screen effect for adding a bloom of the image. 
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.BrightThreshold">
            <summary>
            The brightness threshold.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.BrightThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.BrightThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.Scale">
            <summary>
            The scale of the bloom effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.ScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.Scale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.BlurFactor">
            <summary>
            The amount of the blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.BlurDownscalingMode">
            <summary>
            The blur downscaling mode used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.BlurDownscalingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.BlurDownscalingMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Bloom.BlurDownscalingValue">
            <summary>
            The level of blur texture downscaling.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Bloom.BlurDownscalingValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Bloom.BlurDownscalingValue"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_BokehBlur">
            <summary>
            Bokeh blur screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_BokehBlur.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_BokehBlur.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_BokehBlur.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_BokehBlur.Radius">
            <summary>
            The radius of the blur.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_BokehBlur.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_BokehBlur.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_BokehBlur.Power">
            <summary>
            The power of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_BokehBlur.PowerChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_BokehBlur.Power"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_BokehBlur.Pattern">
            <summary>
            The sampling pattern.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_BokehBlur.PatternChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_BokehBlur.Pattern"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_BokehBlur.Samples">
            <summary>
            The amount of samplers.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_BokehBlur.SamplesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_BokehBlur.Samples"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ChromaticAberration">
            <summary>
            Chromatic aberration screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ChromaticAberration.Amount">
            <summary>
            The strength of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ChromaticAberration.AmountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ChromaticAberration.Amount"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ColorGrading">
            <summary>
            Screen effect of adding the color correction to the image.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ColorGrading.LookupTable">
            <summary>
            The lookup texture (LUT) used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ColorGrading.LookupTableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ColorGrading.LookupTable"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ColorGrading.Multiply">
            <summary>
            The color multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ColorGrading.MultiplyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ColorGrading.Multiply"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ColorGrading.Add">
            <summary>
            The color addition.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ColorGrading.AddChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ColorGrading.Add"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_DepthOfField">
            <summary>
            Depth of field screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.FocalDistance">
            <summary>
            The distance at which to focus to achieve the maximum effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.FocalDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.FocalDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.FocalSize">
            <summary>
            The focal size.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.FocalSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.FocalSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.BackgroundTransitionLength">
            <summary>
            Distance beyound 1.5 focal lengths over which objects will become completely blured.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.BackgroundTransitionLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.BackgroundTransitionLength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.BlurForeground">
            <summary>
            Whether the foreground is blured.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.BlurForegroundChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.BlurForeground"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_DepthOfField.ForegroundTransitionLength">
            <summary>
            Distance before 0.5 focal lengths over which objects will become completely sharp.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_DepthOfField.ForegroundTransitionLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_DepthOfField.ForegroundTransitionLength"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_EdgeDetection">
            <summary>
            Edge detection screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.DepthThreshold">
            <summary>
            The threshold value when determining edges by distance.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.DepthThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.DepthThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.NormalsThreshold">
            <summary>
            The threshold value when determining edges by normals.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.NormalsThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.NormalsThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.EdgeColor">
            <summary>
            The color of edges.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.EdgeColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.EdgeColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.Thickness">
            <summary>
            The thickness of edges.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_EdgeDetection.MaxDistance">
            <summary>
            The maximum visible distance.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_EdgeDetection.MaxDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_EdgeDetection.MaxDistance"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_GaussianBlur">
            <summary>
            Gaussian blur screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_GaussianBlur.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_GaussianBlur.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_GaussianBlur.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_GaussianBlur.BlurFactor">
            <summary>
            The amount of blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_GaussianBlur.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_GaussianBlur.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_GaussianBlur.DownscalingMode">
            <summary>
            The image downscaling mode used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_GaussianBlur.DownscalingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_GaussianBlur.DownscalingMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_GaussianBlur.DownscalingValue">
            <summary>
            The level of downscaling applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_GaussianBlur.DownscalingValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_GaussianBlur.DownscalingValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_GaussianBlur.StandardDeviation">
            <summary>
            The standard deviation parameter of the gaussian equation.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_GaussianBlur.StandardDeviationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_GaussianBlur.StandardDeviation"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Grayscale">
            <summary>
            Screen effect that turns the image into the grayscale.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_IndirectLighting">
            <summary>
            Indirect lighting screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Quality">
            <summary>
            The quality of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.QualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Quality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Resolution">
            <summary>
            Using lower resolution light buffer can improve performance, but can accentuate aliasing.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Resolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Multiplier">
            <summary>
            Linear multiplier of effect strength.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.MultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Multiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Reduction">
            <summary>
            The linear reduction of final lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ReductionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Reduction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Normals">
            <summary>
            Whether to apply normals data on the screen for blurring.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.NormalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Normals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Radius">
            <summary>
            Effective sampling radius in world space. The effect can only have influence within that radius.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Radius"/> property value changes.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NeoAxis.RenderingEffect_IndirectLighting.ExpStart" -->
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ExpStartChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.ExpStart"/> property value changes.</summary>
        </member>
        <!-- Badly formed XML comment ignored for member "P:NeoAxis.RenderingEffect_IndirectLighting.ExpFactor" -->
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ExpFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.ExpFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.SkyLighting">
            <summary>
            A factor of adding sky lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.SkyLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.SkyLighting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Thickness">
            <summary>
            Constant thickness value of objects on the screen in world space. Is used to ignore occlusion past that thickness level, as if light can travel behind the object.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Thickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.Falloff">
            <summary>
            Occlusion falloff relative to distance.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.FalloffChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.Falloff"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.BlurFactor">
            <summary>
            The amount of the blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingMode">
            <summary>
            The blur downscaling mode used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingValue">
            <summary>
            The level of blur texture downscaling.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.BlurDownscalingValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_IndirectLighting.ShowIndirectLighting">
            <summary>
            Enables the debug visualization of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_IndirectLighting.ShowIndirectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_IndirectLighting.ShowIndirectLighting"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_LensEffects">
            <summary>
            Screen effect for rendering lens effects of the camera (lens flares).
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LensEffects.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LensEffects.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LensEffects.Intensity"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LensEffects.CheckVisibilityMethodChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LensEffects.CheckVisibilityMethod"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LensEffects.FadeInSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LensEffects.FadeInSpeed"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LensEffects.FadeOutSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LensEffects.FadeOutSpeed"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_LightShafts">
            <summary>
            Screen effect for adding light shafts (god rays).
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Color">
            <summary>
            The color of the rays.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Decay">
            <summary>
            The amount of falloff decay applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.DecayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Decay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Density">
            <summary>
            The scattering medium density.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.DensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Density"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.BlurFactor">
            <summary>
            The amount of the blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Resolution">
            <summary>
            Specifies an effect quality.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.ResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Resolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.Light">
            <summary>
            Specifies a light source of the light shafts. When is null the first directional light of the scene is used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.LightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.Light"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_LightShafts.OverrideDirection">
            <summary>
            Override rays direction.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_LightShafts.OverrideDirectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_LightShafts.OverrideDirection"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_MicroparticlesInAir">
            <summary>
            An screen effect for visualization microparticles in air.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Intensity"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Color"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.MultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Multiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Shadows">
            <summary>
            Whether to apply shadowing to the calculation of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.ShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Shadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Quality">
            <summary>
            The quality of the effect is used to calibrate rendering performance.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.QualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Quality"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.RayStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.RaySteps"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.RayStepAddChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.RayStepAdd"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.RayStepMultiplyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.RayStepMultiply"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.DepthThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.DepthThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Blur">
            <summary>
            The strength of blur post effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.BlurChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.Blur"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MicroparticlesInAir.DebugEdges">
            <summary>
            Whether to visualize edge detection.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.DebugEdgesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.DebugEdges"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MicroparticlesInAir.DebugEffectChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MicroparticlesInAir.DebugEffect"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_MotionBlur">
            <summary>
            Per-object motion blur.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MotionBlur.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MotionBlur.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MotionBlur.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MotionBlur.Multiplier">
            <summary>
            Output velocity multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MotionBlur.MultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MotionBlur.Multiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_MotionBlur.DepthThreshold">
            <summary>
            Depth boundary value for detecting the edge of an object.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MotionBlur.DepthThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MotionBlur.DepthThreshold"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_MotionBlur.VelocityThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_MotionBlur.VelocityThreshold"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Noise">
            <summary>
            Rendering effect to show random noise on the screen.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Noise.Multiply">
            <summary>
            The range of multiply blend mode. 
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Noise.MultiplyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Noise.Multiply"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Noise.Add">
            <summary>
            The range of addition blend mode. 
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Noise.AddChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Noise.Add"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Noise.SeedRandom">
            <summary>
            When active random noise will be generated.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Noise.SeedRandomChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Noise.SeedRandom"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Outline">
            <summary>
            Outline screen effect for objects.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Outline.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Outline.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Outline.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Outline.Scale">
            <summary>
            Size multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Outline.ScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Outline.Scale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Outline.GroupsInterval">
            <summary>
            The interval of affected groups of objects to use by the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Outline.GroupsIntervalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Outline.GroupsInterval"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Pixelate">
            <summary>
            Pixelization screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Pixelate.Cells">
            <summary>
            The number of cells vertically.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Pixelate.CellsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Pixelate.Cells"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Posterize">
            <summary>
            Posterization screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Posterize.Levels">
            <summary>
            The number of levels.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Posterize.LevelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Posterize.Levels"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Precipitation">
            <summary>
            Screen effect of adding the rain.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Precipitation.GetSettingsFromScene">
            <summary>
            Whether to get intensity of the effect from Scene.PrecipitationFalling property.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Precipitation.GetSettingsFromSceneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Precipitation.GetSettingsFromScene"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Precipitation.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Precipitation.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Precipitation.Intensity"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_RadialBlur">
            <summary>
            Radial blur screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_RadialBlur.Center">
            <summary>
            The center of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_RadialBlur.CenterChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_RadialBlur.Center"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_RadialBlur.BlurFactor">
            <summary>
            The amount of blur applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_RadialBlur.BlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_RadialBlur.BlurFactor"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Reflection">
            <summary>
            Screen space reflections effect. It works only with deferred geometry data. May be combined with other reflection techniques.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.Resolution">
            <summary>
            Using lower resolution light buffer can improve performance, but can accentuate aliasing.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.ResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.Resolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.Shadows">
            <summary>
            Whether to calculate shadowing for reflections.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.ShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.Shadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.MaxDistance">
            <summary>
            The maximum distance from the camera where the effect working.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.MaxDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.MaxDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.StepScaleStart">
            <summary>
            Initial scale of step size for raymarching.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.StepScaleStartChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.StepScaleStart"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.StepScaleThreshold">
            <summary>
            The threshold value to go smaller step for raymarching.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.StepScaleThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.StepScaleThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.PenetrationThreshold">
            <summary>
            Average thickness of the world objects for raymarching.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.PenetrationThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.PenetrationThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.FillGaps">
            <summary>
            Whether to fill invalid pixels with near valid data to fix linear interpolation issues.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.FillGapsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.FillGaps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.FillGapsRadius">
            <summary>
            The radius in pixels to find valid pixels.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.FillGapsRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.FillGapsRadius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.Denoise">
            <summary>
            Whether to do denoising of the reflection texture.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.DenoiseChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.Denoise"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.DenoiseSigma">
            <summary>
            Sigma standard deviation of the denoise filter.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.DenoiseSigmaChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.DenoiseSigma"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.DenoiseSigmaCoefficient">
            <summary>
            Sigma coefficient of the denoise filter.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.DenoiseSigmaCoefficientChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.DenoiseSigmaCoefficient"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.DenoiseEdgeSharpening">
            <summary>
            Edge sharpening threshold of the denoise filter.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.DenoiseEdgeSharpeningChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.DenoiseEdgeSharpening"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMin">
            <summary>
            The power of blur when roughness is zero.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMinChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMin"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMiddle">
            <summary>
            Then power of blur when roughness is 0.5.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMiddleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMiddle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMax">
            <summary>
            Maximal power of blur.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMaxChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.BlurRoughnessMax"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.BlurDownscalingMode">
            <summary>
            The blur downscaling mode used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.BlurDownscalingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.BlurDownscalingMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.BlurDownscalingValue">
            <summary>
            The level of blur texture downscaling.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.BlurDownscalingValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.BlurDownscalingValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Reflection.DebugMode">
            <summary>
            The debug visualization mode.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Reflection.DebugModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Reflection.DebugMode"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ResolutionUpscale">
            <summary>
            The effect for adjusting the resolution upscale.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ResolutionUpscale.Mode">
            <summary>
            The quality mode of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ResolutionUpscale.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ResolutionUpscale.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ResolutionUpscale.Technique">
            <summary>
            The technique of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ResolutionUpscale.TechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ResolutionUpscale.Technique"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Sharpen">
            <summary>
            A screen effect for adding sharpness to the image.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Sharpen.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Sharpen.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Sharpen.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Sharpen.Strength">
            <summary>
            The strength of the sharpness.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Sharpen.StrengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Sharpen.Strength"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ShowRenderTarget">
            <summary>
            Screen effect that shows internal render targets.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ShowRenderTarget.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ShowRenderTarget.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ShowRenderTarget.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ShowRenderTarget.Texture">
            <summary>
            The texture type used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ShowRenderTarget.TextureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ShowRenderTarget.Texture"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ShowRenderTarget.DepthMultiplier">
            <summary>
            The depth multiplier applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ShowRenderTarget.DepthMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ShowRenderTarget.DepthMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ShowRenderTarget.MotionMultiplier">
            <summary>
            The motion vector multiplier applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ShowRenderTarget.MotionMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ShowRenderTarget.MotionMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ShowRenderTarget.ShadowMultiplier">
            <summary>
            The shadow multiplier applied.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ShowRenderTarget.ShadowMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ShowRenderTarget.ShadowMultiplier"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ToHDR">
            <summary>
            Screen effect for converting scene to high dynamic range.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ToLDR">
            <summary>
            Screen effect for converting scene to low dynamic range.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_ToneMapping">
            <summary>
            Tone mapping screen effect.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ToneMapping.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ToneMapping.GammaInput">
            <summary>
            The input gamma of the tone mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.GammaInputChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.GammaInput"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ToneMapping.Exposure">
            <summary>
            The level of exposure.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.ExposureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.Exposure"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ToneMapping.Method">
            <summary>
            The type of the tone mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.MethodChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.Method"/> property value changes.</summary>
        </member>
        <member name="F:NeoAxis.RenderingEffect_ToneMapping.customCodeDefault">
            <summary>
            The shader code of the custom method.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.CustomCodeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.CustomCode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_ToneMapping.GammaOutput">
            <summary>
            The output gamma of the tone mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_ToneMapping.GammaOutputChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_ToneMapping.GammaOutput"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Vignetting">
            <summary>
            Rendering effect to show darkened corners on the screen.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Vignetting.Color">
            <summary>
            The color of the darkened corners.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Vignetting.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Vignetting.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Vignetting.Radius">
            <summary>
            The radius of the vignetting.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Vignetting.RadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Vignetting.Radius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Vignetting.NoiseRange">
            <summary>
            The range of noise.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Vignetting.NoiseRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Vignetting.NoiseRange"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Fog">
            <summary>
            The fog effect in the scene.
            </summary>
        </member>
        <member name="F:NeoAxis.Fog.Modes.Exp">
            <summary>Fog density increases exponentially from the camera (fog = 1/e^(distance * density)).</summary>
        </member>
        <member name="F:NeoAxis.Fog.Modes.Exp2">
            <summary>Fog density increases at the square of <b>Exp</b>, i.e. even quicker (fog = 1/e^(distance * density)^2).</summary>
        </member>
        <member name="P:NeoAxis.Fog.Mode">
            <summary>
            The mode of the fog.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.Color">
            <summary>
            The color of the fog.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.StartDistance">
            <summary>
            The distance at which the fog will show up.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.StartDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.StartDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.Density">
            <summary>
            The density of the fog.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.DensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.Density"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.Height">
            <summary>
            The height of the fog.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.HeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.Height"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.HeightScale">
            <summary>
            The scale of the fog.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.HeightScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.HeightScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Fog.AffectBackground">
            <summary>
            Specifies how much fog affects sky or background color.
            </summary>
        </member>
        <member name="E:NeoAxis.Fog.AffectBackgroundChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Fog.AffectBackground"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.LensFlare">
            <summary>
            A definition of lens flare object.
            </summary>
        </member>
        <member name="P:NeoAxis.LensFlare.Image">
            <summary>
            The image of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlare.ImageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.Image"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.LensFlare.Blending">
            <summary>
            The method of drawing the image of the flare on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlare.BlendingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.Blending"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.LensFlare.Color">
            <summary>
            The color of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlare.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.LensFlare.Position">
            <summary>
            The position of the flare.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlare.PositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.Position"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.LensFlare.Size">
            <summary>
            The size of the flare. It is indicated as a ratio of screen size vertically.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlare.SizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.Size"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.LensFlare.SizeFadeByDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.SizeFadeByDistance"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.LensFlare.DepthCheckOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlare.DepthCheckOffset"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.LensFlares">
            <summary>
            Lens flares effect of the light. The component must be a child of Light.
            </summary>
        </member>
        <member name="P:NeoAxis.LensFlares.Color">
            <summary>
            The color multiplier of the flares.
            </summary>
        </member>
        <member name="E:NeoAxis.LensFlares.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.LensFlares.Color"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ObjectSpecialRenderingEffect_Outline.Group">
            <summary>
            The index of the group to draw objects of the same group together.
            </summary>
        </member>
        <member name="P:NeoAxis.ObjectSpecialRenderingEffect_Outline.Scale">
            <summary>
            The size multiplier of the effect.
            </summary>
        </member>
        <member name="P:NeoAxis.ObjectSpecialRenderingEffect_Outline.Color">
            <summary>
            The color of the effect.
            </summary>
        </member>
        <member name="P:NeoAxis.ObjectSpecialRenderingEffect_Outline.AnyData">
            <summary>
            Any data provided by the user. The value is provided to shaders and can be useful for making changes to the Outline effect.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic">
            <summary>
            The basic rendering pipeline.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugMode">
            <summary>
            Specifies the debug mode.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.IndirectLighting">
            <summary>
            Whether to calculate the indirect lighting. Alternatively, you can use screen space ambient occlusion by using AmbientOcclusion effect component.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.IndirectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.IndirectLighting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.Reflection">
            <summary>
            Whether to calculate reflections. Alternatively, you can use screen space reflections by using Reflection effect component.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ReflectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.Reflection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.GIDistance">
            <summary>
            Maximum distance of the global illumination.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GIDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GIDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.GIGridSize">
            <summary>
            The size of the 3D grid for the global illumination calculation.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GIGridSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GIGridSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.GICascades">
            <summary>
            The number of cascades used for the global illumination calculation.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GICascadesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GICascades"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.GICascadeDistribution">
            <summary>
            Defines grid cascades distribution of the global illumination.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GICascadeDistributionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GICascadeDistribution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.GICascadeVisualize">
            <summary>
            Whether to visualize grid cascades of the global illumination.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GICascadeVisualizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GICascadeVisualize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.GIVoxelizationConservativeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.GIVoxelizationConservative"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.Shadows">
            <summary>
            Whether shadows are enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.Shadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowIntensity">
            <summary>
            The intensity of the shadows. The Light component also has a Shadow Intensity parameter to configure per light.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowIntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowIntensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalDistance">
            <summary>
            Rendering range of the shadows for Directional lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightMaxCount">
            <summary>
            Maximum number of Directional Lights that can cast shadows. The current pipeline is not support more than 1 directional light shadow casters.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightTextureSize">
            <summary>
            The size of a shadow texture for Directional Lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightTextureSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightTextureSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascades">
            <summary>
            The number of cascades used for Directional Lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascades"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeDistribution">
            <summary>
            Defines shadow cascades distribution for Directional Lights. The distance of the current cascade, multiplied by this value gives distance to the next cascade.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeDistributionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeDistribution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeVisualize">
            <summary>
            Whether to visualize shadow cascades for Directional Lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeVisualizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightCascadeVisualize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightExtrusionDistance">
            <summary>
            Maximum distance to camera where shadows from Directional Lights will be cast.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightExtrusionDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowDirectionalLightExtrusionDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowPointSpotlightDistance">
            <summary>
            Rendering range of the shadows for Point and Spotlights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowPointSpotlightDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowPointSpotlightDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowPointLightMaxCount">
            <summary>
            Maximum number of point lights, that can cast shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowPointLightMaxCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowPointLightMaxCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowPointLightTextureSize">
            <summary>
            The size of a shadow texture for point lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowPointLightTextureSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowPointLightTextureSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightMaxCount">
            <summary>
            Maximum number of spotlights, that can cast shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightMaxCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightMaxCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightTextureSize">
            <summary>
            The size of shadow texture for spotlights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightTextureSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowSpotlightTextureSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowObjectVisibilityDistanceFactor">
            <summary>
            The multiplier of shadow visibility distance depending of object visibility distance.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowObjectVisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowObjectVisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowMaterialOpacityMaskThresholdFactor">
            <summary>
            The multiplier of OpacityMaskThreshold parameter of materials when user for shadow caster generation.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowMaterialOpacityMaskThresholdFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowMaterialOpacityMaskThresholdFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ShadowStatic">
            <summary>
            Whether to enable the static shadows optimization. Use Shadow Static property of the Light component to configure static shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ShadowStaticChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ShadowStatic"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.LightMaxDistance">
            <summary>
            Maximal vilibility distance for spotlight and point lights.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.LightMaxDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.LightMaxDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.LightMaxCount">
            <summary>
            The max amount of light sources to draw.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.LightMaxCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.LightMaxCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.LightGrid">
            <summary>
            Whether to use an acceleration grid for lights rendering optimization. The grid is disabled on limited devices in Auto mode.
            </summary>
            <remarks>You can visualize the light grid by means Show Render Target screen effect, select Texture = LightGrid.</remarks>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.LightGridChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.LightGrid"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.LightGridResolution">
            <summary>
            The size of light grid. The light grid is a 3D texture with sizes LightGridResolution * LightGridResolution * 8 * sizeof( Vector4F ).
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.LightGridResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.LightGridResolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DisplacementMappingMaxSteps">
            <summary>
            The maximal number of iterations for the displacement mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DisplacementMappingMaxStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DisplacementMappingMaxSteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DisplacementMappingScale">
            <summary>
            The height multiplier for the displacement mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DisplacementMappingScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DisplacementMappingScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.TessellationQuality">
            <summary>
            The quality multiplier of the tessellation.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.TessellationQualityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.TessellationQuality"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.RemoveTextureTiling">
            <summary>
            The intesity of the technique to remove texture tiling.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.RemoveTextureTilingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.RemoveTextureTiling"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.ProvideColorDepthTextureCopy">
            <summary>
            Whether to provide color and depth data for transparent materials. It need to work for soft particles and refraction effects. When Auto mode is enabled, the mode is disabled on mobile devices.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.ProvideColorDepthTextureCopyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.ProvideColorDepthTextureCopy"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferScene">
            <summary>
            Whether to use the software occlusion culling buffer to skip invisible objects on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferSceneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferScene"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferDirectionalLight">
            <summary>
            Whether to use the software occlusion culling buffer to skip invisible objects for directional light shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferDirectionalLightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferDirectionalLight"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferSize">
            <summary>
            The height of the occlusion culling buffer in pixels.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullNodes">
            <summary>
            Whether to cull octree nodes by the occlusion culling buffer.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullNodesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullNodes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullObjects">
            <summary>
            Whether to cull scene objects by the occlusion culling buffer.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferCullObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferMaxOccluders">
            <summary>
            The maximal amount of occluders can be rendered for the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferMaxOccludersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.OcclusionCullingBufferMaxOccluders"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.SectorsByDistance">
            <summary>
            The amount of groups of objects sorted by the distance. The groups are rendered from near to far by the distance to the camera. The settings mainly helps to calibrate the GPU instancing.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.SectorsByDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.SectorsByDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawShadows">
            <summary>
            Whether to display shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawDeferredPass">
            <summary>
            Whether to display objects that are rendered with deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawDeferredPassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawDeferredPass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardOpaquePass">
            <summary>
            Whether to display opaque objects, that are drawn with forward rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardOpaquePassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardOpaquePass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardTransparentPass">
            <summary>
            Whether to display transparent objects, that are drawn with forward rendering.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardTransparentPassChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawForwardTransparentPass"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawLayers">
            <summary>
            Whether to display layers.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawLayersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawLayers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawDecals">
            <summary>
            Whether to display decals.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawSimple3DRenderer">
            <summary>
            Whether to display various auxiliary geometry that is drawn with Simple 3D Renderer.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawSimple3DRendererChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawSimple3DRenderer"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawUI">
            <summary>
            Whether to display UI elements.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawUIChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawUI"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawMeshes">
            <summary>
            Whether to visualize triangle meshes.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawMeshesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawMeshes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawVoxels">
            <summary>
            Whether to visualize voxelized mesh geometry.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawVoxelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawVoxels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawBatchedData">
            <summary>
            Whether to visualize batched data.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawBatchedDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawBatchedData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDrawNotBatchedData">
            <summary>
            Whether to visualize not batched data.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDrawNotBatchedDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDrawNotBatchedData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugDirectLighting">
            <summary>
            Whether to add direct lighting to output image.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugDirectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugDirectLighting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline_Basic.DebugIndirectLighting">
            <summary>
            Whether to add indirect lighting to output image.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline_Basic.DebugIndirectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline_Basic.DebugIndirectLighting"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.FrameData">
            <summary>
            Represents a data for rendering frame.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.FrameData.ObjectInSpaceItem">
            <summary>
            Represents an object in space data of <see cref="T:NeoAxis.RenderingPipeline_Basic.FrameData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.FrameData.MeshItem">
            <summary>
            Represents mesh data of <see cref="T:NeoAxis.RenderingPipeline_Basic.FrameData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.FrameData.BillboardItem">
            <summary>
            Represents billboard data of <see cref="T:NeoAxis.RenderingPipeline_Basic.FrameData"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.LightItem">
            <summary>
            Represents a calculated data of a light during scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.LightItem.LightDataFragmentMultiLight">
            <summary>
            Represents data of light for a fragment shader.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.ReflectionProbeItem">
            <summary>
            Represents a calculated data of a reflection probe during scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.DecalItem">
            <summary>
            Represents calculated data of a decal during scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline_Basic.FogDefaultUniform">
            <summary>
            Represents default fog data for a shader.
            </summary>
        </member>
        <member name="M:NeoAxis.RenderingPipeline_Basic.SetFogExtension(System.Int32,System.String,NeoAxis.RenderingPipeline_Basic.FogExtensionGetUniformDataDelegate)">
            <summary>
            Need call before engine initialization from AssemblyRegistration class.
            </summary>
            <param name="shaderUniformVec4Count"></param>
            <param name="shaderCode"></param>
            <param name="getUniformData"></param>
        </member>
        <member name="T:NeoAxis.RenderingEffect">
            <summary>
            Base class of all rendering effects.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect.DefaultOrderOfEffectAttribute">
            <summary>
            Attribute to configure default order of rendering effects.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect.CompiledData">
            <summary>
            Represents a precalculated data of <see cref="T:NeoAxis.RenderingEffect"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Script">
            <summary>
            The component for creation custom fullscreen rendering effects.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Script.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Script.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Script.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Script.ShaderFile">
            <summary>
            The shader associated with the effect. You can script via Color propery or completely replace a shader file of the effect with another via this property.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Script.ShaderFileChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Script.ShaderFile"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Script.Color">
            <summary>
            Resulting color of the effect. You can script via Color propery or completely replace a shader file.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Script.ColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Script.Color"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Script.CompiledDataCodeGenerated">
            <summary>
            Represents a precalculated data of <see cref="T:NeoAxis.RenderingEffect_Script"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Simple">
            <summary>
            Base class of simple rendering effects.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Simple.Intensity">
            <summary>
            The intensity of the effect.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Simple.IntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Simple.Intensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingEffect_Simple.ShaderFile">
            <summary>
            The shader associated with the effect. You can replace shader file of the effect with another via this property.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingEffect_Simple.ShaderFileChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingEffect_Simple.ShaderFile"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingEffect_Simple.CompiledDataSimple">
            <summary>
            Represents a precalculated data of <see cref="T:NeoAxis.RenderingEffect_Simple"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline">
            <summary>
            The rendering pipeline of the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.DeferredShading">
            <summary>
            Enables the deferred shading. Limited devices (mobile) are not support deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.DeferredShadingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.DeferredShading"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.HighDynamicRange">
            <summary>
            Enables the high dynamic range rendering. When Auto mode is enabled, HDR is disabled for limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.HighDynamicRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.HighDynamicRange"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.UseRenderTargets">
            <summary>
            Enables using additional render targets during rendering the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.UseRenderTargetsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.UseRenderTargets"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.UseMultiRenderTargets">
            <summary>
            Enables using multi render targets during rendering the frame. It is enabled by default. MRT is not supported on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.UseMultiRenderTargetsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.UseMultiRenderTargets"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.SimpleGeometryAntialiasing">
            <summary>
            Enables antialising for simple geometry rendering. When Auto mode is enabled, antialiasing is disabled for limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.SimpleGeometryAntialiasingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.SimpleGeometryAntialiasing"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.Instancing">
            <summary>
            Whether to enable GPU instancing to reduce the number of draw calls.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.InstancingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.Instancing"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.InstancingMaxCount">
            <summary>
            The maximum size of instancing buffer.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.InstancingMaxCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.InstancingMaxCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.LODScale">
            <summary>
            The distance multiplier when determining the level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.LODScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.LODScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.LODRange">
            <summary>
            The minimum and maximum levels of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.LODRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.LODRange"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.LODScaleShadows">
            <summary>
            The multiplier when determining the level of detail for shadows. Set 100 or more to always use the best LOD for shadows.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.LODScaleShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.LODScaleShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderingPipeline.MinimumVisibleSizeOfObjects">
            <summary>
            The minimum visible size of object in pixels.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingPipeline.MinimumVisibleSizeOfObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderingPipeline.MinimumVisibleSizeOfObjects"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.ShadowCasterData">
            <summary>
            Represents a list of material passes for shadow caster.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData">
            <summary>
            Prepared data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.MeshItem">
            <summary>
            Prepared mesh item data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.MeshItem.AnimationDataClass">
            <summary>
            Prepared animation data of mesh for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.MeshDataRenderOperation">
            <summary>
            Prepared rendering operation data of mesh for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.IMeshDataLODLevel">
            <summary>
            Prepared rendering LOD data of mesh for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.IMeshData">
            <summary>
            Prepared mesh data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.BillboardItem">
            <summary>
            Prepared billboard item data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.LightItem">
            <summary>
            Prepared light item data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.ReflectionProbeItem">
            <summary>
            Prepared reflection probe item data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.DecalItem">
            <summary>
            Prepared decal item data for scene rendering.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.ObjectInstanceData">
            <summary>
            Specifies instancing data of the object.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.RenderSceneData.LayerItem">
            <summary>
            Specifies data of the layer.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.EnvironmentTextureData">
            <summary>
            Represents environment texture data.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingPipeline.EnvironmentIrradianceData">
            <summary>
            Represents environment irradiance data.
            </summary>
        </member>
        <member name="T:NeoAxis.Sky">
            <summary>
            A basic sky component in the engine.
            </summary>
        </member>
        <member name="P:NeoAxis.Sky.Mode">
            <summary>
            The way to visualize sky.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.MixedModeProceduralFactor">
            <summary>
            The mixing factor for Mixed mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.MixedModeProceduralFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.MixedModeProceduralFactor"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralAtmosphereChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralAtmosphere"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralLuminanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralLuminance"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralApplySunPowerChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralApplySunPower"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralTurbidityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralTurbidity"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralSunSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralSunSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralSunBloomChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralSunBloom"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralExpositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralExposition"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralPreventBandingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralPreventBanding"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.ProceduralResolution">
            <summary>
            The resolution of the texture for the procedural mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralResolution"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralStarSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralStarSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralStarDensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralStarDensity"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralStarClusterStrengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralStarClusterStrength"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralStarClusterSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralStarClusterSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralStarColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralStarColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.ProceduralAurora">
            <summary>
            The factor of the aurora effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralAuroraChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralAurora"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralAuroraFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralAuroraFrequency"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralAuroraColor1Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralAuroraColor1"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Sky.ProceduralAuroraColor2Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.ProceduralAuroraColor2"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.Cubemap">
            <summary>
            The texture used by the skybox.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.CubemapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.Cubemap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.CubemapRotation">
            <summary>
            The horizontal rotation of the skybox.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.CubemapRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.CubemapRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.CubemapStretch">
            <summary>
            Vertical stretch multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.CubemapStretchChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.CubemapStretch"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.CubemapMultiplier">
            <summary>
            A skybox color multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.CubemapMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.CubemapMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.AffectLighting">
            <summary>
            Whether to affect to ambient lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.AffectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.AffectLighting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.LightingCubemap">
            <summary>
            The texture used for the reflection. When it is null, the specified cubemap at Cubemap property is used for lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.LightingCubemapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.LightingCubemap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.LightingCubemapRotation">
            <summary>
            The horizontal rotation of the lighting cubemap.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.LightingCubemapRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.LightingCubemapRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.AlwaysUseProcessedCubemap">
            <summary>
            Whether to use the processed cubemap for the background instead of the original image.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.AlwaysUseProcessedCubemapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.AlwaysUseProcessedCubemap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sky.AllowProcessEnvironmentCubemap">
            <summary>
            Whether to allow processing the specified cubemap to 6-sided cubemap.
            </summary>
        </member>
        <member name="E:NeoAxis.Sky.AllowProcessEnvironmentCubemapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sky.AllowProcessEnvironmentCubemap"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.RenderToFile">
            <summary>
            A tool for rendering a scene to a file. It intended to create screenshots and to create materials.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Mode">
            <summary>
            The type of generated data.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Resolution">
            <summary>
            The size of the resulting image.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.ResolutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Resolution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.OutputFileName">
            <summary>
            The file name to be output.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.OutputFileNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.OutputFileName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Camera">
            <summary>
            The camera for which the display is being performed. If no camera is specified, the editor's current camera is used.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.CameraChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Camera"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.RenderingPipeline">
            <summary>
            The rendering pipeline to override the default pipeline of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.RenderingPipelineChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.RenderingPipeline"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.DisplayDevelopmentData">
            <summary>
            Whether to visualize development data of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.DisplayDevelopmentDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.DisplayDevelopmentData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Template">
            <summary>
            A template for a generated material.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.TemplateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Template"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.FillTransparentPixelsByNearPixels">
            <summary>
            Whether to fill transparent pixels of generated textures by near pixels to make mipmapping work good.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.FillTransparentPixelsByNearPixelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.FillTransparentPixelsByNearPixels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.FramesPerSecond">
            <summary>
            The number of frames per second.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.FramesPerSecondChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.FramesPerSecond"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Length">
            <summary>
            The length of the video in seconds.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.LengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Length"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.Format">
            <summary>
            The compression format of the video.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.FormatChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.Format"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.RenderToFile.FormatFourCC">
            <summary>
            The compression format specified by FourCC.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.FormatFourCCChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.FormatFourCC"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.RenderToFile.CaptureMethodChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.RenderToFile.CaptureMethod"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Scene">
            <summary>
            Represents a scene.
            </summary>
        </member>
        <member name="P:NeoAxis.Scene.RenderingPipeline">
            <summary>
            The rendering pipeline of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.RenderingPipelineChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.RenderingPipeline"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.BackgroundColor">
            <summary>
            The background color of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.BackgroundColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.BackgroundColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.BackgroundColorAffectLighting">
            <summary>
            Whether to affect the background color to ambient lighting.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.BackgroundColorAffectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.BackgroundColorAffectLighting"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.UIScreen">
            <summary>
            The element of the user interface of the scene that will be used in a simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.UIScreenChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.UIScreen"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.Mode">
            <summary>
            The mode of the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.Scene.ScreenOrientation">
            <summary>
            The way to override default screen orientation settings for the scene. The property is used for mobile devices.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.ScreenOrientationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.ScreenOrientation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.CameraEditor">
            <summary>
            The camera used by the editor in 3D mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.CameraEditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.CameraEditor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.CameraEditor2D">
            <summary>
            The camera used by the editor in 2D mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.CameraEditor2DChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.CameraEditor2D"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.CameraEditor2DPositionZ">
            <summary>
            Z position of the camera in 2D mode.
            </summary>
        </member>
        <member name="P:NeoAxis.Scene.CameraDefault">
            <summary>
            The default camera used.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.CameraDefaultChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.CameraDefault"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.Gravity">
            <summary>
            The gravity applied on the physical objects.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.GravityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.Gravity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.WindDirection">
            <summary>
            The direction of the wind.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.WindDirectionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.WindDirection"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.WindSpeed">
            <summary>
            The speed of the wind.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.WindSpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.WindSpeed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMaxBodies">
            <summary>
            The max amount of bodies at the same time in the scene. Reopen the scene to apply changes.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.MaxBodiesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMaxBodies"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsAdvancedSettings">
            <summary>
            Whether to enabled advanced settings of the physics world.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsAdvancedSettingsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsAdvancedSettings"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsDefaultConvexRadius">
            <summary>
            In order to speed up the collision detection system, all convex shapes use a convex radius. The provided shape will first be shrunken by the convex radius and then inflated again by the same amount.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsDefaultConvexRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsDefaultConvexRadius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMaxBodyPairs">
            <summary>
            Maximum amount of body pairs to process (anything else will fall through the world), this number should generally be much higher than the max amount of contact points as there will be lots of bodies close that are not actually touching. Set for to auto mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsMaxBodyPairsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMaxBodyPairs"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMaxContactConstraints">
            <summary>
            Maximum amount of contact constraints to process (anything else will fall through the world). Set 0 for auto mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsMaxContactConstraintsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMaxContactConstraints"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMaxInFlightBodyPairs">
            <summary>
            Size of body pairs array, corresponds to the maximum amount of potential body pairs that can be in flight at any time. Setting this to a low value will use less memory but slow down simulation as threads may run out of narrow phase work. Set 0 for auto mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsMaxInFlightBodyPairsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMaxInFlightBodyPairs"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsCollisionSteps">
            <summary>
            The amount of collision steps for one update.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsCollisionStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsCollisionSteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsStepListenersBatchSize">
            <summary>
            How many PhysicsStepListeners to notify in 1 batch.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsStepListenersBatchSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsStepListenersBatchSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsStepListenerBatchesPerJob">
            <summary>
            How many step listener batches are needed before spawning another job. Set to 2147483647 (INT_MAX) if no parallelism is desired.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsStepListenerBatchesPerJobChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsStepListenerBatchesPerJob"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsBaumgarte">
            <summary>
            Baumgarte stabilization factor (how much of the position error to 'fix' in 1 update) (unit: dimensionless, 0 = nothing, 1 = 100%).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsBaumgarteChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsBaumgarte"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsSpeculativeContactDistance">
            <summary>
            Radius around objects inside which speculative contact points will be detected (unit: meters).
            </summary>
            <remarks>Note that if this is too big you will get ghost collisions as speculative contacts are based on the closest points during the collision detection step which may not be the actual closest points by the time the two objects hit.</remarks>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsSpeculativeContactDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsSpeculativeContactDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsPenetrationSlop">
            <summary>
            How much bodies are allowed to sink into eachother (unit: meters).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsPenetrationSlopChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsPenetrationSlop"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsLinearCastThreshold">
            <summary>
            Fraction of its inner radius a body must move per step to enable casting for the LinearCast motion quality.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsLinearCastThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsLinearCastThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsLinearCastMaxPenetration">
            <summary>
            Fraction of its inner radius a body may penetrate another body for the LinearCast motion quality.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsLinearCastMaxPenetrationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsLinearCastMaxPenetration"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsManifoldTolerance">
            <summary>
            Max squared distance to use to determine if two points are on the same plane for determining the contact manifold between two shape faces (unit: meter).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsManifoldToleranceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsManifoldTolerance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMaxPenetrationDistance">
            <summary>
            Maximum distance to correct in a single iteration when solving position constraints (unit: meters).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsMaxPenetrationDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMaxPenetrationDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsBodyPairCacheMaxDeltaPosition">
            <summary>
            Maximum relative delta position for body pairs to be able to reuse collision results from last frame (units: meter).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsBodyPairCacheMaxDeltaPositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsBodyPairCacheMaxDeltaPosition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsBodyPairCacheCosMaxDeltaRotationDiv2">
            <summary>
            Maximum relative delta orientation for body pairs to be able to reuse collision results from last frame, stored as cos(max angle / 2). Default: cos(2 degrees / 2).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsBodyPairCacheCosMaxDeltaRotationDiv2Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsBodyPairCacheCosMaxDeltaRotationDiv2"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsContactNormalCosMaxDeltaRotation">
            <summary>
            Maximum angle between normals that allows manifolds between different sub shapes of the same body pair to be combined. Default: cos(5 degree).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsContactNormalCosMaxDeltaRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsContactNormalCosMaxDeltaRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsContactPointPreserveLambdaMaxDist">
            <summary>
            Maximum allowed distance between old and new contact point to preserve contact forces for warm start (units: meter).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsContactPointPreserveLambdaMaxDistChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsContactPointPreserveLambdaMaxDist"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsNumVelocitySteps">
            <summary>
            Number of solver velocity iterations to run. Note that this needs to be >= 2 in order for friction to work (friction is applied using the non-penetration impulse from the previous iteration).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsNumVelocityStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsNumVelocitySteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsNumPositionSteps">
            <summary>
            Number of solver position iterations to run.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsNumPositionStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsNumPositionSteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsMinVelocityForRestitution">
            <summary>
            Minimal velocity needed before a collision can be elastic (unit: m).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsMinVelocityForRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsMinVelocityForRestitution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsTimeBeforeSleep">
            <summary>
            Time before object is allowed to go to sleep (unit: seconds).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsTimeBeforeSleepChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsTimeBeforeSleep"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsPointVelocitySleepThreshold">
            <summary>
            Velocity of points on bounding box of object below which an object can be considered sleeping (unit: m/s).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsPointVelocitySleepThresholdChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsPointVelocitySleepThreshold"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsDeterministicSimulation">
            <summary>
            Whether to enable the deterministic simulation. This will make the simulation run faster but it will no longer be deterministic.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsDeterministicSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsDeterministicSimulation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsConstraintWarmStart">
            <summary>
            Whether or not to use warm starting for constraints (initially applying previous frames impulses).
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsConstraintWarmStartChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsConstraintWarmStart"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsUseBodyPairContactCache">
            <summary>
            Whether or not to use the body pair cache, which removes the need for narrow phase collision detection when orientation between two bodies didn't change.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsUseBodyPairContactCacheChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsUseBodyPairContactCache"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsUseManifoldReduction">
            <summary>
            Whether or not to reduce manifolds with similar contact normals into one contact manifold.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsUseManifoldReductionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsUseManifoldReduction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsUseLargeIslandSplitter">
            <summary>
            Whether to split up large islands into smaller parallel batches of work to improve performance.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsUseLargeIslandSplitterChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsUseLargeIslandSplitter"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsAllowSleeping">
            <summary>
            If objects can go to sleep or not.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsAllowSleepingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsAllowSleeping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.PhysicsCheckActiveEdges">
            <summary>
            When false, we prevent collision against non-active (shared) edges. Mainly for debugging the algorithm.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.PhysicsCheckActiveEdgesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PhysicsCheckActiveEdges"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.Gravity2D">
            <summary>
            The gravity applied on the 2D physical objects.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.Gravity2DChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.Gravity2D"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.BackgroundSound">
            <summary>
            Specifies background sound of the scene. Usually it is a music.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.BackgroundSoundChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.BackgroundSound"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.BackgroundSoundVolumeInEditor">
            <summary>
            Specifies background sound volume in the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.BackgroundSoundVolumeInEditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.BackgroundSoundVolumeInEditor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.BackgroundSoundVolumeInSimulation">
            <summary>
            Specifies background sound volume in the simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.BackgroundSoundVolumeInSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.BackgroundSoundVolumeInSimulation"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.TemperatureChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.Temperature"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.PrecipitationFallingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PrecipitationFalling"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.PrecipitationFallenChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.PrecipitationFallen"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.TimeOfDayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.TimeOfDay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.SoundAttenuationNear">
            <summary>
            The default minimum distance from the listener, after which the sound begins to weaken.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.SoundAttenuationNearChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.SoundAttenuationNear"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.SoundAttenuationFar">
            <summary>
            The default maximum distance from the listener, after which no sound is heard.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.SoundAttenuationFarChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.SoundAttenuationFar"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.SoundRolloffFactor">
            <summary>
            The default damping factor.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.SoundRolloffFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.SoundRolloffFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayDevelopmentDataInEditor">
            <summary>
            Whether to show development data in the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayDevelopmentDataInEditorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayDevelopmentDataInEditor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayDevelopmentDataInSimulation">
            <summary>
            Whether to show development data in the simulation.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayDevelopmentDataInSimulationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayDevelopmentDataInSimulation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayTextInfo">
            <summary>
            Whether to display text information of the development data.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayTextInfoChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayTextInfo"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayLabels">
            <summary>
            Whether to display development data of the labels.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayLabelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayLabels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayLights">
            <summary>
            Whether to display development data of the lights.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayLightsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayLights"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayDecals">
            <summary>
            Whether to display development data of the decals.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayReflectionProbes">
            <summary>
            Whether to display development data of the reflection probes.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayReflectionProbesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayReflectionProbes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayCameras">
            <summary>
            Whether to display development data of the cameras.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayCamerasChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayCameras"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayPhysicalObjects">
            <summary>
            Whether to display physical objects.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayPhysicalObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayPhysicalObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayAreas">
            <summary>
            Whether to display areas.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayAreasChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayAreas"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayVolumes">
            <summary>
            Whether to display volumes.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayVolumesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayVolumes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplaySensors">
            <summary>
            Whether to display sensors.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplaySensorsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplaySensors"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplaySoundSources">
            <summary>
            Whether to display development data of the sound sources.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplaySoundSourcesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplaySoundSources"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplayObjectInSpaceBounds">
            <summary>
            Whether to display the bounds of the objects in space.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplayObjectInSpaceBoundsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplayObjectInSpaceBounds"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.DisplaySceneOctree">
            <summary>
            Whether to display the scene octree.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.DisplaySceneOctreeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.DisplaySceneOctree"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.FrustumCullingTest">
            <summary>
            Enables the frustum culling test.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.FrustumCullingTestChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.FrustumCullingTest"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeEnabled">
            <summary>
            Enables the scene octree.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeObjectCountOutsideOctreeToRebuld">
            <summary>
            The number of objects to rebuild outside the octree.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeObjectCountOutsideOctreeToRebuldChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeObjectCountOutsideOctreeToRebuld"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeBoundsRebuildExpand">
            <summary>
            The expand vector of the octree bounds.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeBoundsRebuildExpandChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeBoundsRebuildExpand"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeMinNodeSize">
            <summary>
            The minimum node size of the octree.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeMinNodeSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeMinNodeSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeObjectCountToCreateChildNodes">
            <summary>
            The number of objects needed to create child nodes.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeObjectCountToCreateChildNodesChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeObjectCountToCreateChildNodes"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Scene.OctreeMaxNodeCount">
            <summary>
            The maximum number of nodes created by the octree.
            </summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeMaxNodeCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeMaxNodeCount"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.OctreeThreadingModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.OctreeThreadingMode"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Scene.MeshInSpaceStaticModeSectorSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Scene.MeshInSpaceStaticModeSectorSize"/> property value changes.</summary>
        </member>
        <member name="M:NeoAxis.Scene.GetAll">
            <summary>
            Gets the list of all scene objects including resources.
            </summary>
        </member>
        <member name="M:NeoAxis.Scene.GetAllInstancesEnabled">
            <summary>
            Gets the list of all enabled instances of scenes.
            </summary>
        </member>
        <member name="P:NeoAxis.Scene.First">
            <summary>
            Gets first enabled scene.
            </summary>
        </member>
        <member name="T:NeoAxis.Scene.GetObjectsInSpaceItem">
            <summary>
            Represents an item for Scene.GetObjectsInSpace method.
            </summary>
        </member>
        <member name="T:NeoAxis.Scene.GetObjectsInSpaceItem.ResultItem">
            <summary>
            Represents resulting data item of <see cref="T:NeoAxis.Scene.GetObjectsInSpaceItem"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Scene.PhysicsWorldClass">
            <summary>
            Provides a data of Bullet physics engine.
            </summary>
        </member>
        <member name="M:NeoAxis.Scene.PhysicsWorldClass.Body.GetContacts(System.Int32@,NeoAxis.Scene.PhysicsWorldClass.ContactItem*@)">
            <summary>
            Subscribes to getting and gets a contacts data of the last simulation step.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Scene.PhysicsWorldClass.Body.ContactsExist">
            <summary>
            Subscribes to getting and checks the fact of exist contacts.
            </summary>
            <returns></returns>
        </member>
        <member name="F:NeoAxis.Scene.PhysicsWorldClass.Body.CharacterDataGroundState.OnGround">
            <summary>
            Character is on the ground and can move freely.
            </summary>
        </member>
        <member name="F:NeoAxis.Scene.PhysicsWorldClass.Body.CharacterDataGroundState.OnSteepGround">
            <summary>
            Character is on a slope that is too steep and can't climb up any further. The caller should start applying downward velocity if sliding from the slope is desired.
            </summary>
        </member>
        <member name="F:NeoAxis.Scene.PhysicsWorldClass.Body.CharacterDataGroundState.NotSupported">
            <summary>
            Character is touching an object, but is not supported by it and should fall. The GetGroundXXX functions will return information about the touched object.
            </summary>
        </member>
        <member name="F:NeoAxis.Scene.PhysicsWorldClass.Body.CharacterDataGroundState.InAir">
            <summary>
            Character is in the air and is not touching anything.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.AxisEnum.RotationY" -->
        <!-- Badly formed XML comment ignored for member "F:NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.AxisEnum.RotationZ" -->
        <member name="M:NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.SetLimit(NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.AxisEnum,NeoAxis.RangeF)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="value">For rotation axis in radians.</param>
        </member>
        <member name="M:NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.SetMotor(NeoAxis.Scene.PhysicsWorldClass.SixDOFConstraint.AxisEnum,System.Int32,System.Single,System.Single,NeoAxis.RangeF,System.Single)">
            <summary>
            
            </summary>
            <param name="axis"></param>
            <param name="mode"></param>
            <param name="frequency"></param>
            <param name="damping"></param>
            <param name="limit"></param>
            <param name="target">For rotation axis in radians.</param>
        </member>
        <member name="T:NeoAxis.SceneLODUtility">
            <summary>
            A helper class to manage level of details of objects.
            </summary>
        </member>
        <member name="T:NeoAxis.CSharpScriptGeneratedAttribute">
            <summary>
            Internal attribute of the engine for compiling C# scripts.
            </summary>
        </member>
        <member name="T:NeoAxis.ScriptCompilerException">
             <summary>
            
             </summary>
        </member>
        <member name="M:NeoAxis.ScriptCompilerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ScriptCompilerException"/> class.
            </summary>
        </member>
        <member name="M:NeoAxis.ScriptCompilerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ScriptCompilerException"/> class.
            </summary>
            <param name="info">The object that holds the serialized object data.</param>
            <param name="context">The contextual information about the source or destination.</param>
        </member>
        <member name="M:NeoAxis.ScriptCompilerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ScriptCompilerException"/> class.
            </summary>
            <param name="message">The message.</param>
        </member>
        <member name="T:NeoAxis.ScriptingCSharpEngine">
            <summary>
            Script compilation and execution engine.
            </summary>
        </member>
        <member name="T:NeoAxis.CSharpScript">
            <summary>
            The component for adding C# scripts.
            </summary>
        </member>
        <member name="P:NeoAxis.CSharpScript.Code">
            <summary>
            The code of the script.
            </summary>
        </member>
        <member name="E:NeoAxis.CSharpScript.CodeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CSharpScript.Code"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CSharpScript.FlowSupport">
            <summary>
            Whether the script is support flow control.
            </summary>
        </member>
        <member name="E:NeoAxis.CSharpScript.FlowSupportChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CSharpScript.FlowSupport"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.CSharpScript.Entry">
            <summary>
            The input of the node.
            </summary>
        </member>
        <member name="P:NeoAxis.CSharpScript.Exit">
            <summary>
            The exit of the node.
            </summary>
        </member>
        <member name="E:NeoAxis.CSharpScript.ExitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.CSharpScript.Exit"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.CSharpScript.Context">
            <summary>
            Scripting context variables container.
            </summary>
        </member>
        <member name="T:NeoAxis.Sensor">
            <summary>
            The event trigger in the scene. The sensor allows you to select scene objects by a given volume or ray.
            </summary>
        </member>
        <member name="P:NeoAxis.Sensor.SourceData">
            <summary>
            What kind of data is used as a source of events.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.SourceDataChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.SourceData"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.Shape">
            <summary>
            The shape of the trigger.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.ShapeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.Shape"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.RayTarget">
            <summary>
            The target by which the sensor ray will trigger.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.RayTargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.RayTarget"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.Target">
            <summary>
            The end point of the sensor in volume mode.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.TargetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.Target"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.Mode">
            <summary>
            The recognition mode of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.FilterByType">
            <summary>
            The type of objects that sensor will recognize.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.FilterByTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.FilterByType"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.PhysicsFilterGroup">
            <summary>
            The group of physical objects that sensor will recognize.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.PhysicsFilterGroupChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.PhysicsFilterGroup"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.PhysicsFilterMask">
            <summary>
            The mask of physical objects that sensor will recognize.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.PhysicsFilterMaskChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.PhysicsFilterMask"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.IgnoreSensors">
            <summary>
            Whether the sensor is ignoring other sensors.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.IgnoreSensorsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.IgnoreSensors"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.WhenUpdate">
            <summary>
            The update case mode of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.WhenUpdateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.WhenUpdate"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.DisplayColor">
            <summary>
            The display color of the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.DisplayColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.DisplayColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.DisplayObjects">
            <summary>
            Whether to draw gizmos on the objects recognized by the sensor.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.DisplayObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.DisplayObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.DisplayObjectsColor">
            <summary>
            The color of the recognized object gizmos.
            </summary>
        </member>
        <member name="E:NeoAxis.Sensor.DisplayObjectsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sensor.DisplayObjectsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Sensor.Objects">
            <summary>
            List of objects recognized by the sensor.
            </summary>
        </member>
        <member name="T:NeoAxis.Sensor.ResultItem">
            <summary>
            Represents an item for <see cref="M:NeoAxis.Sensor.CalculateObjects"/> method.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderScript">
            <summary>
            The component for compilation shader code.
            </summary>
        </member>
        <member name="P:NeoAxis.ShaderScript.Type">
            <summary>
            The type of the shader code.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderScript.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderScript.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ShaderScript.Code">
            <summary>
            The code of the script.
            </summary>
        </member>
        <member name="E:NeoAxis.ShaderScript.CodeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ShaderScript.Code"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ShaderScript.CompiledShaderScript">
            <summary>
            Represents a compiled data of <see cref="T:NeoAxis.ShaderScript"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ShaderScript.CompiledShaderScript.Parameter">
            <summary>
            Represents a parameter data of <see cref="T:NeoAxis.ShaderScript.CompiledShaderScript"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundSource">
            <summary>
            Ambient sound in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Sound">
            <summary>
            Sound file to be played by the source.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.SoundChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Sound"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Volume">
            <summary>
            Sound volume.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.VolumeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Volume"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Pitch">
            <summary>
            The playback speed of sound.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.PitchChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Pitch"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Mode3D">
            <summary>
            Whether to play in 3D mode.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.Mode3DChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Mode3D"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.RolloffMode">
            <summary>
            Calculation type of the damping volume depending on the distance from the camera.
            </summary>
            <remarks>
            There are three types: Logarithmic, Linear, manually. By using the type Manually programmer can specify attenuation formula as any spline.
            </remarks>
        </member>
        <member name="E:NeoAxis.SoundSource.RolloffModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.RolloffMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.AttenuationNear">
            <summary>
            The minimum distance from the listener, after which the sound begins to weaken.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.AttenuationNearChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.AttenuationNear"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.AttenuationFar">
            <summary>
            The maximum distance from the listener, after which no sound is heard.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.AttenuationFarChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.AttenuationFar"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.RolloffLogarithmicFactor">
            <summary>
            Damping factor for the logarithmic rolloff mode.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.RolloffLogarithmicFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.RolloffLogarithmicFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.ReplayDelay">
            <summary>
            The delay between the completion of playing sound and playing it again.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.ReplayDelayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.ReplayDelay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Streaming">
            <summary>
            This parameter enables streaming reading from the file while playing.
            </summary>
        </member>
        <member name="E:NeoAxis.SoundSource.StreamingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Streaming"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SoundSource.Priority">
            <summary>
            This parameter allows you to set the priority when playing sounds.
            </summary>
            <remarks>
            If a lot of sounds are played at the same time, the sounds of the lowest priority will be turned off because it is impossible to play all sounds because of the limitations of sound cards.
            </remarks>
        </member>
        <member name="E:NeoAxis.SoundSource.PriorityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SoundSource.Priority"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Sound">
            <summary>
            The component containing sound data.
            </summary>
        </member>
        <member name="P:NeoAxis.Sound.LoadFile">
            <summary>
            The name of the file with sound data.
            </summary>
        </member>
        <member name="E:NeoAxis.Sound.LoadFileChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sound.LoadFile"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Sound.CompiledData">
            <summary>
            Represents a precalculated data of <see cref="T:NeoAxis.Sound"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundResource">
            <summary>
            The class to handle sound file as a resource.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundResource.InstanceSound">
            <summary>
            Represents an instance of <see cref="T:NeoAxis.SoundResource"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Sprite">
            <summary>
            Sprite in the scene.
            </summary>
        </member>
        <member name="P:NeoAxis.Sprite.UV">
            <summary>
            UV texture coordinates.
            </summary>
        </member>
        <member name="E:NeoAxis.Sprite.UVChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Sprite.UV"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SpriteAnimation">
            <summary>
            Represents animation for the sprite.
            </summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimation.Material">
            <summary>
            The material of the animation.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimation.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimation.Material"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SpriteAnimationFrame">
            <summary>
            Represents a key frame for the sprite animation.
            </summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationFrame.TimeInterval">
            <summary>
            Time interval of the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationFrame.TimeIntervalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationFrame.TimeInterval"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationFrame.Material">
            <summary>
            The material of the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationFrame.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationFrame.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationFrame.UV">
            <summary>
            UV texture coordinates of the frame.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationFrame.UVChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationFrame.UV"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SpriteAnimationController">
            <summary>
            An animation controller for the sprite.
            </summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationController.PlayAnimation">
            <summary>
            The animation used by the controller.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationController.PlayAnimationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationController.PlayAnimation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationController.Speed">
            <summary>
            Animation speed multiplier.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationController.SpeedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationController.Speed"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SpriteAnimationController.AutoRewind">
            <summary>
            Whether to rewind to the start when playing ended.
            </summary>
        </member>
        <member name="E:NeoAxis.SpriteAnimationController.AutoRewindChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SpriteAnimationController.AutoRewind"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SurfaceArea">
            <summary>
            Represents an area that filled by surface.
            </summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.Surface">
            <summary>
            Surface to fill.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.SurfaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.Surface"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.ObjectsDistribution">
            <summary>
            The scale the distribution of surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.ObjectsDistributionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.ObjectsDistribution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.ObjectsScale">
            <summary>
            The scale of surface objects size.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.ObjectsScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.ObjectsScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.ObjectsColor">
            <summary>
            The base color and opacity multiplier of the surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.ObjectsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.ObjectsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.FadeLength">
            <summary>
            Saturation fade length near to the area borders.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.FadeLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.FadeLength"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceArea.AutoUpdate">
            <summary>
            Whether to do auto update after changes.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceArea.AutoUpdateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceArea.AutoUpdate"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Surface">
            <summary>
            A component is defined how to apply of objects and material on the surface.
            </summary>
        </member>
        <member name="P:NeoAxis.Surface.Material">
            <summary>
            An optional material of the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Surface.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Surface.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Surface.MaterialUV0">
            <summary>
            The number of UV tiles per unit for texture coordinates 0.
            </summary>
        </member>
        <member name="E:NeoAxis.Surface.MaterialUV0Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Surface.MaterialUV0"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Surface.MaterialUV1">
            <summary>
            The number of UV tiles per unit for texture coordinates 1.
            </summary>
        </member>
        <member name="E:NeoAxis.Surface.MaterialUV1Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Surface.MaterialUV1"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Surface.GetRandomVariationEvent">
            <summary>
            The event to override <see cref="M:NeoAxis.Surface.GetRandomVariation(NeoAxis.Surface.GetRandomVariationOptions,NeoAxis.FastRandom,System.Byte@,System.Byte@,System.Double@,NeoAxis.QuaternionF@,NeoAxis.Vector3F@)"/> method. Can be called from a background thread.
            </summary>
        </member>
        <member name="T:NeoAxis.SurfaceElement">
            <summary>
            Represents an element for configuring <see cref="T:NeoAxis.Surface"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement.Probability">
            <summary>
            The probability of choosing this element from others when painting.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement.ProbabilityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement.Probability"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SurfaceElement_Mesh">
            <summary>
            Represents a mesh element for configuring <see cref="T:NeoAxis.Surface"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.Mesh">
            <summary>
            The mesh used by the element.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.MeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.Mesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.ReplaceMaterial">
            <summary>
            Replaces all geometries of the mesh by another material.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.ReplaceMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.ReplaceMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.VisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.VisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.VisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceElement_Mesh.StaticShadows">
            <summary>
            Whether to enable the static shadows optimization.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceElement_Mesh.StaticShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceElement_Mesh.StaticShadows"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.SurfaceGroupOfElements">
            <summary>
            Represents a group of elements for configuring <see cref="T:NeoAxis.Surface"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.Probability">
            <summary>
            The probability of choosing this group of elements from others when painting.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.ProbabilityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.Probability"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.OccupiedAreaRadius">
            <summary>
            The radius of the occupied area in which no other objects will be created.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.OccupiedAreaRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.OccupiedAreaRadius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.PositionZRange">
            <summary>
            The range of possible Z-axis object position displacements when painting.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.PositionZRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.PositionZRange"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.RotateBySurfaceNormal">
            <summary>
            Whether to orient elements depending by the normal of the surface (ground).
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.RotateBySurfaceNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.RotateBySurfaceNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.RotateAroundItsAxis">
            <summary>
            Whether to set the random value of object rotation around its axis when painting.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.RotateAroundItsAxisChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.RotateAroundItsAxis"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.MaxIncline">
            <summary>
            The maximum vertical angle of objects.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.MaxInclineChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.MaxIncline"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.ScaleRange">
            <summary>
            The range of possible scaling of objects when painting.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.ScaleRangeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.ScaleRange"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.SurfaceGroupOfElements.RegularAlignment">
            <summary>
            The step of the tiling when this regular alignment mode is enabled.
            </summary>
        </member>
        <member name="E:NeoAxis.SurfaceGroupOfElements.RegularAlignmentChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.SurfaceGroupOfElements.RegularAlignment"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.Terrain">
            <summary>
            A heightmap based terrain.
            </summary>
        </member>
        <member name="P:NeoAxis.Terrain.Position">
            <summary>
            The position of the object in the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.PositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Position"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.HorizontalSize">
            <summary>
            The size along the axes X and Y.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.HorizontalSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.HorizontalSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.HeightmapSize">
            <summary>
            The resolution of the height map.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.HeightmapSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.HeightmapSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Holes">
            <summary>
            The list of objects that are shapes for cutting holes.
            </summary>
        </member>
        <member name="P:NeoAxis.Terrain.HolesEnabled">
            <summary>
            Whether to enable holes.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.HolesEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.HolesEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Visible">
            <summary>
            Whether the object is visible in the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.VisibleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Visible"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Material">
            <summary>
            Base material of a terrain.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Material"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MaterialUV0">
            <summary>
            The number of UV tiles per unit for texture coordinates 0.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialUV0Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MaterialUV0"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MaterialUV1">
            <summary>
            The number of UV tiles per unit for texture coordinates 1.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialUV1Changed">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MaterialUV1"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MaterialUVCurvatureIntensity">
            <summary>
            The intensity of the curvature in the calculation of texture coordinates. The curvature is intended to reduce the tiling effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialUVCurvatureIntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MaterialUVCurvatureIntensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MaterialUVCurvatureFrequency">
            <summary>
            The frequency of the curvature in the calculation of texture coordinates. The randomness is intended to reduce the tiling effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialUVCurvatureFrequencyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MaterialUVCurvatureFrequency"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MaterialColor">
            <summary>
            The base color multiplier for base material.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MaterialColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MaterialColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.PaintMaskSize">
            <summary>
            Resolution of the paint masks of the layers.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.PaintMaskSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.PaintMaskSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.CastShadows">
            <summary>
            Whether to cast shadows on the other surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.CastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.CastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.ReceiveDecals">
            <summary>
            Whether it is possible to apply decals on the surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.ReceiveDecalsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.ReceiveDecals"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Surface">
            <summary>
            Base surface of the terrain.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Surface"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjects">
            <summary>
            Whether to create objects of the base surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsDistribution">
            <summary>
            The scale the distribution of base surface objects.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsDistributionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsDistribution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsScale">
            <summary>
            The scale of base surface objects size.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsColor">
            <summary>
            The base color multiplier for objects of base surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsVisibilityDistanceFactor">
            <summary>
            The factor of maximum visibility distance for objects of base surface. The maximum distance is calculated based on the size of the object on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsVisibilityDistanceFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsVisibilityDistanceFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsCastShadows">
            <summary>
            Whether to cast shadows on the other surfaces for objects of base surface.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsCastShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsCastShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.SurfaceObjectsCollision">
            <summary>
            Whether to enable a collision detection. A collision definition of the mesh is used.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.SurfaceObjectsCollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.SurfaceObjectsCollision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.MotionBlurFactor">
            <summary>
            The multiplier of the motion blur effect.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.MotionBlurFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.MotionBlurFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Collision">
            <summary>
            Whether to have a collision body.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.CollisionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Collision"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.CollisionMaterial">
            <summary>
            The physical material used by the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.CollisionMaterialChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.CollisionMaterial"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.CollisionFriction">
            <summary>
            The amount of friction applied on the rigid body.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.CollisionFrictionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.CollisionFriction"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.CollisionRestitution">
            <summary>
            The ratio of the final relative velocity to initial relative velocity of the rigid body after collision.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.CollisionRestitutionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.CollisionRestitution"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.TileSize">
            <summary>
            The size of internal tile cells. These cells divide the entire geometry of the landscape into pieces.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.TileSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.TileSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.LODEnabled">
            <summary>
            Whether to enable level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.LODEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.LODEnabled"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.Terrain.LODCountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.LODCount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.LODDistance">
            <summary>
            The distance from the previous to the next level of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.LODDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.LODDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.PrecalculateObjects">
            <summary>
            Whether to precalculate data of objects from layers in the simulation. When the property is disabled, the objects will calculate when it needed and destroyed after 10 seconds when are not visible by the camera.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.PrecalculateObjectsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.PrecalculateObjects"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.Occluder">
            <summary>
            Whether to object should be used as an occluder for occlusion culling.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.OccluderChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.Occluder"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.Terrain.DebugDrawSurfaceObjectsBounds">
            <summary>
            Whether to visualize the bounds of groups for objects created by surfaces.
            </summary>
        </member>
        <member name="E:NeoAxis.Terrain.DebugDrawSurfaceObjectsBoundsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.Terrain.DebugDrawSurfaceObjectsBounds"/> property value changes.</summary>
        </member>
        <member name="M:NeoAxis.Terrain.GetHeight(NeoAxis.Vector2,System.Boolean)">
            <summary>
            </summary>
            <param name="position"></param>
            <param name="considerHoles"></param>
            <returns>if hole and considerHoles == true, then Double.MinValue will be returned.</returns>
        </member>
        <member name="T:NeoAxis.TransformOffset">
            <summary>
            Represents the transformation of an object. It can be used in combination with other transformations to calculate the resulting position offset, rotation, scale. 
            </summary>
        </member>
        <member name="P:NeoAxis.TransformOffset.Source">
            <summary>
            Source transformation.
            </summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.SourceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.Source"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.TransformOffset.Mode">
            <summary>
            The mode of the component.
            </summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.ModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.Mode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.TransformOffset.PositionOffset">
            <summary>
            Amount of position offset as a vector.
            </summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.PositionOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.PositionOffset"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.TransformOffset.RotationOffset">
            <summary>
            Amount of rotation offset as a quaternion.
            </summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.RotationOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.RotationOffset"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.ScaleOffsetChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.ScaleOffset"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.TransformOffset.MatrixChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.TransformOffset.Matrix"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.TransformOffset.Result">
            <summary>
            The result of a calculation.
            </summary>
        </member>
        <member name="T:NeoAxis.UIButton">
            <summary>
            Clickable button of the engine GUI.
            </summary>
        </member>
        <member name="P:NeoAxis.UIButton.Image">
            <summary>
            The image on the button.
            </summary>
        </member>
        <member name="E:NeoAxis.UIButton.ImageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIButton.Image"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIButton.ImageDisabled">
            <summary>
            The image on the button when it is disabled.
            </summary>
        </member>
        <member name="E:NeoAxis.UIButton.ImageDisabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIButton.ImageDisabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIButton.FontSize">
            <summary>
            The font size of the text.
            </summary>
        </member>
        <member name="E:NeoAxis.UIButton.FontSizeChanged">
            <summary>Occurs when the <see cref="!:TitleBarFontSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIButton.Highlighted">
            <summary>
            Specifies highlighted state of the button.
            </summary>
        </member>
        <member name="P:NeoAxis.UIButton.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="P:NeoAxis.UIButton.State">
            <summary>
            The current state of the button.
            </summary>
        </member>
        <member name="T:NeoAxis.UICheck">
            <summary>
            Check box with on/off state. Third state (Indeterminate) is also supported.
            </summary>
        </member>
        <member name="P:NeoAxis.UICheck.FontSize">
            <summary>
            The font size of the text.
            </summary>
        </member>
        <member name="E:NeoAxis.UICheck.FontSizeChanged">
            <summary>Occurs when the <see cref="!:TitleBarFontSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UICheck.Checked">
            <summary>
            Specifies the value of the check box.
            </summary>
        </member>
        <member name="P:NeoAxis.UICheck.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="T:NeoAxis.UICombo">
            <summary>
            Represents a drop down combo box.
            </summary>
        </member>
        <member name="P:NeoAxis.UICombo.AlwaysOpen">
            <summary>
            Whether to stay the list open.
            </summary>
        </member>
        <member name="E:NeoAxis.UICombo.AlwaysOpenChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UICombo.AlwaysOpen"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UICombo.TextWhenNoSelectedItems">
            <summary>
            Default value of the text box when none of the items selected.
            </summary>
        </member>
        <member name="E:NeoAxis.UICombo.TextWhenNoSelectedItemsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UICombo.TextWhenNoSelectedItems"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UICombo.Items">
            <summary>
            The list of items.
            </summary>
        </member>
        <member name="P:NeoAxis.UICombo.SelectedIndex">
            <summary>
            The index of the selected item.
            </summary>
        </member>
        <member name="P:NeoAxis.UICombo.SelectedItem">
            <summary>
            The selected item.
            </summary>
        </member>
        <member name="P:NeoAxis.UICombo.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="T:NeoAxis.UIMeasure">
            <summary>
            Represents a type to indicate position and size for UI elements.
            </summary>
        </member>
        <member name="T:NeoAxis.UIMeasureValueDouble">
            <summary>
            Represents a value to indicate a floating point value for UI elements.
            </summary>
        </member>
        <member name="T:NeoAxis.UIMeasureValueVector2">
            <summary>
            Represents a value to indicate a two-dimensional vector value for UI elements.
            </summary>
        </member>
        <member name="T:NeoAxis.UIMeasureValueRectangle">
            <summary>
            Represents a value to indicate a rectangle value for UI elements.
            </summary>
        </member>
        <member name="T:NeoAxis.UIContainer">
            <summary>
            Base container class for other UI elements.
            </summary>
        </member>
        <member name="P:NeoAxis.UIContainer.PixelScale">
            <summary>
            The pixel scale for Measure.PixelsScaled. When no value, the size of the system font is used.
            </summary>
        </member>
        <member name="T:NeoAxis.UIContextMenu">
            <summary>
            Represents a shortcut menu.
            </summary>
        </member>
        <member name="T:NeoAxis.UIControl">
            <summary>
            Base class of all UI controls.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Text">
            <summary>
            The text value of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Visible">
            <summary>
            Whether the control is visible.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.ReadOnly">
            <summary>
            Whether the control is read-only.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.CanBeSelected">
            <summary>
            Whether the object is selectable in editor view.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Size">
            <summary>
            The size of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.HorizontalAlignment">
            <summary>
            The horizontal alignment of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.VerticalAlignment">
            <summary>
            The vertical alignment of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Margin">
            <summary>
            The margin of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.TopMost">
            <summary>
            Whether the control is rendered on the top.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.ReadOnlyInHierarchy">
            <summary>
            Whether the control is read-only in hierarchy.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Style">
            <summary>
            The style of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.BackgroundColor">
            <summary>
            The background color of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.BackgroundRounding">
            <summary>
            The background rounding size.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.ColorMultiplier">
            <summary>
            The extra color multiplier applied to the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.MousePosition">
            <summary>
            The current mouse pointer position in the local coordinates of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.ParentContainer">
            <summary>
            The parent container of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.Focused">
            <summary>
            Whether the control is focused or not.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.ScreenClipRectangle">
            <summary>
            The clip rectangle of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.CanClone">
            <summary>
            Whether the control is cloneable.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.SpecialShader">
            <summary>
            The special shader of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.SpecialShaderApplyToChildren">
            <summary>
            Whether special shader is applied to children.
            </summary>
        </member>
        <member name="P:NeoAxis.UIControl.EditorScrollPosition">
            <summary>
            The editor scroll position of the control.
            </summary>
        </member>
        <member name="T:NeoAxis.UIEdit">
            <summary>
            Standard UI element for text input.
            </summary>
        </member>
        <member name="P:NeoAxis.UIEdit.MaxCharacterCount">
            <summary>
            Edit box maximum text characters count.
            </summary>
        </member>
        <member name="P:NeoAxis.UIEdit.PasswordCharacter">
            <summary>
            The character used to mask characters of a password.
            </summary>
        </member>
        <member name="E:NeoAxis.UIEdit.PasswordCharacterChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIEdit.PasswordCharacter"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIEdit.HintWhenEmpty">
            <summary>
            The displayed text when text of the edit box is empty.
            </summary>
        </member>
        <member name="E:NeoAxis.UIEdit.HintWhenEmptyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIEdit.HintWhenEmpty"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UIEdit.SelectionStartChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIEdit.SelectionStart"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UIEdit.SelectionLengthChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIEdit.SelectionLength"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UIEdit.CaretPositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIEdit.CaretPosition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIEdit.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="T:NeoAxis.UIGrid">
            <summary>
            2D grid of UI controls.
            </summary>
        </member>
        <member name="P:NeoAxis.UIGrid.Columns">
            <summary>
            The amount of columns.
            </summary>
        </member>
        <member name="E:NeoAxis.UIGrid.ColumnsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIGrid.Columns"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIGrid.Rows">
            <summary>
            The amount of rows.
            </summary>
        </member>
        <member name="E:NeoAxis.UIGrid.RowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIGrid.Rows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIGrid.AutoPosition">
            <summary>
            Whether to manage position and size of the controls.
            </summary>
        </member>
        <member name="E:NeoAxis.UIGrid.AutoPositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIGrid.AutoPosition"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIGrid.DisplayBorders">
            <summary>
            Whether to visualize borders of the controls.
            </summary>
        </member>
        <member name="E:NeoAxis.UIGrid.DisplayBordersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIGrid.DisplayBorders"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UIImage">
            <summary>
            Standard control that shows an image.
            </summary>
        </member>
        <member name="P:NeoAxis.UIImage.SourceImage">
            <summary>
            The source texture of the image.
            </summary>
        </member>
        <member name="P:NeoAxis.UIImage.TextureCoordinates">
            <summary>
            The UV coordinates of the image texture.
            </summary>
        </member>
        <member name="P:NeoAxis.UIImage.TextureCoordinatesRotation">
            <summary>
            The rotation of UV coordinates around the center.
            </summary>
        </member>
        <member name="E:NeoAxis.UIImage.TextureCoordinatesRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIImage.TextureCoordinatesRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIImage.Clamp">
            <summary>
            Specifies the clamp texture address mode.
            </summary>
        </member>
        <member name="P:NeoAxis.UIImage.Filtering">
            <summary>
            The filtering mode of the image texture.
            </summary>
        </member>
        <member name="T:NeoAxis.UIList">
            <summary>
            Standard control that represents a list.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.ItemSize">
            <summary>
            The height of a list element.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.Font">
            <summary>
            The font of a list element.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.FontSize">
            <summary>
            The font size of a list element.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.AlwaysShowScroll">
            <summary>
            Whether the scrollbar will be always visible or not.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.Items">
            <summary>
            The list of items.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.SelectedIndex">
            <summary>
            The index of the selected item.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.SelectedItem">
            <summary>
            The selected item.
            </summary>
        </member>
        <member name="P:NeoAxis.UIList.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="T:NeoAxis.UIMenu">
            <summary>
            Represents a menu.
            </summary>
        </member>
        <member name="T:NeoAxis.UIProgress">
            <summary>
            UI element for visualization progress.
            </summary>
        </member>
        <member name="P:NeoAxis.UIProgress.Maximum">
            <summary>
            Specifies the maximum position.
            </summary>
        </member>
        <member name="P:NeoAxis.UIProgress.Value">
            <summary>
            Specifies the current position.
            </summary>
        </member>
        <member name="T:NeoAxis.UIRenderTarget">
            <summary>
            UI control with a render target.
            </summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.HDR">
            <summary>
            Whether the high dynamic range is enabled. For Auto mode HDR is disabled on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.HDRChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.HDR"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.AutoUpdate">
            <summary>
            Whether to enable auto update. For manual update RenderTargetUpdate method is used.
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.AutoUpdateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.AutoUpdate"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.DisplayScene">
            <summary>
            Whether to attach a scene to the render target.
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.DisplaySceneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.DisplayScene"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.Scene">
            <summary>
            The scene to display. Set 'null' to use current scene.
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.SceneChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.Scene"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.Camera">
            <summary>
            The camera to use for displaying scene.
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.CameraChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.Camera"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIRenderTarget.CameraByName">
            <summary>
            The camera to use for displaying scene, specified by name.
            </summary>
        </member>
        <member name="E:NeoAxis.UIRenderTarget.CameraByNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIRenderTarget.CameraByName"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UIScroll">
            <summary>
            Standard UI element for scrolling.
            </summary>
        </member>
        <member name="P:NeoAxis.UIScroll.Vertical">
            <summary>
            Whether the scroll bar is vertical.
            </summary>
        </member>
        <member name="P:NeoAxis.UIScroll.ValueRange">
            <summary>
            Specifies the range of possible values.
            </summary>
        </member>
        <member name="P:NeoAxis.UIScroll.Value">
            <summary>
            Specifies the current position of the scroll bar.
            </summary>
        </member>
        <member name="T:NeoAxis.UISlider">
            <summary>
            Represents a slider.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.Vertical">
            <summary>
            Whether the slider is vertical.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.ValueRange">
            <summary>
            Specifies the range of possible values.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.Value">
            <summary>
            Specifies the current position of the slider.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.Step">
            <summary>
            The step of possible values.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.TickFrequency">
            <summary>
            The step of visual ticks.
            </summary>
        </member>
        <member name="P:NeoAxis.UISlider.CanFocus">
            <summary>
            Whether control can be focused.
            </summary>
        </member>
        <member name="T:NeoAxis.UISplitContainer">
            <summary>
            Control the sizing of two panels.
            </summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.SplitterSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.SplitterSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.VerticalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.Vertical"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.FixedPanelChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.FixedPanel"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.Panel1MinSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.Panel1MinSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.Panel2MinSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.Panel2MinSize"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.UISplitContainer.PositionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UISplitContainer.Position"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UIStyle">
            <summary>
            The style of the UI controls.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.Default">
            <summary>
            Gets the default style.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.Empty">
            <summary>
            Gets the empty style.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ButtonSoundMouseEnter">
            <summary>
            The sound played when the mouse pointer enters the button.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ButtonSoundMouseLeave">
            <summary>
            The sound played when the mouse pointer leaves the button.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ButtonSoundClick">
            <summary>
            The sound played when the user clicks on the button.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ContextMenuButtonSoundMouseEnter">
            <summary>
            The sound played when the mouse pointer enters the button of context menu.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ContextMenuButtonSoundMouseLeave">
            <summary>
            The sound played when the mouse pointer leaves the button of context menu.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.ContextMenuButtonSoundClick">
            <summary>
            The sound played when the user clicks on the button of context menu.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.CheckSoundMouseEnter">
            <summary>
            The sound played when the mouse pointer enters the check.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.CheckSoundMouseLeave">
            <summary>
            The sound played when the mouse pointer leaves the check.
            </summary>
        </member>
        <member name="P:NeoAxis.UIStyle.CheckSoundClick">
            <summary>
            The sound played when user clicks on the check.
            </summary>
        </member>
        <member name="T:NeoAxis.UIStyleDefault">
            <summary>
            Represents an default UI style.
            </summary>
        </member>
        <member name="T:NeoAxis.UIStyleEmpty">
            <summary>
            Represents a empty UI style.
            </summary>
        </member>
        <member name="T:NeoAxis.UITabControl">
            <summary>
            Represents a control that contains multiple items that share the same space on the screen.
            </summary>
        </member>
        <member name="P:NeoAxis.UITabControl.Button">
            <summary>
            The class of the buttons. Use 'this:' reference to fix potential issues.
            </summary>
        </member>
        <member name="E:NeoAxis.UITabControl.ButtonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UITabControl.Button"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UITabControl.Side">
            <summary>
            The side of navigation buttons
            </summary>
        </member>
        <member name="E:NeoAxis.UITabControl.SideChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UITabControl.Side"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UITabControl.ButtonIndents">
            <summary>
            Indents between buttons.
            </summary>
        </member>
        <member name="E:NeoAxis.UITabControl.ButtonIndentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UITabControl.ButtonIndents"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UITabControl.SelectedIndex">
            <summary>
            The index of the selected page.
            </summary>
        </member>
        <member name="P:NeoAxis.UITabControl.SelectedPage">
            <summary>
            Gets a selected page.
            </summary>
        </member>
        <member name="T:NeoAxis.UIText">
            <summary>
            Standard UI element for text drawing.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.Font">
            <summary>
            The font of rendered text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.FontSize">
            <summary>
            Font size of rendered text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.TextHorizontalAlignment">
            <summary>
            The horizontal alignment of the text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.TextVerticalAlignment">
            <summary>
            The vertical alignment of the text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.Color">
            <summary>
            The color of the text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.Offset">
            <summary>
            Extra offset added to the text position.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.WordWrap">
            <summary>
            Wordwrap the text to fit within the width of the control.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.VerticalIndention">
            <summary>
            Vertical space between the margin of control and the start of text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.Shadow">
            <summary>
            Draw the shadow behind the text.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.ShadowOffset">
            <summary>
            Extra offset added to the text shadow position.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.ShadowColor">
            <summary>
            The color of the text shadow.
            </summary>
        </member>
        <member name="P:NeoAxis.UIText.ClipRectangle">
            <summary>
            Restrict text to a rectangular region.
            </summary>
        </member>
        <member name="T:NeoAxis.UIToolbar">
            <summary>
            Represents a toolbar.
            </summary>
        </member>
        <member name="P:NeoAxis.UIToolbar.BorderIndents">
            <summary>
            Indents around buttons.
            </summary>
        </member>
        <member name="E:NeoAxis.UIToolbar.BorderIndentsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIToolbar.BorderIndents"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIToolbar.IndentBetweenItems">
            <summary>
            Indents between buttons.
            </summary>
        </member>
        <member name="E:NeoAxis.UIToolbar.IndentBetweenItemsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIToolbar.IndentBetweenItems"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UITooltip">
            <summary>
            Represents a pop-up window that displays a brief description of a control's purpose when the user rests the pointer on the control. Add this object as a child to <see cref="T:NeoAxis.UIControl"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.UITooltip.Text">
            <summary>
            The text of the tooltip.
            </summary>
        </member>
        <member name="E:NeoAxis.UITooltip.TextChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UITooltip.Text"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UITooltip.InitialDelay">
            <summary>
            Time delay before appearing in seconds.
            </summary>
        </member>
        <member name="E:NeoAxis.UITooltip.InitialDelayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UITooltip.InitialDelay"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UITree">
            <summary>
            Standard control that represents a tree.
            </summary>
        </member>
        <member name="T:NeoAxis.UIWindow">
            <summary>
            Represents a window that makes up an application's user interface.
            </summary>
        </member>
        <member name="P:NeoAxis.UIWindow.BorderSize">
            <summary>
            The size of the border.
            </summary>
        </member>
        <member name="E:NeoAxis.UIWindow.BorderSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIWindow.BorderSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIWindow.TitleBar">
            <summary>
            Enables window header displaying.
            </summary>
        </member>
        <member name="P:NeoAxis.UIWindow.TitleBarHeight">
            <summary>
            The height of the title bar.
            </summary>
        </member>
        <member name="E:NeoAxis.UIWindow.TitleBarHeightChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIWindow.TitleBarHeight"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.UIWindow.TitleBarFontSize">
            <summary>
            The font size of the title bar.
            </summary>
        </member>
        <member name="E:NeoAxis.UIWindow.TitleBarFontSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.UIWindow.TitleBarFontSize"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.UIVideo">
            <summary>
            The control for video playback. OGV format is supported.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.FileName">
            <summary>
            The source video file. OGV format is supported.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.Loop">
            <summary>
            Whether to repeat video playback.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.Pause">
            <summary>
            Whether the video paused.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.Volume">
            <summary>
            The audio volume of the video.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.AudioSamplingRate">
            <summary>
            The sampling rate of the audio.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.AudioChannels">
            <summary>
            The channels of the audio.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.VideoSize">
            <summary>
            The resolution of the video.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.VideoFPS">
            <summary>
            The frame rate of the video.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.CurrentTime">
            <summary>
            Current position of the video playback in seconds.
            </summary>
        </member>
        <member name="P:NeoAxis.UIVideo.NoLogErrorAtLoading">
            <summary>
            Whether to log video loading errors.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualMember">
            <summary>
            Base class of all virtual member components.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualMember.Description">
            <summary>
            The description of the member.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMember.DescriptionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMember.Description"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMember.Static">
            <summary>
            Whether the member is static.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMember.StaticChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMember.Static"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.VirtualMemberParameter">
            <summary>
            The component for adding parameters to the virtual method.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.Type">
            <summary>
            The type of the parameter.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.ByReference">
            <summary>
            Whether the parameter explicitly passed by reference.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.ByReferenceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.ByReference"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.Output">
            <summary>
            Whether the parameter is output.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.OutputChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.Output"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.ReturnValue">
            <summary>
            Whether the parameter has a return value.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.ReturnValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.ReturnValue"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.Optional">
            <summary>
            Whether the parameter is optional.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.OptionalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.Optional"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualMemberParameter.DefaultValue">
            <summary>
            The default value of the parameter.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMemberParameter.DefaultValueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMemberParameter.DefaultValue"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.VirtualMethod">
            <summary>
            The component for adding a virtual method to the parent component.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualMethod.Body">
            <summary>
            The body of the method.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMethod.BodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethod.Body"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.VirtualMethodBody">
            <summary>
            The beginning of the body of the method in the flow graph.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMethodBody.DefinitionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethodBody.Definition"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.VirtualMethodBody.PropertyAccessorTypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethodBody.PropertyAccessorType"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.VirtualMethodBody.BodyEndChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethodBody.BodyEnd"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.VirtualMethodBody.FlowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethodBody.Flow"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.VirtualMethodBodyEnd">
            <summary>
            The ending of the body of the method in the flow graph.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualMethodBodyEnd.BodyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualMethodBodyEnd.Body"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.VirtualProperty">
            <summary>
            The component for adding a virtual property to the parent component.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.Type">
            <summary>
            The type of the property.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.TypeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.Type"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.ReferenceSupport">
            <summary>
            Whether references are supported by the property.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.ReferenceSupportChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.ReferenceSupport"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.ReadOnly">
            <summary>
            Whether the property is read-only.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.ReadOnlyChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.ReadOnly"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.Browsable">
            <summary>
            Whether the property is browsable.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.BrowsableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.Browsable"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.Category">
            <summary>
            The category under which the property is displayed in the properties window.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.CategoryChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.Category"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.Serializable">
            <summary>
            Whether the property is serializable.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.SerializableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.Serializable"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.Cloneable">
            <summary>
            The cloning mode of the property.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.CloneableChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.Cloneable"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.ChangedEvent">
            <summary>
            Whether the property invoke notification event if property value has changed.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualProperty.DefaultValueSpecified">
            <summary>
            Whether the property has a default value.
            </summary>
        </member>
        <member name="E:NeoAxis.VirtualProperty.DefaultValueSpecifiedChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.VirtualProperty.DefaultValueSpecified"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.EngineApp">
            <summary>
            Base class for the working the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.EngineApp.InitSettings">
            <summary>
            Represents engine's initialization settings.
            </summary>
        </member>
        <member name="T:NeoAxis.EngineApp.CreatedInsideEngineWindowClass">
            <summary>
            Provides data for case when application window is created by the engine.
            </summary>
        </member>
        <member name="P:NeoAxis.EngineApp.EngineTime">
            <summary>
            Gets the current time in the engine. The engine time is updated once before a simulation step or before a frame update if it is an editor.
            </summary>
        </member>
        <member name="P:NeoAxis.EngineApp.MaxFPS">
            <summary>
            The ability to set the limit for maximal framerate.
            </summary>
        </member>
        <member name="T:NeoAxis.EngineConfig">
            <summary>
            Class for working with the application config.
            </summary>
        </member>
        <member name="T:NeoAxis.EngineConfig.Parameter">
            <summary>
            Represents a parameter for <see cref="T:NeoAxis.EngineConfig"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.EKeys">
            <summary>
            Specifies keyboard key codes.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.None">
            <summary>
            No key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Cancel">
            <summary>
            The CANCEL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Back">
            <summary>
            The BACKSPACE key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Tab">
            <summary>
            The TAB key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LineFeed">
            <summary>
            The LINEFEED key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Clear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Enter">
            <summary>
            The ENTER key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Return">
            <summary>
            The RETURN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Shift">
            <summary>
            The SHIFT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Control">
            <summary>
            The CTRL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Menu">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Alt">
            <summary>
            The ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Pause">
            <summary>
            The PAUSE key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.CapsLock">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Capital">
            <summary>
            The CAPS LOCK key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.KanaMode">
            <summary>
            The IME Kana mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.HangulMode">
            <summary>
            The IME Hangul mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.JunjaMode">
            <summary>
            The IME Junja mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.FinalMode">
            <summary>
            The IME final mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.KanjiMode">
            <summary>
            The IME Kanji mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.HanjaMode">
            <summary>
            The IME Hanja mode key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Escape">
            <summary>
            The ESC key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.IMEConvert">
            <summary>
            The IME convert key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.IMENonconvert">
            <summary>
            The IME nonconvert key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.IMEAccept">
            <summary>
            The IME accept key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.IMEModeChange">
            <summary>
            The IME mode change key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Space">
            <summary>
            The SPACEBAR key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Prior">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.PageUp">
            <summary>
            The PAGE UP key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Next">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.PageDown">
            <summary>
            The PAGE DOWN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.End">
            <summary>
            The END key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Home">
            <summary>
            The HOME key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Left">
            <summary>
            The LEFT ARROW key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Up">
            <summary>
            The UP ARROW key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Right">
            <summary>
            The RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Down">
            <summary>
            The DOWN ARROW key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Select">
            <summary>
            The SELECT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Print">
            <summary>
            The PRINT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Execute">
            <summary>
            The EXECUTE key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.PrintScreen">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Snapshot">
            <summary>
            The PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Insert">
            <summary>
            The INS key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Delete">
            <summary>
            The DEL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Help">
            <summary>
            The HELP key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D0">
            <summary>
            The 0 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D1">
            <summary>
            The 1 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D2">
            <summary>
            The 2 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D3">
            <summary>
            The 3 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D4">
            <summary>
            The 4 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D5">
            <summary>
            The 5 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D6">
            <summary>
            The 6 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D7">
            <summary>
            The 7 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D8">
            <summary>
            The 8 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D9">
            <summary>
            The 9 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.A">
            <summary>
            The A key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.B">
            <summary>
            The B key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.C">
            <summary>
            The C key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.D">
            <summary>
            The D key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.E">
            <summary>
            The E key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F">
            <summary>
            The F key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.G">
            <summary>
            The G key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.H">
            <summary>
            The H key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.I">
            <summary>
            The I key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.J">
            <summary>
            The J key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.K">
            <summary>
            The K key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.L">
            <summary>
            The L key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.M">
            <summary>
            The M key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.N">
            <summary>
            The N key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.O">
            <summary>
            The O key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.P">
            <summary>
            The P key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Q">
            <summary>
            The Q key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.R">
            <summary>
            The R key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.S">
            <summary>
            The S key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.T">
            <summary>
            The T key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.U">
            <summary>
            The U key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.V">
            <summary>
            The V key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.W">
            <summary>
            The W key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.X">
            <summary>
            The X key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Y">
            <summary>
            The Y key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Z">
            <summary>
            The Z key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LWin">
            <summary>
            The left Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RWin">
            <summary>
            The right Windows logo key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Apps">
            <summary>
            The application key (Microsoft Natural Keyboard).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Sleep">
            <summary>
            The computer sleep key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad0">
            <summary>
            The 0 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad1">
            <summary>
            The 1 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad2">
            <summary>
            The 2 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad3">
            <summary>
            The 3 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad4">
            <summary>
            The 4 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad5">
            <summary>
            The 5 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad6">
            <summary>
            The 6 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad7">
            <summary>
            The 7 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad8">
            <summary>
            The 8 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPad9">
            <summary>
            The 9 key on the numeric keypad.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Multiply">
            <summary>
            The multiply key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Add">
            <summary>
            The add key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Separator">
            <summary>
            The separator key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Subtract">
            <summary>
            The subtract key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Decimal">
            <summary>
            The decimal key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Divide">
            <summary>
            The divide key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F1">
            <summary>
            The F1 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F2">
            <summary>
            The F2 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F3">
            <summary>
            The F3 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F4">
            <summary>
            The F4 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F5">
            <summary>
            The F5 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F6">
            <summary>
            The F6 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F7">
            <summary>
            The F7 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F8">
            <summary>
            The F8 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F9">
            <summary>
            The F9 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F10">
            <summary>
            The F10 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F11">
            <summary>
            The F11 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F12">
            <summary>
            The F12 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F13">
            <summary>
            The F13 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F14">
            <summary>
            The F14 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F15">
            <summary>
            The F15 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F16">
            <summary>
            The F16 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F17">
            <summary>
            The F17 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F18">
            <summary>
            The F18 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F19">
            <summary>
            The F19 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F20">
            <summary>
            The F20 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F21">
            <summary>
            The F21 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F22">
            <summary>
            The F22 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F23">
            <summary>
            The F23 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.F24">
            <summary>
            The F24 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumLock">
            <summary>
            The NUM LOCK key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Scroll">
            <summary>
            The SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LShift">
            <summary>
            The left SHIFT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RShift">
            <summary>
            The right SHIFT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LControl">
            <summary>
            The left CTRL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RControl">
            <summary>
            The right CTRL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LAlt">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LMenu">
            <summary>
            The left ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RAlt">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RMenu">
            <summary>
            The right ALT key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserBack">
            <summary>
            The browser back key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserForward">
            <summary>
            The browser forward key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserRefresh">
            <summary>
            The browser refresh key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserStop">
            <summary>
            The browser stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserSearch">
            <summary>
            The browser search key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserFavorites">
            <summary>
            The browser favorites key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.BrowserHome">
            <summary>
            The browser home key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.VolumeMute">
            <summary>
            The volume mute key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.VolumeDown">
            <summary>
            The volume down key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.VolumeUp">
            <summary>
            The volume up key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaNextTrack">
            <summary>
            The media next track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaPreviousTrack">
            <summary>
            The media previous track key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaStop">
            <summary>
            The media Stop key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaPlayPause">
            <summary>
            The media play pause key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LaunchMail">
            <summary>
            The launch mail key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.SelectMedia">
            <summary>
            The select media key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LaunchApplication1">
            <summary>
            The start application one key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LaunchApplication2">
            <summary>
            The start application two key (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem1">
            <summary>
            The OEM 1 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oemplus">
            <summary>
            The OEM plus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oemcomma">
            <summary>
            The OEM comma key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemMinus">
            <summary>
            The OEM minus key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemPeriod">
            <summary>
            The OEM period key on any country/region keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem2">
            <summary>
            The OEM 2 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oemtilde">
            <summary>
            The OEM tilde key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem3">
            <summary>
            The OEM 3 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem4">
            <summary>
            The OEM 4 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem5">
            <summary>
            The OEM 5 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem6">
            <summary>
            The OEM 6 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem7">
            <summary>
            The OEM 7 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem8">
            <summary>
            The OEM 8 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Oem102">
            <summary>
            The OEM 102 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard (Windows 2000 or later).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ProcessKey">
            <summary>
            The PROCESS KEY key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Attn">
            <summary>
            The ATTN key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Crsel">
            <summary>
            The CRSEL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Exsel">
            <summary>
            The EXSEL key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.EraseEof">
            <summary>
            The ERASE EOF key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Play">
            <summary>
            The PLAY key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Zoom">
            <summary>
            The ZOOM key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Pa1">
            <summary>
            The PA1 key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.OemClear">
            <summary>
            The CLEAR key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Paragraph">
            <summary>
            The paragraph key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Function">
            <summary>
            The function key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Command">
            <summary>
            The command key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.LCommand">
            <summary>
            The left command key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.RCommand">
            <summary>
            The right command key.
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaClose">
            <summary>
            The media eject key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaEject">
            <summary>
            The media eject key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaFastForward">
            <summary>
            The media fast forward key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaPause">
            <summary>
            The media pause key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaPlay">
            <summary>
            The media play key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaRecord">
            <summary>
            The media record key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MediaRewind">
            <summary>
            The media rewind key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.AndroidMenu">
            <summary>
            The menu key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ZoomIn">
            <summary>
            The zoom in key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ZoomOut">
            <summary>
            The zoom out key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MetaLeft">
            <summary>
            The meta left key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.MetaRight">
            <summary>
            The meta right key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Notification">
            <summary>
            The notification key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.AndroidNum">
            <summary>
            The num key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ApplicationSwitch">
            <summary>
            App switch key. Should bring up the application switcher dialog (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Bookmark">
            <summary>
            Bookmark key. On some TV remotes, bookmarks content or web pages (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Call">
            <summary>
            The call key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.EndCall">
            <summary>
            The end call key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Explorer">
            <summary>
            Explorer special function key. Used to launch a browser application (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Camera">
            <summary>
            Camera key. Used to launch a camera application or take pictures (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Focus">
            <summary>
            Camera Focus key. Used to focus the camera (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.HeadsetHook">
            <summary>
            Headset Hook key. Used to hang up calls and stop media (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPadEquals">
            <summary>
            Numeric keypad '=' key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPadLeftParen">
            <summary>
            Numeric keypad '(' key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.NumPadRightParen">
            <summary>
            Numeric keypad ')' key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Power">
            <summary>
            The power key (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Settings">
            <summary>
            The settings key. Starts the system settings activity (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.SoftLeft">
            <summary>
            The soft left key. Usually situated below the display on phones and used as a multi-function feature key for selecting a software defined function shown on the bottom left of the display (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.SoftRight">
            <summary>
            The soft right key. Usually situated below the display on phones and used as a multi-function feature key for selecting a software defined function shown on the bottom right of the display (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Symbol">
            <summary>
            The symbol modifier key. Used to enter alternate symbols (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.PictureSymbols">
            <summary>
            The picture symbols modifier key. Used to switch symbol sets (Emoji, Kao-moji) (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.SwitchCharset">
            <summary>
            The switch charset modifier key. Used to switch character sets (Kanji, Katakana) (Android).
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.AVRInput">
            <summary>
            The A/V Receiver input key. On TV remotes, switches the input mode on an external A/V Receiver (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.AVRPower">
            <summary>
            The A/V Receiver power key. On TV remotes, toggles the power on an external A/V Receiver (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Captions">
            <summary>
            The toggle captions key. Switches the mode for closed-captioning text, for example during television shows (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ChannelDown">
            <summary>
            The channel down key. On TV remotes, decrements the television channel (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ChannelUp">
            <summary>
            The channel up key. On TV remotes, increments the television channel (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.DVR">
            <summary>
            The DVR key. On some TV remotes, switches to a DVR mode for recorded shows (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Guide">
            <summary>
            The guide key. On TV remotes, shows a programming guide(Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Info">
            <summary>
            The info key. Common on TV remotes to show additional information related to what is currently being viewed(Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ProgBlue">
            <summary>
            The blue "programmable" key. On TV remotes, acts as a contextual/programmable key (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ProgGreen">
            <summary>
            The green "programmable" key. On TV remotes, acts as a contextual/programmable key (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ProgRed">
            <summary>
            The red "programmable" key. On TV remotes, acts as a contextual/programmable key (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.ProgYellow">
            <summary>
            The yellow "programmable" key. On TV remotes, acts as a contextual/programmable key (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.STBInput">
            <summary>
            The set-top-box input key. On TV remotes, switches the input mode on an external set-top-box (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.STBPower">
            <summary>
            The set-top-box power key. On TV remotes, toggles the power on an external Set-top-box (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.TV">
            <summary>
            The TV key. On TV remotes, switches to viewing live TV (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.TVInput">
            <summary>
            The TV input key. On TV remotes, switches the input on a television screen (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.TVPower">
            <summary>
            The TV power key. On TV remotes, toggles the power on a television screen (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EKeys.Window">
            <summary>
            The window key. On TV remotes, toggles picture-in-picture mode or other windowing functions (Android)
            </summary>
        </member>
        <member name="F:NeoAxis.EMouseButtons.Left">
            <summary>
            The left mouse button.
            </summary>
        </member>
        <member name="F:NeoAxis.EMouseButtons.Right">
            <summary>
            The right mouse button.
            </summary>
        </member>
        <member name="F:NeoAxis.EMouseButtons.Middle">
            <summary>
            The middle mouse button.
            </summary>
        </member>
        <member name="F:NeoAxis.EMouseButtons.XButton1">
            <summary>
            The first XButton.
            </summary>
        </member>
        <member name="F:NeoAxis.EMouseButtons.XButton2">
            <summary>
            The second XButton.
            </summary>
        </member>
        <member name="T:NeoAxis.KeyEvent">
            <summary>
            Provides data for the key down and key up events.
            </summary>
        </member>
        <member name="M:NeoAxis.KeyEvent.#ctor(NeoAxis.EKeys)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.KeyEvent"/> class.
            </summary>
            <param name="key"></param>
        </member>
        <member name="P:NeoAxis.KeyEvent.Key">
            <summary>
            Gets the keyboard code.
            </summary>
        </member>
        <member name="P:NeoAxis.KeyEvent.SuppressKeyPress">
            <summary>
            Gets or sets a value indicating whether the key event should be passed on
            to the underlying control.
            </summary>
        </member>
        <member name="T:NeoAxis.KeyPressEvent">
            <summary>
            Provides data for the key press event.
            </summary>
        </member>
        <member name="M:NeoAxis.KeyPressEvent.#ctor(System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.KeyPressEvent"/> class.
            </summary>
            <param name="keyChar">
            The ASCII character corresponding to the key the user pressed.
            </param>
        </member>
        <member name="P:NeoAxis.KeyPressEvent.KeyChar">
            <summary>
            Gets the character corresponding to the key pressed.
            <remarks>
            The ASCII character that is composed. For example, if the user presses SHIFT
            + K, this property returns an uppercase K.
            </remarks>
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Spring">
            <summary>
            The force increases in proportion to the distance of the axis from a defined neutral point. This is Condition force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Damper">
            <summary>
            The force increases in proportion to the velocity with which the user moves the axis. This is Condition force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Inertia">
            <summary>
            The force increases in proportion to the acceleration of the axis. This is Condition force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Friction">
            <summary>
            The force is applied when the axis is moved and depends on the defined friction coefficient. This is Condition force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.ConstantForce">
            <summary>
            A constant force is a force with a defined magnitude and duration.
            </summary> 
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Square">
            <summary>
            This is Periodic force.
            </summary> 
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Sine">
            <summary>
            This is Periodic force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Triangle">
            <summary>
            This is Periodic force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.SawtoothUp">
            <summary>
            The waveform drops vertically after it reaches maximum positive force. This is Periodic force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.SawtoothDown">
            <summary>
            The waveform rises vertically after it reaches maximum negative force. This is Periodic force.
            </summary>
        </member>
        <member name="F:NeoAxis.ForceFeedbackEffectTypes.Ramp">
            <summary>
            A ramp force is a force with defined starting and ending magnitudes and a finite duration. A ramp force can continue in a single direction, or it can start as a strong push in one direction, weaken, stop, and then strengthen in the opposite direction.
            </summary> 
        </member>
        <member name="P:NeoAxis.ForceFeedbackEffect.Direction">
            <summary>
            Normalized vector conformable to the axes. For single-axis must be null.
            </summary>
        </member>
        <member name="M:NeoAxis.ForceFeedbackEffect.SetDirection(System.Single[])">
            <summary>
            Normalized vector conformable to the axes. For single-axis may be null.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackEffect.Duration">
            <summary>
            The total duration of the effect, in seconds.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConstantForceEffect.Magnitude">
            <summary>
            The magnitude of the effect, in the range from -1 through 1.
            </summary>
            <remarks>
            If an envelope is applied to this effect, the value represents the magnitude of the sustain. If no envelope is applied, the value represents the amplitude of the entire effect.
            </remarks>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.Offset">
            <summary>
            Offset for the condition, in the range from -1 through 1.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.PositiveCoefficient">
            <summary>
            Coefficient constant on the positive side of the offset, in the range from -1 through 1.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.NegativeCoefficient">
            <summary>
            Coefficient constant on the negative side of the offset, in the range from -1 through 1. If the device does not support separate positive and negative coefficients, the value of NegativeCoefficient is ignored, and the value of PositiveCoefficient is used as both the positive and negative coefficients.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.PositiveSaturation">
            <summary>
            Maximum force output on the positive side of the offset, in the range from 0 through 1. If the device does not support force saturation, the value of this member is ignored.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.NegativeSaturation">
            <summary>
            Maximum force output on the negative side of the offset, in the range from 0 through 1. If the device does not support force saturation, the value of this member is ignored. 
            </summary>
            <remarks>
            If the device does not support separate positive and negative saturation, the value of NegativeSaturation is ignored, and the value of PositiveSaturation is used as both the positive and negative saturation.
            </remarks>
        </member>
        <member name="P:NeoAxis.ForceFeedbackConditionEffect.DeadBand">
            <summary>
            Region around Offset in which the condition is not active, in the range from 0 through 1. In other words, the condition is not active between Offset minus DeadBand and Offset plus DeadBand. 
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackPeriodicEffect.Magnitude">
            <summary>
            Magnitude of the effect, in the range from 0 through 1. If an envelope is applied to this effect, the value represents the magnitude of the sustain. If no envelope is applied, the value represents the amplitude of the entire effect.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackPeriodicEffect.Offset">
            <summary>
            Offset of the effect. The range of forces generated by the effect is <see cref="P:NeoAxis.ForceFeedbackPeriodicEffect.Offset"/> minus <see cref="P:NeoAxis.ForceFeedbackPeriodicEffect.Magnitude"/> to Offset plus <see cref="P:NeoAxis.ForceFeedbackPeriodicEffect.Magnitude"/>. The value of the <see cref="P:NeoAxis.ForceFeedbackPeriodicEffect.Offset"/> member is also the baseline for any envelope that is applied to the effect.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackPeriodicEffect.Phase">
            <summary>
            Position in the cycle of the periodic effect at which playback begins, in the range from 0 through 1.
            </summary>
            <remarks>
            A device driver cannot provide support for all values in the <see cref="P:NeoAxis.ForceFeedbackPeriodicEffect.Phase"/> member. In this case, the value is rounded off to the nearest supported value.
            </remarks>
        </member>
        <member name="P:NeoAxis.ForceFeedbackPeriodicEffect.Period">
            <summary>
            Period of the effect, in seconds. 
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackRampEffect.StartForce">
            <summary>
            Magnitude at the start of the effect, in the range from -1 through 1.
            </summary>
        </member>
        <member name="P:NeoAxis.ForceFeedbackRampEffect.EndForce">
            <summary>
            Magnitude at the end of the effect, in the range from -1 through 1.
            </summary>
        </member>
        <member name="T:NeoAxis.InputDevice">
            <summary>
            Represents input device.
            </summary>
        </member>
        <member name="T:NeoAxis.InputDeviceManager">
            <summary>
            Represents class for managing input devices.
            </summary>
        </member>
        <member name="M:NeoAxis.InputDeviceManager.RegisterDevice(NeoAxis.InputDevice)">
            <summary>
            Device must call this after creation to register itself in system 
            </summary>
            <param name="device"></param>
            <returns></returns>
        </member>
        <member name="P:NeoAxis.InputDeviceManager.Devices">
            <summary>
            Get registered devices. <b>Don't modify</b>.
            </summary>
        </member>
        <member name="T:NeoAxis.InputEvent">
            <summary>
            Represents general input event. Custom events should be generalized from this one.
            </summary>
        </member>
        <member name="P:NeoAxis.InputEvent.Device">
            <summary>
            Gets input device description.
            </summary>
        </member>
        <member name="F:NeoAxis.TouchData.ActionEnum.Down">
            <summary>
            A pressed gesture has started, the motion contains the initial starting location.
            </summary>
        </member>
        <member name="F:NeoAxis.TouchData.ActionEnum.Up">
            <summary>
            A pressed gesture has ended.
            </summary>
        </member>
        <member name="F:NeoAxis.TouchData.ActionEnum.Move">
            <summary>
            A pressed gesture has moved.
            </summary>
        </member>
        <member name="T:NeoAxis.MacOSInputDeviceManager">
            <summary>
            Describes singleton class for managing input devices on macOS.
            </summary>
        </member>
        <member name="T:NeoAxis.AVIWriter">
            <summary>
            AVI files writing using Video for Windows interface.
            </summary>
            
            <remarks><para>The class allows to write AVI files using Video for Windows API.</para>
            
            <para>Sample usage:</para>
            <code>
            // instantiate AVI writer, use WMV3 codec
            AVIWriter writer = new AVIWriter( "wmv3" );
            // create new AVI file and open it
            writer.Open( "test.avi", 320, 240 );
            // create frame image
            Bitmap image = new Bitmap( 320, 240 );
            
            for ( int i = 0; i &lt; 240; i++ )
            {
                // update image
                image.SetPixel( i, i, Color.Red );
                // add the image as a new frame of video file
                writer.AddFrame( image );
            }
            writer.Close( );
            </code>
            </remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.Width">
            <summary>
            Width of video frames.
            </summary>
            
            <remarks><para>The property specifies the width of video frames, which are acceptable
            by <see cref="!:AddFrame"/> method for saving, which is set in <see cref="M:NeoAxis.AVIWriter.Open(System.String,System.Int32,System.Int32)"/>
            method.</para></remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.Height">
            <summary>
            Height of video frames.
            </summary>
            
            <remarks><para>The property specifies the height of video frames, which are acceptable
            by <see cref="!:AddFrame"/> method for saving, which is set in <see cref="M:NeoAxis.AVIWriter.Open(System.String,System.Int32,System.Int32)"/>
            method.</para></remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.Position">
            <summary>
            Current position in video stream.
            </summary>
            
            <remarks><para>The property tell current position in video stream, which actually equals
            to the amount of frames added using <see cref="!:AddFrame"/> method.</para></remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.FrameRate">
            <summary>
            Desired playing frame rate.
            </summary>
            
            <remarks><para>The property sets the video frame rate, which should be use during playing
            of the video to be saved.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default frame rate is set to <b>25</b>.</para></remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.Codec">
            <summary>
            Codec used for video compression.
            </summary>
            
            <remarks><para>The property sets the FOURCC code of video compression codec, which needs to
            be used for video encoding.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default video codec is set <b>"DIB "</b>, which means no compression.</para></remarks>
            
        </member>
        <member name="P:NeoAxis.AVIWriter.Quality">
            <summary>
            Compression video quality.
            </summary>
            
            <remarks><para>The property sets video quality used by codec in order to balance compression rate
            and image quality. The quality is measured usually in the [0, 100] range.</para>
            
            <para><note>The property should be set befor opening new file to take effect.</note></para>
            
            <para>Default value is set to <b>-1</b> - default compression quality of the codec.</para></remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.AVIWriter"/> class.
            </summary>
            
            <remarks>Initializes Video for Windows library.</remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.AVIWriter"/> class.
            </summary>
            
            <param name="codec">Codec to use for compression.</param>
            
            <remarks>Initializes Video for Windows library.</remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.Finalize">
            <summary>
            Destroys the instance of the <see cref="T:NeoAxis.AVIWriter"/> class.
            </summary>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.Dispose">
            <summary>
            Dispose the object.
            </summary>
            
            <remarks>Frees unmanaged resources used by the object. The object becomes unusable
            after that.</remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.Dispose(System.Boolean)">
            <summary>
            Dispose the object.
            </summary>
            
            <param name="disposing">Indicates if disposing was initiated manually.</param>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.Open(System.String,System.Int32,System.Int32)">
            <summary>
            Create new AVI file and open it for writing.
            </summary>
            
            <param name="fileName">AVI file name to create.</param>
            <param name="width">Video width.</param>
            <param name="height">Video height.</param>
            
            <remarks><para>The method opens (creates) a video files, configure video codec and prepares
            the stream for saving video frames with a help of <see cref="!:AddFrame"/> method.</para></remarks>
            
            <exception cref="T:System.IO.IOException">Failed opening the specified file.</exception>
            <exception cref="T:NeoAxis.AVIWriterVideoException">A error occurred while creating new video file. See exception message.</exception>
            <exception cref="T:System.OutOfMemoryException">Insufficient memory for internal buffer.</exception>
            <exception cref="T:System.ArgumentException">Video file resolution must be a multiple of two.</exception>
            
        </member>
        <member name="M:NeoAxis.AVIWriter.Close">
            <summary>
            Close video file.
            </summary>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32">
            <summary>
            Windows API functions and structures.
            </summary>
            
            <remarks>The class provides Video for Windows and some other Win32 functions and structurs.</remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileInit">
            <summary>
            Initialize the AVIFile library.
            </summary>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileExit">
            <summary>
            Exit the AVIFile library.
            </summary>
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileOpen(System.IntPtr@,System.String,NeoAxis.AVIWriterWin32.OpenFileMode,System.IntPtr)">
            <summary>
            Open an AVI file.
            </summary>
            
            <param name="aviHandler">Opened AVI file interface.</param>
            <param name="fileName">AVI file name.</param>
            <param name="mode">Opening mode (see <see cref="T:NeoAxis.AVIWriterWin32.OpenFileMode"/>).</param>
            <param name="handler">Handler to use (<b>null</b> to use default).</param>
            
            <returns>Returns zero on success or error code otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileRelease(System.IntPtr)">
            <summary>
            Release an open AVI stream.
            </summary>
            
            <param name="aviHandler">Open AVI file interface.</param>
            
            <returns>Returns the reference count of the file.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileGetStream(System.IntPtr,System.IntPtr@,System.Int32,System.Int32)">
            <summary>
            Get stream interface that is associated with a specified AVI file
            </summary>
            
            <param name="aviHandler">Handler to an open AVI file.</param>
            <param name="streamHandler">Stream interface.</param>
            <param name="streamType">Stream type to open.</param>
            <param name="streamNumner">Count of the stream type. Identifies which occurrence of the specified stream type to access. </param>
            
            <returns></returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIFileCreateStream(System.IntPtr,System.IntPtr@,NeoAxis.AVIWriterWin32.AVISTREAMINFO@)">
            <summary>
            Create a new stream in an existing file and creates an interface to the new stream. 
            </summary>
            
            <param name="aviHandler">Handler to an open AVI file.</param>
            <param name="streamHandler">Stream interface.</param>
            <param name="streamInfo">Pointer to a structure containing information about the new stream.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamRelease(System.IntPtr)">
            <summary>
            Release an open AVI stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the current reference count of the stream.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamSetFormat(System.IntPtr,System.Int32,NeoAxis.AVIWriterWin32.BITMAPINFOHEADER@,System.Int32)">
            <summary>
            Set the format of a stream at the specified position.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="position">Position in the stream to receive the format.</param>
            <param name="format">Pointer to a structure containing the new format.</param>
            <param name="formatSize">Size, in bytes, of the block of memory referenced by <b>format</b>.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamStart(System.IntPtr)">
            <summary>
            Get the starting sample number for the stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the number if successful or – 1 otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamLength(System.IntPtr)">
            <summary>
            Get the length of the stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            
            <returns>Returns the stream's length, in samples, if successful or -1 otherwise. </returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamInfo(System.IntPtr,NeoAxis.AVIWriterWin32.AVISTREAMINFO@,System.Int32)">
            <summary>
            Obtain stream header information.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="streamInfo">Pointer to a structure to contain the stream information.</param>
            <param name="infoSize">Size, in bytes, of the structure used for <b>streamInfo</b>.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrameOpen(System.IntPtr,NeoAxis.AVIWriterWin32.BITMAPINFOHEADER@)">
            <summary>
            Prepare to decompress video frames from the specified video stream
            </summary>
            
            <param name="streamHandler">Pointer to the video stream used as the video source.</param>
            <param name="wantedFormat">Pointer to a structure that defines the desired video format. Specify NULL to use a default format.</param>
            
            <returns>Returns an object that can be used with the <see cref="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrame(System.IntPtr,System.Int32)"/> function.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrameOpen(System.IntPtr,System.Int32)">
            <summary>
            Prepare to decompress video frames from the specified video stream.
            </summary>
            
            <param name="streamHandler">Pointer to the video stream used as the video source.</param>
            <param name="wantedFormat">Pointer to a structure that defines the desired video format. Specify NULL to use a default format.</param>
            
            <returns>Returns a <b>GetFrame</b> object that can be used with the <see cref="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrame(System.IntPtr,System.Int32)"/> function.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrameClose(System.IntPtr)">
            <summary>
            Releases resources used to decompress video frames.
            </summary>
            
            <param name="getFrameObject">Handle returned from the <see cref="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrameOpen(System.IntPtr,System.Int32)"/> function.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamGetFrame(System.IntPtr,System.Int32)">
            <summary>
            Return the address of a decompressed video frame. 
            </summary>
            
            <param name="getFrameObject">Pointer to a GetFrame object.</param>
            <param name="position">Position, in samples, within the stream of the desired frame.</param>
            
            <returns>Returns a pointer to the frame data if successful or NULL otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIStreamWrite(System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Write data to a stream.
            </summary>
            
            <param name="streamHandler">Handle to an open stream.</param>
            <param name="start">First sample to write.</param>
            <param name="samples">Number of samples to write.</param>
            <param name="buffer">Pointer to a buffer containing the data to write. </param>
            <param name="bufferSize">Size of the buffer referenced by <b>buffer</b>.</param>
            <param name="flags">Flag associated with this data.</param>
            <param name="samplesWritten">Pointer to a buffer that receives the number of samples written. This can be set to NULL.</param>
            <param name="bytesWritten">Pointer to a buffer that receives the number of bytes written. This can be set to NULL.</param>
            
            <returns>Returns zero if successful or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVISaveOptions(System.IntPtr,System.Int32,System.Int32,System.IntPtr[],System.IntPtr[])">
            <summary>
            Retrieve the save options for a file and returns them in a buffer.
            </summary>
            
            <param name="window">Handle to the parent window for the Compression Options dialog box.</param>
            <param name="flags">Flags for displaying the Compression Options dialog box.</param>
            <param name="streams">Number of streams that have their options set by the dialog box.</param>
            <param name="streamInterfaces">Pointer to an array of stream interface pointers.</param>
            <param name="options">Pointer to an array of pointers to AVICOMPRESSOPTIONS structures.</param>
            
            <returns>Returns TRUE if the user pressed OK, FALSE for CANCEL, or an error otherwise.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVISaveOptionsFree(System.Int32,System.IntPtr[])">
            <summary>
            Free the resources allocated by the AVISaveOptions function. 
            </summary>
            
            <param name="streams">Count of the AVICOMPRESSOPTIONS structures referenced in <b>options</b>.</param>
            <param name="options">Pointer to an array of pointers to AVICOMPRESSOPTIONS structures.</param>
            
            <returns>Returns 0.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVIMakeCompressedStream(System.IntPtr@,System.IntPtr,NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS@,System.IntPtr)">
            <summary>
            Create a compressed stream from an uncompressed stream and a
            compression filter, and returns the address of a pointer to
            the compressed stream.
            </summary>
            
            <param name="compressedStream">Pointer to a buffer that receives the compressed stream pointer.</param>
            <param name="sourceStream">Pointer to the stream to be compressed.</param>
            <param name="options">Pointer to a structure that identifies the type of compression to use and the options to apply.</param>
            <param name="clsidHandler">Pointer to a class identifier used to create the stream.</param>
            
            <returns>Returns 0 if successful or an error otherwise.</returns>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32.RECT">
            <summary>
            Structure to define the coordinates of the upper-left and
            lower-right corners of a rectangle. 
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.RECT.left">
            <summary>
            x-coordinate of the upper-left corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.RECT.top">
            <summary>
            y-coordinate of the upper-left corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.RECT.right">
            <summary>
            x-coordinate of the bottom-right corner of the rectangle.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.RECT.bottom">
            <summary>
            y-coordinate of the bottom-right corner of the rectangle.
            </summary>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32.AVISTREAMINFO">
            <summary>
            Structure, which contains information for a single stream .
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.type">
            <summary>
            Four-character code indicating the stream type.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.handler">
            <summary>
            Four-character code of the compressor handler that will compress this video stream when it is saved.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.flags">
            <summary>
            Applicable flags for the stream.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.Capabilities">
            <summary>
            Capability flags; currently unused.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.priority">
            <summary>
            Priority of the stream.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.language">
            <summary>
            Language of the stream.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.scale">
            <summary>
            Time scale applicable for the stream.
            </summary>
            
            <remarks>Dividing <b>rate</b> by <b>scale</b> gives the playback rate in number of samples per second.</remarks>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.rate">
            <summary>
            Rate in an integer format.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.start">
            <summary>
            Sample number of the first frame of the AVI file.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.length">
            <summary>
            Length of this stream.
            </summary>
            
            <remarks>The units are defined by <b>rate</b> and <b>scale</b>.</remarks>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.initialFrames">
            <summary>
            Audio skew. This member specifies how much to skew the audio data ahead of the video frames in interleaved files.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.suggestedBufferSize">
            <summary>
            Recommended buffer size, in bytes, for the stream.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.quality">
            <summary>
            Quality indicator of the video data in the stream.
            </summary>
            
            <remarks>Quality is represented as a number between 0 and 10,000.</remarks>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.sampleSize">
            <summary>
            Size, in bytes, of a single data sample.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.rectFrame">
            <summary>
            Dimensions of the video destination rectangle.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.editCount">
            <summary>
            Number of times the stream has been edited.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.formatChangeCount">
            <summary>
            Number of times the stream format has changed.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVISTREAMINFO.name">
            <summary>
            Description of the stream.
            </summary>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER">
            <summary>
            Structure, which contains information about the dimensions and color format of a DIB.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.size">
            <summary>
            Specifies the number of bytes required by the structure.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.width">
            <summary>
            Specifies the width of the bitmap, in pixels.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.height">
            <summary>
            Specifies the height of the bitmap, in pixels.
            </summary>
            
            <remarks>If <b>heigh</b>t is positive, the bitmap is a bottom-up DIB and its origin is
            the lower-left corner. If <b>height</b> is negative, the bitmap is a top-down DIB and its
            origin is the upper-left corner.</remarks>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.planes">
            <summary>
            Specifies the number of planes for the target device. This value must be set to 1.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.bitCount">
            <summary>
            Specifies the number of bits-per-pixel.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.compression">
            <summary>
            Specifies the type of compression for a compressed bottom-up bitmap (top-down DIBs cannot be compressed).
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.sizeImage">
            <summary>
            Specifies the size, in bytes, of the image.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.xPelsPerMeter">
            <summary>
            Specifies the horizontal resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.yPelsPerMeter">
            <summary>
            Specifies the vertical resolution, in pixels-per-meter, of the target device for the bitmap.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.colorsUsed">
            <summary>
            Specifies the number of color indexes in the color table that are actually used by the bitmap.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.BITMAPINFOHEADER.colorsImportant">
            <summary>
            Specifies the number of color indexes that are required for displaying the bitmap.
            </summary>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS">
            <summary>
            Structure, which contains information about a stream and how it is compressed and saved. 
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.type">
            <summary>
            Four-character code indicating the stream type.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.handler">
            <summary>
            Four-character code for the compressor handler that will compress this video stream when it is saved.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.keyFrameEvery">
            <summary>
            Maximum period between video key frames.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.quality">
            <summary>
            Quality value passed to a video compressor.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.bytesPerSecond">
            <summary>
            Video compressor data rate.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.flags">
            <summary>
            Flags used for compression.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.format">
            <summary>
            Pointer to a structure defining the data format.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.formatSize">
            <summary>
            Size, in bytes, of the data referenced by <b>format</b>.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.parameters">
            <summary>
            Video-compressor-specific data; used internally.
            </summary>
            
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.parametersSize">
            <summary>
            Size, in bytes, of the data referenced by <b>parameters</b>.
            </summary>
        </member>
        <member name="F:NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS.interleaveEvery">
            <summary>
            Interleave factor for interspersing stream data with data from the first stream. 
            </summary>
            
        </member>
        <member name="T:NeoAxis.AVIWriterWin32.OpenFileMode">
            <summary>
            File access modes. 
            </summary>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.mmioFOURCC(System.String)">
            <summary>
            .NET replacement of mmioFOURCC macros. Converts four characters to code.
            </summary>
            
            <param name="str">Four characters string.</param>
            
            <returns>Returns the code created from provided characters.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.decode_mmioFOURCC(System.Int32)">
            <summary>
            Inverse to <see cref="M:NeoAxis.AVIWriterWin32.mmioFOURCC(System.String)"/>. Converts code to fout characters string.
            </summary>
            
            <param name="code">Code to convert.</param>
            
            <returns>Returns four characters string.</returns>
            
        </member>
        <member name="M:NeoAxis.AVIWriterWin32.AVISaveOptions(System.IntPtr,NeoAxis.AVIWriterWin32.AVICOMPRESSOPTIONS@)">
            <summary>
            Version of <see cref="M:NeoAxis.AVIWriterWin32.AVISaveOptions(System.IntPtr,System.Int32,System.Int32,System.IntPtr[],System.IntPtr[])"/> for one stream only.
            </summary>
            
            <param name="stream">Stream to configure.</param>
            <param name="options">Stream options.</param>
            
            <returns>Returns TRUE if the user pressed OK, FALSE for CANCEL, or an error otherwise.</returns>
            
        </member>
        <member name="T:NeoAxis.AVIWriterVideoException">
            <summary>
            Video related exception.
            </summary>
            
            <remarks><para>The exception is thrown in the case of some video related issues, like
            failure of initializing codec, compression, etc.</para></remarks>
            
        </member>
        <member name="M:NeoAxis.AVIWriterVideoException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.AVIWriterVideoException"/> class.
            </summary>
            
            <param name="message">Exception's message.</param>
            
        </member>
        <member name="T:NeoAxis.WindowsInputDeviceManager">
            <summary>
            Describes singleton class for managing input devices on Windows.
            </summary>
        </member>
        <member name="T:NeoAxis.MemoryVirtualFileStream">
            <summary>
            Defines a memory mapped file stream for virtual file system.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualFileStream">
            <summary>
            Defines a file stream for virtual file system.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualDirectory">
            <summary>
            Defines a directory for virtual file system.
            </summary>
        </member>
        <member name="M:NeoAxis.VirtualDirectory.Exists(System.String)">
            <summary>
            Determines whether the given path refers to an existing directory on virtual file system.
            </summary>
            <param name="path">The path to test.</param>
            <returns><b>true</b> if the directory is exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.VirtualDirectory.GetFiles(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Returns the names of files in the specified directory that match the specified 
            search pattern, using a value to determine whether to search subdirectories.
            </summary>
            <param name="path">The directory from which to retrieve the files.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The parameter
            cannot end in two periods ("..") or contain two periods ("..") followed by
            System.IO.Path.DirectorySeparatorChar or System.IO.Path.AltDirectorySeparatorChar,
            nor can it contain any of the characters in System.IO.Path.InvalidPathChars.
            
            </param>
            <param name="searchOption">
            One of the System.IO.SearchOption values that specifies whether the search
            operation should include all subdirectories or only the current directory.
            </param>
            <returns>
            A <b>String</b> array containing containing the names of files in the 
            specified directory that match the specified search pattern.
            </returns>
        </member>
        <member name="M:NeoAxis.VirtualDirectory.GetDirectories(System.String)">
            <summary>
            Gets the names of subdirectories in the specified directory.
            </summary>
            <param name="path">The path for which an array of subdirectory names is returned.</param>
            <returns>An array of type <b>String</b> containing the names of subdirectories in path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualDirectory.GetDirectories(System.String,System.String)">
            <summary>
            Gets an array of directories matching the specified search pattern from the 
            current directory.
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The parameter cannot 
            end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any 
            of the characters in InvalidPathChars.
            </param>
            <returns>
            A <b>String</b> array of directories matching the search pattern. 
            </returns>
        </member>
        <member name="M:NeoAxis.VirtualDirectory.GetDirectories(System.String,System.String,System.IO.SearchOption)">
            <summary>
            Gets an array of directories matching the specified search pattern from the 
            current directory, using a value to determine whether to search subdirectories. 
            </summary>
            <param name="path">The path to search.</param>
            <param name="searchPattern">
            The search string to match against the names of files in path. The parameter 
            cannot end in two periods ("..") or contain two periods ("..") followed by 
            DirectorySeparatorChar or AltDirectorySeparatorChar, nor can it contain any 
            of the characters in InvalidPathChars.
            </param>
            <param name="searchOption">
            One of the SearchOption values that specifies whether the search operation 
            should include all subdirectories or only the current directory.
            </param>
            <returns>
            A <b>String</b> array of directories matching the search pattern. 
            </returns>
        </member>
        <member name="T:NeoAxis.VirtualFile">
            <summary>
            Defines a file for virtual file system.
            </summary>
        </member>
        <member name="M:NeoAxis.VirtualFile.Exists(System.String)">
            <summary>
            Determines whether the specified file exists. 
            </summary>
            <param name="path">The file to check.</param>
            <returns><b>true</b> if the file is exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.VirtualFile.CalculateChecksumCRC32(System.String)">
            <summary>
            Calculates the check sum of a file.
            </summary>
            <param name="path">The virtual file path.</param>
        </member>
        <member name="T:NeoAxis.VirtualFileSystem">
            <summary>
            Class for the implementation of the virtual file system.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualFileSystem.Directories">
            <summary>
            Provides files paths to engine and project folders.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.Project">
            <summary>
            The full path to project folder. It is one level upper more than Assets folder.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.Assets">
            <summary>
            The full path to Assets folder.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.UserSettings">
            <summary>
            The full path to updatable user settings and logs.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.Binaries">
            <summary>
            The full path to managed binaries.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.EngineInternal">
            <summary>
            The full path to internal data and native binaries on some platforms.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.PlatformSpecific">
            <summary>
            The full path to native binaries of current platform.
            </summary>
        </member>
        <member name="P:NeoAxis.VirtualFileSystem.Directories.AllFiles">
            <summary>
            The full path to top folder, it includes Project and Sources folders. It is one level upper more than Project folder and two levels upper more than Assets folder.
            </summary>
        </member>
        <member name="M:NeoAxis.VirtualFileSystem.CorrectCurrentDirectory">
            <summary>
            Reset the current directory of the application.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualFileWatcher">
            <summary>
            A class for tracking changes to a virtual file system.
            </summary>
        </member>
        <member name="T:NeoAxis.VirtualPathUtility">
            <summary>
            Helper class for working with virtual file paths.
            </summary>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetVirtualPathByReal(System.String,System.Boolean)">
            <summary>
            Converts a file path of real file system to path of virtual file system.
            </summary>
            <param name="realPath">The real file path.</param>
            <returns>The virtual file path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetRealPathByVirtual(System.String)">
            <summary>
            Converts a file path of virtual file system to path of real file system.
            </summary>
            <param name="virtualPath">The virtual file path.</param>
            <returns>The real file path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetProjectPathByReal(System.String)">
            <summary>
            Converts a file path of real file system to a local project path.
            </summary>
            <param name="realPath">The real file path.</param>
            <returns>The virtual file path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetRealPathByProject(System.String)">
            <summary>
            Converts a local project path to path of real file system.
            </summary>
            <param name="projectPath">The virtual file path.</param>
            <returns>The real file path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetAllFilesPathByReal(System.String)">
            <summary>
            Converts a file path of real file system to all files path.
            </summary>
            <param name="realPath">The real file path.</param>
            <returns>The virtual file path.</returns>
        </member>
        <member name="M:NeoAxis.VirtualPathUtility.GetRealPathByAllFiles(System.String)">
            <summary>
            Converts all files path to path of real file system.
            </summary>
            <param name="projectPath">The virtual file path.</param>
            <returns>The real file path.</returns>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.Format">
            <summary>
            Compression format.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.Quality">
            <summary>
            Quality modes.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.WrapMode">
            <summary>
            Wrap modes.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.TextureType">
            <summary>
            Texture types.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.InputFormat">
            <summary>
            Input formats.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.MipmapFilter">
            <summary>
            Mipmap downsampling filters.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.ColorTransform">
            <summary>
            Color transformation.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.RoundMode">
            <summary>
            Extents rounding mode.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.AlphaMode">
            <summary>
            Alpha mode.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.Error">
            <summary>
            Error codes.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.InputOptions">
            <summary>
            Input options.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.CompressionOptions">
            <summary>
            Compression options.
            </summary>
        </member>
        <member name="T:NeoAxis.NvidiaTextureTools.OutputOptions">
            <summary>
            Output options.
            </summary>
        </member>
        <member name="T:NeoAxis.Angles">
            <summary>
            Represents double precision Euler angles.
            </summary>
        </member>
        <member name="F:NeoAxis.Angles.Roll">
            <summary>
            The angle of rotation about the X axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.Angles.Pitch">
            <summary>
            The angle of rotation about the Y axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.Angles.Yaw">
            <summary>
            The angle of rotation about the Z axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.Angles.Zero">
            <summary>
            Returns the Euler angles with all of its components set to zero.
            </summary>
        </member>
        <member name="M:NeoAxis.Angles.#ctor(NeoAxis.Vector3)">
            <summary>
            Constructs Euler angles with the given <see cref="T:NeoAxis.Vector3"/> object.
            </summary>
            <param name="v">The given vector.</param>
        </member>
        <member name="M:NeoAxis.Angles.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs Euler angles with the given angles of rotation.
            </summary>
            <param name="roll">The angle of rotation about the X axis.</param>
            <param name="pitch">The angle of rotation about the Y axis.</param>
            <param name="yaw">The angle of rotation about the Z axis.</param>
        </member>
        <member name="M:NeoAxis.Angles.#ctor(NeoAxis.Angles)">
            <summary>
            Constructs Euler angles with another specified <see cref="T:NeoAxis.Angles"/> object.
            </summary>
            <param name="source">Euler angles of <see cref="T:NeoAxis.Angles"/> format.</param>
        </member>
        <member name="M:NeoAxis.Angles.Parse(System.String)">
            <summary>
            Converts a string representation of Euler angles into the equivalent <see cref="T:NeoAxis.Angles"/> structure.
            </summary>
            <param name="text">The string representation of Euler angles (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Angles"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Angles.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Angles"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Angles"/>.</returns>
        </member>
        <member name="M:NeoAxis.Angles.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Angles"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Angles"/>.</returns>
        </member>
        <member name="M:NeoAxis.Angles.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Angles"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Angles"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Angles"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Angles.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="P:NeoAxis.Angles.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the roll, pitch, or yaw component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the roll component, 1 for the pitch component, and 2 for the yaw component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Angles.op_Equality(NeoAxis.Angles,NeoAxis.Angles)">
            <summary>
            Determines whether two given Euler angles are equal.
            </summary>
            <param name="a">The first Euler angles to compare.</param>
            <param name="b">The second Euler angles to compare.</param>
            <returns>True if the Euler angles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_Inequality(NeoAxis.Angles,NeoAxis.Angles)">
            <summary>
            Determines whether two given Euler angles are unequal.
            </summary>
            <param name="a">The first Euler angles to compare.</param>
            <param name="b">The second Euler angles to compare.</param>
            <returns>True if the Euler angles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Angles.Equals(NeoAxis.Angles,System.Double)">
            <summary>
            Determines whether the specified Euler angles are equal to the current instance of <see cref="T:NeoAxis.Angles"/>
            with a given precision.
            </summary>
            <param name="a">The Euler angles to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified Euler angles are equal to the current instance of <see cref="T:NeoAxis.Angles"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_UnaryNegation(NeoAxis.Angles)">
            <summary>
            Negates Euler angles.
            </summary>
            <param name="a">The Euler angles to negate.</param>
            <returns>The negated Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_Addition(NeoAxis.Angles,NeoAxis.Angles)">
            <summary>
            Adds two Euler angles.
            </summary>
            <param name="a">The first Euler angles to add.</param>
            <param name="b">The second Euler angles to add.</param>
            <returns>The sum of the two Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_Subtraction(NeoAxis.Angles,NeoAxis.Angles)">
            <summary>
            Subtracts Euler angles.
            </summary>
            <param name="a">The Euler angles to subtract from.</param>
            <param name="b">The Euler angles to be subtracted from another Euler angles.</param>
            <returns>The difference between the two Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_Multiply(NeoAxis.Angles,System.Double)">
            <summary>
            Multiplies Euler angles by a given value.
            </summary>
            <param name="a">The Euler angles to multiply.</param>
            <param name="b">The value by which to multiply.</param>
            <returns>The scaled Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.Angles.op_Division(NeoAxis.Angles,System.Double)">
            <summary>
            Divides Euler angles by a given scalar.
            </summary>
            <param name="a">The Euler angles to divide.</param>
            <param name="b">The scalar value.</param>
            <returns>The scaled Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.Angles.Clamp(NeoAxis.Angles,NeoAxis.Angles)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Angles"/> to be within a specified range.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:NeoAxis.Angles.ToQuaternion">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Angles"/> into the equivalent <see cref="T:NeoAxis.Quaternion"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Quaternion"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Angles.Normalize360">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Angles"/> to be within a range [0, 360].
            </summary>
        </member>
        <member name="M:NeoAxis.Angles.Normalize180">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Angles"/> to be within a range [-180, 180].
            </summary>
        </member>
        <member name="M:NeoAxis.Angles.ToAnglesF">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Angles"/> to the Euler angles of <see cref="T:NeoAxis.AnglesF"/> format.
            </summary>
            <returns>The Euler angles of <see cref="T:NeoAxis.AnglesF"/> format.</returns>
        </member>
        <member name="T:NeoAxis.AnglesF">
            <summary>
            Represents single precision Euler angles.
            </summary>
        </member>
        <member name="F:NeoAxis.AnglesF.Roll">
            <summary>
            The angle of rotation about the X axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.AnglesF.Pitch">
            <summary>
            The angle of rotation about the Y axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.AnglesF.Yaw">
            <summary>
            The angle of rotation about the Z axis in degrees.
            </summary>
        </member>
        <member name="F:NeoAxis.AnglesF.Zero">
            <summary>
            Returns the Euler angles with all of its components set to zero.
            </summary>
        </member>
        <member name="M:NeoAxis.AnglesF.#ctor(NeoAxis.Vector3F)">
            <summary>
            Constructs Euler angles with the given <see cref="T:NeoAxis.Vector3F"/> object.
            </summary>
            <param name="v">The given vector.</param>
        </member>
        <member name="M:NeoAxis.AnglesF.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs Euler angles with the given angles of rotation.
            </summary>
            <param name="roll">The angle of rotation about the X axis.</param>
            <param name="pitch">The angle of rotation about the Y axis.</param>
            <param name="yaw">The angle of rotation about the Z axis.</param>
        </member>
        <member name="M:NeoAxis.AnglesF.#ctor(NeoAxis.AnglesF)">
            <summary>
            Constructs Euler angles with another specified <see cref="T:NeoAxis.AnglesF"/> object.
            </summary>
            <param name="source">Euler angles of <see cref="T:NeoAxis.AnglesF"/> format.</param>
        </member>
        <member name="M:NeoAxis.AnglesF.Parse(System.String)">
            <summary>
            Converts a string representation of Euler angles into the equivalent <see cref="T:NeoAxis.AnglesF"/> structure.
            </summary>
            <param name="text">The string representation of Euler angles (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.AnglesF"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.AnglesF"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.AnglesF"/>.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.AnglesF"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.AnglesF"/>.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.AnglesF"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.AnglesF"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.AnglesF"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="P:NeoAxis.AnglesF.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the roll, pitch, or yaw component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the roll component, 1 for the pitch component, and 2 for the yaw component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Equality(NeoAxis.AnglesF,NeoAxis.AnglesF)">
            <summary>
            Determines whether two given Euler angles are equal.
            </summary>
            <param name="a">The first Euler angles to compare.</param>
            <param name="b">The second Euler angles to compare.</param>
            <returns>True if the Euler angles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Inequality(NeoAxis.AnglesF,NeoAxis.AnglesF)">
            <summary>
            Determines whether two given Euler angles are unequal.
            </summary>
            <param name="a">The first Euler angles to compare.</param>
            <param name="b">The second Euler angles to compare.</param>
            <returns>True if the Euler angles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.Equals(NeoAxis.AnglesF,System.Single)">
            <summary>
            Determines whether the specified Euler angles are equal to the current instance of <see cref="T:NeoAxis.AnglesF"/>
            with a given precision.
            </summary>
            <param name="a">The Euler angles to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified Euler angles are equal to the current instance of <see cref="T:NeoAxis.AnglesF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_UnaryNegation(NeoAxis.AnglesF)">
            <summary>
            Negates Euler angles.
            </summary>
            <param name="a">The Euler angles to negate.</param>
            <returns>The negated Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Addition(NeoAxis.AnglesF,NeoAxis.AnglesF)">
            <summary>
            Adds two Euler angles.
            </summary>
            <param name="a">The first Euler angles to add.</param>
            <param name="b">The second Euler angles to add.</param>
            <returns>The sum of the two Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Subtraction(NeoAxis.AnglesF,NeoAxis.AnglesF)">
            <summary>
            Subtracts two Euler angles.
            </summary>
            <param name="a">The Euler angles to subtract from.</param>
            <param name="b">The Euler angles to be subtracted from another Euler angles.</param>
            <returns>The difference between the two Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Multiply(NeoAxis.AnglesF,System.Single)">
            <summary>
            Multiplies Euler angles by a given value.
            </summary>
            <param name="a">The Euler angles to multiply.</param>
            <param name="b">The value by which to multiply.</param>
            <returns>The scaled Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Division(NeoAxis.AnglesF,System.Single)">
            <summary>
            Divides Euler angles by a given scalar.
            </summary>
            <param name="a">The Euler angles to divide.</param>
            <param name="b">The scalar value.</param>
            <returns>The scaled Euler angles.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.Clamp(NeoAxis.AnglesF,NeoAxis.AnglesF)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.AnglesF"/> to be within a specified range.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
        </member>
        <member name="M:NeoAxis.AnglesF.ToQuaternion">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.AnglesF"/> into the equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.Normalize360">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.AnglesF"/> to be within a range [0, 360].
            </summary>
        </member>
        <member name="M:NeoAxis.AnglesF.Normalize180">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.AnglesF"/> to be within a range [-180, 180].
            </summary>
        </member>
        <member name="M:NeoAxis.AnglesF.ToAngles">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.AnglesF"/> to the Euler angles of <see cref="T:NeoAxis.Angles"/> format.
            </summary>
            <returns>The Euler angles of <see cref="T:NeoAxis.Angles"/> format.</returns>
        </member>
        <member name="M:NeoAxis.AnglesF.op_Implicit(NeoAxis.AnglesF)~NeoAxis.Angles">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.AnglesF"/> type to <see cref="T:NeoAxis.Angles"/> type for the given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.Bounds">
            <summary>
            Represents a double precision axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.BoundsF">
            <summary>
            Represents a single precision axis-aligned bounding box in three dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.BoundsI">
            <summary>
            Represents an axis-aligned bounding box with integer values in three dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.Box">
            <summary>
            Represents a double precision oriented bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.Box.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.Box.Extents">
            <summary>
            The extents of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.Box.Axis">
            <summary>
            Axis of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.Box.Zero">
            <summary>
            The box with zero size.
            </summary>
        </member>
        <member name="F:NeoAxis.Box.Cleared">
            <summary>
            Not initialized box.
            </summary>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Box)">
            <summary>
            Constructs a box with another specified <see cref="T:NeoAxis.Box"/> object.
            </summary>
            <param name="source">A specified box.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Matrix3)">
            <summary>
            Constructs a box with the given center, extents and axis.
            </summary>
            <param name="center">The center <see cref="T:NeoAxis.Vector3"/>.</param>
            <param name="extents">The extents <see cref="T:NeoAxis.Vector3"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3"/>.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Vector3)">
            <summary>
            Constructs a box with the given center point.
            </summary>
            <param name="point">The center point <see cref="T:NeoAxis.Vector3"/>.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Bounds)">
            <summary>
            Constructs a box with the given bounds.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.Bounds"/>.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Bounds,NeoAxis.Vector3,NeoAxis.Matrix3)">
            <summary>
            Constructs a box with the given bounds, origin and axis.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.Bounds"/>.</param>
            <param name="origin">The origin <see cref="T:NeoAxis.Vector3"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3"/>.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.Bounds@,NeoAxis.Vector3@,NeoAxis.Matrix3@)">
            <summary>
            Constructs a box with the given bounds, origin and axis.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.Bounds"/>.</param>
            <param name="origin">The origin <see cref="T:NeoAxis.Vector3"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3"/>.</param>
        </member>
        <member name="M:NeoAxis.Box.#ctor(NeoAxis.BoxF)">
            <summary>
            Constructs a box with another specified box of <see cref="T:NeoAxis.BoxF"/> format.
            </summary>
            <param name="source">A specified box.</param>
        </member>
        <member name="M:NeoAxis.Box.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Box"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Box"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Box.op_Equality(NeoAxis.Box,NeoAxis.Box)">
            <summary>
            Determines whether two given boxes are equal.
            </summary>
            <param name="v1">The first box to compare.</param>
            <param name="v2">The second box to compare.</param>
            <returns>True if the boxes are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.op_Inequality(NeoAxis.Box,NeoAxis.Box)">
            <summary>
            Determines whether two given boxes are unequal.
            </summary>
            <param name="v1">The first box to compare.</param>
            <param name="v2">The second box to compare.</param>
            <returns>True if the boxes are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Equals(NeoAxis.Box,System.Double)">
            <summary>
            Determines whether the specified box is equal to the current instance of <see cref="T:NeoAxis.Box"/>
            with a given precision.
            </summary>
            <param name="v">The box to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified box is equal to the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.IsCleared">
            <summary>
            Determines whether the box is not initialized.
            </summary>
            <returns>True if the box is not initialized; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetVolume">
            <summary>
            Returns the volume of the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <returns>The volume of the box.</returns>
        </member>
        <member name="M:NeoAxis.Box.Expand(System.Double)">
            <summary>
            Expands the current instance of <see cref="T:NeoAxis.Box"/> by a given value.
            </summary>
            <param name="d">The value by which to expand.</param>
        </member>
        <member name="M:NeoAxis.Box.op_Addition(NeoAxis.Box,NeoAxis.Vector3)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3"/> to add.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.op_Multiply(NeoAxis.Box,NeoAxis.Matrix3)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.op_Multiply(NeoAxis.Box,NeoAxis.Matrix4)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.Add(NeoAxis.Box@,NeoAxis.Vector3@,NeoAxis.Box@)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3"/> to add.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.Box.Multiply(NeoAxis.Box@,NeoAxis.Matrix3@,NeoAxis.Box@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3"/> to multiply.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.Box.Multiply(NeoAxis.Box@,NeoAxis.Matrix4@,NeoAxis.Box@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4"/> to multiply.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.Box.Add(NeoAxis.Box@,NeoAxis.Vector3@)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3"/> to add.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.Multiply(NeoAxis.Box@,NeoAxis.Matrix3@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.Multiply(NeoAxis.Box@,NeoAxis.Matrix4@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.Box"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.Box.ToPoints">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> into the box corners array and returns the result.
            </summary>
            <returns>The resulting box corners array.</returns>
        </member>
        <member name="M:NeoAxis.Box.ToPoints(NeoAxis.Vector3[]@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> into the box corners array.
            </summary>
            <param name="points">The array for the box corners.</param>
        </member>
        <member name="M:NeoAxis.Box.ToPoints(NeoAxis.Vector3*)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> into the box corners array.
            </summary>
            <param name="points">The pointer to an array for the box corners.</param>
        </member>
        <member name="M:NeoAxis.Box.ToBounds">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> into the equivalent <see cref="T:NeoAxis.Bounds"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Bounds"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Box.ToBounds(NeoAxis.Bounds@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> into the equivalent <see cref="T:NeoAxis.Bounds"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Bounds"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Vector3@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains a given point.
            </summary>
            <param name="point">A point to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains a given point; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Vector3)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains a given point.
            </summary>
            <param name="point">A point to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains a given point; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Bounds@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains given bounds.
            </summary>
            <param name="bounds">Bounds to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains given bounds; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Bounds)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains given bounds.
            </summary>
            <param name="bounds">Bounds to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains given bounds; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Sphere@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains the given sphere.
            </summary>
            <param name="s">The sphere to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains the given sphere; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Sphere)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains the given sphere.
            </summary>
            <param name="s">The sphere to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains the given sphere; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Box@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains another instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains the given box; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Contains(NeoAxis.Box)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.Box"/> contains another instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.Box"/> contains the given box; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Ray,System.Double@,System.Double@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale1">When the method completes, contains the ray and box intersection min point.</param>
            <param name="scale2">When the method completes, contains the ray and box intersection max point.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Ray)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Box@)">
            <summary>
            Determines whether another instance of <see cref="T:NeoAxis.Box"/> intersects the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if another instance of <see cref="T:NeoAxis.Box"/> intersects the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Box)">
            <summary>
            Determines whether another instance of <see cref="T:NeoAxis.Box"/> intersects the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if another instance of <see cref="T:NeoAxis.Box"/> intersects the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Bounds@)">
            <summary>
            Determines whether the given bounds intersect the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="bounds">The bounds to check.</param>
            <returns>True if the given bounds intersect the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.Intersects(NeoAxis.Bounds)">
            <summary>
            Determines whether the given bounds intersect the current instance of <see cref="T:NeoAxis.Box"/>.
            </summary>
            <param name="bounds">The bounds to check.</param>
            <returns>True if the given bounds intersect the current instance of <see cref="T:NeoAxis.Box"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPlaneSide(NeoAxis.Plane@)">
            <summary>
            Determines from which side of the plane the box is on.
            </summary>
            <param name="plane">The plane to check against.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPlaneSide(NeoAxis.Plane)">
            <summary>
            Determines from which side of the plane the box is on.
            </summary>
            <param name="plane">The plane to check against.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPlaneDistance(NeoAxis.Plane@)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.Box"/> and the given plane.
            </summary>
            <param name="plane">The plane to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPlaneDistance(NeoAxis.Plane)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.Box"/> and the given plane.
            </summary>
            <param name="plane">The plane to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPointDistanceSquared(NeoAxis.Vector3)">
            <summary>
            Calculates the squared distance between the current instance of <see cref="T:NeoAxis.Box"/> and the given point.
            </summary>
            <param name="point">The point to calculate the squared distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.Box.GetPointDistance(NeoAxis.Vector3)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.Box"/> and the given point.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.Box.ToBoxF">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Box"/> to the box of <see cref="T:NeoAxis.BoxF"/> format.
            </summary>
            <returns>The box of <see cref="T:NeoAxis.BoxF"/> format.</returns>
        </member>
        <member name="T:NeoAxis.BoxF">
            <summary>
            Represents a single precision oriented bounding box in three dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.BoxF.Center">
            <summary>
            The center of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.BoxF.Extents">
            <summary>
            The extents of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.BoxF.Axis">
            <summary>
            Axis of the box.
            </summary>
        </member>
        <member name="F:NeoAxis.BoxF.Zero">
            <summary>
            The box with zero size.
            </summary>
        </member>
        <member name="F:NeoAxis.BoxF.Cleared">
            <summary>
            Not initialized box.
            </summary>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.BoxF)">
            <summary>
            Constructs a box with another specified <see cref="T:NeoAxis.BoxF"/> object.
            </summary>
            <param name="source">A specified box.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Matrix3F@)">
            <summary>
            Constructs a box with the given center, extents and axis.
            </summary>
            <param name="center">The center <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="extents">The extents <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3F"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Matrix3F)">
            <summary>
            Constructs a box with the given center, extents and axis.
            </summary>
            <param name="center">The center <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="extents">The extents <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3F"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.Vector3F)">
            <summary>
            Constructs a box with the given center point.
            </summary>
            <param name="point">The center point <see cref="T:NeoAxis.Vector3F"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.BoundsF)">
            <summary>
            Constructs a box with the given bounds.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.BoundsF"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.BoundsF,NeoAxis.Vector3F,NeoAxis.Matrix3F)">
            <summary>
            Constructs a box with the given bounds, origin and axis.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.BoundsF"/>.</param>
            <param name="origin">The origin <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3F"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.#ctor(NeoAxis.BoundsF@,NeoAxis.Vector3F@,NeoAxis.Matrix3F@)">
            <summary>
            Constructs a box with the given bounds, origin and axis.
            </summary>
            <param name="bounds">The <see cref="T:NeoAxis.BoundsF"/>.</param>
            <param name="origin">The origin <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="axis">The axis <see cref="T:NeoAxis.Matrix3F"/>.</param>
        </member>
        <member name="M:NeoAxis.BoxF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.BoxF"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.BoxF"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.op_Equality(NeoAxis.BoxF,NeoAxis.BoxF)">
            <summary>
            Determines whether two given boxes are equal.
            </summary>
            <param name="v1">The first box to compare.</param>
            <param name="v2">The second box to compare.</param>
            <returns>True if the boxes are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.op_Inequality(NeoAxis.BoxF,NeoAxis.BoxF)">
            <summary>
            Determines whether two given boxes are unequal.
            </summary>
            <param name="v1">The first box to compare.</param>
            <param name="v2">The second box to compare.</param>
            <returns>True if the boxes are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Equals(NeoAxis.BoxF,System.Single)">
            <summary>
            Determines whether the specified box is equal to the current instance of <see cref="T:NeoAxis.BoxF"/>
            with a given precision.
            </summary>
            <param name="v">The box to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified box is equal to the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.IsCleared">
            <summary>
            Determines whether the box is not initialized.
            </summary>
            <returns>True if the box is not initialized; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetVolume">
            <summary>
            Returns the volume of the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <returns>The volume of the box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Expand(System.Single)">
            <summary>
            Expands the current instance of <see cref="T:NeoAxis.BoxF"/> by a given value.
            </summary>
            <param name="d">The value by which to expand.</param>
        </member>
        <member name="M:NeoAxis.BoxF.op_Addition(NeoAxis.BoxF,NeoAxis.Vector3F)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3F"/> to add.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.op_Multiply(NeoAxis.BoxF,NeoAxis.Matrix3F)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3F"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.op_Multiply(NeoAxis.BoxF,NeoAxis.Matrix4F)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4F"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Add(NeoAxis.BoxF@,NeoAxis.Vector3F@,NeoAxis.BoxF@)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3F"/> to add.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.BoxF.Multiply(NeoAxis.BoxF@,NeoAxis.Matrix3F@,NeoAxis.BoxF@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3F"/> to multiply.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.BoxF.Multiply(NeoAxis.BoxF@,NeoAxis.Matrix4F@,NeoAxis.BoxF@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4F"/> to multiply.</param>
            <param name="result">When the method completes, contains the resulting box.</param>
        </member>
        <member name="M:NeoAxis.BoxF.Add(NeoAxis.BoxF@,NeoAxis.Vector3F@)">
            <summary>
            Addition of a given box and a vector.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to add.</param>
            <param name="v">The <see cref="T:NeoAxis.Vector3F"/> to add.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Multiply(NeoAxis.BoxF@,NeoAxis.Matrix3F@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix3F"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Multiply(NeoAxis.BoxF@,NeoAxis.Matrix4F@)">
            <summary>
            Multiplication of a given box and a matrix.
            </summary>
            <param name="b">The <see cref="T:NeoAxis.BoxF"/> to multiply.</param>
            <param name="m">The <see cref="T:NeoAxis.Matrix4F"/> to multiply.</param>
            <returns>The resulting box.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.ToPoints">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> into the box corners array and returns the result.
            </summary>
            <returns>The resulting box corners array.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.ToPoints(NeoAxis.Vector3F[]@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> into the box corners array.
            </summary>
            <param name="points">The array for the box corners.</param>
        </member>
        <member name="M:NeoAxis.BoxF.ToPoints(NeoAxis.Vector3F*)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> into the box corners array.
            </summary>
            <param name="points">The pointer to an array for the box corners.</param>
        </member>
        <member name="M:NeoAxis.BoxF.ToBounds">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> into the equivalent <see cref="T:NeoAxis.BoundsF"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.BoundsF"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.ToBounds(NeoAxis.BoundsF@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> into the equivalent <see cref="T:NeoAxis.BoundsF"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.BoundsF"/> structure.</param>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.Vector3F@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains a given point.
            </summary>
            <param name="point">A point to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains a given point; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.Vector3F)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains a given point.
            </summary>
            <param name="point">A point to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains a given point; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.BoundsF@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains given bounds.
            </summary>
            <param name="bounds">Bounds to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains given bounds; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.BoundsF)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains given bounds.
            </summary>
            <param name="bounds">Bounds to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains given bounds; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.SphereF@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given sphere.
            </summary>
            <param name="s">The sphere to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given sphere; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.SphereF)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given sphere.
            </summary>
            <param name="s">The sphere to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given sphere; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.BoxF@)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains another instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given box; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Contains(NeoAxis.BoxF)">
            <summary>
            Determines whether the current instance of <see cref="T:NeoAxis.BoxF"/> contains another instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if the current instance of <see cref="T:NeoAxis.BoxF"/> contains the given box; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.RayF@,System.Single@,System.Single@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale1">When the method completes, contains the ray and box intersection min point.</param>
            <param name="scale2">When the method completes, contains the ray and box intersection max point.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.RayF,System.Single@,System.Single@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale1">When the method completes, contains the ray and box intersection min point.</param>
            <param name="scale2">When the method completes, contains the ray and box intersection max point.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.RayF@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.RayF)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.BoxF@)">
            <summary>
            Determines whether another instance of <see cref="T:NeoAxis.BoxF"/> intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if another instance of <see cref="T:NeoAxis.BoxF"/> intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.BoxF)">
            <summary>
            Determines whether another instance of <see cref="T:NeoAxis.BoxF"/> intersects the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="box">The box to check.</param>
            <returns>True if another instance of <see cref="T:NeoAxis.BoxF"/> intersects the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.BoundsF@)">
            <summary>
            Determines whether the given bounds intersect the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="bounds">The bounds to check.</param>
            <returns>True if the given bounds intersect the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.Intersects(NeoAxis.BoundsF)">
            <summary>
            Determines whether the given bounds intersect the current instance of <see cref="T:NeoAxis.BoxF"/>.
            </summary>
            <param name="bounds">The bounds to check.</param>
            <returns>True if the given bounds intersect the current instance of <see cref="T:NeoAxis.BoxF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPlaneSide(NeoAxis.PlaneF@)">
            <summary>
            Determines from which side of the plane the box is on.
            </summary>
            <param name="plane">The plane to check against.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPlaneSide(NeoAxis.PlaneF)">
            <summary>
            Determines from which side of the plane the box is on.
            </summary>
            <param name="plane">The plane to check against.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPlaneDistance(NeoAxis.PlaneF@)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.BoxF"/> and the given plane.
            </summary>
            <param name="plane">The plane to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPlaneDistance(NeoAxis.PlaneF)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.BoxF"/> and the given plane.
            </summary>
            <param name="plane">The plane to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPointDistanceSquared(NeoAxis.Vector3F)">
            <summary>
            Calculates the squared distance between the current instance of <see cref="T:NeoAxis.BoxF"/> and the given point.
            </summary>
            <param name="point">The point to calculate the squared distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.GetPointDistance(NeoAxis.Vector3F)">
            <summary>
            Calculates the distance between the current instance of <see cref="T:NeoAxis.BoxF"/> and the given point.
            </summary>
            <param name="point">The point to calculate the distance from.</param>
            <returns>The resulting distance.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.ToBox">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.BoxF"/> to the box of <see cref="T:NeoAxis.Box"/> format.
            </summary>
            <returns>The box of <see cref="T:NeoAxis.Box"/> format.</returns>
        </member>
        <member name="M:NeoAxis.BoxF.op_Implicit(NeoAxis.BoxF)~NeoAxis.Box">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.BoxF"/> type to <see cref="T:NeoAxis.Box"/> type for the given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.Capsule">
            <summary>
            Represents a double precision capsule shape.
            </summary>
        </member>
        <member name="T:NeoAxis.Capsule2">
            <summary>
            Represents a double precision 2D capsule shape.
            </summary>
        </member>
        <member name="T:NeoAxis.Capsule2F">
            <summary>
            Represents a single precision 2D capsule shape.
            </summary>
        </member>
        <member name="T:NeoAxis.CapsuleF">
            <summary>
            Represents a single precision capsule shape.
            </summary>
        </member>
        <member name="T:NeoAxis.Circle">
            <summary>
            Represents a double precision circle shape.
            </summary>
        </member>
        <member name="T:NeoAxis.CircleF">
            <summary>
            Represents a single precision circle shape.
            </summary>
        </member>
        <member name="T:NeoAxis.ColorByte">
            <summary>
            Describes a 32-bit packed color.
            </summary>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(System.UInt32)">
            <summary>
            Constructs an RGBA color from a packed value.
            The value is a 32-bit unsigned integer, with R in the least significant octet.
            </summary>
            <param name="packedValue">The packed value.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(NeoAxis.Vector4)">
            <summary>
            Constructs an RGBA color from the XYZW unit length components of a vector.
            </summary>
            <param name="color">A <see cref="T:NeoAxis.Vector4"/> representing color.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(NeoAxis.Vector3)">
            <summary>
            Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque.
            </summary>
            <param name="color">A <see cref="T:NeoAxis.Vector3"/> representing color.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(NeoAxis.Vector4F)">
            <summary>
            Constructs an RGBA color from the XYZW unit length components of a vector.
            </summary>
            <param name="color">A <see cref="T:NeoAxis.Vector4"/> representing color.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(NeoAxis.Vector3F)">
            <summary>
            Constructs an RGBA color from the XYZ unit length components of a vector. Alpha value will be opaque.
            </summary>
            <param name="color">A <see cref="T:NeoAxis.Vector3"/> representing color.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="r">Red component value from 0.0f to 1.0f.</param>
            <param name="g">Green component value from 0.0f to 1.0f.</param>
            <param name="b">Blue component value from 0.0f to 1.0f.</param>
            <param name="alpha">Alpha component value from 0.0f to 1.0f.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <param name="red">Red component value from 0 to 255.</param>
            <param name="green">Green component value from 0 to 255.</param>
            <param name="blue">Blue component value from 0 to 255.</param>
            <param name="alpha">Alpha component value from 0 to 255.</param>
        </member>
        <member name="M:NeoAxis.ColorByte.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Constructs an RGBA color from scalars representing red, green, blue and alpha values.
            </summary>
            <remarks>
            This overload sets the values directly without clamping, and may therefore be faster than the other overloads.
            </remarks>
            <param name="red"></param>
            <param name="green"></param>
            <param name="blue"></param>
            <param name="alpha"></param>
        </member>
        <member name="P:NeoAxis.ColorByte.Blue">
            <summary>
            Gets or sets the blue component.
            </summary>
        </member>
        <member name="P:NeoAxis.ColorByte.Green">
            <summary>
            Gets or sets the green component.
            </summary>
        </member>
        <member name="P:NeoAxis.ColorByte.Red">
            <summary>
            Gets or sets the red component.
            </summary>
        </member>
        <member name="P:NeoAxis.ColorByte.Alpha">
            <summary>
            Gets or sets the alpha component.
            </summary>
        </member>
        <member name="M:NeoAxis.ColorByte.op_Equality(NeoAxis.ColorByte,NeoAxis.ColorByte)">
            <summary>
            Compares whether two <see cref="T:NeoAxis.ColorByte"/> instances are equal.
            </summary>
            <param name="a"><see cref="T:NeoAxis.ColorByte"/> instance on the left of the equal sign.</param>
            <param name="b"><see cref="T:NeoAxis.ColorByte"/> instance on the right of the equal sign.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ColorByte.op_Inequality(NeoAxis.ColorByte,NeoAxis.ColorByte)">
            <summary>
            Compares whether two <see cref="T:NeoAxis.ColorByte"/> instances are not equal.
            </summary>
            <param name="a"><see cref="T:NeoAxis.ColorByte"/> instance on the left of the not equal sign.</param>
            <param name="b"><see cref="T:NeoAxis.ColorByte"/> instance on the right of the not equal sign.</param>
            <returns><c>true</c> if the instances are not equal; <c>false</c> otherwise.</returns>	
        </member>
        <member name="M:NeoAxis.ColorByte.GetHashCode">
            <summary>
            Gets the hash code of this <see cref="T:NeoAxis.ColorByte"/>.
            </summary>
            <returns>Hash code of this <see cref="T:NeoAxis.ColorByte"/>.</returns>
        </member>
        <member name="M:NeoAxis.ColorByte.Equals(System.Object)">
            <summary>
            Compares whether current instance is equal to specified object.
            </summary>
            <param name="obj">The <see cref="T:NeoAxis.ColorByte"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ColorByte.Lerp(NeoAxis.ColorByte,NeoAxis.ColorByte,System.Double)">
            <summary>
            Performs linear interpolation of <see cref="T:NeoAxis.ColorByte"/>.
            </summary>
            <param name="value1">Source <see cref="T:NeoAxis.ColorByte"/>.</param>
            <param name="value2">Destination <see cref="T:NeoAxis.ColorByte"/>.</param>
            <param name="amount">Interpolation factor.</param>
            <returns>Interpolated <see cref="T:NeoAxis.ColorByte"/>.</returns>
        </member>
        <member name="P:NeoAxis.ColorByte.PackedValue">
            <summary>
            Gets or sets packed value of this <see cref="!:ColorPacked"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.ColorByte.Equals(NeoAxis.ColorByte)">
            <summary>
            Compares whether current instance is equal to specified <see cref="!:ColorPacked"/>.
            </summary>
            <param name="other">The <see cref="!:ColorPacked"/> to compare.</param>
            <returns><c>true</c> if the instances are equal; <c>false</c> otherwise.</returns>
        </member>
        <member name="T:NeoAxis.ColorValueNoAlphaAttribute">
            <summary>
            Helper for the toolset. Turns off the ability to change alpha channel for color in the properties.
            </summary>
        </member>
        <member name="T:NeoAxis.ColorValue">
            <summary>
            Represents a color in the form of RGBA.
            </summary>
        </member>
        <member name="M:NeoAxis.ColorValue.ToVector4H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into the equivalent <see cref="T:NeoAxis.Vector2H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.ColorValue.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.ColorValue"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.ColorValue"/>.</returns>
        </member>
        <member name="T:NeoAxis.ColorValuePowered">
            <summary>
            Represents a color in the form of RGBA with power component.
            </summary>
        </member>
        <member name="T:NeoAxis.Cone">
            <summary>
            Represents a double precision cone shape.
            </summary>
        </member>
        <member name="F:NeoAxis.Cone.Origin">
            <summary>
            The origin of the cone.
            </summary>
        </member>
        <member name="F:NeoAxis.Cone.Axis">
            <summary>
            The axis of the cone.
            </summary>
        </member>
        <member name="F:NeoAxis.Cone.Angle">
            <summary>
            The angle of the cone.
            </summary>
        </member>
        <member name="M:NeoAxis.Cone.#ctor(NeoAxis.Cone)">
            <summary>
            Constructs a cone with another specified <see cref="T:NeoAxis.Cone"/> object.
            </summary>
            <param name="source">A specified cone.</param>
        </member>
        <member name="M:NeoAxis.Cone.#ctor(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Radian)">
            <summary>
            Constructs a cone with the given origin, axis and angle.
            </summary>
            <param name="origin">The origin.</param>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:NeoAxis.Cone.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Cone"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Cone"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Cone"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Cone.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Cone.op_Equality(NeoAxis.Cone,NeoAxis.Cone)">
            <summary>
            Determines whether two given cones are equal.
            </summary>
            <param name="v1">The first cone to compare.</param>
            <param name="v2">The second cone to compare.</param>
            <returns>True if the cones are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Cone.op_Inequality(NeoAxis.Cone,NeoAxis.Cone)">
            <summary>
            Determines whether two given cones are unequal.
            </summary>
            <param name="v1">The first cone to compare.</param>
            <param name="v2">The second cone to compare.</param>
            <returns>True if the cones are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Cone.Equals(NeoAxis.Cone,System.Double)">
            <summary>
            Determines whether the specified cone is equal to the current instance of <see cref="T:NeoAxis.Cone"/>
            with a given precision.
            </summary>
            <param name="v">The cone to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified cone is equal to the current instance of <see cref="T:NeoAxis.Cone"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Cone.Intersects(NeoAxis.Sphere)">
            <summary>
            Determines whether the given sphere intersects the current instance of <see cref="T:NeoAxis.Cone"/>.
            </summary>
            <param name="sphere">The sphere to check.</param>
            <returns>True if the given sphere intersects the current instance of <see cref="T:NeoAxis.Cone"/>; False otherwise.</returns>
        </member>
        <member name="T:NeoAxis.ConeF">
            <summary>
            Represents a single precision cone shape.
            </summary>
        </member>
        <member name="F:NeoAxis.ConeF.Origin">
            <summary>
            The origin of the cone.
            </summary>
        </member>
        <member name="F:NeoAxis.ConeF.Axis">
            <summary>
            The axis of the cone.
            </summary>
        </member>
        <member name="F:NeoAxis.ConeF.Angle">
            <summary>
            The angle of the cone.
            </summary>
        </member>
        <member name="M:NeoAxis.ConeF.#ctor(NeoAxis.ConeF)">
            <summary>
            Constructs a cone with another specified <see cref="T:NeoAxis.ConeF"/> object.
            </summary>
            <param name="source">A specified cone.</param>
        </member>
        <member name="M:NeoAxis.ConeF.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.RadianF)">
            <summary>
            Constructs a cone with the given origin, axis and angle.
            </summary>
            <param name="origin">The origin.</param>
            <param name="axis">The axis.</param>
            <param name="angle">The angle.</param>
        </member>
        <member name="M:NeoAxis.ConeF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.ConeF"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.ConeF"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.ConeF"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.op_Equality(NeoAxis.ConeF,NeoAxis.ConeF)">
            <summary>
            Determines whether two given cones are equal.
            </summary>
            <param name="v1">The first cone to compare.</param>
            <param name="v2">The second cone to compare.</param>
            <returns>True if the cones are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.op_Inequality(NeoAxis.ConeF,NeoAxis.ConeF)">
            <summary>
            Determines whether two given cones are unequal.
            </summary>
            <param name="v1">The first cone to compare.</param>
            <param name="v2">The second cone to compare.</param>
            <returns>True if the cones are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.Equals(NeoAxis.ConeF,System.Single)">
            <summary>
            Determines whether the specified cone is equal to the current instance of <see cref="T:NeoAxis.ConeF"/>
            with a given precision.
            </summary>
            <param name="v">The cone to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified cone is equal to the current instance of <see cref="T:NeoAxis.ConeF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.Intersects(NeoAxis.SphereF)">
            <summary>
            Determines whether the given sphere intersects the current instance of <see cref="T:NeoAxis.ConeF"/>.
            </summary>
            <param name="sphere">The sphere to check.</param>
            <returns>True if the given sphere intersects the current instance of <see cref="T:NeoAxis.ConeF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.ToCone">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.ConeF"/> to the triangle of <see cref="T:NeoAxis.Cone"/> format.
            </summary>
            <returns>The triangle of <see cref="T:NeoAxis.Cone"/> format.</returns>
        </member>
        <member name="M:NeoAxis.ConeF.op_Implicit(NeoAxis.ConeF)~NeoAxis.Cone">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.ConeF"/> type to <see cref="T:NeoAxis.Cone"/> type for the given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.ConvexDecomposition">
            <summary>
            Class for calculating convex shapes by a mesh. VHACD library is used.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexDecomposition.VHACD_Compute32(System.Single*,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Compute convex hulls
            </summary>
            <param name="points"></param>
            <param name="pointCount"></param>
            <param name="triangles"></param>
            <param name="triangleCount"></param>
            <param name="maxConvexHulls">Maximum number of convex hulls to produce</param>
            <param name="maxConvexTriangles">maximum number of triangles per convex-hull (default = 64, range = 4 - 1024)</param>
            <param name="minConvexVolume">Controls the adaptive sampling of the generated convex-hulls (default=0.0001, range=0.0-0.01)</param>
            <param name="convexApproximation">Enable/disable approximation when computing convex-hulls (default = 1)</param>
            <param name="maxResolution">Maximum number of voxels generated during the voxelization stage (default = 100,000, range = 10,000 - 16,000,000)</param>
            <param name="maxConcavity">Maximum allowed concavity (default=0.0025, range=0.0-1.0)</param>
            <param name="alpha">Controls the bias toward clipping along symmetry planes (default=0.05, range=0.0-1.0)</param>
            <param name="beta">Controls the bias toward clipping along revolution axes (default=0.05, range=0.0-1.0)</param>
            <param name="planeDownsampling">Controls the granularity of the search for the \"best\" clipping plane (default=4, range=1-16)</param>
            <param name="hullDownsampling">Controls the precision of the convex-hull generation process during the clipping plane selection stage (default=4, range=1-16)</param>
            <param name="normalizeMesh">Enable/disable normalizing the mesh before applying the convex decomposition (default = 0)</param>
            <param name="tetrahedronMode">0: voxel-based approximate convex decomposition, 1: tetrahedron-based approximate convex decomposition (default=0)</param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.ConvexDecomposition.VHACD_Compute64(System.Double*,System.Int32,System.Int32*,System.Int32,System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Compute convex hulls
            </summary>
            <param name="points"></param>
            <param name="pointCount"></param>
            <param name="triangles"></param>
            <param name="triangleCount"></param>
            <param name="maxConvexHulls">Maximum number of convex hulls to produce</param>
            <param name="maxConvexTriangles">maximum number of triangles per convex-hull (default = 64, range = 4 - 1024)</param>
            <param name="minConvexVolume">Controls the adaptive sampling of the generated convex-hulls (default=0.0001, range=0.0-0.01)</param>
            <param name="convexApproximation">Enable/disable approximation when computing convex-hulls (default = 1)</param>
            <param name="maxResolution">Maximum number of voxels generated during the voxelization stage (default = 100,000, range = 10,000 - 16,000,000)</param>
            <param name="maxConcavity">Maximum allowed concavity (default=0.0025, range=0.0-1.0)</param>
            <param name="alpha">Controls the bias toward clipping along symmetry planes (default=0.05, range=0.0-1.0)</param>
            <param name="beta">Controls the bias toward clipping along revolution axes (default=0.05, range=0.0-1.0)</param>
            <param name="planeDownsampling">Controls the granularity of the search for the \"best\" clipping plane (default=4, range=1-16)</param>
            <param name="hullDownsampling">Controls the precision of the convex-hull generation process during the clipping plane selection stage (default=4, range=1-16)</param>
            <param name="normalizeMesh">Enable/disable normalizing the mesh before applying the convex decomposition (default = 0)</param>
            <param name="tetrahedronMode">0: voxel-based approximate convex decomposition, 1: tetrahedron-based approximate convex decomposition (default=0)</param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.ConvexDecomposition.Cluster">
            <summary>
            Represents a cluster of data for <see cref="T:NeoAxis.ConvexDecomposition"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexDecomposition.Decompose(NeoAxis.Vector3F[],System.Int32[],System.Int32,System.Int32,System.Double,System.Boolean,System.Int32,System.Double,System.Double,System.Double,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="maxConvexHulls">Maximum number of convex hulls to produce</param>
            <param name="maxConvexTriangles">maximum number of triangles per convex-hull (default = 64, range = 4 - 1024)</param>
            <param name="minConvexVolume">Controls the adaptive sampling of the generated convex-hulls (default=0.0001, range=0.0-0.01)</param>
            <param name="convexApproximation">Enable/disable approximation when computing convex-hulls (default = 1)</param>
            <param name="maxResolution">Maximum number of voxels generated during the voxelization stage (default = 100,000, range = 10,000 - 16,000,000)</param>
            <param name="maxConcavity">Maximum allowed concavity (default=0.0025, range=0.0-1.0)</param>
            <param name="alpha">Controls the bias toward clipping along symmetry planes (default=0.05, range=0.0-1.0)</param>
            <param name="beta">Controls the bias toward clipping along revolution axes (default=0.05, range=0.0-1.0)</param>
            <param name="planeDownsampling">Controls the granularity of the search for the \"best\" clipping plane (default=4, range=1-16)</param>
            <param name="hullDownsampling">Controls the precision of the convex-hull generation process during the clipping plane selection stage (default=4, range=1-16)</param>
            <param name="normalizeMesh">Enable/disable normalizing the mesh before applying the convex decomposition (default = 0)</param>
            <param name="tetrahedronMode">0: voxel-based approximate convex decomposition, 1: tetrahedron-based approximate convex decomposition (default=0)</param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.ConvexDecomposition.Settings">
            <summary>
            Represents a settings for <see cref="T:NeoAxis.ConvexDecomposition"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm">
            <summary>
            Class for calculating convex hull from a mesh.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create``2(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance (default is 1e-10). If too high, points 
            will be missed. If too low, the algorithm may break. Only adjust if you notice problems.</param>
            <returns>
            ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create``1(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance (default is 1e-10). If too high, points 
            will be missed. If too low, the algorithm may break. Only adjust if you notice problems.</param>
            <returns>
            ConvexHull&lt;TVertex, DefaultConvexFace&lt;TVertex&gt;&gt;.
            </returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create(System.Collections.Generic.IList{System.Double[]},System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance (default is 1e-10). If too high, points 
            will be missed. If too low, the algorithm may break. Only adjust if you notice problems.</param>
            <returns>
            ConvexHull&lt;DefaultVertex, DefaultConvexFace&lt;DefaultVertex&gt;&gt;.
            </returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create(NeoAxis.Vector3[],System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create(NeoAxis.Vector3F[],System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create(NeoAxis.Vector3[],System.Int32[],System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Create(NeoAxis.Vector3F[],System.Int32[],System.Double)">
            <summary>
            Creates a convex hull of the input data.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConvexHull`2">
            <summary>
            Representation of a convex hull.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConvexHull`2.#ctor">
            <summary>
            Can only be created using a factory method.
            </summary>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexHull`2.Points">
            <summary>
            Points of the convex hull.
            </summary>
            <value>The points.</value>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexHull`2.Faces">
            <summary>
            Faces of the convex hull.
            </summary>
            <value>The faces.</value>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConvexHull`2.Create(System.Collections.Generic.IList{`0},System.Double)">
            <summary>
            Creates the convex hull.
            </summary>
            <param name="data">The data.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
            <exception cref="T:System.ArgumentNullException">The supplied data is null.</exception>
            <exception cref="T:System.ArgumentNullException">data</exception>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.IVertex">
            <summary>
            An interface for a structure with nD position.
            </summary>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.IVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConvexFace`2">
            <summary>
            A convex face representation containing adjacency information.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <typeparam name="TFace">The type of the t face.</typeparam>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexFace`2.Adjacency">
            <summary>
            Adjacency. Array of length "dimension".
            If F = Adjacency[i] then the vertices shared with F are Vertices[j] where j != i.
            In the context of triangulation, can be null (indicates the cell is at boundary).
            </summary>
            <value>The adjacency.</value>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexFace`2.Vertices">
            <summary>
            The vertices stored in clockwise order for dimensions 2 - 4, in higher dimensions the order is arbitrary.
            Unless I accidentally switch some index somewhere in which case the order is CCW. Either way, it is consistent.
            3D Normal = (V[1] - V[0]) x (V[2] - V[1]).
            </summary>
            <value>The vertices.</value>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexFace`2.Normal">
            <summary>
            The normal vector of the face. Null if used in triangulation.
            </summary>
            <value>The normal.</value>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Constants.DefaultPlaneDistanceTolerance">
            <summary>
            The default plane distance tolerance
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Constants.StartingDeltaDotProductInSimplex">
            <summary>
            The starting delta dot product in simplex
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Constants.ConnectorTableSize">
            <summary>
            The connector table size
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.MemManager">
            <summary>
            A helper class for object allocation/storage.
            This helps the GC a lot as it prevents the creation of about 75% of
            new face objects (in the case of ConvexFaceInternal). In the case of
            FaceConnectors and DefferedFaces, the difference is even higher (in most
            cases O(1) vs O(number of created faces)).
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.Dimension">
            <summary>
            The dimension
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.ConnectorStack">
            <summary>
            The connector stack
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.DeferredFaceStack">
            <summary>
            The deferred face stack
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.EmptyBufferStack">
            <summary>
            The empty buffer stack
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.FacePool">
            <summary>
            The face pool
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.FacePoolSize">
            <summary>
            The face pool size
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.FacePoolCapacity">
            <summary>
            The face pool capacity
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.FreeFaceIndices">
            <summary>
            The free face indices
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MemManager.Hull">
            <summary>
            The hull
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.#ctor(NeoAxis.ConvexHullAlgorithm)">
            <summary>
            Create the manager.
            </summary>
            <param name="hull">The hull.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.DepositFace(System.Int32)">
            <summary>
            Return the face to the pool for later use.
            </summary>
            <param name="faceIndex">Index of the face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.ReallocateFacePool">
            <summary>
            Reallocate the face pool, including the AffectedFaceFlags
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.CreateFace">
            <summary>
            Create a new face and put it in the pool.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.GetFace">
            <summary>
            Return index of an unused face or creates a new one.
            </summary>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.DepositConnector(NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Store a face connector in the "embedded" linked list.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.GetConnector">
            <summary>
            Get an unused face connector. If none is available, create it.
            </summary>
            <returns>FaceConnector.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.DepositVertexBuffer(NeoAxis.ConvexHullAlgorithm.IndexBuffer)">
            <summary>
            Deposit the index buffer.
            </summary>
            <param name="buffer">The buffer.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.GetVertexBuffer">
            <summary>
            Get a store index buffer or create a new instance.
            </summary>
            <returns>IndexBuffer.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.DepositDeferredFace(NeoAxis.ConvexHullAlgorithm.DeferredFace)">
            <summary>
            Deposit the deferred face.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MemManager.GetDeferredFace">
            <summary>
            Get the deferred face.
            </summary>
            <returns>DeferredFace.</returns>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.MathHelper">
            <summary>
            A helper class mostly for normal computation. If convex hulls are computed
            in higher dimensions, it might be a good idea to add a specific
            FindNormalVectorND function.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.Dimension">
            <summary>
            The dimension
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.matrixPivots">
            <summary>
            The matrix pivots
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.nDMatrix">
            <summary>
            The n d matrix
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.nDNormalHelperVector">
            <summary>
            The n d normal helper vector
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.ntX">
            <summary>
            The nt x
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.ntY">
            <summary>
            The nt y
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.ntZ">
            <summary>
            The nt z
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MathHelper.PositionData">
            <summary>
            The position data
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.#ctor(System.Int32,System.Double[])">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ConvexHullAlgorithm.MathHelper"/> class.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="positions">The positions.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.CalculateFacePlane(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,System.Double[])">
            <summary>
            Calculates the normal and offset of the hyper-plane given by the face's vertices.
            </summary>
            <param name="face">The face.</param>
            <param name="center">The center.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.GetVertexDistance(System.Int32,NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Check if the vertex is "visible" from the face.
            The vertex is "over face" if the return value is &gt; Constants.PlaneDistanceTolerance.
            </summary>
            <param name="v">The v.</param>
            <param name="f">The f.</param>
            <returns>The vertex is "over face" if the result is positive.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.VectorBetweenVertices(System.Int32,System.Int32)">
            <summary>
            Returns the vector the between vertices.
            </summary>
            <param name="toIndex">To index.</param>
            <param name="fromIndex">From index.</param>
            <returns>System.Double[].</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.VectorBetweenVertices(System.Int32,System.Int32,System.Double[])">
            <summary>
            Returns the vector the between vertices.
            </summary>
            <param name="fromIndex">From index.</param>
            <param name="toIndex">To index.</param>
            <param name="target">The target.</param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.FindNormalVector(System.Int32[],System.Double[])">
            <summary>
            Finds normal vector of a hyper-plane given by vertices.
            Stores the results to normalData.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normalData">The normal data.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.FindNormalVector2D(System.Int32[],System.Double[])">
            <summary>
            Finds 2D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.FindNormalVector3D(System.Int32[],System.Double[])">
            <summary>
            Finds 3D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.FindNormalVector4D(System.Int32[],System.Double[])">
            <summary>
            Finds 4D normal vector.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.FindNormalVectorND(System.Int32[],System.Double[])">
            <summary>
            Finds the normal vector nd.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="normal">The normal.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.GetSimplexVolume(System.Double[][],System.Int32,System.Double)">
            <summary>
            Gets the simplex volume. Prior to having enough edge vectors, the method pads the remaining with all
            "other numbers". So, yes, this method is not really finding the volume. But a relative volume-like measure. It
            uses the magnitude of the determinant as the volume stand-in following the Cayley-Menger theorem.
            </summary>
            <param name="edgeVectors">The edge vectors.</param>
            <param name="lastIndex">The last index.</param>
            <param name="bigNumber">The big number.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.DeterminantDestructive(System.Double[])">
            <summary>
            Determinants the destructive.
            </summary>
            <param name="A">a.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MathHelper.LUFactor(System.Double[],System.Int32,System.Int32[],System.Double[])">
            <summary>
            Lus the factor.
            </summary>
            <param name="data">The data.</param>
            <param name="order">The order.</param>
            <param name="ipiv">The ipiv.</param>
            <param name="vecLUcolj">The vec l ucolj.</param>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.DeferredFace">
            <summary>
            For deferred face addition.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.DeferredFace.Face">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.DeferredFace.Pivot">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.DeferredFace.OldFace">
            <summary>
            The faces.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.DeferredFace.FaceIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.DeferredFace.PivotIndex">
            <summary>
            The indices.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.FaceConnector">
            <summary>
            A helper class used to connect faces.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.EdgeIndex">
            <summary>
            The edge to be connected.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.Face">
            <summary>
            The face.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.HashCode">
            <summary>
            The hash code computed from indices.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceConnector.Vertices">
            <summary>
            The vertex indices.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceConnector.#ctor(System.Int32)">
            <summary>
            Ctor.
            </summary>
            <param name="dimension">The dimension.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceConnector.Update(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,System.Int32,System.Int32)">
            <summary>
            Updates the connector.
            </summary>
            <param name="face">The face.</param>
            <param name="edgeIndex">Index of the edge.</param>
            <param name="dim">The dim.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceConnector.AreConnectable(NeoAxis.ConvexHullAlgorithm.FaceConnector,NeoAxis.ConvexHullAlgorithm.FaceConnector,System.Int32)">
            <summary>
            Can two faces be connected.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <param name="dim">The dim.</param>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceConnector.Connect(NeoAxis.ConvexHullAlgorithm.FaceConnector,NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Connect two faces.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal">
            <summary>
            This internal class manages the faces of the convex hull. It is a
            separate class from the desired user class.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.AdjacentFaces">
            <summary>
            Gets or sets the adjacent face data.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.FurthestVertex">
            <summary>
            The furthest vertex.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Index">
            <summary>
            Index of the face inside the pool.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.InList">
            <summary>
            Is it present in the list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.IsNormalFlipped">
            <summary>
            Is the normal flipped?
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Next">
            <summary>
            Next node in the list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Normal">
            <summary>
            Gets or sets the normal vector.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Offset">
            <summary>
            Face plane constant element.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Previous">
            <summary>
            Prev node in the list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Tag">
            <summary>
            Used to traverse affected faces and create the Delaunay representation.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.Vertices">
            <summary>
            Gets or sets the vertices.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.VerticesBeyond">
            <summary>
            Gets or sets the vertices beyond.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal.#ctor(System.Int32,System.Int32,NeoAxis.ConvexHullAlgorithm.IndexBuffer)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal" /> class.
            </summary>
            <param name="dimension">The dimension.</param>
            <param name="index">The index.</param>
            <param name="beyondList">The beyond list.</param>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.SimpleList`1">
            <summary>
            A more lightweight alternative to List of T.
            On clear, only resets the count and does not clear the references
            =&gt; this works because of the ObjectManager.
            Includes a stack functionality.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.SimpleList`1.capacity">
            <summary>
            The capacity
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Count">
            <summary>
            The count
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.SimpleList`1.items">
            <summary>
            The items
            </summary>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Item(System.Int32)">
            <summary>
            Get the i-th element.
            </summary>
            <param name="i">The i.</param>
            <returns>T.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SimpleList`1.EnsureCapacity">
            <summary>
            Size matters.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Add(`0)">
            <summary>
            Adds a vertex to the buffer.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Push(`0)">
            <summary>
            Pushes the value to the back of the list.
            </summary>
            <param name="item">The item.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Pop">
            <summary>
            Pops the last value from the list.
            </summary>
            <returns>T.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SimpleList`1.Clear">
            <summary>
            Sets the Count to 0, otherwise does nothing.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.IndexBuffer">
            <summary>
            Class IndexBuffer.
            A fancy name for a list of integers.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.FaceList">
            <summary>
            A priority based linked list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FaceList.last">
            <summary>
            The last
            </summary>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.FaceList.First">
            <summary>
            Get the first element.
            </summary>
            <value>The first.</value>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceList.AddFirst(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceList.Add(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FaceList.Remove(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConnectorList">
            <summary>
            Connector list.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConnectorList.last">
            <summary>
            The last
            </summary>
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConnectorList.First">
            <summary>
            Get the first element.
            </summary>
            <value>The first.</value>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConnectorList.AddFirst(NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Adds the element to the beginning.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConnectorList.Add(NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Adds a face to the list.
            </summary>
            <param name="element">The element.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConnectorList.Remove(NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Removes the element from the list.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.GetConvexHull``2(System.Collections.Generic.IList{``0},System.Double)">
            <summary>
            The main function for the Convex Hull algorithm. It is static, but it creates
            an instantiation of this class in order to allow for parallel execution.
            Following this simple function, the constructor and the main function "FindConvexHull" is listed.
            </summary>
            <typeparam name="TVertex">The type of the vertices in the data.</typeparam>
            <typeparam name="TFace">The desired type of the faces.</typeparam>
            <param name="data">The data is the vertices as a collection of IVertices.</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <returns>
            MIConvexHull.ConvexHull&lt;TVertex, TFace&gt;.
            </returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.#ctor(NeoAxis.ConvexHullAlgorithm.IVertex[],System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.ConvexHullAlgorithm" /> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="lift">if set to <c>true</c> [lift].</param>
            <param name="PlaneDistanceTolerance">The plane distance tolerance.</param>
            <exception cref="T:System.InvalidOperationException">Dimension of the input must be 2 or greater.</exception>
            <exception cref="T:System.ArgumentException">There are too few vertices (m) for the n-dimensional space. (m must be greater  +
            than the n, but m is  + NumberOfVertices +  and n is  + NumOfDimensions</exception>
            <exception cref="T:System.InvalidOperationException">PointTranslationGenerator cannot be null if PointTranslationType is enabled.
            or
            Dimension of the input must be 2 or greater.</exception>
            <exception cref="T:System.ArgumentException">There are too few vertices (m) for the n-dimensional space. (m must be greater " +
            "than the n, but m is " + NumberOfVertices + " and n is " + Dimension</exception>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.DetermineDimension">
            <summary>
            Check the dimensionality of the input data.
            </summary>
            <returns>System.Int32.</returns>
            <exception cref="T:System.ArgumentException">Invalid input data (non-uniform dimension).</exception>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.GetConvexHull">
            <summary>
            Gets/calculates the convex hull. This is 
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.SerializeVerticesToPositions">
            <summary>
            Serializes the vertices into the 1D array, Positions. The 1D array has much quicker access in C#.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FindBoundingBoxPoints">
            <summary>
            Finds the bounding box points.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ShiftAndScalePositions">
            <summary>
            Shifts and scales the Positions to avoid future errors. This does not alter the original data.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.CreateInitialSimplex">
            <summary>
            Find the (dimension+1) initial points and create the simplexes.
            Creates the initial simplex of n+1 vertices by using points from the bounding box.
            Special care is taken to ensure that the vertices chosen do not result in a degenerate shape
            where vertices are collinear (co-planar, etc). This would technically be resolved when additional
            vertices are checked in the main loop, but: 1) a degenerate simplex would not eliminate any other
            vertices (thus no savings there), 2) the creation of the face normal is prone to error.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FindInitialPoints">
            <summary>
            Finds (dimension + 1) initial points.
            </summary>
            <returns>List&lt;System.Int32&gt;.</returns>
            <exception cref="T:System.ArgumentException">The input data is degenerate. It appears to exist in " + NumOfDimensions +
                                " dimensions, but it is a " + (NumOfDimensions - 1) + " dimensional set (i.e. the point of collinear,"
                                + " coplanar, or co-hyperplanar.)</exception>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.UpdateAdjacency(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Check if 2 faces are adjacent and if so, update their AdjacentFaces array.
            </summary>
            <param name="l">The l.</param>
            <param name="r">The r.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FindBeyondVertices(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Used in the "initialization" code.
            </summary>
            <param name="face">The face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.TagAffectedFaces(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Tags all faces seen from the current vertex with 1.
            </summary>
            <param name="currentFace">The current face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.TraverseAffectedFaces(System.Int32)">
            <summary>
            Recursively traverse all the relevant faces.
            </summary>
            <param name="currentFace">The current face.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.MakeDeferredFace(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,System.Int32,NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,System.Int32,NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal)">
            <summary>
            Creates a new deferred face.
            </summary>
            <param name="face">The face.</param>
            <param name="faceIndex">Index of the face.</param>
            <param name="pivot">The pivot.</param>
            <param name="pivotIndex">Index of the pivot.</param>
            <param name="oldFace">The old face.</param>
            <returns>DeferredFace.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.ConnectFace(NeoAxis.ConvexHullAlgorithm.FaceConnector)">
            <summary>
            Connect faces using a connector.
            </summary>
            <param name="connector">The connector.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.CreateCone">
            <summary>
            Removes the faces "covered" by the current vertex and adds the newly created ones.
            </summary>
            <returns><c>true</c> if XXXX, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.CommitCone">
            <summary>
            Commits a cone and adds a vertex to the convex hull.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.IsBeyond(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,NeoAxis.ConvexHullAlgorithm.IndexBuffer,System.Int32)">
            <summary>
            Check whether the vertex v is beyond the given face. If so, add it to beyondVertices.
            </summary>
            <param name="face">The face.</param>
            <param name="beyondVertices">The beyond vertices.</param>
            <param name="v">The v.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.LexCompare(System.Int32,System.Int32)">
            <summary>
            Compares the values of two vertices. The return value (-1, 0 or +1) are found
            by first checking the first coordinate and then progressing through the rest.
            In this way {2, 8} will be a "-1" (less than) {3, 1}.
            </summary>
            <param name="u">The base vertex index, u.</param>
            <param name="v">The compared vertex index, v.</param>
            <returns>System.Int32.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FindBeyondVertices(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,NeoAxis.ConvexHullAlgorithm.IndexBuffer,NeoAxis.ConvexHullAlgorithm.IndexBuffer)">
            <summary>
            Used by update faces.
            </summary>
            <param name="face">The face.</param>
            <param name="beyond">The beyond.</param>
            <param name="beyond1">The beyond1.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.FindBeyondVertices(NeoAxis.ConvexHullAlgorithm.ConvexFaceInternal,NeoAxis.ConvexHullAlgorithm.IndexBuffer)">
            <summary>
            Finds the beyond vertices.
            </summary>
            <param name="face">The face.</param>
            <param name="beyond">The beyond.</param>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.UpdateCenter">
            <summary>
            Recalculates the centroid of the current hull.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.RollbackCenter">
            <summary>
            Removes the last vertex from the center.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.HandleSingular">
            <summary>
            Handles singular vertex.
            </summary>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.GetCoordinate(System.Int32,System.Int32)">
            <summary>
            Get a vertex coordinate. In order to reduce speed, all vertex coordinates
            have been placed in a single array.
            </summary>
            <param name="vIndex">The vertex index.</param>
            <param name="dimension">The index of the dimension.</param>
            <returns>System.Double.</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.GetHullVertices``1(System.Collections.Generic.IList{``0})">
            <summary>
            Gets the hull vertices.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <param name="data">The data.</param>
            <returns>TVertex[].</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.GetConvexFaces``2">
            <summary>
            Finds the convex hull and creates the TFace objects.
            </summary>
            <typeparam name="TFace">The type of the t face.</typeparam>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
            <returns>TFace[].</returns>
        </member>
        <member name="M:NeoAxis.ConvexHullAlgorithm.Return2DResultInOrder``2(System.Collections.Generic.IList{``0})">
            <summary>
            For 2D only: Returns the result in counter-clockwise order starting with the element with the lowest X value.
            If there are multiple vertices with the same minimum X, then the one with the lowest Y is chosen.
            </summary>
            <typeparam name="TVertex">The type of the vertex.</typeparam>
            <typeparam name="TFace">The type of the face.</typeparam>
            <param name="data">The data.</param>
            <returns></returns>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.NumOfDimensions">
            <summary>
            Corresponds to the dimension of the data.
            When the "lifted" hull is computed, Dimension is automatically incremented by one.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.IsLifted">
            <summary>
            Are we on a paraboloid?
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.PlaneDistanceTolerance">
            <summary>
            Explained in ConvexHullComputationConfig.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Vertices">
            <summary>
            The vertices
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Positions">
            <summary>
            The positions
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.VertexVisited">
            <summary>
            The vertex marks
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FacePool">
            <summary>
            The face pool
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.AffectedFaceFlags">
            <summary>
            The affected face flags
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexHullSize">
            <summary>
            Used to track the size of the current hull in the Update/RollbackCenter functions.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.UnprocessedFaces">
            <summary>
            A list of faces that that are not a part of the final convex hull and still need to be processed.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConvexFaces">
            <summary>
            A list of faces that form the convex hull.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.CurrentVertex">
            <summary>
            The vertex that is currently being processed.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.MaxDistance">
            <summary>
            A helper variable to determine the furthest vertex for a particular convex face.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.FurthestVertex">
            <summary>
            A helper variable to help determine the index of the vertex that is furthest from the face that is currently being
            processed.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.Center">
            <summary>
            The centroid of the currently computed hull.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.UpdateBuffer">
            <summary>
            The update buffer
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.UpdateIndices">
            <summary>
            The update indices
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.TraverseStack">
            <summary>
            Used to determine which faces need to be updated at each step of the algorithm.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.EmptyBuffer">
            <summary>
            Used for VerticesBeyond for faces that are on the convex hull.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.BeyondBuffer">
            <summary>
            Used to determine which vertices are "above" (or "beyond") a face
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.AffectedFaceBuffer">
            <summary>
            Stores faces that are visible from the current vertex.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConeFaceBuffer">
            <summary>
            Stores faces that form a "cone" created by adding new vertex.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.SingularVertices">
            <summary>
            Stores a list of "singular" (or "generate", "planar", etc.) vertices that cannot be part of the hull.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ConnectorTable">
            <summary>
            The connector table helps to determine the adjacency of convex faces.
            Hashing is used instead of pairwise comparison. This significantly speeds up the computations,
            especially for higher dimensions.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.ObjectManager">
            <summary>
            Manages the memory allocations and storage of unused objects.
            Saves the garbage collector a lot of work.
            </summary>
        </member>
        <member name="F:NeoAxis.ConvexHullAlgorithm.mathHelper">
            <summary>
            Helper class for handling math related stuff.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConvexVertex">
            <summary>
            Represents a vertex.
            </summary>
            <seealso cref="!:MIConvexHull.IVertex" />
        </member>
        <member name="P:NeoAxis.ConvexHullAlgorithm.ConvexVertex.Position">
            <summary>
            Position of the vertex.
            </summary>
            <value>The position.</value>
        </member>
        <member name="T:NeoAxis.ConvexHullAlgorithm.ConvexFace`1">
            <summary>
            A default convex face representation.
            </summary>
            <typeparam name="TVertex">The type of the t vertex.</typeparam>
        </member>
        <member name="T:NeoAxis.ConvexPolyhedron">
            <summary>
            Represents a convex polyhedron.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexPolyhedron.Face">
            <summary>
            Represents a face of <see cref="T:NeoAxis.ConvexPolyhedron"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ConvexPolyhedron.Edge">
            <summary>
            Represents an edge of <see cref="T:NeoAxis.ConvexPolyhedron"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve">
            <summary>
            Base class of curves.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve.Point">
            <summary>
            Represents a point of <see cref="T:NeoAxis.Curve"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.Curve.Points">
            <summary>
            The list of points sorted by time.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve1F">
            <summary>
            Base class of curves.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve1F.Point">
            <summary>
            Represents a point of <see cref="T:NeoAxis.Curve"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.Curve1F.Points">
            <summary>
            The list of points sorted by time.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveCubicSpline1F">
            <summary>
            Represents a cubic curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveLine1F">
            <summary>
            Represents a curve with flat lines.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveSpline1F">
            <summary>
            Base class of spline curves.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve1">
            <summary>
            Base class of curves.
            </summary>
        </member>
        <member name="T:NeoAxis.Curve1.Point">
            <summary>
            Represents a point of <see cref="T:NeoAxis.Curve"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.Curve1.Points">
            <summary>
            The list of points sorted by time.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveCubicSpline1">
            <summary>
            Represents a cubic curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveLine1">
            <summary>
            Represents a curve with flat lines.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveSpline1">
            <summary>
            Base class of spline curves.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveBezier">
            <summary>
            Represents a Bezier curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveBezierPath">
            <summary>
            Represents a path of Bezier curves.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveCubicSpline">
            <summary>
            Represents a cubic curve.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveLine">
            <summary>
            Represents a curve with flat lines.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveRoundedLine">
            <summary>
            Represents a curve with rounded corners.
            </summary>
        </member>
        <member name="T:NeoAxis.CurveSpline">
            <summary>
            Base class of spline curves.
            </summary>
        </member>
        <member name="T:NeoAxis.Cylinder">
            <summary>
            Represents a double precision cylinder shape.
            </summary>
        </member>
        <member name="T:NeoAxis.CylinderF">
            <summary>
            Represents a single precision cylinder shape.
            </summary>
        </member>
        <member name="T:NeoAxis.Degree">
            <summary>
            Represents a double precision degree unit value.
            </summary>
        </member>
        <member name="T:NeoAxis.DegreeF">
            <summary>
            Represents a single precision degree unit value.
            </summary>
        </member>
        <member name="T:NeoAxis.Frustum">
            <summary>
            Defines a frustum and helps determine whether objects intersect with it.
            </summary>
        </member>
        <member name="P:NeoAxis.Frustum.Points">
            <summary>
            Gets 8 corner points.
            </summary>
        </member>
        <member name="P:NeoAxis.Frustum.Planes">
            <summary>
            Gets 6 clip planes. Order: Near, far, side planes.
            </summary>
        </member>
        <member name="P:NeoAxis.Frustum.Direction">
            <summary>Gets the direction.</summary>
        </member>
        <member name="P:NeoAxis.Frustum.Up">
            <summary>Gets the up vector.</summary>
        </member>
        <member name="T:NeoAxis.GaussianBlurMath">
            <summary>
            Provides the functions for calculating parameters of Gaussian blur.
            </summary>
        </member>
        <member name="T:NeoAxis.GaussianBlurMath.Result">
            <summary>
            Represents a result data for <see cref="T:NeoAxis.GaussianBlurMath"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.HalfType">
             <summary>
             Represents a half-precision floating point number. 
             </summary>
             <remarks>
             Note:
                 Half is not fast enought and precision is also very bad, 
                 so is should not be used for mathematical computation (use Single instead).
                 The main advantage of Half type is lower memory cost: two bytes per number. 
                 Half is typically used in graphical applications.
                 
             Note: 
                 All functions, where is used conversion half->float/float->half, 
                 are approx. ten times slower than float->double/double->float, i.e. ~3ns on 2GHz CPU.
            
             References:
                 - Code retrieved from http://sourceforge.net/p/csharp-half/code/HEAD/tree/ on 2015-12-04
                 - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
                 - IEEE 754 revision, link: http://grouper.ieee.org/groups/754/
             </remarks>
        </member>
        <member name="F:NeoAxis.HalfType.Value">
            <summary>
            Internal representation of the half-precision floating-point number.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.Epsilon">
            <summary>
            Represents the smallest positive System.Half value greater than zero. This field is constant.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.MaxValue">
            <summary>
            Represents the largest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.MinValue">
            <summary>
            Represents the smallest possible value of System.Half. This field is constant.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.NaN">
            <summary>
            Represents not a number (NaN). This field is constant.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.NegativeInfinity">
            <summary>
            Represents negative infinity. This field is constant.
            </summary>
        </member>
        <member name="F:NeoAxis.HalfType.PositiveInfinity">
            <summary>
            Represents positive infinity. This field is constant.
            </summary>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.Single)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified single-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit signed integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.Double)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified double-precision floating-point number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.Decimal)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified decimal number.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 32-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of System.Half to the value of the specified 64-bit unsigned integer.
            </summary>
            <param name="value">The value to represent as a System.Half.</param>
        </member>
        <member name="M:NeoAxis.HalfType.Negate(NeoAxis.HalfType)">
            <summary>
            Returns the result of multiplying the specified System.Half value by negative one.
            </summary>
            <param name="half">A System.Half.</param>
            <returns>A System.Half with the value of half, but the opposite sign. -or- Zero, if half is zero.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Add(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>A System.Half value that is the sum of half1 and half2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Subtract(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Subtracts one specified System.Half value from another.
            </summary>
            <param name="half1">A System.Half (the minuend).</param>
            <param name="half2">A System.Half (the subtrahend).</param>
            <returns>The System.Half result of subtracting half2 from half1.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Multiply(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the multiplicand).</param>
            <param name="half2">A System.Half (the multiplier).</param>
            <returns>A System.Half that is the result of multiplying half1 and half2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Divide(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half that is the result of dividing half1 by half2.</returns>
            <exception cref="T:System.DivideByZeroException">half2 is zero.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.op_UnaryPlus(NeoAxis.HalfType)">
            <summary>
            Returns the value of the System.Half operand (the sign of the operand is unchanged).
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of the operand, half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_UnaryNegation(NeoAxis.HalfType)">
            <summary>
            Negates the value of the specified System.Half operand.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The result of half multiplied by negative one (-1).</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Increment(NeoAxis.HalfType)">
            <summary>
            Increments the System.Half operand by 1.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half incremented by 1.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Decrement(NeoAxis.HalfType)">
            <summary>
            Decrements the System.Half operand by one.
            </summary>
            <param name="half">The System.Half operand.</param>
            <returns>The value of half decremented by 1.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Addition(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Adds two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of adding half1 and half2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Subtraction(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Subtracts two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of subtracting half1 and half2.</returns>        
        </member>
        <member name="M:NeoAxis.HalfType.op_Multiply(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Multiplies two specified System.Half values.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>The System.Half result of multiplying half1 by half2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Division(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Divides two specified System.Half values.
            </summary>
            <param name="half1">A System.Half (the dividend).</param>
            <param name="half2">A System.Half (the divisor).</param>
            <returns>The System.Half result of half1 by half2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Equality(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether two instances of System.Half are equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are equal; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Inequality(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether two instances of System.Half are not equal.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 and half2 are not equal; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_LessThan(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than half1; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_GreaterThan(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than half2; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_LessThanOrEqual(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether a specified System.Half is less than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is less than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_GreaterThanOrEqual(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether a specified System.Half is greater than or equal to another specified System.Half.
            </summary>
            <param name="half1">A System.Half.</param>
            <param name="half2">A System.Half.</param>
            <returns>true if half1 is greater than or equal to half2; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.Byte)~NeoAxis.HalfType">
            <summary>
            Converts an 8-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">An 8-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 8-bit unsigned integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.Int16)~NeoAxis.HalfType">
            <summary>
            Converts a 16-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 16-bit signed integer.</param>
            <returns>A System.Half that represents the converted 16-bit signed integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.Char)~NeoAxis.HalfType">
            <summary>
            Converts a Unicode character to a System.Half.
            </summary>
            <param name="value">A Unicode character.</param>
            <returns>A System.Half that represents the converted Unicode character.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.Int32)~NeoAxis.HalfType">
            <summary>
            Converts a 32-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 32-bit signed integer.</param>
            <returns>A System.Half that represents the converted 32-bit signed integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.Int64)~NeoAxis.HalfType">
            <summary>
            Converts a 64-bit signed integer to a System.Half.
            </summary>
            <param name="value">A 64-bit signed integer.</param>
            <returns>A System.Half that represents the converted 64-bit signed integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(System.Single)~NeoAxis.HalfType">
            <summary>
            Converts a single-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A single-precision floating-point number.</param>
            <returns>A System.Half that represents the converted single-precision floating point number.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(System.Double)~NeoAxis.HalfType">
            <summary>
            Converts a double-precision floating-point number to a System.Half.
            </summary>
            <param name="value">A double-precision floating-point number.</param>
            <returns>A System.Half that represents the converted double-precision floating point number.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(System.Decimal)~NeoAxis.HalfType">
            <summary>
            Converts a decimal number to a System.Half.
            </summary>
            <param name="value">decimal number</param>
            <returns>A System.Half that represents the converted decimal number.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Byte">
            <summary>
            Converts a System.Half to an 8-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Char">
            <summary>
            Converts a System.Half to a Unicode character.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A Unicode character that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Int16">
            <summary>
            Converts a System.Half to a 16-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Int32">
            <summary>
            Converts a System.Half to a 32-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Int64">
            <summary>
            Converts a System.Half to a 64-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(NeoAxis.HalfType)~System.Single">
            <summary>
            Converts a System.Half to a single-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A single-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(NeoAxis.HalfType)~System.Double">
            <summary>
            Converts a System.Half to a double-precision floating-point number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A double-precision floating-point number that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.Decimal">
            <summary>
            Converts a System.Half to a decimal number.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A decimal number that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.SByte)~NeoAxis.HalfType">
            <summary>
            Converts an 8-bit signed integer to a System.Half.
            </summary>
            <param name="value">An 8-bit signed integer.</param>
            <returns>A System.Half that represents the converted 8-bit signed integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.UInt16)~NeoAxis.HalfType">
            <summary>
            Converts a 16-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 16-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 16-bit unsigned integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.UInt32)~NeoAxis.HalfType">
            <summary>
            Converts a 32-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 32-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 32-bit unsigned integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Implicit(System.UInt64)~NeoAxis.HalfType">
            <summary>
            Converts a 64-bit unsigned integer to a System.Half.
            </summary>
            <param name="value">A 64-bit unsigned integer.</param>
            <returns>A System.Half that represents the converted 64-bit unsigned integer.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.SByte">
            <summary>
            Converts a System.Half to an 8-bit signed integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>An 8-bit signed integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.UInt16">
            <summary>
            Converts a System.Half to a 16-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 16-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.UInt32">
            <summary>
            Converts a System.Half to a 32-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 32-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.op_Explicit(NeoAxis.HalfType)~System.UInt64">
            <summary>
            Converts a System.Half to a 64-bit unsigned integer.
            </summary>
            <param name="value">A System.Half to convert.</param>
            <returns>A 64-bit unsigned integer that represents the converted System.Half.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.CompareTo(NeoAxis.HalfType)">
            <summary>
            Compares this instance to a specified System.Half object.
            </summary>
            <param name="other">A System.Half object.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater than value.
            </returns>
        </member>
        <member name="M:NeoAxis.HalfType.CompareTo(System.Object)">
            <summary>
            Compares this instance to a specified System.Object.
            </summary>
            <param name="obj">An System.Object or null.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            Return Value Meaning Less than zero This instance is less than value. Zero
            This instance is equal to value. Greater than zero This instance is greater
            than value. -or- value is null.
            </returns>
            <exception cref="T:System.ArgumentException">value is not a System.Half</exception>
        </member>
        <member name="M:NeoAxis.HalfType.Equals(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Half object represent the same value.
            </summary>
            <param name="other">A System.Half object to compare to this instance.</param>
            <returns>true if value is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance and a specified System.Object
            represent the same type and value.
            </summary>
            <param name="obj">An System.Object.</param>
            <returns>true if value is a System.Half and equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer hash code.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.GetTypeCode">
            <summary>
            Returns the System.TypeCode for value type System.Half.
            </summary>
            <returns>The enumerated constant (TypeCode)255.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.GetBytes(NeoAxis.HalfType)">
            <summary>
            Returns the specified half-precision floating point value as an array of bytes.
            </summary>
            <param name="value">The number to convert.</param>
            <returns>An array of bytes with length 2.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.GetBits(NeoAxis.HalfType)">
            <summary>
            Converts the value of a specified instance of System.Half to its equivalent binary representation.
            </summary>
            <param name="value">A System.Half value.</param>
            <returns>A 16-bit unsigned integer that contain the binary representation of value.</returns>        
        </member>
        <member name="M:NeoAxis.HalfType.ToHalf(System.Byte[],System.Int32)">
            <summary>
            Returns a half-precision floating point number converted from two bytes
            at a specified position in a byte array.
            </summary>
            <param name="value">An array of bytes.</param>
            <param name="startIndex">The starting position within value.</param>
            <returns>A half-precision floating point number formed by two bytes beginning at startIndex.</returns>
            <exception cref="T:System.ArgumentException">
            startIndex is greater than or equal to the length of value minus 1, and is
            less than or equal to the length of value minus 1.
            </exception>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">startIndex is less than zero or greater than the length of value minus 1.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.ToHalf(System.UInt16)">
            <summary>
            Returns a half-precision floating point number converted from its binary representation.
            </summary>
            <param name="bits">Binary representation of System.Half value</param>
            <returns>A half-precision floating point number formed by its binary representation.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Sign(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating the sign of a half-precision floating-point number.
            </summary>
            <param name="value">A signed number.</param>
            <returns>
            A number indicating the sign of value. Number Description -1 value is less
            than zero. 0 value is equal to zero. 1 value is greater than zero.
            </returns>
            <exception cref="T:System.ArithmeticException">value is equal to System.Half.NaN.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.Abs(NeoAxis.HalfType)">
            <summary>
            Returns the absolute value of a half-precision floating-point number.
            </summary>
            <param name="value">A number in the range System.Half.MinValue ≤ value ≤ System.Half.MaxValue.</param>
            <returns>A half-precision floating-point number, x, such that 0 ≤ x ≤System.Half.MaxValue.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Max(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns the larger of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is larger. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:NeoAxis.HalfType.Min(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Returns the smaller of two half-precision floating-point numbers.
            </summary>
            <param name="value1">The first of two half-precision floating-point numbers to compare.</param>
            <param name="value2">The second of two half-precision floating-point numbers to compare.</param>
            <returns>
            Parameter value1 or value2, whichever is smaller. If value1, or value2, or both val1
            and value2 are equal to System.Half.NaN, System.Half.NaN is returned.
            </returns>
        </member>
        <member name="M:NeoAxis.HalfType.IsNaN(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether the specified number evaluates to not a number (System.Half.NaN).
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if value evaluates to not a number (System.Half.NaN); otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.IsInfinity(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative or positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity or System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.IsNegativeInfinity(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether the specified number evaluates to negative infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.NegativeInfinity; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.IsPositiveInfinity(NeoAxis.HalfType)">
            <summary>
            Returns a value indicating whether the specified number evaluates to positive infinity.
            </summary>
            <param name="half">A half-precision floating-point number.</param>
            <returns>true if half evaluates to System.Half.PositiveInfinity; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <returns>The System.Half number equivalent to the number contained in value.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.Parse(System.String,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified culture-specific format information.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="provider">An System.IFormatProvider that supplies culture-specific parsing information about value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.Parse(System.String,System.Globalization.NumberStyles)">
            <summary>
            Converts the string representation of a number in a specified style to its System.Half equivalent.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is
            System.Globalization.NumberStyles.Number.
            </param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.Parse(System.String,System.Globalization.NumberStyles,System.IFormatProvider)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent 
            using the specified style and culture-specific format.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the style elements that can be present in value. A typical value to specify is 
            System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific information about the format of value.</param>
            <returns>The System.Half number equivalent to the number contained in s as specified by style and provider.</returns>
            <exception cref="T:System.ArgumentNullException">value is null.</exception>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style is the
            System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
            <exception cref="T:System.FormatException">value is not in the correct format.</exception>
            <exception cref="T:System.OverflowException">value represents a number less than System.Half.MinValue or greater than System.Half.MaxValue.</exception>
        </member>
        <member name="M:NeoAxis.HalfType.TryParse(System.String,NeoAxis.HalfType@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent.
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not a number in a valid format, or represents a number less than System.Half.MinValue
            or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.TryParse(System.String,System.Globalization.NumberStyles,System.IFormatProvider,NeoAxis.HalfType@)">
            <summary>
            Converts the string representation of a number to its System.Half equivalent
            using the specified style and culture-specific format. A return value indicates
            whether the conversion succeeded or failed.
            </summary>
            <param name="value">The string representation of the number to convert.</param>
            <param name="style">
            A bitwise combination of System.Globalization.NumberStyles values that indicates
            the permitted format of value. A typical value to specify is System.Globalization.NumberStyles.Number.
            </param>
            <param name="provider">An System.IFormatProvider object that supplies culture-specific parsing information about value.</param>
            <param name="result">
            When this method returns, contains the System.Half number that is equivalent
            to the numeric value contained in value, if the conversion succeeded, or is zero
            if the conversion failed. The conversion fails if the s parameter is null,
            is not in a format compliant with style, or represents a number less than
            System.Half.MinValue or greater than System.Half.MaxValue. This parameter is passed uninitialized.
            </param>
            <returns>true if s was converted successfully; otherwise, false.</returns>
            <exception cref="T:System.ArgumentException">
            style is not a System.Globalization.NumberStyles value. -or- style 
            is the System.Globalization.NumberStyles.AllowHexSpecifier value.
            </exception>
        </member>
        <member name="M:NeoAxis.HalfType.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the value of this instance.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.ToString(System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation
            using the specified culture-specific format information.
            </summary>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by provider.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.ToString(System.String)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation, using the specified format.
            </summary>
            <param name="format">A numeric format string.</param>
            <returns>The string representation of the value of this instance as specified by format.</returns>
        </member>
        <member name="M:NeoAxis.HalfType.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation 
            using the specified format and culture-specific format information.
            </summary>
            <param name="format">A numeric format string.</param>
            <param name="formatProvider">An System.IFormatProvider that supplies culture-specific formatting information.</param>
            <returns>The string representation of the value of this instance as specified by format and provider.</returns>
            <exception cref="T:System.FormatException">format is invalid.</exception>
        </member>
        <member name="T:NeoAxis.HalfHelper">
            <summary>
            Helper class for Half conversions and some low level operations.
            This class is internally used in the Half class.
            </summary>
            <remarks>
            References:
                - Code retrieved from http://sourceforge.net/p/csharp-half/code/HEAD/tree/ on 2015-12-04
                - Fast Half Float Conversions, Jeroen van der Zijp, link: http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf
            </remarks>
        </member>
        <member name="T:NeoAxis.KnownColors">
            <summary>
            Provides a set of predefined color values for convenience.
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.TransparentBlack">
            <summary>
            TransparentBlack color (R:0,G:0,B:0,A:0).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Transparent">
            <summary>
            Transparent color (R:0,G:0,B:0,A:0).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.AliceBlue">
            <summary>
            AliceBlue color (R:240,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.AntiqueWhite">
            <summary>
            AntiqueWhite color (R:250,G:235,B:215,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Aqua">
            <summary>
            Aqua color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Aquamarine">
            <summary>
            Aquamarine color (R:127,G:255,B:212,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Azure">
            <summary>
            Azure color (R:240,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Beige">
            <summary>
            Beige color (R:245,G:245,B:220,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Bisque">
            <summary>
            Bisque color (R:255,G:228,B:196,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Black">
            <summary>
            Black color (R:0,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.BlanchedAlmond">
            <summary>
            BlanchedAlmond color (R:255,G:235,B:205,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Blue">
            <summary>
            Blue color (R:0,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.BlueViolet">
            <summary>
            BlueViolet color (R:138,G:43,B:226,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Brown">
            <summary>
            Brown color (R:165,G:42,B:42,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.BurlyWood">
            <summary>
            BurlyWood color (R:222,G:184,B:135,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.CadetBlue">
            <summary>
            CadetBlue color (R:95,G:158,B:160,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Chartreuse">
            <summary>
            Chartreuse color (R:127,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Chocolate">
            <summary>
            Chocolate color (R:210,G:105,B:30,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Coral">
            <summary>
            Coral color (R:255,G:127,B:80,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.CornflowerBlue">
            <summary>
            CornflowerBlue color (R:100,G:149,B:237,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Cornsilk">
            <summary>
            Cornsilk color (R:255,G:248,B:220,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Crimson">
            <summary>
            Crimson color (R:220,G:20,B:60,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Cyan">
            <summary>
            Cyan color (R:0,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkBlue">
            <summary>
            DarkBlue color (R:0,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkCyan">
            <summary>
            DarkCyan color (R:0,G:139,B:139,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkGoldenrod">
            <summary>
            DarkGoldenrod color (R:184,G:134,B:11,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkGray">
            <summary>
            DarkGray color (R:169,G:169,B:169,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkGreen">
            <summary>
            DarkGreen color (R:0,G:100,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkKhaki">
            <summary>
            DarkKhaki color (R:189,G:183,B:107,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkMagenta">
            <summary>
            DarkMagenta color (R:139,G:0,B:139,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkOliveGreen">
            <summary>
            DarkOliveGreen color (R:85,G:107,B:47,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkOrange">
            <summary>
            DarkOrange color (R:255,G:140,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkOrchid">
            <summary>
            DarkOrchid color (R:153,G:50,B:204,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkRed">
            <summary>
            DarkRed color (R:139,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkSalmon">
            <summary>
            DarkSalmon color (R:233,G:150,B:122,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkSeaGreen">
            <summary>
            DarkSeaGreen color (R:143,G:188,B:139,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkSlateBlue">
            <summary>
            DarkSlateBlue color (R:72,G:61,B:139,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkSlateGray">
            <summary>
            DarkSlateGray color (R:47,G:79,B:79,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkTurquoise">
            <summary>
            DarkTurquoise color (R:0,G:206,B:209,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DarkViolet">
            <summary>
            DarkViolet color (R:148,G:0,B:211,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DeepPink">
            <summary>
            DeepPink color (R:255,G:20,B:147,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DeepSkyBlue">
            <summary>
            DeepSkyBlue color (R:0,G:191,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DimGray">
            <summary>
            DimGray color (R:105,G:105,B:105,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.DodgerBlue">
            <summary>
            DodgerBlue color (R:30,G:144,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Firebrick">
            <summary>
            Firebrick color (R:178,G:34,B:34,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.FloralWhite">
            <summary>
            FloralWhite color (R:255,G:250,B:240,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.ForestGreen">
            <summary>
            ForestGreen color (R:34,G:139,B:34,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Fuchsia">
            <summary>
            Fuchsia color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Gainsboro">
            <summary>
            Gainsboro color (R:220,G:220,B:220,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.GhostWhite">
            <summary>
            GhostWhite color (R:248,G:248,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Gold">
            <summary>
            Gold color (R:255,G:215,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Goldenrod">
            <summary>
            Goldenrod color (R:218,G:165,B:32,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Gray">
            <summary>
            Gray color (R:128,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Green">
            <summary>
            Green color (R:0,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.GreenYellow">
            <summary>
            GreenYellow color (R:173,G:255,B:47,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Honeydew">
            <summary>
            Honeydew color (R:240,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.HotPink">
            <summary>
            HotPink color (R:255,G:105,B:180,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.IndianRed">
            <summary>
            IndianRed color (R:205,G:92,B:92,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Indigo">
            <summary>
            Indigo color (R:75,G:0,B:130,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Ivory">
            <summary>
            Ivory color (R:255,G:255,B:240,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Khaki">
            <summary>
            Khaki color (R:240,G:230,B:140,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Lavender">
            <summary>
            Lavender color (R:230,G:230,B:250,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LavenderBlush">
            <summary>
            LavenderBlush color (R:255,G:240,B:245,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LawnGreen">
            <summary>
            LawnGreen color (R:124,G:252,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LemonChiffon">
            <summary>
            LemonChiffon color (R:255,G:250,B:205,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightBlue">
            <summary>
            LightBlue color (R:173,G:216,B:230,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightCoral">
            <summary>
            LightCoral color (R:240,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightCyan">
            <summary>
            LightCyan color (R:224,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightGoldenrodYellow">
            <summary>
            LightGoldenrodYellow color (R:250,G:250,B:210,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightGray">
            <summary>
            LightGray color (R:211,G:211,B:211,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightGreen">
            <summary>
            LightGreen color (R:144,G:238,B:144,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightPink">
            <summary>
            LightPink color (R:255,G:182,B:193,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightSalmon">
            <summary>
            LightSalmon color (R:255,G:160,B:122,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightSeaGreen">
            <summary>
            LightSeaGreen color (R:32,G:178,B:170,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightSkyBlue">
            <summary>
            LightSkyBlue color (R:135,G:206,B:250,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightSlateGray">
            <summary>
            LightSlateGray color (R:119,G:136,B:153,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightSteelBlue">
            <summary>
            LightSteelBlue color (R:176,G:196,B:222,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LightYellow">
            <summary>
            LightYellow color (R:255,G:255,B:224,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Lime">
            <summary>
            Lime color (R:0,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.LimeGreen">
            <summary>
            LimeGreen color (R:50,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Linen">
            <summary>
            Linen color (R:250,G:240,B:230,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Magenta">
            <summary>
            Magenta color (R:255,G:0,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Maroon">
            <summary>
            Maroon color (R:128,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumAquamarine">
            <summary>
            MediumAquamarine color (R:102,G:205,B:170,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumBlue">
            <summary>
            MediumBlue color (R:0,G:0,B:205,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumOrchid">
            <summary>
            MediumOrchid color (R:186,G:85,B:211,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumPurple">
            <summary>
            MediumPurple color (R:147,G:112,B:219,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumSeaGreen">
            <summary>
            MediumSeaGreen color (R:60,G:179,B:113,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumSlateBlue">
            <summary>
            MediumSlateBlue color (R:123,G:104,B:238,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumSpringGreen">
            <summary>
            MediumSpringGreen color (R:0,G:250,B:154,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumTurquoise">
            <summary>
            MediumTurquoise color (R:72,G:209,B:204,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MediumVioletRed">
            <summary>
            MediumVioletRed color (R:199,G:21,B:133,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MidnightBlue">
            <summary>
            MidnightBlue color (R:25,G:25,B:112,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MintCream">
            <summary>
            MintCream color (R:245,G:255,B:250,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MistyRose">
            <summary>
            MistyRose color (R:255,G:228,B:225,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Moccasin">
            <summary>
            Moccasin color (R:255,G:228,B:181,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.MonoGameOrange">
            <summary>
            MonoGame orange theme color (R:231,G:60,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.NavajoWhite">
            <summary>
            NavajoWhite color (R:255,G:222,B:173,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Navy">
            <summary>
            Navy color (R:0,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.OldLace">
            <summary>
            OldLace color (R:253,G:245,B:230,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Olive">
            <summary>
            Olive color (R:128,G:128,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.OliveDrab">
            <summary>
            OliveDrab color (R:107,G:142,B:35,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Orange">
            <summary>
            Orange color (R:255,G:165,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.OrangeRed">
            <summary>
            OrangeRed color (R:255,G:69,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Orchid">
            <summary>
            Orchid color (R:218,G:112,B:214,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PaleGoldenrod">
            <summary>
            PaleGoldenrod color (R:238,G:232,B:170,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PaleGreen">
            <summary>
            PaleGreen color (R:152,G:251,B:152,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PaleTurquoise">
            <summary>
            PaleTurquoise color (R:175,G:238,B:238,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PaleVioletRed">
            <summary>
            PaleVioletRed color (R:219,G:112,B:147,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PapayaWhip">
            <summary>
            PapayaWhip color (R:255,G:239,B:213,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PeachPuff">
            <summary>
            PeachPuff color (R:255,G:218,B:185,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Peru">
            <summary>
            Peru color (R:205,G:133,B:63,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Pink">
            <summary>
            Pink color (R:255,G:192,B:203,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Plum">
            <summary>
            Plum color (R:221,G:160,B:221,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.PowderBlue">
            <summary>
            PowderBlue color (R:176,G:224,B:230,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Purple">
            <summary>
             Purple color (R:128,G:0,B:128,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Red">
            <summary>
            Red color (R:255,G:0,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.RosyBrown">
            <summary>
            RosyBrown color (R:188,G:143,B:143,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.RoyalBlue">
            <summary>
            RoyalBlue color (R:65,G:105,B:225,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SaddleBrown">
            <summary>
            SaddleBrown color (R:139,G:69,B:19,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Salmon">
            <summary>
            Salmon color (R:250,G:128,B:114,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SandyBrown">
            <summary>
            SandyBrown color (R:244,G:164,B:96,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SeaGreen">
            <summary>
            SeaGreen color (R:46,G:139,B:87,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SeaShell">
            <summary>
            SeaShell color (R:255,G:245,B:238,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Sienna">
            <summary>
            Sienna color (R:160,G:82,B:45,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Silver">
            <summary>
            Silver color (R:192,G:192,B:192,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SkyBlue">
            <summary>
            SkyBlue color (R:135,G:206,B:235,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SlateBlue">
            <summary>
            SlateBlue color (R:106,G:90,B:205,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SlateGray">
            <summary>
            SlateGray color (R:112,G:128,B:144,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Snow">
            <summary>
            Snow color (R:255,G:250,B:250,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SpringGreen">
            <summary>
            SpringGreen color (R:0,G:255,B:127,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.SteelBlue">
            <summary>
            SteelBlue color (R:70,G:130,B:180,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Tan">
            <summary>
            Tan color (R:210,G:180,B:140,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Teal">
            <summary>
            Teal color (R:0,G:128,B:128,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Thistle">
            <summary>
            Thistle color (R:216,G:191,B:216,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Tomato">
            <summary>
            Tomato color (R:255,G:99,B:71,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Turquoise">
            <summary>
            Turquoise color (R:64,G:224,B:208,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Violet">
            <summary>
            Violet color (R:238,G:130,B:238,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Wheat">
            <summary>
            Wheat color (R:245,G:222,B:179,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.White">
            <summary>
            White color (R:255,G:255,B:255,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.WhiteSmoke">
            <summary>
            WhiteSmoke color (R:245,G:245,B:245,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.Yellow">
            <summary>
            Yellow color (R:255,G:255,B:0,A:255).
            </summary>
        </member>
        <member name="P:NeoAxis.KnownColors.YellowGreen">
            <summary>
            YellowGreen color (R:154,G:205,B:50,A:255).
            </summary>
        </member>
        <member name="T:NeoAxis.Line2">
            <summary>
            Represents a double precision line in two-dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.Line2F">
            <summary>
            Represents a single precision line in two-dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.Line3">
            <summary>
            Represents a double precision line in three-dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.Line3F">
            <summary>
            Represents a single precision line in three-dimensional space.
            </summary>
        </member>
        <member name="T:NeoAxis.MathAlgorithms">
            <summary>
            A set of mathematical algorithms.
            </summary>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.RemoveCollinearDegenerateTriangles(NeoAxis.Vector3F[],System.Int32[]@,System.Int32[]@,System.Single)">
            <summary>
            Original indices array will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="processedTrianglesToSourceIndex"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.RemoveCollinearDegenerateTriangles(NeoAxis.StandardVertex[],System.Int32[]@,System.Int32[]@,System.Single)">
            <summary>
            Original indices array will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="processedTrianglesToSourceIndex"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.MergeEqualVertices(NeoAxis.Vector3[]@,System.Int32[]@,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Original arrays will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.MergeEqualVertices(NeoAxis.Vector3F[]@,System.Int32[]@,System.Single,System.Boolean)">
            <summary>
            Original arrays will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="epsilon"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.MergeEqualVertices(NeoAxis.StandardVertex[]@,System.Int32[]@,System.Single,System.Single,System.Boolean)">
            <summary>
            Original arrays will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <param name="positionEpsilon"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.RemoveUnusedVertices(NeoAxis.Vector3F[]@,System.Int32[]@)">
            <summary>
            Original arrays will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.RemoveUnusedVertices(NeoAxis.StandardVertex[]@,System.Int32[]@)">
            <summary>
            Original arrays will not changed.
            </summary>
            <param name="vertices"></param>
            <param name="indices"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.MergeEqualVerticesRemoveInvalidTriangles(NeoAxis.Vector3F[],System.Int32[],System.Single,System.Single,System.Boolean,System.Boolean,NeoAxis.Vector3F[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            </summary>
            <param name="sourceVertices"></param>
            <param name="sourceIndices"></param>
            <param name="epsilon"></param>
            <param name="processedVertices"></param>
            <param name="processedIndices"></param>
            <param name="processedTrianglesToSourceIndex"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.MergeEqualVerticesRemoveInvalidTriangles(NeoAxis.StandardVertex[],System.Int32[],System.Single,System.Single,System.Single,System.Boolean,System.Boolean,NeoAxis.StandardVertex[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            </summary>
            <param name="sourceVertices"></param>
            <param name="sourceIndices"></param>
            <param name="epsilon"></param>
            <param name="processedVertices"></param>
            <param name="processedIndices"></param>
            <param name="processedTrianglesToSourceIndex"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.CalculateBarycentricCoordinates(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@,System.Single@,System.Single@,System.Single@)">
            <summary>
            Computes barycentric coordinates (u, v, w) for point with respect to triangle.
            </summary>
            <param name="vertex0"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="point"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="M:NeoAxis.MathAlgorithms.CalculateBarycentricCoordinates(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F,System.Single@,System.Single@,System.Single@)">
            <summary>
            Computes barycentric coordinates (u, v, w) for point with respect to triangle.
            </summary>
            <param name="vertex0"></param>
            <param name="vertex1"></param>
            <param name="vertex2"></param>
            <param name="point"></param>
            <param name="u"></param>
            <param name="v"></param>
            <param name="w"></param>
        </member>
        <member name="T:NeoAxis.MathEx">
            <summary>
            Expanded set of basic mathematical operations.
            </summary>
        </member>
        <member name="M:NeoAxis.MathEx.NextPowerOfTwo(System.Int32)">
            <summary>
            Calculates the next highest power of two.
            </summary>
            <remarks>
            This is a minimal method meant to be fast. There is a known edge case where an input of 0 will output 0
            instead of the mathematically correct value of 1. It will not be fixed.
            </remarks>
            <param name="v">A value.</param>
            <returns>The next power of two after the value.</returns>
        </member>
        <member name="M:NeoAxis.MathEx.NextPowerOfTwo(System.UInt32)">
            <summary>
            Calculates the next highest power of two.
            </summary>
            <remarks>
            This is a minimal method meant to be fast. There is a known edge case where an input of 0 will output 0
            instead of the mathematically correct value of 1. It will not be fixed.
            </remarks>
            <param name="v">A value.</param>
            <returns>The next power of two after the value.</returns>
        </member>
        <member name="T:NeoAxis.Matrix2">
            <summary>
            A structure encapsulating a double precision 2x2 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix2.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.#ctor(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector2"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.#ctor(NeoAxis.Matrix2)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix2"/> object.
            </summary>
            <param name="m">A specified matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.#ctor(NeoAxis.Matrix2F)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix2F"/> object.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="P:NeoAxis.Matrix2.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix2"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector2"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector2"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Matrix2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Addition(NeoAxis.Matrix2,NeoAxis.Matrix2)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Subtraction(NeoAxis.Matrix2,NeoAxis.Matrix2)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Multiply(NeoAxis.Matrix2,System.Double)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Multiply(System.Double,NeoAxis.Matrix2)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Multiply(NeoAxis.Matrix2,NeoAxis.Vector2)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Multiply(NeoAxis.Vector2,NeoAxis.Matrix2)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Multiply(NeoAxis.Matrix2,NeoAxis.Matrix2)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_UnaryNegation(NeoAxis.Matrix2)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.Add(NeoAxis.Matrix2@,NeoAxis.Matrix2@,NeoAxis.Matrix2@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Subtract(NeoAxis.Matrix2@,NeoAxis.Matrix2@,NeoAxis.Matrix2@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Multiply(NeoAxis.Matrix2@,System.Double,NeoAxis.Matrix2@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Multiply(System.Double,NeoAxis.Matrix2@,NeoAxis.Matrix2@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Multiply(NeoAxis.Vector2@,NeoAxis.Matrix2@,NeoAxis.Vector2@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Multiply(NeoAxis.Matrix2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Multiply(NeoAxis.Matrix2@,NeoAxis.Matrix2@,NeoAxis.Matrix2@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Negate(NeoAxis.Matrix2@,NeoAxis.Matrix2@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Equals(NeoAxis.Matrix2,System.Double)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.Equals(NeoAxis.Matrix2@,System.Double)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix2.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix2"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.GetTranspose(NeoAxis.Matrix2@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix2"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix2"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix2"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix2"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix2"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.GetInverse(NeoAxis.Matrix2@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix2"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.ToMatrix3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.ToMatrix3(NeoAxis.Matrix3@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix2"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix2"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Equality(NeoAxis.Matrix2,NeoAxis.Matrix2)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.op_Inequality(NeoAxis.Matrix2,NeoAxis.Matrix2)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix2.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Matrix2.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix2"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.FromScale(NeoAxis.Vector2)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector2"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.FromScale(NeoAxis.Vector2@,NeoAxis.Matrix2@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector2"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.FromRotate(NeoAxis.Radian)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">Angle in radians to rotate counter-clockwise.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2.FromRotate(NeoAxis.Radian,NeoAxis.Matrix2@)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">Angle in radians to rotate counter-clockwise.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.ToMatrix2F(NeoAxis.Matrix2F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2"/> into the equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix2.ToMatrix2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2"/> into the equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.</returns>
        </member>
        <member name="T:NeoAxis.Matrix2F">
            <summary>
            A structure encapsulating a single precision 2x2 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2F.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2F.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2F.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix2F.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix2F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.#ctor(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector2F"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.#ctor(NeoAxis.Matrix2F)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix2F"/> object.
            </summary>
            <param name="m">A specified matrix.</param>
        </member>
        <member name="P:NeoAxis.Matrix2F.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix2F"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector2F"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector2F"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Addition(NeoAxis.Matrix2F,NeoAxis.Matrix2F)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Subtraction(NeoAxis.Matrix2F,NeoAxis.Matrix2F)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Multiply(NeoAxis.Matrix2F,System.Single)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Multiply(System.Single,NeoAxis.Matrix2F)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Multiply(NeoAxis.Matrix2F,NeoAxis.Vector2F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Multiply(NeoAxis.Vector2F,NeoAxis.Matrix2F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Multiply(NeoAxis.Matrix2F,NeoAxis.Matrix2F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_UnaryNegation(NeoAxis.Matrix2F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.Add(NeoAxis.Matrix2F@,NeoAxis.Matrix2F@,NeoAxis.Matrix2F@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Subtract(NeoAxis.Matrix2F@,NeoAxis.Matrix2F@,NeoAxis.Matrix2F@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Multiply(NeoAxis.Matrix2F@,System.Single,NeoAxis.Matrix2F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Multiply(System.Single,NeoAxis.Matrix2F@,NeoAxis.Matrix2F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Multiply(NeoAxis.Vector2F@,NeoAxis.Matrix2F@,NeoAxis.Vector2F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Multiply(NeoAxis.Matrix2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Multiply(NeoAxis.Matrix2F@,NeoAxis.Matrix2F@,NeoAxis.Matrix2F@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Negate(NeoAxis.Matrix2F@,NeoAxis.Matrix2F@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Equals(NeoAxis.Matrix2F,System.Single)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.Equals(NeoAxis.Matrix2F@,System.Single)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix2F"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetTranspose(NeoAxis.Matrix2F@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix2F"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix2F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2F"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix2F"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix2F"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2F"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix2F"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.GetInverse(NeoAxis.Matrix2F@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix2F"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix2F"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.ToMatrix3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2F"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.ToMatrix3F(NeoAxis.Matrix3F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2F"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix2F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix2F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Equality(NeoAxis.Matrix2F,NeoAxis.Matrix2F)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Inequality(NeoAxis.Matrix2F,NeoAxis.Matrix2F)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix2F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Matrix2F.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix2F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.FromScale(NeoAxis.Vector2F)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector2F"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.FromScale(NeoAxis.Vector2F@,NeoAxis.Matrix2F@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector2F"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.FromRotate(NeoAxis.RadianF)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">Angle in radians to rotate counter-clockwise.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.FromRotate(NeoAxis.RadianF,NeoAxis.Matrix2F@)">
            <summary>
            Creates a rotation matrix.
            </summary>
            <param name="angle">Angle in radians to rotate counter-clockwise.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.ToMatrix2(NeoAxis.Matrix2@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2F"/> into the equivalent <see cref="T:NeoAxis.Matrix2"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix2"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix2F.ToMatrix2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix2F"/> into the equivalent <see cref="T:NeoAxis.Matrix2"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix2F.op_Implicit(NeoAxis.Matrix2F)~NeoAxis.Matrix2">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Matrix2F"/> type to <see cref="T:NeoAxis.Matrix2"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.Matrix3">
            <summary>
            A structure encapsulating a double precision 3x3 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3.Item2">
            <summary>
            The third row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix3.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="xz">Value at row 1 column 3 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
            <param name="yz">Value at row 2 column 3 of the matrix.</param>
            <param name="zx">Value at row 3 column 1 of the matrix.</param>
            <param name="zy">Value at row 3 column 2 of the matrix.</param>
            <param name="zz">Value at row 3 column 3 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.#ctor(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector3"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
            <param name="z">The vector which is the third row.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.#ctor(NeoAxis.Matrix3)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix3"/> object.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.#ctor(NeoAxis.Matrix3F)">
            <summary>
            Constructs a matrix with another specified matrix of <see cref="T:NeoAxis.Matrix3F"/> format.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="P:NeoAxis.Matrix3.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix3"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector3"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector3"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Matrix3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Addition(NeoAxis.Matrix3,NeoAxis.Matrix3)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Subtraction(NeoAxis.Matrix3,NeoAxis.Matrix3)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Multiply(NeoAxis.Matrix3,System.Double)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Multiply(System.Double,NeoAxis.Matrix3)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Multiply(NeoAxis.Matrix3,NeoAxis.Vector3)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Multiply(NeoAxis.Vector3,NeoAxis.Matrix3)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Multiply(NeoAxis.Matrix3,NeoAxis.Matrix3)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_UnaryNegation(NeoAxis.Matrix3)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.Add(NeoAxis.Matrix3@,NeoAxis.Matrix3@,NeoAxis.Matrix3@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Subtract(NeoAxis.Matrix3@,NeoAxis.Matrix3@,NeoAxis.Matrix3@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Multiply(NeoAxis.Matrix3@,System.Double,NeoAxis.Matrix3@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Multiply(System.Double,NeoAxis.Matrix3@,NeoAxis.Matrix3@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Multiply(NeoAxis.Vector3@,NeoAxis.Matrix3@,NeoAxis.Vector3@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Multiply(NeoAxis.Matrix3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Multiply(NeoAxis.Matrix3@,NeoAxis.Matrix3@,NeoAxis.Matrix3@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Negate(NeoAxis.Matrix3@,NeoAxis.Matrix3@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Equals(NeoAxis.Matrix3,System.Double)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.Equals(NeoAxis.Matrix3@,System.Double)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix3.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix3"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.GetTranspose(NeoAxis.Matrix3@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix3"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix3"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix3"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix3"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix3"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.GetInverse(NeoAxis.Matrix3@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix3"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.ToAngles">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> to Euler angles.
            </summary>
            <returns>The result of convertion.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.ToAngles(NeoAxis.Angles@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> to Euler angles.
            </summary>
            <param name="result">When the method completes, contains the result of convertion.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.ToQuaternion">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Quaternion"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Quaternion"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.ToQuaternion(NeoAxis.Quaternion@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Quaternion"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Quaternion"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.ToMatrix4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Matrix4"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix4"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.ToMatrix4(NeoAxis.Matrix4@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Matrix4"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix4"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix3"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix3"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Equality(NeoAxis.Matrix3,NeoAxis.Matrix3)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.op_Inequality(NeoAxis.Matrix3,NeoAxis.Matrix3)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix3.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Matrix3.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix3"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromScale(NeoAxis.Vector3)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector3"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromScale(NeoAxis.Vector3@,NeoAxis.Matrix3@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector3"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.FromScale(System.Double)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="scale">The specified <see cref="T:System.Double"/> value.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromScale(System.Double,NeoAxis.Matrix3@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:System.Double"/> value.
            </summary>
            <param name="scale">The specified <see cref="T:System.Double"/> value.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByX(NeoAxis.Radian)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByX(NeoAxis.Radian,NeoAxis.Matrix3@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByY(NeoAxis.Radian)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByY(NeoAxis.Radian,NeoAxis.Matrix3@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByZ(NeoAxis.Radian)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.FromRotateByZ(NeoAxis.Radian,NeoAxis.Matrix3@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.QDUDecomposition(NeoAxis.Matrix3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Decomposites the matrix by Gram-Schmidt orthogonalization algorithm (the QR algorithm).
            </summary>
            <param name="kQ">Orthogonal.</param>
            <param name="kD">Diagonal.</param>
            <param name="kU">Upper triangular.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.ToMatrix3F(NeoAxis.Matrix3F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3.ToMatrix3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.Decompose(NeoAxis.Matrix3@,NeoAxis.Vector3@)">
            <summary>
            Decomposes a matrix into a rotation and scale.
            </summary>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix3.Decompose(NeoAxis.Quaternion@,NeoAxis.Vector3@)">
            <summary>
            Decomposes a matrix into a rotation and scale.
            </summary>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix3.LookAt(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Matrix3@)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="direction">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix3"/> that transforms world space to camera space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3.LookAt(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="direction">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix3"/> that transforms world space to camera space.</returns>
        </member>
        <member name="T:NeoAxis.Matrix3F">
            <summary>
            A structure encapsulating a single precision 3x3 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3F.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3F.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3F.Item2">
            <summary>
            The third row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3F.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix3F.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix3F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="xz">Value at row 1 column 3 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
            <param name="yz">Value at row 2 column 3 of the matrix.</param>
            <param name="zx">Value at row 3 column 1 of the matrix.</param>
            <param name="zy">Value at row 3 column 2 of the matrix.</param>
            <param name="zz">Value at row 3 column 3 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector3F"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
            <param name="z">The vector which is the third row.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.#ctor(NeoAxis.Matrix3F)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix3F"/> object.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="P:NeoAxis.Matrix3F.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix3F"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector3F"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector3F"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Addition(NeoAxis.Matrix3F,NeoAxis.Matrix3F)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Subtraction(NeoAxis.Matrix3F,NeoAxis.Matrix3F)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Multiply(NeoAxis.Matrix3F,System.Single)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Multiply(System.Single,NeoAxis.Matrix3F)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Multiply(NeoAxis.Matrix3F,NeoAxis.Vector3F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Multiply(NeoAxis.Vector3F,NeoAxis.Matrix3F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Multiply(NeoAxis.Matrix3F,NeoAxis.Matrix3F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_UnaryNegation(NeoAxis.Matrix3F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.Add(NeoAxis.Matrix3F@,NeoAxis.Matrix3F@,NeoAxis.Matrix3F@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Subtract(NeoAxis.Matrix3F@,NeoAxis.Matrix3F@,NeoAxis.Matrix3F@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Multiply(NeoAxis.Matrix3F@,System.Single,NeoAxis.Matrix3F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Multiply(System.Single,NeoAxis.Matrix3F@,NeoAxis.Matrix3F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Multiply(NeoAxis.Vector3F@,NeoAxis.Matrix3F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Multiply(NeoAxis.Matrix3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Multiply(NeoAxis.Matrix3F@,NeoAxis.Matrix3F@,NeoAxis.Matrix3F@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Negate(NeoAxis.Matrix3F@,NeoAxis.Matrix3F@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Equals(NeoAxis.Matrix3F,System.Single)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.Equals(NeoAxis.Matrix3F@,System.Single)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix3F"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetTranspose(NeoAxis.Matrix3F@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix3F"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix3F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3F"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix3F"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix3F"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3F"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix3F"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.GetInverse(NeoAxis.Matrix3F@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix3F"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix3F"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToAngles">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> to Euler angles.
            </summary>
            <returns>The result of convertion.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToAngles(NeoAxis.AnglesF@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> to Euler angles.
            </summary>
            <param name="result">When the method completes, contains the result of convertion.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToQuaternion">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToQuaternion(NeoAxis.QuaternionF@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.QuaternionF"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToMatrix4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToMatrix4(NeoAxis.Matrix4F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix3F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Equality(NeoAxis.Matrix3F,NeoAxis.Matrix3F)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Inequality(NeoAxis.Matrix3F,NeoAxis.Matrix3F)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix3F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Matrix3F.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix3F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromScale(NeoAxis.Vector3F)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector3F"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromScale(NeoAxis.Vector3F@,NeoAxis.Matrix3F@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:NeoAxis.Vector3F"/> object.
            </summary>
            <param name="scale">The specified vector.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromScale(System.Single)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:System.Single"/> value.
            </summary>
            <param name="scale">The specified <see cref="T:System.Single"/> value.</param>
            <returns>The scale matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromScale(System.Single,NeoAxis.Matrix3F@)">
            <summary>
            Creates a scale matrix with the specified <see cref="T:System.Single"/> value.
            </summary>
            <param name="scale">The specified <see cref="T:System.Single"/> value.</param>
            <param name="result">When the method completes, contains the scale matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByX(NeoAxis.RadianF)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByX(NeoAxis.RadianF,NeoAxis.Matrix3F@)">
            <summary>
            Creates a matrix that rotates around the x-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByY(NeoAxis.RadianF)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByY(NeoAxis.RadianF,NeoAxis.Matrix3F@)">
            <summary>
            Creates a matrix that rotates around the y-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByZ(NeoAxis.RadianF)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <returns>The resulting rotation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.FromRotateByZ(NeoAxis.RadianF,NeoAxis.Matrix3F@)">
            <summary>
            Creates a matrix that rotates around the z-axis.
            </summary>
            <param name="angle">The angle in radians.</param>
            <param name="result">When the method completes, contains the resulting rotation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.QDUDecomposition(NeoAxis.Matrix3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Decomposites the matrix by Gram-Schmidt orthogonalization algorithm (the QR algorithm).
            </summary>
            <param name="kQ">Orthogonal.</param>
            <param name="kD">Diagonal.</param>
            <param name="kU">Upper triangular.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToMatrix3(NeoAxis.Matrix3@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.ToMatrix3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix3F"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.op_Implicit(NeoAxis.Matrix3F)~NeoAxis.Matrix3">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Matrix3F"/> type to <see cref="T:NeoAxis.Matrix3"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Matrix3F.Decompose(NeoAxis.Matrix3F@,NeoAxis.Vector3F@)">
            <summary>
            Decomposes a matrix into a rotation and scale.
            </summary>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix3F.Decompose(NeoAxis.QuaternionF@,NeoAxis.Vector3F@)">
            <summary>
            Decomposes a matrix into a rotation and scale.
            </summary>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix3F.LookAt(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Matrix3F@)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="direction">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix3"/> that transforms world space to camera space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix3F.LookAt(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="direction">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix3F"/> that transforms world space to camera space.</returns>
        </member>
        <member name="T:NeoAxis.Matrix3x4F">
            <summary>
            A structure encapsulating a single precision 3x4 matrix.
            </summary>
        </member>
        <member name="T:NeoAxis.Matrix4">
            <summary>
            A structure encapsulating a double precision 4x4 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Item2">
            <summary>
            The third row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4.Item3">
            <summary>
            The fourth row of the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="xz">Value at row 1 column 3 of the matrix.</param>
            <param name="xw">Value at row 1 column 4 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
            <param name="yz">Value at row 2 column 3 of the matrix.</param>
            <param name="yw">Value at row 2 column 4 of the matrix.</param>
            <param name="zx">Value at row 3 column 1 of the matrix.</param>
            <param name="zy">Value at row 3 column 2 of the matrix.</param>
            <param name="zz">Value at row 3 column 3 of the matrix.</param>
            <param name="zw">Value at row 3 column 4 of the matrix.</param>
            <param name="wx">Value at row 4 column 1 of the matrix.</param>
            <param name="wy">Value at row 4 column 2 of the matrix.</param>
            <param name="wz">Value at row 4 column 3 of the matrix.</param>
            <param name="ww">Value at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Vector4,NeoAxis.Vector4,NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector4"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
            <param name="z">The vector which is the third row.</param>
            <param name="w">The vector which is the fourth row.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix4)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix4"/> object.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix3,NeoAxis.Vector3)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix3@,NeoAxis.Vector3@)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix3F,NeoAxis.Vector3)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix3F@,NeoAxis.Vector3@)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Construct(NeoAxis.Matrix3@,NeoAxis.Vector3@,NeoAxis.Matrix4@)">
            <summary>
            Constructs a matrix with the given rotation and translation components and returns the resulting <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3"/>.</param>
            <param name="result">When the method completes, contains the resulting <see cref="T:NeoAxis.Matrix4"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(System.Double[])">
            <summary>
            Constructs a matrix with specified one-dimensional <see cref="T:System.Double"/> array with sixteen elements.
            </summary>
            <param name="array">One-dimensional <see cref="T:System.Double"/> array with sixteen elements.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.#ctor(NeoAxis.Matrix4F)">
            <summary>
            Constructs a matrix with another specified matrix of <see cref="T:NeoAxis.Matrix4F"/> format.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="P:NeoAxis.Matrix4.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix4"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector4"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector4"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Matrix4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Addition(NeoAxis.Matrix4,NeoAxis.Matrix4)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Subtraction(NeoAxis.Matrix4,NeoAxis.Matrix4)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Matrix4,System.Double)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(System.Double,NeoAxis.Matrix4)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Matrix4,NeoAxis.Ray)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="m">The given matrix.</param>
            <param name="r">The given ray.</param>
            <returns>The translated ray.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Ray,NeoAxis.Matrix4)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="r">The given ray.</param>
            <param name="m">The given matrix.</param>
            <returns>The translated ray.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Matrix4,NeoAxis.Vector3)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Vector3,NeoAxis.Matrix4)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Matrix4,NeoAxis.Vector4)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Vector4,NeoAxis.Matrix4)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Multiply(NeoAxis.Matrix4,NeoAxis.Matrix4)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_UnaryNegation(NeoAxis.Matrix4)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.Add(NeoAxis.Matrix4@,NeoAxis.Matrix4@,NeoAxis.Matrix4@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Subtract(NeoAxis.Matrix4@,NeoAxis.Matrix4@,NeoAxis.Matrix4@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Matrix4@,System.Double,NeoAxis.Matrix4@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(System.Double,NeoAxis.Matrix4@,NeoAxis.Matrix4@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Matrix4@,NeoAxis.Ray@,NeoAxis.Ray@)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="m">The given matrix.</param>
            <param name="r">The given ray.</param>
            <param name="result">When the method completes, contains the translated ray.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Ray@,NeoAxis.Matrix4@,NeoAxis.Ray@)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="r">The given ray.</param>
            <param name="m">The given matrix.</param>
            <param name="result">When the method completes, contains the translated ray.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Matrix4@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Vector3@,NeoAxis.Matrix4@,NeoAxis.Vector3@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Matrix4@,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Vector4@,NeoAxis.Matrix4@,NeoAxis.Vector4@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Multiply(NeoAxis.Matrix4@,NeoAxis.Matrix4@,NeoAxis.Matrix4@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Negate(NeoAxis.Matrix4@,NeoAxis.Matrix4@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix4.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.GetTranspose(NeoAxis.Matrix4@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix4"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix4"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix4"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix4"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.GetInverse(NeoAxis.Matrix4@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix4"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix4"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix4"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Equality(NeoAxis.Matrix4,NeoAxis.Matrix4)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.op_Inequality(NeoAxis.Matrix4,NeoAxis.Matrix4)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix4.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Matrix4.Equals(NeoAxis.Matrix4,System.Double)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix4"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix4"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.LookAt(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="eye">Eye (camera) position in world space.</param>
            <param name="dir">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix4"/> that transforms world space to camera space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.LookAt(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Matrix4@)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="eye">Eye (camera) position in world space.</param>
            <param name="dir">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <param name="result">When the method completes, contains the instance of <see cref="T:NeoAxis.Matrix4"/> that transforms world space to camera space.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Perspective(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a perspective projection matrix. 
            </summary>
            <param name="fov">Angle of the field of view in the y direction.</param>
            <param name="aspect">Aspect ratio of the view (width / height).</param>
            <param name="znear">Distance to the near clip plane.</param>
            <param name="zfar">Distance to the far clip plane.</param>
            <returns>A projection matrix that transforms camera space to raster space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.Perspective(System.Double,System.Double,System.Double,System.Double,NeoAxis.Matrix4@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fov">Angle of the field of view in the y direction.</param>
            <param name="aspect">Aspect ratio of the view (width / height).</param>
            <param name="znear">Distance to the near clip plane.</param>
            <param name="zfar">Distance to the far clip plane.</param>
            <param name="result">When the method completes, contains a projection matrix that transforms camera space to raster space.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.FromTranslate(NeoAxis.Vector3)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="translation">The amount to translate in each axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.FromTranslate(NeoAxis.Vector3@,NeoAxis.Matrix4@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="translation">The amount to translate in each axis.</param>
            <param name="result">When the method completes, contains the translation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.ToMatrix3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.ToMatrix3(NeoAxis.Matrix3@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4"/> into the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix4"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix4"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.ToMatrix4F(NeoAxis.Matrix4F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4"/> to the matrix of <see cref="T:NeoAxis.Matrix4F"/> format.
            </summary>
            <param name="result">When the method completes, contains the matrix of <see cref="T:NeoAxis.Matrix4F"/> format.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.ToMatrix4F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4"/> to the matrix of <see cref="T:NeoAxis.Matrix4F"/> format.
            </summary>
            <returns>The matrix of <see cref="T:NeoAxis.Matrix4F"/> format.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.GetTranslation">
            <summary>
            Returns the translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <returns>The translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4.GetTranslation(NeoAxis.Vector3@)">
            <summary>
            Returns the translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="result">When the method completes, contains the translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.SetTranslation(NeoAxis.Vector3)">
            <summary>
            Sets the translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="value">The translation to set.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.SetTranslation(NeoAxis.Vector3@)">
            <summary>
            Sets the translation of the current instance of <see cref="T:NeoAxis.Matrix4"/>.
            </summary>
            <param name="value">The translation to set.</param>
        </member>
        <member name="M:NeoAxis.Matrix4.Decompose(NeoAxis.Vector3@,NeoAxis.Matrix3@,NeoAxis.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix4.Decompose(NeoAxis.Vector3@,NeoAxis.Quaternion@,NeoAxis.Vector3@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="T:NeoAxis.Matrix4F">
            <summary>
            A structure encapsulating a single precision 4x4 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Item2">
            <summary>
            The third row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4F.Item3">
            <summary>
            The fourth row of the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="xz">Value at row 1 column 3 of the matrix.</param>
            <param name="xw">Value at row 1 column 4 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
            <param name="yz">Value at row 2 column 3 of the matrix.</param>
            <param name="yw">Value at row 2 column 4 of the matrix.</param>
            <param name="zx">Value at row 3 column 1 of the matrix.</param>
            <param name="zy">Value at row 3 column 2 of the matrix.</param>
            <param name="zz">Value at row 3 column 3 of the matrix.</param>
            <param name="zw">Value at row 3 column 4 of the matrix.</param>
            <param name="wx">Value at row 4 column 1 of the matrix.</param>
            <param name="wy">Value at row 4 column 2 of the matrix.</param>
            <param name="wz">Value at row 4 column 3 of the matrix.</param>
            <param name="ww">Value at row 4 column 4 of the matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(NeoAxis.Vector4F,NeoAxis.Vector4F,NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Constructs a matrix with the specified <see cref="T:NeoAxis.Vector4F"/> elements,
            which are the corresponding rows of the matrix.
            </summary>
            <param name="x">The vector which is the first row.</param>
            <param name="y">The vector which is the second row.</param>
            <param name="z">The vector which is the third row.</param>
            <param name="w">The vector which is the fourth row.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(NeoAxis.Matrix4F)">
            <summary>
            Constructs a matrix with another specified <see cref="T:NeoAxis.Matrix4F"/> object.
            </summary>
            <param name="source">A specified matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(NeoAxis.Matrix3F,NeoAxis.Vector3F)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(NeoAxis.Matrix3F@,NeoAxis.Vector3F@)">
            <summary>
            Constructs a matrix with the given rotation and translation components.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Construct(NeoAxis.Matrix3F@,NeoAxis.Vector3F@,NeoAxis.Matrix4F@)">
            <summary>
            Constructs a matrix with the given rotation and translation components and returns the resulting <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="rotation">The rotation <see cref="T:NeoAxis.Matrix3F"/>.</param>
            <param name="translation">The translation <see cref="T:NeoAxis.Vector3F"/>.</param>
            <param name="result">When the method completes, contains the resulting <see cref="T:NeoAxis.Matrix4F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.#ctor(System.Single[])">
            <summary>
            Constructs a matrix with specified one-dimensional <see cref="T:System.Single"/> array with sixteen elements.
            </summary>
            <param name="array">One-dimensional <see cref="T:System.Single"/> array with sixteen elements.</param>
        </member>
        <member name="P:NeoAxis.Matrix4F.Item(System.Int32)">
            <summary>
            Gets or sets the row of the current instance of <see cref="T:NeoAxis.Matrix4F"/> at the specified index.
            </summary>
            <value>The value of the corresponding row of <see cref="T:NeoAxis.Vector4F"/> format, depending on the index.</value>
            <param name="index">The index of the row to access.</param>
            <returns>The value of the row of <see cref="T:NeoAxis.Vector4F"/> format at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Addition(NeoAxis.Matrix4F,NeoAxis.Matrix4F)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <returns>The sum of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Subtraction(NeoAxis.Matrix4F,NeoAxis.Matrix4F)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <returns>The difference between the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Matrix4F,System.Single)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(System.Single,NeoAxis.Matrix4F)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The scaled matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Matrix4F,NeoAxis.RayF)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="m">The given matrix.</param>
            <param name="r">The given ray.</param>
            <returns>The translated ray.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.RayF,NeoAxis.Matrix4F)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="r">The given ray.</param>
            <param name="m">The given matrix.</param>
            <returns>The translated ray.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Matrix4F,NeoAxis.Vector3F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Vector3F,NeoAxis.Matrix4F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Matrix4F,NeoAxis.Vector4F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Vector4F,NeoAxis.Matrix4F)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Multiply(NeoAxis.Matrix4F,NeoAxis.Matrix4F)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <returns>The product of the two matricies.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_UnaryNegation(NeoAxis.Matrix4F)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="v">The matrix to negate.</param>
            <returns>The negated matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.Add(NeoAxis.Matrix4F@,NeoAxis.Matrix4F@,NeoAxis.Matrix4F@)">
            <summary>
            Adds two matricies.
            </summary>
            <param name="v1">The first matrix to add.</param>
            <param name="v2">The second matrix to add.</param>
            <param name="result">When the method completes, contains the sum of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Subtract(NeoAxis.Matrix4F@,NeoAxis.Matrix4F@,NeoAxis.Matrix4F@)">
            <summary>
            Subtracts two matricies.
            </summary>
            <param name="v1">The matrix to subtract from.</param>
            <param name="v2">The matrix to be subtracted from another matrix.</param>
            <param name="result">When the method completes, contains the difference of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Matrix4F@,System.Single,NeoAxis.Matrix4F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="s">The value by which to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(System.Single,NeoAxis.Matrix4F@,NeoAxis.Matrix4F@)">
            <summary>
            Multiplies a matrix by a given value.
            </summary>
            <param name="s">The value by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the scaled matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Matrix4F@,NeoAxis.RayF@,NeoAxis.RayF@)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="m">The given matrix.</param>
            <param name="r">The given ray.</param>
            <param name="result">When the method completes, contains the translated ray.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.RayF@,NeoAxis.Matrix4F@,NeoAxis.RayF@)">
            <summary>
            Translates the ray coordinates to the space defined by a matrix.
            </summary>
            <param name="r">The given ray.</param>
            <param name="m">The given matrix.</param>
            <param name="result">When the method completes, contains the translated ray.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Matrix4F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Vector3F@,NeoAxis.Matrix4F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Matrix4F@,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <param name="m">The matrix to multiply.</param>
            <param name="v">The vector by which to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Vector4F@,NeoAxis.Matrix4F@,NeoAxis.Vector4F@)">
            <summary>
            Multiplies a matrix by a given <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <param name="v">The vector by which to multiply.</param>
            <param name="m">The matrix to multiply.</param>
            <param name="result">When the method completes, contains the result of the multiplication.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Multiply(NeoAxis.Matrix4F@,NeoAxis.Matrix4F@,NeoAxis.Matrix4F@)">
            <summary>
            Multiplies two matrices.
            </summary>
            <param name="v1">The first matrix to multiply.</param>
            <param name="v2">The second matrix to multiply.</param>
            <param name="result">When the method completes, contains the product of the two matricies.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Negate(NeoAxis.Matrix4F@,NeoAxis.Matrix4F@)">
            <summary>
            Negates a matrix.
            </summary>
            <param name="m">The matrix to negate.</param>
            <param name="result">When the method completes, contains the negated matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTrace">
            <summary>
            Gets the trace of the matrix, the sum of the values along the diagonal.
            </summary>
            <returns>The trace of the matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.Transpose">
            <summary>
            Transposes the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTranspose">
            <summary>
            Returns the transpose of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <returns>The transpose of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTranspose(NeoAxis.Matrix4F@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTranspose(NeoAxis.Matrix3x4F@)">
            <summary>
            Calculates the transpose of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="result">When the method completes, contains the transpose of the current instance
            of <see cref="T:NeoAxis.Matrix4F"/> in <see cref="T:NeoAxis.Matrix3x4F"/> format.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Inverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4F"/> and determines whether the matrix is invertible.
            Determines whether the current instance of <see cref="T:NeoAxis.Matrix4F"/> is invertible and, if so, inverts this matrix.
            </summary>
            <returns>True if the current instance of <see cref="T:NeoAxis.Matrix4F"/> is invertible; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetInverse">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4F"/> if it is invertible and returns the result.
            </summary>
            <returns>If the current instance of <see cref="T:NeoAxis.Matrix4F"/> is invertible, returns the inverted matrix;
            otherwise returns the original matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetInverse(NeoAxis.Matrix4F@)">
            <summary>
            Inverts the current instance of <see cref="T:NeoAxis.Matrix4F"/> if it is invertible.
            </summary>
            <param name="result">When the method completes, contains the inverted matrix if the current instance
            of <see cref="T:NeoAxis.Matrix4F"/> is invertible; otherwise, contains the original matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Matrix4F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Equality(NeoAxis.Matrix4F,NeoAxis.Matrix4F)">
            <summary>
            Determines whether two given matricies are equal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Inequality(NeoAxis.Matrix4F,NeoAxis.Matrix4F)">
            <summary>
            Determines whether two given matricies are unequal.
            </summary>
            <param name="v1">The first matrix to compare.</param>
            <param name="v2">The second matrix to compare.</param>
            <returns>True if the matricies are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Matrix4F.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the matrix component, depending on the index.</value>
            <param name="row">The row of the matrix to access.</param>
            <param name="column">The column of the matrix to access.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="row"/> or <paramref name="column"/>
            is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Matrix4F.Equals(NeoAxis.Matrix4F,System.Single)">
            <summary>
            Determines whether the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix4F"/>
            with a given precision.
            </summary>
            <param name="v">The matrix to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified matrix is equal to the current instance of <see cref="T:NeoAxis.Matrix4F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.LookAt(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="eye">Eye (camera) position in world space.</param>
            <param name="dir">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <returns>The instance of <see cref="T:NeoAxis.Matrix4F"/> that transforms world space to camera space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.LookAt(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Matrix4F@)">
            <summary>
            Creates a look-at matrix.
            </summary>
            <param name="eye">Eye (camera) position in world space.</param>
            <param name="dir">Target position in world space.</param>
            <param name="up">Up vector in world space.</param>
            <param name="result">When the method completes, contains the instance of <see cref="T:NeoAxis.Matrix4F"/> that transforms world space to camera space.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Perspective(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Creates a perspective projection matrix. 
            </summary>
            <param name="fov">Angle of the field of view in the y direction.</param>
            <param name="aspect">Aspect ratio of the view (width / height).</param>
            <param name="znear">Distance to the near clip plane.</param>
            <param name="zfar">Distance to the far clip plane.</param>
            <returns>A projection matrix that transforms camera space to raster space.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.Perspective(System.Single,System.Single,System.Single,System.Single,NeoAxis.Matrix4F@)">
            <summary>
            Creates a perspective projection matrix.
            </summary>
            <param name="fov">Angle of the field of view in the y direction.</param>
            <param name="aspect">Aspect ratio of the view (width / height).</param>
            <param name="znear">Distance to the near clip plane.</param>
            <param name="zfar">Distance to the far clip plane.</param>
            <param name="result">When the method completes, contains a projection matrix that transforms camera space to raster space.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.FromTranslate(NeoAxis.Vector3F)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="translation">The amount to translate in each axis.</param>
            <returns>The translation matrix.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.FromTranslate(NeoAxis.Vector3F@,NeoAxis.Matrix4F@)">
            <summary>
            Creates a translation matrix.
            </summary>
            <param name="translation">The amount to translate in each axis.</param>
            <param name="result">When the method completes, contains the translation matrix.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToMatrix3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4F"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToMatrix3(NeoAxis.Matrix3F@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4F"/> into the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.
            </summary>
            <param name="result">When the method completes, contains the equivalent <see cref="T:NeoAxis.Matrix3F"/> structure.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Parse(System.String)">
            <summary>
            Converts a string representation of a matrix into the equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.
            </summary>
            <param name="text">The string representation of the matrix (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Matrix4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToMatrix4(NeoAxis.Matrix4@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4F"/> to the matrix of <see cref="T:NeoAxis.Matrix4"/> format.
            </summary>
            <param name="result">When the method completes, contains the matrix of <see cref="T:NeoAxis.Matrix4"/> format.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToMatrix4H(NeoAxis.Matrix4H@)">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4F"/> to the matrix of <see cref="T:NeoAxis.Matrix4H"/> format.
            </summary>
            <param name="result">When the method completes, contains the matrix of <see cref="T:NeoAxis.Matrix4H"/> format.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.ToMatrix4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Matrix4F"/> to the matrix of <see cref="T:NeoAxis.Matrix4"/> format.
            </summary>
            <returns>The matrix of <see cref="T:NeoAxis.Matrix4"/> format.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.op_Implicit(NeoAxis.Matrix4F)~NeoAxis.Matrix4">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Matrix4F"/> type to <see cref="T:NeoAxis.Matrix4"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTranslation">
            <summary>
            Returns the translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <returns>The translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Matrix4F.GetTranslation(NeoAxis.Vector3F@)">
            <summary>
            Returns the translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="result">When the method completes, contains the translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.SetTranslation(NeoAxis.Vector3F)">
            <summary>
            Sets the translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="value">The translation to set.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.SetTranslation(NeoAxis.Vector3F@)">
            <summary>
            Sets the translation of the current instance of <see cref="T:NeoAxis.Matrix4F"/>.
            </summary>
            <param name="value">The translation to set.</param>
        </member>
        <member name="M:NeoAxis.Matrix4F.Decompose(NeoAxis.Vector3F@,NeoAxis.Matrix3F@,NeoAxis.Vector3F@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="M:NeoAxis.Matrix4F.Decompose(NeoAxis.Vector3F@,NeoAxis.QuaternionF@,NeoAxis.Vector3F@)">
            <summary>
            Decomposes a matrix into a scale, rotation, and translation.
            </summary>
            <param name="translation">When the method completes, contains the translation component of the decomposed matrix.</param>
            <param name="rotation">When the method completes, contains the rtoation component of the decomposed matrix.</param>
            <param name="scale">When the method completes, contains the scaling component of the decomposed matrix.</param>
            <remarks>
            This method is designed to decompose an SRT transformation matrix only.
            </remarks>
        </member>
        <member name="T:NeoAxis.Matrix4H">
            <summary>
            A structure encapsulating a half precision 4x4 matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Zero">
            <summary>
            The matrix with all of its components set to zero.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Identity">
            <summary>
            The identity matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Item0">
            <summary>
            The first row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Item1">
            <summary>
            The second row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Item2">
            <summary>
            The third row of the matrix.
            </summary>
        </member>
        <member name="F:NeoAxis.Matrix4H.Item3">
            <summary>
            The fourth row of the matrix.
            </summary>
        </member>
        <member name="M:NeoAxis.Matrix4H.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a matrix with the given individual elements.
            </summary>
            <param name="xx">Value at row 1 column 1 of the matrix.</param>
            <param name="xy">Value at row 1 column 2 of the matrix.</param>
            <param name="xz">Value at row 1 column 3 of the matrix.</param>
            <param name="xw">Value at row 1 column 4 of the matrix.</param>
            <param name="yx">Value at row 2 column 1 of the matrix.</param>
            <param name="yy">Value at row 2 column 2 of the matrix.</param>
            <param name="yz">Value at row 2 column 3 of the matrix.</param>
            <param name="yw">Value at row 2 column 4 of the matrix.</param>
            <param name="zx">Value at row 3 column 1 of the matrix.</param>
            <param name="zy">Value at row 3 column 2 of the matrix.</param>
            <param name="zz">Value at row 3 column 3 of the matrix.</param>
            <param name="zw">Value at row 3 column 4 of the matrix.</param>
            <param name="wx">Value at row 4 column 1 of the matrix.</param>
            <param name="wy">Value at row 4 column 2 of the matrix.</param>
            <param name="wz">Value at row 4 column 3 of the matrix.</param>
            <param name="ww">Value at row 4 column 4 of the matrix.</param>
        </member>
        <member name="T:NeoAxis.MeshTest">
            <summary>
            Class for quickly determining the intersection of the ray with the mesh. Internally octree is used.
            </summary>
        </member>
        <member name="T:NeoAxis.MeshTest.ResultItem">
            <summary>
            Represents result data for <see cref="T:NeoAxis.MeshTest"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.Plane">
            <summary>
            Represents a double precision plane in three-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.Plane.A">
            <summary>
            The A component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.Plane.B">
            <summary>
            The B component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.Plane.C">
            <summary>
            The C component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.Plane.D">
            <summary>
            The D component of the plane.
            </summary>
        </member>
        <member name="T:NeoAxis.Plane.Side">
            <summary>
            Determines from which side of the plane the object can be.
            </summary>
        </member>
        <member name="F:NeoAxis.Plane.Zero">
            <summary>
            Returns the plane with all of its components set to zero.
            </summary>
        </member>
        <member name="M:NeoAxis.Plane.#ctor(NeoAxis.Plane)">
            <summary>
            Constructs a plane with another specified <see cref="T:NeoAxis.Plane"/> object.
            </summary>
            <param name="source">A specified plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a plane with the given A, B, C and D components.
            </summary>
            <param name="a">The A component of the plane.</param>
            <param name="b">The B component of the plane.</param>
            <param name="c">The C component of the plane.</param>
            <param name="d">The D component of the plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.#ctor(NeoAxis.Vector3,System.Double)">
            <summary>
            Constructs a plane with the given normal and the distance along this normal from the origin.
            </summary>
            <param name="normal">The normal vector of the plane.</param>
            <param name="distance">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:NeoAxis.Plane.#ctor(NeoAxis.PlaneF)">
            <summary>
            Constructs a plane with the specified <see cref="T:NeoAxis.PlaneF"/> object.
            </summary>
            <param name="source">A specified plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.#ctor(NeoAxis.Vector4)">
            <summary>
            Constructs a plane from the given <see cref="T:NeoAxis.Vector4"/> object.
            </summary>
            <param name="source">A specified vector.</param>
        </member>
        <member name="M:NeoAxis.Plane.Parse(System.String)">
            <summary>
            Converts a string representation of a plane into the equivalent <see cref="T:NeoAxis.Plane"/> structure.
            </summary>
            <param name="text">The string representation of the plane (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Plane"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Plane.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Plane"/>.</returns>
        </member>
        <member name="M:NeoAxis.Plane.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Plane"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Plane"/>.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Plane"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Plane"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Plane.op_Addition(NeoAxis.Plane,NeoAxis.Plane)">
            <summary>
            Adds two planes.
            </summary>
            <param name="p0">The first plane to add.</param>
            <param name="p1">The second plane to add.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.op_Subtraction(NeoAxis.Plane,NeoAxis.Plane)">
            <summary>
            Subtracts two planes.
            </summary>
            <param name="p0">The plane to subtract from.</param>
            <param name="p1">The plane to be subtracted from another plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.op_UnaryNegation(NeoAxis.Plane)">
            <summary>
            Reverses the direction of a given plane. 
            </summary>
            <param name="p">The plane to negate.</param>
            <returns>A plane facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Add(NeoAxis.Plane@,NeoAxis.Plane@,NeoAxis.Plane@)">
            <summary>
            Adds two planes.
            </summary>
            <param name="p0">The first plane to add.</param>
            <param name="p1">The second plane to add.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.Subtract(NeoAxis.Plane@,NeoAxis.Plane@,NeoAxis.Plane@)">
            <summary>
            Subtracts two planes.
            </summary>
            <param name="p0">The plane to subtract from.</param>
            <param name="p1">The plane to be subtracted from another plane.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.Negate(NeoAxis.Plane@,NeoAxis.Plane@)">
            <summary>
            Reverses the direction of a given plane.
            </summary>
            <param name="p">The plane to negate.</param>
            <param name="result">When the method completes, contains the plane facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Plane.op_Equality(NeoAxis.Plane,NeoAxis.Plane)">
            <summary>
            Determines whether two given planes are equal.
            </summary>
            <param name="p0">The first plane to compare.</param>
            <param name="p1">The second plane to compare.</param>
            <returns>True if the planes are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.op_Inequality(NeoAxis.Plane,NeoAxis.Plane)">
            <summary>
            Determines whether two given planes are unequal.
            </summary>
            <param name="p0">The first plane to compare.</param>
            <param name="p1">The second plane to compare.</param>
            <returns>True if the planes are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Plane.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Plane.Equals(NeoAxis.Plane,System.Double)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>
            with a given precision.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Equals(NeoAxis.Plane@,System.Double)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>
            with a given precision.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Equals(NeoAxis.Plane,System.Double,System.Double)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>
            with the given normal and distance precisions.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="normalEpsilon">The precision value for the plane normal.</param>
            <param name="distanceEpsilon">The precision value for the distance component of the plane.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Equals(NeoAxis.Plane@,System.Double,System.Double)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>
            with the given normal and distance precisions.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="normalEpsilon">The precision value for the plane normal.</param>
            <param name="distanceEpsilon">The precision value for the distance component of the plane.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Plane.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="P:NeoAxis.Plane.Distance">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:NeoAxis.Plane.Normalize">
            <summary>
            Converts a normal vector of the current instance of <see cref="T:NeoAxis.Plane"/> into a unit vector.
            </summary>
            <returns>The length of the plane normal vector.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetNormalize">
            <summary>
            Converts a normal vector of the current instance of <see cref="T:NeoAxis.Plane"/> into a unit vector and returns the resulting plane.
            </summary>
            <returns>The plane with normalized normal vector.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetDistance(NeoAxis.Vector3)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="v">A specified vector.</param>
            <returns>The dot product of a specified vector and the normal of the plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetDistance(NeoAxis.Vector3@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="v">A specified vector.</param>
            <returns>The dot product of a specified vector and the normal of the plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3)">
            <summary>
            Determines from which side of the plane the point is on.
            </summary>
            <param name="point">The point to check.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3@)">
            <summary>
            Determines from which side of the plane the point is on.
            </summary>
            <param name="point">The point to check.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3,System.Double)">
            <summary>
            Determines from which side of the plane the point is on (with the given precision).
            </summary>
            <param name="point">The point to check.</param>
            <param name="epsilon">The given precision.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3@,System.Double)">
            <summary>
            Determines from which side of the plane the point is on (with the given precision).
            </summary>
            <param name="point">The point to check.</param>
            <param name="epsilon">The given precision.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.ToVector4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Plane"/> into an instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Plane.FromPoints(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> that contains the three given points. 
            </summary>
            <param name="point0">The first point defining the plane.</param>
            <param name="point1">The second point defining the plane.</param>
            <param name="point2">The third point defining the plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.FromPoints(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Plane@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> that contains the three given points. 
            </summary>
            <param name="point0">The first point defining the plane.</param>
            <param name="point1">The second point defining the plane.</param>
            <param name="point2">The third point defining the plane.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.FromVectors(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> with point and two direction vectors.
            </summary>
            <param name="dir1">The first direction vector.</param>
            <param name="dir2">The second direction vector.</param>
            <param name="p">The point that is the start of direction vectors.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.FromVectors(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Plane@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> with point and two direction vectors.
            </summary>
            <param name="dir1">The first direction vector.</param>
            <param name="dir2">The second direction vector.</param>
            <param name="p">The point that is the start of direction vectors.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.FromPointAndNormal(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> with the normal and the point.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.Plane.FromPointAndNormal(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Plane@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.Plane"/> with the normal and the point.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
            <param name="plane">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Ray@,System.Double@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale">When the method completes, contains the ray and plane intersection.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Ray,System.Double@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale">When the method completes, contains the ray and plane intersection.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Ray@,NeoAxis.Vector3@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="intersectionPoint">The resulting point of intersection of the plane and the ray (if they intersected).</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Ray,NeoAxis.Vector3@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="intersectionPoint">The resulting point of intersection of the plane and the ray (if they intersected).</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Line3@,System.Double@)">
            <summary>
            Determines whether the given line intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="line">The line to check.</param>
            <param name="scale">When the method completes, contains the line and plane intersection.</param>
            <returns>True if the given line intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.Intersects(NeoAxis.Line3,System.Double@)">
            <summary>
            Determines whether the given line intersects the current instance of <see cref="T:NeoAxis.Plane"/>.
            </summary>
            <param name="line">The line to check.</param>
            <param name="scale">When the method completes, contains the line and plane intersection.</param>
            <returns>True if the given line intersects the current instance of <see cref="T:NeoAxis.Plane"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as centre/half-size pairs for effectively.
            </summary>
            <param name="boundsCenter">The box center.</param>
            <param name="boundsHalfSize">The box extents.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as centre/half-size pairs for effectively.
            </summary>
            <param name="boundsCenter">The box center.</param>
            <param name="boundsHalfSize">The box extents.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Bounds@)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as bounds.
            </summary>
            <param name="bounds">The given bounds.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.Plane.GetSide(NeoAxis.Bounds)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as bounds.
            </summary>
            <param name="bounds">The given bounds.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.Plane.ToPlaneF">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Plane"/> to the plane of <see cref="T:NeoAxis.PlaneF"/> format.
            </summary>
            <returns>The plane of <see cref="T:NeoAxis.PlaneF"/> format.</returns>
        </member>
        <member name="T:NeoAxis.PlaneF">
            <summary>
            Represents a single precision plane in three-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.PlaneF.A">
            <summary>
            The A component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.PlaneF.B">
            <summary>
            The B component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.PlaneF.C">
            <summary>
            The C component of the plane.
            </summary>
        </member>
        <member name="F:NeoAxis.PlaneF.D">
            <summary>
            The D component of the plane.
            </summary>
        </member>
        <member name="T:NeoAxis.PlaneF.Side">
            <summary>
            Determines from which side of the plane the object can be.
            </summary>
        </member>
        <member name="F:NeoAxis.PlaneF.Zero">
            <summary>
            Returns the plane with all of its components set to zero.
            </summary>
        </member>
        <member name="M:NeoAxis.PlaneF.#ctor(NeoAxis.PlaneF)">
            <summary>
            Constructs a plane with another specified <see cref="T:NeoAxis.PlaneF"/> object.
            </summary>
            <param name="source">A specified plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a plane with the given A, B, C and D components.
            </summary>
            <param name="a">The A component of the plane.</param>
            <param name="b">The B component of the plane.</param>
            <param name="c">The C component of the plane.</param>
            <param name="d">The D component of the plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.#ctor(NeoAxis.Vector3F,System.Single)">
            <summary>
            Constructs a plane with the given normal and the distance along this normal from the origin.
            </summary>
            <param name="normal">The normal vector of the plane.</param>
            <param name="distance">The distance of the plane along its normal from the origin.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.#ctor(NeoAxis.Vector4F)">
            <summary>
            Constructs a plane from the given <see cref="T:NeoAxis.Vector4F"/> object.
            </summary>
            <param name="source">A specified vector.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.Parse(System.String)">
            <summary>
            Converts a string representation of a plane into the equivalent <see cref="T:NeoAxis.PlaneF"/> structure.
            </summary>
            <param name="text">The string representation of the plane (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.PlaneF"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.PlaneF"/>.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.PlaneF"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.PlaneF"/>.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.PlaneF"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.op_Addition(NeoAxis.PlaneF,NeoAxis.PlaneF)">
            <summary>
            Adds two planes.
            </summary>
            <param name="p0">The first plane to add.</param>
            <param name="p1">The second plane to add.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.op_Subtraction(NeoAxis.PlaneF,NeoAxis.PlaneF)">
            <summary>
            Subtracts two planes.
            </summary>
            <param name="p0">The plane to subtract from.</param>
            <param name="p1">The plane to be subtracted from another plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.op_UnaryNegation(NeoAxis.PlaneF)">
            <summary>
            Reverses the direction of a given plane. 
            </summary>
            <param name="p">The plane to negate.</param>
            <returns>A plane facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Add(NeoAxis.PlaneF@,NeoAxis.PlaneF@,NeoAxis.PlaneF@)">
            <summary>
            Adds two planes.
            </summary>
            <param name="p0">The first plane to add.</param>
            <param name="p1">The second plane to add.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.Subtract(NeoAxis.PlaneF@,NeoAxis.PlaneF@,NeoAxis.PlaneF@)">
            <summary>
            Subtracts two planes.
            </summary>
            <param name="p0">The plane to subtract from.</param>
            <param name="p1">The plane to be subtracted from another plane.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.Negate(NeoAxis.PlaneF@,NeoAxis.PlaneF@)">
            <summary>
            Reverses the direction of a given plane.
            </summary>
            <param name="p">The plane to negate.</param>
            <param name="result">When the method completes, contains the plane facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.op_Equality(NeoAxis.PlaneF,NeoAxis.PlaneF)">
            <summary>
            Determines whether two given planes are equal.
            </summary>
            <param name="p0">The first plane to compare.</param>
            <param name="p1">The second plane to compare.</param>
            <returns>True if the planes are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.op_Inequality(NeoAxis.PlaneF,NeoAxis.PlaneF)">
            <summary>
            Determines whether two given planes are unequal.
            </summary>
            <param name="p0">The first plane to compare.</param>
            <param name="p1">The second plane to compare.</param>
            <returns>True if the planes are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.PlaneF.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, C, or D component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, 2 for the C component, and 3 for the D component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.PlaneF.Equals(NeoAxis.PlaneF,System.Single)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>
            with a given precision.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Equals(NeoAxis.PlaneF@,System.Single)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>
            with a given precision.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Equals(NeoAxis.PlaneF,System.Single,System.Single)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>
            with the given normal and distance precisions.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="normalEpsilon">The precision value for the plane normal.</param>
            <param name="distanceEpsilon">The precision value for the distance component of the plane.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Equals(NeoAxis.PlaneF@,System.Single,System.Single)">
            <summary>
            Determines whether the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>
            with the given normal and distance precisions.
            </summary>
            <param name="p">The plane to compare.</param>
            <param name="normalEpsilon">The precision value for the plane normal.</param>
            <param name="distanceEpsilon">The precision value for the distance component of the plane.</param>
            <returns>True if the specified plane is equal to the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.PlaneF.Normal">
            <summary>
            The normal vector of the plane.
            </summary>
        </member>
        <member name="P:NeoAxis.PlaneF.Distance">
            <summary>
            The distance of the plane along its normal from the origin.
            </summary>
        </member>
        <member name="M:NeoAxis.PlaneF.Normalize">
            <summary>
            Converts a normal vector of the current instance of <see cref="T:NeoAxis.PlaneF"/> into a unit vector.
            </summary>
            <returns>The length of the plane normal vector.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetNormalize">
            <summary>
            Converts a normal vector of the current instance of <see cref="T:NeoAxis.PlaneF"/> into a unit vector and returns the resulting plane.
            </summary>
            <returns>The plane with normalized normal vector.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetDistance(NeoAxis.Vector3F)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="v">A specified vector.</param>
            <returns>The dot product of a specified vector and the normal of the plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetDistance(NeoAxis.Vector3F@)">
            <summary>
            Calculates the dot product of a specified vector and the normal of the plane plus the distance value of the plane.
            </summary>
            <param name="v">A specified vector.</param>
            <returns>The dot product of a specified vector and the normal of the plane plus the distance value of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F)">
            <summary>
            Determines from which side of the plane the point is on.
            </summary>
            <param name="point">The point to check.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F@)">
            <summary>
            Determines from which side of the plane the point is on.
            </summary>
            <param name="point">The point to check.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F,System.Single)">
            <summary>
            Determines from which side of the plane the point is on (with the given precision).
            </summary>
            <param name="point">The point to check.</param>
            <param name="epsilon">The given precision.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F@,System.Single)">
            <summary>
            Determines from which side of the plane the point is on (with the given precision).
            </summary>
            <param name="point">The point to check.</param>
            <param name="epsilon">The given precision.</param>
            <returns>The resulting side of the plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.ToVector4F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.PlaneF"/> into an instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.FromPoints(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> that contains the three given points. 
            </summary>
            <param name="point0">The first point defining the plane.</param>
            <param name="point1">The second point defining the plane.</param>
            <param name="point2">The third point defining the plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.FromPoints(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.PlaneF@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> that contains the three given points. 
            </summary>
            <param name="point0">The first point defining the plane.</param>
            <param name="point1">The second point defining the plane.</param>
            <param name="point2">The third point defining the plane.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.FromVectors(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> with point and two direction vectors.
            </summary>
            <param name="dir1">The first direction vector.</param>
            <param name="dir2">The second direction vector.</param>
            <param name="p">The point that is the start of direction vectors.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.FromVectors(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.PlaneF@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> with point and two direction vectors.
            </summary>
            <param name="dir1">The first direction vector.</param>
            <param name="dir2">The second direction vector.</param>
            <param name="p">The point that is the start of direction vectors.</param>
            <param name="result">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.FromPointAndNormal(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> with the normal and the point.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
            <returns>The resulting plane.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.FromPointAndNormal(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.PlaneF@)">
            <summary>
            Creates an instance of <see cref="T:NeoAxis.PlaneF"/> with the normal and the point.
            </summary>
            <param name="point">Any point that lies along the plane.</param>
            <param name="normal">The normal vector to the plane.</param>
            <param name="plane">When the method completes, contains the resulting plane.</param>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.RayF@,System.Single@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale">When the method completes, contains the ray and plane intersection.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.RayF,System.Single@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="scale">When the method completes, contains the ray and plane intersection.</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.RayF@,NeoAxis.Vector3F@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="intersectionPoint">The resulting point of intersection of the plane and the ray (if they intersected).</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.RayF,NeoAxis.Vector3F@)">
            <summary>
            Determines whether the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="ray">The ray to check.</param>
            <param name="intersectionPoint">The resulting point of intersection of the plane and the ray (if they intersected).</param>
            <returns>True if the given ray intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.Line3F@,System.Single@)">
            <summary>
            Determines whether the given line intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="line">The line to check.</param>
            <param name="scale">When the method completes, contains the line and plane intersection.</param>
            <returns>True if the given line intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.Intersects(NeoAxis.Line3F,System.Single@)">
            <summary>
            Determines whether the given line intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>.
            </summary>
            <param name="line">The line to check.</param>
            <param name="scale">When the method completes, contains the line and plane intersection.</param>
            <returns>True if the given line intersects the current instance of <see cref="T:NeoAxis.PlaneF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as centre/half-size pairs for effectively.
            </summary>
            <param name="boundsCenter">The box center.</param>
            <param name="boundsHalfSize">The box extents.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as centre/half-size pairs for effectively.
            </summary>
            <param name="boundsCenter">The box center.</param>
            <param name="boundsHalfSize">The box extents.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.BoundsF@)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as bounds.
            </summary>
            <param name="bounds">The given bounds.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.GetSide(NeoAxis.BoundsF)">
            <summary>
            Returns side of the plane that the given box lies on.
            The box is defined as bounds.
            </summary>
            <param name="bounds">The given bounds.</param>
            <returns>The resulting side.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.ToPlane">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.PlaneF"/> to the plane of <see cref="T:NeoAxis.Plane"/> format.
            </summary>
            <returns>The plane of <see cref="T:NeoAxis.Plane"/> format.</returns>
        </member>
        <member name="M:NeoAxis.PlaneF.op_Implicit(NeoAxis.PlaneF)~NeoAxis.Plane">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.PlaneF"/> type to <see cref="T:NeoAxis.Plane"/> type for the given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.Quaternion">
            <summary>
            Represents a double precision four-dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="M:NeoAxis.Quaternion.FromDirectionZAxisUp(NeoAxis.Vector3@,NeoAxis.Quaternion@)">
            <summary>
            Similar to Quat.LookAt( direction, Vec3.ZAxis ) with fix for vertical direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.Quaternion.FromDirectionZAxisUp(NeoAxis.Vector3)">
            <summary>
            Similar to Quat.LookAt( direction, Vec3.ZAxis ) with fix for vertical direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.QuaternionF">
            <summary>
            Represents a single precision four-dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="M:NeoAxis.QuaternionF.FromDirectionZAxisUp(NeoAxis.Vector3F@,NeoAxis.QuaternionF@)">
            <summary>
            Similar to Mat3F.LookAt( direction, Vec3F.ZAxis ) with fix for vertical direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.QuaternionF.FromDirectionZAxisUp(NeoAxis.Vector3F)">
            <summary>
            Similar to Mat3F.LookAt( direction, Vec3F.ZAxis ) with fix for vertical direction.
            </summary>
            <param name="direction"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.QuaternionH">
            <summary>
            Represents a half precision four-dimensional mathematical quaternion.
            </summary>
        </member>
        <member name="T:NeoAxis.Radian">
            <summary>
            Represents a double precision radian unit value.
            </summary>
        </member>
        <member name="T:NeoAxis.RadianF">
            <summary>
            Represents a single precision radian unit value.
            </summary>
        </member>
        <member name="T:NeoAxis.Range">
            <summary>
            A structure encapsulating a double precision range.
            </summary>
        </member>
        <member name="T:NeoAxis.RangeAttribute">
            <summary>
            This attribute specifies the range of possible values of a property or field in the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.ApplicableRangeColorValuePowerAttribute">
            <summary>
            This attribute specifies the range of possible Power component of color values of a property or field in the editor.
            </summary>
        </member>
        <member name="T:NeoAxis.RangeI">
            <summary>
            A structure encapsulating an integer values range.
            </summary>
        </member>
        <member name="T:NeoAxis.RangeColorValue">
            <summary>
            A structure encapsulating a single precision vector 3 range.
            </summary>
        </member>
        <member name="T:NeoAxis.RangeF">
            <summary>
            A structure encapsulating a single precision range.
            </summary>
        </member>
        <member name="T:NeoAxis.RangeVector3F">
            <summary>
            A structure encapsulating a single precision vector 3 range.
            </summary>
        </member>
        <member name="T:NeoAxis.Ray">
            <summary>
            Represents a double precision three-dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="T:NeoAxis.Ray2">
            <summary>
            Represents a double precision two-dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="T:NeoAxis.Ray2F">
            <summary>
            Represents a single precision two-dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="T:NeoAxis.RayF">
            <summary>
            Represents a single precision three-dimensional line based on a point in space and a direction.
            </summary>
        </member>
        <member name="T:NeoAxis.Rectangle">
            <summary>
            Represents a rectangle with double precision floating values.
            </summary>
        </member>
        <member name="T:NeoAxis.RectangleF">
            <summary>
            Represents a rectangle with single precision floating values.
            </summary>
        </member>
        <member name="T:NeoAxis.RectangleI">
            <summary>
            Represents a rectangle with integer values.
            </summary>
        </member>
        <member name="T:NeoAxis.SimpleMeshGenerator">
            <summary>
            Represents a set of algorithms for generating simple 3D models.
            </summary>
        </member>
        <member name="M:NeoAxis.SimpleMeshGenerator.GetTransformsOfRotationCircle(System.Int32,System.Int32,NeoAxis.Degree,NeoAxis.Vector3)">
            <summary>
            
            </summary>
            <param name="matrixCount">Êîëè÷åñòâî ìàòðèö â return value. Îíî íà 1 áîëüøå ÷åì èíòåðâàëîâ.</param>
            <param name="circumference"></param>
            <param name="offset"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.SpaceBounds">
            <summary>
            Represents a class to contain axis aligned bounds box and bounding sphere.
            </summary>
        </member>
        <member name="T:NeoAxis.Sphere">
            <summary>
            Represents a double precision sphere shape.
            </summary>
        </member>
        <member name="T:NeoAxis.SphereF">
            <summary>
            Represents a single precision sphere shape.
            </summary>
        </member>
        <member name="T:NeoAxis.SphericalDirection">
            <summary>
            Represents a double precision spherical coordinate system direction.
            </summary>
        </member>
        <member name="T:NeoAxis.SphericalDirectionF">
            <summary>
            Represents a single precision spherical coordinate system direction.
            </summary>
        </member>
        <member name="T:NeoAxis.StandardVertex">
            <summary>
            The declaration of the standard vertex. This structure of the mesh vertex data can be used in most cases.
            </summary>
        </member>
        <member name="T:NeoAxis.StandardVertex.Components">
            <summary>
            The enumeration to specify vertex structure.
            </summary>
        </member>
        <member name="T:NeoAxis.StandardVertex.StaticOneTexCoord">
            <summary>
            Represents a simplified version of <see cref="T:NeoAxis.StandardVertex"/> with one channel of texture coordinates and without animation data.
            </summary>
        </member>
        <member name="M:NeoAxis.StandardVertex.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector4F,NeoAxis.ColorValue,NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.Vector4I,NeoAxis.Vector4F)">
            <summary>
            The constructor of the vertex.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="tangent">The tangent vector of the vertex.</param>
            <param name="color">The color of the vertex.</param>
            <param name="texCoord0">The texture coordinate 0 of the vertex.</param>
            <param name="texCoord1">The texture coordinate 1 of the vertex.</param>
            <param name="texCoord2">The texture coordinate 2 of the vertex.</param>
            <param name="texCoord3">The texture coordinate 3 of the vertex.</param>
        </member>
        <member name="M:NeoAxis.StandardVertex.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector4F,NeoAxis.Vector2F)">
            <summary>
            The constructor of the vertex.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="tangent">The tangent vector of the vertex.</param>
            <param name="texCoord0">The texture coordinate 0 of the vertex.</param>
        </member>
        <member name="M:NeoAxis.StandardVertex.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector4F)">
            <summary>
            The constructor of the vertex.
            </summary>
            <param name="position">The position of the vertex.</param>
            <param name="normal">The normal of the vertex.</param>
            <param name="tangent">The tangent vector of the vertex.</param>
        </member>
        <member name="M:NeoAxis.StandardVertex.#ctor(NeoAxis.Vector3F)">
            <summary>
            The constructor of the vertex.
            </summary>
            <param name="position">The position of the vertex.</param>
        </member>
        <member name="T:NeoAxis.Transform">
            <summary>
            Defines the position in space. This class is immutable for optimization purposes.
            </summary>
        </member>
        <member name="P:NeoAxis.Transform.Position">
            <summary>
            The position of the transform.
            </summary>
        </member>
        <member name="P:NeoAxis.Transform.Rotation">
            <summary>
            The rotation of the transform.
            </summary>
        </member>
        <member name="P:NeoAxis.Transform.Scale">
            <summary>
            The scale of the transform.
            </summary>
        </member>
        <member name="T:NeoAxis.Triangle">
            <summary>
            Represents a double precision triangle in three-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle.A">
            <summary>
            The A corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle.B">
            <summary>
            The B corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle.C">
            <summary>
            The C corner point of the triangle.
            </summary>
        </member>
        <member name="M:NeoAxis.Triangle.#ctor(NeoAxis.Vector3,NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Constructs a triangle with the given A, B and C components.
            </summary>
            <param name="a">The A component of the triangle.</param>
            <param name="b">The B component of the triangle.</param>
            <param name="c">The C component of the triangle.</param>
        </member>
        <member name="M:NeoAxis.Triangle.#ctor(NeoAxis.TriangleF)">
            <summary>
            Constructs a triangle with another specified <see cref="T:NeoAxis.TriangleF"/> object.
            </summary>
            <param name="source">The triangle of <see cref="T:NeoAxis.TriangleF"/> format.</param>
        </member>
        <member name="P:NeoAxis.Triangle.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, or C component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, and 2 for the C component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Triangle.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.Equals(NeoAxis.Triangle,System.Double)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.Equals(NeoAxis.Triangle@,System.Double)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Triangle"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.op_Equality(NeoAxis.Triangle,NeoAxis.Triangle)">
            <summary>
            Determines whether two given triangles are equal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.op_Inequality(NeoAxis.Triangle,NeoAxis.Triangle)">
            <summary>
            Determines whether two given triangles are unequal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle"/>.</returns>
        </member>
        <member name="M:NeoAxis.Triangle.ToTriangleF">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Triangle"/> to the triangle of <see cref="T:NeoAxis.TriangleF"/> format.
            </summary>
            <returns>The triangle of <see cref="T:NeoAxis.TriangleF"/> format.</returns>
        </member>
        <member name="T:NeoAxis.Triangle2">
            <summary>
            Represents a double precision triangle in two-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2.A">
            <summary>
            The A corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2.B">
            <summary>
            The B corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2.C">
            <summary>
            The C corner point of the triangle.
            </summary>
        </member>
        <member name="M:NeoAxis.Triangle2.#ctor(NeoAxis.Vector2,NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Constructs a triangle with the given A, B and C components.
            </summary>
            <param name="a">The A component of the triangle.</param>
            <param name="b">The B component of the triangle.</param>
            <param name="c">The C component of the triangle.</param>
        </member>
        <member name="M:NeoAxis.Triangle2.#ctor(NeoAxis.Triangle2F)">
            <summary>
            Constructs a triangle with another specified <see cref="T:NeoAxis.Triangle2F"/> object.
            </summary>
            <param name="source">The triangle of <see cref="T:NeoAxis.Triangle2F"/> format.</param>
        </member>
        <member name="P:NeoAxis.Triangle2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, or C component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, and 2 for the C component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Triangle2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.Equals(NeoAxis.Triangle2,System.Double)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.Equals(NeoAxis.Triangle2@,System.Double)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Triangle2"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle2"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.op_Equality(NeoAxis.Triangle2,NeoAxis.Triangle2)">
            <summary>
            Determines whether two given triangles are equal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.op_Inequality(NeoAxis.Triangle2,NeoAxis.Triangle2)">
            <summary>
            Determines whether two given triangles are unequal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2.ToTriangle2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Triangle2"/> to the triangle of <see cref="T:NeoAxis.Triangle2F"/> format.
            </summary>
            <returns>The triangle of <see cref="T:NeoAxis.Triangle2F"/> format.</returns>
        </member>
        <member name="T:NeoAxis.Triangle2F">
            <summary>
            Represents a single precision triangle in three-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2F.A">
            <summary>
            The A corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2F.B">
            <summary>
            The B corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.Triangle2F.C">
            <summary>
            The C corner point of the triangle.
            </summary>
        </member>
        <member name="M:NeoAxis.Triangle2F.#ctor(NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Constructs a triangle with the given A, B and C components.
            </summary>
            <param name="a">The A component of the triangle.</param>
            <param name="b">The B component of the triangle.</param>
            <param name="c">The C component of the triangle.</param>
        </member>
        <member name="M:NeoAxis.Triangle2F.#ctor(NeoAxis.Triangle2)">
            <summary>
            Constructs a triangle with another specified <see cref="T:NeoAxis.Triangle"/> object.
            </summary>
            <param name="source">The triangle of <see cref="T:NeoAxis.Triangle"/> format.</param>
        </member>
        <member name="P:NeoAxis.Triangle2F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, or C component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, and 2 for the C component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Triangle2F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.Equals(NeoAxis.Triangle2F,System.Single)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.Equals(NeoAxis.Triangle2F@,System.Single)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Triangle2F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Triangle2F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.op_Equality(NeoAxis.Triangle2F,NeoAxis.Triangle2F)">
            <summary>
            Determines whether two given triangles are equal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.op_Inequality(NeoAxis.Triangle2F,NeoAxis.Triangle2F)">
            <summary>
            Determines whether two given triangles are unequal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle2F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Triangle2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Triangle2F.ToTriangle">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Triangle2F"/> to the triangle of <see cref="T:NeoAxis.Triangle"/> format.
            </summary>
            <returns>The triangle of <see cref="T:NeoAxis.Triangle"/> format.</returns>
        </member>
        <member name="T:NeoAxis.TriangleF">
            <summary>
            Represents a single precision triangle in three-dimensional space.
            </summary>
        </member>
        <member name="F:NeoAxis.TriangleF.A">
            <summary>
            The A corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.TriangleF.B">
            <summary>
            The B corner point of the triangle.
            </summary>
        </member>
        <member name="F:NeoAxis.TriangleF.C">
            <summary>
            The C corner point of the triangle.
            </summary>
        </member>
        <member name="M:NeoAxis.TriangleF.#ctor(NeoAxis.Vector3F,NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Constructs a triangle with the given A, B and C components.
            </summary>
            <param name="a">The A component of the triangle.</param>
            <param name="b">The B component of the triangle.</param>
            <param name="c">The C component of the triangle.</param>
        </member>
        <member name="M:NeoAxis.TriangleF.#ctor(NeoAxis.Triangle)">
            <summary>
            Constructs a triangle with another specified <see cref="T:NeoAxis.Triangle"/> object.
            </summary>
            <param name="source">The triangle of <see cref="T:NeoAxis.Triangle"/> format.</param>
        </member>
        <member name="P:NeoAxis.TriangleF.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the A, B, or C component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the A component, 1 for the B component, and 2 for the C component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.TriangleF.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.Equals(NeoAxis.TriangleF,System.Single)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.Equals(NeoAxis.TriangleF@,System.Single)">
            <summary>
            Determines whether the specified triangle is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>
            with a given precision.
            </summary>
            <param name="v">The triangle to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified triangle is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.TriangleF"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.TriangleF"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.op_Equality(NeoAxis.TriangleF,NeoAxis.TriangleF)">
            <summary>
            Determines whether two given triangles are equal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.op_Inequality(NeoAxis.TriangleF,NeoAxis.TriangleF)">
            <summary>
            Determines whether two given triangles are unequal.
            </summary>
            <param name="v1">The first triangle to compare.</param>
            <param name="v2">The second triangle to compare.</param>
            <returns>True if the triangles are unequal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.TriangleF"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.TriangleF"/>.</returns>
        </member>
        <member name="M:NeoAxis.TriangleF.ToTriangle">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.TriangleF"/> to the triangle of <see cref="T:NeoAxis.Triangle"/> format.
            </summary>
            <returns>The triangle of <see cref="T:NeoAxis.Triangle"/> format.</returns>
        </member>
        <member name="T:NeoAxis.Vector2">
            <summary>
            A structure encapsulating two double precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2.#ctor(NeoAxis.Vector2)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.#ctor(System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:NeoAxis.Vector2.#ctor(NeoAxis.Vector2F)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector2F"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.#ctor(NeoAxis.Vector2I)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector2I"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector2"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Addition(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Subtraction(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Multiply(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Multiply(NeoAxis.Vector2,System.Double)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Multiply(System.Double,NeoAxis.Vector2)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Division(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Division(NeoAxis.Vector2,System.Double)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Division(System.Double,NeoAxis.Vector2)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_UnaryNegation(NeoAxis.Vector2)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Add(NeoAxis.Vector2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Subtract(NeoAxis.Vector2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Multiply(NeoAxis.Vector2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Multiply(NeoAxis.Vector2@,System.Double,NeoAxis.Vector2@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Multiply(System.Double,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Divide(NeoAxis.Vector2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Divide(NeoAxis.Vector2@,System.Double,NeoAxis.Vector2@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Divide(System.Double,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Negate(NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector2.op_Equality(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.op_Inequality(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector2.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Vector2.Dot(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Dot(NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Dot(NeoAxis.Vector2@,NeoAxis.Vector2@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Dot(NeoAxis.Vector2)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Dot(NeoAxis.Vector2@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Cross(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Cross(NeoAxis.Vector2@,NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Cross(NeoAxis.Vector2)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Cross(NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Equals(NeoAxis.Vector2,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Equals(NeoAxis.Vector2@,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Clamp(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.GetClamp(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Normalize(NeoAxis.Vector2)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Normalize(NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Lerp(NeoAxis.Vector2,NeoAxis.Vector2,System.Double)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Lerp(NeoAxis.Vector2@,NeoAxis.Vector2@,System.Double,NeoAxis.Vector2@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Distance(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Distance(NeoAxis.Vector2@,NeoAxis.Vector2@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.ToVector2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2"/> into the equivalent <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.ToVector2H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2"/> into the equivalent <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.ToVector2I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2"/> into the equivalent <see cref="T:NeoAxis.Vector2I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Select(NeoAxis.Vector2,NeoAxis.Vector2,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector2"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector2.GetTruncate(NeoAxis.Vector2)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector2.AnyNonZero(NeoAxis.Vector2)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.AllNonZero(NeoAxis.Vector2)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Abs(NeoAxis.Vector2)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Acos(NeoAxis.Vector2)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Asin(NeoAxis.Vector2)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Atan(NeoAxis.Vector2)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Atan2(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Cos(NeoAxis.Vector2)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Cosh(NeoAxis.Vector2)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Exp(NeoAxis.Vector2)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Log(NeoAxis.Vector2)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Log10(NeoAxis.Vector2)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Max(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Min(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Pow(NeoAxis.Vector2,NeoAxis.Vector2)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Sin(NeoAxis.Vector2)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Sinh(NeoAxis.Vector2)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Sqrt(NeoAxis.Vector2)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Tan(NeoAxis.Vector2)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.Tanh(NeoAxis.Vector2)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector2F">
            <summary>
            A structure encapsulating two single precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2F.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2F.#ctor(NeoAxis.Vector2F)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2F"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector2F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Addition(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Subtraction(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Multiply(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Multiply(NeoAxis.Vector2F,System.Single)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Multiply(System.Single,NeoAxis.Vector2F)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Division(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Division(NeoAxis.Vector2F,System.Single)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Division(System.Single,NeoAxis.Vector2F)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_UnaryNegation(NeoAxis.Vector2F)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Add(NeoAxis.Vector2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Subtract(NeoAxis.Vector2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Multiply(NeoAxis.Vector2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Multiply(NeoAxis.Vector2F@,System.Single,NeoAxis.Vector2F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Multiply(System.Single,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Divide(NeoAxis.Vector2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Divide(NeoAxis.Vector2F@,System.Single,NeoAxis.Vector2F@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Divide(System.Single,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Negate(NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Equality(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Inequality(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector2F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Vector2F.Dot(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Dot(NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Dot(NeoAxis.Vector2F@,NeoAxis.Vector2F@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Dot(NeoAxis.Vector2F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Dot(NeoAxis.Vector2F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Cross(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Cross(NeoAxis.Vector2F@,NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Cross(NeoAxis.Vector2F)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Cross(NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Equals(NeoAxis.Vector2F,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Equals(NeoAxis.Vector2F@,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Clamp(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2F"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.GetClamp(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2F"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Normalize(NeoAxis.Vector2F)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Normalize(NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Lerp(NeoAxis.Vector2F,NeoAxis.Vector2F,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Lerp(NeoAxis.Vector2F@,NeoAxis.Vector2F@,System.Single,NeoAxis.Vector2F@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2F"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2F.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2F"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Distance(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Distance(NeoAxis.Vector2F@,NeoAxis.Vector2F@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into the equivalent <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.ToVector2I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into the equivalent <see cref="T:NeoAxis.Vector2I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.ToVector2H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into the equivalent <see cref="T:NeoAxis.Vector2H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.op_Implicit(NeoAxis.Vector2F)~NeoAxis.Vector2">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector2F"/> type to <see cref="T:NeoAxis.Vector2"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector2F.Select(NeoAxis.Vector2F,NeoAxis.Vector2F,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector2F"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector2F.GetTruncate(NeoAxis.Vector2F)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.AnyNonZero(NeoAxis.Vector2F)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.AllNonZero(NeoAxis.Vector2F)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Abs(NeoAxis.Vector2F)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Acos(NeoAxis.Vector2F)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Asin(NeoAxis.Vector2F)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Atan(NeoAxis.Vector2F)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Atan2(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Cos(NeoAxis.Vector2F)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Cosh(NeoAxis.Vector2F)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Exp(NeoAxis.Vector2F)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Log(NeoAxis.Vector2F)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Log10(NeoAxis.Vector2F)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Max(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Min(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Pow(NeoAxis.Vector2F,NeoAxis.Vector2F)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Sin(NeoAxis.Vector2F)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Sinh(NeoAxis.Vector2F)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Sqrt(NeoAxis.Vector2F)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Tan(NeoAxis.Vector2F)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.Tanh(NeoAxis.Vector2F)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2F.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2F"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector2H">
            <summary>
            A structure encapsulating three half precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2H.ZAxis">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2H.#ctor(NeoAxis.Vector2H)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.#ctor(NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.#ctor(System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector2H"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2H"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector2H"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Addition(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Subtraction(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Multiply(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Multiply(NeoAxis.Vector2H,NeoAxis.HalfType)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Multiply(NeoAxis.HalfType,NeoAxis.Vector2H)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Division(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Division(NeoAxis.Vector2H,NeoAxis.HalfType)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Division(NeoAxis.HalfType,NeoAxis.Vector2H)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_UnaryNegation(NeoAxis.Vector2H)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Add(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Subtract(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Multiply(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Multiply(NeoAxis.Vector2H@,NeoAxis.HalfType,NeoAxis.Vector2H@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Multiply(NeoAxis.HalfType,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Divide(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Divide(NeoAxis.Vector2H@,NeoAxis.HalfType,NeoAxis.Vector2H@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Divide(NeoAxis.HalfType,NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Negate(NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Equality(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Inequality(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector2H.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Vector2H.Dot(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Dot(NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Dot(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.HalfType@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Dot(NeoAxis.Vector2H)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Dot(NeoAxis.Vector2H@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Equals(NeoAxis.Vector2H,NeoAxis.HalfType)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Equals(NeoAxis.Vector2H@,NeoAxis.HalfType)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2H"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Clamp(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2H"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.GetClamp(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2H"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Lerp(NeoAxis.Vector2H,NeoAxis.Vector2H,NeoAxis.HalfType)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Lerp(NeoAxis.Vector2H@,NeoAxis.Vector2H@,NeoAxis.HalfType,NeoAxis.Vector2H@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2H"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2H.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector2H"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Distance(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Distance(NeoAxis.Vector2H@,NeoAxis.Vector2H@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2H"/> into the equivalent <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToVector2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2H"/> into the equivalent <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToVector2I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2H"/> into the equivalent <see cref="T:NeoAxis.Vector2I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.ToVector2H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2F"/> into the equivalent <see cref="T:NeoAxis.Vector2H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Implicit(NeoAxis.Vector2H)~NeoAxis.Vector2">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector2H"/> type to <see cref="T:NeoAxis.Vector2"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Implicit(NeoAxis.Vector2H)~NeoAxis.Vector2F">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector2H"/> type to <see cref="T:NeoAxis.Vector2F"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.op_Implicit(NeoAxis.Vector2F)~NeoAxis.Vector2H">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector2F"/> type to <see cref="T:NeoAxis.Vector2H"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector2H.Select(NeoAxis.Vector2H,NeoAxis.Vector2H,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector2H"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector2H.GetTruncate(NeoAxis.Vector2H)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.AnyNonZero(NeoAxis.Vector2H)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.AllNonZero(NeoAxis.Vector2H)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Abs(NeoAxis.Vector2H)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Acos(NeoAxis.Vector2H)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Asin(NeoAxis.Vector2H)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Atan(NeoAxis.Vector2H)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Atan2(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Cos(NeoAxis.Vector2H)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Cosh(NeoAxis.Vector2H)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Exp(NeoAxis.Vector2H)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Log(NeoAxis.Vector2H)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Log10(NeoAxis.Vector2H)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Max(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Min(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Pow(NeoAxis.Vector2H,NeoAxis.Vector2H)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Sin(NeoAxis.Vector2H)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Sinh(NeoAxis.Vector2H)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Sqrt(NeoAxis.Vector2H)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Tan(NeoAxis.Vector2H)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.Tanh(NeoAxis.Vector2H)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2H.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2H"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2H"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector2I">
            <summary>
            A structure encapsulating two integer values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2I.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2I.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2I.Zero">
            <summary>
            Returns the vector (0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector2I.One">
            <summary>
            Returns the vector (1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector2I.#ctor(NeoAxis.Vector2I)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector2I"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector2I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector2I"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector2I"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Addition(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Subtraction(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Multiply(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Multiply(NeoAxis.Vector2I,System.Int32)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Multiply(System.Int32,NeoAxis.Vector2I)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Division(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Division(NeoAxis.Vector2I,System.Int32)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Division(System.Int32,NeoAxis.Vector2I)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_UnaryNegation(NeoAxis.Vector2I)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Add(NeoAxis.Vector2I@,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Subtract(NeoAxis.Vector2I@,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Multiply(NeoAxis.Vector2I@,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Multiply(NeoAxis.Vector2I@,System.Int32,NeoAxis.Vector2I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Multiply(System.Int32,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Divide(NeoAxis.Vector2I@,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Divide(NeoAxis.Vector2I@,System.Int32,NeoAxis.Vector2I@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Divide(System.Int32,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="v1">The scalar value.</param>
            <param name="v2">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Negate(NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Equality(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.op_Inequality(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector2I.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X or Y component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component and 1 for the Y component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 1].</exception>
        </member>
        <member name="M:NeoAxis.Vector2I.Dot(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Dot(NeoAxis.Vector2I@,NeoAxis.Vector2I@,System.Int32@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Cross(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Cross(NeoAxis.Vector2I@,NeoAxis.Vector2I@,NeoAxis.Vector2I@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector2I.Equals(NeoAxis.Vector2I,System.Int32)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2I"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector2I"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Clamp(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector2I"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector2I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.ToVector2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2I"/> into the equivalent <see cref="T:NeoAxis.Vector2F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector2I"/> into the equivalent <see cref="T:NeoAxis.Vector2"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector2"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Select(NeoAxis.Vector2I,NeoAxis.Vector2I,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.AnyNonZero(NeoAxis.Vector2I)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.AllNonZero(NeoAxis.Vector2I)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Max(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.Min(NeoAxis.Vector2I,NeoAxis.Vector2I)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector2I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector2I.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector2I"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector3">
            <summary>
            A structure encapsulating three double precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3.ZAxis">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3.#ctor(NeoAxis.Vector3)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.#ctor(NeoAxis.Vector2,System.Double)">
            <summary>
            Constructs a vector with a given <see cref="T:NeoAxis.Vector2"/> and a scalar.
            </summary>
            <param name="xy">The given <see cref="T:NeoAxis.Vector2"/>.</param>
            <param name="z">The scalar value.</param>
        </member>
        <member name="M:NeoAxis.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector3.#ctor(NeoAxis.Vector3F)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector3F"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.#ctor(NeoAxis.Vector3I)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector3I"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector3"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Addition(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Subtraction(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Multiply(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Multiply(NeoAxis.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Multiply(System.Double,NeoAxis.Vector3)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Division(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Division(NeoAxis.Vector3,System.Double)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Division(System.Double,NeoAxis.Vector3)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_UnaryNegation(NeoAxis.Vector3)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Add(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Subtract(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Multiply(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Multiply(NeoAxis.Vector3@,System.Double,NeoAxis.Vector3@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Multiply(System.Double,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Divide(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Divide(NeoAxis.Vector3@,System.Double,NeoAxis.Vector3@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Divide(System.Double,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Negate(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector3.op_Equality(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.op_Inequality(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector3.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Vector3.Dot(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Dot(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Dot(NeoAxis.Vector3@,NeoAxis.Vector3@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Dot(NeoAxis.Vector3)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Dot(NeoAxis.Vector3@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Cross(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Cross(NeoAxis.Vector3@,NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Cross(NeoAxis.Vector3)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Cross(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Equals(NeoAxis.Vector3,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Equals(NeoAxis.Vector3@,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Clamp(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.GetClamp(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Normalize(NeoAxis.Vector3)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Normalize(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into an instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToVector2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into an instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Lerp(NeoAxis.Vector3,NeoAxis.Vector3,System.Double)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Lerp(NeoAxis.Vector3@,NeoAxis.Vector3@,System.Double,NeoAxis.Vector3@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Distance(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Distance(NeoAxis.Vector3@,NeoAxis.Vector3@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToVector3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into the equivalent <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToVector3H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into the equivalent <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.ToVector3I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3"/> into the equivalent <see cref="T:NeoAxis.Vector3I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Select(NeoAxis.Vector3,NeoAxis.Vector3,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector3"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector3.GetTruncate(NeoAxis.Vector3)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector3.AnyNonZero(NeoAxis.Vector3)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.AllNonZero(NeoAxis.Vector3)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Abs(NeoAxis.Vector3)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Acos(NeoAxis.Vector3)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Asin(NeoAxis.Vector3)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Atan(NeoAxis.Vector3)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Atan2(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Cos(NeoAxis.Vector3)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Cosh(NeoAxis.Vector3)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Exp(NeoAxis.Vector3)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Log(NeoAxis.Vector3)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Log10(NeoAxis.Vector3)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Max(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Min(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Pow(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Sin(NeoAxis.Vector3)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Sinh(NeoAxis.Vector3)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Sqrt(NeoAxis.Vector3)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Tan(NeoAxis.Vector3)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.Tanh(NeoAxis.Vector3)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector3F">
            <summary>
            A structure encapsulating three single precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3F.ZAxis">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3F.#ctor(NeoAxis.Vector3F)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.#ctor(NeoAxis.Vector2F,System.Single)">
            <summary>
            Constructs a vector with a given <see cref="T:NeoAxis.Vector2F"/> and a scalar.
            </summary>
            <param name="xy">The given <see cref="T:NeoAxis.Vector2F"/>.</param>
            <param name="z">The scalar value.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3F"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector3F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Addition(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Subtraction(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Multiply(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Multiply(NeoAxis.Vector3F,System.Single)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Multiply(System.Single,NeoAxis.Vector3F)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Division(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Division(NeoAxis.Vector3F,System.Single)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Division(System.Single,NeoAxis.Vector3F)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_UnaryNegation(NeoAxis.Vector3F)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Add(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Subtract(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Multiply(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Multiply(NeoAxis.Vector3F@,System.Single,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Multiply(System.Single,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Divide(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Divide(NeoAxis.Vector3F@,System.Single,NeoAxis.Vector3F@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Divide(System.Single,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Negate(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Equality(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Inequality(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector3F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Vector3F.Dot(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Dot(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Dot(NeoAxis.Vector3F@,NeoAxis.Vector3F@,System.Single@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Dot(NeoAxis.Vector3F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Dot(NeoAxis.Vector3F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Cross(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Cross(NeoAxis.Vector3F@,NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Cross(NeoAxis.Vector3F)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Cross(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Equals(NeoAxis.Vector3F,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Equals(NeoAxis.Vector3F@,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Clamp(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3F"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.GetClamp(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3F"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Normalize(NeoAxis.Vector3F)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Normalize(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into an instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Lerp(NeoAxis.Vector3F,NeoAxis.Vector3F,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Lerp(NeoAxis.Vector3F@,NeoAxis.Vector3F@,System.Single,NeoAxis.Vector3F@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3F"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3F.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3F"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Distance(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Distance(NeoAxis.Vector3F@,NeoAxis.Vector3F@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToVector3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into the equivalent <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToVector3I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into the equivalent <see cref="T:NeoAxis.Vector3I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.ToVector3H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3F"/> into the equivalent <see cref="T:NeoAxis.Vector3H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.op_Implicit(NeoAxis.Vector3F)~NeoAxis.Vector3">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector3F"/> type to <see cref="T:NeoAxis.Vector3"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector3F.Select(NeoAxis.Vector3F,NeoAxis.Vector3F,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector3F"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector3F.GetTruncate(NeoAxis.Vector3F)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.AnyNonZero(NeoAxis.Vector3F)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.AllNonZero(NeoAxis.Vector3F)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Abs(NeoAxis.Vector3F)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Acos(NeoAxis.Vector3F)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Asin(NeoAxis.Vector3F)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Atan(NeoAxis.Vector3F)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Atan2(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Cos(NeoAxis.Vector3F)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Cosh(NeoAxis.Vector3F)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Exp(NeoAxis.Vector3F)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Log(NeoAxis.Vector3F)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Log10(NeoAxis.Vector3F)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Max(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Min(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Pow(NeoAxis.Vector3F,NeoAxis.Vector3F)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Sin(NeoAxis.Vector3F)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Sinh(NeoAxis.Vector3F)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Sqrt(NeoAxis.Vector3F)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Tan(NeoAxis.Vector3F)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.Tanh(NeoAxis.Vector3F)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3F.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3F"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector3H">
            <summary>
            A structure encapsulating three half precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.One">
            <summary>
            Returns the vector (1,1,1).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.XAxis">
            <summary>
            Returns the vector (1,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.YAxis">
            <summary>
            Returns the vector (0,1,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3H.ZAxis">
            <summary>
            Returns the vector (0,0,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3H.#ctor(NeoAxis.Vector3H)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.#ctor(NeoAxis.HalfType,NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector3H"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3H"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector3H"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Addition(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Subtraction(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Multiply(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Multiply(NeoAxis.Vector3H,NeoAxis.HalfType)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Multiply(NeoAxis.HalfType,NeoAxis.Vector3H)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Division(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Division(NeoAxis.Vector3H,NeoAxis.HalfType)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Division(NeoAxis.HalfType,NeoAxis.Vector3H)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_UnaryNegation(NeoAxis.Vector3H)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Add(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Subtract(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Multiply(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Multiply(NeoAxis.Vector3H@,NeoAxis.HalfType,NeoAxis.Vector3H@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Multiply(NeoAxis.HalfType,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Divide(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Divide(NeoAxis.Vector3H@,NeoAxis.HalfType,NeoAxis.Vector3H@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Divide(NeoAxis.HalfType,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Negate(NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Equality(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Inequality(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector3H.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Vector3H.Dot(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Dot(NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Dot(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.HalfType@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Dot(NeoAxis.Vector3H)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Dot(NeoAxis.Vector3H@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Cross(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Cross(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Cross(NeoAxis.Vector3H)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Cross(NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Equals(NeoAxis.Vector3H,NeoAxis.HalfType)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Equals(NeoAxis.Vector3H@,NeoAxis.HalfType)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector3H"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Clamp(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3H"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.GetClamp(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3H"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3H"/> into an instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Lerp(NeoAxis.Vector3H,NeoAxis.Vector3H,NeoAxis.HalfType)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Lerp(NeoAxis.Vector3H@,NeoAxis.Vector3H@,NeoAxis.HalfType,NeoAxis.Vector3H@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3H"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3H.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector3H"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Distance(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Distance(NeoAxis.Vector3H@,NeoAxis.Vector3H@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToVector3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3H"/> into the equivalent <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToVector3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3H"/> into the equivalent <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.ToVector3I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3H"/> into the equivalent <see cref="T:NeoAxis.Vector3I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Implicit(NeoAxis.Vector3H)~NeoAxis.Vector3">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector3H"/> type to <see cref="T:NeoAxis.Vector3"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Implicit(NeoAxis.Vector3H)~NeoAxis.Vector3F">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector3H"/> type to <see cref="T:NeoAxis.Vector3F"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.op_Implicit(NeoAxis.Vector3F)~NeoAxis.Vector3H">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector3F"/> type to <see cref="T:NeoAxis.Vector3H"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector3H.Select(NeoAxis.Vector3H,NeoAxis.Vector3H,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector3H"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector3H.GetTruncate(NeoAxis.Vector3H)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.AnyNonZero(NeoAxis.Vector3H)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.AllNonZero(NeoAxis.Vector3H)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Abs(NeoAxis.Vector3H)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Acos(NeoAxis.Vector3H)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Asin(NeoAxis.Vector3H)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Atan(NeoAxis.Vector3H)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Atan2(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Cos(NeoAxis.Vector3H)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Cosh(NeoAxis.Vector3H)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Exp(NeoAxis.Vector3H)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Log(NeoAxis.Vector3H)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Log10(NeoAxis.Vector3H)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Max(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Min(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Pow(NeoAxis.Vector3H,NeoAxis.Vector3H)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Sin(NeoAxis.Vector3H)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Sinh(NeoAxis.Vector3H)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Sqrt(NeoAxis.Vector3H)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Tan(NeoAxis.Vector3H)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.Tanh(NeoAxis.Vector3H)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3H.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3H"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3H"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector3I">
            <summary>
            A structure encapsulating three integer values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3I.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3I.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3I.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3I.Zero">
            <summary>
            Returns the vector (0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector3I.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector3I.#ctor(NeoAxis.Vector3I)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.#ctor(NeoAxis.Vector2I,System.Int32)">
            <summary>
            Constructs a vector with a given <see cref="T:NeoAxis.Vector2I"/> and a scalar.
            </summary>
            <param name="xy">The given <see cref="T:NeoAxis.Vector2I"/>.</param>
            <param name="z">The scalar value.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector3I"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3I"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector3I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3I"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector3I"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector3I"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Addition(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Subtraction(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Multiply(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Multiply(NeoAxis.Vector3I,System.Int32)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Multiply(System.Int32,NeoAxis.Vector3I)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Division(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Division(NeoAxis.Vector3I,System.Int32)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Division(System.Int32,NeoAxis.Vector3I)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_UnaryNegation(NeoAxis.Vector3I)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Add(NeoAxis.Vector3I@,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Subtract(NeoAxis.Vector3I@,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Multiply(NeoAxis.Vector3I@,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Multiply(NeoAxis.Vector3I@,System.Int32,NeoAxis.Vector3I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Multiply(System.Int32,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Divide(NeoAxis.Vector3I@,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Divide(NeoAxis.Vector3I@,System.Int32,NeoAxis.Vector3I@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Divide(System.Int32,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Negate(NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Equality(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.op_Inequality(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector3I.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, or Z component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, and 2 for the Z component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 2].</exception>
        </member>
        <member name="M:NeoAxis.Vector3I.Dot(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Dot(NeoAxis.Vector3I@,NeoAxis.Vector3I@,System.Int32@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Cross(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The cross product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Cross(NeoAxis.Vector3I@,NeoAxis.Vector3I@,NeoAxis.Vector3I@)">
            <summary>
            Calculates the cross product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the cross product of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector3I.Clamp(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector3I"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector3I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.ToVector2I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3I"/> into an instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.ToVector3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3I"/> into the equivalent <see cref="T:NeoAxis.Vector3F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.ToVector3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector3I"/> into the equivalent <see cref="T:NeoAxis.Vector3"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector3"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Select(NeoAxis.Vector3I,NeoAxis.Vector3I,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.AnyNonZero(NeoAxis.Vector3I)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.AllNonZero(NeoAxis.Vector3I)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Max(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.Min(NeoAxis.Vector3I,NeoAxis.Vector3I)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3I"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector3I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector3I.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3I"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector3I"/>.</returns>
        </member>
        <member name="T:NeoAxis.Vector4">
            <summary>
            A structure encapsulating four double precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4.#ctor(NeoAxis.Vector4)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector4.#ctor(NeoAxis.Vector3,System.Double)">
            <summary>
            Constructs a <see cref="T:NeoAxis.Vector4"/> from the given <see cref="T:NeoAxis.Vector3"/> and a W component.
            </summary>
            <param name="v">The vector to use as the X, Y and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:NeoAxis.Vector4.#ctor(NeoAxis.Vector4F)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector4F"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.#ctor(NeoAxis.Vector4I)">
            <summary>
            Constructs a vector with another given vector of <see cref="T:NeoAxis.Vector4I"/> format.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector4"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Addition(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Subtraction(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Multiply(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Multiply(NeoAxis.Vector4,System.Double)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Multiply(System.Double,NeoAxis.Vector4)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Division(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Division(NeoAxis.Vector4,System.Double)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Division(System.Double,NeoAxis.Vector4)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_UnaryNegation(NeoAxis.Vector4)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Add(NeoAxis.Vector4@,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Subtract(NeoAxis.Vector4@,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Multiply(NeoAxis.Vector4@,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Multiply(NeoAxis.Vector4@,System.Double,NeoAxis.Vector4@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Multiply(System.Double,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Divide(NeoAxis.Vector4@,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Divide(NeoAxis.Vector4@,System.Double,NeoAxis.Vector4@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Divide(System.Double,NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Negate(NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector4.op_Equality(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.op_Inequality(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector4.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Vector4.Dot(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Dot(NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Dot(NeoAxis.Vector4@,NeoAxis.Vector4@,System.Double@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>When the method completes, contains the dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Dot(NeoAxis.Vector4)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Dot(NeoAxis.Vector4@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Equals(NeoAxis.Vector4,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Equals(NeoAxis.Vector4@,System.Double)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.GetClamp(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector4"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Normalize(NeoAxis.Vector4)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Normalize(NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToVector2">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into an instance of <see cref="T:NeoAxis.Vector2"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToVector3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into an instance of <see cref="T:NeoAxis.Vector3"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Lerp(NeoAxis.Vector4,NeoAxis.Vector4,System.Double)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Lerp(NeoAxis.Vector4@,NeoAxis.Vector4@,System.Double,NeoAxis.Vector4@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector4"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector4"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Distance(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Distance(NeoAxis.Vector4@,NeoAxis.Vector4@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToVector4F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into the equivalent <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToVector4I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into the equivalent <see cref="T:NeoAxis.Vector4I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToColorValue">
            <summary>
            Converts each component of the current instance of <see cref="T:NeoAxis.Vector4"/> into the
            component of the <see cref="T:NeoAxis.ColorValue"/> structure: X to red component,
            Y to green component, Z to blue component, W to alpha component.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.ColorValue"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Select(NeoAxis.Vector4,NeoAxis.Vector4,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector4"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector4.GetTruncate(NeoAxis.Vector4)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector4.AnyNonZero(NeoAxis.Vector4)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.AllNonZero(NeoAxis.Vector4)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Abs(NeoAxis.Vector4)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Acos(NeoAxis.Vector4)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Asin(NeoAxis.Vector4)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Atan(NeoAxis.Vector4)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Atan2(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Cos(NeoAxis.Vector4)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Cosh(NeoAxis.Vector4)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Exp(NeoAxis.Vector4)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Log(NeoAxis.Vector4)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Log10(NeoAxis.Vector4)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Max(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Min(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Pow(NeoAxis.Vector4,NeoAxis.Vector4)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Sin(NeoAxis.Vector4)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Sinh(NeoAxis.Vector4)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Sqrt(NeoAxis.Vector4)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Tan(NeoAxis.Vector4)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.Tanh(NeoAxis.Vector4)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4.ToPlane">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4"/> into the equivalent <see cref="T:NeoAxis.Plane"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Plane"/> structure.</returns>
        </member>
        <member name="T:NeoAxis.Vector4F">
            <summary>
            A structure encapsulating four single precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4F.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4F.#ctor(NeoAxis.Vector4F)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.#ctor(NeoAxis.Vector3F,System.Single)">
            <summary>
            Constructs a <see cref="T:NeoAxis.Vector4F"/> from the given <see cref="T:NeoAxis.Vector3F"/> and a W component.
            </summary>
            <param name="v">The vector to use as the X, Y and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToString(System.Int32)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4F"/> with a given precision.
            </summary>
            <param name="precision">The precision value.</param>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector4F"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Addition(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Subtraction(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Multiply(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Multiply(NeoAxis.Vector4F,System.Single)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Multiply(System.Single,NeoAxis.Vector4F)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Division(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Division(NeoAxis.Vector4F,System.Single)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Division(System.Single,NeoAxis.Vector4F)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_UnaryNegation(NeoAxis.Vector4F)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Add(NeoAxis.Vector4F@,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Subtract(NeoAxis.Vector4F@,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Multiply(NeoAxis.Vector4F@,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Multiply(NeoAxis.Vector4F@,System.Single,NeoAxis.Vector4F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Multiply(System.Single,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Divide(NeoAxis.Vector4F@,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Divide(NeoAxis.Vector4F@,System.Single,NeoAxis.Vector4F@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="s">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Divide(System.Single,NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="s">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Negate(NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Equality(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Inequality(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector4F.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Vector4F.Dot(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Dot(NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Dot(NeoAxis.Vector4F)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Dot(NeoAxis.Vector4F@)">
            <summary>
            Calculates the dot product of two vectors.
            </summary>
            <param name="v">The second vector.</param>
            <returns>The dot product of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Equals(NeoAxis.Vector4F,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Equals(NeoAxis.Vector4F@,System.Single)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4F"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Length">
            <summary>
            Calculates the length of the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>The length of the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.LengthSquared">
            <summary>
            Calculates the squared length of the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>The squared length of the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.GetClamp(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Restricts the current instance of <see cref="T:NeoAxis.Vector4F"/> to be within a specified range and returns the clamped value.
            </summary>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Normalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into a unit vector.
            </summary>
            <returns>Returns the length of the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Normalize(NeoAxis.Vector4F)">
            <summary>
            Converts a vector into a unit vector. 
            </summary>
            <param name="v">The vector to normalize.</param>
            <returns>The normalized vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Normalize(NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Converts a vector into a unit vector.
            </summary>
            <param name="v">The vector to normalize.</param>
            <param name="result">When the method completes, contains the normalized vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.GetNormalize">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into a unit vector and returns the normalized vector.
            </summary>
            <returns>The normalized instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector2F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into an instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector3F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into an instance of <see cref="T:NeoAxis.Vector3F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Lerp(NeoAxis.Vector4F,NeoAxis.Vector4F,System.Single)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <returns>The interpolated vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Lerp(NeoAxis.Vector4F@,NeoAxis.Vector4F@,System.Single,NeoAxis.Vector4F@)">
            <summary>
            Performs a linear interpolation between two vectors based on the given weighting.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="amount">A value between 0 and 1 that indicates the weight of <paramref name="v2"/>.</param>
            <param name="result">When the method completes, contains the linear interpolation of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Saturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector4F"/> between 0 and 1.
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4F.GetSaturate">
            <summary>
            Clamps the components of the current instance of <see cref="T:NeoAxis.Vector4F"/> between 0 and 1 and returns the saturated value.
            </summary>
            <returns>The saturated value.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Distance(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Distance(NeoAxis.Vector4F@,NeoAxis.Vector4F@)">
            <summary>
            Calculates the distance between two vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The distance between two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into the equivalent <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector4I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into the equivalent <see cref="T:NeoAxis.Vector4I"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector4H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into the equivalent <see cref="T:NeoAxis.Vector4H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToColorValue">
            <summary>
            Converts each component of the current instance of <see cref="T:NeoAxis.Vector4F"/> into the
            component of the <see cref="T:NeoAxis.ColorValue"/> structure: X to red component,
            Y to green component, Z to blue component, W to alpha component.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.ColorValue"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.op_Implicit(NeoAxis.Vector4F)~NeoAxis.Vector4">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector4F"/> type to <see cref="T:NeoAxis.Vector4"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector4F.Select(NeoAxis.Vector4F,NeoAxis.Vector4F,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Truncate">
            <summary>
            Rounds the current instance of <see cref="T:NeoAxis.Vector4F"/> towards zero for each component in a vector.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:NeoAxis.Vector4F.GetTruncate(NeoAxis.Vector4F)">
            <summary>
            Rounds a given vector towards zero for each component in it and returns the truncated vector.
            </summary>
            <param name="v">The vector to truncate.</param>
            <returns>The truncated vector</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.AnyNonZero(NeoAxis.Vector4F)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.AllNonZero(NeoAxis.Vector4F)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Abs(NeoAxis.Vector4F)">
            <summary>
            Returns a vector whose elements are the absolute values of each of the specified vector's components.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The absolute value vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Acos(NeoAxis.Vector4F)">
            <summary>
            Calculates the arc-cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose cosines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Asin(NeoAxis.Vector4F)">
            <summary>
            Calculates the arc-sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose sines are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Atan(NeoAxis.Vector4F)">
            <summary>
            Calculates the arc-tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are equal to the
            corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Atan2(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Returns the vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.
            </summary>
            <param name="y">The first vector.</param>
            <param name="x">The second vector.</param>
            <returns>The vector which contains the angles in radians whose tangents are the quotient of the corresponding components in the first specified vector <paramref name="y"/> and the second specified vector <paramref name="x"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Cos(NeoAxis.Vector4F)">
            <summary>
            Calculates the cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Cosh(NeoAxis.Vector4F)">
            <summary>
            Calculates the hyperbolic cosine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic cosines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Exp(NeoAxis.Vector4F)">
            <summary>
            Returns the vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains e raised to the power of n, where n is the corresponding component in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Log(NeoAxis.Vector4F)">
            <summary>
            Calculates the natural logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the natural logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Log10(NeoAxis.Vector4F)">
            <summary>
            Calculates the base 10 logarithm of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the base 10 logarithms of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Max(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Min(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Pow(NeoAxis.Vector4F,NeoAxis.Vector4F)">
            <summary>
            Returns the vector which contains the components of the first specified vector raised to power of the numbers which are equal to the corresponding components of the second specified vector.
            </summary>
            <param name="x">The first vector.</param>
            <param name="y">The second vector.</param>
            <returns>The vector which contains the components of the first specified vector raised to power of
            the numbers which are equal to the corresponding components of the second specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Sin(NeoAxis.Vector4F)">
            <summary>
            Calculates the sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Sinh(NeoAxis.Vector4F)">
            <summary>
            Calculates the hyperbolic sine of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic sines of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Sqrt(NeoAxis.Vector4F)">
            <summary>
            Calculates the square root of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the square root of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Tan(NeoAxis.Vector4F)">
            <summary>
            Calculates the tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.Tanh(NeoAxis.Vector4F)">
            <summary>
            Calculates the hyperbolic tangent of each component of the specified vector.
            </summary>
            <param name="v">The specified vector.</param>
            <returns>The vector which contains the hyperbolic tangents of the corresponding components in the specified vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4F"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4F"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToPlane">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into the equivalent <see cref="T:NeoAxis.Plane"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Plane"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4F.ToVector3">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into an instance of <see cref="T:NeoAxis.Vector2F"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="T:NeoAxis.Vector4H">
            <summary>
            A structure encapsulating four half precision floating point values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4H.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4H.#ctor(NeoAxis.Vector4H)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4H.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector4H.#ctor(NeoAxis.HalfType,NeoAxis.HalfType,NeoAxis.HalfType,NeoAxis.HalfType)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector4H.ToVector4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4H"/> into the equivalent <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4H.ToVector4F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4H"/> into the equivalent <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4H.ToVector4H">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4F"/> into the equivalent <see cref="T:NeoAxis.Vector4H"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4H"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4H.ToColorValue">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4H"/> into the equivalent <see cref="T:NeoAxis.ColorValue"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.ColorValue"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4H.op_Implicit(NeoAxis.Vector4H)~NeoAxis.Vector4">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector4H"/> type to <see cref="T:NeoAxis.Vector4"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector4H.op_Implicit(NeoAxis.Vector4H)~NeoAxis.Vector4F">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector4H"/> type to <see cref="T:NeoAxis.Vector4F"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="M:NeoAxis.Vector4H.op_Implicit(NeoAxis.Vector4F)~NeoAxis.Vector4H">
            <summary>
            Implicit conversion from <see cref="T:NeoAxis.Vector4F"/> type to <see cref="T:NeoAxis.Vector4H"/> type for given value.
            </summary>
            <param name="v">The value to type convert.</param>
        </member>
        <member name="T:NeoAxis.Vector4I">
            <summary>
            A structure encapsulating four integer values.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.X">
            <summary>
            The X component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.Y">
            <summary>
            The Y component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.Z">
            <summary>
            The Z component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.W">
            <summary>
            The W component of the vector.
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.Zero">
            <summary>
            Returns the vector (0,0,0,0).
            </summary>
        </member>
        <member name="F:NeoAxis.Vector4I.One">
            <summary>
            Returns the vector (1,1,1,1).
            </summary>
        </member>
        <member name="M:NeoAxis.Vector4I.#ctor(NeoAxis.Vector4I)">
            <summary>
            Constructs a vector with another given vector.
            </summary>
            <param name="source">The source vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a vector with the given individual elements.
            </summary>
            <param name="w">W component.</param>
            <param name="x">X component.</param>
            <param name="y">Y component.</param>
            <param name="z">Z component.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.#ctor(NeoAxis.Vector3I,System.Int32)">
            <summary>
            Constructs a <see cref="T:NeoAxis.Vector4I"/> from the given <see cref="T:NeoAxis.Vector3I"/> and a W component.
            </summary>
            <param name="v">The vector to use as the X, Y and Z components.</param>
            <param name="w">The W component.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Parse(System.String)">
            <summary>
            Converts a string representation of a vector into the equivalent <see cref="T:NeoAxis.Vector4I"/> structure.
            </summary>
            <param name="text">The string representation of the vector (with the space delimeters).</param>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4I"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4I"/>.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current instance of <see cref="T:NeoAxis.Vector4I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4I"/>.
            </summary>
            <param name="obj">The object to compare with the current instance of <see cref="T:NeoAxis.Vector4I"/>.</param>
            <returns>True if the specified object is equal to the current instance of <see cref="T:NeoAxis.Vector4I"/>; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Addition(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <returns>The sum of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Subtraction(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector to subtract from.</param>
            <param name="v2">The vector to be subtracted from another vector.</param>
            <returns>The difference of the two vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Multiply(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <returns>The product vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Multiply(NeoAxis.Vector4I,System.Int32)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Multiply(System.Int32,NeoAxis.Vector4I)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Division(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Division(NeoAxis.Vector4I,System.Int32)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Division(System.Int32,NeoAxis.Vector4I)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector.</param>
            <returns>The scaled vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_UnaryNegation(NeoAxis.Vector4I)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <returns>A vector facing in the opposite direction.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.Add(NeoAxis.Vector4I@,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="v1">The first vector to add.</param>
            <param name="v2">The second vector to add.</param>
            <param name="result">When the method completes, contains the sum of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Subtract(NeoAxis.Vector4I@,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="v1">The vector from which to subtract.</param>
            <param name="v2">The vector which should be subtracted from another.</param>
            <param name="result">When the method completes, contains the difference of the two vectors.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Multiply(NeoAxis.Vector4I@,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Multiplies two vectors together.
            </summary>
            <param name="v1">The first vector to multiply.</param>
            <param name="v2">The second vector to multiply.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Multiply(NeoAxis.Vector4I@,System.Int32,NeoAxis.Vector4I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="v">The vector to scale.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Multiply(System.Int32,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Multiplies a vector by a given scalar.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector to scale.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Divide(NeoAxis.Vector4I@,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Divides the first vector by the second vector.
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Divide(NeoAxis.Vector4I@,System.Int32,NeoAxis.Vector4I@)">
            <summary>
            Divides a vector by a given scalar.
            </summary>
            <param name="v">The vector to divide.</param>
            <param name="i">The scalar value.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Divide(System.Int32,NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Divides a scalar by a vector.
            </summary>
            <param name="i">The scalar value.</param>
            <param name="v">The vector.</param>
            <param name="result">When the method completes, contains the scaled vector.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.Negate(NeoAxis.Vector4I@,NeoAxis.Vector4I@)">
            <summary>
            Reverses the direction of a given vector. 
            </summary>
            <param name="v">The vector to negate.</param>
            <param name="result">When the method completes, contains a vector facing in the opposite direction.</param>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Equality(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Determines whether two given vectors are equal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are equal; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.op_Inequality(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Determines whether two given vectors are unequal.
            </summary>
            <param name="v1">The first vector to compare.</param>
            <param name="v2">The second vector to compare.</param>
            <returns>True if the vectors are unequal; False otherwise.</returns>
        </member>
        <member name="P:NeoAxis.Vector4I.Item(System.Int32)">
            <summary>
            Gets or sets the component at the specified index.
            </summary>
            <value>The value of the X, Y, Z, or W component, depending on the index.</value>
            <param name="index">The index of the component to access. Use 0 for the X component, 1 for the Y component, 2 for the Z component, and 3 for the W component.</param>
            <returns>The value of the component at the specified index.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the <paramref name="index"/> is out of the range [0, 3].</exception>
        </member>
        <member name="M:NeoAxis.Vector4I.Equals(NeoAxis.Vector4I,System.Int32)">
            <summary>
            Determines whether the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4I"/> with a given precision.
            </summary>
            <param name="v">The vector to compare.</param>
            <param name="epsilon">The precision value.</param>
            <returns>True if the specified vector is equal to the current instance of <see cref="T:NeoAxis.Vector4I"/>; False otherwise.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.ToVector2I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4I"/> into an instance of <see cref="T:NeoAxis.Vector2I"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.ToVector3I">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4I"/> into an instance of <see cref="T:NeoAxis.Vector3I"/>.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.ToVector4F">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4I"/> into the equivalent <see cref="T:NeoAxis.Vector4F"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4F"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.ToVec4">
            <summary>
            Converts the current instance of <see cref="T:NeoAxis.Vector4I"/> into the equivalent <see cref="T:NeoAxis.Vector4"/> structure.
            </summary>
            <returns>The equivalent <see cref="T:NeoAxis.Vector4"/> structure.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.Select(NeoAxis.Vector4I,NeoAxis.Vector4I,System.Boolean)">
            <summary>
            Chooses one of two vectors depending on the <paramref name="pick1"/> value.
            </summary>
            <param name="v1">The first vector to choose.</param>
            <param name="v2">The second vector to choose.</param>
            <param name="pick1">If this value is true, the method chooses the virst vector, otherwise it chooses the second one.</param>
            <returns>The selected vector.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.AnyNonZero(NeoAxis.Vector4I)">
            <summary>
            Determines whether any component of a given vector is unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if any component of the specified vector is unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.AllNonZero(NeoAxis.Vector4I)">
            <summary>
            Determines whether all components of a given vector are unequal to the zero.
            </summary>
            <param name="v">The vector to compare with the zero vector.</param>
            <returns>True if all components of the specified vector are unequal to the zero; otherwise, False.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.Max(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Returns a vector containing the largest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the largest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.Min(NeoAxis.Vector4I,NeoAxis.Vector4I)">
            <summary>
            Returns a vector containing the smallest components of the specified vectors. 
            </summary>
            <param name="v1">The first vector.</param>
            <param name="v2">The second vector.</param>
            <returns>A vector containing the smallest components of the specified vectors.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.MinComponent">
            <summary>
            Returns the value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4I"/>.
            </summary>
            <returns>The value of the smallest component of the current instance of <see cref="T:NeoAxis.Vector4I"/>.</returns>
        </member>
        <member name="M:NeoAxis.Vector4I.MaxComponent">
            <summary>
            Returns the value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.
            </summary>
            <returns>The value of the largest component of the current instance of <see cref="T:NeoAxis.Vector4"/>.</returns>
        </member>
        <member name="T:NeoAxis.Networking.BasicServiceClient">
            <summary>
            A basic client code for services.
            </summary>
        </member>
        <member name="F:NeoAxis.Networking.BasicServiceClient.ConnectionSettingsClass.ConnectionTypeEnum.Direct">
            <summary>
            Direct connect to the server by means password.
            </summary>
        </member>
        <member name="F:NeoAxis.Networking.BasicServiceClient.ConnectionSettingsClass.ConnectionTypeEnum.Cloudbox">
            <summary>
            Connecting with login of current user in the launcher.
            </summary>
        </member>
        <member name="M:NeoAxis.Networking.BasicServiceClient.ReconnectAsync">
            <summary>
            Returns error.
            </summary>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.Networking.CloudFunctionsClient">
            <summary>
            A basic client to access cloud functions. Another way is using ClientNetworkService_CloudFunctions.
            </summary>
        </member>
        <member name="T:NeoAxis.Networking.TranslateClient">
            <summary>
            A client to access the Translate service.
            </summary>
        </member>
        <member name="P:NeoAxis.Networking.ServerNode.Client.MaxLifetime">
            <summary>
            Set 0 for unlimited time.
            </summary>
        </member>
        <member name="M:NeoAxis.Networking.ServerNode.#ctor(System.String,System.String,System.Int32,System.Double)">
            <summary>
            
            </summary>
            <param name="serverName"></param>
            <param name="serverVersion"></param>
            <param name="maxConnections"></param>
            <param name="defaultMaxLifetime">Set 0 for unlimited time.</param>
        </member>
        <member name="E:NeoAxis.Networking.GeneralManagerExecuteCommand.Processed">
            <summary>
            Called from thread.
            </summary>
        </member>
        <member name="T:NeoAxis.ServerNetworkService_Messages">
            <summary>
            A basic server service for string and binary messages.
            </summary>
        </member>
        <member name="T:NeoAxis.ClientNetworkService_Messages">
            <summary>
            A basic client service for string and binary messages.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettings">
            <summary>
            Represents engine project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettings.Get">
            <summary>
            Gets instance of the settings.
            </summary>
        </member>
        <member name="M:NeoAxis.ProjectSettings.ReadParameterDirectly(System.String,System.String,System.String)">
            <summary>
            Reads a value from \"ProjectSettings.component\" without loading it as component. The method can be used to load data before engine initialized.
            </summary>
        </member>
        <member name="M:NeoAxis.ProjectSettings.ReadParametersDirectly(System.String,System.String[],System.String[])">
            <summary>
            Reads a set of values from \"ProjectSettings.component\" without loading it as component. The method can be used to load data before engine initialized.
            </summary>
        </member>
        <member name="M:NeoAxis.ProjectSettings.ReadParameterDirectlyByRealPath(System.String,System.String,System.String,System.String)">
            <summary>
            Reads a value from \"ProjectSettings.component\" without loading it as component. The method can be used to load data before engine initialized.
            </summary>
        </member>
        <member name="M:NeoAxis.ProjectSettings.ReadParametersDirectlyByRealPath(System.String,System.String,System.String[],System.String[])">
            <summary>
            Reads a set of values from \"ProjectSettings.component\" without loading it as component. The method can be used to load data before engine initialized.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsComponent">
            <summary>
            Component representing the settings of the project.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage">
            <summary>
            Represents a page of the project settings.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_Colors">
            <summary>
            Represents a Colors page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SelectedColor">
            <summary>
            The color of selected object in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SelectedColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SelectedColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.CanSelectColor">
            <summary>
            The color of selectable object in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.CanSelectColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.CanSelectColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.HiddenByOtherObjectsColorMultiplier">
            <summary>
            The color multiplier applied when object is hidden by the other objects.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.HiddenByOtherObjectsColorMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.HiddenByOtherObjectsColorMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowLightColor">
            <summary>
            The color of light source objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowLightColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowLightColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowDecalColor">
            <summary>
            The color of decals in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowDecalColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowDecalColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsStaticColor">
            <summary>
            The color of static physics objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsStaticColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsStaticColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicActiveColor">
            <summary>
            The color of active dynamic physics objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicActiveColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicActiveColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicInactiveColor">
            <summary>
            The color of inactive dynamic physics objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicInactiveColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowPhysicsDynamicInactiveColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowAreaColor">
            <summary>
            The color of areas in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowAreaColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowAreaColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowVolumeColor">
            <summary>
            The color of volumes in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowVolumeColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowVolumeColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowSoundSourceColor">
            <summary>
            The color of sound source objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowSoundSourceColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowSoundSourceColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowObjectInSpaceBoundsColor">
            <summary>
            The color of abstract objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowObjectInSpaceBoundsColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowObjectInSpaceBoundsColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowReflectionProbeColor">
            <summary>
            The color of reflection probe objects in the scene view.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Colors.SceneShowReflectionProbeColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Colors.SceneShowReflectionProbeColor"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_CSharpEditor">
            <summary>
            Represents a C# Editor page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayLineNumbers">
            <summary>
            Whether to display line numbers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayLineNumbersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayLineNumbers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayInfoMarkers">
            <summary>
            Whether to display info markers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayInfoMarkersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayInfoMarkers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayWarningMarkers">
            <summary>
            Whether to display warning markers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayWarningMarkersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayWarningMarkers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayErrorMarkers">
            <summary>
            Whether to display error markers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayErrorMarkersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayErrorMarkers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayQuickActions">
            <summary>
            Whether to display quick actions.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayQuickActionsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorDisplayQuickActions"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorWordWrap">
            <summary>
            Whether to wrap words.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorWordWrapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorWordWrap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBraceCompletion">
            <summary>
            Whether to enable auto brace completion.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBraceCompletionChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBraceCompletion"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatStatementOnSemicolon">
            <summary>
            Whether to enable auto format when enter semicolon character.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatStatementOnSemicolonChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatStatementOnSemicolon"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatBlockOnBracket">
            <summary>
            Whether to enable auto format when enter bracket character.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatBlockOnBracketChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorAutomaticallyFormatBlockOnBracket"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFont">
            <summary>
            The name of the font.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFontChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFont"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFontSize">
            <summary>
            The size of the font.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFontSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorFontSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorLightTheme">
            <summary>
            The background color for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorDarkTheme">
            <summary>
            The background color for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorBackgroundColorDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundLightTheme">
            <summary>
            The background color of selected text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundLightTheme">
            <summary>
            The foreground color of selected text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundDarkTheme">
            <summary>
            The background color of selected text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundDarkTheme">
            <summary>
            The foreground color of selected text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSelectionForegroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundLightTheme">
            <summary>
            The background color of search text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundDarkTheme">
            <summary>
            The background color of search text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_CSharpEditor.CSharpEditorSearchBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_General">
            <summary>
            Represents a General page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.ProjectName">
            <summary>
            The name of the project.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.ProjectNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.ProjectName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.CloudProjectName">
            <summary>
            The name of the world.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.Theme">
            <summary>
            The theme of the editor. Restart the editor to apply changes.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.ThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.Theme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.CustomizeWindowsStyle">
            <summary>
            Whether to use custom style for window title bars. Restart the editor to apply changes.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.CustomizeWindowsStyleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.CustomizeWindowsStyle"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.Language">
            <summary>
            The language of the editor. Restart the editor to apply changes.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.LanguageChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.Language"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondDocument">
            <summary>
            The maximum FPS in the document.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondDocumentChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondDocument"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondPreview">
            <summary>
            The maximum FPS in the preview.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondPreviewChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.MaxFramesPerSecondPreview"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.SoundVolume">
            <summary>
            The volume of the sound playback.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.SoundVolumeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.SoundVolume"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.DisplayHierarchyOfObjectsInSettingsWindow">
            <summary>
            Whether to enable an additional objects tree in the Settings window. This makes it possible to work with objects more flexibly, although it takes up more space in the window.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.DisplayHierarchyOfObjectsInSettingsWindowChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.DisplayHierarchyOfObjectsInSettingsWindow"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.PropertiesMaxCountCollectionItemsToDisplay">
            <summary>
            The maximum number of items that can be displayed for collections in the Settings window.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.PropertiesMaxCountCollectionItemsToDisplayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.PropertiesMaxCountCollectionItemsToDisplay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.ShowCenteringBorders">
            <summary>
            Whether to show centering borders for mesh and surface editors to help take screenshots for the store.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.ShowCenteringBordersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.ShowCenteringBorders"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.RunPlayerFromEditorInFullscreen">
            <summary>
            Whether to launch the Player in fullscreen mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.RunPlayerFromEditorInFullscreenChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.RunPlayerFromEditorInFullscreen"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.AutoImport3DModels">
            <summary>
            Whether to enable auto import for 3D models.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.AutoImport3DModelsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.AutoImport3DModels"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.SimulationStepsPerSecond">
            <summary>
            The number of simulation steps per second.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.SimulationStepsPerSecondChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.SimulationStepsPerSecond"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.InitialUIScreen">
            <summary>
            Initial UI file when starting the project application.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.InitialUIScreenChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.InitialUIScreen"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.SceneAutoPlay">
            <summary>
            A scene to run automatically when the Player started.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.SceneAutoPlayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.SceneAutoPlay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.WindowState">
            <summary>
            The initial state of the project window. When set to Auto, it will enabled Fullscreen mode or Maximized mode when run from the editor.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.WindowStateChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.WindowState"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.WindowSize">
            <summary>
            The initial window size of the project window for Normal window state.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.WindowSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.WindowSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.WindowSizeMinimal">
            <summary>
            The minimal size of the app window.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.WindowSizeMinimalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.WindowSizeMinimal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.WindowSizeApplySystemFontScale">
            <summary>
            Whether to apply the system font scale to Window Size.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.WindowSizeApplySystemFontScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.WindowSizeApplySystemFontScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_General.EngineSplashScreenStyle">
            <summary>
            The style of the engine splash screen when the application is launched.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_General.EngineSplashScreenStyleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_General.EngineSplashScreenStyle"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_Preview">
            <summary>
            Represents a Preview page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.PreviewAmbientLightBrightness">
            <summary>
            The brightness of the ambient light.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.PreviewAmbientLightBrightnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.PreviewAmbientLightBrightness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.PreviewDirectionalLightBrightness">
            <summary>
            The brightness of the directional light.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.PreviewDirectionalLightBrightnessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.PreviewDirectionalLightBrightness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentLightTheme">
            <summary>
            The material of preview environment for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewMesh">
            <summary>
            The preview mesh for the material.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewMeshChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewMesh"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentDarkTheme">
            <summary>
            The material of preview environment for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentMultiplier">
            <summary>
            The color multiplier to preview material.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentMultiplierChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentMultiplier"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentAffectLighting">
            <summary>
            The factor of lighting for preview material.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentAffectLightingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Preview.MaterialPreviewEnvironmentAffectLighting"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_Rendering">
            <summary>
            Represents a Rendering page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LineThickness">
            <summary>
            The default thickness of debug lines.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LineThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LineThickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.MaterialShading">
            <summary>
            The quality of lit shading of materials.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.MaterialShadingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.MaterialShading"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.MaterialShadingLimitedDevice">
            <summary>
            The quality of lit shading of materials on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.MaterialShadingLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.MaterialShadingLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechnique">
            <summary>
            The shadow technique of the project.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechniqueChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechnique"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechniqueLimitedDevice">
            <summary>
            The shadow technique of the project on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechniqueLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTechniqueLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormat">
            <summary>
            The format of shadow textures. Byte4 is used when a GPU is not supports Float32 format, mostly it is low-end mobile devices. Auto mode has not been added for this parameter, because some mobile devices incorrectly provide info about the support for Float32.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormatChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormat"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormatLimitedDevice">
            <summary>
            The format of shadow textures. Byte4 is used when a GPU is not supports Float32 format, mostly it is low-end mobile devices. Auto mode has not been added for this parameter, because some mobile devices incorrectly provide info about the support for Float32.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormatLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowTextureFormatLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.StaticShadows">
            <summary>
            Enables static shadows optimization.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.StaticShadowsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.StaticShadows"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.StaticShadowsLimitedDevice">
            <summary>
            Enables static shadows optimization on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.StaticShadowsLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.StaticShadowsLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizeDirectionalLightLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizeDirectionalLightLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizePointLightLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizePointLightLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizeSpotLightLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.ShadowMaxTextureSizeSpotLightLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSize">
            <summary>
            The textures which are bigger than this value will be reduced during loading.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSizeLimitedDevice">
            <summary>
            The textures which are bigger than this value will be reduced during loading.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSizeLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LimitTextureSizeLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.DeferredShading">
            <summary>
            Whether to allow using the deferred shading.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.DeferredShadingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.DeferredShading"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimation">
            <summary>
            Whether to allow using skeletal animation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimationLimitedDevice">
            <summary>
            Whether to allow using skeletal animation on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimationLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.SkeletalAnimationLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LightMask">
            <summary>
            Whether to allow using light mask for lights.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LightMaskChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LightMask"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LightMaskLimitedDevice">
            <summary>
            Whether to allow using light mask for lights on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LightMaskLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LightMaskLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.LightGrid">
            <summary>
            Whether to use an acceleration grid for lights rendering optimization.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.LightGridChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.LightGrid"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.NormalMapping">
            <summary>
            Whether to allow using normal mapping.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.NormalMappingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.NormalMapping"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.NormalMappingLimitedDevice">
            <summary>
            Whether to allow using normal mapping on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.NormalMappingLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.NormalMappingLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFiltering">
            <summary>
            Whether to enable anisotropic filtering for textures.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFilteringChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFiltering"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFilteringLimitedDevice">
            <summary>
            Whether to enable anisotropic filtering for textures on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFilteringLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.AnisotropicFilteringLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxSteps">
            <summary>
            The maximal amount of steps for the displacement mapping of materials.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxSteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxStepsLimitedDevice">
            <summary>
            The maximal amount of steps for the displacement mapping of materials on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxStepsLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.DisplacementMaxStepsLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.Tessellation">
            <summary>
            Whether to allow using tessellation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.TessellationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.Tessellation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.TessellationLimitedDevice">
            <summary>
            Whether to allow using normal mapping on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.TessellationLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.TessellationLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTiling">
            <summary>
            Whether to allow using the technique to remove texture tiling.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTilingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTiling"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTilingLimitedDevice">
            <summary>
            Whether to allow using the technique to remove texture tiling on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTilingLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.RemoveTextureTilingLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.MotionVector">
            <summary>
            Whether to allow using the motion vectors to enable a motion blur or a temporal antialiasing.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.MotionVectorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.MotionVector"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmount">
            <summary>
            The amount of maximal amount of cut volumes.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmountChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmount"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmountLimitedDevice">
            <summary>
            The amount of maximal amount of cut volumes on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmountLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.CutVolumeMaxAmountLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.Fog">
            <summary>
            Whether to allow using the fog effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.FogChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.Fog"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.FogLimitedDevice">
            <summary>
            Whether to allow using the fog effect on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.FogLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.FogLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.SmoothLOD">
            <summary>
            Whether to enable the smooth transition between levels of detail.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.SmoothLODChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.SmoothLOD"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.SmoothLODLimitedDevice">
            <summary>
            Whether to enable the smooth transition between levels of detail on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.SmoothLODLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.SmoothLODLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.VoxelLOD">
            <summary>
            Whether to allow using voxel-based LOD technique.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.VoxelLODChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.VoxelLOD"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.VoxelLODMaxSteps">
            <summary>
            The maximal abount of ray matching steps in the fragment shader.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.VoxelLODMaxStepsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.VoxelLODMaxSteps"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistance">
            <summary>
            Whether to use smooth fading of objects by visibility distance.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistanceLimitedDevice">
            <summary>
            Whether to use smooth fading of objects by visibility distance on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistanceLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.FadeByVisibilityDistanceLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixing">
            <summary>
            Whether to allow mixing two environment maps in forward rendering pass.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixing"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixingLimitedDevice">
            <summary>
            Whether to allow mixing two environment maps in forward rendering pass on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixingLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.EnvironmentMapMixingLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.DebugMode">
            <summary>
            Whether to allow using Debug Mode of the scene.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.DebugModeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.DebugMode"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Rendering.DebugModeLimitedDevice">
            <summary>
            Whether to allow using Debug Mode of the scene on limited devices (mobile).
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Rendering.DebugModeLimitedDeviceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Rendering.DebugModeLimitedDevice"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_Repository">
            <summary>
            Represents a Repository page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.CompileScriptsBeforeCommit">
            <summary>
            Whether to compile Project.dll, Project.Client.dll and C# scripts before commit to the server.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.CompileScriptsBeforeCommitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.CompileScriptsBeforeCommit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.StopServerDuringCommit">
            <summary>
            Whether to stop the project server before commit starts and run when it finished.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.StopServerDuringCommitChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.StopServerDuringCommit"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.SkipPaths">
            <summary>
            The list of folders that are not synced with the server, both for editor and play. Items are separated by return or semicolon.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.SkipPathsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.SkipPaths"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.SkipFoldersWithName">
            <summary>
            The list of folder names that are not synced with the server, both for editor and play. Items are separated by return or semicolon.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.SkipFoldersWithNameChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.SkipFoldersWithName"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.SkipFilesWithExtensionWhenPlay">
            <summary>
            The list of file extensions that are not sent to players. Items are separated by return or semicolon.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.SkipFilesWithExtensionWhenPlayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.SkipFilesWithExtensionWhenPlay"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_Repository.ClearFilesWithExtensionWhenPlay">
            <summary>
            The list of file extensions to clear when send to players. Items are separated by return or semicolon. Clearing of files is used for source 3D models, because the actual data of 3D models is stored in settings files. It is enough to save empty original files.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_Repository.ClearFilesWithExtensionWhenPlayChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_Repository.ClearFilesWithExtensionWhenPlay"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_RibbonAndToolbar">
            <summary>
            Represents a Ribbon And Toolbar page of the project settings.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_SceneEditor">
            <summary>
            Represents a Scene Editor page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepMovement">
            <summary>
            The snap value applied when object is moved.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepMovement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepRotation">
            <summary>
            The snap value applied when object is rotated.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepRotationChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepRotation"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepScaling">
            <summary>
            The snap value applied when object is scaled.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepScalingChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorStepScaling"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolRotationSensitivity">
            <summary>
            The sensitivity of the object rotation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolRotationSensitivityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolRotationSensitivity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolSize">
            <summary>
            The size of the transform tool.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolLineThickness">
            <summary>
            The thickness of the transform tool line.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolLineThicknessChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolLineThickness"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolShadowIntensity">
            <summary>
            The intensity of the shadows drawn by the transform tool.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolShadowIntensityChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.TransformToolShadowIntensity"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedNormal">
            <summary>
            The normal keyboard speed of the camera movement.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedFast">
            <summary>
            The keyboard speed of the camera movement in fast mode. Hold Shift key to turn the fast camera mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedFastChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardMovementSpeedFast"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedNormal">
            <summary>
            The normal keyboard speed of the camera rotation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedFast">
            <summary>
            The keyboard speed of the camera rotation in fast mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedFastChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraKeyboardRotationSpeedFast"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityNormal">
            <summary>
            The normal mouse sensitivity of the camera movement.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityFast">
            <summary>
            The mouse sensitivity of the camera movement in fast mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityFastChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseMovementSensitivityFast"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityHorizontal">
            <summary>
            The horizontal mouse sensitivity of the camera rotation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityHorizontalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityHorizontal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityVertical">
            <summary>
            The vertical mouse sensitivity of the camera rotation.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityVerticalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseRotationSensitivityVertical"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityNormal">
            <summary>
            The normal mouse sensitivity of the camera movement.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityFast">
            <summary>
            The mouse sensitivity of the camera movement in fast mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityFastChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseTrackMovementSensitivityFast"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityNormal">
            <summary>
            The normal mouse wheel sensitivity of the camera movement.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityNormalChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityNormal"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityFast">
            <summary>
            The mouse wheel sensitivity of the camera movement in fast mode.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityFastChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.CameraMouseWheelMovementSensitivityFast"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectByDoubleClickRadius">
            <summary>
            The radius of the selection of objects with a double click.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectByDoubleClickRadiusChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectByDoubleClickRadius"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectEnabled">
            <summary>
            Whether to allow using outline effect for selected objects.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectEnabledChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectEnabled"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectScale">
            <summary>
            The size of the outline effect.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectScaleChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.SceneEditorSelectOutlineEffectScale"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxSize">
            <summary>
            The maximal size of labels on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMinSizeFactor">
            <summary>
            The minimal size of labels on the screen.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMinSizeFactorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMinSizeFactor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxDistance">
            <summary>
            The visibility distance of labels.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxDistanceChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelMaxDistance"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelColor">
            <summary>
            The color of screen labels.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelColorChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelColor"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelDisplayIcons">
            <summary>
            Whether to display label icons.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelDisplayIconsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_SceneEditor.ScreenLabelDisplayIcons"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_ShaderEditor">
            <summary>
            Represents a Shader Editor page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorAutoCompileTimeInSeconds">
            <summary>
            The time between last shader code changes and auto complation of the shader.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorAutoCompileTimeInSecondsChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorAutoCompileTimeInSeconds"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorDisplayLineNumbers">
            <summary>
            Whether to display line numbers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorDisplayLineNumbersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorDisplayLineNumbers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorWordWrap">
            <summary>
            Whether to wrap words.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorWordWrapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorWordWrap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorLightTheme">
            <summary>
            The background color for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFont">
            <summary>
            The name of the font.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFontChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFont"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFontSize">
            <summary>
            The size of the font.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFontSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorFontSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorDarkTheme">
            <summary>
            The background color for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorBackgroundColorDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundLightTheme">
            <summary>
            The background color of selected text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundLightTheme">
            <summary>
            The foreground color of selected text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundDarkTheme">
            <summary>
            The background color of selected text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundDarkTheme">
            <summary>
            The foreground color of selected text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSelectionForegroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundLightTheme">
            <summary>
            The background color of search text for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundDarkTheme">
            <summary>
            The background color of search text for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_ShaderEditor.ShaderEditorSearchBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_Shortcuts">
            <summary>
            Represents a Shortcuts page of the project settings.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_TextEditor">
            <summary>
            Represents a Text Editor page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorDisplayLineNumbers">
            <summary>
            Whether to display line numbers.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorDisplayLineNumbersChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorDisplayLineNumbers"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorWordWrap">
            <summary>
            Whether to wrap words.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorWordWrapChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorWordWrap"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFont">
            <summary>
            The name of the font.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFontChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFont"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFontSize">
            <summary>
            The font size.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFontSizeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorFontSize"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorLightTheme">
            <summary>
            The color of editor background for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorLightTheme">
            <summary>
            The color of editor foreground for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorDarkTheme">
            <summary>
            The color of editor background for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorBackgroundColorDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorDarkTheme">
            <summary>
            The color of editor foreground for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorForegroundColorDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundLightTheme">
            <summary>
            The color of background selection for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundLightTheme">
            <summary>
            The color of foreground selection for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundDarkTheme">
            <summary>
            The color of background selection for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundDarkTheme">
            <summary>
            The color of foreground selection for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSelectionForegroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundLightTheme">
            <summary>
            The color of search background for the light theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundLightThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundLightTheme"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundDarkTheme">
            <summary>
            The color of search background for the dark theme.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundDarkThemeChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_TextEditor.TextEditorSearchBackgroundDarkTheme"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.ProjectSettingsPage_UIEditor">
            <summary>
            Represents a UI Editor page of the project settings.
            </summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorAspectRatio">
            <summary>
            The aspect ratio of the canvas of UI Editor.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorAspectRatioChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorAspectRatio"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorDisplayGrid">
            <summary>
            Whether to display a grid.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorDisplayGridChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorDisplayGrid"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorParentMeasureStepMovement">
            <summary>
            The size of move step for Parent measure.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorParentMeasureStepMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorParentMeasureStepMovement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorUnitsMeasureStepMovement">
            <summary>
            The size of move step for Units measure.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorUnitsMeasureStepMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorUnitsMeasureStepMovement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorPixelsMeasureStepMovement">
            <summary>
            The size of move step for Pixels measure.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorPixelsMeasureStepMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorPixelsMeasureStepMovement"/> property value changes.</summary>
        </member>
        <member name="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorScreenMeasureStepMovement">
            <summary>
            The size of move step for Screen measure.
            </summary>
        </member>
        <member name="E:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorScreenMeasureStepMovementChanged">
            <summary>Occurs when the <see cref="P:NeoAxis.ProjectSettingsPage_UIEditor.UIEditorScreenMeasureStepMovement"/> property value changes.</summary>
        </member>
        <member name="T:NeoAxis.EHorizontalAlignment">
            <summary>
            Specifies the horizontal alignment.
            </summary>
        </member>
        <member name="F:NeoAxis.EHorizontalAlignment.Left">
            <summary>The element is aligned to the left side.</summary>
        </member>
        <member name="F:NeoAxis.EHorizontalAlignment.Center">
            <summary>The element is centered horizontally.</summary>
        </member>
        <member name="F:NeoAxis.EHorizontalAlignment.Right">
            <summary>The element is aligned to the right side.</summary>
        </member>
        <member name="T:NeoAxis.EVerticalAlignment">
            <summary>
            Specifies the vertical alignment.
            </summary>
        </member>
        <member name="F:NeoAxis.EVerticalAlignment.Top">
            <summary>The element is aligned to the top.</summary>
        </member>
        <member name="F:NeoAxis.EVerticalAlignment.Center">
            <summary>The element is centered vertically.</summary>
        </member>
        <member name="F:NeoAxis.EVerticalAlignment.Bottom">
            <summary>The element is aligned to the bottom.</summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer">
            <summary>
            Specifies a class that allows to draw 2D graphic elements.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.BlendingType">
            <summary>
            Enumerates possible blending methods.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.TextureFilteringMode">
            <summary>
            Enumerates possible filtering modes on texture samplers.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.TriangleVertex">
            <summary>
            Represents triangle vertex data for <see cref="T:NeoAxis.CanvasRenderer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.LineItem">
            <summary>
            Represents line data for <see cref="T:NeoAxis.CanvasRenderer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.ShaderItem">
            <summary>
            Represents the data for a canvas visualization customization with its defines and parameters.
            </summary>
        </member>
        <member name="T:NeoAxis.CanvasRenderer.ShaderItem.DefineItem">
            <summary>
            Represents a compilation definition for <see cref="T:NeoAxis.CanvasRenderer.ShaderItem"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.CanvasRenderer.DefaultFont">
            <summary>
            Gets or sets the default font.
            </summary>
        </member>
        <member name="P:NeoAxis.CanvasRenderer.DefaultFontSize">
            <summary>
            Gets or sets the default font.
            </summary>
        </member>
        <member name="P:NeoAxis.CanvasRenderer.IsScreen">
            <summary>
            Gets or sets value which indicates what is it renderer is screen renderer.
            </summary>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.RectangleF,NeoAxis.RectangleF,NeoAxis.ImageComponent,NeoAxis.ColorValue,System.Boolean)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
            <param name="color">The quad color.</param>
            <param name="clamp">The texture clamp.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.Rectangle,NeoAxis.Rectangle,NeoAxis.ImageComponent,NeoAxis.ColorValue,System.Boolean)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
            <param name="color">The quad color.</param>
            <param name="clamp">The texture clamp.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.RectangleF,NeoAxis.RectangleF,NeoAxis.ImageComponent,NeoAxis.ColorValue)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
            <param name="color">The quad color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.Rectangle,NeoAxis.Rectangle,NeoAxis.ImageComponent,NeoAxis.ColorValue)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
            <param name="color">The quad color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.RectangleF,NeoAxis.RectangleF,NeoAxis.ImageComponent)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.Rectangle,NeoAxis.Rectangle,NeoAxis.ImageComponent)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="textureCoordRectangle">The texture coordinates.</param>
            <param name="texture">The quad texture or <b>null</b>.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.RectangleF,NeoAxis.ColorValue)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="color">The quad color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddQuad(NeoAxis.Rectangle,NeoAxis.ColorValue)">
            <summary>
            Adds quad to rendering queue.
            </summary>
            <param name="rectangle">The quad rectangle.</param>
            <param name="color">The quad color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddRoundedQuad(NeoAxis.Rectangle,NeoAxis.Vector2,NeoAxis.CanvasRenderer.AddRoundedQuadMode,NeoAxis.ColorValue)">
            <summary>
            Adds rounded quad to rendering queue.
            </summary>
            <param name="rectangle"></param>
            <param name="roundingSize"></param>
            <param name="color"></param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddRoundedQuad(NeoAxis.Rectangle,System.Double,NeoAxis.CanvasRenderer.AddRoundedQuadMode,NeoAxis.ColorValue)">
            <summary>
            Adds rounded quad to rendering queue.
            </summary>
            <param name="rectangle"></param>
            <param name="roundingSize"></param>
            <param name="color"></param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(NeoAxis.FontComponent,System.Double,System.String,NeoAxis.Vector2F,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="font">The text font.</param>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(NeoAxis.FontComponent,System.Double,System.String,NeoAxis.Vector2,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="font">The text font.</param>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2F,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2F,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2F)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddText(System.String,NeoAxis.Vector2)">
            <summary>
            Adds text to rendering queue.
            </summary>
            <param name="text">The text.</param>
            <param name="position">The text position.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddTextLines(NeoAxis.FontComponent,System.Double,System.Collections.Generic.IList{System.String},NeoAxis.Vector2F,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,System.Single,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text lines to rendering queue.
            </summary>
            <param name="font">The font.</param>
            <param name="lines">The text lines.</param>
            <param name="pos">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="textVerticalIndention">The vertical intention between lines.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddTextLines(NeoAxis.FontComponent,System.Double,System.Collections.Generic.IList{System.String},NeoAxis.Vector2,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,System.Double,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text lines to rendering queue.
            </summary>
            <param name="font">The font.</param>
            <param name="lines">The text lines.</param>
            <param name="pos">The text position.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="textVerticalIndention">The vertical intention between lines.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddTextLines(System.Collections.Generic.IList{System.String},NeoAxis.Vector2F,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,System.Single,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text lines to rendering queue.
            </summary>
            <param name="lines">The text lines.</param>
            <param name="pos">The text position.</param>
            <param name="textVerticalIndention">The vertical intention between lines.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddTextLines(System.Collections.Generic.IList{System.String},NeoAxis.Vector2,NeoAxis.EHorizontalAlignment,NeoAxis.EVerticalAlignment,System.Double,NeoAxis.ColorValue,NeoAxis.CanvasRenderer.AddTextOptions)">
            <summary>
            Adds text lines to rendering queue.
            </summary>
            <param name="lines">The text lines.</param>
            <param name="pos">The text position.</param>
            <param name="textVerticalIndention">The vertical intention between lines.</param>
            <param name="horizontalAlign">The text horizontal align.</param>
            <param name="verticalAlign">The text vertical align.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddLine(NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.ColorValue)">
            <summary>
            Adds line to rendering queue.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddLine(NeoAxis.Vector2,NeoAxis.Vector2,NeoAxis.ColorValue)">
            <summary>
            Adds line to rendering queue.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddRectangle(NeoAxis.RectangleF,NeoAxis.ColorValue)">
            <summary>
            Adds rectangle to rendering queue.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddRectangle(NeoAxis.Rectangle,NeoAxis.ColorValue)">
            <summary>
            Adds rectangle to rendering queue.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddEllipse(NeoAxis.RectangleF,System.Int32,NeoAxis.ColorValue)">
            <summary>
            Adds an ellipse to rendering queue.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRenderer.AddEllipse(NeoAxis.Rectangle,System.Int32,NeoAxis.ColorValue)">
            <summary>
            Adds an ellipse to rendering queue.
            </summary>
            <param name="rectangle">The rectangle.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="M:NeoAxis.CanvasRendererImpl.Dispose">
            <summary>Releases the resources that are used by the object.</summary>
        </member>
        <member name="M:NeoAxis.CanvasRendererImpl.AddLine(NeoAxis.Vector2F,NeoAxis.Vector2F,NeoAxis.ColorValue)">
            <summary>
            Adds line to rendering queue.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
            <param name="color">The text color.</param>
        </member>
        <member name="P:NeoAxis.CanvasRendererImpl.DefaultFont">
            <summary>
            Gets or sets the default font.
            </summary>
        </member>
        <member name="P:NeoAxis.CanvasRendererImpl.DefaultFontSize">
            <summary>
            Gets or sets the default font size.
            </summary>
        </member>
        <member name="P:NeoAxis.CanvasRendererImpl.IsScreen">
            <summary>
            Gets or sets value which indicates what is it renderer is screen renderer.
            </summary>
        </member>
        <member name="T:NeoAxis.FilterOption">
            <summary>Filtering options for textures / mipmaps.</summary>
        </member>
        <member name="F:NeoAxis.FilterOption.None">
            <summary>No filtering, used for <b>FilterType.Mip</b> to turn off mipmapping.</summary>
        </member>
        <member name="F:NeoAxis.FilterOption.Point">
            <summary>Use the closest pixel.</summary>
        </member>
        <member name="F:NeoAxis.FilterOption.Linear">
            <summary>Average of a 2x2 pixel area, denotes bilinear for <b>FilterType.Min</b> and <b>FilterType.Mag</b>, trilinear for <b>FilterType.Mip</b>.</summary>
        </member>
        <member name="F:NeoAxis.FilterOption.Anisotropic">
            <summary>Similar to FO_LINEAR, but compensates for the angle of the texture plane.</summary>
        </member>
        <member name="T:NeoAxis.FrameBufferTypes">
            <summary>Defines the frame buffer types.</summary>
        </member>
        <member name="F:NeoAxis.FrameBufferTypes.Color">
            <summary>The color buffer.</summary>
        </member>
        <member name="F:NeoAxis.FrameBufferTypes.Depth">
            <summary>The depth buffer.</summary>
        </member>
        <member name="F:NeoAxis.FrameBufferTypes.Stencil">
            <summary>The stencil buffer.</summary>
        </member>
        <member name="T:NeoAxis.RenderOperationType">
            <summary>
            The rendering operation type to perform.
            </summary>
        </member>
        <member name="F:NeoAxis.RenderOperationType.PointList">
            <summary>A list of points, 1 vertex per point.</summary>
        </member>
        <member name="F:NeoAxis.RenderOperationType.LineList">
            <summary>A list of lines, 2 vertices per line.</summary>
        </member>
        <member name="F:NeoAxis.RenderOperationType.LineStrip">
            <summary>A strip of connected lines, 1 vertex per line plus 1 start vertex.</summary>
        </member>
        <member name="F:NeoAxis.RenderOperationType.TriangleList">
            <summary>A list of triangles, 3 vertices per triangle.</summary>
        </member>
        <member name="F:NeoAxis.RenderOperationType.TriangleStrip">
            <summary>A strip of triangles, 3 vertices for the first triangle, and 1 per triangle after that.</summary>
        </member>
        <member name="T:NeoAxis.SceneBlendFactor">
            <summary>
            Blend factors, which modulate values for the pixel shader and render target.
            </summary>
        </member>
        <member name="T:NeoAxis.CullingMode">
            <summary>
            Hardware culling modes based on vertex winding.
            This setting applies to how the hardware API culls triangles it is sent.
            </summary>
        </member>
        <member name="F:NeoAxis.CullingMode.None">
            <summary>
            Hardware never culls triangles and renders everything it receives.
            </summary>
        </member>
        <member name="F:NeoAxis.CullingMode.Clockwise">
            <summary>
            Hardware culls triangles whose vertices are listed clockwise in the view (default).
            </summary>
        </member>
        <member name="F:NeoAxis.CullingMode.Anticlockwise">
            <summary>
            Hardware culls triangles whose vertices are listed anticlockwise in the view.
            </summary>
        </member>
        <member name="T:NeoAxis.CompareFunction">
            <summary>
            Comparison functions used for the depth/stencil buffer operations and others.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuProgramType">
            <summary>
            Enumerates the types of programs which can run on the GPU.
            </summary>
        </member>
        <member name="T:NeoAxis.TextureAddressingMode">
            <summary>
            Texture addressing modes.
            </summary>
        </member>
        <member name="F:NeoAxis.TextureAddressingMode.Wrap">
            <summary>Texture wraps at values outside 0.0-1.0.</summary>
        </member>
        <member name="F:NeoAxis.TextureAddressingMode.Mirror">
            <summary>Texture mirrors (flips) at joins over 1.0.</summary>
        </member>
        <member name="F:NeoAxis.TextureAddressingMode.Clamp">
            <summary>Texture clamps at 1.0.</summary>
        </member>
        <member name="F:NeoAxis.TextureAddressingMode.Border">
            <summary>Texture coordinates outside the range [0.0, 1.0] are set to the border colour.</summary>
        </member>
        <member name="T:NeoAxis.ComputeBufferAccessEnum">
            <summary>
            Describes access rights for a compute buffer.
            </summary>
        </member>
        <member name="F:NeoAxis.ComputeBufferAccessEnum.Read">
            <summary>
            The buffer can only be read.
            </summary>
        </member>
        <member name="F:NeoAxis.ComputeBufferAccessEnum.Write">
            <summary>
            The buffer can only be written to.
            </summary>
        </member>
        <member name="F:NeoAxis.ComputeBufferAccessEnum.ReadWrite">
            <summary>
            The buffer can be read and written.
            </summary>
        </member>
        <member name="T:NeoAxis.ComputeProgramManager">
            <summary>
            A class to manage and caching compute programs.
            </summary>
        </member>
        <member name="T:NeoAxis.CubemapProcessing">
            <summary>
            Class for processing cubemaps.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuBufferManager">
            <summary>
            Class for managing hardware buffers.
            </summary>
        </member>
        <member name="M:NeoAxis.GpuBufferManager.DestroyNativeObjectsNotUsedForLongTime(System.Double)">
            <summary>
            A method to temporary destroy internal GPU buffers which are not used long time.
            </summary>
            <param name="howLongHasNotBeenUsedInSeconds"></param>
        </member>
        <member name="T:NeoAxis.GpuIndexBuffer">
            <summary>
            Represents an index buffer.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuLinkedProgram">
            <summary>
            Represents a linked GPU programs, usually a pair of vertex and fragment programs.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuMaterialPass">
            <summary>
            Specifies the material settings when rendering.
            </summary>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.SourceBlendFactor">
            <summary>
            Gets or sets the source blend factor.
            </summary>
            <remarks>
            <para>
            Allows very fine control of blending this Pass with the existing contents of the scene.
            Wheras the texture blending operations seen in the TextureUnitState class are 
            concerned with blending between texture layers, this blending is about combining 
            the output of the material as a whole with the existing contents of the rendering 
            target. This blending therefore allows object transparency and other special effects.
            </para>
            <para>
            This version of the method allows complete control over the blending operation, 
            by specifying the source and destination blending factors. The result of the 
            blending operation is: final = (texture * sourceFactor) + (pixel * destFactor)
            </para>
            <para>
            Each of the factors is specified as one of a number of options, as specified 
            in the SceneBlendFactor enumerated type.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.DestinationBlendFactor">
            <summary>
            Gets or sets the destination blend factor.
            </summary>
            <remarks>
            <para>
            Allows very fine control of blending this Pass with the existing contents of the scene.
            Wheras the texture blending operations seen in the TextureUnitState class are 
            concerned with blending between texture layers, this blending is about combining 
            the output of the material as a whole with the existing contents of the rendering 
            target. This blending therefore allows object transparency and other special effects.
            </para>
            <para>
            This version of the method allows complete control over the blending operation, 
            by specifying the source and destination blending factors. The result of the 
            blending operation is: final = (texture * sourceFactor) + (pixel * destFactor)
            </para>
            <para>
            Each of the factors is specified as one of a number of options, as specified 
            in the SceneBlendFactor enumerated type.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.DepthCheck">
            <summary>
            Gets or sets whether or not this pass renders with depth-buffer checking on or not.
            </summary>
            <remarks>
            <para>
            If depth-buffer checking is on, whenever a pixel is about to be written to the 
            frame buffer the depth buffer is checked to see if the pixel is in front 
            of all other pixels written at that point. If not, the pixel is not written.
            </para>
            <para>
            If depth checking is off, pixels are written no matter what has been rendered before.
            Also see setDepthFunction for more advanced depth check configuration.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.DepthWrite">
            <summary>
            Gets or sets whether or not this pass renders with depth-buffer writing on or not.
            </summary>
            <remarks>
            <para>
            If depth-buffer writing is on, whenever a pixel is written to the frame buffer
            the depth buffer is updated with the depth value of that new pixel, thus affecting future
            rendering operations if future pixels are behind this one.
            </para>
            <para>
            If depth writing is off, pixels are written without updating the depth buffer 
            Depth writing should normally be on but can be turned off when rendering 
            static backgrounds or when rendering a collection of transparent objects 
            at the end of a scene so that they overlap each other correctly.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.DepthFunction">
            <summary>
            Gets or sets the function used to compare depth values when depth checking is on.
            </summary>
            <remarks>
            <para>
            If depth checking is enabled (see DepthCheckEnabled) a comparison occurs between the depth
            value of the pixel to be written and the current contents of the buffer. This comparison is
            normally <b>CompareFunction.LessEqual</b>, i.e. the pixel is written if it is closer (or at the same distance)
            than the current contents. If you wish you can change this comparison using this method.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.GpuMaterialPass.CullingMode">
            <summary>
            Gets or sets the culling mode for this pass based on the 'vertex winding'.
            </summary>
            <remarks>
            <para>
            A typical way for the rendering engine to cull triangles is based on the 
            'vertex winding' of triangles. Vertex winding refers to the direction in 
            which the vertices are passed or indexed to in the rendering operation as 
            viewed from the camera, and will wither be clockwise or anticlockwise.
            The default is <b>CullingMode.Clockwise</b> i.e. that only triangles whose 
            vertices are passed/indexed in anticlockwise order are rendered - this is a common 
            approach and is used in 3D studio models for example. You can alter this 
            culling mode if you wish but it is not advised unless you know what you are doing.
            </para>
            <para>
            You may wish to use the <b>CullingMode.None</b> option for mesh data that you cull 
            yourself where the vertex winding is uncertain.
            </para>
            </remarks>
        </member>
        <member name="T:NeoAxis.GpuProgram">
            <summary>
            Base class for GPU programs.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuProgramManager">
            <summary>
            A class to manage GPU programs.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuTexture">
            <summary>
            Represents a texture.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuTexture.Usages">
            <summary>Enum describing buffer usage; not mutually exclusive.</summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.Static">
            <summary>
            Static buffer which the application rarely modifies once created. Modifying 
            the contents of this buffer will involve a performance hit.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.Dynamic">
            <summary>
            Indicates the application would like to modify this buffer with the CPU
            fairly often. 
            Buffers created with this flag will typically end up in AGP memory rather 
            than video memory.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.WriteOnly">
            <summary>
            Indicates the application will never read the contents of the buffer back, 
            it will only ever write data. Locking a buffer with this flag will ALWAYS 
            return a pointer to new, blank memory rather than the memory associated 
            with the contents of the buffer; this avoids DMA stalls because you can 
            write to a new memory area while the previous one is being used. 
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.StaticWriteOnly">
            <summary>
            Combination of <b>Static</b> and <b>WriteOnly</b>.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.DynamicWriteOnly">
            <summary>
            Combination of <b>Dynamic</b> and <b>WriteOnly</b>. If you use 
            this, strongly consider using <b>DynamicWriteOnlyDiscardable</b>
            instead if you update the entire contents of the buffer very 
            regularly. 
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.BlitDestination">
            <summary>
            Texture can be used as the destination of a blit operation.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.DynamicWriteOnlyDiscardable">
            <summary>
            Combination of <b>Dynamic</b>, <b>WriteOnly</b> and <b>Discardable</b>.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.AutoMipmap">
            <summary>
            Mipmaps will be automatically generated for this texture.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.RenderTarget">
            <summary>
            This texture will be a render target, ie. used as a target for render to texture
            setting this flag will ignore all other texture usages except <b>AutoMipmap</b>.
            </summary>
        </member>
        <member name="F:NeoAxis.GpuTexture.Usages.ReadBack">
            <summary>
            Texture data can be read back.
            </summary>
        </member>
        <member name="T:NeoAxis.GpuTexture.SurfaceData">
            <summary>
            Represents a surface data of <see cref="T:NeoAxis.GpuTexture"/>.
            </summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.SourceSize">
            <summary>Gets the source size of the texture.</summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.ResultSize">
            <summary>Gets the result size of the texture (after processing).</summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.SourceDepth">
            <summary>Gets the source depth of the texture.</summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.ResultDepth">
            <summary>Gets the result depth of the texture.</summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.SourceFormat">
            <summary>Gets the source pixel format for the texture surface.</summary>
        </member>
        <member name="P:NeoAxis.GpuTexture.ResultFormat">
            <summary>Gets the result format of the texture (after processing).</summary>
        </member>
        <member name="M:NeoAxis.GpuTexture.GetData">
            <summary>
            Returns data that was initialized by the SetData method.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.GpuTexture.UnloadNotUsedForLongTime(System.Double)">
            <summary>
            A method to temporary unload textures which are not used long time.
            </summary>
            <param name="howLongHasNotBeenUsedInSeconds"></param>
        </member>
        <member name="T:NeoAxis.GpuVertexBuffer">
            <summary>
            Represents a vertex buffer.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageUtility">
            <summary>
            An auxiliary class for working with images.
            </summary>
        </member>
        <member name="T:NeoAxis.ImageUtility.Image2D">
            <summary>
            Represents a 2D image data for <see cref="T:NeoAxis.ImageUtility"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.ImageUtility.LoadFromVirtualFile(System.String,System.Byte[]@,NeoAxis.Vector2I@,System.Int32@,NeoAxis.PixelFormat@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Loads an image file.
            </summary>
            <param name="virtualFileName">The virtual file name.</param>
            <param name="data">The image data.</param>
            <param name="size">The image size.</param>
            <param name="depth">The image depth (in 3d images, numbers of layers, otherwhise 1).</param>
            <param name="format">Pixel format.</param>
            <param name="numFaces">The number of faces the image data has inside (6 for cubemaps, 1 otherwise).</param>
            <param name="numMipmaps">The number of mipmaps the image data has inside.</param>
            <param name="error">Output error string.</param>
            <returns><b>true</b> if image is loaded; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.ImageUtility.LoadFromBuffer(System.Byte[],System.String,System.Byte[]@,NeoAxis.Vector2I@,System.Int32@,NeoAxis.PixelFormat@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Loads an image from buffer.
            </summary>
            <param name="sourceBuffer">The source buffer.</param>
            <param name="fileType">The file type (file extension).</param>
            <param name="data">The image data.</param>
            <param name="size">The image size.</param>
            <param name="depth">The image depth (in 3d images, numbers of layers, otherwhise 1).</param>
            <param name="format">Pixel format.</param>
            <param name="numFaces">The number of faces the image data has inside (6 for cubemaps, 1 otherwise).</param>
            <param name="numMipmaps">The number of mipmaps the image data has inside.</param>
            <param name="error">Output error string.</param>
            <returns><b>true</b> if image is loaded; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.ImageUtility.LoadFromRealFile(System.String,System.Byte[]@,NeoAxis.Vector2I@,System.Int32@,NeoAxis.PixelFormat@,System.Int32@,System.Int32@,System.String@)">
            <summary>
            Loads an image file.
            </summary>
            <param name="realFileName">The real file name.</param>
            <param name="data">The image data.</param>
            <param name="size">The image size.</param>
            <param name="depth">The image depth (in 3d images, numbers of layers, otherwhise 1).</param>
            <param name="format">Pixel format.</param>
            <param name="numFaces">The number of faces the image data has inside (6 for cubemaps, 1 otherwise).</param>
            <param name="numMipmaps">The number of mipmaps the image data has inside.</param>
            <param name="error">Output error string.</param>
            <returns><b>true</b> if image is loaded; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.ImageUtility.Save(System.String,System.IntPtr,NeoAxis.Vector2I,System.Int32,NeoAxis.PixelFormat,System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Save the image as a file.
            </summary>
            <param name="realFileName">The real file name.</param>
            <param name="data">The image data.</param>
            <param name="size">The image size.</param>
            <param name="depth">The image depth (in 3d images, numbers of layers, otherwhise 1).</param>
            <param name="format">Pixel format.</param>
            <param name="numFaces">The number of faces the image data has inside (6 for cubemaps, 1 otherwise).</param>
            <param name="numMipmaps">The number of mipmaps the image data has inside.</param>
            <param name="jpegCompressionLevel">JPEG compression level in percents from 0 to 100.</param>
            <param name="error">Output error string.</param>
            <returns><b>true</b> if image is currently serialized; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.ImageUtility.Save(System.String,System.Byte[],NeoAxis.Vector2I,System.Int32,NeoAxis.PixelFormat,System.Int32,System.Int32,System.Int32,System.String@)">
            <summary>
            Save the image as a file.
            </summary>
            <param name="realFileName">The real file name.</param>
            <param name="data">The image data.</param>
            <param name="size">The image size.</param>
            <param name="depth">The image depth (in 3d images, numbers of layers, otherwhise 1).</param>
            <param name="format">Pixel format.</param>
            <param name="numFaces">The number of faces the image data has inside (6 for cubemaps, 1 otherwise).</param>
            <param name="numMipmaps">The number of mipmaps the image data has inside.</param>
            <param name="jpegCompressionLevel">JPEG compression level in percents from 0 to 100.</param>
            <param name="error">Output error string.</param>
            <returns><b>true</b> if image is currently serialized; otherwise, <b>false</b>.</returns>
        </member>
        <member name="T:NeoAxis.MultiRenderTarget">
            <summary>
            This class represents a multi render target that renders to a <see cref="T:NeoAxis.GpuTexture"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.MultiRenderTarget.Item">
            <summary>
            Represents an item of <see cref="T:NeoAxis.MultiRenderTarget"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.MultiRenderTarget.Dispose">
            <summary>Releases the resources that are used by the object.</summary>
        </member>
        <member name="T:NeoAxis.PixelFormat">
            <summary>The pixel format used for images, textures, and render surfaces.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Unknown">
            <summary>Unknown pixel format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.L8">
            <summary>8-bit pixel format, all bits luminance.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.L16">
            <summary>16-bit pixel format, all bits luminace.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A8">
            <summary>8-bit pixel format, all bits alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A4L4">
            <summary>8-bit pixel format, 4 bits alpha, 4 bits luminace.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.ByteLA">
            <summary>2 byte pixel format, 1 byte luminance, 1 byte alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.R5G6B5">
            <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.B5G6R5">
            <summary>16-bit pixel format, 5 bits red, 6 bits green, 5 bits blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.R3G3B2">
            <summary>8-bit pixel format, 2 bits blue, 3 bits green, 3 bits red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A4R4G4B4">
            <summary>16-bit pixel format, 4 bits for alpha, red, green and blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A1R5G5B5">
            <summary>16-bit pixel format, 5 bits for blue, green, red and 1 for alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8">
            <summary>24-bit pixel format, 8 bits for red, green and blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.B8G8R8">
            <summary>24-bit pixel format, 8 bits for blue, green and red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A8R8G8B8">
            <summary>32-bit pixel format, 8 bits for alpha, red, green and blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A8B8G8R8">
            <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.B8G8R8A8">
            <summary>32-bit pixel format, 8 bits for blue, green, red and alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8A8">
            <summary>32-bit pixel format, 8 bits for red, green, blue and alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.X8R8G8B8">
            <summary>
            32-bit pixel format, 8 bits for red, 8 bits for green, 8 bits for blue
            like A8R8G8B8, but alpha will get discarded.
            </summary>
            
        </member>
        <member name="F:NeoAxis.PixelFormat.X8B8G8R8">
            <summary>
            32-bit pixel format, 8 bits for blue, 8 bits for green, 8 bits for red
            like A8B8G8R8, but alpha will get discarded.
            </summary>
            
        </member>
        <member name="F:NeoAxis.PixelFormat.A2R10G10B10">
            <summary>32-bit pixel format, 2 bits for alpha, 10 bits for red, green and blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.A2B10G10R10">
            <summary>32-bit pixel format, 10 bits for blue, green and red, 2 bits for alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.DXT1">
            <summary>DDS (DirectDraw Surface) DXT1 format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.DXT2">
            <summary>DDS (DirectDraw Surface) DXT2 format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.DXT3">
            <summary>DDS (DirectDraw Surface) DXT3 format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.DXT4">
            <summary>DDS (DirectDraw Surface) DXT4 format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.DXT5">
            <summary>DDS (DirectDraw Surface) DXT5 format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float16R">
            <summary>16-bit pixel format, 16 bits (float) for red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float16RGB">
            <summary>48-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float16RGBA">
            <summary>64-bit pixel format, 16 bits (float) for red, 16 bits (float) for green, 16 bits (float) for blue, 16 bits (float) for alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float32R">
            <summary>32-bit pixel format, 32 bits (float) for red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float32RGB">
            <summary>96-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float32RGBA">
            <summary>128-bit pixel format, 32 bits (float) for red, 32 bits (float) for green, 32 bits (float) for blue, 32 bits (float) for alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Depth24S8">
            <summary>Depth texture format.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float16GR">
            <summary>32-bit, 2-channel s10e5 floating point pixel format, 16-bit green, 16-bit red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.Float32GR">
            <summary>64-bit, 2-channel floating point pixel format, 32-bit green, 32-bit red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.ShortRGBA">
            <summary>64-bit pixel format, 16 bits for red, green, blue and alpha.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.ShortGR">
            <summary>32-bit pixel format, 16-bit green, 16-bit red.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.ShortRGB">
            <summary>48-bit pixel format, 16 bits for red, green and blue.</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC_RGB2">
            <summary>PVRTC (PowerVR) RGB 2 bpp</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC_RGBA2">
            <summary>PVRTC (PowerVR) RGBA 2 bpp</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC_RGB4">
            <summary>PVRTC (PowerVR) RGB 4 bpp</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC_RGBA4">
            <summary>PVRTC (PowerVR) RGBA 4 bpp</summary>
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC2_2BPP">
            PVRTC (PowerVR) Version 2, 2 bpp
        </member>
        <member name="F:NeoAxis.PixelFormat.PVRTC2_4BPP">
            PVRTC (PowerVR) Version 2, 4 bpp
        </member>
        <member name="F:NeoAxis.PixelFormat.R11G11B10_Float">
            32-bit pixel format, 11 bits (float) for red, 11 bits (float) for green, 10 bits (float) for blue
        </member>
        <member name="F:NeoAxis.PixelFormat.R8_UInt">
            8-bit pixel format, 8 bits red (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8_UInt">
            16-bit pixel format, 8 bits red (unsigned int), 8 bits blue (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8_UInt">
            24-bit pixel format, 8 bits red (unsigned int), 8 bits blue (unsigned int), 8 bits green (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8A8_UInt">
            32-bit pixel format, 8 bits red (unsigned int), 8 bits blue (unsigned int), 8 bits green (unsigned int), 8 bits alpha (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16_UInt">
            16-bit pixel format, 16 bits red (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16_UInt">
            32-bit pixel format, 16 bits red (unsigned int), 16 bits blue (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16_UInt">
            48-bit pixel format, 16 bits red (unsigned int), 16 bits blue (unsigned int), 16 bits green (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16A16_UInt">
            64-bit pixel format, 16 bits red (unsigned int), 16 bits blue (unsigned int), 16 bits green (unsigned int), 16 bits alpha (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32_UInt">
            32-bit pixel format, 32 bits red (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32_UInt">
            64-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32B32_UInt">
            96-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int), 32 bits green (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32B32A32_UInt">
            128-bit pixel format, 32 bits red (unsigned int), 32 bits blue (unsigned int), 32 bits green (unsigned int), 32 bits alpha (unsigned int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8_SInt">
            8-bit pixel format, 8 bits red (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8_SInt">
            16-bit pixel format, 8 bits red (signed int), 8 bits blue (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8_SInt">
            24-bit pixel format, 8 bits red (signed int), 8 bits blue (signed int), 8 bits green (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8A8_SInt">
            32-bit pixel format, 8 bits red (signed int), 8 bits blue (signed int), 8 bits green (signed int), 8 bits alpha (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16_SInt">
            16-bit pixel format, 16 bits red (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16_SInt">
            32-bit pixel format, 16 bits red (signed int), 16 bits blue (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16_SInt">
            48-bit pixel format, 16 bits red (signed int), 16 bits blue (signed int), 16 bits green (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16A16_SInt">
            64-bit pixel format, 16 bits red (signed int), 16 bits blue (signed int), 16 bits green (signed int), 16 bits alpha (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32_SInt">
            32-bit pixel format, 32 bits red (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32_SInt">
            64-bit pixel format, 32 bits red (signed int), 32 bits blue (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32B32_SInt">
            96-bit pixel format, 32 bits red (signed int), 32 bits blue (signed int), 32 bits green (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R32G32B32A32_SInt">
            128-bit pixel format, 32 bits red (signed int), 32 bits blue (signed int), 32 bits green (signed int), 32 bits alpha (signed int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R9G9B9E5_ShareExp">
            32-bit pixel format, 9 bits for blue, green, red plus a 5 bit exponent.
        </member>
        <member name="F:NeoAxis.PixelFormat.BC4_UNorm">
            DDS (DirectDraw Surface) BC4 format (unsigned normalised)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC4_SNorm">
            DDS (DirectDraw Surface) BC4 format (signed normalised)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC5_UNorm">
            DDS (DirectDraw Surface) BC5 format (unsigned normalised)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC5_SNorm">
            DDS (DirectDraw Surface) BC5 format (signed normalised)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC6H_UF16">
            DDS (DirectDraw Surface) BC6H format (unsigned 16 bit float)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC6H_SF16">
            DDS (DirectDraw Surface) BC6H format (signed 16 bit float)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC7_UNorm">
            DDS (DirectDraw Surface) BC7 format (unsigned normalised)
        </member>
        <member name="F:NeoAxis.PixelFormat.BC7_UNorm_SRGB">
            DDS (DirectDraw Surface) BC7 format (unsigned normalised sRGB)
        </member>
        <member name="F:NeoAxis.PixelFormat.R8">
            8-bit pixel format, all bits red.
        </member>
        <member name="F:NeoAxis.PixelFormat.RG8">
            16-bit pixel format, 8 bits red, 8 bits green.
        </member>
        <member name="F:NeoAxis.PixelFormat.R8_SNorm">
            8-bit pixel format, 8 bits red (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8_SNorm">
            16-bit pixel format, 8 bits red (signed normalised int), 8 bits blue (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8_SNorm">
            24-bit pixel format, 8 bits red (signed normalised int), 8 bits blue (signed normalised int), 8 bits green (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R8G8B8A8_SNorm">
            32-bit pixel format, 8 bits red (signed normalised int), 8 bits blue (signed normalised int), 8 bits green (signed normalised int), 8 bits alpha (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16_SNorm">
            16-bit pixel format, 16 bits red (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16_SNorm">
            32-bit pixel format, 16 bits red (signed normalised int), 16 bits blue (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16_SNorm">
            48-bit pixel format, 16 bits red (signed normalised int), 16 bits blue (signed normalised int), 16 bits green (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.R16G16B16A16_SNorm">
            64-bit pixel format, 16 bits red (signed normalised int), 16 bits blue (signed normalised int), 16 bits green (signed normalised int), 16 bits alpha (signed normalised int).
        </member>
        <member name="F:NeoAxis.PixelFormat.ETC1_RGB8">
            ETC1 (Ericsson Texture Compression)
        </member>
        <member name="F:NeoAxis.PixelFormat.ETC2_RGB8">
            ETC2 (Ericsson Texture Compression)
        </member>
        <member name="F:NeoAxis.PixelFormat.ETC2_RGBA8">
            ETC2 (Ericsson Texture Compression)
        </member>
        <member name="F:NeoAxis.PixelFormat.ETC2_RGB8A1">
            ETC2 (Ericsson Texture Compression)
        </member>
        <member name="F:NeoAxis.PixelFormat.ATC_RGB">
            ATC (AMD_compressed_ATC_texture)
        </member>
        <member name="F:NeoAxis.PixelFormat.ATC_RGBA_ExplicitAlpha">
            ATC (AMD_compressed_ATC_texture)
        </member>
        <member name="F:NeoAxis.PixelFormat.ATC_RGBA_InterpolatedAlpha">
            ATC (AMD_compressed_ATC_texture)
        </member>
        <member name="F:NeoAxis.PixelFormat._3DC">
            3Dc pixel format.
        </member>
        <member name="F:NeoAxis.PixelFormat.Depth32F">
            <summary>Depth texture format.</summary>
        </member>
        <member name="T:NeoAxis.PixelFormatUtility">
            <summary>
            Auxiliary class for working with the <see cref="T:NeoAxis.PixelFormat"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderingSystem">
            <summary>
            Various functionality for working with the rendering system.
            </summary>
        </member>
        <member name="P:NeoAxis.RenderingSystem.ApplicationRenderTarget">
            <summary>Gets the main render target.</summary>
        </member>
        <member name="M:NeoAxis.RenderingSystem.GetAllRenderTargets">
            <summary>
            Gets all the render targets collection.
            </summary>
        </member>
        <member name="M:NeoAxis.RenderingSystem.GetAllViewports">
            <summary>
            Gets the viewports collection.
            </summary>
        </member>
        <member name="E:NeoAxis.RenderingSystem.RenderSystemEvent">
            <summary>
            Occurs when the render system event is generated.
            </summary>
            <remarks>
            <para>
            Some render systems have quite specific, internally generated events 
            that the application may wish to be notified of. Many applications
            don't have to worry about these events, and can just trust engine to 
            handle them, but if you want to know, you can add a listener here.
            </para>
            <para>
            Perhaps the most common example of a render system specific event is the 
            loss and restoration of a device in DirectX; which engine deals with, 
            but you may wish to know when it happens. 
            </para>
            </remarks>
        </member>
        <member name="M:NeoAxis.RenderingSystem.IsDeviceLostByTestCooperativeLevel">
            <summary>
            D3D specific method to return whether the device has been lost.
            </summary>
        </member>
        <member name="M:NeoAxis.RenderingSystem.ConvertColorValue(NeoAxis.ColorValue@)">
            <summary>
            Generates a packed data version of the passed in <see cref="T:NeoAxis.ColorValue"/>.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>The uint value.</returns>
        </member>
        <member name="M:NeoAxis.RenderingSystem.ConvertColorValue(NeoAxis.ColorValue)">
            <summary>
            Generates a packed data version of the passed in <see cref="T:NeoAxis.ColorValue"/> suitable for use as with this RenderSystem.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>The uint value.</returns>
        </member>
        <member name="M:NeoAxis.RenderingSystem.TryCreateOcclusionQuery(NeoAxis.RenderingSystem.OcclusionQueryResult,System.Object,Internal.SharpBgfx.OcclusionQuery@)">
            <summary>
            Tries to create an occlusion query. An occlusion query object cannot be created every frame, only in a specific frame (every fourth frame). Created object must used only in the current frame. If the pixels are drawn successfully, it will call callback.
            </summary>
            <param name="callback"></param>
            <param name="callbackParameter"></param>
            <param name="query"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.RenderTarget">
            <summary>
            A canvas which can receive the results of a rendering operation.
            </summary>
            <remarks>
            This class defines a common root to all targets of rendering operations. A
            render target could be a window on a screen, or another
            offscreen surface like a texture or bump map etc.
            </remarks>
        </member>
        <member name="M:NeoAxis.RenderTarget.DisposeInternal">
            <summary>Releases the resources that are used by the object.</summary>
        </member>
        <member name="M:NeoAxis.RenderTarget.AddViewport(System.Boolean,System.Boolean,System.Int32)">
            <summary>
            Adds a viewport to the rendering target.
            </summary>
            <param name="insertIndex">
            The relative order of the viewport with others on the target (allows overlapping
            viewports i.e. picture-in-picture).
            </param>
            <returns>The viewport.</returns>
            <remarks>
            A viewport is the rectangle into which redering output is sent. This method adds
            a viewport to the render target, rendering from the supplied camera. The
            rest of the parameters are only required if you wish to add more than one viewport
            to a single rendering target. Note that size information passed to this method is
            passed as a parametric, i.e. it is relative rather than absolute. This is to allow
            viewports to automatically resize along with the target.
            </remarks>
        </member>
        <member name="P:NeoAxis.RenderTarget.Size">
            <summary>
            Gets the render target size.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderTexture">
            <summary>
            This class represents a RenderTarget that renders to a <see cref="T:NeoAxis.GpuTexture"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.RenderWindow">
            <summary>
            Manages the target rendering window.
            </summary>
        </member>
        <member name="M:NeoAxis.RenderWindow.Dispose">
            <summary>Releases the resources that are used by the object.</summary>
        </member>
        <member name="T:NeoAxis.Simple3DRenderer">
            <summary>
            Defines a class for a rendering of simple and dynamic geometry.
            </summary>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLine(NeoAxis.Vector3@,NeoAxis.Vector3@,System.Double)">
            <summary>
            Renders a line.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
            <param name="thickness"></param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLine(NeoAxis.Vector3,NeoAxis.Vector3,System.Double)">
            <summary>
            Renders a line.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
            <param name="thickness"></param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLine(NeoAxis.Line3,System.Double)">
            <summary>
            Renders a line.
            </summary>
            <param name="line">The line.</param>
            <param name="thickness"></param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLineThin(NeoAxis.Vector3,NeoAxis.Vector3)">
            <summary>
            Renders a line.
            </summary>
            <param name="start">The line start position.</param>
            <param name="end">The line end position.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLineThin(NeoAxis.Line3)">
            <summary>
            Renders a line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddLineThin(NeoAxis.Line3@)">
            <summary>
            Renders a line.
            </summary>
            <param name="line">The line.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddBounds(NeoAxis.Bounds,System.Boolean,System.Double)">
            <summary>
            Renders a bounds.
            </summary>
            <param name="bounds">The bounds.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddSphere(NeoAxis.Sphere,System.Int32,System.Boolean,System.Double)">
            <summary>
            Renders a sphere.
            </summary>
            <param name="sphere">The sphere</param>
            <param name="segments">The count of lines in circles of sphere.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddSphere(NeoAxis.Vector3,System.Double,System.Int32,System.Boolean,System.Double)">
            <summary>
            Renders a sphere.
            </summary>
            <param name="origin"></param>
            <param name="radius"></param>
            <param name="segments">The count of lines in circles of sphere.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddBox(NeoAxis.Box,System.Boolean,System.Double)">
            <summary>
            Renders a box.
            </summary>
            <param name="box"></param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddArrow(NeoAxis.Vector3,NeoAxis.Vector3,System.Double,System.Double,System.Boolean,System.Double)">
            <summary>
            Renders an arrow.
            </summary>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Vector3},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4@,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Vector3},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Vector3F},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4@,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Vector3F},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Vector3},System.Collections.Generic.IList{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="T:NeoAxis.Simple3DRenderer.Vertex">
            <summary>
            Represents vertex data for <see cref="T:NeoAxis.Simple3DRenderer"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Simple3DRenderer.Vertex},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4@,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="M:NeoAxis.Simple3DRenderer.AddTriangles(System.Collections.Generic.IList{NeoAxis.Simple3DRenderer.Vertex},System.Collections.Generic.IList{System.Int32},NeoAxis.Matrix4,System.Boolean,System.Boolean)">
            <summary>
            Renders a vertex/index buffer.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="indices">The indices.</param>
            <param name="transform">The world transformation.</param>
            <param name="wireframe">The wireframe mode flag.</param>
            <param name="culling">The culling flag.</param>
        </member>
        <member name="T:NeoAxis.Simple3DRenderer.VertexIndexData">
            <summary>
            Represents a vertex/index data for using in <see cref="T:NeoAxis.Simple3DRenderer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.VertexElementSemantic">
            <summary>
            Vertex element semantics, used to identify the meaning of vertex buffer contents.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Position">
            <summary>
            Position data.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Normal">
            <summary>
            Normals.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Tangent">
            <summary>
            Tangents.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Bitangent">
            <summary>
            Bitangents.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Color0">
            <summary>
            First color channel.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Color1">
            <summary>
            Second color channel.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Color2">
            <summary>
            Third color channel.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.Color3">
            <summary>
            Fourth color channel.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.BlendIndices">
            <summary>
            Indices.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.BlendWeights">
            <summary>
            Animation weights.
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate0">
            <summary>
            First texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate1">
            <summary>
            Second texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate2">
            <summary>
            Third texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate3">
            <summary>
            Fourth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate4">
            <summary>
            Fifth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate5">
            <summary>
            Sixth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate6">
            <summary>
            Seventh texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:NeoAxis.VertexElementSemantic.TextureCoordinate7">
            <summary>
            Eighth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="T:NeoAxis.VertexElementType">
            <summary>Vertex element type, used to identify the base types of the vertex contents.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Float1">
            <summary>Float 1.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Float2">
            <summary>Float 2.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Float3">
            <summary>Float 3.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Float4">
            <summary>Float 4.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Short1">
            <summary>Short 1.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Short2">
            <summary>Short 2.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Short3">
            <summary>Short 3.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.Short4">
            <summary>Short 4.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.UByte4">
            <summary>Byte 4.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.ColorARGB">
            <summary>D3D style compact color.</summary>
        </member>
        <member name="F:NeoAxis.VertexElementType.ColorABGR">
            <summary>GL style compact color.</summary>
        </member>
        <member name="T:NeoAxis.VertexElement">
            <summary>
            This structure declares the usage of a single vertex buffer as a component of a complete vertex declaration.
            </summary>
            <remarks>
            Several vertex buffers can be used to supply the input geometry for a
            rendering operation, and in each case a vertex buffer can be used in
            different ways for different operations; the buffer itself does not
            define the semantics (position, normal etc), the VertexElement
            class does.
            </remarks>
        </member>
        <member name="P:NeoAxis.VertexElement.Source">
            <summary>Gets the vertex buffer index from where this element draws it's values.</summary>
        </member>
        <member name="P:NeoAxis.VertexElement.Offset">
            <summary>Gets the offset into the buffer where this element starts in bytes.</summary>
        </member>
        <member name="P:NeoAxis.VertexElement.Type">
            <summary>Gets the data format of this element.</summary>
        </member>
        <member name="P:NeoAxis.VertexElement.Semantic">
            <summary>Gets the meaning of this element.</summary>
        </member>
        <member name="M:NeoAxis.VertexElement.GetSizeInBytes">
            <summary>Gets the size of this element in bytes.</summary>
            <returns>The size of this element in bytes.</returns>
        </member>
        <member name="M:NeoAxis.VertexElement.GetSizeInBytes(NeoAxis.VertexElementType)">
            <summary>Utility method for helping to calculate offsets.</summary>
            <param name="type">The element type.</param>
            <returns>The type size in bytes.</returns>
        </member>
        <member name="M:NeoAxis.VertexElement.ConvertColorValue(NeoAxis.ColorValue,NeoAxis.VertexElementType)">
            <summary>Utility method for converting color to a packed 32-bit color type.</summary>
            <param name="color">The source color.</param>
            <param name="destinationType">The destination type.</param>
            <returns>The packed color type.</returns>
        </member>
        <member name="T:NeoAxis.VertexElements">
            <summary>
            Extensions for working with an array of vertex elements.
            </summary>
        </member>
        <member name="T:NeoAxis.Viewport">
            <summary>
            Viewport class, i.e. a rendering region on a render target.
            </summary>
        </member>
        <member name="T:NeoAxis.Viewport.LastFrameScreenLabelItem">
            <summary>
            Represents an item for <see cref="P:NeoAxis.Viewport.LastFrameScreenLabels"/> list.
            </summary>
        </member>
        <member name="E:NeoAxis.Viewport.Disposing">
            <summary>
            Occurs before object is disposed.
            </summary>
        </member>
        <member name="M:NeoAxis.Viewport.Dispose">
            <summary>Releases the resources that are used by the object.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.Dimensions">
            <summary>
            Gets or sets the dimensions (after creation).
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.DimensionsInPixels">
            <summary>
            Gets the dimensions of the viewport, a value in pixels.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettings">
            <summary>
            Gets last used camera settings for this viewport.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.Simple3DRenderer">
            <summary>
            Gets simple 3D renderer.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.CanvasRenderer">
            <summary>
            Gets GUI renderer for this viewport.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.UIContainer">
            <summary>
            Gets the root of GUI controls of this viewport.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.Parent">
            <summary>
            Gets the parent render target.
            </summary>
        </member>
        <member name="M:NeoAxis.Viewport.Update(System.Boolean,NeoAxis.Viewport.CameraSettingsClass)">
            <summary>
            Updates viewport with the rendering of attached map and GUI rendering.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.LastFrameScreenLabels">
            <summary>
            The list of object labels on the screen that were shown in the last frame.
            </summary>
        </member>
        <member name="T:NeoAxis.Viewport.CameraSettingsClass">
            <summary>
            Camera settings for rendering to viewport.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.AspectRatio">
            <summary>
            Gets or sets the aspect ratio for the frustum viewport.
            </summary>
            <remarks>
            <para>
            The ratio between the x and y dimensions of the rectangular area visible through the frustum
            is known as aspect ratio: aspect = width / height.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.NearClipDistance">
            <summary>
            Gets the position of the near clipping plane.
            </summary>
            <remarks>
            The position of the near clipping plane is the distance from the frustums position to the screen
            on which the world is projected. The near plane distance, combined with the field-of-view and the
            aspect ratio, determines the size of the viewport through which the world is viewed (in world
            co-ordinates). Note that this world viewport is different to a screen viewport, which has it's
            dimensions expressed in pixels. The frustums viewport should have the same aspect ratio as the
            screen viewport it renders into to avoid distortion.
            </remarks>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.FarClipDistance">
            <summary>
            Gets the distance to the far clipping plane.
            </summary>
            <remarks>
            <para>
            The view frustrum is a pyramid created from the frustum 
            position and the edges of the viewport.
            This method sets the distance for the far end of that pyramid. 
            Different applications need different values: e.g. a flight sim
            needs a much further far clipping plane than a first-person 
            shooter. An important point here is that the larger the ratio 
            between near and far clipping planes, the lower the accuracy of
            the Z-buffer used to depth-cue pixels. This is because the
            Z-range is limited to the size of the Z buffer (16 or 32-bit) 
            and the max values must be spread over the gap between near and
            far clip planes. As it happens, you can affect the accuracy far 
            more by altering the near distance rather than the far distance, 
            but keep this in mind.
            </para>
            <para>
            far The distance to the far clipping plane from the frustum in 
            world coordinates.If you specify 0, this means an infinite view
            distance which is useful especially when projecting shadows; but
            be careful not to use a near distance too close.
            </para>
            </remarks>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.Position">
            <summary>Gets the camera's position.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.Direction">
            <summary>Gets the camera's direction.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.FixedUp">
            <summary>Gets the camera's fixed up vector.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.Projection">
            <summary>
            Gets the type of projection to use (orthographic or perspective). Default is perspective.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.ReflectionEnabled">
            <summary>Returns whether this frustum is being reflected.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.ReflectionPlane">
            <summary>Returns the reflection plane of the frustum if appropriate.</summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.Rotation">
            <summary>
            Gets the camera's current orientation.
            </summary>
        </member>
        <member name="P:NeoAxis.Viewport.CameraSettingsClass.Up">
            <summary>Gets the camera's up vector.</summary>
        </member>
        <member name="M:NeoAxis.Viewport.CameraSettingsClass.ProjectToScreenCoordinates(NeoAxis.Vector3@,NeoAxis.Vector2@,System.Boolean)">
            <summary>
            Projects world position to screen coordinates.
            </summary>
            <param name="position">The world position.</param>
            <param name="screenPosition">The result screen coordinates.</param>
            <returns>
            <b>true</b> if screen position successfully received; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NeoAxis.Viewport.CameraSettingsClass.ProjectToScreenCoordinates(NeoAxis.Vector3,NeoAxis.Vector2@,System.Boolean)">
            <summary>
            Projects world position to screen coordinates.
            </summary>
            <param name="position">The world position.</param>
            <param name="screenPosition">The result screen coordinates.</param>
            <returns>
            <b>true</b> if screen position successfully received; otherwise, <b>false</b>.
            </returns>
        </member>
        <member name="M:NeoAxis.Viewport.CameraSettingsClass.GetRayByScreenCoordinates(NeoAxis.Vector2@,NeoAxis.Ray@)">
            <summary>
            Generates world ray from screen coordinates.
            </summary>
            <param name="screenPosition">The screen coordinates.</param>
            <returns>The ray.</returns>
        </member>
        <member name="M:NeoAxis.Viewport.CameraSettingsClass.GetRayByScreenCoordinates(NeoAxis.Vector2)">
            <summary>
            Generates world ray from screen coordinates.
            </summary>
            <param name="screenPosition">The screen coordinates.</param>
            <returns>The ray.</returns>
        </member>
        <member name="T:NeoAxis.ViewportRenderingContext">
            <summary>
            Represents a manager for rendering to viewport.
            </summary>
        </member>
        <member name="T:NeoAxis.ViewportRenderingContext.ObjectsDuringUpdateClass">
            <summary>
            The data provided during the context update process.
            </summary>
        </member>
        <member name="T:NeoAxis.ViewportRenderingContext.StatisticsClass">
            <summary>
            The data with the statistics of context's working.
            </summary>
        </member>
        <member name="T:NeoAxis.ViewportRenderingContext.BindTextureData">
            <summary>
            Represents a texture binding settings.
            </summary>
        </member>
        <member name="E:NeoAxis.ViewportRenderingContext.Disposing">
            <summary>
            Occurs before object is disposed.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundChannelGroup">
            <summary>
            Represents a group of sound channels of the sound system.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundData">
            <summary>
            Represents a sound data of the sound system.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundRealChannel">
            <summary>
            Represents a real sound channel of the sound system.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundVirtualChannel">
            <summary>
            Represents a virtual sound channel of the sound system.
            </summary>
        </member>
        <member name="T:NeoAxis.SoundWorld">
            <summary>
            Represents a sound system of the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.ArrayDataReader">
            <summary>
            A class for streaming data from an array.
            </summary>
        </member>
        <member name="M:NeoAxis.ArrayDataReader.ReadVariableUInt32">
            <summary>
            Reads a UInt32 written using WriteVariableUInt32()
            </summary>
        </member>
        <member name="M:NeoAxis.ArrayDataReader.ReadVariableInt32">
            <summary>
            Reads a Int32 written using WriteVariableInt32()
            </summary>
        </member>
        <member name="M:NeoAxis.ArrayDataReader.ReadVariableUInt64">
            <summary>
            Reads a UInt64 written using WriteVariableUInt64()
            </summary>
        </member>
        <member name="T:NeoAxis.ArrayDataWriter">
            <summary>
            A class for streaming data to an array.
            </summary>
        </member>
        <member name="M:NeoAxis.ArrayDataWriter.WriteVariableUInt32(System.UInt32)">
            <summary>
            Write Base128 encoded variable sized unsigned integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NeoAxis.ArrayDataWriter.WriteVariableInt32(System.Int32)">
            <summary>
            Write Base128 encoded variable sized signed integer
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="M:NeoAxis.ArrayDataWriter.WriteVariableUInt64(System.UInt64)">
            <summary>
            Write ulong encoded variable sized unsigned integer.
            </summary>
            <returns>number of bytes written</returns>
        </member>
        <member name="T:NeoAxis.AssemblyRegistration">
            <summary>
            This abstract class is designed to register plug-in assemblies.
            </summary>
        </member>
        <member name="T:NeoAxis.CollectionUtility">
            <summary>
            Helper class for working with collections.
            </summary>
        </member>
        <member name="M:NeoAxis.CollectionUtility.InsertionSort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.InsertionSort``1(``0[],System.Comparison{``0})">
            <summary>
            Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.SelectionSort``1(``0[],System.Collections.Generic.IComparer{``0})">
            <summary>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.SelectionSort``1(``0[],System.Comparison{``0})">
            <summary>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.Merge``1(``0[],``0[])">
            <summary>
            Merges two arrays into one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array1"></param>
            <param name="array2"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CollectionUtility.Merge``1(System.Collections.Generic.ICollection{``0[]})">
            <summary>
            Merges a collection of arrays into one.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="arrays"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CollectionUtility.InsertionSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.InsertionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            Insertion sort is a simple sorting algorithm that works the way we sort playing cards in our hands. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.SelectionSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.SelectionSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0})">
            <summary>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.SelectionSort``1(System.Collections.Generic.IList{``0})">
            <summary>
            The selection sort algorithm sorts an array by repeatedly finding the minimum element. No memory allocation. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.GetReverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Returns reversed list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CollectionUtility.GetReverse``1(System.Collections.Generic.LinkedList{``0})">
            <summary>
            Returns reversed linked list.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSort``1(``0[],System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSort``1(``0[],System.Comparison{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSort``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSort``1(System.Collections.Generic.IList{``0},System.Comparison{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="list"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSortUnmanaged``1(``0[],System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSortUnmanaged``1(``0[],System.Comparison{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="array"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSortUnmanaged``1(``0*,System.Int32,System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSortUnmanaged``1(``0*,System.Int32,System.Comparison{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="M:NeoAxis.CollectionUtility.MergeSortUnmanaged``1(``0*,System.Int32,NeoAxis.PointerComparison{``0},System.Boolean)">
            <summary>
            Merge sort is a efficient sorting method. It divides input array in two halves, calls itself for the two halves and then merges the two sorted halves. Stable sort.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="pointer"></param>
            <param name="comparer"></param>
            <param name="multithreaded"></param>
        </member>
        <member name="T:NeoAxis.CRC32">
            <summary>
            Class for calculation CRC32 checksums.
            </summary>
        </member>
        <member name="P:NeoAxis.CRC32.DefaultPolynomial">
            <summary>
            Returns the default polynomial
            </summary>
        </member>
        <member name="P:NeoAxis.CRC32.AutoCache">
            <summary>
            Gets or sets the auto-cache setting of this class.
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.#cctor">
            <summary>
            Initialize the cache
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.BuildCRC32Table(System.UInt32)">
            <summary>
            Builds a crc32 table given a polynomial
            </summary>
            <param name="polynomial"></param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CRC32.#ctor">
            <summary>
            Creates a CRC32 object using the DefaultPolynomial
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.#ctor(System.UInt32)">
            <summary>
            Creates a CRC32 object using the specified Creates a CRC32 object 
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Construct the 
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.Initialize">
            <summary>
            Initializes an implementation of HashAlgorithm.
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
        </member>
        <member name="M:NeoAxis.CRC32.HashFinal">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.CRC32.ComputeHash(System.IO.Stream)">
            <summary>
            Computes the hash value for the specified Stream.
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.ComputeHash(System.Byte[])">
            <summary>
            Overloaded. Computes the hash value for the input data.
            </summary>
        </member>
        <member name="M:NeoAxis.CRC32.ComputeHash(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Overloaded. Computes the hash value for the input data.
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.CSharpProjectFileUtility">
            <summary>
            An auxiliary class for working with C# project files.
            </summary>
        </member>
        <member name="T:NeoAxis.DataBlock">
            <summary>
            The class allows to store the data information in the hierarchical form.
            Supports creation of children and attributes.
            </summary>
        </member>
        <member name="T:NeoAxis.DataBlock.Attribute">
            <summary>
            Defines <see cref="T:NeoAxis.DataBlock"/> attribute.
            </summary>
        </member>
        <member name="P:NeoAxis.DataBlock.Attribute.Name">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="M:NeoAxis.DataBlock.Attribute.ToString">
            <summary>
            Returns a string that represents the current attribute.
            </summary>
            <returns>A string that represents the current attribute.</returns>
        </member>
        <member name="M:NeoAxis.DataBlock.#ctor">
            <summary>
            It is applied only to creation root blocks. Not for creation of children.
            </summary>
        </member>
        <member name="P:NeoAxis.DataBlock.Parent">
            <summary>
            Gets the parent block.
            </summary>
        </member>
        <member name="P:NeoAxis.DataBlock.Name">
            <summary>
            Gets or set block name.
            </summary>
        </member>
        <member name="P:NeoAxis.DataBlock.Children">
            <summary>
            Gets the children collection. <b>Don't modify.</b>
            </summary>
        </member>
        <member name="M:NeoAxis.DataBlock.FindChild(System.String)">
            <summary>
            Finds child block by name.
            </summary>
            <param name="name">The block name.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been exists; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.DataBlock.AddChild(System.String)">
            <summary>
            Creates the child block.
            </summary>
            <param name="name">The block name.</param>
            <returns>The child block.</returns>
            <remarks>
            Names of blocks can repeat.
            </remarks>
        </member>
        <member name="M:NeoAxis.DataBlock.DeleteChild(NeoAxis.DataBlock)">
            <summary>
            Deletes child block.
            </summary>
            <param name="child">The child block.</param>
        </member>
        <member name="M:NeoAxis.DataBlock.GetAttribute(System.String)">
            <summary>
            Returns the attribute by name if exists.
            </summary>
        </member>
        <member name="P:NeoAxis.DataBlock.Attributes">
            <summary>
            Gets the attributes collection. <b>Don't modify.</b>
            </summary>
        </member>
        <member name="M:NeoAxis.DataBlock.AttributeExists(System.String)">
            <summary>
            Checks existence of attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns><b>true</b> if the block exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.DataBlock.SetAttribute(System.String,System.ArraySegment{System.Byte},System.Boolean,System.Boolean)">
            <summary>
            Sets an attribute.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="cloneArray"></param>
            <param name="replaceWithSameName"></param>
        </member>
        <member name="M:NeoAxis.DataBlock.DeleteAttribute(System.String)">
            <summary>
            Deletes attribute if he exists.
            </summary>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:NeoAxis.DataBlock.DeleteAllAttributes">
            <summary>
            Deletes all attributes.
            </summary>
        </member>
        <member name="M:NeoAxis.DataBlock.DumpToBuffer">
            <summary>
            Returns a buffer containing all data about the block and his children.
            </summary>
            <returns>A string containing all data about the block and his children.</returns>
            <remarks>
            This method is applied at preservation of data of the block in a file.
            </remarks>
        </member>
        <member name="M:NeoAxis.DataBlock.ToString">
            <summary>
            Returns a string that represents the current text block.
            </summary>
            <returns>A string that represents the current text block.</returns>
        </member>
        <member name="M:NeoAxis.DataBlock.Parse(System.Byte[],System.Boolean,System.String@)">
            <summary>
            Parses the text with data of the block and his children.
            </summary>
            <param name="data">The data.</param>
            <param name="cloneDataArray"></param>
            <param name="error">The information on an error.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been parsed; otherwise, <b>null</b>.</returns>
            <remarks>
            For convenience of loading of blocks there is auxiliary class <see cref="T:NeoAxis.DataBlockUtility"/>.
            </remarks>
        </member>
        <member name="T:NeoAxis.DataBlockUtility">
            <summary>
            Auxiliary class for work with <see cref="T:NeoAxis.DataBlock"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.DataBlockUtility.LoadFromVirtualFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.DataBlockUtility.LoadFromVirtualFile(System.String)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.DataBlockUtility.LoadFromRealFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.DataBlockUtility.LoadFromRealFile(System.String)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <returns><see cref="T:NeoAxis.DataBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="T:NeoAxis.EDictionary`2">
            <summary>
            The class is an associative container that stores elements formed by a combination of a key value and a mapped value. This implementation keeps insertion order.
            </summary>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="T:NeoAxis.EngineConfigAttribute">
            <summary>
            Attribute to save the property or field in the application config.
            </summary>
            <remarks>
            To register a class with marked members, you must call the EngineConfig.RegisterClassParameters method.
            </remarks>
        </member>
        <member name="T:NeoAxis.EngineInfo">
            <summary>
            Provides general information about the engine.
            </summary>
        </member>
        <member name="T:NeoAxis.ESet`1">
            <summary>
            The class is a container that stores unique elements. This implementation keeps insertion order.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.FastRandom">
            <summary>
            Represents a pseudo-random number generator, a device that produces a sequence of numbers that meet certain statistical requirements for randomness.
            </summary>
        </member>
        <member name="M:NeoAxis.FastRandom.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.FastRandom"/> class, 
            using a time-dependent default seed value.
            </summary>
        </member>
        <member name="M:NeoAxis.FastRandom.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:NeoAxis.FastRandom"/> class, 
            using the specified seed value.
            </summary>
            <param name="seed">
            A number used to calculate a starting value for the pseudo-random number
            sequence. If a negative number is specified, the absolute value of the number
            is used.
            </param>
        </member>
        <member name="M:NeoAxis.FastRandom.NextInteger">
            <summary>
            Returns a nonnegative random number.
            </summary>
            <returns>
            A 32-bit signed integer greater than or equal to zero and less than System.Int32.MaxValue.
            </returns>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Int32)">
            <summary>
            Returns a nonnegative random number less or equal than the specified maximum.
            </summary>
            <param name="maxValue">
            The inclusive upper bound of the random number to be generated. 
            maxValue must be greater than or equal to zero.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to zero, and less or equal than maxValue. The range of return values includes zero and maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException" >maxValue is less than zero.</exception>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Int32,System.Int32)">
            <summary>
            Returns a random number within a specified range.
            </summary>
            <param name="minValue">The inclusive lower bound of the random number returned.</param>
            <param name="maxValue">
            The inclusive upper bound of the random number returned. maxValue must be
            greater than or equal to minValue.
            </param>
            <returns>
            A 32-bit signed integer greater than or equal to minValue and less or equal than maxValue;
            that is, the range of return values includes minValue and maxValue.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException" >minValue is greater than maxValue.</exception>
        </member>
        <member name="M:NeoAxis.FastRandom.NextDouble">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:NeoAxis.FastRandom.NextFloat">
            <summary>
            Returns a random number between 0.0 and 1.0.
            </summary>
            <returns>A floating point number greater than or equal to 0.0, and less than 1.0.</returns>
        </member>
        <member name="M:NeoAxis.FastRandom.NextBytes(System.Byte[])">
            <summary>
            Fills the elements of a specified array of bytes with random numbers.
            </summary>
            <param name="buffer">An array of bytes to contain random numbers.</param>
        </member>
        <member name="M:NeoAxis.FastRandom.NextBoolean">
            <summary>
            Returns a single random bit.
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Double,System.Double)">
            <summary>
            Returns a random number between min and max values.
            </summary>
            <returns>A floating point number greater than to minValue, and less than to maxValue.</returns>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Double)">
            <summary>
            Returns a random number between zero and max value.
            </summary>
            <returns>A floating point number greater than to zero, and less than to maxValue.</returns>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Single,System.Single)">
            <summary>
            Returns a random number between min and max values.
            </summary>
            <returns>A floating point number greater than to minValue, and less than to maxValue.</returns>
        </member>
        <member name="M:NeoAxis.FastRandom.Next(System.Single)">
            <summary>
            Returns a random number between zero and max value.
            </summary>
            <returns>A floating point number greater than to zero, and less than to maxValue.</returns>
        </member>
        <member name="T:NeoAxis.IOUtility">
            <summary>
            Helper class for working with files and folders.
            </summary>
        </member>
        <member name="T:NeoAxis.Log">
            <summary>
            Class for working with application logs.
            </summary>
        </member>
        <member name="T:NeoAxis.Log.Handlers">
            <summary>
            Provides access to event handlers of <see cref="T:NeoAxis.Log"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.Log.InvisibleInfo(System.Object)">
            <summary>
            Logging to the file.
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NeoAxis.NativeUtility">
            <summary>
            Class for working with native memory and libraries.
            </summary>
        </member>
        <member name="T:NeoAxis.OctreeContainer">
            <summary>
            An octree container to optimize getting list of objects by volume.
            </summary>
        </member>
        <member name="T:NeoAxis.OctreeContainer.GetObjectsRayOutputData">
            <summary>
            Represents returned data upon request from <see cref="T:NeoAxis.OctreeContainer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.OctreeContainer.InitSettings">
            <summary>
            Represents initialization settings of <see cref="T:NeoAxis.OctreeContainer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.OpenList`1">
            <summary>
            A list that has the ability to directly manipulate array elements. For example, you can access an element by reference.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NeoAxis.OpenList`1.Clear">
            <summary>
            Clears the list. The method only sets the Count to 0. Values of items are not reset to default.
            </summary>
        </member>
        <member name="T:NeoAxis.OpenListNative`1">
            <summary>
            A list that internally creates a native array.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.OpenListNative`1.Enumerator">
            <summary>
            Represents an enumerator for <see cref="T:NeoAxis.OpenListNative`1"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ParameterContainer">
            <summary>
            Container for parameters of different types. In some cases, used for the preparation of parameters for the GPU.
            </summary>
        </member>
        <member name="T:NeoAxis.ParameterContainer.NamedParameter">
            <summary>
            Represents parameter data of <see cref="T:NeoAxis.ParameterContainer"/> which specified by name.
            </summary>
        </member>
        <member name="T:NeoAxis.ParameterContainer.UniformParameter">
            <summary>
            Represents parameter data of <see cref="T:NeoAxis.ParameterContainer"/> which specified by uniform identifier.
            </summary>
        </member>
        <member name="T:NeoAxis.ParameterType">
            <summary>
            A list of parameter types that are supported in the <see cref="T:NeoAxis.ParameterContainer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ParameterTypeUtility">
            <summary>
            Auxiliary class for working with <see cref="T:NeoAxis.ParameterContainer"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.PathUtility">
            <summary>
            Replacement for Path class to support case insensitive paths.
            </summary>
        </member>
        <member name="T:NeoAxis.PlatformSpecificUtility">
            <summary>
            Internal class for implementing the target platform.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI">
            <summary>
            The class for working with a procedurally generated GUI.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Form">
            <summary>
            Represents a form for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Control">
            <summary>
            Represents a control for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Button">
            <summary>
            Represents a button for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Check">
            <summary>
            Represents a check box for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Edit">
            <summary>
            Represents a edit box for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProcedureUI.Text">
            <summary>
            Represents a text label for <see cref="T:NeoAxis.ProcedureUI"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ProjectUtility">
            <summary>
            Auxiliary class to work with the NeoAxis project.
            </summary>
        </member>
        <member name="T:NeoAxis.RandomUtility">
            <summary>
            Auxiliary class for <see cref="T:NeoAxis.FastRandom"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ReadOnlyICollection`1">
            <summary>
            Read only interface for ICollection.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.IReferenceList">
            <summary>
            An interface to get general data of <see cref="T:NeoAxis.ReferenceList`1"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ReferenceList`1">
            <summary>
            List which supports NeoAxis references.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="T:NeoAxis.ReferenceList`1.Enumerator">
            <summary>
            Represents an enumerator for <see cref="T:NeoAxis.ReferenceList`1"/>.
            </summary>
        </member>
        <member name="T:NeoAxis.ReflectionUtility">
            <summary>
            Auxiliary class for working with .NET reflection.
            </summary>
        </member>
        <member name="T:NeoAxis.SimpleTypes">
            <summary>
            Class for unified work with simple types. Mainly used for converting to string and back.
            </summary>
        </member>
        <member name="T:NeoAxis.SimpleTypes.TypeItem">
            <summary>
            Represents an item of a type for <see cref="T:NeoAxis.SimpleTypes"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.SimpleTypes.ParseValue(System.Type,System.String)">
            <summary>
            Returns null means this is not simple type.
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:NeoAxis.StringUtility">
            <summary>
            Auxiliary class for working with strings.
            </summary>
        </member>
        <member name="T:NeoAxis.TextBlock">
            <summary>
            The class that allows to store the text information in the hierarchical form. Supports creation of children and attributes.
            </summary>
        </member>
        <member name="T:NeoAxis.TextBlock.Attribute">
            <summary>
            Defines <see cref="T:NeoAxis.TextBlock"/> attribute.
            </summary>
        </member>
        <member name="P:NeoAxis.TextBlock.Attribute.Name">
            <summary>
            Gets the attribute name.
            </summary>
        </member>
        <member name="P:NeoAxis.TextBlock.Attribute.Value">
            <summary>
            Gets the attribute value.
            </summary>
        </member>
        <member name="M:NeoAxis.TextBlock.Attribute.ToString">
            <summary>
            Returns a string that represents the current attribute.
            </summary>
            <returns>A string that represents the current attribute.</returns>
        </member>
        <member name="M:NeoAxis.TextBlock.#ctor">
            <summary>
            It is applied only to creation root blocks. Not for creation of children.
            </summary>
            <example>Example of creation of the block and filling by data.
            <code>
            TextBlock block = new TextBlock();
            TextBlock childBlock = block.AddChild( "childBlock", "child block data" );
            childBlock.SetAttribute( "attribute", "attribute value" );
            </code>
            </example>
            <seealso cref="M:NeoAxis.TextBlock.AddChild(System.String,System.String)"/>
            <seealso cref="M:NeoAxis.TextBlock.SetAttribute(System.String,System.String)"/>
        </member>
        <member name="P:NeoAxis.TextBlock.Parent">
            <summary>
            Gets the parent block.
            </summary>
        </member>
        <member name="P:NeoAxis.TextBlock.Name">
            <summary>
            Gets or set block name.
            </summary>
        </member>
        <member name="P:NeoAxis.TextBlock.Data">
            <summary>
            Gets or set block string data.
            </summary>
        </member>
        <member name="P:NeoAxis.TextBlock.Children">
            <summary>
            Gets the children collection.
            </summary>
        </member>
        <member name="M:NeoAxis.TextBlock.FindChild(System.String)">
            <summary>
            Finds child block by name.
            </summary>
            <param name="name">The block name.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been exists; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlock.AddChild(System.String,System.String)">
            <summary>
            Creates the child block.
            </summary>
            <param name="name">The block name.</param>
            <param name="data">The block data string.</param>
            <returns>The child block.</returns>
            <remarks>
            Names of blocks can repeat.
            </remarks>
        </member>
        <member name="M:NeoAxis.TextBlock.AddChild(NeoAxis.TextBlock)">
            <summary>
            Adds an already created child block.
            </summary>
            <param name="child">The child block.</param>
            <returns></returns>
        </member>
        <member name="M:NeoAxis.TextBlock.DeleteChild(NeoAxis.TextBlock)">
            <summary>
            Deletes child block.
            </summary>
            <param name="child">The child block.</param>
        </member>
        <member name="M:NeoAxis.TextBlock.GetAttribute(System.String,System.String)">
            <summary>
            Returns the attribute value by name.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="defaultValue">Default value. If the attribute does not exist that this value will return.</param>
            <returns>The attribute value if the attribute exists; otherwise, default value.</returns>
        </member>
        <member name="P:NeoAxis.TextBlock.Attributes">
            <summary>
            Gets the attributes collection.
            </summary>
        </member>
        <member name="M:NeoAxis.TextBlock.AttributeExists(System.String)">
            <summary>
            Checks existence of attribute.
            </summary>
            <param name="name">The attribute name.</param>
            <returns><b>true</b> if the block exists; otherwise, <b>false</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlock.SetAttribute(System.String,System.String)">
            <summary>
            Sets attribute. Replaces previous when already exists with the same name.
            </summary>
            <param name="name">The attribute name.</param>
            <param name="value">The attribute value.</param>
        </member>
        <member name="M:NeoAxis.TextBlock.DeleteAttribute(System.String)">
            <summary>
            Deletes attribute if he exists.
            </summary>
            <param name="name">The attribute name.</param>
        </member>
        <member name="M:NeoAxis.TextBlock.DeleteAllAttributes">
            <summary>
            Deletes all attributes.
            </summary>
        </member>
        <member name="M:NeoAxis.TextBlock.DumpToString(System.Boolean)">
            <summary>
            Returns a string containing all data about the block and his children.
            </summary>
            <returns>A string containing all data about the block and his children.</returns>
            <remarks>
            This method is applied at preservation of data of the block in a file.
            </remarks>
            <example>Example of preservation of data of the block in a file.
            <code>
            TextBlock block = ...
            StreamWriter writer = new StreamWriter( fileName );
            writer.Write( block.DumpToString() );
            writer.Close();
            </code>
            </example>
            <seealso cref="M:NeoAxis.TextBlock.Parse(System.String,System.String@)"/>
        </member>
        <member name="M:NeoAxis.TextBlock.ToString">
            <summary>
            Returns a string that represents the current text block.
            </summary>
            <returns>A string that represents the current text block.</returns>
        </member>
        <member name="M:NeoAxis.TextBlock.Parse(System.String,System.String@)">
            <summary>
            Parses the text with data of the block and his children.
            </summary>
            <param name="str">The data string.</param>
            <param name="error">The information on an error.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been parsed; otherwise, <b>null</b>.</returns>
            <seealso cref="!:NeoAxis.TextBlock.DumpToString()"/>
            <remarks>
            For convenience of loading of blocks there is auxiliary class <see cref="T:NeoAxis.TextBlockUtility"/>.
            </remarks>
            <example>Example of loading of data of the block from a stream.
            <code>
            FileStream stream = ...;
            StreamReader streamReader = new StreamReader( stream );
            string error;
            TextBlock block = TextBlock.Parse( streamReader.ReadToEnd(), out error );
            streamReader.Dispose();
            </code>
            </example>
        </member>
        <member name="T:NeoAxis.TextBlockUtility">
            <summary>
            Auxiliary class for work with <see cref="T:NeoAxis.TextBlock"/>.
            </summary>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromVirtualFile(System.String,System.String@,System.Boolean@)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <param name="errorString">The information on an error.</param>
            <param name="fileNotFound"><b>true</b> if file not found.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromVirtualFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromVirtualFile(System.String)">
            <summary>
            Loads the block from a file of virtual file system.
            </summary>
            <param name="path">The virtual file path.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromRealFile(System.String,System.String@,System.Boolean@)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <param name="errorString">The information on an error.</param>
            <param name="fileNotFound"><b>true</b> if file not found.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromRealFile(System.String,System.String@)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <param name="errorString">The information on an error.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="M:NeoAxis.TextBlockUtility.LoadFromRealFile(System.String)">
            <summary>
            Loads the block from a file of real file system.
            </summary>
            <param name="path">The real file path.</param>
            <returns><see cref="T:NeoAxis.TextBlock"/> if the block has been loaded; otherwise, <b>null</b>.</returns>
        </member>
        <member name="T:NeoAxis.UniqueNameGenerator">
            <summary>
            Class for generating unique names.
            </summary>
        </member>
        <member name="T:NeoAxis.VisualStudioSolutionUtility">
            <summary>
            A utility class to compile Visual Studio solution files.
            </summary>
        </member>
        <member name="M:OggDecoder.OggFile.ParsePrimaryHeaders">
            <summary>
            internal method for parsing the main stream headers
            </summary>
        </member>
        <member name="M:OggDecoder.OggFile.ParseSecondaryHeaders">
            <summary>
            internal method to parse all secondary headers
            </summary>
        </member>
        <member name="M:OggDecoder.VideoDriver.Blit">
            <summary>
            Blit only from main thread
            </summary>
        </member>
        <member name="T:Internal.DebugInfo">
            <summary>
            Represents a base class of info page for Debug Window of the editor.
            </summary>
        </member>
        <member name="T:Internal.DebugInfo_Memory">
            <summary>
            Represents a page with memory using information for Debug Window of the editor.
            </summary>
        </member>
        <member name="T:Internal.DebugInfo_RenderResources">
            <summary>
            Represents a page with information about render resources for Debug Window of the editor.
            </summary>
        </member>
        <member name="T:Internal.DebugInfo_RenderStatistics">
            <summary>
            Represents a page with rendering statistics for Debug Window of the editor.
            </summary>
        </member>
        <member name="T:Internal.DebugInfo_Sound">
            <summary>
            Represents a page with sound system information for Debug Window of the editor.
            </summary>
        </member>
        <member name="T:Internal.PlatformFunctionality">
            <summary>
            Internal class for implementing the target platform.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.ContactFeature">
            <summary>
            The features that intersect to form the contact point
            This must be 4 bytes or less.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactFeature.IndexA">
            <summary>
            Feature index on ShapeA
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactFeature.IndexB">
            <summary>
            Feature index on ShapeB
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactFeature.TypeA">
            <summary>
            The feature type on ShapeA
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactFeature.TypeB">
            <summary>
            The feature type on ShapeB
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.ContactID">
            <summary>
            Contact ids to facilitate warm starting.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactID.Features">
            <summary>
            The features that intersect to form the contact point
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ContactID.Key">
            <summary>
            Used to quickly compare contact ids.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.ManifoldPoint">
            <summary>
            A manifold point is a contact point belonging to a contact
            manifold. It holds details related to the geometry and dynamics
            of the contact points.
            The local point usage depends on the manifold type:
            -ShapeType.Circles: the local center of circleB
            -SeparationFunction.FaceA: the local center of cirlceB or the clip point of polygonB
            -SeparationFunction.FaceB: the clip point of polygonA
            This structure is stored across time steps, so we keep it small.
            Note: the impulses are used for internal caching and may not
            provide reliable contact forces, especially for high speed collisions.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ManifoldPoint.Id">
            <summary>
            Uniquely identifies a contact point between two Shapes
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ManifoldPoint.LocalPoint">
            <summary>
            Usage depends on manifold type
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ManifoldPoint.NormalImpulse">
            <summary>
            The non-penetration impulse
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.ManifoldPoint.TangentImpulse">
            <summary>
            The friction impulse
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Manifold">
            <summary>
            A manifold for two touching convex Shapes.
            Box2D supports multiple types of contact:
            - Clip point versus plane with radius
            - Point versus point with radius (circles)
            The local point usage depends on the manifold type:
            - ShapeType.Circles: the local center of circleA
            - SeparationFunction.FaceA: the center of faceA
            - SeparationFunction.FaceB: the center of faceB
            Similarly the local normal usage:
            - ShapeType.Circles: not used
            - SeparationFunction.FaceA: the normal on polygonA
            - SeparationFunction.FaceB: the normal on polygonB
            We store contacts in this way so that position correction can
            account for movement, which is critical for continuous physics.
            All contact scenarios must be expressed in one of these types.
            This structure is stored across time steps, so we keep it small.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Manifold.LocalNormal">
            <summary>
            Not use for Type.SeparationFunction.Points
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Manifold.LocalPoint">
            <summary>
            Usage depends on manifold type
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Manifold.PointCount">
            <summary>
            The number of manifold points
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Manifold.Points">
            <summary>
            The points of contact
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.PointState">
            <summary>
            This is used for determining the state of contact points.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.PointState.Null">
            <summary>
            Point does not exist
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.PointState.Add">
            <summary>
            Point was added in the update
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.PointState.Persist">
            <summary>
            Point persisted across the update
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.PointState.Remove">
            <summary>
            Point was removed in the update
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.ClipVertex">
            <summary>
            Used for computing contact manifolds.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.RayCastInput">
            <summary>
            Ray-cast input data.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.RayCastInput.MaxFraction">
            <summary>
            The ray extends from p1 to p1 + maxFraction * (p2 - p1).
            If you supply a max fraction of 1, the ray extends from p1 to p2.
            A max fraction of 0.5 makes the ray go from p1 and half way to p2.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.RayCastInput.Point1">
            <summary>
            The starting point of the ray.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.RayCastInput.Point2">
            <summary>
            The ending point of the ray.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput">
            <summary>
            Ray-cast output data. 
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput.Fraction">
            <summary>
            The ray hits at p1 + fraction * (p2 - p1), where p1 and p2 come from RayCastInput.
            Contains the actual fraction of the ray where it has the intersection point.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput.Normal">
            <summary>
            The normal of the face of the shape the ray has hit.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.AABB">
            <summary>
            An axis aligned bounding box.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.AABB.LowerBound">
            <summary>
            The lower vertex
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.AABB.UpperBound">
            <summary>
            The upper vertex
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Center">
            <summary>
            Get the center of the AABB.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Extents">
            <summary>
            Get the extents of the AABB (half-widths).
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Perimeter">
            <summary>
            Get the perimeter length
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Vertices">
            <summary>
            Gets the vertices of the AABB.
            </summary>
            <value>The corners of the AABB</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Q1">
            <summary>
            First quadrant
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Q2">
            <summary>
            Second quadrant
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Q3">
            <summary>
            Third quadrant
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.AABB.Q4">
            <summary>
            Forth quadrant
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.IsValid">
            <summary>
            Verify that the bounds are sorted. And the bounds are valid numbers (not NaN).
            </summary>
            <returns>
            	<c>true</c> if this instance is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.Combine(Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Combine an AABB into this one.
            </summary>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.Combine(Internal.tainicom.Aether.Physics2D.Collision.AABB@,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Combine two AABBs into this one.
            </summary>
            <param name="aabb1">The aabb1.</param>
            <param name="aabb2">The aabb2.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.Contains(Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Does this aabb contain the provided AABB.
            </summary>
            <param name="aabb">The aabb.</param>
            <returns>
            	<c>true</c> if it contains the specified aabb; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.Contains(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Determines whether the AAABB contains the specified point.
            </summary>
            <param name="point">The point.</param>
            <returns>
            	<c>true</c> if it contains the specified point; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.TestOverlap(Internal.tainicom.Aether.Physics2D.Collision.AABB@,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Test if the two AABBs overlap.
            </summary>
            <param name="a">The first AABB.</param>
            <param name="b">The second AABB.</param>
            <returns>True if they are overlapping.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.AABB.RayCast(Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput@,Internal.tainicom.Aether.Physics2D.Collision.RayCastInput@,System.Boolean)">
            <summary>
            Raycast against this AABB using the specificed points and maxfraction (found in input)
            </summary>
            <param name="output">The results of the raycast.</param>
            <param name="input">The parameters for the raycast.</param>
            <returns>True if the ray intersects the AABB</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.EPAxis">
            <summary>
            This structure is used to keep track of the best separating axis.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.ReferenceFace">
            <summary>
            Reference face used for clipping
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Collision">
            <summary>
            Collision methods
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.TestOverlap(Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape,System.Int32,Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape,System.Int32,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Test overlap between the two shapes.
            </summary>
            <param name="shapeA">The first shape.</param>
            <param name="indexA">The index for the first shape.</param>
            <param name="shapeB">The second shape.</param>
            <param name="indexB">The index for the second shape.</param>
            <param name="xfA">The transform for the first shape.</param>
            <param name="xfB">The transform for the seconds shape.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.CollideCircles(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Compute the collision manifold between two circles.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.CollidePolygonAndCircle(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Compute the collision manifold between a polygon and a circle.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="polygonA">The polygon A.</param>
            <param name="xfA">The transform of A.</param>
            <param name="circleB">The circle B.</param>
            <param name="xfB">The transform of B.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.CollidePolygons(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Compute the collision manifold between two polygons.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="polyA">The poly A.</param>
            <param name="transformA">The transform A.</param>
            <param name="polyB">The poly B.</param>
            <param name="transformB">The transform B.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.CollideEdgeAndCircle(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Compute contact points for edge versus circle.
            This accounts for edge connectivity.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="edgeA">The edge A.</param>
            <param name="transformA">The transform A.</param>
            <param name="circleB">The circle B.</param>
            <param name="transformB">The transform B.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.CollideEdgeAndPolygon(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Collides and edge and a polygon, taking into account edge adjacency.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="edgeA">The edge A.</param>
            <param name="xfA">The xf A.</param>
            <param name="polygonB">The polygon B.</param>
            <param name="xfB">The xf B.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Collision.EPCollider.TempPolygon">
            <summary>
            This holds polygon B expressed in frame A.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.ClipSegmentToLine(Internal.tainicom.Aether.Physics2D.Common.FixedArray2{Internal.tainicom.Aether.Physics2D.Collision.ClipVertex}@,Internal.tainicom.Aether.Physics2D.Common.FixedArray2{Internal.tainicom.Aether.Physics2D.Collision.ClipVertex}@,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single,System.Int32)">
            <summary>
            Clipping for contact manifolds.
            </summary>
            <param name="vOut">The v out.</param>
            <param name="vIn">The v in.</param>
            <param name="normal">The normal.</param>
            <param name="offset">The offset.</param>
            <param name="vertexIndexA">The vertex index A.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.EdgeSeparation(Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Int32,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape)">
            <summary>
            Find the separation between poly1 and poly2 for a give edge normal on poly1.
            </summary>
            <param name="poly1">The poly1.</param>
            <param name="xf1">The XF1.</param>
            <param name="edge1">The edge1.</param>
            <param name="poly2">The poly2.</param>
            <param name="xf2">The XF2.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Collision.FindMaxSeparation(System.Int32@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Find the max separation between poly1 and poly2 using edge normals from poly1.
            </summary>
            <param name="edgeIndex">Index of the edge.</param>
            <param name="poly1">The poly1.</param>
            <param name="xf1">The XF1.</param>
            <param name="poly2">The poly2.</param>
            <param name="xf2">The XF2.</param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.DistanceProxy">
            <summary>
            A distance proxy is used by the GJK algorithm.
            It encapsulates any shape.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DistanceProxy.#ctor(Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape,System.Int32)">
            <summary>
            Initialize the proxy using the given shape. The shape
            must remain in scope while the proxy is in use.
            </summary>
            <param name="shape">The shape.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DistanceProxy.GetSupport(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the supporting vertex index in the given direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DistanceProxy.GetSupportVertex(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the supporting vertex in the given direction.
            </summary>
            <param name="direction">The direction.</param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.SimplexCache">
            <summary>
            Used to warm start ComputeDistance.
            Set count to zero on first call.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexCache.Count">
            <summary>
            Length or area
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexCache.IndexA">
            <summary>
            Vertices on shape A
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexCache.IndexB">
            <summary>
            Vertices on shape B
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.DistanceInput">
            <summary>
            Input for Distance.ComputeDistance().
            You have to option to use the shape radii in the computation. 
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.DistanceOutput">
            <summary>
            Output for Distance.ComputeDistance().
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.DistanceOutput.Iterations">
            <summary>
            Number of GJK iterations used
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.DistanceOutput.PointA">
            <summary>
            Closest point on shapeA
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.DistanceOutput.PointB">
            <summary>
            Closest point on shapeB
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.A">
            <summary>
            Barycentric coordinate for closest point 
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.IndexA">
            <summary>
            wA index
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.IndexB">
            <summary>
            wB index
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.W">
            <summary>
            wB - wA
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.WA">
            <summary>
            Support point in proxyA
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.SimplexVertex.WB">
            <summary>
            Support point in proxyB
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Distance">
            <summary>
            The Gilbert–Johnson–Keerthi distance algorithm that provides the distance between shapes.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Distance.GJKCalls">
            <summary>
            The number of calls made to the ComputeDistance() function.
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Distance.GJKIters">
            <summary>
            The number of iterations that was made on the last call to ComputeDistance().
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Distance.GJKMaxIters">
            <summary>
            The maximum numer of iterations ever mae with calls to the CompteDistance() funtion.
            Note: This is only activated when Settings.EnableDiagnostics = true
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.TreeNode`1">
            <summary>
            A node in the dynamic tree. The client does not interact with this directly.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.TreeNode`1.AABB">
            <summary>
            Enlarged AABB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.TreeNode`1.Next">
            <summary>
            Next free node
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1">
             <summary>
             A dynamic tree arranges data in a binary tree to accelerate
             queries such as volume queries and ray casts. Leafs are proxies
             with an AABB. In the tree we expand the proxy AABB by Settings.b2_fatAABBFactor
             so that the proxy AABB is bigger than the client object. This allows the client
             object to move by small amounts without triggering a tree update.
            
             Nodes are pooled and relocatable, so we use node indices rather than pointers.
             </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.#ctor">
            <summary>
            Constructing the tree initializes the node pool.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.Height">
            <summary>
            Compute the height of the binary tree in O(N) time. Should not be called often.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.AreaRatio">
            <summary>
            Get the ratio of the sum of the node areas to the root area.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.MaxBalance">
            <summary>
            Get the maximum balance of an node in the tree. The balance is the difference
            in height of the two children of a node.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.AddProxy(Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Create a proxy in the tree as a leaf node. We return the index
            of the node instead of a pointer so that we can grow
            the node pool.        
            /// </summary>
            <param name="aabb">The aabb.</param>
            <param name="userData">The user data.</param>
            <returns>Index of the created proxy</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. This asserts if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.MoveProxy(System.Int32,Internal.tainicom.Aether.Physics2D.Collision.AABB@,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Move a proxy with a swepted AABB. If the proxy has moved outside of its fattened AABB,
            then the proxy is removed from the tree and re-inserted. Otherwise
            the function returns immediately.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
            <param name="displacement">The displacement.</param>
            <returns>true if the proxy was re-inserted.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.SetUserData(System.Int32,`0)">
            <summary>
            Set proxy user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proxyId">The proxy id.</param>
            <param name="userData">The proxy user data.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.GetUserData(System.Int32)">
            <summary>
            Get proxy user data.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="proxyId">The proxy id.</param>
            <returns>the proxy user data or 0 if the id is invalid.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.GetFatAABB(System.Int32,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Get the fat AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="fatAABB">The fat AABB.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.GetFatAABB(System.Int32)">
            <summary>
            Get the fat AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns>The fat AABB.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.TestFatAABBOverlap(System.Int32,System.Int32)">
            <summary>
            Test overlap of fat AABBs.
            </summary>
            <param name="proxyIdA">The proxy id A.</param>
            <param name="proxyIdB">The proxy id B.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.Query(Internal.tainicom.Aether.Physics2D.Collision.BroadPhaseQueryCallback,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.RayCast(Internal.tainicom.Aether.Physics2D.Collision.BroadPhaseRayCastCallback,Internal.tainicom.Aether.Physics2D.Collision.RayCastInput@)">
            <summary>
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a Shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.Balance(System.Int32)">
            <summary>
            Perform a left or right rotation if node N is imbalanced.
            </summary>
            <param name="iN"></param>
            <returns>the new root index.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.ComputeHeight(System.Int32)">
            <summary>
            Compute the height of a sub-tree.
            </summary>
            <param name="nodeId">The node id to use as parent.</param>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.ComputeHeight">
            <summary>
            Compute the height of the entire tree.
            </summary>
            <returns>The height of the tree.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.Validate">
            <summary>
            Validate this tree. For testing.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.RebuildBottomUp">
            <summary>
            Build an optimal tree. Very expensive. For testing.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTree`1.ShiftOrigin(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Shift the origin of the nodes
            </summary>
            <param name="newOrigin">The displacement to use.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase">
            <summary>
            The broad-phase is used for computing pairs and performing volume queries and ray casts.
            This broad-phase does not persist pairs. Instead, this reports potentially new pairs.
            It is up to the client to consume the new pairs and to track subsequent overlap.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.#ctor">
            <summary>
            Constructs a new broad phase based on the dynamic tree implementation
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.ProxyCount">
            <summary>
            Get the number of proxies.
            </summary>
            <value>The proxy count.</value>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.AddProxy(Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Create a proxy with an initial AABB. Pairs are not reported until
            UpdatePairs is called.
            </summary>
            <param name="proxy">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.RemoveProxy(System.Int32)">
            <summary>
            Destroy a proxy. It is up to the client to remove any pairs.
            </summary>
            <param name="proxyId">The proxy id.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.QueryCallback(System.Int32)">
            <summary>
            This is called from DynamicTree.Query when we are gathering pairs.
            </summary>
            <param name="proxyId"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.GetFatAABB(System.Int32,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Get the AABB for a proxy.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.GetProxy(System.Int32)">
            <summary>
            Get user data from a proxy. Returns null if the id is invalid.
            </summary>
            <param name="proxyId">The proxy id.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.TestOverlap(System.Int32,System.Int32)">
            <summary>
            Test overlap of fat AABBs.
            </summary>
            <param name="proxyIdA">The proxy id A.</param>
            <param name="proxyIdB">The proxy id B.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.UpdatePairs(Internal.tainicom.Aether.Physics2D.Dynamics.BroadphaseDelegate)">
            <summary>
            Update the pairs. This results in pair callbacks. This can only add pairs.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.Query(Internal.tainicom.Aether.Physics2D.Collision.BroadPhaseQueryCallback,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Query an AABB for overlapping proxies. The callback class
            is called for each proxy that overlaps the supplied AABB.
            </summary>
            <param name="callback">The callback.</param>
            <param name="aabb">The aabb.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.RayCast(Internal.tainicom.Aether.Physics2D.Collision.BroadPhaseRayCastCallback,Internal.tainicom.Aether.Physics2D.Collision.RayCastInput@)">
            <summary>
            Ray-cast against the proxies in the tree. This relies on the callback
            to perform a exact ray-cast in the case were the proxy contains a shape.
            The callback also performs the any collision filtering. This has performance
            roughly equal to k * log(n), where k is the number of collisions and n is the
            number of proxies in the tree.
            </summary>
            <param name="callback">A callback class that is called for each proxy that is hit by the ray.</param>
            <param name="input">The ray-cast input data. The ray extends from p1 to p1 + maxFraction * (p2 - p1).</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.TreeQuality">
            <summary>
            Get the tree quality based on the area of the tree.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.TreeBalance">
            <summary>
            Gets the balance of the tree.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.DynamicTreeBroadPhase.TreeHeight">
            <summary>
            Gets the height of the tree.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape">
            <summary>
            A chain shape is a free form sequence of line segments.
            The chain has two-sided collision, so you can use inside and outside collision.
            Therefore, you may use any winding order.
            Connectivity information is used to create smooth collisions.
            WARNING: The chain will not collide properly if there are self-intersections.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.Vertices">
            <summary>
            The vertices. These are not owned/freed by the chain Shape.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.#ctor">
            <summary>
            Constructor for ChainShape. By default have 0 in density.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Boolean)">
            <summary>
            Create a new chainshape from the vertices.
            </summary>
            <param name="vertices">The vertices to use. Must contain 2 or more vertices.</param>
            <param name="createLoop">Set to true to create a closed loop. It connects the first vertice to the last, and automatically adjusts connectivity to create smooth collisions along the chain.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.PrevVertex">
            <summary>
            Establish connectivity to a vertex that precedes the first vertex.
            Don't call this for loops.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.NextVertex">
            <summary>
            Establish connectivity to a vertex that follows the last vertex.
            Don't call this for loops.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.GetChildEdge(Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape,System.Int32)">
            <summary>
            This method has been optimized to reduce garbage.
            </summary>
            <param name="edge">The cached edge to set properties on.</param>
            <param name="index">The index.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.GetChildEdge(System.Int32)">
            <summary>
            Get a child edge.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape.CompareTo(Internal.tainicom.Aether.Physics2D.Collision.Shapes.ChainShape)">
            <summary>
            Compare the chain to another chain
            </summary>
            <param name="shape">The other chain</param>
            <returns>True if the two chain shapes are the same</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape">
            <summary>
            A circle shape.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape.#ctor(System.Single,System.Single)">
            <summary>
            Create a new circle with the desired radius and density.
            </summary>
            <param name="radius">The radius of the circle.</param>
            <param name="density">The density of the circle.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape.Position">
            <summary>
            Get or set the position of the circle
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape.CompareTo(Internal.tainicom.Aether.Physics2D.Collision.Shapes.CircleShape)">
            <summary>
            Compare the circle to another circle
            </summary>
            <param name="shape">The other circle</param>
            <returns>True if the two circles are the same size and have the same position</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape">
            <summary>
            A line segment (edge) shape. These can be connected in chains or loops
            to other edge shapes.
            The connectivity information is used to ensure correct contact normals.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape._vertex1">
            <summary>
            Edge start vertex
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape._vertex2">
            <summary>
            Edge end vertex
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Create a new EdgeShape with the specified start and end.
            </summary>
            <param name="start">The start of the edge.</param>
            <param name="end">The end of the edge.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.HasVertex0">
            <summary>
            Is true if the edge is connected to an adjacent vertex before vertex 1.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.HasVertex3">
            <summary>
            Is true if the edge is connected to an adjacent vertex after vertex2.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.Vertex0">
            <summary>
            Optional adjacent vertices. These are used for smooth collision.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.Vertex3">
            <summary>
            Optional adjacent vertices. These are used for smooth collision.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.Vertex1">
            <summary>
            These are the edge vertices
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.Vertex2">
            <summary>
            These are the edge vertices
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.EdgeShape.Set(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Set this as an isolated edge.
            </summary>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape">
            <summary>
            Represents a simple non-selfintersecting convex polygon.
            Create a convex hull from the given array of points.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape"/> class.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="density">The density.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape.#ctor(System.Single)">
            <summary>
            Create a new PolygonShape with the specified density.
            </summary>
            <param name="density">The density.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape.Vertices">
            <summary>
            Create a convex hull from the given array of local points.
            The number of vertices must be in the range [3, Settings.MaxPolygonVertices].
            Warning: the points may be re-ordered, even if they form a convex polygon
            Warning: collinear points are handled but not removed. Collinear points may lead to poor stacking behavior.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.PolygonShape.ComputeAABB(Internal.tainicom.Aether.Physics2D.Collision.AABB@,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Int32)">
            <summary>
            Given a transform, compute the associated axis aligned bounding box for a child shape.
            </summary>
            <param name="aabb">The aabb results.</param>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData">
            <summary>
            This holds the mass data computed for a shape.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.Area">
            <summary>
            The area of the shape
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.Centroid">
            <summary>
            The position of the shape's centroid relative to the shape's origin.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.Inertia">
            <summary>
            The rotational inertia of the shape about the local origin.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.Mass">
            <summary>
            The mass of the shape, usually in kilograms.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.op_Equality(Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData,Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData)">
            <summary>
            The equal operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData.op_Inequality(Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData,Internal.tainicom.Aether.Physics2D.Collision.Shapes.MassData)">
            <summary>
            The not equal operator
            </summary>
            <param name="left"></param>
            <param name="right"></param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape">
            <summary>
            A shape is used for collision detection. You can create a shape however you like.
            Shapes used for simulation in World are created automatically when a Fixture
            is created. Shapes may encapsulate a one or more child shapes.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.MassData">
            <summary>
            Contains the properties of the shape such as:
            - Area of the shape
            - Centroid
            - Inertia
            - Mass
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.ShapeType">
            <summary>
            Get the type of this shape.
            </summary>
            <value>The type of the shape.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.ChildCount">
            <summary>
            Get the number of child primitives.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.Density">
            <summary>
            Gets or sets the density.
            Changing the density causes a recalculation of shape properties.
            </summary>
            <value>The density.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.Radius">
            <summary>
            Radius of the Shape
            Changing the radius causes a recalculation of shape properties.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.Clone">
            <summary>
            Clone the concrete shape
            </summary>
            <returns>A clone of the shape</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.TestPoint(Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Test a point for containment in this shape.
            Note: This only works for convex shapes.
            </summary>
            <param name="transform">The shape world transform.</param>
            <param name="point">A point in world coordinates.</param>
            <returns>True if the point is inside the shape</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.RayCast(Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput@,Internal.tainicom.Aether.Physics2D.Collision.RayCastInput@,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Int32)">
            <summary>
            Cast a ray against a child shape.
            </summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="transform">The transform to be applied to the shape.</param>
            <param name="childIndex">The child shape index.</param>
            <returns>True if the ray-cast hits the shape</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.ComputeAABB(Internal.tainicom.Aether.Physics2D.Collision.AABB@,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Int32)">
            <summary>
            Given a transform, compute the associated axis aligned bounding box for a child shape.
            </summary>
            <param name="aabb">The aabb results.</param>
            <param name="transform">The world transform of the shape.</param>
            <param name="childIndex">The child shape index.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.ComputeProperties">
            <summary>
            Compute the mass properties of this shape using its dimensions and density.
            The inertia tensor is computed about the local origin, not the centroid.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape.ComputeSubmergedArea(Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Single,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Used for the buoyancy controller
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Collision.TOIInput">
            <summary>
            Input parameters for CalculateTimeOfImpact
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Collision.TimeOfImpact.CalculateTimeOfImpact(Internal.tainicom.Aether.Physics2D.Collision.TOIOutput@,Internal.tainicom.Aether.Physics2D.Collision.TOIInput@)">
            <summary>
            Compute the upper bound on time before two shapes penetrate. Time is represented as
            a fraction between [0,tMax]. This uses a swept separating axis and may miss some intermediate,
            non-tunneling collision. If you change the time interval, you should call this function
            again.
            Note: use Distance() to compute the contact point and normal at the time of impact.
            </summary>
            <param name="output">The output.</param>
            <param name="input">The input.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.ChainHull">
            <summary>
            Andrew's Monotone Chain Convex Hull algorithm.
            Used to get the convex hull of a point cloud.
            
            Source: http://www.softsurfer.com/Archive/algorithm_0109/algorithm_0109.htm
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.ChainHull.GetConvexHull(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Returns the convex hull from the given vertices..
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.GiftWrap">
            <summary>
            Giftwrap convex hull algorithm.
            O(nh) time complexity, where n is the number of points and h is the number of points on the convex hull.
            
            See http://en.wikipedia.org/wiki/Gift_wrapping_algorithm for more details.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.GiftWrap.GetConvexHull(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Returns the convex hull from the given vertices.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.Melkman">
            <summary>
            Creates a convex hull.
            Note:
            1. Vertices must be of a simple polygon, i.e. edges do not overlap.
            2. Melkman does not work on point clouds
            </summary>
            <remarks>
            Implemented using Melkman's Convex Hull Algorithm - O(n) time complexity.
            Reference: http://www.ams.sunysb.edu/~jsbm/courses/345/melkman.pdf
            </remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.ConvexHull.Melkman.GetConvexHull(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Returns a convex hull from the given vertices.
            </summary>
            <returns>A convex hull in counter clockwise winding order.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.BayazitDecomposer">
            <summary>
            Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
            
            Properties:
            - Tries to decompose using polygons instead of triangles.
            - Tends to produce optimal results with low processing time.
            - Running time is O(nr), n = number of vertices, r = reflex vertices.
            - Does not support holes.
            
            For more information about this algorithm, see http://mnbayazit.com/406/bayazit
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.BayazitDecomposer.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            If the polygon is already convex, it will return the original polygon, unless it is over Settings.MaxPolygonVertices.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDTDecomposer">
            <summary>
            2D constrained Delaunay triangulation algorithm.
            Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
            
            Properties:
            - Creates triangles with a large interior angle.
            - Supports holes
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n^2), n = number of vertices.
            - Does not care about winding order.
            
            Source: http://code.google.com/p/poly2tri/
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDTDecomposer.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIsConstrained">
            Neighbor pointers 
            Flags to determine if an edge is a Delauney edge 
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIsDelaunay">
            Flags to determine if an edge is a Constrained edge 
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Points">
            Has this triangle been marked as an interior triangle? 
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighbor(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Update neighbor pointers
            </summary>
            <param name="p1">Point 1 of the shared edge</param>
            <param name="p2">Point 2 of the shared edge</param>
            <param name="t">This triangle's new neighbor</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighbor(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Exhaustive search to update neighbor pointers
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Clear">
            Clears all references to all other triangles and points
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.OppositePoint(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <param name="t">Opposite triangle</param>
            <param name="p">The point in t that isn't shared between the triangles</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.Legalize(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Legalize triangle by rotating clockwise around oPoint
            </summary>
            <param name="oPoint">The origin point to rotate around</param>
            <param name="nPoint">???</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkNeighborEdges">
            <summary>
            Finalize edge marking
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.MarkConstrainedEdge(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Mark edge as constrained
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle.EdgeIndex(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Get the index of the neighbor that shares this edge (or -1 if it isn't shared)
            </summary>
            <returns>index of the shared edge or -1 if edge isn't shared</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront">
            @author Thomas Åhlen (thahlen@gmail.com)
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.FindSearchNode(System.Double)">
            <summary>
            MM:  This seems to be used by LocateNode to guess a position in the implicit linked list of AdvancingFrontNodes near x
                 Removed an overload that depended on this being exact
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.LocateNode(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            We use a balancing tree to locate a node smaller or equal to given key value
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFront.LocatePoint(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            This implementation will use simple node traversal algorithm to find a point on the front
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Triangulate(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            Triangulate simple polygon with holes
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Sweep(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            Start sweeping the Y-sorted point set from bottom to top
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FinalizationConvexHull(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext)">
            <summary>
            If this is a Delaunay Triangulation of a pointset we need to fill so the triangle mesh gets a ConvexHull 
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.TurnAdvancingFrontConvex(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            We will traverse the entire advancing front and fill it to form a convex hull.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.PointEvent(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Find closes node to the left of the new point and
            create a new triangle. If needed new holes and basins
            will be filled to.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NewFrontTriangle(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Creates a new front triangle and legalize it
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NextFlipPoint(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            When we need to traverse from one triangle to the next we need 
            the point in current triangle that is the opposite point to the next
            triangle. 
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.NextFlipTriangle(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Orientation,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            After a flip we have two triangles and know that only one will still be
            intersecting the edge. So decide which to contiune with and legalize the other
            </summary>
            <param name="tcx"></param>
            <param name="o">should be the result of an TriangulationUtil.orient2d( eq, op, ep )</param>
            <param name="t">triangle 1</param>
            <param name="ot">triangle 2</param>
            <param name="p">a point shared by both triangles</param>
            <param name="op">another point shared by both triangles</param>
            <returns>returns the triangle still intersecting the edge</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FlipScanEdgeEvent(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)" -->
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillAdvancingFront(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Fills holes in the Advancing Front
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillBasin(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Fills a basin that has formed on the Advancing Front to the right
            of given node.
            First we decide a left,bottom and right node that forms the 
            boundaries of the basin. Then we do a reqursive fill.
            </summary>
            <param name="tcx"></param>
            <param name="node">starting node, this or next node will be left node</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.FillBasinReq(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Recursive algorithm to fill a Basin with triangles
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.HoleAngle(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            ???
            </summary>
            <param name="node">middle node</param>
            <returns>the angle between 3 front nodes</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.BasinAngle(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            The basin angle is decided against the horizontal line [1,0]
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Fill(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.AdvancingFrontNode)">
            <summary>
            Adds a triangle to the advancing front to fill a hole.
            </summary>
            <param name="tcx"></param>
            <param name="node">middle node, that is the bottom of the hole</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.Legalize(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Returns true if triangle was legalized
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweep.RotateTrianglePair(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Rotates a triangle pair one vertex CW
                  n2                    n2
             P +-----+             P +-----+
               | t  /|               |\  t |  
               |   / |               | \   |
             n1|  /  |n3           n1|  \  |n3
               | /   |    after CW   |   \ |
               |/ oT |               | oT \|
               +-----+ oP            +-----+
                  n4                    n4
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepConstraint.#ctor(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
            Give two points in any order. Will always be ordered so
            that q.y > p.y and q.x > p.x if same y value 
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext">
             
             @author Thomas Åhlén, thahlen@gmail.com
            
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.Sweep.DTSweepContext.MapTriangleToNodes(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Delaunay.DelaunayTriangle)">
            <summary>
            Try to map a node to all sides of this triangle that don't have 
            a neighbor.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.#ctor(System.Collections.Generic.IList{Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint})">
            <summary>
            Create a polygon from a list of at least 3 points with no duplicates.
            </summary>
            <param name="points">A list of unique points</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.#ctor(System.Collections.Generic.IEnumerable{Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint})">
            <summary>
            Create a polygon from a list of at least 3 points with no duplicates.
            </summary>
            <param name="points">A list of unique points.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.PrepareTriangulation(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationContext)">
            <summary>
            Creates constraints and populates the context with points
            </summary>
            <param name="tcx">The context</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.AddHole(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon)">
            <summary>
            Add a hole to the polygon.
            </summary>
            <param name="poly">A subtraction polygon fully contained inside this polygon.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.InsertPointAfter(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Inserts newPoint after point.
            </summary>
            <param name="point">The point to insert after in the polygon</param>
            <param name="newPoint">The point to insert into the polygon</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.AddPoints(System.Collections.Generic.IEnumerable{Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint})">
            <summary>
            Inserts list (after last point in polygon?)
            </summary>
            <param name="list"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.AddPoint(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Adds a point after the last in the polygon.
            </summary>
            <param name="p">The point to add</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.Polygon.RemovePoint(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Polygon.PolygonPoint)">
            <summary>
            Removes a point from the polygon.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Sets.ConstrainedPointSet.#ctor(System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint},System.Collections.Generic.IEnumerable{Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint})">
            
            @param points - A list of all points in PointSet
            @param constraints - Pairs of two points defining a constraint, all points <b>must</b> be part of given PointSet!
        </member>
        <!-- Badly formed XML comment ignored for member "M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.Sets.ConstrainedPointSet.isValid" -->
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationUtil">
            @author Thomas Åhlén, thahlen@gmail.com
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationUtil.SmartIncircle(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            <summary>
              Requirements:
            1. a,b and c form a triangle.
            2. a and d is know to be on opposite side of bc
            <code>
                           a
                           +
                          / \
                         /   \
                       b/     \c
                       +-------+ 
                      /    B    \  
                     /           \ 
            </code>
               Facts:
             d has to be in area B to have a chance to be inside the circle formed by a,b and c
             d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW
             This preknowledge gives us a way to optimize the incircle test
            </summary>
            <param name="pa">triangle point, opposite d</param>
            <param name="pb">triangle point</param>
            <param name="pc">triangle point</param>
            <param name="pd">point opposite a</param>
            <returns>true if d is inside circle, false if on circle edge</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationUtil.Orient2d(Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint,Internal.tainicom.Aether.Physics2D.Common.Decomposition.CDT.TriangulationPoint)">
            Forumla to calculate signed area
            Positive if CCW
            Negative if CW
            0 if collinear
            A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)
                         =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer">
            <summary>
            Convex decomposition algorithm using ear clipping
            
            Properties:
            - Only works on simple polygons.
            - Does not support holes.
            - Running time is O(n^2), n = number of vertices.
            
            Source: http://www.ewjordan.com/earClip/
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Decompose the polygon into several smaller non-concave polygon.
            Each resulting polygon will have no more than Settings.MaxPolygonVertices vertices.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer.TriangulatePolygon(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
             <summary>
             Triangulates a polygon using simple ear-clipping algorithm. Returns
             size of Triangle array unless the polygon can't be triangulated.
             This should only happen if the polygon self-intersects,
             though it will not _always_ return null for a bad polygon - it is the
             caller's responsibility to check for self-intersection, and if it
             doesn't, it should at least check that the return value is non-null
             before using. You're warned!
            
             Triangles may be degenerate, especially if you have identical points
             in the input to the algorithm.  Check this before you use them.
            
             This is totally unoptimized, so for large polygons it should not be part
             of the simulation loop.
             </summary>
             <remarks>
             Only works on simple polygons.
             </remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer.ResolvePinchPoint(Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.Vertices@,Internal.tainicom.Aether.Physics2D.Common.Vertices@,System.Single)">
            <summary>
            Finds and fixes "pinch points," points where two polygon
            vertices are at the same point.
            
            If a pinch point is found, pin is broken up into poutA and poutB
            and true is returned; otherwise, returns false.
            
            Mostly for internal use.
            
            O(N^2) time, which sucks...
            </summary>
            <param name="pin">The pin.</param>
            <param name="poutA">The pout A.</param>
            <param name="poutB">The pout B.</param>
            <param name="tolerance"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer.Remainder(System.Int32,System.Int32)">
            <summary>
            Fix for obnoxious behavior for the % operator for negative numbers...
            </summary>
            <param name="x">The x.</param>
            <param name="modulus">The modulus.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.EarclipDecomposer.IsEar(System.Int32,System.Single[],System.Single[],System.Int32)">
            <summary>
            Checks if vertex i is the tip of an ear in polygon defined by xv[] and  yv[].
            </summary>
            <param name="i">The i.</param>
            <param name="xv">The xv.</param>
            <param name="yv">The yv.</param>
            <param name="xvLength">Length of the xv.</param>
            <remarks>
            Assumes clockwise orientation of polygon.
            </remarks>
            <returns>
            	<c>true</c> if the specified i is ear; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.FlipcodeDecomposer">
            <summary>
            Convex decomposition algorithm created by unknown
            
            Properties:
            - No support for holes
            - Very fast
            - Only works on simple polygons
            - Only works on counter clockwise polygons
            
            More information: http://www.flipcode.com/archives/Efficient_Polygon_Triangulation.shtml
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.FlipcodeDecomposer.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Decompose the polygon into triangles.
            
            Properties:
            - Only works on counter clockwise polygons
            
            </summary>
            <param name="vertices">The list of points describing the polygon</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.FlipcodeDecomposer.InsideTriangle(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Check if the point P is inside the triangle defined by
            the points A, B, C
            </summary>
            <param name="a">The A point.</param>
            <param name="b">The B point.</param>
            <param name="c">The C point.</param>
            <param name="p">The point to be tested.</param>
            <returns>True if the point is inside the triangle</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.FlipcodeDecomposer.Snip(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[])">
            <summary>
            Cut a the contour and add a triangle into V to describe the 
            location of the cut
            </summary>
            <param name="contour">The list of points defining the polygon</param>
            <param name="u">The index of the first point</param>
            <param name="v">The index of the second point</param>
            <param name="w">The index of the third point</param>
            <param name="n">The number of elements in the array.</param>
            <param name="V">The array to populate with indicies of triangles.</param>
            <returns>True if a triangle was found</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Decomposition.SeidelDecomposer">
            <summary>
            Convex decomposition algorithm created by Raimund Seidel
            
            Properties:
            - Decompose the polygon into trapezoids, then triangulate.
            - To use the trapezoid data, use ConvexPartitionTrapezoid()
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n log n), n = number of vertices.
            - Running time is almost linear for most simple polygons.
            - Does not care about winding order. 
            
            For more information, see Raimund Seidel's paper "A simple and fast incremental randomized
            algorithm for computing trapezoidal decompositions and for triangulating polygons"
            
            See also: "Computational Geometry", 3rd edition, by Mark de Berg et al, Chapter 6.2
                      "Computational Geometry in C", 2nd edition, by Joseph O'Rourke
            
            Original code from the Poly2Tri project by Mason Green.
            http://code.google.com/p/poly2tri/source/browse?repo=archive#hg/scala/src/org/poly2tri/seidel
            
            This implementation is from Dec 14, 2010
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.SeidelDecomposer.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Decompose the polygon into several smaller non-concave polygons.
            </summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of triangles</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.SeidelDecomposer.ConvexPartitionTrapezoid(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Decompose the polygon into several smaller non-concave polygons.
            </summary>
            <param name="vertices">The polygon to decompose.</param>
            <param name="sheer">The sheer to use if you get bad results, try using a higher value.</param>
            <returns>A list of trapezoids</returns>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm.Earclip">
            <summary>
            Convex decomposition algorithm using ear clipping
            
            Properties:
            - Only works on simple polygons.
            - Does not support holes.
            - Running time is O(n^2), n = number of vertices.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm.Bayazit">
            <summary>
            Convex decomposition algorithm created by Mark Bayazit (http://mnbayazit.com/)
            
            Properties:
            - Tries to decompose using polygons instead of triangles.
            - Tends to produce optimal results with low processing time.
            - Running time is O(nr), n = number of vertices, r = reflex vertices.
            - Does not support holes.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm.Flipcode">
            <summary>
            Convex decomposition algorithm created by unknown
            
            Properties:
            - No support for holes
            - Very fast
            - Only works on simple polygons
            - Only works on counter clockwise polygons
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm.Seidel">
            <summary>
            Convex decomposition algorithm created by Raimund Seidel
            
            Properties:
            - Decompose the polygon into trapezoids, then triangulate.
            - To use the trapezoid data, use ConvexPartitionTrapezoid()
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n log n), n = number of vertices.
            - Running time is almost linear for most simple polygons.
            - Does not care about winding order. 
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm.Delauny">
            <summary>
            2D constrained Delaunay triangulation algorithm.
            Based on the paper "Sweep-line algorithm for constrained Delaunay triangulation" by V. Domiter and and B. Zalik
            
            Properties:
            - Creates triangles with a large interior angle.
            - Supports holes
            - Generate a lot of garbage due to incapsulation of the Poly2Tri library.
            - Running time is O(n^2), n = number of vertices.
            - Does not care about winding order.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Decomposition.Triangulate.ConvexPartition(Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.Decomposition.TriangulationAlgorithm,System.Boolean,System.Single,System.Boolean)">
            <param name="skipSanityChecks">
            Set this to true to skip sanity checks in the engine. This will speed up the
            tools by removing the overhead of the checks, but you will need to handle checks
            yourself where it is needed.
            </param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.LineTools">
            <summary>
            Collection of helper methods for misc collisions.
            Does float tolerance and line collisions with lines and AABBs.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineIntersect2(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
             <summary>
            Check if the lines a0->a1 and b0->b1 cross.
            If they do, intersectionPoint will be filled
            with the point of crossing.
            
            Grazing lines should not return true.
             
             </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Boolean,System.Boolean,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="point">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean,System.Boolean,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            This method detects if two line segments (or lines) intersect,
            and, if so, the point of intersection. Use the <paramref name="firstIsSegment"/> and
            <paramref name="secondIsSegment"/> parameters to set whether the intersection point
            must be on the first and second line segments. Setting these
            both to true means you are doing a line-segment to line-segment
            intersection. Setting one of them to true means you are doing a
            line to line-segment intersection test, and so on.
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            Author: Jeremy Bell
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <param name="firstIsSegment">Set this to true to require that the 
            intersection point be on the first line segment.</param>
            <param name="secondIsSegment">Set this to true to require that the
            intersection point be on the second line segment.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            This method detects if two line segments intersect,
            and, if so, the point of intersection. 
            Note: If two line segments are coincident, then 
            no intersection is detected (there are actually
            infinite intersection points).
            </summary>
            <param name="point1">The first point of the first line segment.</param>
            <param name="point2">The second point of the first line segment.</param>
            <param name="point3">The first point of the second line segment.</param>
            <param name="point4">The second point of the second line segment.</param>
            <param name="intersectionPoint">This is set to the intersection
            point if an intersection is detected.</param>
            <returns>True if an intersection is detected, false otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineSegmentVerticesIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Get all intersections between a line segment and a list of vertices
            representing a polygon. The vertices reuse adjacent points, so for example
            edges one and two are between the first and second vertices and between the
            second and third vertices. The last edge is between vertex vertices.Count - 1
            and verts0. (ie, vertices from a Geometry or AABB)
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="vertices">The vertices, as described above</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.LineTools.LineSegmentAABBIntersect(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Collision.AABB)">
            <summary>
            Get all intersections between a line segment and an AABB. 
            </summary>
            <param name="point1">The first point of the line segment to test</param>
            <param name="point2">The second point of the line segment to test.</param>
            <param name="aabb">The AABB that is used for testing intersection.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Cross(Internal.tainicom.Aether.Physics2D.Common.Vector3@,Internal.tainicom.Aether.Physics2D.Common.Vector3@)">
            Perform the cross product on two vectors.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Mul(Internal.tainicom.Aether.Physics2D.Common.Mat33,Internal.tainicom.Aether.Physics2D.Common.Vector3)">
            Multiply a matrix times a vector.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Mul22(Internal.tainicom.Aether.Physics2D.Common.Mat33,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            Multiply a matrix times a vector.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Skew(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            Get the skew vector such that dot(skew_vec, other) == cross(vec, other)
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.IsValid(System.Single)">
            <summary>
            This function is used to ensure that a floating point number is
            not a NaN or infinity.
            </summary>
            <param name="x">The x.</param>
            <returns>
            	<c>true</c> if the specified x is valid; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.InvSqrt(System.Single)">
            <summary>
            This is a approximate yet fast inverse square-root.
            </summary>
            <param name="x">The x.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.VectorAngle(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Return the angle between two vectors on a plane
            The angle is from vector 1 to vector 2, positive anticlockwise
            The result is between -pi -> pi
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Dot(Internal.tainicom.Aether.Physics2D.Common.Vector3,Internal.tainicom.Aether.Physics2D.Common.Vector3)">
            Perform the dot product on two vectors.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Dot(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            Perform the dot product on two vectors.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Area(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <returns>Positive number if point is left, negative if point is right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.Area(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Returns a positive number if c is to the left of the line going from a to b.
            </summary>
            <returns>Positive number if point is left, negative if point is right, 
            and 0 if points are collinear.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.IsCollinear(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Single)">
            <summary>
            Determines if three vertices are collinear (ie. on a straight line)
            </summary>
            <param name="a">First vertex</param>
            <param name="b">Second vertex</param>
            <param name="c">Third vertex</param>
            <param name="tolerance">The tolerance</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.FloatEquals(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is equal to another,
            within a certain tolerance.
            </summary>
            <param name="value1">The first floating point Value.</param>
            <param name="value2">The second floating point Value.</param>
            <param name="delta">The floating point tolerance.</param>
            <returns>True if the values are "equal", false otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.MathUtils.FloatInRange(System.Single,System.Single,System.Single)">
            <summary>
            Checks if a floating point Value is within a specified
            range of values (inclusive).
            </summary>
            <param name="value">The Value to check.</param>
            <param name="min">The minimum Value.</param>
            <param name="max">The maximum Value.</param>
            <returns>True if the Value is within the range specified,
            false otherwise.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Mat22">
            <summary>
            A 2-by-2 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Construct this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.#ctor(System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Construct this matrix using scalars.
            </summary>
            <param name="a11">The a11.</param>
            <param name="a12">The a12.</param>
            <param name="a21">The a21.</param>
            <param name="a22">The a22.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.Set(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Initialize this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.SetIdentity">
            <summary>
            Set this to the identity matrix.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.SetZero">
            <summary>
            Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat22.Solve(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Mat33">
            <summary>
            A 3-by-3 matrix. Stored in column-major order.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector3,Internal.tainicom.Aether.Physics2D.Common.Vector3,Internal.tainicom.Aether.Physics2D.Common.Vector3)">
            <summary>
            Construct this matrix using columns.
            </summary>
            <param name="c1">The c1.</param>
            <param name="c2">The c2.</param>
            <param name="c3">The c3.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.SetZero">
            <summary>
            Set this matrix to all zeros.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.Solve33(Internal.tainicom.Aether.Physics2D.Common.Vector3)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.Solve22(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Solve A * x = b, where b is a column vector. This is more efficient
            than computing the inverse in one-shot cases. Solve only the upper
            2-by-2 matrix equation.
            </summary>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.GetInverse22(Internal.tainicom.Aether.Physics2D.Common.Mat33@)">
            Get the inverse of this matrix as a 2-by-2.
            Returns the zero matrix if singular.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Mat33.GetSymInverse33(Internal.tainicom.Aether.Physics2D.Common.Mat33@)">
            Get the symmetric inverse of this matrix as a 3-by-3.
            Returns the zero matrix if singular.
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Transform">
            <summary>
            A transform contains translation and rotation. It is used to represent
            the position and orientation of rigid frames.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Transform.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Complex)">
            <summary>
            Initialize using a position vector and a Complex rotation.
            </summary>
            <param name="position">The position.</param>
            <param name="rotation">The rotation</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Transform.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single)">
            <summary>
            Initialize using a position vector and a rotation.
            </summary>
            <param name="position">The position.</param>
            <param name="angle">The rotation angle</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Sweep">
            <summary>
            This describes the motion of a body/shape for TOI computation.
            Shapes are defined with respect to the body origin, which may
            no coincide with the center of mass. However, to support dynamics
            we must interpolate the center of mass position.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Sweep.A">
            <summary>
            World angles
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Sweep.Alpha0">
            <summary>
            Fraction of the current time step in the range [0,1]
            c0 and a0 are the positions at alpha0.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Sweep.C">
            <summary>
            Center world positions
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Sweep.LocalCenter">
            <summary>
            Local center of mass position
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Sweep.GetTransform(Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Single)">
            <summary>
            Get the interpolated transform at a specific time.
            </summary>
            <param name="xfb">The transform.</param>
            <param name="beta">beta is a factor in [0,1], where 0 indicates alpha0.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Sweep.Advance(System.Single)">
            <summary>
            Advance the sweep forward, yielding a new initial state.
            </summary>
            <param name="alpha">new initial time..</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Sweep.Normalize">
            <summary>
            Normalize the angles.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.Path">
            <summary>
            Path:
            Very similar to Vertices, but this
            class contains vectors describing
            control points on a Catmull-Rom
            curve.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.Path.ControlPoints">
            <summary>
            All the points that makes up the curve
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Common.Path"/> class.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2[])">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Common.Path"/> class.
            </summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.#ctor(System.Collections.Generic.IList{Internal.tainicom.Aether.Physics2D.Common.Vector2})">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Common.Path"/> class.
            </summary>
            <param name="vertices">The vertices to created the path from.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Common.Path.Closed">
            <summary>
            True if the curve is closed.
            </summary>
            <value><c>true</c> if closed; otherwise, <c>false</c>.</value>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.NextIndex(System.Int32)">
            <summary>
            Gets the next index of a controlpoint
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.PreviousIndex(System.Int32)">
            <summary>
            Gets the previous index of a controlpoint
            </summary>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.Translate(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Translates the control points by the specified vector.
            </summary>
            <param name="vector">The vector.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.Scale(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Scales the control points by the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.Rotate(System.Single)">
            <summary>
            Rotate the control points by the defined value in radians.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.GetVertices(System.Int32)">
            <summary>
            Returns a set of points defining the
            curve with the specifed number of divisions
            between each control point.
            </summary>
            <param name="divisions">Number of divisions between each control point.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Path.GetPositionNormal(System.Single)">
            <summary>
            Gets the normal for the given time.
            </summary>
            <param name="time">The time</param>
            <returns>The normal.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PathManager">
            <summary>
            An easy to use manager for creating paths.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.ConvertPathToEdges(Internal.tainicom.Aether.Physics2D.Common.Path,Internal.tainicom.Aether.Physics2D.Dynamics.Body,System.Int32)">
            <summary>
            Convert a path into a set of edges and attaches them to the specified body.
            Note: use only for static edges.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.ConvertPathToPolygon(Internal.tainicom.Aether.Physics2D.Common.Path,Internal.tainicom.Aether.Physics2D.Dynamics.Body,System.Single,System.Int32)">
            <summary>
            Convert a closed path into a polygon.
            Convex decomposition is automatically performed.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="density">The density.</param>
            <param name="subdivisions">The subdivisions.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.EvenlyDistributeShapesAlongPath(Internal.tainicom.Aether.Physics2D.Dynamics.World,Internal.tainicom.Aether.Physics2D.Common.Path,System.Collections.Generic.IEnumerable{Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape},Internal.tainicom.Aether.Physics2D.Dynamics.BodyType,System.Int32,System.Object)">
            <summary>
            Duplicates the given Body along the given path for approximatly the given copies.
            </summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shapes">The shapes.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.EvenlyDistributeShapesAlongPath(Internal.tainicom.Aether.Physics2D.Dynamics.World,Internal.tainicom.Aether.Physics2D.Common.Path,Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape,Internal.tainicom.Aether.Physics2D.Dynamics.BodyType,System.Int32,System.Object)">
            <summary>
            Duplicates the given Body along the given path for approximatly the given copies.
            </summary>
            <param name="world">The world.</param>
            <param name="path">The path.</param>
            <param name="shape">The shape.</param>
            <param name="type">The type.</param>
            <param name="copies">The copies.</param>
            <param name="userData">The user data.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.MoveBodyOnPath(Internal.tainicom.Aether.Physics2D.Common.Path,Internal.tainicom.Aether.Physics2D.Dynamics.Body,System.Single,System.Single,System.Single)">
            <summary>
            Moves the given body along the defined path.
            </summary>
            <param name="path">The path.</param>
            <param name="body">The body.</param>
            <param name="time">The time.</param>
            <param name="strength">The strength.</param>
            <param name="timeStep">The time step.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PathManager.AttachBodiesWithRevoluteJoint(Internal.tainicom.Aether.Physics2D.Dynamics.World,System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Dynamics.Body},Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean,System.Boolean)">
            <summary>
            Attaches the bodies with revolute joints.
            </summary>
            <param name="world">The world.</param>
            <param name="bodies">The bodies.</param>
            <param name="localAnchorA">The local anchor A.</param>
            <param name="localAnchorB">The local anchor B.</param>
            <param name="connectFirstAndLast">if set to <c>true</c> [connect first and last].</param>
            <param name="collideConnected">if set to <c>true</c> [collide connected].</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.BreakableBody">
            <summary>
            A type of body that supports multiple fixtures that can break apart.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.BreakableBody.Strength">
            <summary>
            The force needed to break the body apart.
            Default: 500
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerFilter.IgnoreController(Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerCategory)">
            <summary>
            Ignores the controller. The controller has no effect on this body.
            </summary>
            <param name="type">The logic type.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerFilter.RestoreController(Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerCategory)">
            <summary>
            Restore the controller. The controller affects this body.
            </summary>
            <param name="category">The logic type.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerFilter.IsControllerIgnored(Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.ControllerCategory)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="category">The logic type.</param>
            <returns>
            	<c>true</c> if the body has the specified flag; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData">
            <summary>
            Contains filter data that can determine whether an object should be processed or not.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.DisabledOnCategories">
            <summary>
            Disable the logic on specific categories.
            Category.None by default.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.DisabledOnGroup">
            <summary>
            Disable the logic on specific groups
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.EnabledOnCategories">
            <summary>
            Enable the logic on specific categories
            Category.All by default.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.EnabledOnGroup">
            <summary>
            Enable the logic on specific groups.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.IsActiveOn(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            
            </summary>
            <param name="body"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.AddDisabledCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.RemoveDisabledCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Removes the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.IsInDisabledCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if the object has the specified category; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.AddEnabledCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Adds the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.RemoveEnabledCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Removes the category.
            </summary>
            <param name="category">The category.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.FilterData.IsInEnabledInCategory(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Determines whether this body ignores the the specified controller.
            </summary>
            <param name="category">The category.</param>
            <returns>
            	<c>true</c> if the object has the specified category; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RayDataComparer">
            <summary>
            This is a comprarer used for 
            detecting angle difference between rays
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion">
            <summary>
            Creates a realistic explosion based on raycasting. Objects in the open will be affected, but objects behind
            static bodies will not. A body that is half in cover, half in the open will get half the force applied to the end in
            the open.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.MaxEdgeOffset">
            <summary>
            Two degrees: maximum angle from edges to first ray tested
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.EdgeRatio">
            <summary>
            Ratio of arc length to angle from edges to first ray tested.
            Defaults to 1/40.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.IgnoreWhenInsideShape">
            <summary>
            Ignore Explosion if it happens inside a shape.
            Default value is false.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.MaxAngle">
            <summary>
            Max angle between rays (used when segment is large).
            Defaults to 15 degrees
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.MaxShapes">
            <summary>
            Maximum number of shapes involved in the explosion.
            Defaults to 100
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.MinRays">
            <summary>
            How many rays per shape/body/segment.
            Defaults to 5
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.RealExplosion.Activate(Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single,System.Single)">
            <summary>
            Activate the explosion at the specified position.
            </summary>
            <param name="pos">The position where the explosion happens </param>
            <param name="radius">The explosion radius </param>
            <param name="maxForce">The explosion force at the explosion point (then is inversely proportional to the square of the distance)</param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.SimpleExplosion">
            <summary>
            Creates a simple explosion that ignores other bodies hiding behind static bodies.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.SimpleExplosion.Power">
            <summary>
            This is the power used in the power function. A value of 1 means the force
            applied to bodies in the explosion is linear. A value of 2 means it is exponential.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PhysicsLogic.SimpleExplosion.Activate(Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single,System.Single,System.Single)">
            <summary>
            Activate the explosion at the specified position.
            </summary>
            <param name="pos">The position (center) of the explosion.</param>
            <param name="radius">The radius of the explosion.</param>
            <param name="force">The force applied</param>
            <param name="maxForce">A maximum amount of force. When force gets over this value, it will be equal to maxForce</param>
            <returns>A list of bodies and the amount of force that was applied to them.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.CuttingTools.SplitShape(Internal.tainicom.Aether.Physics2D.Dynamics.Fixture,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vertices@,Internal.tainicom.Aether.Physics2D.Common.Vertices@)">
            <summary>
            Split a fixture into 2 vertice collections using the given entry and exit-point.
            </summary>
            <param name="fixture">The Fixture to split</param>
            <param name="entryPoint">The entry point - The start point</param>
            <param name="exitPoint">The exit point - The end point</param>
            <param name="first">The first collection of vertexes</param>
            <param name="second">The second collection of vertexes</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.CuttingTools.Cut(Internal.tainicom.Aether.Physics2D.Dynamics.World,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            This is a high-level function to cuts fixtures inside the given world, using the start and end points.
            Note: We don't support cutting when the start or end is inside a shape.
            </summary>
            <param name="world">The world.</param>
            <param name="start">The startpoint.</param>
            <param name="end">The endpoint.</param>
            <returns>True if the cut was performed.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimpleCombiner">
            <summary>
            Combines a list of triangles into a list of convex polygons.
            Starts with a seed triangle, keep adding triangles to it until you can't add any more without making the polygon non-convex.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimpleCombiner.PolygonizeTriangles(System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.Vertices},System.Int32,System.Single)">
             <summary>
             Combine a list of triangles into a list of convex polygons.
             
             Note: This only works on triangles.
             </summary>
            <param name="triangles">The triangles.</param>
            <param name="maxPolys">The maximun number of polygons to return.</param>
            <param name="tolerance">The tolerance</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools">
            <summary>
            Provides a set of tools to simplify polygons in various ways.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.CollinearSimplify(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Removes all collinear points on the polygon.
            </summary>
            <param name="vertices">The polygon that needs simplification.</param>
            <param name="collinearityTolerance">The collinearity tolerance.</param>
            <returns>A simplified polygon.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.DouglasPeuckerSimplify(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Ramer-Douglas-Peucker polygon simplification algorithm. This is the general recursive version that does not use the
            speed-up technique by using the Melkman convex hull.
            
            If you pass in 0, it will remove all collinear points.
            </summary>
            <returns>The simplified polygon</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.MergeParallelEdges(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Merges all parallel edges in the list of vertices
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="tolerance">The tolerance.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.MergeIdenticalPoints(Internal.tainicom.Aether.Physics2D.Common.Vertices)">
            <summary>
            Merges the identical points in the polygon.
            </summary>
            <param name="vertices">The vertices.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.ReduceByDistance(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Reduces the polygon by distance.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="distance">The distance between points. Points closer than this will be removed.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.ReduceByNth(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Int32)">
            <summary>
            Reduces the polygon by removing the Nth vertex in the vertices list.
            </summary>
            <param name="vertices">The vertices.</param>
            <param name="nth">The Nth point to remove. Example: 5.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.SimplifyTools.ReduceByArea(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Single)">
            <summary>
            Simplify the polygon by removing all points that in pairs of 3 have an area less than the tolerance.
            
            Pass in 0 as tolerance, and it will only remove collinear points.
            </summary>
            <param name="vertices"></param>
            <param name="areaTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Execute(Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.PolyClipType,Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.PolyClipError@)">
            <summary>
            Implements "A new algorithm for Boolean operations on general polygons" 
            available here: http://liama.ia.ac.cn/wiki/_media/user:dong:dong_cg_05.pdf
            Merges two polygons, a subject and a clip with the specified operation. Polygons may not be 
            self-intersecting.
            
            Warning: May yield incorrect results or even crash if polygons contain collinear points.
            </summary>
            <param name="subject">The subject polygon.</param>
            <param name="clip">The clip polygon, which is added, 
            substracted or intersected with the subject</param>
            <param name="clipType">The operation to be performed. Either
            Union, Difference or Intersection.</param>
            <param name="error">The error generated (if any)</param>
            <returns>A list of closed polygons, which make up the result of the clipping operation.
            Outer contours are ordered counter clockwise, holes are ordered clockwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.CalculateIntersections(Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.Vertices,Internal.tainicom.Aether.Physics2D.Common.Vertices@,Internal.tainicom.Aether.Physics2D.Common.Vertices@)">
            <summary>
            Calculates all intersections between two polygons.
            </summary>
            <param name="polygon1">The first polygon.</param>
            <param name="polygon2">The second polygon.</param>
            <param name="slicedPoly1">Returns the first polygon with added intersection points.</param>
            <param name="slicedPoly2">Returns the second polygon with added intersection points.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.CalculateSimplicalChain(Internal.tainicom.Aether.Physics2D.Common.Vertices,System.Collections.Generic.List{System.Single}@,System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge}@)">
            <summary>
            Calculates the simplical chain corresponding to the input polygon.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.CalculateResultChain(System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge},System.Collections.Generic.List{System.Single},System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge},Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.PolyClipType,System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge}@)">
            <summary>
            Calculates the characteristics function for all edges of
            the given simplical chains and builds the result chain.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.BuildPolygonsFromChain(System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge},System.Collections.Generic.List{Internal.tainicom.Aether.Physics2D.Common.Vertices}@)">
            <summary>
            Calculates the polygon(s) from the result simplical chain.
            </summary>
            <remarks>Used by method <c>Execute()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.CalculateBeta(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge,System.Single)">
            <summary>
            Needed to calculate the characteristics function of a simplex.
            </summary>
            <remarks>Used by method <c>CalculateEdgeCharacter()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.GetAlpha(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Needed for sorting multiple intersections points on the same edge.
            </summary>
            <remarks>Used by method <c>CalculateIntersections()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.CalculateSimplexCoefficient(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Returns the coefficient of a simplex.
            </summary>
            <remarks>Used by method <c>CalculateSimplicalChain()</c>.</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.PointInSimplex(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge)">
            <summary>
            Winding number test for a point in a simplex.
            </summary>
            <param name="point">The point to be tested.</param>
            <param name="edge">The edge that the point is tested against.</param>
            <returns>False if the winding number is even and the point is outside
            the simplex and True otherwise.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.PointOnLineSegment(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Tests if a point lies on a line segment.
            </summary>
            <remarks>Used by method <c>CalculateBeta()</c>.</remarks>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Common.PolygonManipulation.YuPengClipper.Edge">
            <summary>Specifies an Edge. Edges are used to represent simplicies in simplical chains</summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateRectangle(System.Single,System.Single)">
            <summary>
            Build vertices to represent an axis-aligned box.
            </summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateRectangle(System.Single,System.Single,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single)">
            <summary>
            Build vertices to represent an oriented box.
            </summary>
            <param name="hx">the half-width.</param>
            <param name="hy">the half-height.</param>
            <param name="center">the center of the box in local coordinates.</param>
            <param name="angle">the rotation of the box in local coordinates.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateRoundedRectangle(System.Single,System.Single,System.Single,System.Single,System.Int32)">
            <summary>
            Creates a rounded rectangle with the specified width and height.
            </summary>
            <param name="width">The width.</param>
            <param name="height">The height.</param>
            <param name="xRadius">The rounding X radius.</param>
            <param name="yRadius">The rounding Y radius.</param>
            <param name="segments">The number of segments to subdivide the edges.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateLine(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Set this as a single edge.
            </summary>
            <param name="start">The first point.</param>
            <param name="end">The second point.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateCircle(System.Single,System.Int32)">
            <summary>
            Creates a circle with the specified radius and number of edges.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles a circle</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateEllipse(System.Single,System.Single,System.Int32)">
            <summary>
            Creates a ellipse with the specified width, height and number of edges.
            </summary>
            <param name="xRadius">Width of the ellipse.</param>
            <param name="yRadius">Height of the ellipse.</param>
            <param name="numberOfEdges">The number of edges. The more edges, the more it resembles an ellipse</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateCapsule(System.Single,System.Single,System.Int32)">
            <summary>
            Creates an capsule with the specified height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + 2 * radius) of the capsule.</param>
            <param name="endRadius">Radius of the capsule ends.</param>
            <param name="edges">The number of edges of the capsule ends. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateCapsule(System.Single,System.Single,System.Int32,System.Single,System.Int32)">
            <summary>
            Creates an capsule with the specified  height, radius and number of edges.
            A capsule has the same form as a pill capsule.
            </summary>
            <param name="height">Height (inner height + radii) of the capsule.</param>
            <param name="topRadius">Radius of the top.</param>
            <param name="topEdges">The number of edges of the top. The more edges, the more it resembles an capsule</param>
            <param name="bottomRadius">Radius of bottom.</param>
            <param name="bottomEdges">The number of edges of the bottom. The more edges, the more it resembles an capsule</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.PolygonTools.CreateGear(System.Single,System.Int32,System.Single,System.Single)">
            <summary>
            Creates a gear shape with the specified radius and number of teeth.
            </summary>
            <param name="radius">The radius.</param>
            <param name="numberOfTeeth">The number of teeth.</param>
            <param name="tipPercentage">The tip percentage.</param>
            <param name="toothHeight">Height of the tooth.</param>
            <returns></returns>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.NoError">
            <summary>
            There were no errors in the polygon
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.InvalidAmountOfVertices">
            <summary>
            Polygon must have between 3 and Settings.MaxPolygonVertices vertices.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.NotSimple">
            <summary>
            Polygon must be simple. This means no overlapping edges.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.NotCounterClockWise">
            <summary>
            Polygon must have a counter clockwise winding.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.NotConvex">
            <summary>
            The polygon is concave, it needs to be convex.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.AreaTooSmall">
            <summary>
            Polygon area is too small.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Common.PolygonError.SideTooSmall">
            <summary>
            The polygon has a side that is too short.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Common.Vertices.Holes">
            <summary>
            You can add holes to this collection.
            It will get respected by some of the triangulation algoithms, but otherwise not used.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.NextIndex(System.Int32)">
            <summary>
            Gets the next index. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.NextVertex(System.Int32)">
            <summary>
            Gets the next vertex. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.PreviousIndex(System.Int32)">
            <summary>
            Gets the previous index. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.PreviousVertex(System.Int32)">
            <summary>
            Gets the previous vertex. Used for iterating all the edges with wrap-around.
            </summary>
            <param name="index">The current index</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.GetSignedArea">
            <summary>
            Gets the signed area.
            If the area is less than 0, it indicates that the polygon is clockwise winded.
            </summary>
            <returns>The signed area</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.GetArea">
            <summary>
            Gets the area.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.GetCentroid">
            <summary>
            Gets the centroid.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.GetAABB">
            <summary>
            Returns an AABB that fully contains this polygon.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.Translate(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Translates the vertices with the specified vector.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.Translate(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Translates the vertices with the specified vector.
            </summary>
            <param name="value">The vector.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.Scale(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Scales the vertices with the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.Scale(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Scales the vertices with the specified vector.
            </summary>
            <param name="value">The Value.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.Rotate(System.Single)">
            <summary>
            Rotate the vertices with the defined value in radians.
            
            Warning: Using this method on an active set of vertices of a Body,
            will cause problems with collisions. Use Body.Rotation instead.
            </summary>
            <param name="value">The amount to rotate by in radians.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.IsConvex">
            <summary>
            Determines whether the polygon is convex.
            O(n^2) running time.
            
            Assumptions:
            - The polygon is in counter clockwise order
            - The polygon has no overlapping edges
            </summary>
            <returns>
            	<c>true</c> if it is convex; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.IsCounterClockWise">
            <summary>
            Indicates if the vertices are in counter clockwise order.
            Warning: If the area of the polygon is 0, it is unable to determine the winding.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.ForceCounterClockWise">
            <summary>
            Forces the vertices to be counter clock wise order.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.IsSimple">
            <summary>
            Checks if the vertices forms an simple polygon by checking for edge crossings.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.CheckPolygon">
             <summary>
             Checks if the polygon is valid for use in the engine.
            
             Performs a full check, for simplicity, convexity,
             orientation, minimum angle, and volume.
             
             From Eric Jordan's convex decomposition library
             </summary>
             <returns>PolygonError.NoError if there were no error.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.ProjectToAxis(Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Single@,System.Single@)">
            <summary>
            Projects to axis.
            </summary>
            <param name="axis">The axis.</param>
            <param name="min">The min.</param>
            <param name="max">The max.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.PointInPolygon(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Winding number test for a point in a polygon.
            </summary>
            See more info about the algorithm here: http://softsurfer.com/Archive/algorithm_0103/algorithm_0103.htm
            <param name="point">The point to be tested.</param>
            <returns>-1 if the winding number is zero and the point is outside
            the polygon, 1 if the point is inside the polygon, and 0 if the point
            is on the polygons edge.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Common.Vertices.PointInPolygonAngle(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Compute the sum of the angles made between the test point and each pair of points making up the polygon. 
            If this sum is 2pi then the point is an interior point, if 0 then the point is an exterior point. 
            ref: http://ozviz.wasp.uwa.edu.au/~pbourke/geometry/insidepoly/  - Solution 2 
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController.AngularDragCoefficient">
            <summary>
            Controls the rotational drag that the fluid exerts on the bodies within it. Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids. 
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController.Density">
            <summary>
            Density of the fluid. Higher values will make things more buoyant, lower values will cause things to sink.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController.LinearDragCoefficient">
            <summary>
            Controls the linear drag that the fluid exerts on the bodies within it.  Use higher values will simulate thick fluid, like honey, lower values to
            simulate water-like fluids.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController.Velocity">
            <summary>
            Acts like waterflow. Defaults to 0,0.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController.#ctor(Internal.tainicom.Aether.Physics2D.Collision.AABB,System.Single,System.Single,System.Single,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Controllers.BuoyancyController"/> class.
            </summary>
            <param name="container">Only bodies inside this AABB will be influenced by the controller</param>
            <param name="density">Density of the fluid</param>
            <param name="linearDragCoefficient">Linear drag coefficient of the fluid</param>
            <param name="rotationalDragCoefficient">Rotational drag coefficient of the fluid</param>
            <param name="gravity">The direction gravity acts. Buoyancy force will act in opposite direction of gravity.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController">
            <summary>
            Put a limit on the linear (translation - the movespeed) and angular (rotation) velocity
            of bodies added to this controller.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController"/> class.
            Sets the max linear velocity to Settings.MaxTranslation
            Sets the max angular velocity to Settings.MaxRotation
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController"/> class.
            Pass in 0 or float.MaxValue to disable the limit.
            maxAngularVelocity = 0 will disable the angular velocity limit.
            </summary>
            <param name="maxLinearVelocity">The max linear velocity.</param>
            <param name="maxAngularVelocity">The max angular velocity.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController.MaxAngularVelocity">
            <summary>
            Gets or sets the max angular velocity.
            </summary>
            <value>The max angular velocity.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Controllers.VelocityLimitController.MaxLinearVelocity">
            <summary>
            Gets or sets the max linear velocity.
            </summary>
            <value>The max linear velocity.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.World">
            <summary>
            Get the parent World of this body. This is null if the body is not attached.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.IslandIndex">
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Tag">
            <summary>
            Set the user data. Use this to store your application specific data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Revolutions">
            <summary>
            Gets the total number revolutions the body has made.
            </summary>
            <value>The revolutions.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.BodyType">
            <summary>
            Gets or sets the body type.
            Warning: This property is readonly during callbacks.
            </summary>
            <value>The type of body.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.LinearVelocity">
            <summary>
            Get or sets the linear velocity of the center of mass.
            </summary>
            <value>The linear velocity.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.AngularVelocity">
            <summary>
            Gets or sets the angular velocity. Radians/second.
            </summary>
            <value>The angular velocity.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.LinearDamping">
            <summary>
            Gets or sets the linear damping.
            </summary>
            <value>The linear damping.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.AngularDamping">
            <summary>
            Gets or sets the angular damping.
            </summary>
            <value>The angular damping.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.IsBullet">
            <summary>
            Gets or sets a value indicating whether this body should be included in the CCD solver.
            </summary>
            <value><c>true</c> if this instance is included in CCD; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SleepingAllowed">
            <summary>
            You can disable sleeping on this body. If you disable sleeping, the
            body will be woken.
            </summary>
            <value><c>true</c> if sleeping is allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Awake">
            <summary>
            Set the sleep state of the body. A sleeping body has very
            low CPU cost.
            </summary>
            <value><c>true</c> if awake; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Enabled">
            <summary>
            Set the active state of the body. An inactive body is not
            simulated and cannot be collided with or woken up.
            If you pass a flag of true, all fixtures will be added to the
            broad-phase.
            If you pass a flag of false, all fixtures will be removed from
            the broad-phase and all contacts will be destroyed.
            Fixtures and joints are otherwise unaffected. You may continue
            to create/destroy fixtures and joints on inactive bodies.
            Fixtures on an inactive body are implicitly inactive and will
            not participate in collisions, ray-casts, or queries.
            Joints connected to an inactive body are implicitly inactive.
            An inactive body is still owned by a b2World object and remains
            in the body list.
            Warning: This property is readonly during callbacks.
            </summary>
            <value><c>true</c> if active; otherwise, <c>false</c>.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.CreateProxies">
            <summary>
            Create all proxies.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.DestroyProxies">
            <summary>
            Destroy all proxies.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.DestroyContacts">
            <summary>
            Destroy the attached contacts.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.FixedRotation">
            <summary>
            Set this body to have fixed rotation. This causes the mass
            to be reset.
            </summary>
            <value><c>true</c> if it has fixed rotation; otherwise, <c>false</c>.</value>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Body.FixtureList">
            <summary>
            Gets all the fixtures attached to this body.
            </summary>
            <value>The fixture list.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.JointList">
            <summary>
            Get the list of all joints attached to this body.
            </summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ContactList">
            <summary>
            Get the list of all contacts attached to this body.
            Warning: this list changes during the time step and you may
            miss some collisions if you don't use callback events.
            </summary>
            <value>The contact list.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Position">
            <summary>
            Get the world body origin position.
            </summary>
            <returns>Return the world position of the body's origin.</returns>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Rotation">
            <summary>
            Get the angle in radians.
            </summary>
            <returns>Return the current world rotation angle in radians.</returns>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.IgnoreGravity">
            <summary>
            Gets or sets a value indicating whether this body ignores gravity.
            </summary>
            <value><c>true</c> if  it ignores gravity; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.WorldCenter">
            <summary>
            Get the world position of the center of mass.
            </summary>
            <value>The world position.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.LocalCenter">
            <summary>
            Get the local position of the center of mass.
            Warning: This property is readonly during callbacks.
            </summary>
            <value>The local position.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Mass">
            <summary>
            Gets or sets the mass. Usually in kilograms (kg).
            Warning: This property is readonly during callbacks.
            </summary>
            <value>The mass.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Inertia">
            <summary>
            Get or set the rotational inertia of the body about the local origin. usually in kg-m^2.
            Warning: This property is readonly during callbacks.
            </summary>
            <value>The inertia.</value>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ResetDynamics">
            <summary>
            Resets the dynamics of this body.
            Sets torque, force and linear/angular velocity to 0
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Add(Internal.tainicom.Aether.Physics2D.Dynamics.Fixture)">
            <summary>
             Warning: This method is locked during callbacks.
             </summary>>
             <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Remove(Internal.tainicom.Aether.Physics2D.Dynamics.Fixture)">
            <summary>
            Destroy a fixture. This removes the fixture from the broad-phase and
            destroys all contacts associated with this fixture. This will
            automatically adjust the mass of the body if the body is dynamic and the
            fixture has positive density.
            All fixtures attached to a body are implicitly destroyed when the body is destroyed.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="fixture">The fixture to be removed.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetTransform(Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Single)">
            <summary>
            Set the position of the body's origin and rotation.
            This breaks any contacts and wakes the other bodies.
            Manipulating a body's transform may cause non-physical behavior.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetTransform(Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single)">
            <summary>
            Set the position of the body's origin and rotation.
            This breaks any contacts and wakes the other bodies.
            Manipulating a body's transform may cause non-physical behavior.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="position">The world position of the body's local origin.</param>
            <param name="rotation">The world rotation in radians.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetTransformIgnoreContacts(Internal.tainicom.Aether.Physics2D.Common.Vector2@,System.Single)">
            <summary>
            For teleporting a body without considering new contacts immediately.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="position">The position.</param>
            <param name="angle">The angle.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetTransform">
            <summary>
            Get the body transform for the body's origin.
            </summary>
            <param name="transform">The transform of the body's origin.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetTransform(Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Get the body transform for the body's origin.
            </summary>
            <param name="transform">The transform of the body's origin.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyForce(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Apply a force at a world point. If the force is not
            applied at the center of mass, it will generate a torque and
            affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyForce(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Applies a force at the center of mass.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyForce(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Applies a force at the center of mass.
            </summary>
            <param name="force">The force.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyForce(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Apply a force at a world point. If the force is not
            applied at the center of mass, it will generate a torque and
            affect the angular velocity. This wakes up the body.
            </summary>
            <param name="force">The world force vector, usually in Newtons (N).</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyTorque(System.Single)">
            <summary>
            Apply a torque. This affects the angular velocity
            without affecting the linear velocity of the center of mass.
            This wakes up the body.
            </summary>
            <param name="torque">The torque about the z-axis (out of the screen), usually in N-m.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyLinearImpulse(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyLinearImpulse(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            It also modifies the angular velocity if the point of application
            is not at the center of mass.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyLinearImpulse(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyLinearImpulse(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Apply an impulse at a point. This immediately modifies the velocity.
            It also modifies the angular velocity if the point of application
            is not at the center of mass.
            This wakes up the body.
            </summary>
            <param name="impulse">The world impulse vector, usually in N-seconds or kg-m/s.</param>
            <param name="point">The world position of the point of application.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ApplyAngularImpulse(System.Single)">
            <summary>
            Apply an angular impulse.
            </summary>
            <param name="impulse">The angular impulse in units of kg*m*m/s.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ResetMassData">
            <summary>
            This resets the mass properties to the sum of the mass properties of the fixtures.
            This normally does not need to be called unless you called SetMassData to override
            the mass and you later want to reset the mass.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetWorldPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetWorldPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the world coordinates of a point given the local coordinates.
            </summary>
            <param name="localPoint">A point on the body measured relative the the body's origin.</param>
            <returns>The same point expressed in world coordinates.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetWorldVector(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetWorldVector(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the world coordinates of a vector given the local coordinates.
            </summary>
            <param name="localVector">A vector fixed in the body.</param>
            <returns>The same vector expressed in world coordinates.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLocalPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Gets a local point relative to the body's origin given a world point.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLocalPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Gets a local point relative to the body's origin given a world point.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The corresponding local point relative to the body's origin.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLocalVector(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Gets a local vector given a world vector.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLocalVector(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Gets a local vector given a world vector.
            Note that the vector only takes the rotation into account, not the position.
            </summary>
            <param name="worldVector">A vector in world coordinates.</param>
            <returns>The corresponding local vector.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLinearVelocityFromWorldPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLinearVelocityFromWorldPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Get the world linear velocity of a world point attached to this body.
            </summary>
            <param name="worldPoint">A point in world coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLinearVelocityFromLocalPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.GetLinearVelocityFromLocalPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Get the world velocity of a local point.
            </summary>
            <param name="localPoint">A point in local coordinates.</param>
            <returns>The world velocity of a point.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.ShouldCollide(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            This is used to prevent connected bodies from colliding.
            It may lie, depending on the collideConnected flag.
            </summary>
            <param name="other">The other body.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetRestitution(System.Single)">
            <summary>
            Set restitution on all fixtures.
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <param name="restitution"></param>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetFriction(System.Single)">
            <summary>
            Set friction on all fixtures.
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <param name="friction"></param>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetCollisionCategories(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetCollidesWith(Internal.tainicom.Aether.Physics2D.Dynamics.Category)">
            <summary>
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetCollisionGroup(System.Int16)">
            <summary>
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.SetIsSensor(System.Boolean)">
            <summary>
            Warning: This method applies the value on existing Fixtures. It's not a property of Body.
            </summary>
            <remarks>Deprecated in version 1.6</remarks>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.Clone(Internal.tainicom.Aether.Physics2D.Dynamics.World)">
            <summary>
            Makes a clone of the body. Fixtures and therefore shapes are not included.
            Use DeepClone() to clone the body, as well as fixtures and shapes.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.DeepClone(Internal.tainicom.Aether.Physics2D.Dynamics.World)">
            <summary>
            Clones the body and all attached fixtures and shapes. Simply said, it makes a complete copy of the body.
            </summary>
            <param name="world"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Body.CreateFixture(Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape)">
            <summary>
            Creates a fixture and attach it to this body.
            If the density is non-zero, this function automatically updates the mass of the body.
            Contacts are not created until the next time step.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="shape">The shape.</param>
            <param name="userData">Application specific data</param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.BodyType">
            <summary>
            The body type.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.BodyType.Static">
            <summary>
            Zero velocity, may be manually moved. Note: even static bodies have mass.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.BodyType.Kinematic">
            <summary>
            Zero mass, non-zero velocity set by user, moved by solver
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.BodyType.Dynamic">
            <summary>
            Positive mass, non-zero velocity determined by forces, moved by solver
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.VelocityConstraintsMultithreadThreshold">
            <summary>
            A threshold for activating multiple cores to solve VelocityConstraints.
            An Island with a contact count above this threshold will use multiple threads to solve VelocityConstraints.
            A value of 0 will always use multithreading. A value of (int.MaxValue) will never use multithreading.
            Typical values are {128 or 256}.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.PositionConstraintsMultithreadThreshold">
            <summary>
            A threshold for activating multiple cores to solve PositionConstraints.
            An Island with a contact count above this threshold will use multiple threads to solve PositionConstraints.
            A value of 0 will always use multithreading. A value of (int.MaxValue) will never use multithreading.
            Typical values are {128 or 256}.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.CollideMultithreadThreshold">
            <summary>
            A threshold for activating multiple cores to solve Collide.
            An World with a contact count above this threshold will use multiple threads to solve Collide.
            A value of 0 will always use multithreading. A value of (int.MaxValue) will never use multithreading.
            Typical values are {128 or 256}.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.BeginContact">
            <summary>
            Fires when a contact is created
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.ContactFilter">
            <summary>
            The filter used by the contact manager.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.EndContact">
            <summary>
            Fires when a contact is deleted
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.OnBroadphaseCollision">
            <summary>
            Fires when the broadphase detects that two Fixtures are close to each other.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.PostSolve">
            <summary>
            Fires after the solver has run
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.PreSolve">
            <summary>
            Fires before the solver runs
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager.updateList">
            <summary>
            A temporary list of contacts to be updated during Collide().
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactEdge">
            <summary>
            A contact edge is used to connect bodies and contacts together
            in a contact graph where each body is a node and each contact
            is an edge. A contact edge belongs to a doubly linked list
            maintained in each attached body. Each contact has two contact
            nodes, one for each attached body.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactEdge.Contact">
            <summary>
            The contact
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactEdge.Other">
            <summary>
            Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactEdge.Next">
            <summary>
            The next contact edge in the body's contact list
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactEdge.Prev">
            <summary>
            The previous contact edge in the body's contact list
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact">
            <summary>
            The class manages contact between two shapes. A contact exists for each overlapping
            AABB in the broad-phase (except if filtered). Therefore a contact object may exist
            that has no contact points.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Manifold">
            <summary>
            Get the contact manifold. Do not modify the manifold unless you understand the
            internals of Box2D.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.TangentSpeed">
            Get or set the desired tangent speed for a conveyor belt behavior. In meters per second.
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Enabled">
            Enable/disable this contact. This can be used inside the pre-solve
            contact listener. The contact is only disabled for the current
            time step (or sub-step in continuous collisions).
            NOTE: If you are setting Enabled to a constant true or false,
            use the explicit Enable() or Disable() functions instead to 
            save the CPU from doing a branch operation.
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.ChildIndexA">
            <summary>
            Get the child primitive index for fixture A.
            </summary>
            <value>The child index A.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.ChildIndexB">
            <summary>
            Get the child primitive index for fixture B.
            </summary>
            <value>The child index B.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Next">
            <summary>
            Get the next contact in the world's contact list.
            </summary>
            <value>The next.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Prev">
            <summary>
            Get the previous contact in the world's contact list.
            </summary>
            <value>The prev.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.IsTouching">
            <summary>
            Determines whether this contact is touching.
            </summary>
            <returns>
            	<c>true</c> if this instance is touching; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.GetWorldManifold(Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.FixedArray2{Internal.tainicom.Aether.Physics2D.Common.Vector2}@)">
            <summary>
            Gets the world manifold.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Update(Internal.tainicom.Aether.Physics2D.Dynamics.ContactManager)">
            <summary>
            Update the contact manifold and touching status.
            Note: do not assume the fixture AABBs are overlapping or are valid.
            </summary>
            <param name="contactManager">The contact manager.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.Contact.Evaluate(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Common.Transform@,Internal.tainicom.Aether.Physics2D.Common.Transform@)">
            <summary>
            Evaluate this contact with your own manifold and transforms.   
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="transformA">The first transform.</param>
            <param name="transformB">The second transform.</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactListHead">
            <summary>
            Head of a circular doubly linked list.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Contacts.ContactSolver.WorldManifold.Initialize(Internal.tainicom.Aether.Physics2D.Collision.Manifold@,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Single,Internal.tainicom.Aether.Physics2D.Common.Transform@,System.Single,Internal.tainicom.Aether.Physics2D.Common.Vector2@,Internal.tainicom.Aether.Physics2D.Common.FixedArray2{Internal.tainicom.Aether.Physics2D.Common.Vector2}@)">
            <summary>
            Evaluate the manifold with supplied transforms. This assumes
            modest motion from the original state. This does not change the
            point count, impulses, etc. The radii must come from the Shapes
            that generated the manifold.
            </summary>
            <param name="manifold">The manifold.</param>
            <param name="xfA">The transform for A.</param>
            <param name="radiusA">The radius for A.</param>
            <param name="xfB">The transform for B.</param>
            <param name="radiusB">The radius for B.</param>
            <param name="normal">World vector pointing from A to B</param>
            <param name="points">Torld contact point (point of intersection).</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture">
            <summary>
            A fixture is used to attach a Shape to a body for collision detection. A fixture
            inherits its transform from its parent. Fixtures hold additional non-geometric data
            such as friction, collision filters, etc.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.AfterCollision">
            <summary>
            Fires after two shapes has collided and are solved. This gives you a chance to get the impact force.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.BeforeCollision">
            <summary>
            Fires when two fixtures are close to each other.
            Due to how the broadphase works, this can be quite inaccurate as shapes are approximated using AABBs.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.OnCollision">
            <summary>
            Fires when two shapes collide and a contact is created between them.
            Note that the first fixture argument is always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.OnSeparation">
            <summary>
            Fires when two shapes separate and a contact is removed between them.
            Note: This can in some cases be called multiple times, as a fixture can have multiple contacts.
            Note The first fixture argument is always the fixture that the delegate is subscribed to.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.CollisionGroup">
            <summary>
            Defaults to 0
            
            Collision groups allow a certain group of objects to never collide (negative)
            or always collide (positive). Zero means no collision group. Non-zero group
            filtering always wins against the mask bits.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.CollidesWith">
            <summary>
            Defaults to Category.All
            
            The collision mask bits. This states the categories that this
            fixture would accept for collision.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.CollisionCategories">
            <summary>
            The collision categories this fixture is a part of.
            
            Defaults to Category.Cat1
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Shape">
            <summary>
            Get the child Shape.
            </summary>
            <value>The shape.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.IsSensor">
            <summary>
            Gets or sets a value indicating whether this fixture is a sensor.
            </summary>
            <value><c>true</c> if this instance is a sensor; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Body">
            <summary>
            Get the parent body of this fixture. This is null if the fixture is not attached.
            </summary>
            <value>The body.</value>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Tag">
            <summary>
            Set the user data. Use this to store your application specific data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Friction">
            <summary>
            Set the coefficient of friction. This will _not_ change the friction of
            existing contacts.
            </summary>
            <value>The friction.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Restitution">
            <summary>
            Set the coefficient of restitution. This will not change the restitution of
            existing contacts.
            </summary>
            <value>The restitution.</value>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.Refilter">
            <summary>
            Contacts are persistant and will keep being persistant unless they are
            flagged for filtering.
            This methods flags all contacts associated with the body for filtering.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.TouchProxies(Internal.tainicom.Aether.Physics2D.Collision.IBroadPhase)">
            <summary>
            Touch each proxy so that new pairs may be created
            </summary>
            <param name="broadPhase"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.TestPoint(Internal.tainicom.Aether.Physics2D.Common.Vector2@)">
            <summary>
            Test a point for containment in this fixture.
            </summary>
            <param name="point">A point in world coordinates.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.RayCast(Internal.tainicom.Aether.Physics2D.Collision.RayCastOutput@,Internal.tainicom.Aether.Physics2D.Collision.RayCastInput@,System.Int32)">
            <summary>
            Cast a ray against this Shape.
            </summary>
            <param name="output">The ray-cast results.</param>
            <param name="input">The ray-cast input parameters.</param>
            <param name="childIndex">Index of the child.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.GetAABB(Internal.tainicom.Aether.Physics2D.Collision.AABB@,System.Int32)">
            <summary>
            Get the fixture's AABB. This AABB may be enlarge and/or stale.
            If you need a more accurate AABB, compute it using the Shape and
            the body transform.
            </summary>
            <param name="aabb">The aabb.</param>
            <param name="childIndex">Index of the child.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.CloneOnto(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            Clones the fixture onto the specified body.
            </summary>
            <param name="body">The body you wish to clone the fixture onto.</param>
            <returns>The cloned fixture.</returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Fixture.CloneOnto(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Collision.Shapes.Shape)">
            <summary>
            Clones the fixture and attached shape onto the specified body.
            Note: This is used only by Deserialization.
            </summary>
            <param name="body">The body you wish to clone the fixture onto.</param>
            <returns>The cloned fixture.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.FixtureProxy">
            <summary>
            This proxy is used internally to connect fixtures to the broad-phase.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Island">
            <summary>
            This is an internal class.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint">
            <summary>
            Maintains a fixed angle between two bodies
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            Constructor for AngleJoint
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint.TargetAngle">
            <summary>
            The desired angle between BodyA and BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint.BiasFactor">
            <summary>
            Gets or sets the bias factor.
            Defaults to 0.2
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint.MaxImpulse">
            <summary>
            Gets or sets the maximum impulse
            Defaults to float.MaxValue
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.AngleJoint.Softness">
            <summary>
            Gets or sets the softness of the joint
            Defaults to 0
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint">
            <summary>
            A distance joint rains two points on two bodies
            to remain at a fixed distance from each other. You can view
            this as a massless, rigid rod.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            This requires defining an
            anchor point on both bodies and the non-zero length of the
            distance joint. If you don't supply a length, the local anchor points
            is used so that the initial configuration can violate the constraint
            slightly. This helps when saving and loading a game.
            Warning Do not use a zero or short length.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor</param>
            <param name="anchorB">The second body anchor</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.LocalAnchorA">
            <summary>
            The local anchor point relative to bodyA's origin.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.LocalAnchorB">
            <summary>
            The local anchor point relative to bodyB's origin.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.Length">
            <summary>
            The natural length between the anchor points.
            Manipulating the length can lead to non-physical behavior when the frequency is zero.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.Frequency">
            <summary>
            The mass-spring-damper frequency in Hertz. A value of 0
            disables softness.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.GetReactionForce(System.Single)">
            <summary>
            Get the reaction force given the inverse time step. Unit is N.
            </summary>
            <param name="invDt"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.DistanceJoint.GetReactionTorque(System.Single)">
            <summary>
            Get the reaction torque given the inverse time step.
            Unit is N*m. This is always zero for a distance joint.
            </summary>
            <param name="invDt"></param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint">
            <summary>
            A mouse joint is used to make a point on a body track a
            specified world point. This a soft constraint with a maximum
            force. This allows the constraint to stretch and without
            applying huge forces.
            NOTE: this joint is not documented in the manual because it was
            developed to be used in the testbed. If you want to learn how to
            use the mouse joint, look at the testbed.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            This requires a world target point,
            tuning parameters, and the time step.
            </summary>
            <param name="body">The body.</param>
            <param name="worldAnchor">The target.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint.MaxForce">
            <summary>
            The maximum constraint force that can be exerted
            to move the candidate body. Usually you will express
            as some multiple of the weight (multiplier * mass * gravity).
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint.Frequency">
            <summary>
            The response speed.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FixedMouseJoint.DampingRatio">
            <summary>
            The damping ratio. 0 = no damping, 1 = critical damping.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint">
            <summary>
            Friction joint. This is used for top-down friction.
            It provides 2D translational friction and angular friction.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            Constructor for FrictionJoint.
            </summary>
            <param name="bodyA"></param>
            <param name="bodyB"></param>
            <param name="anchor"></param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint.MaxForce">
            <summary>
            The maximum friction force in N.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.FrictionJoint.MaxTorque">
            <summary>
            The maximum friction torque in N-m.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.GearJoint">
             <summary>
             A gear joint is used to connect two joints together.
             Either joint can be a revolute or prismatic joint.
             You specify a gear ratio to bind the motions together:
             <![CDATA[coordinate1 + ratio * coordinate2 = ant]]>
             The ratio can be negative or positive. If one joint is a revolute joint
             and the other joint is a prismatic joint, then the ratio will have units
             of length or units of 1/length.
            
             Warning: You have to manually destroy the gear joint if jointA or jointB is destroyed.
             </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.GearJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint,Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint,System.Single)">
            <summary>
            Requires two existing revolute or prismatic joints (any combination will work).
            The provided joints must attach a dynamic body to a static body.
            </summary>
            <param name="jointA">The first joint.</param>
            <param name="jointB">The second joint.</param>
            <param name="ratio">The ratio.</param>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.GearJoint.Ratio">
            <summary>
            The gear ratio.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.GearJoint.JointA">
            <summary>
            The first revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.GearJoint.JointB">
            <summary>
            The second revolute/prismatic joint attached to the gear joint.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointEdge">
            <summary>
            A joint edge is used to connect bodies and joints together
            in a joint graph where each body is a node and each joint
            is an edge. A joint edge belongs to a doubly linked list
            maintained in each attached body. Each joint has two joint
            nodes, one for each attached body.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointEdge.Joint">
            <summary>
            The joint.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointEdge.Next">
            <summary>
            The next joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointEdge.Other">
            <summary>
            Provides quick access to the other body attached.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointEdge.Prev">
            <summary>
            The previous joint edge in the body's joint list.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.Enabled">
            <summary>
            Indicate if this join is enabled or not. Disabling a joint
            means it is still in the simulation, but inactive.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            Constructor for fixed joint
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.World">
            <summary>
            Get the parent World of this joint. This is null if the joint is not attached.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.JointType">
            <summary>
            Gets or sets the type of the joint.
            </summary>
            <value>The type of the joint.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.BodyA">
            <summary>
            Get the first body attached to this joint.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.BodyB">
            <summary>
            Get the second body attached to this joint.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.WorldAnchorA">
            <summary>
            Get the anchor point on bodyA in world coordinates.
            On some joints, this value indicate the anchor point within the world.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.WorldAnchorB">
            <summary>
            Get the anchor point on bodyB in world coordinates.
            On some joints, this value indicate the anchor point within the world.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.Tag">
            <summary>
            Set the user data pointer.
            </summary>
            <value>The data.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.CollideConnected">
            <summary>
            Set this flag to true if the attached bodies should collide.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.Breakpoint">
            <summary>
            The Breakpoint simply indicates the maximum Value the JointError can be before it breaks.
            The default value is float.MaxValue, which means it never breaks.
            </summary>
        </member>
        <member name="E:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.Broke">
            <summary>
            Fires when the joint is broken.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.GetReactionForce(System.Single)">
            <summary>
            Get the reaction force on body at the joint anchor in Newtons.
            </summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.GetReactionTorque(System.Single)">
            <summary>
            Get the reaction torque on the body at the joint anchor in N*m.
            </summary>
            <param name="invDt">The inverse delta time.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.IsFixedType">
            <summary>
            Return true if the joint is a fixed type.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint.SolvePositionConstraints(Internal.tainicom.Aether.Physics2D.Dynamics.SolverData@)">
            <summary>
            Solves the position constraints.
            </summary>
            <param name="data"></param>
            <returns>returns true if the position errors are within tolerance.</returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.JointFactory">
            <summary>
            An easy to use factory for using joints.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint">
            <summary>
            A motor joint is used to control the relative motion
            between two bodies. A typical usage is to control the movement
            of a dynamic body with respect to the ground.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,System.Boolean)">
            <summary>
            Constructor for MotorJoint.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint.MaxForce">
            <summary>
            The maximum amount of force that can be applied to BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint.MaxTorque">
            <summary>
            The maximum amount of torque that can be applied to BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint.LinearOffset">
            <summary>
            The linear (translation) offset.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.MotorJoint.AngularOffset">
            <summary>
            Get or set the angular offset.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint">
            <summary>
            A prismatic joint. This joint provides one degree of freedom: translation
            along an axis fixed in bodyA. Relative rotation is prevented. You can
            use a joint limit to restrict the range of motion and a joint motor to
            drive the motion or to model joint friction.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            This requires defining a line of
            motion using an axis and an anchor point. The definition uses local
            anchor points and a local axis so that the initial configuration
            can violate the constraint slightly. The joint translation is zero
            when the local anchor points coincide in world space. Using local
            anchors and a local axis helps when saving and loading a game.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="axis">The axis.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.JointTranslation">
            <summary>
            Get the current joint translation, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.JointSpeed">
            <summary>
            Get the current joint translation speed, usually in meters per second.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.LimitEnabled">
            <summary>
            Is the joint limit enabled?
            </summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.LowerLimit">
            <summary>
            Get the lower joint limit, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.UpperLimit">
            <summary>
            Get the upper joint limit, usually in meters.
            </summary>
            <value></value>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.SetLimits(System.Single,System.Single)">
            <summary>
            Set the joint limits, usually in meters.
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.MotorEnabled">
            <summary>
            Is the joint motor enabled?
            </summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.MotorSpeed">
            <summary>
            Set the motor speed, usually in meters per second.
            </summary>
            <value>The speed.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.MaxMotorForce">
            <summary>
            Set the maximum motor force, usually in N.
            </summary>
            <value>The force.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.MotorImpulse">
            <summary>
            Get the current motor impulse, usually in N.
            </summary>
            <value></value>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.GetMotorForce(System.Single)">
            <summary>
            Gets the motor force.
            </summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.Axis">
            <summary>
            The axis at which the joint moves.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.LocalXAxis">
            <summary>
            The axis in local coordinates relative to BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PrismaticJoint.ReferenceAngle">
            <summary>
            The reference angle.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint">
            <summary>
            The pulley joint is connected to two bodies and two fixed world points.
            The pulley supports a ratio such that:
            <![CDATA[length1 + ratio * length2 <= constant]]>
            Yes, the force transmitted is scaled by the ratio.
            
            Warning: the pulley joint can get a bit squirrelly by itself. They often
            work better when combined with prismatic joints. You should also cover the
            the anchor points with static shapes to prevent one side from going to zero length.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single,System.Boolean)">
            <summary>
            Constructor for PulleyJoint.
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The anchor on the first body.</param>
            <param name="anchorB">The anchor on the second body.</param>
            <param name="worldAnchorA">The world anchor for the first body.</param>
            <param name="worldAnchorB">The world anchor for the second body.</param>
            <param name="ratio">The ratio.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.WorldAnchorA">
            <summary>
            Get the first world anchor.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.WorldAnchorB">
            <summary>
            Get the second world anchor.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.LengthA">
            <summary>
            Get the current length of the segment attached to body1.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.LengthB">
            <summary>
            Get the current length of the segment attached to body2.
            </summary>
            <value></value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.CurrentLengthA">
            <summary>
            The current length between the anchor point on BodyA and WorldAnchorA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.CurrentLengthB">
            <summary>
            The current length between the anchor point on BodyB and WorldAnchorB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.PulleyJoint.Ratio">
            <summary>
            Get the pulley ratio.
            </summary>
            <value></value>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint">
            <summary>
            A revolute joint constrains to bodies to share a common point while they
            are free to rotate about the point. The relative rotation about the shared
            point is the joint angle. You can limit the relative rotation with
            a joint limit that specifies a lower and upper angle. You can use a motor
            to drive the relative rotation about the shared point. A maximum motor torque
            is provided so that infinite forces are not generated.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            Constructor of RevoluteJoint. 
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            Constructor of RevoluteJoint. 
            </summary>
            <param name="bodyA">The first body.</param>
            <param name="bodyB">The second body.</param>
            <param name="anchor">The shared anchor.</param>
            <param name="useWorldCoordinates"></param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.ReferenceAngle">
            <summary>
            The referance angle computed as BodyB angle minus BodyA angle.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.JointAngle">
            <summary>
            Get the current joint angle in radians.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.JointSpeed">
            <summary>
            Get the current joint angle speed in radians per second.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.LimitEnabled">
            <summary>
            Is the joint limit enabled?
            </summary>
            <value><c>true</c> if [limit enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.LowerLimit">
            <summary>
            Get the lower joint limit in radians.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.UpperLimit">
            <summary>
            Get the upper joint limit in radians.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.SetLimits(System.Single,System.Single)">
            <summary>
            Set the joint limits, usually in meters.
            </summary>
            <param name="lower">The lower limit</param>
            <param name="upper">The upper limit</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.MotorEnabled">
            <summary>
            Is the joint motor enabled?
            </summary>
            <value><c>true</c> if [motor enabled]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.MotorSpeed">
            <summary>
            Get or set the motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.MaxMotorTorque">
            <summary>
            Get or set the maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.MotorImpulse">
            <summary>
            Get or set the current motor impulse, usually in N-m.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RevoluteJoint.GetMotorTorque(System.Single)">
            <summary>
            Gets the motor torque in N-m.
            </summary>
            <param name="invDt">The inverse delta time</param>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint">
            <summary>
            A rope joint enforces a maximum distance between two points on two bodies. It has no other effect.
            It can be used on ropes that are made up of several connected bodies, and if there is a need to support a heavy body.
            This joint is used for stabiliation of heavy objects on soft constraint joints.
            
            Warning: if you attempt to change the maximum length during the simulation you will get some non-physical behavior.
            Use the DistanceJoint instead if you want to dynamically control the length.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            Constructor for RopeJoint.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The anchor on the first body</param>
            <param name="anchorB">The anchor on the second body</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint.MaxLength">
            <summary>
            Get or set the maximum length of the rope.
            By default, it is the distance between the two anchor points.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.RopeJoint.State">
            <summary>
            Gets the state of the joint.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint">
            <summary>
            A weld joint essentially glues two bodies together. A weld joint may
            distort somewhat because the island constraint solver is approximate.
            
            The joint is soft constraint based, which means the two bodies will move
            relative to each other, when a force is applied. To combine two bodies
            in a rigid fashion, combine the fixtures to a single body instead.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            You need to specify an anchor point where they are attached.
            The position of the anchor point is important for computing the reaction torque.
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchorA">The first body anchor.</param>
            <param name="anchorB">The second body anchor.</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.ReferenceAngle">
            <summary>
            The bodyB angle minus bodyA angle in the reference state (radians).
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.FrequencyHz">
            <summary>
            The frequency of the joint. A higher frequency means a stiffer joint, but
            a too high value can cause the joint to oscillate.
            Default is 0, which means the joint does no spring calculations.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WeldJoint.DampingRatio">
            <summary>
            The damping on the joint. The damping is only used when
            the joint has a frequency (> 0). A higher value means more damping.
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint">
            <summary>
            A wheel joint. This joint provides two degrees of freedom: translation
            along an axis fixed in bodyA and rotation in the plane. You can use a
            joint limit to restrict the range of motion and a joint motor to drive
            the rotation or to model rotational friction.
            This joint is designed for vehicle suspensions.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.#ctor(Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Dynamics.Body,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Boolean)">
            <summary>
            Constructor for WheelJoint
            </summary>
            <param name="bodyA">The first body</param>
            <param name="bodyB">The second body</param>
            <param name="anchor">The anchor point</param>
            <param name="axis">The axis</param>
            <param name="useWorldCoordinates">Set to true if you are using world coordinates as anchors.</param>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.LocalAnchorA">
            <summary>
            The local anchor point on BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.LocalAnchorB">
            <summary>
            The local anchor point on BodyB
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.Axis">
            <summary>
            The axis at which the suspension moves.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.LocalXAxis">
            <summary>
            The axis in local coordinates relative to BodyA
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.MotorSpeed">
            <summary>
            The desired motor speed in radians per second.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.MaxMotorTorque">
            <summary>
            The maximum motor torque, usually in N-m.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.Frequency">
            <summary>
            Suspension frequency, zero indicates no suspension
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.DampingRatio">
            <summary>
            Suspension damping ratio, one indicates critical damping
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.JointTranslation">
            <summary>
            Gets the translation along the axis
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.JointSpeed">
            <summary>
            Gets the angular velocity of the joint
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.MotorEnabled">
            <summary>
            Enable/disable the joint motor.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.Joints.WheelJoint.GetMotorTorque(System.Single)">
            <summary>
            Gets the torque of the motor
            </summary>
            <param name="invDt">inverse delta time</param>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations.VelocityIterations">
            <summary>The number of velocity iterations used in the solver.</summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations.PositionIterations">
            <summary>The number of position iterations used in the solver.</summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations.TOIVelocityIterations">
            <summary>The number of velocity iterations in the TOI solver</summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations.TOIPositionIterations">
            <summary>The number of position iterations in the TOI solver</summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.TimeStep">
            <summary>
            This is an internal structure.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.TimeStep.dt">
            <summary>
            Time step (Delta time)
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.TimeStep.dtRatio">
            <summary>
            dt * inv_dt0
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.TimeStep.inv_dt">
            <summary>
            Inverse time step (0 if dt == 0).
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.SolverPosition">
            This is an internal structure.
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.SolverVelocity">
            This is an internal structure.
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.SolverData">
            Solver Data
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.World">
            <summary>
            The world class manages all physics entities, dynamic simulation,
            and asynchronous queries.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World._warmStarting">
            <summary>This is only for debugging the solver</summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World._subStepping">
            <summary>This is only for debugging the solver</summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.Tag">
            <summary>
            Set the user data. Use this to store your application specific data.
            </summary>
            <value>The user data.</value>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.BodyAdded">
            <summary>
            Fires whenever a body has been added
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.BodyRemoved">
            <summary>
            Fires whenever a body has been removed
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.FixtureAdded">
            <summary>
            Fires whenever a fixture has been added
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.FixtureRemoved">
            <summary>
            Fires whenever a fixture has been removed
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.JointAdded">
            <summary>
            Fires whenever a joint has been added
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.JointRemoved">
            <summary>
            Fires whenever a joint has been removed
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.ControllerAdded">
            <summary>
            Fires every time a controller is added to the World.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.ControllerRemoved">
            <summary>
            Fires every time a controlelr is removed form the World.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Dynamics.World"/> class.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.#ctor(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Dynamics.World"/> class.
            </summary>
            <param name="gravity">The gravity.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.#ctor(Internal.tainicom.Aether.Physics2D.Collision.IBroadPhase)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.tainicom.Aether.Physics2D.Dynamics.World"/> class.
            </summary>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.ProxyCount">
            <summary>
            Get the number of broad-phase proxies.
            </summary>
            <value>The proxy count.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.ContactCount">
            <summary>
            Get the number of contacts (each may have 0 or more contact points).
            </summary>
            <value>The contact count.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.Gravity">
            <summary>
            Change the global gravity vector.
            </summary>
            <value>The gravity.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.IsLocked">
            <summary>
            Is the world locked (in the middle of a time step).
            </summary>        
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.ContactManager">
            <summary>
            Get the contact manager for testing.
            </summary>
            <value>The contact manager.</value>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.BodyList">
            <summary>
            Get the world body list.
            </summary>
            <value>The head of the world body list.</value>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Dynamics.World.JointList">
            <summary>
            Get the world joint list. 
            </summary>
            <value>The joint list.</value>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.ContactList">
            <summary>
            Get the world contact list. 
            ContactList is the head of a circular linked list. Use Contact.Next to get
            the next contact in the world list. A contact equal to ContactList indicates the end of the list.
            </summary>
            <value>The head of the world contact list.</value>
            <example>for (Contact c = World.ContactList.Next; c != World..ContactList; c = c.Next)</example>
        </member>
        <member name="P:Internal.tainicom.Aether.Physics2D.Dynamics.World.Enabled">
            <summary>
            If false, the whole simulation stops. It still processes added and removed geometries.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Add(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            Add a rigid body.
            Warning: This method is locked during callbacks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Remove(Internal.tainicom.Aether.Physics2D.Dynamics.Body)">
            <summary>
            Destroy a rigid body.
            Warning: This automatically deletes all associated shapes and joints.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="body">The body.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Add(Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint)">
            <summary>
            Create a joint to constrain bodies together. This may cause the connected bodies to cease colliding.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="joint">The joint.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Remove(Internal.tainicom.Aether.Physics2D.Dynamics.Joints.Joint)">
            <summary>
            Destroy a joint. This may cause the connected bodies to begin colliding.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="joint">The joint.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Step(System.TimeSpan)">
            <summary>
            Take a time step. This performs collision detection, integration,
            and consraint solution.
            </summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Step(System.TimeSpan,Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations@)">
            <summary>
            Take a time step. This performs collision detection, integration,
            and consraint solution.
            </summary>
            <param name="dt">The amount of time to simulate, this should not vary.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Step(System.Single)">
            <summary>
            Take a time step. This performs collision detection, integration,
            and consraint solution.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="dt">The amount of time to simulate in seconds, this should not vary.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Step(System.Single,Internal.tainicom.Aether.Physics2D.Dynamics.SolverIterations@)">
            <summary>
            Take a time step. This performs collision detection, integration,
            and consraint solution.
            Warning: This method is locked during callbacks.
            </summary>
            <param name="dt">The amount of time to simulate in seconds, this should not vary.</param>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.ClearForces">
            <summary>
            Call this after you are done with time steps to clear the forces. You normally
            call this after each call to Step, unless you are performing sub-steps. By default,
            forces will be automatically cleared, so you don't need to call this function.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.QueryAABB(Internal.tainicom.Aether.Physics2D.Dynamics.QueryReportFixtureDelegate,Internal.tainicom.Aether.Physics2D.Collision.AABB)">
            <summary>
            Query the world for all fixtures that potentially overlap the provided AABB.
            
            Inside the callback:
            Return true: Continues the query
            Return false: Terminate the query
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="aabb">The aabb query box.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.QueryAABB(Internal.tainicom.Aether.Physics2D.Dynamics.QueryReportFixtureDelegate,Internal.tainicom.Aether.Physics2D.Collision.AABB@)">
            <summary>
            Query the world for all fixtures that potentially overlap the provided AABB.
            
            Inside the callback:
            Return true: Continues the query
            Return false: Terminate the query
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="aabb">The aabb query box.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.RayCast(Internal.tainicom.Aether.Physics2D.Dynamics.RayCastReportFixtureDelegate,Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            <summary>
            Ray-cast the world for all fixtures in the path of the ray. Your callback
            controls whether you get the closest point, any point, or n-points.
            The ray-cast ignores shapes that contain the starting point.
            
            Inside the callback:
            return -1: ignore this fixture and continue
            return 0: terminate the ray cast
            return fraction: clip the ray to this point
            return 1: don't clip the ray and continue
            </summary>
            <param name="callback">A user implemented callback class.</param>
            <param name="point1">The ray starting point.</param>
            <param name="point2">The ray ending point.</param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Add(Internal.tainicom.Aether.Physics2D.Controllers.Controller)">
            <summary>
            Warning: This method is locked during callbacks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Remove(Internal.tainicom.Aether.Physics2D.Controllers.Controller)">
            <summary>
            Warning: This method is locked during callbacks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.ShiftOrigin(Internal.tainicom.Aether.Physics2D.Common.Vector2)">
            Shift the world origin. Useful for large worlds.
            The body shift formula is: position -= newOrigin
            @param newOrigin the new origin with respect to the old origin
            Warning: Calling this method mid-update might cause a crash.
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.Clear">
            <summary>
            Warning: This method is locked during callbacks.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown when the world is Locked/Stepping.</exception>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Dynamics.World.CreateChain(Internal.tainicom.Aether.Physics2D.Common.Vector2,Internal.tainicom.Aether.Physics2D.Common.Vector2,System.Single,System.Single,System.Int32,System.Single,System.Boolean)">
            <summary>
            Creates a chain.
            </summary>
            <param name="world">The world.</param>
            <param name="start">The start.</param>
            <param name="end">The end.</param>
            <param name="linkWidth">The width.</param>
            <param name="linkHeight">The height.</param>
            <param name="numberOfLinks">The number of links.</param>
            <param name="linkDensity">The link density.</param>
            <param name="attachRopeJoint">Creates a rope joint between start and end. This enforces the length of the rope. Said in another way: it makes the rope less bouncy.</param>
            <returns></returns>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.QueryReportFixtureDelegate">
            <summary>
            Called for each fixture found in the query.
            <returns>true: Continues the query, false: Terminate the query</returns>
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.RayCastReportFixtureDelegate">
            <summary>
            Called for each fixture found in the query. You control how the ray cast
            proceeds by returning a float:
            return -1: ignore this fixture and continue
            return 0: terminate the ray cast
            return fraction: clip the ray to this point
            return 1: don't clip the ray and continue
            @param fixture the fixture hit by the ray
            @param point the point of initial intersection
            @param normal the normal vector at the point of intersection
            @return 0 to terminate, fraction to clip the ray for closest hit, 1 to continue
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.EndContactDelegate">
            <summary>
            This delegate is called when a contact is deleted
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Dynamics.BeginContactDelegate">
            <summary>
            This delegate is called when a contact is created
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition">
            <summary>
            Fluid parameters, see pvfs.pdf for a detailed explanation
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.InfluenceRadius">
            <summary>
            Distance of influence between the particles
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.DensityRest">
            <summary>
            Density of the fluid
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.Stiffness">
            <summary>
            Stiffness of the fluid (when particles are far)
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.StiffnessNear">
            <summary>
            Stiffness of the fluid (when particles are near)
            Set by Check()
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.UseViscosity">
            <summary>
            Toggles viscosity forces
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.ViscositySigma">
            <summary>
            See pvfs.pdf for more information
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.ViscosityBeta">
            <summary>
            See pvfs.pdf for more information
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.UsePlasticity">
            <summary>
            Toggles plasticity computation (springs etc.)
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.Plasticity">
            <summary>
            Plasticity, amount of memory of the shape
            See pvfs.pdf for more information
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.KSpring">
            <summary>
            K of the springs used for plasticity
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.YieldRatioCompress">
            <summary>
            Amount of change of the rest length of the springs (when compressed)
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Fluids.FluidDefinition.YieldRatioStretch">
            <summary>
            Amount of change of the rest length of the springs (when stretched)
            </summary>
        </member>
        <member name="T:Internal.tainicom.Aether.Physics2D.Fluids.HashGrid">
            <summary>
            Grid used by particle system to keep track of neightbor particles.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Fluids.SpatialTable.Add(Internal.tainicom.Aether.Physics2D.Fluids.Particle)">
            <summary>
            Append value to the table and identify its position in the space.
            Don't need to rehash table after append operation.</summary>
            <param name="value"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Fluids.SpatialTable.Rehash">
            <summary>
            Updates the spatial relationships of objects. Rehash function
            needed if elements change their position in the space.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Fluids.SpatialTable.AddInterRadius(Internal.tainicom.Aether.Physics2D.Fluids.Particle)">
            <summary>
            Add element to its position and neighbor cells.
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Fluids.SpatialTable.InRange(System.Single,System.Single)">
            <summary>
            Check if a position is out of the spatial range
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>true if position is in range.</returns>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.EnableDiagnostics">
            <summary>
            Enabling diagnistics causes the engine to gather timing information.
            You can see how much time it took to solve the contacts, solve CCD
            and update the controllers.
            NOTE: If you are using a debug view that shows performance counters,
            you might want to enable this.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.VelocityIterations">
            <summary>
            The number of velocity iterations used in the solver.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.PositionIterations">
            <summary>
            The number of position iterations used in the solver.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.ContinuousPhysics">
            <summary>
            Enable/Disable Continuous Collision Detection (CCD)
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.UseConvexHullPolygons">
            <summary>
            If true, it will run a GiftWrap convex hull on all polygon inputs.
            This makes for a more stable engine when given random input,
            but if speed of the creation of polygons are more important,
            you might want to set this to false.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.TOIVelocityIterations">
            <summary>
            The number of velocity iterations in the TOI solver
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.TOIPositionIterations">
            <summary>
            The number of position iterations in the TOI solver
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxSubSteps">
            <summary>
            Maximum number of sub-steps per contact in continuous physics simulation.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AllowSleep">
            <summary>
            Enable/Disable sleeping
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxPolygonVertices">
            <summary>
            The maximum number of vertices on a convex polygon.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxManifoldPoints">
            <summary>
            The maximum number of contact points between two convex shapes.
            DO NOT CHANGE THIS VALUE!
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AABBExtension">
            <summary>
            This is used to fatten AABBs in the dynamic tree. This allows proxies
            to move by a small amount without triggering a tree adjustment.
            This is in meters.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AABBMultiplier">
            <summary>
            This is used to fatten AABBs in the dynamic tree. This is used to predict
            the future position based on the current displacement.
            This is a dimensionless multiplier.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.LinearSlop">
            <summary>
            A small length used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AngularSlop">
            <summary>
            A small angle used as a collision and constraint tolerance. Usually it is
            chosen to be numerically significant, but visually insignificant.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.PolygonRadius">
            <summary>
            The radius of the polygon/edge shape skin. This should not be modified. Making
            this smaller means polygons will have an insufficient buffer for continuous collision.
            Making it larger may create artifacts for vertex collision.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxTOIContacts">
            <summary>
            Maximum number of contacts to be handled to solve a TOI impact.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.VelocityThreshold">
            <summary>
            A velocity threshold for elastic collisions. Any collision with a relative linear
            velocity below this threshold will be treated as inelastic.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxLinearCorrection">
            <summary>
            The maximum linear position correction used when solving constraints. This helps to
            prevent overshoot.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxAngularCorrection">
            <summary>
            The maximum angular position correction used when solving constraints. This helps to
            prevent overshoot.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.Baumgarte">
            <summary>
            This scale factor controls how fast overlap is resolved. Ideally this would be 1 so
            that overlap is removed in one time step. However using values close to 1 often lead
            to overshoot.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.TimeToSleep">
            <summary>
            The time that a body must be still before it will go to sleep.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.LinearSleepTolerance">
            <summary>
            A body cannot sleep if its linear velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AngularSleepTolerance">
            <summary>
            A body cannot sleep if its angular velocity is above this tolerance.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxTranslation">
            <summary>
            The maximum linear velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxRotation">
            <summary>
            The maximum angular velocity of a body. This limit is very large and is used
            to prevent numerical problems. You shouldn't need to adjust this.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.MaxGJKIterations">
            <summary>
            Defines the maximum number of iterations made by the GJK algorithm.
            </summary>
        </member>
        <member name="F:Internal.tainicom.Aether.Physics2D.Settings.AutoClearForces">
            <summary>
            By default, forces are cleared automatically after each call to Step.
            The default behavior is modified with this setting.
            The purpose of this setting is to support sub-stepping. Sub-stepping is often used to maintain
            a fixed sized time step under a variable frame-rate.
            When you perform sub-stepping you should disable auto clearing of forces and instead call
            ClearForces after all sub-steps are complete in one pass of your game loop.
            </summary>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Settings.MixFriction(System.Single,System.Single)">
            <summary>
            Friction mixing law. Feel free to customize this.
            </summary>
            <param name="friction1">The friction1.</param>
            <param name="friction2">The friction2.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.tainicom.Aether.Physics2D.Settings.MixRestitution(System.Single,System.Single)">
            <summary>
            Restitution mixing law. Feel free to customize this.
            </summary>
            <param name="restitution1">The restitution1.</param>
            <param name="restitution2">The restitution2.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count">
            <summary>
            Get document count in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count(Internal.LiteDB.BsonExpression)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Count(Internal.LiteDB.Query)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount">
            <summary>
            Get document count in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount(Internal.LiteDB.BsonExpression)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.LongCount(Internal.LiteDB.Query)">
            <summary>
            Get document count in collection using predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Exists(Internal.LiteDB.BsonExpression)">
            <summary>
            Get true if collection contains at least 1 document that satisfies the predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Exists(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Get true if collection contains at least 1 document that satisfies the predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Exists(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Get true if collection contains at least 1 document that satisfies the predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Get true if collection contains at least 1 document that satisfies the predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Exists(Internal.LiteDB.Query)">
            <summary>
            Get true if collection contains at least 1 document that satisfies the predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Min(Internal.LiteDB.BsonExpression)">
            <summary>
            Returns the min value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Min">
            <summary>
            Returns the min value of _id index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the min value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Max(Internal.LiteDB.BsonExpression)">
            <summary>
            Returns the max value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Max">
            <summary>
            Returns the max _id index key value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the last/max field using a linq expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Delete(Internal.LiteDB.BsonValue)">
            <summary>
            Delete a single document on collection based on _id index. Returns true if document was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DeleteAll">
            <summary>
            Delete all documents inside collection. Returns how many documents was deleted. Run inside current transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DeleteMany(Internal.LiteDB.BsonExpression)">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DeleteMany(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DeleteMany(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DeleteMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Query">
            <summary>
            Return a new LiteQueryable to build more complex queries
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Find(Internal.LiteDB.BsonExpression,System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Find(Internal.LiteDB.Query,System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using query definition.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindById(Internal.LiteDB.BsonValue)">
            <summary>
            Find a document using Document Id. Returns null if not found.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindOne(Internal.LiteDB.BsonExpression)">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindOne(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindOne(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonValue[])">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindOne(Internal.LiteDB.Query)">
            <summary>
            Find the first document using defined query structure. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.FindAll">
            <summary>
            Returns all documents inside collection order by _id index.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Run an include action in each document returned by Find(), FindById(), FindOne() and All() methods to load DbRef documents
            Returns a new Collection with this action included
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Include(Internal.LiteDB.BsonExpression)">
            <summary>
            Run an include action in each document returned by Find(), FindById(), FindOne() and All() methods to load DbRef documents
            Returns a new Collection with this action included
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.EnsureIndex(System.String,Internal.LiteDB.BsonExpression,System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.EnsureIndex(Internal.LiteDB.BsonExpression,System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="expression">Document field/expression</param>
            <param name="unique">If is a unique index</param>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.EnsureIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.EnsureIndex``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.GetIndexExpression``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Get index expression based on LINQ expression. Convert IEnumerable in MultiKey indexes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.DropIndex(System.String)">
            <summary>
            Drop index and release slot for another index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Insert(`0)">
            <summary>
            Insert a new entity to this collection. Document Id must be a new value in collection - Returns document Id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Insert(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Insert a new document to this collection using passed id value.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert an array of new documents to this collection. Document Id must be a new value in collection. Can be set buffer size to commit at each N documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.InsertBulk(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Implements bulk insert documents in a collection. Usefull when need lots of documents.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.GetBsonDocs(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Convert each T document in a BsonDocument, setting autoId for each one
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.RemoveDocId(Internal.LiteDB.BsonDocument)">
            <summary>
            Remove document _id if contains a "empty" value (checks for autoId bson type)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Update(`0)">
            <summary>
            Update a document in this collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Update(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Update a document in this collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.UpdateMany(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Update many documents based on transform expression. This expression must return a new document that will be replaced over current document (according with predicate).
            Eg: col.UpdateMany("{ Name: UPPER($.Name), Age }", "_id > 0")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.UpdateMany(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Update many document based on merge current document with extend expression. Use your class with initializers. 
            Eg: col.UpdateMany(x => new Customer { Name = x.Name.ToUpper(), Salary: 100 }, x => x.Name == "John")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Upsert(`0)">
            <summary>
            Insert or Update a document in this collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Upsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert or Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteCollection`1.Upsert(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Insert or Update a document in this collection.
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteCollection`1.Name">
            <summary>
            Get collection name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteCollection`1.AutoId">
            <summary>
            Get collection auto id type
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteCollection`1.EntityMapper">
            <summary>
            Getting entity mapper from current collection. Returns null if collection are BsonDocument type
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteCollection`1.Name">
            <summary>
            Get collection name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteCollection`1.AutoId">
            <summary>
            Get collection auto id type
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteCollection`1.EntityMapper">
            <summary>
            Getting entity mapper from current collection. Returns null if collection are BsonDocument type
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Run an include action in each document returned by Find(), FindById(), FindOne() and All() methods to load DbRef documents
            Returns a new Collection with this action included
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Include(Internal.LiteDB.BsonExpression)">
            <summary>
            Run an include action in each document returned by Find(), FindById(), FindOne() and All() methods to load DbRef documents
            Returns a new Collection with this action included
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Upsert(`0)">
            <summary>
            Insert or Update a document in this collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Upsert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert or Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Upsert(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Insert or Update a document in this collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Update(`0)">
            <summary>
            Update a document in this collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Update(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Update a document in this collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Update(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.UpdateMany(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Update many documents based on transform expression. This expression must return a new document that will be replaced over current document (according with predicate).
            Eg: col.UpdateMany("{ Name: UPPER($.Name), Age }", "_id > 0")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.UpdateMany(System.Linq.Expressions.Expression{System.Func{`0,`0}},System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Update many document based on merge current document with extend expression. Use your class with initializers. 
            Eg: col.UpdateMany(x => new Customer { Name = x.Name.ToUpper(), Salary: 100 }, x => x.Name == "John")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Insert(`0)">
            <summary>
            Insert a new entity to this collection. Document Id must be a new value in collection - Returns document Id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Insert(Internal.LiteDB.BsonValue,`0)">
            <summary>
            Insert a new document to this collection using passed id value.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Insert(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Insert an array of new documents to this collection. Document Id must be a new value in collection. Can be set buffer size to commit at each N documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.InsertBulk(System.Collections.Generic.IEnumerable{`0},System.Int32)">
            <summary>
            Implements bulk insert documents in a collection. Usefull when need lots of documents.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.EnsureIndex(System.String,Internal.LiteDB.BsonExpression,System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.EnsureIndex(Internal.LiteDB.BsonExpression,System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="expression">Document field/expression</param>
            <param name="unique">If is a unique index</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.EnsureIndex``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.EnsureIndex``1(System.String,System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DropIndex(System.String)">
            <summary>
            Drop index and release slot for another index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Query">
            <summary>
            Return a new LiteQueryable to build more complex queries
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Find(Internal.LiteDB.BsonExpression,System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Find(Internal.LiteDB.Query,System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using query definition.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Find(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}},System.Int32,System.Int32)">
            <summary>
            Find documents inside a collection using predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindById(Internal.LiteDB.BsonValue)">
            <summary>
            Find a document using Document Id. Returns null if not found.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindOne(Internal.LiteDB.BsonExpression)">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindOne(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindOne(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonValue[])">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindOne(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Find the first document using predicate expression. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindOne(Internal.LiteDB.Query)">
            <summary>
            Find the first document using defined query structure. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.FindAll">
            <summary>
            Returns all documents inside collection order by _id index.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Delete(Internal.LiteDB.BsonValue)">
            <summary>
            Delete a single document on collection based on _id index. Returns true if document was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DeleteAll">
            <summary>
            Delete all documents inside collection. Returns how many documents was deleted. Run inside current transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DeleteMany(Internal.LiteDB.BsonExpression)">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DeleteMany(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DeleteMany(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.DeleteMany(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Delete all documents based on predicate expression. Returns how many documents was deleted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count">
            <summary>
            Get document count using property on collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count(Internal.LiteDB.BsonExpression)">
            <summary>
            Count documents matching a query. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Count documents matching a query. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Count documents matching a query. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Count(Internal.LiteDB.Query)">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount">
            <summary>
            Get document count using property on collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount(Internal.LiteDB.BsonExpression)">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.LongCount(Internal.LiteDB.Query)">
            <summary>
            Count documents matching a query. This method does not deserialize any documents. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Exists(Internal.LiteDB.BsonExpression)">
            <summary>
            Returns true if query returns any document. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Exists(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Returns true if query returns any document. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Exists(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Returns true if query returns any document. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Exists(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Returns true if query returns any document. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Exists(Internal.LiteDB.Query)">
            <summary>
            Returns true if query returns any document. This method does not deserialize any document. Needs indexes on query expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Min(Internal.LiteDB.BsonExpression)">
            <summary>
            Returns the min value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Min">
            <summary>
            Returns the min value of _id index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Min``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the min value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Max(Internal.LiteDB.BsonExpression)">
            <summary>
            Returns the max value from specified key value in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Max">
            <summary>
            Returns the max _id index key value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteCollection`1.Max``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Returns the last/max field using a linq expression
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.Mapper">
            <summary>
            Get current instance of BsonMapper used in this database instance (can be BsonMapper.Global)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.FileStorage">
            <summary>
            Returns a special collection for storage files/stream inside datafile. Use _files and _chunks collection names. FileId is implemented as string. Use "GetStorage" for custom options
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetCollection``1(System.String,Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using a entity class as strong typed document. If collection does not exits, create a new one.
            </summary>
            <param name="name">Collection name (case insensitive)</param>
            <param name="autoId">Define autoId data type (when object contains no id field)</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetCollection``1">
            <summary>
            Get a collection using a name based on typeof(T).Name (BsonMapper.ResolveCollectionName function)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetCollection``1(Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using a name based on typeof(T).Name (BsonMapper.ResolveCollectionName function)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetCollection(System.String,Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using a generic BsonDocument. If collection does not exits, create a new one.
            </summary>
            <param name="name">Collection name (case insensitive)</param>
            <param name="autoId">Define autoId data type (when document contains no _id field)</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.BeginTrans">
            <summary>
            Initialize a new transaction. Transaction are created "per-thread". There is only one single transaction per thread.
            Return true if transaction was created or false if current thread already in a transaction.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Commit">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Rollback">
            <summary>
            Rollback current transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetStorage``1(System.String,System.String)">
            <summary>
            Get new instance of Storage using custom FileId type, custom "_files" collection name and custom "_chunks" collection. LiteDB support multiples file storages (using different files/chunks collection names)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.GetCollectionNames">
            <summary>
            Get all collections name inside this database.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.CollectionExists(System.String)">
            <summary>
            Checks if a collection exists on database. Collection name is case insensitive
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.DropCollection(System.String)">
            <summary>
            Drop a collection and all data + indexes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.RenameCollection(System.String,System.String)">
            <summary>
            Rename a collection. Returns false if oldName does not exists or newName already exists
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Execute(System.IO.TextReader,Internal.LiteDB.BsonDocument)">
            <summary>
            Execute SQL commands and return as data reader.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Execute(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Execute SQL commands and return as data reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Execute(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Execute SQL commands and return as data reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Checkpoint">
            <summary>
            Do database checkpoint. Copy all commited transaction from log file into datafile.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Rebuild(Internal.LiteDB.Engine.RebuildOptions)">
            <summary>
            Rebuild all database to remove unused pages - reduce data file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Pragma(System.String)">
            <summary>
            Get value from internal engine variables
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteDatabase.Pragma(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Set new value to internal engine variables
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.UserVersion">
            <summary>
            Get/Set database user version - use this version number to control database change model
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.Timeout">
            <summary>
            Get/Set database timeout - this timeout is used to wait for unlock using transactions
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.UtcDate">
            <summary>
            Get/Set if database will deserialize dates in UTC timezone or Local timezone (default: Local)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.LimitSize">
            <summary>
            Get/Set database limit size (in bytes). New value must be equals or larger than current database size
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.CheckpointSize">
            <summary>
            Get/Set in how many pages (8 Kb each page) log file will auto checkpoint (copy from log file to data file). Use 0 to manual-only checkpoint (and no checkpoint on dispose)
            Default: 1000 pages
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteDatabase.Collation">
            <summary>
            Get database collection (this options can be changed only in rebuild proces)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ILiteRepository.Database">
            <summary>
            Get database instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Insert``1(``0,System.String)">
            <summary>
            Insert a new document into collection. Document Id must be a new value in collection - Returns document Id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Insert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Insert an array of new documents into collection. Document Id must be a new value in collection. Can be set buffer size to commit at each N documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Update``1(``0,System.String)">
            <summary>
            Update a document into collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Update``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Upsert``1(``0,System.String)">
            <summary>
            Insert or Update a document based on _id key. Returns true if insert entity or false if update entity
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Upsert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Insert or Update all documents based on _id key. Returns entity count that was inserted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Delete``1(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Delete entity based on _id key
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.DeleteMany``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Delete entity based on Query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.DeleteMany``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Delete entity based on predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Query``1(System.String)">
            <summary>
            Returns new instance of LiteQueryable that provides all method to query any entity inside collection. Use fluent API to apply filter/includes an than run any execute command, like ToList() or First()
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.EnsureIndex``1(System.String,Internal.LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.EnsureIndex``1(Internal.LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.EnsureIndex``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.EnsureIndex``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.SingleById``1(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Search for a single instance of T by Id. Shortcut from Query.SingleById
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Fetch``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).ToList();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Fetch``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).ToList();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.First``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).First();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).First();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.FirstOrDefault``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).FirstOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).FirstOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Single``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).Single();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.Single``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).Single();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.SingleOrDefault``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).SingleOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteRepository.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).SingleOrDefault();
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteDatabase">
            <summary>
            The LiteDB database. Used for create a LiteDB instance and use all storage resources. It's the database connection
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.Mapper">
            <summary>
            Get current instance of BsonMapper used in this database instance (can be BsonMapper.Global)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.#ctor(System.String,Internal.LiteDB.BsonMapper)">
            <summary>
            Starts LiteDB database using a connection string for file system database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.#ctor(Internal.LiteDB.ConnectionString,Internal.LiteDB.BsonMapper)">
            <summary>
            Starts LiteDB database using a connection string for file system database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.#ctor(System.IO.Stream,Internal.LiteDB.BsonMapper,System.IO.Stream)">
            <summary>
            Starts LiteDB database using a generic Stream implementation (mostly MemoryStream).
            </summary>
            <param name="stream">DataStream reference </param>
            <param name="mapper">BsonMapper mapper reference</param>
            <param name="logStream">LogStream reference </param>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.#ctor(Internal.LiteDB.Engine.ILiteEngine,Internal.LiteDB.BsonMapper,System.Boolean)">
            <summary>
            Start LiteDB database using a pre-exiting engine. When LiteDatabase instance dispose engine instance will be disposed too
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetCollection``1(System.String,Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using an entity class as strong typed document. If collection does not exist, create a new one.
            </summary>
            <param name="name">Collection name (case insensitive)</param>
            <param name="autoId">Define autoId data type (when object contains no id field)</param>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetCollection``1">
            <summary>
            Get a collection using a name based on typeof(T).Name (BsonMapper.ResolveCollectionName function)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetCollection``1(Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using a name based on typeof(T).Name (BsonMapper.ResolveCollectionName function)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetCollection(System.String,Internal.LiteDB.BsonAutoId)">
            <summary>
            Get a collection using a generic BsonDocument. If collection does not exist, create a new one.
            </summary>
            <param name="name">Collection name (case insensitive)</param>
            <param name="autoId">Define autoId data type (when document contains no _id field)</param>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.BeginTrans">
            <summary>
            Initialize a new transaction. Transaction are created "per-thread". There is only one single transaction per thread.
            Return true if transaction was created or false if current thread already in a transaction.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Commit">
            <summary>
            Commit current transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Rollback">
            <summary>
            Rollback current transaction
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.FileStorage">
            <summary>
            Returns a special collection for storage files/stream inside datafile. Use _files and _chunks collection names. FileId is implemented as string. Use "GetStorage" for custom options
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetStorage``1(System.String,System.String)">
            <summary>
            Get new instance of Storage using custom FileId type, custom "_files" collection name and custom "_chunks" collection. LiteDB support multiples file storages (using different files/chunks collection names)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.GetCollectionNames">
            <summary>
            Get all collections name inside this database.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.CollectionExists(System.String)">
            <summary>
            Checks if a collection exists on database. Collection name is case insensitive
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.DropCollection(System.String)">
            <summary>
            Drop a collection and all data + indexes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.RenameCollection(System.String,System.String)">
            <summary>
            Rename a collection. Returns false if oldName does not exists or newName already exists
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Execute(System.IO.TextReader,Internal.LiteDB.BsonDocument)">
            <summary>
            Execute SQL commands and return as data reader.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Execute(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Execute SQL commands and return as data reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Execute(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Execute SQL commands and return as data reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Checkpoint">
            <summary>
            Do database checkpoint. Copy all commited transaction from log file into datafile.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Rebuild(Internal.LiteDB.Engine.RebuildOptions)">
            <summary>
            Rebuild all database to remove unused pages - reduce data file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Pragma(System.String)">
            <summary>
            Get value from internal engine variables
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteDatabase.Pragma(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Set new value to internal engine variables
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.UserVersion">
            <summary>
            Get/Set database user version - use this version number to control database change model
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.Timeout">
            <summary>
            Get/Set database timeout - this timeout is used to wait for unlock using transactions
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.UtcDate">
            <summary>
            Get/Set if database will deserialize dates in UTC timezone or Local timezone (default: Local)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.LimitSize">
            <summary>
            Get/Set database limit size (in bytes). New value must be equals or larger than current database size
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.CheckpointSize">
            <summary>
            Get/Set in how many pages (8 Kb each page) log file will auto checkpoint (copy from log file to data file). Use 0 to manual-only checkpoint (and no checkpoint on dispose)
            Default: 1000 pages
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteDatabase.Collation">
            <summary>
            Get database collection (this options can be changed only in rebuild proces)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteQueryable`1">
            <summary>
            An IQueryable-like class to write fluent query in documents in collection.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Include``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Load cross reference documents from path expression (DbRef reference)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Include(Internal.LiteDB.BsonExpression)">
            <summary>
            Load cross reference documents from path expression (DbRef reference)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Include(System.Collections.Generic.List{Internal.LiteDB.BsonExpression})">
            <summary>
            Load cross reference documents from path expression (DbRef reference)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Where(Internal.LiteDB.BsonExpression)">
            <summary>
            Filters a sequence of documents based on a predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Where(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Filters a sequence of documents based on a predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Where(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Filters a sequence of documents based on a predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Where(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            Filters a sequence of documents based on a predicate expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.OrderBy(Internal.LiteDB.BsonExpression,System.Int32)">
            <summary>
            Sort the documents of resultset in ascending (or descending) order according to a key (support only one OrderBy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.OrderBy``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Int32)">
            <summary>
            Sort the documents of resultset in ascending (or descending) order according to a key (support only one OrderBy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.OrderByDescending(Internal.LiteDB.BsonExpression)">
            <summary>
            Sort the documents of resultset in descending order according to a key (support only one OrderBy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.OrderByDescending``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Sort the documents of resultset in descending order according to a key (support only one OrderBy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.GroupBy(Internal.LiteDB.BsonExpression)">
            <summary>
            Groups the documents of resultset according to a specified key selector expression (support only one GroupBy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Having(Internal.LiteDB.BsonExpression)">
            <summary>
            Filter documents after group by pipe according to predicate expression (requires GroupBy and support only one Having)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Select(Internal.LiteDB.BsonExpression)">
            <summary>
            Transform input document into a new output document. Can be used with each document, group by or all source
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Select``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Project each document of resultset into a new document/value based on selector expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ForUpdate">
            <summary>
            Execute query locking collection in write mode. This is avoid any other thread change results after read document and before transaction ends
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Offset(System.Int32)">
            <summary>
            Bypasses a specified number of documents in resultset and retun the remaining documents (same as Skip)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Skip(System.Int32)">
            <summary>
            Bypasses a specified number of documents in resultset and retun the remaining documents (same as Offset)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Limit(System.Int32)">
            <summary>
            Return a specified number of contiguous documents from start of resultset
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ExecuteReader">
            <summary>
            Execute query and returns resultset as generic BsonDataReader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ToDocuments">
            <summary>
            Execute query and return resultset as IEnumerable of documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ToEnumerable">
            <summary>
            Execute query and return resultset as IEnumerable of T. If T is a ValueType or String, return values only (not documents)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ToList">
            <summary>
            Execute query and return results as a List
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.ToArray">
            <summary>
            Execute query and return results as an Array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.GetPlan">
            <summary>
            Get execution plan over current query definition to see how engine will execute query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Single">
            <summary>
            Returns the only document of resultset, and throw an exception if there not exactly one document in the sequence
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.SingleOrDefault">
            <summary>
            Returns the only document of resultset, or null if resultset are empty; this method throw an exception if there not exactly one document in the sequence
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.First">
            <summary>
            Returns first document of resultset
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.FirstOrDefault">
            <summary>
            Returns first document of resultset or null if resultset are empty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Count">
            <summary>
            Execute Count methos in filter query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.LongCount">
            <summary>
            Execute Count methos in filter query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteQueryable`1.Exists">
            <summary>
            Returns true/false if query returns any result
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteRepository">
            <summary>
            The LiteDB repository pattern. A simple way to access your documents in a single class with fluent query api
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteRepository.Database">
            <summary>
            Get database instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.#ctor(Internal.LiteDB.ILiteDatabase)">
            <summary>
            Starts LiteDB database an existing Database instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.#ctor(System.String,Internal.LiteDB.BsonMapper)">
            <summary>
            Starts LiteDB database using a connection string for file system database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.#ctor(Internal.LiteDB.ConnectionString,Internal.LiteDB.BsonMapper)">
            <summary>
            Starts LiteDB database using a connection string for file system database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.#ctor(System.IO.Stream,Internal.LiteDB.BsonMapper,System.IO.Stream)">
            <summary>
            Starts LiteDB database using a Stream disk
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Insert``1(``0,System.String)">
            <summary>
            Insert a new document into collection. Document Id must be a new value in collection - Returns document Id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Insert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Insert an array of new documents into collection. Document Id must be a new value in collection. Can be set buffer size to commit at each N documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Update``1(``0,System.String)">
            <summary>
            Update a document into collection. Returns false if not found document in collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Update``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Update all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Upsert``1(``0,System.String)">
            <summary>
            Insert or Update a document based on _id key. Returns true if insert entity or false if update entity
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Upsert``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Insert or Update all documents based on _id key. Returns entity count that was inserted
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Delete``1(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Delete entity based on _id key
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.DeleteMany``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Delete entity based on Query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.DeleteMany``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Delete entity based on predicate filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Query``1(System.String)">
            <summary>
            Returns new instance of LiteQueryable that provides all method to query any entity inside collection. Use fluent API to apply filter/includes an than run any execute command, like ToList() or First()
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.EnsureIndex``1(System.String,Internal.LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.EnsureIndex``1(Internal.LiteDB.BsonExpression,System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already. Returns true if index was created or false if already exits
            </summary>
            <param name="expression">Create a custom expression function to be indexed</param>
            <param name="unique">If is a unique index</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.EnsureIndex``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.EnsureIndex``2(System.String,System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Boolean,System.String)">
            <summary>
            Create a new permanent index in all documents inside this collections if index not exists already.
            </summary>
            <param name="name">Index name - unique name for this collection</param>
            <param name="keySelector">LinqExpression to be converted into BsonExpression to be indexed</param>
            <param name="unique">Create a unique keys index?</param>
            <param name="collectionName">Collection Name</param>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.SingleById``1(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Search for a single instance of T by Id. Shortcut from Query.SingleById
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Fetch``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).ToList();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Fetch``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).ToList();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.First``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).First();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.First``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).First();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.FirstOrDefault``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).FirstOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.FirstOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).FirstOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Single``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).Single();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.Single``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).Single();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.SingleOrDefault``1(Internal.LiteDB.BsonExpression,System.String)">
            <summary>
            Execute Query[T].Where(predicate).SingleOrDefault();
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteRepository.SingleOrDefault``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.String)">
            <summary>
            Execute Query[T].Where(predicate).SingleOrDefault();
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonCtorAttribute">
            <summary>
            Indicate which constructor method will be used in this entity
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonFieldAttribute">
            <summary>
            Set a name to this property in BsonDocument
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonIdAttribute">
            <summary>
            Indicate that property will be used as BsonDocument Id
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonIgnoreAttribute">
            <summary>
            Indicate that property will not be persist in Bson serialization
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonRefAttribute">
            <summary>
            Indicate that field are not persisted inside this document but it's a reference for another document (DbRef)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonMapper">
            <summary>
            Class that converts your entity class to/from BsonDocument
            If you prefer use a new instance of BsonMapper (not Global), be sure cache this instance for better performance
            Serialization rules:
                - Classes must be "public" with a public constructor (without parameters)
                - Properties must have public getter (can be read-only)
                - Entity class must have Id property, [ClassName]Id property or [BsonId] attribute
                - No circular references
                - Fields are not valid
                - IList, Array supports
                - IDictionary supports (Key must be a simple datatype - converted by ChangeType)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper._entities">
            <summary>
            Mapping cache between Class/BsonDocument
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper._customSerializer">
            <summary>
            Map serializer/deserialize for custom types
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper._typeInstantiator">
            <summary>
            Type instantiator function to support IoC
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper._typeNameBinder">
            <summary>
            Type name binder to control how type names are serialized to BSON documents
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper.Global">
            <summary>
            Global instance used when no BsonMapper are passed in LiteDatabase ctor
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper.ResolveFieldName">
            <summary>
            A resolver name for field
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.SerializeNullValues">
            <summary>
            Indicate that mapper do not serialize null values (default false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.TrimWhitespace">
            <summary>
            Apply .Trim() in strings when serialize (default true)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.EmptyStringToNull">
            <summary>
            Convert EmptyString to Null (default true)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.EnumAsInteger">
            <summary>
            Get/Set if enum must be converted into Integer value. If false, enum will be converted into String value.
            MUST BE "true" to support LINQ expressions (default false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.IncludeFields">
            <summary>
            Get/Set that mapper must include fields (default: false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.IncludeNonPublic">
            <summary>
            Get/Set that mapper must include non public (private, protected and internal) (default: false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.MaxDepth">
            <summary>
            Get/Set maximum depth for nested object (default 20)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper.ResolveMember">
            <summary>
            A custom callback to change MemberInfo behavior when converting to MemberMapper.
            Use mapper.ResolveMember(Type entity, MemberInfo property, MemberMapper documentMappedField)
            Set FieldName to null if you want remove from mapped document
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonMapper.ResolveCollectionName">
            <summary>
            Custom resolve name collection based on Type 
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.RegisterType``1(System.Func{``0,Internal.LiteDB.BsonValue},System.Func{Internal.LiteDB.BsonValue,``0})">
            <summary>
            Register a custom type serializer/deserialize function
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.RegisterType(System.Type,System.Func{System.Object,Internal.LiteDB.BsonValue},System.Func{Internal.LiteDB.BsonValue,System.Object})">
            <summary>
            Register a custom type serializer/deserialize function
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.Entity``1">
            <summary>
            Map your entity class to BsonDocument using fluent API
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Resolve LINQ expression into BsonExpression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetIndexExpression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Resolve LINQ expression into BsonExpression (for index only)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.UseCamelCase">
            <summary>
            Use lower camel case resolution for convert property names to field names
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.UseLowerCaseDelimiter(System.Char)">
            <summary>
            Uses lower camel case with delimiter to convert property names to field names
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetEntityMapper(System.Type)">
            <summary>
            Get property mapper between typed .NET class and BsonDocument - Cache results
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.BuildAddEntityMapper(System.Type)">
            <summary>
            Use this method to override how your class can be, by default, mapped from entity to Bson document.
            Returns an EntityMapper from each requested Type
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetIdMember(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})">
            <summary>
            Gets MemberInfo that refers to Id from a document object.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetTypeMembers(System.Type)">
            <summary>
            Returns all member that will be have mapper between POCO class to document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.GetTypeCtor(Internal.LiteDB.EntityMapper)">
            <summary>
            Get best construtor to use to initialize this entity.
            - Look if contains [BsonCtor] attribute
            - Look for parameterless ctor
            - Look for first contructor with parameter and use BsonDocument to send RawValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.RegisterDbRef(Internal.LiteDB.BsonMapper,Internal.LiteDB.MemberMapper,Internal.LiteDB.ITypeNameBinder,System.String)">
            <summary>
            Register a property mapper as DbRef to serialize/deserialize only document reference _id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.RegisterDbRefItem(Internal.LiteDB.BsonMapper,Internal.LiteDB.MemberMapper,Internal.LiteDB.ITypeNameBinder,System.String)">
            <summary>
            Register a property as a DbRef - implement a custom Serialize/Deserialize actions to convert entity to $id, $ref only
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.RegisterDbRefList(Internal.LiteDB.BsonMapper,Internal.LiteDB.MemberMapper,Internal.LiteDB.ITypeNameBinder,System.String)">
            <summary>
            Register a property as a DbRefList - implement a custom Serialize/Deserialize actions to convert entity to $id, $ref only
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonMapper.DeserializationCallback">
            <summary>
            Delegate for deserialization callback.
            </summary>
            <param name="sender">The BsonMapper instance that triggered the deserialization.</param>
            <param name="target">The target type for deserialization.</param>
            <param name="value">The BsonValue to be deserialized.</param>
            <returns>The deserialized BsonValue.</returns>
        </member>
        <member name="P:Internal.LiteDB.BsonMapper.OnDeserialization">
            <summary>
            Gets called before deserialization of a value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.ToObject(System.Type,Internal.LiteDB.BsonDocument)">
            <summary>
            Deserialize a BsonDocument to entity class
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.ToObject``1(Internal.LiteDB.BsonDocument)">
            <summary>
            Deserialize a BsonDocument to entity class
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.Deserialize``1(Internal.LiteDB.BsonValue)">
            <summary>
            Deserialize a BsonValue to .NET object typed in T
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.Deserialize(System.Type,Internal.LiteDB.BsonValue)">
            <summary>
            Deserilize a BsonValue to .NET object based on type parameter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.ToDocument(System.Type,System.Object)">
            <summary>
            Serialize a entity class to BsonDocument
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.ToDocument``1(``0)">
            <summary>
            Serialize a entity class to BsonDocument
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.Serialize``1(``0)">
            <summary>
            Serialize to BsonValue any .NET object based on T type (using mapping rules)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonMapper.Serialize(System.Type,System.Object)">
            <summary>
            Serialize to BsonValue any .NET object based on type parameter (using mapping rules)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.EntityBuilder`1">
            <summary>
            Helper class to modify your entity mapping to document. Can be used instead attribute decorates
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
            <summary>
            Define which property will not be mapped to document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.Field``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Define a custom name for a property when mapping to document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.Id``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.Boolean)">
            <summary>
            Define which property is your document id (primary key). Define if this property supports auto-id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.Ctor(System.Func{Internal.LiteDB.BsonDocument,`0})">
            <summary>
            Define which property is your document id (primary key). Define if this property supports auto-id
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.DbRef``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
            <summary>
            Define a subdocument (or a list of) as a reference
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityBuilder`1.GetMember``2(System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{Internal.LiteDB.MemberMapper})">
            <summary>
            Get a property based on a expression. Eg.: 'x => x.UserId' return string "UserId"
            </summary>
        </member>
        <member name="T:Internal.LiteDB.EntityMapper">
            <summary>
            Class to map entity class to BsonDocument
            </summary>
        </member>
        <member name="P:Internal.LiteDB.EntityMapper.ForType">
            <summary>
            Indicate which Type this entity mapper is
            </summary>
        </member>
        <member name="P:Internal.LiteDB.EntityMapper.Members">
            <summary>
            List all type members that will be mapped to/from BsonDocument
            </summary>
        </member>
        <member name="P:Internal.LiteDB.EntityMapper.Id">
            <summary>
            Indicate which member is _id
            </summary>
        </member>
        <member name="P:Internal.LiteDB.EntityMapper.CreateInstance">
            <summary>
            Get/Set a custom ctor function to create new entity instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.EntityMapper.GetMember(System.Linq.Expressions.Expression)">
            <summary>
            Resolve expression to get member mapped
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitLambda``1(System.Linq.Expressions.Expression{``0})">
            <summary>
            Visit :: `x => x.Customer.Name`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitInvocation(System.Linq.Expressions.InvocationExpression)">
            <summary>
            Visit lambda invocation
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitParameter(System.Linq.Expressions.ParameterExpression)">
            <summary>
            Visit :: x => `x`.Customer.Name
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitMember(System.Linq.Expressions.MemberExpression)">
            <summary>
            Visit :: x => x.`Customer.Name`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)">
            <summary>
            Visit :: x => x.Customer.Name.`ToUpper()`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitConstant(System.Linq.Expressions.ConstantExpression)">
            <summary>
            Visit :: x => x.Age + `10` (will create parameter:  `p0`, `p1`, ...)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitUnary(System.Linq.Expressions.UnaryExpression)">
            <summary>
            Visit :: x => `!x.Active`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitNew(System.Linq.Expressions.NewExpression)">
            <summary>
            Visit :: x => `new { x.Id, x.Name }`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitMemberInit(System.Linq.Expressions.MemberInitExpression)">
            <summary>
            Visit :: x => `new MyClass { Id = 10 }`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitNewArray(System.Linq.Expressions.NewArrayExpression)">
            <summary>
            Visit :: x => `new int[] { 1, 2, 3 }`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitBinary(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit :: x => x.Id `+` 10
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitConditional(System.Linq.Expressions.ConditionalExpression)">
            <summary>
            Visit :: x => `x.Id > 0 ? "ok" : "not-ok"`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitCoalesce(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit :: x => `x.FirstName ?? x.LastName`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitArrayIndex(System.Linq.Expressions.BinaryExpression)">
            <summary>
            Visit :: x => `x.Items[5]`
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.ResolvePattern(System.String,System.Linq.Expressions.Expression,System.Collections.Generic.IList{System.Linq.Expressions.Expression})">
            <summary>
            Resolve string pattern using an object + N arguments. Will write over _builder
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitEnumerablePredicate(System.Linq.Expressions.LambdaExpression)">
            <summary>
            Resolve Enumerable predicate when using Any/All enumerable extensions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.GetOperator(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get string operator from an Binary expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.ResolveMember(System.Reflection.MemberInfo)">
            <summary>
            Returns document field name for some type member
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.IsMethodIndexEval(System.Linq.Expressions.MethodCallExpression,System.Linq.Expressions.Expression@,System.Linq.Expressions.Expression@)">
            <summary>
            Define if this method is index access and must eval index value (do not use parameter)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.VisitAsPredicate(System.Linq.Expressions.Expression,System.Boolean)">
            <summary>
            Visit expression but, if ensurePredicate = true, force expression be a predicate (appending ` = true`)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.Evaluate(System.Linq.Expressions.Expression,System.Type[])">
            <summary>
            Compile and execute expression (can be cached)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExpressionVisitor.TryGetResolver(System.Type,Internal.LiteDB.ITypeResolver@)">
            <summary>
            Try find a Type Resolver for declaring type
            </summary>
        </member>
        <member name="T:Internal.LiteDB.ParameterExpressionVisitor">
            <summary>
            Class used to test in an Expression member expression is based on parameter `x => x.Name` or variable `x => externalVar`
            </summary>
        </member>
        <member name="T:Internal.LiteDB.MemberMapper">
            <summary>
            Internal representation for a .NET member mapped to BsonDocument
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.AutoId">
            <summary>
            If member is Id, indicate that are AutoId
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.MemberName">
            <summary>
            Member name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.DataType">
            <summary>
            Member returns data type
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.FieldName">
            <summary>
            Converted document field name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.Getter">
            <summary>
            Delegate method to get value from entity instance
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.Setter">
            <summary>
            Delegate method to set value to entity instance
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.Serialize">
            <summary>
            When used, can be define a serialization function from entity class to bson value
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.Deserialize">
            <summary>
            When used, can define a deserialization function from bson value
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.IsDbRef">
            <summary>
            Is this property an DbRef? Must implement Serialize/Deserialize delegates
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.IsEnumerable">
            <summary>
            Indicate that this property contains an list of elements (IEnumerable)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.UnderlyingType">
            <summary>
            When property is an array of items, gets underlying type (otherwise is same type of PropertyType)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.MemberMapper.IsIgnore">
            <summary>
            Is this property ignore
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Reflection">
            <summary>
            Helper class to get entity properties and map as BsonValue
            </summary>
            <summary>
            Using Expressions is the easy and fast way to create classes, structs, get/set fields/properties. But it not works in NET35
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.CreateInstance(System.Type)">
            <summary>
            Create a new instance from a Type
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Reflection.ConvertType">
            <summary>
            Get a list from all acepted data type to property converter BsonValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.UnderlyingTypeOf(System.Type)">
            <summary>
            Get underlying get - using to get inner Type from Nullable type
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.GetListItemType(System.Type)">
            <summary>
            Get item type from a generic List or Array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.IsEnumerable(System.Type)">
            <summary>
            Returns true if Type is any kind of Array/IList/ICollection/....
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.IsSimpleType(System.Type)">
            <summary>
            Return if type is simple value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.IsCollection(System.Type)">
            <summary>
            Returns true if Type implement ICollection (like List, HashSet)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.IsDictionary(System.Type)">
            <summary>
            Returns if Type is a generic Dictionary
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.SelectMember(System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo},System.Func{System.Reflection.MemberInfo,System.Boolean}[])">
            <summary>
            Select member from a list of member using predicate order function to select
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.MethodName(System.Reflection.MethodInfo,System.Int32)">
            <summary>
            Get a friendly method name with parameter types
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Reflection.FriendlyTypeName(System.Type)">
            <summary>
            Get C# friendly primitive type names
            </summary>
        </member>
        <member name="F:Internal.LiteDB.DefaultTypeNameBinder._disallowedTypeNames">
            <summary>
            Contains all well known vulnerable types according to ysoserial.net
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SharedEngine.OpenDatabase">
            <summary>
            Open database in safe mode
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SharedEngine.CloseDatabase">
            <summary>
            Dequeue stack and dispose database on empty stack
            </summary>
        </member>
        <member name="T:Internal.LiteDB.SqlParser">
            <summary>
            Internal class to parse and execute sql-like commands
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseBegin">
            <summary>
            BEGIN [ TRANS | TRANSACTION ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseCheckpoint">
            <summary>
            CHECKPOINT
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseCommit">
            <summary>
            COMMIT [ TRANS | TRANSACTION ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseCreate">
            <summary>
            CREATE [ UNIQUE ] INDEX {indexName} ON {collection} ({indexExpr})
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseDelete">
            <summary>
            DELETE {collection} WHERE {whereExpr}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseDrop">
            <summary>
            DROP INDEX {collection}.{indexName}
            DROP COLLECTION {collection}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseInsert">
            <summary>
            INSERT INTO {collection} VALUES {doc0} [, {docN}] [ WITH ID={type} ] ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseWithAutoId">
            <summary>
            Parse :[type] for AutoId (just after collection name)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseListOfExpressions">
            <summary>
            {expr0}, {expr1}, ..., {exprN}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseListOfDocuments">
            <summary>
            {doc0}, {doc1}, ..., {docN} {EOF|;}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParsePragma">
            <summary>
            PRAGMA [DB_PARAM] = VALUE
            PRAGMA [DB_PARAM]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseRebuild">
            <summary>
            SHRINK
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseRename">
            <summary>
            RENAME COLLECTION {collection} TO {newName}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseRollback">
            <summary>
            ROLLBACK [ TRANS | TRANSACTION ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseSelect">
            <summary>
            [ EXPLAIN ]
               SELECT {selectExpr}
               [ INTO {newcollection|$function} [ : {autoId} ] ]
               [ FROM {collection|$function} ]
            [ INCLUDE {pathExpr0} [, {pathExprN} ]
              [ WHERE {filterExpr} ]
              [ GROUP BY {groupByExpr} ]
             [ HAVING {filterExpr} ]
              [ ORDER BY {orderByExpr} [ ASC | DESC ] ]
              [ LIMIT {number} ]
             [ OFFSET {number} ]
                [ FOR UPDATE ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseCollection(Internal.LiteDB.Tokenizer)">
            <summary>
            Read collection name and parameter (in case of system collections)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseCollection(Internal.LiteDB.Tokenizer,System.String@,Internal.LiteDB.BsonValue@)">
            <summary>
            Read collection name and parameter (in case of system collections)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.SqlParser.ParseUpdate">
            <summary>
            UPDATE - update documents - if used with {key} = {exprValue} will merge current document with this fields
                     if used with { key: value } will replace current document with new document
             UPDATE {collection}
                SET [{key} = {exprValue}, {key} = {exprValue} | { newDoc }]
            [ WHERE {whereExpr} ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.FindById(`0)">
            <summary>
            Find a file inside datafile and returns LiteFileInfo instance. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Find(Internal.LiteDB.BsonExpression)">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Find(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Find(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Find(System.Linq.Expressions.Expression{System.Func{Internal.LiteDB.LiteFileInfo{`0},System.Boolean}})">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.FindAll">
            <summary>
            Find all files inside file collections
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Exists(`0)">
            <summary>
            Returns if a file exisits in database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.OpenWrite(`0,System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Open/Create new file storage and returns linked Stream to write operations.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Upload(`0,System.String,System.IO.Stream,Internal.LiteDB.BsonDocument)">
            <summary>
            Upload a file based on stream data
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Upload(`0,System.String)">
            <summary>
            Upload a file based on file system data
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.SetMetadata(`0,Internal.LiteDB.BsonDocument)">
            <summary>
            Update metadata on a file. File must exist.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.OpenRead(`0)">
            <summary>
            Load data inside storage and returns as Stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Download(`0,System.IO.Stream)">
            <summary>
            Copy all file content to a steam
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Download(`0,System.String,System.Boolean)">
            <summary>
            Copy all file content to a file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ILiteStorage`1.Delete(`0)">
            <summary>
            Delete a file inside datafile and all metadata related
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteFileInfo`1">
            <summary>
            Represents a file inside storage collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteFileInfo`1.OpenRead">
            <summary>
            Open file stream to read from database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteFileInfo`1.OpenWrite">
            <summary>
            Open file stream to write to database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteFileInfo`1.CopyTo(System.IO.Stream)">
            <summary>
            Copy file content to another stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteFileInfo`1.SaveAs(System.String,System.Boolean)">
            <summary>
            Save file content to a external file
            </summary>
        </member>
        <member name="F:Internal.LiteDB.LiteFileStream`1.MAX_CHUNK_SIZE">
            <summary>
            Number of bytes on each chunk document to store
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteFileStream`1.FileInfo">
            <summary>
            Get file information
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteFileStream`1.WriteChunks(System.Boolean)">
            <summary>
            Consume all _buffer bytes and write to chunk collection
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteStorage`1">
            <summary>
            Storage is a special collection to store files and streams.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.FindById(`0)">
            <summary>
            Find a file inside datafile and returns LiteFileInfo instance. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Find(Internal.LiteDB.BsonExpression)">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Find(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Find(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Find(System.Linq.Expressions.Expression{System.Func{Internal.LiteDB.LiteFileInfo{`0},System.Boolean}})">
            <summary>
            Find all files that match with predicate expression.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.FindAll">
            <summary>
            Find all files inside file collections
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Exists(`0)">
            <summary>
            Returns if a file exisits in database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.OpenWrite(`0,System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Open/Create new file storage and returns linked Stream to write operations.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Upload(`0,System.String,System.IO.Stream,Internal.LiteDB.BsonDocument)">
            <summary>
            Upload a file based on stream data
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Upload(`0,System.String)">
            <summary>
            Upload a file based on file system data
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.SetMetadata(`0,Internal.LiteDB.BsonDocument)">
            <summary>
            Update metadata on a file. File must exist.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.OpenRead(`0)">
            <summary>
            Load data inside storage and returns as Stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Download(`0,System.IO.Stream)">
            <summary>
            Copy all file content to a steam
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Download(`0,System.String,System.Boolean)">
            <summary>
            Copy all file content to a file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LiteStorage`1.Delete(`0)">
            <summary>
            Delete a file inside datafile and all metadata related
            </summary>
        </member>
        <member name="T:Internal.LiteDB.ConnectionString">
            <summary>
            Manage ConnectionString to connect and create databases. Connection string are NameValue using Name1=Value1; Name2=Value2
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Connection">
            <summary>
            "connection": Return how engine will be open (default: Direct)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Filename">
            <summary>
            "filename": Full path or relative path from DLL directory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Password">
            <summary>
            "password": Database password used to encrypt/decypted data pages
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.InitialSize">
            <summary>
            "initial size": If database is new, initialize with allocated space - support KB, MB, GB (default: 0)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.ReadOnly">
            <summary>
            "readonly": Open datafile in readonly mode (default: false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Upgrade">
            <summary>
            "upgrade": Check if data file is an old version and convert before open (default: false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.AutoRebuild">
            <summary>
            "auto-rebuild": If last close database exception result a invalid data state, rebuild datafile on next open (default: false)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Collation">
            <summary>
            "collation": Set default collaction when database creation (default: "[CurrentCulture]/IgnoreCase")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ConnectionString.#ctor">
            <summary>
            Initialize empty connection string
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ConnectionString.#ctor(System.String)">
            <summary>
            Initialize connection string parsing string in "key1=value1;key2=value2;...." format or only "filename" as default (when no ; char found)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ConnectionString.Item(System.String)">
            <summary>
            Get value from parsed connection string. Returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ConnectionString.CreateEngine(System.Action{Internal.LiteDB.Engine.EngineSettings})">
            <summary>
            Create ILiteEngine instance according string connection parameters. For now, only Local/Shared are supported
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Query">
            <summary>
            Class is a result from optimized QueryBuild. Indicate how engine must run query - there is no more decisions to engine made, must only execute as query was defined
            </summary>
            <summary>
            Represent full query options
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Query.Ascending">
            <summary>
            Indicate when a query must execute in ascending order
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Query.Descending">
            <summary>
            Indicate when a query must execute in descending order
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.All">
            <summary>
            Returns all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.All(System.Int32)">
            <summary>
            Returns all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.All(System.String,System.Int32)">
            <summary>
            Returns all documents
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.EQ(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents that value are equals to value (=)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.LT(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents that value are less than value (&lt;)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.LTE(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents that value are less than or equals value (&lt;=)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.GT(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all document that value are greater than value (&gt;)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.GTE(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents that value are greater than or equals value (&gt;=)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Between(System.String,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all document that values are between "start" and "end" values (BETWEEN)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.StartsWith(System.String,System.String)">
            <summary>
            Returns all documents that starts with value (LIKE)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Contains(System.String,System.String)">
            <summary>
            Returns all documents that contains value (CONTAINS) - string Contains
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Not(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents that are not equals to value (not equals)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.In(System.String,Internal.LiteDB.BsonArray)">
            <summary>
            Returns all documents that has value in values list (IN)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.In(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Returns all documents that has value in values list (IN)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.In(System.String,System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns all documents that has value in values list (IN)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Any">
            <summary>
            Get all operands to works with array or enumerable values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.And(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Returns document that exists in BOTH queries results. If both queries has indexes, left query has index preference (other side will be run in full scan)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.And(Internal.LiteDB.BsonExpression[])">
            <summary>
            Returns document that exists in ALL queries results.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Or(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Returns documents that exists in ANY queries results (Union).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.Or(Internal.LiteDB.BsonExpression[])">
            <summary>
            Returns document that exists in ANY queries results (Union).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Query.ToSQL(System.String)">
            <summary>
            [ EXPLAIN ]
               SELECT {selectExpr}
               [ INTO {newcollection|$function} [ : {autoId} ] ]
               [ FROM {collection|$function} ]
            [ INCLUDE {pathExpr0} [, {pathExprN} ]
              [ WHERE {filterExpr} ]
              [ GROUP BY {groupByExpr} ]
             [ HAVING {filterExpr} ]
              [ ORDER BY {orderByExpr} [ ASC | DESC ] ]
              [ LIMIT {number} ]
             [ OFFSET {number} ]
                [ FOR UPDATE ]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.EQ(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields is equal to value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.LT(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are less tha to value (&lt;)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.LTE(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are less than or equals value (&lt;=)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.GT(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are greater than value (&gt;)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.GTE(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are greater than or equals value (&gt;=)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.Between(System.String,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are between "start" and "end" values (BETWEEN)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.StartsWith(System.String,System.String)">
            <summary>
            Returns all documents for which at least one value in arrayFields starts with value (LIKE)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.QueryAny.Not(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Returns all documents for which at least one value in arrayFields are not equals to value (not equals)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonAutoId">
            <summary>
            All supported BsonTypes supported in AutoId insert operation
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonDocument.RawId">
            <summary>
            Get/Set position of this document inside database. It's filled when used in Find operation.
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonDocument.Item(System.String)">
            <summary>
            Get/Set a field for document. Fields are case sensitive
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonDocument.GetElements">
            <summary>
            Get all document elements - Return "_id" as first of all (if exists)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonType">
            <summary>
            All supported BsonTypes in sort order
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonValue">
            <summary>
            Represent a Bson Value used in BsonDocument
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonValue.Null">
            <summary>
            Represent a Null bson type
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonValue.MinValue">
            <summary>
            Represent a MinValue bson type
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonValue.MaxValue">
            <summary>
            Represent a MaxValue bson type
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonValue.DbRef(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Create a new document used in DbRef => { $id: id, $ref: collection }
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonValue.Type">
            <summary>
            Indicate BsonType of this BsonValue
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonValue.RawValue">
            <summary>
            Get internal .NET value object
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonValue.Item(System.String)">
            <summary>
            Get/Set a field for document. Fields are case sensitive - Works only when value are document
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonValue.Item(System.Int32)">
            <summary>
            Get/Set value in array position. Works only when value are array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonValue.GetBytesCount(System.Boolean)">
            <summary>
            Returns how many bytes this BsonValue will consume when converted into binary BSON
            If recalc = false, use cached length value (from Array/Document only)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonValue.GetBytesCountElement(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Get how many bytes one single element will used in BSON format
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonSerializer">
            <summary>
            Class to call method for convert BsonDocument to/from byte[] - based on http://bsonspec.org/spec.html
            In v5 this class use new BufferRead/Writer to work with byte[] segments. This class are just a shortchut
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonSerializer.Serialize(Internal.LiteDB.BsonDocument)">
            <summary>
            Serialize BsonDocument into a binary array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonSerializer.Deserialize(System.Byte[],System.Boolean,System.Collections.Generic.HashSet{System.String})">
            <summary>
            Deserialize binary data into BsonDocument
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonDataReader">
            <summary>
            Class to read void, one or a collection of BsonValues. Used in SQL execution commands and query returns. Use local data source (IEnumerable[BsonDocument])
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonDataReader.#ctor">
            <summary>
            Initialize with no value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonDataReader.#ctor(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Initialize with a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonDataReader.#ctor(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},System.String,Internal.LiteDB.Engine.EngineState)">
            <summary>
            Initialize with an IEnumerable data source
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonDataReader.HasValues">
            <summary>
            Return if has any value in result
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonDataReader.Current">
            <summary>
            Return current value
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonDataReader.Collection">
            <summary>
            Return collection name
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonDataReader.Read">
            <summary>
            Move cursor to next result. Returns true if read was possible
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonDataReaderExtensions">
            <summary>
            Implement some Enumerable methods to IBsonDataReader
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonExpressionEnumerableDelegate">
            <summary>
            Delegate function to get compiled enumerable expression
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonExpressionScalarDelegate">
            <summary>
            Delegate function to get compiled scalar expression
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonExpression">
            <summary>
            Compile and execute string expressions using BsonDocuments. Used in all document manipulation (transform, filter, indexes, updates). See https://github.com/mbdavid/LiteDB/wiki/Expressions
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Source">
            <summary>
            Get formatted expression
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Type">
            <summary>
            Indicate expression type
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsImmutable">
            <summary>
            If true, this expression do not change if same document/paramter are passed (only few methods change - like NOW() - or parameters)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Parameters">
            <summary>
            Get/Set parameter values that will be used on expression execution
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Left">
            <summary>
            In predicate expressions, indicate Left side
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Right">
            <summary>
            In predicate expressions, indicate Rigth side
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.UseSource">
            <summary>
            Get/Set this expression (or any inner expression) use global Source (*)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Expression">
            <summary>
            Get transformed LINQ expression
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Fields">
            <summary>
            Fill this hashset with all fields used in root level of document (be used to partial deserialize) - "$" means all fields
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsScalar">
            <summary>
            Indicate if this expressions returns a single value or IEnumerable value
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsPredicate">
            <summary>
            Indicate that expression evaluate to TRUE or FALSE (=, >, ...). OR and AND are not considered Predicate expressions
            Predicate expressions must have Left/Right expressions
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsIndexable">
            <summary>
            This expression can be indexed? To index some expression must contains fields (at least 1) and
            must use only immutable methods and no parameters
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsValue">
            <summary>
            This expression has no dependency of BsonDocument so can be used as user value (when select index)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.IsANY">
            <summary>
            Indicate when predicate expression uses ANY keywork for filter array items
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpression._funcEnumerable">
            <summary>
            Compiled Expression into a function to be executed: func(source[], root, current, parameters)[]
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpression._funcScalar">
            <summary>
            Compiled Expression into a scalar function to be executed: func(source[], root, current, parameters)1
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.DefaultFieldName">
            <summary>
            Get default field name when need convert simple BsonValue into BsonDocument
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.#ctor">
            <summary>
            Only internal ctor (from BsonParserExpression)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.op_Implicit(Internal.LiteDB.BsonExpression)~System.String">
            <summary>
            Implicit string converter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.op_Implicit(System.String)~Internal.LiteDB.BsonExpression">
            <summary>
            Implicit string converter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Execute(Internal.LiteDB.Collation)">
            <summary>
            Execute expression with an empty document (used only for resolve math/functions).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Execute(Internal.LiteDB.BsonDocument,Internal.LiteDB.Collation)">
            <summary>
            Execute expression and returns IEnumerable values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Execute(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.Collation)">
            <summary>
            Execute expression and returns IEnumerable values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Execute(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonDocument,Internal.LiteDB.BsonValue,Internal.LiteDB.Collation)">
            <summary>
            Execute expression and returns IEnumerable values - returns NULL if no elements
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.GetIndexKeys(Internal.LiteDB.BsonDocument,Internal.LiteDB.Collation)">
            <summary>
            Execute expression over document to get all index keys. 
            Return distinct value (no duplicate key to same document)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.ExecuteScalar(Internal.LiteDB.Collation)">
            <summary>
            Execute scalar expression with an blank document and empty source (used only for resolve math/functions).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.ExecuteScalar(Internal.LiteDB.BsonDocument,Internal.LiteDB.Collation)">
            <summary>
            Execute scalar expression over single document and return a single value (or BsonNull when empty). Throws exception if expression are not scalar expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.ExecuteScalar(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.Collation)">
            <summary>
            Execute scalar expression over multiple documents and return a single value (or BsonNull when empty). Throws exception if expression are not scalar expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.ExecuteScalar(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonDocument,Internal.LiteDB.BsonValue,Internal.LiteDB.Collation)">
            <summary>
            Execute expression and returns IEnumerable values - returns NULL if no elements
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Create(System.String)">
            <summary>
            Parse string and create new instance of BsonExpression - can be cached
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Create(System.String,Internal.LiteDB.BsonValue[])">
            <summary>
            Parse string and create new instance of BsonExpression - can be cached
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Create(System.String,Internal.LiteDB.BsonDocument)">
            <summary>
            Parse string and create new instance of BsonExpression - can be cached
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.Create(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonExpressionParserMode,Internal.LiteDB.BsonDocument)">
            <summary>
            Parse tokenizer and create new instance of BsonExpression - for now, do not use cache
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.ParseAndCompile(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonExpressionParserMode,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Parse and compile string expression and return BsonExpression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.SetParameters(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonDocument)">
            <summary>
            Set same parameter referente to all expression child (left, right)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpression.Root">
            <summary>
            Get root document $ expression
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Methods">
            <summary>
            Get all registered methods for BsonExpressions
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpression._methods">
            <summary>
            Load all static methods from BsonExpressionMethods class. Use a dictionary using name + parameter count
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.GetMethod(System.String,System.Int32)">
            <summary>
            Get expression method with same name and same parameter - return null if not found
            </summary>
        </member>
        <member name="P:Internal.LiteDB.BsonExpression.Functions">
            <summary>
            Get all registered functions for BsonExpressions
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpression._functions">
            <summary>
            Load all static methods from BsonExpressionFunctions class. Use a dictionary using name + parameter count
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpression.GetFunction(System.String,System.Int32)">
            <summary>
            Get expression function with same name and same parameter - return null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.COUNT(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Count all values. Return a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MIN(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Find minimal value from all values (number values only). Return a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MAX(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Find max value from all values (number values only). Return a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.FIRST(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns first value from an list of values (scan all source)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LAST(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns last value from an list of values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.AVG(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Find average value from all values (number values only). Return a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SUM(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Sum all values (number values only). Return a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.ANY(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Return "true" if inner collection contains any result
            ANY($.items[*])
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MINVALUE">
            <summary>
            Return a new instance of MINVALUE
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.OBJECTID">
            <summary>
            Create a new OBJECTID value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.GUID">
            <summary>
            Create a new GUID value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.NOW">
            <summary>
            Return a new DATETIME (Now)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.NOW_UTC">
            <summary>
            Return a new DATETIME (UtcNow)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.TODAY">
            <summary>
            Return a new DATETIME (Today)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MAXVALUE">
            <summary>
            Return a new instance of MAXVALUE
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.INT32(Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into INT32. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.INT64(Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into INT64. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DOUBLE(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DOUBLE. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DOUBLE(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DOUBLE. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DECIMAL(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DECIMAL. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DECIMAL(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DECIMAL. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.STRING(Internal.LiteDB.BsonValue)">
            <summary>
            Convert value into STRING
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.ARRAY(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Return an array from list of values. Support multiple values but returns a single value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.BINARY(Internal.LiteDB.BsonValue)">
            <summary>
            Return an binary from string (base64) values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.OBJECTID(Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into OBJECTID. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.GUID(Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into GUID. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.BOOLEAN(Internal.LiteDB.BsonValue)">
            <summary>
            Return converted value into BOOLEAN value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DATETIME. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DATETIME. Returns empty if not possible to convert. Support custom culture info
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME_UTC(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DATETIME. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME_UTC(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Convert values into DATETIME. Returns empty if not possible to convert
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Create a new instance of DATETIME based on year, month, day (local time)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATETIME_UTC(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Create a new instance of DATETIME based on year, month, day (UTC)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_MINVALUE(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is MINVALUE
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_NULL(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is NULL
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_INT32(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is INT32
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_INT64(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is INT64
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_DOUBLE(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is DOUBLE
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_DECIMAL(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is DECIMAL
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_NUMBER(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is NUMBER (int, double, decimal)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_STRING(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is STRING
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_DOCUMENT(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is DOCUMENT
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_ARRAY(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is ARRAY
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_BINARY(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is BINARY
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_OBJECTID(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is OBJECTID
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_GUID(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is GUID
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_BOOLEAN(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is BOOLEAN
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_DATETIME(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is DATETIME
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_MAXVALUE(Internal.LiteDB.BsonValue)">
            <summary>
            Return true if value is DATE (alias to DATETIME)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.INT(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to INT32(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LONG(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to INT64(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.BOOL(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to BOOLEAN(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATE(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue)">
            <summary>
            Alias to DATETIME(values) and DATETIME_UTC(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_INT(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to IS_INT32(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_LONG(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to IS_INT64(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_BOOL(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to IS_BOOLEAN(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_DATE(Internal.LiteDB.BsonValue)">
            <summary>
            Alias to IS_DATE(values)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.YEAR(Internal.LiteDB.BsonValue)">
            <summary>
            Get year from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MONTH(Internal.LiteDB.BsonValue)">
            <summary>
            Get month from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DAY(Internal.LiteDB.BsonValue)">
            <summary>
            Get day from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.HOUR(Internal.LiteDB.BsonValue)">
            <summary>
            Get hour from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MINUTE(Internal.LiteDB.BsonValue)">
            <summary>
            Get minute from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SECOND(Internal.LiteDB.BsonValue)">
            <summary>
            Get seconds from date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATEADD(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Add an interval to date. Use dateInterval: "y" (or "year"), "M" (or "month"), "d" (or "day"), "h" (or "hour"), "m" (or "minute"), "s" or ("second")
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DATEDIFF(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns an interval about 2 dates. Use dateInterval: "y|year", "M|month", "d|day", "h|hour", "m|minute", "s|second"
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.TO_LOCAL(Internal.LiteDB.BsonValue)">
            <summary>
            Convert UTC date into LOCAL date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.TO_UTC(Internal.LiteDB.BsonValue)">
            <summary>
            Convert LOCAL date into UTC date
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.ABS(Internal.LiteDB.BsonValue)">
            <summary>
            Apply absolute value (ABS) method in all number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.ROUND(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Round number method in all number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.POW(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Implement POWER (x and y)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.JSON(Internal.LiteDB.BsonValue)">
            <summary>
            Parse a JSON string into a new BsonValue
            JSON('{a:1}') = {a:1}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.EXTEND(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Create a new document and copy all properties from source document. Then copy properties (overritting if need) extend document
            Always returns a new document!
            EXTEND($, {a: 2}) = {_id:1, a: 2}
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.ITEMS(Internal.LiteDB.BsonValue)">
            <summary>
            Convert an array into IEnuemrable of values - If not array, returns as single yield value
            ITEMS([1, 2, null]) = 1, 2, null
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.CONCAT(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Concatenates 2 sequences into a new single sequence
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.KEYS(Internal.LiteDB.BsonValue)">
            <summary>
            Get all KEYS names from a document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.VALUES(Internal.LiteDB.BsonValue)">
            <summary>
            Get all values from a document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.OID_CREATIONTIME(Internal.LiteDB.BsonValue)">
            <summary>
            Return CreationTime from ObjectId value - returns null if not an ObjectId
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IIF(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Conditional IF statment. If condition are true, returns TRUE value, otherwise, FALSE value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.COALESCE(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Return first values if not null. If null, returns second value.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LENGTH(Internal.LiteDB.BsonValue)">
            <summary>
            Return length of variant value (valid only for String, Binary, Array or Document [keys])
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.TOP(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},Internal.LiteDB.BsonValue)">
            <summary>
            Returns the first num elements of values.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.UNION(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns the union of the two enumerables.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.EXCEPT(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns the set difference between the two enumerables.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.DISTINCT(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Returns a unique list of items
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.RANDOM">
            <summary>
            Return a random int value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.RANDOM(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Return a ranom int value inside this min/max values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LOWER(Internal.LiteDB.BsonValue)">
            <summary>
            Return lower case from string value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.UPPER(Internal.LiteDB.BsonValue)">
            <summary>
            Return UPPER case from string value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LTRIM(Internal.LiteDB.BsonValue)">
            <summary>
            Apply Left TRIM (start) from string value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.RTRIM(Internal.LiteDB.BsonValue)">
            <summary>
            Apply Right TRIM (end) from string value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.TRIM(Internal.LiteDB.BsonValue)">
            <summary>
            Apply TRIM from string value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.INDEXOF(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.INDEXOF(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Reports the zero-based index of the first occurrence of the specified string in this instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SUBSTRING(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns substring from string value using index and length (zero-based)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SUBSTRING(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns substring from string value using index and length (zero-based)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.REPLACE(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Returns replaced string changing oldValue with newValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.LPAD(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Return value string with left padding
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.RPAD(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Return value string with right padding
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SPLIT(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Slit value string based on separator 
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.SPLIT(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Slit value string based on regular expression pattern
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.FORMAT(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Return format value string using format definition (same as String.Format("{0:~}", values)).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.JOIN(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Join all values into a single string with ',' separator.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.JOIN(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue},Internal.LiteDB.BsonValue)">
            <summary>
            Join all values into a single string with a string separator
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.IS_MATCH(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if value is match with regular expression pattern
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionMethods.MATCH(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Apply regular expression pattern over value to get group data. Return null if not found
            </summary>
        </member>
        <member name="T:Internal.LiteDB.VolatileAttribute">
            <summary>
            When a method are decorated with this attribute means that this method are not immutable
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.ADD(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Add two number values. If any side are string, concat left+right as string
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.MINUS(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Minus two number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.MULTIPLY(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Multiply two number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.DIVIDE(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Divide two number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.MOD(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Mod two number values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.EQ(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left and right are same value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.GT(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is greater than right value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.GTE(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is greater or equals than right value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.LT(Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is less than right value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.LTE(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is less or equals than right value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.NEQ(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left and right are not same value. Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.LIKE(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is "SQL LIKE" with right. Returns true or false. Works only when left and right are string
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.BETWEEN(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left is between right-array. Returns true or false. Right value must be an array. Support multiple values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.IN(Internal.LiteDB.Collation,Internal.LiteDB.BsonValue,Internal.LiteDB.BsonValue)">
            <summary>
            Test if left are in any value in right side (when right side is an array). If right side is not an array, just implement a simple Equals (=). Returns true or false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.PARAMETER_PATH(Internal.LiteDB.BsonDocument,System.String)">
            <summary>
            Returns value from root document (used in parameter). Returns same document if name are empty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.MEMBER_PATH(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Return a value from a value as document. If has no name, just return values ($). If value are not a document, do not return anything
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.ARRAY_INDEX(Internal.LiteDB.BsonValue,System.Int32,Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonDocument,Internal.LiteDB.Collation,Internal.LiteDB.BsonDocument)">
            <summary>
            Returns a single value from array according index or expression parameter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.ARRAY_FILTER(Internal.LiteDB.BsonValue,System.Int32,Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonDocument,Internal.LiteDB.Collation,Internal.LiteDB.BsonDocument)">
            <summary>
            Returns all values from array according filter expression or all values (index = MaxValue)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.DOCUMENT_INIT(System.String[],Internal.LiteDB.BsonValue[])">
            <summary>
            Create multi documents based on key-value pairs on parameters. DOCUMENT('_id', 1)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionOperators.ARRAY_INIT(Internal.LiteDB.BsonValue[])">
            <summary>
            Return an array from list of values. Support multiple values but returns a single value
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BsonExpressionParser">
            <summary>
            Compile and execute simple expressions using BsonDocuments. Used in indexes and updates operations. See https://github.com/mbdavid/LiteDB/wiki/Expressions
            </summary>
        </member>
        <member name="F:Internal.LiteDB.BsonExpressionParser._operators">
            <summary>
            Operation definition by methods with defined expression type (operators are in precedence order)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParseFullExpression(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Start parse string into linq expression. Read path, function or base type bson values (int, double, bool, string)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParseSingleExpression(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Start parse string into linq expression. Read path, function or base type bson values (int, double, bool, string)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParseSelectDocumentBuilder(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument)">
            <summary>
            Parse a document builder syntax used in SELECT statment: {expr0} [AS] [{alias}], {expr1} [AS] [{alias}], ...
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParseUpdateDocumentBuilder(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument)">
            <summary>
            Parse a document builder syntax used in UPDATE statment: 
            {key0} = {expr0}, .... will be converted into { key: [expr], ... }
            {key: value} ... return return a new document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseDouble(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonDocument)">
            <summary>
            Try parse double number - return null if not double token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseInt(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonDocument)">
            <summary>
            Try parse int number - return null if not int token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseBool(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonDocument)">
            <summary>
            Try parse bool - return null if not bool token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseNull(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonDocument)">
            <summary>
            Try parse null constant - return null if not null token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseString(Internal.LiteDB.Tokenizer,Internal.LiteDB.BsonDocument)">
            <summary>
            Try parse string with both single/double quote - return null if not string
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseDocument(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse json document - return null if not document token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseSource(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse source documents (when passed) * - return null if not source token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseArray(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse array - return null if not array token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseParameter(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse parameter - return null if not parameter token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseInnerExpression(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse inner expression - return null if not bracket token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseMethodCall(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse method call - return null if not method call
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParsePath(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Parse JSON-Path - return null if not method call
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParsePath(Internal.LiteDB.Tokenizer,System.Linq.Expressions.Expression,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,System.Collections.Generic.HashSet{System.String},System.Boolean@,System.Boolean@,System.Boolean@,System.Text.StringBuilder)">
            <summary>
            Implement a JSON-Path like navigation on BsonDocument. Support a simple range of paths
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.TryParseFunction(Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Try parse FUNCTION methods: MAP, FILTER, SORT, ...
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ParseFunction(System.String,Internal.LiteDB.BsonExpressionType,Internal.LiteDB.Tokenizer,Internal.LiteDB.ExpressionContext,Internal.LiteDB.BsonDocument,Internal.LiteDB.DocumentScope)">
            <summary>
            Parse expression functions, like MAP, FILTER or SORT.
            MAP(items[*] => @.Name)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.NewArray(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Create an array expression with 2 values (used only in BETWEEN statement)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ReadField(Internal.LiteDB.Tokenizer,System.Text.StringBuilder)">
            <summary>
            Get field from simple \w regex or ['comp-lex'] - also, add into source. Can read empty field (root)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ReadKey(Internal.LiteDB.Tokenizer,System.Text.StringBuilder)">
            <summary>
            Read key in document definition with single word or "comp-lex"
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ReadOperant(Internal.LiteDB.Tokenizer)">
            <summary>
            Read next token as Operant with ANY|ALL keyword before - returns null if next token are not an operant
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ConvertToEnumerable(Internal.LiteDB.BsonExpression)">
            <summary>
            Convert scalar expression into enumerable expression using ITEMS(...) method
            Append [*] to path or ITEMS(..) in all others
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.ConvertToArray(Internal.LiteDB.BsonExpression)">
            <summary>
            Convert enumerable expression into array using ARRAY(...) method
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.CreateLogicExpression(Internal.LiteDB.BsonExpressionType,Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Create new logic (AND/OR) expression based in 2 expressions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonExpressionParser.CreateConditionalExpression(Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Create new conditional (IIF) expression. Execute expression only if True or False value
            </summary>
        </member>
        <member name="T:Internal.LiteDB.JsonReader">
            <summary>
            A class that read a json string using a tokenizer (without regex)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.JsonSerializer">
            <summary>
            Static class for serialize/deserialize BsonDocuments into json extended format
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.Serialize(Internal.LiteDB.BsonValue,System.Boolean)">
            <summary>
            Json serialize a BsonValue into a String
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.Serialize(Internal.LiteDB.BsonValue,System.IO.TextWriter,System.Boolean)">
            <summary>
            Json serialize a BsonValue into a TextWriter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.Serialize(Internal.LiteDB.BsonValue,System.Text.StringBuilder,System.Boolean)">
            <summary>
            Json serialize a BsonValue into a StringBuilder
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.Deserialize(System.String)">
            <summary>
            Deserialize a Json string into a BsonValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.Deserialize(System.IO.TextReader)">
            <summary>
            Deserialize a Json TextReader into a BsonValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.DeserializeArray(System.String)">
            <summary>
            Deserialize a json array as an IEnumerable of BsonValue
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonSerializer.DeserializeArray(System.IO.TextReader)">
            <summary>
            Deserialize a json array as an IEnumerable of BsonValue reading on demand TextReader
            </summary>
        </member>
        <member name="P:Internal.LiteDB.JsonWriter.Indent">
            <summary>
            Get/Set indent size
            </summary>
        </member>
        <member name="P:Internal.LiteDB.JsonWriter.Pretty">
            <summary>
            Get/Set if writer must print pretty (with new line/indent)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.JsonWriter.Serialize(Internal.LiteDB.BsonValue)">
            <summary>
            Serialize value into text writer
            </summary>
        </member>
        <member name="T:Internal.LiteDB.ObjectId">
            <summary>
            Represent a 12-bytes BSON type used in document Id
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.Empty">
            <summary>
            A zero 12-bytes ObjectId
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.Timestamp">
            <summary>
            Get timestamp
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.Machine">
            <summary>
            Get machine number
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.Pid">
            <summary>
            Get pid number
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.Increment">
            <summary>
            Get increment
            </summary>
        </member>
        <member name="P:Internal.LiteDB.ObjectId.CreationTime">
            <summary>
            Get creation time
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.#ctor">
            <summary>
            Initializes a new empty instance of the ObjectId class.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.#ctor(System.Int32,System.Int32,System.Int16,System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class from ObjectId vars.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.#ctor(Internal.LiteDB.ObjectId)">
            <summary>
            Initializes a new instance of ObjectId class from another ObjectId.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ObjectId class from hex string.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.#ctor(System.Byte[],System.Int32)">
            <summary>
            Initializes a new instance of the ObjectId class from byte array.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.FromHex(System.String)">
            <summary>
            Convert hex value string in byte array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.Equals(Internal.LiteDB.ObjectId)">
            <summary>
            Checks if this ObjectId is equal to the given object. Returns true
            if the given object is equal to the value of this instance. 
            Returns false otherwise.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.CompareTo(Internal.LiteDB.ObjectId)">
            <summary>
            Compares two instances of ObjectId
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.ToByteArray(System.Byte[],System.Int32)">
            <summary>
            Represent ObjectId as 12 bytes array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ObjectId.NewObjectId">
            <summary>
            Creates a new ObjectId.
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.DiskReader">
            <summary>
            Memory file reader - must call Dipose after use to return reader into pool
            This class is not ThreadSafe - must have 1 instance per thread (get instance from DiskService)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskReader.ReadStream(System.IO.Stream,System.Int64,Internal.LiteDB.BufferSlice)">
            <summary>
            Read bytes from stream into buffer slice
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskReader.NewPage">
            <summary>
            Request for a empty, writable non-linked page (same as DiskService.NewPage)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskReader.Dispose">
            <summary>
            When dispose, return stream to pool
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.DiskService">
            <summary>
            Implement custom fast/in memory mapped disk access
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DiskService.Cache">
            <summary>
            Get memory cache instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.Initialize(System.IO.Stream,Internal.LiteDB.Collation,System.Int64)">
            <summary>
            Create a new empty database (use synced mode)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.GetReader">
            <summary>
            Get a new instance for read data/log pages. This instance are not thread-safe - must request 1 per thread (used in Transaction)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DiskService.MAX_ITEMS_COUNT">
            <summary>
            This method calculates the maximum number of items (documents or IndexNodes) that this database can have.
            The result is used to prevent infinite loops in case of problems with pointers
            Each page support max of 255 items. Use 10 pages offset (avoid empty disk)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.DiscardDirtyPages(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.PageBuffer})">
            <summary>
            When a page are requested as Writable but not saved in disk, must be discard before release
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.DiscardCleanPages(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.PageBuffer})">
            <summary>
            Discard pages that contains valid data and was not modified
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.NewPage">
            <summary>
            Request for a empty, writable non-linked page.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.WriteLogDisk(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.PageBuffer})">
            <summary>
            Write all pages inside log file in a thread safe operation
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.GetFileLength(Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Get file length based on data/log length variables (no direct on disk)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.MarkAsInvalidState">
            <summary>
            Mark a file with a single signal to next open do auto-rebuild. Used only when closing database (after close files)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.ReadFull(Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Read all database pages inside file with no cache using. PageBuffers dont need to be Released
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.WriteDataDisk(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.PageBuffer})">
            <summary>
            Write pages DIRECT in disk. This pages are not cached and are not shared - WORKS FOR DATA FILE ONLY
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.SetLength(System.Int64,Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Set new length for file in sync mode. Queue must be empty before set length
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DiskService.GetName(Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Get file name (or Stream name)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.MemoryCache">
            <summary>
            Manage linear memory segments to avoid re-creating array buffer in heap memory
            Do not share same memory store with different files
            [ThreadSafe]
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.MemoryCache._free">
            <summary>
            Contains free ready-to-use pages in memory
            - All pages here MUST have ShareCounter = 0
            - All pages here MUST have Position = MaxValue
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.MemoryCache._readable">
            <summary>
            Contains only clean pages (from both data/log file) - support page concurrency use
            - MUST have defined Origin and Position
            - Contains only 1 instance per Position/Origin
            - Contains only pages with ShareCounter >= 0
            *  = 0 - Page is available but is not in use by anyone (can be moved into _free list on next Extend())
            * >= 1 - Page is in use by 1 or more threads. Page must run "Release" when finished using
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.MemoryCache._extends">
            <summary>
            Get how many extends were made in this store
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.MemoryCache._segmentSizes">
            <summary>
            Get memory segment sizes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.GetReadablePage(System.Int64,Internal.LiteDB.Engine.FileOrigin,System.Action{System.Int64,Internal.LiteDB.BufferSlice})">
            <summary>
            Get page from clean cache (readable). If page doesn't exist, create this new page and load data using factory fn
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.GetReadableKey(System.Int64,Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Get unique position in dictionary according with origin. Use positive/negative values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.GetWritablePage(System.Int64,Internal.LiteDB.Engine.FileOrigin,System.Action{System.Int64,Internal.LiteDB.BufferSlice})">
            <summary>
            Request for a writable page - no other can read this page and this page has no reference
            Writable pages can be MoveToReadable() or DiscardWritable() - but never Released()
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.NewPage">
            <summary>
            Create new page using an empty buffer block. Mark this page as writable.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.NewPage(System.Int64,Internal.LiteDB.Engine.FileOrigin)">
            <summary>
            Create new page using an empty buffer block. Mark this page as writable.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.TryMoveToReadable(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Try to move this page to readable list (if not already in readable list)
            Returns true if it was moved
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.MoveToReadable(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Move a writable page to readable list - if already exists, override content
            Used after write operation that must mark page as readable because page content was changed
            This method runs BEFORE send to write disk queue - but new page request must read this new content
            Returns readable page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.DiscardPage(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Completely discard a writable page - clean content and move to free list
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.GetFreePage">
            <summary>
            Get a clean, re-usable page from store. Can extend buffer segments if store is empty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.Extend">
            <summary>
            Check if it's possible move readable pages to free list - if not possible, extend memory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.MemoryCache.PagesInUse">
            <summary>
            Return how many pages are in use when call this method (ShareCounter != 0).
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.MemoryCache.FreePages">
            <summary>
            Return how many pages are available (completely free)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.MemoryCache.ExtendSegments">
            <summary>
            Return how many segments are already loaded in memory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.MemoryCache.ExtendPages">
            <summary>
            Get how many pages this cache extends in memory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.MemoryCache.WritablePages">
            <summary>
            Get how many pages are used as Writable at this moment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.GetPages">
            <summary>
            Get all readable pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.MemoryCache.Clear">
            <summary>
            Clean all cache memory - moving back all readable pages into free list
            This command must be called inside an exclusive lock
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.BufferReader">
            <summary>
            Read multiple array segment as a single linear segment - Forward Only
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BufferReader.Position">
            <summary>
            Current global cursor position
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BufferReader.IsEOF">
            <summary>
            Indicate position are at end of last source array segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.MoveForward(System.Int32)">
            <summary>
            Move forward in current segment. If array segment finishes, open next segment
            Returns true if moved to another segment - returns false if continues in the same segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read bytes from source and copy into buffer. Return how many bytes was read
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.Skip(System.Int32)">
            <summary>
            Skip bytes (same as Read but with no array copy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.Consume">
            <summary>
            Consume all data source until finish
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadString(System.Int32)">
            <summary>
            Read string with fixed size
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadCString">
            <summary>
            Reading string until find \0 at end
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.TryReadCStringCurrentSegment(System.String@)">
            <summary>	
            Try read CString in current segment avoind read byte-to-byte over segments	
            </summary>	
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadDateTime">
            <summary>
            Read DateTime as UTC ticks (not BSON format)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadGuid">
            <summary>
            Read Guid as 16 bytes array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadObjectId">
            <summary>
            Write ObjectId as 12 bytes array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadBoolean">
            <summary>
            Write a boolean as 1 byte (0 or 1)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadByte">
            <summary>
            Write single byte
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadPageAddress">
            <summary>
            Write PageAddress as PageID, Index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadBytes(System.Int32)">
            <summary>
            Read byte array - not great because need create new array instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadIndexKey">
            <summary>
            Read single IndexKey (BsonValue) from buffer. Use +1 length only for string/binary
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadDocument(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Read a BsonDocument from reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadArray">
            <summary>
            Read an BsonArray from reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferReader.ReadElement(System.Collections.Generic.HashSet{System.String},System.String@)">
            <summary>
            Reads an element (key-value) from an reader
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.BufferWriter">
            <summary>
            Write data types/BSON data into byte[]. It's forward only and support multi buffer slice as source
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BufferWriter.Position">
            <summary>
            Current global cursor position
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BufferWriter.IsEOF">
            <summary>
            Indicate position are at end of last source array segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.MoveForward(System.Int32)">
            <summary>
            Move forward in current segment. If array segment finish, open next segment
            Returns true if move to another segment - returns false if continue in same segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write bytes from buffer into segmentsr. Return how many bytes was write
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.Byte[])">
            <summary>
            Write bytes from buffer into segmentsr. Return how many bytes was write
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Skip(System.Int32)">
            <summary>
            Skip bytes (same as Write but with no array copy)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Consume">
            <summary>
            Consume all data source until finish
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.WriteCString(System.String)">
            <summary>
            Write String with \0 at end
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.WriteString(System.String,System.Boolean)">
            <summary>
            Write string into output buffer. 
            Support direct string (with no length information) or BSON specs: with (legnth + 1) [4 bytes] before and '\0' at end = 5 extra bytes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.DateTime)">
            <summary>
            Write DateTime as UTC ticks (not BSON format)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.Guid)">
            <summary>
            Write Guid as 16 bytes array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(Internal.LiteDB.ObjectId)">
            <summary>
            Write ObjectId as 12 bytes array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.Boolean)">
            <summary>
            Write a boolean as 1 byte (0 or 1)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(System.Byte)">
            <summary>
            Write single byte
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.Write(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Write PageAddress as PageID, Index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.WriteArray(Internal.LiteDB.BsonArray,System.Boolean)">
            <summary>
            Write BsonArray as BSON specs. Returns array bytes count
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BufferWriter.WriteDocument(Internal.LiteDB.BsonDocument,System.Boolean)">
            <summary>
            Write BsonDocument as BSON specs. Returns document bytes count
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.FileStreamFactory">
            <summary>
            FileStream disk implementation of disk factory
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.FileStreamFactory.Name">
            <summary>
            Get data filename
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileStreamFactory.GetStream(System.Boolean,System.Boolean)">
            <summary>
            Create new data file FileStream instance based on filename
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileStreamFactory.GetLength">
            <summary>
            Get file length using FileInfo. Crop file length if not length % PAGE_SIZE
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileStreamFactory.Exists">
            <summary>
            Check if file exists (without open it)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileStreamFactory.Delete">
            <summary>
            Delete file (must all stream be closed)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileStreamFactory.IsLocked">
            <summary>
            Test if this file are locked by another process
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.FileStreamFactory.CloseOnDispose">
            <summary>
            Close all stream on end
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IStreamFactory">
            <summary>
            Interface factory to provider new Stream instances for datafile/walfile resources. It's useful to multiple threads can read same datafile
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IStreamFactory.Name">
            <summary>
            Get Stream name (filename)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IStreamFactory.GetStream(System.Boolean,System.Boolean)">
            <summary>
            Get new Stream instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IStreamFactory.GetLength">
            <summary>
            Get file length
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.LiteDB.Engine.IStreamFactory.Exists">
            <summary>
            Checks if file exists
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IStreamFactory.Delete">
            <summary>
            Delete physical file on disk
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IStreamFactory.IsLocked">
            <summary>
            Test if this file are used by another process
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IStreamFactory.CloseOnDispose">
            <summary>
            Indicate that factory must be dispose on finish
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.StreamFactory">
            <summary>
            Simple Stream disk implementation of disk factory - used for Memory/Temp database
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.StreamFactory.Name">
            <summary>
            Stream has no name (use stream type)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamFactory.GetStream(System.Boolean,System.Boolean)">
            <summary>
            Use ConcurrentStream wrapper to support multi thread in same Stream (using lock control)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamFactory.GetLength">
            <summary>
            Get file length using _stream.Length
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamFactory.Exists">
            <summary>
            Check if file exists based on stream length
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamFactory.Delete">
            <summary>
            There is no delete method in Stream factory
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamFactory.IsLocked">
            <summary>
            Test if this file are locked by another process (there is no way to test when Stream only)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.StreamFactory.CloseOnDispose">
            <summary>
            Do no dispose on finish
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.StreamPool">
            <summary>
            Manage multiple open readonly Stream instances from same source (file). 
            Support single writer instance
            Close all Stream on dispose
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.StreamPool.Writer">
            <summary>
            Get single Stream writer instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamPool.Rent">
            <summary>
            Rent a Stream reader instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamPool.Return(System.IO.Stream)">
            <summary>
            After use, return Stream reader instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.StreamPool.Dispose">
            <summary>
            Close all Stream instances (readers/writer)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.AesStream">
            <summary>
            Encrypted AES Stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.AesStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypt data from Stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.AesStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt data to Stream
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.AesStream.NewSalt">
            <summary>
            Get new salt for encryption
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.ConcurrentStream">
            <summary>
            Implement internal thread-safe Stream using lock control - A single instance of ConcurrentStream are not multi thread,
            but multiples ConcurrentStream instances using same stream base will support concurrency
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.TempStream">
            <summary>
            Implement a temporary stream that uses MemoryStream until get LIMIT bytes, then copy all to tempoary disk file and delete on dispose
            Can be pass 
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TempStream.InMemory">
            <summary>
            Indicate that stream are all in memory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TempStream.InDisk">
            <summary>
            Indicate that stream is now on this
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TempStream.Filename">
            <summary>
            Get temp disk filename (if null will be generate only when create file)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.EnginePragmas">
            <summary>
            Internal database pragmas persisted inside header page
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.UserVersion">
            <summary>
            Internal user version control to detect database changes
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.Collation">
            <summary>
            Define collation for this database. Value will be persisted on disk at first write database. After this, there is no change of collation
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.Timeout">
            <summary>
            Timeout for waiting unlock operations (default: 1 minute)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.LimitSize">
            <summary>
            Max limit of datafile (in bytes) (default: MaxValue)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.UtcDate">
            <summary>
            Returns date in UTC timezone from BSON deserialization (default: false == LocalTime)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.Checkpoint">
            <summary>
            When LOG file gets larger than checkpoint size (in pages), do a soft checkpoint (and also do a checkpoint at shutdown)
            Checkpoint = 0 means there's no auto-checkpoint nor shutdown checkpoint
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EnginePragmas.Pragmas">
            <summary>
            Get all pragmas
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.EngineSettings">
            <summary>
            All engine settings used to starts new engine
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.DataStream">
            <summary>
            Get/Set custom stream to be used as datafile (can be MemoryStream or TempStream). Do not use FileStream - to use physical file, use "filename" attribute (and keep DataStream/WalStream null)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.LogStream">
            <summary>
            Get/Set custom stream to be used as log file. If is null, use a new TempStream (for TempStream datafile) or MemoryStream (for MemoryStream datafile)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.TempStream">
            <summary>
            Get/Set custom stream to be used as temp file. If is null, will create new FileStreamFactory with "-tmp" on name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.Filename">
            <summary>
            Full path or relative path from DLL directory. Can use ':temp:' for temp database or ':memory:' for in-memory database. (default: null)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.Password">
            <summary>
            Get database password to decrypt pages
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.InitialSize">
            <summary>
            If database is new, initialize with allocated space (in bytes) (default: 0)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.Collation">
            <summary>
            Create database with custom string collection (used only to create database) (default: Collation.Default)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.ReadOnly">
            <summary>
            Indicate that engine will open files in readonly mode (and will not support any database change)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.AutoRebuild">
            <summary>
            After a Close with exception do a database rebuild on next open
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.Upgrade">
            <summary>
            If detect it's a older version (v4) do upgrade in datafile to new v5. A backup file will be keeped in same directory
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.EngineSettings.ReadTransform">
            <summary>
            Is used to transform a <see cref="T:Internal.LiteDB.BsonValue"/> from the database on read. This can be used to upgrade data from older versions.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.EngineSettings.CreateDataFactory(System.Boolean)">
            <summary>
            Create new IStreamFactory for datafile
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.EngineSettings.CreateLogFactory">
            <summary>
            Create new IStreamFactory for logfile
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.EngineSettings.CreateTempFactory">
            <summary>
            Create new IStreamFactory for temporary file (sort)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.LiteEngine">
            <summary>
            A public class that take care of all engine data structure access - it´s basic implementation of a NoSql database
            Its isolated from complete solution - works on low level only (no linq, no poco... just BSON objects)
            [ThreadSafe]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.GetCollectionNames">
            <summary>
            Returns all collection inside datafile
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.DropCollection(System.String)">
            <summary>
            Drop collection including all documents, indexes and extended pages (do not support transactions)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.RenameCollection(System.String,System.String)">
            <summary>
            Rename a collection (do not support transactions)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Delete(System.String,System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonValue})">
            <summary>
            Implements delete based on IDs enumerable
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.DeleteMany(System.String,Internal.LiteDB.BsonExpression)">
            <summary>
            Implements delete based on filter expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.EnsureIndex(System.String,System.String,Internal.LiteDB.BsonExpression,System.Boolean)">
            <summary>
            Create a new index (or do nothing if already exists) to a collection/field
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.DropIndex(System.String,System.String)">
            <summary>
            Drop an index from a collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Insert(System.String,System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonAutoId)">
            <summary>
            Insert all documents in collection. If document has no _id, use AutoId generation.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.InsertDocument(Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.BsonDocument,Internal.LiteDB.BsonAutoId,Internal.LiteDB.Engine.IndexService,Internal.LiteDB.Engine.DataService)">
            <summary>
            Internal implementation of insert a document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Pragma(System.String)">
            <summary>
            Get engine internal pragma value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Pragma(System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Set engine pragma new value (some pragmas will be affected only after realod)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Query(System.String,Internal.LiteDB.Query)">
            <summary>
            Run query over collection using a query definition. 
            Returns a new IBsonDataReader that run and return first document result (open transaction)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Rebuild(Internal.LiteDB.Engine.RebuildOptions)">
            <summary>
            Implement a full rebuild database. Engine will be closed and re-created in another instance.
            A backup copy will be created with -backup extention. All data will be readed and re created in another database
            After run, will re-open database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Rebuild">
            <summary>
            Implement a full rebuild database. A backup copy will be created with -backup extention. All data will be readed and re created in another database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.RebuildContent(Internal.LiteDB.Engine.IFileReader)">
            <summary>
            Fill current database with data inside file reader - run inside a transacion
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Recovery(Internal.LiteDB.Collation)">
            <summary>
            Recovery datafile using a rebuild process. Run only on "Open" database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.GetSequence(Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.BsonAutoId)">
            <summary>
            Get lastest value from a _id collection and plus 1 - use _sequence cache
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.SetSequence(Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.BsonValue)">
            <summary>
            Update sequence number with new _id passed by user, IF this number are higher than current last _id
            At this point, newId.Type is Number
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.GetLastId(Internal.LiteDB.Engine.Snapshot)">
            <summary>
            Get last _id index key from collection. Returns MinValue if collection are empty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.GetSystemCollection(System.String)">
            <summary>
            Get registered system collection
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.RegisterSystemCollection(Internal.LiteDB.Engine.SystemCollection)">
            <summary>
            Register a new system collection that can be used in query for input/output data
            Collection name must starts with $
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.RegisterSystemCollection(System.String,System.Func{System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument}})">
            <summary>
            Register a new system collection that can be used in query for input data
            Collection name must starts with $
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.BeginTrans">
            <summary>
            Initialize a new transaction. Transaction are created "per-thread". There is only one single transaction per thread.
            Return true if transaction was created or false if current thread already in a transaction.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Commit">
            <summary>
            Persist all dirty pages into LOG file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Rollback">
            <summary>
            Do rollback to current transaction. Clear dirty pages in memory and return new pages to main empty linked-list
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.AutoTransaction``1(System.Func{Internal.LiteDB.Engine.TransactionService,``0})">
            <summary>
            Create (or reuse) a transaction an add try/catch block. Commit transaction if is new transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Update(System.String,System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument})">
            <summary>
            Implement update command to a document inside a collection. Return number of documents updated
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.UpdateMany(System.String,Internal.LiteDB.BsonExpression,Internal.LiteDB.BsonExpression)">
            <summary>
            Update documents using transform expression (must return a scalar/document value) using predicate as filter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.UpdateDocument(Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.Engine.CollectionPage,Internal.LiteDB.BsonDocument,Internal.LiteDB.Engine.IndexService,Internal.LiteDB.Engine.DataService)">
            <summary>
            Implement internal update document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.TryUpgrade">
            <summary>
            If Upgrade=true, run this before open Disk service
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Upgrade(System.String,System.String,Internal.LiteDB.Collation)">
            <summary>
            Upgrade old version of LiteDB into new LiteDB file structure. Returns true if database was completed converted
            If database already in current version just return false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Upsert(System.String,System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonAutoId)">
            <summary>
            Implement upsert command to documents in a collection. Calls update on all documents,
            then any documents not updated are then attempted to insert.
            This will have the side effect of throwing if duplicate items are attempted to be inserted.
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.LiteEngine._systemCollections">
            <summary>
            All system read-only collections for get metadata database information
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.LiteEngine._sequences">
            <summary>
            Sequence cache for collections last ID (for int/long numbers only)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.#ctor">
            <summary>
            Initialize LiteEngine using connection memory database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.#ctor(System.String)">
            <summary>
            Initialize LiteEngine using connection string using key=value; parser
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.#ctor(Internal.LiteDB.Engine.EngineSettings)">
            <summary>
            Initialize LiteEngine using initial engine settings
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Close">
            <summary>
            Normal close process:
            - Stop any new transaction
            - Stop operation loops over database (throw in SafePoint)
            - Wait for writer queue
            - Close disks
            - Clean variables
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Close(System.Exception)">
            <summary>
            Exception close database:
            - Stop diskQueue
            - Stop any disk read/write (dispose)
            - Dispose sort disk
            - Dispose locker
            - Checks Exception type for INVALID_DATAFILE_STATE to auto rebuild on open
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.Checkpoint">
            <summary>
            Run checkpoint command to copy log file into data file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LiteEngine.InitializeSystemCollections">
            <summary>
            Register all internal system collections avaiable by default
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.FileReaderError">
            <summary>
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.FileReaderV7">
            <summary>
            Internal class to read old LiteDB v4 database version (datafile v7 structure)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.IsVersion(System.Byte[])">
            <summary>
            Check header slots to test if data file is a LiteDB FILE_VERSION = v7
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.GetCollections">
            <summary>
            Read all collection based on header page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.GetIndexes(System.String)">
            <summary>
            Read all indexes from all collection pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.GetDocuments(System.String)">
            <summary>
            Get all document using an indexInfo as start point (_id index).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.ReadPage(System.UInt32)">
            <summary>
            Read all database pages from v7 structure into a flexible BsonDocument - only read what really needs
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.ReadExtendData(System.UInt32)">
            <summary>
            Read extend data block
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV7.VisitIndexPages(System.UInt32)">
            <summary>
            Visit all index pages by starting index page. Get a list with all index pages from a collection
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.FileReaderV8">
            <summary>
            Internal class to read all datafile documents - use only Stream - no cache system. Read log file (read commited transtraction)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.Open">
            <summary>
            Open data file and log file, read header and collection pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.GetPragmas">
            <summary>
            Read all pragma values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.GetCollections">
            <summary>
            Read all collection based on header page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.GetIndexes(System.String)">
            <summary>
            Read all indexes from all collection pages (except _id index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.GetDocuments(System.String)">
            <summary>
            Read all documents from current collection with NO index use - read direct from free lists
            There is no document order
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.LoadPragmas">
            <summary>
            Load all pragmas from header page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.LoadDataPages">
            <summary>
            Read all file (and log) to find all data pages (and store groupby colPageID)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.LoadCollections">
            <summary>
            Load all collections from header OR via all data-pages ColID
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.LoadIndexes">
            <summary>
            Load all indexes for all collections
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.IsVersion(System.Byte[])">
            <summary>
            Check header slots to test if data file is a LiteDB FILE_VERSION = v8
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.LoadIndexMap">
            <summary>
            Load log file to build index map (wal map index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.ReadPage(System.UInt32,Internal.LiteDB.Engine.FileReaderV8.PageInfo@)">
            <summary>
            Read page from data/log stream (checks in logIndexMap file/position). Capture any exception here, but don't call HandleError
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.FileReaderV8.HandleError(System.Exception,Internal.LiteDB.Engine.FileReaderV8.PageInfo)">
            <summary>
            Handle any error avoiding throw exceptions during process. If exception must stop process (ioexceptions), throw exception
            Add errors to log and continue reading data file
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IFileReader">
            <summary>
            Interface to read current or old datafile structure - Used to shirnk/upgrade datafile from old LiteDB versions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IFileReader.Open">
            <summary>
            Open and initialize file reader (run before any other command)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IFileReader.GetPragmas">
            <summary>
            Get all database pragma variables
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IFileReader.GetCollections">
            <summary>
            Get all collections name from database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IFileReader.GetIndexes(System.String)">
            <summary>
            Get all indexes from collection (except _id index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IFileReader.GetDocuments(System.String)">
            <summary>
            Get all documents from a collection
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.BasePage.SLOT_SIZE">
            <summary>
            Bytes used in each offset slot (to store segment position (2) + length (2))
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.PageID">
            <summary>
            Represent page number - start in 0 with HeaderPage [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.PageType">
            <summary>
            Indicate the page type [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.PrevPageID">
            <summary>
            Represent the previous page. Used for page-sequences - MaxValue represent that has NO previous page [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.NextPageID">
            <summary>
            Represent the next page. Used for page-sequences - MaxValue represent that has NO next page [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.PageListSlot">
            <summary>
            Get/Set where this page are in free list slot [1 byte]
            Used only in DataPage (0-4) and IndexPage (0-1) - when new or not used: 255
            DataPage: 0 (7344 - 8160 free space) - 1 (6120 - 7343) - 2 (4896 - 6119) - 3 (2448 - 4895) - 4 (0 - 2447)
            IndexPage 0 (1400 - 8160 free bytes) - 1 (0 - 1399 bytes free)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.ItemsCount">
            <summary>
            Indicate how many items are used inside this page [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.UsedBytes">
            <summary>
            Get how many bytes are used on content area (exclude header and footer blocks) [2 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.FragmentedBytes">
            <summary>
            Get how many bytes are fragmented inside this page (free blocks inside used blocks) [2 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.NextFreePosition">
            <summary>
            Get next free position. Starts with 32 (first byte after header) - There is no fragmentation after this [2 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.HighestIndex">
            <summary>
            Get last (highest) used index slot - use byte.MaxValue for empty [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.FreeBytes">
            <summary>
            Get how many free bytes (including fragmented bytes) are in this page (content space) - Will return 0 bytes if page are full (or with max 255 items)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.FooterSize">
            <summary>
            Get how many bytes are used in footer page at this moment
            ((HighestIndex + 1) * 4 bytes per slot: [2 for position, 2 for length])
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.ColID">
            <summary>
            Set in all datafile pages the page id about data/index collection. Useful if want re-build database without any index [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.TransactionID">
            <summary>
            Represent transaction ID that was stored [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.IsConfirmed">
            <summary>
            Used in WAL, define this page is last transaction page and are confirmed on disk [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.IsDirty">
            <summary>
            Set this pages that was changed and must be persist in disk [not peristable]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.BasePage.Buffer">
            <summary>
            Get page buffer instance
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.#ctor(Internal.LiteDB.Engine.PageBuffer,System.UInt32,Internal.LiteDB.Engine.PageType)">
            <summary>
            Create new Page based on pre-defined PageID and PageType
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.#ctor(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Read header data from byte[] buffer into local variables
            using fixed position be be faster than use BufferReader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.UpdateBuffer">
            <summary>
            Write header data from variable into byte[] buffer. When override, call base.UpdateBuffer() after write your code
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.MarkAsEmtpy">
            <summary>
            Change current page to Empty page - fix variables and buffer (DO NOT change PageID)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.Get(System.Byte)">
            <summary>
            Get a page segment item based on index slot
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.Insert(System.UInt16,System.Byte@)">
            <summary>
            Get a new page segment for this length content
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.InternalInsert(System.UInt16,System.Byte@)">
            <summary>
            Get a new page segment for this length content using fixed index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.Delete(System.Byte)">
            <summary>
            Remove index slot about this page segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.Update(System.Byte,System.UInt16)">
            <summary>
            Update segment bytes with new data. Current page must have bytes enougth for this new size. Index will not be changed
            Update will try use same segment to store. If not possible, write on end of page (with possible Defrag operation)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.Defrag">
            <summary>
            Defrag method re-organize all byte data content removing all fragmented data. This will move all page segments
            to create a single continuous content area (just after header area). No index segment will be changed (only positions)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.BasePage._startIndex">
            <summary>
            Store start index used in GetFreeIndex to avoid always run full loop over all indexes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.GetFreeIndex">
            <summary>
            Get a free index slot in this page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.GetUsedIndexs">
            <summary>
            Get all used slots indexes in this page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.UpdateHighestIndex">
            <summary>
            Update HighestIndex based on current HighestIndex (step back looking for next used slot)
            Used only in Delete() operation
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.IsValidPos(System.UInt16)">
            <summary>
            Checks if segment position has a valid value (used for DEBUG)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.IsValidLen(System.UInt16)">
            <summary>
            Checks if segment length has a valid value (used for DEBUG)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.CalcPositionAddr(System.Byte)">
            <summary>
            Get buffer offset position where one page segment length are located (based on index slot)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.CalcLengthAddr(System.Byte)">
            <summary>
            Get buffer offset position where one page segment length are located (based on index slot)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.GetPagePosition(System.UInt32)">
            <summary>
            Returns a size of specified number of pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.GetPagePosition(System.Int32)">
            <summary>
            Returns a size of specified number of pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.ReadPage``1(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Create new page instance based on buffer (READ)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePage.CreatePage``1(Internal.LiteDB.Engine.PageBuffer,System.UInt32)">
            <summary>
            Create new page instance with new PageID and passed buffer (NEW)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionPage.FreeDataPageList">
            <summary>
            Free data page linked-list (N lists for different range of FreeBlocks)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.CollectionPage._indexes">
            <summary>
            All indexes references for this collection
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionPage.PK">
            <summary>
            Get PK index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.GetCollectionIndex(System.String)">
            <summary>
            Get index from index name (index name is case sensitive) - returns null if not found
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.GetCollectionIndexes">
            <summary>
            Get all indexes in this collection page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.GetCollectionIndexesSlots">
            <summary>
            Get all collections array based on slot number
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.InsertCollectionIndex(System.String,System.String,System.Boolean)">
            <summary>
            Insert new index inside this collection page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.UpdateCollectionIndex(System.String)">
            <summary>
            Return index instance and mark as updatable
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionPage.DeleteCollectionIndex(System.String)">
            <summary>
            Remove index reference in this page
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.DataPage">
            <summary>
            The DataPage thats stores object data.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.#ctor(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Read existing DataPage in buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.#ctor(Internal.LiteDB.Engine.PageBuffer,System.UInt32)">
            <summary>
            Create new DataPage
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.GetBlock(System.Byte)">
            <summary>
            Get single DataBlock
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.InsertBlock(System.Int32,System.Boolean)">
            <summary>
            Insert new DataBlock. Use extend to indicate document sequence (document are large than PAGE_SIZE)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.UpdateBlock(Internal.LiteDB.Engine.DataBlock,System.Int32)">
            <summary>
            Update current block returning data block to be fill
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.DeleteBlock(System.Byte)">
            <summary>
            Delete single data block inside this page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.GetBlocks">
            <summary>
            Get all block positions inside this page that are not extend blocks (initial data block)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.DataPage._freePageSlots">
            <summary>
            FreeBytes ranges on page slot for free list page
            90% - 100% = 0 (7344 - 8160)
            75% -  90% = 1 (6120 - 7343)
            60% -  75% = 2 (4896 - 6119)
            30% -  60% = 3 (2448 - 4895)
             0% -  30% = 4 (0000 - 2447)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.FreeIndexSlot(System.Int32)">
            <summary>
            Returns the slot the page should be in, given the <paramref name="freeBytes"/> it has
            </summary>
            <returns>A slot number between 0 and 4</returns>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataPage.GetMinimumIndexSlot(System.Int32)">
            <summary>
            Returns the slot where there is a page with enough space for <paramref name="length"/> bytes of data.
            Returns -1 if no space guaranteed (more than 90% of a DataPage net size)
            </summary>
            <returns>A slot number between -1 and 3</returns>
        </member>
        <member name="T:Internal.LiteDB.Engine.HeaderPage">
            <summary>
            Header page represent first page on datafile. Engine contains a single instance of HeaderPage and all changes
            must be synchronized (using lock).
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.HeaderPage.HEADER_INFO">
            <summary>
            Header info the validate that datafile is a LiteDB file (27 bytes)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.HeaderPage.FILE_VERSION">
            <summary>
            Datafile specification version
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.HeaderPage.FreeEmptyPageList">
            <summary>
            Get/Set the pageID that start sequence with a complete empty pages (can be used as a new page) [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.HeaderPage.LastPageID">
            <summary>
            Last created page - Used when there is no free page inside file [4 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.HeaderPage.CreationTime">
            <summary>
            DateTime when database was created [8 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.HeaderPage.Pragmas">
            <summary>
            Get database pragmas instance class
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.HeaderPage._collections">
            <summary>
            All collections names/link pointers are stored inside this document
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.HeaderPage._isCollectionsChanged">
            <summary>
            Check if collections was changed
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.#ctor(Internal.LiteDB.Engine.PageBuffer,System.UInt32)">
            <summary>
            Create new Header Page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.#ctor(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Load HeaderPage from buffer page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.LoadPage">
            <summary>
            Load page content based on page buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.Savepoint">
            <summary>
            Create a save point before do any change on header page (execute UpdateBuffer())
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.Restore(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Restore savepoint content and override on page. Must run in lock(_header)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.GetCollectionPageID(System.String)">
            <summary>
            Get collection PageID - return uint.MaxValue if not exists
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.GetCollections">
            <summary>
            Get all collections with pageID
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.InsertCollection(System.String,System.UInt32)">
            <summary>
            Insert new collection in header
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.DeleteCollection(System.String)">
            <summary>
            Remove existing collection reference in header
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.RenameCollection(System.String,System.String)">
            <summary>
            Rename collection with new name
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.HeaderPage.GetAvailableCollectionSpace">
            <summary>
            Get how many bytes are available in collection to store new collections
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexPage">
            <summary>
            The IndexPage thats stores object data.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.#ctor(Internal.LiteDB.Engine.PageBuffer)">
            <summary>
            Read existing IndexPage in buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.#ctor(Internal.LiteDB.Engine.PageBuffer,System.UInt32)">
            <summary>
            Create new IndexPage
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.GetIndexNode(System.Byte)">
            <summary>
            Read single IndexNode
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.InsertIndexNode(System.Byte,System.Byte,Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress,System.Int32)">
            <summary>
            Insert new IndexNode. After call this, "node" instance can't be changed
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.DeleteIndexNode(System.Byte)">
            <summary>
            Delete index node based on page index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.GetIndexNodes">
            <summary>
            Get all index nodes inside this page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexPage.FreeIndexSlot(System.Int32)">
            <summary>
            Get page index slot on FreeIndexPageID 
            8160 - 600 : Slot #0
            599  -   0 : Slot #1 (no page in list)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.Index">
            <summary>
            Class that implement higher level of index search operations (equals, greater, less, ...)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.Index.Name">
            <summary>
            Index name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.Index.Order">
            <summary>
            Get/Set index order
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Index.GetCost(Internal.LiteDB.Engine.CollectionIndex)">
            <summary>
            Calculate cost based on type/value/collection - Lower is best (1)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Index.Execute(Internal.LiteDB.Engine.IndexService,Internal.LiteDB.Engine.CollectionIndex)">
            <summary>
            Abstract method that must be implement for index seek/scan - Returns IndexNodes that match with index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Index.Run(Internal.LiteDB.Engine.CollectionPage,Internal.LiteDB.Engine.IndexService)">
            <summary>
            Find witch index will be used and run Execute method
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexAll">
            <summary>
            Return all index nodes
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexEquals">
            <summary>
            Implement equals index operation =
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexIn">
            <summary>
            Implement IN index operation. Value must be an array
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexRange">
            <summary>
            Implement range operation - in asc or desc way - can be used as LT, LTE, GT, GTE too because support MinValue/MaxValue
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexScan">
            <summary>
            Execute an "index scan" passing a Func as where
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexVirtual">
            <summary>
            Implement virtual index for system collections AND full data collection read
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.DatafileLookup">
            <summary>
            Implement basic document loader based on data service/bson reader
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IDocumentLookup">
            <summary>
            Interface for abstract document lookup that can be direct from datafile or by virtual collections
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexLookup">
            <summary>
            Implement lookup based only in index Key
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.BasePipe">
            <summary>
            Abstract class with workflow method to be used in pipeline implementation
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePipe.Pipe(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.IndexNode},Internal.LiteDB.Engine.QueryPlan)">
            <summary>
            Abstract method to be implement according pipe workflow
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePipe.Include(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonExpression)">
            <summary>
            INCLUDE: Do include in result document according path expression - Works only with DocumentLookup
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePipe.Filter(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonExpression)">
            <summary>
            WHERE: Filter document according expression. Expression must be an Bool result
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.BasePipe.OrderBy(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonExpression,System.Int32,System.Int32,System.Int32)">
            <summary>
            ORDER BY: Sort documents according orderby expression and order asc/desc
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.DocumentCacheEnumerable">
            <summary>
            Implement an IEnumerable document cache that read data first time and store in memory/disk cache
            Used in GroupBy operation and MUST read all IEnumerable source before dispose because are need be linear from main resultset
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.GroupByPipe">
            <summary>
            Implement query using GroupBy expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.GroupByPipe.Pipe(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.IndexNode},Internal.LiteDB.Engine.QueryPlan)">
            <summary>
            GroupBy Pipe Order
            - LoadDocument
            - Filter
            - OrderBy (to GroupBy)
            - GroupBy
            - HavingSelectGroupBy
            - OffSet
            - Limit
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.GroupByPipe.GroupBy(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.Engine.GroupBy)">
            <summary>
            GROUP BY: Apply groupBy expression and aggregate results in DocumentGroup
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.GroupByPipe.YieldDocuments(Internal.LiteDB.BsonValue,System.Collections.Generic.IEnumerator{Internal.LiteDB.BsonDocument},Internal.LiteDB.Engine.GroupBy,Internal.LiteDB.Engine.Done)">
            <summary>
            YieldDocuments will run over all key-ordered source and returns groups of source
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.GroupByPipe.SelectGroupBy(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.DocumentCacheEnumerable},Internal.LiteDB.Engine.GroupBy)">
            <summary>
            Run Select expression over a group source - each group will return a single value
            If contains Having expression, test if result = true before run Select
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.QueryPipe">
            <summary>
            Basic query pipe workflow - support filter, includes and orderby
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPipe.Pipe(System.Collections.Generic.IEnumerable{Internal.LiteDB.Engine.IndexNode},Internal.LiteDB.Engine.QueryPlan)">
            <summary>
            Query Pipe order
            - LoadDocument
            - IncludeBefore
            - Filter
            - OrderBy
            - OffSet
            - Limit
            - IncludeAfter
            - Select
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPipe.Select(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonExpression)">
            <summary>
            Pipe: Transaform final result appling expressin transform. Can return document or simple values
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPipe.SelectAll(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonExpression)">
            <summary>
            Pipe: Run select expression over all recordset
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.QueryExecutor">
            <summary>
            Class that execute QueryPlan returing results
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryExecutor.ExecuteQuery(System.Boolean)">
            <summary>
            Run query definition into engine. Execute optimization to get query planner
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryExecutor.ExecuteQueryInto(System.String,Internal.LiteDB.BsonAutoId)">
            <summary>
            Execute query and insert result into another collection. Support external collections
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.QueryOptimization">
            <summary>
            Class that optimize query transforming user "Query" into "QueryPlan"
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.ProcessQuery">
            <summary>
            Build QueryPlan instance based on QueryBuilder fields
            - Load used fields in all expressions
            - Select best index option
            - Fill includes 
            - Define orderBy
            - Define groupBy
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.SplitWherePredicateInTerms">
            <summary>
            Fill terms from where predicate list
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.OptimizeTerms">
            <summary>
            Do some pre-defined optimization on terms to convert expensive filter in indexable filter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.DefineQueryFields">
            <summary>
            Load all fields that must be deserialize from document.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.ChooseIndex(System.Collections.Generic.HashSet{System.String})">
            <summary>
            Try select index based on lowest cost or GroupBy/OrderBy reuse - use this priority order:
            - Get lowest index cost used in WHERE expressions (will filter data)
            - If there is no candidate, try get:
                - Same of GroupBy
                - Same of OrderBy
                - Prefered single-field (when no lookup neeed)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.DefineOrderBy">
            <summary>
            Define OrderBy optimization (try re-use index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.DefineGroupBy">
            <summary>
            Define GroupBy optimization (try re-use index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryOptimization.DefineIncludes">
            <summary>
            Will define each include to be run BEFORE where (worst) OR AFTER where (best)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.GroupBy">
            <summary>
            Represent an GroupBy definition (is based on OrderByDefinition)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexCost">
            <summary>
            Calculate index cost based on expression/collection index. 
            Lower cost is better - lowest will be selected
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexCost.Expression">
            <summary>
            Get filtered expression: "$._id = 10"
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexCost.IndexExpression">
            <summary>
            Get index expression only: "$._id"
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexCost.Index">
            <summary>
            Get created Index instance used on query
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexCost.CreateIndex(Internal.LiteDB.BsonExpressionType,System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Create index based on expression predicate
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.OrderBy">
            <summary>
            Represent an OrderBy definition
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.QueryPlan">
            <summary>
            This class are result from optimization from QueryBuild in QueryAnalyzer. Indicate how engine must run query - there is no more decisions to engine made, must only execute as query was defined
            Contains used index and estimate cost to run
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Collection">
            <summary>
            Get collection name (required)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Index">
            <summary>
            Index used on query (required)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.IndexExpression">
            <summary>
            Index expression that will be used in index (source only)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.IndexCost">
            <summary>
            Get index cost (lower is best)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.IsIndexKeyOnly">
            <summary>
            If true, gereate document result only with IndexNode.Key (avoid load all document)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Filters">
            <summary>
            List of filters of documents
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.IncludeBefore">
            <summary>
            List of includes must be done BEFORE filter (it's not optimized but some filter will use this include)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.IncludeAfter">
            <summary>
            List of includes must be done AFTER filter (it's optimized because will include result only)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.OrderBy">
            <summary>
            Expression to order by resultset
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.GroupBy">
            <summary>
            Expression to group by document results
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Select">
            <summary>
            Transaformation data before return - if null there is no transform (return document)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Fields">
            <summary>
            Get fields name that will be deserialize from disk
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Limit">
            <summary>
            Limit resultset
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.Offset">
            <summary>
            Skip documents before returns
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.QueryPlan.ForUpdate">
            <summary>
            Indicate this query is for update (lock mode = Write)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPlan.GetPipe(Internal.LiteDB.Engine.TransactionService,Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.Engine.SortDisk,Internal.LiteDB.Engine.EnginePragmas,System.UInt32)">
            <summary>
            Select corrent pipe
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPlan.GetLookup(Internal.LiteDB.Engine.Snapshot,Internal.LiteDB.Engine.EnginePragmas,System.UInt32)">
            <summary>
            Get corrent IDocumentLookup
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.QueryPlan.GetExecutionPlan">
            <summary>
            Get detail about execution plan for this query definition
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.Select">
            <summary>
            Represent a Select expression
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionService.CheckName(System.String,Internal.LiteDB.Engine.HeaderPage)">
            <summary>
            Check collection name if is valid (and fit on header)
            Throw correct message error if not valid name or not fit on header page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionService.Get(System.String,System.Boolean,Internal.LiteDB.Engine.CollectionPage@)">
            <summary>
            Get collection page instance (or create a new one). Returns true if a new collection was created
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionService.Add(System.String,Internal.LiteDB.Engine.CollectionPage@)">
            <summary>
            Add a new collection. Check if name the not exists. Create only in transaction page - will update header only in commit
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.DataService.MAX_DATA_BYTES_PER_PAGE">
            <summary>
            Get maximum data bytes[] that fit in 1 page = 8150
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataService.Insert(Internal.LiteDB.BsonDocument)">
            <summary>
            Insert BsonDocument into new data pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataService.Update(Internal.LiteDB.Engine.CollectionPage,Internal.LiteDB.Engine.PageAddress,Internal.LiteDB.BsonDocument)">
            <summary>
            Update document using same page position as reference
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataService.Read(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Get all buffer slices that address block contains. Need use BufferReader to read document
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataService.Delete(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Delete all datablock that contains a document (can use multiples data blocks)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexService">
            <summary>
            Implement a Index service - Add/Remove index nodes on SkipList
            Based on: http://igoro.com/archive/skip-lists-are-fascinating/
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.CreateIndex(System.String,System.String,System.Boolean)">
            <summary>
            Create a new index and returns head page address (skip list)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.AddNode(Internal.LiteDB.Engine.CollectionIndex,Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress,Internal.LiteDB.Engine.IndexNode)">
            <summary>
            Insert a new node index inside an collection index. Flip coin to know level
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.AddNode(Internal.LiteDB.Engine.CollectionIndex,Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress,System.Byte,Internal.LiteDB.Engine.IndexNode)">
            <summary>
            Insert a new node index inside an collection index.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.Flip">
            <summary>
            Flip coin (skipped list): returns how many levels the node will have (starts in 1, max of INDEX_MAX_LEVELS)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.GetNode(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Get a node inside a page using PageAddress - Returns null if address IsEmpty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.GetNodeList(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Gets all node list from passed nodeAddress (forward only)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.DeleteAll(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Deletes all indexes nodes from pkNode
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.DeleteList(Internal.LiteDB.Engine.PageAddress,System.Collections.Generic.HashSet{Internal.LiteDB.Engine.PageAddress})">
            <summary>
            Deletes all list of nodes in toDelete - fix single linked-list and return last non-delete node
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.DeleteSingleNode(Internal.LiteDB.Engine.IndexNode,Internal.LiteDB.Engine.CollectionIndex)">
            <summary>
            Delete a single index node - fix tree double-linked list levels
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.DropIndex(Internal.LiteDB.Engine.CollectionIndex)">
            <summary>
            Delete all index nodes from a specific collection index. Scan over all PK nodes, read all nodes list and remove
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.FindAll(Internal.LiteDB.Engine.CollectionIndex,System.Int32)">
            <summary>
            Return all index nodes from an index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexService.Find(Internal.LiteDB.Engine.CollectionIndex,Internal.LiteDB.BsonValue,System.Boolean,System.Int32)">
            <summary>
            Find first node that index match with value .
            If index are unique, return unique value - if index are not unique, return first found (can start, middle or end)
            If not found but sibling = true and key are not found, returns next value index node (if order = Asc) or prev node (if order = Desc)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.LockService">
            <summary>
            Lock service are collection-based locks. Lock will support any threads reading at same time. Writing operations will be locked
            based on collection. Eventualy, write operation can change header page that has an exclusive locker for.
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.LockService.IsInTransaction">
            <summary>
            Return if current thread have open transaction
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.LockService.TransactionsCount">
            <summary>
            Return how many transactions are opened
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.EnterTransaction">
            <summary>
            Enter transaction read lock - should be called just before enter a new transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.ExitTransaction">
            <summary>
            Exit transaction read lock
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.EnterLock(System.String)">
            <summary>
            Enter collection write lock mode (only 1 collection per time can have this lock)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.ExitLock(System.String)">
            <summary>
            Exit collection in reserved lock
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.EnterExclusive">
            <summary>
            Enter all database in exclusive lock. Wait for all transactions finish. In exclusive mode no one can enter in new transaction (for read/write)
            If current thread already in exclusive mode, returns false
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.TryEnterExclusive(System.Boolean@)">
            <summary>
            Try enter in exclusive mode - if not possible, just exit with false (do not wait and no exceptions)
            If mustExit returns true, must call ExitExclusive after use
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.LockService.ExitExclusive">
            <summary>
            Exit exclusive lock
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.RebuildService">
            <summary>
            [ThreadSafe]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.RebuildService.ReadFirstBytes(System.Boolean)">
            <summary>
            Read first 16kb (2 PAGES) in bytes
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.Snapshot">
            <summary>
            Represent a single snapshot
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.GetWritablePages(System.Boolean,System.Boolean)">
            <summary>
            Get all snapshot pages (can or not include collectionPage) - If included, will be last page
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.Clear">
            <summary>
            Clear all local pages and return page buffer to file reader. Do not release CollectionPage (only in Dispose method)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.Dispose">
            <summary>
            Dispose stream readers and exit collection lock
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.GetPage``1(System.UInt32,System.Boolean)">
            <summary>
            Get a valid page for this snapshot (must consider local-index and wal-index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.GetPage``1(System.UInt32,Internal.LiteDB.Engine.FileOrigin@,System.Int64@,System.Int32@,System.Boolean)">
            <summary>
            Get a valid page for this snapshot (must consider local-index and wal-index)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.ReadPage``1(System.UInt32,Internal.LiteDB.Engine.FileOrigin@,System.Int64@,System.Int32@,System.Boolean)">
            <summary>
            Read page from disk (dirty, wal or data)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.GetFreeDataPage(System.Int32)">
            <summary>
            Returns a page that contains space enough to data to insert new object - if one does not exit, creates a new page.
            Before return page, fix empty free list slot according with passed length
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.GetFreeIndexPage(System.Int32,System.UInt32@)">
            <summary>
            Get a index page with space enouth for a new index node
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.NewPage``1">
            <summary>
            Get a new empty page from disk: can be a reused page (from header free list) or file extend
            Never re-use page from same transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.AddOrRemoveFreeDataList(Internal.LiteDB.Engine.DataPage)">
            <summary>
            Add/Remove a data page from free list slots
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.AddOrRemoveFreeIndexList(Internal.LiteDB.Engine.IndexPage,System.UInt32@)">
            <summary>
            Add/Remove a index page from single free list
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.AddFreeList``1(``0,System.UInt32@)">
            <summary>
            Add page into double linked-list (always add as first element)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.RemoveFreeList``1(``0,System.UInt32@)">
            <summary>
            Remove a page from double linked list.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.DeletePage``1(``0)">
            <summary>
            Delete a page - this page will be marked as Empty page
            There is no re-use deleted page in same transaction - deleted pages will be in another linked list and will
            be part of Header free list page only in commit
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.Snapshot.DropCollection(System.Action)">
            <summary>
            Delete current collection and all pages - this snapshot can't be used after this
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.TransactionMonitor">
            <summary>
            This class monitor all open transactions to manage memory usage for each transaction
            [Singleton - ThreadSafe]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.ReleaseTransaction(Internal.LiteDB.Engine.TransactionService)">
            <summary>
            Release current thread transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.GetThreadTransaction">
            <summary>
            Get transaction from current thread (from thread slot or from queryOnly) - do not created new transaction
            Used only in SystemCollections to get running query transaction
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.GetInitialSize">
            <summary>
            Get initial transaction size - get from free pages or reducing from all open transactions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.TryExtend(Internal.LiteDB.Engine.TransactionService)">
            <summary>
            Try extend max transaction size in passed transaction ONLY if contains free pages available
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.CheckSafepoint(Internal.LiteDB.Engine.TransactionService)">
            <summary>
            Check if transaction size reach limit AND check if is possible extend this limit
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionMonitor.Dispose">
            <summary>
            Dispose all open transactions
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.TransactionService">
            <summary>
            Represent a single transaction service. Need a new instance for each transaction.
            You must run each transaction in a different thread - no 2 transaction in same thread (locks as per-thread)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionService.OpenCursors">
            <summary>
            Get/Set how many open cursor this transaction are running
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionService.ExplicitTransaction">
            <summary>
            Get/Set if this transaction was opened by BeginTrans() method (not by AutoTransaction/Cursor)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.Finalize">
            <summary>
            Finalizer: Will be called once a thread is closed. The TransactionMonitor._slot releases the used TransactionService.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.CreateSnapshot(Internal.LiteDB.Engine.LockMode,System.String,System.Boolean)">
            <summary>
            Create (or get from transaction-cache) snapshot and return
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.Safepoint">
            <summary>
            If current transaction contains too much pages, now is safe to remove clean pages from memory and flush to wal disk dirty pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.PersistDirtyPages(System.Boolean)">
            <summary>
            Persist all dirty in-memory pages (in all snapshots) and clear local pages list (even clean pages)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.Commit">
            <summary>
            Write pages into disk and confirm transaction in wal-index. Returns true if any dirty page was updated
            After commit, all snapshot are closed
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.Rollback">
            <summary>
            Rollback transaction operation - ignore all modified pages and return new pages into disk
            After rollback, all snapshot are closed
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.ReturnNewPages">
            <summary>
            Return added pages when occurs an rollback transaction (run this only in rollback). Create new transactionID and add into
            Log file all new pages as EmptyPage in a linked order - also, update SharedPage before store
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionService.Dispose">
            <summary>
            Public implementation of Dispose pattern.
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.WalIndexService">
            <summary>
            Do all WAL index services based on LOG file - has only single instance per engine
            [Singleton - ThreadSafe]
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.WalIndexService._lastTransactionID">
            <summary>
            Store last used transaction ID
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.WalIndexService.CurrentReadVersion">
            <summary>
            Get current read version for all new transactions
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.WalIndexService.LastTransactionID">
            <summary>
            Get current counter for transaction ID
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.Clear">
            <summary>
            Clear WAL index links and cache memory. Used after checkpoint and rebuild rollback
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.NextTransactionID">
            <summary>
            Get new transactionID in thread safe way
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.GetPageIndex(System.UInt32,System.Int32,System.Int32@)">
            <summary>
            Checks if a Page/Version are in WAL-index memory. Consider version that are below parameter. Returns PagePosition of this page inside WAL-file or Empty if page doesn't found.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.ConfirmTransaction(System.UInt32,System.Collections.Generic.ICollection{Internal.LiteDB.Engine.PagePosition})">
            <summary>
            Add transactionID in confirmed list and update WAL index with all pages positions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.RestoreIndex(Internal.LiteDB.Engine.HeaderPage@)">
            <summary>
            Load all confirmed transactions from log file (used only when open datafile)
            Don't need lock because it's called on ctor of LiteEngine
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.Checkpoint">
            <summary>
            Do checkpoint operation to copy log pages into data file. Return how many transactions was commited inside data file
            Checkpoint requires exclusive lock database
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.TryCheckpoint">
            <summary>
            Run checkpoint only if there is no open transactions
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.WalIndexService.CheckpointInternal">
            <summary>
            Do checkpoint operation to copy log pages into data file. Return how many transactions was commited inside data file
            Checkpoint requires exclusive lock database
            If soft = true, just try enter in exclusive mode - if not possible, just exit (don't execute checkpoint)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SortContainer.IsEOF">
            <summary>
            Returns if current container has no more items to read
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.SortContainer.Current">
            <summary>
            Get current/last read value in container
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SortContainer.Position">
            <summary>
            Get container disk position
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SortContainer.Count">
            <summary>
            Get how many keyValues this container contains
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortContainer.InitializeReader(System.IO.Stream,Internal.LiteDB.BufferSlice,System.Boolean)">
            <summary>
            Initialize reader based on Stream (if data was persisted in disk) or Buffer (if all data fit in only 1 container)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortContainer.GetSourceFromStream(System.IO.Stream)">
            <summary>
            Get 8k buffer slices inside file container
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.SortDisk">
            <summary>
            Single instance of TempDisk manage read/write access to temporary disk - used in merge sort
            [ThreadSafe]
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortDisk.GetReader">
            <summary>
            Get a new reader stream from pool. Must return after use
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortDisk.Return(System.IO.Stream)">
            <summary>
            Return used open reader stream to be reused in next sort
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortDisk.Return(System.Int64)">
            <summary>
            Return used disk container position to be reused in next sort
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortDisk.GetContainerPosition">
            <summary>
            Get next avaiable disk position - can be a new extend file or reuse container slot
            Use thread safe classes to ensure multiple threads access at same time
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortDisk.Write(System.Int64,Internal.LiteDB.BufferSlice)">
            <summary>
            Write buffer container data into disk
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.SortService">
            <summary>
            Service to implement merge sort, in disk, to run ORDER BY command.
            [ThreadSafe]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SortService.Count">
            <summary>
            Get how many documents was inserted by Insert method
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SortService.Containers">
            <summary>
            Expose used container in this sort operation
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortService.Insert(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress}})">
            <summary>
            Read all input items and store in temp disk ordered in each container
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortService.Sort">
            <summary>
            Slipt all items in big sorted containers - Do merge sort with all containers
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortService.SliptValues(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress}},Internal.LiteDB.Engine.Done)">
            <summary>
            Split values in many IEnumerable. Each enumerable contains values to be insert in a single container
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SortService.YieldValues(System.Collections.Generic.IEnumerator{System.Collections.Generic.KeyValuePair{Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress}},Internal.LiteDB.Engine.Done)">
            <summary>
            Loop in values enumerator to return N values for a single container
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Slot">
            <summary>
            Slot index [0-255] used in all index nodes
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.IndexType">
            <summary>
            Indicate index type: 0 = SkipList (reserved for future use)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Name">
            <summary>
            Index name
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Expression">
            <summary>
            Get index expression (path or expr)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.BsonExpr">
            <summary>
            Get BsonExpression from Expression
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Unique">
            <summary>
            Indicate if this index has distinct values only
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Head">
            <summary>
            Head page address for this index
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Tail">
            <summary>
            A link pointer to tail node
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.Reserved">
            <summary>
            Reserved byte (old max level)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.CollectionIndex.FreeIndexPageList">
            <summary>
            Free index page linked-list (all pages here must have at least 600 bytes)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.CollectionIndex.IsEmpty">
            <summary>
            Returns if this index slot is empty and can be used as new index
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionIndex.GetLength(Internal.LiteDB.Engine.CollectionIndex)">
            <summary>
            Get index collection size used in CollectionPage
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.CollectionIndex.GetLength(System.String,System.String)">
            <summary>
            Get index collection size used in CollectionPage
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.CursorInfo">
            <summary>
            Represent a single query featching data from engine
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.DataBlock.DATA_BLOCK_FIXED_SIZE">
            <summary>
            Get fixed part of DataBlock (6 bytes)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DataBlock.Position">
            <summary>
            Position block inside page
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DataBlock.Extend">
            <summary>
            Indicate if this data block is first block (false) or extend block (true)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DataBlock.NextBlock">
            <summary>
            If document need more than 1 block, use this link to next block
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.DataBlock.Buffer">
            <summary>
            Document buffer slice
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataBlock.#ctor(Internal.LiteDB.Engine.DataPage,System.Byte,Internal.LiteDB.BufferSlice)">
            <summary>
            Read new DataBlock from filled page segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.DataBlock.#ctor(Internal.LiteDB.Engine.DataPage,System.Byte,Internal.LiteDB.BufferSlice,System.Boolean,Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Create new DataBlock and fill into buffer
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.Done">
            <summary>
            Simple parameter class to be passed into IEnumerable classes loop ("ref" do not works)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.FileOrigin.None">
            <summary>
            There is no origin (new page)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.FileOrigin.Data">
            <summary>
            Data file 
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.FileOrigin.Log">
            <summary>
            Log file (-log)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.IndexNode">
            <summary>
            Represent a index node inside a Index Page
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.IndexNode.INDEX_NODE_FIXED_SIZE">
            <summary>
            Fixed length of IndexNode (12 bytes)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Position">
            <summary>
            Position of this node inside a IndexPage (not persist)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Slot">
            <summary>
            Index slot reference in CollectionIndex [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Levels">
            <summary>
            Skip-list levels (array-size) (1-32) - [1 byte]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Key">
            <summary>
            The object value that was indexed (max 255 bytes value)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.DataBlock">
            <summary>
            Reference for a datablock address
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.NextNode">
            <summary>
            Single linked-list for all nodes from a single document [5 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Prev">
            <summary>
            Link to prev value (used in skip lists - Prev.Length = Next.Length) [5 bytes]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Next">
            <summary>
            Link to next value (used in skip lists - Prev.Length = Next.Length)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.IndexNode.Page">
            <summary>
            Get index page reference
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.GetNodeLength(System.Byte,Internal.LiteDB.BsonValue,System.Int32@)">
            <summary>
            Calculate how many bytes this node will need on page segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.GetKeyLength(Internal.LiteDB.BsonValue,System.Boolean)">
            <summary>
            Get how many bytes will be used to store this value. Must consider:
            [1 byte] - BsonType
            [1 byte] - KeyLength (used only in String|Byte[])
            [N bytes] - BsonValue in bytes (0-254)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.#ctor(Internal.LiteDB.Engine.IndexPage,System.Byte,Internal.LiteDB.BufferSlice)">
            <summary>
            Read index node from page segment (lazy-load)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.#ctor(Internal.LiteDB.Engine.IndexPage,System.Byte,Internal.LiteDB.BufferSlice,System.Byte,System.Byte,Internal.LiteDB.BsonValue,Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Create new index node and persist into page segment
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.#ctor(Internal.LiteDB.BsonDocument)">
            <summary>
            Create a fake index node used only in Virtual Index runner
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.SetNextNode(Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Update NextNode pointer (update in buffer too). Also, set page as dirty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.SetPrev(System.Byte,Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Update Prev[index] pointer (update in buffer too). Also, set page as dirty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.SetNext(System.Byte,Internal.LiteDB.Engine.PageAddress)">
            <summary>
            Update Next[index] pointer (update in buffer too). Also, set page as dirty
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.IndexNode.GetNextPrev(System.Byte,System.Int32)">
            <summary>
            Returns Next (order == 1) OR Prev (order == -1)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.LockMode">
            <summary>
            Represents a snapshot lock mode
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.LockMode.Read">
            <summary>
            Read only snap with read lock
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.LockMode.Write">
            <summary>
            Read/Write snapshot with reserved lock
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.PageAddress">
            <summary>
            Represents a page address inside a page structure - index could be byte offset position OR index in a list (6 bytes)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageAddress.PageID">
            <summary>
            PageID (4 bytes)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageAddress.Index">
            <summary>
            Page Segment index inside page (1 bytes)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.PageAddress.IsEmpty">
            <summary>
            Returns true if this PageAdress is empty value
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.PageBuffer">
            <summary>
            Represent page buffer to be read/write using FileMemory
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageBuffer.UniqueID">
            <summary>
            Get, on initialize, a unique ID in all database instance for this PageBufer. Is a simple global incremented counter
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageBuffer.Position">
            <summary>
            Get/Set page position. If page are writable, this postion CAN be MaxValue (has not defined position yet)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageBuffer.Origin">
            <summary>
            Get/Set page bytes origin (data/log)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageBuffer.ShareCounter">
            <summary>
            Get/Set how many read-share threads are using this page. -1 means 1 thread are using as writable
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PageBuffer.Timestamp">
            <summary>
            Get/Set timestamp from last request
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.PageBuffer.Release">
            <summary>
            Release this page - decrement ShareCounter
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.PagePosition">
            <summary>
            Represents a page position after save in disk. Used in WAL files where PageID do not match with PagePosition
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PagePosition.PageID">
            <summary>
            PageID (4 bytes)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.PagePosition.Position">
            <summary>
            Position in disk
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.PagePosition.IsEmpty">
            <summary>
            Checks if current PagePosition is empty value
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.Pragma">
            <summary>
            Represent a single internal engine variable that user can read/change
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.RebuildOptions">
            <summary>
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Engine.RebuildOptions._buildId">
            <summary>
            A random BuildID identifier
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.RebuildOptions.Password">
            <summary>
            Rebuild database with a new password
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.RebuildOptions.Collation">
            <summary>
            Define a new collation when rebuild
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.RebuildOptions.IncludeErrorReport">
            <summary>
            When set true, if any problem occurs in rebuild, a _rebuild_errors collection
            will contains all errors found
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.RebuildOptions.Errors">
            <summary>
            After run rebuild process, get a error report (empty if no error detected)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.RebuildOptions.GetErrorReport">
            <summary>
            Get a list of errors during rebuild process
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.TransactionPages">
            <summary>
            Represent a simple structure to store added/removed pages in a transaction. One instance per transaction
            [SingleThread]
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.TransactionSize">
            <summary>
            Get how many pages are involved in this transaction across all snapshots - Will be clear when get MAX_TRANSACTION_SIZE
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.DirtyPages">
            <summary>
            Contains all dirty pages already persist in LOG file (used in all snapshots). Store in [uint, PagePosition] to reuse same method in save pages into log and get saved page positions on log
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.NewPages">
            <summary>
            Handle created pages during transaction (for rollback) - Is a list because order is important
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.FirstDeletedPageID">
            <summary>
            First deleted pageID 
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.LastDeletedPageID">
            <summary>
            Last deleted pageID
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.DeletedPages">
            <summary>
            Get deleted page count
            </summary>
        </member>
        <member name="E:Internal.LiteDB.Engine.TransactionPages.Commit">
            <summary>
            Callback function to modify header page on commit
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.TransactionPages.OnCommit(Internal.LiteDB.Engine.HeaderPage)">
            <summary>
            Run Commit event
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.TransactionPages.HeaderChanged">
            <summary>
            Detect if this transaction will need persist header page (has added/deleted pages or added/deleted collections)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.SysQuery">
            <summary>
            This class implement $query experimental system function to run sub-queries. It's experimental only - possible not be present in final release
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Engine.SystemCollection">
            <summary>
            Implement a simple system collection with input data only (to use Output must inherit this class)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Engine.SystemCollection.Name">
            <summary>
            Get system collection name (must starts with $)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SystemCollection.Input(Internal.LiteDB.BsonValue)">
            <summary>
            Get input data source factory
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SystemCollection.Output(System.Collections.Generic.IEnumerable{Internal.LiteDB.BsonDocument},Internal.LiteDB.BsonValue)">
            <summary>
            Get output data source factory (must implement in inherit class)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SystemCollection.GetOption(Internal.LiteDB.BsonValue,System.String)">
            <summary>
            Static helper to read options arg as plain value or as document fields
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Engine.SystemCollection.GetOption(Internal.LiteDB.BsonValue,System.String,Internal.LiteDB.BsonValue)">
            <summary>
            Static helper to read options arg as plain value or as document fields
            </summary>
        </member>
        <member name="T:Internal.LiteDB.AesEncryption">
            <summary>
            Encryption AES wrapper to encrypt data pages
            </summary>
        </member>
        <member name="M:Internal.LiteDB.AesEncryption.Encrypt(System.Byte[])">
            <summary>
            Encrypt byte array returning new encrypted byte array with same length of original array (PAGE_SIZE)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.AesEncryption.Decrypt(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decrypt and byte array returning a new byte array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.AesEncryption.HashSHA1(System.String)">
            <summary>
            Hash a password using SHA1 just to verify password
            </summary>
        </member>
        <member name="M:Internal.LiteDB.AesEncryption.Salt(System.Int32)">
            <summary>
            Generate a salt key that will be stored inside first page database
            </summary>
            <returns></returns>
        </member>
        <member name="T:Internal.LiteDB.BsonReader">
            <summary>
            Internal class to deserialize a byte[] into a BsonDocument using BSON data format
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonReader.Deserialize(System.Byte[])">
            <summary>
            Main method - deserialize using ByteReader helper
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonReader.ReadDocument(Internal.LiteDB.ByteReader)">
            <summary>
            Read a BsonDocument from reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonReader.ReadArray(Internal.LiteDB.ByteReader)">
            <summary>
            Read an BsonArray from reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BsonReader.ReadElement(Internal.LiteDB.ByteReader,System.String@)">
            <summary>
            Reads an element (key-value) from an reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ByteReader.ReadBsonString">
            <summary>
            Read BSON string add \0x00 at and of string and add this char in length before
            </summary>
        </member>
        <member name="T:Internal.LiteDB.AsyncManualResetEvent">
            <summary>
            Async implementation of ManualResetEvent
            https://devblogs.microsoft.com/pfxteam/building-async-coordination-primitives-part-1-asyncmanualresetevent/
            </summary>
        </member>
        <member name="T:Internal.LiteDB.BufferSlice">
            <summary>
            Internal class that implement same idea from ArraySegment[byte] but use a class (not a struct). Works for byte[] only
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.Clear">
            <summary>
            Clear all page content byte array (not controls)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.Clear(System.Int32,System.Int32)">
            <summary>
            Clear page content byte array
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.Fill(System.Byte)">
            <summary>
            Fill all content with value. Used for DEBUG propost
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.All(System.Byte)">
            <summary>
            Checks if all values contains only value parameter (used for DEBUG)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.ToHex">
            <summary>
            Return byte[] slice into hex digits
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.Slice(System.Int32,System.Int32)">
            <summary>
            Slice this buffer into new BufferSlice according new offset and new count
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSlice.ToArray">
            <summary>
            Convert this buffer slice into new byte[]
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Collation">
            <summary>
            Implement how database will compare to order by/find strings according defined culture/compare options
            If not set, default is CurrentCulture with IgnoreCase
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Collation.LCID">
            <summary>
            Get LCID code from culture
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Collation.Culture">
            <summary>
            Get database language culture
            </summary>
        </member>
        <member name="P:Internal.LiteDB.Collation.SortOptions">
            <summary>
            Get options to how string should be compared in sort
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Collation.Compare(System.String,System.String)">
            <summary>
            Compare 2 string values using current culture/compare options
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Constants">
            <summary>
            Class with all constants used in LiteDB + Debbuger HELPER
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.PAGE_SIZE">
            <summary>
            The size of each page in disk - use 8192 as all major databases
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.PAGE_HEADER_SIZE">
            <summary>
            Header page size
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.ENCRYPTION_SALT_SIZE">
            <summary>
            Bytes used in encryption salt
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.BUFFER_WRITABLE">
            <summary>
            Define ShareCounter buffer as writable
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.INDEX_NAME_MAX_LENGTH">
            <summary>
            Define index name max length
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_LEVEL_LENGTH">
            <summary>
            Max level used on skip list (index).
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_INDEX_KEY_LENGTH">
            <summary>
            Max size of a index entry - usde for string, binary, array and documents. Need fit in 1 byte length
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_INDEX_LENGTH">
            <summary>
            Get max length of 1 single index node
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.PAGE_FREE_LIST_SLOTS">
            <summary>
            Get how many slots collection pages will have for free list page (data/index)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_DOCUMENT_SIZE">
            <summary>
            Document limit size - 2048 data pages limit (about 16Mb - same size as MongoDB)
            Using 2047 because first/last page can contain less than 8150 bytes.
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_OPEN_TRANSACTIONS">
            <summary>
            Define how many transactions can be open simultaneously
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MAX_TRANSACTION_SIZE">
            <summary>
            Define how many pages all transaction will consume, in memory, before persist in disk. This amount are shared across all open transactions
            100,000 ~= 1Gb memory
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.MEMORY_SEGMENT_SIZES">
            <summary>
            Size, in PAGES, for each buffer array (used in MemoryStore)
            It's an array to increase after each extend - limited in highest value
            Each byte array will be created with this size * PAGE_SIZE
            Use minimal 12 to allocate at least 85Kb per segment (will use LOH)
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.VIRTUAL_INDEX_MAX_CACHE">
            <summary>
            Define how many documents will be keep in memory until clear cache and remove support to orderby/groupby
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.CONTAINER_SORT_SIZE">
            <summary>
            Define how many bytes each merge sort container will be created
            </summary>
        </member>
        <member name="F:Internal.LiteDB.Constants.RANDOMIZER_SEED">
            <summary>
            Initial seed for Random
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Constants.LOG(System.String,System.String)">
            <summary>
            Log a message using Debug.WriteLine
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Constants.LOG(System.Boolean,System.String,System.String)">
            <summary>
            Log a message using Debug.WriteLine only if conditional = true
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Constants.ENSURE(System.Boolean,System.String)">
            <summary>
            Ensure condition is true, otherwise throw exception (check contract)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Constants.ENSURE(System.Boolean,System.Boolean,System.String)">
            <summary>
            If ifTest are true, ensure condition is true, otherwise throw ensure exception (check contract)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Constants.DEBUG(System.Boolean,System.String)">
            <summary>
            Ensure condition is true, otherwise throw exception (runs only in DEBUG mode)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.ExtendedLengthHelper">
            <summary>
            Class to help extend IndexNode key up to 1023 bytes length (for string/byte[]) using 2 first bits in BsonType
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ExtendedLengthHelper.ReadLength(System.Byte,System.Byte,Internal.LiteDB.BsonType@,System.UInt16@)">
            <summary>
            Read BsonType and UShort length from 2 bytes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ExtendedLengthHelper.WriteLength(Internal.LiteDB.BsonType,System.UInt16,System.Byte@,System.Byte@)">
            <summary>
            Write BsonType and UShort length in 2 bytes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.IsFullZero(System.Byte[])">
            <summary>
            Very fast way to check if all byte array is full of zero
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.Fill(System.Byte[],System.Byte,System.Int32,System.Int32)">
            <summary>
            Fill all array with defined value
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ReadCString(System.Byte[],System.Int32,System.Int32@)">
            <summary>
            Read UTF8 string until found \0
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.Int16,System.Byte[],System.Int32)">
            <summary>
            Copy Int16 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Copy Int32 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.Int64,System.Byte[],System.Int32)">
            <summary>
            Copy Int64 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.UInt16,System.Byte[],System.Int32)">
            <summary>
            Copy UInt16 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.UInt32,System.Byte[],System.Int32)">
            <summary>
            Copy UInt32 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.UInt64,System.Byte[],System.Int32)">
            <summary>
            Copy Int64 bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.Single,System.Byte[],System.Int32)">
            <summary>
            Copy Single bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferExtensions.ToBytes(System.Double,System.Byte[],System.Int32)">
            <summary>
            Copy Double bytes direct into buffer
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSliceExtensions.ReadCString(Internal.LiteDB.BufferSlice,System.Int32,System.Int32@)">
            <summary>
            Read string with \0 on end. Returns full string length (including \0 char)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSliceExtensions.ReadIndexKey(Internal.LiteDB.BufferSlice,System.Int32)">
            <summary>
            Read any BsonValue. Use 1 byte for data type, 1 byte for length (optional), 0-255 bytes to value. 
            For document or array, use BufferReader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.BufferSliceExtensions.WriteIndexKey(Internal.LiteDB.BufferSlice,Internal.LiteDB.BsonValue,System.Int32)">
            <summary>
            Wrtie any BsonValue. Use 1 byte for data type, 1 byte for length (optional), 0-255 bytes to value. 
            For document or array, use BufferWriter
            </summary>
        </member>
        <member name="M:Internal.LiteDB.DateExtensions.Truncate(System.DateTime)">
            <summary>
            Truncate DateTime in milliseconds
            </summary>
        </member>
        <member name="M:Internal.LiteDB.DictionaryExtensions.GetValue``1(System.Collections.Generic.Dictionary{System.String,System.String},System.String,``0)">
            <summary>
            Get value from dictionary converting datatype T
            </summary>
        </member>
        <member name="M:Internal.LiteDB.DictionaryExtensions.GetFileSize(System.Collections.Generic.Dictionary{System.String,System.String},System.String,System.Int64)">
            <summary>
            Get a value from a key converted in file size format: "1gb", "10 mb", "80000"
            </summary>
        </member>
        <member name="M:Internal.LiteDB.ExpressionExtensions.GetPath(System.Linq.Expressions.Expression)">
            <summary>
            Get Path (better ToString) from an Expression.
            Support multi levels: x => x.Customer.Address
            Support list levels: x => x.Addresses.Select(z => z.StreetName)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.IOExceptionExtensions.IsLocked(System.IO.IOException)">
            <summary>
            Detect if exception is an Locked exception
            </summary>
        </member>
        <member name="M:Internal.LiteDB.IOExceptionExtensions.WaitIfLocked(System.IO.IOException,System.Int32)">
            <summary>
            Wait current thread for N milliseconds if exception is about Locking
            </summary>
        </member>
        <member name="M:Internal.LiteDB.LinqExtensions.IsLast``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Return same IEnumerable but indicate if item last item in enumerable
            </summary>
        </member>
        <member name="M:Internal.LiteDB.StreamExtensions.FlushToDisk(System.IO.Stream)">
            <summary>
            If Stream are FileStream, flush content direct to disk (avoid OS cache)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.StringExtensions.IsWord(System.String)">
            <summary>
            Test if string is simple word pattern ([a-Z$_])
            </summary>
        </member>
        <member name="M:Internal.LiteDB.StringExtensions.SqlLike(System.String,System.String,Internal.LiteDB.Collation)">
            <summary>
            Implement SqlLike in C# string - based on
            https://stackoverflow.com/a/8583383/3286260
            I remove support for [ and ] to avoid missing close brackets
            </summary>
        </member>
        <member name="M:Internal.LiteDB.StringExtensions.SqlLikeStartsWith(System.String,System.Boolean@)">
            <summary>
            Get first string before any `%` or `_` ... used to index startswith - out if has more string pattern after found wildcard
            </summary>
        </member>
        <member name="T:Internal.LiteDB.FileHelper">
            <summary>
            A simple file helper tool with static methods
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.GetSuffixFile(System.String,System.String,System.Boolean)">
            <summary>
            Create a temp filename based on original filename - checks if file exists (if exists, append counter number)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.GetLogFile(System.String)">
            <summary>
            Get LOG file based on data file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.GetTempFile(System.String)">
            <summary>
            Get TEMP file based on data file
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.IsFileLocked(System.String)">
            <summary>
            Test if file are used by any process
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.TryExec(System.Int32,System.Action)">
            <summary>
            Try execute some action while has lock exception
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.Exec(System.Int32,System.Action)">
            <summary>
            Try execute some action while has lock exception. If timeout occurs, throw last exception
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.ParseFileSize(System.String)">
            <summary>
            Convert storage unit string "1gb", "10 mb", "80000" to long bytes
            </summary>
        </member>
        <member name="M:Internal.LiteDB.FileHelper.FormatFileSize(System.Int64)">
            <summary>
            Format a long file length to pretty file unit
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LCID">
            <summary>
            Get CultureInfo object from LCID code (not avaiable in .net standard 1.3)
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LCID.Current">
            <summary>
            Get current system operation LCID culture
            </summary>
        </member>
        <member name="T:Internal.LiteDB.LiteException">
            <summary>
            The main exception for LiteDB
            </summary>
        </member>
        <member name="P:Internal.LiteDB.LiteException.IsCritical">
            <summary>
            Critical error should be stop engine and release data files and all memory allocation
            </summary>
        </member>
        <member name="T:Internal.LiteDB.MimeTypeConverter">
            <summary>
            Convert filename to mimetype (http://stackoverflow.com/questions/1029740/get-mime-type-from-filename-extension)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Randomizer">
            <summary>
            A singleton shared randomizer class
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Result`1">
            <summary>
            Implement a generic result structure with value and exception. This value can be partial value (like BsonDocument/Array)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Result`1.GetValue">
            <summary>
            Get array result or throw exception if there is any error on read result
            </summary>
        </member>
        <member name="T:Internal.LiteDB.TokenType">
            <summary>
            ASCII char names: https://www.ascii.cl/htmlcodes.htm
            </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.OpenBrace">
            <summary> { </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.CloseBrace">
            <summary> } </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.OpenBracket">
            <summary> [ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.CloseBracket">
            <summary> ] </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.OpenParenthesis">
            <summary> ( </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.CloseParenthesis">
            <summary> ) </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Comma">
            <summary> , </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Colon">
            <summary> : </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.SemiColon">
            <summary> ; </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.At">
            <summary> @ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Hashtag">
            <summary> # </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Til">
            <summary> ~ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Period">
            <summary> . </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Ampersand">
            <summary> &amp; </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Dollar">
            <summary> $ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Exclamation">
            <summary> ! </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.NotEquals">
            <summary> != </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Equals">
            <summary> = </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Greater">
            <summary> &gt; </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.GreaterOrEquals">
            <summary> &gt;= </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Less">
            <summary> &lt; </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.LessOrEquals">
            <summary> &lt;= </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Minus">
            <summary> - </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Plus">
            <summary> + </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Asterisk">
            <summary> * </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Slash">
            <summary> / </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Backslash">
            <summary> \ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Percent">
            <summary> % </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.String">
            <summary> "..." or '...' </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Int">
            <summary> [0-9]+ </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Double">
            <summary> [0-9]+.[0-9] </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Whitespace">
            <summary> \n\r\t \u0032 </summary>
        </member>
        <member name="F:Internal.LiteDB.TokenType.Word">
            <summary> [a-Z_$]+[a-Z0-9_$] </summary>
        </member>
        <member name="T:Internal.LiteDB.Token">
            <summary>
            Represent a single string token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Token.Expect(Internal.LiteDB.TokenType)">
            <summary>
            Expect if token is type (if not, throw UnexpectedToken)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Token.Expect(Internal.LiteDB.TokenType,Internal.LiteDB.TokenType)">
            <summary>
            Expect for type1 OR type2 (if not, throw UnexpectedToken)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Token.Expect(Internal.LiteDB.TokenType,Internal.LiteDB.TokenType,Internal.LiteDB.TokenType)">
            <summary>
            Expect for type1 OR type2 OR type3 (if not, throw UnexpectedToken)
            </summary>
        </member>
        <member name="T:Internal.LiteDB.Tokenizer">
            <summary>
            Class to tokenize TextReader input used in JsonRead/BsonExpressions
            This class are not thread safe
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.CheckEOF">
            <summary>
            If EOF throw an invalid token exception (used in while()) otherwise return "false" (not EOF)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.IsWordChar(System.Char,System.Boolean)">
            <summary>
            Checks if char is an valid part of a word [a-Z_]+[a-Z0-9_$]*
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadChar">
            <summary>
            Read next char in stream and set in _current
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.LookAhead(System.Boolean)">
            <summary>
            Look for next token but keeps in buffer when run "ReadToken()" again.
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadToken(System.Boolean)">
            <summary>
            Read next token (or from ahead buffer).
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadNext(System.Boolean)">
            <summary>
            Read next token from reader
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.EatWhitespace">
            <summary>
            Eat all whitespace - used before a valid token
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadWord">
            <summary>
            Read a word (word = [\w$]+)
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadNumber(System.Boolean@)">
            <summary>
            Read a number - it's accepts all number char, but not validate. When run Convert, .NET will check if number is correct
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadString(System.Char)">
            <summary>
            Read a string removing open and close " or '
            </summary>
        </member>
        <member name="M:Internal.LiteDB.Tokenizer.ReadLine">
            <summary>
            Read all chars to end of LINE
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.AxisAlignedBoundingBox.GetBottomCorner(System.Int32)">
            <summary>
            Geth the corners by quadrant of the bottom
            </summary>
            <param name="quadrantIndex"></param>
        </member>
        <member name="M:Internal.Net3dBool.AxisAlignedBoundingBox.GetIntersectCost">
            <summary>
            This is the computation cost of doing an intersection with the given type.
            Attempt to give it in average CPU cycles for the intersecton.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Internal.Net3dBool.BooleanModeller">
            <summary>
            Class used to apply boolean operations on solids.
            Two 'Solid' objects are submitted to this class constructor. There is a methods for
            each boolean operation. Each of these return a 'Solid' resulting from the application
            of its operation into the submitted solids.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.BooleanModeller.object1">
            solid where boolean operations will be applied 
        </member>
        <member name="M:Internal.Net3dBool.BooleanModeller.#ctor(Internal.Net3dBool.Solid,Internal.Net3dBool.Solid)">
             Constructs a BooleanModeller object to apply boolean operation in two solids.
             Makes preliminary calculations
            
             @param solid1 first solid where boolean operations will be applied
             @param solid2 second solid where boolean operations will be applied
        </member>
        <member name="M:Internal.Net3dBool.BooleanModeller.Clone">
             Clones the BooleanModeller object
            
             @return cloned BooleanModeller object
        </member>
        <member name="M:Internal.Net3dBool.BooleanModeller.GetDifference">
             Gets the solid generated by the union of the two solids submitted to the constructor
            
             @return solid generated by the union of the two solids submitted to the constructor
        </member>
        <member name="M:Internal.Net3dBool.BooleanModeller.ComposeSolid(Internal.Net3dBool.Status,Internal.Net3dBool.Status,Internal.Net3dBool.Status)">
             Composes a solid based on the faces status of the two operators solids:
             Status.INSIDE, Status.OUTSIDE, Status.SAME, Status.OPPOSITE
            
             @param faceStatus1 status expected for the first solid faces
             @param faceStatus2 other status expected for the first solid faces
             (expected a status for the faces coincident with second solid faces)
             @param faceStatus3 status expected for the second solid faces
        </member>
        <member name="M:Internal.Net3dBool.BooleanModeller.GroupObjectComponents(Internal.Net3dBool.Object3D,System.Collections.Generic.List{Internal.Net3dBool.Vertex},System.Collections.Generic.List{System.Int32},Internal.Net3dBool.Status,Internal.Net3dBool.Status)">
             Fills solid arrays with data about faces of an object generated whose status
             is as required
            
             @param object3d solid object used to fill the arrays
             @param vertices vertices array to be filled
             @param indices indices array to be filled
             @param faceStatus1 a status expected for the faces used to to fill the data arrays
             @param faceStatus2 a status expected for the faces used to to fill the data arrays
        </member>
        <member name="T:Internal.Net3dBool.Bound">
            <summary>
            Representation of a bound - the extremes of a 3d component for each coordinate.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Bound.xMax">
            maximum from the x coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.xMin">
            minimum from the x coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.yMax">
            maximum from the y coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.yMin">
            minimum from the y coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.zMax">
            maximum from the z coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.zMin">
            minimum from the z coordinate 
        </member>
        <member name="F:Internal.Net3dBool.Bound.EqualityTolerance">
            tolerance value to test equalities 
        </member>
        <member name="M:Internal.Net3dBool.Bound.#ctor(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            Bound constructor for a face
            
            @param p1 point relative to the first vertex
            @param p2 point relative to the second vertex
            @param p3 point relative to the third vertex
        </member>
        <member name="M:Internal.Net3dBool.Bound.#ctor(Internal.Net3dBool.Vector3[])">
            Bound constructor for a object 3d
            
            @param vertices the object vertices
        </member>
        <member name="M:Internal.Net3dBool.Bound.toString">
            Makes a string definition for the bound object
            
            @return the string definition
        </member>
        <member name="M:Internal.Net3dBool.Bound.Overlap(Internal.Net3dBool.Bound)">
            Checks if a bound overlaps other one
            
            @param bound other bound to make the comparison
            @return true if they insersect, false otherwise
        </member>
        <member name="M:Internal.Net3dBool.Bound.CheckVertex(Internal.Net3dBool.Vector3)">
            Checks if one of the coordinates of a vertex exceed the ones found before 
            
            @param vertex vertex to be tested
        </member>
        <member name="T:Internal.Net3dBool.Face">
            <summary>
            Representation of a 3D face (triangle).
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Face.v1">
            first vertex 
        </member>
        <member name="F:Internal.Net3dBool.Face.v2">
            second vertex 
        </member>
        <member name="F:Internal.Net3dBool.Face.v3">
            third vertex 
        </member>
        <member name="F:Internal.Net3dBool.Face.EqualityTolerance">
            face status relative to a solid  
        </member>
        <member name="M:Internal.Net3dBool.Face.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Face.#ctor(Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex)">
            <summary>
            * Constructs a face with unknown status.
            </summary>
            <param name="v1">a face vertex</param>
            <param name="v2">a face vertex</param>
            <param name="v3">a face vertex</param>
        </member>
        <member name="M:Internal.Net3dBool.Face.Clone">
            <summary>
            Clones the face object
            </summary>
            <returns>cloned face object</returns>
        </member>
        <member name="M:Internal.Net3dBool.Face.Equals(Internal.Net3dBool.Face)">
             Makes a string definition for the Face object
            
             @return the string definition
        </member>
        <member name="M:Internal.Net3dBool.Face.RayTraceClassify(Internal.Net3dBool.Object3D)">
            <summary>
            Classifies the face based on the ray trace technique
            </summary>
            <param name="obj">object3d used to compute the face status</param>
        </member>
        <member name="M:Internal.Net3dBool.Face.SimpleClassify">
            <summary>
            Classifies the face if one of its vertices are classified as INSIDE or OUTSIDE
            </summary>
            <returns>true if the face could be classified, false otherwise</returns>
        </member>
        <member name="M:Internal.Net3dBool.Face.LinePositionInX(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Gets the position of a point relative to a line in the x plane
            </summary>
            <param name="point">point to be tested</param>
            <param name="pointLine1">one of the line ends</param>
            <param name="pointLine2">one of the line ends</param>
            <returns>position of the point relative to the line - UP, DOWN, ON, NONE</returns>
        </member>
        <member name="M:Internal.Net3dBool.Face.LinePositionInY(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Gets the position of a point relative to a line in the y plane
            </summary>
            <param name="point">point to be tested</param>
            <param name="pointLine1">one of the line ends</param>
            <param name="pointLine2">one of the line ends</param>
            <returns>position of the point relative to the line - UP, DOWN, ON, NONE</returns>
        </member>
        <member name="M:Internal.Net3dBool.Face.LinePositionInZ(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Gets the position of a point relative to a line in the z plane
            </summary>
            <param name="point">point to be tested</param>
            <param name="pointLine1">one of the line ends</param>
            <param name="pointLine2">one of the line ends</param>
            <returns>position of the point relative to the line - UP, DOWN, ON, NONE</returns>
        </member>
        <member name="M:Internal.Net3dBool.Face.ContainsPoint(Internal.Net3dBool.Vector3)">
            <summary>
            Checks if the the face contains a point
            </summary>
            <param name="point">point to be tested</param>
            <returns>true if the face contains the point, false otherwise</returns>
        </member>
        <member name="T:Internal.Net3dBool.Line">
            <summary>
            Representation of a 3d line or a ray(represented by a direction and a point).
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Line.EqualityTolerance">
            <summary>
            tolerance value to test equalities
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Line.#ctor(Internal.Net3dBool.Face,Internal.Net3dBool.Face)">
            <summary>
            Constructor for a line.The line created is the intersection between two planes
            </summary>
            <param name="face1">face representing one of the planes</param>
            <param name="face2">face representing one of the planes</param>
        </member>
        <member name="M:Internal.Net3dBool.Line.#ctor(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Constructor for a ray
            </summary>
            <param name="direction">direction ray</param>
            <param name="point">beginning of the ray</param>
        </member>
        <member name="P:Internal.Net3dBool.Line.Direction">
            <summary>
            line direction
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Line.ComputeLineIntersection(Internal.Net3dBool.Line)">
            <summary>
            Computes the point resulting from the intersection with another line
            </summary>
            <param name="otherLine">the other line to apply the intersection. The lines are supposed to intersect</param>
            <returns>point resulting from the intersection. If the point coundn't be obtained, return null</returns>
        </member>
        <member name="M:Internal.Net3dBool.Line.ComputePlaneIntersection(Internal.Net3dBool.Plane)">
            <summary>
            Compute the point resulting from the intersection with a plane
            </summary>
            <param name="plane">a plane point.</param>
            <returns>intersection point.If they don't intersect, return null</returns>
        </member>
        <member name="M:Internal.Net3dBool.Line.ComputePointToPointDistance(Internal.Net3dBool.Vector3)">
            <summary>
            Computes the distance from the line point to another point
            </summary>
            <param name="otherPoint">the point to compute the distance from the line point. The point is supposed to be on the same line.</param>
            <returns>points distance. If the point submitted is behind the direction, the distance is negative</returns>
        </member>
        <member name="M:Internal.Net3dBool.Line.PerturbDirection">
            <summary>
            Changes slightly the line direction
            </summary>
        </member>
        <member name="T:Internal.Net3dBool.Object3D">
            <summary>
            Data structure about a 3d solid to apply boolean operations in it.
            Tipically, two 'Object3d' objects are created to apply boolean operation. The
            methods splitFaces() and classifyFaces() are called in this sequence for both objects,
            always using the other one as parameter.Then the faces from both objects are collected
            according their status.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Object3D.EqualityTolerance">
            <summary>
            tolerance value to test equalities
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Object3D.bound">
            <summary>
            object representing the solid extremes
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Object3D.faces">
            <summary>
            solid faces
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Object3D.vertices">
            <summary>
            solid vertices
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.#ctor(Internal.Net3dBool.Solid)">
            <summary>
            Constructs a Object3d object based on a solid file.
            </summary>
            <param name="solid">solid used to construct the Object3d object</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.ClassifyFaces(Internal.Net3dBool.Object3D)">
            <summary>
            Classify faces as being inside, outside or on boundary of other object
            </summary>
            <param name="otherObject">object 3d used for the comparison</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.Clone">
            <summary>
            Clones the Object3D object
            </summary>
            <returns>cloned object</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.GetBound">
            <summary>
            Gets the solid bound
            </summary>
            <returns>solid bound</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.GetFace(System.Int32)">
            <summary>
            Gets a face reference for a given position
            </summary>
            <param name="index">required face position</param>
            <returns>face reference , null if the position is invalid</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.GetNumFaces">
            <summary>
            Gets the number of faces
            </summary>
            <returns>number of faces</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.InvertInsideFaces">
            <summary>
            Inverts faces classified as INSIDE, making its normals point outside. Usually used into the second solid when the difference is applied.
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.SplitFaces(Internal.Net3dBool.Object3D)">
            <summary>
            Split faces so that none face is intercepted by a face of other object
            </summary>
            <param name="obj">the other object 3d used to make the split</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.AddFace(Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex)">
            <summary>
            Method used to add a face properly for internal methods
            </summary>
            <param name="v1">a face vertex</param>
            <param name="v2">a face vertex</param>
            <param name="v3">a face vertex</param>
            <returns></returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.AddVertex(Internal.Net3dBool.Vector3,Internal.Net3dBool.Status)">
            <summary>
            Method used to add a vertex properly for internal methods
            </summary>
            <param name="pos">vertex position</param>
            <param name="status">vertex status</param>
            <returns>The vertex inserted (if a similar vertex already exists, this is returned).</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInFive(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,System.Int32)">
            <summary>
            Face breaker for FACE-FACE-FACE
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos1">new vertex position</param>
            <param name="newPos2">new vertex position</param>
            <param name="linedVertex">linedVertex what vertex is more lined with the interersection found</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInFour(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vertex)">
            <summary>
            Face breaker for EDGE-FACE-FACE / FACE-FACE-EDGE
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos1">new vertex position</param>
            <param name="newPos2">new vertex position</param>
            <param name="endVertex">vertex used for the split</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInThree(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,System.Int32)">
            <summary>
            Face breaker for EDGE-EDGE-EDGE
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos1">new vertex position</param>
            <param name="newPos2">new vertex position</param>
            <param name="splitEdge">edge that will be split</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInThree(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vertex)">
            <summary>
            Face breaker for VERTEX-FACE-FACE / FACE-FACE-VERTEX
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos">new vertex position</param>
            <param name="endVertex">vertex used for the split</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInThree(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex)">
            <summary>
            Face breaker for EDGE-FACE-EDGE
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos1">new vertex position</param>
            <param name="newPos2">new vertex position</param>
            <param name="startVertex">vertex used for the new faces creation</param>
            <param name="endVertex">vertex used for the new faces creation</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInThree(System.Int32,Internal.Net3dBool.Vector3)">
            <summary>
            Face breaker for FACE-FACE-FACE (a point only)
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos">new vertex position</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInTwo(System.Int32,Internal.Net3dBool.Vector3,System.Int32)">
            <summary>
            Face breaker for VERTEX-EDGE-EDGE / EDGE-EDGE-VERTEX
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos">new vertex position</param>
            <param name="splitEdge">edge that will be split</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.BreakFaceInTwo(System.Int32,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vertex)">
            <summary>
            Face breaker for VERTEX-FACE-EDGE / EDGE-FACE-VERTEX
            </summary>
            <param name="facePos">face position on the faces array</param>
            <param name="newPos">new vertex position</param>
            <param name="endVertex">vertex used for splitting</param>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.ComputeDistance(Internal.Net3dBool.Vertex,Internal.Net3dBool.Face)">
            <summary>
            Computes closest distance from a vertex to a plane
            </summary>
            <param name="vertex">vertex used to compute the distance</param>
            <param name="face">face representing the plane where it is contained</param>
            <returns>the closest distance from the vertex to the plane</returns>
        </member>
        <member name="M:Internal.Net3dBool.Object3D.SplitFace(System.Int32,Internal.Net3dBool.Segment,Internal.Net3dBool.Segment)">
            <summary>
            Split an individual face
            </summary>
            <param name="facePos">face position on the array of faces</param>
            <param name="segment1">segment representing the intersection of the face with the plane</param>
            <param name="segment2">segment representing the intersection of other face with the plane of the current face plane</param>
        </member>
        <member name="T:Internal.Net3dBool.Ray">
            <summary>
            a virtual ray that is casted from a begin Position in a certain Direction.
            </summary>
        </member>
        <member name="T:Internal.Net3dBool.Segment">
            <summary>
            Represents a line segment resulting from a intersection of a face and a plane.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Segment.line">
            line resulting from the two planes intersection 
        </member>
        <member name="F:Internal.Net3dBool.Segment.index">
            shows how many ends were already defined 
        </member>
        <member name="P:Internal.Net3dBool.Segment.StartDist">
            distance from the segment starting point to the point defining the plane 
        </member>
        <member name="F:Internal.Net3dBool.Segment.endDist">
            distance from the segment ending point to the point defining the plane 
        </member>
        <member name="F:Internal.Net3dBool.Segment.startType">
            starting point status relative to the face 
        </member>
        <member name="F:Internal.Net3dBool.Segment.middleType">
            intermediate status relative to the face 
        </member>
        <member name="F:Internal.Net3dBool.Segment.endType">
            ending point status relative to the face 
        </member>
        <member name="F:Internal.Net3dBool.Segment.startVertex">
            nearest vertex from the starting point 
        </member>
        <member name="F:Internal.Net3dBool.Segment.endVertex">
            nearest vertex from the ending point 
        </member>
        <member name="F:Internal.Net3dBool.Segment.startPos">
            start of the intersection point 
        </member>
        <member name="F:Internal.Net3dBool.Segment.endPos">
            end of the intersection point 
        </member>
        <member name="F:Internal.Net3dBool.Segment.VERTEX">
            define as vertex one of the segment ends 
        </member>
        <member name="F:Internal.Net3dBool.Segment.FACE">
            define as face one of the segment ends 
        </member>
        <member name="F:Internal.Net3dBool.Segment.EDGE">
            define as edge one of the segment ends 
        </member>
        <member name="F:Internal.Net3dBool.Segment.TOL">
            tolerance value to test equalities 
        </member>
        <member name="M:Internal.Net3dBool.Segment.#ctor(Internal.Net3dBool.Line,Internal.Net3dBool.Face,System.Int32,System.Int32,System.Int32)">
            Constructs a Segment based on elements obtained from the two planes relations 
            
            @param line resulting from the two planes intersection
            @param face face that intersects with the plane
            @param sign1 position of the face vertex1 relative to the plane (-1 behind, 1 front, 0 on)
            @param sign2 position of the face vertex1 relative to the plane (-1 behind, 1 front, 0 on)
            @param sign3 position of the face vertex1 relative to the plane (-1 behind, 1 front, 0 on)  
        </member>
        <member name="M:Internal.Net3dBool.Segment.Clone">
            Clones the Segment object
            
            @return cloned Segment object
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetStartVertex">
            Gets the start vertex
            
            @return start vertex
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetEndVertex">
            Gets the end vertex
            
            @return end vertex
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetEndDistance">
            Gets the distance from the origin until ending point
            
            @return distance from the origin until the ending point
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetStartType">
            Gets the type of the starting point
            
            @return type of the starting point
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetIntermediateType">
            Gets the type of the segment between the starting and ending points
            
            @return type of the segment between the starting and ending points
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetEndType">
            Gets the type of the ending point
            
            @return type of the ending point
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetNumEndsSet">
             Gets the number of ends already set
            
             @return number of ends already set
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetStartPosition">
            Gets the starting position
            
            @return start position
        </member>
        <member name="M:Internal.Net3dBool.Segment.GetEndPosition">
            Gets the ending position
            
            @return ending position
        </member>
        <member name="M:Internal.Net3dBool.Segment.Intersect(Internal.Net3dBool.Segment)">
            Checks if two segments intersect
            
            @param segment the other segment to check the intesection
            @return true if the segments intersect, false otherwise
        </member>
        <member name="M:Internal.Net3dBool.Segment.SetVertex(Internal.Net3dBool.Vertex)">
            Sets an end as vertex (starting point if none end were defined, ending point otherwise)
            
            @param vertex the vertex that is an segment end 
            @return false if all the ends were already defined, true otherwise
        </member>
        <member name="M:Internal.Net3dBool.Segment.SetEdge(Internal.Net3dBool.Vertex,Internal.Net3dBool.Vertex)">
            Sets an end as edge (starting point if none end were defined, ending point otherwise)
            
            @param vertex1 one of the vertices of the intercepted edge 
            @param vertex2 one of the vertices of the intercepted edge
            @return false if all ends were already defined, true otherwise
        </member>
        <member name="M:Internal.Net3dBool.Segment.SwapEnds">
            Swaps the starting point and the ending point 
        </member>
        <member name="T:Internal.Net3dBool.Solid">
            <summary>
            Class representing a 3D solid.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Solid.indices">
            array of indices for the vertices from the 'vertices' attribute 
        </member>
        <member name="F:Internal.Net3dBool.Solid.vertices">
            array of points defining the solid's vertices 
        </member>
        <member name="M:Internal.Net3dBool.Solid.#ctor">
            Constructs an empty solid. 
        </member>
        <member name="M:Internal.Net3dBool.Solid.#ctor(Internal.Net3dBool.Vector3[],System.Int32[])">
            Construct a solid based on data arrays. An exception may occur in the case of 
            abnormal arrays (indices making references to inexistent vertices, there are less
            colors than vertices...)
            
            @param vertices array of points defining the solid vertices
            @param indices array of indices for a array of vertices
            @param colors array of colors defining the vertices colors 
        </member>
        <member name="M:Internal.Net3dBool.Solid.setInitialFeatures">
            Sets the initial features common to all constructors 
        </member>
        <member name="M:Internal.Net3dBool.Solid.getVertices">
            Gets the solid vertices
            
            @return solid vertices
        </member>
        <member name="M:Internal.Net3dBool.Solid.getIndices">
            Gets the solid indices for its vertices
            
            @return solid indices for its vertices
        </member>
        <member name="M:Internal.Net3dBool.Solid.isEmpty">
            Gets if the solid is empty (without any vertex)
            
            @return true if the solid is empty, false otherwise
        </member>
        <member name="M:Internal.Net3dBool.Solid.setData(Internal.Net3dBool.Vector3[],System.Int32[])">
            Sets the solid data. Each vertex may have a different color. An exception may 
            occur in the case of abnormal arrays (e.g., indices making references to  
            inexistent vertices, there are less colors than vertices...)
            
            @param vertices array of points defining the solid vertices
            @param indices array of indices for a array of vertices
            @param colors array of colors defining the vertices colors 
        </member>
        <member name="M:Internal.Net3dBool.Solid.translate(System.Double,System.Double)">
            Applies a translation into a solid
            
            @param dx translation on the x axis
            @param dy translation on the y axis
        </member>
        <member name="M:Internal.Net3dBool.Solid.rotate(System.Double,System.Double)">
            Applies a rotation into a solid
            
            @param dx rotation on the x axis
            @param dy rotation on the y axis
        </member>
        <member name="M:Internal.Net3dBool.Solid.zoom(System.Double)">
            Applies a zoom into a solid
            
            @param dz translation on the z axis
        </member>
        <member name="M:Internal.Net3dBool.Solid.scale(System.Double,System.Double,System.Double)">
            Applies a scale changing into the solid
            
            @param dx scale changing for the x axis 
            @param dy scale changing for the y axis
            @param dz scale changing for the z axis
        </member>
        <member name="M:Internal.Net3dBool.Solid.defineGeometry">
            Creates a geometry based on the indexes and vertices set for the solid 
        </member>
        <member name="M:Internal.Net3dBool.Solid.getMean">
            Gets the solid mean
            
            @return point representing the mean
        </member>
        <member name="T:Internal.Net3dBool.Vector3">
            <summary>
            Represents a 3D vector using three double-precision floating-point numbers.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.x">
            <summary>
            The X component of the Vector3.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.y">
            <summary>
            The Y component of the Vector3.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.z">
            <summary>
            The Z component of the Vector3.
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new Vector3.
            </summary>
            <param name="x">The x component of the Vector3.</param>
            <param name="y">The y component of the Vector3.</param>
            <param name="z">The z component of the Vector3.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.#ctor(Internal.Net3dBool.Vector3)">
            <summary>
            Constructs a new instance from the given Vector3d.
            </summary>
            <param name="v">The Vector3d to copy components from.</param>
        </member>
        <member name="P:Internal.Net3dBool.Vector3.Length">
            <summary>
            Gets the length (magnitude) of the vector.
            </summary>
            <see cref="!:LengthFast"/>
            <seealso cref="P:Internal.Net3dBool.Vector3.LengthSquared"/>
        </member>
        <member name="P:Internal.Net3dBool.Vector3.LengthSquared">
            <summary>
            Gets the square of the vector length (magnitude).
            </summary>
            <remarks>
            This property avoids the costly square root operation required by the Length property. This makes it more suitable
            for comparisons.
            </remarks>
            <see cref="P:Internal.Net3dBool.Vector3.Length"/>
            <seealso cref="!:LengthFast"/>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.GetNormal">
            <summary>
            Returns a normalized Vector of this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Normalize">
            <summary>
            Scales the Vector3d to unit length.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.UnitX">
            <summary>
            Defines a unit-length Vector3d that points towards the X-axis.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.UnitY">
            <summary>
            Defines a unit-length Vector3d that points towards the Y-axis.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.UnitZ">
            <summary>
            /// Defines a unit-length Vector3d that points towards the Z-axis.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.Zero">
            <summary>
            Defines a zero-length Vector3.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.One">
            <summary>
            Defines an instance with all components set to 1.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.PositiveInfinity">
            <summary>
            Defines an instance with all components set to positive infinity.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.NegativeInfinity">
            <summary>
            Defines an instance with all components set to negative infinity.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vector3.SizeInBytes">
            <summary>
            Defines the size of the Vector3d struct in bytes.
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Add(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <returns>Result of operation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Add(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">Left operand.</param>
            <param name="b">Right operand.</param>
            <param name="result">Result of operation.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Subtract(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>Result of subtraction</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Subtract(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Subtract one Vector from another
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">Result of subtraction</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Multiply(Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Multiply(Internal.Net3dBool.Vector3@,System.Double,Internal.Net3dBool.Vector3@)">
            <summary>
            Multiplies a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Multiply(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Multiplies a vector by the components a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Multiply(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Multiplies a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Divide(Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Divide(Internal.Net3dBool.Vector3@,System.Double,Internal.Net3dBool.Vector3@)">
            <summary>
            Divides a vector by a scalar.
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Divide(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Divides a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <returns>Result of the operation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Divide(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Divide a vector by the components of a vector (scale).
            </summary>
            <param name="vector">Left operand.</param>
            <param name="scale">Right operand.</param>
            <param name="result">Result of the operation.</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.ComponentMin(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise minimum</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.ComponentMin(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Calculate the component-wise minimum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise minimum</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.ComponentMax(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <returns>The component-wise maximum</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.ComponentMax(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Calculate the component-wise maximum of two vectors
            </summary>
            <param name="a">First operand</param>
            <param name="b">Second operand</param>
            <param name="result">The component-wise maximum</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Min(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Max(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Returns the Vector3d with the minimum magnitude
            </summary>
            <param name="left">Left operand</param>
            <param name="right">Right operand</param>
            <returns>The minimum Vector3</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Clamp(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <returns>The clamped vector</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Clamp(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Clamp a vector to the given minimum and maximum vectors
            </summary>
            <param name="vec">Input vector</param>
            <param name="min">Minimum vector</param>
            <param name="max">Maximum vector</param>
            <param name="result">The clamped vector</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Normalize(Internal.Net3dBool.Vector3)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <returns>The normalized vector</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Normalize(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Scale a vector to unit length
            </summary>
            <param name="vec">The input vector</param>
            <param name="result">The normalized vector</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Dot(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The dot product of the two inputs</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Dot(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,System.Double@)">
            <summary>
            Calculate the dot (scalar) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <param name="result">The dot product of the two inputs</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Cross(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Cross(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@)">
            <summary>
            Caclulate the cross (vector) product of two vectors
            </summary>
            <param name="left">First operand</param>
            <param name="right">Second operand</param>
            <returns>The cross product of the two inputs</returns>
            <param name="result">The cross product of the two inputs</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Collinear(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Checks if 3 points are collinear (all lie on the same line).
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="c"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Lerp(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <returns>a when blend=0, b when blend=1, and a linear combination otherwise</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Lerp(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,System.Double,Internal.Net3dBool.Vector3@)">
            <summary>
            Returns a new Vector that is the linear blend of the 2 given Vectors
            </summary>
            <param name="a">First input vector</param>
            <param name="b">Second input vector</param>
            <param name="blend">The blend factor. a when blend=0, b when blend=1.</param>
            <param name="result">a when blend=0, b when blend=1, and a linear combination otherwise</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.BaryCentric(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3,System.Double,System.Double)">
            <summary>
            Interpolate 3 Vectors using Barycentric coordinates
            </summary>
            <param name="a">First input Vector</param>
            <param name="b">Second input Vector</param>
            <param name="c">Third input Vector</param>
            <param name="u">First Barycentric Coordinate</param>
            <param name="v">Second Barycentric Coordinate</param>
            <returns>a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.BaryCentric(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,System.Double,System.Double,Internal.Net3dBool.Vector3@)">
            <summary>Interpolate 3 Vectors using Barycentric coordinates</summary>
            <param name="a">First input Vector.</param>
            <param name="b">Second input Vector.</param>
            <param name="c">Third input Vector.</param>
            <param name="u">First Barycentric Coordinate.</param>
            <param name="v">Second Barycentric Coordinate.</param>
            <param name="result">Output Vector. a when u=v=0, b when u=1,v=0, c when u=0,v=1, and a linear combination of a,b,c otherwise</param>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.CalculateAngle(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Calculates the angle (in radians) between two vectors.
            </summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <returns>Angle (in radians) between the vectors.</returns>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.CalculateAngle(Internal.Net3dBool.Vector3@,Internal.Net3dBool.Vector3@,System.Double@)">
            <summary>Calculates the angle (in radians) between two vectors.</summary>
            <param name="first">The first vector.</param>
            <param name="second">The second vector.</param>
            <param name="result">Angle (in radians) between the vectors.</param>
            <remarks>Note that the returned angle is never bigger than the constant Pi.</remarks>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Addition(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Adds two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Subtraction(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Subtracts two instances.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_UnaryNegation(Internal.Net3dBool.Vector3)">
            <summary>
            Negates an instance.
            </summary>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Multiply(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Component wise multiply two vectors together, x*x, y*y, z*z.
            </summary>
            <param name="vecA"></param>
            <param name="vecB"></param>
            <returns></returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Multiply(Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Multiply(System.Double,Internal.Net3dBool.Vector3)">
            <summary>
            Multiplies an instance by a scalar.
            </summary>
            <param name="scale">The scalar.</param>
            <param name="vec">The instance.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Division(System.Double,Internal.Net3dBool.Vector3)">
            <summary>
            Creates a new vector which is the numerator devided by each component of the vector.
            </summary>
            <param name="numerator"></param>
            <param name="vec"></param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Division(Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Divides an instance by a scalar.
            </summary>
            <param name="vec">The instance.</param>
            <param name="scale">The scalar.</param>
            <returns>The result of the calculation.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Equality(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Compares two instances for equality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left equals right; false otherwise.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.op_Inequality(Internal.Net3dBool.Vector3,Internal.Net3dBool.Vector3)">
            <summary>
            Compares two instances for inequality.
            </summary>
            <param name="left">The first instance.</param>
            <param name="right">The second instance.</param>
            <returns>True, if left does not equa lright; false otherwise.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.ToString">
            <summary>
            Returns a System.String that represents the current Vector3.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.GetHashCode">
            <summary>
            Returns the hashcode for this instance.
            </summary>
            <returns>A System.Int32 containing the unique hashcode for this instance.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare to.</param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Equals(Internal.Net3dBool.Vector3,System.Double)">
            <summary>
            Indicates whether this instance and a specified object are equal within an error range.
            </summary>
            <param name="OtherVector"></param>
            <param name="ErrorValue"></param>
            <returns>True if the instances are equal; false otherwise.</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vector3.Equals(Internal.Net3dBool.Vector3)">
            <summary>Indicates whether the current vector is equal to another vector.</summary>
            <param name="other">A vector to compare with this vector.</param>
            <returns>true if the current vector is equal to the vector parameter; otherwise, false.</returns>
        </member>
        <member name="T:Internal.Net3dBool.Vertex">
            <summary>
            Represents of a 3d face vertex.
            </summary>
        </member>
        <member name="F:Internal.Net3dBool.Vertex.adjacentVertices">
            references to vertices conected to it by an edge  
        </member>
        <member name="F:Internal.Net3dBool.Vertex.status">
            vertex status relative to other object 
        </member>
        <member name="F:Internal.Net3dBool.Vertex.EqualityTolerance">
            tolerance value to test equalities 
        </member>
        <member name="M:Internal.Net3dBool.Vertex.#ctor(Internal.Net3dBool.Vector3)">
            Constructs a vertex with unknown status
            
            @param position vertex position
        </member>
        <member name="M:Internal.Net3dBool.Vertex.#ctor(System.Double,System.Double,System.Double)">
            Constructs a vertex with unknown status
            
            @param x coordinate on the x axis
            @param y coordinate on the y axis
            @param z coordinate on the z axis
        </member>
        <member name="M:Internal.Net3dBool.Vertex.#ctor(Internal.Net3dBool.Vector3,Internal.Net3dBool.Status)">
            <summary>
            Constructs a vertex with definite status
            </summary>
            <param name="position">vertex position</param>
            <param name="status">vertex status - UNKNOWN, BOUNDARY, INSIDE or OUTSIDE</param>
        </member>
        <member name="M:Internal.Net3dBool.Vertex.#ctor(System.Double,System.Double,System.Double,Internal.Net3dBool.Status)">
            <summary>
            Constructs a vertex with a definite status
            </summary>
            <param name="x">coordinate on the x axis</param>
            <param name="y">coordinate on the y axis</param>
            <param name="z">coordinate on the z axis</param>
            <param name="status">vertex status - UNKNOWN, BOUNDARY, INSIDE or OUTSIDE</param>
        </member>
        <member name="M:Internal.Net3dBool.Vertex.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Internal.Net3dBool.Vertex.Clone">
            <summary>
            Clones the vertex object
            </summary>
            <returns>cloned vertex object</returns>
        </member>
        <member name="M:Internal.Net3dBool.Vertex.toString">
            Makes a string definition for the Vertex object
            
            @return the string definition
        </member>
        <member name="M:Internal.Net3dBool.Vertex.Equals(Internal.Net3dBool.Vertex)">
            Checks if an vertex is equal to another. To be equal, they have to have the same
            coordinates(with some tolerance)
            
            @param anObject the other vertex to be tested
            @return true if they are equal, false otherwise. 
        </member>
        <member name="M:Internal.Net3dBool.Vertex.SetStatus(Internal.Net3dBool.Status)">
            Sets the vertex status
            
            @param status vertex status - UNKNOWN, BOUNDARY, INSIDE or OUTSIDE
        </member>
        <member name="M:Internal.Net3dBool.Vertex.GetPosition">
            Gets the vertex position
            
            @return vertex position
        </member>
        <member name="M:Internal.Net3dBool.Vertex.GetAdjacentVertices">
            Gets an array with the adjacent vertices
            
            @return array of the adjacent vertices 
        </member>
        <member name="M:Internal.Net3dBool.Vertex.GetStatus">
            Gets the vertex status
            
            @return vertex status - UNKNOWN, BOUNDARY, INSIDE or OUTSIDE
        </member>
        <member name="M:Internal.Net3dBool.Vertex.AddAdjacentVertex(Internal.Net3dBool.Vertex)">
            Sets a vertex as being adjacent to it
            
            @param adjacentVertex an adjacent vertex
        </member>
        <member name="M:Internal.Net3dBool.Vertex.Mark(Internal.Net3dBool.Status)">
            Sets the vertex status, setting equally the adjacent ones
            
            @param status new status to be set
        </member>
        <member name="T:Internal.SharpBgfx.Bgfx">
            <summary>
            Managed interface to the bgfx graphics library.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.AllocateTransientBuffers(System.Int32,Internal.SharpBgfx.VertexLayout,System.Int32,Internal.SharpBgfx.TransientVertexBuffer@,Internal.SharpBgfx.TransientIndexBuffer@,System.Boolean)">
            <summary>
            Attempts to allocate both a transient vertex buffer and index buffer.
            </summary>
            <param name="vertexCount">The number of vertices to allocate.</param>
            <param name="layout">The layout of each vertex.</param>
            <param name="indexCount">The number of indices to allocate.</param>
            <param name="vertexBuffer">Returns the allocated transient vertex buffer.</param>
            <param name="indexBuffer">Returns the allocated transient index buffer.</param>
            <returns><c>true</c> if both space requirements are satisfied and the buffers were allocated.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.VertexPack(System.Single*,System.Boolean,Internal.SharpBgfx.VertexAttributeUsage,Internal.SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Packs a vector into vertex stream format.
            </summary>
            <param name="input">The four element vector to pack.</param>
            <param name="inputNormalized"><c>true</c> if the input vector is normalized.</param>
            <param name="attribute">The attribute usage of the vector data.</param>
            <param name="layout">The layout of the vertex stream.</param>
            <param name="data">The pointer to the vertex data stream.</param>
            <param name="index">The index of the vertex within the stream.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.VertexUnpack(System.Single*,Internal.SharpBgfx.VertexAttributeUsage,Internal.SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Unpack a vector from a vertex stream.
            </summary>
            <param name="output">A pointer to four floats that will receive the unpacked vector.</param>
            <param name="attribute">The usage of the vertex attribute.</param>
            <param name="layout">The layout of the vertex stream.</param>
            <param name="data">A pointer to the vertex data stream.</param>
            <param name="index">The index of the vertex within the stream.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.VertexConvert(Internal.SharpBgfx.VertexLayout,System.IntPtr,Internal.SharpBgfx.VertexLayout,System.IntPtr,System.Int32)">
            <summary>
            Converts a stream of vertex data from one format to another.
            </summary>
            <param name="destinationLayout">The destination format.</param>
            <param name="destinationData">A pointer to the output location.</param>
            <param name="sourceLayout">The source format.</param>
            <param name="sourceData">A pointer to the source vertex data to convert.</param>
            <param name="count">The number of vertices to convert.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetPlatformData(Internal.SharpBgfx.PlatformData)">
            <summary>
            Sets platform-specific data pointers to hook into low-level library functionality.
            </summary>
            <param name="platformData">A collection of platform-specific data pointers.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetWindowHandle(System.IntPtr)">
            <summary>
            Sets the handle of the main rendering window.
            </summary>
            <param name="windowHandle">The handle of the native OS window.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetInternalData">
            <summary>
            Gets access to underlying API internals for interop scenarios.
            </summary>
            <returns>A structure containing API context information.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.ManuallyRenderFrame(System.Int32)">
            <summary>
            Manually renders a frame. Use this to control the Bgfx render loop.
            </summary>
            <param name="timeoutMs">
            The amount of time to wait, in milliseconds, for the next frame to be rendered.
            If the timeout is exceeded, the call
            returns.
            </param>
            <returns>The result of the render call.</returns>
            <remarks>
            Use this function if you don't want Bgfx to create and maintain a
            separate render thread. Call this once before <see cref="!:Bgfx.Init(RendererBackend, Adapter, ICallbackHandler)"/>
            to avoid having the thread created internally.
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetCurrentBackend">
            <summary>
            Gets the currently active rendering backend API.
            </summary>
            <returns>The currently active rendering backend.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Shutdown">
            <summary>
            Closes the library and releases all resources.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetCaps">
            <summary>
            Gets the capabilities of the rendering device.
            </summary>
            <returns>Information about the capabilities of the device.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetStats">
            <summary>
            Gets frame performance statistics.
            </summary>
            <returns>Information about frame performance.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Reset(System.Int32,System.Int32,Internal.SharpBgfx.ResetFlags,Internal.SharpBgfx.TextureFormat)">
            <summary>
            Resets graphics settings and surfaces.
            </summary>
            <param name="width">The width of the main window.</param>
            <param name="height">The height of the main window.</param>
            <param name="flags">Flags used to configure rendering output.</param>
            <param name="format">The format of the backbuffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Frame(System.Boolean)">
            <summary>
            Advances to the next frame.
            </summary>
            <param name="capture">If <c>true</c> the frame is captured for debugging.</param>
            <returns>The current frame number.</returns>
            <remarks>
            When using a multithreaded renderer, this call
            just swaps internal buffers, kicks render thread, and returns. In a
            singlethreaded renderer this call does frame rendering.
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Init(Internal.SharpBgfx.InitSettings)">
            <summary>
            Initializes the graphics library on the specified adapter.
            </summary>
            <param name="settings">Settings that control initialization, or <c>null</c> to use sane defaults.</param>
            <returns><c>true</c> if initialization succeeds; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetSupportedBackends">
            <summary>
            Gets the set of supported rendering backends.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.GetBackendName(Internal.SharpBgfx.RendererBackend)">
            <summary>
            Gets the friendly name of a specific rendering backend.
            </summary>
            <param name="backend">The backend for which to retrieve a name.</param>
            <returns>The friendly name of the specified backend.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetDebugFeatures(Internal.SharpBgfx.DebugFeatures)">
            <summary>
            Enables debugging features.
            </summary>
            <param name="features">The set of debug features to enable.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetDebugMarker(System.String)">
            <summary>
            Sets a marker that can be used for debugging purposes.
            </summary>
            <param name="marker">The user-defined name of the marker.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextClear(Internal.SharpBgfx.DebugColor,System.Boolean)">
            <summary>
            Clears the debug text buffer.
            </summary>
            <param name="color">The color with which to clear the background.</param>
            <param name="smallText"><c>true</c> to use a small font for debug output; <c>false</c> to use normal sized text.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,Internal.SharpBgfx.DebugColor,Internal.SharpBgfx.DebugColor,System.String,System.Object[])">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="foreColor">The foreground color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="format">The format of the message.</param>
            <param name="args">The arguments with which to format the message.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,Internal.SharpBgfx.DebugColor,Internal.SharpBgfx.DebugColor,System.String)">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="foreColor">The foreground color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextWrite(System.Int32,System.Int32,Internal.SharpBgfx.DebugColor,Internal.SharpBgfx.DebugColor,System.IntPtr)">
            <summary>
            Writes debug text to the screen.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="foreColor">The foreground color of the text.</param>
            <param name="backColor">The background color of the text.</param>
            <param name="message">The message to write.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextImage(System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32)">
            <summary>
            Draws data directly into the debug text buffer.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="width">The width of the image to draw.</param>
            <param name="height">The height of the image to draw.</param>
            <param name="data">The image data bytes.</param>
            <param name="pitch">The pitch of each line in the image data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.DebugTextImage(System.Int32,System.Int32,System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Draws data directly into the debug text buffer.
            </summary>
            <param name="x">The X position, in cells.</param>
            <param name="y">The Y position, in cells.</param>
            <param name="width">The width of the image to draw.</param>
            <param name="height">The height of the image to draw.</param>
            <param name="data">The image data bytes.</param>
            <param name="pitch">The pitch of each line in the image data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewName(System.UInt16,System.String)">
            <summary>
            Sets the name of a rendering view, for debugging purposes.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="name">The name of the view.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewRect(System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the viewport for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the viewport.</param>
            <param name="y">The Y coordinate of the viewport.</param>
            <param name="width">The width of the viewport, in pixels.</param>
            <param name="height">The height of the viewport, in pixels.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewRect(System.UInt16,System.Int32,System.Int32,Internal.SharpBgfx.BackbufferRatio)">
            <summary>
            Sets the viewport for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the viewport.</param>
            <param name="y">The Y coordinate of the viewport.</param>
            <param name="ratio">The ratio with which to automatically size the viewport.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewScissor(System.UInt16,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor rectangle for a specific view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="x">The X coordinate of the scissor rectangle.</param>
            <param name="y">The Y coordinate of the scissor rectangle.</param>
            <param name="width">The width of the scissor rectangle.</param>
            <param name="height">The height of the scissor rectangle.</param>
            <remarks>
            Set all values to zero to disable the scissor test.
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewClear(System.UInt16,Internal.SharpBgfx.ClearTargets,System.UInt32,System.Single,System.Byte)">
            <summary>
            Sets view clear flags.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="targets">The target surfaces that should be cleared.</param>
            <param name="colorRgba">The clear color.</param>
            <param name="depth">The value to fill the depth buffer.</param>
            <param name="stencil">The value to fill the stencil buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewClear(System.UInt16,Internal.SharpBgfx.ClearTargets,System.Single,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Sets view clear flags for multiple render targets.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="targets">The target surfaces that should be cleared.</param>
            <param name="depth">The value to fill the depth buffer.</param>
            <param name="stencil">The value to fill the stencil buffer.</param>
            <param name="rt0">The color palette index for render target 0.</param>
            <param name="rt1">The color palette index for render target 1.</param>
            <param name="rt2">The color palette index for render target 2.</param>
            <param name="rt3">The color palette index for render target 3.</param>
            <param name="rt4">The color palette index for render target 4.</param>
            <param name="rt5">The color palette index for render target 5.</param>
            <param name="rt6">The color palette index for render target 6.</param>
            <param name="rt7">The color palette index for render target 7.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetPaletteColor(System.Byte,System.Single*)">
            <summary>
            Sets an entry in the color palette.
            </summary>
            <param name="index">The index of the palette entry to set.</param>
            <param name="color">The color to set.</param>
            <remarks>
            The clear color palette is used with SetViewClear for clearing multiple render targets
            to different color values.
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewMode(System.UInt16,Internal.SharpBgfx.ViewMode)">
            <summary>
            Sets the sorting mode to use for the given view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="mode">The sorting mode to use.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewTransform(System.UInt16,System.Single*,System.Single*)">
            <summary>
            Sets the view and projection transforms for the given rendering view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="view">The 4x4 view transform matrix.</param>
            <param name="projection">The 4x4 projection transform matrix.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetViewFrameBuffer(System.UInt16,Internal.SharpBgfx.FrameBuffer)">
            <summary>
            Sets the frame buffer used by a particular view.
            </summary>
            <param name="id">The index of the view.</param>
            <param name="frameBuffer">The frame buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetTransform(System.Single*,System.Int32)">
            <summary>
            Sets the model transform to use for drawing primitives.
            </summary>
            <param name="matrix">A pointer to one or more matrices to set.</param>
            <param name="count">The number of matrices in the array.</param>
            <returns>An index into the matrix cache to allow reusing the matrix in other calls.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetTransform(System.Int32,System.Int32)">
            <summary>
            Sets a model transform from the cache.
            </summary>
            <param name="cacheIndex">The index of the cached matrix.</param>
            <param name="count">The number of matrices to set from the cache.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetScissor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the scissor rectangle to use for clipping primitives.
            </summary>
            <param name="x">The X coordinate of the scissor rectangle.</param>
            <param name="y">The Y coordinate of the scissor rectangle.</param>
            <param name="width">The width of the rectangle.</param>
            <param name="height">The height of the rectangle.</param>
            <returns>
            An index into the scissor cache to allow reusing the rectangle in other calls.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetScissor(System.Int32)">
            <summary>
            Sets a scissor rectangle from the cache.
            </summary>
            <param name="cacheIndex">The index of the cached scissor rectangle, or -1 to unset.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.IndexBuffer)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.IndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.VertexBuffer)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.VertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.DynamicIndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.DynamicVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="startVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.TransientIndexBuffer)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetIndexBuffer(Internal.SharpBgfx.TransientIndexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the index buffer to use for drawing primitives.
            </summary>
            <param name="indexBuffer">The index buffer to set.</param>
            <param name="firstIndex">The first index in the buffer to use.</param>
            <param name="count">The number of indices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.TransientVertexBuffer)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexBuffer(System.Int32,Internal.SharpBgfx.TransientVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets the vertex buffer to use for drawing primitives.
            </summary>
            <param name="stream">The index of the vertex stream to set.</param>
            <param name="vertexBuffer">The vertex buffer to set.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetVertexCount(System.Int32)">
            <summary>
            Sets the number of auto-generated vertices for use with gl_VertexID.
            </summary>
            <param name="count">The number of auto-generated vertices.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetInstanceCount(System.Int32)">
            <summary>
            Sets the number of auto-generated indices for use with gl_InstanceID.
            </summary>
            <param name="count">The number of auto-generated instances.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetInstanceDataBuffer(Internal.SharpBgfx.InstanceDataBuffer@,System.Int32,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="instanceData">The instance data.</param>
            <param name="start">The starting offset in the buffer.</param>
            <param name="count">The number of entries to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetInstanceDataBuffer(Internal.SharpBgfx.VertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer containing instance data.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetInstanceDataBuffer(Internal.SharpBgfx.DynamicVertexBuffer,System.Int32,System.Int32)">
            <summary>
            Sets instance data to use for drawing primitives.
            </summary>
            <param name="vertexBuffer">The vertex buffer containing instance data.</param>
            <param name="firstVertex">The index of the first vertex to use.</param>
            <param name="count">The number of vertices to pull from the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetUniform(Internal.SharpBgfx.Uniform,System.Single,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetUniform(Internal.SharpBgfx.Uniform,System.Void*,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetUniform(Internal.SharpBgfx.Uniform,System.IntPtr,System.Int32)">
            <summary>
            Sets the value of a uniform parameter.
            </summary>
            <param name="uniform">The uniform to set.</param>
            <param name="value">A pointer to the uniform's data.</param>
            <param name="arraySize">The size of the data array, if the uniform is an array.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetTexture(System.Byte,Internal.SharpBgfx.Uniform,Internal.SharpBgfx.Texture)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="texture">The texture to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetTexture(System.Byte,Internal.SharpBgfx.Uniform,Internal.SharpBgfx.Texture,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Sets a texture to use for drawing primitives.
            </summary>
            <param name="textureUnit">The texture unit to set.</param>
            <param name="sampler">The sampler uniform.</param>
            <param name="texture">The texture to set.</param>
            <param name="flags">Sampling flags that override the default flags in the texture itself.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeImage(System.Byte,Internal.SharpBgfx.Texture,System.Byte,Internal.SharpBgfx.ComputeBufferAccess,Internal.SharpBgfx.TextureFormat)">
            <summary>
            Sets a texture mip as a compute image.
            </summary>
            <param name="stage">The buffer stage to set.</param>
            <param name="texture">The texture to set.</param>
            <param name="mip">The index of the mip level within the texture to set.</param>
            <param name="format">The format of the buffer data.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,Internal.SharpBgfx.IndexBuffer,Internal.SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets an index buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,Internal.SharpBgfx.VertexBuffer,Internal.SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a verterx buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,Internal.SharpBgfx.DynamicIndexBuffer,Internal.SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a dynamic index buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,Internal.SharpBgfx.DynamicVertexBuffer,Internal.SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets a dynamic vertex buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetComputeBuffer(System.Byte,Internal.SharpBgfx.IndirectBuffer,Internal.SharpBgfx.ComputeBufferAccess)">
            <summary>
            Sets an indirect buffer as a compute resource.
            </summary>
            <param name="stage">The resource stage to set.</param>
            <param name="buffer">The buffer to set.</param>
            <param name="access">Access control flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Touch(System.UInt16)">
            <summary>
            Marks a view as "touched", ensuring that its background is cleared even if nothing is rendered.
            </summary>
            <param name="id">The index of the view to touch.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.ResetView(System.UInt16)">
            <summary>
            Resets all view settings to default.
            </summary>
            <param name="id">The index of the view to reset.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Submit(System.UInt16,Internal.SharpBgfx.Program,System.Int32,Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Submits the current batch of primitives for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <param name="flags">Which states to discard for next draw.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Submit(System.UInt16,Internal.SharpBgfx.Program,Internal.SharpBgfx.OcclusionQuery,System.Int32,Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Submits the current batch of primitives for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="query">An occlusion query to use as a predicate during rendering.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <param name="flags">Which states to discard for next draw.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Submit(System.UInt16,Internal.SharpBgfx.Program,Internal.SharpBgfx.IndirectBuffer,System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Submits an indirect batch of drawing commands to be used for rendering.
            </summary>
            <param name="id">The index of the view to submit.</param>
            <param name="program">The program with which to render.</param>
            <param name="indirectBuffer">The buffer containing drawing commands.</param>
            <param name="startIndex">The index of the first command to process.</param>
            <param name="count">The number of commands to process from the buffer.</param>
            <param name="depth">A depth value to use for sorting the batch.</param>
            <param name="flags">Which states to discard for next draw.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Discard(Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Discards all previously set state for the draw call.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Dispatch(System.UInt16,Internal.SharpBgfx.Program,System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Dispatches a compute job.
            </summary>
            <param name="id">The index of the view to dispatch.</param>
            <param name="program">The shader program to use.</param>
            <param name="xCount">The size of the job in the first dimension.</param>
            <param name="yCount">The size of the job in the second dimension.</param>
            <param name="zCount">The size of the job in the third dimension.</param>
            <param name="flags">Which states to discard for next draw.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.Dispatch(System.UInt16,Internal.SharpBgfx.Program,Internal.SharpBgfx.IndirectBuffer,System.Int32,System.Int32,Internal.SharpBgfx.DiscardFlags)">
            <summary>
            Dispatches an indirect compute job.
            </summary>
            <param name="id">The index of the view to dispatch.</param>
            <param name="program">The shader program to use.</param>
            <param name="indirectBuffer">The buffer containing drawing commands.</param>
            <param name="startIndex">The index of the first command to process.</param>
            <param name="count">The number of commands to process from the buffer.</param>
            <param name="flags">Which states to discard for next draw.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.RequestScreenShot(System.String)">
            <summary>
            Requests that a screenshot be saved. The ScreenshotTaken event will be fired to save the result.
            </summary>
            <param name="filePath">The file path that will be passed to the callback event.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.RequestScreenShot(Internal.SharpBgfx.FrameBuffer,System.String)">
            <summary>
            Requests that a screenshot be saved. The ScreenshotTaken event will be fired to save the result.
            </summary>
            <param name="frameBuffer">The frame buffer to save.</param>
            <param name="filePath">The file path that will be passed to the callback event.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetRenderState(Internal.SharpBgfx.RenderState)">
            <summary>
            Set rendering states used to draw primitives.
            </summary>
            <param name="state">The set of states to set.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetRenderState(Internal.SharpBgfx.RenderState,System.Int32)">
            <summary>
            Set rendering states used to draw primitives.
            </summary>
            <param name="state">The set of states to set.</param>
            <param name="colorRgba">The color used for "factor" blending modes.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetStencil(Internal.SharpBgfx.StencilFlags)">
            <summary>
            Sets stencil test state.
            </summary>
            <param name="frontFace">The stencil state to use for front faces.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Bgfx.SetStencil(Internal.SharpBgfx.StencilFlags,Internal.SharpBgfx.StencilFlags)">
            <summary>
            Sets stencil test state.
            </summary>
            <param name="frontFace">The stencil state to use for front faces.</param>
            <param name="backFace">The stencil state to use for back faces.</param>
        </member>
        <member name="T:Internal.SharpBgfx.ICallbackHandler">
            <summary>
            Provides an interface for programs to respond to callbacks from the bgfx library.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.ReportError(System.String,System.Int32,Internal.SharpBgfx.ErrorType,System.String)">
             <summary>
             Called when an error occurs in the library.
             </summary>
             <param name="fileName">The name of the source file in which the message originated.</param>
             <param name="line">The line number in which the message originated.</param>
             <param name="errorType">The type of error that occurred.</param>
             <param name="message">Message string detailing what went wrong.</param>
             <remarks>
             If the error type is not <see cref="F:Internal.SharpBgfx.ErrorType.DebugCheck"/>, bgfx is in an
             unrecoverable state and the application should terminate.
            
             This method can be called from any thread.
             </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.ReportDebug(System.String,System.Int32,System.String,System.IntPtr)">
            <summary>
            Called to print debug messages.
            </summary>
            <param name="fileName">The name of the source file in which the message originated.</param>
            <param name="line">The line number in which the message originated.</param>
            <param name="format">The message format string.</param>
            <param name="args">A pointer to format arguments.</param>
            <remarks>This method can be called from any thread.</remarks>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.ProfilerBegin(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Called when a profiling region is entered.
            </summary>
            <param name="name">The name of the region.</param>
            <param name="color">The color of the region.</param>
            <param name="filePath">The path of the source file containing the region.</param>
            <param name="line">The line number on which the region was started.</param>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.ProfilerEnd">
            <summary>
            Called when a profiling region is ended.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.GetCachedSize(System.Int64)">
            <summary>
            Queries the size of a cache item.
            </summary>
            <param name="id">The cache entry ID.</param>
            <returns>The size of the cache item, or 0 if the item is not found.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.GetCacheEntry(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Retrieves an entry from the cache.
            </summary>
            <param name="id">The cache entry ID.</param>
            <param name="data">A pointer that should be filled with data from the cache.</param>
            <param name="size">The size of the memory block pointed to be <paramref name="data"/>.</param>
            <returns><c>true</c> if the item is found in the cache; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.SetCacheEntry(System.Int64,System.IntPtr,System.Int32)">
            <summary>
            Saves an entry in the cache.
            </summary>
            <param name="id">The cache entry ID.</param>
            <param name="data">A pointer to the data to save in the cache.</param>
            <param name="size">The size of the memory block pointed to be <paramref name="data"/>.</param>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.SaveScreenShot(System.String,System.Int32,System.Int32,System.Int32,System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Save a captured screenshot.
            </summary>
            <param name="path">The path at which to save the image.</param>
            <param name="width">The width of the image.</param>
            <param name="height">The height of the image.</param>
            <param name="pitch">The number of bytes between lines in the image.</param>
            <param name="data">A pointer to the image data to save.</param>
            <param name="size">The size of the image memory.</param>
            <param name="flipVertical"><c>true</c> if the image origin is bottom left instead of top left; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.CaptureStarted(System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.TextureFormat,System.Boolean)">
            <summary>
            Notifies that a frame capture has begun.
            </summary>
            <param name="width">The width of the capture surface.</param>
            <param name="height">The height of the capture surface.</param>
            <param name="pitch">The number of bytes between lines in the captured frames.</param>
            <param name="format">The format of captured frames.</param>
            <param name="flipVertical"><c>true</c> if the image origin is bottom left instead of top left; otherwise, <c>false</c>.</param>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.CaptureFinished">
            <summary>
            Notifies that a frame capture has finished.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.ICallbackHandler.CaptureFrame(System.IntPtr,System.Int32)">
            <summary>
            Notifies that a frame has been captured.
            </summary>
            <param name="data">A pointer to the frame data.</param>
            <param name="size">The size of the frame data.</param>
        </member>
        <member name="T:Internal.SharpBgfx.Capabilities">
            <summary>
            Contains information about the capabilities of the rendering device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.Backend">
            <summary>
            The currently active rendering backend API.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.SupportedFeatures">
            <summary>
            A set of extended features supported by the device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxDrawCalls">
            <summary>
            The maximum number of draw calls in a single frame.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxBlits">
            <summary>
            The maximum number of texture blits in a single frame.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxTextureSize">
            <summary>
            The maximum size of a texture, in pixels.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxTextureLayers">
            <summary>
            The maximum layers in a texture.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxViews">
            <summary>
            The maximum number of render views supported.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxFramebuffers">
            <summary>
            The maximum number of frame buffers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxFramebufferAttachments">
            <summary>
            The maximum number of attachments to a single framebuffer.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxPrograms">
            <summary>
            The maximum number of programs that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxShaders">
            <summary>
            The maximum number of shaders that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxTextures">
            <summary>
            The maximum number of textures that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxTextureSamplers">
            <summary>
            The maximum number of texture samplers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxComputeBindings">
            <summary>
            The maximum number of compute bindings that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxVertexDecls">
            <summary>
            The maximum number of vertex declarations that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxVertexStreams">
            <summary>
            The maximum number of vertex streams that can be used.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxIndexBuffers">
            <summary>
            The maximum number of index buffers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxVertexBuffers">
            <summary>
            The maximum number of vertex buffers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxDynamicIndexBuffers">
            <summary>
            The maximum number of dynamic index buffers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxDynamicVertexBuffers">
            <summary>
            The maximum number of dynamic vertex buffers that can be allocated.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxUniforms">
            <summary>
            The maximum number of uniforms that can be used.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxOcclusionQueries">
            <summary>
            The maximum number of occlusion queries that can be used.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.MaxEncoders">
            <summary>
            The maximum number of encoder threads.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.TransientVertexBufferSize">
            <summary>
            The amount of transient vertex buffer space reserved.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.TransientIndexBufferSize">
            <summary>
            The amount of transient index buffer space reserved.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.HomogeneousDepth">
            <summary>
            Indicates whether depth coordinates in NDC range from -1 to 1 (true) or 0 to 1 (false).
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.OriginBottomLeft">
            <summary>
            Indicates whether the coordinate system origin is at the bottom left or top left.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.CurrentAdapter">
            <summary>
            Details about the currently active graphics adapter.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.Adapters">
            <summary>
            A list of all graphics adapters installed on the system.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Capabilities.CheckTextureSupport(Internal.SharpBgfx.TextureFormat)">
            <summary>
            Checks device support for a specific texture format.
            </summary>
            <param name="format">The format to check.</param>
            <returns>The level of support for the given format.</returns>
        </member>
        <member name="T:Internal.SharpBgfx.Capabilities.AdapterCollection">
            <summary>
            Provides access to a collection of adapters.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.AdapterCollection.Item(System.Int32)">
            <summary>
            Accesses the element at the specified index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.AdapterCollection.Count">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Capabilities.AdapterCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>A collection enumerator.</returns>
        </member>
        <member name="T:Internal.SharpBgfx.Capabilities.AdapterCollection.Enumerator">
            <summary>
            Implements an enumerator for an AdapterCollection.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Capabilities.AdapterCollection.Enumerator.Current">
            <summary>
            The current enumerated item.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Capabilities.AdapterCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next item in the sequence.
            </summary>
            <returns><c>true</c> if there are more items in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Capabilities.AdapterCollection.Enumerator.Dispose">
            <summary>
            Empty; does nothing.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Capabilities.AdapterCollection.Enumerator.Reset">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.Adapter">
            <summary>
            Contains details about an installed graphics adapter.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Adapter.Default">
            <summary>
            Represents the default adapter for the system.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Adapter.Vendor">
            <summary>
            The IHV that published the adapter.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Adapter.DeviceId">
            <summary>
            A vendor-specific identifier for the adapter type.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Adapter.#ctor(Internal.SharpBgfx.Vendor,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.Adapter"/> struct.
            </summary>
            <param name="vendor">The vendor.</param>
            <param name="deviceId">The device ID.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Adapter.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats">
            <summary>
            Contains various performance metrics tracked by the library.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.CpuTimeFrame">
            <summary>
            CPU time between two <see cref="M:Internal.SharpBgfx.Bgfx.Frame(System.Boolean)"/> calls.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.CpuTimeStart">
            <summary>
            CPU frame start time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.CpuTimeEnd">
            <summary>
            CPU frame end time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.CpuTimerFrequency">
            <summary>
            CPU timer frequency.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.CpuElapsed">
            <summary>
            Elapsed CPU time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.GpuTimeStart">
            <summary>
            GPU frame start time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.GpuTimeEnd">
            <summary>
            GPU frame end time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.GpuTimerFrequency">
            <summary>
            GPU timer frequency.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.GpuElapsed">
            <summary>
            Elapsed GPU time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.WaitingForRender">
            <summary>
            Time spent waiting for the render thread.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.WaitingForSubmit">
            <summary>
            Time spent waiting for the submit thread.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.DrawCallsSubmitted">
            <summary>
            The number of draw calls submitted.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ComputeCallsSubmitted">
            <summary>
            The number of compute calls submitted.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.BlitCallsSubmitted">
            <summary>
            The number of blit calls submitted.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.MaxGpuLatency">
            <summary>
            Maximum observed GPU driver latency.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.DynamicIndexBufferCount">
            <summary>
            Number of allocated dynamic index buffers.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.DynamicVertexBufferCount">
            <summary>
            Number of allocated dynamic vertex buffers.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.FrameBufferCount">
            <summary>
            Number of allocated frame buffers.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.IndexBufferCount">
            <summary>
            Number of allocated index buffers.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.OcclusionQueryCount">
            <summary>
            Number of allocated occlusion queries.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ProgramCount">
            <summary>
            Number of allocated shader programs.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ShaderCount">
            <summary>
            Number of allocated shaders.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TextureCount">
            <summary>
            Number of allocated textures.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.UniformCount">
            <summary>
            Number of allocated uniforms.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.VertexBufferCount">
            <summary>
            Number of allocated vertex buffers.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.VertexDeclarationCount">
            <summary>
            Number of allocated vertex declarations.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TextureMemoryUsed">
            <summary>
            The amount of memory used by textures.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.RenderTargetMemoryUsed">
            <summary>
            The amount of memory used by render targets.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TransientVertexBuffersUsed">
            <summary>
            The number of transient vertex buffers used.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TransientIndexBuffersUsed">
            <summary>
            The number of transient index buffers used.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.MaxGpuMemory">
            <summary>
            Maximum available GPU memory.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.GpuMemoryUsed">
            <summary>
            The amount of GPU memory currently in use.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.BackbufferWidth">
            <summary>
            The width of the back buffer.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.BackbufferHeight">
            <summary>
            The height of the back buffer.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TextBufferWidth">
            <summary>
            The width of the debug text buffer.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.TextBufferHeight">
            <summary>
            The height of the debug text buffer.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.Views">
            <summary>
            Gets a collection of statistics for each rendering view.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.GetPrimitiveCount(Internal.SharpBgfx.Topology)">
            <summary>
            Gets the number of primitives rendered with the given topology.
            </summary>
            <param name="topology">The topology whose primitive count should be returned.</param>
            <returns>The number of primitives rendered.</returns>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.ViewStats">
            <summary>
            Contains perf metrics for a single rendering view.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ViewStats.Name">
            <summary>
            The name of the view.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.ViewStatsCollection">
            <summary>
            Provides access to a collection of view statistics.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Item(System.Int32)">
            <summary>
            Accesses the element at the specified index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Count">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.ViewStatsCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>A collection enumerator.</returns>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Enumerator">
            <summary>
            Implements an enumerator for a ViewStatsCollection.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Enumerator.Current">
            <summary>
            The current enumerated item.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next item in the sequence.
            </summary>
            <returns><c>true</c> if there are more items in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Enumerator.Dispose">
            <summary>
            Empty; does nothing.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.ViewStatsCollection.Enumerator.Reset">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.EncoderStats">
            <summary>
            Contains perf metrics for a single encoder instance.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.EncoderStats.CpuTimeStart">
            <summary>
            CPU frame start time.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.EncoderStats.CpuTimeEnd">
            <summary>
            CPU frame end time.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.EncoderStatsCollection">
            <summary>
            Provides access to a collection of encoder statistics.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Item(System.Int32)">
            <summary>
            Accesses the element at the specified index.
            </summary>
            <param name="index">The index of the element to retrieve.</param>
            <returns>The element at the given index.</returns>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Count">
            <summary>
            The number of elements in the collection.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.GetEnumerator">
            <summary>
            Gets an enumerator for the collection.
            </summary>
            <returns>A collection enumerator.</returns>
        </member>
        <member name="T:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Enumerator">
            <summary>
            Implements an enumerator for an EncoderStatsCollection.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Enumerator.Current">
            <summary>
            The current enumerated item.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Enumerator.MoveNext">
            <summary>
            Advances to the next item in the sequence.
            </summary>
            <returns><c>true</c> if there are more items in the collection; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Enumerator.Dispose">
            <summary>
            Empty; does nothing.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.PerfStats.EncoderStatsCollection.Enumerator.Reset">
            <summary>
            Not implemented.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.InitSettings">
            <summary>
            Contains various settings used to initialize the library.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Backend">
            <summary>
            The backend API to use for rendering.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Adapter">
            <summary>
            The adapter on which to create the device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Debug">
            <summary>
            Enable debugging with the device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Profiling">
            <summary>
            Enable profling with the device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Format">
            <summary>
            The initial texture format of the screen.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Width">
            <summary>
            The initial width of the screen.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.Height">
            <summary>
            The initial height of the screen.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.ResetFlags">
            <summary>
            Various flags that control creation of the device.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.BackBufferCount">
            <summary>
            The number of backbuffers to create.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.MaxFrameLatency">
            <summary>
            The maximum allowed frame latency, or zero if you don't care.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.CallbackHandler">
            <summary>
            A set of handlers for various library callbacks.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InitSettings.PlatformData">
            <summary>
            Optional platform-specific initialization data.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.InitSettings.#ctor">
            <summary>
            Initializes a new intance of the <see cref="T:Internal.SharpBgfx.InitSettings"/> class.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.InitSettings.#ctor(System.Int32,System.Int32,Internal.SharpBgfx.ResetFlags)">
            <summary>
            Initializes a new intance of the <see cref="T:Internal.SharpBgfx.InitSettings"/> class.
            </summary>
            <param name="width">The initial width of the screen.</param>
            <param name="height">The initial height of the screen.</param>
            <param name="resetFlags">Various flags that control creation of the device.</param>
        </member>
        <member name="T:Internal.SharpBgfx.DynamicIndexBuffer">
            <summary>
            Represents a dynamically updateable index buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DynamicIndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.#ctor(System.Int32,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.DynamicIndexBuffer"/> struct.
            </summary>
            <param name="indexCount">The number of indices that can fit in the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.#ctor(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.DynamicIndexBuffer"/> struct.
            </summary>
            <param name="memory">The initial index data with which to populate the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.Update(System.Int32,Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in the buffer.
            </summary>
            <param name="startIndex">Index of the first index to update.</param>
            <param name="memory">The new index data with which to fill the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.Equals(Internal.SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.op_Equality(Internal.SharpBgfx.DynamicIndexBuffer,Internal.SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicIndexBuffer.op_Inequality(Internal.SharpBgfx.DynamicIndexBuffer,Internal.SharpBgfx.DynamicIndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.DynamicVertexBuffer">
            <summary>
            Represents a dynamically updateable vertex buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DynamicVertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.#ctor(System.Int32,Internal.SharpBgfx.VertexLayout,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.DynamicVertexBuffer"/> struct.
            </summary>
            <param name="vertexCount">The number of vertices that fit in the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.#ctor(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.VertexLayout,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.DynamicVertexBuffer"/> struct.
            </summary>
            <param name="memory">The initial vertex data with which to populate the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.Update(System.Int32,Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in the buffer.
            </summary>
            <param name="startVertex">Index of the first vertex to update.</param>
            <param name="memory">The new vertex data with which to fill the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.Dispose">
            <summary>
            Releases the vertex buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.Equals(Internal.SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.op_Equality(Internal.SharpBgfx.DynamicVertexBuffer,Internal.SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.DynamicVertexBuffer.op_Inequality(Internal.SharpBgfx.DynamicVertexBuffer,Internal.SharpBgfx.DynamicVertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.RendererBackend">
            <summary>
            Specifies the supported rendering backend APIs.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Noop">
            <summary>
            No backend given.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Agc">
            <summary>
            AGC
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Direct3D11">
            <summary>
            Direct3D 11
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Direct3D12">
            <summary>
            Direct3D 12
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.GNM">
            <summary>
            PlayStation GNM
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Metal">
            <summary>
            Apple Metal.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.NVN">
            <summary>
            NVN
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.OpenGLES">
            <summary>
            OpenGL ES
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.OpenGL">
            <summary>
            OpenGL
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Vulkan">
            <summary>
            Vulkan
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RendererBackend.Default">
            <summary>
            Used during initialization; specifies that the library should
            pick the best renderer for the running hardware and OS.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.VertexAttributeUsage">
            <summary>
            Specifies vertex attribute usages.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Position">
            <summary>
            Position data.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Normal">
            <summary>
            Normals.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Tangent">
            <summary>
            Tangents.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Bitangent">
            <summary>
            Bitangents.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Color0">
            <summary>
            First color channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Color1">
            <summary>
            Second color channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Color2">
            <summary>
            Third color channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Color3">
            <summary>
            Fourth color channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Indices">
            <summary>
            Indices.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.Weight">
            <summary>
            Animation weights.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord0">
            <summary>
            First texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord1">
            <summary>
            Second texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord2">
            <summary>
            Third texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord3">
            <summary>
            Fourth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord4">
            <summary>
            Fifth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord5">
            <summary>
            Sixth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord6">
            <summary>
            Seventh texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeUsage.TexCoord7">
            <summary>
            Eighth texture coordinate channel (arbitrary data).
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.VertexAttributeType">
            <summary>
            Specifies data types for vertex attributes.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeType.UInt8">
            <summary>
            One-byte unsigned integer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeType.UInt10">
            <summary>
            10-bit unsigned integer.
            </summary>
            <remarks>
            Availability depends on Caps flags.
            </remarks>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeType.Int16">
            <summary>
            Two-byte signed integer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeType.Half">
            <summary>
            Two-byte float.
            </summary>
            <remarks>
            Availability depends on Caps flags.
            </remarks>
        </member>
        <member name="F:Internal.SharpBgfx.VertexAttributeType.Float">
            <summary>
            Four-byte float.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.TextureFormat">
            <summary>
            Specifies the format of a texture's data.
            </summary>
            <remarks>
            Check Caps flags for hardware format support.
            </remarks>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC1">
            <summary>
            Block compression with three color channels, 1 bit alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC2">
            <summary>
            Block compression with three color channels, 4 bits alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC3">
            <summary>
            Block compression with three color channels, 8 bits alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC4">
            <summary>
            Block compression for 1-channel color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC5">
            <summary>
            Block compression for 2-channel color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC6H">
            <summary>
            Block compression for three-channel HDR color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BC7">
            <summary>
            Highest quality block compression.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ETC1">
            <summary>
            Original ETC block compression.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ETC2">
            <summary>
            Improved ETC block compression (no alpha).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ETC2A">
            <summary>
            Improved ETC block compression with full alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ETC2A1">
            <summary>
            Improved ETC block compression with 1-bit punchthrough alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC12">
            <summary>
            PVRTC1 compression (2 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC14">
            <summary>
            PVRTC1 compression (4 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC12A">
            <summary>
            PVRTC1 compression with alpha (2 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC14A">
            <summary>
            PVRTC1 compression with alpha (4 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC22">
            <summary>
            PVRTC2 compression with alpha (2 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.PTC24">
            <summary>
            PVRTC2 compression with alpha (4 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ATC">
            <summary>
            ATC RGB (4 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ATCE">
            <summary>
            ATCE RGBA with explicit alpha (8 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ATCI">
            <summary>
            ATCE RGBA with interpolated alpha (8 bits per pixel)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC4x4">
            <summary>
            ASTC 4x4 8.0 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC5x4">
            <summary>
            ASTC 5x4 6.40 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC5x5">
            <summary>
            ASTC 5x5 5.12 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC6x5">
            <summary>
            ASTC 6x5 4.27 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC6x6">
            <summary>
            ASTC 6x6 3.56 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC8x5">
            <summary>
            ASTC 8x5 3.20 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC8x6">
            <summary>
            ASTC 8x6 2.67 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC8x8">
            <summary>
            ASTC 8x8 2.00 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC10x5">
            <summary>
            ASTC 10x5 2.56 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC10x6">
            <summary>
            ASTC 10x6 2.13 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC10x8">
            <summary>
            ASTC 10x8 1.60 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC10x10">
            <summary>
            ASTC 10x10 1.28 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC12x10">
            <summary>
            ASTC 12x10 1.07 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.ASTC12x12">
            <summary>
            ASTC 12x12 0.89 bpp
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.Unknown">
            <summary>
            Unknown texture format.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R1">
            <summary>
            1-bit single channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.A8">
            <summary>
            8-bit single channel (alpha).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R8">
            <summary>
            8-bit single channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R8I">
            <summary>
            8-bit single channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R8U">
            <summary>
            8-bit single channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R8S">
            <summary>
            8-bit single channel (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R16">
            <summary>
            16-bit single channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R16I">
            <summary>
            16-bit single channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R16U">
            <summary>
            16-bit single channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R16F">
            <summary>
            16-bit single channel (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R16S">
            <summary>
            16-bit single channel (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R32I">
            <summary>
            32-bit single channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R32U">
            <summary>
            32-bit single channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R32F">
            <summary>
            32-bit single channel (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG8">
            <summary>
            8-bit two channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG8I">
            <summary>
            8-bit two channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG8U">
            <summary>
            8-bit two channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG8S">
            <summary>
            8-bit two channel (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG16">
            <summary>
            16-bit two channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG16I">
            <summary>
            16-bit two channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG16U">
            <summary>
            16-bit two channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG16F">
            <summary>
            16-bit two channel (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG16S">
            <summary>
            16-bit two channel (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG32I">
            <summary>
            32-bit two channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG32U">
            <summary>
            32-bit two channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG32F">
            <summary>
            32-bit two channel (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB8">
            <summary>
            8-bit three channel.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB8I">
            <summary>
            8-bit three channel (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB8U">
            <summary>
            8-bit three channel (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB8S">
            <summary>
            8-bit three channel (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB9E5F">
            <summary>
            9-bit three channel floating point with shared 5-bit exponent.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.BGRA8">
            <summary>
            8-bit BGRA color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA8">
            <summary>
            8-bit RGBA color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA8I">
            <summary>
            8-bit RGBA color (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA8U">
            <summary>
            8-bit RGBA color (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA8S">
            <summary>
            8-bit RGBA color (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA16">
            <summary>
            16-bit RGBA color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA16I">
            <summary>
            16-bit RGBA color (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA16U">
            <summary>
            16-bit RGBA color (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA16F">
            <summary>
            16-bit RGBA color (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA16S">
            <summary>
            16-bit RGBA color (signed).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA32I">
            <summary>
            32-bit RGBA color (integer).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA32U">
            <summary>
            32-bit RGBA color (unsigned).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA32F">
            <summary>
            32-bit RGBA color (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.R5G6B5">
            <summary>
            5-6-6 color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGBA4">
            <summary>
            4-bit RGBA color.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB5A1">
            <summary>
            5-bit RGB color with 1-bit alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RGB10A2">
            <summary>
            10-bit RGB color with 2-bit alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.RG11B10F">
            <summary>
            11-11-10 color (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.UnknownDepth">
            <summary>
            Unknown depth format.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D16">
            <summary>
            16-bit depth.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D24">
            <summary>
            24-bit depth.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D24S8">
            <summary>
            24-bit depth, 8-bit stencil.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D32">
            <summary>
            32-bit depth.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D16F">
            <summary>
            16-bit depth (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D24F">
            <summary>
            24-bit depth (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D32F">
            <summary>
            32-bit depth (float).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.D0S8">
            <summary>
            8-bit stencil.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormat.Count">
            <summary>
            The count of all texture formats. Not a valid value.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.UniformType">
            <summary>
            Specifies the type of uniform data.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.UniformType.Sampler">
            <summary>
            Texture sampler.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.UniformType.Vector4">
            <summary>
            4D vector.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.UniformType.Matrix3x3">
            <summary>
            3x3 matrix.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.UniformType.Matrix4x4">
             <summary>
            4x4 matrix.
             </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ResetFlags">
            <summary>
            Specifies various settings to change during a reset call.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.None">
            <summary>
            No features to change.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.Fullscreen">
            <summary>
            Not yet supported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.MSAA2x">
            <summary>
            Enable 2x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.MSAA4x">
            <summary>
            Enable 4x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.MSAA8x">
            <summary>
            Enable 8x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.MSAA16x">
            <summary>
            Enable 16x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.Vsync">
            <summary>
            Enable v-sync.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.MaxAnisotropy">
            <summary>
            Use the maximum anisotropic filtering level available.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.Capture">
            <summary>
            Begin screen capture.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.FlushAfterRender">
            <summary>
            Flush all commands to the device after rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.FlipAfterRender">
            <summary>
            Flip the backbuffer immediately after rendering for reduced latency.
            Only useful when multithreading is disabled.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.SrgbBackbuffer">
            <summary>
            Write data to the backbuffer in non-linear sRGB format.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.HDR10">
            <summary>
            Enable HDR10 rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.HighDPI">
            <summary>
            Enable High-DPI rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.DepthClamp">
            <summary>
            Enables depth clamping.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResetFlags.Suspend">
            <summary>
            Suspends rendering.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.DebugFeatures">
            <summary>
            Specifies various debug options.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.None">
            <summary>
            Don't enable any debugging features.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.Wireframe">
            <summary>
            Force wireframe rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.InfinitelyFastHardware">
            <summary>
            When set, all rendering calls are skipped. This is useful when profiling to
            find bottlenecks between the CPU and GPU.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.DisplayStatistics">
            <summary>
            Display internal statistics.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.DisplayText">
            <summary>
            Display debug text.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugFeatures.Profiler">
            <summary>
            Enable the internal library performance profiler.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ClearTargets">
            <summary>
            Specifies flags for clearing surfaces.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.None">
            <summary>
            Don't clear anything.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.Color">
            <summary>
            Clear the color channels.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.Depth">
            <summary>
            Clear the depth buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.Stencil">
            <summary>
            Clear the stencil buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor0">
            <summary>
            Discard the first color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor1">
            <summary>
            Discard the second color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor2">
            <summary>
            Discard the third color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor3">
            <summary>
            Discard the fourth color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor4">
            <summary>
            Discard the fifth color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor5">
            <summary>
            Discard the sixth color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor6">
            <summary>
            Discard the seventh color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardColor7">
            <summary>
            Discard the eighth color framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardDepth">
            <summary>
            Discard the depth buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ClearTargets.DiscardStencil">
            <summary>
            Discard the stencil buffer.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.DeviceFeatures">
            <summary>
            Specifies various capabilities supported by the rendering device.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.None">
            <summary>
            No extra features supported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.AlphaToCoverage">
            <summary>
            Device supports alpha to coverage.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.BlendIndependent">
            <summary>
            Device supports independent blending of simultaneous render targets.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.Compute">
            <summary>
            Device supports compute shaders.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.ConservativeRasterization">
            <summary>
            Device supports conservative rasterization.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.DrawIndirect">
            <summary>
            Device supports indirect drawing via GPU buffers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.FragmentDepth">
            <summary>
            Fragment shaders can access depth values.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.FragmentOrdering">
            <summary>
            Device supports ordering of fragment output.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.GraphicsDebugger">
            <summary>
            A graphics debugger is present.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.HDR10">
            <summary>
            Devices supports HDR10 rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.HighDPI">
            <summary>
            Device supports high-DPI rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.ImageRW">
            <summary>
            Image Read/Write is supported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.Index32">
            <summary>
            Device supports 32-bit indices.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.Instancing">
            <summary>
            Device supports instancing.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.OcclusionQuery">
            <summary>
            Device supports occlusion queries.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.RendererMultithreaded">
            <summary>
            Device supports multithreaded rendering.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.SwapChain">
            <summary>
            Indicates whether the device can render to multiple swap chains.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.Texture2DArray">
            <summary>
            Device supports 2D texture arrays.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.Texture3D">
            <summary>
            Device supports 3D textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureBlit">
            <summary>
            Device supports texture blits.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TransparentBackBuffer">
            <summary>
            Transparent back buffer supported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureCompareReserved">
            <summary>
            Device supports other texture comparison modes.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureCompareLessEqual">
            <summary>
            Device supports "Less than or equal to" texture comparison mode.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureCubeArray">
            <summary>
            Device supports cubemap texture arrays.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureDirectAccess">
            <summary>
            Device supports directly accessing texture data.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.TextureReadBack">
            <summary>
            Device supports reading back texture data.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.VertexAttributeHalf">
            <summary>
            Device supports 16-bit floats as vertex attributes.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.VertexAttributeUInt10">
            <summary>
            UInt10 vertex attributes are supported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.VertexID">
            <summary>
            Devices supports rendering with VertexID only.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.PrimitiveId">
            PrimitiveID is available in fragment shader.
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.ViewportLayerArray">
            <summary>
            Viewport layer is available in vertex shader.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DeviceFeatures.DrawIndirectCount">
            <summary>
            Draw indirect wit.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.TextureFormatSupport">
            <summary>
            Indicates the level of support for a specific texture format.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Unsupported">
            <summary>
            The format is unsupported.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Color2D">
            <summary>
            The format is supported for 2D color data and operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Srgb2D">
            <summary>
            The format is supported for 2D sRGB operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Emulated2D">
            <summary>
            The format is supported for 2D textures through library emulation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Color3D">
            <summary>
            The format is supported for 3D color data and operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Srgb3D">
            <summary>
            The format is supported for 3D sRGB operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Emulated3D">
            <summary>
            The format is supported for 3D textures through library emulation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.ColorCube">
            <summary>
            The format is supported for cube color data and operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.SrgbCube">
            <summary>
            The format is supported for cube sRGB operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.EmulatedCube">
            <summary>
            The format is supported for cube textures through library emulation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Vertex">
            <summary>
            The format is supported for vertex texturing.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.ImageRead">
            <summary>
            Texture format can be used as image and read from.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.ImageWrite">
            <summary>
            Texture format can be used as image and written to.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.Framebuffer">
            <summary>
            The format is supported for framebuffers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.FramebufferMSAA">
            <summary>
            The format is supported for MSAA framebuffers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.MSAA">
            <summary>
            The format is supported for MSAA sampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFormatSupport.MipsAutogen">
            <summary>
            The format supports auto-generated mipmaps.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.TextureFlags">
            <summary>
            Specifies various texture flags.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.None">
            <summary>
            No flags set.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MirrorU">
            <summary>
            Mirror the texture in the U coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ClampU">
            <summary>
            Clamp the texture in the U coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.BorderU">
            <summary>
            Use a border color for addresses outside the range in the U coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MirrorV">
            <summary>
            Mirror the texture in the V coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ClampV">
            <summary>
            Clamp the texture in the V coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.BorderV">
            <summary>
            Use a border color for addresses outside the range in the V coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MirrorW">
            <summary>
            Mirror the texture in the W coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ClampW">
            <summary>
            Clamp the texture in the W coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.BorderW">
            <summary>
            Use a border color for addresses outside the range in the W coordinate.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MirrorUVW">
            <summary>
            Mirror the texture in the U,V, and W coordinates.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ClampUVW">
            <summary>
            Clamp the texture in the U,V, and W coordinates.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.BorderUVW">
            <summary>
            Use a border color for addresses outside the range in the U,V, and W coordinates.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MinFilterPoint">
            <summary>
            Use point filtering for texture minification.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MinFilterAnisotropic">
            <summary>
            Use anisotropic filtering for texture minification.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MagFilterPoint">
            <summary>
            Use point filtering for texture magnification.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MagFilterAnisotropic">
            <summary>
            Use anisotropic filtering for texture magnification.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MipFilterPoint">
            <summary>
            Use point filtering for texture mipmaps.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.FilterPoint">
            <summary>
            Use point filtering for minification, magnification, and texture mipmaps.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareLess">
            <summary>
            Use a "less than" operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareLessEqual">
            <summary>
            Use a "less than or equal" operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareEqual">
            <summary>
            Use an equality operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareGreaterEqual">
            <summary>
            Use a "greater than or equal" operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareGreater">
            <summary>
            Use a "greater than" operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareNotEqual">
            <summary>
            Use an inequality operator when comparing textures.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareNever">
            <summary>
            Never compare two textures as equal.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.CompareAlways">
            <summary>
            Always compare two textures as equal.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.SampleStencil">
            <summary>
            Sample stencil instead of depth.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.MSAASample">
            <summary>
            Perform MSAA sampling on the texture.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTarget">
            <summary>
            The texture will be used as a render target.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTargetMultisample2x">
            <summary>
            The render target texture support 2x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTargetMultisample4x">
            <summary>
            The render target texture support 4x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTargetMultisample8x">
            <summary>
            The render target texture support 8x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTargetMultisample16x">
            <summary>
            The render target texture support 16x multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.RenderTargetWriteOnly">
            <summary>
            The texture is only writeable (render target).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ComputeWrite">
            <summary>
            Texture is the target of compute shader writes.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.Srgb">
            <summary>
            Texture data is in non-linear sRGB format.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.BlitDestination">
            <summary>
            Texture can be used as the destination of a blit operation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.TextureFlags.ReadBack">
            <summary>
            Texture data can be read back.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ComputeBufferAccess">
            <summary>
            Describes access rights for a compute buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ComputeBufferAccess.Read">
            <summary>
            The buffer can only be read.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ComputeBufferAccess.Write">
            <summary>
            The buffer can only be written to.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ComputeBufferAccess.ReadWrite">
            <summary>
            The buffer can be read and written.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ResolveFlags">
            <summary>
            Flags that control frame buffer resolve.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResolveFlags.None">
            <summary>
            No particular flags specified.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ResolveFlags.AutoGenMips">
            <summary>
            Automatically generate mipmaps.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.CubeMapFace">
            <summary>
            Addresses a particular face of a cube map.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Right">
            <summary>
            The right face.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Left">
            <summary>
            The left face.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Top">
            <summary>
            The top face.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Bottom">
            <summary>
            The bottom face.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Front">
            <summary>
            The front face.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.CubeMapFace.Back">
            <summary>
            The back face.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.Vendor">
            <summary>
            Specifies known vendor IDs.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.None">
            <summary>
            No vendor specified.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.SoftwareRasterizer">
            <summary>
            Special flag to use platform's software rasterizer, if available.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.AMD">
            <summary>
            AMD
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.Apple">
            <summary>
            Apple adapter.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.Intel">
            <summary>
            Intel
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.Nvidia">
            <summary>
            NVIDIA
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.Microsoft">
            <summary>
            Microsoft
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Vendor.ARM">
            <summary>
            ARM adapter.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.BackbufferRatio">
            <summary>
            Specifies scaling relative to the size of the backbuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Equal">
            <summary>
            Surface is equal to the backbuffer size.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Half">
            <summary>
            Surface is half the backbuffer size.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Quater">
            <summary>
            Surface is a quater of the backbuffer size.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Eighth">
            <summary>
            Surface is an eighth of the backbuffer size.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Sixteenth">
            <summary>
            Surface is a sixteenth of the backbuffer size.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BackbufferRatio.Double">
            <summary>
            Surface is double the backbuffer size.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.BufferFlags">
            <summary>
            Specifies various flags that control vertex and index buffer behavior.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.None">
            <summary>
            No flags specified.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat8x1">
            <summary>
            Specifies the format of data in a compute buffer as being 8x1.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat8x2">
            <summary>
            Specifies the format of data in a compute buffer as being 8x2.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat8x4">
            <summary>
            Specifies the format of data in a compute buffer as being 8x4.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat16x1">
            <summary>
            Specifies the format of data in a compute buffer as being 16x1.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat16x2">
            <summary>
            Specifies the format of data in a compute buffer as being 16x2.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat16x4">
            <summary>
            Specifies the format of data in a compute buffer as being 16x4.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat32x1">
            <summary>
            Specifies the format of data in a compute buffer as being 32x1.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat32x2">
            <summary>
            Specifies the format of data in a compute buffer as being 32x2.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeFormat32x4">
            <summary>
            Specifies the format of data in a compute buffer as being 32x4.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeTypeInt">
            <summary>
            Specifies the type of data in a compute buffer as being unsigned integers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeTypeUInt">
            <summary>
            Specifies the type of data in a compute buffer as being signed integers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeTypeFloat">
            <summary>
            Specifies the type of data in a compute buffer as being floating point values.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeRead">
            <summary>
            Buffer will be read by a compute shader.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeWrite">
            <summary>
            Buffer will be written into by a compute shader. It cannot be accessed by the CPU.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.DrawIndirect">
            <summary>
            Buffer is the source of indirect draw commands.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.AllowResize">
            <summary>
            Buffer will resize on update if a different quantity of data is passed. If this flag is not set
            the data will be trimmed to fit in the existing buffer size. Effective only for dynamic buffers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.Index32">
            <summary>
            Buffer is using 32-bit indices. Useful only for index buffers.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.BufferFlags.ComputeReadWrite">
            <summary>
            Buffer will be read and written by a compute shader.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ErrorType">
            <summary>
            Specifies various error types that can be reported by bgfx.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ErrorType.DebugCheck">
            <summary>
            A debug check failed; the program can safely continue, but the issue should be investigated.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ErrorType.InvalidShader">
            <summary>
            The program tried to compile an invalid shader.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ErrorType.UnableToInitialize">
            <summary>
            An error occurred during bgfx library initialization.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ErrorType.UnableToCreateTexture">
            <summary>
            Failed while trying to create a texture.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ErrorType.DeviceLost">
            <summary>
            The graphics device was lost and the library was unable to recover.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.DebugColor">
            <summary>
            Specifies debug text colors.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Black">
            <summary>
            Black.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Blue">
            <summary>
            Blue.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Green">
            <summary>
            Green.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Cyan">
            <summary>
            Cyan.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Red">
            <summary>
            Red.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Magenta">
            <summary>
            Magenta.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Brown">
            <summary>
            Brown.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightGray">
            <summary>
            Light gray.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.DarkGray">
            <summary>
            Dark gray.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightBlue">
            <summary>
            Light blue.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightGreen">
            <summary>
            Light green.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightCyan">
            <summary>
            Light cyan.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightRed">
            <summary>
            Light red.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.LightMagenta">
            <summary>
            Light magenta.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.Yellow">
            <summary>
            Yellow.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.DebugColor.White">
            <summary>
            White.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.OcclusionQueryResult">
            <summary>
            Specifies results of an occlusion query.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.OcclusionQueryResult.Invisible">
            <summary>
            Objects are invisible.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.OcclusionQueryResult.Visible">
            <summary>
            Objects are visible.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.OcclusionQueryResult.NoResult">
            <summary>
            Result is not ready or is unknown.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.RenderFrameResult">
            <summary>
            Specifies results of manually rendering a single frame.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderFrameResult.NoContext">
            <summary>
            No device context has been created yet.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderFrameResult.Render">
            <summary>
            The frame was rendered.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderFrameResult.Timeout">
            <summary>
            The internal semaphore timed out; rendering was skipped.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderFrameResult.Exiting">
            <summary>
            Rendering is done; the program should exit.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.ViewMode">
            <summary>
            Specifies possible sorting modes for a view.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ViewMode.Default">
            <summary>
            Default sorting method.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ViewMode.Sequential">
            <summary>
            Do each draw in the order it is issued.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ViewMode.DepthAscending">
            <summary>
            Sort each draw by depth, ascending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.ViewMode.DepthDescending">
            <summary>
            Sort each draw by depth, descending.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.Topology">
            <summary>
            Specifies possible primitive topologies.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Topology.TriangleList">
            <summary>
            List of triangles.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Topology.TriangleStrip">
            <summary>
            Strip of triangles.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Topology.LineList">
            <summary>
            List of lines.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Topology.LineStrip">
            <summary>
            Strip of lines.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Topology.PointList">
            <summary>
            List of points.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.DiscardFlags">
            <summary>
            Rendering state discard. When state is preserved in submit, rendering states can be discarded on a finer grain.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.Attachment">
            <summary>
            Represents a framebuffer attachment.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.Access">
            <summary>
            Access control for using the attachment.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.Texture">
            <summary>
            The attachment texture handle.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.Mip">
            <summary>
            The texture mip level.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.Layer">
            <summary>
            Cube map face or depth layer/slice.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.NumLayers">
            <summary>
            Number of texture layer/slice(s) in array to use.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Attachment.Resolve">
            <summary>
            Additional flags for framebuffer resolve.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.FrameBuffer">
            <summary>
            An aggregated frame buffer, with one or more attached texture surfaces.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.FrameBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.#ctor(System.Int32,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.FrameBuffer"/> struct.
            </summary>
            <param name="width">The width of the render target.</param>
            <param name="height">The height of the render target.</param>
            <param name="format">The format of the new surface.</param>
            <param name="flags">Texture sampling flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.#ctor(Internal.SharpBgfx.BackbufferRatio,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.FrameBuffer"/> struct.
            </summary>
            <param name="ratio">The amount to scale when the backbuffer resizes.</param>
            <param name="format">The format of the new surface.</param>
            <param name="flags">Texture sampling flags.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.#ctor(Internal.SharpBgfx.Attachment[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.FrameBuffer"/> struct.
            </summary>
            <param name="attachments">A set of attachments from which to build the frame buffer.</param>
            <param name="destroyTextures">if set to <c>true</c>, attached textures will be destroyed when the frame buffer is destroyed.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.#ctor(Internal.SharpBgfx.Texture[],System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.FrameBuffer"/> struct.
            </summary>
            <param name="textures">A set of textures from which to build the frame buffer.</param>
            <param name="destroyTextures">if set to <c>true</c>, attached textures will be destroyed when the frame buffer is destroyed.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.#ctor(System.IntPtr,System.Int32,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.FrameBuffer"/> struct.
            </summary>
            <param name="windowHandle">The OS window handle to which the frame buffer is attached.</param>
            <param name="width">The width of the render target.</param>
            <param name="height">The height of the render target.</param>
            <param name="format">Window back buffer color format.</param>
            <param name="depthFormat">A desired format for a depth buffer, if applicable.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.SetName(System.String)">
            <summary>
            Sets the name of the frame buffer, for debug display purposes.
            </summary>
            <param name="name">The name of the texture.</param>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.Dispose">
            <summary>
            Releases the frame buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.GetTexture(System.Int32)">
            <summary>
            Gets the texture associated with a particular framebuffer attachment.
            </summary>
            <param name="attachment">The attachment index.</param>
            <returns>The texture associated with the attachment.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.Equals(Internal.SharpBgfx.FrameBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.op_Equality(Internal.SharpBgfx.FrameBuffer,Internal.SharpBgfx.FrameBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.FrameBuffer.op_Inequality(Internal.SharpBgfx.FrameBuffer,Internal.SharpBgfx.FrameBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.IndexBuffer">
            <summary>
            Represents a static index buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.IndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.#ctor(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.IndexBuffer"/> struct.
            </summary>
            <param name="memory">The 16-bit index data used to populate the buffer.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.SetName(System.String)">
            <summary>
            Sets the name of the index buffer, for debug display purposes.
            </summary>
            <param name="name">The name of the texture.</param>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.Equals(Internal.SharpBgfx.IndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.op_Equality(Internal.SharpBgfx.IndexBuffer,Internal.SharpBgfx.IndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndexBuffer.op_Inequality(Internal.SharpBgfx.IndexBuffer,Internal.SharpBgfx.IndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.IndirectBuffer">
            <summary>
            Represents a buffer that can contain indirect drawing commands created and processed entirely on the GPU.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.IndirectBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.IndirectBuffer"/> struct.
            </summary>
            <param name="size">The number of commands that can fit in the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.Dispose">
            <summary>
            Releases the index buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.Equals(Internal.SharpBgfx.IndirectBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.op_Equality(Internal.SharpBgfx.IndirectBuffer,Internal.SharpBgfx.IndirectBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.IndirectBuffer.op_Inequality(Internal.SharpBgfx.IndirectBuffer,Internal.SharpBgfx.IndirectBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.InstanceDataBuffer">
            <summary>
            Maintains a data buffer that contains instancing data.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.InstanceDataBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InstanceDataBuffer.Data">
            <summary>
            A pointer that can be filled with instance data.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.InstanceDataBuffer.Size">
            <summary>
            The size of the data buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.InstanceDataBuffer" /> struct.
            </summary>
            <param name="count">The number of elements in the buffer.</param>
            <param name="stride">The stride of each element.</param>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.GetAvailableSpace(System.Int32,System.Int32)">
            <summary>
            Gets the available space that can be used to allocate an instance buffer.
            </summary>
            <param name="count">The number of elements required.</param>
            <param name="stride">The stride of each element.</param>
            <returns>The number of available elements.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.Equals(Internal.SharpBgfx.InstanceDataBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.op_Equality(Internal.SharpBgfx.InstanceDataBuffer,Internal.SharpBgfx.InstanceDataBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.InstanceDataBuffer.op_Inequality(Internal.SharpBgfx.InstanceDataBuffer,Internal.SharpBgfx.InstanceDataBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.ReleaseCallback">
            <summary>
            Delegate type for callback functions.
            </summary>
            <param name="userData">User-provided data to the original allocation call.</param>
        </member>
        <member name="T:Internal.SharpBgfx.MemoryBlock">
            <summary>
            Represents a block of memory managed by the graphics API.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.MemoryBlock.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.MemoryBlock.Data">
            <summary>
            The pointer to the raw data.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.MemoryBlock.Size">
            <summary>
            The size of the block, in bytes.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.MemoryBlock"/> struct.
            </summary>
            <param name="size">The size of the block, in bytes.</param>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.MemoryBlock"/> struct.
            </summary>
            <param name="data">A pointer to the initial data to copy into the new block.</param>
            <param name="size">The size of the block, in bytes.</param>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.#ctor(System.Void*,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.MemoryBlock"/> struct.
            </summary>
            <param name="data">A pointer to the initial data to copy into the new block.</param>
            <param name="size">The size of the block, in bytes.</param>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.Equals(Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.op_Equality(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.MemoryBlock.op_Inequality(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.OcclusionQuery">
            <summary>
            Represents an occlusion query.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.OcclusionQuery.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.OcclusionQuery.Result">
            <summary>
            Gets the result of the query.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.OcclusionQuery.PassingPixels">
            <summary>
            Gets the number of pixels that passed the test. Only valid
            if <see cref="P:Internal.SharpBgfx.OcclusionQuery.Result"/> is also valid.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.Create">
            <summary>
            Creates a new query.
            </summary>
            <returns>The new occlusion query.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.Dispose">
            <summary>
            Releases the query.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.SetCondition(System.Boolean)">
            <summary>
            Sets the condition for which the query should check.
            </summary>
            <param name="visible"><c>true</c> for visible; <c>false</c> for invisible.</param>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.Equals(Internal.SharpBgfx.OcclusionQuery)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.op_Equality(Internal.SharpBgfx.OcclusionQuery,Internal.SharpBgfx.OcclusionQuery)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.OcclusionQuery.op_Inequality(Internal.SharpBgfx.OcclusionQuery,Internal.SharpBgfx.OcclusionQuery)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.PlatformData">
            <summary>
            Contains platform-specific data used to hook into the bgfx library.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.PlatformData.DisplayType">
            <summary>
            EGL native display type.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.PlatformData.WindowHandle">
            <summary>
            Platform window handle.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.PlatformData.Context">
            <summary>
            Device context to use instead of letting the library create its own.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.PlatformData.Backbuffer">
            <summary>
            Backbuffer pointer to use instead of letting the library create its own.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.PlatformData.BackbufferDepthStencil">
            <summary>
            Depth-stencil pointer to use instead of letting the library create its own.
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.InternalData">
            <summary>
            Exposes internal API data for interop scenarios.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.InternalData.Caps">
            <summary>
            Pointer to internal Bgfx capabilities structure. Use <see cref="M:Internal.SharpBgfx.Bgfx.GetCaps"/> instead.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.InternalData.Context">
            <summary>
            The underlying API's device context (OpenGL, Direct3D, etc).
            </summary>
        </member>
        <member name="T:Internal.SharpBgfx.Program">
            <summary>
            Represents a compiled and linked shader program.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Program.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Program.#ctor(Internal.SharpBgfx.Shader,Internal.SharpBgfx.Shader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.Program"/> struct.
            </summary>
            <param name="vertexShader">The vertex shader.</param>
            <param name="fragmentShader">The fragment shader.</param>
            <param name="destroyShaders">if set to <c>true</c>, the shaders will be released after creating the program.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Program.#ctor(Internal.SharpBgfx.Shader,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.Program"/> struct.
            </summary>
            <param name="computeShader">The compute shader.</param>
            <param name="destroyShaders">if set to <c>true</c>, the compute shader will be released after creating the program.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Program.Dispose">
            <summary>
            Releases the program.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Program.Equals(Internal.SharpBgfx.Program)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Program.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Program.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Program.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Program.op_Equality(Internal.SharpBgfx.Program,Internal.SharpBgfx.Program)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Program.op_Inequality(Internal.SharpBgfx.Program,Internal.SharpBgfx.Program)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.RenderState">
            <summary>
            Specifies state information used to configure rendering operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.None">
            <summary>
            No state bits set.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteR">
            <summary>
            Enable writing the Red color channel to the framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteG">
            <summary>
            Enable writing the Green color channel to the framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteB">
            <summary>
            Enable writing the Blue color channel to the framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteA">
            <summary>
            Enable writing alpha data to the framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteZ">
            <summary>
            Enable writing to the depth buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.WriteRGB">
            <summary>
            Enable writing all three color channels to the framebuffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestLess">
            <summary>
            Use a "less than" comparison to pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestLessEqual">
            <summary>
            Use a "less than or equal to" comparison to pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestEqual">
            <summary>
            Pass the depth test if both values are equal.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestGreaterEqual">
            <summary>
            Use a "greater than or equal to" comparison to pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestGreater">
            <summary>
            Use a "greater than" comparison to pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestNotEqual">
            <summary>
            Pass the depth test if both values are not equal.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestNever">
            <summary>
            Never pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.DepthTestAlways">
            <summary>
            Always pass the depth test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendZero">
            <summary>
            Use a value of 0 as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendOne">
            <summary>
            Use a value of 1 as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendSourceColor">
            <summary>
            Use the source pixel color as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendInverseSourceColor">
            <summary>
            Use one minus the source pixel color as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendSourceAlpha">
            <summary>
            Use the source pixel alpha as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendInverseSourceAlpha">
            <summary>
            Use one minus the source pixel alpha as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendDestinationAlpha">
            <summary>
            Use the destination pixel alpha as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendInverseDestinationAlpha">
            <summary>
            Use one minus the destination pixel alpha as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendDestinationColor">
            <summary>
            Use the destination pixel color as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendInverseDestinationColor">
            <summary>
            Use one minus the destination pixel color as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendSourceAlphaSaturate">
            <summary>
            Use the source pixel alpha (saturated) as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendFactor">
            <summary>
            Use an application supplied blending factor as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendInverseFactor">
            <summary>
            Use one minus an application supplied blending factor as an input to a blend equation.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendEquationAdd">
            <summary>
            Blend equation: A + B
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendEquationSub">
            <summary>
            Blend equation: B - A
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendEquationReverseSub">
            <summary>
            Blend equation: A - B
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendEquationMin">
            <summary>
            Blend equation: min(a, b)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendEquationMax">
            <summary>
            Blend equation: max(a, b)
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendIndependent">
            <summary>
            Enable independent blending of simultaenous render targets.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendAlphaToCoverage">
            <summary>
            Enable alpha to coverage blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.NoCulling">
            <summary>
            Don't perform culling of back faces.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.CullClockwise">
            <summary>
            Perform culling of clockwise faces.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.CullCounterclockwise">
            <summary>
            Perform culling of counter-clockwise faces.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.PrimitiveTriangles">
            <summary>
            Primitive topology: triangle list.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.PrimitiveTriangleStrip">
            <summary>
            Primitive topology: triangle strip.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.PrimitiveLines">
            <summary>
            Primitive topology: line list.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.PrimitiveLineStrip">
            <summary>
            Primitive topology: line strip.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.PrimitivePoints">
            <summary>
            Primitive topology: point list.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.Multisampling">
            <summary>
            Enable multisampling.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.LineAA">
            <summary>
            Enable line antialiasing.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.ConservativeRasterization">
            <summary>
            Enable conservative rasterization.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.Default">
            <summary>
            Provides a set of sane defaults.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendAdd">
            <summary>
            Predefined blend effect: additive blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendAlpha">
            <summary>
            Predefined blend effect: alpha blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendDarken">
            <summary>
            Predefined blend effect: "darken" blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendLighten">
            <summary>
            Predefined blend effect: "lighten" blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendMultiply">
            <summary>
            Predefined blend effect: multiplicative blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendNormal">
            <summary>
            Predefined blend effect: normal blending based on alpha.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendScreen">
            <summary>
            Predefined blend effect: "screen" blending.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.RenderState.BlendLinearBurn">
            <summary>
            Predefined blend effect: "linear burn" blending.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.#ctor(System.Int64)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.RenderState"/> struct.
            </summary>
            <param name="value">The integer value of the state.</param>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.AlphaRef(System.Byte)">
            <summary>
            Encodes an alpha reference value in a render state.
            </summary>
            <param name="alpha">The alpha reference value.</param>
            <returns>The encoded render state.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.PointSize(System.Byte)">
            <summary>
            Encodes a point size value in a render state.
            </summary>
            <param name="size">The point size.</param>
            <returns>The encoded render state.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.BlendFunction(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend function.
            </summary>
            <param name="source">The source blend operation.</param>
            <param name="destination">The destination blend operation.</param>
            <returns>The render state for the blend function.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.BlendFunction(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend function.
            </summary>
            <param name="sourceColor">The source color blend operation.</param>
            <param name="destinationColor">The destination color blend operation.</param>
            <param name="sourceAlpha">The source alpha blend operation.</param>
            <param name="destinationAlpha">The destination alpha blend operation.</param>
            <returns>
            The render state for the blend function.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.BlendEquation(Internal.SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend equation.
            </summary>
            <param name="equation">The equation.</param>
            <returns>
            The render state for the blend equation.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.BlendEquation(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Builds a render state for a blend equation.
            </summary>
            <param name="sourceEquation">The source equation.</param>
            <param name="alphaEquation">The alpha equation.</param>
            <returns>
            The render state for the blend equation.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.Equals(Internal.SharpBgfx.RenderState)">
            <summary>
            Determines whether the specific value is equal to this instance.
            </summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><c>true</c> if the value is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_Equality(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_Inequality(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_Implicit(System.UInt64)~Internal.SharpBgfx.RenderState">
            <summary>
            Performs an implicit conversion from ulong.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_Explicit(Internal.SharpBgfx.RenderState)~System.UInt64">
            <summary>
            Performs an explicit conversion to ulong.
            </summary>
            <param name="state">The value to convert.</param>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_BitwiseOr(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-or operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_BitwiseAnd(Internal.SharpBgfx.RenderState,Internal.SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-and operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_OnesComplement(Internal.SharpBgfx.RenderState)">
            <summary>
            Implements the bitwise-complement operator.
            </summary>
            <param name="state">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_LeftShift(Internal.SharpBgfx.RenderState,System.Int32)">
            <summary>
            Implements the left shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.RenderState.op_RightShift(Internal.SharpBgfx.RenderState,System.Int32)">
            <summary>
            Implements the right shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.Shader">
            <summary>
            Represents a single compiled shader component.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Shader.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Shader.Uniforms">
            <summary>
            The set of uniforms exposed by the shader.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.#ctor(Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.Shader"/> struct.
            </summary>
            <param name="memory">The compiled shader memory.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.Dispose">
            <summary>
            Releases the shader.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.SetName(System.String)">
            <summary>
            Sets the name of the shader, for debug display purposes.
            </summary>
            <param name="name">The name of the shader.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.Equals(Internal.SharpBgfx.Shader)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.op_Equality(Internal.SharpBgfx.Shader,Internal.SharpBgfx.Shader)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Shader.op_Inequality(Internal.SharpBgfx.Shader,Internal.SharpBgfx.Shader)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.StencilFlags">
            <summary>
            Specifies state information used to configure rendering operations.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.None">
            <summary>
            No state bits set.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestLess">
            <summary>
            Perform a "less than" stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestLessEqual">
            <summary>
            Perform a "less than or equal" stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestEqual">
            <summary>
            Perform an equality stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestGreaterEqual">
            <summary>
            Perform a "greater than or equal" stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestGreater">
            <summary>
            Perform a "greater than" stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestNotEqual">
            <summary>
            Perform an inequality stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestNever">
            <summary>
            Never pass the stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.TestAlways">
            <summary>
            Always pass the stencil test.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSZero">
            <summary>
            On failing the stencil test, zero out the stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSKeep">
            <summary>
            On failing the stencil test, keep the old stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSReplace">
            <summary>
            On failing the stencil test, replace the stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSIncrement">
            <summary>
            On failing the stencil test, increment the stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSIncrementSaturate">
            <summary>
            On failing the stencil test, increment the stencil value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSDecrement">
            <summary>
            On failing the stencil test, decrement the stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSDecrementSaturate">
            <summary>
            On failing the stencil test, decrement the stencil value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailSInvert">
            <summary>
            On failing the stencil test, invert the stencil value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZZero">
            <summary>
            On failing the stencil test, zero out the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZKeep">
            <summary>
            On failing the stencil test, keep the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZReplace">
            <summary>
            On failing the stencil test, replace the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZIncrement">
            <summary>
            On failing the stencil test, increment the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZIncrementSaturate">
            <summary>
            On failing the stencil test, increment the depth value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZDecrement">
            <summary>
            On failing the stencil test, decrement the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZDecrementSaturate">
            <summary>
            On failing the stencil test, decrement the depth value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.FailZInvert">
            <summary>
            On failing the stencil test, invert the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZZero">
            <summary>
            On passing the stencil test, zero out the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZKeep">
            <summary>
            On passing the stencil test, keep the old depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZReplace">
            <summary>
            On passing the stencil test, replace the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZIncrement">
            <summary>
            On passing the stencil test, increment the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZIncrementSaturate">
            <summary>
            On passing the stencil test, increment the depth value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZDecrement">
            <summary>
            On passing the stencil test, decrement the depth value.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZDecrementSaturate">
            <summary>
            On passing the stencil test, decrement the depth value (with saturation).
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.StencilFlags.PassZInvert">
            <summary>
            On passing the stencil test, invert the depth value.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.StencilFlags"/> struct.
            </summary>
            <param name="value">The integer value of the state.</param>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.ReferenceValue(System.Byte)">
            <summary>
            Encodes a reference value in a stencil state.
            </summary>
            <param name="reference">The stencil reference value.</param>
            <returns>The encoded stencil state.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.ReadMask(System.Byte)">
            <summary>
            Encodes a read mask in a stencil state.
            </summary>
            <param name="mask">The mask.</param>
            <returns>
            The encoded stencil state.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.Equals(Internal.SharpBgfx.StencilFlags)">
            <summary>
            Determines whether the specific value is equal to this instance.
            </summary>
            <param name="other">The value to compare with this instance.</param>
            <returns><c>true</c> if the value is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_Equality(Internal.SharpBgfx.StencilFlags,Internal.SharpBgfx.StencilFlags)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_Inequality(Internal.SharpBgfx.StencilFlags,Internal.SharpBgfx.StencilFlags)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_Implicit(System.UInt32)~Internal.SharpBgfx.StencilFlags">
            <summary>
            Performs an implicit conversion from uint.
            </summary>
            <param name="value">The value to convert.</param>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_Explicit(Internal.SharpBgfx.StencilFlags)~System.UInt32">
            <summary>
            Performs an explicit conversion to uint.
            </summary>
            <param name="state">The value to convert.</param>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_BitwiseOr(Internal.SharpBgfx.StencilFlags,Internal.SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-or operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_BitwiseAnd(Internal.SharpBgfx.StencilFlags,Internal.SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-and operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_OnesComplement(Internal.SharpBgfx.StencilFlags)">
            <summary>
            Implements the bitwise-complement operator.
            </summary>
            <param name="state">The operand.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_LeftShift(Internal.SharpBgfx.StencilFlags,System.Int32)">
            <summary>
            Implements the left shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.StencilFlags.op_RightShift(Internal.SharpBgfx.StencilFlags,System.Int32)">
            <summary>
            Implements the right shift operator.
            </summary>
            <param name="state">The value to shift.</param>
            <param name="amount">The amount to shift.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.Texture">
            <summary>
            Represents a loaded texture.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.Width">
            <summary>
            The width of the texture.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.Height">
            <summary>
            The height of the texture.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.Depth">
            <summary>
            The depth of the texture, if 3D.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.IsCubeMap">
            <summary>
            Indicates whether the texture is a cubemap.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.ArrayLayers">
            <summary>
            The number of texture array layers (for 2D or cube textures).
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.MipLevels">
            <summary>
            The number of mip levels in the texture.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.BitsPerPixel">
            <summary>
            The number of bits per pixel.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.SizeInBytes">
            <summary>
            The size of the entire texture, in bytes.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Texture.Format">
            <summary>
            The format of the image data.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.FromFile(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.TextureFlags,System.Int32)">
            <summary>
            Creates a new texture from a file loaded in memory.
            </summary>
            <param name="memory">The content of the file.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="skipMips">A number of top level mips to skip when parsing texture data.</param>
            <returns>The newly created texture.</returns>
            <remarks>
            This function supports textures in the following container formats:
            - DDS
            - KTX
            - PVR
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Create2D(System.Int32,System.Int32,System.Boolean,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags,System.Nullable{Internal.SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="hasMips">Indicates that texture contains full mip-map chain.</param>
            <param name="arrayLayers">Number of layers in texture array. Must be 1 if Texture2DArray caps flag not set.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>
            The newly created texture handle.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Create2D(Internal.SharpBgfx.BackbufferRatio,System.Boolean,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Creates a new 2D texture that scales with backbuffer size.
            </summary>
            <param name="ratio">The amount to scale when the backbuffer resizes.</param>
            <param name="hasMips">Indicates that texture contains full mip-map chain.</param>
            <param name="arrayLayers">Number of layers in texture array. Must be 1 if Texture2DArray caps flag not set.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <returns>
            The newly created texture handle.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Create3D(System.Int32,System.Int32,System.Int32,System.Boolean,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags,System.Nullable{Internal.SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new 3D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="hasMips">Indicates that texture contains full mip-map chain.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>The newly created texture handle.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.CreateCube(System.Int32,System.Boolean,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags,System.Nullable{Internal.SharpBgfx.MemoryBlock})">
            <summary>
            Creates a new cube texture.
            </summary>
            <param name="size">The size of each cube face.</param>
            <param name="hasMips">Indicates that texture contains full mip-map chain.</param>
            <param name="arrayLayers">Number of layers in texture array. Must be 1 if Texture2DArray caps flag not set.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <param name="memory">If not <c>null</c>, contains the texture's image data.</param>
            <returns>
            The newly created texture handle.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.IsValid(System.Int32,System.Boolean,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Checks whether a texture with the given parameters would be considered valid.
            </summary>
            <param name="depth">The depth of the texture.</param>
            <param name="isCube"><c>true</c> if the texture contains a cubemap.</param>
            <param name="arrayLayers">Number of layers in texture array.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <returns></returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Dispose">
            <summary>
            Releases the texture.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.SetName(System.String)">
            <summary>
            Sets the name of the texture, for debug display purposes.
            </summary>
            <param name="name">The name of the texture.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Update2D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.MemoryBlock,System.Int32)">
            <summary>
            Updates the data in a 2D texture.
            </summary>
            <param name="arrayLayer">The layer in a texture array to update.</param>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the rectangle to update.</param>
            <param name="y">The Y coordinate of the rectangle to update.</param>
            <param name="width">The width of the rectangle to update.</param>
            <param name="height">The height of the rectangle to update.</param>
            <param name="memory">The new image data.</param>
            <param name="pitch">The pitch of the image data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Update3D(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.MemoryBlock)">
            <summary>
            Updates the data in a 3D texture.
            </summary>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the volume to update.</param>
            <param name="y">The Y coordinate of the volume to update.</param>
            <param name="z">The Z coordinate of the volume to update.</param>
            <param name="width">The width of the volume to update.</param>
            <param name="height">The height of the volume to update.</param>
            <param name="depth">The depth of the volume to update.</param>
            <param name="memory">The new image data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.UpdateCube(Internal.SharpBgfx.CubeMapFace,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.MemoryBlock,System.Int32)">
            <summary>
            Updates the data in a cube texture.
            </summary>
            <param name="face">The cube map face to update.</param>
            <param name="arrayLayer">The layer in a texture array to update.</param>
            <param name="mipLevel">The mip level.</param>
            <param name="x">The X coordinate of the rectangle to update.</param>
            <param name="y">The Y coordinate of the rectangle to update.</param>
            <param name="width">The width of the rectangle to update.</param>
            <param name="height">The height of the rectangle to update.</param>
            <param name="memory">The new image data.</param>
            <param name="pitch">The pitch of the image data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.BlitTo(System.UInt16,Internal.SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the texture to another texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:Internal.SharpBgfx.TextureFlags.BlitDestination"/> flag.</remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.BlitTo(System.UInt16,Internal.SharpBgfx.Texture,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Blits the contents of the texture to another texture.
            </summary>
            <param name="viewId">The view in which the blit will be ordered.</param>
            <param name="dest">The destination texture.</param>
            <param name="destMip">The destination mip level.</param>
            <param name="destX">The destination X position.</param>
            <param name="destY">The destination Y position.</param>
            <param name="destZ">The destination Z position.</param>
            <param name="sourceMip">The source mip level.</param>
            <param name="sourceX">The source X position.</param>
            <param name="sourceY">The source Y position.</param>
            <param name="sourceZ">The source Z position.</param>
            <param name="width">The width of the region to blit.</param>
            <param name="height">The height of the region to blit.</param>
            <param name="depth">The depth of the region to blit.</param>
            <remarks>The destination texture must be created with the <see cref="F:Internal.SharpBgfx.TextureFlags.BlitDestination"/> flag.</remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Read(System.IntPtr,System.Int32)">
            <summary>
            Reads the contents of the texture and stores them in memory pointed to by <paramref name="data"/>.
            </summary>
            <param name="data">The destination for the read image data.</param>
            <param name="mip">The mip level to read.</param>
            <returns>The frame number on which the result will be available.</returns>
            <remarks>The texture must have been created with the <see cref="F:Internal.SharpBgfx.TextureFlags.ReadBack"/> flag.</remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.OverrideInternal(System.IntPtr)">
            <summary>
            Override internal texture with externally created texture.
            </summary>
            <param name="ptr">The native API texture pointer.</param>
            <returns>
            Native API pointer to the texture. If result is <see cref="F:System.IntPtr.Zero"/>, the texture is not yet
            created from the main thread.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.OverrideInternal(System.Int32,System.Int32,System.Int32,Internal.SharpBgfx.TextureFormat,Internal.SharpBgfx.TextureFlags)">
            <summary>
            Override internal texture by creating a new 2D texture.
            </summary>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="mipCount">The number of mip levels.</param>
            <param name="format">The format of the texture data.</param>
            <param name="flags">Flags that control texture behavior.</param>
            <returns>
            Native API pointer to the texture. If result is <see cref="F:System.IntPtr.Zero"/>, the texture is not yet
            created from the main thread.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.GetDirectAccess">
            <summary>
            Returns a direct pointer to the texture memory.
            </summary>
            <returns>
            A pointer to the texture's memory. If result is <see cref="F:System.IntPtr.Zero"/> direct access is
            not supported. If the result is -1, the texture is pending creation.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Equals(Internal.SharpBgfx.Texture)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.op_Equality(Internal.SharpBgfx.Texture,Internal.SharpBgfx.Texture)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Texture.op_Inequality(Internal.SharpBgfx.Texture,Internal.SharpBgfx.Texture)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.TransientIndexBuffer">
            <summary>
            Maintains a transient index buffer.
            </summary>
            <remarks>
            The contents of the buffer are valid for the current frame only.
            You must call SetVertexBuffer with the buffer or a leak could occur.
            </remarks>
        </member>
        <member name="F:Internal.SharpBgfx.TransientIndexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.TransientIndexBuffer.Data">
            <summary>
            A pointer that can be filled with index data.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.TransientIndexBuffer.Count">
            <summary>
            The size of the buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.TransientIndexBuffer"/> struct.
            </summary>
            <param name="indexCount">The number of 16-bit indices that fit in the buffer.</param>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.GetAvailableSpace(System.Int32,System.Boolean)">
            <summary>
            Gets the available space in the global transient index buffer.
            </summary>
            <param name="count">The number of 16-bit indices required.</param>
            <returns>The number of available indices.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.Equals(Internal.SharpBgfx.TransientIndexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.op_Equality(Internal.SharpBgfx.TransientIndexBuffer,Internal.SharpBgfx.TransientIndexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientIndexBuffer.op_Inequality(Internal.SharpBgfx.TransientIndexBuffer,Internal.SharpBgfx.TransientIndexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.TransientVertexBuffer">
            <summary>
            Maintains a transient vertex buffer.
            </summary>
            <remarks>
            The contents of the buffer are valid for the current frame only.
            You must call SetVertexBuffer with the buffer or a leak could occur.
            </remarks>
        </member>
        <member name="F:Internal.SharpBgfx.TransientVertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.TransientVertexBuffer.Data">
            <summary>
            A pointer that can be filled with vertex data.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.TransientVertexBuffer.Count">
            <summary>
            The size of the buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.#ctor(System.Int32,Internal.SharpBgfx.VertexLayout)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.TransientVertexBuffer"/> struct.
            </summary>
            <param name="vertexCount">The number of vertices that fit in the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.GetAvailableSpace(System.Int32,Internal.SharpBgfx.VertexLayout)">
            <summary>
            Gets the available space in the global transient vertex buffer.
            </summary>
            <param name="count">The number of vertices required.</param>
            <param name="layout">The layout of each vertex.</param>
            <returns>The number of available vertices.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.Equals(Internal.SharpBgfx.TransientVertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.op_Equality(Internal.SharpBgfx.TransientVertexBuffer,Internal.SharpBgfx.TransientVertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.TransientVertexBuffer.op_Inequality(Internal.SharpBgfx.TransientVertexBuffer,Internal.SharpBgfx.TransientVertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.Uniform">
            <summary>
            Represents a shader uniform.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.Uniform.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Uniform.Name">
            <summary>
            The name of the uniform.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Uniform.Type">
            <summary>
            The type of the data represented by the uniform.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.Uniform.ArraySize">
            <summary>
            Size of the array, if the uniform is an array type.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.#ctor(System.String,Internal.SharpBgfx.UniformType,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.Uniform"/> struct.
            </summary>
            <param name="name">The name of the uniform.</param>
            <param name="type">The type of data represented by the uniform.</param>
            <param name="arraySize">Size of the array, if the uniform is an array type.</param>
            <remarks>
            Predefined uniform names:
            u_viewRect vec4(x, y, width, height) - view rectangle for current view.
            u_viewTexel vec4 (1.0/width, 1.0/height, undef, undef) - inverse width and height
            u_view mat4 - view matrix
            u_invView mat4 - inverted view matrix
            u_proj mat4 - projection matrix
            u_invProj mat4 - inverted projection matrix
            u_viewProj mat4 - concatenated view projection matrix
            u_invViewProj mat4 - concatenated inverted view projection matrix
            u_model mat4[BGFX_CONFIG_MAX_BONES] - array of model matrices.
            u_modelView mat4 - concatenated model view matrix, only first model matrix from array is used.
            u_modelViewProj mat4 - concatenated model view projection matrix.
            u_alphaRef float - alpha reference value for alpha test.
            </remarks>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.Dispose">
            <summary>
            Releases the uniform.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.Equals(Internal.SharpBgfx.Uniform)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.op_Equality(Internal.SharpBgfx.Uniform,Internal.SharpBgfx.Uniform)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.Uniform.op_Inequality(Internal.SharpBgfx.Uniform,Internal.SharpBgfx.Uniform)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.VertexBuffer">
            <summary>
            Represents a static vertex buffer.
            </summary>
        </member>
        <member name="F:Internal.SharpBgfx.VertexBuffer.Invalid">
            <summary>
            Represents an invalid handle.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.#ctor(Internal.SharpBgfx.MemoryBlock,Internal.SharpBgfx.VertexLayout,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.VertexBuffer"/> struct.
            </summary>
            <param name="memory">The vertex data with which to populate the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.#ctor(Internal.SharpBgfx.MemoryBlock.DataPtr,Internal.SharpBgfx.VertexLayout,Internal.SharpBgfx.BufferFlags)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.SharpBgfx.VertexBuffer"/> struct.
            </summary>
            <param name="memory">The vertex data with which to populate the buffer.</param>
            <param name="layout">The layout of the vertex data.</param>
            <param name="flags">Flags used to control buffer behavior.</param>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.SetName(System.String)">
            <summary>
            Sets the name of the vertex buffer, for debug display purposes.
            </summary>
            <param name="name">The name of the texture.</param>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.Dispose">
            <summary>
            Releases the vertex buffer.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.Equals(Internal.SharpBgfx.VertexBuffer)">
            <summary>
            Determines whether the specified object is equal to this instance.
            </summary>
            <param name="other">The object to compare with this instance.</param>
            <returns><c>true</c> if the specified object is equal to this instance; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" /> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.op_Equality(Internal.SharpBgfx.VertexBuffer,Internal.SharpBgfx.VertexBuffer)">
            <summary>
            Implements the equality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexBuffer.op_Inequality(Internal.SharpBgfx.VertexBuffer,Internal.SharpBgfx.VertexBuffer)">
            <summary>
            Implements the inequality operator.
            </summary>
            <param name="left">The left side of the operator.</param>
            <param name="right">The right side of the operator.</param>
            <returns>
            <c>true</c> if the two objects are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Internal.SharpBgfx.VertexLayout">
            <summary>
            Describes the layout of data in a vertex stream.
            </summary>
        </member>
        <member name="P:Internal.SharpBgfx.VertexLayout.Stride">
            <summary>
            The stride of a single vertex using this layout.
            </summary>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.Begin(Internal.SharpBgfx.RendererBackend)">
            <summary>
            Starts a stream of vertex attribute additions to the layout.
            </summary>
            <param name="backend">The rendering backend with which to associate the attributes.</param>
            <returns>This instance, for use in a fluent API.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.Add(Internal.SharpBgfx.VertexAttributeUsage,System.Int32,Internal.SharpBgfx.VertexAttributeType,System.Boolean,System.Boolean)">
            <summary>
            Starts a stream of vertex attribute additions to the layout.
            </summary>
            <param name="attribute">The kind of attribute to add.</param>
            <param name="count">The number of elements in the attribute (1, 2, 3, or 4).</param>
            <param name="type">The type of data described by the attribute.</param>
            <param name="normalized">if set to <c>true</c>, values will be normalized from a 0-255 range to 0.0 - 0.1 in the shader.</param>
            <param name="asInt">if set to <c>true</c>, the attribute is packaged as an integer in the shader.</param>
            <returns>
            This instance, for use in a fluent API.
            </returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.Skip(System.Int32)">
            <summary>
            Skips the specified number of bytes in the vertex stream.
            </summary>
            <param name="count">The number of bytes to skip.</param>
            <returns>This instance, for use in a fluent API.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.End">
            <summary>
            Marks the end of the vertex stream.
            </summary>
            <returns>This instance, for use in a fluent API.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.GetOffset(Internal.SharpBgfx.VertexAttributeUsage)">
            <summary>
            Gets the byte offset of a particular attribute in the layout.
            </summary>
            <param name="attribute">The attribute for which to get the offset.</param>
            <returns>The offset of the attribute, in bytes.</returns>
        </member>
        <member name="M:Internal.SharpBgfx.VertexLayout.HasAttribute(Internal.SharpBgfx.VertexAttributeUsage)">
            <summary>
            Determines whether the layout contains the given attribute.
            </summary>
            <param name="attribute">The attribute to check/</param>
            <returns><c>true</c> if the layout contains the attribute; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Internal.DDSTextureTools">
            <summary>
            Class for generating images in DDS format.
            </summary>
        </member>
        <member name="T:Internal.DDSTextureTools.DDSImage">
            <summary>
            Data of an image for <see cref="T:Internal.DDSTextureTools"/>.
            </summary>
        </member>
        <member name="T:Internal.DDSTextureTools.DDSImage.Surface">
            <summary>
            Surface data of an image for <see cref="T:Internal.DDSTextureTools"/>.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.ByteOrder">
            <summary>
            Specifies the byte order.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.ByteOrder.Little">
            <summary>
            Specifies Little-endian.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.ByteOrder.Big">
            <summary>
            Specifies Big-endian.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.CloseEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Internal.WebSocketSharp.WebSocket.OnClose"/> event.
            </summary>
            <remarks>
              <para>
              The close event occurs when the WebSocket connection has been closed.
              </para>
              <para>
              If you would like to get the reason for the connection close,
              you should access the <see cref="P:Internal.WebSocketSharp.CloseEventArgs.Code"/> or <see cref="P:Internal.WebSocketSharp.CloseEventArgs.Reason"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.CloseEventArgs.Code">
            <summary>
            Gets the status code for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code for
              the connection close.
              </para>
              <para>
              1005 (no status) if not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.CloseEventArgs.Reason">
            <summary>
            Gets the reason for the connection close.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the reason for
              the connection close.
              </para>
              <para>
              An empty string if not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.CloseEventArgs.WasClean">
            <summary>
            Gets a value indicating whether the connection has been closed cleanly.
            </summary>
            <value>
            <c>true</c> if the connection has been closed cleanly; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.CloseStatusCode">
            <summary>
            Indicates the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The values of this enumeration are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
              <para>
              "Reserved value" cannot be sent as a status code in
              closing handshake by an endpoint.
              </para>
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.Normal">
            <summary>
            Equivalent to close status 1000. Indicates normal close.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.Away">
            <summary>
            Equivalent to close status 1001. Indicates that an endpoint is
            going away.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.ProtocolError">
            <summary>
            Equivalent to close status 1002. Indicates that an endpoint is
            terminating the connection due to a protocol error.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.UnsupportedData">
            <summary>
            Equivalent to close status 1003. Indicates that an endpoint is
            terminating the connection because it has received a type of
            data that it cannot accept.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.Undefined">
            <summary>
            Equivalent to close status 1004. Still undefined. A Reserved value.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus">
            <summary>
            Equivalent to close status 1005. Indicates that no status code was
            actually present. A Reserved value.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.Abnormal">
            <summary>
            Equivalent to close status 1006. Indicates that the connection was
            closed abnormally. A Reserved value.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.InvalidData">
            <summary>
            Equivalent to close status 1007. Indicates that an endpoint is
            terminating the connection because it has received a message that
            contains data that is not consistent with the type of the message.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.PolicyViolation">
            <summary>
            Equivalent to close status 1008. Indicates that an endpoint is
            terminating the connection because it has received a message that
            violates its policy.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.TooBig">
            <summary>
            Equivalent to close status 1009. Indicates that an endpoint is
            terminating the connection because it has received a message that
            is too big to process.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension">
            <summary>
            Equivalent to close status 1010. Indicates that a client is
            terminating the connection because it has expected the server to
            negotiate one or more extension, but the server did not return
            them in the handshake response.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.ServerError">
            <summary>
            Equivalent to close status 1011. Indicates that a server is
            terminating the connection because it has encountered an unexpected
            condition that prevented it from fulfilling the request.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CloseStatusCode.TlsHandshakeFailure">
            <summary>
            Equivalent to close status 1015. Indicates that the connection was
            closed due to a failure to perform a TLS handshake. A Reserved value.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.CompressionMethod">
            <summary>
            Specifies the method for compression.
            </summary>
            <remarks>
            The methods are defined in
            <see href="https://tools.ietf.org/html/rfc7692">
            Compression Extensions for WebSocket</see>.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.CompressionMethod.None">
            <summary>
            Specifies no compression.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.CompressionMethod.Deflate">
            <summary>
            Specifies DEFLATE.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.ErrorEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Internal.WebSocketSharp.WebSocket.OnError"/> event.
            </summary>
            <remarks>
              <para>
              The error event occurs when the <see cref="T:Internal.WebSocketSharp.WebSocket"/> interface
              gets an error.
              </para>
              <para>
              If you would like to get the error message, you should access
              the <see cref="P:Internal.WebSocketSharp.ErrorEventArgs.Message"/> property.
              </para>
              <para>
              If the error is due to an exception, you can get it by accessing
              the <see cref="P:Internal.WebSocketSharp.ErrorEventArgs.Exception"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.ErrorEventArgs.Exception">
            <summary>
            Gets the exception that caused the error.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Exception"/> instance that represents
              the cause of the error.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.ErrorEventArgs.Message">
            <summary>
            Gets the error message.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the error message.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Ext">
            <summary>
            Provides a set of static methods for websocket-sharp.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.GetDescription(Internal.WebSocketSharp.Net.HttpStatusCode)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the description of
            the HTTP status code.
            </returns>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpStatusCode"/> enum values.
              </para>
              <para>
              It specifies the HTTP status code.
              </para>
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.GetStatusDescription(System.Int32)">
            <summary>
            Gets the description of the specified HTTP status code.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code.
              </para>
              <para>
              An empty string if the description is not present.
              </para>
            </returns>
            <param name="code">
            An <see cref="T:System.Int32"/> that specifies the HTTP status code.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.IsCloseStatusCode(System.UInt16)">
            <summary>
            Determines whether the specified ushort is in the range of
            the status code for the WebSocket connection close.
            </summary>
            <remarks>
              <para>
              The ranges are the following:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  1000-2999: These numbers are reserved for definition by
                  the WebSocket protocol.
                  </term>
                </item>
                <item>
                  <term>
                  3000-3999: These numbers are reserved for use by libraries,
                  frameworks, and applications.
                  </term>
                </item>
                <item>
                  <term>
                  4000-4999: These numbers are reserved for private use.
                  </term>
                </item>
              </list>
            </remarks>
            <returns>
            <c>true</c> if <paramref name="value"/> is in the range of
            the status code for the close; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.UInt16"/> to test.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.IsEnclosedIn(System.String,System.Char)">
            <summary>
            Determines whether the specified string is enclosed in
            the specified character.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is enclosed in
            <paramref name="c"/>; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
            <param name="c">
            A <see cref="T:System.Char"/> to find.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.IsHostOrder(Internal.WebSocketSharp.ByteOrder)">
            <summary>
            Determines whether the specified byte order is host (this computer
            architecture) byte order.
            </summary>
            <returns>
            <c>true</c> if <paramref name="order"/> is host byte order; otherwise,
            <c>false</c>.
            </returns>
            <param name="order">
            One of the <see cref="T:Internal.WebSocketSharp.ByteOrder"/> enum values to test.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.IsLocal(System.Net.IPAddress)">
            <summary>
            Determines whether the specified IP address is a local IP address.
            </summary>
            <remarks>
            This local means NOT REMOTE for the current host.
            </remarks>
            <returns>
            <c>true</c> if <paramref name="address"/> is a local IP address;
            otherwise, <c>false</c>.
            </returns>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.IsNullOrEmpty(System.String)">
            <summary>
            Determines whether the specified string is <see langword="null"/> or
            an empty string.
            </summary>
            <returns>
            <c>true</c> if <paramref name="value"/> is <see langword="null"/> or
            an empty string; otherwise, <c>false</c>.
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to test.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.SubArray``1(``0[],System.Int32,System.Int32)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.SubArray``1(``0[],System.Int64,System.Int64)">
            <summary>
            Retrieves a sub-array from the specified array. A sub-array starts at
            the specified index in the array.
            </summary>
            <returns>
            An array of T that receives a sub-array.
            </returns>
            <param name="array">
            An array of T from which to retrieve a sub-array.
            </param>
            <param name="startIndex">
            A <see cref="T:System.Int64"/> that specifies the zero-based index in the array
            at which retrieving starts.
            </param>
            <param name="length">
            A <see cref="T:System.Int64"/> that specifies the number of elements to retrieve.
            </param>
            <typeparam name="T">
            The type of elements in the array.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="startIndex"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="startIndex"/> is greater than the end of the array.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than zero.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is greater than the number of elements from
              <paramref name="startIndex"/> to the end of the array.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.Times(System.Int32,System.Action{System.Int32})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            An <see cref="T:System.Int32"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;int&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int32"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.Times(System.Int64,System.Action{System.Int64})">
            <summary>
            Executes the specified delegate <paramref name="n"/> times.
            </summary>
            <param name="n">
            A <see cref="T:System.Int64"/> that specifies the number of times to execute.
            </param>
            <param name="action">
              <para>
              An <c>Action&lt;long&gt;</c> delegate to execute.
              </para>
              <para>
              The <see cref="T:System.Int64"/> parameter is the zero-based count of iteration.
              </para>
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.ToHostOrder(System.Byte[],Internal.WebSocketSharp.ByteOrder)">
            <summary>
            Converts the order of elements in the specified byte array to
            host (this computer architecture) byte order.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> converted from
              <paramref name="source"/>.
              </para>
              <para>
              <paramref name="source"/> if the number of elements in
              it is less than 2 or <paramref name="sourceOrder"/> is
              same as host byte order.
              </para>
            </returns>
            <param name="source">
            An array of <see cref="T:System.Byte"/> to convert.
            </param>
            <param name="sourceOrder">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.ByteOrder"/> enum values.
              </para>
              <para>
              It specifies the order of elements in <paramref name="source"/>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="source"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.ToString``1(``0[],System.String)">
            <summary>
            Converts the specified array to a string.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> converted by concatenating each element of
              <paramref name="array"/> across <paramref name="separator"/>.
              </para>
              <para>
              An empty string if <paramref name="array"/> is an empty array.
              </para>
            </returns>
            <param name="array">
            An array of T to convert.
            </param>
            <param name="separator">
            A <see cref="T:System.String"/> used to separate each element of
            <paramref name="array"/>.
            </param>
            <typeparam name="T">
            The type of elements in <paramref name="array"/>.
            </typeparam>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Ext.ToUri(System.String)">
            <summary>
            Converts the specified string to a <see cref="T:System.Uri"/>.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.Uri"/> converted from <paramref name="value"/>.
              </para>
              <para>
              <see langword="null"/> if the conversion has failed.
              </para>
            </returns>
            <param name="value">
            A <see cref="T:System.String"/> to convert.
            </param>
        </member>
        <member name="T:Internal.WebSocketSharp.Fin">
            <summary>
            Indicates whether a WebSocket frame is the final frame of a message.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Fin.More">
            <summary>
            Equivalent to numeric value 0. Indicates more frames of a message follow.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Fin.Final">
            <summary>
            Equivalent to numeric value 1. Indicates the final frame of a message.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.LogData">
            <summary>
            Represents a log data used by the <see cref="T:Internal.WebSocketSharp.Logger"/> class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.LogData.Caller">
            <summary>
            Gets the information of the logging method caller.
            </summary>
            <value>
            A <see cref="T:System.Diagnostics.StackFrame"/> that provides the information of
            the logging method caller.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.LogData.Date">
            <summary>
            Gets the date and time when the log data was created.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the date and time when
            the log data was created.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.LogData.Level">
            <summary>
            Gets the logging level of the log data.
            </summary>
            <value>
            One of the <see cref="T:Internal.WebSocketSharp.LogLevel"/> enum values that represents
            the logging level of the log data.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.LogData.Message">
            <summary>
            Gets the message of the log data.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the message of the log data.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.LogData.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents the current instance.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Logger">
            <summary>
            Provides a set of methods and properties for logging.
            </summary>
            <remarks>
              <para>
              If you output a log with lower than the current logging level,
              it cannot be outputted.
              </para>
              <para>
              The default output method writes a log to the standard output
              stream and the text file if it has a valid path.
              </para>
              <para>
              If you would like to use the custom output method, you should
              specify it with the constructor or the <see cref="P:Internal.WebSocketSharp.Logger.Output"/>
              property.
              </para>
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Logger"/> class.
            </summary>
            <remarks>
            This constructor initializes the logging level with the Error level.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.#ctor(Internal.WebSocketSharp.LogLevel)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Logger"/> class with
            the specified logging level.
            </summary>
            <param name="level">
            One of the <see cref="T:Internal.WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.#ctor(Internal.WebSocketSharp.LogLevel,System.String,System.Action{Internal.WebSocketSharp.LogData,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Logger"/> class with
            the specified logging level, path to the log file, and delegate
            used to output a log.
            </summary>
            <param name="level">
            One of the <see cref="T:Internal.WebSocketSharp.LogLevel"/> enum values that specifies
            the logging level.
            </param>
            <param name="file">
            A <see cref="T:System.String"/> that specifies the path to the log file.
            </param>
            <param name="output">
            An <see cref="T:System.Action{LogData, string}"/> that specifies
            the delegate used to output a log.
            </param>
        </member>
        <member name="P:Internal.WebSocketSharp.Logger.File">
            <summary>
            Gets or sets the path to the log file.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the path to the log file if any.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Logger.Level">
            <summary>
            Gets or sets the current logging level.
            </summary>
            <remarks>
            A log with lower than the value of this property cannot be outputted.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.LogLevel"/> enum values.
              </para>
              <para>
              It represents the current logging level.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Logger.Output">
            <summary>
            Gets or sets the delegate used to output a log.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Action{LogData, string}"/> delegate.
              </para>
              <para>
              It references the method used to output a log.
              </para>
              <para>
              The string parameter passed to the delegate is the value of
              the <see cref="P:Internal.WebSocketSharp.Logger.File"/> property.
              </para>
              <para>
              If the value to set is <see langword="null"/>, the default
              output method is set.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Debug(System.String)">
            <summary>
            Outputs the specified message as a log with the Debug level.
            </summary>
            <remarks>
            If the current logging level is higher than the Debug level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Error(System.String)">
            <summary>
            Outputs the specified message as a log with the Error level.
            </summary>
            <remarks>
            If the current logging level is higher than the Error level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Fatal(System.String)">
            <summary>
            Outputs the specified message as a log with the Fatal level.
            </summary>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Info(System.String)">
            <summary>
            Outputs the specified message as a log with the Info level.
            </summary>
            <remarks>
            If the current logging level is higher than the Info level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Trace(System.String)">
            <summary>
            Outputs the specified message as a log with the Trace level.
            </summary>
            <remarks>
            If the current logging level is higher than the Trace level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Logger.Warn(System.String)">
            <summary>
            Outputs the specified message as a log with the Warn level.
            </summary>
            <remarks>
            If the current logging level is higher than the Warn level,
            this method does not output the message as a log.
            </remarks>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message to output.
            </param>
        </member>
        <member name="T:Internal.WebSocketSharp.LogLevel">
            <summary>
            Specifies the logging level.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Trace">
            <summary>
            Specifies the bottom logging level.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Debug">
            <summary>
            Specifies the 2nd logging level from the bottom.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Info">
            <summary>
            Specifies the 3rd logging level from the bottom.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Warn">
            <summary>
            Specifies the 3rd logging level from the top.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Error">
            <summary>
            Specifies the 2nd logging level from the top.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.Fatal">
            <summary>
            Specifies the top logging level.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.LogLevel.None">
            <summary>
            Specifies not to output logs.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Mask">
            <summary>
            Indicates whether the payload data of a WebSocket frame is masked.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Mask.Off">
            <summary>
            Equivalent to numeric value 0. Indicates not masked.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Mask.On">
            <summary>
            Equivalent to numeric value 1. Indicates masked.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.MessageEventArgs">
            <summary>
            Represents the event data for the <see cref="E:Internal.WebSocketSharp.WebSocket.OnMessage"/> event.
            </summary>
            <remarks>
              <para>
              The message event occurs when the <see cref="T:Internal.WebSocketSharp.WebSocket"/> interface
              receives a message or a ping if the <see cref="P:Internal.WebSocketSharp.WebSocket.EmitOnPing"/>
              property is set to <c>true</c>.
              </para>
              <para>
              If you would like to get the message data, you should access
              the <see cref="P:Internal.WebSocketSharp.MessageEventArgs.Data"/> or <see cref="P:Internal.WebSocketSharp.MessageEventArgs.RawData"/> property.
              </para>
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.Opcode">
            <summary>
            Gets the opcode for the message.
            </summary>
            <value>
            <see cref="F:Internal.WebSocketSharp.Opcode.Text"/>, <see cref="F:Internal.WebSocketSharp.Opcode.Binary"/>,
            or <see cref="F:Internal.WebSocketSharp.Opcode.Ping"/>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.Data">
            <summary>
            Gets the message data as a <see cref="T:System.String"/>.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the message data
              if the message type is text or ping.
              </para>
              <para>
              <see langword="null"/> if the message type is binary or
              the message data could not be UTF-8-decoded.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.IsBinary">
            <summary>
            Gets a value indicating whether the message type is binary.
            </summary>
            <value>
            <c>true</c> if the message type is binary; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.IsPing">
            <summary>
            Gets a value indicating whether the message type is ping.
            </summary>
            <value>
            <c>true</c> if the message type is ping; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.IsText">
            <summary>
            Gets a value indicating whether the message type is text.
            </summary>
            <value>
            <c>true</c> if the message type is text; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.MessageEventArgs.RawData">
            <summary>
            Gets the message data as an array of <see cref="T:System.Byte"/>.
            </summary>
            <value>
            An array of <see cref="T:System.Byte"/> that represents the message data.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.AuthenticationSchemes">
            <summary>
            Specifies the scheme for authentication.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.None">
            <summary>
            No authentication is allowed.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Digest">
            <summary>
            Specifies digest authentication.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Basic">
            <summary>
            Specifies basic authentication.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Anonymous">
            <summary>
            Specifies anonymous authentication.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.ClientSslConfiguration">
            <summary>
            Stores the parameters for an <see cref="T:System.Net.Security.SslStream"/> instance used by
            a client.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.ClientSslConfiguration.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.ClientSslConfiguration"/>
            class with the specified target host name.
            </summary>
            <param name="targetHost">
            A <see cref="T:System.String"/> that specifies the name of the server that
            will share a secure connection with the client.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="targetHost"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="targetHost"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.ClientSslConfiguration.#ctor(Internal.WebSocketSharp.Net.ClientSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.ClientSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:Internal.WebSocketSharp.Net.ClientSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.ClientCertificates">
            <summary>
            Gets or sets the collection of the certificates from which to select
            one to supply to the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509CertificateCollection"/> that contains
              the certificates from which to select.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.ClientCertificateSelectionCallback">
            <summary>
            Gets or sets the callback used to select the certificate to supply to
            the server.
            </summary>
            <remarks>
            No certificate is supplied if the callback returns <see langword="null"/>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.LocalCertificateSelectionCallback"/> delegate.
              </para>
              <para>
              It represents the delegate called when the client selects
              the certificate.
              </para>
              <para>
              The default value invokes a method that only returns
              <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.ServerCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            the server.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              It represents the delegate called when the client validates
              the certificate.
              </para>
              <para>
              The default value invokes a method that only returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ClientSslConfiguration.TargetHost">
            <summary>
            Gets or sets the target host name.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the name of the server that
            will share a secure connection with the client.
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.Cookie">
            <summary>
            Provides a set of methods and properties used to manage an HTTP cookie.
            </summary>
            <remarks>
              <para>
              This class refers to the following specifications:
              </para>
              <list type="bullet">
                <item>
                  <term>
                  <see href="http://web.archive.org/web/20020803110822/http://wp.netscape.com/newsref/std/cookie_spec.html">
                  Netscape specification</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2109">RFC 2109</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc2965">RFC 2965</see>
                  </term>
                </item>
                <item>
                  <term>
                  <see href="https://tools.ietf.org/html/rfc6265">RFC 6265</see>
                  </term>
                </item>
              </list>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> class with
            the specified name and value.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, and path.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> class with
            the specified name, value, path, and domain.
            </summary>
            <param name="name">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the cookie.
            </param>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the value of the Path
            attribute of the cookie.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the value of the Domain
            attribute of the cookie.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> is a string not enclosed in double quotes
              although it contains a reserved character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Comment">
            <summary>
            Gets the value of the Comment attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the comment to document
              intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.CommentUri">
            <summary>
            Gets the value of the CommentURL attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI that provides
              the comment to document intended use of the cookie.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Discard">
            <summary>
            Gets a value indicating whether the client discards the cookie
            unconditionally when the client terminates.
            </summary>
            <value>
              <para>
              <c>true</c> if the client discards the cookie unconditionally
              when the client terminates; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Domain">
            <summary>
            Gets or sets the value of the Domain attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the domain name that
              the cookie is valid for.
              </para>
              <para>
              An empty string if not necessary.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Expired">
            <summary>
            Gets or sets a value indicating whether the cookie has expired.
            </summary>
            <value>
              <para>
              <c>true</c> if the cookie has expired; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Expires">
            <summary>
            Gets or sets the value of the Expires attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the date and time that
              the cookie expires on.
              </para>
              <para>
              <see cref="F:System.DateTime.MinValue"/> if not necessary.
              </para>
              <para>
              The default value is <see cref="F:System.DateTime.MinValue"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.HttpOnly">
            <summary>
            Gets or sets a value indicating whether non-HTTP APIs can access
            the cookie.
            </summary>
            <value>
              <para>
              <c>true</c> if non-HTTP APIs cannot access the cookie; otherwise,
              <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Name">
            <summary>
            Gets or sets the name of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the cookie.
              </para>
              <para>
              The name must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation starts with a dollar sign.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Path">
            <summary>
            Gets or sets the value of the Path attribute of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the subset of URI on
            the origin server that the cookie applies to.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Port">
            <summary>
            Gets the value of the Port attribute of the cookie.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the list of TCP ports
              that the cookie applies to.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Secure">
            <summary>
            Gets or sets a value indicating whether the security level of
            the cookie is secure.
            </summary>
            <remarks>
            When this property is <c>true</c>, the cookie may be included in
            the request only if the request is transmitted over HTTPS.
            </remarks>
            <value>
              <para>
              <c>true</c> if the security level of the cookie is secure;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.TimeStamp">
            <summary>
            Gets the time when the cookie was issued.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time when
            the cookie was issued.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Value">
            <summary>
            Gets or sets the value of the cookie.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the cookie.
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is a string not enclosed in
            double quotes although it contains a reserved character.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.Cookie.Version">
            <summary>
            Gets the value of the Version attribute of the cookie.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the version of HTTP state
              management that the cookie conforms to.
              </para>
              <para>
              0 or 1.
              </para>
              <para>
              0 if not present.
              </para>
              <para>
              The default value is 0.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.Equals(System.Object)">
            <summary>
            Determines whether the current cookie instance is equal to
            the specified <see cref="T:System.Object"/> instance.
            </summary>
            <param name="comparand">
              <para>
              An <see cref="T:System.Object"/> instance to compare with
              the current cookie instance.
              </para>
              <para>
              An reference to a <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> instance.
              </para>
            </param>
            <returns>
            <c>true</c> if the current cookie instance is equal to
            <paramref name="comparand"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.GetHashCode">
            <summary>
            Gets a hash code for the current cookie instance.
            </summary>
            <returns>
            An <see cref="T:System.Int32"/> that represents the hash code.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.Cookie.ToString">
            <summary>
            Returns a string that represents the current cookie instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that is suitable for the Cookie request header.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.CookieCollection">
            <summary>
            Provides a collection of instances of the <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> class.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.Count">
            <summary>
            Gets the number of cookies in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of cookies in
            the collection.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the collection is read-only.
            </summary>
            <value>
              <para>
              <c>true</c> if the collection is read-only; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            thread safe.
            </summary>
            <value>
              <para>
              <c>true</c> if the access to the collection is thread safe;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.Item(System.Int32)">
            <summary>
            Gets the cookie at the specified index from the collection.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> at the specified index in the collection.
            </value>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the cookie
            to find.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range for the collection.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.Item(System.String)">
            <summary>
            Gets the cookie with the specified name from the collection.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> with the specified name in the collection.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the cookie to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.CookieCollection.SyncRoot">
            <summary>
            Gets an object used to synchronize access to the collection.
            </summary>
            <value>
            An <see cref="T:System.Object"/> used to synchronize access to the collection.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.Add(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Adds the specified cookie to the collection.
            </summary>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.Add(Internal.WebSocketSharp.Net.CookieCollection)">
            <summary>
            Adds the specified cookies to the collection.
            </summary>
            <param name="cookies">
            A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains the cookies to add.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookies"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.Clear">
            <summary>
            Removes all cookies from the collection.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.Contains(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Determines whether the collection contains the specified cookie.
            </summary>
            <returns>
            <c>true</c> if the cookie is found in the collection; otherwise,
            <c>false</c>.
            </returns>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> to find.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.CopyTo(Internal.WebSocketSharp.Net.Cookie[],System.Int32)">
            <summary>
            Copies the elements of the collection to the specified array,
            starting at the specified index.
            </summary>
            <param name="array">
            An array of <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> that specifies the destination of
            the elements copied from the collection.
            </param>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying starts.
            </param>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="index"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is less than zero.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{Cookie}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.Remove(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Removes the specified cookie from the collection.
            </summary>
            <returns>
              <para>
              <c>true</c> if the cookie is successfully removed; otherwise,
              <c>false</c>.
              </para>
              <para>
              <c>false</c> if the cookie is not found in the collection.
              </para>
            </returns>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The collection is read-only.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.CookieException">
            <summary>
            The exception that is thrown when a <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> gets an error.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.CookieException"/> class
            with the specified serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.CookieException"/> class.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.CookieException.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpBasicIdentity">
            <summary>
            Holds the username and password from an HTTP Basic authentication attempt.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpBasicIdentity.Password">
            <summary>
            Gets the password from a basic authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the password.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpDigestIdentity">
            <summary>
            Holds the username and other parameters from an HTTP Digest
            authentication attempt.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Algorithm">
            <summary>
            Gets the algorithm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the algorithm parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Cnonce">
            <summary>
            Gets the cnonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the cnonce parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Nc">
            <summary>
            Gets the nc parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nc parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Nonce">
            <summary>
            Gets the nonce parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the nonce parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Opaque">
            <summary>
            Gets the opaque parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the opaque parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Qop">
            <summary>
            Gets the qop parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the qop parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Realm">
            <summary>
            Gets the realm parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the realm parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Response">
            <summary>
            Gets the response parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the response parameter.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpDigestIdentity.Uri">
            <summary>
            Gets the uri parameter from a digest authentication attempt.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the uri parameter.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListener">
            <summary>
            Provides a simple, programmatically controlled HTTP listener.
            </summary>
            <remarks>
              <para>
              The listener supports HTTP/1.1 version request and response.
              </para>
              <para>
              And the listener allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class cannot be inherited.
              </para>
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.AuthenticationSchemeSelector">
            <summary>
            Gets or sets the delegate called to determine the scheme used to
            authenticate the clients.
            </summary>
            <remarks>
              <para>
              If this property is set, the listener uses the authentication
              scheme selected by the delegate for each request.
              </para>
              <para>
              Or if this property is not set, the listener uses the value of
              the <see cref="P:Internal.WebSocketSharp.Net.HttpListener.AuthenticationSchemes"/> property
              as the authentication scheme for all requests.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{HttpListenerRequest, AuthenticationSchemes}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the listener selects
              an authentication scheme.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.CertificateFolderPath">
            <summary>
            Gets or sets the path to the folder in which stores the certificate
            files used to authenticate the server on the secure connection.
            </summary>
            <remarks>
              <para>
              This property represents the path to the folder in which stores
              the certificate files associated with each port number of added
              URI prefixes.
              </para>
              <para>
              A set of the certificate files is a pair of &lt;port number&gt;.cer
              (DER) and &lt;port number&gt;.key (DER, RSA Private Key).
              </para>
              <para>
              If this property is <see langword="null"/> or an empty string,
              the result of the <see cref="F:System.Environment.SpecialFolder.ApplicationData"/>
              with the <see cref="!:Environment.GetFolderPath()"/> method is used as
              the default path.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the path to the folder
              in which stores the certificate files.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.IgnoreWriteExceptions">
            <summary>
            Gets or sets a value indicating whether the listener returns
            exceptions that occur when sending the response to the client.
            </summary>
            <value>
              <para>
              <c>true</c> if the listener should not return those exceptions;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.IsListening">
            <summary>
            Gets a value indicating whether the listener has been started.
            </summary>
            <value>
            <c>true</c> if the listener has been started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.IsSupported">
            <summary>
            Gets a value indicating whether the listener can be used with
            the current operating system.
            </summary>
            <value>
            <c>true</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.Log">
            <summary>
            Gets the logging functions.
            </summary>
            <remarks>
              <para>
              The default logging level is <see cref="F:Internal.WebSocketSharp.LogLevel.Error"/>.
              </para>
              <para>
              If you would like to change it, you should set the <c>Log.Level</c>
              property to any of the <see cref="T:Internal.WebSocketSharp.LogLevel"/> enum values.
              </para>
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that provides the logging functions.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.Prefixes">
            <summary>
            Gets the URI prefixes handled by the listener.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection"/> that contains the URI
            prefixes.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.Realm">
            <summary>
            Gets or sets the name of the realm associated with the listener.
            </summary>
            <remarks>
            If this property is <see langword="null"/> or an empty string,
            "SECRET AREA" is used as the name of the realm.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.UnsafeConnectionNtlmAuthentication">
            <summary>
            Gets or sets a value indicating whether, when NTLM authentication is used,
            the authentication information of first request is used to authenticate
            additional requests on the same connection.
            </summary>
            <remarks>
            This property is not currently supported and always throws
            a <see cref="T:System.NotSupportedException"/>.
            </remarks>
            <value>
            <c>true</c> if the authentication information of first request is used;
            otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.NotSupportedException">
            Any use of this property.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListener.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the listener finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.Abort">
            <summary>
            Shuts down the listener immediately.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting an incoming request asynchronously.
            </summary>
            <remarks>
              <para>
              This asynchronous operation must be ended by calling
              the <see cref="M:Internal.WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)"/> method.
              </para>
              <para>
              Typically, the <see cref="M:Internal.WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)"/> method is called by
              <paramref name="callback"/>.
              </para>
            </remarks>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that represents the status of
            the asynchronous operation.
            </returns>
            <param name="callback">
              <para>
              An <see cref="T:System.AsyncCallback"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the asynchronous operation is
              complete.
              </para>
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass to
            <paramref name="callback"/>.
            </param>
            <exception cref="T:Internal.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.Close">
            <summary>
            Shuts down the listener.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.EndGetContext(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get an incoming request.
            </summary>
            <remarks>
            This method ends an asynchronous operation started by calling
            the <see cref="M:Internal.WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </remarks>
            <returns>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the <see cref="M:Internal.WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="asyncResult"/> was not obtained by calling
            the <see cref="M:Internal.WebSocketSharp.Net.HttpListener.BeginGetContext(System.AsyncCallback,System.Object)"/> method.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="asyncResult"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:Internal.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This method was already called for <paramref name="asyncResult"/>.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.GetContext">
            <summary>
            Gets an incoming request.
            </summary>
            <remarks>
            This method waits for an incoming request and returns when
            a request is received.
            </remarks>
            <returns>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerContext"/> that represents a request.
            </returns>
            <exception cref="T:Internal.WebSocketSharp.Net.HttpListenerException">
            This method is canceled.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This listener has not been started or is currently stopped.
              </para>
              <para>
              -or-
              </para>
              <para>
              This listener has no URI prefix on which listens.
              </para>
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            This listener has been closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListener.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by the listener.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListenerContext">
            <summary>
            Provides the access to the HTTP request and response objects used by
            the <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerContext.Request">
            <summary>
            Gets the HTTP request object that represents a client request.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerRequest"/> that represents the client request.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerContext.Response">
            <summary>
            Gets the HTTP response object used to send a response to the client.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerResponse"/> that represents a response to
            the client request.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String)">
            <summary>
            Accepts a WebSocket connection.
            </summary>
            <returns>
            A <see cref="T:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerContext.AcceptWebSocket(System.String,System.Action{Internal.WebSocketSharp.WebSocket})">
            <summary>
            Accepts a WebSocket connection with initializing the WebSocket
            interface.
            </summary>
            <returns>
            A <see cref="T:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext"/> that represents
            the WebSocket handshake request.
            </returns>
            <param name="protocol">
              <para>
              A <see cref="T:System.String"/> that specifies the name of the subprotocol
              supported on the WebSocket connection.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{WebSocket}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when a new WebSocket instance is
              initialized.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="protocol"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocol"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="initializer"/> caused an exception.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              This method has already been done.
              </para>
              <para>
              -or-
              </para>
              <para>
              The client request is not a WebSocket handshake request.
              </para>
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListenerException">
            <summary>
            The exception that is thrown when an error occurs processing
            an HTTP request.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpListenerException"/>
            class with the specified serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpListenerException"/>
            class.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerException.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpListenerException"/>
            class with the specified error code and message.
            </summary>
            <param name="errorCode">
            An <see cref="T:System.Int32"/> that specifies the error code.
            </param>
            <param name="message">
            A <see cref="T:System.String"/> that specifies the message.
            </param>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerException.ErrorCode">
            <summary>
            Gets the error code that identifies the error that occurred.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the error code.
              </para>
              <para>
              It is any of the Win32 error codes.
              </para>
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection">
            <summary>
            Provides a collection used to store the URI prefixes for a instance of
            the <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> class.
            </summary>
            <remarks>
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance responds to the request which
            has a requested URI that the prefixes most closely match.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.Count">
            <summary>
            Gets the number of prefixes in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of prefixes.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.IsReadOnly">
            <summary>
            Gets a value indicating whether the access to the collection is
            read-only.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.IsSynchronized">
            <summary>
            Gets a value indicating whether the access to the collection is
            synchronized.
            </summary>
            <value>
            Always returns <c>false</c>.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.Add(System.String)">
            <summary>
            Adds the specified URI prefix to the collection.
            </summary>
            <param name="uriPrefix">
              <para>
              A <see cref="T:System.String"/> that specifies the URI prefix to add.
              </para>
              <para>
              It must be a well-formed URI prefix with http or https scheme,
              and must end with a forward slash (/).
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="uriPrefix"/> is invalid.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.Clear">
            <summary>
            Removes all URI prefixes from the collection.
            </summary>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.Contains(System.String)">
            <summary>
            Returns a value indicating whether the collection contains the
            specified URI prefix.
            </summary>
            <returns>
            <c>true</c> if the collection contains the URI prefix; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to test.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.CopyTo(System.String[],System.Int32)">
            <summary>
            Copies the contents of the collection to the specified array of string.
            </summary>
            <param name="array">
            An array of <see cref="T:System.String"/> that specifies the destination of
            the URI prefix strings copied from the collection.
            </param>
            <param name="offset">
            An <see cref="T:System.Int32"/> that specifies the zero-based index in
            the array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentException">
            The space from <paramref name="offset"/> to the end of
            <paramref name="array"/> is not enough to copy to.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="array"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="offset"/> is less than zero.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.Generic.IEnumerator{string}"/>
            instance that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.Remove(System.String)">
            <summary>
            Removes the specified URI prefix from the collection.
            </summary>
            <returns>
            <c>true</c> if the URI prefix is successfully removed; otherwise,
            <c>false</c>.
            </returns>
            <param name="uriPrefix">
            A <see cref="T:System.String"/> that specifies the URI prefix to remove.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="uriPrefix"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            The <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance associated with this
            collection is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerPrefixCollection.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator that iterates through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance that can be used to iterate
            through the collection.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListenerRequest">
            <summary>
            Represents an incoming HTTP request to a <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/>
            instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.AcceptTypes">
            <summary>
            Gets the media types that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of
              the media types specified in the value of the Accept header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.ClientCertificateError">
            <summary>
            Gets an error code that identifies a problem with the certificate
            provided by the client.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents an error code.
            </value>
            <exception cref="T:System.NotSupportedException">
            This property is not supported.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.ContentEncoding">
            <summary>
            Gets the encoding for the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> converted from the charset value of the
              Content-Type header.
              </para>
              <para>
              <see cref="P:System.Text.Encoding.UTF8"/> if the charset value is not available.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.ContentLength64">
            <summary>
            Gets the length in bytes of the entity body data included in the
            request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> converted from the value of the Content-Length
              header.
              </para>
              <para>
              -1 if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.ContentType">
            <summary>
            Gets the media type of the entity body data included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Content-Type
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.Cookies">
            <summary>
            Gets the HTTP cookies included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.HasEntityBody">
            <summary>
            Gets a value indicating whether the request has the entity body data.
            </summary>
            <value>
            <c>true</c> if the request has the entity body data; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.Headers">
            <summary>
            Gets the HTTP headers included in the request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.HttpMethod">
            <summary>
            Gets the HTTP method specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the HTTP method specified in
            the request line.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.InputStream">
            <summary>
            Gets a stream that contains the entity body data included in
            the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.IO.Stream"/> that contains the entity body data.
              </para>
              <para>
              <see cref="F:System.IO.Stream.Null"/> if the entity body data is not available.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.IsLocal">
            <summary>
            Gets a value indicating whether the request is sent from the
            local computer.
            </summary>
            <value>
            <c>true</c> if the request is sent from the same computer as
            the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.KeepAlive">
            <summary>
            Gets a value indicating whether a persistent connection is requested.
            </summary>
            <value>
            <c>true</c> if the request specifies that the connection is kept open;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.LocalEndPoint">
            <summary>
            Gets the endpoint to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.ProtocolVersion">
            <summary>
            Gets the HTTP version specified by the client.
            </summary>
            <value>
            A <see cref="T:System.Version"/> that represents the HTTP version specified in
            the request line.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.QueryString">
            <summary>
            Gets the query string included in the request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              Each query parameter is decoded in UTF-8.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.RawUrl">
            <summary>
            Gets the raw URL specified by the client.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the request target specified in
            the request line.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.RemoteEndPoint">
            <summary>
            Gets the endpoint from which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.RequestTraceIdentifier">
            <summary>
            Gets the trace identifier of the request.
            </summary>
            <value>
            A <see cref="T:System.Guid"/> that represents the trace identifier.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.Url">
            <summary>
            Gets the URL requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URL cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.UrlReferrer">
            <summary>
            Gets the URI of the resource from which the requested URL was obtained.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the value of the Referer header.
              </para>
              <para>
              <see langword="null"/> if the header value is not available.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.UserAgent">
            <summary>
            Gets the user agent from which the request is originated.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the User-Agent
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.UserHostAddress">
            <summary>
            Gets the IP address and port number to which the request is sent.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server IP address and
            port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.UserHostName">
            <summary>
            Gets the server host name requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Host header.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerRequest.UserLanguages">
            <summary>
            Gets the natural languages that are acceptable for the client.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that contains the names of the
              natural languages specified in the value of the Accept-Language
              header.
              </para>
              <para>
              <see langword="null"/> if the header is not present.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)">
            <summary>
            Begins getting the certificate provided by the client asynchronously.
            </summary>
            <returns>
            An <see cref="T:System.IAsyncResult"/> instance that represents the status of
            the asynchronous operation.
            </returns>
            <param name="requestCallback">
              <para>
              An <see cref="T:System.AsyncCallback"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the asynchronous operation is
              complete.
              </para>
            </param>
            <param name="state">
            An <see cref="T:System.Object"/> that specifies a user defined object to pass to
            <paramref name="requestCallback"/>.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerRequest.EndGetClientCertificate(System.IAsyncResult)">
            <summary>
            Ends an asynchronous operation to get the certificate provided by
            the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <param name="asyncResult">
            An <see cref="T:System.IAsyncResult"/> instance obtained by calling
            the <see cref="M:Internal.WebSocketSharp.Net.HttpListenerRequest.BeginGetClientCertificate(System.AsyncCallback,System.Object)"/> method.
            </param>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerRequest.GetClientCertificate">
            <summary>
            Gets the certificate provided by the client.
            </summary>
            <returns>
            A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate
            provided by the client.
            </returns>
            <exception cref="T:System.NotSupportedException">
            This method is not supported.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerRequest.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the request.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpListenerResponse">
            <summary>
            Represents an HTTP response to an HTTP request received by
            a <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
            <remarks>
            This class cannot be inherited.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.ContentEncoding">
            <summary>
            Gets or sets the encoding for the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Text.Encoding"/> that represents the encoding for
              the entity body data.
              </para>
              <para>
              <see langword="null"/> if no encoding is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.ContentLength64">
            <summary>
            Gets or sets the number of bytes in the entity body data included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Int64"/> that represents the number of bytes in
              the entity body data.
              </para>
              <para>
              It is used for the value of the Content-Length header.
              </para>
              <para>
              The default value is zero.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is less than zero.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.ContentType">
            <summary>
            Gets or sets the media type of the entity body included in
            the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the media type of
              the entity body.
              </para>
              <para>
              It is used for the value of the Content-Type header.
              </para>
              <para>
              <see langword="null"/> if no media type is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation contains
              an invalid character.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.Cookies">
            <summary>
            Gets or sets the collection of the HTTP cookies sent with the response.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains the cookies sent with
            the response.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.Headers">
            <summary>
            Gets or sets the collection of the HTTP headers sent to the client.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.WebHeaderCollection"/> that contains the headers sent to
            the client.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The value specified for a set operation is not valid for a response.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.KeepAlive">
            <summary>
            Gets or sets a value indicating whether the server requests
            a persistent connection.
            </summary>
            <value>
              <para>
              <c>true</c> if the server requests a persistent connection;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>true</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.OutputStream">
            <summary>
            Gets a stream instance to which the entity body data can be written.
            </summary>
            <value>
            A <see cref="T:System.IO.Stream"/> instance to which the entity body data can be
            written.
            </value>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.ProtocolVersion">
            <summary>
            Gets the HTTP version used for the response.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Version"/> that represents the HTTP version used for
              the response.
              </para>
              <para>
              Always returns same as 1.1.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.RedirectLocation">
            <summary>
            Gets or sets the URL to which the client is redirected to locate
            a requested resource.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the absolute URL for
              the redirect location.
              </para>
              <para>
              It is used for the value of the Location header.
              </para>
              <para>
              <see langword="null"/> if no redirect location is specified.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.SendChunked">
            <summary>
            Gets or sets a value indicating whether the response uses the chunked
            transfer encoding.
            </summary>
            <value>
              <para>
              <c>true</c> if the response uses the chunked transfer encoding;
              otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.StatusCode">
            <summary>
            Gets or sets the HTTP status code returned to the client.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Int32"/> that represents the HTTP status code for
              the response to the request.
              </para>
              <para>
              The default value is 200. It indicates that the request has
              succeeded.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
            <exception cref="T:System.Net.ProtocolViolationException">
              <para>
              The value specified for a set operation is invalid.
              </para>
              <para>
              Valid values are between 100 and 999 inclusive.
              </para>
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.HttpListenerResponse.StatusDescription">
            <summary>
            Gets or sets the description of the HTTP status code returned to
            the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the description of
              the HTTP status code for the response to the request.
              </para>
              <para>
              The default value is
              the <see href="http://tools.ietf.org/html/rfc2616#section-10">
              RFC 2616</see> description for the <see cref="P:Internal.WebSocketSharp.Net.HttpListenerResponse.StatusCode"/>
              property value.
              </para>
              <para>
              An empty string if an RFC 2616 description does not exist.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation contains an invalid character.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.Abort">
            <summary>
            Closes the connection to the client without sending a response.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.AppendCookie(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Appends an HTTP cookie to the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> to append.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.AppendHeader(System.String,System.String)">
            <summary>
            Appends an HTTP header with the specified name and value to
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to
            append.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to
            append.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.Close">
            <summary>
            Sends the response to the client and releases the resources used by
            this instance.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.Close(System.Byte[],System.Boolean)">
            <summary>
            Sends the response with the specified entity body data to the client
            and releases the resources used by this instance.
            </summary>
            <param name="responseEntity">
            An array of <see cref="T:System.Byte"/> that contains the entity body data.
            </param>
            <param name="willBlock">
            A <see cref="T:System.Boolean"/>: <c>true</c> if this method blocks execution while
            flushing the stream to the client; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="responseEntity"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.CopyFrom(Internal.WebSocketSharp.Net.HttpListenerResponse)">
            <summary>
            Copies some properties from the specified response instance to
            this instance.
            </summary>
            <param name="templateResponse">
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerResponse"/> to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="templateResponse"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.Redirect(System.String)">
            <summary>
            Configures the response to redirect the client's request to
            the specified URL.
            </summary>
            <remarks>
            This method sets the <see cref="P:Internal.WebSocketSharp.Net.HttpListenerResponse.RedirectLocation"/> property to
            <paramref name="url"/>, the <see cref="P:Internal.WebSocketSharp.Net.HttpListenerResponse.StatusCode"/> property to
            302, and the <see cref="P:Internal.WebSocketSharp.Net.HttpListenerResponse.StatusDescription"/> property to "Found".
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the absolute URL to which
            the client is redirected to locate a requested resource.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is not an absolute URL.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The response is already being sent.
            </exception>
            <exception cref="T:System.ObjectDisposedException">
            This instance is closed.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.SetCookie(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Adds or updates an HTTP cookie in the cookies sent with the response.
            </summary>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> to set.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="cookie"/> already exists in the cookies but
            it cannot be updated.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.SetHeader(System.String,System.String)">
            <summary>
            Adds or updates an HTTP header with the specified name and value in
            the headers for the response.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current headers do not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpListenerResponse.System#IDisposable#Dispose">
            <summary>
            Releases all resources used by this instance.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpRequestHeader">
            <summary>
            Indicates the HTTP header that may be specified in a client request.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Accept">
            <summary>
            Indicates the Accept header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.AcceptCharset">
            <summary>
            Indicates the Accept-Charset header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.AcceptEncoding">
            <summary>
            Indicates the Accept-Encoding header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.AcceptLanguage">
            <summary>
            Indicates the Accept-Language header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Authorization">
            <summary>
            Indicates the Authorization header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Cookie">
            <summary>
            Indicates the Cookie header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Expect">
            <summary>
            Indicates the Expect header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.From">
            <summary>
            Indicates the From header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Host">
            <summary>
            Indicates the Host header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.IfMatch">
            <summary>
            Indicates the If-Match header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.IfModifiedSince">
            <summary>
            Indicates the If-Modified-Since header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.IfNoneMatch">
            <summary>
            Indicates the If-None-Match header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.IfRange">
            <summary>
            Indicates the If-Range header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.IfUnmodifiedSince">
            <summary>
            Indicates the If-Unmodified-Since header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.MaxForwards">
            <summary>
            Indicates the Max-Forwards header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.ProxyAuthorization">
            <summary>
            Indicates the Proxy-Authorization header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Referer">
            <summary>
            Indicates the Referer header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Range">
            <summary>
            Indicates the Range header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Te">
            <summary>
            Indicates the TE header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.Translate">
            <summary>
            Indicates the Translate header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.UserAgent">
            <summary>
            Indicates the User-Agent header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketKey">
            <summary>
            Indicates the Sec-WebSocket-Key header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpRequestHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpResponseHeader">
            <summary>
            Indicates the HTTP header that can be specified in a server response.
            </summary>
            <remarks>
            The headers of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-14">RFC 2616</see> or
            <see href="http://tools.ietf.org/html/rfc6455#section-11.3">RFC 6455</see>.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.CacheControl">
            <summary>
            Indicates the Cache-Control header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Connection">
            <summary>
            Indicates the Connection header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Date">
            <summary>
            Indicates the Date header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.KeepAlive">
            <summary>
            Indicates the Keep-Alive header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Pragma">
            <summary>
            Indicates the Pragma header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Trailer">
            <summary>
            Indicates the Trailer header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.TransferEncoding">
            <summary>
            Indicates the Transfer-Encoding header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Upgrade">
            <summary>
            Indicates the Upgrade header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Via">
            <summary>
            Indicates the Via header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Warning">
            <summary>
            Indicates the Warning header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Allow">
            <summary>
            Indicates the Allow header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentLength">
            <summary>
            Indicates the Content-Length header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentType">
            <summary>
            Indicates the Content-Type header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentEncoding">
            <summary>
            Indicates the Content-Encoding header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentLanguage">
            <summary>
            Indicates the Content-Language header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentLocation">
            <summary>
            Indicates the Content-Location header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentMd5">
            <summary>
            Indicates the Content-MD5 header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ContentRange">
            <summary>
            Indicates the Content-Range header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Expires">
            <summary>
            Indicates the Expires header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.LastModified">
            <summary>
            Indicates the Last-Modified header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.AcceptRanges">
            <summary>
            Indicates the Accept-Ranges header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Age">
            <summary>
            Indicates the Age header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ETag">
            <summary>
            Indicates the ETag header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Location">
            <summary>
            Indicates the Location header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.ProxyAuthenticate">
            <summary>
            Indicates the Proxy-Authenticate header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.RetryAfter">
            <summary>
            Indicates the Retry-After header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Server">
            <summary>
            Indicates the Server header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.SetCookie">
            <summary>
            Indicates the Set-Cookie header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.Vary">
            <summary>
            Indicates the Vary header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.WwwAuthenticate">
            <summary>
            Indicates the WWW-Authenticate header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketExtensions">
            <summary>
            Indicates the Sec-WebSocket-Extensions header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketAccept">
            <summary>
            Indicates the Sec-WebSocket-Accept header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketProtocol">
            <summary>
            Indicates the Sec-WebSocket-Protocol header.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpResponseHeader.SecWebSocketVersion">
            <summary>
            Indicates the Sec-WebSocket-Version header.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpStatusCode">
            <summary>
            Indicates the HTTP status code that can be specified in a server response.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc2616#section-10">RFC 2616</see>.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Continue">
            <summary>
            Equivalent to status code 100. Indicates that the client should continue
            with its request.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.SwitchingProtocols">
            <summary>
            Equivalent to status code 101. Indicates that the server is switching
            the HTTP version or protocol on the connection.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.OK">
            <summary>
            Equivalent to status code 200. Indicates that the client's request has
            succeeded.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Created">
            <summary>
            Equivalent to status code 201. Indicates that the client's request has
            been fulfilled and resulted in a new resource being created.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Accepted">
            <summary>
            Equivalent to status code 202. Indicates that the client's request has
            been accepted for processing, but the processing has not been completed.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NonAuthoritativeInformation">
            <summary>
            Equivalent to status code 203. Indicates that the returned metainformation
            is from a local or a third-party copy instead of the origin server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NoContent">
            <summary>
            Equivalent to status code 204. Indicates that the server has fulfilled
            the client's request but does not need to return an entity-body.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.ResetContent">
            <summary>
            Equivalent to status code 205. Indicates that the server has fulfilled
            the client's request, and the user agent should reset the document view
            which caused the request to be sent.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.PartialContent">
            <summary>
            Equivalent to status code 206. Indicates that the server has fulfilled
            the partial GET request for the resource.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.MultipleChoices">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              MultipleChoices is a synonym for Ambiguous.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Ambiguous">
            <summary>
              <para>
              Equivalent to status code 300. Indicates that the requested resource
              corresponds to any of multiple representations.
              </para>
              <para>
              Ambiguous is a synonym for MultipleChoices.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.MovedPermanently">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              MovedPermanently is a synonym for Moved.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Moved">
            <summary>
              <para>
              Equivalent to status code 301. Indicates that the requested resource
              has been assigned a new permanent URI and any future references to
              this resource should use one of the returned URIs.
              </para>
              <para>
              Moved is a synonym for MovedPermanently.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Found">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Found is a synonym for Redirect.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Redirect">
            <summary>
              <para>
              Equivalent to status code 302. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              Redirect is a synonym for Found.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.SeeOther">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              SeeOther is a synonym for RedirectMethod.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RedirectMethod">
            <summary>
              <para>
              Equivalent to status code 303. Indicates that the response to
              the request can be found under a different URI and should be
              retrieved using a GET method on that resource.
              </para>
              <para>
              RedirectMethod is a synonym for SeeOther.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NotModified">
            <summary>
            Equivalent to status code 304. Indicates that the client has performed
            a conditional GET request and access is allowed, but the document has
            not been modified.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.UseProxy">
            <summary>
            Equivalent to status code 305. Indicates that the requested resource
            must be accessed through the proxy given by the Location field.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Unused">
            <summary>
            Equivalent to status code 306. This status code was used in a previous
            version of the specification, is no longer used, and is reserved for
            future use.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.TemporaryRedirect">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              TemporaryRedirect is a synonym for RedirectKeepVerb.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RedirectKeepVerb">
            <summary>
              <para>
              Equivalent to status code 307. Indicates that the requested resource
              is located temporarily under a different URI.
              </para>
              <para>
              RedirectKeepVerb is a synonym for TemporaryRedirect.
              </para>
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.BadRequest">
            <summary>
            Equivalent to status code 400. Indicates that the client's request could
            not be understood by the server due to malformed syntax.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Unauthorized">
            <summary>
            Equivalent to status code 401. Indicates that the client's request
            requires user authentication.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.PaymentRequired">
            <summary>
            Equivalent to status code 402. This status code is reserved for future
            use.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Forbidden">
            <summary>
            Equivalent to status code 403. Indicates that the server understood
            the client's request but is refusing to fulfill it.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NotFound">
            <summary>
            Equivalent to status code 404. Indicates that the server has not found
            anything matching the request URI.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.MethodNotAllowed">
            <summary>
            Equivalent to status code 405. Indicates that the method specified
            in the request line is not allowed for the resource identified by
            the request URI.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NotAcceptable">
            <summary>
            Equivalent to status code 406. Indicates that the server does not
            have the appropriate resource to respond to the Accept headers in
            the client's request.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.ProxyAuthenticationRequired">
            <summary>
            Equivalent to status code 407. Indicates that the client must first
            authenticate itself with the proxy.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RequestTimeout">
            <summary>
            Equivalent to status code 408. Indicates that the client did not produce
            a request within the time that the server was prepared to wait.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Conflict">
            <summary>
            Equivalent to status code 409. Indicates that the client's request could
            not be completed due to a conflict on the server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.Gone">
            <summary>
            Equivalent to status code 410. Indicates that the requested resource is
            no longer available at the server and no forwarding address is known.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.LengthRequired">
            <summary>
            Equivalent to status code 411. Indicates that the server refuses to
            accept the client's request without a defined Content-Length.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.PreconditionFailed">
            <summary>
            Equivalent to status code 412. Indicates that the precondition given in
            one or more of the request headers evaluated to false when it was tested
            on the server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RequestEntityTooLarge">
            <summary>
            Equivalent to status code 413. Indicates that the entity of the client's
            request is larger than the server is willing or able to process.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RequestUriTooLong">
            <summary>
            Equivalent to status code 414. Indicates that the request URI is longer
            than the server is willing to interpret.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.UnsupportedMediaType">
            <summary>
            Equivalent to status code 415. Indicates that the entity of the client's
            request is in a format not supported by the requested resource for the
            requested method.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.RequestedRangeNotSatisfiable">
            <summary>
            Equivalent to status code 416. Indicates that none of the range
            specifier values in a Range request header overlap the current
            extent of the selected resource.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.ExpectationFailed">
            <summary>
            Equivalent to status code 417. Indicates that the expectation given in
            an Expect request header could not be met by the server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.InternalServerError">
            <summary>
            Equivalent to status code 500. Indicates that the server encountered
            an unexpected condition which prevented it from fulfilling the client's
            request.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.NotImplemented">
            <summary>
            Equivalent to status code 501. Indicates that the server does not
            support the functionality required to fulfill the client's request.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.BadGateway">
            <summary>
            Equivalent to status code 502. Indicates that a gateway or proxy server
            received an invalid response from the upstream server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.ServiceUnavailable">
            <summary>
            Equivalent to status code 503. Indicates that the server is currently
            unable to handle the client's request due to a temporary overloading
            or maintenance of the server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.GatewayTimeout">
            <summary>
            Equivalent to status code 504. Indicates that a gateway or proxy server
            did not receive a timely response from the upstream server or some other
            auxiliary server.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpStatusCode.HttpVersionNotSupported">
            <summary>
            Equivalent to status code 505. Indicates that the server does not
            support the HTTP version used in the client's request.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpUtility.htmlEncode(System.String,System.Boolean)">
            <summary>
            Converts the specified string to an HTML-encoded string.
            </summary>
            <remarks>
              <para>
              This method starts encoding with a NCR from the character code 160
              but does not stop at the character code 255.
              </para>
              <para>
              One reason is the unicode characters &#65308; and &#65310; that
              look like &lt; and &gt;.
              </para>
            </remarks>
            <returns>
            A <see cref="T:System.String"/> that represents an encoded string.
            </returns>
            <param name="s">
            A <see cref="T:System.String"/> to encode.
            </param>
            <param name="minimal">
            A <see cref="T:System.Boolean"/>: <c>true</c> if encodes without a NCR;
            otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpUtility.initEntities">
            <summary>
            Initializes the _entities field.
            </summary>
            <remarks>
            This method builds a dictionary of HTML character entity references.
            This dictionary comes from the HTML 4.01 W3C recommendation.
            </remarks>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.HttpVersion">
            <summary>
            Provides the HTTP version numbers.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpVersion.Version10">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.0.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Net.HttpVersion.Version11">
            <summary>
            Provides a <see cref="T:System.Version"/> instance for the HTTP/1.1.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.HttpVersion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.HttpVersion"/> class.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.NetworkCredential">
            <summary>
            Provides the credentials for the password-based authentication.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username and password.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.NetworkCredential.#ctor(System.String,System.String,System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.NetworkCredential"/> class
            with the specified username, password, domain and roles.
            </summary>
            <param name="username">
            A <see cref="T:System.String"/> that specifies the username associated with
            the credentials.
            </param>
            <param name="password">
            A <see cref="T:System.String"/> that specifies the password for the username
            associated with the credentials.
            </param>
            <param name="domain">
            A <see cref="T:System.String"/> that specifies the domain associated with
            the credentials.
            </param>
            <param name="roles">
            An array of <see cref="T:System.String"/> that specifies the roles associated
            with the credentials if any.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="username"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="username"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.NetworkCredential.Domain">
            <summary>
            Gets the domain associated with the credentials.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the domain name
              to which the username belongs.
              </para>
              <para>
              An empty string if the value was initialized with
              <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.NetworkCredential.Password">
            <summary>
            Gets the password for the username associated with the credentials.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the password.
              </para>
              <para>
              An empty string if the value was initialized with
              <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.NetworkCredential.Roles">
            <summary>
            Gets the roles associated with the credentials.
            </summary>
            <value>
              <para>
              An array of <see cref="T:System.String"/> that represents the role names
              to which the username belongs.
              </para>
              <para>
              An empty array if the value was initialized with
              <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.NetworkCredential.Username">
            <summary>
            Gets the username associated with the credentials.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the username.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.ServerSslConfiguration">
            <summary>
            Stores the parameters for <see cref="T:System.Net.Security.SslStream"/> instances used by
            a server.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.ServerSslConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/>
            class.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.ServerSslConfiguration.#ctor(Internal.WebSocketSharp.Net.ServerSslConfiguration)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/>
            class copying from the specified configuration.
            </summary>
            <param name="configuration">
            A <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/> from which to copy.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="configuration"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ServerSslConfiguration.CheckCertificateRevocation">
            <summary>
            Gets or sets a value indicating whether the certificate revocation
            list is checked during authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if the certificate revocation list is checked during
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateRequired">
            <summary>
            Gets or sets a value indicating whether each client is asked for
            a certificate for authentication.
            </summary>
            <value>
              <para>
              <c>true</c> if each client is asked for a certificate for
              authentication; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ServerSslConfiguration.ClientCertificateValidationCallback">
            <summary>
            Gets or sets the callback used to validate the certificate supplied by
            each client.
            </summary>
            <remarks>
            The certificate is valid if the callback returns <c>true</c>.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Net.Security.RemoteCertificateValidationCallback"/> delegate.
              </para>
              <para>
              It represents the delegate called when the server validates
              the certificate.
              </para>
              <para>
              The default value invokes a method that only returns <c>true</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ServerSslConfiguration.EnabledSslProtocols">
            <summary>
            Gets or sets the enabled versions of the SSL/TLS protocols.
            </summary>
            <value>
              <para>
              Any of the <see cref="T:System.Security.Authentication.SslProtocols"/> enum values.
              </para>
              <para>
              It represents the enabled versions of the SSL/TLS protocols.
              </para>
              <para>
              The default value is <see cref="F:System.Security.Authentication.SslProtocols.None"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.ServerSslConfiguration.ServerCertificate">
            <summary>
            Gets or sets the certificate used to authenticate the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2"/> that represents an X.509 certificate.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.WebHeaderCollection">
            <summary>
            Provides a collection of the HTTP headers associated with a request or
            response.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.WebHeaderCollection"/>
            class with the specified serialized data.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that contains the serialized
            object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the source for
            the deserialization.
            </param>
            <exception cref="T:System.ArgumentException">
            An element with the specified name is not found in
            <paramref name="serializationInfo"/>.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.WebHeaderCollection"/>
            class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebHeaderCollection.AllKeys">
            <summary>
            Gets all header names in the collection.
            </summary>
            <value>
            An array of <see cref="T:System.String"/> that contains all header names in
            the collection.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebHeaderCollection.Count">
            <summary>
            Gets the number of headers in the collection.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of headers in
            the collection.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebHeaderCollection.Item(Internal.WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Gets or sets the specified request header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the request header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebHeaderCollection.Item(Internal.WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Gets or sets the specified response header.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the response header.
            </value>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to get or set.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebHeaderCollection.Keys">
            <summary>
            Gets a collection of header names in the collection.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection"/> that contains
            all header names in the collection.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.AddWithoutValidate(System.String,System.String)">
            <summary>
            Adds a header to the collection without checking if the header is on
            the restricted header list.
            </summary>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="headerValue">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerValue"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="headerValue"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Add(System.String)">
            <summary>
            Adds the specified header to the collection.
            </summary>
            <param name="header">
            A <see cref="T:System.String"/> that specifies the header to add,
            with the name and value separated by a colon character (':').
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> does not contain a colon character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              The name part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value part of <paramref name="header"/> contains an invalid
              character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="header"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of the value part of <paramref name="header"/> is greater
            than 65,535 characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Add(Internal.WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Adds the specified request header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Add(Internal.WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Adds the specified response header with the specified value to
            the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to add.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Add(System.String,System.String)">
            <summary>
            Adds a header with the specified name and value to the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to add.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to add.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Clear">
            <summary>
            Removes all headers from the collection.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Get(System.Int32)">
            <summary>
            Get the value of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the value of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to get.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Get(System.String)">
            <summary>
            Get the value of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              A <see cref="T:System.String"/> that receives the value of the header.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to get.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.GetEnumerator">
            <summary>
            Gets the enumerator used to iterate through the collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> instance used to iterate through
            the collection.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.GetKey(System.Int32)">
            <summary>
            Get the name of the header at the specified index in the collection.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that receives the name of the header.
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to get.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.GetValues(System.Int32)">
            <summary>
            Get the values of the header at the specified index in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="index">
            An <see cref="T:System.Int32"/> that specifies the zero-based index of the header
            to get.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="index"/> is out of allowable range of indexes for
            the collection.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.GetValues(System.String)">
            <summary>
            Get the values of the header with the specified name in the collection.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.String"/> that receives the values of
              the header.
              </para>
              <para>
              <see langword="null"/> if not present.
              </para>
            </returns>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to get.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String)">
            <summary>
            Determines whether the specified header can be set for the request.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.IsRestricted(System.String,System.Boolean)">
            <summary>
            Determines whether the specified header can be set for the request or
            the response.
            </summary>
            <returns>
            <c>true</c> if the header cannot be set; otherwise, <c>false</c>.
            </returns>
            <param name="headerName">
            A <see cref="T:System.String"/> that specifies the name of the header to test.
            </param>
            <param name="response">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the test is for the response;
            otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="headerName"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="headerName"/> contains an invalid character.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="headerName"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.OnDeserialization(System.Object)">
            <summary>
            Implements the <see cref="T:System.Runtime.Serialization.ISerializable"/> interface and raises
            the deserialization event when the deserialization is complete.
            </summary>
            <param name="sender">
            An <see cref="T:System.Object"/> instance that represents the source of
            the deserialization event.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Remove(Internal.WebSocketSharp.Net.HttpRequestHeader)">
            <summary>
            Removes the specified request header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Remove(Internal.WebSocketSharp.Net.HttpResponseHeader)">
            <summary>
            Removes the specified response header from the collection.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to remove.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="header"/> is a restricted header.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Remove(System.String)">
            <summary>
            Removes the specified header from the collection.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to remove.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Set(Internal.WebSocketSharp.Net.HttpRequestHeader,System.String)">
            <summary>
            Sets the specified request header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpRequestHeader"/> enum values.
              </para>
              <para>
              It specifies the request header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the request header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the request header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Set(Internal.WebSocketSharp.Net.HttpResponseHeader,System.String)">
            <summary>
            Sets the specified response header to the specified value.
            </summary>
            <param name="header">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.HttpResponseHeader"/> enum values.
              </para>
              <para>
              It specifies the response header to set.
              </para>
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the response header
            to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="header"/> is a restricted header.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the response header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.Set(System.String,System.String)">
            <summary>
            Sets the specified header to the specified value.
            </summary>
            <param name="name">
            A <see cref="T:System.String"/> that specifies the name of the header to set.
            </param>
            <param name="value">
            A <see cref="T:System.String"/> that specifies the value of the header to set.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="name"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a string of spaces.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="value"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="name"/> is a restricted header name.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="name"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The length of <paramref name="value"/> is greater than 65,535
            characters.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            This instance does not allow the header.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.ToByteArray">
            <summary>
            Converts the current instance to an array of byte.
            </summary>
            <returns>
            An array of <see cref="T:System.Byte"/> converted from a string that represents
            the current instance.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents all headers in the collection.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebHeaderCollection.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates the specified <see cref="T:System.Runtime.Serialization.SerializationInfo"/> instance with
            the data needed to serialize the current instance.
            </summary>
            <param name="serializationInfo">
            A <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data.
            </param>
            <param name="streamingContext">
            A <see cref="T:System.Runtime.Serialization.StreamingContext"/> that specifies the destination for
            the serialization.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="serializationInfo"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> instance.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebSockets.HttpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext">
            <summary>
            Provides the access to the information in a WebSocket handshake request
            to a <see cref="T:System.Net.Sockets.TcpListener"/> instance.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains
              the cookies.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the server host name requested
              by the client.
              </para>
              <para>
              It includes the port number if provided.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin header.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
              </para>
              <para>
              <see langword="null"/> if the URI cannot be parsed.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the WebSocket protocol
              version specified by the client.
              </para>
              <para>
              <see langword="null"/> if not included.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebSockets.TcpListenerWebSocketContext.ToString">
            <summary>
            Returns a string that represents the current instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that contains the request line and headers
            included in the handshake request.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext">
            <summary>
            Exposes the access to the information in a WebSocket handshake request.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext"/> class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.CookieCollection">
            <summary>
            Gets the HTTP cookies included in the handshake request.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> that contains
            the cookies.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.Headers">
            <summary>
            Gets the HTTP headers included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.Host">
            <summary>
            Gets the value of the Host header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the server host name requested
            by the client.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.IsAuthenticated">
            <summary>
            Gets a value indicating whether the client is authenticated.
            </summary>
            <value>
            <c>true</c> if the client is authenticated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.IsLocal">
            <summary>
            Gets a value indicating whether the handshake request is sent from
            the local computer.
            </summary>
            <value>
            <c>true</c> if the handshake request is sent from the same computer
            as the server; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.IsSecureConnection">
            <summary>
            Gets a value indicating whether a secure connection is used to send
            the handshake request.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.IsWebSocketRequest">
            <summary>
            Gets a value indicating whether the request is a WebSocket handshake
            request.
            </summary>
            <value>
            <c>true</c> if the request is a WebSocket handshake request; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.Origin">
            <summary>
            Gets the value of the Origin header included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the value of the Origin header.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.QueryString">
            <summary>
            Gets the query string included in the handshake request.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query parameters.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.RequestUri">
            <summary>
            Gets the URI requested by the client.
            </summary>
            <value>
            A <see cref="T:System.Uri"/> that represents the URI parsed from the request.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketKey">
            <summary>
            Gets the value of the Sec-WebSocket-Key header included in
            the handshake request.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of
              the Sec-WebSocket-Key header.
              </para>
              <para>
              The value is used to prove that the server received
              a valid WebSocket handshake request.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketProtocols">
            <summary>
            Gets the names of the subprotocols from the Sec-WebSocket-Protocol
            header included in the handshake request.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the names of the subprotocols.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.SecWebSocketVersion">
            <summary>
            Gets the value of the Sec-WebSocket-Version header included in
            the handshake request.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the WebSocket protocol
            version specified by the client.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.ServerEndPoint">
            <summary>
            Gets the endpoint to which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the server
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.User">
            <summary>
            Gets the client information.
            </summary>
            <value>
            A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
            authentication, and security roles for the client.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.UserEndPoint">
            <summary>
            Gets the endpoint from which the handshake request is sent.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Net.WebSockets.WebSocketContext.WebSocket">
            <summary>
            Gets the WebSocket interface used for two-way communication between
            the client and server.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Opcode">
            <summary>
            Indicates the WebSocket frame type.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">
            Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Cont">
            <summary>
            Equivalent to numeric value 0. Indicates continuation frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Text">
            <summary>
            Equivalent to numeric value 1. Indicates text frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Binary">
            <summary>
            Equivalent to numeric value 2. Indicates binary frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Close">
            <summary>
            Equivalent to numeric value 8. Indicates connection close frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Ping">
            <summary>
            Equivalent to numeric value 9. Indicates ping frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Opcode.Pong">
            <summary>
            Equivalent to numeric value 10. Indicates pong frame.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.PayloadData.Empty">
            <summary>
            Represents the empty payload data.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.PayloadData.MaxLength">
            <summary>
            Represents the allowable max length of payload data.
            </summary>
            <remarks>
              <para>
              A <see cref="T:Internal.WebSocketSharp.WebSocketException"/> is thrown when the length of
              incoming payload data is greater than the value of this field.
              </para>
              <para>
              If you would like to change the value of this field, it must be
              a number between <see cref="F:Internal.WebSocketSharp.WebSocket.FragmentLength"/> and
              <see cref="F:System.Int64.MaxValue"/> inclusive.
              </para>
            </remarks>
        </member>
        <member name="T:Internal.WebSocketSharp.Rsv">
            <summary>
            Indicates whether each RSV (RSV1, RSV2, and RSV3) of a WebSocket frame is non-zero.
            </summary>
            <remarks>
            The values of this enumeration are defined in
            <see href="http://tools.ietf.org/html/rfc6455#section-5.2">Section 5.2</see> of RFC 6455.
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.Rsv.Off">
            <summary>
            Equivalent to numeric value 0. Indicates zero.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.Rsv.On">
            <summary>
            Equivalent to numeric value 1. Indicates non-zero.
            </summary>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.HttpRequestEventArgs">
            <summary>
            Represents the event data for the HTTP request events of the
            <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
              <para>
              An HTTP request event occurs when the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/>
              instance receives an HTTP request.
              </para>
              <para>
              You should access the <see cref="P:Internal.WebSocketSharp.Server.HttpRequestEventArgs.Request"/> property if you would
              like to get the request data sent from a client.
              </para>
              <para>
              And you should access the <see cref="P:Internal.WebSocketSharp.Server.HttpRequestEventArgs.Response"/> property if you
              would like to get the response data to return to the client.
              </para>
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpRequestEventArgs.Request">
            <summary>
            Gets the request data sent from a client.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerRequest"/> that provides the methods and
            properties for the request data.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpRequestEventArgs.Response">
            <summary>
            Gets the response data to return to the client.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.HttpListenerResponse"/> that provides the methods and
            properties for the response data.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpRequestEventArgs.User">
            <summary>
            Gets the information for the client.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication scheme, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpRequestEventArgs.ReadFile(System.String)">
            <summary>
            Reads the specified file from the document folder of the
            <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
              <para>
              An array of <see cref="T:System.Byte"/> that receives the contents of
              the file.
              </para>
              <para>
              <see langword="null"/> if the read has failed.
              </para>
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpRequestEventArgs.TryReadFile(System.String,System.Byte[]@)">
            <summary>
            Tries to read the specified file from the document folder of
            the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="path">
            A <see cref="T:System.String"/> that specifies a virtual path to find
            the file from the document folder.
            </param>
            <param name="contents">
              <para>
              When this method returns, an array of <see cref="T:System.Byte"/> that
              receives the contents of the file.
              </para>
              <para>
              <see langword="null"/> if the read has failed.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> contains "..".
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.HttpServer">
            <summary>
            Provides a simple HTTP server.
            </summary>
            <remarks>
              <para>
              The server supports HTTP/1.1 version request and response.
              </para>
              <para>
              Also the server allows to accept WebSocket handshake requests.
              </para>
              <para>
              This class can provide multiple WebSocket services.
              </para>
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class with
            the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class with
            the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on the IP address and
              port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is https; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is https.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the HTTP URL of the server.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class with
            the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class with
            the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming requests.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.DocumentRootPath">
            <summary>
            Gets or sets the path to the document folder of the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a path to the folder
              from which to find the requested file.
              </para>
              <para>
              / or \ is trimmed from the end of the value if present.
              </para>
              <para>
              The default value is "./Public".
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an absolute root.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation is an invalid path string.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            The value specified for a set operation is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Internal.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming requests.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.HttpServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnConnect">
            <summary>
            Occurs when the server receives an HTTP CONNECT request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnDelete">
            <summary>
            Occurs when the server receives an HTTP DELETE request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnGet">
            <summary>
            Occurs when the server receives an HTTP GET request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnHead">
            <summary>
            Occurs when the server receives an HTTP HEAD request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnOptions">
            <summary>
            Occurs when the server receives an HTTP OPTIONS request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnPost">
            <summary>
            Occurs when the server receives an HTTP POST request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnPut">
            <summary>
            Occurs when the server receives an HTTP PUT request.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.Server.HttpServer.OnTrace">
            <summary>
            Occurs when the server receives an HTTP TRACE request.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.Start">
            <summary>
            Starts receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:Internal.WebSocketSharp.Net.HttpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.HttpServer.Stop">
            <summary>
            Stops receiving incoming requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.IWebSocketSession">
            <summary>
            Exposes the access to the information in a WebSocket session.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.IWebSocketSession.ID">
            <summary>
            Gets the unique ID of the session.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the unique ID of the session.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.IWebSocketSession.StartTime">
            <summary>
            Gets the time that the session has started.
            </summary>
            <value>
            A <see cref="T:System.DateTime"/> that represents the time that the session
            has started.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.IWebSocketSession.WebSocket">
            <summary>
            Gets the WebSocket interface for the session.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.WebSocket"/> that represents the interface.
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.WebSocketBehavior">
            <summary>
            Exposes a set of methods and properties used to define the behavior of
            a WebSocket service provided by the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.Headers">
            <summary>
            Gets the HTTP headers for a session.
            </summary>
            <value>
            A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the headers
            included in the WebSocket handshake request.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible for
            a session.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.QueryString">
            <summary>
            Gets the query string for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Collections.Specialized.NameValueCollection"/> that contains the query
              parameters included in the WebSocket handshake request.
              </para>
              <para>
              An empty collection if not included.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.ReadyState">
            <summary>
            Gets the current state of the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.User">
            <summary>
            Gets the client information for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Security.Principal.IPrincipal"/> instance that represents identity,
              authentication, and security roles for the client.
              </para>
              <para>
              <see langword="null"/> if the client is not authenticated.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.UserEndPoint">
            <summary>
            Gets the client endpoint for a session.
            </summary>
            <value>
            A <see cref="T:System.Net.IPEndPoint"/> that represents the client
            IP address and port number.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.CookiesValidator">
            <summary>
            Gets or sets the delegate used to validate the HTTP cookies.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{CookieCollection, CookieCollection, bool}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              1st <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> parameter passed to the delegate
              contains the cookies to validate.
              </para>
              <para>
              2nd <see cref="T:Internal.WebSocketSharp.Net.CookieCollection"/> parameter passed to the delegate
              receives the cookies to send to the client.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the cookies are valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is emitted
            when the WebSocket interface for a session receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when receives
              a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.HostValidator">
            <summary>
            Gets or sets the delegate used to validate the Host header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the delegate is
              the value of the Host header.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.ID">
            <summary>
            Gets the unique ID of a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the unique ID of the session.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.IgnoreExtensions">
            <summary>
            Gets or sets a value indicating whether the WebSocket interface for
            a session ignores the Sec-WebSocket-Extensions header.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface ignores the extensions requested
              from the client; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.OriginValidator">
            <summary>
            Gets or sets the delegate used to validate the Origin header.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Func{string, bool}"/> delegate.
              </para>
              <para>
              It represents the delegate called when the WebSocket interface
              for a session validates the handshake request.
              </para>
              <para>
              The <see cref="T:System.String"/> parameter passed to the delegate is
              the value of the Origin header or <see langword="null"/> if
              the header is not present.
              </para>
              <para>
              The method invoked by the delegate must return <c>true</c>
              if the header value is valid.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.Protocol">
            <summary>
            Gets or sets the name of the WebSocket subprotocol for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the subprotocol.
              </para>
              <para>
              The value specified for a set operation must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
              <para>
              The default value is an empty string.
              </para>
            </value>
            <exception cref="T:System.ArgumentException">
            The value specified for a set operation is not a token.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the session has already started.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.StartTime">
            <summary>
            Gets the time that a session has started.
            </summary>
            <value>
              <para>
              A <see cref="T:System.DateTime"/> that represents the time that the session
              has started.
              </para>
              <para>
              <see cref="F:System.DateTime.MaxValue"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Close">
            <summary>
            Closes the WebSocket connection for a session.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Close(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Close(Internal.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session with the specified
            code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the WebSocket
            interface is Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.CloseAsync">
            <summary>
            Closes the WebSocket connection for a session asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.CloseAsync(Internal.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the WebSocket connection for a session asynchronously with
            the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the WebSocket
              interface is Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.OnClose(Internal.WebSocketSharp.CloseEventArgs)">
            <summary>
            Called when the WebSocket connection for a session has been closed.
            </summary>
            <param name="e">
            A <see cref="T:Internal.WebSocketSharp.CloseEventArgs"/> that represents the event data passed
            from a <see cref="E:Internal.WebSocketSharp.WebSocket.OnClose"/> event.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.OnError(Internal.WebSocketSharp.ErrorEventArgs)">
            <summary>
            Called when the WebSocket interface for a session gets an error.
            </summary>
            <param name="e">
            A <see cref="T:Internal.WebSocketSharp.ErrorEventArgs"/> that represents the event data passed
            from a <see cref="E:Internal.WebSocketSharp.WebSocket.OnError"/> event.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.OnMessage(Internal.WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when the WebSocket interface for a session receives a message.
            </summary>
            <param name="e">
            A <see cref="T:Internal.WebSocketSharp.MessageEventArgs"/> that represents the event data passed
            from a <see cref="E:Internal.WebSocketSharp.WebSocket.OnMessage"/> event.
            </param>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.OnOpen">
            <summary>
            Called when the WebSocket connection for a session has been established.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Ping">
            <summary>
            Sends a ping to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the client for a session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session has not started yet.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Send(System.Byte[])">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the client for a session.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Send(System.String)">
            <summary>
            Sends the specified data to the client for a session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client for a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketBehavior.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client for
            a session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session has not started yet.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketBehavior.Internal#WebSocketSharp#Server#IWebSocketSession#WebSocket">
            <summary>
            Gets the WebSocket interface for a session.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.WebSocket"/> that represents
              the WebSocket interface.
              </para>
              <para>
              <see langword="null"/> if the session has not started yet.
              </para>
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.WebSocketServer">
            <summary>
            Provides a WebSocket protocol server.
            </summary>
            <remarks>
            This class can provide multiple WebSocket services.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and port 80.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified URL.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              the IP address and port of <paramref name="url"/>.
              </para>
              <para>
              Either port 80 or 443 is used if <paramref name="url"/> includes
              no port. Port 443 is used if the scheme of <paramref name="url"/>
              is wss; otherwise, port 80 is used.
              </para>
              <para>
              The new instance provides secure connections if the scheme of
              <paramref name="url"/> is wss.
              </para>
            </remarks>
            <param name="url">
            A <see cref="T:System.String"/> that specifies the WebSocket URL of the server.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is invalid.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified port and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <see cref="F:System.Net.IPAddress.Any"/> and <paramref name="port"/>.
            </remarks>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address and port.
            </summary>
            <remarks>
              <para>
              The new instance listens for incoming handshake requests on
              <paramref name="address"/> and <paramref name="port"/>.
              </para>
              <para>
              It provides secure connections if <paramref name="port"/> is 443.
              </para>
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.#ctor(System.Net.IPAddress,System.Int32,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> class
            with the specified IP address, port, and boolean if secure or not.
            </summary>
            <remarks>
            The new instance listens for incoming handshake requests on
            <paramref name="address"/> and <paramref name="port"/>.
            </remarks>
            <param name="address">
            A <see cref="T:System.Net.IPAddress"/> that specifies the local IP
            address on which to listen.
            </param>
            <param name="port">
            An <see cref="T:System.Int32"/> that specifies the number of the port on which
            to listen.
            </param>
            <param name="secure">
            A <see cref="T:System.Boolean"/>: <c>true</c> if the new instance provides
            secure connections; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="address"/> is not a local IP address.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="address"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="port"/> is less than 1 or greater than 65535.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.Address">
            <summary>
            Gets the IP address of the server.
            </summary>
            <value>
            A <see cref="T:System.Net.IPAddress"/> that represents the local IP
            address on which to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.AuthenticationSchemes">
            <summary>
            Gets or sets the scheme used to authenticate the clients.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.Net.AuthenticationSchemes"/>
              enum values.
              </para>
              <para>
              It represents the scheme used to authenticate the clients.
              </para>
              <para>
              The default value is
              <see cref="F:Internal.WebSocketSharp.Net.AuthenticationSchemes.Anonymous"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.IsListening">
            <summary>
            Gets a value indicating whether the server has started.
            </summary>
            <value>
            <c>true</c> if the server has started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.IsSecure">
            <summary>
            Gets a value indicating whether the server provides secure connections.
            </summary>
            <value>
            <c>true</c> if the server provides secure connections; otherwise,
            <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.KeepClean">
            <summary>
            Gets or sets a value indicating whether the server cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the server cleans up the inactive sessions
              every 60 seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.Log">
            <summary>
            Gets the logging function for the server.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Internal.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.Port">
            <summary>
            Gets the port of the server.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the port on which
            to listen for incoming handshake requests.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.Realm">
            <summary>
            Gets or sets the name of the realm associated with the server.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the name of the realm.
              </para>
              <para>
              "SECRET AREA" is used as the name of the realm if the value is
              <see langword="null"/> or an empty string.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.ReuseAddress">
            <summary>
            Gets or sets a value indicating whether the server is allowed to
            be bound to an address that is already in use.
            </summary>
            <remarks>
              <para>
              You should set this property to <c>true</c> if you would like to
              resolve to wait for socket in TIME_WAIT state.
              </para>
              <para>
              The set operation works if the current state of the server is
              Ready or Stop.
              </para>
            </remarks>
            <value>
              <para>
              <c>true</c> if the server is allowed to be bound to an address
              that is already in use; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the server attempts to start,
            so it must be configured before the start method is called.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.ServerSslConfiguration"/> that represents the
            configuration used to provide secure connections.
            </value>
            <exception cref="T:System.InvalidOperationException">
            The server does not provide secure connections.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.UserCredentialsFinder">
            <summary>
            Gets or sets the delegate called to find the credentials for
            an identity used to authenticate a client.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.Func{IIdentity, NetworkCredential}"/>
              delegate.
              </para>
              <para>
              It represents the delegate called when the server finds
              the credentials used to authenticate a client.
              </para>
              <para>
              It must return <see langword="null"/> if the credentials
              are not found.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServer.WebSocketServices">
            <summary>
            Gets the management function for the WebSocket services provided by
            the server.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Server.WebSocketServiceManager"/> that manages the WebSocket
            services provided by the server.
            </value>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String)">
            <summary>
            Adds a WebSocket service with the specified behavior and path.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.AddWebSocketService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.RemoveWebSocketService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.Start">
            <summary>
            Starts receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Ready or Stop.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              There is no server certificate for secure connection.
              </para>
              <para>
              -or-
              </para>
              <para>
              The underlying <see cref="T:System.Net.Sockets.TcpListener"/> has failed to start.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServer.Stop">
            <summary>
            Stops receiving incoming handshake requests.
            </summary>
            <remarks>
            This method works if the current state of the server is Start.
            </remarks>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.WebSocketServiceHost">
            <summary>
            Exposes the methods and properties used to access the information in
            a WebSocket service provided by the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> or
            <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </summary>
            <remarks>
            This class is an abstract class.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceHost.#ctor(System.String,Internal.WebSocketSharp.Logger)">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.Server.WebSocketServiceHost"/>
            class with the specified path and logging function.
            </summary>
            <param name="path">
            A <see cref="T:System.String"/> that specifies the absolute path to
            the service.
            </param>
            <param name="log">
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that specifies the logging function for
            the service.
            </param>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.Log">
            <summary>
            Gets the logging function for the service.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.KeepClean">
            <summary>
            Gets or sets a value indicating whether the service cleans up
            the inactive sessions periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the service cleans up the inactive sessions every
            60 seconds; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.Path">
            <summary>
            Gets the path to the service.
            </summary>
            <value>
            A <see cref="T:System.String"/> that represents the absolute path to
            the service.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.Sessions">
            <summary>
            Gets the management function for the sessions in the service.
            </summary>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Server.WebSocketSessionManager"/> that manages the sessions in
            the service.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.BehaviorType">
            <summary>
            Gets the type of the behavior of the service.
            </summary>
            <value>
            A <see cref="T:System.Type"/> that represents the type of the behavior of
            the service.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceHost.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceHost.CreateSession">
            <summary>
            Creates a new session for the service.
            </summary>
            <returns>
            A <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> instance that represents
            the new session.
            </returns>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.WebSocketServiceManager">
            <summary>
            Provides the management function for the WebSocket services.
            </summary>
            <remarks>
            This class manages the WebSocket services provided by the
            <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.Count">
            <summary>
            Gets the number of the WebSocket services.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the services.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.Hosts">
            <summary>
            Gets the service host instances for the WebSocket services.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketServiceHost}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the service host instances.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.Item(System.String)">
            <summary>
            Gets the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Server.WebSocketServiceHost"/> instance that represents
              the service host instance.
              </para>
              <para>
              It provides the function to access the information in the service.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to get.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket services are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              <c>true</c> if the inactive sessions are cleaned up every 60
              seconds; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.Paths">
            <summary>
            Gets the paths for the WebSocket services.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the paths.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketServiceManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the server is
            Ready or Stop.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 1 second.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceManager.AddService``1(System.String,System.Action{``0})">
            <summary>
            Adds a WebSocket service with the specified behavior, path,
            and initializer.
            </summary>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to add.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="initializer">
              <para>
              An <see cref="T:System.Action{TBehavior}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the service initializes
              a new session instance.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <typeparam name="TBehavior">
              <para>
              The type of the behavior for the service.
              </para>
              <para>
              It must inherit the <see cref="T:Internal.WebSocketSharp.Server.WebSocketBehavior"/> class.
              </para>
              <para>
              Also it must have a public parameterless constructor.
              </para>
            </typeparam>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is already in use.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceManager.Clear">
            <summary>
            Removes all WebSocket services managed by the manager.
            </summary>
            <remarks>
            Each service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceManager.RemoveService(System.String)">
            <summary>
            Removes a WebSocket service with the specified path.
            </summary>
            <remarks>
            The service is stopped with close status 1001 (going away)
            if the current state of the service is Start.
            </remarks>
            <returns>
            <c>true</c> if the service is successfully found and removed;
            otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to remove.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketServiceManager.TryGetServiceHost(System.String,Internal.WebSocketSharp.Server.WebSocketServiceHost@)">
            <summary>
            Tries to get the service host instance for a WebSocket service with
            the specified path.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="path">
              <para>
              A <see cref="T:System.String"/> that specifies an absolute path to
              the service to get.
              </para>
              <para>
              / is trimmed from the end of the string if present.
              </para>
            </param>
            <param name="host">
              <para>
              When this method returns, a <see cref="T:Internal.WebSocketSharp.Server.WebSocketServiceHost"/>
              instance that receives the service host instance.
              </para>
              <para>
              It provides the function to access the information in the service.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="path"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> is not an absolute path.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="path"/> includes either or both
              query and fragment components.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="path"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.Server.WebSocketSessionManager">
            <summary>
            Provides the management function for the sessions in a WebSocket service.
            </summary>
            <remarks>
            This class manages the sessions in a WebSocket service provided by the
            <see cref="T:Internal.WebSocketSharp.Server.WebSocketServer"/> or <see cref="T:Internal.WebSocketSharp.Server.HttpServer"/> class.
            </remarks>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.ActiveIDs">
            <summary>
            Gets the IDs for the active sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the active sessions.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.Count">
            <summary>
            Gets the number of the sessions in the WebSocket service.
            </summary>
            <value>
            An <see cref="T:System.Int32"/> that represents the number of the sessions.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.IDs">
            <summary>
            Gets the IDs for the sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the sessions.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.InactiveIDs">
            <summary>
            Gets the IDs for the inactive sessions in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{string}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the IDs for the inactive sessions.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.Item(System.String)">
            <summary>
            Gets the session instance with the specified ID.
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Server.IWebSocketSession"/> instance that provides
              the function to access the information in the session.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </value>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to get.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.KeepClean">
            <summary>
            Gets or sets a value indicating whether the inactive sessions in
            the WebSocket service are cleaned up periodically.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            <c>true</c> if the inactive sessions are cleaned up every 60 seconds;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.Sessions">
            <summary>
            Gets the session instances in the WebSocket service.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{IWebSocketSession}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the session instances.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.Server.WebSocketSessionManager.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the WebSocket
            Ping or Close.
            </summary>
            <remarks>
            The set operation works if the current state of the service is
            Ready or Stop.
            </remarks>
            <value>
            A <see cref="T:System.TimeSpan"/> that represents the time to wait for
            the response.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.Byte[])">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.String)">
            <summary>
            Sends the specified data to every client in the WebSocket service.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.Broadcast(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.Byte[],System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.String,System.Action)">
            <summary>
            Sends the specified data to every client in the WebSocket service
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.BroadcastAsync(System.IO.Stream,System.Int32,System.Action)">
            <summary>
            Sends the data from the specified stream instance to every client in
            the WebSocket service asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The current state of the service is not Start.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String)">
            <summary>
            Closes the session with the specified ID.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,System.UInt16,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.CloseSession(System.String,Internal.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the session with the specified ID, code, and reason.
            </summary>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to close.
            </param>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String)">
            <summary>
            Sends a ping to the client using the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.PingTo(System.String,System.String)">
            <summary>
            Sends a ping with the specified message to the client using
            the specified session.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="message"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The session could not be found.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.Byte[],System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.String,System.String)">
            <summary>
            Sends the specified data to the client using the specified session.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendTo(System.IO.Stream,System.Int32,System.String)">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.Byte[],System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.String,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the client using the specified session
            asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="data"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.SendToAsync(System.IO.Stream,System.Int32,System.String,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the client using
            the specified session asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              It specifies the delegate called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the delegate is
              <c>true</c> if the send has successfully done; otherwise,
              <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="id"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
              <para>
              <paramref name="id"/> is <see langword="null"/>.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="stream"/> is <see langword="null"/>.
              </para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The session could not be found.
              </para>
              <para>
              -or-
              </para>
              <para>
              The current state of the WebSocket interface is not Open.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.Sweep">
            <summary>
            Cleans up the inactive sessions in the WebSocket service.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.Server.WebSocketSessionManager.TryGetSession(System.String,Internal.WebSocketSharp.Server.IWebSocketSession@)">
            <summary>
            Tries to get the session instance with the specified ID.
            </summary>
            <returns>
            <c>true</c> if the try has succeeded; otherwise, <c>false</c>.
            </returns>
            <param name="id">
            A <see cref="T:System.String"/> that specifies the ID of the session to get.
            </param>
            <param name="session">
              <para>
              When this method returns, a <see cref="T:Internal.WebSocketSharp.Server.IWebSocketSession"/> instance
              that receives the session instance.
              </para>
              <para>
              It provides the function to access the information in the session.
              </para>
              <para>
              <see langword="null"/> if not found.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="id"/> is an empty string.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="id"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="T:Internal.WebSocketSharp.WebSocket">
            <summary>
            Implements the WebSocket interface.
            </summary>
            <remarks>
              <para>
              This class provides a set of methods and properties for two-way
              communication using the WebSocket protocol.
              </para>
              <para>
              The WebSocket protocol is defined in
              <see href="http://tools.ietf.org/html/rfc6455">RFC 6455</see>.
              </para>
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocket.EmptyBytes">
            <summary>
            Represents the empty array of <see cref="T:System.Byte"/> used internally.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocket.FragmentLength">
            <summary>
            Represents the length used to determine whether the data should
            be fragmented in sending.
            </summary>
            <remarks>
              <para>
              The data will be fragmented if its length is greater than
              the value of this field.
              </para>
              <para>
              If you would like to change the value, you must set it to
              a value between 125 and <c>Int32.MaxValue - 14</c> inclusive.
              </para>
            </remarks>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocket.RandomNumber">
            <summary>
            Represents the random number generator used internally.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.#ctor(System.String,System.String[])">
            <summary>
            Initializes a new instance of the <see cref="T:Internal.WebSocketSharp.WebSocket"/> class with
            the specified URL and optionally subprotocols.
            </summary>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL to which to connect.
              </para>
              <para>
              The scheme of the URL must be ws or wss.
              </para>
              <para>
              The new instance uses a secure connection if the scheme is wss.
              </para>
            </param>
            <param name="protocols">
              <para>
              An array of <see cref="T:System.String"/> that specifies the names of
              the subprotocols if necessary.
              </para>
              <para>
              Each value of the array must be a token defined in
              <see href="http://tools.ietf.org/html/rfc2616#section-2.2">
              RFC 2616</see>.
              </para>
            </param>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="url"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is an empty string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> is an invalid WebSocket URL string.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value that is not a token.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="protocols"/> contains a value twice.
              </para>
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Compression">
            <summary>
            Gets or sets the compression method used to compress a message.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CompressionMethod"/> enum values.
              </para>
              <para>
              It indicates the compression method used to compress a message.
              </para>
              <para>
              The default value is <see cref="F:Internal.WebSocketSharp.CompressionMethod.None"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Cookies">
            <summary>
            Gets the HTTP cookies included in the handshake request/response.
            </summary>
            <value>
              <para>
              An <see cref="T:System.Collections.Generic.IEnumerable{WebSocketSharp.Net.Cookie}"/>
              instance.
              </para>
              <para>
              It provides an enumerator which supports the iteration over
              the collection of the cookies.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Credentials">
            <summary>
            Gets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <value>
              <para>
              A <see cref="T:Internal.WebSocketSharp.Net.NetworkCredential"/> that represents the credentials
              used to authenticate the client.
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.EmitOnPing">
            <summary>
            Gets or sets a value indicating whether the message event is
            emitted when the interface receives a ping.
            </summary>
            <value>
              <para>
              <c>true</c> if the interface emits the message event when
              receives a ping; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.EnableRedirection">
            <summary>
            Gets or sets a value indicating whether the URL redirection for
            the handshake request is allowed.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              <c>true</c> if the interface allows the URL redirection for
              the handshake request; otherwise, <c>false</c>.
              </para>
              <para>
              The default value is <c>false</c>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Extensions">
            <summary>
            Gets the extensions selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents a list of the extensions
              negotiated between the client and server.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.IsAlive">
            <summary>
            Gets a value indicating whether the communication is possible.
            </summary>
            <value>
            <c>true</c> if the communication is possible; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.IsSecure">
            <summary>
            Gets a value indicating whether the connection is secure.
            </summary>
            <value>
            <c>true</c> if the connection is secure; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Log">
            <summary>
            Gets the logging function.
            </summary>
            <remarks>
            The default logging level is <see cref="F:Internal.WebSocketSharp.LogLevel.Error"/>.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Logger"/> that provides the logging function.
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Origin">
            <summary>
            Gets or sets the value of the HTTP Origin header to send with
            the handshake request.
            </summary>
            <remarks>
              <para>
              The HTTP Origin header is defined in
              <see href="http://tools.ietf.org/html/rfc6454#section-7">
              Section 7 of RFC 6454</see>.
              </para>
              <para>
              The interface sends the Origin header if this property has any.
              </para>
              <para>
              The set operation works if the current state of the interface is
              New or Closed.
              </para>
            </remarks>
            <value>
              <para>
              A <see cref="T:System.String"/> that represents the value of the Origin
              header to send.
              </para>
              <para>
              The syntax is &lt;scheme&gt;://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              The default value is <see langword="null"/>.
              </para>
            </value>
            <exception cref="T:System.InvalidOperationException">
            The set operation is not available if the interface is not for
            the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The value specified for a set operation is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The value specified for a set operation includes the path segments.
              </para>
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Protocol">
            <summary>
            Gets the name of subprotocol selected by the server.
            </summary>
            <value>
              <para>
              A <see cref="T:System.String"/> that will be one of the names of
              subprotocols specified by client.
              </para>
              <para>
              An empty string if not specified or selected.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.ReadyState">
            <summary>
            Gets the current state of the interface.
            </summary>
            <value>
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.WebSocketState"/> enum values.
              </para>
              <para>
              It indicates the current state of the interface.
              </para>
              <para>
              The default value is <see cref="F:Internal.WebSocketSharp.WebSocketState.New"/>.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.SslConfiguration">
            <summary>
            Gets the configuration for secure connection.
            </summary>
            <remarks>
            The configuration is used when the interface attempts to connect,
            so it must be configured before any connect method is called.
            </remarks>
            <value>
            A <see cref="T:Internal.WebSocketSharp.Net.ClientSslConfiguration"/> that represents the
            configuration used to establish a secure connection.
            </value>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              The interface does not use a secure connection.
              </para>
            </exception>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.Url">
            <summary>
            Gets the URL to which to connect.
            </summary>
            <value>
              <para>
              A <see cref="T:System.Uri"/> that represents the URL to which to connect.
              </para>
              <para>
              Also it represents the URL requested by the client if the interface
              is for the server.
              </para>
            </value>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocket.WaitTime">
            <summary>
            Gets or sets the time to wait for the response to the ping or close.
            </summary>
            <remarks>
            The set operation works if the current state of the interface is
            New or Closed.
            </remarks>
            <value>
              <para>
              A <see cref="T:System.TimeSpan"/> that represents the time to wait for
              the response.
              </para>
              <para>
              The default value is the same as 5 seconds if the interface is
              for the client.
              </para>
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The value specified for a set operation is zero or less.
            </exception>
        </member>
        <member name="E:Internal.WebSocketSharp.WebSocket.OnClose">
            <summary>
            Occurs when the connection has been closed.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.WebSocket.OnError">
            <summary>
            Occurs when the interface gets an error.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.WebSocket.OnMessage">
            <summary>
            Occurs when the interface receives a message.
            </summary>
        </member>
        <member name="E:Internal.WebSocketSharp.WebSocket.OnOpen">
            <summary>
            Occurs when the connection has been established.
            </summary>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Close">
            <summary>
            Closes the connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Close(System.UInt16)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Close(Internal.WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection with the specified code.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Close(System.UInt16,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Close(Internal.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection with the specified code and reason.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Closing or Closed.
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.CloseAsync">
            <summary>
            Closes the connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.CloseAsync(System.UInt16)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            <paramref name="code"/> is less than 1000 or greater than 4999.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.CloseAsync(Internal.WebSocketSharp.CloseStatusCode)">
            <summary>
            Closes the connection asynchronously with the specified code.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.CloseAsync(System.UInt16,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              A <see cref="T:System.UInt16"/> that specifies the status code indicating
              the reason for the close.
              </para>
              <para>
              The status codes are defined in
              <see href="http://tools.ietf.org/html/rfc6455#section-7.4">
              Section 7.4</see> of RFC 6455.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
              <para>
              <paramref name="code"/> is less than 1000 or greater than 4999.
              </para>
              <para>
              -or-
              </para>
              <para>
              The size of <paramref name="reason"/> is greater than 123 bytes.
              </para>
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is 1011 (server error).
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1010 (mandatory extension).
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is 1005 (no status) and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.CloseAsync(Internal.WebSocketSharp.CloseStatusCode,System.String)">
            <summary>
            Closes the connection asynchronously with the specified code and reason.
            </summary>
            <remarks>
              <para>
              This method does not wait for the close to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
            <param name="code">
              <para>
              One of the <see cref="T:Internal.WebSocketSharp.CloseStatusCode"/> enum values.
              </para>
              <para>
              It specifies the status code indicating the reason for the close.
              </para>
            </param>
            <param name="reason">
              <para>
              A <see cref="T:System.String"/> that specifies the reason for the close.
              </para>
              <para>
              Its size must be 123 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.ServerError"/>.
              It cannot be used by a client.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.MandatoryExtension"/>.
              It cannot be used by a server.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="code"/> is <see cref="F:Internal.WebSocketSharp.CloseStatusCode.NoStatus"/> and
              <paramref name="reason"/> is specified.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="reason"/> could not be UTF-8-encoded.
              </para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="reason"/> is greater than 123 bytes.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Connect">
            <summary>
            Establishes a connection.
            </summary>
            <remarks>
            This method does nothing if the current state of the interface is
            Connecting or Open.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.ConnectAsync">
            <summary>
            Establishes a connection asynchronously.
            </summary>
            <remarks>
              <para>
              This method does not wait for the connect process to be complete.
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Connecting or Open.
              </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">
              <para>
              The interface is not for the client.
              </para>
              <para>
              -or-
              </para>
              <para>
              A series of reconnecting has failed.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Ping">
            <summary>
            Sends a ping to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Ping(System.String)">
            <summary>
            Sends a ping with the specified message to the remote endpoint.
            </summary>
            <returns>
            <c>true</c> if the send has successfully done and a pong has been
            received within a time; otherwise, <c>false</c>.
            </returns>
            <param name="message">
              <para>
              A <see cref="T:System.String"/> that specifies the message to send.
              </para>
              <para>
              Its size must be 125 bytes or less in UTF-8.
              </para>
            </param>
            <exception cref="T:System.ArgumentException">
            <paramref name="message"/> could not be UTF-8-encoded.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The size of <paramref name="message"/> is greater than 125 bytes.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Send(System.Byte[])">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Send(System.IO.FileInfo)">
            <summary>
            Sends the specified file to the remote endpoint.
            </summary>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Send(System.String)">
            <summary>
            Sends the specified data to the remote endpoint.
            </summary>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.Send(System.IO.Stream,System.Int32)">
            <summary>
            Sends the data from the specified stream instance to the remote endpoint.
            </summary>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SendAsync(System.Byte[],System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            An array of <see cref="T:System.Byte"/> that specifies the binary data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SendAsync(System.IO.FileInfo,System.Action{System.Boolean})">
            <summary>
            Sends the specified file to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="fileInfo">
              <para>
              A <see cref="T:System.IO.FileInfo"/> that specifies the file to send.
              </para>
              <para>
              The file is sent as the binary data.
              </para>
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="fileInfo"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              The file does not exist.
              </para>
              <para>
              -or-
              </para>
              <para>
              The file could not be opened.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SendAsync(System.String,System.Action{System.Boolean})">
            <summary>
            Sends the specified data to the remote endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="data">
            A <see cref="T:System.String"/> that specifies the text data to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="data"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
            <paramref name="data"/> could not be UTF-8-encoded.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SendAsync(System.IO.Stream,System.Int32,System.Action{System.Boolean})">
            <summary>
            Sends the data from the specified stream instance to the remote
            endpoint asynchronously.
            </summary>
            <remarks>
            This method does not wait for the send to be complete.
            </remarks>
            <param name="stream">
              <para>
              A <see cref="T:System.IO.Stream"/> instance from which to read the data to send.
              </para>
              <para>
              The data is sent as the binary data.
              </para>
            </param>
            <param name="length">
            An <see cref="T:System.Int32"/> that specifies the number of bytes to send.
            </param>
            <param name="completed">
              <para>
              An <see cref="T:System.Action{bool}"/> delegate.
              </para>
              <para>
              The delegate invokes the method called when the send is complete.
              </para>
              <para>
              The <see cref="T:System.Boolean"/> parameter passed to the method is <c>true</c>
              if the send has successfully done; otherwise, <c>false</c>.
              </para>
              <para>
              <see langword="null"/> if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The current state of the interface is not Open.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="stream"/> is <see langword="null"/>.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="stream"/> cannot be read.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="length"/> is less than 1.
              </para>
              <para>
              -or-
              </para>
              <para>
              No data could be read from <paramref name="stream"/>.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SetCookie(Internal.WebSocketSharp.Net.Cookie)">
            <summary>
            Sets an HTTP cookie to send with the handshake request.
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="cookie">
            A <see cref="T:Internal.WebSocketSharp.Net.Cookie"/> that specifies the cookie to send.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentNullException">
            <paramref name="cookie"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SetCredentials(System.String,System.String,System.Boolean)">
            <summary>
            Sets the credentials for the HTTP authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the credentials.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <param name="preAuth">
            A <see cref="T:System.Boolean"/>: <c>true</c> if sends the credentials for
            the Basic authentication in advance with the first handshake
            request; otherwise, <c>false</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.SetProxy(System.String,System.String,System.String)">
            <summary>
            Sets the URL of the HTTP proxy server through which to connect and
            the credentials for the HTTP proxy authentication (Basic/Digest).
            </summary>
            <remarks>
            This method works if the current state of the interface is
            New or Closed.
            </remarks>
            <param name="url">
              <para>
              A <see cref="T:System.String"/> that specifies the URL of the proxy
              server through which to connect.
              </para>
              <para>
              The syntax is http://&lt;host&gt;[:&lt;port&gt;].
              </para>
              <para>
              <see langword="null"/> or an empty string if initializes
              the URL and the credentials.
              </para>
            </param>
            <param name="username">
              <para>
              A <see cref="T:System.String"/> that specifies the username associated
              with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if the credentials
              are not necessary.
              </para>
            </param>
            <param name="password">
              <para>
              A <see cref="T:System.String"/> that specifies the password for the
              username associated with the credentials.
              </para>
              <para>
              <see langword="null"/> or an empty string if not necessary.
              </para>
            </param>
            <exception cref="T:System.InvalidOperationException">
            The interface is not for the client.
            </exception>
            <exception cref="T:System.ArgumentException">
              <para>
              <paramref name="url"/> is not an absolute URI string.
              </para>
              <para>
              -or-
              </para>
              <para>
              The scheme of <paramref name="url"/> is not http.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="url"/> includes the path segments.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="username"/> contains an invalid character.
              </para>
              <para>
              -or-
              </para>
              <para>
              <paramref name="password"/> contains an invalid character.
              </para>
            </exception>
        </member>
        <member name="M:Internal.WebSocketSharp.WebSocket.System#IDisposable#Dispose">
            <summary>
            Closes the connection and releases all associated resources.
            </summary>
            <remarks>
              <para>
              This method closes the connection with close status 1001 (going away).
              </para>
              <para>
              This method does nothing if the current state of the interface is
              Closing or Closed.
              </para>
            </remarks>
        </member>
        <member name="T:Internal.WebSocketSharp.WebSocketException">
            <summary>
            The exception that is thrown when a fatal error occurs in
            the WebSocket communication.
            </summary>
        </member>
        <member name="P:Internal.WebSocketSharp.WebSocketException.Code">
            <summary>
            Gets the status code indicating the cause of the exception.
            </summary>
            <value>
              <para>
              A <see cref="T:System.UInt16"/> that represents the status code indicating
              the cause of the exception.
              </para>
              <para>
              It is one of the status codes for the WebSocket connection close.
              </para>
            </value>
        </member>
        <member name="T:Internal.WebSocketSharp.WebSocketState">
            <summary>
            Indicates the state of the WebSocket interface.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocketState.New">
            <summary>
            Equivalent to numeric value 0. Indicates that a new interface has
            been created.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocketState.Connecting">
            <summary>
            Equivalent to numeric value 1. Indicates that the connect process is
            in progress.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocketState.Open">
            <summary>
            Equivalent to numeric value 2. Indicates that the connection has
            been established and the communication is possible.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocketState.Closing">
            <summary>
            Equivalent to numeric value 3. Indicates that the close process is
            in progress.
            </summary>
        </member>
        <member name="F:Internal.WebSocketSharp.WebSocketState.Closed">
            <summary>
            Equivalent to numeric value 4. Indicates that the connection has
            been closed or could not be established.
            </summary>
        </member>
        <member name="T:Internal.MeshSimplifier">
            <summary>
            The mesh simplifier.
            Deeply based on https://github.com/sp4cerat/Fast-Quadric-Mesh-Simplification but rewritten completely in C#.
            </summary>
        </member>
        <member name="T:Internal.MeshSimplifier.BlendShape">
            <summary>
            A blend shape.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShape.ShapeName">
            <summary>
            The name of the blend shape.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShape.Frames">
            <summary>
            The blend shape frames.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.BlendShape.#ctor(System.String,Internal.MeshSimplifier.BlendShapeFrame[])">
            <summary>
            Creates a new blend shape.
            </summary>
            <param name="shapeName">The name of the blend shape.</param>
            <param name="frames">The blend shape frames.</param>
        </member>
        <member name="T:Internal.MeshSimplifier.BlendShapeFrame">
            <summary>
            A blend shape frame.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShapeFrame.FrameWeight">
            <summary>
            The weight of the blend shape frame.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShapeFrame.DeltaVertices">
            <summary>
            The delta vertices of the blend shape frame.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShapeFrame.DeltaNormals">
            <summary>
            The delta normals of the blend shape frame.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.BlendShapeFrame.DeltaTangents">
            <summary>
            The delta tangents of the blend shape frame.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.BlendShapeFrame.#ctor(System.Single,NeoAxis.Vector3[],NeoAxis.Vector3[],NeoAxis.Vector3[])">
            <summary>
            Creates a new blend shape frame.
            </summary>
            <param name="frameWeight">The weight of the blend shape frame.</param>
            <param name="deltaVertices">The delta vertices of the blend shape frame.</param>
            <param name="deltaNormals">The delta normals of the blend shape frame.</param>
            <param name="deltaTangents">The delta tangents of the blend shape frame.</param>
        </member>
        <member name="P:Internal.MeshSimplifier.SimplificationOptions">
            <summary>
            Gets or sets all of the simplification options as a single block.
            Default value: SimplificationOptions.Default
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.PreserveBorderEdges">
            <summary>
            Gets or sets if the border edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.PreserveUVSeamEdges">
            <summary>
            Gets or sets if the UV seam edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.PreserveUVFoldoverEdges">
            <summary>
            Gets or sets if the UV foldover edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.PreserveSurfaceCurvature">
            <summary>
            Gets or sets if the discrete curvature of the mesh surface be taken into account during simplification.
            Default value: false
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.EnableSmartLink">
            <summary>
            Gets or sets if a feature for smarter vertex linking should be enabled, reducing artifacts in the
            decimated result at the cost of a slightly more expensive initialization by treating vertices at
            the same position as the same vertex while separating the attributes.
            Default value: true
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.MaxIterationCount">
            <summary>
            Gets or sets the maximum iteration count. Higher number is more expensive but can bring you closer to your target quality.
            Sometimes a lower maximum count might be desired in order to lower the performance cost.
            Default value: 100
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Agressiveness">
            <summary>
            Gets or sets the agressiveness of the mesh simplification. Higher number equals higher quality, but more expensive to run.
            Default value: 7.0
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Verbose">
            <summary>
            Gets or sets if verbose information should be printed to the console.
            Default value: false
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.VertexLinkDistance">
            <summary>
            Gets or sets the maximum distance between two vertices in order to link them.
            Note that this value is only used if EnableSmartLink is true.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.VertexLinkDistanceSqr">
            <summary>
            Gets or sets the maximum squared distance between two vertices in order to link them.
            Note that this value is only used if EnableSmartLink is true.
            Default value: double.Epsilon
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Vertices">
            <summary>
            Gets or sets the vertex positions.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.SubMeshCount">
            <summary>
            Gets the count of sub-meshes.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.BlendShapeCount">
            <summary>
            Gets the count of blend shapes.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Normals">
            <summary>
            Gets or sets the vertex normals.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Tangents">
            <summary>
            Gets or sets the vertex tangents.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV1">
            <summary>
            Gets or sets the vertex 2D UV set 1.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV2">
            <summary>
            Gets or sets the vertex 2D UV set 2.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV3">
            <summary>
            Gets or sets the vertex 2D UV set 3.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV4">
            <summary>
            Gets or sets the vertex 2D UV set 4.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV5">
            <summary>
            Gets or sets the vertex 2D UV set 5.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV6">
            <summary>
            Gets or sets the vertex 2D UV set 6.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV7">
            <summary>
            Gets or sets the vertex 2D UV set 7.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.UV8">
            <summary>
            Gets or sets the vertex 2D UV set 8.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.Colors">
            <summary>
            Gets or sets the vertex colors.
            </summary>
        </member>
        <member name="P:Internal.MeshSimplifier.BoneWeights">
            <summary>
            Gets or sets the vertex bone weights.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.#ctor">
            <summary>
            Creates a new mesh simplifier.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.Flipped(NeoAxisMeshSimplifier.Vector3d@,System.Int32,System.Int32,NeoAxisMeshSimplifier.Internal.Vertex@,System.Boolean[])">
            <summary>
            Check if a triangle flips when this edge is removed
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.UpdateTriangles(System.Int32,System.Int32,NeoAxisMeshSimplifier.Internal.Vertex@,NeoAxisMeshSimplifier.ResizableArray{System.Boolean},System.Int32@)">
            <summary>
            Update triangle connections and edge error after a edge is collapsed.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.RemoveVertexPass(System.Int32,System.Int32,System.Double,NeoAxisMeshSimplifier.ResizableArray{System.Boolean},NeoAxisMeshSimplifier.ResizableArray{System.Boolean},System.Int32@)">
            <summary>
            Remove vertices and mark deleted triangles
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.UpdateMesh(System.Int32)">
            <summary>
            Compact triangles, compute edge error and build reference list.
            </summary>
            <param name="iteration">The iteration index.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.CompactMesh">
            <summary>
            Finally compact mesh before exiting.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.GetAllSubMeshTriangles">
            <summary>
            Returns the triangle indices for all sub-meshes.
            </summary>
            <returns>The triangle indices for all sub-meshes.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.GetSubMeshTriangles(System.Int32)">
            <summary>
            Returns the triangle indices for a specific sub-mesh.
            </summary>
            <param name="subMeshIndex">The sub-mesh index.</param>
            <returns>The triangle indices.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.ClearSubMeshes">
            <summary>
            Clears out all sub-meshes.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.AddSubMeshTriangles(System.Int32[])">
            <summary>
            Adds a sub-mesh triangle indices for a specific sub-mesh.
            </summary>
            <param name="triangles">The triangle indices.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.AddSubMeshTriangles(System.Int32[][])">
            <summary>
            Adds several sub-meshes at once with their triangle indices for each sub-mesh.
            </summary>
            <param name="triangles">The triangle indices for each sub-mesh.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs2D(System.Int32)">
            <summary>
            Returns the UVs (2D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <returns>The UVs.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs3D(System.Int32)">
            <summary>
            Returns the UVs (3D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <returns>The UVs.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs4D(System.Int32)">
            <summary>
            Returns the UVs (4D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <returns>The UVs.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs(System.Int32,System.Collections.Generic.List{NeoAxis.Vector2})">
            <summary>
            Returns the UVs (2D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs(System.Int32,System.Collections.Generic.List{NeoAxis.Vector3})">
            <summary>
            Returns the UVs (3D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.GetUVs(System.Int32,System.Collections.Generic.List{NeoAxis.Vector4})">
            <summary>
            Returns the UVs (4D) from a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SetUVs(System.Int32,System.Collections.Generic.IList{NeoAxis.Vector2})">
            <summary>
            Sets the UVs (2D) for a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SetUVs(System.Int32,System.Collections.Generic.IList{NeoAxis.Vector3})">
            <summary>
            Sets the UVs (3D) for a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SetUVs(System.Int32,System.Collections.Generic.IList{NeoAxis.Vector4})">
            <summary>
            Sets the UVs (4D) for a specific channel.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SetUVs(System.Int32,System.Collections.Generic.IList{NeoAxis.Vector4},System.Int32)">
            <summary>
            Sets the UVs for a specific channel with a specific count of UV components.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
            <param name="uvComponentCount">The count of UV components.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SetUVsAuto(System.Int32,System.Collections.Generic.IList{NeoAxis.Vector4})">
            <summary>
            Sets the UVs for a specific channel and automatically detects the used components.
            </summary>
            <param name="channel">The channel index.</param>
            <param name="uvs">The UVs.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.GetAllBlendShapes">
            <summary>
            Returns all blend shapes.
            </summary>
            <returns>An array of all blend shapes.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.GetBlendShape(System.Int32)">
            <summary>
            Returns a specific blend shape.
            </summary>
            <param name="blendShapeIndex">The blend shape index.</param>
            <returns>The blend shape.</returns>
        </member>
        <member name="M:Internal.MeshSimplifier.ClearBlendShapes">
            <summary>
            Clears all blend shapes.
            </summary>
        </member>
        <member name="M:Internal.MeshSimplifier.AddBlendShape(Internal.MeshSimplifier.BlendShape)">
            <summary>
            Adds a blend shape.
            </summary>
            <param name="blendShape">The blend shape to add.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.AddBlendShapes(Internal.MeshSimplifier.BlendShape[])">
            <summary>
            Adds several blend shapes.
            </summary>
            <param name="blendShapes">The blend shapes to add.</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SimplifyMeshCarefully(System.Double)">
            <summary>
            Simplifies the mesh to a desired quality.
            </summary>
            <param name="quality">The target quality (between 0 and 1).</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SimplifyMeshDefault(System.Single)">
            <summary>
            Simplifies the mesh to a desired quality.
            </summary>
            <param name="quality">The target quality (between 0 and 1).</param>
        </member>
        <member name="M:Internal.MeshSimplifier.SimplifyMeshLossless(System.Double)">
            <summary>
            Simplifies the mesh without losing too much quality.
            </summary>
        </member>
        <member name="T:Internal.MeshSimplifier.SimplificationOptionsStruct">
            <summary>
            Options for mesh simplification.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.Default">
            <summary>
            The default simplification options.
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.PreserveBorderEdges">
            <summary>
            If the border edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.PreserveUVSeamEdges">
            <summary>
            If the UV seam edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.PreserveUVFoldoverEdges">
            <summary>
            If the UV foldover edges should be preserved.
            Default value: false
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.PreserveSurfaceCurvature">
            <summary>
            If the discrete curvature of the mesh surface be taken into account during simplification. Taking surface curvature into account can result in good quality mesh simplification, but it can slow the simplification process significantly.
            Default value: false
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.EnableSmartLink">
            <summary>
            If a feature for smarter vertex linking should be enabled, reducing artifacts in the
            decimated result at the cost of a slightly more expensive initialization by treating vertices at
            the same position as the same vertex while separating the attributes.
            Default value: true
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.VertexLinkDistance">
            <summary>
            The maximum distance between two vertices in order to link them.
            Note that this value is only used if EnableSmartLink is true.
            Default value: double.Epsilon
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.MaxIterationCount">
            <summary>
            The maximum iteration count. Higher number is more expensive but can bring you closer to your target quality.
            Sometimes a lower maximum count might be desired in order to lower the performance cost.
            Default value: 100
            </summary>
        </member>
        <member name="F:Internal.MeshSimplifier.SimplificationOptionsStruct.Agressiveness">
            <summary>
            The agressiveness of the mesh simplification. Higher number equals higher quality, but more expensive to run.
            Default value: 7.0
            </summary>
        </member>
        <member name="T:Internal.AssemblyUtility">
            <summary>
            An auxiliary class for working with .NET assemblies.
            </summary>
        </member>
        <member name="T:Internal.AssemblyUtility.RegisteredAssemblyItem">
            <summary>
            A class representing registered .NET assembly.
            </summary>
        </member>
        <member name="T:Internal.LogPlatformFunctionality">
            <summary>
            Internal class for implementing the target platform.
            </summary>
        </member>
        <member name="T:Internal.ProcessUtility">
            <summary>
            Auxiliary class for working with processes.
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al">
            <summary>
                OpenAL binding for .NET, implementing AL 1.1.
            </summary>
            <remarks>
                Binds functions and definitions in OpenAL32.dll or libAL.so.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_NATIVE_LIBRARY">
            <summary>
                Specifies OpenAl's native library archive.
            </summary>
            <remarks>
                Specifies OpenAl32.dll everywhere; will be mapped via .config for mono.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.CALLING_CONVENTION">
            <summary>
                Specifies the calling convention.
            </summary>
            <remarks>
                Specifies <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVALID">
            <summary>
                Bad value.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_NONE">
            <summary>
                Disable value.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FALSE">
            <summary>
                bool false.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_TRUE">
            <summary>
                bool true.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SOURCE_TYPE">
            <summary>
                Indicates the type of AL_SOURCE.  Sources can be spatialized.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE">
            <summary>
                Indicates source has listener-relative coordinates.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE">
            <summary>
                Directional source, inner cone angle, in degrees.  The accepted range is 0 to
                360, the default value is 360.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE">
            <summary>
                Directional source, outer cone angle, in degrees.  The accepted range is 0 to
                360, the default value is 360.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PITCH">
            <summary>
                Specifies the pitch to be applied, either at source, or on mixer results, at
                listener.  The accepted range is 0.5 to 2.0, the default value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_POSITION">
            <summary>
                Specifies the current location in three dimensional space.  OpenAL, like OpenGL,
                uses a right-handed coordinate system, where in a frontal default view X (thumb)
                points right, Y points up (index finger), and Z points towards the viewer/camera
                (middle finger).  To switch to a left-handed coordinate system, flip the sign on
                the Z coordinate.  Listener position is always in the world coordinate system.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DIRECTION">
            <summary>
                Specifies the current direction as forward vector.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_VELOCITY">
            <summary>
                Specifies the current velocity in three dimensional space.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_LOOPING">
            <summary>
                Indicates whether source has to loop infinitely.  The accepted values are
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> or <see cref="F:Tao.OpenAl.Al.AL_FALSE" />, the default value is
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" />.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STATIC">
            <summary>
                Indicates whether source is meant to be static.  The accepted values are
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> or <see cref="F:Tao.OpenAl.Al.AL_FALSE" />, the default value is
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" />.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STREAMING">
            <summary>
                Indicates whether source is meant to be streaming.  The accepted values are
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> or <see cref="F:Tao.OpenAl.Al.AL_FALSE" />, the default value is
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" />.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_UNDETERMINED">
            <summary>
                Indicates whether source is meant to be undetermined.  The accepted values are
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> or <see cref="F:Tao.OpenAl.Al.AL_FALSE" />, the default value is
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" />.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BUFFER">
            <summary>
                Indicates the buffer to provide sound samples.  The accepted range is any valid
                buffer ID.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_GAIN">
            <summary>
                Indicates the gain (volume amplification) applied.  The accepted range is 0.0
                or above.  A value of 1.0 means unattenuated/unchanged.  Each division by 2 equals
                an attenuation of -6dB.  Each multiplication by 2 equals an amplification of +6dB.
                A value of 0.0 is meaningless with respect to a logarithmic scale; it is
                interpreted as zero volume, the channel is effectively disabled.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_MIN_GAIN">
            <summary>
                Indicates minimum source attenuation.  The accepted range is 0.0 to 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_MAX_GAIN">
            <summary>
                Indicates maximum source attenuation.  The accepted range is 0.0 to 1.0.
            </summary>
            #define AL_MAX_GAIN 0x100E
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ORIENTATION">
            <summary>
                Specifies the current orientation.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_REFERENCE_DISTANCE">
            <summary>
                byte offset into source (in canon format).  -1 if source is not playing.  Do not
                set this, only get this value.  The accepted range is 0.0 or above.  The default
                value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ROLLOFF_FACTOR">
            <summary>
                Indicates the rolloff factor for the source.  The accepted range is 0.0 or
                above.  The default value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CONE_OUTER_GAIN">
            <summary>
                Indicates the gain (volume amplification) applied.  The accepted range is 0.0 or
                above.  A value of 1.0 means unattenuated/unchanged.  Each division by 2 equals an
                attenuation of -6dB.  Each multiplication by 2 equals an amplification of +6dB.
                A value of 0.0 is meaningless with respect to a logarithmic scale; it is
                interpreted as zero volume, the channel is effectively disabled.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_MAX_DISTANCE">
            <summary>
                Specifies the maximum distance.  The accepted range is 0.0 or above.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CHANNEL_MASK">
            <summary>
                Specifies the channel mask.  The accepted range is 0 to 255.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SOURCE_STATE">
            <summary>
                Source state information.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INITIAL">
            <summary>
                Source initialized.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PLAYING">
            <summary>
                Source playing.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PAUSED">
            <summary>
                Source paused.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STOPPED">
            <summary>
                Source stopped.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED">
            <summary>
                Buffers are queued.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED">
            <summary>
                Buffers are processed.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SEC_OFFSET">
            <summary>
                Source buffer position information.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SAMPLE_OFFSET">
            <summary>
                Source buffer position information.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BYTE_OFFSET">
            <summary>
                Source buffer position information.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_MONO8">
            <summary>
                8-bit mono buffer.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_MONO16">
            <summary>
                16-bit mono buffer.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_STEREO8">
            <summary>
                8-bit stereo buffer.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_STEREO16">
            <summary>
                16-bit stereo buffer.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FREQUENCY">
            <summary>
                Buffer frequency, in units of Hertz (Hz).  This is the number of samples per
                second.  Half of the sample frequency marks the maximum significant frequency
                component.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BITS">
            <summary>
                Buffer bit depth.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CHANNELS">
            <summary>
                Buffer channels.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SIZE">
            <summary>
                Buffer size.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DATA">
            <summary>
                Buffer data.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_UNUSED">
            <summary>
                Buffer unused.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_QUEUED">
            <summary>
                Buffer queued.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PENDING">
            <summary>
                Buffer pending.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CURRENT">
            <summary>
                Buffer current.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PROCESSED">
            <summary>
                Buffer processed.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_NO_ERROR">
            <summary>
                No error.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVALID_NAME">
            <summary>
                Illegal name passed as an argument to an AL call.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ILLEGAL_ENUM">
            <summary>
                Illegal enum passed as an argument to an AL call.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVALID_ENUM">
            <summary>
                Illegal enum passed as an argument to an AL call.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVALID_VALUE">
            <summary>
                Illegal value passed as an argument to an AL call.  Applies to parameter
                values, but not to enumerations.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ILLEGAL_COMMAND">
            <summary>
                A function was called at an inappropriate time or in an inappropriate way,
                causing an illegal state.  This can be an incompatible value, object ID, and/or
                function.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVALID_OPERATION">
            <summary>
                A function was called at an inappropriate time or in an inappropriate way,
                causing an illegal state.  This can be an incompatible value, object ID, and/or
                function.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_OUT_OF_MEMORY">
            <summary>
                A function could not be completed, because there is not enough memory available.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_VENDOR">
            <summary>
                Vendor name.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_VERSION">
            <summary>
                Version.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_RENDERER">
            <summary>
                Renderer.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EXTENSIONS">
            <summary>
                Extensions.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DOPPLER_FACTOR">
            <summary>
                Doppler scale.  The default value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DOPPLER_VELOCITY">
            <summary>
                Doppler velocity.  The default value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_SPEED_OF_SOUND">
            <summary>
                Speed of Sound
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DISTANCE_SCALE">
            <summary>
                Distance scaling.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DISTANCE_MODEL">
            <summary>
                Distance model.  The default value is <see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE_CLAMPED" />.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE">
            <summary>
                Inverse distance model.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE_CLAMPED">
            <summary>
                Inverse distance clamped model.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_LINEAR_DISTANCE">
            <summary>
                
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_LINEAR_DISTANCE_CLAMPED">
            <summary>
                
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EXPONENT_DISTANCE">
            <summary>
                
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EXPONENT_DISTANCE_CLAMPED">
            <summary>
                
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_ROOM_IASIG">
            <summary>
                Room.  The accepted range is -10000 to 0.  The default value is -10000.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_ROOM_HIGH_FREQUENCY_IASIG">
            <summary>
                Room high frequency.  The accepted range is -10000 to 0.  The default value is 0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_ROOM_ROLLOFF_FACTOR">
            <summary>
                Room rolloff factor.  The accepted range is 0.1 to 20.0.  The default value is
                0.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_DECAY_TIME_IASIG">
            <summary>
                Decay time.  The accepted range is 0.1 to 20.0.  The default value is 1.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_DECAY_HIGH_FREQUENCY_RATIO_IASIG">
            <summary>
                Decay high frequency ratio.  The accepted range is 0.1 to 2.0.  The default value
                is 0.5.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_REFLECTIONS_IASIG">
            <summary>
                Reflections.  The accepted range is -10000 to 1000.  The default value is -10000.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_REFLECTIONS_DELAY_IASIG">
            <summary>
                Reflections delay.  The accepted range is 0.0 to 0.3.  The default value is 0.02.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_REVERB_IASIG">
            <summary>
                Reverb.  The accepted range is -10000 to 2000.  The default value is -10000.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_REVERB_DELAY_IASIG">
            <summary>
                Reverb delay.  The accepted range is 0.0 to 0.1.  The default value is 0.04.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_DIFFUSION_IASIG">
            <summary>
                Diffusion.  The accepted range is 0.0 to 100.0.  The default value is 100.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_DENSITY_IASIG">
            <summary>
                Density.  The accepted range is 0.0 to 100.0.  The default value is 100.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ENV_HIGH_FREQUENCY_REFERENCE_IASIG">
            <summary>
                High frequency reference.  The accepted range is 20.0 to 20000.0.  The default
                value is 5000.0.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_QUAD16">
            <summary>
                Format specifier for 16bit 4-channel audio.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_51CHN16">
            <summary>
                Format specifier for 16bit 6-channel audio.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_61CHN16">
            <summary>
                Format specifier for 16bit 7-channel audio.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FORMAT_71CHN16">
            <summary>
                Format specifier for 16bit 8-channel audio.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC">
            <summary>
                See 'OpenAL Programmer's Guide' for more information.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE">
            <summary>
                See 'OpenAL Programmer's Guide' for more information.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE">
            <summary>
                See 'OpenAL Programmer's Guide' for more information.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EAX_RAM_SIZE">
            <summary>
                See 'OpenAL Programmer's Guide' for more information.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EAX_RAM_FREE">
            <summary>
                See 'OpenAL Programmer's Guide' for more information.
            </summary>
            <remarks>
            Note that if the enumeration value is not supported by the current OpenAl implementation,
            an OpenAL error is generated the first, but only the first time this field is accessed.
            The field then has a value of zero.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Al.AL_CHORUS_WAVEFORM">
            * Chorus Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_DISTORTION_EDGE">
            * Distortion Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_ECHO_DELAY">
            * Echo Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FLANGER_WAVEFORM">
            * Flanger Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FREQUENCY_SHIFTER_FREQUENCY">
            * Frequencyshifter Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_VOCAL_MORPHER_PHONEMEA">
            * Vocalmorpher Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_PITCH_SHIFTER_COARSE_TUNE">
            * Pitchshifter Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_RING_MODULATOR_FREQUENCY">
            * Ringmodulator Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_AUTOWAH_ATTACK_TIME">
            * Autowah Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_COMPRESSOR_ONOFF">
            * Compressor Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_EQUALIZER_LOW_GAIN">
            * Equalizer Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_HIGHPASS_GAIN">
            * Highpass Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_BANDPASS_GAIN">
            * Bandpass Parameters */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FILTER_FIRST_PARAMETER">
            * Filter type */
        </member>
        <member name="F:Tao.OpenAl.Al.AL_FILTER_NULL">
            * Filter type definitions to be used with AL_FILTER_TYPE. */
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferData(System.Int32,System.Int32,System.IntPtr,System.Int32,System.Int32)">
            <summary>
                Fills a buffer with audio data.
            </summary>
            <param name="buffer">
                Buffer name to be filled with data.
            </param>
            <param name="format">
                <para>
                    Format type from among the following:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_MONO8" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_MONO16" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_STEREO8" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_STEREO16" /></item>
                    </list>
                </para>
            </param>
            <param name="data">
                Pointer to the audio data.
            </param>
            <param name="size">
                The size of the audio data in bytes.
            </param>
            <param name="frequency">
                The frequency of the audio data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferData(System.Int32,System.Int32,System.Void*,System.Int32,System.Int32)">
            <summary>
                Fills a buffer with audio data.
            </summary>
            <param name="buffer">
                Buffer name to be filled with data.
            </param>
            <param name="format">
                <para>
                    Format type from among the following:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_MONO8" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_MONO16" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_STEREO8" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_FORMAT_STEREO16" /></item>
                    </list>
                </para>
            </param>
            <param name="data">
                Pointer to the audio data.
            </param>
            <param name="size">
                The size of the audio data in bytes.
            </param>
            <param name="frequency">
                The frequency of the audio data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferf(System.Int32,System.Int32,System.Single)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alBuffer3f(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferfv(System.Int32,System.Int32,System.Single@)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferi(System.Int32,System.Int32,System.Int32)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alBuffer3i(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alBufferiv(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Set Buffer parameters.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteBuffers(System.Int32,System.Int32@)">
            <summary>
                Deletes one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be deleted.
            </param>
            <param name="buffer">
                Pointer to an array of buffer names identifying the buffers to be deleted.
            </param>
            <remarks>
                If the requested number of buffers cannot be deleted, an error will be
                generated which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error
                occurs, no buffers will be deleted.  If <i>number</i> equals zero,
                <b>alDeleteBuffers</b> does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteBuffers(System.Int32,System.IntPtr)">
            <summary>
                Deletes one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be deleted.
            </param>
            <param name="buffers">
                Pointer to an array of buffer names identifying the buffers to be deleted.
            </param>
            <remarks>
                If the requested number of buffers cannot be deleted, an error will be
                generated which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error
                occurs, no buffers will be deleted.  If <i>number</i> equals zero,
                <b>alDeleteBuffers</b> does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteBuffers(System.Int32,System.Int32*)">
            <summary>
                Deletes one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be deleted.
            </param>
            <param name="buffers">
                Pointer to an array of buffer names identifying the buffers to be deleted.
            </param>
            <remarks>
                If the requested number of buffers cannot be deleted, an error will be
                generated which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error
                occurs, no buffers will be deleted.  If <i>number</i> equals zero,
                <b>alDeleteBuffers</b> does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteSources(System.Int32,System.Int32@)">
            <summary>
                Deletes one or more sources.
            </summary>
            <param name="number">
                The number of sources to be deleted.
            </param>
            <param name="sources">
                Pointer to an array of source names identifying the sources to be deleted.
            </param>
            <remarks>
                If the requested number of sources cannot be deleted, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be deleted.  If <i>number</i> equals zero, <b>alDeleteSources</b>
                does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteSources(System.Int32,System.IntPtr)">
            <summary>
                Deletes one or more sources.
            </summary>
            <param name="number">
                The number of sources to be deleted.
            </param>
            <param name="sources">
                Pointer to an array of source names identifying the sources to be deleted.
            </param>
            <remarks>
                If the requested number of sources cannot be deleted, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be deleted.  If <i>number</i> equals zero, <b>alDeleteSources</b>
                does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteSources(System.Int32,System.Int32*)">
            <summary>
                Deletes one or more sources.
            </summary>
            <param name="number">
                The number of sources to be deleted.
            </param>
            <param name="sources">
                Pointer to an array of source names identifying the sources to be deleted.
            </param>
            <remarks>
                If the requested number of sources cannot be deleted, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be deleted.  If <i>number</i> equals zero, <b>alDeleteSources</b>
                does nothing and will not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDisable(System.Int32)">
            <summary>
                Disables a feature of the OpenAL driver.
            </summary>
            <param name="capability">
                The capability to disable.
            </param>
            <remarks>
                At the time of this writing, there are no features to be disabled using this
                function, so if it is called the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" /> will be
                generated.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDistanceModel(System.Int32)">
            <summary>
                Selects the OpenAL distance model.
            </summary>
            <param name="val">
                <para>
                    The distance model to be set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_NONE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE_CLAMPED" /></item>
                    </list>
                </para>
            </param>
            <remarks>
                <para>
                    The default distance model in OpenAL is <see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE" />.
                </para>
                <para>
                    The <see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE" /> model works according to the following
                    formula:
                </para>
                <para>
                    <c>
                        G_dB = AL_GAIN – 20log10(1 + AL_ROLLOFF_FACTOR * (distance – AL_REFERENCE_DISTANCE) / AL_REFERENCE_DISTANCE));
                        G_dB = min(G_dB, AL_MAX_GAIN);
                        G_dB = max(G_dB, AL_MIN_GAIN);
                    </c>
                </para>
                <para>
                    The <see cref="F:Tao.OpenAl.Al.AL_INVERSE_DISTANCE_CLAMPED" /> model works according to the
                    following formula:
                </para>
                <para>
                    <c>
                        distance = max(distance, AL_REFERENCE_DISTANCE);
                        distance = min(distance, AL_MAX_DISTANCE);
                        G_dB = AL_GAIN – 20log10(1 + AL_ROLLOFF_FACTOR * (distance – AL_REFERENCE_DISTANCE) / AL_REFERENCE_DISTANCE));
                        G_dB = min(G_dB, AL_MAX_GAIN);
                        G_dB = max(G_dB, AL_MIN_GAIN);
                    </c>
                </para>
                <para>
                    The <see cref="F:Tao.OpenAl.Al.AL_NONE" /> model works according to the following formula:
                </para>
                <para>
                    <c>
                        G_db = AL_GAIN;
                    </c>
                </para>
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDopplerFactor(System.Single)">
            <summary>
                Selects the OpenAL Doppler factor value.
            </summary>
            <param name="val">
                The Doppler scale value to set.
            </param>
            <remarks>
                The default Doppler factor value is 1.0.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alDopplerVelocity(System.Single)">
            <summary>
                Selects the OpenAL Doppler velocity value.
            </summary>
            <param name="val">
                The Doppler velocity value to set.
            </param>
            <remarks>
                The default Doppler velocity value is 343.3.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSpeedOfSound(System.Single)">
            <summary>
                Selects the OpenAL Speed of Sound value.
            </summary>
            <param name="val">
                The Speed of Sound value to set.
            </param>
            <remarks>
                
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alEnable(System.Int32)">
            <summary>
                Enables a feature of the OpenAL driver.
            </summary>
            <param name="capability">
                The capability to enable.
            </param>
            <remarks>
                At the time of this writing, there are no features to be enabled using this
                function, so if it is called the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" /> will be
                generated.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenBuffers(System.Int32,System.Int32@)">
            <summary>
                Generates one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be generated.
            </param>
            <param name="buffer">
                Pointer to an array of integer values which will store the names of the new
                buffers.
            </param>
            <remarks>
                If the requested number of buffers cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                buffers will be generated.  If <i>number</i> equals zero, <b>alGenBuffers</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenBuffers(System.Int32,System.IntPtr)">
            <summary>
                Generates one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be generated.
            </param>
            <param name="buffers">
                Pointer to an array of integer values which will store the names of the new
                buffers.
            </param>
            <remarks>
                If the requested number of buffers cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                buffers will be generated.  If <i>number</i> equals zero, <b>alGenBuffers</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenBuffers(System.Int32,System.Int32*)">
            <summary>
                Generates one or more buffers.
            </summary>
            <param name="number">
                The number of buffers to be generated.
            </param>
            <param name="buffers">
                Pointer to an array of integer values which will store the names of the new
                buffers.
            </param>
            <remarks>
                If the requested number of buffers cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                buffers will be generated.  If <i>number</i> equals zero, <b>alGenBuffers</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenSources(System.Int32,System.Int32@)">
            <summary>
                Generates one or more sources.
            </summary>
            <param name="number">
                The number of sources to be generated.
            </param>
            <param name="source">
                Pointer to an array of integer values which will store the names of the new
                sources.
            </param>
            <remarks>
                If the requested number of sources cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be generated.  If <i>number</i> equals zero, <b>alGenSources</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenSources(System.Int32,System.IntPtr)">
            <summary>
                Generates one or more sources.
            </summary>
            <param name="number">
                The number of sources to be generated.
            </param>
            <param name="sources">
                Pointer to an array of integer values which will store the names of the new
                sources.
            </param>
            <remarks>
                If the requested number of sources cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be generated.  If <i>number</i> equals zero, <b>alGenSources</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenSources(System.Int32,System.Int32*)">
            <summary>
                Generates one or more sources.
            </summary>
            <param name="number">
                The number of sources to be generated.
            </param>
            <param name="sources">
                Pointer to an array of integer values which will store the names of the new
                sources.
            </param>
            <remarks>
                If the requested number of sources cannot be created, an error will be generated
                which can be detected with <see cref="M:Tao.OpenAl.Al.alGetError" />.  If an error occurs, no
                sources will be generated.  If <i>number</i> equals zero, <b>alGenSources</b>
                does nothing and does not return an error.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBoolean(System.Int32)">
            <summary>
                Returns a boolean OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <returns>
                The boolean value (<see cref="F:Tao.OpenAl.Al.AL_TRUE" /> or <see cref="F:Tao.OpenAl.Al.AL_FALSE" />) described
                by <i>state</i> will be returned.
            </returns>
            <remarks>
                There aren’t any boolean states defined at the time of this writing, so this
                function will always generate the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBooleanv(System.Int32,System.Int32@)">
            <summary>
                Retrieves a boolean OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any boolean states defined at the time of this writing, so this
                function will always generate the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBooleanv(System.Int32,System.IntPtr)">
            <summary>
                Retrieves a boolean OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any boolean states defined at the time of this writing, so this
                function will always generate the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBooleanv(System.Int32,System.Int32*)">
            <summary>
                Retrieves a boolean OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any boolean states defined at the time of this writing, so this
                function will always generate the error <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferf(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferf(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferf(System.Int32,System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBuffer3f(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="value1">
                A pointer to an float to hold the retrieved data.
            </param>
            <param name="value2">
                A pointer to an float to hold the retrieved data.
            </param>
            <param name="value3">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferfv(System.Int32,System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferfv(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferfv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="val">
                A pointer to an float to hold the retrieved data.
            </param>
            <remarks>
                There are no float attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferi(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferi(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferi(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBuffer3i(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                The name of the attribute to be retrieved.
            </param>
            <param name="value1">
                A pointer to an int to hold the retrieved data.
            </param>
            <param name="value2">
                A pointer to an int to hold the retrieved data.
            </param>
            <param name="value3">
                A pointer to an int to hold the retrieved data.
            </param>
            <remarks>
                There are no int attributes for buffers at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferiv(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferiv(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetBufferiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of a buffer.
            </summary>
            <param name="buffer">
                Buffer name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BITS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CHANNELS" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DATA" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to an integer to hold the retrieved data.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetDouble(System.Int32)">
            <summary>
                Returns a double precision floating point OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <returns>
                The double value described by <i>state</i> will be returned.
            </returns>
            <remarks>
                There aren’t any double precision floating point states defined at the time of
                this writing, so this function will always generate the error
                <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetDoublev(System.Int32,System.Double@)">
            <summary>
                Retrieves a double precision floating point OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any double precision floating point states defined at the time of
                this writing, so this function will always generate the error
                <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetDoublev(System.Int32,System.IntPtr)">
            <summary>
                Retrieves a double precision floating point OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any double precision floating point states defined at the time of
                this writing, so this function will always generate the error
                <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetDoublev(System.Int32,System.Double*)">
            <summary>
                Retrieves a double precision floating point OpenAL state.
            </summary>
            <param name="state">
                The state to be queried.
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
            <remarks>
                There aren’t any double precision floating point states defined at the time of
                this writing, so this function will always generate the error
                <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetEnumValue(System.String)">
            <summary>
                Returns the enumeration value of an OpenAL enum described by a string.
            </summary>
            <param name="enumName">
                A string describing an OpenAL enum.
            </param>
            <returns>
                The actual value for the described enum is returned.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetError">
            <summary>
                Returns the current error state and then clears the error state.
            </summary>
            <returns>
                The error state.
            </returns>
            <remarks>
                When an OpenAL error occurs, the error state is set and will not be changed until
                the error state is retrieved using <b>alGetError</b>.  Whenever <b>alGetError</b>
                is called, the error state is cleared and the last state (the current state when
                the call was made) is returned.  To isolate error detection to a specific portion
                of code, <b>alGetError</b> should be called before the isolated section to clear
                the current error state.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetFloat(System.Int32)">
            <summary>
                Returns a floating point OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <returns>
                The floating point value described by <i>state</i> will be returned.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetFloatv(System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetFloatv(System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetFloatv(System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DOPPLER_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetInteger(System.Int32)">
            <summary>
                Returns an integer OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DISTANCE_MODEL" /></item>
                    </list>
                </para>
            </param>
            <returns>
                The integer value described by <i>state</i> will be returned.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetIntegerv(System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DISTANCE_MODEL" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetIntegerv(System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DISTANCE_MODEL" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetIntegerv(System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer OpenAL state.
            </summary>
            <param name="state">
                <para>
                    The state to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_DISTANCE_MODEL" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the location where the state will be stored.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListener3f(System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Retrieves a set of three floating point values from a property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output1">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output2">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output3">
                Pointer to the the floating point being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListener3f(System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Retrieves a set of three floating point values from a property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output1">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output2">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output3">
                Pointer to the the floating point being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListener3f(System.Int32,System.Single*,System.Single*,System.Single*)">
            <summary>
                Retrieves a set of three floating point values from a property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output1">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output2">
                Pointer to the the floating point being retrieved.
            </param>
            <param name="output3">
                Pointer to the the floating point being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerf(System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerf(System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerf(System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerfv(System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point-vector value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerfv(System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point-vector value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListenerfv(System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="output">
                A pointer to the floating point-vector value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneri(System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneri(System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneri(System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListener3i(System.Int32,System.Int32*,System.Int32*,System.Int32*)">
            <summary>
                Retrieves a set of three integer values from a property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="output1">
                Pointer to the integer being retrieved.
            </param>
            <param name="output2">
                Pointer to the integer being retrieved.
            </param>
            <param name="output3">
                Pointer to the intger being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneriv(System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneriv(System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetListeneriv(System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be queried.
            </param>
            <param name="output">
                A pointer to the integer value being retrieved.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetProcAddress(System.String)">
            <summary>
                Returns the address of an OpenAL extension function.
            </summary>
            <param name="functionName">
                A string containing the function name.
            </param>
            <returns>
                A pointer to the desired function is returned.
            </returns>
            <remarks>
                The return value will be IntPtr.Zero if the function is not found.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSource3f(System.Int32,System.Int32,System.Single@,System.Single@,System.Single@)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The float values which the attribute will be set to.
            </param>
            <param name="value2">
                The float values which the attribute will be set to.
            </param>
            <param name="value3">
                The float values which the attribute will be set to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSource3f(System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The float values which the attribute will be set to.
            </param>
            <param name="value2">
                The float values which the attribute will be set to.
            </param>
            <param name="value3">
                The float values which the attribute will be set to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSource3f(System.Int32,System.Int32,System.Single*,System.Single*,System.Single*)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The float values which the attribute will be set to.
            </param>
            <param name="value2">
                The float values which the attribute will be set to.
            </param>
            <param name="value3">
                The float values which the attribute will be set to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcef(System.Int32,System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_PITCH" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MIN_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ROLLOFF_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_REFERENCE_DISTANCE" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcef(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_PITCH" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MIN_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ROLLOFF_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_REFERENCE_DISTANCE" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcef(System.Int32,System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_PITCH" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MIN_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ROLLOFF_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_REFERENCE_DISTANCE" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the floating point value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcefv(System.Int32,System.Int32,System.Single@)">
            <summary>
                Retrieves a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the vector to retrieve.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcefv(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to retrieve.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcefv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Retrieves a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to retrieve.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcei(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_LOOPING" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcei(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourcei(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSource3i(System.Int32,System.Int32,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The int values which the attribute will be set to.
            </param>
            <param name="value2">
                The int values which the attribute will be set to.
            </param>
            <param name="value3">
                The int values which the attribute will be set to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourceiv(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_LOOPING" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourceiv(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetSourceiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Retrieves an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being retrieved.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to retrieve:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_QUEUED" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFERS_PROCESSED" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                A pointer to the integer value being retrieved.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alGetString(System.Int32)">
            <summary>
                Retrieves an OpenAL string property.
            </summary>
            <param name="state">
                <para>
                    The property to be queried:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_VENDOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_RENDERER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_EXTENSIONS" /></item>
                    </list>
                </para>
            </param>
            <returns>
                A pointer to a null-terminated string.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alHint(System.Int32,System.Int32)">
            <summary>
                Sets application preferences for driver performance choices.
            </summary>
            <param name="target">
                Unknown.
            </param>
            <param name="mode">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alIsBuffer(System.Int32)">
            <summary>
                Tests if a buffer name is valid.
            </summary>
            <param name="buffer">
                A buffer name to be tested for validity.
            </param>
            <returns>
                bool value <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> if the buffer name is valid or
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" /> if the buffer name is not valid.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alIsEnabled(System.Int32)">
            <summary>
                Returns a value indicating if a specific feature is enabled in the OpenAL driver.
            </summary>
            <param name="capability">
                The capability to query.
            </param>
            <returns>
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> if the capability is enabled, <see cref="F:Tao.OpenAl.Al.AL_FALSE" /> if
                the capability is disabled.
            </returns>
            <remarks>
                At the time of this writing, this function always returns <see cref="F:Tao.OpenAl.Al.AL_FALSE" />,
                and since there are no capabilities defined yet, the error
                <see cref="F:Tao.OpenAl.Al.AL_INVALID_ENUM" /> will also be set.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alIsExtensionPresent(System.String)">
            <summary>
                Tests if a specific extension is available for the OpenAL driver.
            </summary>
            <param name="extensionName">
                A string describing the desired extension.
            </param>
            <returns>
                <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> if the extension is available, <see cref="F:Tao.OpenAl.Al.AL_FALSE" /> if
                the extension is not available.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alIsSource(System.Int32)">
            <summary>
                Tests if a source name is valid.
            </summary>
            <param name="id">
                A source name to be tested for validity.
            </param>
            <returns>
                bool value <see cref="F:Tao.OpenAl.Al.AL_TRUE" /> if the source name is valid or
                <see cref="F:Tao.OpenAl.Al.AL_FALSE" /> if the source name is not valid.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alListener3f(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets a floating point property for the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The value to set the attribute to.
            </param>
            <param name="value2">
                The value to set the attribute to.
            </param>
            <param name="value3">
                The value to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListenerf(System.Int32,System.Single)">
            <summary>
                Sets a floating point property for the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be set.
            </param>
            <param name="val">
                The float value to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListenerfv(System.Int32,System.Single@)">
            <summary>
                Sets a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                Pointer to floating point-vector values.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListenerfv(System.Int32,System.IntPtr)">
            <summary>
                Sets a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                Pointer to floating point-vector values.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListenerfv(System.Int32,System.Single*)">
            <summary>
                Sets a floating point-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                Pointer to floating point-vector values.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListeneri(System.Int32,System.Int32)">
            <summary>
                Sets an integer property of the listener.
            </summary>
            <param name="attribute">
                The name of the attribute to be set.
            </param>
            <param name="val">
                The integer value to set the attribute to.
            </param>
            <remarks>
                There are no integer listener attributes at this time.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alListener3i(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets an integer property for the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The value to set the attribute to.
            </param>
            <param name="value2">
                The value to set the attribute to.
            </param>
            <param name="value3">
                The value to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alListeneriv(System.Int32,System.Int32@)">
            <summary>
                Sets a integer-vector property of the listener.
            </summary>
            <param name="attribute">
                <para>
                    The name of the attribute to be set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ORIENTATION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                Pointer to integer-vector values.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alQueuei(System.Int32,System.Int32,System.Int32)">
            <summary>
                Unknown.
            </summary>
            <param name="source">
                Unknown.
            </param>
            <param name="attribute">
                Unknown.
            </param>
            <param name="val">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSource3f(System.Int32,System.Int32,System.Single,System.Single,System.Single)">
            <summary>
                Sets a source property requiring three floating point values.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The float values which the attribute will be set to.
            </param>
            <param name="value2">
                The float values which the attribute will be set to.
            </param>
            <param name="value3">
                The float values which the attribute will be set to.
            </param>
            <remarks>
                This function is an alternative to <see cref="M:Tao.OpenAl.Al.alSourcefv(System.Int32,System.Int32,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcef(System.Int32,System.Int32,System.Single)">
            <summary>
                Sets a floating point property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_PITCH" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_ROLLOFF_FACTOR" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_REFERENCE_DISTANCE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MIN_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_MAX_GAIN" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_GAIN" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                The value to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcefv(System.Int32,System.Int32,System.Single@)">
            <summary>
                Sets a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcefv(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Sets a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcefv(System.Int32,System.Int32,System.Single*)">
            <summary>
                Sets a floating point-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcei(System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets an integer property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_RELATIVE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_INNER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_CONE_OUTER_ANGLE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_LOOPING" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_BUFFER" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_SOURCE_STATE" /></item>
                    </list>
                </para>
            </param>
            <param name="val">
                The value to set the attribute to.
            </param>
            <remarks>
                The buffer name zero is reserved as a “Null Buffer" and is accepted by
                <b>alSourcei(…, Al.AL_BUFFER, …)</b> as a valid buffer of zero length.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceiv(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Sets a integer-vector property of a source.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute being set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="values">
                A pointer to the vector to set the attribute to.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSource3i(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
                Sets a source property requiring three integer values.
            </summary>
            <param name="source">
                Source name whose attribute is being set.
            </param>
            <param name="attribute">
                <para>
                    The name of the attribute to set:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_POSITION" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_VELOCITY" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_DIRECTION" /></item>
                    </list>
                </para>
            </param>
            <param name="value1">
                The int values which the attribute will be set to.
            </param>
            <param name="value2">
                The int values which the attribute will be set to.
            </param>
            <param name="value3">
                The int values which the attribute will be set to.
            </param>
            <remarks>
                This function is an alternative to <see cref="M:Tao.OpenAl.Al.alSourceiv(System.Int32,System.Int32,System.Int32*)" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePause(System.Int32)">
            <summary>
                Pauses a source.
            </summary>
            <param name="source">
                The name of the source to be paused.
            </param>
            <remarks>
                The paused source will have its state changed to <see cref="F:Tao.OpenAl.Al.AL_PAUSED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePausev(System.Int32,System.Int32@)">
            <summary>
                Pauses a set of sources.
            </summary>
            <param name="number">
                The number of sources to be paused.
            </param>
            <param name="source">
                A pointer to an array of sources to be paused.
            </param>
            <remarks>
                The paused sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PAUSED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePausev(System.Int32,System.IntPtr)">
            <summary>
                Pauses a set of sources.
            </summary>
            <param name="number">
                The number of sources to be paused.
            </param>
            <param name="sources">
                A pointer to an array of sources to be paused.
            </param>
            <remarks>
                The paused sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PAUSED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePausev(System.Int32,System.Int32*)">
            <summary>
                Pauses a set of sources.
            </summary>
            <param name="number">
                The number of sources to be paused.
            </param>
            <param name="sources">
                A pointer to an array of sources to be paused.
            </param>
            <remarks>
                The paused sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PAUSED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePlay(System.Int32)">
            <summary>
                Plays a source.
            </summary>
            <param name="source">
                The name of the source to be played.
            </param>
            <remarks>
                The playing source will have its state changed to <see cref="F:Tao.OpenAl.Al.AL_PLAYING" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePlayv(System.Int32,System.Int32@)">
            <summary>
                Plays a set of sources.
            </summary>
            <param name="number">
                The number of sources to be played.
            </param>
            <param name="source">
                A pointer to an array of sources to be played.
            </param>
            <remarks>
                The playing sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PLAYING" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePlayv(System.Int32,System.IntPtr)">
            <summary>
                Plays a set of sources.
            </summary>
            <param name="number">
                The number of sources to be played.
            </param>
            <param name="sources">
                A pointer to an array of sources to be played.
            </param>
            <remarks>
                The playing sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PLAYING" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourcePlayv(System.Int32,System.Int32*)">
            <summary>
                Plays a set of sources.
            </summary>
            <param name="number">
                The number of sources to be played.
            </param>
            <param name="sources">
                A pointer to an array of sources to be played.
            </param>
            <remarks>
                The playing sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_PLAYING" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceQueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Queues a set of buffers on a source.
            </summary>
            <param name="source">
                The name of the source to queue buffers onto.
            </param>
            <param name="number">
                The number of buffers to be queued.
            </param>
            <param name="buffer">
                A pointer to an array of buffer names to be queued.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceQueueBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Queues a set of buffers on a source.
            </summary>
            <param name="source">
                The name of the source to queue buffers onto.
            </param>
            <param name="number">
                The number of buffers to be queued.
            </param>
            <param name="buffers">
                A pointer to an array of buffer names to be queued.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceQueueBuffers(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Queues a set of buffers on a source.
            </summary>
            <param name="source">
                The name of the source to queue buffers onto.
            </param>
            <param name="number">
                The number of buffers to be queued.
            </param>
            <param name="buffers">
                A pointer to an array of buffer names to be queued.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceRewind(System.Int32)">
            <summary>
                Stops the source and sets its state to <see cref="F:Tao.OpenAl.Al.AL_INITIAL" />.
            </summary>
            <param name="source">
                The name of the source to be rewound.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceRewindv(System.Int32,System.Int32@)">
            <summary>
                Stops a set of sources and sets all their states to <see cref="F:Tao.OpenAl.Al.AL_INITIAL" />.
            </summary>
            <param name="number">
                The number of sources to be rewound.
            </param>
            <param name="source">
                A pointer to an array of sources to be rewound.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceRewindv(System.Int32,System.IntPtr)">
            <summary>
                Stops a set of sources and sets all their states to <see cref="F:Tao.OpenAl.Al.AL_INITIAL" />.
            </summary>
            <param name="number">
                The number of sources to be rewound.
            </param>
            <param name="sources">
                A pointer to an array of sources to be rewound.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceRewindv(System.Int32,System.Int32*)">
            <summary>
                Stops a set of sources and sets all their states to <see cref="F:Tao.OpenAl.Al.AL_INITIAL" />.
            </summary>
            <param name="number">
                The number of sources to be rewound.
            </param>
            <param name="sources">
                A pointer to an array of sources to be rewound.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceStop(System.Int32)">
            <summary>
                Stops a source.
            </summary>
            <param name="source">
                The name of the source to be stopped.
            </param>
            <remarks>
                The stopped source will have its state changed to <see cref="F:Tao.OpenAl.Al.AL_STOPPED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceStopv(System.Int32,System.Int32@)">
            <summary>
                Stops a set of sources.
            </summary>
            <param name="number">
                The number of sources to stop.
            </param>
            <param name="source">
                A pointer to an array of sources to be stopped.
            </param>
            <remarks>
                The stopped sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_STOPPED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceStopv(System.Int32,System.IntPtr)">
            <summary>
                Stops a set of sources.
            </summary>
            <param name="number">
                The number of sources to stop.
            </param>
            <param name="sources">
                A pointer to an array of sources to be stopped.
            </param>
            <remarks>
                The stopped sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_STOPPED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceStopv(System.Int32,System.Int32*)">
            <summary>
                Stops a set of sources.
            </summary>
            <param name="number">
                The number of sources to stop.
            </param>
            <param name="sources">
                A pointer to an array of sources to be stopped.
            </param>
            <remarks>
                The stopped sources will have their state changed to <see cref="F:Tao.OpenAl.Al.AL_STOPPED" />.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceUnqueueBuffers(System.Int32,System.Int32,System.Int32@)">
            <summary>
                Unqueues a set of buffers attached to a source.
            </summary>
            <param name="source">
                The name of the source to unqueue buffers from.
            </param>
            <param name="number">
                The number of buffers to be unqueued.
            </param>
            <param name="buffer">
                A pointer to an array of buffer names that were removed.
            </param>
            <remarks>
                The unqueue operation will only take place if all <i>number</i> buffers can be
                removed from the queue.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceUnqueueBuffers(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Unqueues a set of buffers attached to a source.
            </summary>
            <param name="source">
                The name of the source to unqueue buffers from.
            </param>
            <param name="number">
                The number of buffers to be unqueued.
            </param>
            <param name="buffers">
                A pointer to an array of buffer names that were removed.
            </param>
            <remarks>
                The unqueue operation will only take place if all <i>number</i> buffers can be
                removed from the queue.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alSourceUnqueueBuffers(System.Int32,System.Int32,System.Int32*)">
            <summary>
                Unqueues a set of buffers attached to a source.
            </summary>
            <param name="source">
                The name of the source to unqueue buffers from.
            </param>
            <param name="number">
                The number of buffers to be unqueued.
            </param>
            <param name="buffers">
                A pointer to an array of buffer names that were removed.
            </param>
            <remarks>
                The unqueue operation will only take place if all <i>number</i> buffers can be
                removed from the queue.
            </remarks>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenEnvironmentIASIG(System.Int32,System.Int32@)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
            <returns>
                Unknown.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenEnvironmentIASIG(System.Int32,System.IntPtr)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
            <returns>
                Unknown.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alGenEnvironmentIASIG(System.Int32,System.Int32*)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
            <returns>
                Unknown.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteEnvironmentIASIG(System.Int32,System.Int32@)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteEnvironmentIASIG(System.Int32,System.IntPtr)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alDeleteEnvironmentIASIG(System.Int32,System.Int32*)">
            <summary>
                Unknown.
            </summary>
            <param name="number">
                Unknown.
            </param>
            <param name="environments">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alIsEnvironmentIASIG(System.Int32)">
            <summary>
                Unknown.
            </summary>
            <param name="environment">
                Unknown.
            </param>
            <returns>
                Unknown.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.alEnvironmentiIASIG(System.Int32,System.Int32,System.Int32)">
            <summary>
                Unknown.
            </summary>
            <param name="environmentId">
                Unknown.
            </param>
            <param name="attribute">
                Unknown.
            </param>
            <param name="val">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.alEnvironmentfIASIG(System.Int32,System.Int32,System.Int32)">
            <summary>
                Unknown.
            </summary>
            <param name="environmentId">
                Unknown.
            </param>
            <param name="attribute">
                Unknown.
            </param>
            <param name="val">
                Unknown.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXSetBufferMode(System.Int32,System.Int32*,System.Int32)">
            <summary>
                Sets the X-RAM mode for the specified buffers.
            </summary>
            <param name="n">
                The number of buffers to set.
            </param>
            <param name="buffers">
                A pointer to an array of buffers to set.
            </param>
            <param name="mode">
                <para>
                    The X-RAM buffer mode for the specified buffers.
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXSetBufferMode(System.Int32,System.Int32[],System.Int32)">
            <summary>
                Sets the X-RAM mode for the specified buffers.
            </summary>
            <param name="n">
                The number of buffers to set.
            </param>
            <param name="buffers">
                An array of buffers to set, with minimum n elements.
            </param>
            <param name="mode">
                <para>
                    The X-RAM buffer mode for the specified buffers.
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXSetBufferMode(System.Int32,System.Int32@,System.Int32)">
            <summary>
                Sets the X-RAM mode for the specified buffers.
            </summary>
            <param name="n">
                The number of buffers to set.
            </param>
            <param name="buffers">
                A pointer to an array of buffers to set.
            </param>
            <param name="mode">
                <para>
                    The X-RAM buffer mode for the specified buffers.
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </param>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXGetBufferMode(System.Int32,System.Int32*)">
            <summary>
                Gets the X-RAM mode for the specified buffer.
            </summary>
            <param name="buffer">
                Buffer to retreive the property for.
            </param>
            <param name="reserved">
            Not used yet.
            </param>
            <returns>
                <para>
                    One of the following values:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXGetBufferMode(System.Int32,System.Int32[])">
            <summary>
                Gets the X-RAM mode for the specified buffer.
            </summary>
            <param name="buffer">
                Buffer to retreive the property for.
            </param>
            <param name="reserved">
            Not used yet.
            </param>
            <returns>
                <para>
                    One of the following values:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Al.EAXGetBufferMode(System.Int32,System.Int32@)">
            <summary>
                Gets the X-RAM mode for the specified buffer.
            </summary>
            <param name="buffer">
                Buffer to retreive the property for.
            </param>
            <param name="reserved">
            Not used yet.
            </param>
            <returns>
                <para>
                    One of the following values:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_AUTOMATIC" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_HARDWARE" /></item>
                        <item><see cref="F:Tao.OpenAl.Al.AL_STORAGE_ACCESSIBLE" /></item>
                    </list>
                </para>
            </returns>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALENABLEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDISABLEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALISENABLEDDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSTRINGDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBOOLEANVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETINTEGERVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETFLOATVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETDOUBLEVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBOOLEANDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETINTEGERDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETFLOATDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETDOUBLEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETERRORDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALISEXTENSIONPRESENTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETPROCADDRESSDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETENUMVALUEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENERFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENER3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENERFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENERIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENER3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALLISTENERIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENERFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENER3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENERFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENERIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENER3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETLISTENERIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGENSOURCESDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDELETESOURCESDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALISSOURCEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCE3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCE3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCEFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCE3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCEFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCEIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCE3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETSOURCEIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEPLAYVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCESTOPVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEREWINDVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEPAUSEVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEPLAYDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCESTOPDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEREWINDDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEPAUSEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEQUEUEBUFFERSDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSOURCEUNQUEUEBUFFERSDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGENBUFFERSDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDELETEBUFFERSDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALISBUFFERDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFERDATADelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFERFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFER3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFERFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFERIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFER3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALBUFFERIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFERFDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFER3FDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFERFVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFERIDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFER3IDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALGETBUFFERIVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDOPPLERFACTORDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDOPPLERVELOCITYDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALSPEEDOFSOUNDDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Al.LPALDISTANCEMODELDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Al.ReloadFunctions">
            <summary>
            Reloads OpenAL extension functions.
            </summary>
            <remarks>
            <para>
            Call this function to reload context-dependent extension OpenAL entry points. This should be done 
            whenever you change the current OpenAL context, or in the case you cannot (or do not want)
            to use the automatic initialisation.
            </para>
            <para>
            Calling this function before the automatic initialisation has taken place will result
            in the Al class being initialised twice. This is harmless, but, given the choice, 
            the automatic initialisation should be preferred.
            </para>
            </remarks>
        </member>
        <member name="T:Tao.OpenAl.Alc">
            <summary>
                OpenAL binding for .NET, implementing ALC 1.1.
            </summary>
            <remarks>
                Binds functions and definitions in OpenAL32.dll or libAL.so.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_NATIVE_LIBRARY">
            <summary>
                Specifies OpenAl's native library archive.
            </summary>
            <remarks>
                Specifies OpenAl32.dll everywhere; will be mapped via .config for mono.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Alc.CALLING_CONVENTION">
            <summary>
                Specifies the calling convention.
            </summary>
            <remarks>
                Specifies <see cref="F:System.Runtime.InteropServices.CallingConvention.Cdecl" />.
            </remarks>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_INVALID">
            <summary>
                Bad value.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_FALSE">
            <summary>
                bool false.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_TRUE">
            <summary>
                bool true.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_NO_ERROR">
            <summary>
                No error.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_MAJOR_VERSION">
            <summary>
                Major version.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_MINOR_VERSION">
            <summary>
                Minor version.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_ATTRIBUTES_SIZE">
            <summary>
                Attributes size.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_ALL_ATTRIBUTES">
            <summary>
                All attributes.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_CAPTURE_DEVICE_SPECIFIER">
            <summary>
                Capture device specifier.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER">
            <summary>
                Capture default device specifier.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_CAPTURE_SAMPLES">
            <summary>
                Capture samples.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_DEFAULT_DEVICE_SPECIFIER">
            <summary>
                Default device specifier.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_DEVICE_SPECIFIER">
            <summary>
                Device specifier.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_EXTENSIONS">
            <summary>
                Extensions.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_FREQUENCY">
            <summary>
                Frequency.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_REFRESH">
            <summary>
                Refresh.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_SYNC">
            <summary>
                Sync.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_MONO_SOURCES">
            <summary>
                Num of requested Mono (3D) Sources
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_STEREO_SOURCES">
            <summary>
                Num of requested Stereo Sources
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_INVALID_DEVICE">
            <summary>
                The device argument does not name a valid device.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_INVALID_CONTEXT">
            <summary>
                The context argument does not name a valid context.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_INVALID_ENUM">
            <summary>
                A function was called at inappropriate time, or in an inappropriate way, causing
                an illegal state.  This can be an incompatible value, object ID, and/or function.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_INVALID_VALUE">
            <summary>
                Illegal value passed as an argument to an AL call.  Applies to parameter values,
                but not to enumerations.
            </summary>
        </member>
        <member name="F:Tao.OpenAl.Alc.ALC_OUT_OF_MEMORY">
            <summary>
                A function could not be completed, because there is not enough memory available.
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCloseDevice(System.IntPtr)">
            <summary>
                Closes a device.
            </summary>
            <param name="device">
                A pointer to an opened device.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCreateContext(System.IntPtr,System.Int32@)">
            <summary>
                Creates a context using a specified device.
            </summary>
            <param name="device">
                A pointer to a device.
            </param>
            <param name="attribute">
                <para>
                    A pointer to a set of attributes:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_REFRESH" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_SYNC" /></item>
                    </list>
                </para>
            </param>
            <returns>
                Returns a pointer to the new context (IntPtr.Zero on failure).
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCreateContext(System.IntPtr,System.IntPtr)">
            <summary>
                Creates a context using a specified device.
            </summary>
            <param name="device">
                A pointer to a device.
            </param>
            <param name="attribute">
                <para>
                    A pointer to a set of attributes:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_REFRESH" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_SYNC" /></item>
                    </list>
                </para>
            </param>
            <returns>
                Returns a pointer to the new context (IntPtr.Zero on failure).
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCreateContext(System.IntPtr,System.Int32*)">
            <summary>
                Creates a context using a specified device.
            </summary>
            <param name="device">
                A pointer to a device.
            </param>
            <param name="attribute">
                <para>
                    A pointer to a set of attributes:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_FREQUENCY" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_REFRESH" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_SYNC" /></item>
                    </list>
                </para>
            </param>
            <returns>
                Returns a pointer to the new context (IntPtr.Zero on failure).
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcDestroyContext(System.IntPtr)">
            <summary>
                Destroys a context.
            </summary>
            <param name="context">
                Pointer to the context to be destroyed.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetContextsDevice(System.IntPtr)">
            <summary>
                Gets the device for a context.
            </summary>
            <param name="context">
                The context to query.
            </param>
            <returns>
                A pointer to a device or IntPtr.Zero on failue.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetCurrentContext">
            <summary>
                Retrieves the current context.
            </summary>
            <returns>
                Returns a pointer to the current context or IntPtr.Zero on failure.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetEnumValue(System.IntPtr,System.String)">
            <summary>
                Retrieves the enum value for a specified enumeration name.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="enumName">
                A null terminated string describing the enum value.
            </param>
            <returns>
                Returns the enum value described by the <i>enumName</i> string.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetError(System.IntPtr)">
            <summary>
                Retrieves the current context error state.
            </summary>
            <param name="device">
                The device to query.
            </param>
            <returns>
                The current context error state will be returned.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetIntegerv(System.IntPtr,System.Int32,System.Int32,System.Int32@)">
            <summary>
                Returns integers related to the context.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="attribute">
                <para>
                    An attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MAJOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MINOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ATTRIBUTES_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ALL_ATTRIBUTES" /></item>
                    </list>
                </para>
            </param>
            <param name="size">
                The size of the destination buffer provided.
            </param>
            <param name="data">
                A pointer to the data to be returned.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetIntegerv(System.IntPtr,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Returns integers related to the context.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="attribute">
                <para>
                    An attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MAJOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MINOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ATTRIBUTES_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ALL_ATTRIBUTES" /></item>
                    </list>
                </para>
            </param>
            <param name="size">
                The size of the destination buffer provided.
            </param>
            <param name="data">
                A pointer to the data to be returned.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetIntegerv(System.IntPtr,System.Int32,System.Int32,System.Int32*)">
            <summary>
                Returns integers related to the context.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="attribute">
                <para>
                    An attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MAJOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_MINOR_VERSION" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ATTRIBUTES_SIZE" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_ALL_ATTRIBUTES" /></item>
                    </list>
                </para>
            </param>
            <param name="size">
                The size of the destination buffer provided.
            </param>
            <param name="data">
                A pointer to the data to be returned.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetProcAddress(System.IntPtr,System.String)">
            <summary>
                Retrieves the address of a specified context extension function.
            </summary>
            <param name="device">
                The device to be queried for the function.
            </param>
            <param name="functionName">
                A null terminated string describing the function.
            </param>
            <returns>
                Returns the address of the function, or IntPtr.Zero if it is not found.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetString(System.IntPtr,System.Int32)">
            <summary>
                Returns strings related to the context.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="attribute">
                <para>
                    An attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_DEFAULT_DEVICE_SPECIFIER" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_DEVICE_SPECIFIER" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_EXTENSIONS" /></item>
                    </list>
                </para>
            </param>
            <returns>
                Returns a pointer to a string.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcGetStringv(System.IntPtr,System.Int32)">
            <summary>
                Returns strings related to the context.
            </summary>
            <param name="device">
                The device to be queried.
            </param>
            <param name="attribute">
                <para>
                    An attribute to be retrieved:
                </para>
                <para>
                    <list type="bullet">
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_DEFAULT_DEVICE_SPECIFIER" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_DEVICE_SPECIFIER" /></item>
                        <item><see cref="F:Tao.OpenAl.Alc.ALC_EXTENSIONS" /></item>
                    </list>
                </para>
            </param>
            <returns>
                Returns a pointer to a string.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcIsExtensionPresent(System.IntPtr,System.String)">
            <summary>
                Queries if a specified context extension is available.
            </summary>
            <param name="device">
                The device to be queried for an extension.
            </param>
            <param name="extensionName">
                A null terminated string describing the extension.
            </param>
            <returns>
                Returns <see cref="F:Tao.OpenAl.Alc.ALC_TRUE" /> if the extension is available,
                <see cref="F:Tao.OpenAl.Alc.ALC_FALSE" /> if the extension is not available.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcMakeContextCurrent(System.IntPtr)">
            <summary>
                Makes a specified context the current context.
            </summary>
            <param name="context">
                Pointer to the new context.
            </param>
            <returns>
                Returns an error code on failure.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcOpenDevice(System.String)">
            <summary>
                Opens a device by name.
            </summary>
            <param name="deviceName">
                A null-terminated string describing a device.
            </param>
            <returns>
                Returns a pointer to the opened device.
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcProcessContext(System.IntPtr)">
            <summary>
                Tells a context to begin processing.
            </summary>
            <param name="context">
                Pointer to the new context.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcSuspendContext(System.IntPtr)">
            <summary>
                Suspends processing on a specified context.
            </summary>
            <param name="context">
                A pointer to the context to be suspended.
            </param>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCaptureOpenDevice(System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
                
            </summary>
            <returns>
                The Open Device will be captured
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCaptureCloseDevice(System.IntPtr)">
            <summary>
                
            </summary>
            <returns>
                
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCaptureStart(System.IntPtr)">
            <summary>
                
            </summary>
            <returns>
                
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCaptureStop(System.IntPtr)">
            <summary>
                
            </summary>
            <returns>
                
            </returns>
        </member>
        <member name="M:Tao.OpenAl.Alc.alcCaptureSamples(System.IntPtr,System.IntPtr,System.Int32)">
            <summary>
                
            </summary>
            <returns>
                
            </returns>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCREATECONTEXTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCMAKECONTEXTCURRENTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCPROCESSCONTEXTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCSUSPENDCONTEXTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCDESTROYCONTEXTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCGETCURRENTECONTEXTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCGETCONTEXTSDEVICEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCLOSEDEVICEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCGETERRORDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCGETINTEGERVDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCAPTURECLOSEDEVICEDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCAPTURESTARTDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCAPTURESTOPDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="T:Tao.OpenAl.Alc.LPALCCAPTURESAMPLESDelegate">
            <summary>
            
            </summary>
        </member>
        <member name="M:Tao.OpenAl.Delegates.GetDelegateForExtensionMethod(System.String,System.Type)">
            <summary>
            Creates a System.Delegate that can be used to call a dynamically exported OpenAL function.
            </summary>
            <param name="name">The function string for the OpenAL function</param>
            <param name="signature">The signature of the OpenAL function.</param>
            <returns>
            A System.Delegate that can be used to call this OpenAL function or null
            if the function is not available in the current OpenAL context.
            </returns>
        </member>
        <member name="P:NeoAxisMeshSimplifier.Internal.UVChannels`1.Item(System.Int32)">
            <summary>
            Gets or sets a specific channel by index.
            </summary>
            <param name="index">The channel index.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Internal.UVChannels`1.Resize(System.Int32,System.Boolean)">
            <summary>
            Resizes all channels at once.
            </summary>
            <param name="capacity">The new capacity.</param>
            <param name="trimExess">If exess memory should be trimmed.</param>
        </member>
        <member name="T:NeoAxisMeshSimplifier.MathHelper">
            <summary>
            Math helpers.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.PI">
            <summary>
            The Pi constant.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.PId">
            <summary>
            The Pi constant.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.Deg2Rad">
            <summary>
            Degrees to radian constant.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.Deg2Radd">
            <summary>
            Degrees to radian constant.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.Rad2Deg">
            <summary>
            Radians to degrees constant.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MathHelper.Rad2Degd">
            <summary>
            Radians to degrees constant.
            </summary>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MathHelper.Min(System.Double,System.Double,System.Double)">
            <summary>
            Returns the minimum of three values.
            </summary>
            <param name="val1">The first value.</param>
            <param name="val2">The second value.</param>
            <param name="val3">The third value.</param>
            <returns>The minimum value.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MathHelper.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Clamps a value between a minimum and a maximum value.
            </summary>
            <param name="value">The value to clamp.</param>
            <param name="min">The minimum value.</param>
            <param name="max">The maximum value.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MathHelper.TriangleArea(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Calculates the area of a triangle.
            </summary>
            <param name="p0">The first point.</param>
            <param name="p1">The second point.</param>
            <param name="p2">The third point.</param>
            <returns>The triangle area.</returns>
        </member>
        <member name="T:NeoAxisMeshSimplifier.SymmetricMatrix">
            <summary>
            A symmetric matrix.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m0">
            <summary>
            The m11 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m1">
            <summary>
            The m12 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m2">
            <summary>
            The m13 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m3">
            <summary>
            The m14 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m4">
            <summary>
            The m22 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m5">
            <summary>
            The m23 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m6">
            <summary>
            The m24 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m7">
            <summary>
            The m33 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m8">
            <summary>
            The m34 component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.SymmetricMatrix.m9">
            <summary>
            The m44 component.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.SymmetricMatrix.Item(System.Int32)">
            <summary>
            Gets the component value with a specific index.
            </summary>
            <param name="index">The component index.</param>
            <returns>The value.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.#ctor(System.Double)">
            <summary>
            Creates a symmetric matrix with a value in each component.
            </summary>
            <param name="c">The component value.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a symmetric matrix.
            </summary>
            <param name="m0">The m11 component.</param>
            <param name="m1">The m12 component.</param>
            <param name="m2">The m13 component.</param>
            <param name="m3">The m14 component.</param>
            <param name="m4">The m22 component.</param>
            <param name="m5">The m23 component.</param>
            <param name="m6">The m24 component.</param>
            <param name="m7">The m33 component.</param>
            <param name="m8">The m34 component.</param>
            <param name="m9">The m44 component.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a symmetric matrix from a plane.
            </summary>
            <param name="a">The plane x-component.</param>
            <param name="b">The plane y-component</param>
            <param name="c">The plane z-component</param>
            <param name="d">The plane w-component</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.op_Addition(NeoAxisMeshSimplifier.SymmetricMatrix,NeoAxisMeshSimplifier.SymmetricMatrix)">
            <summary>
            Adds two matrixes together.
            </summary>
            <param name="a">The left hand side.</param>
            <param name="b">The right hand side.</param>
            <returns>The resulting matrix.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.Determinant1">
            <summary>
            Determinant(0, 1, 2, 1, 4, 5, 2, 5, 7)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.Determinant2">
            <summary>
            Determinant(1, 2, 3, 4, 5, 6, 5, 7, 8)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.Determinant3">
            <summary>
            Determinant(0, 2, 3, 1, 5, 6, 2, 7, 8)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.Determinant4">
            <summary>
            Determinant(0, 1, 3, 1, 4, 6, 2, 5, 8)
            </summary>
            <returns></returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.SymmetricMatrix.Determinant(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Computes the determinant of this matrix.
            </summary>
            <param name="a11">The a11 index.</param>
            <param name="a12">The a12 index.</param>
            <param name="a13">The a13 index.</param>
            <param name="a21">The a21 index.</param>
            <param name="a22">The a22 index.</param>
            <param name="a23">The a23 index.</param>
            <param name="a31">The a31 index.</param>
            <param name="a32">The a32 index.</param>
            <param name="a33">The a33 index.</param>
            <returns>The determinant value.</returns>
        </member>
        <member name="T:NeoAxisMeshSimplifier.Vector3d">
            <summary>
            A double precision 3D vector.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.Vector3d.zero">
            <summary>
            The zero vector.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.Vector3d.Epsilon">
            <summary>
            The vector epsilon.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.Vector3d.x">
            <summary>
            The x component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.Vector3d.y">
            <summary>
            The y component.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.Vector3d.z">
            <summary>
            The z component.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.Vector3d.Magnitude">
            <summary>
            Gets the magnitude of this vector.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.Vector3d.MagnitudeSqr">
            <summary>
            Gets the squared magnitude of this vector.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.Vector3d.Normalized">
            <summary>
            Gets a normalized vector from this vector.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.Vector3d.Item(System.Int32)">
            <summary>
            Gets or sets a specific component by index in this vector.
            </summary>
            <param name="index">The component index.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.#ctor(System.Double)">
            <summary>
            Creates a new vector with one value for all components.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Creates a new vector.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.#ctor(NeoAxis.Vector3)">
            <summary>
            Creates a new vector from a single precision vector.
            </summary>
            <param name="vector">The single precision vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Addition(NeoAxisMeshSimplifier.Vector3d,NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Adds two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Subtraction(NeoAxisMeshSimplifier.Vector3d,NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Subtracts two vectors.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Multiply(NeoAxisMeshSimplifier.Vector3d,System.Double)">
            <summary>
            Scales the vector uniformly.
            </summary>
            <param name="a">The vector.</param>
            <param name="d">The scaling value.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Multiply(System.Double,NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Scales the vector uniformly.
            </summary>
            <param name="d">The scaling vlaue.</param>
            <param name="a">The vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Division(NeoAxisMeshSimplifier.Vector3d,System.Double)">
            <summary>
            Divides the vector with a float.
            </summary>
            <param name="a">The vector.</param>
            <param name="d">The dividing float value.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_UnaryNegation(NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Subtracts the vector from a zero vector.
            </summary>
            <param name="a">The vector.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Equality(NeoAxisMeshSimplifier.Vector3d,NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Returns if two vectors equals eachother.
            </summary>
            <param name="lhs">The left hand side vector.</param>
            <param name="rhs">The right hand side vector.</param>
            <returns>If equals.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Inequality(NeoAxisMeshSimplifier.Vector3d,NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Returns if two vectors don't equal eachother.
            </summary>
            <param name="lhs">The left hand side vector.</param>
            <param name="rhs">The right hand side vector.</param>
            <returns>If not equals.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Implicit(NeoAxis.Vector3)~NeoAxisMeshSimplifier.Vector3d">
            <summary>
            Implicitly converts from a single-precision vector into a double-precision vector.
            </summary>
            <param name="v">The single-precision vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.op_Explicit(NeoAxisMeshSimplifier.Vector3d)~NeoAxis.Vector3">
            <summary>
            Implicitly converts from a double-precision vector into a single-precision vector.
            </summary>
            <param name="v">The double-precision vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Set(System.Double,System.Double,System.Double)">
            <summary>
            Set x, y and z components of an existing vector.
            </summary>
            <param name="x">The x value.</param>
            <param name="y">The y value.</param>
            <param name="z">The z value.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Scale(NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Multiplies with another vector component-wise.
            </summary>
            <param name="scale">The vector to multiply with.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Normalize">
            <summary>
            Normalizes this vector.
            </summary>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Clamp(System.Double,System.Double)">
            <summary>
            Clamps this vector between a specific range.
            </summary>
            <param name="min">The minimum component value.</param>
            <param name="max">The maximum component value.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.GetHashCode">
            <summary>
            Returns a hash code for this vector.
            </summary>
            <returns>The hash code.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Equals(System.Object)">
            <summary>
            Returns if this vector is equal to another one.
            </summary>
            <param name="obj">The other vector to compare to.</param>
            <returns>If equals.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Equals(NeoAxisMeshSimplifier.Vector3d)">
            <summary>
            Returns if this vector is equal to another one.
            </summary>
            <param name="other">The other vector to compare to.</param>
            <returns>If equals.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.ToString">
            <summary>
            Returns a nicely formatted string for this vector.
            </summary>
            <returns>The string.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.ToString(System.String)">
            <summary>
            Returns a nicely formatted string for this vector.
            </summary>
            <param name="format">The float format.</param>
            <returns>The string.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Dot(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Dot Product of two vectors.
            </summary>
            <param name="lhs">The left hand side vector.</param>
            <param name="rhs">The right hand side vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Cross(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Cross Product of two vectors.
            </summary>
            <param name="lhs">The left hand side vector.</param>
            <param name="rhs">The right hand side vector.</param>
            <param name="result">The resulting vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Angle(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Calculates the angle between two vectors.
            </summary>
            <param name="from">The from vector.</param>
            <param name="to">The to vector.</param>
            <returns>The angle.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Lerp(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@,System.Double,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Performs a linear interpolation between two vectors.
            </summary>
            <param name="a">The vector to interpolate from.</param>
            <param name="b">The vector to interpolate to.</param>
            <param name="t">The time fraction.</param>
            <param name="result">The resulting vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Scale(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Multiplies two vectors component-wise.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <param name="result">The resulting vector.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.Vector3d.Normalize(NeoAxisMeshSimplifier.Vector3d@,NeoAxisMeshSimplifier.Vector3d@)">
            <summary>
            Normalizes a vector.
            </summary>
            <param name="value">The vector to normalize.</param>
            <param name="result">The resulting normalized vector.</param>
        </member>
        <member name="T:NeoAxisMeshSimplifier.MeshUtils">
            <summary>
            Contains utility methods for meshes.
            </summary>
        </member>
        <member name="F:NeoAxisMeshSimplifier.MeshUtils.UVChannelCount">
            <summary>
            The count of supported UV channels.
            </summary>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MeshUtils.GetUsedUVComponents(System.Collections.Generic.IList{NeoAxis.Vector4})">
            <summary>
            Returns the number of used UV components in a UV set.
            </summary>
            <param name="uvs">The UV set.</param>
            <returns>The number of used UV components.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MeshUtils.ConvertUVsTo2D(System.Collections.Generic.IList{NeoAxis.Vector4})">
            <summary>
            Converts a list of 4D UVs into 2D.
            </summary>
            <param name="uvs">The list of UVs.</param>
            <returns>The array of 2D UVs.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.MeshUtils.ConvertUVsTo3D(System.Collections.Generic.IList{NeoAxis.Vector4})">
            <summary>
            Converts a list of 4D UVs into 3D.
            </summary>
            <param name="uvs">The list of UVs.</param>
            <returns>The array of 3D UVs.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NeoAxisMeshSimplifier.ResizableArray`1" -->
        <member name="P:NeoAxisMeshSimplifier.ResizableArray`1.Length">
            <summary>
            Gets the length of this array.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.ResizableArray`1.Data">
            <summary>
            Gets the internal data buffer for this array.
            </summary>
        </member>
        <member name="P:NeoAxisMeshSimplifier.ResizableArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the element value at a specific index.
            </summary>
            <param name="index">The element index.</param>
            <returns>The element value.</returns>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.#ctor(System.Int32)">
            <summary>
            Creates a new resizable array.
            </summary>
            <param name="capacity">The initial array capacity.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new resizable array.
            </summary>
            <param name="capacity">The initial array capacity.</param>
            <param name="length">The initial length of the array.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.#ctor(`0[])">
            <summary>
            Creates a new resizable array.
            </summary>
            <param name="initialArray">The initial array.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.Clear">
            <summary>
            Clears this array.
            </summary>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.Resize(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Resizes this array.
            </summary>
            <param name="length">The new length.</param>
            <param name="trimExess">If exess memory should be trimmed.</param>
            <param name="clearMemory">If memory that is no longer part of the array should be cleared.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.TrimExcess">
            <summary>
            Trims any excess memory for this array.
            </summary>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.Add(`0)">
            <summary>
            Adds a new item to the end of this array.
            </summary>
            <param name="item">The new item.</param>
        </member>
        <member name="M:NeoAxisMeshSimplifier.ResizableArray`1.ToArray">
            <summary>
            Returns a copy of the resizable array as an actually array.
            </summary>
            <returns>The array.</returns>
        </member>
        <member name="T:Sto.StoParallelMergeSort`1">
            <summary>
            Implements a parallel and stable mergesort algorithm.
            - The sorting will run parallel, to take advantage of several processors.
            - This algorithm is stable, equal elements keep their original order, so
              you can sort several times without mixing up previous sortings.
            - The class can sort any type of arrays and lists (IList interface).
            - When reaching small block sizes, it switches to InsertionSort for
              performance reasons.
            </summary>
            <example>
            There are extensions available, so you can simply use it this way:
            <code>
            // Using the default comparer
            int[] intList = new int[] { 8, 0, 2, 2, 3 };
            intList.ParallelMergeSort();
            
            // Using your own comparer
            string[] stringList = new string[] { "The", "brown", "fox", "jumps", "Fox" };
            stringList.ParallelMergeSort((a, b) => string.Compare(a, b));
            </code>
            It is also possible to work with the class directly, just create an
            instance of the StoParallelMergeSort class and call its Sort method.
            </example>
            <remarks>
            The mergesort algorithm needs at least 30% less comparisons than a
            quicksort, even less by switching to InsertionSort. This can be crucial,
            because the comparison of two objects can be expensive.
            </remarks>
            <typeparam name="T">Type of the list elements.</typeparam>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the StoParallelMergeSort class.
            </summary>
            <param name="comparer">A comparer which can compare two elements
            of the list.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.Sort(`0[])">
            <summary>
            Sorts an array of elements.
            </summary>
            <param name="list">Array of elements to sort.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.Sort(System.Collections.Generic.IList{`0})">
            <summary>
            Sorts a list of elements.
            </summary>
            <param name="list">List of elements to sort.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.SortBlock(`0[],`0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Recursively called method which sorts a given range of the list.
            It splits the sorting into two independend blocks and afterwards calls
            the merging procedure for the independend sorted blocks.
            </summary>
            <param name="list">Original list with elements to sort.</param>
            <param name="tempList">Reused temporary array used for the merging.</param>
            <param name="beginBlock">First index of block to sort.</param>
            <param name="endBlock">Last index of the block to sort.</param>
            <param name="recursionDepth">Level of recursion.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.MergeTwoBlocks(`0[],`0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two consecutive and already sorted blocks from <paramref name="sourceList"/>
            to one sorted block in <paramref name="targetList"/>. The block in the target list
            will begin at the same index.
            </summary>
            <param name="sourceList">Contains the two blocks to merge.</param>
            <param name="targetList">Receives sorted elements.</param>
            <param name="beginBlock1">First index of block 1, this is also the index
            where the block in targetList will start.</param>
            <param name="endBlock1">Index of last element of block 1.</param>
            <param name="beginBlock2">First index of block 2 (always endBlock1 + 1).</param>
            <param name="endBlock2">Index of last element of block2.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.InsertionSort(`0[],System.Int32,System.Int32)">
            <summary>
            Implementation of the insertionsort which is efficient for small lists.
            </summary>
            <param name="list">List with element to sort.</param>
            <param name="beginBlock">Index of the first element in the block to sort.</param>
            <param name="endBlock">Index of the last element in the block so sort.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.InsertionSortBinarySearch(`0[],System.Int32,System.Int32,`0)">
            <summary>
            Searches for the index in <paramref name="list"/> where the <paramref name="elementToInsert"/>
            should be inserted. The given search range has to be sorted already.
            If the element has an equal value to other existing element in the list,
            it will be placed after the existing elements (keep it stable).
            <example>
            list: { 3, 6, 9 }
            insert 2 => {^, 3, 6, 9 }
            insert 3 => {3, ^, 6, 9 }
            insert 10 => {3, 6, 9, ^ }
            </example>
            </summary>
            <param name="list">Search for the position within this list.</param>
            <param name="beginBlock">First index of the already sorted block, where we
            want to insert the element.</param>
            <param name="endBlock">Last index of the already sorted block, where we
            want to insert the element.</param>
            <param name="elementToInsert">Element we are looking for a place.</param>
            <returns>The index in list, where the element should be inserted.</returns>
        </member>
        <member name="M:Sto.StoParallelMergeSort`1.DetermineMaxParallelDepth">
            <summary>
            Determines the depth of splitting the sorting into 2 tasks.
            This results in 2^depth tasks.
            </summary>
            <returns>Depth of splitting.</returns>
        </member>
        <member name="T:Sto.StoParallelMergeSortExtension">
            <summary>
            Implements an extension to all objects with <see cref="T:System.Collections.Generic.IList`1"/> interfaces.
            </summary>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.#ctor(System.Collections.Generic.IComparer{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the StoParallelMergeSort class.
            </summary>
            <param name="comparer">A comparer which can compare two elements
            of the list.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.Sort(`0*,System.Int32)">
            <summary>
            Sorts an array of elements.
            </summary>
            <param name="list">Array of elements to sort.</param>
            <param name="ascending">Determines whether the elements will be sorted
            in ascending order. A descending sorting will still be stable.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.SortBlock(`0*,`0*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Recursively called method which sorts a given range of the list.
            It splits the sorting into two independend blocks and afterwards calls
            the merging procedure for the independend sorted blocks.
            </summary>
            <param name="list">Original list with elements to sort.</param>
            <param name="tempList">Reused temporary array used for the merging.</param>
            <param name="beginBlock">First index of block to sort.</param>
            <param name="endBlock">Last index of the block to sort.</param>
            <param name="recursionDepth">Level of recursion.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.MergeTwoBlocks(`0*,`0*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two consecutive and already sorted blocks from <paramref name="sourceList"/>
            to one sorted block in <paramref name="targetList"/>. The block in the target list
            will begin at the same index.
            </summary>
            <param name="sourceList">Contains the two blocks to merge.</param>
            <param name="targetList">Receives sorted elements.</param>
            <param name="beginBlock1">First index of block 1, this is also the index
            where the block in targetList will start.</param>
            <param name="endBlock1">Index of last element of block 1.</param>
            <param name="beginBlock2">First index of block 2 (always endBlock1 + 1).</param>
            <param name="endBlock2">Index of last element of block2.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.InsertionSort(`0*,System.Int32,System.Int32)">
            <summary>
            Implementation of the insertionsort which is efficient for small lists.
            </summary>
            <param name="list">List with element to sort.</param>
            <param name="beginBlock">Index of the first element in the block to sort.</param>
            <param name="endBlock">Index of the last element in the block so sort.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.InsertionSortBinarySearch(`0*,System.Int32,System.Int32,`0)">
            <summary>
            Searches for the index in <paramref name="list"/> where the <paramref name="elementToInsert"/>
            should be inserted. The given search range has to be sorted already.
            If the element has an equal value to other existing element in the list,
            it will be placed after the existing elements (keep it stable).
            <example>
            list: { 3, 6, 9 }
            insert 2 => {^, 3, 6, 9 }
            insert 3 => {3, ^, 6, 9 }
            insert 10 => {3, 6, 9, ^ }
            </example>
            </summary>
            <param name="list">Search for the position within this list.</param>
            <param name="beginBlock">First index of the already sorted block, where we
            want to insert the element.</param>
            <param name="endBlock">Last index of the already sorted block, where we
            want to insert the element.</param>
            <param name="elementToInsert">Element we are looking for a place.</param>
            <returns>The index in list, where the element should be inserted.</returns>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanaged`1.DetermineMaxParallelDepth">
            <summary>
            Determines the depth of splitting the sorting into 2 tasks.
            This results in 2^depth tasks.
            </summary>
            <returns>Depth of splitting.</returns>
        </member>
        <member name="T:Sto.StoParallelMergeSortExtensionUnmanaged">
            <summary>
            Implements an extension to all objects with <see cref="T:System.Collections.Generic.IList`1"/> interfaces.
            </summary>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.#ctor(NeoAxis.PointerComparison{`0},System.Boolean)">
            <summary>
            Initializes a new instance of the StoParallelMergeSort class.
            </summary>
            <param name="comparer">A comparer which can compare two elements
            of the list.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.Sort(`0*,System.Int32)">
            <summary>
            Sorts an array of elements.
            </summary>
            <param name="list">Array of elements to sort.</param>
            <param name="ascending">Determines whether the elements will be sorted
            in ascending order. A descending sorting will still be stable.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.SortBlock(`0*,`0*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Recursively called method which sorts a given range of the list.
            It splits the sorting into two independend blocks and afterwards calls
            the merging procedure for the independend sorted blocks.
            </summary>
            <param name="list">Original list with elements to sort.</param>
            <param name="tempList">Reused temporary array used for the merging.</param>
            <param name="beginBlock">First index of block to sort.</param>
            <param name="endBlock">Last index of the block to sort.</param>
            <param name="recursionDepth">Level of recursion.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.MergeTwoBlocks(`0*,`0*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Merges two consecutive and already sorted blocks from <paramref name="sourceList"/>
            to one sorted block in <paramref name="targetList"/>. The block in the target list
            will begin at the same index.
            </summary>
            <param name="sourceList">Contains the two blocks to merge.</param>
            <param name="targetList">Receives sorted elements.</param>
            <param name="beginBlock1">First index of block 1, this is also the index
            where the block in targetList will start.</param>
            <param name="endBlock1">Index of last element of block 1.</param>
            <param name="beginBlock2">First index of block 2 (always endBlock1 + 1).</param>
            <param name="endBlock2">Index of last element of block2.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.InsertionSort(`0*,System.Int32,System.Int32)">
            <summary>
            Implementation of the insertionsort which is efficient for small lists.
            </summary>
            <param name="list">List with element to sort.</param>
            <param name="beginBlock">Index of the first element in the block to sort.</param>
            <param name="endBlock">Index of the last element in the block so sort.</param>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.InsertionSortBinarySearch(`0*,System.Int32,System.Int32,`0*)">
            <summary>
            Searches for the index in <paramref name="list"/> where the <paramref name="elementToInsert"/>
            should be inserted. The given search range has to be sorted already.
            If the element has an equal value to other existing element in the list,
            it will be placed after the existing elements (keep it stable).
            <example>
            list: { 3, 6, 9 }
            insert 2 => {^, 3, 6, 9 }
            insert 3 => {3, ^, 6, 9 }
            insert 10 => {3, 6, 9, ^ }
            </example>
            </summary>
            <param name="list">Search for the position within this list.</param>
            <param name="beginBlock">First index of the already sorted block, where we
            want to insert the element.</param>
            <param name="endBlock">Last index of the already sorted block, where we
            want to insert the element.</param>
            <param name="elementToInsert">Element we are looking for a place.</param>
            <returns>The index in list, where the element should be inserted.</returns>
        </member>
        <member name="M:Sto.StoParallelMergeSortUnmanagedPointerComparison`1.DetermineMaxParallelDepth">
            <summary>
            Determines the depth of splitting the sorting into 2 tasks.
            This results in 2^depth tasks.
            </summary>
            <returns>Depth of splitting.</returns>
        </member>
        <member name="T:Sto.StoParallelMergeSortExtensionUnmanagedPointerComparison">
            <summary>
            Implements an extension to all objects with <see cref="T:System.Collections.Generic.IList`1"/> interfaces.
            </summary>
        </member>
    </members>
</doc>
